//This Source Code Form is subject to the terms of the Mozilla
//Public License, v. 2.0. If a copy of the MPL was not distributed
//with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#Использовать cmdline
#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать v8runner
#Использовать strings
#Использовать gitsync

Перем Лог;
Перем КодВозврата;
Перем мВозможныеКоманды;
Перем ЭтоWindows;

Функция ВозможныеКоманды()
	
	Если мВозможныеКоманды = Неопределено Тогда
		//Работаем в 8.3.8, внешние обработки как исходники и только исходники. 
		мВозможныеКоманды = Новый Структура;
		мВозможныеКоманды.Вставить("ЮнитТест", "xunit");
		мВозможныеКоманды.Вставить("ТестироватьПоведение", "vanessa");
		мВозможныеКоманды.Вставить("Тестирование", "tests");
        //Работаем с исходниками конфигурации
        мВозможныеКоманды.Вставить("СобратьИзИсходников", "compile"); //1
		мВозможныеКоманды.Вставить("СобратьИзИсходниковТекущуюКонфигурацию", "compilecurrent"); //1
        мВозможныеКоманды.Вставить("РазобратьНаИсходникиТекущуюКонфигурацию", "decompilecurrent"); //1
        мВозможныеКоманды.Вставить("РазобратьНаИсходники", "decompile"); //1
        мВозможныеКоманды.Вставить("СобратьТолькоИзмененые", "compilediff"); //изменения определяем из различий в git
        //Работаем с расширениями.
        мВозможныеКоманды.Вставить("РазобратьРасширение", "decompileext");
        мВозможныеКоманды.Вставить("СобратьРасширение", "compileext");
        мВозможныеКоманды.Вставить("ЗагрузитьРасширение", "loadext");
		//Работаем с внешними обработками
		мВозможныеКоманды.Вставить("ДекомпилироватьEpf", "decompileepf");
		мВозможныеКоманды.Вставить("СобратьEpf", "compileepf");
		
        
		мВозможныеКоманды.Вставить("Помощь", "--help");
	КонецЕсли;
	
	Возврат мВозможныеКоманды;
	
КонецФункции

Процедура ВывестиСправку()
	
	Сообщить("Утилита запуска различных тестов и задач");
	Сообщить(" ");
	Сообщить("Параметры командной строки:");
	Сообщить("  xunit inputPath outputPath [--ibname, --db-user, --db-pwd, --path]");
	Сообщить("		Запуск тестирования xUnitFor1c");
    Сообщить("		inputPath путь к каталогу или к файлу с тестами");
    Сообщить("		outputPath путь к каталогу с отчетами");
    
    Сообщить("		--path путь к внешней обработке, по умолчанию ищу в vendor/xunitfor1c/xddtestrunner.epf");
	
    Сообщить("  vanessa inputPath outputPath [--ibname, --db-user, --db-pwd, --path]");
	Сообщить("		Запуск тестирования vanessa-behavior");
    Сообщить("		inputPath путь к каталогу или к файлу с тестами");
    Сообщить("		outputPath путь к каталогу с отчетами");
    Сообщить("		--path путь к внешней обработке, по умолчанию ищу в vendor/vanessa-behavior/behavior.epf");
    Сообщить("		--pathsettings путь к файлу настроек");
    
    Сообщить("  compile inputPath outputPath [--v8version]");
    Сообщить("      собирает из исходников cf файл, указываем каталог откуда брать и каталог куда сохранить cf");
    
    Сообщить("  decompile inputPath outputPath [--v8version]");
    Сообщить("      разбриаем cf файл на исходники");
    
    Сообщить("  decompilecurrent outputPath [--ibname, --db-user, --db-pwd, --v8version]");
    Сообщить("      разбриаем из текущей базы cf на исходники");
    
    Сообщить("  compilecurrent inputPath [--ibname, --db-user, --db-pwd, --v8version]");
    Сообщить("       загружаем исходники в текущую базу");
     
	Сообщить(" общие для всех параметры");
	Сообщить("       --v8version Маска версии платформы (8.3, 8.3.5, 8.3.6.2299 и т.п.)");
    Сообщить(" общие для xunit, vaness, tests, compilecurrent, decompilecurrent");
    Сообщить("       --ibname строка подключения к базе данных");
	Сообщить("       --db-user имя пользователя для подключения к базе");
	Сообщить("       --db-pwd пароль пользователя");
    
	Сообщить("	--help");
	Сообщить("		Показ этого экрана");
	
КонецПроцедуры

Процедура УбедитьсяЧтоФайлИлиКаталогСуществует(Знач Путь)

	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл <%1> должен существовать", Путь);
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

	СтрокаПереименования = Переименования.Добавить();
	СтрокаПереименования.Источник = Источник;
	СтрокаПереименования.Приемник = Приемник;

	Возврат СтрокаПереименования;

КонецФункции

// Выполняет перенос файлов из каталога плоской выгрузки в каталог с иерархической структурой метаданных.
//
Процедура РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(Знач КаталогПлоскойВыгрузки, Знач КаталогИерархическойВыгрузки, Знач Формат) Экспорт

	Лог.Информация("Раскладываем модули по папкам согласно иерархии метаданных");

	КэшПереименований = Новый Соответствие;

	УбедитьсяЧтоФайлИлиКаталогСуществует(КаталогПлоскойВыгрузки);

	Если ПустаяСтрока(КаталогИерархическойВыгрузки) Тогда
		ВызватьИсключение "Не задан каталог выгрузки модулей по иерархии";
	КонецЕсли;

	ФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойВыгрузки);
	Если Не ФайлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(КаталогИерархическойВыгрузки);
		//ЗарегистрироватьВременныйФайл(КаталогИерархическойСтруктурыМодулей); TODO выяснить почему временный?
	КонецЕсли;

	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник");
	Переименования.Колонки.Добавить("Приемник");

	ИскатьВПодкаталогах = Истина;
	СписокФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы(), ИскатьВПодкаталогах);
	Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
	Для Каждого Файл Из СписокФайлов Цикл
		ИмяФайлаДляПереименования = Файл.Имя;

			ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогПлоскойВыгрузки, "");
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			Если Файл.ЭтоКаталог() Тогда
				ИмяКаталога = ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла);
				ФайлКаталога = Новый Файл(ИмяКаталога);
				Если ФайлКаталога.Существует() = Ложь Тогда
					СоздатьКаталог(ИмяКаталога);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИмяФайлаДляПереименования = ИмяНовогоФайла;

		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;

		ДобавитьПереименование(Переименования,ИмяФайлаДляПереименования,ИмяНовогоФайла);

		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);

		Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
			ФайлКаталога = Новый Файл(КаталогФормы);
			Если ФайлКаталога.Существует() Тогда 
				УдалитьФайлы(ФайлКаталога.Путь, ПолучитьМаскуВсеФайлы());
			КонецЕсли; 
			СоздатьКаталог(КаталогФормы);
			РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы);
			//УдалитьФайлы(НовыйФайл.ПолноеИмя);
		КонецЕсли;

	КонецЦикла;

	ТекстовыйДокумент = Новый ЗаписьТекста(ОбъединитьПути(КаталогИерархическойВыгрузки, "renames.txt"));
	Для Каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ЗаписатьСтроку(ЭлементСтроки.Источник+"-->"+СтрЗаменить(ЭлементСтроки.Приемник, "/", "\"));
	КонецЦикла;
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
	ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки = "" тогда
		КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	КонецЕсли;
	ФайлПрограммыРаспаковки = "v8unpack";
	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки+""" -parse """+ФайлДляРаспаковки.ПолноеИмя+""" """+КаталогРаспаковки+"""";
	Если НЕ ЭтоWindows Тогда 
		СтрокаЗапуска = "sh -c '"+СтрокаЗапуска+"'";
	КонецЕсли;
	Лог.Отладка(СтрокаЗапуска);

	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	ФайлМодуля = Новый Файл(ОбъединитьПути(КаталогРаспаковки, "module"));
	Если ФайлМодуля.Существует() Тогда 
		ПереместитьФайл(ФайлМодуля.ПолноеИмя, ФайлМодуля.ПолноеИмя + ".bsl");
	КонецЕсли; 

КонецПроцедуры

Процедура УпаковатьКонтейнерМетаданных(Знач КаталогРаспаковки, Знач ФайлРаспаковки)
	ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки = "" тогда
		КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	КонецЕсли;
	ФайлПрограммыРаспаковки = "v8unpack";
    ФайлМодуля = Новый Файл(ОбъединитьПути(КаталогРаспаковки, "module.bsl"));
	Если ФайлМодуля.Существует() Тогда 
		КопироватьФайл(ФайлМодуля.ПолноеИмя, ОбъединитьПути(ФайлМодуля.Путь, "module") );
	КонецЕсли;
	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки+""" -build """+КаталогРаспаковки+""" """+ФайлДляРаспаковки.ПолноеИмя+"""";
	Если НЕ ЭтоWindows Тогда 
		СтрокаЗапуска = "sh -c '"+СтрокаЗапуска+"'";
	КонецЕсли;
	Лог.Отладка(СтрокаЗапуска);

	ЗапуститьПриложение(СтрокаЗапуска,,Истина);

КонецПроцедуры


Процедура РазобратьНаИсходникиТекущуюКонфигурацию(Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	//Синхронизатор = Новый СинхронизаторХранилища();
    
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + КаталогРаспаковки + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
	
КонецПроцедуры

Процедура РазобратьФайлКонфигурации(Знач ФайлКонфигурации, Знач ВыходнойКаталог, Знач ВерсияПлатформы="")

	ОбъектФайл = Новый Файл(ФайлКонфигурации);
	Если ОбъектФайл.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл конфигурации %1 не найден", ФайлКонфигурации.ПолноеИмя);
	КонецЕсли;

	КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	КаталогВыгрузки = Новый Файл(ВыходнойКаталог); 
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		СоздатьКаталог(ВыходнойКаталог);
	КонецЕсли;
    
    Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);
			
    РазобратьНаИсходникиТекущуюКонфигурацию(ВыходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
	
	ВременныеФайлы.УдалитьФайл(КаталогПлоскойВыгрузки);
	ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);

КонецПроцедуры

Функция ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований)
	КаталогВременнойСтруктуры = ВременныеФайлы.СоздатьКаталог();
	Текст = Новый ЧтениеТекста(ФайлПереименований);
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		//Сообщить(Стр);
		Стр = Текст.ПрочитатьСтроку();
        Если ЭтоWindows = Ложь Тогда 
            Стр = СтрЗаменить(Стр, "\", "/");
        КонецЕсли;
        
        Индекс = Найти(Стр, "-->");
        Если Индекс > 0 Тогда
            ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Лев(Стр, Индекс-1));
            //Сообщить(ИмяНовогоФайла);
            ФайлНовый = Новый Файл(ИмяНовогоФайла); 
            КаталогНовый = Новый Файл(ФайлНовый.Путь);
            Если НЕ КаталогНовый.Существует() Тогда 
                СоздатьКаталог(ФайлНовый.Путь);
            КонецЕсли;
            ПутьФайлСтарый = ОбъединитьПути(ВходнойКаталог, Сред(Стр, Индекс+3));
            //Сообщить(ФайлСтарый);
            КопироватьФайл(ПутьФайлСтарый, ИмяНовогоФайла);
            Если Нрег(Прав(ФайлНовый.ПолноеИмя, 5)) = ".form" Или Нрег(ФайлНовый.Имя) = "form.bin" Тогда
				ФайлСтарый = Новый Файл(ПутьФайлСтарый);
                КаталогФормыСтарый = ОбъединитьПути(ФайлСтарый.Путь, ФайлНовый.ИмяБезРасширения);
			    КаталогФормыНовый = ОбъединитьПути(ФайлНовый.Путь, ФайлНовый.ИмяБезРасширения);
				СоздатьКаталог(КаталогФормыНовый);
				МассивФайлов = НайтиФайлы(КаталогФормыСтарый, ПолучитьМаскуВсеФайлы());
				Для Каждого Элемент из МассивФайлов Цикл 
					КопироватьФайл(Элемент.ПолноеИмя, ОбъединитьПути(КаталогФормыНовый, Элемент.ИмяБезРасширения));
				КонецЦикла;
					
                УпаковатьКонтейнерМетаданных(КаталогФормыНовый, ФайлНовый.ПолноеИмя);
                //РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы)
            КонецЕсли;
        КонецЕсли;
        
        
	КонецЦикла;	
    
    Возврат КаталогВременнойСтруктуры
	
КонецФункции

Процедура СобратьИзИсходниковТекущуюКонфигурацию(Знач ВходнойКаталог,  Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="") 
	
	КаталогВыгрузки = Новый Файл(ВходнойКаталог); 
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Каталог исходников %1 не найден", КаталогВыгрузки.ПолноеИмя);
	КонецЕсли;
    
	ФайлПереименований = Новый Файл(ОбъединитьПути(ВходнойКаталог, "renames.txt"));
	Если ФайлПереименований.Существует() Тогда 
		//КаталогЗагрузки = 
        КаталогЗагрузки = ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований.ПолноеИмя);
	Иначе
		КаталогЗагрузки = ВходнойКаталог;
	КонецЕсли;
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	//Синхронизатор = Новый СинхронизаторХранилища();
    
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + ВходнойКаталог + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
	
	
КонецПроцедуры

Процедура СобратьФайлКонфигурации(Знач ВходнойКаталог, Знач ФайлКонфигурации, Знач ВерсияПлатформы="") 
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
    
   	КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
	Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойБазы + """", "", "");
	
	СобратьИзИсходниковТекущуюКонфигурацию(ВходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpCfg """ + ФайлКонфигурации + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
КонецПроцедуры

Процедура РазобратьНаИсходникиРасшрение(ИмяРасширения, Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	//Синхронизатор = Новый СинхронизаторХранилища();
    
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + Каталог + """");
    ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
	
КонецПроцедуры

Процедура СобратьИзИсходниковРасшрение(Каталог, ИмяРасширения, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	//Синхронизатор = Новый СинхронизаторХранилища();
    
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
    ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
	
КонецПроцедуры

// Выполняем запуск тестов для vannessa 
//
// Параметры:
//	ПутьВходящихДанных - <Строка> - Может принимать путь к каталогу, так и к файлу для тестирования
//	ВыходнойКаталогОтчета - <Строка> - Путь к каталогу с отчетом. 
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ПутьКНастройкам - <Строка> - Путь к файлу настроек запуска тестов
//  ПутьКИнструментам - <Строка> - путь к инструментам, по умолчанию ./vendor/vaness-behavior
//  ВерсияПлатформы - <Строка> - Версия платформы
//
Процедура ЗапуститьТестироватьПоведение(Знач ПутьВходящихДанных, Знач ВыходнойКаталогОтчета, 
										Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", 
										Знач ПутьКНастройкам="", Знач ПутьКИнструментам="", Знач ВерсияПлатформы="") 
										
	Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКИнструментам) Тогда
		ПутьКИнструментам = "./vanessa-behavior/vanessa-behavior.epf";
    КонецЕсли;
	
	Если ПустаяСтрока(ПутьКНастройкам) Тогда
		// можем передать все настройки и через переменные окружения.
		//ВызватьИсключение "Не указан путь к настройкам для запуска тестов";
	КонецЕсли;
    КлючЗапуска = """StartFeaturePlayer;VBParams=" + ПутьКНастройкам +  """";
	Лог.Отладка(КлючЗапуска);
	ДополнительныеКлючи = " /Execute""" + ПутьКИнструментам + """ /TESTMANAGER ";
	
	Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, Истина, ДополнительныеКлючи);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
		ВременныеФайлы.УдалитьФайлы(КаталогВременнойИБ);
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение "ЗапуститьТестироватьПоведение";
	КонецПопытки;
	    
КонецПроцедуры // ЗапуститьТестироватьПоведение()

// Выполняем запуск тестов для xunit 
//
// Параметры:
//	ПутьВходящихДанных - <Строка> - Может принимать путь к каталогу, так и к файлу для тестирования
//	ВыходнойКаталогОтчета - <Строка> - Путь к каталогу с отчетом, по умолчанию пустой 
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ПутьКИнструментам - <Строка> - путь к инструментам, по умолчанию ./tools/xUnitFor1C/xddTestRunner.epf
//  ВерсияПлатформы - <Строка> - Версия платформы
//
Процедура ЗапуститьТестироватьЮнит(Знач ПутьВходящихДанных, Знач ВыходнойКаталогОтчета="", 
										Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", 
										Знач ПутьКИнструментам="", Знач ВерсияПлатформы="") 
										
	Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКИнструментам) Тогда
		ПутьКИнструментам = "./tools/xUnitFor1C/xddTestRunner.epf";
    КонецЕсли;
	
	КлючЗапуска = """xddRun ЗагрузчикКаталога "+ПутьВходящихДанных+";";
	
	Если Не ПустаяСтрока(ВыходнойКаталогОтчета) Тогда 
		КлючЗапуска = КлючЗапуска + "xddReport ГенераторОтчетаJUnitXML "+ВыходнойКаталогОтчета+";xddShutdown;";
	КонецЕсли;
	КлючЗапуска = КлючЗапуска + """";
	Лог.Отладка(КлючЗапуска);
	
	ДополнительныеКлючи = " /Execute""" + ПутьКИнструментам + """ /TESTMANAGER ";
	Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, Истина, ДополнительныеКлючи);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
		ВременныеФайлы.УдалитьФайлы(КаталогВременнойИБ);
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение "ЗапуститьТестироватьЮнит";
	КонецПопытки;
	    
КонецПроцедуры // ЗапуститьТестироватьЮнит()


Процедура Декомпилировать(Знач Путь, Знач КаталогВыгрузки, Знач КорневойПутьВыходной = "", Знач КорневойПутьВходной = "", Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт
	Файл = Новый Файл(Путь);
	КорневойПутьВыходной = ?(Файл.ЭтоКаталог(), Файл.ПолноеИмя, Файл.Путь);
	
	Если Файл.ЭтоКаталог() Тогда
		РазобратьКаталог(Файл, КаталогВыгрузки, КорневойПутьВыходной, СтрокаПодключения, Пользователь, Пароль);
	Иначе
		
		РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КорневойПутьВыходной, СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
КонецПроцедуры

Процедура РазобратьКаталог(Знач ОбъектКаталога, Знач КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "") Экспорт
	ПутьКаталога = ОбъектКаталога.ПолноеИмя;

	ОтносительныйПутьКаталога = ПолучитьОтносительныйПутьФайла(КаталогКорень, ПутьКаталога);
	ОтносительныйПутьКаталога = ?(ПустаяСтрока(ОтносительныйПутьКаталога), ПутьКаталога, ОтносительныйПутьКаталога);
	Лог.Информация(СтрШаблон("Подготовка выгрузки каталога %1 в каталог %2, корень %3", ОтносительныйПутьКаталога, КаталогВыгрузки, КаталогКорень));
	
	ИмяКаталогаВыгрузки = Новый Файл(КаталогВыгрузки).Имя;
	
	Файлы = НайтиФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Если Файл.Имя = ".git" Тогда
				Продолжить;
			КонецЕсли;
			
			РазобратьКаталог(Новый Файл(Файл.ПолноеИмя), КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль);

		ИначеЕсли ТипФайлаПоддерживается(Файл) Тогда
			Лог.Информация(СтрШаблон("Подготовка выгрузки файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));

			РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль);

			Лог.Информация(СтрШаблон("Завершена выгрузка файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));
		КонецЕсли;
	КонецЦикла;
	
	Лог.Информация(СтрШаблон("Завершена выгрузка каталога %1 в каталог %2, корень %3", ОтносительныйПутьКаталога, КаталогВыгрузки, КаталогКорень));
КонецПроцедуры

Функция РазобратьФайлВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень = "", Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "") Экспорт
	ПутьФайла = Файл.ПолноеИмя;
	Лог.Информация(СтрШаблон("Проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));
	
	КаталогИсходников = РазобратьФайлВнутрВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль);
	
	Лог.Информация(СтрШаблон("Завершена проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));
	
	Возврат КаталогИсходников;
	
КонецФункции

Функция ТипФайлаПоддерживается(Файл)
	Если ПустаяСтрока(Файл.Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поз = Найти(".epf,.erf,", Файл.Расширение+",");
	Возврат Поз > 0;
	
КонецФункции

Функция РазобратьФайлВнутрВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "")
	
	ПутьФайла = Файл.ПолноеИмя;
	Если Не ТипФайлаПоддерживается(Файл) Тогда
		ВызватьИсключение "Тип файла """+Файл.Расширение+""" не поддерживается";
	КонецЕсли;
	
	Ожидаем.Что(Файл.Существует(), "Файл " + ПутьФайла + " должен существовать").ЭтоИстина();
	
	ОтносительныйПутьКаталогаФайла = ПолучитьОтносительныйПутьФайла(КаталогКорень, ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения));
	Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
	
	ПутьКаталогаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
	Лог.Отладка("ПутьКаталогаИсходников <"+ПутьКаталогаИсходников+">");
	ПапкаИсходников = Новый Файл(ПутьКаталогаИсходников);

	ОбеспечитьПустойКаталог(ПапкаИсходников);
	ЗапуститьРаспаковкуВнешнихОбработок(Файл, ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль);
	
	Возврат ПапкаИсходников.ПолноеИмя;
	
КонецФункции

Функция ПолучитьОтносительныйПутьФайла(КаталогКорень, ВнутреннийКаталог)
	Если ПустаяСтрока(КаталогКорень) Тогда	
		Возврат "";
	КонецЕсли;
	
	ФайлКорень = Новый Файл(КаталогКорень);
	ФайлВнутреннийКаталог = Новый Файл(ВнутреннийКаталог);
	Рез = СтрЗаменить(ФайлВнутреннийКаталог.ПолноеИмя, ФайлКорень.ПолноеИмя, "");
	Если Лев(Рез, 1) = "\" Тогда
		Рез = Сред(Рез, 2);
	КонецЕсли;
	Если Прав(Рез, 1) = "\" Тогда
		Рез = Лев(Рез, СтрДлина(Рез)-1);
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура ЗапуститьРаспаковкуВнешнихОбработок(Знач Файл, Знач ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль)
	
	Лог.Отладка("Запускаем распаковку файла");
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	
	Параметры.Добавить("/DumpExternalDataProcessorOrReportToFiles");
	Параметры.Добавить(ПапкаИсходников.ПолноеИмя);
	Параметры.Добавить(Файл.ПолноеИмя);
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
	Лог.Отладка("Очищаем каталог временной ИБ");
	
КонецПроцедуры

Процедура ОбеспечитьПустойКаталог(Знач ФайлОбъектКаталога)
	
	Если Не ФайлОбъектКаталога.Существует() Тогда
		Лог.Отладка("Создаем новый каталог " + ФайлОбъектКаталога.ПолноеИмя);
		СоздатьКаталог(ФайлОбъектКаталога.ПолноеИмя);
	ИначеЕсли ФайлОбъектКаталога.ЭтоКаталог() Тогда
		Лог.Отладка("Очищаем каталог " + ФайлОбъектКаталога.ПолноеИмя);
		УдалитьФайлы(ФайлОбъектКаталога.ПолноеИмя, ПолучитьМаскуВсеФайлы());
	Иначе
		ВызватьИсключение "Путь " + ФайлОбъектКаталога.ПолноеИмя + " не является каталогом. Выгрузка невозможна";
	КонецЕсли;
	
КонецПроцедуры


Функция Компилировать(Знач Путь, Знач КаталогВыгрузки, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт

	Рекурсивно = Истина;
	ПутьКИсходникам = ОбъединитьПути(ТекущийКаталог(), Путь);
 
	ПапкаИсходников = Новый Файл(ПутьКИсходникам);
	
	Ожидаем.Что(ПапкаИсходников.Существует(), "Папка " + ПутьКИсходникам + " должна существовать").ЭтоИстина();
	
	Если ПапкаИсходников.ЭтоКаталог() = Ложь Тогда
		
		//Нам передали путь к измененому файлу, необходимо определить корневую папку. 
		Для Счетчик = 0 По 5 Цикл
			ПутьКИсходникам = ПапкаИсходников.Путь;
			Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникам) Тогда
				ПапкаИсходников = Новый Файл(ПутьКИсходникам);
				Рекурсивно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Ожидаем.Что(Рекурсивно, "Корневой файл обработки должен существовать " + ПутьКИсходникам).ЭтоИстина();
	КонецЕсли;
	
	Ожидаем.Что(ПапкаИсходников.ЭтоКаталог(), "Путь " + ПутьКИсходникам + "должен быть каталогом").ЭтоИстина();
	
	
	Если Рекурсивно Тогда
		СобратьКаталог(ПутьКИсходникам, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль);
	Иначе
		СобратьФайлВнешнейОбработки(ПутьКИсходникам, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

КонецФункции

Процедура СобратьКаталог(Знач ПутьКИсходникам, КаталогВыгрузки, Знач СтрокаПодключения, Знач Пользователь, Знач Пароль)

	СписокФайловВКаталоге = НайтиФайлы(ПутьКИсходникам, ПолучитьМаскуВсеФайлы());

    ПутиКИсходникам = Новый Соответствие;
    
	Для Каждого Файл Из СписокФайловВКаталоге Цикл
		
		Если НЕ Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоПутьКИсходнымКодамОбработок(Файл.ПолноеИмя) Тогда
			Если НЕ Новый Файл(КаталогВыгрузки).Существует() Тогда
				СоздатьКаталог(КаталогВыгрузки);
			КонецЕсли;
			
			СобратьФайлВнешнейОбработки(Файл.ПолноеИмя, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль);
		Иначе
			НовыйПутьВыгрузки = ОбъединитьПути(КаталогВыгрузки, Файл.Имя);
			СобратьКаталог(Файл.ПолноеИмя, НовыйПутьВыгрузки, СтрокаПодключения, Пользователь, Пароль);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция СобратьФайлВнешнейОбработки(Знач ПутьКИсходникам, Знач КаталогВыгрузки, Знач СтрокаПодключения, Знач Пользователь, Знач Пароль)
	
	Лог.Информация("Собираю исходники <"+ПутьКИсходникам+">");

	ПапкаИсходников = Новый Файл(ПутьКИсходникам);
	ИмяПапки = ПапкаИсходников.Имя;
    ИмяФайлаОбъекта = ОбъединитьПути(ТекущийКаталог(), КаталогВыгрузки, ИмяПапки);
	НайденныйФайл = НайтиФайлы(ПутьКИсходникам, "*.xml");
	Ожидаем.Что(НайденныйФайл.Количество(), "Базовый файл xml <" + ПутьКИсходникам +  ">*.xml должен существовать").Больше(0);
		
	Сообщить(ИмяФайлаОбъекта);
	СобратьФайлВнешнейОбработкиИзИсходников(НайденныйФайл[0], ИмяФайлаОбъекта, СтрокаПодключения, Пользователь, Пароль);
	Лог.Информация("Успешно собран файл "+ИмяФайлаОбъекта);

	Возврат ИмяФайлаОбъекта;

КонецФункции

Процедура СобратьФайлВнешнейОбработкиИзИсходников(ПапкаИсходников, ИмяФайлаОбъекта, Знач СтрокаПодключения, Пользователь, Пароль)
	Лог.Информация("Собираю файл из исходников <"+ПапкаИсходников+"> в файл "+ИмяФайлаОбъекта);

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	

	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/LoadExternalDataProcessorOrReportFromFiles");
	Параметры.Добавить(ПапкаИсходников.ПолноеИмя);
	Параметры.Добавить(ИмяФайлаОбъекта);
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
	Лог.Отладка("Очищаем каталог временной ИБ");

КонецПроцедуры

Функция ЭтоПутьКИсходнымКодамОбработок(ПутьКПапке)
	
	Результат = Ложь;
	
	МассивИмен = НайтиФайлы(ПутьКПапке, "*.xml");
	Для Каждого Элемент из МассивИмен Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Элемент.ПолноеИмя);
		Содержание = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Если Найти(Содержание, "<ExternalDataProcessor uuid=") > 0 ИЛИ Найти(Содержание, "<ExternalReport uuid=") > 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьТипФайлаПоКаталогуИсходников(Знач КаталогИсходников)

	ПутьКФайлуРут = ОбъединитьПути(КаталогИсходников, "root");
	ФайлРут = Новый Файл(ПутьКФайлуРут);
	
	Ожидаем.Что(ФайлРут.Существует(), "Файл <" + ПутьКФайлуРут +  "> должен существовать").ЭтоИстина();
	Ожидаем.Что(ФайлРут.ЭтоКаталог(), "<" + ПутьКФайлуРут +  "> должен быть файлом").ЭтоЛожь();
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуРут);
	СодержаниеРут = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	МассивСтрокРут = СтрРазделить(СодержаниеРут, ",");
	Ожидаем.Что(МассивСтрокРут.Количество(), "Некорректный формат файла root").Больше(1);
	
	ПутьКФайлуКорневойКонтейнер = ОбъединитьПути(КаталогИсходников, МассивСтрокРут[1]);
	ФайлКорневойКонтейнер = Новый Файл(ПутьКФайлуКорневойКонтейнер);
		
	Ожидаем.Что(ФайлКорневойКонтейнер.Существует(), "Файл <" + ПутьКФайлуКорневойКонтейнер +  "> должен существовать").ЭтоИстина();
	Ожидаем.Что(ФайлКорневойКонтейнер.ЭтоКаталог(), "<" + ПутьКФайлуКорневойКонтейнер +  "> должен быть файлом").ЭтоЛожь();

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуКорневойКонтейнер);
	СодержаниеКорневойКонтейнер = "";
	Для сч = 1 По 7 Цикл
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Если ПрочитаннаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		СодержаниеКорневойКонтейнер = СодержаниеКорневойКонтейнер + ПрочитаннаяСтрока;
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	МассивСтрокКорневойКонтейнер = СтрРазделить(СодержаниеКорневойКонтейнер, ",");
	Ожидаем.Что(МассивСтрокКорневойКонтейнер.Количество(), "Некорректный формат файла корневого контейнера <" + ПутьКФайлуКорневойКонтейнер + ">").Больше(3);
	
	ИдентификаторТипаОбъекта = СокрЛП(МассивСтрокКорневойКонтейнер[3]);
	Если Лев(ИдентификаторТипаОбъекта, 1) = "{" Тогда
		ИдентификаторТипаОбъекта = Прав(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
	КонецЕсли;
	Если Прав(ИдентификаторТипаОбъекта, 1) = "}" Тогда
		ИдентификаторТипаОбъекта = Лев(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
	КонецЕсли;
	
	ИдентификаторТипаОбъекта = НРег(СокрЛП(ИдентификаторТипаОбъекта));

	Если ИдентификаторТипаОбъекта = "c3831ec8-d8d5-4f93-8a22-f9bfae07327f" Тогда
		ТипФайла = "epf";
	ИначеЕсли ИдентификаторТипаОбъекта = "e41aff26-25cf-4bb6-b6c1-3f478a75f374" Тогда
		ТипФайла = "erf";
	Иначе
		ВызватьИсключение("Некорректный идентификатор типа собираемого объекта <" + ИдентификаторТипаОбъекта + ">");
	КонецЕсли;

	Возврат ТипФайла;

КонецФункции



Функция ЗапускВКоманднойСтроке()
	Лог_cmdline = Логирование.ПолучитьЛог("oscript.lib.cmdline");
	СИ = Новый СистемнаяИнформация;
	УровеньЛога = УровниЛога.Отладка;
	РежимРаботы = СИ.ПолучитьПеременнуюСреды("RUNNER_ENV");
	Если ЗначениеЗаполнено(РежимРаботы) И РежимРаботы = "production" Тогда
		УровеньЛога = УровниЛога.Информация;
	КонецЕсли;
	Лог_cmdline.УстановитьУровень(УровеньЛога);
	// Лог.УстановитьУровень(УровниЛога.Отладка);
	ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
	Лог_cmdline.ДобавитьСпособВывода(ВыводПоУмолчанию);
	
	Аппендер = Новый ВыводЛогаВФайл();
	Аппендер.ОткрытьФайл(ОбъединитьПути(КаталогПроекта(), ИмяСкрипта()+".cmdline.log"));
	Лог_cmdline.ДобавитьСпособВывода(Аппендер);
	
	КодВозврата = 0;
	
	Если ТекущийСценарий().Источник <> СтартовыйСценарий().Источник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
	
		Парсер = Новый ПарсерАргументовКоманднойСтроки();
		
		ДобавитьОписаниеКомандыЮнитТест(Парсер);
		ДобавитьОписаниеКомандыТестироватьПоведение(Парсер);
		ДобавитьОписаниеКомандыПомощь(Парсер);
		// Работа с cf 
		ДобавитьОписаниеКомандыРазобратьНаИсходники(Парсер);
		ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Парсер);
		ДобавитьОписаниеКомандыСобратьИзИсходников(Парсер);
		ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Парсер);
		// Работа с cfe
        ДобавитьОписаниеКомандыРазобратьРасширение(Парсер);
		ДобавитьОписаниеКомандыСобратьРасширение(Парсер);
		// Работа с epf
		ДобавитьОписаниеКомандыСобратьEpf(Парсер);
		ДобавитьОписаниеКомандыДекомпилироватьEpf(Парсер);
		
		
		Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);
		Лог.Отладка("ТипЗнч(Аргументы)= "+ТипЗнч(Аргументы));
		Если Аргументы = Неопределено Тогда
			ВывестиСправку();
			Возврат Истина;
		КонецЕсли;

		Команда = Аргументы.Команда;
		Лог.Отладка("Передана команда: "+Команда);
		Для Каждого Параметр Из Аргументы.ЗначенияПараметров Цикл
			Лог.Отладка(Параметр.Ключ + " = " + Параметр.Значение);
		КонецЦикла;
		
		Если Команда = ВозможныеКоманды().ДекомпилироватьEpf Тогда
			Декомпилировать(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["ВыходнойКаталог"], Аргументы.ЗначенияПараметров["--outDir"], 
							Аргументы.ЗначенияПараметров["--inDir"] ,
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], 
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().СобратьEpf Тогда 
			Компилировать(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["ВыходнойКаталог"],
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], 
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию Тогда
			РазобратьНаИсходникиТекущуюКонфигурацию(Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходники Тогда
			РазобратьФайлКонфигурации(Аргументы.ЗначенияПараметров["ПутьКCF"], Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], Аргументы.ЗначенияПараметров["--v8version"]);
		
    
        ИначеЕсли Команда = ВозможныеКоманды().Помощь Тогда
			ВывестиСправку();
		ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходников Тогда
			СобратьФайлКонфигурации(Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], Аргументы.ЗначенияПараметров["ПутьКCF"], Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию Тогда
			СобратьИзИсходниковТекущуюКонфигурацию(Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], Аргументы.ЗначенияПараметров["--v8version"]);
                            
        ИначеЕсли Команда = ВозможныеКоманды().РазобратьРасширение Тогда 
            РазобратьНаИсходникиРасшрение(Аргументы.ЗначенияПараметров["НаименованиеРасширения"], Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--v8version"]);
							
		ИначеЕсли Команда = ВозможныеКоманды().СобратьРасширение Тогда 
            СобратьИзИсходниковРасшрение(Аргументы.ЗначенияПараметров["ПутьКИсоходникам"], Аргументы.ЗначенияПараметров["НаименованиеРасширения"],
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().ТестироватьПоведение Тогда 
            ЗапуститьТестироватьПоведение(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["ВыходнойКаталогОтчета"],
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--pathsettings"], Аргументы.ЗначенияПараметров["--path"], Аргументы.ЗначенияПараметров["--v8version"]
							);
        ИначеЕсли Команда = ВозможныеКоманды().ЮнитТест Тогда
			ЗапуститьТестироватьЮнит(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], Аргументы.ЗначенияПараметров["--report"],
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--path"], Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().ДекомпилироватьEpf Тогда 
			//Декомпилировать(
            //ЗапуститьЮнитТесты();
		
			//ОбработатьИзмененияИзГит(Аргументы.ЗначенияПараметров["ВыходнойКаталог"], Аргументы.ЗначенияПараметров["--remove-orig-bin-files"]);
		//ИначеЕсли Команда = ВозможныеКоманды().Компилировать Тогда
			//Компилировать(
			//	Аргументы.ЗначенияПараметров["ПутьВходящихДанных"], 
			//	Аргументы.ЗначенияПараметров["ВыходнойКаталог"], 
			//	Аргументы.ЗначенияПараметров["--recursive"],
            //    Аргументы.ЗначенияПараметров["--ibname"], 
            //    Аргументы.ЗначенияПараметров["--db-user"],
            //    Аргументы.ЗначенияПараметров["--db-pwd"]
			//);
		КонецЕсли;
		
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		КодВозврата = 1;
	КонецПопытки;
	
	ВременныеФайлы.Удалить();

	Возврат Истина;
	
КонецФункции

Процедура ДобавитьОписаниеКомандыСобратьИзИсходников(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходников);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКCF");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ДобавитьОписаниеКомандыРазобратьНаИсходники(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходники);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКCF");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыРазобратьРасширение(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьРасширение);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "НаименованиеРасширения");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьРасширение(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьРасширение);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсоходникам");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "НаименованиеРасширения");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ДобавитьОписаниеКомандыЮнитТест(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ЮнитТест);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--path", "Путь к инструментам");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--report", "Путь к каталогу с отчетом");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыТестироватьПоведение(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ТестироватьПоведение);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных", "Может принимать путь к каталогу, так и к файлу");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталогОтчета");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--path", "Путь к инструментам");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--pathsettings", "Путь к файлам настроек");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыПомощь(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Помощь);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыДекомпилироватьEpf(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ДекомпилироватьEpf);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--recursive");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--outDir", "базовый путь распаковки");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--inDir", "базовый путь к бинарным данным");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьEpf(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьEpf);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
	//Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--recursive");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--outDir", "базовый путь распаковки");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--inDir", "базовый путь к бинарным данным");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibname", "Строка подключения к БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Пользователь БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль БД");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Версия платформы");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура Инициализация()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

	УровеньЛога = УровниЛога.Отладка;
	РежимРаботы = СистемнаяИнформация.ПолучитьПеременнуюСреды("RUNNER_ENV");
	Если ЗначениеЗаполнено(РежимРаботы) И РежимРаботы = "production" Тогда
		УровеньЛога = УровниЛога.Информация;
	КонецЕсли;

	Лог = Логирование.ПолучитьЛог("oscript.app.v8files-extractor");
	Лог.УстановитьУровень(УровеньЛога);
	
	ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
	Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);

	Аппендер = Новый ВыводЛогаВФайл();
	Аппендер.ОткрытьФайл(ОбъединитьПути(КаталогПроекта(), ИмяСкрипта()+".log"));
	Лог.ДобавитьСпособВывода(Аппендер);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////
// РЕАЛИЗАЦИЯ КОМАНД




Функция ОбернутьПутьВКавычки(Знач Путь)

	Результат = Путь;
	Если Прав(Результат, 1) = "\" Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;

	Результат = """" + Результат + """";

	Возврат Результат;

КонецФункции

Функция КаталогПроекта()
	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
	Возврат ФайлИсточника.Путь;
КонецФункции

Функция ИмяСкрипта()
	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
	Возврат ФайлИсточника.ИмяБезРасширения;
КонецФункции

Инициализация();

Если ЗапускВКоманднойСтроке() Тогда
	ЗавершитьРаботу(КодВозврата);
КонецЕсли;
