//sza140406-0147 SZA: 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Отказ ТОгда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
	ИспользоватьПодключаемоеОборудование = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование") ;
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТаблицаСДанными;
	ОбновитьВидТаблицыСДанными();	
								 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПриИзменении(Элемент)
	ОбновитьВидТаблицыСДанными();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидТаблицыСДанными()
	
	Счетчик = 1;
	Для Каждого СтрокаОписания Из ОБъект.ОписаниеКолонок Цикл
		
		Выполнить(" Элементы.ТаблицаСДаннымиЗначениеПоляТаблицы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
		Выполнить(" Элементы.ТаблицаСДаннымиЗначениеПоляТаблицы" + СокрЛП(Счетчик) + ".Заголовок = СтрокаОписания.ОписаниеПоляКолонки;");
		Выполнить(" Элементы.ТаблицаСДаннымиЗначениеПоляТаблицы" + СокрЛП(Счетчик) + ".Подсказка = СтрокаОписания.ОписаниеПоляКолонки;");
		
		ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
		
		ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(СтрокаОписания.ТипПоля);
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаСДанными Цикл			
			Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(СтрокаТаблицы.ЗначениеПоляТаблицы" + СокрЛП(Счетчик) + ");");
			если НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = типзнч(ЗначениеПоУмолчанию)  Тогда					
				Выполнить(" СтрокаТаблицы[""ЗначениеПоляТаблицы"" + СокрЛП(Счетчик)] = ЗначениеПоУмолчанию;");
			КонецЕсли;
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Пока счетчик <= 10 Цикл
		Выполнить(" Элементы.ТаблицаСДаннымиЗначениеПоляТаблицы" + СокрЛП(Счетчик) + ".Видимость = Ложь;");		
		
		Для Каждого СтрокаТаблицы Из Объект.ТаблицаСДанными Цикл
			СтрокаТаблицы["ЗначениеПоляТаблицы" + СокрЛП(Счетчик)] = Неопределено;
		КонецЦикла;
		
		Счетчик = Счетчик + 1;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
	Если Клиент <> Неопределено Тогда
		СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
		СтрокаТаблицы.ЗначениеПоляТаблицы1 = Клиент;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	Результат = Истина;
	СтрокаТаблицы = Неопределено;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина, , Объект.Дата);
	ОстановитьПоиск = Ложь;
	
	Если объект.ОписаниеКолонок.Количество() <> 0 Тогда
		ТипПервойКолонки = Объект.ОписаниеКолонок[0].ТипПоля;
		Если ТипПервойКолонки = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
			
			СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
			СтрокаТаблицы.ЗначениеПоляТаблицы1 = ТекКод;
			ОстановитьПоиск = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	если не ОстановитьПоиск Тогда
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
			СтрокаТаблицы.ЗначениеПоляТаблицы1 = РезультатОбработки.Номенклатура;
			Если ЗначениеЗаполнено(РезультатОбработки.СерияНоменклатуры) Тогда
				СтрокаТаблицы.ЗначениеПоляТаблицы2 = РезультатОбработки.СерияНоменклатуры;
			КонецЕсли;
			СтрокаДисплеяПокупателя = СокрЛП(РезультатОбработки.Номенклатура);	
			
		Иначе				
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				если ЗначениеЗаполнено(РезультатОбработки) Тогда
					СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
					СтрокаТаблицы.ЗначениеПоляТаблицы1 = РезультатОбработки;
					ОстановитьПоиск = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
					СтрокаТаблицы.ЗначениеПоляТаблицы1 = РезультатОбработки;
					ОстановитьПоиск = Истина;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , Истина);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
					СтрокаТаблицы.ЗначениеПоляТаблицы1 = РезультатОбработки;
					ОстановитьПоиск = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				СтрокаТаблицы = Объект.ТаблицаСДанными.Добавить();
				СтрокаТаблицы.ЗначениеПоляТаблицы1 = ТекКод;
			КонецЕсли;
		КонецЕсли; 	 	 	
	КонецЕсли;
	
	Если не СтрокаТаблицы = Неопределено тогда
		
		Для Каждого ПолеТаблицы Из Объект.ОписаниеКолонок Цикл
			если не ПолеТаблицы.НомерСтроки = 1 Тогда
				ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(ПолеТаблицы.ТипПоля);
				Выполнить(" СтрокаТаблицы[""ЗначениеПоляТаблицы"" + СокрЛП(ПолеТаблицы.НомерСтроки)] = ЗначениеПоУмолчанию;");	
			КонецЕсли;
		КонецЦикла;                           	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		элементы.разблокироватьсканер.видимость 	= СканерЗаблокирован;
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСДаннымиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ТаблицаСДанными.ТекущиеДанные;
		Для Каждого ПолеТаблицы Из Объект.ОписаниеКолонок Цикл
			ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(ПолеТаблицы.ТипПоля);
			Выполнить(" ТекущиеДанные[""ЗначениеПоляТаблицы"" + СокрЛП(ПолеТаблицы.НомерСтроки)] = ЗначениеПоУмолчанию;");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры
