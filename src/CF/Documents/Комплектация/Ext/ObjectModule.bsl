//sza140414-0051 SZA: 
//sza140411-0018 SZA: 

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		// Заполнение шапки
		ТовараВКоличестве = 1;
		Комментарий = ДанныеЗаполнения.Наименование;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Спецификации") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Для Каждого ТекСтрокаДополнительныеРасходы Из ДанныеЗаполнения.ДополнительныеРасходы Цикл
			НоваяСтрока = ДополнительныеРасходы.Добавить();
			НоваяСтрока.Валюта = ТекСтрокаДополнительныеРасходы.Валюта;
			НоваяСтрока.НеРаспределятьНаСтоимость = ТекСтрокаДополнительныеРасходы.НеРаспределятьНаСтоимость;
			НоваяСтрока.ОСтроке = ТекСтрокаДополнительныеРасходы.ОСтроке;
			НоваяСтрока.Статья = ТекСтрокаДополнительныеРасходы.Статья;
			НоваяСтрока.Сумма = ТекСтрокаДополнительныеРасходы.Сумма;
		КонецЦикла;
		Для Каждого ТекСтрокаЗадействованныеСредства Из ДанныеЗаполнения.ЗадействованныеСредства Цикл
			НоваяСтрока = ЗадействованныеСредства.Добавить();
			НоваяСтрока.Коэффициент = ТекСтрокаЗадействованныеСредства.Коэффициент;
			НоваяСтрока.ОСтроке = ТекСтрокаЗадействованныеСредства.ОСтроке;
			НоваяСтрока.Средство = ТекСтрокаЗадействованныеСредства.Средство;
		КонецЦикла;
		Для Каждого ТекСтрокаМатериалы Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Количество = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаМатериалы.ОСтроке;
		КонецЦикла;
		Для Каждого ТекСтрокаРаботы Из ДанныеЗаполнения.Работы Цикл
			НоваяСтрока = Работы.Добавить();
			НоваяСтрока.ВремяВыполнения = ТекСтрокаРаботы.ВремяВыполнения;
			НоваяСтрока.Количество = ТекСтрокаРаботы.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаРаботы.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаРаботы.ОСтроке;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Склад = ДанныеЗаполнения.Склад;
		СкладМатериалов = ДанныеЗаполнения.Склад;
		Для Каждого ТекСтрокаДополнительныеРасходы Из ДанныеЗаполнения.ДополнительныеРасходы Цикл
			НоваяСтрока = ДополнительныеРасходы.Добавить();
			НоваяСтрока.Валюта = ТекСтрокаДополнительныеРасходы.Валюта;
			НоваяСтрока.Курс = ТекСтрокаДополнительныеРасходы.Курс;
			НоваяСтрока.НеРаспределятьНаСтоимость = ТекСтрокаДополнительныеРасходы.НеРаспределятьНаСтоимость;
			НоваяСтрока.ОСтроке = ТекСтрокаДополнительныеРасходы.ОСтроке;
			НоваяСтрока.Статья = ТекСтрокаДополнительныеРасходы.Статья;
			НоваяСтрока.Сумма = ТекСтрокаДополнительныеРасходы.Сумма;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Склад = ДанныеЗаполнения.Склад;
		СкладМатериалов = ДанныеЗаполнения.Склад;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	массивпустыхстрок  = новый массив;
	массивноменклатуры = Новый массив;
	
	для каждого СтрокаТовары из Материалы цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			массивпустыхстрок.Добавить(СтрокаТовары);
			
		иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется материал:") + " " + СтрокаТовары.Номенклатура, , Ссылка);
			КонецЕсли;
			
		иначе
			массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	для каждого СтрокаТовары из массивпустыхстрок цикл
		Материалы.Удалить(СтрокаТовары);	
	КонецЦикла;	
	
	массивпустыхстрок  = новый массив;
	массивноменклатуры = Новый массив;
	
	для каждого СтрокаТовары из Работы цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			массивпустыхстрок.Добавить(СтрокаТовары);
			
		иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется работа:") + " " + СтрокаТовары.Номенклатура, , Ссылка);
			КонецЕсли;
			
		иначе
			массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	для каждого СтрокаТовары из массивпустыхстрок цикл
		Работы.Удалить(СтрокаТовары);	
	КонецЦикла;	
	
	ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
	
	ТовараВКоличестве = товары.итог("Количество");
	ТовараНаСумму 	  = товары.Итог("Сумма");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		если ТовараВКоличестве 	= 0
			и ТовараНаСумму 	= 0 
			и РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
	Если не отказ Тогда
		
		движения.Деньги.Записать();
		движения.Товары.Записать();
		движения.Комплектации.Записать();
		
		//списание
		Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
			Движение = Движения.Товары.Добавить();
			Движение.ВидДвижения = ?(Разукомплектация, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			Движение.Склад = СкладМатериалов;
			Движение.СерияНоменклатуры = ТекСтрокаМатериалы.СерияНоменклатуры;
			Движение.Количество = ТекСтрокаМатериалы.Количество;
			Движение.Сумма = ТекСтрокаМатериалы.Сумма;
			Движение.СписаниеИлиОприходование = ИСТИНА;
			Движение.Комментарий = Комментарий;
		КонецЦикла;
		
		// регистр Деньги Расход
		Для Каждого ТекСтрокаДополнительныеРасходы Из ДополнительныеРасходы Цикл
			Движение = Движения.Деньги.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.ФормаОплаты = ТекСтрокаДополнительныеРасходы.ФормаОплаты;
			Движение.Валюта = ТекСтрокаДополнительныеРасходы.Валюта;
			Движение.ХранилищеДенег = ТекСтрокаДополнительныеРасходы.ХранилищеДенег;
			Движение.Сумма = ТекСтрокаДополнительныеРасходы.Сумма;
			Движение.СуммаВВалюте = ТекСтрокаДополнительныеРасходы.Сумма*?(ЗначениеЗаполнено(ТекСтрокаДополнительныеРасходы.Курс),ТекСтрокаДополнительныеРасходы.Курс,1);
			Движение.Статья = ТекСтрокаДополнительныеРасходы.Статья;
		КонецЦикла;
		
		// регистр Товары Приход
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Движение = Движения.Товары.Добавить();
			Движение.ВидДвижения = ?(Разукомплектация, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
			Движение.Период = ДатаКомплектации;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Склад = Склад;
			Движение.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			Движение.Количество = ТекСтрокаТовары.Количество;
			Движение.Сумма = ТекСтрокаТовары.Сумма;
			Движение.СписаниеИлиОприходование = ИСТИНА;
			Движение.Комментарий = Комментарий;
		КонецЦикла;
		
		// регистр Комплектации 
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Движение = Движения.Комплектации.Добавить();
			Движение.Период = ДатаКомплектации;
			Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
			Движение.Количество = ?(Разукомплектация, -ТекСтрокаТовары.Количество, ТекСтрокаТовары.Количество);
			Движение.Сумма = ?(Разукомплектация, -ТекСтрокаТовары.Сумма, ТекСтрокаТовары.Сумма);
		КонецЦикла;	
		
		если не отказ 
			и не Разукомплектация тогда
			
			если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") тогда 
				
				Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
					И ЗначениеЗаполнено(ВицЦенУчетаСтоимости) тогда
					
					Для каждого СтрокаТовара Из Товары Цикл 
						ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВицЦенУчетаСтоимости, СтрокаТовара, Ссылка, Комментарий, Дата);//, , , , , , СтрокаТовара.ЕдиницаИзмерения);
					КонецЦикла;		
					
				КонецЕсли;		
				
			Иначе
				Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда
					
					ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
					ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
					
					формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРЕГ(ОсновнаяФормулаПреобразованияЦен.Формула), "");
					ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
					ЕстьЦена 		 = не найти(Формула, "ЦЕНА") = 0;
					
					Для каждого СтрокаТовара Из Товары Цикл      			
						Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) тогда
							
							если не ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
								если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
									
									НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
									НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
									НоменклатураОбъект.Записать();		
								КонецЕсли;
								
							иначе
								Попытка 
									Цена 	  = СтрокаТовара.Цена;
									НоваяЦена = 0;
									НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
									Если ЕстьЦена Тогда
										Цена = СтрокаТовара.Цена;
									КонецЕсли;			
									
									Если ЕстьЛьготнаяЦена Тогда
										ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВицЦенУчетаСтоимости);
									КонецЕсли;								
									
									выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
									
									если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
										НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
										НоменклатураОбъект.Цена = НоваяЦена;
										НоменклатураОбъект.Записать();	
									КонецЕсли;
									
								Исключение 	
									если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
										
										ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
									КонецЕсли;
									
								КонецПопытки;    					
							КонецЕсли;    				
						КонецЕсли;    			
					КонецЦикла;
					
				КонецЕсли;	
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.Деньги.Записывать    = НЕ Отказ;
	Движения.Товары.Записывать    = НЕ Отказ;
	Движения.Комплектации.Записывать    = НЕ Отказ;	
												   КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если не отказ Тогда
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда			
			ЕстьРасходыПозже();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЕстьРасходыПозже()
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	
	если не ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
		или Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура В(&Номенклатура)
		|	И Товары.Период > &Дата
		|	И Товары.ВидДвижения = &ВидДвиженияРасход";
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
		Номенклатура = Товары.Выгрузить(, "Номенклатура");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		если не РезультатЗапроса.Пустой() тогда
			
			ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом");
			
			Если ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю("ПредложениеВосстановленияВаловойПрибыли", , Ссылка);	
			Иначе
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ возможно был изменен задним числом:") + " " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);	
				КонецЕсли;
				Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(дата) ;	
				
			КонецЕсли;			
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
