//sza140701-1328  
//sza140624-1536  
//sza140411-0018  
Процедура ЕстьРасходыПозже()
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	
	Если НЕ ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
		ИЛИ Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура В(&Номенклатура)
		|	И Товары.Период > &Дата
		|	И Товары.ВидДвижения = &ВидДвиженияРасход";
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
		Номенклатура = Товары.Выгрузить(, "Номенклатура");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом");
			
			Если ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю("ПредложениеВосстановленияВаловойПрибыли", , Ссылка);	
			Иначе
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ возможно был изменен задним числом") + ": " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);	
				КонецЕсли;
				Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(дата);	
				
			КонецЕсли;			
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		// Заполнение шапки
		ТовараВКоличестве = 1;
		Комментарий = ДанныеЗаполнения.Наименование;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Спецификации") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Для Каждого ТекСтрокаДополнительныеРасходы Из ДанныеЗаполнения.ДополнительныеРасходы Цикл
			НоваяСтрока = ДополнительныеРасходы.Добавить();
			НоваяСтрока.Валюта = ТекСтрокаДополнительныеРасходы.Валюта;
			НоваяСтрока.НеРаспределятьНаСтоимость = ТекСтрокаДополнительныеРасходы.НеРаспределятьНаСтоимость;
			НоваяСтрока.ОСтроке = ТекСтрокаДополнительныеРасходы.ОСтроке;
			НоваяСтрока.Статья = ТекСтрокаДополнительныеРасходы.Статья;
			НоваяСтрока.Сумма = ТекСтрокаДополнительныеРасходы.Сумма;
		КонецЦикла;
		
		Для Каждого ТекСтрокаЗадействованныеСредства Из ДанныеЗаполнения.ЗадействованныеСредства Цикл
			НоваяСтрока = ЗадействованныеСредства.Добавить();
			НоваяСтрока.Коэффициент = ТекСтрокаЗадействованныеСредства.Коэффициент;
			НоваяСтрока.ОСтроке = ТекСтрокаЗадействованныеСредства.ОСтроке;
			НоваяСтрока.Средство = ТекСтрокаЗадействованныеСредства.Средство;
		КонецЦикла;
		
		Для Каждого ТекСтрокаМатериалы Из ДанныеЗаполнения.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Количество = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаМатериалы.ОСтроке;
		КонецЦикла;
		
		Для Каждого ТекСтрокаРаботы Из ДанныеЗаполнения.Работы Цикл
			НоваяСтрока = Работы.Добавить();
			НоваяСтрока.ВремяВыполнения = ТекСтрокаРаботы.ВремяВыполнения;
			НоваяСтрока.Количество = ТекСтрокаРаботы.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаРаботы.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаРаботы.ОСтроке;
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация 	= ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Склад = ДанныеЗаполнения.Склад;
		СкладМатериалов = ДанныеЗаполнения.Склад;
		Для Каждого ТекСтрокаДополнительныеРасходы Из ДанныеЗаполнения.ДополнительныеРасходы Цикл
			НоваяСтрока = ДополнительныеРасходы.Добавить();
			НоваяСтрока.Валюта = ТекСтрокаДополнительныеРасходы.Валюта;
			НоваяСтрока.Курс = ТекСтрокаДополнительныеРасходы.Курс;
			НоваяСтрока.НеРаспределятьНаСтоимость = ТекСтрокаДополнительныеРасходы.НеРаспределятьНаСтоимость;
			НоваяСтрока.ОСтроке = ТекСтрокаДополнительныеРасходы.ОСтроке;
			НоваяСтрока.Статья = ТекСтрокаДополнительныеРасходы.Статья;
			НоваяСтрока.Сумма = ТекСтрокаДополнительныеРасходы.Сумма;
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		// Заполнение шапки
		Комментарий = ДанныеЗаполнения.Комментарий;
		Склад = ДанныеЗаполнения.Склад;
		СкладМатериалов = ДанныеЗаполнения.Склад;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке = ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекСтрокаТовары.Номенклатура, Дата);
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если НЕ Отказ Тогда
			
			ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
			
			Движения.Деньги.Записать();
			Движения.Товары.Записать();
			движения.Комплектации.Записать();
			Движения.ВыполнениеРаботСотрудниками.Записать();
			Движения.ЗадействованныеСредстваПредприятия.Записать();
			
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
			//списание
			Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ?(Разукомплектация, ВидДвиженияНакопленияПриход, ВидДвиженияНакопленияРасход);
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= ТекСтрокаМатериалы.Номенклатура;
				Движение.Склад 			= СкладМатериалов;
				Движение.СерияНоменклатуры = ТекСтрокаМатериалы.СерияНоменклатуры;
				Движение.Количество 	= ТекСтрокаМатериалы.Количество;
				Движение.Сумма 			= ТекСтрокаМатериалы.Сумма;
				Движение.СписаниеИлиОприходование = ИСТИНА;
				Движение.Комментарий 	= Комментарий;
			КонецЦикла;
			
			// регистр Деньги Расход
			Для Каждого ТекСтрокаДополнительныеРасходы Из ДополнительныеРасходы Цикл
				Движение = Движения.Деньги.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
				Движение.Период 		= ?(ЗначениеЗаполнено(ТекСтрокаДополнительныеРасходы.Дата), ТекСтрокаДополнительныеРасходы.Дата, Дата);
				Движение.ФормаОплаты 	= ТекСтрокаДополнительныеРасходы.ФормаОплаты;
				Движение.Валюта 		= ТекСтрокаДополнительныеРасходы.Валюта;
				Движение.ХранилищеДенег = ТекСтрокаДополнительныеРасходы.ХранилищеДенег;
				Движение.Сумма 			= ТекСтрокаДополнительныеРасходы.Сумма;
				Движение.СуммаВВалюте 	= ТекСтрокаДополнительныеРасходы.Сумма*?(ЗначениеЗаполнено(ТекСтрокаДополнительныеРасходы.Курс),ТекСтрокаДополнительныеРасходы.Курс,1);
				Движение.Статья 		= ТекСтрокаДополнительныеРасходы.Статья;
			КонецЦикла;
			
			// регистр Товары Приход
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ?(Разукомплектация, ВидДвиженияНакопленияРасход, ВидДвиженияНакопленияПриход);
				Движение.Период 		= ДатаКомплектации;
				Движение.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				Движение.Склад 			= Склад;
				Движение.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				Движение.Количество 	= ТекСтрокаТовары.Количество;
				Движение.Сумма 			= ТекСтрокаТовары.Сумма;
				Движение.СписаниеИлиОприходование = ИСТИНА;
				Движение.Комментарий 	= Комментарий;
			КонецЦикла;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
				Для Каждого СтрокаРаботы Из Работы Цикл
					Движение = Движения.ВыполнениеРаботСотрудниками.Добавить();
					Движение.Количество 	= СтрокаРаботы.Количество;
					Движение.Комментарий 	= СтрокаРаботы.ОСтроке;
					Движение.Номенклатура	= СтрокаРаботы.Номенклатура;
					Движение.Период			= Дата;
					Движение.Сотрудник		= СтрокаРаботы.Сотрудник;
				КонецЦикла;	
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
				Для Каждого СтрокаСредств Из ЗадействованныеСредства Цикл
					Движение = Движения.ЗадействованныеСредстваПредприятия.Добавить();
					Движение.ДатаОкончания	= СтрокаСредств.ДатаОкончания;
					Движение.Количество		= СтрокаСредств.Коэффициент;
					Движение.Комментарий	= СтрокаСредств.ОСтроке;
					Движение.Период			= ?(ЗначениеЗаполнено(СтрокаСредств.ДатаНачала), СтрокаСредств.ДатаНачала, Дата);
					Движение.Средство 		= СтрокаСредств.Средство;
				КонецЦикла;				
			КонецЕсли;
			
			// регистр Комплектации 
			Для Каждого ТекСтрокаТовары Из Товары Цикл
				Движение = Движения.Комплектации.Добавить();
				Движение.Период 		= ДатаКомплектации;
				Движение.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				Движение.Количество 	= ?(Разукомплектация, -ТекСтрокаТовары.Количество, ТекСтрокаТовары.Количество);
				Движение.Сумма 			= ?(Разукомплектация, -ТекСтрокаТовары.Сумма, ТекСтрокаТовары.Сумма);
			КонецЦикла;	
			
			Если НЕ отказ 
				И НЕ Разукомплектация тогда
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда 
					
					Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
						И ЗначениеЗаполнено(ВицЦенУчетаСтоимости) Тогда
						
						Для Каждого СтрокаТовара Из Товары Цикл 
							ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВицЦенУчетаСтоимости, СтрокаТовара, Ссылка, Комментарий, Дата);//, , , , , , СтрокаТовара.ЕдиницаИзмерения);
						КонецЦикла;		
						
					КонецЕсли;		
					
				Иначе
					Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда
						
						ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
						ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
						
						формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРЕГ(ОсновнаяФормулаПреобразованияЦен.Формула), "");
						ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
						ЕстьЦена 		 = не найти(Формула, "ЦЕНА") = 0;
						
						Для Каждого СтрокаТовара Из Товары Цикл      			
							Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
								
								Если НЕ ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
									Если НЕ строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
										
										НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
										НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
										НоменклатураОбъект.Записать();		
									КонецЕсли;
									
								Иначе
									Попытка 
										Цена 	  = СтрокаТовара.Цена;
										НоваяЦена = 0;
										НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
										Если ЕстьЦена Тогда
											Цена = СтрокаТовара.Цена;
										КонецЕсли;			
										
										Если ЕстьЛьготнаяЦена Тогда
											ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВицЦенУчетаСтоимости);
										КонецЕсли;								
										
										выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
										
										Если НЕ строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = НоваяЦена;
											НоменклатураОбъект.Записать();	
										КонецЕсли;
										
									Исключение 	
										Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
											
											ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены Произошла ошибка") + ": " + ОписаниеОшибки(), , Ссылка);
										КонецЕсли;
										
									КонецПопытки;    					
								КонецЕсли;    				
							КонецЕсли;    			
						КонецЦикла;
						
					КонецЕсли;	
				КонецЕсли;		
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.Деньги.Записывать = НЕ Отказ;
		Движения.Товары.Записывать = НЕ Отказ;
		Движения.Комплектации.Записывать = НЕ Отказ;	
		Движения.ВыполнениеРаботСотрудниками.Записывать = НЕ Отказ;
		Движения.ЗадействованныеСредстваПредприятия.Записывать = НЕ Отказ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Попытка //ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001561", , Отказ, ЭтотОбъект);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда			
			ЕстьРасходыПозже();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность() 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		Если ТовараВКоличестве 	= 0
			И ТовараНаСумму 	= 0 
			И РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	МассивПустыхСтрок  = Новый массив;
	массивноменклатуры = Новый массив;
	
	Для Каждого СтрокаТовары из Материалы цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			МассивПустыхСтрок.Добавить(СтрокаТовары);
			
		Иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется материал") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
			КонецЕсли;
			
		Иначе
			массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
		Материалы.Удалить(СтрокаТовары);	
	КонецЦикла;	
	
	МассивПустыхСтрок  = Новый массив;
	массивноменклатуры = Новый массив;
	
	Для Каждого СтрокаТовары из Работы цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			МассивПустыхСтрок.Добавить(СтрокаТовары);
			
		Иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется работа") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
			КонецЕсли;
			
		Иначе
			массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
		Работы.Удалить(СтрокаТовары);	
	КонецЦикла;	
	
	ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
	
	ТовараВКоличестве = товары.итог("Количество");
	ТовараНаСумму 	  = товары.Итог("Сумма");
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры
