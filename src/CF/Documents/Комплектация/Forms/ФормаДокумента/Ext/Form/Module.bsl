// sza150706-1634 фикс
// sza150605-2236 
// sza150422-0044 количество в одной спецификации
// sza150111-0238 НЧ
// sza140904-0137
// sza140902-1549 укк
// sza140805-1913 обновить цены
// sza140615-1420  
// sza140409-1521  

&НаКлиенте
Процедура ДатаКомплектацииПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.ДатаКомплектации < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.ДатаКомплектации = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если Объект.Дата > Объект.ДатаКомплектации Тогда
		Объект.Дата = Объект.ДатаКомплектации;
	КонецЕсли;
	Объект.ОбщееВремяКомплектации = Объект.ДатаКомплектации - Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Объект.ДатаКомплектации = Объект.Дата + Объект.ОбщееВремяКомплектации;
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перезаполнить комплектацию?"), РежимДиалогаВопрос.ДаНет);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 	
		ЗаполнитьКомплектациюПоСпецификациямНаСервере(ИСТИНА);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьМатериалыПоСпецификации(Знач Спецификация, Материалы, Знач КоличествоВходящее = 1)
	
	Для Каждого СтрокаМатериала Из Спецификация.Материалы Цикл
		
		Количество = СтрокаМатериала.Количество * КоличествоВходящее;
		
		Если ЗначениеЗаполнено(СтрокаМатериала.Спецификация) Тогда
			ДобавитьМатериалыПоСпецификации(СтрокаМатериала.Спецификация, Материалы, Количество);
		Иначе
			НоваяСтрокаМатериала = Материалы.Добавить();	
			НоваяСтрокаМатериала.Номенклатура = СтрокаМатериала.Номенклатура;			
			НоваяСтрокаМатериала.Количество   = Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботыПоСпецификации(Знач Спецификация, Работы)
	
	Для Каждого СтрокаРабот Из Спецификация.Работы Цикл
		
		Если (НЕ Объект.Разукомплектация 
			И НЕ СтрокаРабот.ТолькоПриРазукомплектации)
			ИЛИ (Объект.Разукомплектация 
			И НЕ СтрокаРабот.ТолькоПриКомплектации) Тогда
			
			
			НоваяСтрокаРабот = Работы.Добавить();	
			НоваяСтрокаРабот.Номенклатура 	 = СтрокаРабот.Номенклатура;
			НоваяСтрокаРабот.Количество 	 = СтрокаРабот.Количество;
			НоваяСтрокаРабот.ВремяВыполнения = СтрокаРабот.ВремяВыполнения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасходыПоСпецификации(Знач Спецификация, ДополнительныеРасходы)
	
	Для Каждого СтрокаРасходов Из Спецификация.ДополнительныеРасходы Цикл
		
		НоваяСтрокаРасходов = ДополнительныеРасходы.Добавить();	
		НоваяСтрокаРасходов.ХранилищеДенег 	= СтрокаРасходов.ХранилищеДенег;
		НоваяСтрокаРасходов.Статья		= СтрокаРасходов.Статья;
		НоваяСтрокаРасходов.ФормаОплаты = СтрокаРасходов.ФормаОплаты;
		НоваяСтрокаРасходов.Сумма 		= СтрокаРасходов.Сумма;
		НоваяСтрокаРасходов.Валюта 		= СтрокаРасходов.Валюта;
		НоваяСтрокаРасходов.Курс 		= СтрокаРасходов.Курс;
		НоваяСтрокаРасходов.НеРаспределятьНаСтоимость = СтрокаРасходов.НеРаспределятьНаСтоимость;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСредстваПоСпецификации(Знач Спецификация, ЗадействованныеСредства)
	
	Для Каждого СтрокаСредств Из Спецификация.ЗадействованныеСредства Цикл
		
		НоваяСтрокаРасходов = ЗадействованныеСредства.Добавить();	
		НоваяСтрокаРасходов.Средство	= СтрокаСредств.Средство;
		НоваяСтрокаРасходов.Коэффициент = СтрокаСредств.Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Валюта) Тогда
		ТекущиеДанные.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.Валюта, ?(ЗначениеЗаполнено(ТекущиеДанные.Дата), ТекущиеДанные.Дата, Объект.Дата));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Дата) Тогда
		ТекущиеДанные.Дата = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	ДополнительныеРасходыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДополнительныеРасходыПриИзмененииНаСервере()
	
	Сумма = 0;
	
	Если НЕ ДокументЗаблокирован Тогда
		Для Каждого ДопРасход Из Объект.ДополнительныеРасходы Цикл
			Сумма = Сумма + ДопРасход.Сумма * ?(УчетВалют И ЗначениеЗаполнено(ДопРасход.Курс), ДопРасход.Курс, 1);
		КонецЦикла;
	КонецЕсли;
	
	Объект.СуммаДополнительныхРасходов = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыХранилищеДенегПриИзменении(Элемент)
	ДополнительныеРасходыХранилищеДенегПриИзмененииНаСервере();
КонецПроцедуры	

&НаСервере
Процедура ДополнительныеРасходыХранилищеДенегПриИзмененииНаСервере()
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ХранилищеДенег) Тогда
		ТекущиеДанные.ФормаОплаты = ТекущиеДанные.ХранилищеДенег.ФормаОплаты;
		ТекущиеДанные.Валюта = ТекущиеДанные.ХранилищеДенег.Валюта;
		ТекущиеДанные.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.Валюта, ?(ЗначениеЗаполнено(ТекущиеДанные.Дата), ТекущиеДанные.Дата, Объект.Дата));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКомплектациюПоСпецификациям(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнение документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЗаполнитьКомплектациюПоСпецификациямНаСервере(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомплектациюПоСпецификациямНаСервере(Знач ПоСпецификации = ЛОЖЬ)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		дата = Объект.Дата;
		ТаблицаСебестоимости.Очистить();
		
		Если ПоСпецификации Тогда
			Объект.Материалы.Очистить();	
		КонецЕсли;
		Материалы = Объект.Материалы.Выгрузить(); // для колонок
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
				
				Спецификация = СтрокаТовара.Спецификация;
				
				Если ПоСпецификации Тогда
					ДобавитьМатериалыПоСпецификации(Спецификация, Материалы, ?(СтрокаТовара.КоличествоВОднойСпецификации = 0, СтрокаТовара.Количество, СтрокаТовара.Количество / СтрокаТовара.КоличествоВОднойСпецификации));	
				КонецЕсли;
				
				Если ВестиУчетВаловойПрибыли Тогда
					
					МатериалыТут = Материалы.ВыгрузитьКолонку("Номенклатура");
					
					СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Объект.Ссылка, Объект.СкладМатериалов, Дата, ЛОЖЬ, МатериалыТут, "Материалы");
					ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;						
					СуммаВсего		   = 0;
					
					Для Каждого СтрокаМатериала Из Материалы Цикл
						Номенклатура = СтрокаМатериала.Номенклатура;
						ЦенаСписания = 0;
						Если НЕ ТаблицаЦенСписания = Неопределено тогда
							СтрокаЦеныСписания = ТаблицаЦенСписания.найти(Номенклатура, "Номенклатура");
							
							Если НЕ СтрокаЦеныСписания = Неопределено Тогда
								ЦенаСписания = СтрокаЦеныСписания.Цена;
							Иначе
								ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Объект.Ссылка);// , , ТекСтрокаТовара.ЕдиницаИзмерения);
							КонецЕсли;	
							
						Иначе
							ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Объект.Ссылка);// , , ТекСтрокаТовара.ЕдиницаИзмерения);
						КонецЕсли;
						
						СтрокаМатериала.Цена  = ЦенаСписания;
						
						Сумма = ЦенаСписания * СтрокаМатериала.Количество;				
						СуммаВсего = СуммаВсего + Сумма;
						СтрокаМатериала.Сумма = Сумма;
						
					КонецЦикла;
					
					СтрокаСЕбестоимости = ТаблицаСебестоимости.Добавить();
					СтрокаСЕбестоимости.Номенклатура = СтрокаТовара.Номенклатура;
					СтрокаСЕбестоимости.Цена 		 = СуммаВсего * Спецификация.ДополнительныйКоэффициентКСебестоимости;
					
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;
		
		Если ПоСпецификации Тогда
			Материалы.Свернуть("Номенклатура, Цена", "Количество");
			Материалы.Колонки.Добавить("Сумма");
			
			Для Каждого СтрокаМатериала Из Материалы Цикл
				СтрокаМатериала.Сумма = СтрокаМатериала.Количество * СтрокаМатериала.Цена;			
			КонецЦикла;
			
			Объект.Материалы.Загрузить(Материалы);
			
			Объект.Работы.Очистить();	
			Работы = Объект.Работы.Выгрузить(); // для колонок
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
					
					Спецификация = СтрокаТовара.Спецификация;
					ДобавитьРаботыПоСпецификации(Спецификация, Работы);
					
				КонецЕсли;	
			КонецЦикла;
			
			Работы.Свернуть("Номенклатура", "Количество, ВремяВыполнения");
			
			Объект.Работы.Загрузить(Работы);	
		КонецЕсли;
		
		Объект.ОбщееВремяКомплектации = Объект.Работы.Итог("ВремяВыполнения");
		Объект.ДатаКомплектации = Объект.Дата + Объект.ОбщееВремяКомплектации;
		
		Если ПоСпецификации Тогда
			Объект.ЗадействованныеСредства.Очистить();
			ЗадействованныеСредства = Объект.ЗадействованныеСредства.Выгрузить(); // для колонок
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
					
					Спецификация = СтрокаТовара.Спецификация;
					ДобавитьСредстваПоСпецификации(Спецификация, ЗадействованныеСредства);
					
				КонецЕсли;	
			КонецЦикла;
			
			ЗадействованныеСредства.Свернуть("Средство, Коэффициент");
			Объект.ЗадействованныеСредства.Загрузить(ЗадействованныеСредства);
			Для Каждого СтрокаСредств Из Объект.ЗадействованныеСредства Цикл
				СтрокаСредств.ДатаНачала 	= Объект.Дата;
				СтрокаСредств.ДатаОкончания = Объект.ДатаКомплектации;
			КонецЦикла;	
			
			Объект.ДополнительныеРасходы.Очистить();	
		КонецЕсли;
		
		ДополнительныеРасходы = Объект.ДополнительныеРасходы.Выгрузить();
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			
			Если НЕ ПоСпецификации
				ИЛИ ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
				
				Спецификация = СтрокаТовара.Спецификация;
				Если ПоСпецификации Тогда
					ДобавитьРасходыПоСпецификации(Спецификация, ДополнительныеРасходы);	
				КонецЕсли;
				
				СуммаВсего = 0;
				
				Для Каждого СтрокаДопРасходов Из ДополнительныеРасходы Цикл
					
					СтрокаДопРасходов.Курс = ?(УчетВалют И ЗначениеЗаполнено(СтрокаДопРасходов.Валюта), ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаДопРасходов.Валюта, Дата), 1);
					Если НЕ СтрокаДопРасходов.НеРаспределятьНаСтоимость Тогда
						СуммаВсего = СуммаВсего + СтрокаДопРасходов.Сумма * СтрокаДопРасходов.Курс;
					КонецЕсли;					
				КонецЦикла;
				
				СтрокаСЕбестоимости = ТаблицаСебестоимости.Добавить();
				СтрокаСЕбестоимости.Номенклатура = СтрокаТовара.Номенклатура;
				СтрокаСЕбестоимости.Цена 		 = СуммаВсего * Спецификация.ДополнительныйКоэффициентКСебестоимости;
				
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовара.Спецификация) Тогда
				
				Спецификация = СтрокаТовара.Спецификация;
				Если ПоСпецификации Тогда
					ДобавитьРасходыПоСпецификации(Спецификация, ДополнительныеРасходы);	
				КонецЕсли;
				
				СуммаВсего = 0;
				
				Для Каждого СтрокаДопРасходов Из ДополнительныеРасходы Цикл
					
					СтрокаДопРасходов.Курс = ?(УчетВалют И ЗначениеЗаполнено(СтрокаДопРасходов.Валюта), ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаДопРасходов.Валюта, Дата), 1);
					Если НЕ СтрокаДопРасходов.НеРаспределятьНаСтоимость Тогда
						СуммаВсего = СуммаВсего + СтрокаДопРасходов.Сумма * СтрокаДопРасходов.Курс;
					КонецЕсли;					
				КонецЦикла;
				
				СтрокаСЕбестоимости = ТаблицаСебестоимости.Добавить();
				СтрокаСЕбестоимости.Номенклатура = СтрокаТовара.Номенклатура;
				СтрокаСЕбестоимости.Цена 		 = СуммаВсего * Спецификация.ДополнительныйКоэффициентКСебестоимости;
				
			КонецЕсли;	
		КонецЦикла;
		
		Если ПоСпецификации Тогда
			ДополнительныеРасходы.Свернуть("Статья, ХранилищеДенег, ФормаОплаты, НеРаспределятьНаСтоимость, Валюта, Курс", "Сумма");
			Объект.ДополнительныеРасходы.Загрузить(ДополнительныеРасходы);
			
			ДополнительныеРасходыПриИзмененииНаСервере();	
		КонецЕсли;
		
		ТаблицаСебестоимостиТут = ТаблицаСебестоимости.Выгрузить();
		ТаблицаСебестоимостиТут.Свернуть("Номенклатура", "Цена");
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			ПараметрПоиска = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
			СтрокаЦен = ТаблицаСебестоимостиТут.НайтиСтроки(ПараметрПоиска);
			Если НЕ СтрокаЦен = Неопределено Тогда
				СтрокаЦен = СтрокаЦен[0];
				СтрокаТовара.Сумма = СтрокаЦен.Цена;
				СтрокаТовара.Цена = СтрокаТовара.Цена / ?(СтрокаТовара.Количество = 0, 1, СтрокаТовара.Количество);
			КонецЕсли;
		КонецЦикла; 		
		
		Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
		Объект.ТовараНаСумму	 = Объект.Товары.Итог("Сумма");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001562") Тогда		
		Элементы.ТоварыЗаполнитьКомплектациюПоСпецификациям.Видимость = ЛОЖЬ;
		Элементы.СпецификацииДобавить.Видимость = ЛОЖЬ;
		Элементы.МатериалыОбновитьЦеныМатериалов.Видимость = ЛОЖЬ;
		Элементы.МатериалыДобавить.Видимость = ЛОЖЬ;
		Элементы.РаботыДобавить.Видимость = ЛОЖЬ;
		Элементы.ДополнительныеРасходыДобавить.Видимость = ЛОЖЬ;
		Элементы.ТоварыДобавить.Видимость = ЛОЖЬ;
		Элементы.ТоварыУдалить.Видимость = ЛОЖЬ;
		Элементы.РаботыУдалить.Видимость = ЛОЖЬ;
		Элементы.ДополнительныеРасходыУдалить.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыЗаполнитьКомплектациюПоСпецификациям.Видимость = ИСТИНА;
		Элементы.СпецификацииДобавить.Видимость = ИСТИНА;
		Элементы.МатериалыОбновитьЦеныМатериалов.Видимость = ИСТИНА;
		Элементы.МатериалыДобавить.Видимость = ИСТИНА;
		Элементы.РаботыДобавить.Видимость = ИСТИНА;
		Элементы.ДополнительныеРасходыДобавить.Видимость = ИСТИНА;
		Элементы.ТоварыДобавить.Видимость = ИСТИНА;
		Элементы.ТоварыУдалить.Видимость = ИСТИНА;
		Элементы.РаботыУдалить.Видимость = ИСТИНА;
		Элементы.ДополнительныеРасходыУдалить.Видимость = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьОТКАЗдвижениядлянабора(Знач Номенклатура, Знач КоличествоВх, Знач Сумма, Знач ВестиУчетВаловойПрибыли, отказ, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка) // для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			отказ = обработатьОТКАЗдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		Иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Объект.СкладМатериалов, НоменклатураСостава, Количество, Объект.Дата, ИСТИНА, , Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	ОбработатьПолученныйШКНаСервере(ТекКод);	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		НоменклатураСтруктура = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
		Если НЕ НоменклатураСтруктура = Неопределено Тогда
			Номенклатура = НоменклатураСтруктура.Номенклатура;
			Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
				СтрокаТовара = Объект.Работы.Добавить();
				СтрокаТовара.Количество   = НоменклатураСтруктура.Количество;
				СтрокаТовара.Номенклатура = Номенклатура;			
				
			Иначе
				СтрокаТовара = Объект.Товары.Добавить();
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(Номенклатура, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
				СтрокаТовара.Количество   = 1;
				СтрокаТовара.КоличествоВОднойСпецификации = 1;
			КонецЕсли;		
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяКомплектацииПриИзменении(Элемент)
	Объект.ДатаКомплектации = Объект.Дата + Объект.ОбщееВремяКомплектации;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			Если Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДатаКомплектации = '00010101' Тогда
		Объект.ДатаКомплектации = Объект.Дата;		
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
	ТекущийОбъект.ОбщееВремяКомплектации = ТекущийОбъект.ДатаКомплектации - ТекущийОбъект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Спецификации;	
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаТовары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001560", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		УчетВалют = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетВаловойПрибыли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		ВестиУчетПоСкладам 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			// 			Если Объект.ДатаКомплектации < Объект.Дата Тогда
			// 				Объект.ДатаКомплектации = Объект.Дата;	
			// 			КонецЕсли;
			
			Объект.ДатаКомплектации = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			Если ЗначениеЗаполнено(Параметры.Спецификация) Тогда
				
				СтрокаСпецификации = Объект.Спецификации.Добавить();
				СтрокаСпецификации.Спецификация = Параметры.Спецификация;
				СпецификацииПриИзмененииНаСервере();	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВицЦенУчетаСтоимости) Тогда
				ВицЦенУчетаСтоимости = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(ВицЦенУчетаСтоимости) Тогда
					ВицЦенУчетаСтоимости = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;
				
				Объект.ВицЦенУчетаСтоимости = ВицЦенУчетаСтоимости;         	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПроизводства");
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");		
				КонецЕсли;	
			КонецЕсли;
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
		Иначе
			Попытка
				Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = ИСТИНА;			
			Исключение // нет прав
			КонецПопытки;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВицЦенУчетаСтоимости) Тогда
				Элементы.ВицЦенУчетаСтоимости.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.ТоварыЦена.Доступность 	= ЛОЖЬ;
			Элементы.МатериалыЦена.Доступность 	= ЛОЖЬ;
		КонецЕсли;
		
		Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.видимость = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляКомплектаций");
		Элементы.Разукомплектация.Видимость = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьРазукомплектацию");
		
		ОсновнаяВалюта  = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование;
		ОсновнаяВалюта1 = ОсновнаяВалюта;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.МатериалыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТовараВКоличестве, , ИСТИНА);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ГруппаДополнительныеРасходы.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаДополнительныеРасходы.Видимость 	= ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда						
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	Отказ = ЛОЖЬ;
	
	Ссылка = Объект.Ссылка;
	Дата   = Объект.Дата;
	Склад  = Объект.Склад;
	СкладМатериалов = Объект.СкладМатериалов;
	Если Объект.Разукомплектация Тогда
		Материалы   	= Объект.Товары;
	Иначе
		Материалы   	= Объект.Материалы;
	КонецЕсли;
	
	ТовараНаСумму   = Объект.ТовараНаСумму;
	ТовараВКоличестве = Объект.ТовараВКоличестве;	
	
	ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	
	Если ВестиУчетПоСкладам Тогда
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
			Отказ = ИСТИНА;		
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СкладМатериалов) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад материалов!"), , Ссылка);
			Отказ = ИСТИНА;		
		КонецЕсли;
	КонецЕсли;
	
	ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
	ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
	
	ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
	ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
	
	Если Объект.Разукомплектация Тогда
		ВсеМатериалы = Объект.Товары.Выгрузить(, "Номенклатура");	
	Иначе
		ВсеМатериалы = Объект.Материалы.Выгрузить(, "Номенклатура");	
	КонецЕсли;
	
	СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Объект.Ссылка, СкладМатериалов, дата, ОстаткиСледуетПроверять, ВсеМатериалы, "Материалы");
	ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
	
	Если ОстаткиСледуетПроверять тогда
		ГТ = СтруктураТаблиц.ТаблицаОстатков;	
	КонецЕсли;	
	
	Для Каждого ТекСтрокаТовара Из Материалы Цикл
		
		Номенклатура 	  = ТекСтрокаТовара.Номенклатура;
		// 			СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
		Количество 		  = ТекСтрокаТовара.Количество;
		КоличествоОстаток = Неопределено;
		
		Если ОстаткиСледуетПроверять тогда
			СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
			
			Если НЕ СтрокаОстаток = Неопределено Тогда
				ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
				ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
				
			Иначе
				ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
				
			КонецЕсли;			
			
		Иначе 			
			ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
			
		КонецЕсли;	
		
		Если НЕ ПредопределенныйТовар
			И НЕ этонабор тогда
			
			Если ОстаткиСледуетПроверять тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, СкладМатериалов, Номенклатура, Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			сумма 	 = ТекСтрокаТовара.Сумма;
			
			Если ЭтоНабор Тогда 										
				отказ = обработатьОТКАЗдвижениядлянабора(Номенклатура, ТекСтрокаТовара.Количество, Сумма, ВестиУчетВаловойПрибыли, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		
		Для Каждого Оплата Из Объект.ДополнительныеРасходы Цикл
			Если НЕ Оплата.Сумма = 0 тогда
				
				Если ЗначениеЗаполнено(Оплата.ХранилищеДенег) Тогда
					ФормаОплаты = Оплата.ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = Оплата.ФормаОплаты;				
				КонецЕсли;
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Оплата.Сумма, Дата, ФормаОплаты, Оплата.Валюта, Оплата.ХранилищеДенег, , Объект.Ссылка);
				
			КонецЕсли;   	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаКлиенте
Процедура РаботыВремяВыполненияПриИзменении(Элемент)
	
	Объект.ОбщееВремяКомплектации = Объект.Работы.Итог("ВремяВыполнения");
	Объект.ДатаКомплектации 	  = Объект.Дата + Объект.ОбщееВремяКомплектации;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацииПриИзменении(Элемент)
	
	СпецификацииПриИзмененииНаСервере();
	ЗаполнитьКомплектациюПоСпецификациямНаСервере(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура СпецификацииПриИзмененииНаСервере()
	
	Продукты 	 = Объект.Товары.Выгрузить(, "Номенклатура");
	Спецификации = Объект.Спецификации.Выгрузить(, "Спецификация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СпецификацииТовары.Ссылка КАК Спецификация,
	|	СпецификацииТовары.Номенклатура,
	|	СпецификацииТовары.ЕдиницаИзмерения,
	|	СпецификацииТовары.Количество,
	|	СпецификацииТовары.ОСтроке
	|ИЗ Справочник.Спецификации.Товары КАК СпецификацииТовары
	|ГДЕ НЕ СпецификацииТовары.Номенклатура В (&Продукты)
	|	И СпецификацииТовары.Ссылка В(&Спецификации)";
	
	Запрос.УстановитьПараметр("Продукты", Продукты);
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
			СтрокаТовара.Спецификация 	= ВыборкаДетальныеЗаписи.Спецификация;
			СтрокаТовара.Количество 	= ВыборкаДетальныеЗаписи.Количество;
			СтрокаТовара.ОСтроке 		= ВыборкаДетальныеЗаписи.ОСтроке;
			СтрокаТовара.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			СтрокаТовара.КоличествоВОднойСпецификации = ВыборкаДетальныеЗаписи.Количество;
			
		КонецЦикла;                        	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СерияНоменклатуры) Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	Объект.ТовараНаСумму	 = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СерияНоменклатуры) Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныМатериаловНаСервере()
	
	Для Каждого СтрокаМатериала Из Объект.Материалы Цикл
		СтрокаМатериала.Цена  = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаМатериала.Номенклатура, СтрокаМатериала.Количество, Объект.Дата, , , Объект.СкладМатериалов, СтрокаМатериала.СерияНоменклатуры);
		СтрокаМатериала.Сумма = СтрокаМатериала.Количество * СтрокаМатериала.Цена;
	КонецЦикла;
	
	ЗаполнитьКомплектациюПоСпецификациямНаСервере(ЛОЖЬ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныМатериалов(Команда)
	ОбновитьЦеныМатериаловНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзменении();	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении()
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	
	Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.Комплектация"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(, , , , Объект.Склад, );	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладМатериаловПриИзменении(Элемент)
	СкладМатериаловПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладМатериаловПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СкладМатериалов)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	СтрокаТовара = Элементы.Материалы.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.СкладМатериалов) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.СкладМатериалов);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.СерияНоменклатуры);
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы);
	
	СерияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Элементы.Материалы.ТекущиеДанные.СерияНоменклатуры = СерияНоменклатуры;	
		Элементы.Материалы.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Материалы.ТекущийЭлемент = Элементы.МатериалыКоличество;
		
	Иначе
		Элементы.Материалы.ЗакончитьРедактированиеСтроки(ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры
