// sza151210-2336 про
// sza151013-0340 другие регистры
// sza150110-0118 НЧ
// sza141226-0301 не уст завис цены\
// sza140703-1239  основной склад при отключенном учете
// sza140701-1320  
// sza140615-1955  
// sza130910-1741 :
Процедура ОбработатьДвиженияДляНабора(Номенклатура, Склад, КоличествоВх, Сумма, курс, УчетВаловойПрибыли) // для вложенных наборов
	
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		Количество 	  = КоличествоВх * СтрокаСоставаНабора.Количество * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1);
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			ОбработатьДвиженияДляНабора(НоменклатураСостава, склад, Количество, СуммаЭлемента, курс, УчетВаловойПрибыли);
			
		Иначе			
			СуммаТов = СуммаЭлемента * Курс;
			
			Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава) Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад;
				Движение.Количество 	= Количество;
				Движение.Комментарий	= Комментарий;
				Движение.Сумма 			= СуммаТов;
				Движение.СписаниеИлиОприходование = ИСТИНА;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если НЕ Отказ Тогда
			
			ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
			
			Движения.РасчетыСПоставщиками.Записать();
			Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			Движения.Деньги.Записать();
			Движения.Зарплата.Записать();
			Движения.Расчеты.Записать();
			Движения.РасчетыСОтсрочкой.Записать();
			Движения.Товары.Записать();
			Движения.ТоварыПереданныеНаКомиссию.Записать();
			Движения.ПродажиСотрудников.Записать();
			Движения.НакоплениеНаВаучеры.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			ОсновнойСклад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") Тогда
				Для Каждого ТекСтрока Из ТоварыПереданныеНаКомиссию Цикл
					
					Движение = Движения.ТоварыПереданныеНаКомиссию.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= ?(ЗначениеЗаполнено(ТекСтрока.ДатаПередачиНаКомиссию), ТекСтрока.ДатаПередачиНаКомиссию, Дата);
					Движение.Сумма 			= ТекСтрока.Сумма;
					Движение.Клиент  		= ТекСтрока.Клиент;
					Движение.Договор 		= ТекСтрока.Договор;
					Движение.Количество 	= ТекСтрока.Количество;
					Движение.Комментарий 	= ТекСтрока.ОСтроке;
					Движение.Номенклатура 	= ТекСтрока.Номенклатура;
					Движение.СерияНоменклатуры 	  = ТекСтрока.СерияНоменклатуры;
					Движение.ДатаОтчетаПоКомиссии = ?(ЗначениеЗаполнено(ТекСтрока.ДатаОтчетаПоКомиссии), ТекСтрока.ДатаОтчетаПоКомиссии, Дата);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
				
				Для Каждого ТекСтрокаДеньги Из Деньги Цикл
					
					Валюта = ?(ЗначениеЗаполнено(ТекСтрокаДеньги.Валюта), ТекСтрокаДеньги.Валюта, ОсновнаяВалюта);
					
					Движение = Движения.Деньги.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= Дата;
					Движение.Статья 		= ТекСтрокаДеньги.Статья;
					Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(ТекСтрокаДеньги.ОстатокДенег, , Валюта, Дата);
					Движение.СуммаВВалюте 	= ТекСтрокаДеньги.ОстатокДенег;
					Движение.ФормаОплаты 	= ТекСтрокаДеньги.ФормаОплаты;
					Движение.ХранилищеДенег = ТекСтрокаДеньги.ХранилищеДенег;
					Движение.Валюта 		= Валюта;
				КонецЦикла;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				
				Для Каждого ТекСтрокаРасчеты Из Расчеты Цикл
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = Дата;
					Движение.Клиент 	 = ТекСтрокаРасчеты.Клиент;
					Движение.Договор	 = ТекСтрокаРасчеты.Договор;
					Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
					Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
				КонецЦикла;
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
					
					Для Каждого ТекСтрокаРасчеты Из Расчеты Цикл
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Период 	 = Дата + ТекСтрокаРасчеты.ОстатокДнейОтсрочки * 3600 * 24;
						Движение.Клиент 	 = ТекСтрокаРасчеты.Клиент;
						Движение.Договор	 = ТекСтрокаРасчеты.Договор;
						Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
						Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				
				Для Каждого ТекСтрокаРасчеты Из РасчетыСПоставщиками Цикл
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = Дата;
					Движение.Поставщик 	 = ТекСтрокаРасчеты.Поставщик;
					Движение.Договор	 = ТекСтрокаРасчеты.Договор;
					Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
					Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
				КонецЦикла;
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
					
					Для Каждого ТекСтрокаРасчеты Из РасчетыСПоставщиками Цикл
						Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Период 	 = Дата + ТекСтрокаРасчеты.ОстатокДнейОтсрочки * 3600 * 24;
						Движение.Поставщик 	 = ТекСтрокаРасчеты.Поставщик;
						Движение.Договор	 = ТекСтрокаРасчеты.Договор;
						Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
						Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
					Для Каждого ТекСтрока Из ПродажиСотрудников Цикл
						Движение = Движения.ПродажиСотрудников.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Количество  = ТекСтрока.Количество;
						Движение.Номенклатура= ТекСтрока.Номенклатура;
						Движение.Сотрудник   = ТекСтрока.Сотрудник;
						Движение.Период 	 = Дата;
						Движение.Сумма 		 = ТекСтрока.Сумма;
						Движение.Комментарий = ТекСтрока.Комментарий;
					КонецЦикла;
			КонецЕсли;
			
			Если НЕ ВзаимозачетДолгаКонтрагентов тогда
				
				Движения.Товары.Записывать 	= ИСТИНА; 		
				ЗначениеЗаполненоВидЦен 	= ЗначениеЗаполнено(ВидЦен);
				
				УчетВаловойПрибыли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
				
				Если ЗначениеЗаполнено(видцен) Тогда
					Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(видцен.ВалютаЦены, Дата);
				Иначе
					Курс = 1;
				КонецЕсли;
				
				Для Каждого ТекСтрокаТовара Из Товары Цикл
					
					Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
						И НЕ ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения) Тогда
						
						СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
						СерияОбъект.ДокументПриобретения = Ссылка;
						СерияОбъект.Записать();
					КонецЕсли;
					
					Номенклатура = ТекСтрокаТовара.Номенклатура;
					КомментарийСтоки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
					Количество = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
					
					Если НЕ ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
						
						СуммаТов = ТекСтрокаТовара.Сумма * Курс;
						Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
							Движение = Движения.Товары.Добавить();
							Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = Номенклатура;
							Движение.Склад 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.Склад), ТекСтрокаТовара.Склад, ОсновнойСклад);
							Движение.Количество   = Количество;
							Движение.Сумма 		  = СуммаТов;
							Движение.Комментарий  = КомментарийСтоки;
							Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
							Движение.СписаниеИлиОприходование = ИСТИНА;
						КонецЕсли;
						
						Если ЗначениеЗаполненоВидЦен Тогда
							СтрокаЦен = Новый Структура;
							СтрокаЦен.Вставить("Цена", ТекСтрокаТовара.Цена);
							СтрокаЦен.Вставить("Номенклатура", Номенклатура);
							
							ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаЦен, Ссылка, Комментарий, Дата, , , , , НеУстанавливатьЗависимыеЦЕны, ТекСтрокаТовара.ЕдиницаИзмерения,);
						КонецЕсли;
						
					Иначе   // набор					
						ОбработатьДвиженияДляНабора(Номенклатура, ?(ЗначениеЗаполнено(ТекСтрокаТовара.Склад), ТекСтрокаТовара.Склад, ОсновнойСклад), ТекСтрокаТовара.Количество, ТекСтрокаТовара.Сумма, курс, УчетВаловойПрибыли);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
					
					Движения.Зарплата.Записывать = ИСТИНА;
					Для Каждого ТекСтрокаЗП Из Зарплата Цикл
						Движение = Движения.Зарплата.Добавить();
						Движение.ВидДвижения   = ВидДвиженияНакопленияПриход; // начисление
						Движение.Период 	   = Дата;
						Движение.Валюта 	   = ТекСтрокаЗП.Валюта;
						Движение.ВидНачисления = ТекСтрокаЗП.ВидНачисления;
						Движение.Сумма 		   = ОбщийМодульСервер.ПоКурсу(ТекСтрокаЗП.Сумма, ТекСтрокаЗП.Валюта, , Дата);
						Движение.СуммаВВалюте  = ТекСтрокаЗП.Сумма;
						Движение.Комментарий   = ТекСтрокаЗП.Комментарий;
						Движение.Сотрудник 	   = ТекСтрокаЗП.Сотрудник;
						Движение.ОписаниеНачисления = ТекСтрокаЗП.ОписаниеНачисления;
					КонецЦикла;
				КонецЕсли;
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда
					
					Движения.НакоплениеНаВаучеры.Записывать = ИСТИНА;
					Для Каждого ТекСтрока Из НакоплениеНаВаучеры Цикл
						Движение = Движения.НакоплениеНаВаучеры.Добавить();
						Движение.ВидДвижения   = ВидДвиженияНакопленияПриход; // начисление
						Движение.Валюта        = ТекСтрока.Валюта;
						Движение.Ваучер		   = ТекСтрока.Ваучер;
						Движение.Комментарий   = ТекСтрока.Комментарий;
						Движение.Период        = Дата;
						Движение.Сумма		   = ТекСтрока.Сумма;
						Движение.СуммаВВалюте  = ТекСтрока.СуммаВВалюте;
					КонецЦикла;
				КонецЕсли;
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
					
					Для Каждого СтрокаЦен Из Цены Цикл				
						ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(СтрокаЦен.ВидЦен, СтрокаЦен, Ссылка, ?(ЗначениеЗаполнено(строкацен.ОСтроке), строкацен.ОСтроке, Комментарий), Дата, , , , ,НеУстанавливатьЗависимыеЦЕны);
					КонецЦикла;			
					
				Иначе			
					ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
					ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
					
					Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 
						ИЛИ ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен Тогда
						
						Формула = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, врег(ОсновнаяФормулаПреобразованияЦен.Формула), "");
						ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
						ЕстьЦена = не найти(Формула, "ЦЕНА") = 0;
						
						Для Каждого СтрокаТовара Из Товары Цикл
							
							Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
								
								Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 
									И НЕ СтрокаТовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
									
									НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
									НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
									НоменклатураОбъект.Записать();	
									
								ИначеЕсли ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
									
									Попытка 
										Цена 	  = СтрокаТовара.Цена;
										НоваяЦена = 0;
										Формула   = Врег(ОсновнаяФормулаПреобразованияЦен.Формула);
										НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
										
										Если ЕстьЦена Тогда
											Цена = СтрокаТовара.Цена;
										КонецЕсли;					
										
										Если ЕстьЛьготнаяЦена Тогда
											ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);								
										КонецЕсли;			
										
										выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
										
										Если НЕ СтрокаТовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = НоваяЦена;
											НоменклатураОбъект.Записать();	
										КонецЕсли;
										
									Исключение 	
										Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
											ТекстОписаниеОшибки = ОписаниеОшибки();
											ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены Произошла ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
										КонецЕсли;
										
									КонецПопытки;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движения.Деньги.Записывать 	 = НЕ Отказ;
		Движения.Зарплата.Записывать = НЕ Отказ;
		Движения.Расчеты.Записывать  = НЕ Отказ;
		Движения.Товары.Записывать 	 = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать    = НЕ Отказ;	
		Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
		Движения.ПродажиСотрудников.Записывать 	 = НЕ Отказ;
		Движения.НакоплениеНаВаучеры.Записывать  = НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
		Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ Отказ;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Попытка // ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002201", , Отказ, ЭтотОбъект);	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОтборПоДокументу = Новый Структура;
		ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
		
		Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;			
		
		Для Каждого ТекСтрокаТовара Из Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
				И ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения = Ссылка Тогда
				
				СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
				СерияОбъект.ДокументПриобретения = Неопределено;
				СерияОбъект.Записать();
			КонецЕсли;	
		КонецЦикла;
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность()
		И РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		Если ТовараВКоличестве = 0 
			И ТовараНаСумму = 0 
			И НЕ ВзаимозачетДолгаКонтрагентов
			И цены.Количество() = 0 
			И расчеты.Количество() = 0 
			И РасчетыСПоставщиками.Количество() = 0 
			И Деньги.Количество() = 0 
			И Зарплата = 0
			И РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "Расчеты", "Клиент", "-");
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "РасчетыСПоставщиками", "Поставщик", "-");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		ТекстОшибки = "";
		
		МассивПустыхСтрок = Новый массив;
		Для Каждого СтрокаТаблицы из расчеты цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Клиент) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТаблицы);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Договор)
				И НЕ СтрокаТаблицы.Договор.КлиентПоставщик = СтрокаТаблицы.Клиент Тогда
				
				СтрокаТаблицы.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы из МассивПустыхСтрок цикл
			расчеты.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		МассивПустыхСтрок = Новый массив;
		Для Каждого СтрокаТаблицы из РасчетыСПоставщиками цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТаблицы);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Договор)
				И НЕ СтрокаТаблицы.Договор.КлиентПоставщик = СтрокаТаблицы.Поставщик Тогда
				
				СтрокаТаблицы.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы из МассивПустыхСтрок цикл
			РасчетыСПоставщиками.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		МассивПустыхСтрок = Новый массив;
		Для Каждого СтрокаТаблицы из Деньги цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОстатокДенег) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы из МассивПустыхСтрок цикл
			Деньги.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		Если НЕ ВзаимозачетДолгаКонтрагентов тогда
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") Тогда
				Товары.Свернуть("Склад, Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ОСтроке", "Количество, Сумма");        	
			КонецЕсли;
			
			МассивПустыхСтрок = Новый массив;
			
			ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
			
			Для Каждого СтрокаТовары из товары цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
					МассивПустыхСтрок.Добавить(СтрокаТовары);
					
				Иначеесли ВестиУчетПоСкладам 
					И НЕ ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
					
					отказ = ИСТИНА;
					ТекстОшибки = ТекстОшибки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не во всех строках Товары указан Склад!"); 
					Попытка
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер строки") + ": " + СтрокаТовары.НомерСтроки + Символы.пс; 
					Исключение
					КонецПопытки;
					прервать;
					
				КонецЕсли;                                    	
			КонецЦикла;
			
			Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
				товары.Удалить(СтрокаТовары);	
			КонецЦикла;	
			
			МассивПустыхСтрок = Новый массив;
			Для Каждого СтрокаТаблицы из цены цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					
					МассивПустыхСтрок.Добавить(СтрокаТаблицы);
				Иначеесли не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен) Тогда	
					
					отказ = ИСТИНА;
					ТекстОшибки = ТекстОшибки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не во всех строках Цен указан Вид цен!");
					Попытка
					ТекстОшибки = ТекстОшибки + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер строки") + ": " + СтрокаТовары.НомерСтроки + Символы.пс; 
					Исключение
					КонецПопытки;
					прервать;
					
				КонецЕсли;                                    	
				
			КонецЦикла;
			
			Для Каждого СтрокаТаблицы из МассивПустыхСтрок цикл
				цены.Удалить(СтрокаТаблицы);	
			КонецЦикла;
			
			МассивПустыхСтрок = Новый массив;
			Для Каждого СтрокаТовары из Зарплата цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.Сотрудник) Тогда
					МассивПустыхСтрок.Добавить(СтрокаТовары);
				КонецЕсли;                                    	
			КонецЦикла;
			
			Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
				Зарплата.Удалить(СтрокаТовары);	
			КонецЦикла;
			
			ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
			
			ТовараВКоличестве = товары.итог("Количество");
			Если ЗначениеЗаполнено(ВидЦен)
				И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
				
				ТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), ВидЦен.ВалютаЦены, , Дата);
			Иначе
				ТовараНаСумму = товары.Итог("Сумма");
			КонецЕсли;
			
		Иначе  // взаимозачет
			ТовараНаСумму = расчеты.Итог("Сумма") - РасчетыСПоставщиками.Итог("Сумма") + ОстатокДенег;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			Для Каждого СтрокаДенег Из Деньги Цикл
				Если НЕ СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		Если отказ
			И НЕ ТекстОшибки = "" тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ТекстОшибки, , Ссылка);
			КонецЕсли;
		КонецЕсли;      	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры
