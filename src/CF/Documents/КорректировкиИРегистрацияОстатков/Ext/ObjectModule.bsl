//sza140613-1407 : 
//sza130910-1741 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
		Если не отказ Тогда
			
			движения.РасчетыСПоставщиками.Записать();
			движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			движения.Деньги.Записать();
			движения.Зарплата.Записать();
			движения.Расчеты.Записать();
			движения.РасчетыСОтсрочкой.Записать();
			движения.Товары.Записать();
			движения.ТоварыПереданныеНаКомиссию.Записать();
			
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
			основнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
				Для Каждого ТекСтрока Из ТоварыПереданныеНаКомиссию Цикл
					
					Движение = Движения.ТоварыПереданныеНаКомиссию.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= ?(ЗначениеЗаполнено(ТекСтрока.ДатаПередачиНаКомиссию), ТекСтрока.ДатаПередачиНаКомиссию, Дата);
					Движение.Сумма 			= ТекСтрока.Сумма;
					Движение.Клиент  		= ТекСтрока.Клиент;
					Движение.Договор 		= ТекСтрока.Договор;
					Движение.Количество 	= ТекСтрока.Количество;
					Движение.Комментарий 	= ТекСтрока.ОСтроке;
					Движение.Номенклатура 	= ТекСтрока.Номенклатура;
					Движение.СерияНоменклатуры 	  = ТекСтрока.СерияНоменклатуры;
					Движение.ДатаОтчетаПоКомиссии = ?(ЗначениеЗаполнено(ТекСтрока.ДатаОтчетаПоКомиссии), ТекСтрока.ДатаОтчетаПоКомиссии, Дата);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
				
				Для Каждого ТекСтрокаДеньги Из Деньги Цикл
					
					Валюта = ?(ЗначениеЗаполнено(ТекСтрокаДеньги.Валюта), ТекСтрокаДеньги.Валюта, основнаяВалюта);
					
					Движение = Движения.Деньги.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= Дата;
					Движение.Статья 		= ТекСтрокаДеньги.Статья;
					Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(ТекСтрокаДеньги.ОстатокДенег, , Валюта, Дата);
					Движение.СуммаВВалюте 	= ТекСтрокаДеньги.ОстатокДенег;
					Движение.ФормаОплаты 	= ТекСтрокаДеньги.ФормаОплаты;
					Движение.ХранилищеДенег = ТекСтрокаДеньги.ХранилищеДенег;
					Движение.Валюта 		= Валюта;
				КонецЦикла;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				
				Для Каждого ТекСтрокаРасчеты Из Расчеты Цикл
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = Дата;
					Движение.Клиент 	 = ТекСтрокаРасчеты.Клиент;
					Движение.Договор	 = ТекСтрокаРасчеты.Договор;
					Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
					Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
				КонецЦикла;
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
					
					Для Каждого ТекСтрокаРасчеты Из Расчеты Цикл
						Движение = Движения.Расчеты.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Период 	 = Дата + ТекСтрокаРасчеты.ОстатокДнейОтсрочки * 3600 * 24;
						Движение.Клиент 	 = ТекСтрокаРасчеты.Клиент;
						Движение.Договор	 = ТекСтрокаРасчеты.Договор;
						Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
						Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				
				Для Каждого ТекСтрокаРасчеты Из РасчетыСПоставщиками Цикл
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = Дата;
					Движение.Поставщик 	 = ТекСтрокаРасчеты.Поставщик;
					Движение.Договор	 = ТекСтрокаРасчеты.Договор;
					Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
					Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
				КонецЦикла;
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
					
					Для Каждого ТекСтрокаРасчеты Из РасчетыСПоставщиками Цикл
						Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Период 	 = Дата + ТекСтрокаРасчеты.ОстатокДнейОтсрочки * 3600 * 24;
						Движение.Поставщик 	 = ТекСтрокаРасчеты.Поставщик;
						Движение.Договор	 = ТекСтрокаРасчеты.Договор;
						Движение.Сумма 		 = ТекСтрокаРасчеты.Сумма;
						Движение.Комментарий = ТекСтрокаРасчеты.Комментарий;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			если не ВзаимозачетДолгаКонтрагентов тогда
				
				Движения.Товары.Записывать 	= Истина; 		
				ЗначениеЗаполненоВидЦен 	= ЗначениеЗаполнено(ВидЦен);
				
				УчетВаловойПрибыли = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
				
				Если ЗначениеЗаполнено(видцен) Тогда
					курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(видцен.ВалютаЦены, Дата);
				Иначе
					Курс = 1;
				КонецЕсли;
				
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					
					Номенклатура = ТекСтрокаТовары.Номенклатура;
					КомментарийСтоки = ?(ЗначениеЗаполнено(ТекСтрокаТовары.ОСтроке), ТекСтрокаТовары.ОСтроке, Комментарий);
					Количество = ?(ЗначениеЗаполнено(ТекСтрокаТовары.ЕдиницаИзмерения), ТекСтрокаТовары.ЕдиницаИзмерения.Количество * ТекСтрокаТовары.Количество, ТекСтрокаТовары.Количество);
					
					если не ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
						
						СуммаТов = ТекСтрокаТовары.Сумма * Курс;
						Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
							Движение = Движения.Товары.Добавить();
							Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = Номенклатура;
							Движение.Склад 		  = ТекСтрокаТовары.Склад;
							Движение.Количество   = Количество;
							Движение.Сумма 		  = СуммаТов;
							Движение.Комментарий  = КомментарийСтоки;
							Движение.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
							Движение.СписаниеИлиОприходование = истина;
						КонецЕсли;
						
						Если ЗначениеЗаполненоВидЦен Тогда
							СтрокаЦен = Новый Структура;
							СтрокаЦен.Вставить("Цена", ТекСтрокаТовары.Цена);
							СтрокаЦен.Вставить("Номенклатура", Номенклатура);
							
							ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаЦен, Ссылка, Комментарий, Дата, , , , , , ТекСтрокаТовары.ЕдиницаИзмерения);
						КонецЕсли;
						
					иначе   //набор					
						ОбработатьДвиженияДляНабора(Номенклатура, ТекСтрокаТовары.склад, ТекСтрокаТовары.Количество, ТекСтрокаТовары.Сумма, курс, УчетВаловойПрибыли);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
					
					Движения.Зарплата.Записывать = Истина;
					Для Каждого ТекСтрокаЗП Из Зарплата Цикл
						Движение = Движения.Зарплата.Добавить();
						Движение.ВидДвижения   = ВидДвиженияНакопленияПриход; //начисление
						Движение.Период 	   = Дата;
						Движение.Валюта 	   = ТекСтрокаЗП.Валюта;
						Движение.ВидНачисления = ТекСтрокаЗП.ВидНачисления;
						Движение.Сумма 		   = ОбщийМодульСервер.ПоКурсу(ТекСтрокаЗП.Сумма, ТекСтрокаЗП.Валюта, , Дата);
						Движение.СуммаВВалюте  = ТекСтрокаЗП.Сумма;
						Движение.Комментарий   = ТекСтрокаЗП.Комментарий;
						Движение.Сотрудник 	   = ТекСтрокаЗП.Сотрудник;
						Движение.ОписаниеНачисления = ТекСтрокаЗП.ОписаниеНачисления;
					КонецЦикла;
				КонецЕсли;
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
					
					Для каждого СтрокаЦен Из Цены Цикл				
						ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(СтрокаЦен.ВидЦен, СтрокаЦен, Ссылка, ?(ЗначениеЗаполнено(строкацен.ОСтроке), строкацен.ОСтроке, Комментарий), Дата,  );							
					КонецЦикла;			
					
				иначе			
					ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
					ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
					
					Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 
						или ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен Тогда
						
						Формула = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, врег(ОсновнаяФормулаПреобразованияЦен.Формула), "");
						ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
						ЕстьЦена = не найти(Формула, "ЦЕНА") = 0;
						
						Для каждого СтрокаТовара Из Товары Цикл
							
							Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) тогда
								
								Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 
									И НЕ строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
									
									НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
									НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
									НоменклатураОбъект.Записать();	
									
								иначеЕсли ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
									
									Попытка 
										Цена 	  = СтрокаТовара.Цена;
										НоваяЦена = 0;
										Формула   = Врег(ОсновнаяФормулаПреобразованияЦен.Формула);
										НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
										
										Если ЕстьЦена Тогда
											Цена = СтрокаТовара.Цена;
										КонецЕсли;					
										
										Если ЕстьЛьготнаяЦена Тогда
											ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);								
										КонецЕсли;			
										
										выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
										
										если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = НоваяЦена;
											НоменклатураОбъект.Записать();	
										КонецЕсли;
										
									Исключение 	
										если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
											//Сообщение = Новый СообщениеПользователю;
											//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки();
											//Сообщение.Сообщить();	
											ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
										КонецЕсли;
										
									КонецПопытки;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движения.Деньги.Записывать 	 = НЕ Отказ;
		Движения.Зарплата.Записывать = НЕ Отказ;
		Движения.Расчеты.Записывать  = НЕ Отказ;
		Движения.Товары.Записывать 	 = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать    = НЕ Отказ;	
		Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
		Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДвиженияДляНабора(Номенклатура, склад, КоличествоВх, Сумма, курс, УчетВаловойПрибыли) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		Количество 	  = КоличествоВх * СтрокаСоставаНабора.Количество * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1);
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			ОбработатьДвиженияДляНабора(НоменклатураСостава, склад, Количество, СуммаЭлемента, курс, УчетВаловойПрибыли);
			
		иначе			
			СуммаТов = СуммаЭлемента * Курс;
			
			Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава) Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад;
				Движение.Количество 	= Количество;
				Движение.Комментарий	= Комментарий;
				Движение.Сумма 			= СуммаТов;
				Движение.СписаниеИлиОприходование = истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность()
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		если ТовараВКоличестве = 0 
			и ТовараНаСумму = 0 
			и не ВзаимозачетДолгаКонтрагентов
			и цены.Количество() = 0 
			и расчеты.Количество() = 0 
			и РасчетыСПоставщиками.Количество() = 0 
			и Деньги.Количество() = 0 
			и Зарплата = 0
			и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ ТОгда
		ТекстОшибки = "";
		
		массивпустыхстрок = новый массив;
		для каждого СтрокаТаблицы из расчеты цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Клиент) Тогда
				массивпустыхстрок.Добавить(СтрокаТаблицы);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Договор)
				и не СтрокаТаблицы.Договор.КлиентПоставщик = СтрокаТаблицы.Клиент Тогда
				
				СтрокаТаблицы.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТаблицы из массивпустыхстрок цикл
			расчеты.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		массивпустыхстрок = новый массив;
		для каждого СтрокаТаблицы из РасчетыСПоставщиками цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Поставщик) Тогда
				массивпустыхстрок.Добавить(СтрокаТаблицы);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Договор)
				и не СтрокаТаблицы.Договор.КлиентПоставщик = СтрокаТаблицы.Поставщик Тогда
				
				СтрокаТаблицы.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТаблицы из массивпустыхстрок цикл
			РасчетыСПоставщиками.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		массивпустыхстрок = новый массив;
		для каждого СтрокаТаблицы из Деньги цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОстатокДенег) Тогда
				массивпустыхстрок.Добавить(СтрокаТаблицы);
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТаблицы из массивпустыхстрок цикл
			Деньги.Удалить(СтрокаТаблицы);	
		КонецЦикла;
		
		если не ВзаимозачетДолгаКонтрагентов тогда
			если не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") тогда
				товары.Свернуть("Склад, Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ОСтроке", "Количество, Сумма");        	
			КонецЕсли;
			
			массивпустыхстрок = новый массив;
			
			ВестиУчетПоСкладам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;
			
			для каждого СтрокаТовары из товары цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
					массивпустыхстрок.Добавить(СтрокаТовары);
					
				иначеесли ВестиУчетПоСкладам 
					и НЕ ЗначениеЗаполнено(СтрокаТовары.Склад) тогда
					
					отказ = истина;
					ТекстОшибки = ТекстОшибки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не во всех строках Товары указан Склад! " ) + СтрокаТовары.НомерСтроки + Символы.пс; 
					прервать;
					
				КонецЕсли;                                    	
			КонецЦикла;
			
			для каждого СтрокаТовары из массивпустыхстрок цикл
				товары.Удалить(СтрокаТовары);	
			КонецЦикла;	
			
			массивпустыхстрок = новый массив;
			для каждого СтрокаТаблицы из цены цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) тогда
					
					массивпустыхстрок.Добавить(СтрокаТаблицы);
				иначеесли не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен) Тогда	
					
					отказ = истина;
					ТекстОшибки = ТекстОшибки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не во всех строках Цен указан Вид цен! " ) + СтрокаТовары.НомерСтроки + Символы.пс; 
					прервать;
					
				КонецЕсли;                                    	
				
			КонецЦикла;
			
			для каждого СтрокаТаблицы из массивпустыхстрок цикл
				цены.Удалить(СтрокаТаблицы);	
			КонецЦикла;
			
			массивпустыхстрок = новый массив;
			для каждого СтрокаТовары из Зарплата цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТовары.Сотрудник) Тогда
					массивпустыхстрок.Добавить(СтрокаТовары);
				КонецЕсли;                                    	
			КонецЦикла;
			
			для каждого СтрокаТовары из массивпустыхстрок цикл
				Зарплата.Удалить(СтрокаТовары);	
			КонецЦикла;
			
			ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
			
			ТовараВКоличестве = товары.итог("Количество");
			Если ЗначениеЗаполнено(ВидЦен)
				и ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
				
				ТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), ВидЦен.ВалютаЦены, , Дата);
			Иначе
				ТовараНаСумму = товары.Итог("Сумма");
			КонецЕсли;
			
		иначе  //взаимозачет
			ТовараНаСумму = расчеты.Итог("Сумма") - РасчетыСПоставщиками.Итог("Сумма") + ОстатокДенег;
			
		конецесли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			Для Каждого СтрокаДенег Из Деньги Цикл
				Если Не СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		если отказ
			и не ТекстОшибки = "" тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				//сообщить(ТекстОшибки );
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ТекстОшибки, , Ссылка);
			КонецЕсли;
		КонецЕсли;      	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не Отказ тогда
		ОтборПоДокументу = Новый Структура;
		ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
		
		Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
