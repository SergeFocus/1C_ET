//sza131205-0000 SZA: 
//sza130909-1806 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
	ФормаОплатыПоУмолчанию = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию") ;
	
	Элементы.ГруппаПодвалПоставщики.Видимость 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") ;
	Элементы.ГруппаПодвалКлиенты.Видимость 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;
	Элементы.ГруппаИтогДенег.Видимость 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
	элементы.Взаиморасчеты1.Видимость 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ;
	УчитыватьДеньгиВНесколькихХранилищах		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчитыватьДеньгиВНесколькихХранилищах") ;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ВзаимозачетДолгаКонтрагентов = истина;
		Объект.Комментарий 					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зачет долга:");
		
		Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
	Иначе
		Если Объект.Проведен Тогда		
			элементы.ЗаполнитеДанныеПоКорректировкеИлиОстаткамПоБлокамУчета.Видимость = ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеОсновнойВалюты = Справочники.Валюты.ОсновнаяВалюта.Наименование ;  
	Элементы.ДеньгиФормаОплаты.Видимость 		= НЕ УчитыватьДеньгиВНесколькихХранилищах;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() 
		и ИмяСобытия = "TracksData" Тогда
		
		ПолученКодИзСМК(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			СтрокаКлиент = Объект.Расчеты.Добавить();
			СтрокаКлиент.Клиент = Клиент;
			Элементы.Расчеты.ТекущаяСтрока = СтрокаКлиент.ПолучитьИдентификатор();
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбработатьБлокировку();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(ПриСозданииФормы = ложь)
	
	если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) тогда
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Доступность 					= Ложь;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Доступность 	= Ложь;
		
	иначе
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Доступность 					= истина;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Доступность 	= истина;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьБлокировку

&НаКлиенте
Процедура РасчетыКлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Элементы.Расчеты.ТекущиеДанные.Клиент);		
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Элементы.РасчетыСПоставщиками.ТекущиеДанные.Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДеньгиПриИзмененииНаСервере()
	
	Объект.ОстатокДенег = 0;
	Для Каждого СтрокаОстатка Из Объект.Деньги Цикл
		Объект.ОстатокДенег = Объект.ОстатокДенег + ОбщийМодульСервер.ПоКурсу(СтрокаОстатка.ОстатокДенег, СтрокаОстатка.Валюта, , Объект.Дата);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиОстатокДенегПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиВалютаПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Деньги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФормаОплаты) Тогда
		ТекущиеДанные.ФормаОплаты = ФормаОплатыПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткамиРасчетовСКлиентами(Команда)
	ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыОстатки.Клиент,
	|	РасчетыОстатки.СуммаОстаток Как Сумма
	|ИЗ
	|	РегистрНакопления.Расчеты.Остатки(&Дата, ) КАК РасчетыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	объект.Расчеты.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСПоставщиками(Команда)
	ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСПоставщикамиОстатки.Поставщик
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, ) КАК РасчетыСПоставщикамиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	объект.РасчетыСПоставщиками.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	Если Не Отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если УчитыватьДеньгиВНесколькихХранилищах Тогда
		
		Для каждого СтрокаДенег Из Объект.Деньги Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДенег.ХранилищеДенег) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДенег.номерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не указано хранилище денег!");
				Сообщение.Поле  = "ДеньгиХранилищеДенег";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДенег.ФормаОплаты) Тогда
				
				СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры
