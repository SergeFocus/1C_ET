// sza150911-1701 долг сотр
// sza150605-2227
// sza150110-0118 НЧ
// sza140710-0022
// sza140611-1559
// sza130909-1806 :

&НаКлиенте
Перем ТекСтр;

&НаСервереБезКонтекста
Функция   ВалютаХранилища(Знач ХранилищеДенег, Знач БылаВалюта)

	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе

		Возврат БылаВалюта;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", НазначитьСкладДляВсехСтрок);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);

	Если НЕ СтруктураПараметров = Неопределено Тогда

		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура)
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда

			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);

			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				СтруктураПараметров.Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 	 = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;

		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)

	ШтрихКод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводШтрихКодаЗавершение", ЭтотОбъект, Новый Структура("ШтрихКод", ШтрихКод)), ШтрихКод, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод"));

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКодаЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ШтрихКод = ?(Значение = Неопределено, ДополнительныеПараметры.ШтрихКод, Значение);

	Если (Значение <> Неопределено) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			ОбработатьПолученныйШтрихкодНаКлиенте(ШтрихКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()

	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;

	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда

		Если НЕ Объект.Сторный Тогда
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;

			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);

			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
			КонецЕсли;
		КонецЕсли;

		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	ИначеЕсли Объект.Проведен Тогда
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
	Иначе
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;

	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)

	Если НЕ Объект.Товары.Количество() = 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидЦенПриИзмененииЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновить цены?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьЦеныНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда

		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеньгиВалютаПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиОстатокДенегПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриИзменении(Элемент)
	
	ДеньгиПриИзмененииНаСервере();
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура ДеньгиПриИзмененииНаСервере()

	Объект.ОстатокДенег = 0;

	Для Каждого СтрокаОстатка Из Объект.Деньги Цикл
		Объект.ОстатокДенег = Объект.ОстатокДенег + ОбщийМодульСервер.ПоКурсу(СтрокаОстатка.ОстатокДенег, , СтрокаОстатка.Валюта, Объект.Дата);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.Деньги.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФормаОплаты) Тогда
		ТекущиеДанные.ФормаОплаты = ФормаОплатыПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеньгиХранилищеДенегПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Деньги.ТекущиеДанные;
	ТекущиеДанные.Валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.Валюта);
	ТекущиеДанные.ФормаОплаты = ФормаОплатыХранилища(ТекущиеДанные.ХранилищеДенег);

КонецПроцедуры

&НаКлиенте
Процедура ДляВведенныхТоваровПрочитатьОстатки(Команда)

	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите окончания обработки.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка данных"), );
	ДляВведенныхТоваровПрочитатьОстаткиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДляВведенныхТоваровПрочитатьОстаткиНаСервере()

	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтруктураОстатка 	= ОбщийМодульСервер.ОстатокТовара(СтрокаТовара.склад, СтрокаТовара.номенклатура, Объект.Дата -1, ИСТИНА);
		СтрокаТовара.сумма 	= СтруктураОстатка.Сумма;
		Количество 			= СтруктураОстатка.Количество;
		СтрокаТовара.количество = СтруктураОстатка.Количество;

		Если Количество = 0 Тогда
			СтрокаТовара.цена = 0;
		Иначе
			СтрокаТовара.цена = СтрокаТовара.сумма / Количество;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)

	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
		Иначе
			СтрокаСостава = Состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадолженностьЗаТовары()

	Сотрудник = Справочники.Сотрудники.Выбрать();

	Пока Сотрудник.Следующий() Цикл
		Если НЕ ОбщийМодульПовтор.ЭтоГруппа(Сотрудник.Ссылка) Тогда
			ДобавитьЗадолженностьЗаТоварыСотрудника(Сотрудник.Ссылка);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадолженностьЗаТоварыСотрудника(Знач Сотрудник)

	Если ЗначениеЗаполнено(сотрудник.клиент) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток Из РегистрНакопления.Расчеты.Остатки(&дата, Клиент = &Клиент) КАК РасчетыОстатки";
		Запрос.УстановитьПараметр("Дата", Объект.дата);
		Запрос.УстановитьПараметр("Клиент", Сотрудник.клиент);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 Тогда
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 	= Сотрудник;
					НоваяСтрокаЗП.размер 		= - ВыборкаДетальныеЗаписи.СуммаОстаток; // за минусом
					НоваяСтрокаЗП.Количество 	= 1;
					НоваяСтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.Другое;
					НоваяСтрокаЗП.Курс 			= 1;
					НоваяСтрокаЗП.Валюта 		= НоваяСтрокаЗП.ВалютаНачисления;
					НоваяСтрокаЗП.ВалютаНачисления 	= ОсновнаяВалюта;
					НоваяСтрокаЗП.КлиентПоставщик 	= Сотрудник.клиент;
					НоваяСтрокаЗП.Долг 			= ИСТИНА;
					НоваяСтрокаЗП.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За купленный товар");
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Сотрудник.поставщик) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток Из РегистрНакопления.РасчетыСПоставщиками.Остатки(&дата, Поставщик = &поставщик) КАК РасчетыСПоставщикамиОстатки";
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Поставщик", Сотрудник.Поставщик);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 Тогда
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 		= Сотрудник;
					НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
					НоваяСтрокаЗП.Количество 		= 1;
					НоваяСтрокаЗП.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;
					НоваяСтрокаЗП.ВалютаНачисления 	= ОсновнаяВалюта;
					НоваяСтрокаЗП.Курс 				= 1;
					НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;
					НоваяСтрокаЗП.КлиентПоставщик 	= сотрудник.поставщик;
					// ПоследнийРасчет = ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);
					// НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;
					// НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					// НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					НоваяСтрокаЗП.Долг 				= ЛОЖЬ;
					НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За приобретенный товар");
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета)

	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	СтруктураДобавки.Вставить("ЕдиницаИзмерения");

	Для Каждого Серия Из СтруктураОтвета.МассивНовыхСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки, ИСТИНА);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураСтруктура, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, МножительДляКоличества = 1)

	ЕдиницаИзмерения = Неопределено;

	Если ТипЗнч(НоменклатураСтруктура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура 	= НоменклатураСтруктура;
		Количество 		= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура) * МножительДляКоличества;
		серияНоменклатуры = Неопределено;
		Цена 			= 0;
		ЦенаЕсть 		= ЛОЖЬ;
	Иначе
		Номенклатура 	= НоменклатураСтруктура.Номенклатура;
		Количество 		= НоменклатураСтруктура.Количество * МножительДляКоличества;
		серияНоменклатуры = НоменклатураСтруктура.серияНоменклатуры;
		Цена 			= 0;
		ЦенаЕсть 		= НоменклатураСтруктура.Свойство("Цена", Цена);
		НоменклатураСтруктура.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;

	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) И ЗначениеЗаполнено(серияНоменклатуры);

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("серияНоменклатуры", серияНоменклатуры);
	КонецЕсли;

	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;

	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);

	Если НЕ ДокументЗаблокирован Тогда
		Если СтрокаТовара.Количество() = 0 Тогда

			Если ТоварВедетсяПоСериям
				И НЕ СерииНоменклатурыВидны Тогда

				СерииНоменклатурыВидны = ИСТИНА;
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;
			КонецЕсли;

			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			Если ЦенаЕсть Тогда
				СтрокаТовара.Цена = Цена;
			Иначе
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ, количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;

		СтрокаТовара.Номенклатура 	= Номенклатура;
		СтрокаТовара.Количество 	= СтрокаТовара.Количество + Количество;
		Если ТоварВедетсяПоСериям Тогда
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;
			СтрокаТовара.Количество = 1;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
			ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, , , СтрокаТовара.Склад, Объект.Дата);

			Если НЕ ПроцентСкидки = 0
				И НЕ СтрокаТовара.Цена = 0 Тогда

				СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
			КонецЕсли;
		КонецЕсли;

		пересчитатьСтрокуНаСервере(СтрокаТовара);

		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
		КонецЕсли;
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку

		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Количество = 1)

	Результат = Неопределено;
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	сч = 0;

	Для Каждого СтрокаСостава Из Состав Цикл
		Если сч = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", СтрокаСостава.номенклатура);
			Результат.Вставить("Количество", СтрокаСостава.Количество * Количество);
		Иначе
			ДобавитьПозициюНоменклатуры(СтрокаСостава, ИСТИНА, Количество);
		КонецЕсли;

		сч = сч + 1;

	КонецЦикла;

	Возврат Результат;

конецФункции

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()

	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦен(Команда)

	ВидЦен = Неопределено;
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьВидЦенЗавершение", ЭтаФорма, Новый Структура("ВидЦен", ВидЦен)), ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид цен для всех строк") + ": ", тип("СправочникСсылка.ВидыЦен"));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ВидЦен = ?(Значение = Неопределено, ДополнительныеПараметры.ВидЦен, Значение);
	ЗаполнитьВидЦенНаСервере(ВидЦен);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенНаСервере(ВидЦен)

	Если ЗначениеЗаполнено(ВидЦен) Тогда
		Для Каждого СтрокаЦен Из Объект.Цены цикл
			СтрокаЦен.ВидЦен = ВидЦен;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварами(Команда)
	ЗаполнитьВсемиТоварамиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦены(Команда)

	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка таблицы.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаЦены = Объект.Цены.Добавить();
			СтрокаЦены.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДобавитьПозициюНоменклатуры(ВыборкаДетальныеЗаписи.ссылка)
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолгамиПоЗарплате(Команда)

	Если ВестиУчетЗарплатыСотрудников Тогда
		ЗаполнитьДолгамиПоЗарплатеНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолгамиПоЗарплатеНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаОстатки.ВидНачисления,
	|	ЗарплатаОстатки.СуммаОстаток,
	|	ЗарплатаОстатки.СуммаВВалютеОстаток
	|ИЗ РегистрНакопления.Зарплата.Остатки(&Дата, ) КАК ЗарплатаОстатки ";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 Тогда
			НоваяСтрокаЗП = Объект.Зарплата.Добавить();
			НоваяСтрокаЗП.Сотрудник 		= ВыборкаДетальныеЗаписи.Сотрудник;
			НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
			НоваяСтрокаЗП.Количество 		= 1;
			НоваяСтрокаЗП.ВидНачисления 	= ВыборкаДетальныеЗаписи.ВидНачисления;
			НоваяСтрокаЗП.ВалютаНачисления 	= ОсновнаяВалюта;
			НоваяСтрокаЗП.Курс 				= 1;
			НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;
			ПоследнийРасчет 				= ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);
			НоваяСтрокаЗП.Долг 				= ИСТИНА;
			НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислено ранее");
			НоваяСтрокаЗП.ДатаПоследнегоРасчета 	 = ПоследнийРасчет.ДатаПоследнегоРасчета;
			НоваяСтрокаЗП.ПрошлыйПериодДатаНачала 	 = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
			НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
			РассчитатьСтрокуЗП(НоваяСтрокаЗП);
		КонецЕсли;

	КонецЦикла;

	ДобавитьЗадолженностьЗаТовары();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатками(Команда)

	Если Объект.Товары.Количество() = 0 Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
		ЗаполнитьОстаткамиНаСервере();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОстаткамиЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить таблицу Товары?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
		ЗаполнитьОстаткамиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()

	Объект.Товары.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыОстатки.СуммаОстаток КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.КоличествоОстаток = 0
	|			Тогда 0

	|		Иначе ТоварыОстатки.СуммаОстаток / ТоварыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстаток, %%1) КАК ТоварыОстатки";
	Если ЗначениеЗаполнено(НазначитьСкладДляВсехСтрок) Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "Склад = &Склад");
		Запрос.УстановитьПараметр("Склад", НазначитьСкладДляВсехСтрок);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаОстаток", Объект.Дата - 1);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остатков товара нет!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСКлиентами(Команда)

	ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.Клиент,
	|	РасчетыОстатки.СуммаОстаток Как Сумма
	|ИЗ РегистрНакопления.Расчеты.Остатки(&Дата, ) КАК РасчетыОстатки";
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);

	РезультатЗапроса = Запрос.Выполнить();
	Объект.Расчеты.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСПоставщиками(Команда)

	ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСПоставщикамиОстатки.Поставщик
	|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, ) КАК РасчетыСПоставщикамиОстатки";
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);

	РезультатЗапроса = Запрос.Выполнить();
	Объект.РасчетыСПоставщиками.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиОстаткамиДенег(Команда)

	ЗаполнитьТекущимиОстаткамиДенегНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиОстаткамиДенегНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ДеньгиОстатки.ФормаОплаты,
	|	ДеньгиОстатки.Валюта,
	|	ДеньгиОстатки.СуммаВВалютеОстаток КАК ОстатокДенег
	|ИЗ РегистрНакопления.Деньги.Остатки(&Дата, ) КАК ДеньгиОстатки";
	Запрос.УстановитьПараметр("Дата", Объект.Дата -1 );

	РезультатЗапроса = Запрос.Выполнить();
	Объект.Деньги.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВалютаПриИзменении(Элемент)

	ЗарплатаПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)

	ЗарплатаПриИзмененииНаСервере();
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура ЗарплатаПриИзмененииНаСервере()

	Сумма = 0;

	Для Каждого СтрокаДолга Из Объект.Зарплата Цикл
		Сумма = Сумма + ОбщийМодульСервер.ПоКурсу(СтрокаДолга.Сумма, СтрокаДолга.Валюта, , Объект.Дата);
	КонецЦикла;

	Объект.ОстатокЗарплаты = Сумма;

КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)

	ЗарплатаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура НазначитьСкладДляВсехСтрокНаСервере()

	Для Каждого ТоварОстатка Из Объект.Товары Цикл
		ТоварОстатка.Склад = НазначитьСкладДляВсехСтрок;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкладДляВсехСтрокПриИзменении(Элемент)

	Если Объект.Товары.Количество() = 0 Тогда
		НазначитьСкладДляВсехСтрокНаСервере();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("НазначитьСкладДляВсехСтрокПриИзмененииЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы поменять склад для всех строк документа?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкладДляВсехСтрокПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НазначитьСкладДляВсехСтрокНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.НайтиНаправлениеДеятельности(, , , , , );
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦены(Команда)

	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбновитьЦеныНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныНаСервере()

	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, СтрокаТовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		Если НЕ Цена = 0 Тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ, СтрокаТовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);

			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, , , СтрокаТовара.Склад, Объект.Дата);

				Если НЕ ПроцентСкидки = 0
					И НЕ СтрокаТовара.Цена = 0 Тогда

					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
				КонецЕсли;
			КонецЕсли;

			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)

	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "002202") Тогда
		Элементы.ТоварыВводСКоличеством.Видимость 							= ЛОЖЬ;
		Элементы.ТоварыВводШтрихКода.Видимость  							= ЛОЖЬ;
		Элементы.ТоварыОбновитьЦены.Доступность  							= ЛОЖЬ;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Видимость	= ЛОЖЬ;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Видимость 					= ЛОЖЬ;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 					= ЛОЖЬ;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Видимость	 	= ЛОЖЬ;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= ЛОЖЬ;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Видимость = ЛОЖЬ;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Видимость 			= ЛОЖЬ;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= ЛОЖЬ;
		Элементы.ТоварыЗаполнитьВсемиТоварами.Доступность 					= ЛОЖЬ;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= ЛОЖЬ;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= ЛОЖЬ;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= ЛОЖЬ;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= ЛОЖЬ;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость						= ЛОЖЬ;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= ЛОЖЬ;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость							= ЛОЖЬ;
		Элементы.ОбработкаТаблицы.Видимость									= ЛОЖЬ;
		Элементы.ОбработкаТаблицыЦен.Видимость								= ЛОЖЬ;
		Элементы.ОбработкаТаблицыРасчетовСКлиентами.Видимость				= ЛОЖЬ;
		Элементы.ЗарплатаЗаполнитьДолгамиПоЗарплате.Видимость				= ЛОЖЬ;
	Иначе
		Элементы.ТоварыЗаполнитьВсемиТоварами.Видимость 					= ИСТИНА;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= ИСТИНА;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Доступность 						= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ТоварыВводШтрихКода.Видимость	 							= ИСТИНА;
		Элементы.ТоварыОбновитьЦены.Доступность 							= ИСТИНА;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Видимость	= ИСТИНА;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Видимость	 				= ИСТИНА;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 					= ИСТИНА;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Видимость	 	= ИСТИНА;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= ИСТИНА;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Видимость = ИСТИНА;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Видимость 			= ИСТИНА;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= ИСТИНА;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= ИСТИНА;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= ИСТИНА;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 						= ИСТИНА;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= ИСТИНА;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость							= ВключитьМеханизмПодбораНоменклатуры;
		Элементы.ОбработкаТаблицы.Видимость									= ИСТИНА;
		Элементы.ОбработкаТаблицыЦен.Видимость								= ИСТИНА;
		Элементы.ОбработкаТаблицыРасчетовСКлиентами.Видимость				= ИСТИНА;
		Элементы.ЗарплатаЗаполнитьДолгамиПоЗарплате.Видимость				= ВестиУчетЗарплатыСотрудников;
	КонецЕсли;

КонецПроцедуры // ОбработатьБлокировку

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)

	Если НЕ ОбработатьПолученныйШтрихкодНаСервере(ТекКод) Тогда
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Знач Количество = 1)

	Результат = ИСТИНА;
	РезультатОбработки = ОбщийМодульТоварСервер.НайтиНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, Объект.Дата);
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда

			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЦены(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() Тогда
				Коэффициент = 0;
				ПоказатьВводЧисла(Новый ОписаниеОповещения("ОкруглитьЦеныЗавершение", ЭтаФорма, Новый Структура("Коэффициент", Коэффициент)), Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите число знаков после запятой") + ": ", 1, 0);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЦеныЗавершение(Число, ДополнительныеПараметры) Экспорт

	Коэффициент = ?(Число = Неопределено, ДополнительныеПараметры.Коэффициент, Число);

	Если (Число <> Неопределено) Тогда
		ОкруглятьВверх = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОкруглитьЦеныЗавершениеЗавершение", ЭтаФорма, Новый Структура("Коэффициент", Коэффициент)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Следует ли округлять исключительно в большую сторону?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЦеныЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры1) Экспорт

	Коэффициент = ДополнительныеПараметры1.Коэффициент;
	ОкруглятьВверх = РезультатВопроса = КодВозвратаДиалога.Да;
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округление цен для таблицы товара") + ": " + " " + Коэффициент);
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округлил цены товара") + " " + Коэффициент, 2, Объект.Ссылка);
	ОбщийМодульКлиент.ОкруглитьДанныеВТаблицеТовары(Объект.Ссылка, Коэффициент, ОкруглятьВверх, "Цены");

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуРасчетовСКлиентами(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТаблицуРасчетовСКлиентамиЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить расчеты?"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуРасчетовСКлиентамиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуРасчетовСКлиентамиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуРасчетовСКлиентамиНаСервере()

	Объект.Расчеты.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЦен(Команда)

	ОчиститьТаблицуЦенНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуЦенНаСервере()

	Объект.Цены.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицыТоваров(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчисткаТаблицыТоваровЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить таблицу?"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицыТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчисткаТаблицыТоваровНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчисткаТаблицыТоваровНаСервере()

	Объект.Товары.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если НЕ ТекущаяСтраница = Неопределено Тогда
		СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
		СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда

		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;

	Если НЕ Отказ Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	КонецЕсли;

	ПодготовкаКПроведению(Отказ, ПараметрыЗаписи);
	глПроверятьСообщения = ИСТИНА;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию");
			ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию И (ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора >= ТекущийОбъект.Дата);

			Для Каждого СтрокаДолга Из ТекущийОбъект.Расчеты Цикл

				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда

					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Клиентами не указан обязательный Договор!"));
					Отказ = ИСТИНА;
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаДолга Из ТекущийОбъект.РасчетыСПоставщиками Цикл

				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда

					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Поставщиками не указан обязательный Договор!"));
					Отказ = ИСТИНА;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если НЕ Отказ
			И ВестиУчетДенегВНесколькихХранилищах Тогда

			Для Каждого СтрокаДенег Из ТекущийОбъект.Деньги Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДенег.ХранилищеДенег) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДенег.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указано хранилище денег!"));
					Отказ = ИСТИНА;
				Иначе
					Если НЕ СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты Тогда

						СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты;
					КонецЕсли;

					Если НЕ СтрокаДенег.Валюта = СтрокаДенег.ХранилищеДенег.Валюта Тогда
						СтрокаДенег.Валюта	= СтрокаДенег.ХранилищеДенег.Валюта;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		Если НЕ Отказ Тогда
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()

	Объект.ТовараНаСумму 	 = Объект.Товары.Итог("Сумма");
	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолгиКлиентовПоКоэффициенту(Команда)

	Коэффициент = 1;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПересчитатьДолгиКлиентовПоКоэффициентуЗавершение", ЭтаФорма, Новый Структура("Коэффициент", Коэффициент)), Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Сумм") + ": ", 12, 6);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолгиКлиентовПоКоэффициентуЗавершение(Число, ДополнительныеПараметры) Экспорт

	Коэффициент = ?(Число = Неопределено, ДополнительныеПараметры.Коэффициент, Число);

	Если (Число <> Неопределено) Тогда
		ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Коэффициент);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Знач Коэффициент)

	Для Каждого СтрокаДолга Из Объект.Расчеты Цикл
		СтрокаДолга.Сумма = СтрокаДолга.Сумма * Коэффициент;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку()

	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;

КонецПроцедуры

&НаСервере
Процедура пересчитатьСтрокуНаСервере(СтрокаТовара)

	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;

	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		СтрокаТовара.Склад = НазначитьСкладДляВсехСтрок;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуТоваровПереданныхНаКомиссию(Знач ИзСуммы = ЛОЖЬ)

	СтрокаТовара = Элементы.Товары.ТекущиеДанные;

	Если НЕ СтрокаТовара = Неопределено Тогда

		Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры)
			ИЛИ СтрокаТовара.Количество = 0 Тогда

			СтрокаТовара.Количество = 1;
		КонецЕсли;

		Если НЕ ИзСуммы Тогда
			СтрокаТовара.сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		Иначе
			СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПересчитатьСтрокуТоваровПереданныхНаКомиссию()

&НаКлиенте
Процедура ПересчитатьЦеныПоКоэффициенту(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() Тогда
				Коэффициент = 1;
				ПоказатьВводЧисла(Новый ОписаниеОповещения("ПересчитатьЦеныПоКоэффициентуЗавершение", ЭтаФорма, Новый Структура("Коэффициент", Коэффициент)), Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Цен") + ": ", 12, 6);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныПоКоэффициентуЗавершение(Число, ДополнительныеПараметры) Экспорт

	Коэффициент = ?(Число = Неопределено, ДополнительныеПараметры.Коэффициент, Число);

	Если (Число <> Неопределено) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет цен для таблицы товара по коэффициенту..") + Коэффициент);
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчитал цены товара по коэффициенту") + Коэффициент, 2, Объект.Ссылка);
		ОбщийМодульКлиент.ПересчитатьТаблицуТовары(Объект.Ссылка, Коэффициент, "Цены", ИСТИНА);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)

	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	// ПараметрыФормы.Вставить("Договор", Объект.Договор);
	// ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);

КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ, Знач ПараметрыЗаписи)

	Если НЕ Отказ
		И НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда

		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)

	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;

	ПолучитьКлиентаНаСервере(МКод);

КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)

	Если НЕ ДокументЗаблокирован Тогда
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			СтрокаКлиент = Объект.Расчеты.Добавить();
			СтрокаКлиент.Клиент 			= Клиент;
			Элементы.Расчеты.ТекущаяСтрока 	= СтрокаКлиент.ПолучитьИдентификатор();
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();
	КонецЕсли;

	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                             // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено)

	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = ТекСтр;
	КонецЕсли;

	Если СтрокаТовара = Неопределено Тогда
		Возврат
	КонецЕсли;

	Номенклатура = СтрокаТовара.Номенклатура;

	Если ЗначениеЗаполнено(Номенклатура) Тогда

		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда

			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;

		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;

		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура)
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда

			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);

			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура 	= Номенклатура;
				СтрокаТовара.Количество 	= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;

		Если УчетПоСериям
			И НЕ СерииНоменклатурыВидны Тогда

			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);

			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				СерииНоменклатурыВидны 	= ИСТИНА;
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, , , СтрокаТовара.Склад, Объект.Дата);

		Если НЕ ПроцентСкидки = 0
			И НЕ СтрокаТовара.Цена = 0 Тогда

			СтрокаТовара.Цена = СтрокаТовара.Цена - (СтрокаТовара.Цена/100 * ПроцентСкидки);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
			СтрокаТовара.Склад = НазначитьСкладДляВсехСтрок;
		КонецЕсли;
	КонецЕсли;

	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                        // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;

	Если ЗначениеЗаполнено(СтраницаПанели) Тогда
		СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
		ТекущаяСтраница = СтраницыПанели.Получить(СтраницаПанели);
		Если НЕ ТекущаяСтраница = Неопределено Тогда
			Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");

		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)         // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002200", ЭтаФорма, Отказ, Объект);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ОбъектСсылка = Объект.Ссылка;
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		ВестиУчетПоПоставщикам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		ВестиУчетПоКлиентам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетВалют			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетВалютВСеансе");
		ФормаОплатыПоУмолчанию	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
		ВестиУчетПоСкладам 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");

		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");

		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость 		= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ГруппаПодвалКлиенты.Видимость 			= ВестиУчетПоКлиентам;
		Элементы.Взаиморасчеты1.Видимость 				= ВестиУчетПоКлиентам И ВестиУчетВалют;
		Элементы.ГруппаПодвалПоставщики.Видимость 		= ВестиУчетПоПоставщикам;
		Элементы.Взаиморасчеты2.Видимость 				= ВестиУчетПоПоставщикам И ВестиУчетВалют;
		ВестиУчетЗарплатыСотрудников                    = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		Элементы.НаименованиеОсновнойВалюты1.Видимость 	= ВестиУчетЗарплатыСотрудников;
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамКлиентов.Видимость 	  = ВестиУчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамПоставщикам.Видимость = ВестиУчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.ГруппаСклада.Видимость 	 = ВестиУчетПоСкладам;
		Элементы.ГруппаИтогДенег.Видимость 	 = ВестиУчетДвиженияДенег;
		ВестиУчетДенегВНесколькихХранилищах  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.Комментарий, Элементы.СтраницаШапки);
			Элементы.Комментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			Элементы.Комментарий.Высота = 0;
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			Объект.Сторный = ЛОЖЬ; // при копировании
			Объект.ДокументСторно = Неопределено;
			НазначитьСкладДляВсехСтрок = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");

			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			КонецЕсли;

			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();

			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда

				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
		Иначе
			Если Объект.Проведен Тогда
				Элементы.ЗаполнитьПоБлокам.Видимость = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;
			КонецЕсли;

			Элементы.ТоварыЦена.Доступность = ЛОЖЬ;
			Элементы.Цены.Доступность 		= ЛОЖЬ;
		КонецЕсли;

		НаименованиеОсновнойВалюты = ОсновнаяВалюта.Наименование ;

		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			Если НЕ ТекущаяСтраница = Неопределено Тогда
				Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		КонецЕсли;

		ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
		СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
		Элементы.ТоварыСерияНоменклатуры.Видимость  = СерииНоменклатурыВидны;
		Элементы.ДеньгиФормаОплаты.Видимость 	    = НЕ ВестиУчетДенегВНесколькихХранилищах;
		ВключитьМеханизмПодбораНоменклатуры 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);

		Если ВестиУчетДвиженияДенег Тогда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ГруппаОстатокДенег.ТолькоПросмотр = ИСТИНА;
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаОстатокДенег.Видимость = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			Элементы.ВалютныйДолгПоставщику.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
			Элементы.ВалютныйДолгКлиента.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		КонецЕсли;

		ВидимостьСторно();
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()

	отказ = ЛОЖЬ;
	//
	// ДокументОбъект = РеквизитФормыВЗначение("Объект");
	// ДокументОбъект.ПодготовкаКПроведению(Отказ);
	// ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");
	//

	Возврат Отказ;

КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)

	Если НЕ Отказ Тогда
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;

			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!"));
					Отказ = ИСТИНА;
				КонецЕсли;
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!"));
				Отказ = ИСТИНА;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Возврат Отказ;

КонецФункции // ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)

	СканерЗаблокирован = ЛОЖЬ;
	Элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуЗП(СтрокаЗП)

	ДатаНачала 	  = Объект.Дата;
	ДатаОкончания = Объект.Дата;

	Если ЗначениеЗаполнено(СтрокаЗП.Сотрудник)
		И НЕ СтрокаЗП.Размер = 0 Тогда

		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаНачала) Тогда
			СтрокаЗП.ДатаНачала = ДатаНачала;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
			СтрокаЗП.ДатаОкончания = ДатаОкончания;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаЗП.Валюта) Тогда
			СтрокаЗП.Валюта = СтрокаЗП.ВалютаНачисления;
		КонецЕсли;

		Если СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемПрибылиЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
			ИначеЕсли НЕ СтрокаЗП.долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыЛичнойРеализации Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ИСТИНА) / 100;
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСтоимостиВыполненныхРабот Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ЗаКомплектацию Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ИСТИНА);
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ЗаОказанныеУслугиЗаВремя Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ЛОЖЬ, ИСТИНА);
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыОказанныхУслугЗаВремя Тогда

			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда

				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ЛОЖЬ, ЛОЖЬ, ИСТИНА) / 100;
			ИначеЕсли НЕ СтрокаЗП.Долг Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!"));
			КонецЕсли;
		КонецЕсли;

		СтрокаЗП.СуммаНачисления = СтрокаЗП.Размер * СтрокаЗП.Количество;

		Если НЕ СтрокаЗП.Долг Тогда
			СтрокаЗП.ОписаниеНачисления = "" + формат(ДатаНачала, "ДФ=dd.MM.yy") + "-" + формат(ДатаОкончания, "ДФ=dd.MM.yy") + " " + СокрЛП(СтрокаЗП.Размер) + "*" + СокрЛП(СтрокаЗП.Количество);
		КонецЕсли;

		СтрокаЗП.Курс 	= ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаЗП.Валюта, Объект.Дата);
		Сумма 			= СтрокаЗП.СуммаНачисления * СтрокаЗП.Курс;
		Сумма 			= ОбщийМодульСервер.ПоКурсу(Сумма, , СтрокаЗП.ВалютаНачисления, Объект.Дата);
		СтрокаЗП.Сумма 	= Сумма;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыКлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Клиенты", ДанныеВыбора, Текст, Элементы.Расчеты.ТекущиеДанные.Клиент);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Поставщики", ДанныеВыбора, Текст, Элементы.РасчетыСПоставщиками.ТекущиеДанные.Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьТаблицуТоваров(Команда)

	Если НЕ ДокументЗаблокирован
		И НЕ Объект.Товары.Количество() = 0 Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("СвернутьТаблицуТоваровЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свернуть таблицу товара?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьТаблицуТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СвернутьТаблицуТоваровНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуТоваровНаСервере()

	ТаблицаОбработки = Новый ТаблицаЗначений;
	ТаблицаОбработки.Колонки.Добавить("Склад");
	ТаблицаОбработки.Колонки.Добавить("Номенклатура");
	ТаблицаОбработки.Колонки.Добавить("Количество");
	ТаблицаОбработки.Колонки.Добавить("Цена");

	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаОбработки = ТаблицаОбработки.Добавить();
		Если ВестиУчетПоСкладам Тогда
			СтрокаОбработки.Склад = СтрокаТовара.Склад;
		КонецЕсли;

		Номенклатура = ВРег(СокрЛП(СтрокаТовара.Номенклатура));
		Номенклатура = СтрЗаменить(Номенклатура, "Х", "x");
		СтрокаОбработки.Номенклатура = Номенклатура;
		СтрокаОбработки.Количество = СтрокаТовара.Количество;
		СтрокаОбработки.Цена = СтрокаТовара.Цена;

	КонецЦикла;

	Если ВестиУчетПоСкладам Тогда
		ТаблицаОбработки.Свернуть("Склад, Номенклатура", "Количество");
	Иначе
		ТаблицаОбработки.Свернуть("Номенклатура", "Количество");
	КонецЕсли;

	Объект.Товары.Очистить();

	Для Каждого СтрокаТовара Из ТаблицаОбработки Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		Если ВестиУчетПоСкладам Тогда
			НоваяСтрока.Склад  = СтрокаТовара.Склад;
		КонецЕсли;

		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовара.Номенклатура, ЛОЖЬ);
		НоваяСтрока.Количество = СтрокаТовара.Количество;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()

	Перем ПараметрыФормы;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзТаблицыТовары(Команда)
	СкопироватьИзТаблицыТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкопироватьИзТаблицыТоварыНаСервере()
	Объект.Цены.Загрузить(Объект.Товары.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаИДобавить(Команда)

	ФормаЭлемента = ПолучитьФорму("Справочник.Клиенты.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьКлиентаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		ЭтаФорма.ТекущийЭлемент = Элементы.Расчеты;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаИДобавитьНаСервере(ЭлементСправочника)

	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = Объект.Расчеты.Добавить();
		СтрокаТ.клиент = ЭлементСправочника.ссылка;
		Элементы.Расчеты.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		Элементы.Расчеты.ТекущийЭлемент = Элементы.РасчетыСумма;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоставщикаИДобавить(Команда)

	ФормаЭлемента = ПолучитьФорму("Справочник.Поставщики.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьПоставщикаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		ЭтаФорма.ТекущийЭлемент = Элементы.РасчетыСПоставщиками;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьПоставщикаИДобавитьНаСервере(ЭлементСправочника)

	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = Объект.РасчетыСПоставщиками.Добавить();
		СтрокаТ.Поставщик = ЭлементСправочника.ссылка;
		Элементы.РасчетыСПоставщиками.ТекущаяСтрока 	= СтрокаТ.ПолучитьИдентификатор();
		Элементы.РасчетыСПоставщиками.ТекущийЭлемент 	= Элементы.РасчетыСПоставщикамиСумма;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)

	ИмяНеобходимойФормы = "Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии";
	ФормаДобавленияСерий = ПолучитьФорму(ИмяНеобходимойФормы, , ЭтаФорма);// , ПараметрыФормы);
	СтруктураОтвета = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТоварИДобавить(Команда)

	ФормаЭлемента = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьТоварИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьТоварИДобавитьНаСервере(ЭлементСправочника)

	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТовара = Объект.Товары.Добавить();
		Номенклатура = ЭлементСправочника.Ссылка;
		СтрокаТовара.Номенклатура 	= Номенклатура;
		СтрокаТовара.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.Склад 			= НазначитьСкладДляВсехСтрок;
		СтрокаТовара.Количество 	= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт

	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);

	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры(ТекСтр) ;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыФормы = Новый Структура;

	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда

		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;

	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Склад) Тогда

		ПараметрыФормы.Вставить("ОтборПоСкладу", Элементы.Товары.ТекущиеДанные.Склад);
	КонецЕсли;

	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);

	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;

	ФормаВыбора  = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;
		ПриИзмененииНоменклатуры(ТекСтр) ;
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)

	ТекущиеДанные	= ТекСтр;
	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Номенклатура", ДанныеВыбора, Текст, ТекущиеДанные.Номенклатура);
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(ТекущиеДанные) ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры(ТекСтр) ;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Склад 			 = НазначитьСкладДляВсехСтрок;
			Строка.Цена  			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			ПриИзмененииНоменклатуры(Строка);

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюКоличествоПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюНоменклатураПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСерияНоменклатурыПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСуммаПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекСтр	= Элементы.Товары.ТекущиеДанные;
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТовара = Элементы.Товары.ТекущиеДанные;

	Если НЕ СтрокаТовара.количество = 0 Тогда
		СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		ПересчитатьСтроку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ФормаОплатыХранилища(Знач ХранилищеДенег)

	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.ФормаОплаты;
	Иначе

		Возврат ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ЦеныНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Номенклатура", ДанныеВыбора, Текст, Элементы.Цены.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПродажиСотрудниковПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура НакоплениеНаВаучерыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры
