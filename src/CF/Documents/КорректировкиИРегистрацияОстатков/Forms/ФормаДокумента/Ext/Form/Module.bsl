//sza150110-0118 НЧ
//sza140710-0022  
//sza140611-1559  
//sza130909-1806 : 

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", НазначитьСкладДляВсехСтрок);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				СтруктураПараметров.Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 	 = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаСервере(ТекКод);
		ПересчитатьДокументНаКлиенте();   	
	КонецЕсли;                              	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если НЕ Объект.Товары.Количество() = 0
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновить цены?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ОбновитьЦеныНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиВалютаПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиОстатокДенегПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДеньгиПриИзмененииНаСервере()
	
	Объект.ОстатокДенег = 0;
	Для Каждого СтрокаОстатка Из Объект.Деньги Цикл
		Объект.ОстатокДенег = Объект.ОстатокДенег + ОбщийМодульСервер.ПоКурсу(СтрокаОстатка.ОстатокДенег, СтрокаОстатка.Валюта, , Объект.Дата);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Деньги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФормаОплаты) Тогда
		ТекущиеДанные.ФормаОплаты = ФормаОплатыПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляВведенныхТоваровПрочитатьОстатки(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите окончания обработки.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка данных"), );
	ДляВведенныхТоваровПрочитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДляВведенныхТоваровПрочитатьОстаткиНаСервере()
	
	Для Каждого строкаТовара из Объект.Товары Цикл
		
		СтруктураОстатка 	= ОбщийМодульСервер.ОстатокТовара(строкатовара.склад, строкатовара.номенклатура, Объект.Дата -1, ИСТИНА);
		строкаТовара.сумма 	= СтруктураОстатка.Сумма;
		Количество 			= СтруктураОстатка.Количество;
		строкаТовара.количество = СтруктураОстатка.Количество;
		Если Количество = 0 Тогда
			строкаТовара.цена = 0;
		Иначе
			строкаТовара.цена = строкаТовара.сумма / Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков"));
	ЭтотОбъект.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект,Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета)
	
	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	СтруктураДобавки.Вставить("ЕдиницаИзмерения");
	
	Для Каждого Серия Из СтруктураОтвета.МассивНовыхСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки, ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураВх, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, МножительДляКоличества = 1)
	
	ЕдиницаИзмерения = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура 	= НоменклатураВх;
		Количество 		= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура) * МножительДляКоличества;
		серияНоменклатуры = Неопределено;
		Цена 			= 0;
		ЦенаЕсть 		= ЛОЖЬ;
		
	Иначе
		Номенклатура 	= НоменклатураВх.Номенклатура;
		Количество 		= НоменклатураВх.Количество * МножительДляКоличества;
		серияНоменклатуры = НоменклатураВх.серияНоменклатуры;
		Цена 			= 0;
		ЦенаЕсть 		= НоменклатураВх.Свойство("Цена", Цена);
		НоменклатураВх.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	КонецЕсли; 
	
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) И ЗначениеЗаполнено(серияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("серияНоменклатуры", серияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ЦенаЕсть тогда
				СтрокаТовара.Цена = Цена;
			Иначе
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ, количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;
			
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;
		
		СтрокаТовара.Номенклатура 	= Номенклатура;
		СтрокаТовара.Количество 	= СтрокаТовара.Количество + Количество;
		Если ТоварВедетсяПоСериям тогда
			
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
			ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен);
			
			Если НЕ процентскидки = 0 
				И НЕ СтрокаТовара.Цена = 0 тогда
				
				СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
			КонецЕсли;                                     	
		КонецЕсли;
		
		пересчитатьСтрокуНаСервере(СтрокаТовара);	
		
		Если НЕ НеСтановитсяНаЭтуСтроку тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;	
		КонецЕсли;
		
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(строкасостава, ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦен(Команда)
	
	ВидЦен = Неопределено;
	ВвестиЗначение(ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид Цен для всех строк") + ": ", тип("СправочникСсылка.ВидыЦен"));
	
	ЗаполнитьВидЦенНаСервере(ВидЦен);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенНаСервере(видцен)
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		Для Каждого строкацен из Объект.Цены цикл
			строкацен.видцен = видцен;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварами(Команда)
	ЗаполнитьВсемиТоварамиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦены(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка таблицы.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаЦены = Объект.Цены.Добавить();
			СтрокаЦены.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДобавитьПозициюНоменклатуры(ВыборкаДетальныеЗаписи.ссылка)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатками(Команда)
	
	Если Объект.Товары.Количество() = 0
		ИЛИ Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить таблицу Товары?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ЗаполнитьОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыОстатки.СуммаОстаток КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		Иначе ТоварыОстатки.СуммаОстаток / ТоварыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстаток, %%1) КАК ТоварыОстатки";
	
	Если ЗначениеЗаполнено(НазначитьСкладДляВсехСтрок) Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "Склад = &Склад");
		
		Запрос.УстановитьПараметр("Склад", НазначитьСкладДляВсехСтрок);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстаток", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());	
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остатков Товаров нет!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСКлиентами(Команда)
	ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.Клиент,
	|	РасчетыОстатки.СуммаОстаток Как Сумма
	|ИЗ РегистрНакопления.Расчеты.Остатки(&Дата, ) КАК РасчетыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Расчеты.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСПоставщиками(Команда)
	ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСПоставщикамиОстатки.Поставщик
	|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, ) КАК РасчетыСПоставщикамиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.РасчетыСПоставщиками.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиОстаткамиДенег(Команда)
	ЗаполнитьТекущимиОстаткамиДенегНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиОстаткамиДенегНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ДеньгиОстатки.ФормаОплаты,
	|	ДеньгиОстатки.Валюта,
	|	ДеньгиОстатки.СуммаВВалютеОстаток КАК ОстатокДенег
	|ИЗ РегистрНакопления.Деньги.Остатки(&Дата, ) КАК ДеньгиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата -1 );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Деньги.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВалютаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарплатаПриИзмененииНаСервере()
	
	Сумма = 0;
	Для Каждого СтрокаДолга Из Объект.Зарплата Цикл
		Сумма = Сумма + ОбщийМодульСервер.ПоКурсу(СтрокаДолга.Сумма, СтрокаДолга.Валюта, , Объект.Дата);	
	КонецЦикла;
	Объект.ОстатокЗарплаты = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкладДляВсехСтрокПриИзменении(Элемент)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы поменять склад для всех строк документа?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		НазначитьСкладДляВсехСтрокНаСЕрвере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСкладДляВсехСтрокНаСЕрвере()
	Для Каждого ТоварОстатка из Объект.Товары Цикл
		ТоварОстатка.Склад = НазначитьСкладДляВсехСтрок;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦены(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбновитьЦеныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныНаСервере()
	
	Для Каждого СтрокаТовара из Объект.Товары Цикл
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, строкатовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		
		Если НЕ Цена = 0 Тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ, строкатовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, Объект.ВидЦен );
				
				Если НЕ процентскидки = 0 
					И НЕ СтрокаТовара.Цена = 0 тогда
					
					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
				КонецЕсли;                                     	
			КонецЕсли;
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "002202") Тогда
		
		Элементы.ТоварыВводСКоличеством.Видимость 							= ЛОЖЬ;
		Элементы.ТоварыВводШтрихКода.Видимость  							= ЛОЖЬ;
		Элементы.ТоварыОбновитьЦены.Доступность  							= ЛОЖЬ;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Видимость	= ЛОЖЬ;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Видимость 					= ЛОЖЬ;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 					= ЛОЖЬ;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Видимость	 	= ЛОЖЬ;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= ЛОЖЬ;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Видимость = ЛОЖЬ;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Видимость 			= ЛОЖЬ;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= ЛОЖЬ;
		Элементы.ТоварыЗаполнитьВсемиТоварами.Доступность 					= ЛОЖЬ;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= ЛОЖЬ;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= ЛОЖЬ;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= ЛОЖЬ;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= ЛОЖЬ;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость						= ЛОЖЬ;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= ЛОЖЬ;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость							= ЛОЖЬ;
		Элементы.ОбработкаТаблицы.Видимость									= ЛОЖЬ;
		Элементы.ОбработкаТаблицыЦен.Видимость								= ЛОЖЬ;
		Элементы.ОбработкаТаблицыРасчетовСКлиентами.Видимость				= ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыЗаполнитьВсемиТоварами.Видимость 					= ИСТИНА;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= ИСТИНА;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Доступность 						= ИСТИНА;
		Элементы.ТоварыВводШтрихКода.Видимость	 							= ИСТИНА;
		Элементы.ТоварыОбновитьЦены.Доступность 							= ИСТИНА;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Видимость	= ИСТИНА;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Видимость	 				= ИСТИНА;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 					= ИСТИНА;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Видимость	 	= ИСТИНА;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= ИСТИНА;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Видимость = ИСТИНА;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Видимость 			= ИСТИНА;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= ИСТИНА;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= ИСТИНА;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= ИСТИНА;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 						= ИСТИНА;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= ИСТИНА;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость							= ИСТИНА;
		Элементы.ОбработкаТаблицы.Видимость									= ИСТИНА;
		Элементы.ОбработкаТаблицыЦен.Видимость								= ИСТИНА;
		Элементы.ОбработкаТаблицыРасчетовСКлиентами.Видимость				= ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьБлокировку

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = ИСТИНА;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, Объект.Дата);
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьЦены(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() Тогда
				
				Коэффициент = 0;
				Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите число знаков после запятой") + ": ", 1, 0) Тогда
					
					ОкруглятьВверх = Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Следует ли округлять исключительно в большую сторону?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
					
					Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округление цен для таблицы товаров") + ": " + " " + Коэффициент);
					ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округлил Цены товаров") + " " + Коэффициент, 2, Объект.Ссылка);
					ОбщийМодульКлиент.ОкруглитьТоВары(Объект.Ссылка, Коэффициент, ОкруглятьВверх, "Цены");		
				КонецЕсли;
				
			Иначе
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуРасчетовСКлиентами(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить расчеты?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуРасчетовСКлиентамиНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуРасчетовСКлиентамиНаСервере()
	Объект.Расчеты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЦен(Команда)
	ОчиститьТаблицуЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуЦенНаСервере()
	Объект.Цены.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицыТоваров(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить таблицу?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчисткаТаблицыТоваровНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаТаблицыТоваровНаСервере()
	Объект.Товары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)  	
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
		
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));	
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ, ПараметрыЗаписи);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию");
			ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию И (ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора >= Объект.Дата);
			
			Для Каждого СтрокаДолга Из Объект.Расчеты Цикл
				
				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Клиентами не указан обязательный Договор!");
					Сообщение.Поле  = "РасчетыДоговор";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаДолга Из Объект.РасчетыСПоставщиками Цикл
				
				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Поставщиками не указан обязательный Договор!");
					Сообщение.Поле  = "РасчетыСПоставщикамиДоговор";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ Отказ
			И ВестиУчетДенегВНесколькихХранилищах Тогда
			
			Для Каждого СтрокаДенег Из Объект.Деньги Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДенег.ХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДенег.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указано хранилище денег!");
					Сообщение.Поле  = "ДеньгиХранилищеДенег";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				Иначе
					Если НЕ СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты тогда
						СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты;			
					КонецЕсли;
					
					Если НЕ СтрокаДенег.Валюта = СтрокаДенег.ХранилищеДенег.Валюта тогда
						СтрокаДенег.Валюта	= СтрокаДенег.ХранилищеДенег.Валюта;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;	
		
		Если НЕ Отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;      	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте() 	
	
	Объект.ТовараНаСумму 	 = Объект.Товары.Итог("Сумма");
	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолгиКлиентовПоКоэффициенту(Команда)
	
	Коэффициент = 1;
	Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Сумм") + ": ", 12, 6) Тогда				
		ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Коэффициент); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Знач Коэффициент)
	
	Для Каждого СтрокаДолга Из Объект.Расчеты Цикл
		СтрокаДолга.Сумма = СтрокаДолга.Сумма * Коэффициент;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура пересчитатьСтроку()
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаСервере
Процедура пересчитатьСтрокуНаСервере(СтрокаТовара)
	
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуТоваровПереданныхНаКомиссию(Знач ИзСуммы = ЛОЖЬ)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТовара = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) 
			ИЛИ СтрокаТовара.Количество = 0 Тогда
			
			СтрокаТовара.Количество = 1;
		КонецЕсли;	
		Если НЕ ИзСуммы Тогда
			СтрокаТовара.сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		Иначе
			СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПересчитатьСтрокуТоваровПереданныхНаКомиссию()

&НаКлиенте
Процедура ПересчитатьЦеныПоКоэффициенту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() Тогда
				
				Коэффициент = 1;
				Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Цен") + ": ", 12, 6) Тогда
					Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет цен для таблицы товаров по коэффициенту..") + Коэффициент);
					ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчитал Цены товаров по коэффициенту") + Коэффициент, 2, Объект.Ссылка);
					ОбщийМодульКлиент.ПересчитатьТоВары(Объект.Ссылка, Коэффициент, "Цены", ИСТИНА);		
				КонецЕсли;
				
			Иначе
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	//ПараметрыФормы.Вставить("Договор", Объект.Договор);
	//ПараметрыФормы.Вставить("Склад", Объект.Склад);	
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ, Знач ПараметрыЗаписи)
	
	Если НЕ Отказ 
		И НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			
			СтрокаКлиент = Объект.Расчеты.Добавить();
			СтрокаКлиент.Клиент 			= Клиент;
			Элементы.Расчеты.ТекущаяСтрока 	= СтрокаКлиент.ПолучитьИдентификатор();
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; 
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                             // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = ТекСтр
	КонецЕсли;
	
	Если СтрокаТовара = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура 	= Номенклатура;
				СтрокаТовара.Количество 	= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;             							
		КонецЕсли;
		
		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.количество, Объект.видцен);
		Если НЕ процентскидки = 0 
			И НЕ СтрокаТовара.Цена = 0 тогда
			
			СтрокаТовара.Цена = СтрокаТовара.Цена - (СтрокаТовара.Цена/100 * ПроцентСкидки);	
		КонецЕсли;                                     	
		
	КонецЕсли;
	
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                        // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)         // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002200", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ВестиУчетПоПоставщикам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		ВестиУчетПоКлиентам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");	
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетВалют			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетВалютВСеансе");
		ФормаОплатыПоУмолчанию	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
		ВестиУчетПоСкладам 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");  	
		УчетПоСериям			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		
		Элементы.ТоварыВводСКоличеством.Видимость 		= не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");		
		Элементы.ГруппаПодвалКлиенты.Видимость 			= ВестиУчетПоКлиентам;	
		Элементы.Взаиморасчеты1.Видимость 				= ВестиУчетПоКлиентам И ВестиУчетВалют;
		Элементы.ГруппаПодвалПоставщики.Видимость 		= ВестиУчетПоПоставщикам;
		Элементы.Взаиморасчеты2.Видимость 				= ВестиУчетПоПоставщикам И ВестиУчетВалют;
		Элементы.НаименованиеОсновнойВалюты1.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамКлиентов.Видимость 	  = ВестиУчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамПоставщикам.Видимость = ВестиУчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.ГруппаСклада.Видимость 	 = ВестиУчетПоСкладам;	
		Элементы.ГруппаИтогДенег.Видимость 	 = ВестиУчетДвиженияДенег;
		ВестиУчетДенегВНесколькихХранилищах  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.Комментарий, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; //При копировании
			Объект.ДокументСторно = Неопределено;				
			
			НазначитьСкладДляВсехСтрок = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
		Иначе
			Если Объект.Проведен Тогда		
				Элементы.ЗаполнитеДанныеПоКорректировкеИлиОстаткамПоБлокамУчета.Видимость = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.ТоварыЦена.Доступность = ЛОЖЬ;
			Элементы.Цены.Доступность 		= ЛОЖЬ;
			
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;  
		
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
			исключение
			конецпопытки;
		КонецЕсли;	
		
		СерииНоменклатурыВидны = УчетПоСериям и ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
		Элементы.ТоварыСерияНоменклатуры.Видимость  = СерииНоменклатурыВидны;
		Элементы.ДеньгиФормаОплаты.Видимость 	    = НЕ ВестиУчетДенегВНесколькихХранилищах;		
		Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ГруппаОстатокДенег.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаОстатокДенег.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
		
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
			
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ИСТИНА;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	//
	//ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	//ДокументОбъект.ПодготовкаКПроведению(Отказ);
	//ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");
	//
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыКлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Элементы.Расчеты.ТекущиеДанные.Клиент);			
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Элементы.РасчетыСПоставщиками.ТекущиеДанные.Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьТаблицуТоваров(Команда)  
	
	Если НЕ ДокументЗаблокирован
		И НЕ Объект.Товары.Количество() = 0
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свернуть таблицу товаров?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		СвернутьТаблицуТоваровНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуТоваровНаСервере()
	
	ТаблицаОбработки = Новый ТаблицаЗначений;
	ТаблицаОбработки.Колонки.Добавить("Склад");
	ТаблицаОбработки.Колонки.Добавить("Номенклатура");
	ТаблицаОбработки.Колонки.Добавить("Количество");
	ТаблицаОбработки.Колонки.Добавить("Цена");
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаОбработки = ТаблицаОбработки.Добавить();
		Если ВестиУчетПоСкладам Тогда
			СтрокаОбработки.Склад = СтрокаТовара.Склад;
		КонецЕсли;		
		Номенклатура = ВРЕГ(СокрЛП(СтрокаТовара.Номенклатура));
		Номенклатура = СтрЗаменить(Номенклатура, "Х", "x");
		СтрокаОбработки.Номенклатура = Номенклатура;
		СтрокаОбработки.Количество = СтрокаТовара.Количество;
		СтрокаОбработки.Цена = СтрокаТовара.Цена;
	КонецЦикла;
	
	Если ВестиУчетПоСкладам Тогда
		ТаблицаОбработки.Свернуть("Склад, Номенклатура", "Количество");
	Иначе
		ТаблицаОбработки.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Для Каждого СтрокаТовара Из ТаблицаОбработки Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		Если ВестиУчетПоСкладам Тогда
			НоваяСтрока.Склад  = СтрокаТовара.Склад;	
		КонецЕсли;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовара.Номенклатура, ЛОЖЬ);
		НоваяСтрока.Количество = СтрокаТовара.Количество;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзТаблицыТовары(Команда)
	СкопироватьИзТаблицыТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкопироватьИзТаблицыТоварыНаСервере()
	Объект.Цены.Загрузить(Объект.Товары.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Клиенты.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьКлиентаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.Расчеты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = Объект.Расчеты.Добавить();
		СтрокаТ.клиент = ЭлементСправочника.ссылка;
		Элементы.Расчеты.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		Элементы.Расчеты.ТекущийЭлемент = Элементы.РасчетыСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоставщикаИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Поставщики.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьПоставщикаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.РасчетыСПоставщиками;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоставщикаИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = Объект.РасчетыСПоставщиками.Добавить();
		СтрокаТ.Поставщик = ЭлементСправочника.ссылка;
		Элементы.РасчетыСПоставщиками.ТекущаяСтрока 	= СтрокаТ.ПолучитьИдентификатор();
		Элементы.РасчетыСПоставщиками.ТекущийЭлемент 	= Элементы.РасчетыСПоставщикамиСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Номенклатура", )
	ИмяНеобходимойФормы = "Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии";
	ФормаДобавленияСерий = ПолучитьФорму(ИмяФормы, , ЭтаФорма);//, ПараметрыФормы);
	СтруктураОтвета = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТоварИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Номенклатура.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьТоварИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТоварИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		
		СтрокаТовара = Объект.Товары.Добавить();
		номенклатура = ЭлементСправочника.ссылка;
		СтрокаТовара.номенклатура 	= номенклатура;
		СтрокаТовара.цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.склад 			= НазначитьСкладДляВсехСтрок;
		СтрокаТовара.количество 	= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры(ТекСтр) ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Элементы.Товары.ТекущиеДанные.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);	
																						 КонецЕсли;
	ФормаВыбора 	= ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура 	= ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		ПриИзмененииНоменклатуры(ТекСтр) ;	
		
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекущиеДанные	= ТекСтр;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(ТекущиеДанные) ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)	
	ПриИзмененииНоменклатуры(ТекСтр) ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Склад 			 = НазначитьСкладДляВсехСтрок;
			Строка.Цена  			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюКоличествоПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюНоменклатураПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСерияНоменклатурыПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСуммаПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию(ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ СтрокаТовара.количество = 0 тогда
		СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		ПересчитатьСтроку();                                       	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Цены.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтр	= Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ВвестиЗначение(Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
		Если ЗначениеЗаполнено(Причина) Тогда
			ОткрытьЗначение( ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
			Закрыть();	
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры
