//sza140611-1559 Хозяин: 
//sza130909-1806 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002200", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ВестиУчетПоПоставщикам 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") ;
		ВестиУчетПоКлиентам 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;	
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
		ВестиУчетВалют			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетВалютВСеансе");
		ФормаОплатыПоУмолчанию	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию") ;
		ВестиУчетПоСкладу 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;  	
		УчетПоСериям			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		
		элементы.ТоварыВводСКоличеством.Видимость 		= не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством") ;		
		Элементы.ГруппаПодвалКлиенты.Видимость 			= ВестиУчетПоКлиентам;	
		Элементы.Взаиморасчеты1.Видимость 				= ВестиУчетПоКлиентам И ВестиУчетВалют;
		Элементы.ГруппаПодвалПоставщики.Видимость 		= ВестиУчетПоПоставщикам;
		Элементы.Взаиморасчеты2.Видимость 				= ВестиУчетПоПоставщикам И ВестиУчетВалют;
		Элементы.НаименованиеОсновнойВалюты1.Видимость 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") ;
		
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамКлиентов.Видимость 	  = ВестиУчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
		Элементы.НетВозможностиУказатьОстаткиЗадолженностиПоОтдельнымЗаказамПоставщикам.Видимость = ВестиУчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.ГруппаСклада.Видимость 	 = ВестиУчетПоСкладу;	
		Элементы.ГруппаИтогДенег.Видимость 	 = ВестиУчетДвиженияДенег;
		ВестиУчетДенегВНесколькихХранилищах  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") ;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен") ;
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
		Иначе
			Если Объект.Проведен Тогда		
				элементы.ЗаполнитеДанныеПоКорректировкеИлиОстаткамПоБлокамУчета.Видимость = ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") тогда
			
			если ЗначениеЗаполнено(объект.ВидЦен) Тогда
				элементы.ВидЦен.Доступность = ложь;	
			КонецЕсли;
			элементы.ТоварыЦена.Доступность = Ложь;
			элементы.Цены.Доступность 		= Ложь;
			
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;  
		
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				элементы.Страницы.ТекущаяСтраница = ТекущаяСтраница;
			исключение
			конецпопытки;
		КонецЕсли;	
		
		СерииНоменклатурыВидны = УчетПоСериям и ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
		Элементы.ТоварыСерияНоменклатуры.Видимость  = СерииНоменклатурыВидны;
		Элементы.ДеньгиФормаОплаты.Видимость 	    = НЕ ВестиУчетДенегВНесколькихХранилищах;		
		Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , Истина);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", , , , Истина);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ГруппаОстатокДенег.ТолькоПросмотр = Истина;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаОстатокДенег.Видимость = Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкладДляВсехСтрокПриИзменении(Элемент)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы поменять склад для всех строк документа?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Для каждого ТоварОстатка из Объект.Товары Цикл
			ТоварОстатка.Склад = НазначитьСкладДляВсехСтрок;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаСервере(ТекКод);
		ПересчитатьДокументНаКлиенте();   	
	КонецЕсли;                              	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Номенклатура", )
	ФормаДобавленияСерий = ПолучитьФорму("Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии");//, ПараметрыФормы);
	СтруктураОтвета = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета)
	
	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	
	Для Каждого Серия Из СтруктураОтвета.МассивНовыхСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураВх, НеСтановитсяНаЭтуСтроку = Ложь, МножительДляКоличества = 1)
	
	ЕдиницаИзмерения = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура 	= НоменклатураВх;
		Количество 		= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура) * МножительДляКоличества;
		серияНоменклатуры = Неопределено;
		Цена 			= 0;
		ЦенаЕсть 		= Ложь;
		
	Иначе
		Номенклатура 	= НоменклатураВх.Номенклатура;
		Количество 		= НоменклатураВх.Количество * МножительДляКоличества;
		серияНоменклатуры = НоменклатураВх.серияНоменклатуры;
		Цена 			= 0;
		ЦенаЕсть 		= НоменклатураВх.Свойство("Цена", Цена);
		НоменклатураВх.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	КонецЕсли; 
	
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) И ЗначениеЗаполнено(серияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("серияНоменклатуры", серияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	если не ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			если ЦенаЕсть тогда
				СтрокаТовара.Цена = Цена;
			иначе
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, объект.ВидЦен, объект.Дата, ложь, количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;
			
		иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;
		
		СтрокаТовара.Номенклатура 	= Номенклатура;
		СтрокаТовара.Количество 	= СтрокаТовара.Количество + Количество;
		если ТоварВедетсяПоСериям тогда
			
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
			СтрокаТовара.Количество = 1;
		конецесли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
			ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, объект.ВидЦен);
			
			если не процентскидки = 0 
				и не СтрокаТовара.Цена = 0 тогда
				
				СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
			КонецЕсли;                                     	
		КонецЕсли;
		
		пересчитатьСтрокуНаСервере(СтрокаТовара);	
		
		Если НЕ НеСтановитсяНаЭтуСтроку тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;	
		КонецЕсли;
		
	иначеЕсли НЕ НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
процедура пересчитатьСтроку()
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаСервере
процедура пересчитатьСтрокуНаСервере(СтрокаТовара)
	
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаСервере
процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		конецесли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, Количество = 1)
	
	Результат = неопределено;
	
	Состав = новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		иначе
			ДобавитьПозициюНоменклатуры(строкасостава, Истина, Количество);
		конецесли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)	
	ПриИзмененииНоменклатуры() ;	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) тогда
		
		если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);	
		КонецЕсли;
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура 	= Номенклатура;
				СтрокаТовара.Количество 	= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
			КонецЕсли;             							
		КонецЕсли;
		
		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, Ложь, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.количество, объект.видцен);
		если не процентскидки = 0 
			и не СтрокаТовара.Цена = 0 тогда
			
			СтрокаТовара.Цена = СтрокаТовара.Цена - (СтрокаТовара.Цена/100 * ПроцентСкидки);	
		КонецЕсли;                                     	
		
	КонецЕсли;
	
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = Истина;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина, Истина, Объект.Дата);
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден(") + ТекКод + ").");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте() 	
	
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	конецесли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	если не СтрокаТовара.количество = 0 тогда
		СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		ПересчитатьСтроку();                                       	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			
			СтрокаКлиент = Объект.Расчеты.Добавить();
			СтрокаКлиент.Клиент 			= Клиент;
			Элементы.Расчеты.ТекущаяСтрока 	= СтрокаКлиент.ПолучитьИдентификатор();
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦены(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ОбновитьЦеныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныНаСервере()
	
	Для каждого СтрокаТовара из Объект.Товары Цикл
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, истина, строкатовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		
		Если НЕ Цена = 0 Тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, Ложь, строкатовара.количество, , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, объект.ВидЦен );
				
				если не процентскидки = 0 
					и не СтрокаТовара.Цена = 0 тогда
					
					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
				КонецЕсли;                                     	
			КонецЕсли;
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = Ложь)
	
	если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) тогда
		
		Элементы.ТоварыВводСКоличеством.Доступность 						= Ложь;
		Элементы.ТоварыВводШтрихКода.Доступность  							= Ложь;
		Элементы.ТоварыОбновитьЦены.Доступность  							= Ложь;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Доступность = Ложь;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Доступность 				= Ложь;
		Элементы.ТоварыСоздатьТоварИДобавить.Доступность 					= Ложь;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Доступность 	= Ложь;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= Ложь;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Доступность = Ложь;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Доступность 			= Ложь;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= Ложь;
		Элементы.ТоварыЗаполнитьВсемиТоварами.Доступность 					= Ложь;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= Ложь;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= Ложь;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= Ложь;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= Ложь;
		Элементы.ТоварыСоздатьПринятьСерии.Доступность						= Ложь;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= Ложь;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= Ложь;
		
	иначе
		Элементы.ТоварыЗаполнитьВсемиТоварами.Доступность 					= истина;
		Элементы.ЦеныЗаполнитьВсемиТоварамиДляТаблицыЦены.Доступность 		= истина;
		Элементы.ЦеныЗаполнитьВидЦен.Доступность 							= истина;
		Элементы.ТоварыВводСКоличеством.Доступность 						= Истина;
		Элементы.ТоварыВводШтрихКода.Доступность 							= Истина;
		Элементы.ТоварыОбновитьЦены.Доступность 							= Истина;
		Элементы.РасчетыСПоставщикамиСоздатьПоставщикаИДобавить.Доступность = Истина;
		Элементы.РасчетыСоздатьКлиентаИДобавить.Доступность 				= истина;
		Элементы.ТоварыСоздатьТоварИДобавить.Доступность 					= истина;
		Элементы.РасчетыЗаполнитьОстаткамиРасчетовСКлиентами.Доступность 	= истина;
		Элементы.ТоварыЗаполнитьОстатками.Доступность 						= истина;
		Элементы.РасчетыСПоставщикамиЗаполнитьОстаткамиРасчетовСПоставщиками.Доступность = истина;
		Элементы.ДеньгиЗаполнитьТекущимиОстаткамиДенег.Доступность 			= истина;
		Элементы.ТоварыДляВведенныхТоваровПрочитатьОстатки.Доступность 		= Истина;
		Элементы.ЦеныОчиститьТаблицуЦен.Доступность 						= истина;
		Элементы.ЦеныСкопироватьИзТаблицыТовары.Доступность 				= Истина;
		Элементы.ТоварыСоздатьПринятьСерии.Доступность 						= Истина;
		Элементы.ТоварыОчисткаТаблицыТоваров.Доступность					= Истина;
		Элементы.РасчетыОчиститьТаблицуРасчетовСКлиентами.Доступность		= Истина;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьБлокировку

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры() 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыКлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Элементы.Расчеты.ТекущиеДанные.Клиент);			
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Элементы.РасчетыСПоставщиками.ТекущиеДанные.Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Цены.ТекущиеДанные.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДеньгиПриИзмененииНаСервере()
	
	Объект.ОстатокДенег = 0;
	Для Каждого СтрокаОстатка Из Объект.Деньги Цикл
		Объект.ОстатокДенег = Объект.ОстатокДенег + ОбщийМодульСервер.ПоКурсу(СтрокаОстатка.ОстатокДенег, СтрокаОстатка.Валюта, , Объект.Дата);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиОстатокДенегПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиВалютаПриИзменении(Элемент)
	ДеньгиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если НЕ Объект.Товары.Количество() = 0
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновить цены?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ОбновитьЦеныНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Деньги.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФормаОплаты) Тогда
		ТекущиеДанные.ФормаОплаты = ФормаОплатыПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарплатаПриИзмененииНаСервере()
	
	Сумма = 0;
	Для Каждого СтрокаДолга Из Объект.Зарплата Цикл
		Сумма = Сумма + ОбщийМодульСервер.ПоКурсу(СтрокаДолга.Сумма, СтрокаДолга.Валюта, , Объект.Дата);	
	КонецЦикла;
	Объект.ОстатокЗарплаты = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВалютаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		и ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ВестиУчетПоСкладу
		и ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Элементы.Товары.ТекущиеДанные.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	ФормаВыбора 	= ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура 	= ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		ПриИзмененииНоменклатуры() ;
		элементы.Товары.ЗакончитьРедактированиеСтроки(лОЖЬ);
		Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", НазначитьСкладДляВсехСтрок);
	СтруктураДляВВода.Вставить("ЭтоДобавка", Истина);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", Ложь);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатками(Команда)
	
	Если объект.Товары.Количество() = 0
		или Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить таблицу Товары?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ЗаполнитьОстаткамиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыОстатки.СуммаОстаток КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТоварыОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТоварыОстатки.СуммаОстаток / ТоварыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.Товары.Остатки(&ДатаОстаток, %%1) КАК ТоварыОстатки";
	
	Если ЗначениеЗаполнено(НазначитьСкладДляВсехСтрок) Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "Склад = &Склад");
		
		Запрос.УстановитьПараметр("Склад", НазначитьСкладДляВсехСтрок);
	иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстаток", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() Тогда
		Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());	
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остатков Товаров нет!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТоварИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Номенклатура.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьТоварИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТоварИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		
		СтрокаТовара = объект.Товары.Добавить();
		номенклатура = ЭлементСправочника.ссылка;
		СтрокаТовара.номенклатура 	= номенклатура;
		СтрокаТовара.цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.склад 			= НазначитьСкладДляВсехСтрок;
		СтрокаТовара.количество 	= ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Клиенты.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьКлиентаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.Расчеты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = объект.Расчеты.Добавить();
		СтрокаТ.клиент = ЭлементСправочника.ссылка;
		Элементы.Расчеты.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		элементы.Расчеты.ТекущийЭлемент = элементы.РасчетыСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоставщикаИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Поставщики.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьПоставщикаИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.РасчетыСПоставщиками;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоставщикаИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТ = объект.РасчетыСПоставщиками.Добавить();
		СтрокаТ.Поставщик = ЭлементСправочника.ссылка;
		Элементы.РасчетыСПоставщиками.ТекущаяСтрока 	= СтрокаТ.ПолучитьИдентификатор();
		элементы.РасчетыСПоставщиками.ТекущийЭлемент 	= Элементы.РасчетыСПоставщикамиСумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСКлиентами(Команда)
	ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСКлиентамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыОстатки.Клиент,
	|	РасчетыОстатки.СуммаОстаток Как Сумма
	|ИЗ
	|	РегистрНакопления.Расчеты.Остатки(&Дата, ) КАК РасчетыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	объект.Расчеты.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиРасчетовСПоставщиками(Команда)
	ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиРасчетовСПоставщикамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
	|	РасчетыСПоставщикамиОстатки.Поставщик
	|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, ) КАК РасчетыСПоставщикамиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата - 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	объект.РасчетыСПоставщиками.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущимиОстаткамиДенег(Команда)
	ЗаполнитьТекущимиОстаткамиДенегНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущимиОстаткамиДенегНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДеньгиОстатки.ФормаОплаты,
	|	ДеньгиОстатки.Валюта,
	|	ДеньгиОстатки.СуммаВВалютеОстаток КАК ОстатокДенег
	|ИЗ
	|	РегистрНакопления.Деньги.Остатки(&Дата, ) КАК ДеньгиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата -1 );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	объект.Деньги.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ДляВведенныхТоваровПрочитатьОстатки(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите окончания обработки.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка данных"), );
	ДляВведенныхТоваровПрочитатьОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДляВведенныхТоваровПрочитатьОстаткиНаСервере()
	
	для каждого строкаТовара из объект.Товары Цикл
		
		СтруктураОстатка 	= ОбщийМодульСервер.ОстатокТовара(строкатовара.склад, строкатовара.номенклатура, объект.Дата -1, Истина);
		строкаТовара.сумма 	= СтруктураОстатка.Сумма;
		Количество 			= СтруктураОстатка.Количество;
		строкаТовара.количество = СтруктураОстатка.Количество;
		Если Количество = 0 Тогда
			строкаТовара.цена = 0;
		Иначе
			строкаТовара.цена = строкаТовара.сумма / Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)  	
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	конецесли;
	
	Если НЕ Отказ Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));	
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ, ПараметрыЗаписи);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	если не отказ тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	СтраницыПанели  = Элементы.Страницы.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварами(Команда)
	ЗаполнитьВсемиТоварамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДобавитьПозициюНоменклатуры(ВыборкаДетальныеЗаписи.ссылка)
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦены(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите окончания загрузки таблицы.."));
	ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТоварамиДляТаблицыЦеныНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаЦены = объект.Цены.Добавить();
			СтрокаЦены.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦен(Команда)
	
	ВидЦен = Неопределено;
	ВвестиЗначение(ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид Цен для всех строк:"), тип("СправочникСсылка.ВидыЦен"));
	
	ЗаполнитьВидЦенНаСервере(ВидЦен);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенНаСервере(видцен)
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		для каждого строкацен из объект.Цены цикл
			строкацен.видцен = видцен;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЦен(Команда)
	ОчиститьТаблицуЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуЦенНаСервере()
	объект.Цены.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзТаблицыТовары(Команда)
	СкопироватьИзТаблицыТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкопироватьИзТаблицыТоварыНаСервере()
	объект.Цены.Загрузить(объект.Товары.Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию");
			ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора 							= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
			ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию 	= ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию И (ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора >= Объект.Дата);
			
			Для Каждого СтрокаДолга Из Объект.Расчеты Цикл
				
				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Клиентами не указан обязательный Договор!");
					Сообщение.Поле  = "РасчетыДоговор";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаДолга Из Объект.РасчетыСПоставщиками Цикл
				
				Если ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию
					И НЕ ЗначениеЗаполнено(СтрокаДолга.Договор) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДолга.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетов с Поставщиками не указан обязательный Договор!");
					Сообщение.Поле  = "РасчетыСПоставщикамиДоговор";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ Отказ
			И ВестиУчетДенегВНесколькихХранилищах Тогда
			
			Для каждого СтрокаДенег Из Объект.Деньги Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДенег.ХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаДенег.номерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указано хранилище денег!");
					Сообщение.Поле  = "ДеньгиХранилищеДенег";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				Иначе
					если не СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты тогда
						СтрокаДенег.ФормаОплаты = СтрокаДенег.ХранилищеДенег.ФормаОплаты;			
					Конецесли;
					
					если НЕ СтрокаДенег.Валюта = СтрокаДенег.ХранилищеДенег.Валюта тогда
						СтрокаДенег.Валюта	= СтрокаДенег.ХранилищеДенег.Валюта;
					Конецесли;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;	
		
		Если НЕ отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;      	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; 
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ, Знач ПараметрыЗаписи)
	
	Если Не Отказ 
		и не ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения тогда
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	//
	//ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	//ДокументОбъект.ПодготовкаКПроведению(Отказ);
	//ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");
	//
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", Истина);
	//ПараметрыФормы.Вставить("Договор", Объект.Договор);
	//ПараметрыФормы.Вставить("Склад", Объект.Склад);	
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Склад 			 = НазначитьСкладДляВсехСтрок;
			Строка.Цена  			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ОкруглитьЦены(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если не ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() тогда
				
				Коэффициент = 0;
				Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите число знаков после запятой:"), 1, 0) Тогда
					
					ОкруглятьВверх = Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Следует ли округлять исключительно в большую сторону?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
					
					Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округление цен для таблицы товаров:") + " " + Коэффициент);
					ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Округлил Цены товаров") + " " + Коэффициент, 2, Объект.Ссылка);
					ОбщийМодульКлиент.ОкруглитьТоВары(Объект.Ссылка, Коэффициент, ОкруглятьВверх, "Цены");		
				КонецЕсли;
				
			Иначе
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныПоКоэффициенту(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если не ОбщийМодульСервер.ПроверитьДокументПроведен(Объект.Ссылка) Тогда
			Если ОбщийМодульСервер.ПроверитьПользовательИмеетПравоМенятьЦены() тогда
				
				Коэффициент = 1;
				Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Цен:"), 12, 6) Тогда
					Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет цен для таблицы товаров по коэффициенту..") + Коэффициент);
					ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчитал Цены товаров по коэффициенту") + Коэффициент, 2, Объект.Ссылка);
					ОбщийМодульКлиент.ПересчитатьТоВары(Объект.Ссылка, Коэффициент, "Цены", Истина);		
				КонецЕсли;
				
			Иначе
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас нет права менять цены!"), СтатусСообщения.Внимание);
			КонецЕсли;
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ уже проведен. Изменения не произведены."), СтатусСообщения.Информация);
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДолгиКлиентовПоКоэффициенту(Команда)
	
	Коэффициент = 1;
	Если ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент для Сумм:"), 12, 6) Тогда				
		ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Коэффициент); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДолгиКлиентовПоКоэффициентуНаСервере(Знач Коэффициент)
	
	Для Каждого СтрокаДолга Из Объект.Расчеты Цикл
		СтрокаДолга.Сумма = СтрокаДолга.Сумма * Коэффициент;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьТаблицуТоваров(Команда)  
	
	Если НЕ ДокументЗаблокирован
		И не Объект.Товары.Количество() = 0
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свернуть таблицу товаров?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		СвернутьТаблицуТоваровНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуТоваровНаСервере()
	
	ТаблицаОбработки = Новый ТаблицаЗначений;
	ТаблицаОбработки.Колонки.Добавить("Склад");
	ТаблицаОбработки.Колонки.Добавить("Номенклатура");
	ТаблицаОбработки.Колонки.Добавить("Количество");
	ТаблицаОбработки.Колонки.Добавить("Цена");
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаОбработки = ТаблицаОбработки.Добавить();
		Если ВестиУчетПоСкладу Тогда
			СтрокаОбработки.Склад = СтрокаТовара.Склад;
		КонецЕсли;		
		Номенклатура = ВРЕГ(СокрЛП(СтрокаТовара.Номенклатура));
		Номенклатура = СтрЗаменить(Номенклатура, "Х", "x");
		СтрокаОбработки.Номенклатура = Номенклатура;
		СтрокаОбработки.Количество = СтрокаТовара.Количество;
		СтрокаОбработки.Цена = СтрокаТовара.Цена;
	КонецЦикла;
	
	Если ВестиУчетПоСкладу Тогда
		ТаблицаОбработки.Свернуть("Склад, Номенклатура", "Количество");
	Иначе
		ТаблицаОбработки.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Для Каждого СтрокаТовара Из ТаблицаОбработки Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		Если ВестиУчетПоСкладу Тогда
			НоваяСтрока.Склад  = СтрокаТовара.Склад;	
		КонецЕсли;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовара.Номенклатура, Ложь) ;
		НоваяСтрока.Количество = СтрокаТовара.Количество;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры() ;	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицыТоваров(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить таблицу?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчисткаТаблицыТоваровНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаТаблицыТоваровНаСервере()
	Объект.Товары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуРасчетовСКлиентами(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите очистить расчеты?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуРасчетовСКлиентамиНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуРасчетовСКлиентамиНаСервере()
	Объект.Расчеты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюНоменклатураПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуТоваровПереданныхНаКомиссию(Знач ИзСуммы = Ложь)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	Если не СтрокаТовара = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) 
			ИЛИ СтрокаТовара.Количество = 0 Тогда
			
			СтрокаТовара.Количество = 1;
		КонецЕсли;	
		Если НЕ ИзСуммы Тогда
			СтрокаТовара.сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		Иначе
			СтрокаТовара.цена = СтрокаТовара.сумма / СтрокаТовара.количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПересчитатьСтрокуТоваровПереданныхНаКомиссию()

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСерияНоменклатурыПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюКоличествоПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПереданныеНаКомиссиюСуммаПриИзменении(Элемент)
	ПересчитатьСтрокуТоваровПереданныхНаКомиссию(Истина);	
КонецПроцедуры
