//sza150112-0347
//sza141111-1344
//sza140904-0129 : 
//sza140710-0143  
//sza140624-2114  
//sza130920-1546 : 
&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БезКоличества", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод); 
		КонецЕсли;		
	КонецЕсли;                              	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	проверитьЗависимостьВидаЦен();
	ПроверитьВидЦенЗависимый();
	
	Если НЕ СтарыйВидЦен = Объект.ВидЦен
		И Вопрос("Обновить цены?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		СтарыйВидЦен = Объект.ВидЦен;
		ВидЦенПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Если НЕ ДокументЗаблокирован 
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Для Каждого СтрокаТовара из Объект.Товары Цикл
			Если ИспользоватьСложныйМеханизмЦен Тогда
				СтрокаТовара.СтараяЦена 	= ОбщийМодульСервер.ПолучитьСложнуюЦену(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, , , , , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Цена 			= ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, Объект.ВидЦен, Объект.Дата, Объект.Ссылка, СтрокаТовара.ЕдиницаИзмерения);
			Иначе
				СтрокаТовара.СтараяЦена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;
			СтрокаТовара.РазницаЦены 	= СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;	
		КонецЦикла;                       	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНачалоДня(Команда)
	Объект.Дата = НачалоДня(Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюОЦенахВДругомВидеЦен(Команда)
	
	Если ВвестиЗначение(ИнформационныйВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид цен для информационной колонки") + ": ", тип("СправочникСсылка.ВидыЦен"))
		И ЗначениеЗаполнено(ИнформационныйВидЦен) Тогда
		
		ВывестиИнформациюОЦенахВДругомВидеЦенНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюОЦенахВДругомВидеЦенНаСервере()
	
	Элементы.ИнформационныйВидЦен.Видимость = ИСТИНА;
	Элементы.ТоварыВДругомВидеЦен.Видимость = ИСТИНА;
	Элементы.ТоварыРазницаИнформация.Видимость = ИСТИНА;
	ИнформационныйВидЦенРаботает = ИСТИНА;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ВДругомВидеЦен = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ИнформационныйВидЦен, Объект.Дата, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.РазницаИнформация = СтрокаТовара.Цена - СтрокаТовара.ВДругомВидеЦен;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ВыяснитьЦенуВсехСоставляющихНабора(Номенклатура)
	
	Сумма = 0;
	
	Для Каждого СтрокаСоставаНабора из номенклатура.состав цикл
		Если СтрокаСоставаНабора.номенклатура.этонабор = ИСТИНА Тогда
			сумма = сумма + ВыяснитьЦенуВсехСоставляющихНабора(СтрокаСоставаНабора.номенклатура);
		Иначе
			сумма = сумма + (ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, Объект.ВидЦен, Объект.Дата -1, ИСТИНА, , , , , Объект.Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения) * СтрокаСоставаНабора.количество);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Сумма;
	
КонецФункции //ВыяснитьЦенуВсехСоставляющихНабора

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ Объект.Товары.Количество() = 0 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчитать цены на эту дату?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		проверитьЗависимостьВидаЦен();
		ПроверитьВидЦенЗависимый();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ВидЦенПриИзмененииНаСервере();              	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсюНоменклатуру(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ДобавитьВсюНоменклатуруНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсюНоменклатуруНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.СтараяЦена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.номенклатура, Объект.ВидЦен, Объект.Дата -1 , ЛОЖЬ);
				Иначе
					НоваяСтрока.СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				
				ПересчитатьСтрокуНаСервере(НоваяСтрока);		
			КонецЕсли;
		КонецЦикла;   	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.УстановкиЦен"));
	ЭтотОбъект.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект,Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;		
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
			формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
			формаИзображения.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокумента(Команда)
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить("КорректировкиИРегистрацияОстатков", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ввод остатков (корректировка)"));
	СписокТиповДокументов.Добавить("Инвентаризации", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инвентаризация"));
	СписокТиповДокументов.Добавить("РасходыТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходы товара, услуг"));
	СписокТиповДокументов.Добавить("ПоступленияТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступления (возвраты) товара"));
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот") Тогда
		СписокТиповДокументов.Добавить("ВыполненияРабот", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Выполнения работ"));	
	КонецЕсли;
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		СписокТиповДокументов.Добавить("ПеремещенияТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещения товара"));
	КонецЕсли;	
	СписокТиповДокументов.Добавить("УстановкиЦен", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установки Цен"));
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КонфигурацияВРаботе") Тогда
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановДоходовИРасходов") Тогда
			СписокТиповДокументов.Добавить("ПланыПродаж", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планы продаж"));	
		КонецЕсли;
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
			СписокТиповДокументов.Добавить("ОтчетКомиссионера", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты комиссионеров"));	
		КонецЕсли;
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию") Тогда
			СписокТиповДокументов.Добавить("Комплектация", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектации"));	
		КонецЕсли;
	КонецЕсли;
	
	ТипДокументаДляДобавления = ВыбратьИзСписка(СписокТиповДокументов, , СписокТиповДокументов[0]);
	
	Если НЕ ТипДокументаДляДобавления = Неопределено тогда
		ТипДокументаДляДобавления = стрзаменить(ТипДокументаДляДобавления, " ", "");
		
		ФормаВыбораДокумента = ПолучитьФорму("Документ." + ТипДокументаДляДобавления + ".ФормаВыбора");
		
		ФормаВыбораДокумента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Документ для добавления его номенклатуры в Установку цен") + ": ";
		ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();
		Если ЗначениеЗаполнено(ДругойДокумент) Тогда
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
			ДобавитьНоменклатуруДругогоДокументаНаСервере();      	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруДругогоДокументаНаСервере()
	
	Если ЗначениеЗаполнено(ДругойДокумент) Тогда		
		Объект.Товары.Загрузить(ДругойДокумент.Товары.Выгрузить());		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.СтараяЦена = СтрокаТовара.Цена;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоГруппеНоменклатуры(Команда)
	
	ФормаВыбораГруппыНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбораГруппы");
	ФормаВыбораГруппыНоменклатуры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Группу номенклатуры для добавления в установку цен") + ": ";
	ГруппаНоменклатуры = ФормаВыбораГруппыНоменклатуры.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПогруппеНоменклатурыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоГруппеНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Родитель = &Родитель
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Родитель", ГруппаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.СтараяЦена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ);
				Иначе
					НоваяСтрока.СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				ПересчитатьСтрокуНаСервере(НоваяСтрока);		
			КонецЕсли;
		КонецЦикла;           	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураВх)
	
	ЕдиницаИзмерения = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура = НоменклатураВх;
		Цена = 0;
		ЦенаЕсть = ЛОЖЬ;
		
	Иначе
		Номенклатура = НоменклатураВх.Номенклатура;
		Цена = 0;
		ЦенаЕсть = НоменклатураВх.Свойство("Цена", Цена);
		НоменклатураВх.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТовара.СтараяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(строкатовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ИСТИНА, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;
		
		СтрокаТовара.Номенклатура = Номенклатура;
		Если ЦенаЕсть Тогда
			СтрокаТовара.Цена = Цена;
		КонецЕсли;
		Если ИнформационныйВидЦенРаботает Тогда
			СтрокаТовара.ВДругомВидеЦен = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ИнформационныйВидЦен, Объект.Дата, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);	
			СтрокаТовара.РазницаИнформация = СтрокаТовара.Цена - СтрокаТовара.ВДругомВидеЦен;	
		КонецЕсли;
		
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыЦена;
		
	ИначеЕсли НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыЦена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоНоменклатурнойГруппе(Команда)
	
	ФормаНоменклатурнойГруппы = ПолучитьФорму("Справочник.НоменклатурныеГруппы.ФормаВыбора");
	ФормаНоменклатурнойГруппы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Номенклатурную Группу для добавления её номенклатуры в установку цен") + ": ";
	НоменклатурнаяГруппа = ФормаНоменклатурнойГруппы.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоНоменклатурнойГруппеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоНоменклатурнойГруппеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.СтараяЦена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ);
				Иначе
					НоваяСтрока.СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				
				ПересчитатьСтрокуНаСервере(НоваяСтрока);		
			КонецЕсли;
		КонецЦикла;     	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПроизводителю(Команда)
	
	ФормаВыбораПроизводителя = ПолучитьФорму("Справочник.Производители.ФормаВыбора");
	ФормаВыбораПроизводителя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Производителя для добавления его номенклатуры в установку цен") + ": ";
	Производитель = ФормаВыбораПроизводителя.ОткрытьМодально();
	Если ЗначениеЗаполнено(Производитель) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоПроизводителюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоПроизводителюНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Производитель = &Производитель";
	
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.СтараяЦена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ);
				Иначе
					НоваяСтрока.СтараяЦена = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				ПересчитатьСтрокуНаСервере(НоваяСтрока);		
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШтрихКодКОличество(Знач Адрес)
	
	Объект.Товары.Очистить();
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(Адрес);
	
	Счетчик = 1;
	СтрокаФайла = ТекстДок.ПолучитьСтроку(Счетчик);
	Пока НЕ ПустаяСтрока(СтрокаФайла) Цикл       
		Счетчик = Счетчик + 1;
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		
		СтруктураПоШК = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(СтрокаФайла, ИСТИНА, ИСТИНА, Объект.Дата);
		
		СтрокаТовара.Номенклатура = СтруктураПоШК.Номенклатура;
		СтрокаТовара.СерияНоменклатуры = СтруктураПоШК.СерияНоменклатуры;
		
		СтрокаФайла = ТекстДок.ПолучитьСтроку(Счетчик);
		Счетчик = Счетчик + 1;
		
		Если НЕ ПустаяСтрока(СтрокаФайла) Тогда
			Попытка 
				СтрокаТовара.Цена = Число(СтрокаФайла);		
			Исключение 	
			КонецПопытки;
		КонецЕсли;
		
		СтрокаФайла = ТекстДок.ПолучитьСтроку(Счетчик);		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("Номенклатура, СерияНоменклатуры, Цена");
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	ТекстДок = Неопределено;
	
КонецПроцедуры //ВыгрузитьШтрихКодКОличество(Адрес)

&НаКлиенте
Процедура ЗагрузитьШтрихКодЦена(Команда)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил таблицу Штрих-кода из файла"), 2, Объект.Ссылка);
	
	Адрес = "";
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок		  =	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для загрузки") + ": ";
	ДиалогВыбФайла.ПолноеИмяФайла	  =	Адрес; //АДРЕС
	ДиалогВыбФайла.Фильтр			  =	ДиалогФильтр;
	ДиалогВыбФайла.Расширение		  =	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор =	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра	  =	0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = ИСТИНА;
	Если ДиалогВыбФайла.Выбрать() Тогда
		Адрес = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружается документ"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗагрузитьШтрихКодКОличество(Адрес);
	КонецЕсли; //когда файл Адрес выбран
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппойАналогов(Команда)
	
	ФормаВыбораГА = ПолучитьФорму("Справочник.ГруппыАналогов.ФормаВыбора");
	ФормаВыбораГА.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите группу Аналогов для добавления в документ") + ": ";
	ГруппаАналогов = ФормаВыбораГА.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаАналогов) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗаполнитьГруппойАналоговНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппойАналоговНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ГруппыАналоговТовары.Номенклатура,
	|	ГруппыАналоговТовары.ЕдиницаИзмерения,
	|	ГруппыАналоговТовары.Количество
	|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
	|ГДЕ ГруппыАналоговТовары.Ссылка = &ГруппаАналогов";
	
	Запрос.УстановитьПараметр("ГруппаАналогов", ГруппаАналогов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			Если ИспользоватьЕдиницыИзмеренияНоменклатуры
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения) Тогда
				
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			КонецЕсли;
			
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
				
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.СтараяЦена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ);
				Иначе
					НоваяСтрока.СтараяЦена = ВыборкаДетальныеЗаписи.Номенклатура.Цена;
				КонецЕсли;
				Количество = ?(ВыборкаДетальныеЗаписи.Количество = 0, 1, ВыборкаДетальныеЗаписи.Количество);
				ПересчитатьСтрокуНаСервере(НоваяСтрока, ВыборкаДетальныеЗаписи.Количество);		
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуНаборамиИРасчитатьИмЦены(Команда)
	ЗаполнитьТаблицуНаборамиИРасчитатьИмЦеныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНаборамиИРасчитатьИмЦеныНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ИСТИНА
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО Номенклатура.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= ВыборкаДетальныеЗаписи.ССылка;
			СтрокаТовара.СтараяЦена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(строкатовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ИСТИНА, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			
			СтрокаТовара.Цена 			= ВыяснитьЦенуВсехСоставляющихНабора(СтрокаТовара.Номенклатура);			
			СтрокаТовара.РазницаЦены 	= СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетнымиДанными(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ЗаполнитьУчетнымиДаннымиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнымиДаннымиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.СуммаОстаток,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.Номенклатура
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ) КАК ТоварыОстатки ";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= ВыборкаДетальныеЗаписи.номенклатура;
			СтрокаТовара.СтараяЦена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ИСТИНА, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			ПересчитатьСтрокуНаСервере(СтрокаТовара);
		КонецЦикла;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационныйВидЦен(СтрокаТовара, ТолькоРазница = ЛОЖЬ)
	
	Если НЕ ТолькоРазница Тогда
		СтрокаТовара.ВДругомВидеЦен = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ИнформационныйВидЦен, Объект.Дата, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);
	КонецЕсли;
	СтрокаТовара.РазницаИнформация = СтрокаТовара.Цена - СтрокаТовара.ВДругомВидеЦен;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "002352") Тогда			
		Элементы.ОбработкаТаблицы.Видимость 				= ЛОЖЬ;
		Элементы.ТоварыВводШтрихКода.Видимость	 			= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость	 		= ЛОЖЬ;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 	= ЛОЖЬ;
		Элементы.ВНачалоДня.Видимость						= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость			= ЛОЖЬ;
		
	Иначе
		Элементы.ОбработкаТаблицы.Видимость 				= ИСТИНА;
		Элементы.ТоварыВводШтрихКода.Видимость	 			= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Видимость	 		= ИСТИНА;
		Элементы.ТоварыСоздатьТоварИДобавить.Видимость	 	= ИСТИНА;
		Элементы.ВНачалоДня.Видимость						= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость			= ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		ОбщийМодульКлиент.ВыдатьСигнал();
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = ИСТИНА;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, , , Объект.Дата);
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	Если НЕ ПоказыватьИзображения Тогда
		Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВидЦен()	
	Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
КонецПроцедуры //ОчиститьВидЦен

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу документа?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	
	Объект.Товары.Очистить();
	Попытка 
		Объект.ТовараВКоличестве = 0;
		Объект.ТовараНаСумму 	 = 0;
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.ТовараНаСумму 	 = Объект.Товары.Итог("Сумма");
	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуНаСервере(СтрокаТовара, Знач Коэффициент = 1)
	
	СтрокаТовара.Цена 			= ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, Объект.ВидЦен, Объект.Дата, Объект.Ссылка, СтрокаТовара.ЕдиницаИзмерения) / Коэффициент;
	СтрокаТовара.РазницаЦены 	= СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;
	
	Если ИнформационныйВидЦенРаботает Тогда
		СтрокаТовара.ВДругомВидеЦен = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ИнформационныйВидЦен, Объект.Дата, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.РазницаИнформация = СтрокаТовара.Цена - СтрокаТовара.ВДругомВидеЦен;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуПоКоэффициенту(Знач Коэффициент)
	
	Для Каждого СтрокаЦен из Объект.Товары Цикл
		СтрокаЦен.Цена = СтрокаЦен.СтараяЦена * Коэффициент;
		СтрокаЦен.РазницаЦены = СтрокаЦен.Цена - СтрокаЦен.СтараяЦена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	//	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	//	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ИмяФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

Функция   ПоказатьИзображениеРеквизита(Знач ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ИСТИНА;
			
			Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			КонецЕсли; 
			
		Иначе
			Элементы.СсылкаНаИзображение.Видимость     = ИСТИНА;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
		КонецЕсли; 		
		
		Результат = ИСТИНА;		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если НЕ СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если НЕ Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;			                     	
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ)
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		СтрокаТовара.СтараяЦена  = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);
		Если НЕ НеМенятьЦену
			И ИспользоватьСложныйМеханизмЦен Тогда
			
			СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, Объект.ВидЦен, Объект.Дата, Объект.Ссылка, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;	
		
		СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;
		Если ИнформационныйВидЦенРаботает Тогда
			ОбновитьИнформационныйВидЦен(СтрокаТовара);		
		КонецЕсли;
		
		ПоказатьТовар();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если НЕ ЗначениеЗаполнено(Объект.ссылка) Тогда
		ПроверитьВидЦенЗависимый();  	
	Иначе
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + Описаниеошибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
		отказ = ИСТИНА;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350", ЭтаФорма, Отказ, Объект);
		
		Если НЕ Отказ Тогда
			ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
			ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");			
			ИспользоватьПодключаемоеОборудование  	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
			СопровождатьНоменклатуруИзображениями 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
			
			ПоказыватьИзображения = СопровождатьНоменклатуруИзображениями;
			
			Элементы.ТоварыВводСКоличеством.Видимость = не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
			Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляУстановкиЦен");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
				Элементы.Переместить(Элементы.ФормаГруппаГлобальных, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.НомерИДата, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.ГруппаВидаЦен, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.ГоризонтШапки, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.ИнформационныйВидЦен, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.Комментарий, Элементы.ГруппаАльтернативногоВидаСлева);
				Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаАльтернативногоВидаСлева);
				
				Элементы.Переместить(Элементы.Товары, Элементы.ГруппаАльтернативногоВидаСправа);
				Элементы.Переместить(Элементы.Товары, Элементы.ГруппаАльтернативногоВидаСправа);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				КонецЕсли;		
				
				Если ЗначениеЗаполнено(Объект.ВидЦен)
					И Объект.ВидЦен.Зависимая Тогда
					
					Объект.ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ПустаяСсылка()");
				КонецЕсли;
				
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				
			КонецЕсли;	
			
			проверитьЗависимостьВидаЦен();
			
			Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
			Элементы.ОписаниеВидаЦены.Видимость = ИспользоватьСложныйМеханизмЦен;
			
			СтарыйВидЦен = Объект.ВидЦен;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидЦенЗависимый()
	
	Если ЭтоЗависимаяЦена
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Этот Вид Цен - Зависимый.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рекомендуется устанавливать только базовые.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все равно использовать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		
		ОчиститьВидЦен();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПроверитьЗависимостьВидаЦен()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ЭтоЗависимаяЦена = Объект.ВидЦен.Зависимая;
		ИсточниковЗависимостиМожетБытьНесколько = Объект.ВидЦен.ИсточниковЗависимостиМожетБытьНесколько;
		
		Элементы.РазличныеСпособыФормированияЦеныДляРазличныхНоменклатурныхГрупп.Видимость = ЭтоЗависимаяЦена
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп")
		И НЕ Объект.ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.Количество() = 0;
		
		Элементы.ВидЦенФормулаРасчетаОтБазовогоВидаЦены.Видимость = НЕ ИсточниковЗависимостиМожетБытьНесколько И ЗначениеЗаполнено(Объект.ВидЦен.ФормулаРасчетаОтБазовогоВидаЦены);
		Элементы.ВидЦенПроцентОтБазовойЦены.Видимость 			  = НЕ ИсточниковЗависимостиМожетБытьНесколько И ЗначениеЗаполнено(Объект.ВидЦен.ПроцентОтБазовойЦены);
		Элементы.ВидЦенОсновнойВидЦен.Видимость 				  = НЕ ИсточниковЗависимостиМожетБытьНесколько И ЗначениеЗаполнено(Объект.ВидЦен.ОсновнойВидЦен);
		Элементы.ВидЦенКомментарий.Видимость 					  = ЗначениеЗаполнено(Объект.ВидЦен.Комментарий);
		Элементы.ВидЦенЗависимая.Видимость 						  = ЗначениеЗаполнено(Объект.ВидЦен.Зависимая);
		
	Иначе
		ЭтоЗависимаяЦена = ЛОЖЬ;
		
		Элементы.ВидЦенКомментарий.Видимость = ЛОЖЬ;
		Элементы.ВидЦенФормулаРасчетаОтБазовогоВидаЦены.Видимость = ЛОЖЬ;
		Элементы.ВидЦенПроцентОтБазовойЦены.Видимость = ЛОЖЬ;
		Элементы.ВидЦенОсновнойВидЦен.Видимость = ЛОЖЬ;
		Элементы.ВидЦенЗависимая.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
			ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТоварИДобавить(Команда)
	
	ФормаЭлемента = получитьФорму("Справочник.Номенклатура.ФормаОбъекта");
	ФормаЭлемента.ОткрытьМодально();
	Если ЗначениеЗаполнено(ФормаЭлемента.Объект.ссылка) Тогда
		СоздатьТоварИДобавитьНаСервере(ФормаЭлемента.Объект.ссылка);
		Этаформа.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТоварИДобавитьНаСервере(ЭлементСправочника)
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		СтрокаТовара = Объект.Товары.Добавить();
		СтрокаТовара.номенклатура 		= ЭлементСправочника.ссылка;
		СтрокаТовара.Цена				= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ЭлементСправочника, Объект.ВидЦен, Объект.Дата -1, ЛОЖЬ, , , , , , , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.СтараяЦена			= СтрокаТовара.Цена;
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();		
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
		
		Если ИнформационныйВидЦенРаботает Тогда
			СтрокаТовара.ВДругомВидеЦен = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ИнформационныйВидЦен, Объект.Дата, ЛОЖЬ);		
			СтрокаТовара.РазницаИнформация = СтрокаТовара.Цена - СтрокаТовара.ВДругомВидеЦен;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);	
																						 КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		ПриИзмененииНоменклатуры();
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыЦена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры() 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура = Подбор.номенклатура;
			Строка.СтараяЦена	= Подбор.Цена;
			Строка.Комментарий	= Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка, ИСТИНА);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	ПоказатьТовар();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазницаЦеныПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Цена = СтрокаТовара.СтараяЦена + СтрокаТовара.РазницаЦены;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;
	Если ИнформационныйВидЦенРаботает Тогда
		ОбновитьИнформационныйВидЦен(СтрокаТовара, ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовуюЦенуПоСтарой(Команда)
	
	Коэффициент = 1;
	ВвестиЧисло(Коэффициент, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите коэффициент для новой цены относительно старой (1 - равенство)?"), 12, 4);
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ПересчитатьЦенуПоКоэффициенту(Коэффициент);
	
КонецПроцедуры
