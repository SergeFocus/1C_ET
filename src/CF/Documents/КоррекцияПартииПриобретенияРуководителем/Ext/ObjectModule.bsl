// sza140409-0206  
// sza131110-2042 : 
Функция   ВыяснитьСумму(ВыборкаДетальныеЗаписи, СтруктураПартияПриобретения, НеРегистрироватьЦены = ЛОЖЬ)
	
	Количество 	  = ?(ВыборкаДетальныеЗаписи.Количество = 0, 1, ВыборкаДетальныеЗаписи.Количество);
	Цена 		  = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
	Себестоимость = Цена - СтруктураПартияПриобретения.СуммаДополнительнойСтоимости;
	
	Если СтруктураПартияПриобретения.ЕстьПроцентыНаценкиПоПроизводителям Тогда
		СтрокаПроизводителя = СтруктураПартияПриобретения.ПроцентыНаценкиПоПроизводителям.Найти(ВыборкаДетальныеЗаписи.Производитель, "Производитель");
		Если НЕ СтрокаПроизводителя = Неопределено Тогда
			Если НЕ СтрокаПроизводителя.ПроцентНаценки = 0 Тогда
				
				Себестоимость = Себестоимость / СтрокаПроизводителя.ПроцентНаценки * 100;
			КонецЕсли;
			
		Иначе
			Если НЕ СтруктураПартияПриобретения.ПроцентНаценки = 0 Тогда
				
				Себестоимость = Себестоимость / СтруктураПартияПриобретения.ПроцентНаценки * 100;
			КонецЕсли;
		КонецЕсли;
		
	Иначеесли НЕ СтруктураПартияПриобретения.ПроцентНаценки = 0 Тогда
		
		Себестоимость = Себестоимость / СтруктураПартияПриобретения.ПроцентНаценки * 100;
	КонецЕсли;
	
	Если НЕ НеРегистрироватьЦены Тогда
		Дата = ?(СтруктураПартияПриобретения.Дата = Неопределено, ВыборкаДетальныеЗаписи.Период, СтруктураПартияПриобретения.Дата);
		
		СтрокаТовара = Новый Структура;
		СтрокаТовара.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
		СтрокаТовара.Вставить("Цена", Себестоимость);
		
		Если НЕ СтруктураПартияПриобретения.ВидЦен = Неопределено Тогда			
			СтрокаТовара.Цена = ОбщийМодульСервер.ПоКурсу(Себестоимость, , СтруктураПартияПриобретения.ВалютаВидаЦен, Дата);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(СтруктураПартияПриобретения.ВидЦен, СтрокаТовара, Ссылка, СтруктураПартияПриобретения.Комментарий, Дата, ЛОЖЬ);
		КонецЕсли;
		
		Если НЕ СтруктураПартияПриобретения.ВидЦенПриобретения = Неопределено тогда
			
			Если СтруктураПартияПриобретения.ДоляДопРасходов = 0 Тогда
				ЦенаПриобретения = Себестоимость;
			Иначе
				ЦенаПриобретения = Себестоимость + Себестоимость * СтруктураПартияПриобретения.ДоляДопРасходов;	
			КонецЕсли;
			
			СтрокаТовара.Цена = ОбщийМодульСервер.ПоКурсу(ЦенаПриобретения, СтруктураПартияПриобретения.ВалютаВидЦенПриобретения, , Дата);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(СтруктураПартияПриобретения.ВидЦенПриобретения, СтрокаТовара, Ссылка, СтруктураПартияПриобретения.Комментарий, Дата, ЛОЖЬ);		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Себестоимость * Количество;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если НЕ Отказ Тогда
			
			Попытка 
				// 			УстановитьМонопольныйРежим(ИСТИНА);
			Исключение 	
			КонецПопытки;
			
			движения.Закупки.Записать();
			движения.Товары.Записать();
			
			Движения.Товары.Записывать  = ИСТИНА;           
			Движения.Закупки.Записывать = ИСТИНА;
			
			НеПерепроводитьРасходныеДокументыТовараЭтойПартииПриЗаписи = ПартияПриобретения.НеПерепроводитьРасходныеДокументыТовараЭтойПартииПриЗаписи;
			МассивТоваровДляПерепроведенияРеализации = Новый Массив;
			МладшаяДата = ПартияПриобретения.Дата;
			
			НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
			ПараметрыСеанса.НеВыводитьСообщений = ИСТИНА;
			
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
			ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Товары.Период,
			|	Товары.Регистратор,
			|	Товары.ВидДвижения,
			|	Товары.Номенклатура,
			|	Товары.Склад,
			|	Товары.Количество,
			|	Товары.Сумма,
			|	Товары.СписаниеИлиОприходование,
			|	Товары.Комментарий,
			|	Товары.Номенклатура.Производитель КАК Производитель
			|ИЗ РегистрНакопления.Товары КАК Товары
			|ГДЕ Товары.Регистратор.ПартияПриобретения = &ПартияПриобретения
			|	И Товары.Регистратор <> &Регистратор";
			
			Запрос.УстановитьПараметр("ПартияПриобретения", ПартияПриобретения);
			Запрос.УстановитьПараметр("Регистратор", Ссылка);
			
			ПартияПриобретенияПоставщик = ПартияПриобретения.Поставщик;
			ЗаменитьЗакупки = ЗначениеЗаполнено(ПартияПриобретенияПоставщик) И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
			
			ТекстСторно 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторно. Для расчета действительной себестоимости.");
			
			ПартияПриобретенияПоступлениеПеренестиНаДатуПартии = ПартияПриобретения.ПоступлениеПеренестиНаДатуПартии;
			ПартияПриобретенияДата = ПартияПриобретения.Дата;
			Комментарий 		   = ПартияПриобретения.Комментарий;
			
			СтруктураПартияПриобретения = Новый Структура;
			СтруктураПартияПриобретения.Вставить("СуммаДополнительнойСтоимости", ПартияПриобретения.СуммаДополнительнойСтоимости);
			СтруктураПартияПриобретения.Вставить("ЕстьПроцентыНаценкиПоПроизводителям", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") И НЕ ПартияПриобретения.ПроцентыНаценкиПоПроизводителям.Количество() = 0);
			СтруктураПартияПриобретения.Вставить("ПроцентНаценки", ПартияПриобретения.ПроцентНаценки);
			СтруктураПартияПриобретения.Вставить("ПроцентыНаценкиПоПроизводителям", ПартияПриобретения.ПроцентыНаценкиПоПроизводителям.Выгрузить());
			СтруктураПартияПриобретения.Вставить("Дата", ?(ПартияПриобретения.Дата = '00010101000000', Неопределено , НачалоДня(ПартияПриобретения.Дата)));
			Если ПартияПриобретения.ВидЦен = Неопределено Тогда
				СтруктураПартияПриобретения.Вставить("ВидЦен", Неопределено);
			Иначе
				СтруктураПартияПриобретения.Вставить("ВидЦен", ПартияПриобретения.ВидЦен);
				СтруктураПартияПриобретения.Вставить("ВалютаВидаЦен", ПартияПриобретения.ВидЦен.ВалютаЦены);
			КонецЕсли;
			Если ПартияПриобретения.ВидЦенПриобретения = Неопределено Тогда
				СтруктураПартияПриобретения.Вставить("ВидЦенПриобретения", Неопределено);
			Иначе
				СтруктураПартияПриобретения.Вставить("ВидЦенПриобретения", ПартияПриобретения.ВидЦенПриобретения);
				СтруктураПартияПриобретения.Вставить("ВалютаВидЦенПриобретения", ПартияПриобретения.ВидЦенПриобретения.ВалютаЦены);	
			КонецЕсли;
			СтруктураПартияПриобретения.Вставить("Комментарий", ПартияПриобретения.Комментарий);
			СтруктураПартияПриобретения.Вставить("ДоляДопРасходов", ПартияПриобретения.СуммаДопРасходов / ПартияПриобретения.СтоимостьТовара);		
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					Если НЕ НеПерепроводитьРасходныеДокументыТовараЭтойПартииПриЗаписи
						И МассивТоваровДляПерепроведенияРеализации.Найти(Номенклатура) = Неопределено Тогда
						
						МассивТоваровДляПерепроведенияРеализации.Добавить(Номенклатура);
					КонецЕсли;
					
					Движение = Движения.Товары.Добавить();
					Если ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопленияРасход Тогда
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Иначе
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;				
					КонецЕсли;
					
					Движение.Период 		= ВыборкаДетальныеЗаписи.Период;
					Движение.Номенклатура 	= Номенклатура;
					Движение.Склад 			= ВыборкаДетальныеЗаписи.Склад;  				
					Движение.Количество 	= ВыборкаДетальныеЗаписи.Количество;
					Движение.Сумма 			= ВыборкаДетальныеЗаписи.Сумма;
					Движение.Комментарий	= ТекстСторно;
					Движение.СписаниеИлиОприходование 	= ВыборкаДетальныеЗаписи.СписаниеИлиОприходование;
					Движение.ВнутреннееПеремещение = ИСТИНА;
					
					Движение = Движения.Товары.Добавить();
					Движение.ВидДвижения 	= ВыборкаДетальныеЗаписи.ВидДвижения;
					
					ДатаПрихода = ?(ПартияПриобретенияПоступлениеПеренестиНаДатуПартии, ПартияПриобретенияДата, ВыборкаДетальныеЗаписи.Период);
					Если МладшаяДата > ДатаПрихода тогда
						МладшаяДата = ДатаПрихода;
					КонецЕсли;
					
					Движение.Период 		= ДатаПрихода;
					Движение.Номенклатура 	= Номенклатура;
					Движение.Склад 			= ВыборкаДетальныеЗаписи.Склад;  				
					Движение.Количество 	= ВыборкаДетальныеЗаписи.Количество;
					Движение.Сумма 			= ВыяснитьСумму(ВыборкаДетальныеЗаписи, СтруктураПартияПриобретения);
					Движение.Комментарий	= Комментарий;
					Движение.СписаниеИлиОприходование = ВыборкаДетальныеЗаписи.СписаниеИлиОприходование;
					Движение.ВнутреннееПеремещение = ИСТИНА;
					
				КонецЦикла;	
			КонецЕсли;
			
			Если ЗаменитьЗакупки Тогда
				Движения.Закупки.Записывать = ИСТИНА;
				
				// ЗапросЗакупок = Новый Запрос;
				// ЗапросЗакупок.Текст = 
				// "ВЫБРАТЬ
				// |	Закупки.Период,
				// |	Закупки.Регистратор,
				// |	Закупки.Поставщик,
				// |	Закупки.Номенклатура,
				// |	Закупки.Количество,
				// |	Закупки.Сумма,
				// |	Закупки.Договор
				// |ИЗ
				// |	РегистрНакопления.Закупки КАК Закупки
				// |ГДЕ
				// |	Закупки.Регистратор.ПартияПриобретения = &ПартияПриобретения
				// |	И Закупки.Регистратор <> &Регистратор";
				// 
				// ЗапросЗакупок.УстановитьПараметр("ПартияПриобретения", ПартияПриобретения);
				// ЗапросЗакупок.УстановитьПараметр("Регистратор", Ссылка);
				
				ЗапросЗакупок = Новый Запрос;
				ЗапросЗакупок.Текст = 
				"ВЫБРАТЬ
				|	Товары.Период,
				|	Товары.Регистратор,
				|	Товары.Номенклатура,
				|	Товары.Количество,
				|	Товары.Сумма,
				|	Товары.Регистратор.Договор КАК Договор,
				|	Товары.СерияНоменклатуры
				|ИЗ
				|	РегистрНакопления.Товары КАК Товары
				|ГДЕ
				|	Товары.Регистратор.ПартияПриобретения = &ПартияПриобретения
				|	И Товары.Регистратор <> &Регистратор";
				
				ЗапросЗакупок.УстановитьПараметр("ПартияПриобретения", ПартияПриобретения);
				ЗапросЗакупок.УстановитьПараметр("Регистратор", Ссылка);
				
				
				РезультатЗапросаЗакупок = ЗапросЗакупок.Выполнить();
				
				Если НЕ РезультатЗапросаЗакупок.Пустой() Тогда 				
					
					ВыборкаДетальныеЗаписи = РезультатЗапросаЗакупок.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						// Движение = Движения.Закупки.Добавить();
						// Если ВыборкаДетальныеЗаписи.Сумма < 0 Тогда
						// 	Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
						// 	Движение.Сумма 		= ВыборкаДетальныеЗаписи.Сумма;
						// Иначе
						// 	Движение.Количество = -ВыборкаДетальныеЗаписи.Количество;
						// 	Движение.Сумма 		= -ВыборкаДетальныеЗаписи.Сумма;
						// КонецЕсли;
						// 
						// Движение.Период 		= ВыборкаДетальныеЗаписи.Период;
						// Движение.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
						// Движение.Договор		= ВыборкаДетальныеЗаписи.Договор;
						// Движение.Поставщик		= ВыборкаДетальныеЗаписи.Поставщик;
						// 
						Движение = Движения.Закупки.Добавить();
						
						ДатаПрихода = ?(ПартияПриобретенияПоступлениеПеренестиНаДатуПартии, ПартияПриобретенияДата, ВыборкаДетальныеЗаписи.Период);
						Если МладшаяДата > ДатаПрихода тогда
							МладшаяДата = ДатаПрихода;
						КонецЕсли;
						
						Движение.Период 		= ДатаПрихода;
						Движение.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
						Движение.СерияНоменклатуры = ВыборкаДетальныеЗаписи.СерияНоменклатуры;
						Движение.Договор		= ВыборкаДетальныеЗаписи.Договор;
						Движение.Поставщик		= ПартияПриобретенияПоставщик;  				
						Если ВыборкаДетальныеЗаписи.Сумма < 0 Тогда
							Движение.Количество = -ВыборкаДетальныеЗаписи.Количество;
							Движение.Сумма 		= -ВыяснитьСумму(ВыборкаДетальныеЗаписи, СтруктураПартияПриобретения, ИСТИНА);
						Иначе
							Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
							Движение.Сумма 		= ВыяснитьСумму(ВыборкаДетальныеЗаписи, СтруктураПартияПриобретения, ИСТИНА);
						КонецЕсли;
						
					КонецЦикла;		
				КонецЕсли;
			КонецЕсли; 	    	
			
			Если НЕ НеПерепроводитьРасходныеДокументыТовараЭтойПартииПриЗаписи
				И МассивТоваровДляПерепроведенияРеализации.Количество() <> 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Товары.Регистратор
				|ИЗ
				|	РегистрНакопления.Товары КАК Товары
				|ГДЕ
				|	Товары.Номенклатура В(&Номенклатура)
				|	И Товары.Период >= &Период
				|	И Товары.Регистратор <> &Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	Товары.Период";
				
				Запрос.УстановитьПараметр("Номенклатура", МассивТоваровДляПерепроведенияРеализации);
				Запрос.УстановитьПараметр("Период", МладшаяДата);
				Запрос.УстановитьПараметр("Регистратор", Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					ДокументыДляПерепроведения = Новый Массив;
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
						Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
							ДокументыДляПерепроведения.Добавить(Регистратор);
						КонецЕсли;	
					КонецЦикла;	
					
					Для Каждого Регистратор Из ДокументыДляПерепроведения Цикл
						РегистраторОбъект = Регистратор.ссылка.ПолучитьОбъект();
						РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;		
			
			ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
			
			Попытка 
				// 			УстановитьМонопольныйРежим(ЛОЖЬ);
			Исключение 	
			КонецПопытки;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда
		ОтборПоДокументу = Новый Структура;
		ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
		
		Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;        	
	КонецЕсли;
	
КонецПроцедуры
