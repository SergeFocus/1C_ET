// sza150928-0135

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура ВводСКоличеством(Команда)

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("Склад", Объект.СкладДонор);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураДляВВода.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);

	Если НЕ СтруктураПараметров = Неопределено Тогда

		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура)
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда

			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);

			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				СтруктураПараметров.Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 	 = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;

		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)

	ШтрихКод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводШтрихКодаЗавершение", ЭтотОбъект, Новый Структура("ШтрихКод", ШтрихКод)), ШтрихКод, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод"));

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКодаЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ШтрихКод = ?(Значение = Неопределено, ДополнительныеПараметры.ШтрихКод, Значение);

	Если (Значение <> Неопределено) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			ОбработатьПолученныйШтрихкодНаКлиенте(ШтрихКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()

	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;

	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда

		Если НЕ Объект.Сторный Тогда
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;

			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);

			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
			КонецЕсли;
		КонецЕсли;

		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;

	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда

		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

	Если Объект.ДатаПоступления < Объект.Дата Тогда
		Объект.ДатаПоступления = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)

	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураСтруктура, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач множительКоличества = 1)

	Если ТипЗнч(НоменклатураСтруктура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = НоменклатураСтруктура;
		Количество 	 = МножительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура);
	Иначе
		Номенклатура = НоменклатураСтруктура.Номенклатура;
		Количество 	 = НоменклатураСтруктура.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура.Номенклатура);
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	  = Номенклатура;
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;

		СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;

		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		КонецЕсли;
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку

		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Количество = 1)

	Результат = Неопределено;

	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	сч = 0;

	Для Каждого СтрокаСостава Из Состав Цикл
		Если сч = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", СтрокаСостава.номенклатура);
			Результат.Вставить("Количество", СтрокаСостава.Количество * Количество);
		Иначе
			ДобавитьПозициюНоменклатуры(СтрокаСостава, ИСТИНА, Количество);
		КонецЕсли;

		сч = сч + 1;

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()

	ЭтотОбъектИзДанныхФормы = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.Комплектация"));
	ЭтотОбъектИзДанныхФормы.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъектИзДанныхФормы, Объект);

КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);

	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000320") Тогда
		Элементы.ТоварыДобавить.Видимость 			= ЛОЖЬ;
		Элементы.ТоварыУдалить.Видимость 			= ЛОЖЬ;
		Элементы.ТоварыВводШтрихКода.Видимость 		= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость = ЛОЖЬ;
	Иначе
		Элементы.ТоварыДобавить.Видимость 			= ИСТИНА;
		Элементы.ТоварыУдалить.Видимость 			= ИСТИНА;
		Элементы.ТоварыВводШтрихКода.Видимость 		= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Видимость 	= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)
	РезультатСтруктура = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Знач Количество = 1)

	РезультатСтруктура = Новый Структура("Результат", Неопределено);

	Если НЕ ДокументЗаблокирован Тогда
		РезультатОбработки = ОбщийМодульТоварСервер.НайтиНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
		Если ЗначениеЗаполнено(РезультатОбработки.Номенклатура) Тогда
			ДобавитьПозициюНоменклатуры(РезультатОбработки);
			РезультатСтруктура.Результат = 1;
		Иначе
			ОстановитьПоиск = ЛОЖЬ;

			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда

				РезультатОбработки = ОбщийМодульСервер.НайтиСотрудникаПоШтрихКоду(ТекКод);

				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 4;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден") + " (" + ТекКод + ").");
				РезультатСтруктура.Результат = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатСтруктура;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда

		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ДатаПоступления = '00010101' Тогда
		Объект.ДатаПоступления = Объект.Дата;
	КонецЕсли;

	глПроверятьСообщения = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)

	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000320", ЭтаФорма, Отказ, Объект);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ОбъектСсылка = Объект.Ссылка;
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВключитьМеханизмПодбораНоменклатуры 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость   = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;

		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Если ЗначениеЗаполнено(Параметры.Склад) Тогда
					Объект.Склад = Параметры.Склад;
				Иначе
					Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
				СтрокаТовары = Объект.Товары.Добавить();
				СтрокаТовары.Номенклатура = Параметры.Номенклатура;
				СтрокаТовары.Количество = 1;
			КонецЕсли;

			Если Объект.ДатаПоступления = '00010101' Тогда
				Объект.ДатаПоступления = Объект.Дата;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
		Иначе
			Попытка
				Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = ИСТИНА;
			Исключение // нет прав
			КонецПопытки;
		КонецЕсли;

		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТовараВКоличестве, , ИСТИНА);
		ВидимостьСторно();
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)

	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт

	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);

	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Объект.СкладДонор) Тогда
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.СкладДонор);
	КонецЕсли;

	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	СтрокаТовара = ТекСтр;

	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);
	КонецЕсли;

	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекСтр.Номенклатура = Номенклатура;
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			Строка = Объект.Товары.Добавить();
			Строка.Номенклатура      = Подбор.Номенклатура;
			Строка.Количество        = Подбор.Количество;
			Строка.ОСтроке 			 = Подбор.ОСтроке;

		КонецЦикла;

		Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтр = Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

ТекСтр = Неопределено;
