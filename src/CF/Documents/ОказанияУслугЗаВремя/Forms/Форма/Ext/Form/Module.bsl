// sza151011-0524
// sza140722-0111 склад
// sza140509-0114
// sza140216-2145

&НаКлиенте
Процедура ЗарегистрироватьНачалоОказанияУслуги(Команда)

	ПараметрыФормы = Новый Структура("Номенклатура", ОказываемаяУслуга);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидЦен", ВидЦен);
	ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("МинимальнаяСуммаОказанияУслуг", МинимальнаяСуммаОказанияУслуг);
	ПараметрыФормы.Вставить("МинимальныйОбъемОказанияУслуг", МинимальныйОбъемОказанияУслуг);
	ПараметрыФормы.Вставить("ОткрыватьНовыйДокументОказанияУслугПриЗавершении", ОткрыватьНовыйДокументОказанияУслугПриЗавершении);
	ПараметрыФормы.Вставить("ПоУмолчаниюУслугаОказана", ПоУмолчаниюУслугаОказана);
	ОткрытьФорму("Документ.ОказанияУслугЗаВремя.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиОказанияУслугЗаВремя(Команда)

	ПараметрыФормы = Новый Структура("ВидЦен", ВидЦен);
	ПараметрыФормы.Вставить("МинимальнаяСуммаОказанияУслуг", МинимальнаяСуммаОказанияУслуг);
	ПараметрыФормы.Вставить("МинимальныйОбъемОказанияУслуг", МинимальныйОбъемОказанияУслуг);
	ПараметрыФормы.Вставить("ОказываемаяУслуга", ОказываемаяУслуга);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("ОткрыватьНовыйДокументОказанияУслугПриЗавершении", ОткрыватьНовыйДокументОказанияУслугПриЗавершении);
	ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
	ФормаНастроек = ПолучитьФорму("Документ.ОказанияУслугЗаВремя.Форма.ФормаНастроек", ПараметрыФормы);
	ПараметрыФормы = ФормаНастроек.ОткрытьМодально();

	Если НЕ ПараметрыФормы = Неопределено Тогда
		ВидЦен = ПараметрыФормы.ВидЦен;
		МинимальнаяСуммаОказанияУслуг = ПараметрыФормы.МинимальнаяСуммаОказанияУслуг;
		МинимальныйОбъемОказанияУслуг = ПараметрыФормы.МинимальныйОбъемОказанияУслуг;
		ОказываемаяУслуга = ПараметрыФормы.ОказываемаяУслуга;
		Организация 	  = ПараметрыФормы.Организация;
		ОткрыватьНовыйДокументОказанияУслугПриЗавершении = ПараметрыФормы.ОткрыватьНовыйДокументОказанияУслугПриЗавершении;
		Сотрудник = ПараметрыФормы.Сотрудник;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	Если НЕ ТекущаяСтраница = Неопределено Тогда
		СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
		СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю

	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

	Если НЕ глЕдинственнаяФормаЗакрыта Тогда
		глЕдинственнаяФормаЗакрыта = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если ЗначениеЗаполнено(СтраницаПанели)Тогда
		СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
		ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
		Если НЕ ТекущаяСтраница = Неопределено Тогда
			Элементы.ГруппаСтраницСправа.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;
	КонецЕсли;

	ПроверитьЗаполнениеПараметров() 	;
	ПриСменеВидаОкна();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура ПриСменеВидаОкна()

	Элементы.ГруппаСтраниц.Видимость 	= НЕ ПредставитьДвумяКолонками;
	Элементы.ГруппаОбщегоВида.Видимость = ПредставитьДвумяКолонками;
	ЭтаФорма.ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001290", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НачалоОказанияУслуг1ТовараВКоличестве, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОкончаниеОказанияУслуг1ТовараВКоличестве, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТовараВКоличестве, , ИСТИНА);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ОкончаниеОказанияУслуг);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(НачалоОказанияУслуг);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПараметров()

	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОказываемаяУслуга) Тогда
		ОказываемаяУслуга = ПредопределенноеЗначение("Справочник.Номенклатура.УслугиНаСумму");
		Если НЕ ЗначениеЗаполнено(ОказываемаяУслуга.ПериодОказанияУслугиЗаВремя) Тогда
			ОказываемаяУслуга = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;

	Если МинимальнаяСуммаОказанияУслуг = 0 Тогда
		МинимальнаяСуммаОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальнаяСуммаОказанияУслуг");
	КонецЕсли;

	Если МинимальныйОбъемОказанияУслуг = 0 Тогда
		МинимальныйОбъемОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальныйОбъемОказанияУслуг");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
		И НЕ ЗначениеЗаполнено(Сотрудник) Тогда

		Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)

	ПредставитьДвумяКолонками = не ПредставитьДвумяКолонками;
	ПриСменеВидаОкна();

КонецПроцедуры
