//sza150109-2101 НЧ
//sza140722-0115 склад
//sza140710-0001  
//sza140605-0107  
//sza140216-2249  
&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
		ХранилищеДенегПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, ?(ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг), Объект.ДатаОкончанияОказанияУслуг, Объект.ДатаНачалаОказанияУслуг));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ПересчетКоличестваУслуги();
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
	Иначе
		ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Вчера(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(НачалоДня(Дата) - 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОказанияУслугПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = Объект.ДатаНачалаОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОказанияУслугПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
		Объект.УслугаОказана = ИСТИНА;
		ОбновитьВидДокумента();
		
		Если Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда 		
			Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
		КонецЕсли;
		
		ПересчетКоличестваУслуги();
	Иначе
		Объект.УслугаОказана = ЛОЖЬ;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ОбновитьДатуОтсрочки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура Завтра(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(КонецДня(Дата) + 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	ПриСменеКонтрагента();
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		Если ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Клиент.ВидЦен;
			ВалютаЦены 	  = Объект.ВидЦен.ВалютаЦены;			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецНаСейчас(Команда)
	
	Объект.УслугаОказана = ИСТИНА;
	Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОкруглитьДаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНаСейчас(Команда)
	
	Объект.ДатаНачалаОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОкруглитьДаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = Объект.ДатаНачалаОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПериодОказанияУслугиЗаВремя = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.Номенклатура, "ПериодОказанияУслугиЗаВремя");
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда  		
		
		Если Объект.ТовараВКоличестве = 0 тогда
			Объект.ТовараВКоличестве = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Объект.Номенклатура);
		КонецЕсли;
		
		Объект.Цена = ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве);
		
		Если ИспользоватьСкидки тогда
			Объект.СуммаБезСкидки = Объект.Цена * Объект.ТовараВКоличестве;
			Объект.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве);
		Иначе
			Объект.ТовараНаСумму = Объект.Цена * Объект.ТовараВКоличестве;
		КонецЕсли;    
		
	КонецЕсли;
	
	ОбновитьКнопкиВыбораПериодаУслуги();
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидДокумента() 
	
	Если Объект.УслугаОказана Тогда
		Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести и закрыть");
	Иначе
		Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить данные и закрыть");			
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.Клиент)
			И НЕ Объект.Клиент.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + Объект.Клиент.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиВыбораПериодаУслуги()
	
	Элементы.ГруппаСутки.Видимость  = ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаСутки");
	Элементы.ГруппаМесяца.Видимость = ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаМесяц");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001292", Объект.УслугаОказана) Тогда		
		Элементы.ПоДокументу.Видимость 		= ЛОЖЬ;
		Элементы.НачалоНаСейчас.Видимость 	= ЛОЖЬ;
		Элементы.КонецНаСейчас.Видимость 	= ЛОЖЬ;
		Элементы.ПериодУслуги.Видимость 	= ЛОЖЬ;
		Элементы.ГруппаПредПериода.Видимость = ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость = ЛОЖЬ;
		Элементы.УслугаКлиентуОказана.Видимость = Объект.УслугаОказана;
		Элементы.УслугаОказана.Видимость	= ЛОЖЬ;
		
	Иначе          	
		Элементы.ПоДокументу.Видимость 		= ИСТИНА;
		Элементы.НачалоНаСейчас.Видимость 	= ИСТИНА;
		Элементы.КонецНаСейчас.Видимость 	= ИСТИНА;
		Элементы.ПериодУслуги.Видимость 	= ИСТИНА;
		Элементы.ГруппаПредПериода.Видимость = ИСТИНА;
		Элементы.ЧастныйПокупатель.Видимость = ИСТИНА;
		Элементы.УслугаКлиентуОказана.Видимость = ЛОЖЬ;
		Элементы.УслугаОказана.Видимость	= ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = ИСТИНА;
	
	Если НЕ ДокументЗаблокирован тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда
				Объект.Номенклатура = РезультатОбработки;
			Иначе
				Объект.Номенклатура = РезультатОбработки.Номенклатура;
			КонецЕсли;
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , , ИСТИНА);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.ПозицияНомер = РезультатОбработки;
					ПозицияНомерПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Клиент = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден (") + ТекКод + ").");
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДаты()
	
	Если ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаГод")
		ИЛИ ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаМесяц") Тогда
		
		Объект.ДатаНачалаОказанияУслуг = НачалоДня(Объект.ДатаНачалаОказанияУслуг);
		Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаОкончанияОказанияУслуг);
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "ДФ=dd.MMM.yyyy";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "ДФ=dd.MMM.yyyy";
		
	ИначеЕсли ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаЧас")
		ИЛИ ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаСутки") Тогда
		
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "ДФ='dd.MM.yy ЧЧ:мм'";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "ДФ='dd.MM.yy ЧЧ:мм'";
	Иначе
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор)
				И ЗначениеЗаполнено(Объект.Клиент) Тогда
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ отказ
		И ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПозицияНомер)Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Позицию (номер)!");
			Сообщение.Поле  = "ПозицияНомер";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Отказ = ИСТИНА;
			
		Иначе
			Отказ = ПроверитьЧтоПозицияСвободна();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.УслугаОказана 
		И (НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		ИЛИ не ЗначениеЗаполнено(Объект.ДатаНачалаОказанияУслуг)) Тогда
		
		Объект.УслугаОказана = ЛОЖЬ;
	КонецЕсли;	
	
	Если Объект.УслугаОказана 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		МинимальныйОбъемОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальныйОбъемОказанияУслуг");
		Если Объект.ТовараВКоличестве < МинимальныйОбъемОказанияУслуг Тогда
			
			сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем услуг ниже минимального") + " - " + СокрЛП(МинимальныйОбъемОказанияУслуг));
			Отказ = ИСТИНА;
		КонецЕсли;
		
		Сумма = ОбщийМодульСервер.ПоКурсу(Объект.ТовараНаСумму, , ВалютаЦены, Объект.Дата);
		МинимальнаяСуммаОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальнаяСуммаОказанияУслуг");
		Если Сумма < МинимальнаяСуммаОказанияУслуг Тогда
			
			сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма услуг ниже минимальной") + " - " + СокрЛП(МинимальнаяСуммаОказанияУслуг));
			Отказ = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда		
			Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетКоличестваУслуги(Знач ИзСуммы = ЛОЖЬ)
	
	ПериодУслуги.ДатаНачала 	= Объект.ДатаНачалаОказанияУслуг;
	ПериодУслуги.ДатаОкончания 	= Объект.ДатаОкончанияОказанияУслуг;
	
	Если НЕ ИзСуммы ТОгда
		Объект.ТовараВКоличестве = ОбщийМодульСервер.ВычислитьКоличествоУслугВПериоде(Объект.Номенклатура, Объект.ДатаНачалаОказанияУслуг, Объект.ДатаОкончанияОказанияУслуг);
		Объект.Цена 			 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
		Объект.ПроцентСкидки  	 = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве, Объект.ВидЦен, Объект.Клиент);
		
		КоличествоНоменклатурыМожетБытьДробным = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
		Если КоличествоНоменклатурыМожетБытьДробным Тогда
			ЧислоЗнаковПослеЗапятойДляКоличества = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества");
			
			Если ЧислоЗнаковПослеЗапятойДляКоличества < 1 Тогда
				Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве);	
			Иначе
				Коэффициент = pow(10, ЧислоЗнаковПослеЗапятойДляКоличества);
				Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве * Коэффициент) / Коэффициент;
			КонецЕсли;
			
		Иначе
			Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве);
		КонецЕсли;		
		
		Объект.СуммаБезСкидки = Объект.ТовараВКоличестве * Объект.Цена;
		Объект.ТовараНаСумму  = Объект.СуммаБезСкидки - ((Объект.СуммаБезСкидки / 100) * Объект.ПроцентСкидки);
		
	Иначе
		Если Объект.ТовараВКоличестве = 0 Тогда
			Объект.ТовараВКоличестве = 1;
		КонецЕсли;
		Объект.СуммаБезСкидки = 0;
		Объект.ПроцентСкидки  = 0;
		Объект.Цена = Объект.ТовараНаСумму / Объект.ТовараВКоличестве;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУслугиПриИзменении(Элемент)
	
	Объект.ДатаНачалаОказанияУслуг = ПериодУслуги.ДатаНачала;
	Объект.ДатаОкончанияОказанияУслуг = ПериодУслуги.ДатаОкончания;	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ОказанияУслугЗаВремя"));
	ЭтотОбъект.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект,Объект); 
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ЛОЖЬ, Объект.Клиент, "", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, Объект.ФормаОплаты), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументу(Команда)
	
	Объект.ПоступилоДенег = Объект.ТовараНаСумму;
	Объект.Валюта = ВалютаЦены;
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
		ХранилищеДенегПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияНомерПриИзменении(Элемент)
	ПозицияНомерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПозицияНомерПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПозицияНомер)
		И ЗначениеЗаполнено(Объект.ПозицияНомер.ВидЦен) Тогда
		
		Объект.ВидЦен = Объект.ПозицияНомер.ВидЦен;
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
		Иначе
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
			
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач НоменклатураИлиКлиентПоставщик, Знач Количество = 0)
	
	Если ИспользоватьСкидки тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, Объект.ВидЦен, Объект.Клиент);
		
	Иначе
		возврат 0;
	КонецЕсли;
	
КонецФункции //ПолучитьПроцентСкидкиНаСервере

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0)	
	Возврат ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Количество, Объект.Договор, , , Объект.Ссылка);	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКнопкиВыбораПериодаУслуги();
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()
	
	КлиентПриИзмененииНаСервере();
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001290", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьСкидки 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		Элементы.Оплата.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
		
		ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		ВестиУчетДенегВНесколькихХранилищах = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		Элементы.ФормаОплаты.Видимость 		= ВестиУчетДвиженияДенег И НЕ ВестиУчетДенегВНесколькихХранилищах;
		Элементы.ПечатьЧека.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляОказанияУслугЗаВремя");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаДополнительно, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
				Объект.Сторный = ЛОЖЬ; //При копировании
				Объект.ДокументСторно = Неопределено;				
				
			Если Параметры.ПоУмолчаниюУслугаОказана Тогда
				Объект.УслугаОказана = ИСТИНА;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.Склад) Тогда
				Объект.Склад = Параметры.Склад;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда					
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				ХранилищеДенегПриИзмененииНаСервере();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
				Объект.ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
			КонецЕсли;
			
			Если Параметры.ОткрыватьНовыйДокументОказанияУслугПриЗавершении Тогда
				Объект.ОткрыватьНовыйДокументОказанияУслугПриЗавершении = ИСТИНА;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Если ЗначениеЗаполнено(Параметры.Организация) Тогда
					Объект.Организация = Параметры.Организация;
				Иначе
					Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = Параметры.Сотрудник;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
				Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
					Объект.Клиент = Параметры.Клиент;
				Иначе
					Объект.Клиент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
					Объект.ВидЦен = Параметры.ВидЦен;
					
				Иначе			
					Если ЗначениеЗаполнено(Объект.Клиент)
						И ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
						
						Объект.ВидЦен = Объект.Клиент.ВидЦен;
					Иначе
						Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
						Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) 
				И ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
				
				Объект.Номенклатура = Параметры.Номенклатура;
				Объект.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
				Иначе
					Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;
			
			Если НЕ Объект.УслугаОказана Тогда
				Если параметры.услугаоказана Тогда
					Объект.УслугаОказана = ИСТИНА;
					Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
					
					Если параметры.МинимальныйОбъемОказанияУслуг > Объект.ТовараВКоличестве Тогда
						Объект.ТовараВКоличестве = параметры.МинимальныйОбъемОказанияУслуг;
						Объект.ТовараНаСумму  	 = Объект.ТовараВКоличестве * Объект.Цена;
						Объект.СуммаБезСкидки 	 = Объект.ТовараНаСумму;
						Объект.ПроцентСкидки  	 = 0;
					КонецЕсли;
					
					Если параметры.МинимальнаяСуммаОказанияУслуг > Объект.ТовараНаСумму тогда
						Объект.ТовараНаСумму = параметры.МинимальнаяСуммаОказанияУслуг;
						Если Объект.ТовараВКоличестве = 0 Тогда
							Объект.ТовараВКоличестве = 1;
						КонецЕсли;
						
						Объект.СуммаБезСкидки = Объект.ТовараНаСумму;
						Объект.ПроцентСкидки  = 0;
						Объект.Цена = Объект.ТовараНаСумму / Объект.ТовараВКоличестве;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки)
				И ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
				
				Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.Цена.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		ПериодОказанияУслугиЗаВремя = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.Номенклатура, "ПериодОказанияУслугиЗаВремя");
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТовараВКоличестве, ИСТИНА);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000892", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ПоДокументу.Видимость = ЛОЖЬ;
				Элементы.Оплата.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.Оплата.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
	ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И Объект.УслугаОказана
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
		
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
			
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ИСТИНА;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьЧтоПозицияСвободна()
	
	Отказ = ЛОЖЬ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Регистратор,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.НомерСтроки,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Активность,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.ПозицияНомер,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Клиент,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Комментарий
	|ИЗ РегистрСведений.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя КАК ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя
	|ГДЕ ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.ПозицияНомер = &ПозицияНомер
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Регистратор.Ссылка <> &Ссылка
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период > &ДатаНачала
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период < &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачалаОказанияУслуг);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончанияОказанияУслуг);
	Запрос.УстановитьПараметр("ПозицияНомер", Объект.ПозицияНомер);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Отказ = ИСТИНА;
		
		ВыборкаДетальныеЗаписи.Следующий();	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данная позиция занята") + ": " + ВыборкаДетальныеЗаписи.Клиент;
		Сообщение.Поле  = "ПозицияНомер";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроцентСкидкиПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыйМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(НачалоМесяца(Дата) - 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(Дата);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(КонецМесяца(Дата) + 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаБезСкидкиПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ТовараВКоличествеПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ТовараНаСуммуПриИзменении(Элемент)
	ПересчетКоличестваУслуги(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура УслугаОказанаПриИзменении(Элемент)
	
	Если Объект.УслугаОказана 
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();		
		ОкруглитьДаты();
	
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
			И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
			Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
		КонецЕсли;
	
		ПересчетКоличестваУслуги();
	КонецЕсли;
	
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда		
		Объект.Валюта = Объект.ХранилищеДенег.Валюта;
		Объект.курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, ?(ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг), Объект.ДатаОкончанияОказанияУслуг, Объект.ДатаНачалаОказанияУслуг));
		Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(Дата);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	ПересчетКоличестваУслуги();
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
	Иначе
		ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.Склад)
		И ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
		
		Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ВвестиЗначение(Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
		Если ЗначениеЗаполнено(Причина) Тогда
			ОткрытьЗначение( ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
			Закрыть();	
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
