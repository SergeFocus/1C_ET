// sza151022-2156
// sza150605-2226 
// sza150219-1732 ВалютаЦены
// sza150109-2101 НЧ
// sza140722-0115 склад
// sza140710-0001  
// sza140605-0107  
// sza140216-2249  

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
		ХранилищеДенегПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, ?(ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг), Объект.ДатаОкончанияОказанияУслуг, Объект.ДатаНачалаОказанияУслуг));
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыВаучерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ваучеры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РезультатНакопление = ДобавитьПрименитьВаучер(ТекущиеДанные.Ваучер, ИСТИНА);
		Если НЕ РезультатНакопление = Неопределено Тогда
			ВыяснитьОПогашенииНакопления(РезультатНакопление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыПослеУдаления(Элемент)
	
	ВаучерыПослеУдаленияНаСервере();
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ВаучерыПослеУдаленияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВаучерНакопления) Тогда
	
		МассивВаучеров = Новый Массив;
		
		Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
			Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
				МассивВаучеров.Добавить(СтрокаВаучер.Ваучер);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВаучеров.Количество() = 0
			И МассивВаучеров.Найти(Объект.ВаучерНакопления) = Неопределено Тогда
			
			Объект.ВаучерНакопления = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВаучерСкидки) Тогда
	
		МассивВаучеров = Новый Массив;
		
		Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
			Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
				МассивВаучеров.Добавить(СтрокаВаучер.Ваучер);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВаучеров.Количество() = 0
			И МассивВаучеров.Найти(Объект.ВаучерСкидки) = Неопределено Тогда
			
			Объект.ВаучерСкидки  = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И Объект.УслугаОказана
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ПересчетКоличестваУслуги();
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Вчера(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(НачалоДня(Дата) - 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыяснитьОПогашенииНакопления(Знач РезультатНакопление)
	
	Если НЕ РезультатНакопление.ОстатокНакопленияЧислом = 0 Тогда
		
		ОплатитьНакопительнымВаучером = ЛОЖЬ;
		
		КомандыВопроса = Новый Массив(3, 3);
		КомандыВопроса[0][0] = "OK";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, оплатить накопленными средствами");
		КомандыВопроса[0][2] = "Результат = 1;";
		КомандыВопроса[1][0] = "НЕТ";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет, продолжить накопление");
		КомандыВопроса[1][2] = "Результат = 2;";
		КомандыВопроса[2][0] = "ОТМЕНА";
		КомандыВопроса[2][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена ваучера");
		КомандыВопроса[2][2] = "Результат = 3;";
		
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"));
		ПараметрыФормы.Вставить("ЭтоВыборПериода", ЛОЖЬ);
		
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер") + ": " +
		РезультатНакопление.Ваучер + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Использовать накопительный ваучер для оплаты?") +
		Символы.ПС + РезультатНакопление.ОстатокНакопления);
		ПараметрыФормы.Вставить("ЭтоВопрос", ИСТИНА);
		ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
		ОтветПользователя = ФормаВопроса.ОткрытьМодально();
		
		Если НЕ ОтветПользователя = Неопределено
			И НЕ ОтветПользователя = 3 Тогда
			
			ОплатитьНакопительнымВаучером = ?(ОтветПользователя = 1, ИСТИНА, ЛОЖЬ);
			
			Если ОплатитьНакопительнымВаучером Тогда
				ДобавитьКОплатеВаучером(РезультатНакопление.Ваучер, ЛОЖЬ, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено Из накоплений"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"), РезультатНакопление.ОстатокНакопленияЧислом);
			Иначе
				Объект.ВаучерНакопления = РезультатНакопление.Ваучер;
			КонецЕсли;
			
			СтруктураДляСтроки = Новый Структура("Ваучер", РезультатНакопление.Ваучер);
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(СтруктураДляСтроки);
			Если НЕ СтрокаВаучера.Количество() = 0 Тогда
				СтрокаВаучера = СтрокаВаучера[0];
				СтрокаВаучера.ОСтроке = ?(ОплатитьНакопительнымВаучером, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принят к оплате"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для накопления.."));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ВаучерНакопления = РезультатНакопление.Ваучер;		
	КонецЕсли;
	
КонецПроцедуры // ВыяснитьОПогашенииНакопления

&НаКлиенте
Процедура ДатаНачалаОказанияУслугПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = Объект.ДатаНачалаОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОказанияУслугПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
		Объект.УслугаОказана = ИСТИНА;
		ОбновитьВидДокумента();
		
		Если Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда 		
			Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
		КонецЕсли;
		
		ПересчетКоличестваУслуги();
	Иначе
		Объект.УслугаОказана = ЛОЖЬ;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьКОплатеВаучером(Знач Ваучер, Знач ВаучерИзъят = ЛОЖЬ, Знач ТекстПогашения = "", Знач ТекстДляНеподходящего = "", Знач СуммаПогашения = 0, Знач СтрокаВаучера = Неопределено)
	
	ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, , ЛОЖЬ);
	
	Если ОтветПоВаучеру.ВаучерПодходит Тогда
		
		Объект.ТовараНаСумму = СуммаПогашения;
		Объект.Валюта		 = Ваучер.Валюта;
		Если ПустаяСтрока(Объект.Комментарий) Тогда
			Объект.Комментарий = ТекстПогашения + ": " + Ваучер.Наименование;
		КонецЕсли;
		Объект.ФормаОплаты 	 = Перечисления.ФормыОплаты.Сертификат;
		
		Если Не СтрокаВаучера = Неопределено Тогда
			СтрокаВаучера.ВаучерИзъят = ВаучерИзъят;
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаФормыОплаты;
		КонецЕсли;
		Результат = ИСТИНА;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстДляНеподходящего + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
		Результат = ЛОЖЬ;
	КонецЕсли;						
	
	Возврат Результат;
	
КонецФункции
	&НаКлиенте
Процедура ДобавитьПериодУслуги(Знач ДатаНачала, Знач ДобавитьПериод)
	
	Объект.ДатаНачалаОказанияУслуг = ДатаНачала;
	Если Объект.ДатаОкончанияОказанияУслуг < (ДатаНачала + ДобавитьПериод) Тогда
		Объект.ДатаОкончанияОказанияУслуг = (ДатаНачала + ДобавитьПериод);
	Иначе
		Объект.ДатаОкончанияОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг + ДобавитьПериод;
	КонецЕсли;
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьПрименитьВаучер(Знач Ваучер, Знач НеДобавлятьРучнойВыбор = ЛОЖЬ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если НЕ Объект.Ваучеры.Количество() = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ваучер", Ваучер);
			
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
			Если НЕ ДокументЗаблокирован Тогда
				
				Если НеДобавлятьРучнойВыбор
					ИЛИ СтрокаВаучера.Количество() = 0 Тогда
					
					Если НЕ НеДобавлятьРучнойВыбор Тогда
						СтрокаВаучера = Объект.Ваучеры.Добавить();
						СтрокаВаучера.Ваучер = Ваучер;
					Иначе
						СтрокаВаучера = СтрокаВаучера[0];
					КонецЕсли;
					
					Если Ваучер.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
						КонтрагентВаучера = Ваучер.Контрагент;
						
						Если ЗначениеЗаполнено(КонтрагентВаучера)
							И ТипЗнч(КонтрагентВаучера) = Тип("СправочникСсылка.Клиенты")
							И НЕ Объект.Клиент = КонтрагентВаучера Тогда
							
							Объект.Клиент = КонтрагентВаучера;
							КлиентПриИзмененииНаСервере();
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
						// ОтветПоВаучеру для накопительной карты не нужен - по ней не будет накоплений, если товар неподходящий
						ОстатокНакопленияЧислом = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Ваучер, Объект.Дата);
						ОстатокНакопления = "" + СокрЛП(ОстатокНакопленияЧислом);
						ОстатокНакопления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток накопления") + ": " + ОстатокНакопления;
						СтрокаВаучера.ОСтроке = ОстатокНакопления;
						
						Результат = Новый Структура("Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом", Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом);
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено ваучером"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочная карта"), Ваучер.НоминалПроцент);
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент
						И ИспользоватьСкидки Тогда
						
						ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, Объект.Склад, ЛОЖЬ);
						
						Если ОтветПоВаучеру.ВаучерПодходит Тогда
							Объект.ВаучерСкидки = Ваучер; // приоритет свежего ваучера. раз пробили, значит надо
							// процент скидки будет рассчитан позже
							
						Иначе
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма
						И ИспользоватьСкидки Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено скидкой"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта на сумму"), Ваучер.НоминалПроцент);
					КонецЕсли;
					
				Иначе
					СтрокаВаучера = СтрокаВаучера[0];
					Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаВаучера.Количество() = 0 Тогда // Встать на строку
				
				СтрокаВаучера = СтрокаВаучера[0];
				Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ОбновитьДатуОтсрочки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура Завтра(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(КонецДня(Дата) + 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ОказанияУслугЗаВремя"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	ПриСменеКонтрагента();
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		Если ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Клиент.ВидЦен;
			ВалютаЦены 	  = Объект.ВидЦен.ВалютаЦены;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецНаСейчас(Команда)
	
	Объект.УслугаОказана = ИСТИНА;
	Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОкруглитьДаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНаСейчас(Команда)
	
	Объект.ДатаНачалаОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОкруглитьДаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = Объект.ДатаНачалаОказанияУслуг;
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		
		ПроверитьВыбраннуюНоменклатуру();
		ПериодОказанияУслугиЗаВремя = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.Номенклатура, "ПериодОказанияУслугиЗаВремя");
	
		Если Объект.ТовараВКоличестве = 0 Тогда
			Объект.ТовараВКоличестве = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Объект.Номенклатура);
		КонецЕсли;
		
		Объект.Цена = ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве);
		
		Если ИспользоватьСкидки Тогда
			Объект.СуммаБезСкидки = Объект.Цена * Объект.ТовараВКоличестве;
			Объект.ПроцентСкидки  = ПолучитьПроцентСкидкиНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве);
		Иначе
			Объект.ТовараНаСумму  = Объект.Цена * Объект.ТовараВКоличестве;
		КонецЕсли;    
		
	КонецЕсли;
	
	ОбновитьКнопкиВыбораПериодаУслуги();
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидДокумента() 
	
	Попытка
		Если Объект.УслугаОказана Тогда
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести и закрыть");
		Иначе
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить данные и закрыть");			
		КонецЕсли;
	Исключение // нет прав
	КонецПопытки;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.Клиент)
			И НЕ Объект.Клиент.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + Объект.Клиент.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.Клиент, Объект.Договор, Объект.Организация,Объект.Номенклатура, Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиВыбораПериодаУслуги()
	
	Элементы.ГруппаЧас.Видимость  = ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаЧас");
	Элементы.ГруппаСутки.Видимость  = ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаСутки");
	Элементы.ГруппаМесяца.Видимость = ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаМесяц");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001292", Объект.УслугаОказана) Тогда		
		Элементы.ПоДокументу.Видимость 		= ЛОЖЬ;
		Элементы.НачалоНаСейчас.Видимость 	= ЛОЖЬ;
		Элементы.КонецНаСейчас.Видимость 	= ЛОЖЬ;
		Элементы.ПериодУслуги.Видимость 	= ЛОЖЬ;
		Элементы.ГруппаПредПериода.Видимость= ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость= ЛОЖЬ;
		Элементы.УслугаКлиентуОказана.Видимость = Объект.УслугаОказана;
		Элементы.УслугаОказана.Видимость	= ЛОЖЬ;
		Элементы.ПогаситьВаучер.Видимость	= ЛОЖЬ;
		Элементы.СформироватьТекстПредметаСделки.Видимость = ЛОЖЬ;
		
	Иначе          	
		Элементы.ПоДокументу.Видимость 		= ИСТИНА;
		Элементы.НачалоНаСейчас.Видимость 	= ИСТИНА;
		Элементы.КонецНаСейчас.Видимость 	= ИСТИНА;
		Элементы.ПериодУслуги.Видимость 	= ИСТИНА;
		Элементы.ГруппаПредПериода.Видимость= ИСТИНА;
		Элементы.ЧастныйПокупатель.Видимость= ИСТИНА;
		Элементы.УслугаКлиентуОказана.Видимость = ЛОЖЬ;
		Элементы.УслугаОказана.Видимость	= ИСТИНА;
		Элементы.ПогаситьВаучер.Видимость	= ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
		Элементы.СформироватьТекстПредметаСделки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод)
	
	Если НЕ ОбработатьПолученныйШтрихкодНаСервере(ТекКод) Тогда
		ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
	КонецЕсли;
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = ИСТИНА;
	
	Если НЕ ДокументЗаблокирован Тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда
				Объект.Номенклатура = РезультатОбработки;
			Иначе
				Объект.Номенклатура = РезультатОбработки.Номенклатура;
			КонецЕсли;
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , , ИСТИНА);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.ПозицияНомер = РезультатОбработки;
					ПозицияНомерПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Клиент = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
		Если НЕ ОстановитьПоиск
			И ИспользоватьВаучеры Тогда
			
			РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Результат = ДобавитьПрименитьВаучер(РезультатОбработки);
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден (") + ТекКод + ").");
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			
			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДаты()
	
	Если ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаГод")
		ИЛИ ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаМесяц") Тогда
		
		Объект.ДатаНачалаОказанияУслуг = НачалоДня(Объект.ДатаНачалаОказанияУслуг);
		Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаОкончанияОказанияУслуг);
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "ДФ=dd.MMM.yyyy";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "ДФ=dd.MMM.yyyy";
		
	ИначеЕсли ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаЧас")
		ИЛИ ПериодОказанияУслугиЗаВремя = ПредопределенноеЗначение("Перечисление.ПериодыОказанияУслугиЗаВремя.ЗаСутки") Тогда
		
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "ДФ='dd.MM.yy ЧЧ:мм'";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "ДФ='dd.MM.yy ЧЧ:мм'";
	Иначе
		Элементы.ДатаНачалаОказанияУслуг.ФорматРедактирования = "";
		Элементы.ДатаОкончанияОказанияУслуг.ФорматРедактирования = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор)
				И ЗначениеЗаполнено(Объект.Клиент) Тогда
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ отказ
		И ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПозицияНомер)Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Позицию (номер)!"), Объект, "ПозицияНомер");
			Отказ = ИСТИНА;
			
		Иначе
			Отказ = ПроверитьЧтоПозицияСвободна();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.УслугаОказана 
		И (НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
		ИЛИ не ЗначениеЗаполнено(Объект.ДатаНачалаОказанияУслуг)) Тогда
		
		Объект.УслугаОказана = ЛОЖЬ;
	КонецЕсли;	
	
	Если Объект.УслугаОказана 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МинимальныйОбъемОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальныйОбъемОказанияУслуг");
		Если Объект.ТовараВКоличестве < МинимальныйОбъемОказанияУслуг Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем услуг ниже минимального") + " - " + СокрЛП(МинимальныйОбъемОказанияУслуг));
			Отказ = ИСТИНА;
		КонецЕсли;
		
		Сумма = ОбщийМодульСервер.ПоКурсу(Объект.ТовараНаСумму, , ВалютаЦены, Объект.Дата);
		МинимальнаяСуммаОказанияУслуг = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МинимальнаяСуммаОказанияУслуг");
		Если Сумма < МинимальнаяСуммаОказанияУслуг Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма услуг ниже минимальной") + " - " + СокрЛП(МинимальнаяСуммаОказанияУслуг));
			Отказ = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ
		И ИспользоватьВаучеры Тогда
		
		Ваучеров = 0;
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			Если СтрокаВаучера.ВаучерИзъят Тогда
				Ваучеров = Ваучеров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ваучеров = 0
			И Вопрос(?(Ваучеров = 1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучер?"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучеры") + " (" + СокрЛП(Ваучеров) + ")?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Отказ = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда		
			ТекущийОбъект.ФормаОплаты = ТекущийОбъект.ХранилищеДенег.ФормаОплаты;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетКоличестваУслуги(Знач ИзСуммы = ЛОЖЬ)
	
	ПериодУслуги.ДатаНачала 	 = Объект.ДатаНачалаОказанияУслуг;
	ПериодУслуги.ДатаОкончания 	 = Объект.ДатаОкончанияОказанияУслуг;
	
	Если НЕ ИзСуммы ТОгда
		Объект.ТовараВКоличестве = ОбщийМодульСервер.ВычислитьКоличествоУслугВПериоде(Объект.Номенклатура, Объект.ДатаНачалаОказанияУслуг, Объект.ДатаОкончанияОказанияУслуг);
		Объект.Цена 			 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
		Объект.ПроцентСкидки  	 = ПолучитьПроцентСкидкиНаСервере(Объект.Номенклатура, Объект.ТовараВКоличестве);
		
		КоличествоНоменклатурыМожетБытьДробным = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
		Если КоличествоНоменклатурыМожетБытьДробным Тогда
			ЧислоЗнаковПослеЗапятойДляКоличества = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества");
			
			Если ЧислоЗнаковПослеЗапятойДляКоличества < 1 Тогда
				Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве);	
			Иначе
				Коэффициент = pow(10, ЧислоЗнаковПослеЗапятойДляКоличества);
				Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве * Коэффициент) / Коэффициент;
			КонецЕсли;
			
		Иначе
			Объект.ТовараВКоличестве = Окр(Объект.ТовараВКоличестве);
		КонецЕсли;		
		
		Объект.СуммаБезСкидки = Объект.ТовараВКоличестве * Объект.Цена;
		Объект.ТовараНаСумму  = Объект.СуммаБезСкидки - ((Объект.СуммаБезСкидки / 100) * Объект.ПроцентСкидки);
		
	Иначе
		Если Объект.ТовараВКоличестве = 0 Тогда
			Объект.ТовараВКоличестве = 1;
		КонецЕсли;
		Объект.СуммаБезСкидки = 0;
		Объект.ПроцентСкидки  = 0;
		Объект.Цена = Объект.ТовараНаСумму / Объект.ТовараВКоличестве;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодУслугиПриИзменении(Элемент)
	
	Объект.ДатаНачалаОказанияУслуг = ПериодУслуги.ДатаНачала;
	Объект.ДатаОкончанияОказанияУслуг = ПериодУслуги.ДатаОкончания;	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ЛОЖЬ, Объект.Клиент, "", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, Объект.ФормаОплаты), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		Объект.ПКОНапечатан = ИСТИНА;
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(Текст) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(Текст);
		ТекстовыйДокумент.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товарный Чек"));
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВаучер(Команда)
	
	Элементы.ПогаситьВаучер.Видимость 	= ЛОЖЬ;
	Элементы.Ваучеры.Видимость 			= ИСТИНА;
	СтрокаВаучера = Объект.Ваучеры.Добавить();
	Элементы.Ваучеры.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
	Элементы.Ваучеры.ТекущийЭлемент 	= Элементы.ВаучерыВаучер;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументу(Команда)
	
	Объект.ПоступилоДенег = Объект.ТовараНаСумму;
	Объект.Валюта = ВалютаЦены;
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
		ХранилищеДенегПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияНомерПриИзменении(Элемент)
	ПозицияНомерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПозицияНомерПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПозицияНомер) Тогда
		
		Если ЗначениеЗаполнено(Объект.ПозицияНомер.Склад) Тогда
			Объект.Склад = Объект.ПозицияНомер.Склад;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ПозицияНомер.ВидЦен) Тогда
			
			Объект.ВидЦен = Объект.ПозицияНомер.ВидЦен;
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
				ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолДня(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДобавитьПериодУслуги(Дата, 3600 * 12);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
			
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач НоменклатураИлиКлиентПоставщик, Знач Количество = 0)
	
	Если ИспользоватьСкидки Тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, Объект.Склад, Объект.ДатаНачалаОказанияУслуг);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПроцентСкидкиНаСервере

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0)	
	
	Если ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
	Возврат ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Количество, Объект.Договор, , , Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКнопкиВыбораПериодаУслуги();
	ОбновитьВидДокумента();
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		ПроверитьВыбраннуюНоменклатуру();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()
	
	КлиентПриИзмененииНаСервере();
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001290", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьСкидки 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		Элементы.Оплата.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
		
		ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");		
		ВестиУчетДенегВНесколькихХранилищах  = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ИспользоватьВаучеры 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
		
		Элементы.ФормаОплаты.Видимость 		 = ВестиУчетДвиженияДенег И НЕ ВестиУчетДенегВНесколькихХранилищах;
		Элементы.ПечатьЧека.Видимость 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляОказанияУслугЗаВремя");
		
		Элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		
		НаименованиеОсновнойВалюты = СокрЛП(ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаДополнительно, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;				
			
			Если ЗначениеЗаполнено(Параметры.ПозицияНомер) Тогда
				ПозицияНомер = Параметры.ПозицияНомер;
			КонецЕсли;
			
			Если Параметры.ПоУмолчаниюУслугаОказана Тогда
				Объект.УслугаОказана = ИСТИНА;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.Склад) Тогда
				Объект.Склад = Параметры.Склад;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда					
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				ХранилищеДенегПриИзмененииНаСервере();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
				Объект.ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
			КонецЕсли;
			
			Если Параметры.ОткрыватьНовыйДокументОказанияУслугПриЗавершении Тогда
				Объект.ОткрыватьНовыйДокументОказанияУслугПриЗавершении = ИСТИНА;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Если ЗначениеЗаполнено(Параметры.Организация) Тогда
					Объект.Организация = Параметры.Организация;
				Иначе
					Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = Параметры.Сотрудник;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
				Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
					Объект.Клиент = Параметры.Клиент;
				Иначе
					Объект.Клиент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
					Объект.ВидЦен = Параметры.ВидЦен;
					
				Иначе			
					Если ЗначениеЗаполнено(Объект.Клиент)
						И ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
						
						Объект.ВидЦен = Объект.Клиент.ВидЦен;
					Иначе
						Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
						Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
							Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) 
				И ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
				
				Объект.Номенклатура = Параметры.Номенклатура;
				Объект.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
				Объект.Номенклатура = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УслугаЗаВремяПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					Объект.Валюта = Объект.ВидЦен.ВалютаЦены;					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
					Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;
			
			Если НЕ Объект.УслугаОказана Тогда
				Если Параметры.УслугаОказана Тогда
					Объект.УслугаОказана = ИСТИНА;
					Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
					
					Если Параметры.МинимальныйОбъемОказанияУслуг > Объект.ТовараВКоличестве Тогда
						Объект.ТовараВКоличестве = параметры.МинимальныйОбъемОказанияУслуг;
						Объект.ТовараНаСумму  	 = Объект.ТовараВКоличестве * Объект.Цена;
						Объект.СуммаБезСкидки 	 = Объект.ТовараНаСумму;
						Объект.ПроцентСкидки  	 = 0;
					КонецЕсли;
					
					Если Параметры.МинимальнаяСуммаОказанияУслуг > Объект.ТовараНаСумму Тогда
						Объект.ТовараНаСумму = параметры.МинимальнаяСуммаОказанияУслуг;
						Если Объект.ТовараВКоличестве = 0 Тогда
							Объект.ТовараВКоличестве = 1;
						КонецЕсли;
						
						Объект.СуммаБезСкидки = Объект.ТовараНаСумму;
						Объект.ПроцентСкидки  = 0;
						Объект.Цена = Объект.ТовараНаСумму / Объект.ТовараВКоличестве;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки)
				И ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
				
				Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
		Иначе
			ВаучерыВидимость = НЕ Объект.Ваучеры.Количество() = 0;
			Элементы.Ваучеры.Видимость = ВаучерыВидимость;
			Элементы.ПогаситьВаучер.Видимость = ИспользоватьВаучеры И НЕ ВаучерыВидимость;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			ВалютаЦены = Объект.ВидЦен.ВалютаЦены;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.Цена.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		Элементы.ВаучерыВаучерИзъят.Видимость = ИспользоватьВаучеры И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
		ПериодОказанияУслугиЗаВремя = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.Номенклатура, "ПериодОказанияУслугиЗаВремя");
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТовараВКоличестве, ИСТИНА);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000892", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ПоДокументу.Видимость = ЛОЖЬ;
				Элементы.Оплата.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.Оплата.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();		
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда			
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.УслугаОказана.ВидФлажка = ВидФлажка.Флажок; ");	
			КонецЕсли;
			Элементы.УслугаОказана.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Услуга клиенту оказана");
			Элементы.УслугаОказана.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
		
		Элементы.ГруппаПредметаСделки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыбраннуюНоменклатуру()
	
	ПериодОказанияУслугиЗаВремя = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.Номенклатура, "ПериодОказанияУслугиЗаВремя");
	Если НЕ ЗначениеЗаполнено(ПериодОказанияУслугиЗаВремя) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У данного вида услуг в карточке не указан вид периода!"));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция   ПроверитьЧтоПозицияСвободна()
	
	Отказ = ЛОЖЬ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Регистратор,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.НомерСтроки,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Активность,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.ПозицияНомер,
	|	ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Клиент,
	|	ВЫРАЗИТЬ(ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Комментарий КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ РегистрСведений.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя КАК ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя
	|ГДЕ ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.ПозицияНомер = &ПозицияНомер
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Регистратор.Ссылка <> &Ссылка
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период > &ДатаНачала
	|	И ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Период < &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачалаОказанияУслуг);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончанияОказанияУслуг);
	Запрос.УстановитьПараметр("ПозицияНомер", Объект.ПозицияНомер);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Отказ = ИСТИНА;
		
		ВыборкаДетальныеЗаписи.Следующий();	
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данная позиция занята") + ": " + ВыборкаДетальныеЗаписи.Клиент, Объект, "ПозицияНомер");
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроцентСкидкиПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыйМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(НачалоМесяца(Дата) - 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоДня(Дата);
	Объект.ДатаОкончанияОказанияУслуг = КонецДня(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	ПересчетКоличестваУслуги();
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ВалютаЦены = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	Объект.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Объект.ТовараВКоличестве, Объект.Договор, , Объект.Цена, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.Склад)
		И ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
		
		Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(КонецМесяца(Дата) + 3600);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаБезСкидкиПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура Сутки(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДобавитьПериодУслуги(Дата, 3600 * 24);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПредметаСделки(Команда)
	Объект.ПредметСделки = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Объект.Номенклатура, , , Объект.Клиент, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ТовараВКоличествеПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ТовараНаСуммуПриИзменении(Элемент)
	ПересчетКоличестваУслуги(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура УслугаОказанаПриИзменении(Элемент)
	
	Если Объект.УслугаОказана 
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг) Тогда
		
		Объект.ДатаОкончанияОказанияУслуг = ОбщийМодульСервисСервер.ПользователяТекущаяДата();		
		ОкруглитьДаты();
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг)
			И Объект.ДатаОкончанияОказанияУслуг < Объект.ДатаНачалаОказанияУслуг Тогда
			
			Объект.ДатаНачалаОказанияУслуг = Объект.ДатаОкончанияОказанияУслуг;
		КонецЕсли;
		
		ПересчетКоличестваУслуги();
	КонецЕсли;
	
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда		
		Объект.Валюта = Объект.ХранилищеДенег.Валюта;
		Объект.курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, ?(ЗначениеЗаполнено(Объект.ДатаОкончанияОказанияУслуг), Объект.ДатаОкончанияОказанияУслуг, Объект.ДатаНачалаОказанияУслуг));
		Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	ПересчетКоличестваУслуги();
КонецПроцедуры

&НаКлиенте
Процедура Час1(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДобавитьПериодУслуги(Дата, 3600);
	
КонецПроцедуры

&НаКлиенте
Процедура Час2(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();	
	ДобавитьПериодУслуги(Дата, 3600 * 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотМесяц(Команда)
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Объект.ДатаНачалаОказанияУслуг = НачалоМесяца(Дата);
	Объект.ДатаОкончанияОказанияУслуг = КонецМесяца(Объект.ДатаНачалаОказанияУслуг);	
	ОкруглитьДаты();
	
	ПересчетКоличестваУслуги();
	
КонецПроцедуры
