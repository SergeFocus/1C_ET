// sza150610-0306 ваучер
// sza150109-2138 НЧ
// sza141112-0312 валовая
// sza140701-1318  
// sza140624-1353  
// sza140216-2243  
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПроцентСкидки = ДанныеЗаполнения.ПроцентСкидки;
		Номенклатура = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
		НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
		Валюта = ДанныеЗаполнения.Валюта;
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		Договор = ДанныеЗаполнения.Договор;
		Клиент = ДанныеЗаполнения.КлиентПоставщик;
		Курс = ДанныеЗаполнения.Курс;
		Организация = ДанныеЗаполнения.Организация;
		ПоступилоДенег = ДанныеЗаполнения.ПоступилоДенег;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
		ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;
		ХранилищеДенег = ДанныеЗаполнения.ХранилищеДенег;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.События") Тогда
		НаправлениеДеятельности = ДанныеЗаполнения.Направление;
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		Договор = ДанныеЗаполнения.Договор;
		Клиент = ДанныеЗаполнения.Клиент;
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
		ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;
		ХранилищеДенег = ДанныеЗаполнения.ХранилищеДенег;
		
		Если НЕ ДанныеЗаполнения.Товары.Количество() = 0 Тогда
			Номенклатура = ДанныеЗаполнения.Товары[0].Номенклатура;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		
		Если НЕ Отказ Тогда
			Движения.Деньги.Записать();
			Движения.Расчеты.Записать();
			Движения.Продажи.Записать();
			Движения.ВаловаяПрибыль.Записать();
			Движения.РасчетыСОтсрочкой.Записать();
			Движения.ПродажиСотрудников.Записать();
			Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Записать();
			Движения.ВыполнениеРаботСотрудниками.Записать();
			Движения.НакоплениеНаВаучеры.Записать();
			Движения.ЗадействованныеСредстваПредприятия.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			
			ВестиУчетПоКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
			ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами");
			
			Если ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
				
				Если ЗначениеЗаполнено(ДатаНачалаОказанияУслуг) Тогда
					Движение = Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Добавить();
					Движение.Клиент 	  = Клиент;
					Движение.Комментарий  = Комментарий;
					Движение.Период 	  = ДатаНачалаОказанияУслуг;
					Движение.ПозицияНомер = ПозицияНомер;
					Движение.Количество   = ТовараВКоличестве;
					Движение.ДатаОкончания= ДатаОкончанияОказанияУслуг;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг) Тогда
					Движение = Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Добавить();
					Движение.Клиент 	  = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
					Движение.Комментарий  = Комментарий;
					Движение.Период 	  = ДатаОкончанияОказанияУслуг;
					Движение.ПозицияНомер = ПозицияНомер;
					Движение.Количество   = 0; // освобождено
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(видцен) Тогда
				валютацены = видцен.ВалютаЦены;
			Иначе
				валютацены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			СуммаДок = ОбщийМодульСервер.ПоКурсу(ТовараНаСумму, , ВалютаЦены, Дата);
			
			Если УслугаОказана Тогда
				
				Движения.Продажи.Записывать = ИСТИНА;
				Движение = Движения.Продажи.Добавить();
				Движение.Количество   	= ТовараВКоличестве;
				Движение.Номенклатура 	= Номенклатура;
									//Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
									//	И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда
									//	
				//Движение.СерияНоменклатуры = СерияНоменклатурыТ;
									//КонецЕсли;								
				Движение.Склад			= Склад;
				Движение.Договор 		= Договор;
				Движение.Клиент  		= Клиент;
				Движение.Период  		= Дата;
				Движение.Сумма   		= СуммаДок;			
				Движение.Комментарий	= Комментарий;
				
			КонецЕсли;
			
			Если УслугаОказана 
				И ЗначениеЗаполнено(Клиент)
				И ВестиУчетПоКлиентам Тогда
				
				Движение = Движения.Расчеты.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
				Движение.Комментарий = Комментарий;
				Движение.Договор 	 = Договор;
				Движение.Клиент  	 = Клиент;
				Движение.Период  	 = Дата;
				Движение.Сумма   	 = СуммаДок;			
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда				
					Движение = Движения.РасчетыСОтсрочкой.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Комментарий = Комментарий;
					Движение.Договор 	 = Договор;
					Движение.Клиент  	 = Клиент;
					Движение.Период  	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
					Движение.Сумма   	 = СуммаДок;				
				КонецЕсли;
			КонецЕсли;
			
			ВестиУчетПродажСотрудников = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
			
			Если ВестиУчетПродажСотрудников 
				И УслугаОказана Тогда
				
				Движение = Движения.ПродажиСотрудников.Добавить();
//				Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
				Движение.Комментарий  = Комментарий;
				Движение.Номенклатура = Номенклатура;
				Движение.Сотрудник    = Сотрудник;
				Движение.Период 	  = Дата;
				Движение.Сумма  	  = СуммаДок;
				Движение.Количество   = ТовараВКоличестве;
				
				Движение = Движения.ВыполнениеРаботСотрудниками.Добавить();
				Движение.Количество 	= ТовараВКоличестве;
				Движение.Комментарий 	= Комментарий;
				Движение.Номенклатура	= Номенклатура;
				Движение.Период			= Дата;
				Движение.Сотрудник		= Сотрудник;
				Движение.Сумма			= СуммаДок;				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Средство)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
				
				Движение = Движения.ЗадействованныеСредстваПредприятия.Добавить();
				Движение.ДатаОкончания	= ДатаОкончанияОказанияУслуг;
				Движение.Количество		= ТовараВКоличестве;
				Движение.Комментарий	= Комментарий;
				Движение.Период			= ?(ЗначениеЗаполнено(ДатаНачалаОказанияУслуг), ДатаНачалаОказанияУслуг, Дата);
				Движение.Средство 		= Средство;
			КонецЕсли;
			
			ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
			
			Если НЕ ПоступилоДенег = 0 
				И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
				
				Если НЕ ФормаОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
					
				Движение = Движения.Деньги.Добавить();
				Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
				Движение.СуммаВВалюте = ПоступилоДенег;
				Движение.ФормаОплаты  = ФормаОплаты;
				Движение.Период 	  = Дата;
				Движение.Валюта 	  = Валюта;
				Движение.Статья 	  = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
				Движение.Сумма  	  = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата);
				Движение.ХранилищеДенег = ХранилищеДенег;
				
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Клиент)
					И ВестиУчетПоКлиентам Тогда
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Комментарий = Комментарий;
					Движение.Договор 	 = Договор;
					Движение.Клиент  	 = Клиент;
					Движение.Период  	 = Дата;
					Движение.Сумма   	 = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата); 	
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Комментарий = Комментарий;
						Движение.Договор 	 = Договор;
						Движение.Клиент  	 = Клиент;
						Движение.Период  	 = Дата;
						Движение.Сумма   	 = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата); 	
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда
				ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, ТовараВКоличестве, Дата, , ИСТИНА, Склад);
				
				Если ЦенаСписания = 0 
					ИЛИ не (СуммаДок - (ЦенаСписания * ТовараВКоличестве) = 0) Тогда
					
					Движение = Движения.ВаловаяПрибыль.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Количество  = ТовараВКоличестве;
					
					Если ЦенаСписания = 0 Тогда
						Движение.Сумма 			= СуммаДок;
						Движение.ПроцентНаценки = 100;
						
					Иначе
						Движение.Сумма 			= СуммаДок - (ЦенаСписания * ТовараВКоличестве);
						ЦенаПоКурсу 			= ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, Дата);
						Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
						Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;						
					КонецЕсли; 			
					
					Движение.Период 	  = Дата;
					Движение.Номенклатура = Номенклатура;
					Движение.Комментарий  = Комментарий;	
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда
				ОтслеживатьВаучерыВКачествеНоменклатуры = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
				
				Для Каждого СтрокаВаучер Из Ваучеры Цикл
					Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
						
						Если СтрокаВаучер.ВаучерИзъят Тогда
							Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Контрагент) Тогда
								
								ОбъектВаучер = СтрокаВаучер.Ваучер.ПолучитьОбъект();
								ОбъектВаучер.Контрагент = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
								ОбъектВаучер.Записать();	
							КонецЕсли;
							
							Если ОтслеживатьВаучерыВКачествеНоменклатуры
								И ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Номенклатура) Тогда
								
								Движение = Движения.Товары.Добавить();					
								Движение.Номенклатура = СтрокаВаучер.Ваучер.Номенклатура;
								Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
								Движение.Период 	  = Дата;
								
								СкладДвижения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");
								Если НЕ ЗначениеЗаполнено(СкладДвижения) Тогда
									Если ЗначениеЗаполнено(Склад) Тогда
										СкладДвижения = Склад;
									Иначе
										СкладДвижения = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
									КонецЕсли;
								КонецЕсли;
								Движение.Склад 		  = СкладДвижения;
								Движение.Комментарий  = СтрокаВаучер.ОСтроке;
								Движение.Количество   = 1;
								Движение.Сумма 		  = 0;
								Движение.СписаниеИлиОприходование = ИСТИНА;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер)
						И СтрокаВаучер.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта
						И НЕ СтрокаВаучер.Ваучер = ВаучерНакопления Тогда
						
						Движение = Движения.НакоплениеНаВаучеры.Добавить();
						Движение.Валюта			= Валюта;
						Движение.Ваучер			= СтрокаВаучер.Ваучер;
						Движение.ВидДвижения	= ВидДвиженияНакопленияРасход;
						Движение.Сумма			= ТовараНаСумму * Курс;
						Движение.Период			= Дата;
						Движение.СуммаВВалюте	= ТовараНаСумму;
						Движение.Комментарий	= Комментарий;
					КонецЕсли;				
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ВаучерНакопления) Тогда
					
					СуммаНакопления = ОбщийМодульТоварСервер.ВычислитьСуммуНакопления(ВаучерНакопления, Номенклатура, ТовараНаСумму, Склад, Дата);					
					
					Движение = Движения.НакоплениеНаВаучеры.Добавить();
					Движение.Валюта		  = ВаучерНакопления.Валюта;
					Движение.Ваучер		  = ВаучерНакопления;
					Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
					Движение.Период		  = Дата;
					Движение.Сумма		  = ОбщийМодульСервер.ПоКурсу(СуммаНакопления, ВаучерНакопления.Валюта, Валюта, Дата);
					Движение.СуммаВВалюте = СуммаНакопления;
					Движение.Комментарий  = Комментарий;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Движения.НакоплениеНаВаучеры.Записывать = НЕ Отказ;
		Движения.Деньги.Записывать   			= НЕ Отказ;
		Движения.Расчеты.Записывать  			= НЕ Отказ;
		Движения.Продажи.Записывать  			= НЕ Отказ;
		Движения.ВаловаяПрибыль.Записывать 	   	= НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать  	= НЕ Отказ;
		Движения.ПродажиСотрудников.Записывать 	= НЕ Отказ;
		Движения.ВыполнениеРаботСотрудниками.Записывать = НЕ Отказ;
		Движения.ЗадействованныеСредстваПредприятия.Записывать = НЕ Отказ;
		Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ Отказ
		И УслугаОказана
		И ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг)
		И ОткрыватьНовыйДокументОказанияУслугПриЗавершении Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ОказанияУслугЗаВремя.Ссылка
		|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ ОказанияУслугЗаВремя.Клиент = &Клиент
		|	И ОказанияУслугЗаВремя.Дата = &Дата
		|	И ОказанияУслугЗаВремя.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Дата", ДатаОкончанияОказанияУслуг + 1);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НовыйДокумент = Документы.ОказанияУслугЗаВремя.СоздатьДокумент();
			НовыйДокумент.Валюта    = Валюта;
			НовыйДокумент.ВидЦен	= видцен;
			НовыйДокумент.Дата 		= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			НовыйДокумент.ДатаНачалаОказанияУслуг = ДатаОкончанияОказанияУслуг + 1;
			НовыйДокумент.Договор	= Договор;
			НовыйДокумент.Клиент	= Клиент;
			НовыйДокумент.Курс		= Курс;
			НовыйДокумент.Номенклатура	 = Номенклатура;
			НовыйДокумент.Организация	 = Организация;
			НовыйДокумент.ОткрыватьНовыйДокументОказанияУслугПриЗавершении = ИСТИНА;
			НовыйДокумент.ПроцентСкидки	 = ПроцентСкидки;
			НовыйДокумент.ФормаОплаты	 = ФормаОплаты;
			НовыйДокумент.ХранилищеДенег = ХранилищеДенег;
			НовыйДокумент.Цена			 = Цена;
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Попытка // ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001291", , Отказ, ЭтотОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
