//sza140613-1405 : 
//sza140216-2243 SZA: 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПроцентСкидки = ДанныеЗаполнения.ПроцентСкидки;
		Номенклатура = ДанныеЗаполнения.Ссылка;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
		
		Валюта = ДанныеЗаполнения.Валюта;
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		Договор = ДанныеЗаполнения.Договор;
		Клиент = ДанныеЗаполнения.КлиентПоставщик;
		Курс = ДанныеЗаполнения.Курс;
		Организация = ДанныеЗаполнения.Организация;
		ПоступилоДенег = ДанныеЗаполнения.ПоступилоДенег;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
		ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;
		ХранилищеДенег = ДанныеЗаполнения.ХранилищеДенег;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
		
		Если Не Отказ Тогда
			движения.Деньги.Записать();
			движения.Расчеты.Записать();
			движения.Продажи.Записать();
			движения.РасчетыСОтсрочкой.Записать();
			движения.ПродажиСотрудников.Записать();
			движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Записать();
			
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			
			ВестиУчетПоКлиентам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
			ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами");
			
			Если ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами Тогда
				
				Если ЗначениеЗаполнено(ДатаНачалаОказанияУслуг) Тогда
					Движение = Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Добавить();
					Движение.Клиент = Клиент;
					Движение.Комментарий = Комментарий;
					Движение.Период = ДатаНачалаОказанияУслуг;
					Движение.ПозицияНомер = ПозицияНомер;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг) Тогда
					Движение = Движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Добавить();
					Движение.Клиент = Справочники.Клиенты.ПустаяСсылка();
					Движение.Комментарий = Комментарий;
					Движение.Период = ДатаОкончанияОказанияУслуг;
					Движение.ПозицияНомер = ПозицияНомер;
					Движение.Количество = ТовараВКоличестве;				
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(видцен) Тогда
				валютацены = видцен.ВалютаЦены;
			иначе
				валютацены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			СуммаДок = ОбщийМодульСервер.ПоКурсу(ТовараНаСумму, , ВалютаЦены, Дата);
			
			Если УслугаОказана Тогда
				
				Движения.Продажи.Записывать = Истина;
				Движение = Движения.Продажи.Добавить();
				Движение.Количество   	= ТовараВКоличестве;
				Движение.Номенклатура 	= Номенклатура;
				Движение.Договор 		= Договор;
				Движение.Клиент  		= Клиент;
				Движение.Период  		= Дата;
				Движение.Сумма   		= СуммаДок;			
				Движение.Комментарий	= Комментарий;
			КонецЕсли;
			
			Если УслугаОказана 
				и ЗначениеЗаполнено(Клиент)
				и ВестиУчетПоКлиентам Тогда
				
				Движение = Движения.Расчеты.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Комментарий = Комментарий;
				Движение.Договор 	 = Договор;
				Движение.Клиент  	 = Клиент;
				Движение.Период  	 = Дата;
				Движение.Сумма   	 = СуммаДок;			
				
				Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда				
					Движение = Движения.РасчетыСОтсрочкой.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Комментарий = Комментарий;
					Движение.Договор 	 = Договор;
					Движение.Клиент  	 = Клиент;
					Движение.Период  	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
					Движение.Сумма   	 = СуммаДок;				
				КонецЕсли;
			КонецЕсли;
			
			ВестиУчетПродажСотрудников = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
			
			Если ВестиУчетПродажСотрудников 
				и УслугаОказана Тогда
				
				Движение = Движения.ПродажиСотрудников.Добавить();
				Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
				Движение.Комментарий  = Комментарий;
				Движение.Номенклатура = Номенклатура;
				Движение.Сотрудник    = Сотрудник;
				Движение.Период 	  = Дата;
				Движение.Сумма  	  = СуммаДок;			
			КонецЕсли;
			
			ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
			
			если Не ПоступилоДенег = 0 
				и ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
				
				Движение = Движения.Деньги.Добавить();
				Движение.ВидДвижения  = ВидДвиженияНакопления.Приход;
				Движение.СуммаВВалюте = ПоступилоДенег;
				Движение.ФормаОплаты  = ФормаОплаты;
				Движение.Период 	  = Дата;
				Движение.Валюта 	  = Валюта;
				Движение.Статья 	  = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
				Движение.Сумма  	  = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата);
				Движение.ХранилищеДенег = ХранилищеДенег;
				
				Если ЗначениеЗаполнено(Клиент)
					и ВестиУчетПоКлиентам Тогда
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Комментарий = Комментарий;
					Движение.Договор 	 = Договор;
					Движение.Клиент  	 = Клиент;
					Движение.Период  	 = Дата;
					Движение.Сумма   	 = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата); 	
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда				
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Комментарий = Комментарий;
						Движение.Договор = Договор;
						Движение.Клиент  = Клиент;
						Движение.Период  = Дата;
						Движение.Сумма   = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, , Валюта, Дата); 	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 			
		КонецЕсли;
		
		Движения.Деньги.Записывать   = НЕ Отказ;
		Движения.Расчеты.Записывать  = НЕ Отказ;
		Движения.Продажи.Записывать  = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать  = НЕ Отказ;
		Движения.ПродажиСотрудников.Записывать = НЕ Отказ;
		движения.ЗагрузкаПозицийНомеровПриОказанииУслугЗаВремя.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ Отказ
		И УслугаОказана
		И ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг)
		И ОткрыватьНовыйДокументОказанияУслугПриЗавершении Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОказанияУслугЗаВремя.Ссылка
		|ИЗ
		|	Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ
		|	ОказанияУслугЗаВремя.Клиент = &Клиент
		|	И ОказанияУслугЗаВремя.Дата = &Дата
		|	И ОказанияУслугЗаВремя.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Дата", ДатаОкончанияОказанияУслуг + 1);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НовыйДокумент = Документы.ОказанияУслугЗаВремя.СоздатьДокумент();
			НовыйДокумент.Валюта    = Валюта;
			НовыйДокумент.ВидЦен	= видцен;
			НовыйДокумент.Дата 		= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			НовыйДокумент.ДатаНачалаОказанияУслуг = ДатаОкончанияОказанияУслуг + 1;
			НовыйДокумент.Договор	= Договор;
			НовыйДокумент.Клиент	= Клиент;
			НовыйДокумент.Курс		= Курс;
			НовыйДокумент.Номенклатура	 = Номенклатура;
			НовыйДокумент.Организация	 = Организация;
			НовыйДокумент.ОткрыватьНовыйДокументОказанияУслугПриЗавершении = Истина;
			НовыйДокумент.ПроцентСкидки	 = ПроцентСкидки;
			НовыйДокумент.ФормаОплаты	 = ФормаОплаты;
			НовыйДокумент.ХранилищеДенег = ХранилищеДенег;
			НовыйДокумент.Цена			 = Цена;
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И Не Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
	КонецЕсли;
	
КонецПроцедуры
