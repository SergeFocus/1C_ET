// sza151211-0142 фикс
// sza151102-2315
// sza151031-0424
// sza150925-1700

&НаКлиенте
Процедура АвтоНаименование(Команда)
	ОбновитьНаименованиеНаСервере(ИСТИНА);
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ВалютаХранилища(Знач ХранилищеДенег, Знач БылаВалюта)

	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе

		Возврат БылаВалюта;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВводНовойСтрокиСредств(ТекущаяСтрока)

	Если ТекущаяСтрока.Коэффициент = 0 Тогда
		ТекущаяСтрока.Коэффициент = 1;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()

	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;

	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда

		Если НЕ Объект.Сторный Тогда
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость 		 = НЕ ЗначениеЗаполненоДокументСторнирован;

			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);

			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);
			КонецЕсли;
		КонецЕсли;

		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;

	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;

КонецПроцедуры

&НаКлиенте
Процедура ВидСобытияПриИзменении(Элемент)

	ИзменитьВидимостьПараметровСобытия();
	ОбновитьНаименование();

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	ОбновитьНаименование();

	Если Объект.ДатаОкончания = '00010101000000' Тогда
		Объект.ДатаОкончания = Объект.Дата;
	КонецЕсли;

	Если Объект.Дата < Объект.ДатаОкончания Тогда
		Объект.Дата = Объект.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда

		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

	ОбновитьНаименование();

	Если Объект.Дата < Объект.ДатаОкончания Тогда
		 Объект.ДатаОкончания = Объект.Дата;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

        Возврат;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадействованныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ВводНовойСтрокиСредств(Элементы.Оплаты.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()

	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.События"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПараметровСобытия()

	Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
		Элементы.СтраницыПараметровСобытия.Видимость = ИСТИНА;
		ИзменитьВидимостьПараметровСобытияНаСервере();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			УстановитьЗначенияПоУмолчанию();
		КонецЕсли;
	Иначе
		Элементы.СтраницыПараметровСобытия.Видимость = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьПараметровСобытияНаСервере()

	ЭтотОбъектИзФормыВЗначение = РеквизитФормыВЗначение("Объект");
	ЭтотОбъектИзФормыВЗначение.ЗаполнитьПоВидуСобытий();
	ЗначениеВРеквизитФормы(ЭтотОбъектИзФормыВЗначение, "Объект");
	ВидСобытия = Объект.ВидСобытия;
	Элементы.Сотрудник.Видимость		= ВидСобытия.УчаствуетСотрудник И НЕ ВидСобытия.УчаствуютНесколькоСотрудников;
	Элементы.Сотрудники.Видимость		= ВидСобытия.УчаствуютНесколькоСотрудников И НЕ ВидСобытия.УчаствуетСотрудник;
	Элементы.Тема.Видимость 			= ВидСобытия.ЗаданаТема;
	Элементы.Результат.Видимость 		= ВидСобытия.ПодводитсяРезультат;
	Элементы.Дата.Видимость 			= ВидСобытия.УказываетсяДатаПроведения ИЛИ ВидСобытия.УказываетсяПериодПроведения;
	Элементы.ГруппаДатаОкончания.Видимость 	= ВидСобытия.УказываетсяПериодПроведения;
	Элементы.АдресПомещения.Видимость 	= ВидСобытия.ИспользуетсяПомещение И НЕ ВидСобытия.ИспользуетсяНесколькоПомещений;
	Элементы.Помещения.Видимость 		= ВидСобытия.ИспользуетсяНесколькоПомещений И НЕ ВидСобытия.ИспользуетсяПомещение;
	Элементы.Клиент.Видимость			= ВестиУчетПоКлиентам И ВидСобытия.УчаствуетКлиент И НЕ ВидСобытия.УчаствуетНесколькоКлиентов;
	Элементы.Клиенты.Видимость			= ВестиУчетПоКлиентам И ВидСобытия.УчаствуетНесколькоКлиентов И НЕ ВидСобытия.УчаствуетКлиент;
	Элементы.Поставщик.Видимость		= ВестиУчетПоПоставщикам И ВидСобытия.УчаствуетПоставщик И НЕ ВидСобытия.УчаствуетНесколькоПоставщиков;
	Элементы.Поставщики.Видимость		= ВестиУчетПоПоставщикам И НЕ ВидСобытия.УчаствуетПоставщик И ВидСобытия.УчаствуетНесколькоПоставщиков;
	Элементы.Договора.Видимость			= ВестиУчетОтдельныхДоговоровСКонтрагентами И ВидСобытия.УпоминаютсяДоговораСКонтрагентами;
	Элементы.Организации.Видимость		= ВестиУчетСобственныхЮридическихЛиц И НЕ ВидСобытия.ОтИмениОрганизации И ВидСобытия.ОтИмениНесколькихОрганизаций;
	Элементы.Организация.Видимость		= ВестиУчетСобственныхЮридическихЛиц И ВидСобытия.ОтИмениОрганизации И НЕ ВидСобытия.ОтИмениНесколькихОрганизаций;
	Элементы.Направление.Видимость		= ВестиУчетПоНаправлениямДеятельности И ВидСобытия.ПринадлежитНаправлениюДеятельности И НЕ ВидСобытия.ПринадлежитНесколькимНаправлениямДеятельности;
	Элементы.Направления.Видимость		= ВестиУчетПоНаправлениямДеятельности И НЕ ВидСобытия.ПринадлежитНаправлениюДеятельности И ВидСобытия.ПринадлежитНесколькимНаправлениямДеятельности;
	Элементы.ГруппаРеклама.Видимость	= ВидСобытия.ИспользуетсяРекламнаяПродукция;
	Элементы.Телефоны.Видимость			= ВидСобытия.ИспользуетсяТелефон;
	Элементы.АдресаПочты.Видимость		= ВидСобытия.ИспользуетсяЭлектроннаяПочта;
	Элементы.РегионыИЛокации.Видимость	= ВестиУчетРегионов И ВидСобытия.ОхваченыРегионыИЛокации;
	Элементы.ОбъектыКлиентов.Видимость	= ВестиУчетОбъектовКлиентов И ВидСобытия.УпоминаютсяОбъектыКлиентов;
	Элементы.ДокументыСобытия.Видимость	= ВидСобытия.УпоминаютсяДокументыБазыДанных;
	Элементы.Производители.Видимость	= ВестиУчетПроизводителейНоменклатуры И ВидСобытия.УпоминаютсяПроизводители;
	Элементы.Товары.Видимость			= ВидСобытия.УпоминаютсяТоварыИУслуги;
	Элементы.Склады.Видимость			= ВестиУчетПоСкладам И ВидСобытия.УпоминаютсяСкладыПредприятия;
	Элементы.ЭлементыДанных.Видимость	= ВидСобытия.УпоминаютсяСсылкиНаЭлементыБазыДанных;
	Элементы.Подразделения.Видимость	= ВестиУчетПодразделений И ВидСобытия.УчаствуютПодразделения;
	Элементы.Контакт.Видимость 			= (ВестиУчетПоКлиентам И ВидСобытия.УчаствуетКлиент И НЕ ВидСобытия.УчаствуетНесколькоКлиентов) ИЛИ (ВестиУчетПоПоставщикам И ВидСобытия.УчаствуетПоставщик И НЕ ВидСобытия.УчаствуетНесколькоПоставщиков);
	Элементы.ГруппаИтогоПоТоварам.Видимость		= ВидСобытия.УпоминаютсяТоварыИУслуги;
	Элементы.ЗадействованныеСредства.Видимость 	= ВестиУчетСредствПредприятия И ВидСобытия.ЗадействованыСредстваПредприятия;
	Элементы.ДлительностьСобытия.Видимость 		= ВидСобытия.УказываетсяДатаПроведения И НЕ ВидСобытия.УказываетсяПериодПроведения;
	Элементы.СобственныеРасходы.Видимость 		= ВидСобытия.ПредполагаютсяСобственныеРасходыДенег;
	Элементы.ВидЦен.Видимость = ВидСобытия.УчебноПрактическоеЗанятие;
	Элементы.ХранилищеДенег.Видимость = ВидСобытия.УчебноПрактическоеЗанятие;
	Элементы.КлиентыДокументРеализации.Видимость = ВидСобытия.УчебноПрактическоеЗанятие;
	Элементы.КлиентыСоздатьДокументыРеализацииКлиентам.Видимость = НЕ ДокументЗаблокирован И ВидСобытия.УчебноПрактическоеЗанятие;

КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Клиенты", ДанныеВыбора, Текст, Объект.Клиент);

КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)

	ОбновитьНаименование();

КонецПроцедуры

&НаКлиенте
Процедура На1Час(Команда)

	Объект.ДатаОкончания = Объект.Дата + 60*5;

КонецПроцедуры

&НаКлиенте
Процедура На5Минут(Команда)

	Объект.ДатаОкончания = Объект.Дата + 60*5;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	РедактировалиНаименование = ИСТИНА;

КонецПроцедуры

&НаСервере
Процедура ОбновитьВТаблицах()

	Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда

		Если Объект.ВидСобытия.УчаствуетКлиент
			И НЕ Объект.ВидСобытия.УчаствуетНесколькоКлиентов
			И ЗначениеЗаполнено(Объект.Клиент) Тогда

			Объект.Клиенты.Очистить();
			СтрокаТаблицы = Объект.Клиенты.Добавить();
			СтрокаТаблицы.Клиент    = Объект.Клиент;
			СтрокаТаблицы.Контакт   = Объект.Контакт;
			СтрокаТаблицы.Результат = Объект.Результат;
		КонецЕсли;

		Если Объект.ВидСобытия.УчаствуетПоставщик
			И НЕ Объект.ВидСобытия.УчаствуетНесколькоПоставщиков
			И ЗначениеЗаполнено(Объект.Поставщик) Тогда

			Объект.Поставщики.Очистить();
			СтрокаТаблицы = Объект.Поставщики.Добавить();
			СтрокаТаблицы.Поставщик = Объект.Поставщик;
			СтрокаТаблицы.Контакт   = Объект.Контакт;
			СтрокаТаблицы.Результат = Объект.Результат;
		КонецЕсли;

		Если Объект.ВидСобытия.ОтИмениОрганизации
			И НЕ Объект.ВидСобытия.ОтИмениНесколькихОрганизаций
			И ЗначениеЗаполнено(Объект.Организация) Тогда

			Объект.Организации.Очистить();
			СтрокаТаблицы = Объект.Организации.Добавить();
			СтрокаТаблицы.Организация = Объект.Организация;
		КонецЕсли;

		Если Объект.ВидСобытия.УчаствуетСотрудник
			И НЕ Объект.ВидСобытия.УчаствуютНесколькоСотрудников
			И ЗначениеЗаполнено(Объект.Сотрудник) Тогда

			Объект.Сотрудники.Очистить();
			СтрокаТаблицы = Объект.Сотрудники.Добавить();
			СтрокаТаблицы.Сотрудник = Объект.Сотрудник;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименование()
	ОбновитьНаименованиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеНаСервере(Знач Обязательно = ЛОЖЬ)

	ОбновитьВТаблицах();

	Если Обязательно
		ИЛИ НЕ РедактировалиНаименование
		ИЛИ ПустаяСтрока(Объект.Наименование)
		ИЛИ ЗначениеЗаполнено(Объект.ВидСобытия) Тогда

		ВидСобытия = Объект.ВидСобытия;
		Наименование = СокрЛП(ВидСобытия);
		Если ВидСобытия.УказываетсяПериодПроведения Тогда
			Наименование = Наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("с") + " " + Формат(Объект.Дата, "ДФ='dd.MM.yy ЧЧ:мм'") + " " + ?(ЗначениеЗаполнено(Объект.ДатаОкончания), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по") + " " + Формат(Объект.ДатаОкончания, "ДФ='dd.MM.yy ЧЧ:мм'"), "");
		ИначеЕсли ВидСобытия.УказываетсяДатаПроведения Тогда
			Наименование = Наименование + " " + Формат(Объект.Дата, "ДФ='dd.MM.yy ЧЧ:мм'")
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Наименование = Наименование + " " + СокрЛП(Объект.Сотрудник);
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
			Наименование = Наименование + " " + СокрЛП(Объект.Клиент);
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
			Наименование = Наименование + " " + СокрЛП(Объект.Поставщик);
		КонецЕсли;

		Если Не ПустаяСтрока(Объект.Тема) Тогда
			Наименование = Наименование + " " + СокрЛП(Объект.Тема);
		КонецЕсли;

		Объект.Наименование	= Наименование;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);

	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000971") Тогда
		Элементы.АвтоНаименование.Видимость = ЛОЖЬ;
		Элементы.РазрешитьСменитьВидСобытия.Видимость = ЛОЖЬ;
		Элементы.СоздатьДокументыРеализацииКлиентам.Видимость = ЛОЖЬ;
		Элементы.На5Минут.Видимость = ЛОЖЬ;
		Элементы.На1Час.Видимость = ЛОЖЬ;
	Иначе
		Элементы.АвтоНаименование.Видимость = ИСТИНА;
		Элементы.РазрешитьСменитьВидСобытия.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
		Элементы.КлиентыСоздатьДокументыРеализацииКлиентам.Видимость = НЕ ДокументЗаблокирован И Объект.ВидСобытия.УчебноПрактическоеЗанятие;
		Элементы.На5Минут.Видимость = ИСТИНА;
		Элементы.На1Час.Видимость = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОбновитьВТаблицах();

КонецПроцедуры

&НаКлиенте
Процедура ОтветПользователяВФорму(Знач МожноРедактировать = ЛОЖЬ, Знач ДополнительноеНечто) Экспорт

	Если МожноРедактировать Тогда
		Элементы.ВидСобытия.ТолькоПросмотр = ЛОЖЬ;
		Элементы.РазрешитьСменитьВидСобытия.Видимость = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()

	Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");
	Объект.ТовараНаСумму 	 = Объект.Товары.Итог("Сумма");

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПрочихРасходов(Знач БезИзменений = ЛОЖЬ)

	ИтогоРасходов = 0;

	Для Каждого СтрокаДополнительныхРасходов Из Объект.СобственныеРасходы Цикл
		Если НЕ БезИзменений Тогда
			Если СтрокаДополнительныхРасходов.Курс = 0 Тогда
				СтрокаДополнительныхРасходов.Курс = 1;
			КонецЕсли;
		КонецЕсли;

		ИтогоРасходов = ИтогоРасходов + СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);

	КонецЦикла;

	Элементы.ГруппаСуммыРасходов.Видимость = Объект.ВидСобытия.ПредполагаютсяСобственныеРасходыДенег И НЕ ИтогоРасходов = 0;

КонецПроцедуры

&НаСервере
Функция   ПолучитьВидСобытия(Знач Требование = "УчаствуетКлиент")

	Результат = ПредопределенноеЗначение("Справочник.ВидыСобытий.ПустаяСсылка");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыСобытий.Ссылка
	|ИЗ Справочник.ВидыСобытий КАК ВидыСобытий
	|ГДЕ ВидыСобытий." + Требование + " = ИСТИНА
	|УПОРЯДОЧИТЬ ПО ВидыСобытий.ПометкаУдаления";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьВидСобытия

&НаКлиенте
Функция   ПолучитьКурс(Знач Валюта, Знач ДатаРасхода = Неопределено)

	Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, ?(ДатаРасхода = '00010101000000', Объект.Дата, ДатаРасхода));

КонецФункции // получитьКурс

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();
	КонецЕсли;

	ВидимостьСторно();
	Элементы.ВидСобытия.ТолькоПросмотр = ИСТИНА;
	Элементы.РазрешитьСменитьВидСобытия.Видимость = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Поставщики", ДанныеВыбора, Текст, Объект.Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ОбновитьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;

	ИзменитьВидимостьПараметровСобытия();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000971", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		ВестиУчетПоКлиентам 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		ВестиУчетПоПоставщикам 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		ВестиУчетСобственныхЮридическихЛиц 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц");
		ВестиУчетПоНаправлениямДеятельности = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ВестиУчетСредствПредприятия 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия");
		ВестиУчетРегионов  					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов");
		ВестиУчетОбъектовКлиентов 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов");
		ВестиУчетПроизводителейНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры");
		ВестиУчетПоСкладам 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетПодразделений 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПодразделений");
		ИспользоватьСторнированиеДокументов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		НаименованиеОсновнойВалюты 			= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование;
		ВестиУчетОтдельныхДоговоровСКонтрагентами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами");
		Элементы.СобственныеРасходыДатаРасхода.Видимость = НЕ ИспользоватьСторнированиеДокументов;

		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			Если ЗначениеЗаполнено(Параметры.ВидСобытий) Тогда
				Объект.ВидСобытия = Параметры.ВидСобытий;
				ИзменитьВидимостьПараметровСобытияНаСервере();
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
				Объект.Клиент = Параметры.Клиент;
				Если НЕ ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
					Объект.ВидСобытия = ПолучитьВидСобытия("УчаствуетКлиент");
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.Поставщик) Тогда
				Объект.Поставщик = Параметры.Поставщик;
				Если НЕ ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
					Объект.ВидСобытия = ПолучитьВидСобытия("УчаствуетПоставщик");
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
				Объект.Сотрудник = Параметры.Сотрудник;
				Если НЕ ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
					Объект.ВидСобытия = ПолучитьВидСобытия("УчаствуетСотрудник");
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
				ВидСобытия = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидСобытийПоУмолчанию");
				Если ЗначениеЗаполнено(ВидСобытия) Тогда
					Объект.ВидСобытия = ВидСобытия;
				КонецЕсли;
			КонецЕсли;

			Объект.Дата = ТекущаяДата();

			Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда

				Если Объект.ВидСобытия.УчаствуетПоставщик
					И НЕ ЗначениеЗаполнено(Объект.Поставщик) Тогда

					Объект.Поставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");
				КонецЕсли;

				Если Объект.ВидСобытия.УчаствуетКлиент
					И НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда

					Объект.Клиент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
				КонецЕсли;

				Если Объект.ВидСобытия.УпоминаютсяСкладыПредприятия
					И НЕ Объект.Склады.Количество() = 0 Тогда

					Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");

					Если ЗначениеЗаполнено(Склад) Тогда
						СтрокаТаблицы = Объект.Склады.Добавить();
						СтрокаТаблицы.Склад = Склад;
					КонецЕсли;
				КонецЕсли;

				Если Объект.ВидСобытия.УчаствуетСотрудник
					И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда

					Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
				КонецЕсли;

				Если Объект.ВидСобытия.ОтИмениОрганизации
					И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда

					Объект.Организация = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;

			ОбновитьНаименованиеНаСервере();
			РедактировалиНаименование = ЛОЖЬ;
		Иначе
			РедактировалиНаименование = ИСТИНА;
			Элементы.РазрешитьСменитьВидСобытия.Видимость = ИСТИНА;
			Элементы.ВидСобытия.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ВидимостьСторно();
		ПересчитатьСуммуПрочихРасходов(ИСТИНА);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьСменитьВидСобытия(Команда)

	МожноРедактировать = ЛОЖЬ;

	Если глВерсияПлатформы < 803040000  Тогда
		МожноРедактировать = ИСТИНА;
		Выполнить(" МожноРедактировать = Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Вы уверены, что можете на этом этапе сменить вид события?""), РежимДиалогаВопрос.ДаНет, , , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Смена вида сохраненного события"")) = КодВозвратаДиалога.Да; ");
		Если МожноРедактировать Тогда
			Элементы.ВидСобытия.ТолькоПросмотр = ЛОЖЬ;
			Элементы.РазрешитьСменитьВидСобытия.Видимость = ЛОЖЬ;
		КонецЕсли;
	Иначе
		КомандыВопроса = Новый Массив(2, 3);
		КомандыВопроса[0][0] = "НЕТ";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет");
		КомандыВопроса[0][2] = "Результат = ЛОЖЬ;";
		КомандыВопроса[1][0] = "ДА";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да");
		КомандыВопроса[1][2] = "Результат = ИСТИНА;";
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", "Смена вида сохраненного события");
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что можете на этом этапе сменить вид события?"));
		ПараметрыФормы.Вставить("НомерКнопкиПоУмолчанию", 1);
		ПараметрыФормы.Вставить("ЭтоПредупреждение", ИСТИНА);
		Выполнить("
		|ОтветПользователяВФорму = Новый ОписаниеОповещения(""ОтветПользователяВФорму"", ЭтаФорма);
		|ОткрытьФорму(""ОбщаяФорма.ФормаВопроса"", ПараметрыФормы, ЭтаФорма, , , , ОтветПользователяВФорму, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

        Возврат;
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыВалютаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СобственныеРасходы.ТекущиеДанные;

	Если НЕ ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.валюта) Тогда

		ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(ТекущаяСтрока.ДатаРасхода = '00010101000000' , Объект.Дата, ТекущаяСтрока.ДатаРасхода));

		Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
			ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
		КонецЕсли;

		ПересчитатьСуммуПрочихРасходов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыКурсПриИзменении(Элемент)
	ПересчитатьСуммуПрочихРасходов();
КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		СтрокаДополнительныхРасходов = Элементы.СобственныеРасходы.ТекущиеДанные;
		Если НЕ СтрокаДополнительныхРасходов = Неопределено Тогда
			СтрокаДополнительныхРасходов.Валюта = Объект.Валюта;
			СтрокаДополнительныхРасходов.Курс   = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаДополнительныхРасходов.Валюта, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000', Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыСуммаПриИзменении(Элемент)
	ПересчитатьСуммуПрочихРасходов();
КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыХранилищеДенегПриИзменении(Элемент)

	ТекущиеДанные = Элементы.СобственныеРасходы.ТекущиеДанные;
	ТекущиеДанные.Валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.Валюта);
	ТекущиеДанные.Курс = ПолучитьКурс(ТекущиеДанные.Валюта, ТекущиеДанные.ДатаРасхода);
	ТекущиеДанные.ФормаОплаты = ФормаОплатыХранилища(ТекущиеДанные.ХранилищеДенег);
	ПересчитатьСуммуПрочихРасходов();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРеализацииКлиентам(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументыРеализацииКлиентамЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать это событие. Записать?"), РежимДиалогаВопрос.ДаНет);

        Возврат;
	КонецЕсли;

	СоздатьДокументыРеализацииКлиентамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРеализацииКлиентамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;

	СоздатьДокументыРеализацииКлиентамФрагмент();

КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыРеализацииКлиентамНаСервере()

	ЧислоДокументов = 0;

	Для Каждого СтрокаКлиент Из Объект.Клиенты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКлиент.ДокументРеализации) Тогда
			ДокументРеализации = Документы.РасходыТовара.СоздатьДокумент();
			ДокументРеализации.Адрес = Объект.АдресПомещения;
			// ДокументРеализации.Валюта =
			ДокументРеализации.ВидЦен = Объект.ВидЦен;
			// ДокументРеализации.ВидДокумента
			ДокументРеализации.Дата = Объект.Дата;
			ДокументРеализации.ДатаОповещения = Объект.Дата;
			ДокументРеализации.ДатаОтправки = Объект.Дата;
			// ДокументРеализации.ДатаОтсрочки
			// ДокументРеализации.ДатаОтчетаПоКомиссии
			// ДокументРеализации.ДатаСчета
			// ДокументРеализации.Договор
			// ДокументРеализации.ЗаказДатаПлана
			// ДокументРеализации.ЗаказДатаФакта
			// ДокументРеализации.ЗаказКлиента
			// ДокументРеализации.ЗаказНомерПриРегистрации
			// ДокументРеализации.ЗаказОплачен
			ДокументРеализации.ЗаказСогласован = ИСТИНА;
			ДокументРеализации.КлиентОповещен = ИСТИНА;
			ДокументРеализации.КлиентПоставщик = СтрокаКлиент.Клиент;
			ДокументРеализации.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По") + " " + СокрЛП(Объект.Наименование) + " " + СокрЛП(СтрокаКлиент.Результат);
			ДокументРеализации.Курс = 1;
			// ДокументРеализации.НалогообложениеНДС
			ДокументРеализации.НаправлениеДеятельности = Объект.Направление;
			// ДокументРеализации.НомерСчета
			// ДокументРеализации.Оплаты
			ДокументРеализации.Организация = Объект.Организации;
			ДокументРеализации.ОтветственныйЗаДоставку = Объект.Сотрудник;
			// ДокументРеализации.ПартияПриобретения
			ДокументРеализации.ПередачаДляКомиссионнойТорговли = ЛОЖЬ;
			ДокументРеализации.ПКОНапечатан = ЛОЖЬ;
			// ДокументРеализации.ПланОплаты
			// ДокументРеализации.ПоступилоДенег
			Если НЕ Объект.Склады.Количество() = 0 Тогда

				ДокументРеализации.Склад = Объект.Склады[0].Склад;
			Иначе
				ДокументРеализации.Склад = Объект.СкладСписанияРекламнойПродукции;
			КонецЕсли;

			ДокументРеализации.Сотрудник = Объект.Сотрудник;
			// ДокументРеализации.СпособДоставки
			// ДокументРеализации.Статус
			// ДокументРеализации.ТалонТрек
			// ДокументРеализации.Телефон	= Объект.Телефоны.
			ДокументРеализации.ТовараВКоличестве = Объект.ТовараВКоличестве;
			ДокументРеализации.ТовараНаСумму  	= Объект.ТовараНаСумму;
			ДокументРеализации.ТоварОтправлен 	= ИСТИНА;
			ДокументРеализации.ХранилищеДенег 	= Объект.ХранилищеДенег;
			ДокументРеализации.ЭтоЗаказ 		= ЛОЖЬ;

			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара = ДокументРеализации.Товары.Добавить();
				СтрокаТовара.Номенклатура 	= СтрокаТовара.Номенклатура;
				СтрокаТовара.СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
				СтрокаТовара.Количество 	= СтрокаТовара.Количество;
				СтрокаТовара.Цена 			= СтрокаТовара.Цена;
				СтрокаТовара.Сумма 			= СтрокаТовара.Сумма;
				СтрокаТовара.ОСтроке 		= СтрокаТовара.ОСтроке;

				Если СтрокаТовара.Количество = 0 Тогда
					СтрокаТовара.Количество = 1;
				КонецЕсли;
			КонецЦикла;

			ДокументРеализации.Записать();
			СтрокаКлиент.ДокументРеализации = ДокументРеализации.Ссылка;
			ЧислоДокументов = ЧислоДокументов + 1;
		КонецЕсли;

	КонецЦикла;

	Если НЕ ЧислоДокументов = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создано документов") + ": " + СокрЛП(ЧислоДокументов) + ". " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Их следует открыть и заполнить."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыРеализацииКлиентамФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СоздатьДокументыРеализацииКлиентамНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ОбновитьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(Значение, ДополнительныеПараметры) Экспорт

	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);

	Если ЗначениеЗаполнено(Причина) Тогда
		Закрыть();
		ПоказатьЗначение(Неопределено,  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	ОбновитьНаименование();
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

Процедура УстановитьЗначенияПоУмолчанию()

	ВидСобытия = Объект.ВидСобытия;

	Если ВестиУчетПоКлиентам
		И ВидСобытия.УчаствуетКлиент
		И НЕ ЗначениеЗаполнено(Объект.Клиент)
		И НЕ ВидСобытия.УчаствуетНесколькоКлиентов Тогда

		Объект.Клиент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
	КонецЕсли;

	Если ВестиУчетПоПоставщикам
		И ВидСобытия.УчаствуетПоставщик
		И НЕ ЗначениеЗаполнено(Объект.Поставщик)
		И НЕ ВидСобытия.УчаствуетНесколькоПоставщиков Тогда

		Объект.Поставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция   ФормаОплатыХранилища(Знач ХранилищеДенег)

	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.ФормаОплаты;
	Иначе

		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура КлиентыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ДоговораПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура НаправленияПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПомещенияПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура РекламнаяПродукцияПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ЗадействованныеСредстваПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКлиентовПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура АдресаПочтыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура РегионыИЛокацииПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура СкладыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСобытияПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыДанныхПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура СобственныеРасходыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры
