// sza150605-2236 
// sza150111-0238 НЧ
// sza141129-0322
// sza141112-2327
// sza140904-0138
// sza140710-0151  
// sza140613-1615 : 
// sza140612-1400 : 

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ОбновитьЦеныВозврата();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараЕдиницаИзмеренияПриИзменении(Элемент)
	ПересчитатьСтроку(, ИСТИНА, ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку(, ИСТИНА, ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараНоменклатураПриИзменении(Элемент)
	ПересчитатьСтроку(, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараСерияНоменклатурыПриИзменении(Элемент)
	ПересчитатьСтроку(, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараСуммаПриИзменении(Элемент)
	ПересчитатьСтроку(ИСТИНА, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараЦенаПриИзменении(Элемент)
	ПересчитатьСтроку(, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВозвратаПриИзменении(Элемент)
	ОбновитьЦеныВозврата();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиЗаТоварВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеньгиЗаТовар.ТекущиеДанные;
	ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
	ТекущаяСтрока.сумма = ТекущаяСтрока.сумма / ?(ТекущаяСтрока.Курс = 0, 1, ТекущаяСтрока.Курс);
	ДеньгиЗаТоварПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиЗаТоварКурсПриИзменении(Элемент)
	ДеньгиЗаТоварПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиЗаТоварПриИзменении(Элемент)
	
	ДеньгиЗаТоварПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ДеньгиЗаТоварПриИзмененииНаСервере()
	
	ИтогоДенегЗаТовар = 0;
	Для Каждого СтрокаДенег Из Объект.ДеньгиЗаТовар Цикл		
		ИтогоДенегЗаТовар = ИтогоДенегЗаТовар + СтрокаДенег.Сумма * СтрокаДенег.Курс;		
	КонецЦикла;
	ОбновитьРазницуВознаграждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиЗаТоварСуммаПриИзменении(Элемент)
	ДеньгиЗаТоварПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиЗаТоварХранилищеДенегПриИзменении(Элемент)
	ОплатаХранилищеДенегПриИзмененииНаСервере(Элементы.ДеньгиЗаТовар.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуру(Знач НоменклатураСтруктура, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач множительКоличества = 1)
	
	Номенклатура = НоменклатураСтруктура.Номенклатура;
	
	СерияНоменклатуры = Неопределено;
	ЕдиницаИзмерения  = Неопределено;
	Количество 	 = НоменклатураСтруктура.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура.Номенклатура);
	НоменклатураСтруктура.Свойство("СерияНоменклатуры", СерияНоменклатуры);
	НоменклатураСтруктура.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) и ЗначениеЗаполнено(СерияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.ВозвратНепроданногоТовара.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.ВозвратНепроданногоТовара.Добавить();
			СтрокаТовара.Номенклатура = Номенклатура;
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТовара.СерияНоменклатуры = СерияНоменклатуры;				
		КонецЕсли;	
		
		СтрокаТовара.Количество = СтрокаТовара.количество + 1;;
		Если СтрокаТовара.Цена = 0 Тогда
			Если ЗначениеЗаполнено(Объект.Клиент) Тогда
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьПОследнююЦенуРеализации(СтрокаТовара.Номенклатура, Объект.Клиент, Объект.Договор, Объект.Дата);
			КонецЕсли;
			Если СтрокаТовара.Цена = 0 Тогда 	
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если НЕ НеСтановитсяНаЭтуСтроку тогда
			Элементы.ВозвратНепроданногоТовара.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.ВозвратНепроданногоТовара.ТекущийЭлемент 	= Элементы.ВозвратНепроданногоТовараКоличество;
		КонецЕсли;
		
	ИначеЕсли не НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.ВозвратНепроданногоТовара.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.ВозвратНепроданногоТовара.ТекущийЭлемент 	= Элементы.ВозвратНепроданногоТовараКоличество;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Если ЗначениеЗаполнено(Объект.Договор.КлиентПоставщик)
			И НЕ Объект.Клиент = Объект.Договор.КлиентПоставщик Тогда
			
			Объект.Клиент = Объект.Договор.КлиентПоставщик;
			КлиентПриИзмененииНаСервере();	
		КонецЕсли;
		
		Если НЕ Объект.Договор.ПроцентКомиссионногоВознаграждения = 0 Тогда
			Объект.ОбщийПроцентКомиссионногоВознаграждения = Объект.Договор.ПроцентКомиссионногоВознаграждения;
			ПересчетКомиссионногоВознаграждения();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Договор.ВидЦен;
			ОбновитьЦеныВозврата();
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВознаграждение(Команда)
	ЗаполнитьВознаграждениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВознаграждениеНаСервере()
	
	СтрокаДенег = Объект.КомиссионноеВознаграждение.Добавить();
	СтрокаДенег.Валюта 		    = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	СтрокаДенег.ХранилищеДенег  = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
	СтрокаДенег.Курс 			= 1;
	СтрокаДенег.ДатаОплаты 		= Объект.Дата;
	СтрокаДенег.Сумма 			= Объект.Товары.Итог("СуммаКомиссионногоВознаграждения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровКомиссионера(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Клиент)
		И НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Клиента или Договор!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недостаточно данных"));
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьОстаткамиТоваровКомиссионераНаСервере();	
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОстаткамиТоваровКомиссионераЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить таблицу реализованных товаров?"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровКомиссионераЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		ЗаполнитьОстаткамиТоваровКомиссионераНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровКомиссионераДляВозврата(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Клиент)
		И НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Клиента или Договор!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недостаточно данных"));
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьОстаткамиТоваровКомиссионераНаСервере("ВозвратНепроданногоТовара");	
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОстаткамиТоваровКомиссионераДляВозвратаЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить таблицу реализованных товаров?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
			  КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровКомиссионераДляВозвратаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьОстаткамиТоваровКомиссионераНаСервере("ВозвратНепроданногоТовара");	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиТоваровКомиссионераНаСервере(Знач ИмяТаблицы = "Товары")
	
	Товары = ИмяТаблицы = "Товары";
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыПереданныеНаКомиссиюОстатки.Номенклатура,
	|	ТоварыПереданныеНаКомиссиюОстатки.СерияНоменклатуры,
	|	ТоварыПереданныеНаКомиссиюОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыПереданныеНаКомиссиюОстатки.СуммаОстаток КАК Сумма,
	|	ТоварыПереданныеНаКомиссиюОстатки.Клиент,
	|	ТоварыПереданныеНаКомиссиюОстатки.Договор,
	|	ТоварыПереданныеНаКомиссиюОстатки.Номенклатура.Родитель КАК ГруппаН
	|ИЗ РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
	|			&Дата, (&НетОтбораПоКлиенту ИЛИ Клиент = &Клиент)
	|				И (&НетОтбораПоДоговору ИЛИ Клиент = &Договор)) КАК ТоварыПереданныеНаКомиссиюОстатки";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Клиент", Объект.Клиент);
	Запрос.УстановитьПараметр("НетОтбораПоДоговору", не ЗначениеЗаполнено(Объект.Договор));
	Запрос.УстановитьПараметр("НетОтбораПоКлиенту", НЕ ЗначениеЗаполнено(Объект.Клиент));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ Объект.Клиент = ВыборкаДетальныеЗаписи.Клиент Тогда
			Объект.Клиент = ВыборкаДетальныеЗаписи.Клиент;
			КлиентПриИзмененииНаСервере();			
		КонецЕсли;
		
		Если НЕ Объект.Договор = ВыборкаДетальныеЗаписи.Договор Тогда
			Объект.договор = ВыборкаДетальныеЗаписи.договор;
			ДоговорПриИзмененииНаСервере();
		КонецЕсли;
		
		СтрокаТовара = Объект[ИмяТаблицы].Добавить();
		СтрокаТовара.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
		СтрокаТовара.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		СтрокаТовара.Количество 		= ВыборкаДетальныеЗаписи.Количество;
		СтрокаТовара.Сумма 				= ВыборкаДетальныеЗаписи.Сумма;
		СтрокаТовара.Цена 				= ?(СтрокаТовара.Количество = 0, СтрокаТовара.Сумма, СтрокаТовара.Сумма / СтрокаТовара.Количество);
		
		Если Товары
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ГруппаН) Тогда
			
			СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения = ВыборкаДетальныеЗаписи.ГруппаН.ПроцентКомиссионногоВознаграждения;
		КонецЕсли;		
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Если Товары Тогда		
		ИмяВторойТаблицы = "ВозвратНепроданногоТовара";
	Иначе
		ИмяВторойТаблицы = "Товары";
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект[ИмяВторойТаблицы] Цикл		
		СтруктураОтбора = Новый Структура("Номенклатура, СерияНоменклатуры", СтрокаТовара.Номенклатура, СтрокаТовара.СерияНоменклатуры);
		НеобходимыеСтроки = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
		Если НЕ НеобходимыеСтроки = Неопределено
			И НЕ НеобходимыеСтроки.Количество() = 0 Тогда
			
			НеобходимыеСтроки[0].Количество = НеобходимыеСтроки[0].Количество - СтрокаТовара.Количество;
			НеобходимыеСтроки[0].Сумма = НеобходимыеСтроки[0].Количество * НеобходимыеСтроки[0].Цена;
			
			Если НеобходимыеСтроки[0].Количество <= 0 Тогда
				МассивНаУдаление.Добавить(НеобходимыеСтроки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Если НЕ МассивНаУдаление.Количество() = 0 Тогда
		
		Для Каждого ЭлементМассива Из МассивНаУдаление Цикл
			Если Товары Тогда		
				Объект.Товары.Удалить(ЭлементМассива);
			Иначе
				Объект.ВозвратНепроданногоТовара.Удалить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Если Товары Тогда		
		ПересчетКомиссионногоВознаграждения();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСуммеРеализации(Команда)
	ЗаполнитьПоСуммеРеализацииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСуммеРеализацииНаСервере()
	
	СтрокаДенег = Объект.ДеньгиЗаТовар.Добавить();
	СтрокаДенег.Валюта 		    = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	СтрокаДенег.ХранилищеДенег  = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
	СтрокаДенег.Курс 			= 1;
	СтрокаДенег.ДатаОплаты 		= Объект.Дата;
	СтрокаДенег.Сумма 			= Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		Если ЗначениеЗаполнено(Объект.Клиент.Родитель)
			И НЕ Объект.Клиент.Родитель.ПроцентКомиссионногоВознаграждения = 0 Тогда
			
			Объект.ОбщийПроцентКомиссионногоВознаграждения = Объект.Клиент.Родитель.ПроцентКомиссионногоВознаграждения;
			ПересчетКомиссионногоВознаграждения();	
		КонецЕсли;
		
		Элементы.КомиссионерЧастноеЛицо.Видимость = НЕ Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
		
		Если ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Клиент.ВидЦен;
			ОбновитьЦеныВозврата();
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерЧастноеЛицо(Команда)
	
	Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	КлиентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионноеВознаграждениеВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КомиссионноеВознаграждение.ТекущиеДанные;
	ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
	ТекущаяСтрока.сумма = ТекущаяСтрока.сумма / ?(ТекущаяСтрока.Курс = 0, 1, ТекущаяСтрока.Курс);
	КомиссионноеВознаграждениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионноеВознаграждениеКурсПриИзменении(Элемент)
	КомиссионноеВознаграждениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомиссионноеВознаграждениеПриИзменении(Элемент)
	
	КомиссионноеВознаграждениеПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура КомиссионноеВознаграждениеПриИзмененииНаСервере()
	
	ИтогоВознаграждение = 0;
	Для Каждого СтрокаДенег Из Объект.ДеньгиЗаТовар Цикл		
		ИтогоВознаграждение = ИтогоВознаграждение + СтрокаДенег.Сумма * СтрокаДенег.Курс;		
	КонецЦикла;
	ОбновитьРазницуВознаграждения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионноеВознаграждениеСуммаПриИзменении(Элемент)
	КомиссионноеВознаграждениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомиссионноеВознаграждениеХранилищеДенегПриИзменении(Элемент)
	КомиссионноеХранилищеДенегПриИзмененииНаСервере(Элементы.КомиссионноеВознаграждение.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура КомиссионноеХранилищеДенегПриИзмененииНаСервере(Знач ТекСтрока)	
	
	ТекущаяСтрока = Объект.КомиссионноеВознаграждение[ТекСтрока];
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ХранилищеДенег) Тогда
		ТекущаяСтрока.ФормаОплаты = ТекущаяСтрока.ХранилищеДенег.ФормаОплаты;
		ТекущаяСтрока.Валюта	  = ТекущаяСтрока.ХранилищеДенег.Валюта;
		ТекущаяСтрока.Курс        = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
		
		КомиссионноеВознаграждениеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРазницуВознаграждения()
	
	Разница = ИтогоДенегЗаТовар - ИтогоВознаграждение;
	Элементы.Разница.Видимость = ВестиУчетДвиженияДенег И НЕ Разница = 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныВозврата()
	
	Если НЕ ДокументЗаблокирован Тогда
		Для Каждого СтрокаТовара Из Объект.ВозвратНепроданногоТовара Цикл
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);		
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000382") Тогда		
		Элементы.КомиссионерЧастноеЛицо.Видимость = ЛОЖЬ;
		Элементы.ТоварыЗаполнитьОстаткамиТоваровКомиссионера.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыЗаполнитьОстаткамиТоваровКомиссионера1.Видимость = ЛОЖЬ;
		Элементы.ДеньгиЗаТоварЗаполнитьПоСуммеРеализации.Видимость 		= ЛОЖЬ;
		Элементы.КомиссионноеВознаграждениеЗаполнитьВознаграждение.Видимость = ЛОЖЬ;
		Элементы.ОбработкаТаблицы1.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.КомиссионерЧастноеЛицо.Видимость = ИСТИНА;
		Элементы.ТоварыЗаполнитьОстаткамиТоваровКомиссионера.Видимость 	= ИСТИНА;
		Элементы.ТоварыЗаполнитьОстаткамиТоваровКомиссионера1.Видимость = ИСТИНА;
		Элементы.ДеньгиЗаТоварЗаполнитьПоСуммеРеализации.Видимость 		= ИСТИНА;
		Элементы.КомиссионноеВознаграждениеЗаполнитьВознаграждение.Видимость = ИСТИНА;
		Элементы.ОбработкаТаблицы1.Видимость = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	ОбработатьПолученныйШКНаСервере(ТекКод);	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ)
	
	НоменклатураСтруктура = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
	Если НЕ НоменклатураСтруктура = Неопределено Тогда
		ДобавитьНоменклатуру(НоменклатураСтруктура, НеСтановитсяНаЭтуСтроку);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОплатаХранилищеДенегПриИзмененииНаСервере(Знач ТекСтрока)	
	
	ТекущаяСтрока = Объект.ДеньгиЗаТовар[ТекСтрока];
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ХранилищеДенег) Тогда
		ТекущаяСтрока.ФормаОплаты = ТекущаяСтрока.ХранилищеДенег.ФормаОплаты;
		ТекущаяСтрока.Валюта	  = ТекущаяСтрока.ХранилищеДенег.Валюта;
		ТекущаяСтрока.Курс        = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
		
		ДеньгиЗаТоварПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			Если Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетКомиссионногоВознаграждения()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.СуммаКомиссионногоВознаграждения = СтрокаТовара.сумма / 100 * ?(СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения = 0, Объект.ОбщийПроцентКомиссионногоВознаграждения, СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения);		      	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ЧастныйПроцентКомиссионногоВознаграждения(Знач Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура.Родитель)
		И НЕ Номенклатура.Родитель.ПроцентКомиссионногоВознаграждения = 0 Тогда
		
		Возврат Номенклатура.Родитель.ПроцентКомиссионногоВознаграждения;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция   ПолучитьКоличествоНоменклатуры(Знач Номенклатура)
	
	Если ЗначениеЗаполнено(Номенклатура)
		И НЕ Номенклатура.КоличествоПоУмолчанию = 0 Тогда
		
		Результат = Номенклатура.КоличествоПоУмолчанию;
	Иначе
		Результат = 1;
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции // 

&НаКлиенте
Процедура ПересчитатьСтроку(Знач ИзСуммы = ЛОЖЬ, Знач ДляВозврата = ЛОЖЬ, СтрокаТовара = Неопределено, Знач ИзЦены = ЛОЖЬ)
	
	Если СтрокаТовара = Неопределено Тогда
		Если ДляВозврата Тогда
			СтрокаТовара = Элементы.ВозвратНепроданногоТовара.ТекущиеДанные;
		Иначе
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;	
	КонецЕсли;
	
	Номенклатура 	 = СтрокаТовара.Номенклатура;
	ЕстьНоменклатура = ЗначениеЗаполнено(Номенклатура);
	
	Если ЕстьНоменклатура
		И ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
		И НЕ ОбщийМодульСервер.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
		
		СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
		СтрокаТовара.Количество = 1;
		
	ИначеЕсли СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Количество = ПолучитьКоличествоНоменклатуры(Номенклатура);
	КонецЕсли;	
	
	Если НЕ ДляВозврата 
		И ЕстьНоменклатура Тогда
		
		СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения = ЧастныйПроцентКомиссионногоВознаграждения(Номенклатура);
	КонецЕсли;
	
	Если НЕ ИзСуммы 
		И НЕ ИзЦены Тогда
		
		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦенРеализатора, Объект.Дата, ИСТИНА, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, ИСТИНА, СтрокаТовара.ЕдиницаИзмерения);
		
		Если НЕ ДляВозврата Тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Цена, , ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены"), Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли НЕ ИзЦены Тогда
		СтрокаТовара.Цена = ?(СтрокаТовара.Количество = 0, СтрокаТовара.Сумма, СтрокаТовара.Сумма / СтрокаТовара.Количество);
	КонецЕсли;
	СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
	
	Если НЕ ДляВозврата Тогда
		СтрокаТовара.СуммаКомиссионногоВознаграждения = СтрокаТовара.сумма / 100 * ?(СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения = 0, Объект.ОбщийПроцентКомиссионногоВознаграждения, СтрокаТовара.ЧастныйПроцентКомиссионногоВознаграждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Клиент;	
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаТовары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000380", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		УчетПоСериям 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
		УчетВалют 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетВаловойПрибыли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		ВестиУчетПоХранилищам	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ВестиУчетПоСкладам 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");		
		ИспользоватьСторнированиеДокументов	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.Комментарий, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦенРеализатора) Тогда
				Объект.ВидЦенРеализатора =ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРеализатораПоУмолчанию");
			КонецЕсли;
			
			Если Объект.ОбщийПроцентКомиссионногоВознаграждения = 0 Тогда
				Объект.ОбщийПроцентКомиссионногоВознаграждения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроцентКомиссионногоВознагражденияПоУмолчанию");	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Параметры.Комиссионер) Тогда
				Объект.Клиент = Параметры.Комиссионер;
				КлиентПриИзмененииНаСервере();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");		
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				ОбновитьЦеныВозврата();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаВозврата) Тогда
				Объект.ДатаВозврата = Объект.Дата;
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
			ДоговорПриИзмененииНаСервере();			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;
			КонецЕсли;
			Элементы.ТоварыЦена.Доступность	= ЛОЖЬ;
			Элементы.ВозвратНепроданногоТовараЦена.Доступность 	= ЛОЖЬ;
		КонецЕсли;
		
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляРасхода");
		Элементы.ДеньгиЗаТоварФормаОплаты.Видимость = НЕ ВестиУчетПоХранилищам;
		Элементы.РегистрируйтеТолькоТеДвиженияДенегКоторыеДействительноФактическиПроизводились.Видимость = ВестиУчетДвиженияДенег;
		Элементы.КомиссионноеВознаграждениеФормаОплаты.Видимость = НЕ ВестиУчетПоХранилищам;
		
		ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ВозвратНепроданногоТовараКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ГруппаДеньгиЗаТовар.ТолькоПросмотр = ИСТИНА;
				Элементы.ГруппаКомиссионноеВознаграждение.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаДеньгиЗаТовар.Видимость 	= ЛОЖЬ;
				Элементы.ГруппаКомиссионноеВознаграждение.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ДеньгиЗаТоварПриИзмененииНаСервере();
		КомиссионноеВознаграждениеПриИзмененииНаСервере();
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	ОбновитьЦеныВозврата();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПересчитатьСтроку(, , ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	ТекущиеДанные 	 = Элементы.Товары.ТекущиеДанные;	
	ТекущиеДанные.ЧастныйПроцентКомиссионногоВознаграждения = (ТекущиеДанные.сумма / 100) / ?(ТекущиеДанные.СуммаКомиссионногоВознаграждения = 0, 1, ТекущиеДанные.СуммаКомиссионногоВознаграждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПересчитатьСтроку(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчитатьСтроку(, , , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧастныйПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтр = Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараПриАктивизацииСтроки(Элемент)
	ТекСтр = Элементы.ВозвратНепроданногоТовара.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	// Если ВестиУчетПоСкладам
	// 	И ЗначениеЗаполнено(Объект.Склад) Тогда
	// 	
	// 	ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	// КонецЕсли;	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.Клиент);
	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	СтрокаТовара = ТекСтр;	
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекСтр.Номенклатура = Номенклатура;	
		
		ПересчитатьСтроку(, , ТекСтр);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТовара = Элементы.ВозвратНепроданногоТовара.ТекущиеДанные;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.Клиент);
	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.ДатаВозврата);
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		СтрокаТовара.Номенклатура = Номенклатура;	
		
		ПересчитатьСтроку(, ИСТИНА);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, Объект.Клиент);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПересчитатьСтроку(, , ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратНепроданногоТовараНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаТовара = Элементы.ВозвратНепроданногоТовара.ТекущиеДанные;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, СтрокаТовара.Номенклатура, Объект.Клиент);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПересчитатьСтроку(, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ОтчетыКомиссионеров"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенРеализатораПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦенРеализатора) Тогда
		ВидЦенРеализатораПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидЦенРеализатораПриИзмененииНаСервере()
	
	Если НЕ ДокументЗаблокирован Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦенРеализатора, Объект.Дата, ИСТИНА, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.Клиент, Объект.Договор, Объект.Организация, , Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

ТекСтр = Неопределено;
