// sza151210-2347 про
// sza150620-0128 
// sza150111-0528 НЧ
// sza140722-0121 склад
// sza140701-1329  
// sza140613-1417 : 
// sza140612-1253 : 
Процедура ОбработатьДвиженияДляНабора(Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, Этоклиент, ЗначениеЗаполненоКлиент, ВалютаЦены) // для вложенных наборов
	
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтрокаСоставаНабора.Номенклатура) Тогда
			обработатьДвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, Этоклиент, ЗначениеЗаполненоКлиент, ВалютаЦены);
		Иначе
			
			Количество = КоличествоВх * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;
			Если ВалютаЦены = Неопределено Тогда
				СуммаТов = СуммаЭлемента;
			Иначе
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, , ВалютаЦены, Дата);
			КонецЕсли;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
				Движение.Период 		= ДатаВозврата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад;
				Движение.Количество 	= Количество;				
				Движение.Сумма 			= СуммаТов;
				// Движение.СерияНоменклатуры = // серийный состав набора насильно разворачивается в таблице
				Движение.Комментарий	= Комментарий;
				Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиент;
			КонецЕсли;
			
			Если ВестиУчетВаловойПрибыли Тогда  				
				Если Этоклиент тогда					
					
					ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, ДатаВозврата, , ПредопределенныйТовар, Склад);
					
					Если ЦенаСписания = 0 
						ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество)) = 0 Тогда
						
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
						Движение.Количество   = Количество;
						Движение.Период 	  = ДатаВозврата;
						Движение.Номенклатура = НоменклатураСостава;
							//Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
							//	Движение.СерияНоменклатуры = СерияНоменклатуры; //!!!
							//КонецЕсли;
						Движение.Комментарий  = Комментарий;
						Движение.Склад		  = Склад;
						
						Если ЦенаСписания = 0 
							ИЛИ ПредопределенныйТовар
							ИЛИ Количество = 0 Тогда
							
							Движение.Сумма = СуммаТов;
							Движение.ПроцентНаценки = 100;
							
						Иначе
							Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);						
							Цена 			= СуммаТов / Количество;
							// Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) -100;
							Если НЕ ВалютаЦены = Неопределено Тогда
								Цена = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
							КонецЕсли;
							Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
							Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
							
						КонецЕсли; 				
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ОбработатьНабор

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
		НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
		ВидЦен 	= ДанныеЗаполнения.ВидЦен;
		Договор = ДанныеЗаполнения.Договор;
		Клиент 	= ДанныеЗаполнения.КлиентПоставщик;
		Склад 	= ДанныеЗаполнения.Склад;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		
		Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
			НоваяСтрока.Количество 		 = ТекСтрокаТовара.Количество;
			НоваяСтрока.Номенклатура 	 = ТекСтрокаТовара.Номенклатура;
			НоваяСтрока.ОСтроке 			= ТекСтрокаТовара.ОСтроке;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
			НоваяСтрока.Цена 	= ТекСтрокаТовара.Цена;
			НоваяСтрока.Сумма 	= НоваяСтрока.Цена * НоваяСтрока.Количество;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
		
	Иначе
		Если НЕ Отказ Тогда
			
			Движения.ВаловаяПрибыль.Записать();
			Движения.Деньги.Записать();
			Движения.Продажи.Записать();
			Движения.ПродажиСотрудников.Записать();
			Движения.Расчеты.Записать();
			Движения.РасчетыСОтсрочкой.Записать();
			Движения.Товары.Записать();
			движения.ТоварыПереданныеНаКомиссию.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			ТаблицаЦенСписания = Неопределено;
			ЗначениеЗаполненоКлиент = ЗначениеЗаполнено(клиент);
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(ВидЦен)
				И ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
				И НЕ ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
				
				ВалютаЦены = ВидЦен.ВалютаЦены;
			Иначе
				ВалютаЦены = Неопределено;
			КонецЕсли;
			
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			ВестиУчетПродажСотрудников 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
			НЕЗначениеЗаполненоВалютаЦены 		= НЕ ЗначениеЗаполнено(ВалютаЦены);
			ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионера = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионера");
			
			ВестиУчетВаловойПрибыли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
			Если ВестиУчетВаловойПрибыли тогда 			
				СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Ссылка, Склад, ДатаВозврата, ЛОЖЬ, "ВозвратНепроданногоТовара");
				ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;			
			КонецЕсли;
			
			ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
			Если ВестиУчетДвиженияДенег Тогда
				
				СтатьяДоходовОтРеализации = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
				
				Для Каждого ТекСтрокаДеньгиЗаТовар Из ДеньгиЗаТовар Цикл
					
					Движение = Движения.Деньги.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = ТекСтрокаДеньгиЗаТовар.ДатаОплаты;
					Движение.ФормаОплаты = ТекСтрокаДеньгиЗаТовар.ФормаОплаты;
					Движение.Валюта 	 = ТекСтрокаДеньгиЗаТовар.Валюта;
					Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(ТекСтрокаДеньгиЗаТовар.Сумма, , ТекСтрокаДеньгиЗаТовар.Валюта, ТекСтрокаДеньгиЗаТовар.ДатаОплаты);
					Движение.СуммаВВалюте   = ТекСтрокаДеньгиЗаТовар.Сумма;
					Движение.ХранилищеДенег = ТекСтрокаДеньгиЗаТовар.ХранилищеДенег;
					Движение.Статья 	 = СтатьяДоходовОтРеализации;
					
				КонецЦикла;
				
				СтатьяОплатыКомиссионогоВознаграждения = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОплатаКомиссионногоВознаграждения");
				
				Для Каждого ТекСтрокаКомиссионноеВознаграждение Из КомиссионноеВознаграждение Цикл
					
					Движение = Движения.Деньги.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Период 	 = ТекСтрокаКомиссионноеВознаграждение.ДатаОплаты;
					Движение.ФормаОплаты = ТекСтрокаКомиссионноеВознаграждение.ФормаОплаты;
					Движение.Валюта 	 = ТекСтрокаКомиссионноеВознаграждение.Валюта;
					Движение.Сумма  	 =  ОбщийМодульСервер.ПоКурсу(ТекСтрокаКомиссионноеВознаграждение.Сумма, , ТекСтрокаКомиссионноеВознаграждение.Валюта, ТекСтрокаКомиссионноеВознаграждение.ДатаОплаты);
					Движение.СуммаВВалюте   = ТекСтрокаКомиссионноеВознаграждение.Сумма;
					Движение.ХранилищеДенег = ТекСтрокаКомиссионноеВознаграждение.ХранилищеДенег;
					Движение.Статья		 = СтатьяОплатыКомиссионогоВознаграждения;
					
				КонецЦикла;
			КонецЕсли;	
			
			Для Каждого ТекСтрокаТовара Из Товары Цикл
				
				Движение = Движения.ТоварыПереданныеНаКомиссию.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
				Движение.Период 	 	= Дата;
				Движение.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				Движение.Клиент 		= Клиент;
				Движение.Договор 		= Договор;
				Движение.Количество 	= ТекСтрокаТовара.Количество;
				Движение.Сумма 			= ТекСтрокаТовара.Сумма;
				Движение.ДатаОтчетаПоКомиссии = Дата;
				Движение.Комментарий 	= ТекСтрокаТовара.ОСтроке;
				
				Если ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионера Тогда
					
					Движение = Движения.Продажи.Добавить();
					Движение.Склад			= Склад;
					Движение.Период 		= Дата;
					Движение.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
						И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда
						
						Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					КонецЕсли;										
					
					Движение.Клиент 		= ТекСтрокаТовара.Клиент;
					Движение.Договор 		= ТекСтрокаТовара.Договор;
					Движение.Количество 	= ТекСтрокаТовара.Количество;
					Движение.Сумма 			= ТекСтрокаТовара.Сумма;
					Движение.Комментарий	= ТекСтрокаТовара.ОСтроке;	
					
				КонецЕсли;				
			КонецЦикла;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Для Каждого ТекСтрокаТовара Из Товары Цикл
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Период 	 = Дата;
					Движение.Клиент 	 = Клиент;
					Движение.Договор 	 = Договор;
					Движение.Сумма 		 = ТекСтрокаТовара.СуммаКомиссионногоВознаграждения;
					Движение.Комментарий = ТекСтрокаТовара.ОСтроке;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Период 	 = Дата;
						Движение.Клиент 	 = Клиент;
						Движение.Договор 	 = Договор;
						Движение.Сумма 		 = ТекСтрокаТовара.СуммаКомиссионногоВознаграждения;
						Движение.Комментарий = ТекСтрокаТовара.ОСтроке;
						
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекСтрокаДеньгиЗаТовар Из ДеньгиЗаТовар Цикл
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Период 	 = Дата;
					Движение.Клиент  	 = Клиент;
					Движение.Договор 	 = Договор;
					Движение.Сумма 		 = ТекСтрокаДеньгиЗаТовар.Сумма * ТекСтрокаДеньгиЗаТовар.Курс;
					Движение.Комментарий = ТекСтрокаДеньгиЗаТовар.ОСтроке;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Период 	 = Дата;
						Движение.Клиент  	 = Клиент;
						Движение.Договор 	 = Договор;
						Движение.Сумма 		 = ТекСтрокаДеньгиЗаТовар.Сумма * ТекСтрокаДеньгиЗаТовар.Курс;
						Движение.Комментарий = ТекСтрокаДеньгиЗаТовар.ОСтроке;
						
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекСтрокаКомиссионноеВознаграждение Из КомиссионноеВознаграждение Цикл
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Период 	 = Дата;
					Движение.Клиент 	 = Клиент;
					Движение.Договор 	 = Договор;
					Движение.Сумма 		 = ТекСтрокаКомиссионноеВознаграждение.Сумма * ТекСтрокаКомиссионноеВознаграждение.Курс;
					Движение.Комментарий = ТекСтрокаКомиссионноеВознаграждение.ОСтроке;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Период 	 = Дата;
						Движение.Клиент 	 = Клиент;
						Движение.Договор 	 = Договор;
						Движение.Сумма 		 = ТекСтрокаКомиссионноеВознаграждение.Сумма * ТекСтрокаКомиссионноеВознаграждение.Курс;
						Движение.Комментарий = ТекСтрокаКомиссионноеВознаграждение.ОСтроке;
						
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекСтрокаВозвратНепроданногоТовара Из ВозвратНепроданногоТовара Цикл
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Период 	 = ДатаВозврата;
					Движение.Клиент 	 = Клиент;
					Движение.Договор 	 = Договор;
					Движение.Сумма 		 = ТекСтрокаВозвратНепроданногоТовара.Сумма;
					Движение.Комментарий = ТекСтрокаВозвратНепроданногоТовара.ОСтроке;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Период 	 = ДатаВозврата;
						Движение.Клиент 	 = Клиент;
						Движение.Договор 	 = Договор;
						Движение.Сумма 		 = ТекСтрокаВозвратНепроданногоТовара.Сумма;
						Движение.Комментарий = ТекСтрокаВозвратНепроданногоТовара.ОСтроке;
						
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			Для Каждого ТекСтрокаТовара Из ВозвратНепроданногоТовара Цикл
				
				Если НЕЗначениеЗаполненоВалютаЦены Тогда
					СуммаТов = ТекСтрокаТовара.Сумма;								
				Иначе
					СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Сумма, , ВалютаЦены, ДатаВозврата);
				КонецЕсли;							
				
				Номенклатура 	  = ТекСтрокаТовара.Номенклатура;
				СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
				Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
				
				Если НЕ ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
					
					ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
					ЦенаСписания = 0;
					
					Если ВестиУчетВаловойПрибыли Тогда
						
						Если ПредопределенныйТовар Тогда
							
							ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, Количество, ДатаВозврата, , ИСТИНА, Склад, СерияНоменклатуры);
							
						ИначеЕсли не ТаблицаЦенСписания = Неопределено тогда
							СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
							
							Если НЕ СтрокаЦеныСписания = Неопределено Тогда
								ЦенаСписания = СтрокаЦеныСписания.Цена;
							Иначе
								ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, ДатаВозврата, ЛОЖЬ, , , , ТекСтрокаТовара.Цена, Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
							КонецЕсли;	
							
						Иначе
							ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, ДатаВозврата, ЛОЖЬ, , , , ТекСтрокаТовара.Цена, Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
						КонецЕсли;
						
						Если ЦенаСписания = 0 
							ИЛИ не (СуммаТов - (ЦенаСписания * Количество)) = 0 тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
							Движение.Количество   = Количество;
							Движение.Период 	  = ДатаВозврата;
							Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
							Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
								Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
							КонецЕсли;
							Движение.Склад		  = Склад;
							Движение.Комментарий  = КомментарийСтроки;
							
							Если ЦенаСписания = 0 
								ИЛИ ТекСтрокаТовара.Цена = 0
								ИЛИ ПредопределенныйТовар Тогда
								
								Движение.Сумма 	= СуммаТов;
								Движение.ПроцентНаценки = 100;
								
							Иначе
								ЦенаСписания 	= СуммаТов - (ЦенаСписания * Количество);
								Движение.Сумма 	= ЦенаСписания;
								Цена = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Цена, , ВалютаЦены, ДатаВозврата);
								Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
								Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
								
							КонецЕсли; 				
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ПредопределенныйТовар 
						И НЕ Отказ Тогда
						
						Движение = Движения.Товары.Добавить();
						Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
						Движение.Период 	  = ДатаВозврата;
						Движение.Номенклатура = Номенклатура;
						Движение.Склад 		  = Склад;  				
						Движение.Количество   = Количество;					
						Движение.Сумма 		  = СуммаТов - ЦенаСписания;
						Движение.Комментарий  = КомментарийСтроки;
						Движение.СерияНоменклатуры = СерияНоменклатуры;
						Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиент;
						
					КонецЕсли;
					
				Иначе // это набор         			
					ОбработатьДвиженияДляНабора(ТекСтрокаТовара.Номенклатура, Количество, СуммаТов, ВестиУчетВаловойПрибыли, ИСТИНА, ЗначениеЗаполненоКлиент, ВалютаЦены);
					
				КонецЕсли;
				
				Если ВестиУчетПродажСотрудников Тогда
					
					Движение = Движения.ПродажиСотрудников.Добавить();
					Движение.Комментарий  = КомментарийСтроки; 
					Движение.Номенклатура = Номенклатура;
					Движение.Период 	  = ДатаВозврата;
					Движение.Сотрудник    = Сотрудник;
					Движение.Сумма  	  = -СуммаТов;
					Движение.Количество	  = -Количество;
					
				КонецЕсли;
				
				Движение = Движения.Продажи.Добавить();
				Движение.Склад			= Склад;
				Движение.Период 		= ДатаВозврата;
				Движение.Номенклатура 	= Номенклатура;
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда
					
					Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				КонецЕсли;										
				
				Движение.Клиент 		= Клиент;
				Движение.Договор 		= Договор;
				Движение.Количество 	= -Количество;
				Движение.Сумма 			= -СуммаТов;
				Движение.Комментарий	= КомментарийСтроки;
				
				Движение = Движения.ТоварыПереданныеНаКомиссию.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
				Движение.Период 	 	= ДатаВозврата;
				Движение.Номенклатура 	= Номенклатура;
				Движение.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				Движение.Клиент 		= Клиент;
				Движение.Договор 		= Договор;
				Движение.Количество 	= Количество;
				Движение.Сумма 			= ТекСтрокаТовара.Сумма;
				Движение.ДатаОтчетаПоКомиссии = Дата;
				Движение.Комментарий 	= КомментарийСтроки;
			КонецЦикла;
			
		КонецЕсли;
		
		Движения.ВаловаяПрибыль.Записывать 	= НЕ Отказ;
		Движения.Деньги.Записывать 			= НЕ Отказ;
		Движения.Продажи.Записывать 		= НЕ Отказ;
		Движения.ПродажиСотрудников.Записывать = НЕ Отказ;
		Движения.Расчеты.Записывать 		= НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать = НЕ Отказ;
		Движения.Товары.Записывать 			= НЕ Отказ;
		движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			Для Каждого СтрокаДенег Из ДеньгиЗаТовар Цикл
				Если НЕ СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
			Для Каждого СтрокаДенег Из КомиссионноеВознаграждение Цикл
				Если НЕ СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		МассивПустыхСтрок  = Новый массив;
		МассивНоменклатуры = Новый массив;
		
		Для Каждого СтрокаТовары из Товары цикл
			
			НоменклатураСтроки = СтрокаТовары.Номенклатура;
			
			Если ИспользоватьЕдиницыИзмеренияНоменклатуры
				И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
				
				НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(СтрокаТовары.ЕдиницаИзмерения) = Неопределено;
			Иначе
				НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(НоменклатураСтроки) = Неопределено;
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТовары);
				
			ИначеЕсли НоменклатураПовторяется Тогда
				
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется материал") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
				КонецЕсли;
				
			Иначе
				Если ИспользоватьЕдиницыИзмеренияНоменклатуры
					И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
					
					МассивНоменклатуры.Добавить(СтрокаТовары.ЕдиницаИзмерения);
				Иначе
					МассивНоменклатуры.Добавить(НоменклатураСтроки);
				КонецЕсли;				
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
			Товары.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		МассивПустыхСтрок  = Новый массив;
		МассивНоменклатуры = Новый массив;
		
		Для Каждого СтрокаТовары из ВозвратНепроданногоТовара цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТовары);
				
			Иначеесли не МассивНоменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
				
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется работа") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
				КонецЕсли;
				
			Иначе
				МассивНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
			ВозвратНепроданногоТовара.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		Попытка // ЭтотОбъект
			ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
			ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект, , "ВозвратНепроданногоТовара");
		Исключение 
		КонецПопытки;
		
		ТовараВКоличестве = товары.итог("Количество");
		ТовараНаСумму 	  = товары.Итог("Сумма");
		
		Если НЕ ЗначениеЗаполнено(ДатаВозврата) Тогда
			ДатаВозврата = дата;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда 	
		Попытка // ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000381", , Отказ, ЭтотОбъект);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
		
		ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);	
	КонецЕсли;		
	
КонецПроцедуры
