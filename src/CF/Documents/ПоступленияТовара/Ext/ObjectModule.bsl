//sza141117-2253 НеРегистрироватьЦеныЗаСчетЭтогоДокумента
//sza141117-0252 
//sza141101-0224 : валовая
//sza141030-2005 : допрасх по количеству
//sza141029-2338 : предоплата по заказу
//sza140821-1954 хранилища допрасх
//sza140722-0120 склад
//sza140703-1246  Склад принудительно не пустой
//sza140701-1322  
//sza140613-0202  
//sza130909-0239 : 
Процедура ЕстьРасходыПозже()
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	Если НЕ ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
		ИЛИ Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура В(&Номенклатура)
		|	И Товары.Период > &Дата
		|	И Товары.ВидДвижения = &ВидДвиженияРасход";
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
		Номенклатура = Товары.Выгрузить(, "Номенклатура");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом");
			
			Если ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю("ПредложениеВосстановленияВаловойПрибыли", , Ссылка);	
			Иначе
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ возможно был изменен задним числом:") + " " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);	
				КонецЕсли;
				Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(дата);	
				
			КонецЕсли;			
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДвиженияДляНабора(Знач Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, Знач ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль) //для вложенных наборов
	
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтрокаСоставаНабора.Номенклатура) Тогда
			ОбработатьДвиженияДляНабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль);
		Иначе
			
			Количество = КоличествоВх * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;
			Если ВалютаЦены = Неопределено Тогда
				СуммаТов = СуммаЭлемента;
			Иначе
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, , ВалютаЦены, Дата);
			КонецЕсли;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад;	
				Движение.Количество 	= Количество;				
				Движение.Сумма 			= СуммаТов;
				//Движение.СерияНоменклатуры = //серийный состав набора насильно разворачивается в таблице
				Движение.Комментарий	= Комментарий;
				Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
			КонецЕсли;
			
			Если ВестиУчетВаловойПрибыли 
				И ЭтоКлиент тогда
				
				//ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата);
				//
				//Если ЦенаСписания = 0 
				//	И НЕ 
				СтруктураСреднейВаловойПрибыли = ОбщийМодульТоварСервер.ПолучитьСреднююВаловуюПрибыльРеализации(Номенклатура, Дата, Ссылка, ИСТИНА);
				
				Если НЕ СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль = 0 Тогда
					//		
					//	КонецЕсли;
					//
					//если ЦенаСписания = 0 
					//	ИЛИ не (СуммаТов - (ЦенаСписания * Количество)) = 0 тогда
					
					Движение = Движения.ВаловаяПрибыль.Добавить();
					Движение.Количество   = Количество;
					Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
					Движение.Период 	  = Дата;
					Движение.Номенклатура = НоменклатураСостава;
					Движение.Комментарий  = Комментарий;
					Движение.Склад		  = Склад;
					
					//	Если ЦенаСписания = 0 
					//		ИЛИ ПредопределенныйТовар
					//		ИЛИ Количество = 0 Тогда
					//		
					//		Движение.Сумма = СуммаТов;
					//		Движение.ПроцентНаценки = 100;
					//		
					//	Иначе
					//		Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);						
					//		Цена 			= СуммаТов / Количество;
					//		Если НЕ ВалютаЦены = Неопределено Тогда
					//			Цена = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
					//		КонецЕсли;
					//		
					//		Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
					//		Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
					//		
					//	КонецЕсли; 				
					//КонецЕсли;
					//				
					Движение.Сумма 	= (СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль * ?(Количество = 0, 1, Количество));
					Движение.ПроцентНаценки = СтруктураСреднейВаловойПрибыли.ПроцентНаценки;
					Движение.РентабельностьПродаж = СтруктураСреднейВаловойПрибыли.РентабельностьПродаж;
					//						КонецЕсли;
					//	
				КонецЕсли;	
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры //ОбработатьНабор

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ОбработкаПриЗаполнении(ДанныеЗаполнения);
КонецПроцедуры

Процедура ОбработкаПриЗаполнении(Знач ДанныеЗаполнения) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если НЕ ЗначениеЗаполнено(дата) Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;			
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 	 = 1;
			НоваяСтрока.Номенклатура = ДанныеЗаполнения.ссылка;
			НоваяСтрока.Цена 		 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ЛОЖЬ, 1, , , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
			НоваяСтрока.Сумма 		 = НоваяСтрока.Цена * НоваяСтрока.Количество; 
			
			ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			
			Если ДанныеЗаполнения.ЭтоЗаказ Тогда
				ЗаказПоставщику = ДанныеЗаполнения.ссылка;
			Иначе
				ЗаказКлиента	= ДанныеЗаполнения.ЗаказКлиента;
			КонецЕсли;
			
			ВыбылоДенег 		= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик 	= ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 				= ДанныеЗаполнения.ВидЦен;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;			
			ЗаказПоставщику		= ДанныеЗаполнения.ЗаказПоставщику; 
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			ПартияПриобретения  = ДанныеЗаполнения.ПартияПриобретения;
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			ТалонТрек 			= ДанныеЗаполнения.ТалонТрек;
			ДатаОтправки 		= ДанныеЗаполнения.ДатаОтправки;
			СпособДоставки		= ДанныеЗаполнения.СпособДоставки;
			ДатаОтсрочки    	= ДанныеЗаполнения.ДатаОтсрочки;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.ЗаказПоставщику	= ТекСтрокаТовара.ЗаказПоставщику;
				НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
				НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
				НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			//как оприходование
			ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				Если ТекСтрокаТовара.КоличествоРазница >0 тогда
					НоваяСтрока = Товары.Добавить(); 				
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовара.СуммаРазница;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			ДанныеЗаполненияЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ЗаказКлиента = ДанныеЗаполнения.ссылка;
				ВидЦен 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			Иначе       //возврат
				ЗаказКлиента    = ДанныеЗаполнения.ЗаказКлиента;
				ВыбылоДенег 	= ДанныеЗаполнения.ПоступилоДенег;			
				КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;
				ДокументРеализации = ДанныеЗаполнения.ссылка;
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ВидЦен) Тогда			
				Валюта = ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			ПередачаДляКомиссионнойТорговли = ДанныеЗаполнения.ПередачаДляКомиссионнойТорговли;
			Сумма = 0;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				количество = ТекСтрокаТовара.Количество;
				
				НоваяСтрока.Количество 		= Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
				
				Если ДанныеЗаполненияЭтоЗаказ Тогда
					НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ТекСтрокаТовара.Номенклатура, ВидЦен, дата, ЛОЖЬ, Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);	
					НоваяСтрока.Сумма			= НоваяСтрока.Цена * количество;
				Иначе     //возврат
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
				КонецЕсли;
				Сумма = Сумма + НоваяСтрока.Сумма;
			КонецЦикла;
			
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ТовараНаСумму 		= Сумма;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УстановкиЦен") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;
			Комментарий = ДанныеЗаполнения.Комментарий;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.Цена 		 = ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;             	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
		
	Иначе
		Если НЕ Отказ Тогда
			
			ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
			
			Движения.Товары.Записать();
			Движения.Деньги.Записать();
			Движения.ВаловаяПрибыль.Записать();
			Движения.ЗаказыПоставщикам.Записать();
			Движения.Закупки.Записать();
			Движения.ОплатаПоЗаказам.Записать();
			Движения.Продажи.Записать();
			Движения.Расчеты.Записать();
			Движения.РасчетыСПоставщиками.Записать();
			Движения.РасчетыСОтсрочкой.Записать();
			Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			Движения.ПродажиСотрудников.Записать();
			Движения.ТоварыПереданныеНаКомиссию.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
			ЭтоКлиент 						 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
			ВестиУчетЗаказовПоставщикам 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			ВестиУчетПоКлиентам         	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
			ВестиУчетПоПоставщикам      	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
			ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
			
			ВестиУчетПродажСотрудников  = НЕ ЭтоЗаказ И ЭтоКлиент И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
			ВестиУчетВаловойПрибыли 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
			ВестиУчетВалют				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
			ВестиУчетДвиженияДенег  	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
			ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
			РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме");
			
			СуммаСтрокаРасходов 	   	= 0;
			СуммаОплатыКонтруИзТаблицы 	= 0;
			ТаблицаЦенСписания 			= Неопределено;
			
			Если ВестиУчетВалют
				И ВестиУчетДвиженияДенег
				И ЗначениеЗаполнено(Валюта)
				И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта")
				И (Курс = 1 ИЛИ КУРС = 0) Тогда
				
				Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);
			ИначеЕсли Курс = 0 Тогда
				Курс = 1;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(ВидЦен)
				И ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
				И НЕ ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
				
				ВалютаЦены = ВидЦен.ВалютаЦены;
			Иначе
				ВалютаЦены = Неопределено;
			КонецЕсли;
			
			НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
			
			РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости");
			ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = 0;
			СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0;
			КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0;
			
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров") Тогда				
				
				Для Каждого СтрокаРасхода ИЗ ДополнительныеРасходы Цикл
					
					Если НЕ СтрокаРасхода.НеРаспределятьНаСтоимость Тогда
						СуммаСтрокаРасходов = суммаСтрокаРасходов + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
					Иначе
						СуммаОплатыКонтруИзТаблицы = СуммаОплатыКонтруИзТаблицы + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
					КонецЕсли;
					
				КонецЦикла;	
				
				Для Каждого СтрокаТовара Из Товары Цикл						
					Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура)
						И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура) Тогда
						
						ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль + 1;
						
						Если НЕЗначениеЗаполненоВалютаЦены Тогда
							СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов + СтрокаТовара.Сумма;
						Иначе
							СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов + ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
						КонецЕсли;
						КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов + СтрокаТовара.Количество;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЭтоЗаказ Тогда
				Если ВестиУчетЗаказовПоставщикам Тогда
					
					Движения.ЗаказыПоставщикам.Записывать = ИСТИНА;
					Сумма = 0;
					
					Для Каждого строкатовар ИЗ Товары Цикл
						ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьПриход();
						ЗаписьРегистра.Активность 	= ИСТИНА;
						ЗаписьРегистра.Количество   = строкатовар.Количество;
						ЗаписьРегистра.Номенклатура = строкатовар.Номенклатура;
						ЗаписьРегистра.Период       = Дата;
						ЗаписьРегистра.Поставщик    = КлиентПоставщик;
						Сумма = Сумма + строкатовар.Сумма
					КонецЦикла;
					
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
						
						Движения.ОплатаПоЗаказам.Записывать   = ИСТИНА;
						ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
						ЗаписьРегистра.Период		= Дата;					
						ЗаписьРегистра.Активность 	= ИСТИНА;
						ЗаписьРегистра.Заказ   		= Ссылка;
						ЗаписьРегистра.Сумма 		= Сумма;
						
						Если ВыбылоДенег <> 0 Тогда
							ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
							ЗаписьРегистра.Период	  = Дата;
							ЗаписьРегистра.Активность = ИСТИНА;
							ЗаписьРегистра.Заказ   	  = Ссылка;
							ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				Движения.ЗаказыПоставщикам.Записывать = ВестиУчетЗаказовПоставщикам;
				
				Если НЕ ОтменитьПроверкиНаОтказ
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
					И ЗначениеЗаполнено(Договор) Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, ЭтоКлиент, Дата, ТовараНаСумму, ТовараВКоличестве, ИСТИНА, ВыбылоДенег, Ссылка);
				КонецЕсли;
				
				Если НЕ Отказ Тогда   				
					
					Если ЗначениеЗаполненоКлиентПоставщик 
						И НЕ ЭтоКлиент Тогда
						
						ПроизводительНоменклатуры 		= КлиентПоставщик.Производитель;
						ЗначениеЗаполненоПроизводитель 	= ЗначениеЗаполнено(ПроизводительНоменклатуры);						
					Иначе
						ЗначениеЗаполненоПроизводитель 	= ЛОЖЬ;
						ПроизводительНоменклатуры 		= ПредопределенноеЗначение("Справочник.Производители.ПустаяСсылка"); 						
					КонецЕсли;
					
					Если НЕ ОтменитьПроверкиНаОтказ
						И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
						И НЕ ЗначениеЗаполнено(Склад) Тогда
						
						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Склад!"), , Ссылка);	
						КонецЕсли;
						
						Отказ = ИСТИНА;					
					КонецЕсли;
					
					Если НЕ Отказ
						И ЭтоКлиент Тогда 
						
						СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ЛОЖЬ, , , ИСТИНА);
						ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;						
					КонецЕсли;
					
					Если НЕ Отказ Тогда						
						числострок = товары.Количество();
						
						Для Каждого ТекСтрокаТовара Из Товары Цикл
							
							Номенклатура      = ТекСтрокаТовара.Номенклатура;
							КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
							Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
							СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
							
							Если НЕ ОтменитьПроверкиНаОтказ
								И НЕ Отказ
								И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
								
								Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Дата - 1);
								Если Отказ Тогда
									
									ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + ТекСтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Ссылка);
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ Отказ Тогда
								
								Если ЗначениеЗаполненоПроизводитель
									И НЕ ЗначениеЗаполнено(Номенклатура.Производитель) Тогда
									
									НоменклатураОбъект 	= Номенклатура.ПолучитьОбъект();
									НоменклатураОбъект.Производитель = ПроизводительНоменклатуры;
									НоменклатураОбъект.Записать();
									
									Номенклатура 		= НоменклатураОбъект.Ссылка;									
								КонецЕсли;
								
								Если ВестиУчетЗаказовПоставщикам Тогда
									
									ЗаказПоставщикуКлиентПоставщик = Неопределено;
									Если ЗначениеЗаполнено(ТекСтрокаТовара.ЗаказПоставщику) Тогда
										ЗаказПоставщикуКлиентПоставщик = ТекСтрокаТовара.ЗаказПоставщику.КлиентПоставщик;
									ИначеЕсли ЗначениеЗаполнено(ЗаказПоставщику) Тогда
										ЗаказПоставщикуКлиентПоставщик = ЗаказПоставщику.КлиентПоставщик;
									КонецЕсли;
									
									Если ЗначениеЗаполнено(ЗаказПоставщикуКлиентПоставщик) Тогда
										ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьРасход();
										ЗаписьРегистра.Активность 	= ИСТИНА;
										ЗаписьРегистра.Количество   = Количество;
										ЗаписьРегистра.Номенклатура = Номенклатура;
										ЗаписьРегистра.Период       = Дата;
										ЗаписьРегистра.Поставщик    = ЗаказПоставщикуКлиентПоставщик;
									КонецЕсли;
									
								КонецЕсли;
								
								Если НЕЗначениеЗаполненоВалютаЦены Тогда
									СуммаТов = ТекСтрокаТовара.Сумма;								
								Иначе
									СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
								КонецЕсли;
								
								Если ТовараВКоличестве = 0 Тогда
									ТовараВКоличестве = 1;
								КонецЕсли;
								
								Если НЕ суммаСтрокаРасходов = 0 
									И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(Номенклатура) Тогда
									
									Если РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме Тогда
										Если НЕ ТовараВКоличестве = 0 тогда
											СуммаТов = СуммаТов + суммаСтрокаРасходов * (ТекСтрокаТовара.Количество / ?( КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0,  1,  КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов));	 //без едизм
										КонецЕсли;
									ИначеЕсли РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости Тогда //Распределять дополнительные расходы пропорционально на единицу номенклатуры независимо от ее стоимости и количества
										Если НЕ ТовараВКоличестве = 0 тогда
											СуммаТов = СуммаТов + суммаСтрокаРасходов / ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль;	 //без едизм
										КонецЕсли;
									Иначе
										Если НЕ СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0 Тогда											
											СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов;
										КонецЕсли;
									КонецЕсли;	
								КонецЕсли;
								
								Если НЕ ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
									
									ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
									ЦенаСписания = 0;
									
									Если ВестиУчетВаловойПрибыли 
										И ЭтоКлиент Тогда
										
										СтруктураСреднейВаловойПрибыли = ОбщийМодульТоварСервер.ПолучитьСреднююВаловуюПрибыльРеализации(Номенклатура, Дата, Ссылка, ИСТИНА);
										
										Если НЕ СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль = 0 Тогда
											Движение = Движения.ВаловаяПрибыль.Добавить();
											Движение.Количество   = Количество;
											Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
											Движение.Период 	  = Дата;
											Движение.Номенклатура = Номенклатура;
											Движение.Склад		  = Склад;
											Движение.Комментарий  = КомментарийСтроки;
											
											Движение.Сумма 	= (СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль * ?(Количество = 0, 1, Количество));
											Движение.ПроцентНаценки = СтруктураСреднейВаловойПрибыли.ПроцентНаценки;
											Движение.РентабельностьПродаж = СтруктураСреднейВаловойПрибыли.РентабельностьПродаж;
										КонецЕсли;
										
									КонецЕсли;
									
									Если НЕ ПредопределенныйТовар 
										И НЕ Отказ Тогда
										
										Движение = Движения.Товары.Добавить();
										Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
										Движение.Период 	  = Дата;
										Движение.Номенклатура = Номенклатура;
										Движение.Склад 		  = Склад;
										Движение.Количество   = Количество;
										Если ЭтоКлиент Тогда //при возврате средняя цена приходов
											Если НЕ ТаблицаЦенСписания = Неопределено тогда
												СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
												
												Если НЕ СтрокаЦеныСписания = Неопределено Тогда
													ЦенаСписания = СтрокаЦеныСписания.Цена;
												Иначе
													ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения, ИСТИНА);
												КонецЕсли;	
												
											Иначе
												ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения, ИСТИНА);
											КонецЕсли;
											Движение.Сумма 	 = Количество * ЦенаСписания;
											
										Иначе
											Движение.Сумма 	 = СуммаТов;
										КонецЕсли;
										Движение.Комментарий = КомментарийСтроки;
										Движение.СерияНоменклатуры = СерияНоменклатуры;
										Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
									КонецЕсли;
									
								Иначе //это набор         			
									ОбработатьДвиженияДляНабора(ТекСтрокаТовара.Номенклатура, Количество, СуммаТов, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль);
									
								КонецЕсли;
								
								Если ЗначениеЗаполненоКлиентПоставщик Тогда
									
									Если ВестиУчетПродажСотрудников Тогда
										Движение = Движения.ПродажиСотрудников.Добавить();
										Движение.Комментарий  = КомментарийСтроки; 
										Движение.Номенклатура = Номенклатура;
										Движение.Период 	  = Дата;
										Движение.Сотрудник    = Сотрудник;
										Движение.Сумма  	  = -СуммаТов;
									КонецЕсли;
									
									Если ЭтоКлиент Тогда
										Движение = Движения.Продажи.Добавить();
										Движение.Клиент 	= КлиентПоставщик;
										Движение.Склад		= Склад;
										Движение.Количество = -Количество;
										Движение.Сумма 		= -СуммаТов;
										Движение.Договор 	  = Договор;
										Движение.Период 	  = Дата;
										Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
										Движение.Комментарий  = КомментарийСтроки;
										
									ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик)
										И НЕ ЗначениеЗаполнено(ПартияПриобретения) Тогда
										
										Движение = Движения.Закупки.Добавить();
										Движение.Поставщик 	= КлиентПоставщик;
										Движение.Количество = Количество;
										Движение.Сумма 		= СуммаТов;
										Движение.Договор 	  = Договор;
										Движение.Период 	  = Дата;
										Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
										Движение.Комментарий  = КомментарийСтроки;
										
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;	
						
						Если НЕ отказ
							И НЕ ВыбылоДенег = 0 
							И ЗначениеЗаполнено(ЗаказКлиента)
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
							
							ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
							ЗаписьРегистра.Период     = Дата;
							ЗаписьРегистра.Активность = ИСТИНА;
							ЗаписьРегистра.Заказ   	  = Ссылка;
							ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;	//заказ/не заказ
			
			Если НЕ Отказ
				И ВестиУчетДвиженияДенег Тогда		
				
				Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
					ФормаОплаты = ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
				КонецЕсли;			
				
				Если ЭтоЗаказ 
					ИЛИ ДополнительныеРасходы.Количество() = 0 Тогда
					
					Если НЕ ВыбылоДенег = 0 тогда		
						
						СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(ВыбылоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ);
						Отказ  = СтруктураПополнения.Отказ;
						
						Если НЕ Отказ Тогда
							Если ЗначениеЗаполненоКлиентПоставщик Тогда
								Если ЭтоКлиент Тогда
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
								Иначе
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
								КонецЕсли; 			
								
							Иначе
								Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ отказ
							И НЕ СтруктураПополнения.СуммаПополнения = 0 Тогда
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= СтруктураПополнения.Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
							Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
								И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ Отказ Тогда
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата;
							Движение.Статья 		= Статья;
							Движение.Сумма 			= ВыбылоДенег * Курс;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= ВыбылоДенег;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;								
						КонецЕсли;						
					КонецЕсли;
					
				Иначе					
					СуммаДенег = 0;
					ТаблицаОстатков = Новый ТаблицаЗначений;
					ТаблицаОстатков.Колонки.Добавить("Хранилище");
					ТаблицаОстатков.Колонки.Добавить("Сумма");
					
					Для Каждого СтрокаРасхода из ДополнительныеРасходы цикл
						СуммаСтроки = СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
						СуммаДенег 	= СуммаДенег + СуммаСтроки;
						СтрокаОстатков = ТаблицаОстатков.Добавить();
						СтрокаОстатков.Хранилище = ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(СтрокаРасхода.ХранилищеДенег, СтрокаРасхода.Валюта), СтрокаРасхода.ХранилищеДенег);
						СтрокаОстатков.Сумма = СуммаСтроки;
					КонецЦикла;
					
					ТаблицаОстатков.Свернуть("Хранилище", "Сумма");
					
					Если НЕ ОтменитьПроверкиНаОтказ Тогда
						Для Каждого СтрокаОстатков из ТаблицаОстатков цикл
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СтрокаОстатков.Сумма, Дата, ?(ЗначениеЗаполнено(СтрокаОстатков.Хранилище), СтрокаОстатков.Хранилище.ФормаОплаты, ФормаОплаты), ?(ЗначениеЗаполнено(СтрокаОстатков.Хранилище), СтрокаОстатков.Хранилище.Валюта, Валюта), ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);	
							
							Если Отказ Тогда
								Прервать;	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если НЕ Отказ Тогда
						
						Для Каждого СтрокаРасхода из ДополнительныеРасходы цикл
							
							Если НЕ Отказ Тогда
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата;
								Движение.Сумма 			= СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
								Движение.Валюта 		= ?(ЗначениеЗаполнено(СтрокаРасхода.Валюта), СтрокаРасхода.Валюта, Валюта);
								Движение.СуммаВВалюте 	= СтрокаРасхода.Сумма;
								Движение.ХранилищеДенег = ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(СтрокаРасхода.ХранилищеДенег, СтрокаРасхода.Валюта), СтрокаРасхода.ХранилищеДенег);
								Движение.ФормаОплаты 	= ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(Формаоплаты, Движение.ХранилищеДенег, ИСТИНА), Формаоплаты);
								Движение.Статья 		= СтрокаРасхода.Статья;	
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;					
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ отказ
				И ЗначениеЗаполненоКлиентПоставщик Тогда   	
				
				Если ЗначениеЗаполнено(ВидЦен)
					И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
					
					КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВидЦен.ВалютаЦены, дата);
				Иначе
					КурсТовара = 1;
				КонецЕсли;
				
				ИтогоСумма = товары.Итог("Сумма") * КурсТовара;
				
				Если НЕ ЭтоЗаказ
					И НЕ ИтогоСумма = 0 Тогда
					
					Если ЭтоКлиент 
						И ВестиУчетПоКлиентам Тогда
						
						Движение 			 = Движения.Расчеты.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Клиент 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Период 	 = Дата;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
						
						Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
							Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;
						КонецЕсли;
						
					ИначеЕсли ВестиУчетПоПоставщикам Тогда
						
						Движение			 = Движения.РасчетыСПоставщиками.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Поставщик 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Период 	 = Дата;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
						
						Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда						
							Движение			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
				
				Если ВестиУчетДвиженияДенег тогда
					Если НЕ СуммаОплатыКонтруИзТаблицы = 0 тогда
						
						Если ЭтоКлиент 
							И ВестиУчетПоКлиентам Тогда
							
							Движение 			 = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Договор	 = Договор;
							Движение.Комментарий = Комментарий;//?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
							Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;//СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;//?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
								Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;//СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
							КонецЕсли;
							
						ИначеЕсли ВестиУчетПоПоставщикам тогда
							
							Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Договор	 = Договор;
							Движение.Комментарий = Комментарий;//?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
							Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;//СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;//?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
								Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;//СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли не ВыбылоДенег = 0 Тогда
						
						Если ЭтоКлиент 
							И ВестиУчетПоКлиентам Тогда
							
							Движение 			 = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Договор	 = Договор;
							Движение.Комментарий = Комментарий;
							Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
								Движение.Комментарий = Комментарий;
								Движение.Договор	 = Договор;
								Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
							КонецЕсли;
							
						ИначеЕсли ВестиУчетПоПоставщикам тогда
							
							Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Договор	 = Договор;
							Движение.Комментарий = Комментарий;
							Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;
								Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ отказ
					И НЕ ЭтоКлиент
					И НЕ НеРегистрироватьЦеныЗаСчетЭтогоДокумента Тогда
					
					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда 
						
						Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
							И ЗначениеЗаполнено(ВидЦен) Тогда
							
							
							Если НЕ суммаСтрокаРасходов = 0 тогда
								
								ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
								
								
								Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов") Тогда
									Для Каждого СтрокаТовара Из Товары Цикл 
										ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , , СтрокаТовара.ЕдиницаИзмерения);
									КонецЦикла;		
								Иначеесли НЕ значениезаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
									ВидЦенДляРегистрацииФактическойЦеныПриобретения = ВидЦен;
								КонецЕсли;
								
								НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
								СтрокаТовараСДопРасх = Новый Структура("Цена", 0);
								СтрокаТовараСДопРасх.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
								
								Для Каждого СтрокаТовара Из Товары Цикл 
									Если НЕЗначениеЗаполненоВалютаЦены Тогда
										СуммаТов = СтрокаТовара.Сумма;								
									Иначе
										СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
									КонецЕсли;							
									
									СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
									
									СтрокаТовараСДопРасх.Номенклатура = СтрокаТовара.номенклатура;
									СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(?(строкатовара.Количество = 0, 0, СуммаТов / строкатовара.Количество), ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены, , Дата);
									
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата, , , , , ЗагрузкаПоставки, СтрокаТовара.ЕдиницаИзмерения);	
									
								КонецЦикла;		
								
							Иначе
								Для Каждого СтрокаТовара Из Товары Цикл 
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , ЗагрузкаПоставки, СтрокаТовара.ЕдиницаИзмерения);
								КонецЦикла;		
								
							КонецЕсли;
							
						КонецЕсли;					
						
					Иначе
						Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда
							
							ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
							ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
							
							формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРЕГ(ОсновнаяФормулаПреобразованияЦен.Формула), "");
							ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
							ЕстьЦена 		 = не найти(Формула, "ЦЕНА") = 0;
							
							Для Каждого СтрокаТовара Из Товары Цикл      			
								Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
									
									Если НЕ ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
										Если НЕ строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
											НоменклатураОбъект.Записать();		
										КонецЕсли;
										
									Иначе
										Попытка 
											Цена 	  = СтрокаТовара.Цена;
											НоваяЦена = 0;
											НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
											Если ЕстьЦена Тогда
												Цена = СтрокаТовара.Цена;
											КонецЕсли;			
											
											Если ЕстьЛьготнаяЦена Тогда
												ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);
											КонецЕсли;								
											
											выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
											
											Если НЕ строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
												НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
												НоменклатураОбъект.Цена = НоваяЦена;
												НоменклатураОбъект.Записать();	
											КонецЕсли;
											
										Исключение 	
											Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
												
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены Произошла ошибка") + ": " + ОписаниеОшибки(), , Ссылка);
											КонецЕсли;
											
										КонецПопытки;    					
									КонецЕсли;    				
								КонецЕсли;    			
							КонецЦикла;
							
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			Если НЕ отказ 
				И ПередачаДляКомиссионнойТорговли 
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
				
				Для Каждого СтрокаТовара Из Товары Цикл
					Движение 			 = Движения.ТоварыПереданныеНаКомиссию.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.ДатаОтчетаПоКомиссии = Дата;
					Движение.Договор	 		= Договор;
					Движение.Клиент 			= КлиентПоставщик;
					Движение.Количество 		= СтрокаТовара.Количество;
					Движение.Комментарий 	 	= СтрокаТовара.ОСтроке;
					Движение.Номенклатура		= СтрокаТовара.Номенклатура;
					Движение.Период				= Дата;
					Движение.СерияНоменклатуры	= СтрокаТовара.СерияНоменклатуры;
					Движение.Сумма             	= СтрокаТовара.Сумма;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ отказ
			И ВестиУчетВаловойПрибыли Тогда		
			
			ЕстьРасходыПозже();		
		КонецЕсли;
		
		Движения.ВаловаяПрибыль.Записывать 	  = НЕ Отказ;
		Движения.Деньги.Записывать 			  = НЕ Отказ;
		Движения.ЗаказыПоставщикам.Записывать = НЕ Отказ;
		Движения.Закупки.Записывать 		  = НЕ Отказ;
		Движения.ОплатаПоЗаказам.Записывать   = НЕ Отказ;
		Движения.Продажи.Записывать 		  = НЕ Отказ;
		Движения.Расчеты.Записывать 		  = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать = НЕ Отказ;
		Движения.Товары.Записывать 			  = НЕ Отказ;
		Движения.ПродажиСотрудников.Записывать   = НЕ Отказ;
		Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
		Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ ОТКаз;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Попытка //ЭтотОбъект
	Если НЕ Отказ Тогда  		
		Если ЭтоЗаказ Тогда
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001751", , Отказ, ЭтотОбъект);	
		Иначе
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001701", , Отказ, ЭтотОбъект);	
		КонецЕсли;		
	КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда			
			ЕстьРасходыПозже();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность() 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		Если ТовараВКоличестве 	= 0
			И ТовараНаСумму 	= 0
			И ВыбылоДенег		= 0
			И РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	//повтор в модулях форм
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
		КонецЕсли;
		
		НеСворачиватьТоварыПоКоличествуПриПриходованииТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара");
		ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
		
		Если НЕ НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
			Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ЗаказКлиента, ЗаказПоставщику, ЕдиницаИзмерения, ОСтроке", "Количество, Сумма");
		КонецЕсли;
		
		МассивПустыхСтрок  = Новый массив;
		массивноменклатуры = Новый массив;
		массивСерий = Новый массив;
		
		Для Каждого СтрокаТовары ИЗ товары Цикл
			
			НоменклатураПовторяется = НЕ массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено ;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				МассивПустыхСтрок.Добавить(СтрокаТовары);				
				
			ИначеЕсли НоменклатураПовторяется тогда
				
				Если ВестиУчетСерийНоменклатуры
					И ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) Тогда
					
					Если НЕ массивСерий.Найти(СтрокаТовары.СерияНоменклатуры) = Неопределено Тогда					
						отказ = ИСТИНА;					
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется серия номенклатуры") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
					КонецЕсли;					
					
				Иначеесли не НеСворачиватьТоварыПоКоличествуПриПриходованииТовара
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура") + ": " + СтрокаТовары.Номенклатура, , Ссылка);
				КонецЕсли;
				
			Иначе
				массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
				массивСерий.Добавить(СтрокаТовары.СерияНоменклатуры);
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаТовары из МассивПустыхСтрок цикл
			товары.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		Для Каждого СтрокаСтрокаРасходаов из ДополнительныеРасходы цикл
			Если СтрокаСтрокаРасходаов.Сумма = 0 Тогда
				МассивПустыхСтрок.Добавить(СтрокаСтрокаРасходаов);
				
			Иначеесли не ЗначениеЗаполнено(СтрокаСтрокаРасходаов.Статья) Тогда
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаСтрокаРасходаов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!"), , Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаСтрокаРасходаов Из МассивПустыхСтрок Цикл
			ДополнительныеРасходы.Удалить(СтрокаСтрокаРасходаов);	
		КонецЦикла;	
		
		Если ЭтоЗаказ тогда
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если НЕ ВыбылоДенег = 0 Тогда
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ с предоплатой");
				Иначе
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Поставщику");
				КонецЕсли;
			Иначе
				
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое приобретение");
			КонецЕсли;	
			
		Иначе
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(клиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Если ПередачаДляКомиссионнойТорговли Тогда
						Если НЕ ВыбылоДенег = 0 Тогда
							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена комиссионера");
						Иначе
							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат комиссионера");
						КонецЕсли;	
					Иначе
						Если НЕ ВыбылоДенег = 0 Тогда
							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена реализации");
						Иначе
							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат покупателя");
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					Если НЕ ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение");
					Иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
					КонецЕсли;         	
				КонецЕсли;
			Иначе
				
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходование");
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ВидДокумента = НовыйВидДокумента Тогда
			ВидДокумента = НовыйВидДокумента;
		КонецЕсли;
		
		ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
		
		Если Курс = 0 Тогда
			Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);
		КонецЕсли;
		
		НовТовараВКоличестве = товары.итог("Количество");
		Если НЕ НовТовараВКоличестве = ТовараВКоличестве тогда
			ТовараВКоличестве = НовТовараВКоличестве;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЦен)
			И ЗначениеЗаполнено(видцен.ВалютаЦены)
			И НЕ видцен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			НовТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
			Если НЕ ТовараНаСумму = НовТовараНаСумму тогда
				ТовараНаСумму = НовТовараНаСумму;	
			КонецЕсли;
			
		Иначе
			ТовараНаСумму = товары.Итог("Сумма");
			
		КонецЕсли;
		
		Если НЕ отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И ЗначениеЗаполнено(договор) Тогда
			
			Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
				КлиентПоставщик = договор.КлиентПоставщик;
			ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
				Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				И ЗначениеЗаполнено(Организация) 
				И НЕ Организация = договор.Организация Тогда
				
				Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
		КонецЕсли;
		
		Разница = ТовараНаСумму - (ВыбылоДенег * курс);
		
		Если НЕ отказ
			И ЭтоЗаказ
			И Разница < 1 Тогда
			
			ЗаказОплачен = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры
