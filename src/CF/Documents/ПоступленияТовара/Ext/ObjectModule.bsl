//sza140613-0202 Хозяин: 
//sza130909-0239 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
	Если НЕ Отказ Тогда
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		Движения.Товары.Записать();
		Движения.Деньги.Записать();
		Движения.ВаловаяПрибыль.Записать();
		Движения.ЗаказыПоставщикам.Записать();
		Движения.Закупки.Записать();
		Движения.ОплатаПоЗаказам.Записать();
		Движения.Продажи.Записать();
		Движения.Расчеты.Записать();
		Движения.РасчетыСПоставщиками.Записать();
		Движения.РасчетыСОтсрочкой.Записать();
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
		Движения.Товары.Записать();
		Движения.ПродажиСотрудников.Записать();
		Движения.ТоварыПереданныеНаКомиссию.Записать();
		
		ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
		Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
		ВестиУчетЗаказовПоставщикам 	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
		ВестиУчетПоКлиентам         	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		ВестиУчетПоПоставщикам      	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		
		ВестиУчетПродажСотрудников  = не ЭтоЗаказ И клиент и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		ВестиУчетВаловойПрибыли 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
		ВестиУчетДвиженияДенег  	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
		ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
		
		суммаСтрокаРасходов 	   	= 0;
		СуммаОплатыКонтруИзТаблицы 	= 0;
		ТаблицаЦенСписания 			= Неопределено;
		
		для каждого СтрокаРасхода из ДополнительныеРасходы цикл
			
			Если НЕ СтрокаРасхода.НеРаспределятьНаСтоимость Тогда
				суммаСтрокаРасходов = суммаСтрокаРасходов + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
			иначе
				СуммаОплатыКонтруИзТаблицы = СуммаОплатыКонтруИзТаблицы + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			и ЗначениеЗаполнено(ВидЦен)
			и ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
			и не ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ВалютаЦены = ВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = Неопределено;
		КонецЕсли;
		
		если ЭтоЗаказ тогда
			Если ВестиУчетЗаказовПоставщикам тогда
				
				Движения.ЗаказыПоставщикам.Записывать = Истина;
				Сумма = 0;
				
				для каждого строкатовар из Товары цикл
					ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьПриход();
					ЗаписьРегистра.Активность 	= Истина;
					ЗаписьРегистра.Количество   = строкатовар.Количество;
					ЗаписьРегистра.Номенклатура = строкатовар.Номенклатура;
					ЗаписьРегистра.Период       = Дата;
					ЗаписьРегистра.Поставщик    = КлиентПоставщик;
					Сумма = Сумма + строкатовар.Сумма
				КонецЦикла;
				
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
					
					Движения.ОплатаПоЗаказам.Записывать   = Истина;
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
					ЗаписьРегистра.Период		= Дата;					
					ЗаписьРегистра.Активность 	= Истина;
					ЗаписьРегистра.Заказ   		= Ссылка;
					ЗаписьРегистра.Сумма 		= Сумма;
					
					Если ВыбылоДенег <> 0 Тогда
						ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
						ЗаписьРегистра.Период	  = Дата;
						ЗаписьРегистра.Активность = Истина;
						ЗаписьРегистра.Заказ   	  = Ссылка;
						ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		иначе			
			Движения.ЗаказыПоставщикам.Записывать = ВестиУчетЗаказовПоставщикам;
			
			Если не ОтменитьПроверкиНаОтказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				и ЗначениеЗаполнено(Договор) Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, Истина, ВыбылоДенег, Ссылка);
			КонецЕсли;
			
			Если Не Отказ ТОгда   				
				
				Если ЗначениеЗаполненоКлиентПоставщик 
					и не клиент Тогда
					
					ПроизводительНоменклатуры 		= КлиентПоставщик.Производитель;
					ЗначениеЗаполненоПроизводитель 	= ЗначениеЗаполнено(ПроизводительНоменклатуры);
					
				иначе
					ЗначениеЗаполненоПроизводитель 	= Ложь;
					ПроизводительНоменклатуры 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Производители.ПустаяСсылка()");
					
				КонецЕсли;
				
				Если НЕ ОтменитьПроверкиНаОтказ
					И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
					И НЕ ЗначениеЗаполнено(Склад) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Склад!"), , Ссылка);	
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!");
						//Сообщение.Поле 	= "Склад";
						//Сообщение.Сообщить();	
						
					КонецЕсли;
					
					Отказ = Истина;					
				КонецЕсли;
				
				//Движения.Товары.Записывать = Истина;
				//Если ВестиУчетВаловойПрибыли тогда
				//	если клиент Тогда
				//		Движения.ВаловаяПрибыль.Записывать = Истина;
				//	КонецЕсли;
				//КонецЕсли;
				
				//Если ЗначениеЗаполненоКлиентПоставщик Тогда
				//	Если Клиент Тогда
				//		Движения.Продажи.Записывать = Истина;
				//	Иначе
				//		Движения.Закупки.Записывать = Истина;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если не отказ
					и ВестиУчетВаловойПрибыли 
					и клиент тогда 
					
					СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ложь);
					ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
					
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					
					числострок = товары.Количество();
					
					НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
					
					Для Каждого ТекСтрокаТовара Из Товары Цикл
						
						Номенклатура      = ТекСтрокаТовара.Номенклатура;
						КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
						Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
						СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И НЕ Отказ
							И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
							
							Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Дата - 1);
							Если Отказ Тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Ссылка);
								//Сообщение = Новый СообщениеПользователю;
								//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" попытка приходовать серию повторно!");
								//Сообщение.Сообщить();	
								
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ Отказ Тогда
							
							Если ЗначениеЗаполненоПроизводитель
								и не ЗначениеЗаполнено(Номенклатура.Производитель) ТОгда
								
								НоменклатураОбъект 	= Номенклатура.ПолучитьОбъект();
								НоменклатураОбъект.Производитель = ПроизводительНоменклатуры;
								НоменклатураОбъект.Записать();
								
								Номенклатура 		= НоменклатураОбъект.Ссылка;
								
							КонецЕсли;
							
							если ВестиУчетЗаказовПоставщикам тогда
								
								ЗаказПоставщикуКлиентПоставщик = Неопределено;
								Если ЗначениеЗаполнено(ТекСтрокаТовара.ЗаказПоставщику) Тогда
									ЗаказПоставщикуКлиентПоставщик = ТекСтрокаТовара.ЗаказПоставщику.КлиентПоставщик;
								иначеесли ЗначениеЗаполнено(ЗаказПоставщику) тогда
									ЗаказПоставщикуКлиентПоставщик = ЗаказПоставщику.КлиентПоставщик;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ЗаказПоставщикуКлиентПоставщик) Тогда
									ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьРасход();
									ЗаписьРегистра.Активность 	= Истина;
									ЗаписьРегистра.Количество   = Количество;
									ЗаписьРегистра.Номенклатура = Номенклатура;
									ЗаписьРегистра.Период       = Дата;
									ЗаписьРегистра.Поставщик    = ЗаказПоставщикуКлиентПоставщик;
								КонецЕсли;
								
							КонецЕсли;
							
							Если НЕЗначениеЗаполненоВалютаЦены Тогда
								СуммаТов = ТекСтрокаТовара.Сумма;								
							Иначе
								СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
							КонецЕсли;							
							
							если не суммаСтрокаРасходов = 0 тогда
								СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
							КонецЕсли;
							
							если не ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
								
								ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
								ЦенаСписания = 0;
								
								Если ВестиУчетВаловойПрибыли 
									и клиент тогда    
									если не ТаблицаЦенСписания = Неопределено тогда
										СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
										
										Если не СтрокаЦеныСписания = Неопределено Тогда
											ЦенаСписания = СтрокаЦеныСписания.Цена;
										иначе
											ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
										КонецЕсли;	
										
									иначе
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
									КонецЕсли;
									
									если ЦенаСписания = 0 
										или не (СуммаТов - (ЦенаСписания * Количество)) = 0 тогда
										
										Движение = Движения.ВаловаяПрибыль.Добавить();
										Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
										Движение.Период 	  = Дата;
										Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
										Движение.Склад		  = Склад;
										Движение.Комментарий  = КомментарийСтроки;
										
										Если ЦенаСписания = 0 
											или ТекСтрокаТовара.Цена = 0
											или ПредопределенныйТовар Тогда
											
											Движение.Сумма 	= СуммаТов;
											Движение.ПроцентНаценки = 100;
											
										Иначе
											ЦенаСписания 	= СуммаТов - (ЦенаСписания * Количество);
											Движение.Сумма 	= ЦенаСписания;
											Цена = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Цена, , ВалютаЦены, Дата);
											Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
											Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
											
										КонецЕсли; 				
									КонецЕсли;
									
								КонецЕсли;
								
								Если НЕ ПредопределенныйТовар 
									и не Отказ Тогда
									
									Движение = Движения.Товары.Добавить();
									Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
									Движение.Период 	  = Дата;
									Движение.Номенклатура = Номенклатура;
									Движение.Склад 		  = Склад;  				
									Движение.Количество   = Количество;					
									Движение.Сумма 		  = СуммаТов - ЦенаСписания;
									Движение.Комментарий  = КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатуры;
									Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
								КонецЕсли;
								
							Иначе //это набор         			
								ОбработатьДвиженияДляНабора(ТекСтрокаТовара.Номенклатура, Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены);
								
							КонецЕсли;
							
							Если ЗначениеЗаполненоКлиентПоставщик Тогда
								
								Если ВестиУчетПродажСотрудников Тогда
									Движение = Движения.ПродажиСотрудников.Добавить();
									Движение.Комментарий  = КомментарийСтроки; 
									Движение.Номенклатура = Номенклатура;
									Движение.Период 	  = Дата;
									Движение.Сотрудник    = Сотрудник;
									Движение.Сумма  	  = -СуммаТов;
								КонецЕсли;
								
								Если Клиент Тогда
									Движение = Движения.Продажи.Добавить();
									Движение.Клиент 	= КлиентПоставщик;
									Движение.Количество = -Количество;
									Движение.Сумма 		= -СуммаТов;
									Движение.Договор 	  = Договор;
									Движение.Период 	  = Дата;
									Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
									Движение.Комментарий  = КомментарийСтроки;
									
								ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик)
									И НЕ ЗначениеЗаполнено(ПартияПриобретения) Тогда
									
									Движение = Движения.Закупки.Добавить();
									Движение.Поставщик 	= КлиентПоставщик;
									Движение.Количество = Количество;
									Движение.Сумма 		= СуммаТов;
									Движение.Договор 	  = Договор;
									Движение.Период 	  = Дата;
									Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
									Движение.Комментарий  = КомментарийСтроки;
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;	
					
					Если не отказ
						и не ВыбылоДенег = 0 
						и ЗначениеЗаполнено(ЗаказКлиента)
						и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
						
						ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
						ЗаписьРегистра.Период     = Дата;
						ЗаписьРегистра.Активность = Истина;
						ЗаписьРегистра.Заказ   	  = Ссылка;
						ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	//заказ/не заказ
			
			Если не отказ
				и ВестиУчетДвиженияДенег Тогда		
				
				Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
					ФормаОплаты = ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;
				КонецЕсли;			
				
				если ЭтоЗаказ 
					ИЛИ ДополнительныеРасходы.Количество() = 0 тогда
					
					если НЕ ВыбылоДенег = 0 тогда		
						
						СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(ВыбылоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);
						Отказ  = СтруктураПополнения.Отказ;
						
						если не отказ тогда
							Если ЗначениеЗаполненоКлиентПоставщик Тогда
								Если Клиент Тогда
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
								Иначе
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
								КонецЕсли; 			
								
							иначе
								Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
							КонецЕсли;
						КонецЕсли;
						
						Если не отказ
							и не СтруктураПополнения.СуммаПополнения = 0 Тогда
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= СтруктураПополнения.Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
							Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
							если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
								и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
							КонецЕсли;
						КонецЕсли;
						
						если не отказ тогда
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата;
							Движение.Статья 		= Статья;
							Движение.Сумма 			= ВыбылоДенег * Курс;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= ВыбылоДенег;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;						
							
						КонецЕсли;						
					КонецЕсли;
					
				Иначе					
					СуммаДенег = 0;
					
					для каждого СтрокаРасхода из ДополнительныеРасходы цикл
						СуммаДенег = СуммаДенег + СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
					КонецЦикла;
					
					Если НЕ ОтменитьПроверкиНаОтказ Тогда
						Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
					КонецЕсли;
					
					Если не отказ тогда
						
						для каждого СтрокаРасхода из ДополнительныеРасходы цикл
							
							если не отказ тогда
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата;
								Движение.Сумма 			= СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
								Движение.Валюта 		= ?(ЗначениеЗаполнено(СтрокаРасхода.Валюта), СтрокаРасхода.Валюта, Валюта);
								Движение.СуммаВВалюте 	= СтрокаРасхода.Сумма;
								Движение.ХранилищеДенег = ХранилищеДенег;
								Движение.ФормаОплаты 	= Формаоплаты;
								Движение.Статья 		= СтрокаРасхода.Статья;	
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;					
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если не отказ
				и ЗначениеЗаполненоКлиентПоставщик Тогда   	
				
				Если ЗначениеЗаполнено(ВидЦен)
					И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
					
					КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВидЦен.ВалютаЦены, дата);
				Иначе
					КурсТовара = 1;
				КонецЕсли;
				
				ИтогоСумма = товары.Итог("Сумма") * КурсТовара;
				
				Если Клиент 
					И ВестиУчетПоКлиентам Тогда
					
					Движение 			 = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Клиент 	 = КлиентПоставщик;
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ИтогоСумма;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Клиент 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
					КонецЕсли;
					
				иначеЕсли ВестиУчетПоПоставщикам тогда
					
					Движение			 = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Поставщик 	 = КлиентПоставщик;
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ИтогоСумма;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда						
						Движение			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Поставщик 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВестиУчетДвиженияДенег тогда
					Если НЕ СуммаОплатыКонтруИзТаблицы = 0 тогда
						
						Для каждого СтрокаРасхода из ДополнительныеРасходы цикл
							
							Если СтрокаРасхода.НеРаспределятьНаСтоимость Тогда 
								
								Если Клиент 
									И ВестиУчетПоКлиентам Тогда
									
									Движение 			 = Движения.Расчеты.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
									Движение.Клиент 	 = КлиентПоставщик;
									Движение.Период 	 = Дата;
									Движение.Договор	 = Договор;
									Движение.Комментарий = ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
									Движение.Сумма		 = СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
									
									Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
										
										Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
										Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
										Движение.Клиент 	 = КлиентПоставщик;
										Движение.Период 	 = Дата;
										Движение.Договор	 = Договор;
										Движение.Комментарий = ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
										Движение.Сумма		 = СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
									КонецЕсли;
									
								иначеЕсли ВестиУчетПоПоставщикам тогда
									
									Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
									Движение.Поставщик 	 = КлиентПоставщик;
									Движение.Период 	 = Дата;
									Движение.Договор	 = Договор;
									Движение.Комментарий = ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
									Движение.Сумма		 = СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
									
									Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
										
										Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
										Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
										Движение.Поставщик 	 = КлиентПоставщик;
										Движение.Период 	 = Дата;
										Движение.Договор	 = Договор;
										Движение.Комментарий = ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
										Движение.Сумма		 = СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;							
						КонецЦикла;
						
					ИначеЕсли не ВыбылоДенег = 0 Тогда
						
						Если Клиент 
							И ВестиУчетПоКлиентам Тогда
							
							Движение 			 = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Период 	 = Дата;
								Движение.Комментарий = Комментарий;
								Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
								Движение.Период 	 = Дата;
							КонецЕсли;
							
						ИначеЕсли ВестиУчетПоПоставщикам тогда
							
							Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
							
							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								
								Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Комментарий = Комментарий;
								Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
								Движение.Период 	 = Дата;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ отказ
				И НЕ Клиент Тогда
				
				если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") тогда 
					
					Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
						И ЗначениеЗаполнено(ВидЦен) тогда
						
						
						Если НЕ суммаСтрокаРасходов = 0 тогда
							
							ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
							
							
							если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов") Тогда
								Для каждого СтрокаТовара Из Товары Цикл 
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , , СтрокаТовара.ЕдиницаИзмерения);
								КонецЦикла;		
							иначеесли НЕ значениезаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) тогда
								ВидЦенДляРегистрацииФактическойЦеныПриобретения = ВидЦен;
							КонецЕсли;
							
							НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
							СтрокаТовараСДопРасх = Новый Структура("Цена", 0);
							СтрокаТовараСДопРасх.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
							
							Для каждого СтрокаТовара Из Товары Цикл 
								Если НЕЗначениеЗаполненоВалютаЦены Тогда
									СуммаТов = СтрокаТовара.Сумма;								
								Иначе
									СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
								КонецЕсли;							
								
								СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
								
								СтрокаТовараСДопРасх.Номенклатура = СтрокаТовара.номенклатура;
								СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(?(строкатовара.Количество = 0, 0, СуммаТов / строкатовара.Количество), ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены, , Дата);
								
								ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата, , , , , , СтрокаТовара.ЕдиницаИзмерения);	
								
							КонецЦикла;		
							
						иначе
							Для каждого СтрокаТовара Из Товары Цикл 
								ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , , СтрокаТовара.ЕдиницаИзмерения);
							КонецЦикла;		
							
						КонецЕсли;
						
					КонецЕсли;					
					
				Иначе
					Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда
						
						ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
						ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
						
						формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРЕГ(ОсновнаяФормулаПреобразованияЦен.Формула), "");
						ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
						ЕстьЦена 		 = не найти(Формула, "ЦЕНА") = 0;
						
						Для каждого СтрокаТовара Из Товары Цикл      			
							Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) тогда
								
								если не ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
									если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
										
										НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
										НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
										НоменклатураОбъект.Записать();		
									КонецЕсли;
									
								иначе
									Попытка 
										Цена 	  = СтрокаТовара.Цена;
										НоваяЦена = 0;
										НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
										Если ЕстьЦена Тогда
											Цена = СтрокаТовара.Цена;
										КонецЕсли;			
										
										Если ЕстьЛьготнаяЦена Тогда
											ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);
										КонецЕсли;								
										
										выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
										
										если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = НоваяЦена;
											НоменклатураОбъект.Записать();	
										КонецЕсли;
										
									Исключение 	
										если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
											
											ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
											//Сообщение = Новый СообщениеПользователю;
											//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки();
											//Сообщение.Сообщить();                                               	
										КонецЕсли;
										
									КонецПопытки;    					
								КонецЕсли;    				
							КонецЕсли;    			
						КонецЦикла;
						
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если не отказ 
			и ПередачаДляКомиссионнойТорговли 
			и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
			
			Для Каждого СтрокаТовара Из Товары Цикл
				Движение 			 = Движения.ТоварыПереданныеНаКомиссию.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
				Движение.ДатаОтчетаПоКомиссии = Дата;
				Движение.Договор	 		= Договор;
				Движение.Клиент 			= КлиентПоставщик;
				Движение.Количество 		= СтрокаТовара.Количество;
				Движение.Комментарий 	 	= СтрокаТовара.ОСтроке;
				Движение.Номенклатура		= СтрокаТовара.Номенклатура;
				Движение.Период				= Дата;
				Движение.СерияНоменклатуры	= СтрокаТовара.СерияНоменклатуры;
				Движение.Сумма             	= СтрокаТовара.Сумма;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ отказ
		И ВестиУчетВаловойПрибыли Тогда		
		
		ЕстьРасходыПозже();		
	КонецЕсли;
	
	Движения.ВаловаяПрибыль.Записывать 	  = НЕ Отказ;
	Движения.Деньги.Записывать 			  = НЕ Отказ;
	Движения.ЗаказыПоставщикам.Записывать = НЕ Отказ;
	Движения.Закупки.Записывать 		  = НЕ Отказ;
	Движения.ОплатаПоЗаказам.Записывать   = НЕ Отказ;
	Движения.Продажи.Записывать 		  = НЕ Отказ;
	Движения.Расчеты.Записывать 		  = НЕ Отказ;
	Движения.РасчетыСОтсрочкой.Записывать = НЕ Отказ;
	Движения.Товары.Записывать 			  = НЕ Отказ;
	Движения.ПродажиСотрудников.Записывать   = НЕ Отказ;
	Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
	Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
	Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ ОТКаз;	
															  КонецЕсли;
	
КонецПроцедуры

Процедура ЕстьРасходыПозже()
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	если не ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
		или Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура В(&Номенклатура)
		|	И Товары.Период > &Дата
		|	И Товары.ВидДвижения = &ВидДвиженияРасход";
		
		Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
		
		Номенклатура = Товары.Выгрузить(, "Номенклатура");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		если не РезультатЗапроса.Пустой() тогда
			
			ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом");
			
			Если ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧислом Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю("ПредложениеВосстановленияВаловойПрибыли", , Ссылка);	
			Иначе
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ возможно был изменен задним числом:") + " " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);	
				КонецЕсли;
				Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(дата) ;	
				
			КонецЕсли;			
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДвиженияДляНабора(Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтрокаСоставаНабора.Номенклатура) Тогда
			обработатьДвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены);
		иначе
			
			Количество = КоличествоВх * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;
			Если ВалютаЦены = Неопределено Тогда
				СуммаТов = СуммаЭлемента;
			Иначе
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, , ВалютаЦены, Дата);
			КонецЕсли;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад; 				
				Движение.Количество 	= Количество;				
				Движение.Сумма 			= СуммаТов;
				//Движение.СерияНоменклатуры = //серийный состав набора насильно разворачивается в таблице
				Движение.Комментарий	= Комментарий;
				Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
			КонецЕсли;
			
			Если ВестиУчетВаловойПрибыли Тогда  				
				если клиент тогда					
					
					ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата);
					
					если ЦенаСписания = 0 
						или не (СуммаТов - (ЦенаСписания * Количество)) = 0 тогда
						
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
						Движение.Период 		= Дата;
						Движение.Номенклатура 	= НоменклатураСостава;
						Движение.Комментарий 	= Комментарий;
						Движение.Склад			= Склад;
						
						Если ЦенаСписания = 0 
							или ПредопределенныйТовар
							или Количество = 0 Тогда
							
							Движение.Сумма = СуммаТов;
							Движение.ПроцентНаценки = 100;
							
						Иначе
							Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);						
							Цена 			= СуммаТов / Количество;
							//Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) -100;
							Если НЕ ВалютаЦены = Неопределено Тогда
								Цена = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
							КонецЕсли;
							
							Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
							Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
							
						КонецЕсли; 				
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры //ОбработатьНабор

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		если ТовараВКоличестве 	= 0
			и ТовараНаСумму 	= 0
			и ВыбылоДенег		= 0
			и РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	//повтор в модулях форм
	Если Не Отказ Тогда
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И Не Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
	КонецЕсли;
	НеСворачиватьТоварыПоКоличествуПриПриходованииТовара = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара");
	ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
	
	если не НеСворачиватьТоварыПоКоличествуПриПриходованииТовара тогда
		Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ЗаказКлиента, ЗаказПоставщику, ЕдиницаИзмерения, ОСтроке", "Количество, Сумма");
	КонецЕсли;
	
	массивпустыхстрок  = новый массив;
	массивноменклатуры = Новый массив;
	массивСерий = Новый массив;
	
	для каждого СтрокаТовары из товары цикл
		
		НоменклатураПовторяется = НЕ массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено ;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			массивпустыхстрок.Добавить(СтрокаТовары);				
			
		иначеесли НоменклатураПовторяется тогда
			
			Если ВестиУчетСерийНоменклатуры
				и ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) тогда
				
				Если НЕ массивСерий.Найти(СтрокаТовары.СерияНоменклатуры) = Неопределено Тогда					
					отказ = Истина;					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется серия номенклатуры:") + " " + СтрокаТовары.Номенклатура, , Ссылка);	
				КонецЕсли;					
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется серия номенклатуры:") + " " + СтрокаТовары.Номенклатура;
				//Сообщение.Сообщить();                                               	
				
			Иначеесли не НеСворачиватьТоварыПоКоличествуПриПриходованииТовара
				И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:") + " " + СтрокаТовары.Номенклатура, , Ссылка);					
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:") + " " + СтрокаТовары.Номенклатура;
				//Сообщение.Сообщить();                                               	
				
			КонецЕсли;
			
		иначе
			массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
			массивСерий.Добавить(СтрокаТовары.СерияНоменклатуры);
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	для каждого СтрокаТовары из массивпустыхстрок цикл
		товары.Удалить(СтрокаТовары);	
	КонецЦикла;	
	
	для каждого СтрокаСтрокаРасходаов из ДополнительныеРасходы цикл
		Если СтрокаСтрокаРасходаов.Сумма = 0 Тогда
			массивпустыхстрок.Добавить(СтрокаСтрокаРасходаов);
			
		иначеесли не ЗначениеЗаполнено(СтрокаСтрокаРасходаов.Статья) тогда
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаСтрокаРасходаов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!"), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаСтрокаРасходаов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!");
				//Сообщение.Сообщить();	
				
			КонецЕсли;
			
		КонецЕсли;                                    	
	КонецЦикла;
	
	Для Каждого СтрокаСтрокаРасходаов Из массивпустыхстрок Цикл
		ДополнительныеРасходы.Удалить(СтрокаСтрокаРасходаов);	
	КонецЦикла;	
	
	Если ЭтоЗаказ тогда
		Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
			Если не ВыбылоДенег = 0 Тогда
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ с предоплатой");
			Иначе
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Поставщику");
			КонецЕсли;
		Иначе
			
			НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое приобретение");
		КонецЕсли;	
	иначе
		Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
			Если ТипЗнч(клиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				Если ПередачаДляКомиссионнойТорговли Тогда
					Если не ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена комиссионера");
					Иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат комиссионера");
					КонецЕсли;	
				Иначе
					Если не ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена реализации");
					Иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат покупателя");
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если не ВыбылоДенег = 0 Тогда
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение");
				Иначе
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
				КонецЕсли;         	
			КонецЕсли;
		Иначе
			
			НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходование");
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ВидДокумента = НовыйВидДокумента Тогда
		ВидДокумента = НовыйВидДокумента;
	КонецЕсли;
	
	ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
	
	Если Курс = 0 Тогда
		Курс = 1;
	КонецЕсли;
	
	НовТовараВКоличестве = товары.итог("Количество");
	если не НовТовараВКоличестве = ТовараВКоличестве тогда
		ТовараВКоличестве = НовТовараВКоличестве;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦен)
		и ЗначениеЗаполнено(видцен.ВалютаЦены)
		и не видцен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		НовТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
		если не ТовараНаСумму = НовТовараНаСумму тогда
			ТовараНаСумму = НовТовараНаСумму;	
		КонецЕсли;
		
	Иначе
		ТовараНаСумму = товары.Итог("Сумма");
		
	КонецЕсли;
	
	если не отказ
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		и ЗначениеЗаполнено(договор) ТОгда
		
		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) ТОгда
			КлиентПоставщик = договор.КлиентПоставщик;
		ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
			Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(договор) 
			и ЗначениеЗаполнено(Организация) 
			и не Организация = договор.Организация Тогда
			
			Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
		КонецЕсли;
		
	КонецЕсли;
	
	Если не отказ
		И ЭтоЗаказ
		и ТовараНаСумму <= (ВыбылоДенег * курс) Тогда
		
		ЗаказОплачен = Истина;
	КонецЕсли;	
			  КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если не отказ Тогда
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда			
			ЕстьРасходыПозже();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если НЕ ЗначениеЗаполнено(дата) Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;			
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 	 = 1;
			НоваяСтрока.Номенклатура = ДанныеЗаполнения.ссылка;
			НоваяСтрока.Цена 		 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ложь, 1, , , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
			НоваяСтрока.Сумма 		 = НоваяСтрока.Цена * НоваяСтрока.Количество; 
			
			ЭтоЗаказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			
			Если ДанныеЗаполнения.ЭтоЗаказ Тогда
				ЗаказПоставщику = ДанныеЗаполнения.ссылка;
			Иначе
				ЗаказКлиента	= ДанныеЗаполнения.ЗаказКлиента;
			КонецЕсли;
			
			ВыбылоДенег 		= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик 	= ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 				= ДанныеЗаполнения.ВидЦен;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;			
			ЗаказПоставщику		= ДанныеЗаполнения.ЗаказПоставщику; 
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			ПартияПриобретения  = ДанныеЗаполнения.ПартияПриобретения;
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			ТалонТрек 			= ДанныеЗаполнения.ТалонТрек;
			ДатаОтправки 		= ДанныеЗаполнения.ДатаОтправки;
			СпособДоставки		= ДанныеЗаполнения.СпособДоставки;
			ДатаОтсрочки    	= ДанныеЗаполнения.ДатаОтсрочки;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.ЗаказПоставщику	= ТекСтрокаТовара.ЗаказПоставщику;
				НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
				НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
				НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			//как оприходование
			ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			//			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			//			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			//			Договор 		= ДанныеЗаполнения.Договор;
			//			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				если ТекСтрокаТовара.КоличествоРазница >0 тогда
					НоваяСтрока = Товары.Добавить(); 				
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовара.СуммаРазница;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			ДанныеЗаполненияЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ЗаказКлиента = ДанныеЗаполнения.ссылка;				
				ВидЦен 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			Иначе       //возврат
				ЗаказКлиента    = ДанныеЗаполнения.ЗаказКлиента;
				ВыбылоДенег 	= ДанныеЗаполнения.ПоступилоДенег;			
				КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ВидЦен) Тогда			
				Валюта = ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			ПередачаДляКомиссионнойТорговли = ДанныеЗаполнения.ПередачаДляКомиссионнойТорговли;
			Сумма = 0;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				количество = ТекСтрокаТовара.Количество;
				
				НоваяСтрока.Количество 		= Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
				
				Если ДанныеЗаполненияЭтоЗаказ Тогда
					НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ТекСтрокаТовара.Номенклатура, ВидЦен, дата, ложь, Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);	
					НоваяСтрока.Сумма			= НоваяСтрока.Цена * количество;
				иначе     //вощврат
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
				КонецЕсли;
				Сумма = Сумма + НоваяСтрока.Сумма;
			КонецЦикла;
			
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ТовараНаСумму 		= Сумма;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УстановкиЦен") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;
			Комментарий = ДанныеЗаполнения.Комментарий;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.Цена 		 = ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;             	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
