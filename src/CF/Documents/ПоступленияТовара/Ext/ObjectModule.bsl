// sza160302-0258 расчеты в валюте
// sza160227-1830
// sza151210-2338 про
// sza151102-0035
// sza151025-0432
// sza150610-0315 ваучер
// sza150216-0254
// sza150117-0002 рег.цены без поставщика
// sza141117-2253 НеРегистрироватьЦеныЗаСчетЭтогоДокумента
// sza141117-0252
// sza141101-0224 : валовая
// sza141030-2005
// sza141029-2338 : предоплата по заказу
// sza140821-1954
// sza140722-0120 склад
// sza140703-1246  Склад принудительно не пустой
// sza140701-1322
// sza140613-0202
// sza130909-0239 :

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	Процедура ЕстьРасходыПозже()

		ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();

		Если НЕ ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
			ИЛИ Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
			|ИЗ РегистрНакопления.Товары КАК Товары
			|ГДЕ Товары.Номенклатура В(&Номенклатура)
			|	И Товары.Период > &Дата
			|	И Товары.ВидДвижения = &ВидДвиженияРасход";
			Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
			Номенклатура = Товары.Выгрузить(, "Номенклатура");
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ПредлагатьВосстанавливатьВаловуюПриПроведенииПриходаЗадним = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПредлагатьВосстанавливатьВаловуюПриПроведенииПриходаЗадним");
				Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(Дата);
				Если ПредлагатьВосстанавливатьВаловуюПриПроведенииПриходаЗадним Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю("ПредложениеВосстановленияВаловойПрибыли", , Ссылка);
				Иначе
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ был изменен задним числом") + ": " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ОбработатьДвиженияДляНабора(Знач Номенклатура, КоличествоСтруктура, Сумма, ВестиУчетВаловойПрибыли, Знач ЭтоКлиент, Знач ЗначениеЗаполненоКлиентПоставщик, Знач ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль) // для вложенных наборов

		Если НЕ Сторный Тогда
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
			ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		Иначе
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
			ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
		КонецЕсли;

		ОбщееКоличество = Номенклатура.Состав.Итог("Количество");

		Если ОбщееКоличество = 0 Тогда
			ОбщееКоличество = 1;
		КонецЕсли;

		Для Каждого СтрокаСоставаНабора Из Номенклатура.Состав Цикл
			СуммаЭлемента = (Сумма / ОбщееКоличество) * СтрокаСоставаНабора.количество;
			НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
			Если ОбщийМодульПовтор.ЭтоНабор(СтрокаСоставаНабора.Номенклатура) Тогда
				ОбработатьДвиженияДляНабора(НоменклатураСостава, КоличествоСтруктура * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль);
			Иначе
				Количество = КоличествоСтруктура * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;

				Если ВалютаЦены = Неопределено Тогда
					СуммаПоТовару = СуммаЭлемента;
				Иначе
					СуммаПоТовару = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, , ВалютаЦены, Дата);
				КонецЕсли;

				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);

				Если НЕ ПредопределенныйТовар Тогда
					Движение = Движения.Товары.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= Дата;
					Движение.Номенклатура 	= НоменклатураСостава;
					Движение.Склад 			= Склад;
					Движение.Количество 	= Количество;
					Движение.Сумма 			= СуммаПоТовару;
					Движение.Комментарий	= Комментарий;
					Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
				КонецЕсли;

				Если ВестиУчетВаловойПрибыли
					И ЭтоКлиент Тогда

					СтруктураСреднейВаловойПрибыли = ОбщийМодульТоварСервер.ПолучитьСреднююВаловуюПрибыльРеализации(Номенклатура, Дата, Ссылка, ИСТИНА); //, СерияНоменклатуры); !!!

					Если НЕ СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль = 0 Тогда
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.Количество   = Количество;
						Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
						Движение.Период 	  = Дата;
						Движение.Номенклатура = НоменклатураСостава;
						Движение.Комментарий  = Комментарий;
						Движение.Склад		  = Склад;
						Движение.Сумма 	= (СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль * ?(Количество = 0, 1, Количество));
						Движение.ПроцентНаценки = СтруктураСреднейВаловойПрибыли.ПроцентНаценки;
						Движение.РентабельностьПродаж = СтруктураСреднейВаловойПрибыли.РентабельностьПродаж;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецПроцедуры // ОбработатьНабор

	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

		ОбработкаПриЗаполнении(ДанныеЗаполнения);

	КонецПроцедуры

	Процедура ОбработкаПриЗаполнении(Знач ДанныеЗаполнения) Экспорт

		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Поставщики") Тогда
				Если НЕ ЗначениеЗаполнено(Дата) Тогда
					Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				КонецЕсли;

				КлиентПоставщик = ДанныеЗаполнения.Ссылка;
				ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Тендеры") Тогда
				Склад  = ДанныеЗаполнения.Склад;
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Организация = ДанныеЗаполнения.Организация;

				Для Каждого СтрокаПредложения Из ДанныеЗаполнения.Предложения Цикл
					Если СтрокаПредложения.Тендер Тогда
						КлиентПоставщик = СтрокаПредложения.Поставщик;
						Договор 		= СтрокаПредложения.Договор;
						ТовараНаСумму 	= СтрокаПредложения.Сумма;

						Если НЕ СтрокаПредложения.ДатаПоставки = '00010101000000' Тогда
							Дата = СтрокаПредложения.ДатаПоставки;
						КонецЕсли;

						Прервать;
					КонецЕсли;
				КонецЦикла;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения= ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
					ЗаказКлиента = ТекСтрокаТовара.ЗаказКлиента;
					НоваяСтрока.Цена 			= ТовараНаСумму / ?(ТекСтрокаТовара.Количество = 0, 1, ТекСтрокаТовара.Количество);
					НоваяСтрока.Сумма			= ТовараНаСумму;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;

				ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если НЕ ЗначениеЗаполнено(Дата) Тогда
					Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				КонецЕсли;

				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 	 = 1;
				НоваяСтрока.Номенклатура = ДанныеЗаполнения.Ссылка;
				НоваяСтрока.Цена 		 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ЛОЖЬ, 1, , , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
				НоваяСтрока.Сумма 		 = НоваяСтрока.Цена * НоваяСтрока.Количество;
				ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;

				Если ДанныеЗаполнения.ЭтоЗаказ Тогда
					ЗаказПоставщику = ДанныеЗаполнения.Ссылка;
				Иначе
					ЗаказКлиента	= ДанныеЗаполнения.ЗаказКлиента;
				КонецЕсли;

				ВыбылоДенег 		= ДанныеЗаполнения.ВыбылоДенег;
				КлиентПоставщик 	= ДанныеЗаполнения.КлиентПоставщик;
				ВидЦен 				= ДанныеЗаполнения.ВидЦен;
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта = ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий 		= ДанныеЗаполнения.Комментарий;
				Склад 				= ДанныеЗаполнения.Склад;
				ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
				Организация			= ДанныеЗаполнения.Организация;
				Договор 			= ДанныеЗаполнения.Договор;
				ЗаказПоставщику		= ДанныеЗаполнения.ЗаказПоставщику;
				ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег;
				ПартияПриобретения  = ДанныеЗаполнения.ПартияПриобретения;
				Сотрудник			= ДанныеЗаполнения.Сотрудник;
				ТалонТрек 			= ДанныеЗаполнения.ТалонТрек;
				ДатаОтправки 		= ДанныеЗаполнения.ДатаОтправки;
				СпособДоставки		= ДанныеЗаполнения.СпособДоставки;
				ДатаОтсрочки    	= ДанныеЗаполнения.ДатаОтсрочки;
				ВаучерСкидки		= ДанныеЗаполнения.ВаучерСкидки;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.ЗаказПоставщику	= ТекСтрокаТовара.ЗаказПоставщику;
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.События") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.Направление;
				КлиентПоставщик 	= ?(ЗначениеЗаполнено(ДанныеЗаполнения.Клиент), ДанныеЗаполнения.Клиент, ДанныеЗаполнения.Поставщик);
				ВидЦен 				= ДанныеЗаполнения.ВидЦен;
				Комментарий 		= ДанныеЗаполнения.Комментарий;
				ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
				Организация			= ДанныеЗаполнения.Организация;
				Договор 			= ДанныеЗаполнения.Договор;
				ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег;
				Сотрудник			= ДанныеЗаполнения.Сотрудник;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;

			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				// как оприходование
				ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
				КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;

				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта 		= ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий 	= ДанныеЗаполнения.Комментарий;
				Склад 			= ДанныеЗаполнения.Склад;
				ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					Если ТекСтрокаТовара.КоличествоРазница > 0 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.Количество 		= ТекСтрокаТовара.КоличествоРазница;
						НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
						НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
						НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
						НоваяСтрока.Сумма 			= ТекСтрокаТовара.СуммаРазница;
					КонецЕсли;

				КонецЦикла;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				ДанныеЗаполненияЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;

				Если ДанныеЗаполненияЭтоЗаказ Тогда
					ЗаказКлиента = ДанныеЗаполнения.Ссылка;
					ВидЦен 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Иначе       // возврат
					ЗаказКлиента    = ДанныеЗаполнения.ЗаказКлиента;
					ВыбылоДенег 	= ДанныеЗаполнения.ПоступилоДенег;
					КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
					ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
					ВидЦен 			= ДанныеЗаполнения.ВидЦен;
					ДокументРеализации = ДанныеЗаполнения.Ссылка;
				КонецЕсли;

				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта = ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ВидЦен) Тогда
					Валюта = ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий 		= ДанныеЗаполнения.Комментарий;
				Склад 				= ДанныеЗаполнения.Склад;
				ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
				ВаучерСкидки		= ДанныеЗаполнения.ВаучерСкидки;
				Организация			= ДанныеЗаполнения.Организация;
				Договор 			= ДанныеЗаполнения.Договор;
				ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег;
				Сотрудник			= ДанныеЗаполнения.Сотрудник;
				ПередачаДляКомиссионнойТорговли = ДанныеЗаполнения.ПередачаДляКомиссионнойТорговли;
				Сумма = 0;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					количество = ТекСтрокаТовара.Количество;
					НоваяСтрока.Количество 			= Количество;
					НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.ОСтроке				= ТекСтрокаТовара.ОСтроке;

					Если ДанныеЗаполненияЭтоЗаказ Тогда
						НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ТекСтрокаТовара.Номенклатура, ВидЦен, дата, ЛОЖЬ, Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
						НоваяСтрока.Сумма			= НоваяСтрока.Цена * количество;
					Иначе     // возврат
						НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
						НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
						НоваяСтрока.Сумма			= ТекСтрокаТовара.Сумма;
					КонецЕсли;

					Сумма = Сумма + НоваяСтрока.Сумма;

				КонецЦикла;

				Если ДанныеЗаполненияЭтоЗаказ Тогда
					ТовараНаСумму = Сумма;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УстановкиЦен") Тогда
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					ВидЦен = ДанныеЗаполнения.ВидЦен;
					Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий = ДанныеЗаполнения.Комментарий;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Номенклатура 	 = ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.Цена 		 	 = ТекСтрокаТовара.Цена;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ОбработкаПроведения(Отказ, Режим)

		Если НеПроводить Тогда
			НеПроводить = ЛОЖЬ;
			Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Если НЕ Отказ Тогда

				ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
				Движения.Товары.Записать();
				Движения.Деньги.Записать();
				Движения.ВаловаяПрибыль.Записать();
				Движения.ЗаказыПоставщикам.Записать();
				Движения.Закупки.Записать();
				Движения.ОплатаПоЗаказам.Записать();
				Движения.Продажи.Записать();
				Движения.Расчеты.Записать();
				Движения.РасчетыСОтсрочкой.Записать();
				Движения.РасчетыСПоставщиками.Записать();
				Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
				Движения.РасчетыВВалюте.Записать();
				Движения.ПродажиСотрудников.Записать();
				Движения.ТоварыПереданныеНаКомиссию.Записать();
				Движения.НакоплениеНаВаучеры.Записать();
				Движения.ВнутренниеЗаказыТоваров.Записать();

				Если НЕ Сторный Тогда
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
				Иначе
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
				КонецЕсли;

				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
				ЭтоКлиент 						 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
				ВестиУчетЗаказовПоставщикам 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
				ВестиУчетПоКлиентам         	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
				ВестиУчетПоПоставщикам      	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
				ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				ВестиУчетПродажСотрудников  = НЕ ЭтоЗаказ И ЭтоКлиент
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников")
				И ЗначениеЗаполнено(Сотрудник);
				ВестиУчетВаловойПрибыли 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
				ВестиУчетВалют				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
				ВестиУчетДвиженияДенег  	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
				ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
				ВестиУчетВнутреннихЗаказов  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВнутреннихЗаказов");

				Если ВестиУчетВнутреннихЗаказов Тогда
					СтруктураТаблиц = ОбщийМодульСервер.ПолучитьТаблицуОстатковВнутреннихЗаказов(Ссылка, Склад, Дата);
					ТаблицаВнутреннихЗаказов = СтруктураТаблиц.ТаблицаВнутреннихЗаказов;
				КонецЕсли;

				РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноКоличеству");
				СуммаДополнительныхРасходовКРаспределению = 0;
				СуммаОплатыКонтруИзТаблицы 	= 0;
				ТаблицаЦенСписания 			= Неопределено;

				Если ВестиУчетВалют
					И ВестиУчетДвиженияДенег
					И ЗначениеЗаполнено(Валюта)
					И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта")
					И (Курс = 1 ИЛИ КУРС = 0) Тогда

					Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);
				ИначеЕсли Курс = 0 Тогда
					Курс = 1;
				КонецЕсли;

				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
					И ЗначениеЗаполнено(ВидЦен)
					И ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
					И НЕ ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда

					ВалютаЦены = ВидЦен.ВалютаЦены;
				Иначе
					ВалютаЦены = Неопределено;
				КонецЕсли;

				НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
				ВалютаКонтрагента = ОбщийМодульСервер.ПолучитьВалютуКонтрагента(КлиентПоставщик);

				РасчетыВВалюте = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(ВалютаКонтрагента)
				И НЕ ВалютаКонтрагента = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

				РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости");
				ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = 0;
				СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0;
				КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0;
				ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров");

				Если ДополнительныеРасходы.Количество() = 0 Тогда
					СуммаОплатыКонтруИзТаблицы = ОбщийМодульСервер.ПоКурсу(ВыбылоДенег, , Валюта, Дата, Курс);
				ИначеЕсли НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров Тогда
					Для Каждого СтрокаДополнительныхРасходов Из ДополнительныеРасходы Цикл
						Если НЕ СтрокаДополнительныхРасходов.НеРаспределятьНаСтоимость Тогда
							СуммаДополнительныхРасходовКРаспределению = СуммаДополнительныхРасходовКРаспределению + СтрокаДополнительныхРасходов.Сумма * СтрокаДополнительныхРасходов.Курс;
						Иначе
							СуммаОплатыКонтруИзТаблицы = СуммаОплатыКонтруИзТаблицы + СтрокаДополнительныхРасходов.Сумма * СтрокаДополнительныхРасходов.Курс;
						КонецЕсли;
					КонецЦикла;

					Для Каждого СтрокаТовара Из Товары Цикл

						Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура)
							И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура) Тогда

							ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль + 1;

							Если НЕЗначениеЗаполненоВалютаЦены Тогда
								СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов + СтрокаТовара.Сумма;
							Иначе
								СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов + ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
							КонецЕсли;

							КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов + СтрокаТовара.Количество;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если ЭтоЗаказ Тогда
					Если ВестиУчетЗаказовПоставщикам Тогда
						Движения.ЗаказыПоставщикам.Записывать = ИСТИНА;
						Сумма = 0;

						Для Каждого СтрокаТовара Из Товары Цикл
							ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьПриход();
							ЗаписьРегистра.Активность 	= ИСТИНА;
							ЗаписьРегистра.Количество   = СтрокаТовара.Количество;
							ЗаписьРегистра.Номенклатура = СтрокаТовара.Номенклатура;
							ЗаписьРегистра.Период       = Дата;
							ЗаписьРегистра.Поставщик    = КлиентПоставщик;
							Сумма = Сумма + СтрокаТовара.Сумма
						КонецЦикла;

						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
							Движения.ОплатаПоЗаказам.Записывать   = ИСТИНА;
							ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
							ЗаписьРегистра.Период		= Дата;
							ЗаписьРегистра.Активность 	= ИСТИНА;
							ЗаписьРегистра.Заказ   		= Ссылка;
							ЗаписьРегистра.Сумма 		= Сумма;

							Если ВыбылоДенег <> 0 Тогда
								ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
								ЗаписьРегистра.Период	  = Дата;
								ЗаписьРегистра.Активность = ИСТИНА;
								ЗаписьРегистра.Заказ   	  = Ссылка;
								ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Движения.ЗаказыПоставщикам.Записывать = ВестиУчетЗаказовПоставщикам;

					Если НЕ ОтменитьПроверкиНаОтказ
						И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
						И ЗначениеЗаполнено(Договор) Тогда

						Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, ЭтоКлиент, Дата, ТовараНаСумму, ТовараВКоличестве, ИСТИНА, ВыбылоДенег, Ссылка);
					КонецЕсли;

					Если НЕ Отказ Тогда

						Если ЗначениеЗаполненоКлиентПоставщик
							И НЕ ЭтоКлиент Тогда

							ПроизводительНоменклатуры 		= КлиентПоставщик.Производитель;
							ЗначениеЗаполненоПроизводитель 	= ЗначениеЗаполнено(ПроизводительНоменклатуры);
						Иначе
							ЗначениеЗаполненоПроизводитель 	= ЛОЖЬ;
							ПроизводительНоменклатуры 		= ПредопределенноеЗначение("Справочник.Производители.ПустаяСсылка");
						КонецЕсли;

						Если НЕ ОтменитьПроверкиНаОтказ
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
							И НЕ ЗначениеЗаполнено(Склад) Тогда

							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Склад!"), , Ссылка);
							КонецЕсли;

							Отказ = ИСТИНА;
						КонецЕсли;

						Если НЕ Отказ
							И ЭтоКлиент Тогда

							СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Ссылка, Склад, Дата, ЛОЖЬ, , , ИСТИНА);
							ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
						КонецЕсли;

						Если НЕ Отказ Тогда
							ЧислоСтрок = Товары.Количество();
							ПолныйСерийныйУчет = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
							Для Каждого ТекСтрокаТовара Из Товары Цикл

								Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
									И НЕ ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения) Тогда

									СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
									СерияОбъект.ДокументПриобретения = Ссылка;
									СерияОбъект.Записать();
								КонецЕсли;

								Номенклатура      = ТекСтрокаТовара.Номенклатура;
								КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
								Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
								СерияНоменклатуры = ?(ПолныйСерийныйУчет, ТекСтрокаТовара.СерияНоменклатуры, Неопределено);

								Если НЕ ОтменитьПроверкиНаОтказ
									И НЕ Отказ
									И ЗначениеЗаполнено(СерияНоменклатуры) Тогда

									Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Дата - 1);

									Если Отказ Тогда
										ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + ТекСтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Ссылка);
									КонецЕсли;
								КонецЕсли;

								Если НЕ Отказ Тогда

									Если ЗначениеЗаполненоПроизводитель
										И НЕ ЗначениеЗаполнено(Номенклатура.Производитель) Тогда

										НоменклатураОбъект 	= Номенклатура.ПолучитьОбъект();
										НоменклатураОбъект.Производитель = ПроизводительНоменклатуры;
										НоменклатураОбъект.Записать();
										Номенклатура 		= НоменклатураОбъект.Ссылка;
									КонецЕсли;

									Если ВестиУчетЗаказовПоставщикам Тогда
										ЗаказПоставщикуКлиентПоставщик = Неопределено;
										Если ЗначениеЗаполнено(ТекСтрокаТовара.ЗаказПоставщику) Тогда
											ЗаказПоставщикуКлиентПоставщик = ТекСтрокаТовара.ЗаказПоставщику.КлиентПоставщик;
										ИначеЕсли ЗначениеЗаполнено(ЗаказПоставщику) Тогда
											ЗаказПоставщикуКлиентПоставщик = ЗаказПоставщику.КлиентПоставщик;
										КонецЕсли;

										Если ЗначениеЗаполнено(ЗаказПоставщикуКлиентПоставщик) Тогда
											ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьРасход();
											ЗаписьРегистра.Активность 	= ИСТИНА;
											ЗаписьРегистра.Количество   = Количество;
											ЗаписьРегистра.Номенклатура = Номенклатура;
											ЗаписьРегистра.Период       = Дата;
											ЗаписьРегистра.Поставщик    = ЗаказПоставщикуКлиентПоставщик;
										КонецЕсли;
									КонецЕсли;

									Если НЕЗначениеЗаполненоВалютаЦены Тогда
										СуммаТов = ТекСтрокаТовара.Сумма;
									Иначе
										СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Сумма, ,ВалютаЦены, Дата);
									КонецЕсли;

									Если ТовараВКоличестве = 0 Тогда
										ТовараВКоличестве = 1;
									КонецЕсли;

									Если НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров Тогда

										Если ДополнительныеРасходыРаспределилиВручную
											И НЕ ТекСтрокаТовара.СуммаПолная = 0 Тогда

											СуммаТов = ТекСтрокаТовара.СуммаПолная;
										Иначе

											Если НЕ СуммаДополнительныхРасходовКРаспределению = 0
												И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(Номенклатура) Тогда

												Если РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме Тогда
													Если НЕ ТовараВКоличестве = 0 Тогда
														СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению * (ТекСтрокаТовара.Количество / ?(КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0,  1,  КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов)); // без единиц измерения
													КонецЕсли;
												ИначеЕсли РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости Тогда // Распределять дополнительные расходы пропорционально на единицу номенклатуры независимо от ее стоимости и количества
													Если НЕ ТовараВКоличестве = 0 Тогда
														СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению / ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль; // без единиц измерения
													КонецЕсли;
												Иначе
													Если НЕ СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0 Тогда

														СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению * СуммаТов / СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;

									Если НЕ ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
										ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
										ЦенаСписания = 0;

										Если ВестиУчетВаловойПрибыли
											И ЭтоКлиент Тогда

											СтруктураСреднейВаловойПрибыли = ОбщийМодульТоварСервер.ПолучитьСреднююВаловуюПрибыльРеализации(Номенклатура, Дата, Ссылка, ИСТИНА, СерияНоменклатуры);

											Если НЕ СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль = 0 Тогда
												Движение = Движения.ВаловаяПрибыль.Добавить();
												Движение.Количество   = Количество;
												Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
												Движение.Период 	  = Дата;
												Движение.Номенклатура = Номенклатура;

												Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
													Движение.СерияНоменклатуры = СерияНоменклатуры;
												КонецЕсли;

												Движение.Склад		  = Склад;
												Движение.Комментарий  = КомментарийСтроки;
												Движение.Сумма 		  = (СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль * ?(Количество = 0, 1, Количество));
												Движение.ПроцентНаценки 	  = СтруктураСреднейВаловойПрибыли.ПроцентНаценки;
												Движение.РентабельностьПродаж = СтруктураСреднейВаловойПрибыли.РентабельностьПродаж;
											КонецЕсли;
										КонецЕсли;

										Если НЕ ПредопределенныйТовар
											И НЕ Отказ Тогда

											Движение = Движения.Товары.Добавить();
											Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
											Движение.Период 	  = Дата;
											Движение.Номенклатура = Номенклатура;
											Движение.Склад 		  = Склад;
											Движение.Количество   = Количество;

											Если ЭтоКлиент Тогда // при возврате средняя цена приходов
												Если НЕ ТаблицаЦенСписания = Неопределено Тогда
													СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
													Если НЕ СтрокаЦеныСписания = Неопределено Тогда
														ЦенаСписания = СтрокаЦеныСписания.Цена;
													Иначе
														ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ИСТИНА, Дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения, ИСТИНА);
													КонецЕсли;
												Иначе
													ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ИСТИНА, Дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения, ИСТИНА);
												КонецЕсли;

												Движение.Сумма 	 = Количество * ЦенаСписания;
											Иначе
												Движение.Сумма 	 = СуммаТов;
											КонецЕсли;

											Движение.Комментарий = КомментарийСтроки;
											Движение.СерияНоменклатуры = СерияНоменклатуры;
											Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
										КонецЕсли;
									Иначе // это набор
										ОбработатьДвиженияДляНабора(ТекСтрокаТовара.Номенклатура, Количество, СуммаТов, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, ВалютаЦены, ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль);
									КонецЕсли;

									Если ЗначениеЗаполненоКлиентПоставщик Тогда

										Если ЭтоКлиент
											И ВестиУчетПродажСотрудников Тогда

											Движение = Движения.ПродажиСотрудников.Добавить();
											Движение.Комментарий  = КомментарийСтроки;
											Движение.Номенклатура = Номенклатура;
											Движение.Период 	  = Дата;
											Движение.Сотрудник    = Сотрудник;
											Движение.Сумма  	  = -СуммаТов;
											Движение.Количество	  = -Количество;
										КонецЕсли;

										Если ЭтоКлиент Тогда
											Движение = Движения.Продажи.Добавить();
											Движение.Клиент 	= КлиентПоставщик;
											Движение.Склад		= Склад;
											Движение.Количество = -Количество;
											Движение.Сумма 		= -СуммаТов;
											Движение.Договор 	  = Договор;
											Движение.Период 	  = Дата;
											Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
											Движение.Комментарий  = КомментарийСтроки;

											Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
												И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда

												Движение.СерияНоменклатуры = СерияНоменклатуры;
											КонецЕсли;
										ИначеЕсли НЕ ЗначениеЗаполнено(ПартияПриобретения) Тогда
											Движение = Движения.Закупки.Добавить();
											Движение.Поставщик 	  = КлиентПоставщик;
											Движение.Количество   = Количество;
											Движение.Сумма 		  = СуммаТов;
											Движение.Договор 	  = Договор;
											Движение.Период 	  = Дата;
											Движение.Номенклатура = ТекСтрокаТовара.Номенклатура;
											Движение.Комментарий  = КомментарийСтроки;

											Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
												И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда

												Движение.СерияНоменклатуры = СерияНоменклатуры;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;

							КонецЦикла;

							Если НЕ Отказ
								И НЕ ВыбылоДенег = 0
								И ЗначениеЗаполнено(ЗаказКлиента)
								И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда

								ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
								ЗаписьРегистра.Период     = Дата;
								ЗаписьРегистра.Активность = ИСТИНА;
								ЗаписьРегистра.Заказ   	  = Ссылка;
								ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
							КонецЕсли;

							Если НЕ Отказ
								И ВестиУчетВнутреннихЗаказов Тогда

								ТолькоТовары = Новый ТаблицаЗначений;
								ТолькоТовары.Колонки.Добавить("Номенклатура");
								ТолькоТовары.Колонки.Добавить("Количество");
								Для Каждого СтрокаТаблицыИсточника Из Товары Цикл
									СтрокаТаблицыПриемника = ТолькоТовары.Добавить();
									СтрокаТаблицыПриемника.Номенклатура = СтрокаТаблицыИсточника.Номенклатура;
									СтрокаТаблицыПриемника.Количество   = ?(ЗначениеЗаполнено(СтрокаТаблицыИсточника.ЕдиницаИзмерения), СтрокаТаблицыИсточника.ЕдиницаИзмерения.Количество * СтрокаТаблицыИсточника.Количество, СтрокаТаблицыИсточника.Количество);

								КонецЦикла;

								ТолькоТовары.Свернуть("Номенклатура", "Количество");
								Для Каждого ТекСтрокаТовара Из ТолькоТовары Цикл
									Номенклатура = ТекСтрокаТовара.Номенклатура;
									Количество 	 = ТекСтрокаТовара.Количество;
									СтрокаСписанияВнутреннегоЗаказа = ТаблицаВнутреннихЗаказов.Найти(Номенклатура, "Номенклатура");

									Если НЕ СтрокаСписанияВнутреннегоЗаказа = Неопределено Тогда
										КоличествоНедополученнойРанее = СтрокаСписанияВнутреннегоЗаказа.Количество;
										Если КоличествоНедополученнойРанее > 0 Тогда
											Если КоличествоНедополученнойРанее > Количество Тогда
												КоличествоКСписанию = Количество;
											Иначе
												КоличествоКСписанию = КоличествоНедополученнойРанее;
											КонецЕсли;

											Движение = Движения.ВнутренниеЗаказыТоваров.Добавить();
											Движение.Количество 	= КоличествоКСписанию;
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Период 		= Дата;
											Движение.Номенклатура 	= Номенклатура;
											Движение.Склад 			= Склад;
										КонецЕсли;
									КонецЕсли;

								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	// заказ/не заказ

				Если НЕ Отказ
					И ВестиУчетДвиженияДенег Тогда

					Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
						ФормаОплаты = ХранилищеДенег.ФормаОплаты;
					Иначе
						ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
					КонецЕсли;

					Если ЭтоЗаказ
						ИЛИ ДополнительныеРасходы.Количество() = 0 Тогда

						Если НЕ ВыбылоДенег = 0 Тогда
							СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(ВыбылоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ);
							Отказ  = СтруктураПополнения.Отказ;
							Если НЕ Отказ Тогда
								Если ЗначениеЗаполненоКлиентПоставщик Тогда
									Если ЭтоКлиент Тогда
										Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
									Иначе
										Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
									КонецЕсли;
								Иначе
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
								КонецЕсли;
							КонецЕсли;

							Если НЕ Отказ
								И НЕ СтруктураПополнения.СуммаПополнения = 0 Тогда

								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата - 1;
								Движение.Статья 		= Статья;
								Движение.Валюта 		= СтруктураПополнения.Валюта;
								Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
								Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
								Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
								Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
								Движение.Период 		= Дата - 1;
								Движение.Статья 		= Статья;
								Движение.Валюта 		= Валюта;
								Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
								Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
								Движение.ХранилищеДенег = ХранилищеДенег;
								Движение.ФормаОплаты 	= ФормаОплаты;

								Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно()
									И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда

									ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								КонецЕсли;
							КонецЕсли;

							Если НЕ Отказ Тогда
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата;
								Движение.Статья 		= Статья;
								Движение.Сумма 			= ВыбылоДенег * Курс;
								Движение.Валюта 		= Валюта;
								Движение.СуммаВВалюте 	= ВыбылоДенег;
								Движение.ХранилищеДенег = ХранилищеДенег;
								Движение.ФормаОплаты 	= ФормаОплаты;
							КонецЕсли;

							Если РасчетыВВалюте Тогда
								Движение = Движения.РасчетыВВалюте.Добавить();
								Если ЭтоКлиент Тогда
									Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Иначе
									Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								КонецЕсли;

								Движение.КлиентПоставщик = КлиентПоставщик;
								Движение.Договор 	 = Договор;
								Движение.Период 	 = Дата;
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(ВыбылоДенег, ВалютаКонтрагента, Валюта, Дата, Курс);
								Движение.Валюта 	 = ВалютаКонтрагента;
								Движение.СуммаВОсновнойВалюте = ВыбылоДенег * Курс;
							КонецЕсли;
						КонецЕсли;
					Иначе
						СуммаДенег = 0;
						ТаблицаОстатков = Новый ТаблицаЗначений;
						ТаблицаОстатков.Колонки.Добавить("Хранилище");
						ТаблицаОстатков.Колонки.Добавить("Сумма");
						ТаблицаОстатков.Колонки.Добавить("Дата");

						Для Каждого СтрокаДополнительныхРасходов Из ДополнительныеРасходы цикл
							СуммаСтроки 			 = СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);
							СуммаДенег 				 = СуммаДенег + СуммаСтроки;
							СтрокаОстатков 			 = ТаблицаОстатков.Добавить();
							СтрокаОстатков.Хранилище = ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(СтрокаДополнительныхРасходов.ХранилищеДенег, СтрокаДополнительныхРасходов.Валюта), СтрокаДополнительныхРасходов.ХранилищеДенег);
							СтрокаОстатков.Сумма 	 = СуммаСтроки;

							Если СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' Тогда
								СтрокаОстатков.Дата = Дата;
							Иначе
								СтрокаОстатков.Дата = СтрокаДополнительныхРасходов.ДатаРасхода;
							КонецЕсли;

						КонецЦикла;

						ТаблицаОстатков.Свернуть("Хранилище, Дата", "Сумма");
						ТаблицаОстатков.Сортировать("Дата");
						Если НЕ ОтменитьПроверкиНаОтказ Тогда
							Для Каждого СтрокаОстатков Из ТаблицаОстатков цикл
								Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СтрокаОстатков.Сумма, СтрокаОстатков.Дата, ?(ЗначениеЗаполнено(СтрокаОстатков.Хранилище), СтрокаОстатков.Хранилище.ФормаОплаты, ФормаОплаты), ?(ЗначениеЗаполнено(СтрокаОстатков.Хранилище), СтрокаОстатков.Хранилище.Валюта, Валюта), ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);

								Если Отказ Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

						Если НЕ Отказ Тогда
							Для Каждого СтрокаДополнительныхРасходов Из ДополнительныеРасходы Цикл

								Если СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' Тогда
										ДатаРасхода = Дата
									Иначе
										ДатаРасхода = СтрокаДополнительныхРасходов.ДатаРасхода;
									КонецЕсли;

								Если РасчетыВВалюте
									И СтрокаДополнительныхРасходов.НеРаспределятьНаСтоимость Тогда // поставщику или возврат клиенту

									Движение = Движения.РасчетыВВалюте.Добавить();

									Если ЭтоКлиент Тогда
										Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
									Иначе
										Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
									КонецЕсли;

									Движение.КлиентПоставщик = КлиентПоставщик;
									Движение.Договор 	 = Договор;
									Движение.Период = ДатаРасхода;
									Движение.Комментарий = СтрокаДополнительныхРасходов.ОСтроке;
									Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(СтрокаДополнительныхРасходов.Сумма, ВалютаКонтрагента, СтрокаДополнительныхРасходов.Валюта, СтрокаДополнительныхРасходов.ДатаРасхода, СтрокаДополнительныхРасходов.Курс);
									Движение.Валюта 	 = ВалютаКонтрагента;
									Движение.СуммаВОсновнойВалюте = СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);
								КонецЕсли;

								Если НЕ Отказ Тогда
									Движение = Движения.Деньги.Добавить();
									Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
									Движение.Период = ДатаРасхода;
									Движение.Сумма 			= СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);
									Движение.Валюта 		= ?(ЗначениеЗаполнено(СтрокаДополнительныхРасходов.Валюта), СтрокаДополнительныхРасходов.Валюта, Валюта);
									Движение.СуммаВВалюте 	= СтрокаДополнительныхРасходов.Сумма;
									Движение.ХранилищеДенег = ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(СтрокаДополнительныхРасходов.ХранилищеДенег, СтрокаДополнительныхРасходов.Валюта), СтрокаДополнительныхРасходов.ХранилищеДенег);
									Движение.ФормаОплаты 	= ?(ВестиУчетВалют, ОбщийМодульСервер.ПроверитьСменитьПараметрДенег(ФормаОплаты, Движение.ХранилищеДенег, ИСТИНА), ФормаОплаты);
									Движение.Статья 		= СтрокаДополнительныхРасходов.Статья;
								Иначе
									Прервать;
								КонецЕсли;

							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ Отказ
					И ЗначениеЗаполненоКлиентПоставщик Тогда

					Если ЗначениеЗаполнено(ВидЦен)
						И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда

						ВалютаЦены = ВидЦен.ВалютаЦены;
						КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаЦены, Дата);
					Иначе
						КурсТовара = 1;
						ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
					КонецЕсли;

					ИтогоСумма = Товары.Итог("Сумма") * КурсТовара;

					Если НЕ ЭтоЗаказ
						И НЕ ИтогоСумма = 0 Тогда

						Если ЭтоКлиент
							И ВестиУчетПоКлиентам Тогда

							Движение 			 = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ИтогоСумма;
							КонецЕсли;

						ИначеЕсли ВестиУчетПоПоставщикам Тогда
							Движение			 = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								Движение			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ИтогоСумма;
							КонецЕсли;
						КонецЕсли;

						Если РасчетыВВалюте Тогда
							Движение = Движения.РасчетыВВалюте.Добавить();
							Если ЭтоКлиент Тогда
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Иначе
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							КонецЕсли;

							Движение.КлиентПоставщик = КлиентПоставщик;
							Движение.Договор 	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Товары.Итог("Сумма"), ВалютаКонтрагента, ВалютаЦены, Дата, КурсТовара);
							Движение.Валюта 	 = ВалютаКонтрагента;
							Движение.СуммаВОсновнойВалюте = ИтогоСумма;
						КонецЕсли;
					КонецЕсли;

					Если ВестиУчетДвиженияДенег Тогда
						Если НЕ СуммаОплатыКонтруИзТаблицы = 0 Тогда

							Если ЭтоКлиент
								И ВестиУчетПоКлиентам Тогда

								Движение 			 = Движения.Расчеты.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Период 	 = Дата;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;// ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
								Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;// СтрокаРасхода.Сумма * СтрокаРасхода.Курс;

								Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
									Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
									Движение.Клиент 	 = КлиентПоставщик;
									Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
									Движение.Договор	 = Договор;
									Движение.Комментарий = Комментарий;// ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
									Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;// СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
								КонецЕсли;
							ИначеЕсли ВестиУчетПоПоставщикам Тогда
								Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Период 	 = Дата;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;// ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
								Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;// СтрокаРасхода.Сумма * СтрокаРасхода.Курс;

								Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
									Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
									Движение.Поставщик 	 = КлиентПоставщик;
									Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
									Движение.Договор	 = Договор;
									Движение.Комментарий = Комментарий;// ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
									Движение.Сумма		 = СуммаОплатыКонтруИзТаблицы;// СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ Отказ
					И НЕ ЭтоКлиент
					И НЕ НеРегистрироватьЦеныЗаСчетЭтогоДокумента Тогда

					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
						Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления") Тогда

							Если ЗначениеЗаполненоКлиентПоставщик
								И НЕ ЭтоКлиент
								И ЗначениеЗаполнено(КлиентПоставщик.ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда

								ВидЦенДляРегистрацииФактическойЦеныПриобретения = КлиентПоставщик.ВидЦенДляРегистрацииФактическойЦеныПриобретения;
							ИначеЕсли ЗначениеЗаполнено(Склад)
								И ЗначениеЗаполнено(Склад.ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда

								ВидЦенДляРегистрацииФактическойЦеныПриобретения = Склад.ВидЦенДляРегистрацииФактическойЦеныПриобретения;
							Иначе
								ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
							КонецЕсли;

							ВидЦенДляРегистрацииФактическойЦеныПриобретенияВалютаЦены = Неопределено;
							СтрокаТовараСДопРасх = Новый Структура("Цена", 0);
							СтрокаТовараСДопРасх.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
							Если НЕ СуммаДополнительныхРасходовКРаспределению = 0 Тогда
								Если НЕ ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
									ВидЦенДляРегистрацииФактическойЦеныПриобретения = ВидЦен;
								КонецЕсли;

								НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
								ВидЦенДляРегистрацииФактическойЦеныПриобретенияВалютаЦены = ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены;
								ЗначениеЗаполненоВидЦен = ЗначениеЗаполнено(ВидЦен);
								Для Каждого СтрокаТовара Из Товары Цикл
									Если ЗначениеЗаполненоВидЦен Тогда
										ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , , СтрокаТовара.ЕдиницаИзмерения);
									КонецЕсли;

									Номенклатура = СтрокаТовара.Номенклатура;
									СтрокаТовараСДопРасх.Номенклатура = Номенклатура;

									Если ДополнительныеРасходыРаспределилиВручную
										И НЕ СтрокаТовара.ЦенаПолная = 0 Тогда

										СтрокаТовараСДопРасх.Цена = СтрокаТовара.ЦенаПолная;
									Иначе
										Если НЕЗначениеЗаполненоВалютаЦены Тогда

											СуммаТов = СтрокаТовара.Сумма;
										Иначе
											СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
										КонецЕсли;

										Если НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
											И НЕ СуммаДополнительныхРасходовКРаспределению = 0
											И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(Номенклатура) Тогда

											Если РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме Тогда
												Если НЕ ТовараВКоличестве = 0 Тогда
													СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению * (ТекСтрокаТовара.Количество / ?(КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0,  1,  КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов)); // без единиц измерения
												КонецЕсли;
											ИначеЕсли РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости Тогда // Распределять дополнительные расходы пропорционально на единицу номенклатуры независимо от ее стоимости и количества
												Если НЕ ТовараВКоличестве = 0 Тогда
													СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению / ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль; // без единиц измерения
												КонецЕсли;
											Иначе
												Если НЕ СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов = 0 Тогда

													СуммаТов = СуммаТов + СуммаДополнительныхРасходовКРаспределению * СуммаТов / СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДополнительныхРасходов;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;

										СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(?(СтрокаТовара.Количество = 0, 0, СуммаТов / СтрокаТовара.Количество), ВидЦенДляРегистрацииФактическойЦеныПриобретенияВалютаЦены, , Дата);
									КонецЕсли;

									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата, , , , , ЗагрузкаПоставки, СтрокаТовара.ЕдиницаИзмерения);

								КонецЦикла;
							Иначе
								Если ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда

									ВидЦенДляРегистрацииФактическойЦеныПриобретенияВалютаЦены = ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены;
									ВидЦенВалютаЦены = ВидЦен.ВалютаЦены;
								КонецЕсли;

								Для Каждого СтрокаТовара Из Товары Цикл
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, , , , , ЗагрузкаПоставки, СтрокаТовара.ЕдиницаИзмерения);
									Если ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
										СтрокаТовараСДопРасх.Номенклатура = СтрокаТовара.Номенклатура;
										СтрокаТовараСДопРасх.Цена = СтрокаТовара.Цена;

										Если НЕ ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены = ВидЦенВалютаЦены Тогда
											СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(СтрокаТовараСДопРасх.Цена, ВидЦенДляРегистрацииФактическойЦеныПриобретенияВалютаЦены, ВидЦенВалютаЦены, Дата);
										КонецЕсли;

										ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата, , , , , ЗагрузкаПоставки, СтрокаТовара.ЕдиницаИзмерения);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда

							ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
							ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
							формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРег(ОсновнаяФормулаПреобразованияЦен.Формула), "");
							ЕстьЛьготнаяЦена = НЕ найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
							ЕстьЦена 		 = НЕ найти(Формула, "ЦЕНА") = 0;

							Для Каждого СтрокаТовара Из Товары Цикл
								Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
									Если НЕ ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен Тогда
										Если НЕ СтрокаТовара.Номенклатура.Цена = СтрокаТовара.Цена Тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
											НоменклатураОбъект.Записать();
										КонецЕсли;
									Иначе
										Попытка
											Цена 	  = СтрокаТовара.Цена;
											НоваяЦена = 0;
											НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;

											Если ЕстьЦена Тогда
												Цена = СтрокаТовара.Цена;
											КонецЕсли;

											Если ЕстьЛьготнаяЦена Тогда
												ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);
											КонецЕсли;

											Выполнить(" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");

											Если НЕ СтрокаТовара.Номенклатура.Цена = СтрокаТовара.Цена Тогда
												НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
												НоменклатураОбъект.Цена = НоваяЦена;
												НоменклатураОбъект.Записать();
											КонецЕсли;

										Исключение
											Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

												ТекстОписаниеОшибки = ОписаниеОшибки();
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены Произошла ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
											КонецЕсли;

										КонецПопытки;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ Отказ
					И НЕ ЭтоКлиент Тогда

					Если ЗначениеЗаполнено(Склад)
						И ЗначениеЗаполнено(Склад.РегистрироватьВидЦенПриПоступлении) Тогда

						ДополнительныйВидЦенПриПоступлении = Склад.РегистрироватьВидЦенПриПоступлении;
					Иначе
						ДополнительныйВидЦенПриПоступлении = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегистрироватьВидЦенПриПоступлении");
					КонецЕсли;

					РегистрироватьВидЦенПриПоступлении = ЗначениеЗаполнено(ДополнительныйВидЦенПриПоступлении);

					Если РегистрироватьВидЦенПриПоступлении Тогда
						Для Каждого СтрокаТовара Из Товары Цикл
							Если НЕ СтрокаТовара.ДополнительнаяЦена = 0 Тогда
								СтрокаТовараДопЦены = Новый Структура;
								СтрокаТовараДопЦены.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
								СтрокаТовараДопЦены.Вставить("Цена", СтрокаТовара.ДополнительнаяЦена);
								ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ДополнительныйВидЦенПриПоступлении, СтрокаТовараДопЦены, Ссылка, СтрокаТовара.ОСтроке, Дата, ЛОЖЬ, , ЛОЖЬ, , , СтрокаТовара.ЕдиницаИзмерения, , ИСТИНА, ЛОЖЬ);
							КонецЕсли;

						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

				Если НЕ Отказ
					И ПередачаДляКомиссионнойТорговли
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") Тогда

					Для Каждого СтрокаТовара Из Товары Цикл
						Движение = Движения.ТоварыПереданныеНаКомиссию.Добавить();
						Движение.ВидДвижения 		  = ВидДвиженияНакопленияРасход;
						Движение.ДатаОтчетаПоКомиссии = Дата;
						Движение.Договор	 		  = Договор;
						Движение.Клиент 			  = КлиентПоставщик;
						Движение.Количество 		  = СтрокаТовара.Количество;
						Движение.Комментарий 	 	  = СтрокаТовара.ОСтроке;
						Движение.Номенклатура		  = СтрокаТовара.Номенклатура;
						Движение.Период				  = Дата;
						Движение.СерияНоменклатуры	  = СтрокаТовара.СерияНоменклатуры;
						Движение.Сумма             	  = СтрокаТовара.Сумма;

					КонецЦикла;
				КонецЕсли;

				Если ВестиУчетВаловойПрибыли Тогда
					ЕстьРасходыПозже();
				КонецЕсли;

				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда
					ОтслеживатьВаучерыВКачествеНоменклатуры = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
					Для Каждого СтрокаВаучер Из Ваучеры Цикл
						Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
							Если СтрокаВаучер.ВаучерИзъят Тогда

								Если НЕ ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Контрагент)
									И ЗначениеЗаполнено(КлиентПоставщик) Тогда

									ОбъектВаучер = СтрокаВаучер.Ваучер.ПолучитьОбъект();
									ОбъектВаучер.Контрагент = КлиентПоставщик;
									ОбъектВаучер.Записать();
								КонецЕсли;

								Если ОтслеживатьВаучерыВКачествеНоменклатуры
									И ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Номенклатура) Тогда

									Движение = Движения.Товары.Добавить();
									Движение.Номенклатура = СтрокаВаучер.Ваучер.Номенклатура;
									Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
									Движение.Период 	  = Дата;
									СкладДвижения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");

									Если НЕ ЗначениеЗаполнено(СкладДвижения) Тогда
										Если ЗначениеЗаполнено(Склад) Тогда
											СкладДвижения = Склад;
										Иначе
											СкладДвижения = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
										КонецЕсли;
									КонецЕсли;

									Движение.Склад 		  = СкладДвижения;
									Движение.Комментарий  = СтрокаВаучер.ОСтроке;
									Движение.Количество   = -1;
									Движение.Сумма 		  = 0;
									Движение.СписаниеИлиОприходование = ИСТИНА;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;

						Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер)
							И СтрокаВаучер.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта
							И НЕ СтрокаВаучер.Ваучер = ВаучерНакопления Тогда

							Движение = Движения.НакоплениеНаВаучеры.Добавить();
							Движение.Валюта			= Валюта;
							Движение.Ваучер			= СтрокаВаучер.Ваучер;
							Движение.ВидДвижения	= ВидДвиженияНакопленияРасход;
							Движение.Сумма			= -ТовараНаСумму * Курс;
							Движение.Период			= Дата;
							Движение.СуммаВВалюте	= -ТовараНаСумму;
							Движение.Комментарий	= Комментарий;
						КонецЕсли;

					КонецЦикла;

					Если ЗначениеЗаполнено(ВаучерНакопления) Тогда

						СуммаНакопления = 0;
						Для Каждого СтрокаТовара Из Товары Цикл
							СуммаНакопления = СуммаНакопления + ОбщийМодульТоварСервер.ВычислитьСуммуНакопления(ВаучерНакопления, СтрокаТовара.Номенклатура, СтрокаТовара.Сумма, Склад, Дата);
						КонецЦикла;

						Движение = Движения.НакоплениеНаВаучеры.Добавить();
						Движение.Валюта		  = ВаучерНакопления.Валюта;
						Движение.Ваучер		  = ВаучерНакопления;
						Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
						Движение.Период		  = Дата;
						Движение.Сумма		  = ОбщийМодульСервер.ПоКурсу(СуммаНакопления, ВаучерНакопления.Валюта, Валюта, Дата);
						Движение.СуммаВВалюте = СуммаНакопления;
						Движение.Комментарий  = Комментарий;

					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Движения.Продажи.Записывать 		  	= НЕ Отказ;
			Движения.ВаловаяПрибыль.Записывать 	  	= НЕ Отказ;
			Движения.Расчеты.Записывать 		  	= НЕ Отказ;
			Движения.РасчетыСОтсрочкой.Записывать 	= НЕ Отказ;
			Движения.РасчетыСПоставщиками.Записывать= НЕ Отказ;
			Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
			Движения.РасчетыВВалюте.Записывать		= НЕ Отказ;
			Движения.Деньги.Записывать 			  	= НЕ Отказ;
			Движения.ЗаказыПоставщикам.Записывать 	= НЕ Отказ;
			Движения.Закупки.Записывать 		  	= НЕ Отказ;
			Движения.ОплатаПоЗаказам.Записывать   	= НЕ Отказ;
			Движения.Товары.Записывать 			  	= НЕ Отказ;
			Движения.ПродажиСотрудников.Записывать  = НЕ Отказ;
			Движения.ВнутренниеЗаказыТоваров.Записывать 	   = НЕ Отказ;
			Движения.ТоварыПереданныеНаКомиссию.Записывать 	   = НЕ ОТКаз;
			Движения.НакоплениеНаВаучеры.Записывать	= НЕ Отказ;
		КонецЕсли;

	КонецПроцедуры

	Процедура ОбработкаУдаленияПроведения(Отказ)

		Попытка // ЭтотОбъект
			Если НЕ Отказ Тогда

				Если ЭтоЗаказ Тогда
					Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001751", , Отказ, ЭтотОбъект);
				Иначе
					Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001701", , Отказ, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;

		Исключение
		КонецПопытки;
		Если НЕ Отказ Тогда
			Для Каждого ТекСтрокаТовара Из Товары Цикл

				Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
					И ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения = Ссылка Тогда

					СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
					СерияОбъект.ДокументПриобретения = Неопределено;
					СерияОбъект.Записать();
				КонецЕсли;

			КонецЦикла;

			ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда
				ЕстьРасходыПозже();
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;

		Если НЕ Отказ
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА)
			И Модифицированность()
			И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
				ПодготовкаКПроведению(Отказ);
			КонецЕсли;

			Если ТовараВКоличестве 	= 0
				И ТовараНаСумму 	= 0
				И ВыбылоДенег		= 0
				И РежимЗаписи 		= РежимЗаписиДокумента.Проведение Тогда

				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
				ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);
				ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "ДополнительныеРасходы", "Статья", "-");
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПодготовкаКПроведению(Отказ) Экспорт

		// повтор в модулях форм
Если НЕ Отказ
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда

			Если Дата > ТекущаяДата()
				И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда

				Дата = ТекущаяДата();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
				И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда

				ХранилищеДенег = ОбщийМодульПовтор.НайтиХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
			КонецЕсли;

			ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
			НеСворачиватьТоварыПоКоличествуПриПриходованииТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара");

			ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");

			Если НЕ НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
				Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ЦенаДобавочная, ЦенаПолная, ДополнительнаяЦена, ЗаказКлиента, ЗаказПоставщику, ЕдиницаИзмерения, ОСтроке", "Количество, Сумма, СуммаПолная");
			КонецЕсли;

			МассивПустыхСтрок  = Новый Массив;
			МассивНоменклатуры = Новый Массив;
			МассивСерий 	   = Новый Массив;

			Для Каждого СтрокаТовары Из Товары Цикл
				НоменклатураСтроки = СтрокаТовары.Номенклатура;
				СерияНоменклатуры  = СтрокаТовары.СерияНоменклатуры;

				Если ИспользоватьЕдиницыИзмеренияНоменклатуры
					И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда

					НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(СтрокаТовары.ЕдиницаИзмерения) = Неопределено;
				Иначе
					НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(НоменклатураСтроки) = Неопределено;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
					МассивПустыхСтрок.Добавить(СтрокаТовары);
				ИначеЕсли НоменклатураПовторяется Тогда

					Если ВестиУчетСерийНоменклатуры
						И ЗначениеЗаполнено(СерияНоменклатуры) Тогда

						Если НЕ массивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
							Отказ = ИСТИНА;
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется серия товара") + ": " + НоменклатураСтроки, , Ссылка);
						КонецЕсли;
					ИначеЕсли НЕ НеСворачиватьТоварыПоКоличествуПриПриходованииТовара
						И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура") + ": " + НоменклатураСтроки, , Ссылка);
					КонецЕсли;
				Иначе

					Если ИспользоватьЕдиницыИзмеренияНоменклатуры
						И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда

						МассивНоменклатуры.Добавить(СтрокаТовары.ЕдиницаИзмерения);
					Иначе
						МассивНоменклатуры.Добавить(НоменклатураСтроки);
					КонецЕсли;

					Если ВестиУчетСерийНоменклатуры
						И ЗначениеЗаполнено(СерияНоменклатуры) Тогда

						МассивСерий.Добавить(СерияНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаТовары Из МассивПустыхСтрок Цикл
				Товары.Удалить(СтрокаТовары);
			КонецЦикла;

			Для Каждого СтрокаДополнительныхРасходов Из ДополнительныеРасходы Цикл

				Если СтрокаДополнительныхРасходов.Сумма = 0
					И НЕ СтрокаДополнительныхРасходов.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров") Тогда

					МассивПустыхСтрок.Добавить(СтрокаДополнительныхРасходов);
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДополнительныхРасходов.Статья) Тогда
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаДополнительныхРасходов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!"), , Ссылка);
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

			Для Каждого СтрокаДополнительныхРасходов Из МассивПустыхСтрок Цикл
				ДополнительныеРасходы.Удалить(СтрокаДополнительныхРасходов);
			КонецЦикла;

			Если ЭтоЗаказ Тогда
				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
					Если НЕ ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ с предоплатой");
					Иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ поставщику");
					КонецЕсли;
				Иначе
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое приобретение");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда

					Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
						Если ПередачаДляКомиссионнойТорговли Тогда
							Если НЕ ВыбылоДенег = 0 Тогда
								НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена комиссионера");
							Иначе
								НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат комиссионера");
							КонецЕсли;
						Иначе
							Если НЕ ВыбылоДенег = 0 Тогда

								НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена реализации");
							Иначе
								НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат покупателя");
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если НЕ ВыбылоДенег = 0 Тогда

							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение");
						Иначе
							НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
						КонецЕсли;
					КонецЕсли;
				Иначе
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходование");
				КонецЕсли;
			КонецЕсли;

			Если НЕ ВидДокумента = НовыйВидДокумента Тогда
				ВидДокумента = НовыйВидДокумента;
			КонецЕсли;

			ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);

			Если Курс = 0 Тогда
				Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);
			КонецЕсли;

			НовТовараВКоличестве = товары.итог("Количество");

			Если НЕ НовТовараВКоличестве = ТовараВКоличестве Тогда
				ТовараВКоличестве = НовТовараВКоличестве;
			КонецЕсли;

			Если ЗначениеЗаполнено(ВидЦен)
				И ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
				И НЕ ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда

				НовТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , ВидЦен.ВалютаЦены, Дата);

				Если НЕ ТовараНаСумму = НовТовараНаСумму Тогда
					ТовараНаСумму = НовТовараНаСумму;
				КонецЕсли;
			Иначе
				ТовараНаСумму = Товары.Итог("Сумма");
			КонецЕсли;

			Если НЕ Отказ Тогда

				РасчетыВВалюте = ЗначениеЗаполнено(КлиентПоставщик)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(КлиентПоставщик.ОсновнаяВалюта)
				И НЕ КлиентПоставщик.ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

				ВалютаКонтрагента = ОбщийМодульСервер.ПолучитьВалютуКонтрагента(КлиентПоставщик);

				ТовараНаСуммуВВалютеКУстановке = 0;

				Если РасчетыВВалюте Тогда
					ТовараНаСуммуВВалютеКУстановке = ОбщийМодульСервер.ПоКурсу(ТовараНаСумму, ВалютаКонтрагента, ?(ЗначениеЗаполнено(ВидЦен), ВидЦен.ВалютаЦены, Неопределено), Дата);
				КонецЕсли;

				Если НЕ ТовараНаСуммуВВалютеКУстановке = ТовараНаСуммуВВалюте Тогда
					ТовараНаСуммуВВалюте = ТовараНаСуммуВВалютеКУстановке;
				КонецЕсли;

			КонецЕсли;

			Если НЕ Отказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И ЗначениеЗаполнено(Договор) Тогда

				Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
					КлиентПоставщик = Договор.КлиентПоставщик;
				ИначеЕсли НЕ КлиентПоставщик = Договор.КлиентПоставщик Тогда
					Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
				КонецЕсли;

				Если ЗначениеЗаполнено(Договор)
					И ЗначениеЗаполнено(Организация)
					И НЕ Организация = Договор.Организация Тогда

					Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
			КонецЕсли;

			Разница = ТовараНаСумму - (ВыбылоДенег * Курс);

			Если НЕ Отказ
				И ЭтоЗаказ
				И Разница < 1 Тогда

				ЗаказОплачен = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПриКопировании(ОбъектКопирования)
		Комментарий = "";
	КонецПроцедуры

#КонецЕсли
