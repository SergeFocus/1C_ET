//sza140124-1706 
//sza130909-0239 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НЕ Отказ Тогда
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		движения.Товары.Записать();
		движения.Деньги.Записать();
		движения.ВаловаяПрибыль.Записать();
		движения.ЗаказыПоставщикам.Записать();
		движения.Закупки.Записать();
		движения.ОплатаПоЗаказам.Записать();
		движения.Продажи.Записать();
		движения.Расчеты.Записать();
		движения.РасчетыСПоставщиками.Записать();
		движения.Товары.Записать();
		Движения.ПродажиСотрудников.Записать();
		
		ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
		Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
		ВестиУчетЗаказовПоставщикам 	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
		
		ВестиУчетПродажСотрудников  = не ЭтоЗаказ И клиент и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		ВестиУчетВаловойПрибыли = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
		ВестиУчетДвиженияДенег  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
		ОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
		
		суммаСтрокаРасходов 	   = 0;
		суммаоплатыконтруизтаблицы = 0;
		
		для каждого СтрокаРасхода из ДополнительныеРасходы цикл
			
			Если НЕ СтрокаРасхода.НеРаспределятьНаСтоимость Тогда
				суммаСтрокаРасходов = суммаСтрокаРасходов + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
			иначе
				суммаоплатыконтруизтаблицы = суммаоплатыконтруизтаблицы + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			и ЗначениеЗаполнено(ВидЦен)
			и ЗначениеЗаполнено(ВидЦен.ВалютаЦены)
			и не ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ВалютаЦены = ВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = Неопределено;
		КонецЕсли;
		
		если ВестиУчетЗаказовПоставщикам 
			И ЭтоЗаказ тогда
			
			Движения.ЗаказыПоставщикам.Записывать = Истина;
			Сумма = 0;
			
			для каждого строкатовар из Товары цикл
				ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьПриход();
				ЗаписьРегистра.Активность 	= Истина;
				ЗаписьРегистра.Количество   = строкатовар.Количество;
				ЗаписьРегистра.Номенклатура = строкатовар.Номенклатура;
				ЗаписьРегистра.Период       = Дата;
				ЗаписьРегистра.Поставщик    = КлиентПоставщик;
				Сумма = Сумма + строкатовар.Сумма
			конеццикла;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
				Движения.ОплатаПоЗаказам.Записывать   = Истина;
				ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
				ЗаписьРегистра.Активность 	= Истина;
				ЗаписьРегистра.Заказ   		= Ссылка;
				ЗаписьРегистра.Сумма 		= Сумма;
				
				Если ВыбылоДенег <> 0 Тогда
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
					ЗаписьРегистра.Активность = Истина;
					ЗаписьРегистра.Заказ   	  = Ссылка;
					ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
				КонецЕсли;
			КонецЕсли;
			
		иначе			
			Движения.ЗаказыПоставщикам.Записывать = ВестиУчетЗаказовПоставщикам;
			
			Если не ОтменитьПроверкиНаОтказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
				и ЗначениеЗаполнено(Договор) Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, Истина, ВыбылоДенег, Ссылка);
			КонецЕсли;
			
			Если Не Отказ ТОгда   				
				
				Если ЗначениеЗаполненоКлиентПоставщик 
					и не клиент Тогда
					
					ПроизводительНоменклатуры 					= КлиентПоставщик.Производитель;
					ЗначениеЗаполненоПроизводительНоменклатуры 	= ЗначениеЗаполнено(ПроизводительНоменклатуры);
					
				иначе
					ЗначениеЗаполненоПроизводительНоменклатуры 	= ложь;
					ПроизводительНоменклатуры 					= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Производители.ПустаяСсылка()");
					
				КонецЕсли;
				
				Если не ОтменитьПроверкиНаОтказ
					И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
					и НЕ ЗначениеЗаполнено(Склад) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);	
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!");
						//Сообщение.Поле 	= "Склад";
						//Сообщение.Сообщить();	
						
					КонецЕсли;
					
					Отказ = Истина;					
				КонецЕсли;
				
				//Движения.Товары.Записывать = Истина;
				//Если ВестиУчетВаловойПрибыли тогда
				//	если клиент Тогда
				//		Движения.ВаловаяПрибыль.Записывать = Истина;
				//	КонецЕсли;
				//КонецЕсли;
				
				//Если ЗначениеЗаполненоКлиентПоставщик Тогда
				//	Если Клиент Тогда
				//		Движения.Продажи.Записывать = Истина;
				//	Иначе
				//		Движения.Закупки.Записывать = Истина;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если не отказ
					и ВестиУчетВаловойПрибыли 
					и не клиент тогда 
					
					СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ложь);
					ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;			
					
				КонецЕсли;
				
				числострок = товары.Количество();
				
				НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
				
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					
					Номенклатура      = ТекСтрокаТовары.Номенклатура;
					КомментарийСтроки = ?(ЗначениеЗаполнено(текстрокатовары.ОСтроке), текстрокатовары.ОСтроке, Комментарий);
					СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
					
					Если не ОтменитьПроверкиНаОтказ
						И НЕ Отказ
						И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
						
						Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Дата - 1);
						Если Отказ Тогда
							
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Ссылка);
							//Сообщение = Новый СообщениеПользователю;
							//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" попытка приходовать серию повторно!");
							//Сообщение.Сообщить();	
							
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ Отказ Тогда
						
						Если ЗначениеЗаполненоПроизводительНоменклатуры
							и не ЗначениеЗаполнено(Номенклатура.Производитель) ТОгда
							
							НоменклатураОбъект 	= Номенклатура.ПолучитьОбъект();
							НоменклатураОбъект.Производитель = ПроизводительНоменклатуры;
							НоменклатураОбъект.Записать();
							
							Номенклатура 		= НоменклатураОбъект.Ссылка;
							
						КонецЕсли;
						
						если ВестиУчетЗаказовПоставщикам тогда
							
							ЗаказПоставщикуКлиентПоставщик = Неопределено;
							Если ЗначениеЗаполнено(ТекСтрокаТовары.ЗаказПоставщику) Тогда
								ЗаказПоставщикуКлиентПоставщик = ТекСтрокаТовары.ЗаказПоставщику.КлиентПоставщик;
							иначеесли ЗначениеЗаполнено(ЗаказПоставщику) тогда
								ЗаказПоставщикуКлиентПоставщик = ЗаказПоставщику.КлиентПоставщик;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗаказПоставщикуКлиентПоставщик) Тогда
								ЗаписьРегистра = Движения.ЗаказыПоставщикам.ДобавитьРасход();
								ЗаписьРегистра.Активность 	= Истина;
								ЗаписьРегистра.Количество   = ТекСтрокаТовары.Количество;
								ЗаписьРегистра.Номенклатура = Номенклатура;
								ЗаписьРегистра.Период       = Дата;
								ЗаписьРегистра.Поставщик    = ЗаказПоставщикуКлиентПоставщик;
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕЗначениеЗаполненоВалютаЦены Тогда
							СуммаТов = ТекСтрокаТовары.Сумма;								
						Иначе
							СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовары.Сумма, ,ВалютаЦены, Дата);								
						КонецЕсли;							
						
						если не суммаСтрокаРасходов = 0 тогда
							СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
						КонецЕсли;
						
						если не ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
							
							ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
							
							Если НЕ ПредопределенныйТовар 
								и не отказ Тогда
								
								Движение = Движения.Товары.Добавить();
								Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
								Движение.Период 	  = Дата;
								Движение.Номенклатура = Номенклатура;
								Движение.Склад 		  = Склад;  				
								Движение.Количество   = ТекСтрокаТовары.Количество;					
								Движение.Сумма 		  = СуммаТов;
								Движение.Комментарий  = КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
							КонецЕсли;
							
							Если ВестиУчетВаловойПрибыли Тогда
								
								если клиент тогда    
									если не ТаблицаЦенСписания = Неопределено тогда
										СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
										
										Если не СтрокаЦеныСписания = Неопределено Тогда
											ЦенаСписания = СтрокаЦеныСписания.Цена;
										иначе
											ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка);
										КонецЕсли;	
										
									иначе
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка);
									КонецЕсли;
									
									если ЦенаСписания = 0 
										или не (СуммаТов - (ЦенаСписания * ТекСтрокаТовары.Количество)) = 0 тогда
										
										Движение = Движения.ВаловаяПрибыль.Добавить();
										Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
										Движение.Период 	  = Дата;
										Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
										Движение.Комментарий  = КомментарийСтроки;
										
										Если ЦенаСписания = 0 
											или ТекСтрокаТовары.Цена = 0
											или ПредопределенныйТовар Тогда
											
											Движение.Сумма 			= СуммаТов;
											Движение.ПроцентНаценки = 100;
											
										Иначе
											Движение.Сумма 			= СуммаТов - (ЦенаСписания * ТекСтрокаТовары.Количество);
											Цена = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовары.Цена, , ВалютаЦены, Дата);
											Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
											Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
											
										КонецЕсли; 				
									КонецЕсли;
									
								КонецЕсли;	
							КонецЕсли;
							
						иначе //это набор         			
							обработатьдвижениядлянабора(ТекСтрокаТовары.Номенклатура, ТекСтрокаТовары.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик);
							
						КонецЕсли;
						
						Если ЗначениеЗаполненоКлиентПоставщик Тогда
							
							Если ВестиУчетПродажСотрудников Тогда
								Движение = Движения.ПродажиСотрудников.Добавить();
								Движение.Комментарий  = КомментарийСтроки; 
								Движение.Номенклатура = Номенклатура;
								Движение.Период 	  = Дата;
								Движение.Сотрудник    = Сотрудник;
								Движение.Сумма  	  = -СуммаТов;
							КонецЕсли;
							
							Если Клиент Тогда
								Движение = Движения.Продажи.Добавить();
								Движение.Клиент 	= КлиентПоставщик;
								Движение.Количество = -ТекСтрокаТовары.Количество;
								Движение.Сумма 		= -СуммаТов;
								
							ИначеЕсли НЕ ЗначениеЗаполнено(ПартияПриобретения) Тогда
								Движение = Движения.Закупки.Добавить();
								Движение.Поставщик 	= КлиентПоставщик;
								Движение.Количество = ТекСтрокаТовары.Количество;
								Движение.Сумма 		= СуммаТов;
								
							КонецЕсли;
							
							Движение.Договор 	  = Договор;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;	
				
				Если не отказ
					и не ВыбылоДенег = 0 
					и ЗначениеЗаполнено(ЗаказКлиента)
					и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
					
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
					ЗаписьРегистра.Активность = Истина;
					ЗаписьРегистра.Заказ   	  = Ссылка;
					ЗаписьРегистра.Сумма 	  = ВыбылоДенег * Курс;
				КонецЕсли;
				
			КонецЕсли;	//заказ/не заказ
			
			Если не отказ
				и ВестиУчетДвиженияДенег Тогда		
				
				Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
					ФормаОплаты = ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;
				КонецЕсли;			
				
				если ЭтоЗаказ 
					ИЛИ ДополнительныеРасходы.Количество() = 0 тогда
					
					если НЕ ВыбылоДенег = 0 тогда		
						
						СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(ВыбылоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);
						Отказ  = СтруктураПополнения.Отказ;
						
						если не отказ тогда
							Если ЗначениеЗаполненоКлиентПоставщик Тогда
								Если Клиент Тогда
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
								Иначе
									Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
								КонецЕсли; 			
								
							иначе
								Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
							КонецЕсли;
						КонецЕсли;
						
						Если не отказ
							и не СтруктураПополнения.СуммаПополнения = 0 Тогда
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= СтруктураПополнения.Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
							Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * Курс;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
							если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
								и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
							КонецЕсли;
						КонецЕсли;
						
						если не отказ тогда
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата;
							Движение.Статья 		= Статья;
							Движение.Сумма 			= ВыбылоДенег * Курс;
							Движение.Валюта 		= Валюта;
							Движение.СуммаВВалюте 	= ВыбылоДенег;
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;						
							
						КонецЕсли;
						
					КонецЕсли;
				иначе
					
					СуммаДенег = 0;
					для каждого СтрокаРасхода из ДополнительныеРасходы цикл
						СуммаДенег = СуммаДенег + СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
					КонецЦикла;
					
					Если НЕ ОтменитьПроверкиНаОтказ Тогда
						Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
					КонецЕсли;
				
					Если не отказ тогда
						
						для каждого СтрокаРасхода из ДополнительныеРасходы цикл
							
							если не отказ тогда
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата;
								Движение.Сумма 			= СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
								Движение.Валюта 		= ?(ЗначениеЗаполнено(СтрокаРасхода.Валюта), СтрокаРасхода.Валюта, Валюта);
								Движение.СуммаВВалюте 	= СтрокаРасхода.Сумма;
								Движение.ХранилищеДенег = ХранилищеДенег;
								Движение.ФормаОплаты 	= Формаоплаты;
								Движение.Статья 		= СтрокаРасхода.Статья;	
								
							Иначе
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;					
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если не отказ
				и ЗначениеЗаполненоКлиентПоставщик Тогда   	
				
				Если Клиент Тогда
					Движения.Расчеты.Записывать = Истина;
					Движение 			 = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Клиент 	 = КлиентПоставщик;
					
				иначе
					Движения.РасчетыСПоставщиками.Записывать = Истина;
					Движение			 = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Поставщик 	 = КлиентПоставщик;
					
				КонецЕсли;
				
				Движение.Договор		 = Договор;
				Движение.Период 		 = Дата;
				Движение.Комментарий 	 = Комментарий;
				Если ЗначениеЗаполнено(ВидЦен)
					и ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
					
					КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВидЦен.ВалютаЦены, дата);
				Иначе
					КурсТовара = 1;
				КонецЕсли;
				Движение.Сумма = товары.Итог("Сумма") * КурсТовара;
				
				если ВестиУчетДвиженияДенег тогда
					если не суммаоплатыконтруизтаблицы = 0 тогда
						
						для каждого СтрокаРасхода из ДополнительныеРасходы цикл
							
							Если СтрокаРасхода.НеРаспределятьНаСтоимость Тогда 
								
								Если Клиент Тогда
									Движения.Расчеты.Записывать = Истина;    			
									Движение 			 = Движения.Расчеты.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
									Движение.Клиент 	 = КлиентПоставщик;
									
								иначе			
									Движения.РасчетыСПоставщиками.Записывать = Истина;    			
									Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
									Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
									Движение.Поставщик 	 = КлиентПоставщик;
									
								КонецЕсли;
								
								Движение.Период 	 = Дата;
								Движение.Комментарий = ?(ЗначениеЗаполнено(СтрокаРасхода.ОСтроке), СтрокаРасхода.ОСтроке, Комментарий);
								Движение.Сумма		 = СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли не ВыбылоДенег = 0 Тогда
						
						Если Клиент Тогда
							Движения.Расчеты.Записывать = Истина;    			
							Движение 			 = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = КлиентПоставщик;
							
						иначе			
							Движения.РасчетыСПоставщиками.Записывать = Истина;    			
							Движение 			 = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = КлиентПоставщик;
							
						КонецЕсли;
						
						Движение.Период 	 = Дата;
						Движение.Комментарий = Комментарий;
						Движение.Сумма		 = ВыбылоДенег * ?(Курс = 0, 1, Курс);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			если не отказ
				и не Клиент тогда
				
				если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") тогда 
					
					Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
						И ЗначениеЗаполнено(ВидЦен) тогда
						
						//если не суммаСтрокаРасходов = 0 
						//	И НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов") тогда
						//	
						//	ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
						//	если  ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
						//		Для каждого СтрокаТовара Из Товары Цикл 
						//			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата);
						//		КонецЦикла;		
						//	иначе
						//		ВидЦенДляРегистрацииФактическойЦеныПриобретения = ВидЦен;
						//	КонецЕсли;
						//	
						//	НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
						//	СтрокаТовараСДопРасх = Новый Структура("Цена", 0);
						//	СтрокаТовараСДопРасх.Вставить("номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
						//	
						//	Для каждого СтрокаТовара Из Товары Цикл 
						//		Если НЕЗначениеЗаполненоВалютаЦены Тогда
						//			СуммаТов = СтрокаТовара.Сумма;								
						//		Иначе
						//			СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
						//		КонецЕсли;							
						//		
						//		СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
						//		
						//		СтрокаТовараСДопРасх.номенклатура = СтрокаТовара.номенклатура;
						//		СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(?(строкатовара.Количество = 0, 0, СуммаТов / строкатовара.Количество), ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены, , Дата);
						//		
						//		ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата);								
						//		
						//	КонецЦикла;		
						
						если не суммаСтрокаРасходов = 0 тогда
							
							ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
							если значениезаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) тогда
								
								если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов") Тогда
									Для каждого СтрокаТовара Из Товары Цикл 
										ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата);
									КонецЦикла;		
								иначе
									ВидЦенДляРегистрацииФактическойЦеныПриобретения = ВидЦен;
								КонецЕсли;
								
								НЕЗначениеЗаполненоВалютаЦены = НЕ ЗначениеЗаполнено(ВалютаЦены);
								СтрокаТовараСДопРасх = Новый Структура("Цена", 0);
								СтрокаТовараСДопРасх.Вставить("номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
								
								Для каждого СтрокаТовара Из Товары Цикл 
									Если НЕЗначениеЗаполненоВалютаЦены Тогда
										СуммаТов = СтрокаТовара.Сумма;								
									Иначе
										СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);								
									КонецЕсли;							
									
									СуммаТов = СуммаТов + суммаСтрокаРасходов * СуммаТов / ТовараНаСумму;
									
									СтрокаТовараСДопРасх.номенклатура = СтрокаТовара.номенклатура;
									СтрокаТовараСДопРасх.Цена = ОбщийМодульСервер.ПоКурсу(?(строкатовара.Количество = 0, 0, СуммаТов / строкатовара.Количество), ВидЦенДляРегистрацииФактическойЦеныПриобретения.ВалютаЦены, , Дата);
									
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦенДляРегистрацииФактическойЦеныПриобретения, СтрокаТовараСДопРасх, Ссылка, Комментарий, Дата);								
									
								КонецЦикла;		
								
							иначе
								Для каждого СтрокаТовара Из Товары Цикл 
									ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата);
								КонецЦикла;		
								
							КонецЕсли;
						КонецЕсли;		
					КонецЕсли;		
							
					//	иначе
					//		Для каждого СтрокаТовара Из Товары Цикл 
					//			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата);
					//		КонецЦикла;		
					//		
					//	КонецЕсли;
					//КонецЕсли;		
					
				Иначе
					Если УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара Тогда
						
						ОсновнаяФормулаПреобразованияЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен");
						ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен = ЗначениеЗаполнено(ОсновнаяФормулаПреобразованияЦен);
						
						формула 		 = ?(ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен, ВРЕГ(ОсновнаяФормулаПреобразованияЦен.Формула), "");
						ЕстьЛьготнаяЦена = не найти(Формула, "ЛЬГОТНАЯЦЕНА") = 0;
						ЕстьЦена 		 = не найти(Формула, "ЦЕНА") = 0;
						
						Для каждого СтрокаТовара Из Товары Цикл      			
							Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) тогда
								
								если не ЗначениеЗаполненоОсновнаяФормулаПреобразованияЦен тогда
									если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
										
										НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
										НоменклатураОбъект.Цена = СтрокаТовара.Цена ;
										НоменклатураОбъект.Записать();		
									КонецЕсли;
									
								иначе
									Попытка 
										Цена 	  = СтрокаТовара.Цена;
										НоваяЦена = 0;
										НоменклатурнаяГруппа = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
										Если ЕстьЦена Тогда
											Цена = СтрокаТовара.Цена;
										КонецЕсли;			
										
										Если ЕстьЛьготнаяЦена Тогда
											ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(СтрокаТовара.Номенклатура, , Цена, ВидЦен);
										КонецЕсли;								
										
										выполнить (" НоваяЦена = " + ОсновнаяФормулаПреобразованияЦен.Формула + ";");
										
										если не строкатовара.Номенклатура.Цена = СтрокаТовара.Цена тогда
											НоменклатураОбъект = СтрокаТовара.Номенклатура.ПолучитьОбъект();
											НоменклатураОбъект.Цена = НоваяЦена;
											НоменклатураОбъект.Записать();	
										КонецЕсли;
										
									Исключение 	
										если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
											
											ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
											//Сообщение = Новый СообщениеПользователю;
											//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При формировании цены произошла ошибка:") + " " + ОписаниеОшибки();
											//Сообщение.Сообщить();                                               	
										КонецЕсли;
										
									КонецПопытки;    					
								КонецЕсли;    				
							КонецЕсли;    			
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если не отказ
		и ВестиУчетВаловойПрибыли Тогда		
		
		ЕстьРасходыПозже();		
	КонецЕсли;
	
	движения.ВаловаяПрибыль.Записывать 	  = НЕ Отказ;
	движения.Деньги.Записывать 			  = НЕ Отказ;
	движения.ЗаказыПоставщикам.Записывать = НЕ Отказ;
	движения.Закупки.Записывать 		  = НЕ Отказ;
	движения.ОплатаПоЗаказам.Записывать   = НЕ Отказ;
	движения.Продажи.Записывать 		  = НЕ Отказ;
	движения.Расчеты.Записывать 		  = НЕ Отказ;
	движения.Товары.Записывать 			  = НЕ Отказ;
	Движения.ПродажиСотрудников.Записывать   = НЕ Отказ;
	движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
	
КонецПроцедуры

Процедура ЕстьРасходыПозже()
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	если не ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли)
		или Дата < ДатаАктуальностиПоказателейВаловойПрибыли Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 РасходыТовараТовары.Ссылка
		|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ РасходыТовараТовары.Номенклатура В(&Номенклатура)
		|	И РасходыТовараТовары.Ссылка.Дата > &Дата";
		
		Номенклатура = Товары.Выгрузить(, "Номенклатура");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		если не РезультатЗапроса.Пустой() тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ возможно был изменен задним числом:") + " " + Ссылка + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли рекомендуется перепровести документы реализации товара с этой даты."), , Ссылка);	
			КонецЕсли;
			
			Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(дата) ;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура обработатьдвижениядлянабора(Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если СтрокаСоставаНабора.Номенклатура.ЭтоНабор = ИСТИНА Тогда
			обработатьдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик);
		иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, Валюта, , Дата);
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Движение = Движения.Товары.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Дата;
				Движение.Номенклатура 	= НоменклатураСостава;
				Движение.Склад 			= Склад; 				
				Движение.Количество 	= Количество;				
				Движение.Сумма 			= СуммаТов;
				//Движение.СерияНоменклатуры = //серийный состав набора насильно разворачивается в таблице
				Движение.Комментарий	= Комментарий;
				Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
			КонецЕсли;
			
			Если ВестиУчетВаловойПрибыли Тогда  				
				если клиент тогда					
					
					ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата);
					
					если ЦенаСписания = 0 
						или не (СуммаТов - (ЦенаСписания * Количество)) = 0 тогда
						
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
						Движение.Период 		= Дата;
						Движение.Номенклатура 	= НоменклатураСостава;
						Движение.Комментарий 	= Комментарий;
						
						Если ЦенаСписания = 0 
							или ПредопределенныйТовар
							или Количество = 0 Тогда
							
							Движение.Сумма = СуммаТов;
							Движение.ПроцентНаценки = 100;
							
						Иначе
							Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);						
							Цена 			= СуммаТов / Количество;
							//Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) -100;
							Цена = ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, Дата);
							Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
							Движение.РентабельностьПродаж = (ЦенаСписания / ?(Цена = 0, 1, Цена)) * 100;
							
						КонецЕсли; 				
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры //ОбработатьНабор

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
	
		если ТовараВКоличестве 	= 0
			и ТовараНаСумму 	= 0
			и ВыбылоДенег		= 0
			и РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
			
КонецПроцедуры
	
Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	//повтор в модулях форм
	
		НеСворачиватьТоварыПоКоличествуПриПриходованииТовара = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара");
		ВключитьСерийныйУчетНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьСерийныйУчетНоменклатуры");
		
		если не НеСворачиватьТоварыПоКоличествуПриПриходованииТовара тогда
			Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ЗаказКлиента, ЗаказПоставщику, ОСтроке", "Количество, Сумма");
		КонецЕсли;
		
		массивпустыхстрок  = новый массив;
		массивноменклатуры = Новый массив;
		массивСерий = Новый массив;
		
		для каждого СтрокаТовары из товары цикл
			
			НоменклатураПовторяется = НЕ массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено ;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				массивпустыхстрок.Добавить(СтрокаТовары);				
				
			иначеесли НоменклатураПовторяется тогда
				
				Если ВключитьСерийныйУчетНоменклатуры
					и ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) тогда
					
					Если НЕ массивСерий.Найти(СтрокаТовары.СерияНоменклатуры) = Неопределено Тогда					
						отказ = Истина;					
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется серия номенклатуры:") + " " + СтрокаТовары.Номенклатура, , Ссылка);	
					КонецЕсли;					
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется серия номенклатуры:") + " " + СтрокаТовары.Номенклатура;
					//Сообщение.Сообщить();                                               	
					
				Иначеесли не НеСворачиватьТоварыПоКоличествуПриПриходованииТовара
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:") + " " + СтрокаТовары.Номенклатура, , Ссылка);					
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:") + " " + СтрокаТовары.Номенклатура;
					//Сообщение.Сообщить();                                               	
					
				КонецЕсли;
				
			иначе
				массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
				массивСерий.Добавить(СтрокаТовары.СерияНоменклатуры);
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТовары из массивпустыхстрок цикл
			товары.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		для каждого СтрокаСтрокаРасходаов из ДополнительныеРасходы цикл
			Если СтрокаСтрокаРасходаов.Сумма = 0 Тогда
				массивпустыхстрок.Добавить(СтрокаСтрокаРасходаов);
				
			иначеесли не ЗначениеЗаполнено(СтрокаСтрокаРасходаов.Статья) тогда
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаСтрокаРасходаов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!"), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаСтрокаРасходаов.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("дополнительных расходов не указана статья!");
					//Сообщение.Сообщить();	
					
				КонецЕсли;
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаСтрокаРасходаов из массивпустыхстрок цикл
			ДополнительныеРасходы.Удалить(СтрокаСтрокаРасходаов);	
		КонецЦикла;	
		
		Если ЭтоЗаказ тогда
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если не ВыбылоДенег = 0 Тогда
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ с предоплатой");
				иначе
					НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Поставщику");
				КонецЕсли;
			Иначе
				
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое приобретение");
			КонецЕсли;	
		иначе
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(клиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Если не ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена реализации");
					иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат покупателя");
					КонецЕсли;
				Иначе
					Если не ВыбылоДенег = 0 Тогда
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение");
					иначе
						НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				НовыйВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходование");
			КонецЕсли;	
		КонецЕсли;
		
		если не ВидДокумента = НовыйВидДокумента тогда
			ВидДокумента = НовыйВидДокумента;
		КонецЕсли;
		
		ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
		
		Если Курс = 0 Тогда
			Курс = 1;
		КонецЕсли;
		
		НовТовараВКоличестве = товары.итог("Количество");
		если не НовТовараВКоличестве = ТовараВКоличестве тогда
			ТовараВКоличестве = НовТовараВКоличестве;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЦен)
			и ЗначениеЗаполнено(видцен.ВалютаЦены)
			и не видцен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			НовТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
			если не ТовараНаСумму = НовТовараНаСумму тогда
				ТовараНаСумму = НовТовараНаСумму;	
			КонецЕсли;
			
		Иначе
			ТовараНаСумму = товары.Итог("Сумма");
			
		КонецЕсли;
		
		если не отказ
			и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			и ЗначениеЗаполнено(договор) ТОгда
			
			Если НЕ ЗначениеЗаполнено(КлиентПоставщик) ТОгда
				КлиентПоставщик = договор.КлиентПоставщик;
			ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
				Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				и ЗначениеЗаполнено(Организация) 
				и не Организация = договор.Организация Тогда
				
				Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
			КонецЕсли;
			
		КонецЕсли;
		
		Если не отказ
			И ЭтоЗаказ
			и ТовараНаСумму <= (ВыбылоДенег * курс) Тогда
			
			ЗаказОплачен = Истина;
		КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если не отказ Тогда
		
		ОбщийМодульСервер.УдалитьСвязанныеЦены(Ссылка);
		
		если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда			
			
			ЕстьРасходыПозже();
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если НЕ ЗначениеЗаполнено(дата) Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;			
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 	 = 1;
			НоваяСтрока.Номенклатура = ДанныеЗаполнения.ссылка;
			НоваяСтрока.Цена 		 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ложь, 1, , , , Ссылка);
			НоваяСтрока.Сумма 		 = НоваяСтрока.Цена * НоваяСтрока.Количество; 
			
			ЭтоЗаказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			
			Если ДанныеЗаполнения.ЭтоЗаказ Тогда
				ЗаказПоставщику = ДанныеЗаполнения.ссылка;
			Иначе
				ЗаказКлиента	= ДанныеЗаполнения.ЗаказКлиента;
			КонецЕсли;
			
			ВыбылоДенег 		= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик 	= ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 				= ДанныеЗаполнения.ВидЦен;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;			
			ЗаказПоставщику		= ДанныеЗаполнения.ЗаказПоставщику; 
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			ПартияПриобретения  = ДанныеЗаполнения.ПартияПриобретения;
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				НоваяСтрока.ЗаказПоставщику	= ТекСтрокаТовары.ЗаказПоставщику;
				НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовары.ЗаказКлиента;
				НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
				НоваяСтрока.Сумма			= ТекСтрокаТовары.Сумма;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			//как оприходование
			ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			//			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			//			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			//			Договор 		= ДанныеЗаполнения.Договор;
			//			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				если ТекСтрокаТовары.КоличествоРазница >0 тогда
					НоваяСтрока = Товары.Добавить(); 				
					НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовары.СуммаРазница;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			ДанныеЗаполненияЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ЗаказКлиента = ДанныеЗаполнения.ссылка;				
			Иначе
				ЗаказКлиента = ДанныеЗаполнения.ЗаказКлиента;
				ВыбылоДенег 	= ДанныеЗаполнения.ПоступилоДенег;			
				КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			КонецЕсли;			
			
			ВидЦен 				= ДанныеЗаполнения.ВидЦен;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			Склад 				= ДанныеЗаполнения.Склад;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			
			Организация			= ДанныеЗаполнения.Организация;
			Договор 			= ДанныеЗаполнения.Договор;
			ХранилищеДенег		= ДанныеЗаполнения.ХранилищеДенег; 
			Сотрудник			= ДанныеЗаполнения.Сотрудник;
			Сумма = 0;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				количество = ТекСтрокаТовары.Количество;
				НоваяСтрока.Количество 		= Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				Если ДанныеЗаполненияЭтоЗаказ Тогда
					НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ТекСтрокаТовары.Номенклатура, ВидЦен, дата, ложь, Количество, Договор, , , Ссылка);	
					НоваяСтрока.Сумма			= НоваяСтрока.Цена * количество;
				иначе
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовары.ЗаказКлиента;
					НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
					НоваяСтрока.Сумма			= ТекСтрокаТовары.Сумма;
				КонецЕсли;
				Сумма = Сумма + НоваяСтрока.Сумма;
			КонецЦикла;
			Если ДанныеЗаполненияЭтоЗаказ Тогда
				ТовараНаСумму 		= Сумма;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УстановкиЦен") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;
			Комментарий = ДанныеЗаполнения.Комментарий;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.Цена 		 = ТекСтрокаТовары.Цена;
			КонецЦикла;
			
		КонецЕсли;             	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
