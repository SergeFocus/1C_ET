// sza151102-0004 дата расхода
// sza151028-0522 
// sza151025-0513 
// sza151022-1316 
// sza150612-0303 
// sza150225-1217 
// sza150216-0230 
// sza150111-0238 
// sza141203-0309 
// sza141117-2253 НеРегистрироватьЦеныЗаСчетЭтогоДокумента
// sza141117-0210 
// sza140827-0046 : СтрокаТовара.Цена
// sza140710-0107  
// sza140709-1723  
// sza140624-1310  
// sza130902-0352 : 

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = не Объект.Курс = 1	
	И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ВалютаХранилища(Знач ХранилищеДенег, Знач БылаВалюта)
	
	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе
		Возврат БылаВалюта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВаучерыВаучерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ваучеры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РезультатНакопление = ДобавитьПрименитьВаучер(ТекущиеДанные.Ваучер, ИСТИНА, ЛОЖЬ);
		Если РезультатНакопление.Результат = 5 Тогда
			ВыяснитьОПогашенииНакопления(РезультатНакопление.Ответ);
		КонецЕсли;
		
		ПриИзмененииНоменклатуры(, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыПослеУдаления(Элемент)
	ВаучерыПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВаучерыПослеУдаленияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВаучерНакопления) Тогда
		
		МассивВаучеров = Новый Массив;
		
		Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
			Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
				МассивВаучеров.Добавить(СтрокаВаучер.Ваучер);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВаучеров.Количество() = 0
			И МассивВаучеров.Найти(Объект.ВаучерНакопления) = Неопределено Тогда
			
			Объект.ВаучерНакопления = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВаучерСкидки) Тогда
		
		МассивВаучеров = Новый Массив;
		
		Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
			Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
				МассивВаучеров.Добавить(СтрокаВаучер.Ваучер);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВаучеров.Количество() = 0
			И МассивВаучеров.Найти(Объект.ВаучерСкидки) = Неопределено Тогда
			
			Объект.ВаучерСкидки  = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураДляВВода.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);			
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)
	ВзятьСуммуПоДокументуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаПоступления = Объект.ВидЦен.ВалютаЦены;
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		ВалютаПоступления = Объект.Валюта;
		ВалютаЦены = ОсновнаяВалюта; // осн
	Иначе
		ВалютаПоступления = ОсновнаяВалюта;
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	Если ЕстьДополнительныеРасходы Тогда
		
		Если Объект.ДополнительныеРасходы.Количество() = 0 Тогда
			СтрокаДополнительныхРасходов = Объект.ДополнительныеРасходы.Добавить();
		Иначе
			СтрокаДополнительныхРасходов = Объект.ДополнительныеРасходы[0];
		КонецЕсли;
		
		СтрокаДополнительныхРасходов.Валюта = ВалютаПоступления;
		СтрокаДополнительныхРасходов.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаПоступления, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' , Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода), ЛОЖЬ);
		СтрокаДополнительныхРасходов.Сумма  = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ВалютаПоступления, ВалютаЦены, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' , Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода), СтрокаДополнительныхРасходов.Курс);
		
		ПересчитатьСуммуПрочихРасходов();
		
	Иначе		
		Объект.Валюта = ВалютаПоступления;
		Объект.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаПоступления, ОБъект.Дата, ЛОЖЬ);
		Объект.ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ВалютаПоступления, ВалютаЦены, ОБъект.Дата, Объект.Курс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)	
	ВзятьСуммуСУчетомДолгаКлиентаНаСервере(ИСТИНА);	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуСУчетомДолгаКлиентаНаСервере(Знач ИСуммуДолга = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	
	Если ЕстьДополнительныеРасходы Тогда
		Если ИСуммуДолга Тогда
			
			СтрокаДополнительныхРасходов 		 = Объект.ДополнительныеРасходы.Добавить();
			СтрокаДополнительныхРасходов.Сумма  = -ТекущийДолг;
			СтрокаДополнительныхРасходов.Валюта = Объект.Валюта;
			СтрокаДополнительныхРасходов.Курс   = Объект.Курс;
			СтрокаДополнительныхРасходов.НеРаспределятьНаСтоимость = ИСТИНА;
			
			Если ТекущийДолг > 0 Тогда
				СтрокаДополнительныхРасходов.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата долга");
			Иначе
				СтрокаДополнительныхРасходов.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат долга");
			КонецЕсли;
			
			Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				СтрокаДополнительныхРасходов.Статья  = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				СтрокаДополнительныхРасходов.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторно") + " " + СтрокаДополнительныхРасходов.ОСтроке;
			Иначе
				СтрокаДополнительныхРасходов.Статья  = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
			КонецЕсли;       				
			
			ПересчитатьСуммуПрочихРасходов();			
		КонецЕсли;
		
	Иначе		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
		Иначе
			Объект.Валюта = ОсновнаяВалюта;
			Объект.курс   = 1;			
		КонецЕсли;
		
		ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.итог("Сумма"), Объект.Валюта, ВалютаЦены, Объект.Дата);
		
		Если ИСуммуДолга Тогда
			Объект.ВыбылоДенег = ВыбылоДенег - ТекущийДолг;			
		Иначе
			Объект.ВыбылоДенег = ВыбылоДенег;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДополнительныхРасходов(Знач БезИзменений = ЛОЖЬ)
	
	ЕстьДополнительныеРасходы 						 = НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров И НЕ Объект.ДополнительныеРасходы.Количество() = 0;	
	Элементы.ДобавитьДополнительныеРасходы.Видимость = НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров И НЕ ЕстьДополнительныеРасходы;	
	Элементы.ДополнительныеРасходы.Видимость 		 = ЕстьДополнительныеРасходы;
	Элементы.ИтогоРасходов.Видимость 				 = ЕстьДополнительныеРасходы;
	Элементы.ПогаситьВаучер.Видимость				 = ЕстьДополнительныеРасходы И ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
	Элементы.ГруппаВыбыло.Видимость 				 = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ ЕстьДополнительныеРасходы;
	Элементы.ОсновнаяВалюта.Видимость 				 = ЕстьДополнительныеРасходы;
	Элементы.РаспределитьДополнительныеРасходы.Видимость = РаспределятьДопРасходыВручную И ЕстьДополнительныеРасходы;
	Элементы.РаспределеноДопРасходов.Видимость 		 = РаспределятьДопРасходыВручную;
	
	ОбновитьВидимостьРаспределенияДопРасходов(БезИзменений);
	ПересчитатьСуммуПрочихРасходов(БезИзменений);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьИсходнойРеализации(Знач НеИзменять = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
		
		Элементы.ДокументРеализации.Видимость = ИСТИНА;		
	Иначе
		Элементы.ДокументРеализации.Видимость = ЛОЖЬ;
		Если НЕ НеИзменять Тогда
			Объект.ДокументРеализации = ПредопределенноеЗначение("Документ.РасходыТовара.ПустаяСсылка");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач ПриНачальнойЗагрузке = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
		Если Объект.ВыбылоДенег = 0
			ИЛИ НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			Объект.Валюта = ВидЦенВалютаЦены;
			Объект.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, Объект.Дата, ЛОЖЬ);
			
			Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
				И НЕ Объект.ХранилищеДенег.Валюта = ВидЦенВалютаЦены Тогда
				
				Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Объект.ДополнительныеРасходы.Количество() = 0  Тогда
			
			СтрокаДополнительныхРасходов = Объект.ДополнительныеРасходы[0];
			
			СтрокаДополнительныхРасходов.Валюта = ВидЦенВалютаЦены;
			СтрокаДополнительныхРасходов.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(СтрокаДополнительныхРасходов.Валюта, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' , Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода), ЛОЖЬ);
			
			Если ЗначениеЗаполнено(СтрокаДополнительныхРасходов.ХранилищеДенег)
				И НЕ СтрокаДополнительныхРасходов.ХранилищеДенег.Валюта = ВидЦенВалютаЦены Тогда
				
				СтрокаДополнительныхРасходов.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПриНачальнойЗагрузке
		И ЗначениеЗаполнено(Объект.ВидЦен) 
		И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения, ИСТИНА, -1);
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДополнительныеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ВыяснитьОПогашенииНакопления(Знач РезультатНакопление)
	
	Если НЕ РезультатНакопление.ОстатокНакопленияЧислом = 0 Тогда
		
		ОплатитьНакопительнымВаучером = ЛОЖЬ;
		
		КомандыВопроса = Новый Массив(3, 3);
		КомандыВопроса[0][0] = "OK";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, вернуть средства накопления");
		КомандыВопроса[0][2] = "Результат = 1;";
		КомандыВопроса[1][0] = "НЕТ";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет, отменить накопленную сумму");
		КомандыВопроса[1][2] = "Результат = 2;";
		КомандыВопроса[2][0] = "ОТМЕНА";
		КомандыВопроса[2][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена ваучера");
		КомандыВопроса[2][2] = "Результат = 3;";
		
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"));
		ПараметрыФормы.Вставить("ЭтоВыборПериода", ЛОЖЬ);
		
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер") + ": " +
		РезультатНакопление.Ваучер + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вернуть средства на накопительный ваучер?") +
		Символы.ПС + РезультатНакопление.ОстатокНакопления);
		ПараметрыФормы.Вставить("ЭтоВопрос", ИСТИНА);
		ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
		ОтветПользователя = ФормаВопроса.ОткрытьМодально();
		
		Если НЕ ОтветПользователя = Неопределено
			И НЕ ОтветПользователя = 3 Тогда
			
			ОплатитьНакопительнымВаучером = ?(ОтветПользователя = 1, ИСТИНА, ЛОЖЬ);
			
			Если ОплатитьНакопительнымВаучером Тогда
				ДобавитьКОплатеВаучером(РезультатНакопление.Ваучер, ЛОЖЬ, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашен для накоплений"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"), РезультатНакопление.ОстатокНакопленияЧислом);
			Иначе
				Объект.ВаучерНакопления = РезультатНакопление.Ваучер;
			КонецЕсли;
			
			СтруктураДляСтроки = Новый Структура("Ваучер", РезультатНакопление.Ваучер);
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(СтруктураДляСтроки);
			Если НЕ СтрокаВаучера.Количество() = 0 Тогда
				СтрокаВаучера = СтрокаВаучера[0];
				СтрокаВаучера.ОСтроке = ?(ОплатитьНакопительнымВаучером, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Учтен"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для накопления.."));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ВаучерНакопления = РезультатНакопление.Ваучер;		
	КонецЕсли;
	
КонецПроцедуры // ВыяснитьОПогашенииНакопления

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если ИспользоватьУчетВалют Тогда
		Если ЕстьДополнительныеРасходы Тогда
			ОбновитьКурсСтрок();
			ПересчитатьСуммуПрочихРасходов();
			
		Иначе
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);			
			Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = Состав.Добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.ЕдиницаИзмерения	= СтрокаНабора.ЕдиницаИзмерения;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьКОплатеВаучером(Знач Ваучер, Знач ВаучерИзъят = ЛОЖЬ, Знач ТекстПогашения = "", Знач ТекстДляНеподходящего = "", Знач СуммаПогашения = 0, Знач СтрокаВаучера = Неопределено)
	
	ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, Объект.Склад, ЛОЖЬ);
	
	Если ОтветПоВаучеру.ВаучерПодходит Тогда
		
		Объект.ТовараНаСумму = СуммаПогашения;
		Объект.Валюта		 = Ваучер.Валюта;
		Если ПустаяСтрока(Объект.Комментарий) Тогда
			Объект.Комментарий = ТекстПогашения + ": " + Ваучер.Наименование;
		КонецЕсли;
		Объект.ФормаОплаты 	 = Перечисления.ФормыОплаты.Сертификат;
		
		Если Не СтрокаВаучера = Неопределено Тогда
			СтрокаВаучера.ВаучерИзъят = ВаучерИзъят;
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаФормыОплаты;
		КонецЕсли;
		Результат = ИСТИНА;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстДляНеподходящего + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
		Результат = ЛОЖЬ;
	КонецЕсли;						
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(Знач СтруктураОтвета, Знач Цена)
	
	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	СтруктураДобавки.Вставить("ЕдиницаИзмерения");	
	СтруктураДобавки.Вставить("Цена", Цена);
	
	Для Каждого Серия Из СтруктураОтвета.МассивНовыхСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки, , ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(СтруктураПараметров, Знач ИзДиалогаСоздания = ЛОЖЬ, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач МножительКоличества = 1)
	
	Номенклатура 		 = СтруктураПараметров.Номенклатура;
	СерияНоменклатуры 	 = СтруктураПараметров.СерияНоменклатуры;
	ЕдиницаИзмерения 	 = СтруктураПараметров.ЕдиницаИзмерения;
	
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) И ЗначениеЗаполнено(СерияНоменклатуры);
	
	Если НЕ ДокументЗаблокирован Тогда		
		
		Если НЕ ИзДиалогаСоздания
			ИЛИ не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара") Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
			Если ТоварВедетсяПоСериям Тогда
				ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);	
			Если СтрокаТовара.Количество() = 0 Тогда  					
				
				СтрокаТовара = Объект.Товары.Добавить();	
				СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
				Если ТоварВедетсяПоСериям 
					И НЕ СерииНоменклатурыВидны Тогда
					
					СерииНоменклатурыВидны = ИСТИНА;		
					Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
				КонецЕсли;
				
			Иначе
				СтрокаТовара = СтрокаТовара[0];
			КонецЕсли;                	
			
		Иначе
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;
			
		КонецЕсли; 		
		
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Количество = СтрокаТовара.Количество + СтруктураПараметров.Количество * множительКоличества;
		
		Если ТоварВедетсяПоСериям Тогда			
			СтрокаТовара.Количество = 1;
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;				
		КонецЕсли;
		
		Если СтрокаТовара.Цена = 0 
			И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
			
			ЦенаСтруктуры = 0;
			СтруктураПараметров.Свойство("Цена", ЦенаСтруктуры);
			Если ЦенаСтруктуры = Неопределено 
				ИЛИ ЦенаСтруктуры = 0 Тогда
				
				СтрокаТовара.Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
				Если СтрокаТовара.Цена = 0 Тогда
					СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);	
				КонецЕсли;
			Иначе
				СтрокаТовара.Цена = ЦенаСтруктуры;
			КонецЕсли;                              	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;	
		КонецЕсли;
		
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку Тогда // Встать на строку            		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не найдена");
		
		Если УчетПоСериям
			И НЕ СтруктураПараметров.серияНоменклатуры = Неопределено Тогда
			
			ПараметрыОтбора.Вставить("серияНоменклатуры", СтруктураПараметров.серияНоменклатуры);
			Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия товара не найдена");
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("с единицей") + ": " + ЕдиницаИзмерения;
		КонецЕсли;
		
		СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НЕ СтрокаТовара.Количество() = 0 Тогда 
			
			СтрокаТовара = СтрокаТовара[0];
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(Текст, Объект, "Товары");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьПрименитьВаучер(Знач Ваучер, Знач НеДобавлятьРучнойВыбор = ЛОЖЬ, Знач ВернутьРезультат = ИСТИНА)
	
	РезультатСтруктура = Новый Структура("Результат", Неопределено);;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если НЕ Объект.Ваучеры.Количество() = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ваучер", Ваучер);
			
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
			Если НЕ ДокументЗаблокирован Тогда
				
				Если НеДобавлятьРучнойВыбор
					ИЛИ СтрокаВаучера.Количество() = 0 Тогда
					
					Если НЕ НеДобавлятьРучнойВыбор Тогда
						СтрокаВаучера = Объект.Ваучеры.Добавить();
						СтрокаВаучера.Ваучер = Ваучер;
					Иначе
						СтрокаВаучера = СтрокаВаучера[0];
					КонецЕсли;
					
					Если Ваучер.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
						КонтрагентВаучера = Ваучер.Контрагент;
						
						Если ЗначениеЗаполнено(КонтрагентВаучера)
							И НЕ Объект.КлиентПоставщик = КонтрагентВаучера Тогда
							
							Объект.КлиентПоставщик = КонтрагентВаучера;
							РезультатСтруктура.Результат = 3;
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
						// ОтветПоВаучеру для накопительной карты не нужен - по ней не будет накоплений, если товар неподходящий
						ОстатокНакопленияЧислом = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Ваучер, Объект.Дата);
						ОстатокНакопления 		= "" + СокрЛП(ОстатокНакопленияЧислом);
						ОстатокНакопления 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток накопления") + ": " + ОстатокНакопления;
						СтрокаВаучера.ОСтроке 	= ОстатокНакопления;
						
						Если НЕ ВернутьРезультат ТОгда
							РезультатСтруктура.Результат = 5;
							РезультатСтруктура.Вставить("Ответ", Новый Структура("Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом", Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом));
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашен ваучер"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочная карта"), Ваучер.НоминалПроцент);
						РезультатСтруктура.Результат = 0;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент
						И ИспользоватьСкидки Тогда
						
						ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, Объект.Склад, ЛОЖЬ);
						
						Если ОтветПоВаучеру.ВаучерПодходит Тогда
							Объект.ВаучерСкидки = Ваучер; // приоритет свежего ваучера. раз пробили, значит надо
							// процент скидки будет рассчитан позже
							
						Иначе
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
						КонецЕсли;
						РезультатСтруктура.Результат = 0;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма
						И ИспользоватьСкидки Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашена скидка"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта на сумму"), Ваучер.НоминалПроцент);
						РезультатСтруктура.Результат = 0;
					КонецЕсли;
					
				Иначе
					СтрокаВаучера = СтрокаВаучера[0];
					Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
					РезультатСтруктура.Результат = 0;
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаВаучера.Количество() = 0 Тогда // Встать на строку
				
				СтрокаВаучера = СтрокаВаучера[0];
				Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
				РезультатСтруктура.Результат = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	Состав.Колонки.Добавить("ЕдиницаИзмерения");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", СтрокаСостава.номенклатура);
			Результат.Вставить("ЕдиницаИзмерения", СтрокаСостава.ЕдиницаИзмерения);
			Результат.Вставить("Количество", СтрокаСостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(СтрокаСостава, , ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
	ВидимостьИсходнойРеализации();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда // насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик Тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик Тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;				
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Если НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, , , СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзменении(Элемент)
	ДокументРеализацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРеализацииПриИзмененииНаСервере()
	
	ДокументРеализации = Объект.ДокументРеализации;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		БылаДата = Объект.Дата;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ОбработкаПриЗаполнении(ДокументРеализации);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
		
		Если БылаДата < ДокументРеализации.Дата Тогда
			Объект.Дата = ДокументРеализации.Дата + 1;
		Иначе
			Объект.Дата = БылаДата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы(Команда)
	
	ДополнительныеРасходыНаСервере();
	ВидимостьДополнительныхРасходов(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1ВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.валюта) Тогда
		
		ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(ТекущаяСтрока.ДатаРасхода = '00010101000000' , Объект.Дата, ТекущаяСтрока.ДатаРасхода));
		
		Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
			ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
		КонецЕсли;
		
		ПересчитатьСуммуПрочихРасходов();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1КурсПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущиеДанные.Валюта = ОсновнаяВалюта Тогда
		ТекущиеДанные.Курс = 1;
	КонецЕсли;
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1СуммаПриИзменении(Элемент)
	ПересчитатьСуммуПрочихРасходов();
КонецПроцедуры

&НаСервере
Процедура ДополнительныеРасходыНаСервере()
	
	Если НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
		И Объект.ДополнительныеРасходы.Количество() = 0 Тогда
		
		СтрокаДополнительныхРасходов 		 = Объект.ДополнительныеРасходы.Добавить();
		СтрокаДополнительныхРасходов.Валюта = Объект.Валюта;
		СтрокаДополнительныхРасходов.сумма  = Объект.ВыбылоДенег;
		СтрокаДополнительныхРасходов.ХранилищеДенег = Объект.ХранилищеДенег;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДополнительныхРасходов.ХранилищеДенег)
			ИЛИ НЕ СтрокаДополнительныхРасходов.ХранилищеДенег.Валюта = Объект.Валюта Тогда
			
			Если ЗначениеЗаполнено(Объект.Склад)
				И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
				
				СтрокаДополнительныхРасходов.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаДополнительныхРасходов.ХранилищеДенег)
				ИЛИ НЕ СтрокаДополнительныхРасходов.ХранилищеДенег.Валюта = Объект.Валюта Тогда
				
				СтрокаДополнительныхРасходов.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				Если НЕ ЗначениеЗаполнено(СтрокаДополнительныхРасходов.ХранилищеДенег) Тогда
					СтрокаДополнительныхРасходов.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;		
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительныхРасходов.ХранилищеДенег)
				И НЕ СтрокаДополнительныхРасходов.ХранилищеДенег.Валюта = Объект.Валюта Тогда
				
				СтрокаДополнительныхРасходов.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;		
		
		СтрокаДополнительныхРасходов.Курс	  = Объект.Курс;
		СтрокаДополнительныхРасходов.Статья  = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
		СтрокаДополнительныхРасходов.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За товар");
		СтрокаДополнительныхРасходов.НеРаспределятьНаСтоимость = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	
	ВидимостьДополнительныхРасходов();
	ВыводНадписиПоФормуле();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаДополнительныхРасходов = Элементы.ДополнительныеРасходы.ТекущиеДанные;
		
		Если НЕ СтрокаДополнительныхРасходов = Неопределено Тогда			
			СтрокаДополнительныхРасходов.Валюта = Объект.Валюта;
			СтрокаДополнительныхРасходов.Курс   = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаДополнительныхРасходов.Валюта, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000', Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода));
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	ТекущиеДанные.Валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.Валюта);
	ТекущиеДанные.Курс = ПолучитьКурс(ТекущиеДанные.Валюта, ТекущиеДанные.ДатаРасхода);
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	ЗаказПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ПоступленияТовара"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьФормуПечатиНаСервере(НовыйОбъект);
	
	НовыйОбъект.Количество = 1;
	НовыйОбъект.ЭтоДобавлениеИзДокумента = ИСТИНА;
	
КонецПроцедуры
Процедура ИзменитьВидДокумента() 
	
	ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") И Объект.ПередачаДляКомиссионнойТорговли;
	
	Если ЕстьДополнительныеРасходы Тогда
		Если Объект.ДополнительныеРасходы.Количество() = 0 Тогда
			ОбъектВыбылоДенег = 0;
		Иначе
			ОбъектВыбылоДенег = Объект.ДополнительныеРасходы[0].Сумма;
		КонецЕсли;
		
	Иначе
		ОбъектВыбылоДенег = Объект.ВыбылоДенег;	
	КонецЕсли;
	
	ЭтоКлиент = ЛОЖЬ;
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		ЭтоКлиент = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		Элементы.ПередачаДляКомиссионнойТорговли.Видимость = ЭтоКлиент;
		
		Если ДоступенТолькоВозврат
			ИЛИ ЭтоКлиент Тогда
			
			Элементы.ПартияПриобретения.Видимость = ЛОЖЬ;
			
			Если объектВыбылоДенег = 0 Тогда
				Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
					Если НЕ ТекущийВидДокумента = 11 Тогда
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять непроданный товар назад и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Комиссионера");
						ТекущийВидДокумента = 11;	
					КонецЕсли;
					
				Иначе				
					Если НЕ ТекущийВидДокумента = 1 Тогда
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар назад и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Клиента");
						ТекущийВидДокумента = 1;	
					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
					Если НЕ ТекущийВидДокумента = 12 Тогда
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять непроданный товар, отдать деньги и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат товара от Комиссионера");
						ТекущийВидДокумента = 12;						
					КонецЕсли;
					
				Иначе
					Если НЕ ТекущийВидДокумента = 2 Тогда
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар, отдать деньги и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат товара от Клиента");
						ТекущийВидДокумента = 2;						
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Элементы.ПартияПриобретения.Видимость = ИСТИНА;
			
			Если объектВыбылоДенег = 0 Тогда
				Если НЕ ТекущийВидДокумента = 3 Тогда
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Поставщика");	
					ТекущийВидДокумента = 3;	
				КонецЕсли;
				
			ИначеЕсли не ТекущийВидДокумента = 4 Тогда
				Попытка
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Купить товар и закрыть");
				Исключение // нет прав
				КонецПопытки;
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение товара");	
				ТекущийВидДокумента = 4;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаДолгКлиента.Видимость = ИСТИНА;
		
	Иначе
		Элементы.ПартияПриобретения.Видимость = ИСТИНА;
		Элементы.ГруппаДолгКлиента.Видимость  = ЛОЖЬ;
		
		Если объектВыбылоДенег = 0 Тогда
			Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
				Если НЕ ТекущийВидДокумента = 15 Тогда
					Попытка					
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать непроданный товар и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление непроданного товара");	
					ТекущийВидДокумента = 15;	
				КонецЕсли;
				
			Иначе
				Если НЕ ТекущийВидДокумента = 5 Тогда
					Попытка					
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать товар и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление  товара");	
					ТекущийВидДокумента = 5;	
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
				Если НЕ ТекущийВидДокумента = 16 Тогда
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать непроданный товар, отдать деньги и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление непроданного товара");	
					ТекущийВидДокумента = 16;					
				КонецЕсли;
				
			Иначе
				Если НЕ ТекущийВидДокумента = 6 Тогда
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать, отдать деньги и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление товара");	
					ТекущийВидДокумента = 6;					
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НеРегистрироватьЦеныЗаСчетЭтогоДокумента.Видимость = НЕ ЭтоКлиент И ИспользоватьСложныйМеханизмЦен И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления");
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
	
	ВестиУчетПоПоставщикам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	ВестиУчетПоКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	
	Если НЕ ВестиУчетПоКлиентам
		И ВестиУчетПоПоставщикам Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");		
		
	ИначеЕсли ВестиУчетПоКлиентам
		И НЕ ВестиУчетПоПоставщикам Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	ПриСменеКонтрагента();	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере(Знач НеМенятьПараметрыОбъекта = ЛОЖЬ)
	
	ЗначениеЗаполненоОбъектКлиент = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	// Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Доступность = не ЗначениеЗаполненоОбъектКлиент;
	
	Если НЕ НеМенятьПараметрыОбъекта
		И ЗначениеЗаполнено(ЗначениеЗаполненоОбъектКлиент) Тогда
		
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ИСТИНА;	
	ИначеЕсли не НеМенятьПараметрыОбъекта Тогда
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = ЛОЖЬ;
	КонецЕсли;
	
	Если ЗначениеЗаполненоОбъектКлиент Тогда
		
		Если НЕ НеМенятьПараметрыОбъекта Тогда
			Если ИспользоватьУчетВалют
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
				Объект.Курс   = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = НЕ Объект.Курс = 1 и ИспользоватьУчетВалют;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда			
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере(); 
			КонецЕсли;	
			
			Если (НЕ ЗначениеЗаполнено(Объект.Склад)
				ИЛИ Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"))
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.Склад) Тогда
				
				Объект.Склад = Объект.КлиентПоставщик.Склад;		
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И НЕ ЗначениеЗаполнено(Объект.Договор) 
				ИЛИ не Объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
		КонецЕсли;
		
		Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			Элементы.Заказ.Видимость = ЛОЖЬ;
			ЭтоРасчетыСПоставщиком   = ЛОЖЬ;
			Элементы.клиент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (при возврате от покупателя)");
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена с уч. скидки");	
				Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма с уч. скидки");	
			Иначе
				Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена");	
				Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");		
			КонецЕсли;
			Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ЛОЖЬ;
			
		Иначе
			ЭтоРасчетыСПоставщиком = ИСТИНА;
			Элементы.Заказ.Видимость 	   = УчетЗаказовПоставщикам;
			Элементы.Клиент.Заголовок 	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик");
			Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена прих.");	
			Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.КлиентПоставщик.СпособДоставки;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	Иначе
		Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена закупки");
		Элементы.Заказ.Видимость 	   = ЛОЖЬ;
		
	КонецЕсли;
	
	РегистрацияДополнительнойЦены(ИСТИНА);
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = не Объект.Курс = 1	
	И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаПечатьБезСерий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьБезСерий(ФормаПечати.Результат, Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
	ФормаПечати.Результат.Защита 		  = ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Поступление товара");
	ФормаПечати.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НеРегистрироватьЦеныЗаСчетЭтогоДокументаПриИзменении(Элемент)
	НеРегистрироватьЦеныЗаСчетЭтогоДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеРегистрироватьЦеныЗаСчетЭтогоДокументаПриИзмененииНаСервере()
	РегистрацияДополнительнойЦены(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьРаспределенияДопРасходов(Знач БезИзменений = ЛОЖЬ)
	
	Если НЕ БезИзменений Тогда
		ПересчитатьРаспределениеДопРасходовПриНеобходимости();	
	КонецЕсли;
	
	Элементы.ТоварыСуммаДополнительныхРасходов.Видимость = (РаспределятьДопРасходыВручную ИЛИ ПоказыватьРаспределениеДопРасходов) И ЕстьДополнительныеРасходы;
	Элементы.ТоварыПоказатьКакБудутРаспределеныДополнительныеРасходы.Видимость = ЕстьДополнительныеРасходы;
	
	ОбновитьНадписьРаспределеноДопРасходов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.Дата + Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.Дата + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеЦены(КонкретнаяСтрока = Неопределено, Знач НеМенятьСуществующие = ЛОЖЬ, Знач ЧитатьСуществующие = ЛОЖЬ)
	
	Если КонкретнаяСтрока = Неопределено Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			Если НЕ НеМенятьСуществующие
				ИЛИ СтрокаТовара.ДополнительнаяЦена = 0 Тогда
				
				Если ЧитатьСуществующие Тогда
					СтрокаТовара.ДополнительнаяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДополнительныйВидЦенПриПоступлении, Объект.Дата, ЛОЖЬ, СтрокаТовара.Количество, Объект.Договор, , СтрокаТовара.ДополнительнаяЦена, Объект.Ссылка, ЛОЖЬ, СтрокаТовара.ЕдиницаИзмерения);
				Иначе
					СтрокаТовара.ДополнительнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, , ДополнительныйВидЦенПриПоступлении, Объект.Дата, Объект.Ссылка, СтрокаТовара.ЕдиницаИзмерения, Объект.ВидЦен, ИСТИНА, ЛОЖЬ, ИСТИНА, СтрокаТовара.Цена);
				КонецЕсли;
				
				СтрокаТовара.СуммаВЦенеДоп = СтрокаТовара.ДополнительнаяЦена * СтрокаТовара.Количество;
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Если НЕ НеМенятьСуществующие
			ИЛИ КонкретнаяСтрока.ДополнительнаяЦена = 0 Тогда
			
			Если ЧитатьСуществующие Тогда
				КонкретнаяСтрока.ДополнительнаяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(КонкретнаяСтрока.Номенклатура, ДополнительныйВидЦенПриПоступлении, Объект.Дата, ЛОЖЬ, КонкретнаяСтрока.Количество, Объект.Договор, , КонкретнаяСтрока.ДополнительнаяЦена, Объект.Ссылка, ЛОЖЬ, КонкретнаяСтрока.ЕдиницаИзмерения);
			Иначе
				КонкретнаяСтрока.ДополнительнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(КонкретнаяСтрока.Номенклатура, , ДополнительныйВидЦенПриПоступлении, Объект.Дата, Объект.Ссылка, КонкретнаяСтрока.ЕдиницаИзмерения, Объект.ВидЦен, ИСТИНА, ЛОЖЬ, ИСТИНА, КонкретнаяСтрока.Цена);
			КонецЕсли;
			
			КонкретнаяСтрока.СуммаВЦенеДоп = КонкретнаяСтрока.ДополнительнаяЦена * КонкретнаяСтрока.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.КлиентПоставщик, Объект.Договор, Объект.Организация, , Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Знач Валюта, Знач Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ОбновитьКурсСтрок()
	
	Для Каждого СтрокаДополнительныхРасходов Из Объект.ДополнительныеРасходы цикл
		Если ЗначениеЗаполнено(СтрокаДополнительныхРасходов.Валюта) Тогда
			СтрокаДополнительныхРасходов.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаДополнительныхРасходов.Валюта, ?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' , Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода));
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьРаспределеноДопРасходов()
	
	КРаспределению = ?(Объект.СуммаКРаспределению = 0, СуммаДополнительныхРасходовКРаспределению, Объект.СуммаКРаспределению);
	СуммаРаспределенная = Объект.Товары.Итог("СуммаПолная") - Объект.Товары.Итог("Сумма");
	
	Элементы.РаспределеноДопРасходов.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распределено") + " " + 
	Формат(КРаспределению ,  "ЧЦ=12; ЧДЦ=2") + "/" +
	Формат(СуммаРаспределенная ,  "ЧЦ=12; ЧДЦ=2");
	
	Элементы.РаспределеноДопРасходов.Видимость = РаспределятьДопРасходыВручную И НЕ (СуммаРаспределенная = КРаспределению);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001702") Тогда
		
		Элементы.ТоварыВводШтрихКода.Видимость 				= ЛОЖЬ;
		Элементы.ВзятьСуммуПоДокументу.Видимость 			= ЛОЖЬ;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 		= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость 			= ЛОЖЬ;
		Элементы.ДобавитьДополнительныеРасходы.Видимость 	= ЛОЖЬ;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = ЛОЖЬ;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Видимость   = ЛОЖЬ;		
		Элементы.ТоварыПересчетПоКоэффициенту.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость 		= ЛОЖЬ;
		Элементы.ДополнительныеРасходыДобавить.Видимость 	= ЛОЖЬ;
		Элементы.ПогаситьВаучер.Видимость	 				= ЛОЖЬ;
		Элементы.РаспределитьДополнительныеРасходы.Видимость= ЛОЖЬ;
		Элементы.ДополнительныеРасходыРаспределитьДополнительныеРасходы.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Видимость 				= ИСТИНА;
		Элементы.ВзятьСуммуПоДокументу.Видимость 			= ИСТИНА;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость 	= НЕ ТекущийДолг = 0 
		И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		И (УчетПоКлиентам или УчетПоПоставщикам);
		
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 		= ИСТИНА;		
		Элементы.ТоварыВводСКоличеством.Видимость 			= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ДобавитьДополнительныеРасходы.Видимость 	= НЕ ВестиУчетДвиженияДенегТолькоЧтение;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Видимость   = ИСТИНА;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = НЕ ВестиУчетДвиженияДенегТолькоЧтение;
		Элементы.ТоварыПересчетПоКоэффициенту.Видимость 	= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость 		= ВключитьМеханизмПодбораНоменклатуры;
		Элементы.ДополнительныеРасходыДобавить.Видимость 	= ИСТИНА;
		Элементы.ПогаситьВаучер.Видимость	 				= ЕстьДополнительныеРасходы И ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
		Элементы.РаспределитьДополнительныеРасходы.Видимость= РаспределятьДопРасходыВручную;
		Элементы.ДополнительныеРасходыРаспределитьДополнительныеРасходы.Видимость = РаспределятьДопРасходыВручную;
		
	КонецЕсли;               		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)
	
	РезультатСтруктура = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
	Если РезультатСтруктура.Результат = Неопределено Тогда // 0 - ничего
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) И НЕ ДокументЗаблокирован;
		Элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;
		
	ИначеЕсли РезультатСтруктура.Результат = 1 Тогда
		ПриИзмененииНоменклатуры(, ТекСтр);
	ИначеЕсли РезультатСтруктура.Результат = 2 Тогда
		ПриСменеКонтрагента();
	ИначеЕсли РезультатСтруктура.Результат = 3 Тогда
		ОрганизацияПриИзмененииНаКлиенте();
	ИначеЕсли РезультатСтруктура.Результат = 4 Тогда
		СотрудникПриИзмененииНаСервере();
	ИначеЕсли РезультатСтруктура.Результат = 5 Тогда
		ВыяснитьОПогашенииНакопления(РезультатСтруктура.Ответ);
	КонецЕсли;	
	
	Если НЕ РезультатСтруктура.Результат = Неопределено Тогда
		ПересчитатьДокументНаКлиенте();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод)
	
	РезультатСтруктура = Новый Структура("Результат", Неопределено);
	Если НЕ ДокументЗаблокирован Тогда	
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки.Номенклатура) Тогда
			
			СтруктураПараметров = Новый Структура("Номенклатура, Цена, Количество");
			СтруктураПараметров.Вставить("Номенклатура", РезультатОбработки.Номенклатура);
			СтруктураПараметров.Вставить("СерияНоменклатуры", РезультатОбработки.СерияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", РезультатОбработки.ЕдиницаИзмерения);
			СтруктураПараметров.Вставить("Количество", ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(РезультатОбработки.Номенклатура));
			СтруктураПараметров.Вставить("Цена", 0);
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров);
			СтрокаДисплеяПокупателя = СокрЛП(РезультатОбработки.Номенклатура);
			РезультатСтруктура.Результат = 1;
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 4;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 2;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 3;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ИспользоватьВаучеры Тогда
				
				РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					РезультатСтруктура = ДобавитьПрименитьВаучер(РезультатОбработки);
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден (") + ТекКод + ").");
				РезультатСтруктура.Результат = Неопределено;	
			КонецЕсли;
		КонецЕсли; 	 	
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			
			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Знач Номенклатура)
	Возврат ОбщийМодульСервер.ПолучитьПОследнююЦенуРеализации(Номенклатура, Объект.КлиентПоставщик, Объект.Договор, Объект.Дата);	
КонецФункции // ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)	
	ОрганизацияПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
					ДоговорПриИзмененииНаСервере();
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОстатокТовараВСтроке(Знач Номенклатура, Знач Количество)
	
	Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = НЕ ПоказыватьИзображения;
	Если НЕ ПоказыватьИзображения Тогда
		Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
	Иначе
		НоменклатураИзображения = Неопределено;
		ПоказатьТовар();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаДляКомиссионнойТорговлиПриИзменении(Элемент)
	ИзменитьВидДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ Отказ
		И ЕстьДополнительныеРасходы Тогда
		
		ПересчитатьСуммуПрочихРасходов();
		
		Объект.ВыбылоДенег 	= ИтогоРасходов;
		Объект.Курс 		= 1;
		Объект.Валюта 		= ОсновнаяВалюта;		
	КонецЕсли;
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ
		И Объект.Товары.Количество() > 10 Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	КонецЕсли;
	
	Если НЕ Отказ
		И ИспользоватьВаучеры Тогда
		
		Ваучеров = 0;
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			Если СтрокаВаучера.ВаучерИзъят Тогда
				Ваучеров = Ваучеров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ваучеров = 0
			И Вопрос(?(Ваучеров = 1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вернули ваучер?"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучеры") + " (" + СокрЛП(Ваучеров) + ")?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Отказ = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
	Если РаспределятьДопРасходыВручную
		И НЕ СуммаРаспределенныхРасходовСовпадает() Тогда		
		
		КРаспределению = ?(Объект.СуммаКРаспределению = 0, СуммаДополнительныхРасходовКРаспределению, Объект.СуммаКРаспределению);
		СуммаРаспределенная = Объект.Товары.Итог("СуммаПолная") - Объект.Товары.Итог("Сумма");
		
		ТекстРаспределений = "" + Формат(КРаспределению , "ЧЦ=12; ЧДЦ=2; ЧН=0") + "/" + Формат(СуммаРаспределенная , "ЧЦ=12; ЧДЦ=2");
		
		Отказ = ИСТИНА;
		ПоказатьПредупреждение(, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма распределения дополнительных расходов не совпадает!") + Символы.ПС + ТекстРаспределений);
        
	КонецЕсли;
	
	ПередЗаписьюФрагмент(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.КлиентПоставщик)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Договор) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
						ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= ТекущийОбъект.Дата Тогда
						
						Отказ = ИСТИНА;
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!"), ТекущийОбъект, "Договор");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекущийОбъект.Договор.ПредусматриваетСтрогиеЦены Тогда
				
				Договор = ТекущийОбъект.Договор;
				Дата 	= ТекущийОбъект.Дата;
				ВидЦен 	= ТекущийОбъект.ВидЦен;
				
				Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, СтрокаТовара.Цена, ТекущийОбъект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						Отказ = ИСТИНА;
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене из договора") + ": " + Цена, ТекущийОбъект);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ Отказ
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
			
			Если НЕ ТекущийОбъект.ДополнительныеРасходы.Количество() = 0 Тогда
				ТекущийОбъект.ХранилищеДенег = ТекущийОбъект.ДополнительныеРасходы[0].ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег)
				И ЗначениеЗаполнено(ТекущийОбъект.Склад)
				И ЗначениеЗаполнено(ТекущийОбъект.Склад.ХранилищеДенег) Тогда
				
				ТекущийОбъект.ХранилищеДенег = ТекущийОбъект.Склад.ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
				ТекущийОбъект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
					ТекущийОбъект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;		
			КонецЕсли;
			
			ТекущийОбъект.Валюта = ТекущийОбъект.ХранилищеДенег.Валюта;
		КонецЕсли;
		
		Если НЕ Отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагмент(Знач Отказ)
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетПоКоэффициенту(Команда)
	
	КоэффициентПересчета = 1;
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПересчетПоКоэффициентуЗавершение", ЭтаФорма, Новый Структура("КоэффициентПересчета", КоэффициентПересчета)), КоэффициентПересчета, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите коэффициент пересчета цен") + ":", 10, 6);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетПоКоэффициентуЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	КоэффициентПересчета = ?(Число = Неопределено, ДополнительныеПараметры.КоэффициентПересчета, Число);	
	
	Если (Число <> Неопределено) Тогда	
		ПересчетПоКоэффициентуНаСервере(КоэффициентПересчета);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчетПоКоэффициентуНаСервере(Знач КоэффициентПересчета = 1)
	
	СуммаРазницы = 0;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаРазницы = СуммаРазницы + (СтрокаТовара.Цена * СтрокаТовара.Количество) - ((СтрокаТовара.Цена * КоэффициентПересчета) * СтрокаТовара.Количество);
		СтрокаТовара.Цена  = СтрокаТовара.Цена * КоэффициентПересчета;
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
	КонецЦикла;
	
	Применен = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Применен");
	Если НЕ ЗначениеЗаполнено(Объект.Комментарий)
		ИЛИ Лев(Объект.Комментарий, 6) = Лев(Применен, 6) Тогда
		
		Объект.Комментарий = Применен + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("коэффициент на общую сумму") + ": " + СокрЛП(СуммаРазницы);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если НЕ ДокументЗаблокирован Тогда
		Если НЕ Объект.ТовараНаСумму = Объект.Товары.Итог("Сумма") Тогда
			Объект.ТовараНаСумму = Объект.Товары.Итог("Сумма");	
		КонецЕсли;
		Если НЕ Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество") Тогда
			Объект.ТовараВКоличестве = Объект.Товары.Итог("Количество");		
		КонецЕсли;
		
		ПересчитатьРаспределениеДопРасходовПриНеобходимости();	
	КонецЕсли;
	// 	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара, Знач ИзПолнойЦены = ЛОЖЬ, Знач ИзПолнойСуммы = ЛОЖЬ, Знач ИзДоРасходов = ЛОЖЬ, Знач ИзДобавочнойЦены = ЛОЖЬ)
	
	Количество = ?(СтрокаТовара.Количество = 0, 1, СтрокаТовара.Количество);
	
	Если ИзДоРасходов Тогда
		СтрокаТовара.СуммаПолная 	= СтрокаТовара.СуммаДополнительныхРасходов - СтрокаТовара.Сумма;
		СтрокаТовара.ЦенаДобавочная = СтрокаТовара.СуммаДополнительныхРасходов / Количество;
	ИначеЕсли ИзДобавочнойЦены Тогда
		СтрокаТовара.ЦенаПолная 	= СтрокаТовара.Цена + СтрокаТовара.ЦенаДобавочная;
	ИначеЕсли ИзПолнойЦены Тогда
		СтрокаТовара.ЦенаДобавочная = СтрокаТовара.ЦенаПолная - СтрокаТовара.Цена;
	ИначеЕсли ИзПолнойСуммы Тогда
		СтрокаТовара.ЦенаДобавочная = (СтрокаТовара.СуммаПолная / Количество) - СтрокаТовара.Цена;
	КонецЕсли;
	СтрокаТовара.ЦенаПолная	 = СтрокаТовара.ЦенаДобавочная + СтрокаТовара.Цена;
	СтрокаТовара.СуммаПолная = (СтрокаТовара.ЦенаДобавочная + СтрокаТовара.Цена) * Количество;
	
	СтрокаТовара.СуммаДополнительныхРасходов = СтрокаТовара.СуммаПолная - СтрокаТовара.Сумма;
	
	ОбновитьНадписьРаспределеноДопРасходов();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРаспределениеДопРасходов(Знач ТолькоРасчет = ЛОЖЬ)
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены)
		И НЕ Объект.ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВалютаЦены = Неопределено;
	КонецЕсли;
	
	Дата = Объект.Дата;
	СуммаДополнительныхРасходовКРаспределению = 0;
	ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = 0;
	СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = 0;
	КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = 0;
	
	Для Каждого СтрокаДополнительныхРасходов Из Объект.ДополнительныеРасходы Цикл
		
		Если НЕ СтрокаДополнительныхРасходов.НеРаспределятьНаСтоимость Тогда
			СуммаДополнительныхРасходовКРаспределению = СуммаДополнительныхРасходовКРаспределению + СтрокаДополнительныхРасходов.Сумма * СтрокаДополнительныхРасходов.Курс;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДополнительныхРасходовКРаспределению = ОбщийМодульСервер.ПоКурсу(СуммаДополнительныхРасходовКРаспределению, ВалютаЦены, Объект.Валюта, Дата);
	Объект.СуммаКРаспределению = СуммаДополнительныхРасходовКРаспределению;
	
	ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
	Если ТовараВКоличестве = 0 Тогда
		ТовараВКоличестве = 1;
	КонецЕсли;
	
	РаспределятьДополнительныеРасходыПропорциональноКоличеству = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноКоличеству");
	РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости");
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
		
		Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура)
			И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура) Тогда
			
			ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль + 1;
			
			СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов + СуммаТов;
			КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов + СтрокаТовара.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаДопРасх = 0;
		
		Если НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура)
			И НЕ СуммаДополнительныхРасходовКРаспределению = 0 Тогда
			
			Если ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦены
				И ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения)
				И Не СтрокаТовара.ЦенаДобавочная = 0 Тогда
				
				СуммаДопРасх = СтрокаТовара.ЦенаДобавочная * СтрокаТовара.Количество;
				
			Иначе			
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
				
				Если РаспределятьДополнительныеРасходыПропорциональноКоличеству Тогда
					Если НЕ ТовараВКоличестве = 0 Тогда
						СуммаДопРасх = СуммаДополнительныхРасходовКРаспределению * (СтрокаТовара.Количество / ?( КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = 0,  1,  КоличествоБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов)); // без единиц измерения
					КонецЕсли;
					
				ИначеЕсли РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости Тогда // Распределять дополнительные расходы пропорционально на единицу номенклатуры независимо от ее стоимости и количества
					Если НЕ ТовараВКоличестве = 0 Тогда
						СуммаДопРасх = СуммаДополнительныхРасходовКРаспределению / ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль; // без единиц измерения	 
					КонецЕсли;
					
				Иначе
					Если НЕ СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов = 0 Тогда											
						СуммаДопРасх = СуммаДополнительныхРасходовКРаспределению * СуммаТов / СуммаБазыНоменклатурыНаКоторуюРаспространяетсяРаспределениеДопРасходов;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТолькоРасчет Тогда
			СтрокаТовара.СуммаДополнительныхРасходов = СуммаДопРасх;
			
			Если РаспределятьДопРасходыВручную Тогда
				СтрокаТовара.ЦенаДобавочная = СтрокаТовара.СуммаДополнительныхРасходов / ?(СтрокаТовара.Количество = 0, 1, СтрокаТовара.Количество);
				СтрокаТовара.СуммаПолная 	= СтрокаТовара.Сумма + СтрокаТовара.СуммаДополнительныхРасходов;
				СтрокаТовара.ЦенаПолная  	= СтрокаТовара.СуммаПолная / ?(СтрокаТовара.Количество = 0, 1, СтрокаТовара.Количество);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьРаспределениеДопРасходов

&НаКлиенте
Процедура ПересчитатьРаспределениеДопРасходовПриНеобходимости()
	
	Если (ПоказыватьРаспределениеДопРасходов ИЛИ РаспределятьДопРасходыВручную)
		И НЕ СуммаРаспределенныхРасходовСовпадает()
		И ЕстьДополнительныеРасходы Тогда
		
		ТолькоРасчет = ЛОЖЬ;
		
		Если НЕ Объект.ДополнительныеРасходыРаспределилиВручную Тогда
			ТолькоРасчет = ИСТИНА;
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьРаспределениеДопРасходовПриНеобходимостиЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распределить дополнительные расходы?"), РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
		
		ПересчитатьРаспределениеДопРасходовПриНеобходимостиФрагмент(ТолькоРасчет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРаспределениеДопРасходовПриНеобходимостиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТолькоРасчет = ЛОЖЬ;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТолькоРасчет = ИСТИНА;
	КонецЕсли;
	
	ПересчитатьРаспределениеДопРасходовПриНеобходимостиФрагмент(ТолькоРасчет);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРаспределениеДопРасходовПриНеобходимостиФрагмент(Знач ТолькоРасчет)
	
	ПересчитатьРаспределениеДопРасходов(ТолькоРасчет);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПрочихРасходов(Знач БезИзменений = ЛОЖЬ)
	
	ИтогоРасходов = 0;
	
	Для Каждого СтрокаДополнительныхРасходов Из Объект.ДополнительныеРасходы Цикл
		
		Если НЕ БезИзменений Тогда
			Если СтрокаДополнительныхРасходов.Курс = 0 Тогда
				СтрокаДополнительныхРасходов.Курс = 1;	
			КонецЕсли;	
		КонецЕсли;
		
		ИтогоРасходов = ИтогоРасходов + СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда		
			Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
		Иначе
			Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = ОстатокТовараВСтроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);	
	КонецЦикла;
	
	РегистрацияДополнительнойЦены(ИСТИНА);
	
КонецПроцедуры // ПереСчитатьУчетныеОстатки

&НаСервере
Процедура ПечатьБезСерий(ДокументДляПечати, Знач ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Поступление без серий."), 2);
	Документы.ПоступленияТовара.ПечатьБезСерий(ДокументДляПечати, ПараметрКоманды);
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда               
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ИСТИНА, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВаучер(Команда)
	
	Элементы.ПогаситьВаучер.Видимость 	= ЛОЖЬ;
	Элементы.Ваучеры.Видимость 			= ИСТИНА;
	СтрокаВаучера = Объект.Ваучеры.Добавить();
	Элементы.Ваучеры.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
	Элементы.Ваучеры.ТекущийЭлемент 	= Элементы.ВаучерыВаучер;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, Объект.Валюта, , Объект.Дата);
	
	Видимость = не ТекущийДолг = 0 
	И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
	И (УчетПоКлиентам или УчетПоПоставщикам);
	
	Элементы.ТекущийДолг.Видимость = Видимость;
	Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость = НЕ ДокументЗаблокирован И Видимость;
	
	Если видимость Тогда
		Элементы.ТекущийДолг.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий долг (") + формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";	
	КонецЕсли;
	
КонецПроцедуры // ПоказатьДолгКлиентаПоставщика	
Функция   ПоказатьИзображениеРеквизита(Знач ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			Элементы.СсылкаНаИзображение.Видимость    = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость = ИСТИНА;
			
			Если СтруктураИзображения.РазмерПриОтображении = 1 Тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 2 Тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 3 Тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 4 Тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 5 Тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			КонецЕсли; 
			
		Иначе
			Элементы.СсылкаНаИзображение.Видимость    = ИСТИНА;
			Элементы.ИзображениеВБазеДанных.Видимость = ЛОЖЬ;
		КонецЕсли; 		
		
		Результат = ИСТИНА;  		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьКакБудутРаспределеныДополнительныеРасходы(Команда)
	
	ПоказыватьРаспределениеДопРасходов = НЕ ПоказыватьРаспределениеДопРасходов;
	ОбновитьВидимостьРаспределенияДопРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если НЕ СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если НЕ Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Знач Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ПолучитьКурс(Знач Валюта, Знач ДатаРасхода = Неопределено)	
	Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, ?(ДатаРасхода = '00010101000000', Объект.Дата, ДатаРасхода));
КонецФункции // получитьКурс

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ЕдиницаИзмерения = Неопределено, Знач ЕслиЦенаНольНеУстанавливать = ЛОЖЬ, Знач ТекущаяЦена = -1, Знач ВидЦен = Неопределено, Знач ДляДопЦен = ЛОЖЬ)
	
	Если ВидЦен = Неопределено Тогда
		ВидЦен = Объект.ВидЦен;
	КонецЕсли;
	
	Если НЕ ДляДопЦен
		ИЛИ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
	Иначе
		ПроцентСкидки = 0;	
	КонецЕсли;
	ЦенаНовая = 0;
	
	Если НЕ ДляДопЦен
		И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		ЦенаНовая = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если ДляДопЦен
		ИЛИ (НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену
		И ЦенаНовая = 0) Тогда
		
		ЦенаНовая = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Объект.Дата - 1, ЛОЖЬ, Количество, Объект.Договор, , ТекущаяЦена, Объект.Ссылка, , ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ПроцентСкидки = 0 
		И НЕ ЦенаНовая = 0 Тогда
		
		Возврат ЦенаНовая - (ЦенаНовая / 100 * ПроцентСкидки);
		
	ИначеЕсли НЕ ЦенаНовая = 0 Тогда
		
		Возврат ЦенаНовая;
		
	ИначеЕсли НЕ ИспользоватьСложныйМеханизмЦен
		И НЕ Номенклатура.Цена = 0 Тогда
		
		Возврат Номенклатура.Цена;
		
	ИначеЕсли ТекущаяЦена = -1 Тогда
		Возврат 0;		
	Иначе
		Возврат ТекущаяЦена;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;	
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();  
	Иначе
		ПоказатьДолгКлиентаПоставщика();
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		// 	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(Знач ИзКоличества = ЛОЖЬ, СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		Если НЕ ИзКоличества
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям 
			И (НЕ СерииНоменклатурыВидны ИЛИ СтрокаТовара.Количество <> 1) Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				СерииНоменклатурыВидны  = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;				
			КонецЕсли;             	
		КонецЕсли;
		
		Если НЕ НеМенятьЦену
			И НЕ ИзКоличества 
			И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = ОстатокТовараВСтроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;
		
		Если ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦены
			И ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
				
			ЦенаДобавочная = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения, , , ВидЦенДляРегистрацииФактическойЦеныПриобретения);
			СтрокаТовара.ЦенаДобавочная = ЦенаДобавочная;
			СтрокаТовара.ЦенаПолная = СтрокаТовара.ЦенаДобавочная + СтрокаТовара.Цена;			
			СтрокаТовара.СуммаПолная = СтрокаТовара.ЦенаПолная * СтрокаТовара.Количество;
		КонецЕсли;
		
		ПоказатьТовар();
		
	Иначе
		СтрокаТовара.Цена  = 0;
		СтрокаТовара.Сумма = 0;		
	КонецЕсли;
	
	ПересчитатьРаспределениеДопРасходовПриНеобходимости();
	
	Если РегистрироватьВидЦенПриПоступлении Тогда		
		РассчитатьДополнительнуюЦенуДляСтрокиНаКлиенте(СтрокаТовара);
	КонецЕсли;
	
	Если РаспределятьДопРасходыВручную Тогда
		ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	СменитьВидОтображенияДокумента(ИСТИНА);
	ВидимостьИсходнойРеализации(ИСТИНА);
	ВидимостьДополнительныхРасходов(ИСТИНА);
	
	ВидимостьВалюты = ИспользоватьУчетВалют
	И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
	ВыводНадписиПоФормуле();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()	
	
	ПроверитьСменуТипа();
	КлиентПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
	ВидимостьИсходнойРеализации();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001700", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров");
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьУчетВалют 				 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		УчетПоПоставщикам 					 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		УчетПоКлиентам 						 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		УчетЗаказовПоставщикам  			 	= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
		УчетЗаказовКлиентов	    			 	= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		ВестиУчетПоСкладам 					 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДвиженияДенег 				 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетПоНаправлениямДеятельности 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");		
		СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями");
		СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями");
		СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями");
		СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями");
		ПоказыватьИзображения 					= СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
		Элементы.ПечатьЧека.Видимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		ИспользоватьСторнированиеДокументов	 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ИспользоватьВаучеры 				 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
		ИспользоватьСкидки						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		РаспределятьДопРасходыВручную           = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПриПоступленииВручную");
		ВыводитьСуммуПоВторомуВидуЦенВДокументеПоступления = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьСуммуПоВторомуВидуЦенВДокументеПоступления");
		ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦены = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦены");
		
		Если РаспределятьДопРасходыВручную Тогда
			
			Элементы.ТоварыПоказатьКакБудутРаспределеныДополнительныеРасходы.Видимость = ЛОЖЬ;
			Элементы.ТоварыЦенаПолная.Видимость = ИСТИНА;
			Элементы.ТоварыЦенаДобавочная.Видимость = ИСТИНА;
			Элементы.ТоварыСуммаПолная.Видимость = ИСТИНА;
			Элементы.ТоварыСуммаДополнительныхРасходов.Видимость = ИСТИНА;
			Элементы.ТоварыСуммаДополнительныхРасходов.ТолькоПросмотр = ЛОЖЬ;
			
		КонецЕсли;
		
		ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену 		= ИспользоватьСложныйМеханизмЦен И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену");		
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость 			= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ГруппаДополнительнаяИнформация.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПоступления");
		
		ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		УчетПоСериям   = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ЛОЖЬ;
			Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 			  = ЛОЖЬ;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен")) Тогда
				Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устанавливать цену закупки Ценой реализации товара (будут равные цены)");
			КонецЕсли;			
		КонецЕсли;
		
		ДоступенТолькоВозврат = ОбщийМодульСерверПривилегия.ДоступенТолькоВозврат();
		
		Элементы.Клиент.ВыбиратьТип = НЕ ДоступенТолькоВозврат;
		
		Если ДоступенТолькоВозврат Тогда
			Элементы.Клиент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (для возврата)");
		КонецЕсли;
		
		Если ИспользоватьПодключаемоеОборудование Тогда 
			ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
			
			Дисплеи.ЗагрузитьЗначения(
			МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));		
		Иначе
			фр = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) 
			И ЗначениеЗаполнено(Параметры.КлиентПоставщик) Тогда		
			
			Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если ИспользоватьСложныйМеханизмЦен 
				И НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Если ЗначениеЗаполнено(Объект.Склад)
					И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
					
					Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
						Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДоступенТолькоВозврат
				И УчетПоПоставщикам 
				И НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				
				Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");			
			КонецЕсли;		
			
			Элементы.ИтогоРасходов.Видимость 		 = ЛОЖЬ;
			Элементы.ДополнительныеРасходы.Видимость = ЛОЖЬ;
			
			ВидЦенПриИзмененииНаСервере(ИСТИНА);
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
			
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных");
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;		
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
			КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки) Тогда
				
				Объект.ДатаОтсрочки = Объект.Дата + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			ОбновитьДатуОтсрочки();
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
		Иначе
			Если НЕ Объект.Проведен Тогда
				
				Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
				ОбновитьКурсСтрок();
				
				ПересчитатьСуммуПрочихРасходов();
				
			КонецЕсли;
			
			Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ЛОЖЬ;
			
			ВаучерыВидимость = НЕ Объект.Ваучеры.Количество() = 0;
			Элементы.Ваучеры.Видимость = ВаучерыВидимость;
			Элементы.ПогаситьВаучер.Видимость = ЕстьДополнительныеРасходы И ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность  = ЛОЖЬ;	
			КонецЕсли;
			
			Элементы.ТоварыЦена.Доступность  = ЛОЖЬ;
			Элементы.ТоварыСумма.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		Элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег И НЕ ИспользоватьУчетВалют;
		Элементы.Декорация1.Видимость 				  = ВестиУчетДвиженияДенег; 
		
		Если НЕ УчетПоКлиентам 
			И НЕ УчетПоПоставщикам Тогда
			
			Элементы.УкажитеВидДокумента.Видимость = ИСТИНА;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
				Иначе	
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение;
				КонецЕсли;
				
			Иначе
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Оприходование;
			КонецЕсли;
			
			Элементы.ВидДокумента.Видимость 	   = ЛОЖЬ;
			
		Иначе
			Элементы.УкажитеВидДокумента.Видимость = ЛОЖЬ;
		КонецЕсли;   	
		
		ИзменитьВидДокумента();
		ПоказатьДолгКлиентаПоставщика();
		
		КлиентПриИзмененииНаСервере(ИСТИНА);	
		
		ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
		СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
		Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
		
		ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
		Элементы.ТоварыЗаказ.Видимость 			 = УчетЗаказовПоставщикам и ЭтоРасчетыСПоставщиком И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ТоварыЗаказПокупателя.Видимость = УчетЗаказовКлиентов и ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ВидЦенВалютаЦены.Видимость 	 = ИспользоватьСложныйМеханизмЦен;
		
		Если ИспользоватьУчетВалют
			И ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		Иначе
			ВидЦенВалютаЦены = ОсновнаяВалюта;
		КонецЕсли;
		
		ВключитьМеханизмПодбораНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		Элементы.ВаучерыВаучерИзъят.Видимость = ИспользоватьВаучеры И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
		Элементы.ДополнительныеРасходыДатаРасхода.Видимость = НЕ ИспользоватьСторнированиеДокументов;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента); 	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , ИСТИНА);
			
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда				
				ВестиУчетДвиженияДенегТолькоЧтение = ИСТИНА;
				Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = ЛОЖЬ;
				Элементы.ВзятьСуммуПоДокументу.Видимость 		 = ЛОЖЬ;
				Элементы.ДобавитьДополнительныеРасходы.Видимость = ЛОЖЬ;
				Элементы.ДополнительныеРасходы.ТолькоПросмотр 	 = ИСТИНА;
				Элементы.ГруппаВыбыло.ТолькоПросмотр 		 	 = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ДополнительныеРасходы.Видимость = ЛОЖЬ;
				Элементы.ГруппаВыбыло.Видимость 		 = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;		
		
		РегистрацияДополнительнойЦены(ИСТИНА, ИСТИНА);
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ; 	
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
	ВестиУчетДвиженияДенег 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Объект.Договор, Объект.КлиентПоставщик, Объект.Дата, Объект.ТовараНаСумму, Объект.ТовараВКоличестве, ИСТИНА, Объект.ВыбылоДенег, Объект.Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ Тогда   				
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Объект.Ссылка);						
			Отказ = ИСТИНА;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовара Из Объект.Товары Цикл
			
			Номенклатура      = ТекСтрокаТовара.Номенклатура;
			СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
			
			Если НЕ Отказ
				И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				
				Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Объект.Дата - 1);
				Если Отказ Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	// заказ/не заказ
	
	Если НЕ отказ
		И ВестиУчетДвиженияДенег Тогда		
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
		КонецЕсли;			
		
		Если Объект.ЭтоЗаказ 
			ИЛИ Объект.ДополнительныеРасходы.Количество() = 0 Тогда
			
			Если НЕ Объект.ВыбылоДенег = 0 Тогда		
				
				СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Объект.ВыбылоДенег, Объект.Дата, ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, ИСТИНА, Объект.Ссылка);
				Отказ  = СтруктураПополнения.Отказ;	
			КонецЕсли;
		Иначе
			
			СуммаДенег = 0;
			Для Каждого СтрокаДополнительныхРасходов Из Объект.ДополнительныеРасходы Цикл
				СуммаДенег = СтрокаДополнительныхРасходов.Сумма * ?(СтрокаДополнительныхРасходов.Курс = 0, 1, СтрокаДополнительныхРасходов.Курс);
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, 
				?(СтрокаДополнительныхРасходов.ДатаРасхода = '00010101000000' , Объект.Дата, СтрокаДополнительныхРасходов.ДатаРасхода), ,
				СтрокаДополнительныхРасходов.Валюта, СтрокаДополнительныхРасходов.ХранилищеДенег, , Объект.Ссылка);
				
				Если Отказ Тогда
					Прервать;	
				КонецЕсли;
			КонецЦикла;		
			
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		ПересчитатьНасильно = ЛОЖЬ;
		
		// сменился тип - сменим Вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетыСПоставщиком 
			И СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		ИначеЕсли НЕ ЭтоРасчетыСПоставщиком 
			И НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЦикла;
		КонецЕсли;  
		
		Возврат ИСТИНА;
		
	Иначе // не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ЛОЖЬ;
			
		ИначеЕсли НЕ УчетПоКлиентам       			
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Возврат ИСТИНА;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!"), Объект, "ТоварыСерияНоменклатуры");
					Отказ = ИСТИНА;
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!"), Объект, "ТоварыСерияНоменклатуры");
				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьДополнительныеРасходы(Команда)
	
	Объект.ДополнительныеРасходыРаспределилиВручную = ЛОЖЬ;
	ПересчитатьРаспределениеДопРасходов();
	ОбновитьНадписьРаспределеноДопРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДополнительнуюЦенуДляСтрокиНаКлиенте(СтрокаТовара, Знач НеМенятьСуществующие = ЛОЖЬ)
	
	Если НЕ НеМенятьСуществующие
		ИЛИ СтрокаТовара.ДополнительнаяЦена = 0 Тогда
		
		СтрокаТовара.ДополнительнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, , ДополнительныйВидЦенПриПоступлении, Объект.Дата, Объект.Ссылка, СтрокаТовара.ЕдиницаИзмерения, Объект.ВидЦен, ИСТИНА, ЛОЖЬ, ИСТИНА, СтрокаТовара.Цена);
		СтрокаТовара.СуммаВЦенеДоп = СтрокаТовара.ДополнительнаяЦена * СтрокаТовара.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияДополнительнойЦены(Знач НеМенятьСуществующие = ЛОЖЬ, Знач ЧитатьСуществующие = ЛОЖЬ)
	
	ЭтоПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
	
	Если ЭтоПоставщик Тогда
		
		Если ВестиУчетПоСкладам
			И ЗначениеЗаполнено(Объект.Склад)
			И ЗначениеЗаполнено(Объект.Склад.РегистрироватьВидЦенПриПоступлении) Тогда
			
			ДополнительныйВидЦенПриПоступлении = Объект.Склад.РегистрироватьВидЦенПриПоступлении;
		Иначе
			ДополнительныйВидЦенПриПоступлении = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегистрироватьВидЦенПриПоступлении");	
		КонецЕсли;
		
		РегистрироватьВидЦенПриПоступлении = ЗначениеЗаполнено(ДополнительныйВидЦенПриПоступлении);
		Если РегистрироватьВидЦенПриПоступлении Тогда
			Элементы.ТоварыДополнительнаяЦена.Видимость = ИСТИНА;
			Элементы.ТоварыДополнительнаяЦена.Заголовок = "" + СокрЛП(ДополнительныйВидЦенПриПоступлении);
			Элементы.ТоварыСуммаВЦенеДоп.Видимость = ВыводитьСуммуПоВторомуВидуЦенВДокументеПоступления;
			
			ОбновитьДополнительныеЦены(, НеМенятьСуществующие, ЧитатьСуществующие);
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров") Тогда
		
		Если ЭтоПоставщик
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
			
			ВидЦенДляРегистрацииФактическойЦеныПриобретения = Объект.КлиентПоставщик.ВидЦенДляРегистрацииФактическойЦеныПриобретения;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Склад)
			И ЗначениеЗаполнено(Объект.Склад.ВидЦенДляРегистрацииФактическойЦеныПриобретения) Тогда
			
			ВидЦенДляРегистрацииФактическойЦеныПриобретения = Объект.Склад.ВидЦенДляРегистрацииФактическойЦеныПриобретения;
		Иначе
			ВидЦенДляРегистрацииФактическойЦеныПриобретения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляРегистрацииФактическойЦеныПриобретения");
		КонецЕсли;
		
		Элементы.ВидЦенДляРегистрацииФактическойЦеныПриобретения.Видимость = ИспользоватьСложныйМеханизмЦен И НЕ ДоступенТолькоВозврат
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления")
		И НЕ Объект.НеРегистрироватьЦеныЗаСчетЭтогоДокумента
		И ЗначениеЗаполнено(ВидЦенДляРегистрацииФактическойЦеныПриобретения);
		
	Иначе		
		Элементы.ВидЦенДляРегистрацииФактическойЦеныПриобретения.Видимость = ЛОЖЬ;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	ПредставитьДокументДвумяКолонками = не ПредставитьДокументДвумяКолонками;
	СменитьВидОтображенияДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОтображенияДокумента(Знач ПриОткрытии = ЛОЖЬ)
	
	Если ПредставитьДокументДвумяКолонками Тогда
		Элементы.Переместить(Элементы.ГруппаКнопокГоризонт, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаГоризонтШ, Элементы.ГруппаСлева);
		// 		Элементы.Переместить(Элементы.ГруппаГоризонтШ2, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаВидДокументаИПартияПриобретения, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаВыбыло, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаИтоговДенег, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаСредняяКолонка, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.Комментарий, Элементы.ГруппаСлева);
		
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаСправа);
		Элементы.Переместить(Элементы.ГруппаИтоговТаблицы, Элементы.ГруппаСправа);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаСлева);
		
		Элементы.ГруппаГоризонтШ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		// 		Элементы.ГруппаГоризонтШ2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаВидДокументаИПартияПриобретения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
		Элементы.ГруппаВыбыло.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
		
		
	ИначеЕсли НЕ ПриОткрытии Тогда
		
		Элементы.Переместить(Элементы.ГруппаКнопокГоризонт, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаГоризонтШ, Элементы.ГруппаСтандартногоВида);
		// 		Элементы.Переместить(Элементы.ГруппаГоризонтШ2, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаВидДокументаИПартияПриобретения, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаВыбыло, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаСредняяКолонка, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаГоризонтТаблиц, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаИтоговТаблицы, Элементы.ГруппаПодвал);
		Элементы.Переместить(Элементы.ГруппаИтоговДенег, Элементы.ГруппаПодвал);
		Элементы.Переместить(Элементы.ГруппаГоризонтНиз, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.Комментарий, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаСтандартногоВида);
		
		Элементы.ГруппаГоризонтШ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		// 		Элементы.ГруппаГоризонтШ2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаВидДокументаИПартияПриобретения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаВыбыло.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруПечатьЭтикетки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("СозданиеНоменклатуры", ИСТИНА);
	
	Форма = ПолучитьФорму("Обработка.ПечатьЭтикетки.Форма", ПараметрыФормы);
	ДанныеФормы = Форма.Объект;
	ЗаполнитьФормуПечатиНаСервере(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	
	напечатаноНоменклатуры = Форма.ОткрытьМодально();
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создание номенклатуры."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	
	Если ТипЗнч(напечатаноНоменклатуры) = Тип("Структура") Тогда
		
		ШтрихКод 		= напечатаноНоменклатуры.ШтрихКод;
		Количество 		= напечатаноНоменклатуры.количество;
		Номенклатура 	= напечатаноНоменклатуры.номенклатура;
		серияНоменклатуры = напечатаноНоменклатуры.серияНоменклатуры;
		ЕдиницаИзмерения  = напечатаноНоменклатуры.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
			СтруктураПараметров.Вставить("серияНоменклатуры", серияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);		
			СтруктураПараметров.Вставить("Цена", напечатаноНоменклатуры.Цена);
			СтруктураПараметров.Вставить("Количество", напечатаноНоменклатуры.количество);
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров, ИСТИНА);			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	ИмяНеобходимойФормы  = "Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии";
	ПараметрыДляФормы 	 = Новый Структура;
	Если НЕ ТекСтр = Неопределено Тогда
		ПараметрыДляФормы.Вставить("Номенклатура", ТекСтр.Номенклатура);
	КонецЕсли;	
	ФормаДобавленияСерий = ПолучитьФорму(ИмяНеобходимойФормы, ПараметрыДляФормы, ЭтаФорма);
	СтруктураОтвета 	 = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		Цена = ПолучитьЦенуНаСервере(СтруктураОтвета.Номенклатура, , );
		Если Цена = 0 Тогда
			ПоказатьВводЧисла(Новый ОписаниеОповещения("СоздатьПринятьСерииЗавершение", ЭтаФорма, Новый Структура("СтруктураОтвета, Цена", СтруктураОтвета, Цена)), Цена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите цену для") + " " + СокрЛП(СтруктураОтвета.Номенклатура), 15, 2);
            Возврат;
		КонецЕсли;
		СоздатьПринятьСерииФрагмент(СтруктураОтвета, Цена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерииЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	СтруктураОтвета = ДополнительныеПараметры.СтруктураОтвета;
	Цена = ?(Число = Неопределено, ДополнительныеПараметры.Цена, Число);	
	
	СоздатьПринятьСерииФрагмент(СтруктураОтвета, Цена);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерииФрагмент(Знач СтруктураОтвета, Знач Цена)
	
	ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета, Цена);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОповещение()	
	ПоказатьТовар();
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция   СуммаРаспределенныхРасходовСовпадает()
	Возврат (Объект.Товары.Итог("СуммаПолная") - Объект.Товары.Итог("Сумма")) = Объект.СуммаКРаспределению;	
КонецФункции

&НаКлиенте
Процедура ТоварыДополнительнаяЦенаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	СтрокаТовара.СуммаВЦенеДоп = СтрокаТовара.ДополнительнаяЦена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекСтр.Номенклатура);	
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекСтр.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры(, ТекСтр);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)		
	ПриИзмененииНоменклатуры(, ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(, Строка, ИСТИНА); 			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	
	ТекСтр = Элементы.Товары.ТекущиеДанные;	
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОповещение", 0.2, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаДополнительныхРасходовПриИзменении(Элемент)
	
	Объект.ДополнительныеРасходыРаспределилиВручную = ИСТИНА;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара, , , ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПолнаяПриИзменении(Элемент)
	
	Объект.ДополнительныеРасходыРаспределилиВручную = ИСТИНА;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара, , ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	Если РегистрироватьВидЦенПриПоступлении 
		И СтрокаТовара.ДополнительнаяЦена = 0 Тогда
		
		РассчитатьДополнительнуюЦенуДляСтрокиНаКлиенте(СтрокаТовара);
	КонецЕсли;
	
	Если РаспределятьДопРасходыВручную Тогда
		ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаДобавочнаяПриИзменении(Элемент)
	
	Объект.ДополнительныеРасходыРаспределилиВручную = ИСТИНА;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара, , , , ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПолнаяПриИзменении(Элемент)
	
	Объект.ДополнительныеРасходыРаспределилиВручную = ИСТИНА;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
	ПересчитатьДокументНаКлиенте();
	
	Если РегистрироватьВидЦенПриПоступлении Тогда
		РассчитатьДополнительнуюЦенуДляСтрокиНаКлиенте(СтрокаТовара);
	КонецЕсли;
	
	Если РаспределятьДопРасходыВручную Тогда
		ПересчитатьРаспределениеДополнительныхРасходов(СтрокаТовара);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УкажитеВидДокументаПриИзменении(Элемент)
	
	УкажитеВидДокументаПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УкажитеВидДокументаПриИзмененииНаСервере()
	
	Если УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение Тогда 		
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо");
		
	ИначеЕсли УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя Тогда
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
		
	Иначе
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.Валюта 		= Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

ТекСтр = Неопределено;
