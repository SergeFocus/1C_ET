//sza140115-1301 : 
//sza130902-0352 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода") ;
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
	ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	ИспользоватьУчетВалют 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ;
	УчетПоПоставщикам 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") ;
	УчетПоКлиентам 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;
	УчетЗаказовПоставщикам		= УчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
	УчетЗаказовКлиентов			= УчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
	ВестиУчетПоСкладу 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;
	ВестиУчетДвиженияДенег 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
	УчетПоСериям				= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
	
	СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями") ;
	СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями") ;
	СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями") ;
	СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями") ;
	СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями") ;
	ПоказыватьИзображения = СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
	ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену = ИспользоватьСложныйМеханизмЦен И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену");
	
	элементы.ТоварыВводСКоличеством.Видимость = не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством") ;
	
	основнаявалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	Если ИспользоватьСложныйМеханизмЦен Тогда
		элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = Ложь;
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 			  = Ложь;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен")) Тогда
			элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устанавливать цену закупки Ценой реализации товара (будут равные цены)");
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступенТолькоВозврат = ОбщийМодульСерверПривилегия.ЕстьПользователи() 
						и НЕ РольДоступна("РеализацияИПриемТовара") 
						и НЕ РольДоступна("ПолныеПрава"); //Только реализация - только возврат
						
	Элементы.Клиент.ВыбиратьТип = НЕ ДоступенТолькоВозврат;
	
	Если ДоступенТолькоВозврат Тогда
		Элементы.ВозвратОтПокупателя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (для возврата)");
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда 
		ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
		
		Дисплеи.ЗагрузитьЗначения(
		МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));
	Иначе
		фр = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
			Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта ) Тогда
			Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		если ИспользоватьСложныйМеханизмЦен 
			и НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Склад ) Тогда
			Объект.Склад = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
			КонецЕсли;
		КонецЕсли;
		
		Если не ДоступенТолькоВозврат
			и УчетПоПоставщикам 
			и НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик ) Тогда
			
			Объект.КлиентПоставщик = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");			
		КонецЕсли;		
		
		Элементы.ИтогоРасходов.Видимость 			= ложь;
		Элементы.ДополнительныеРасходы.Видимость 	= ложь;
		
		ВидЦенПриИзмененииНаСервере();
		
		Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
		элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
		
		ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах") ;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;		
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
			и не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			Объект.Сотрудник = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию") ;
		КонецЕсли;
		
	иначе
		если не объект.Проведен тогда
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			ОбновитьКурсСтрок();
			
			ПересчитатьСуммуПрочихРасходов();
			
		конецесли;
		
		элементы.Курс.Видимость = не объект.Курс = 1 и ИспользоватьУчетВалют;
		
		ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = Ложь;								
	КонецЕсли;
	
	Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") тогда
		
		если ЗначениеЗаполнено(объект.ВидЦен) Тогда
			элементы.ВидЦен.Доступность 	= ложь;	
		КонецЕсли;
		
		элементы.ТоварыЦена.Доступность 	= Ложь;
		элементы.ТоварыСумма.Доступность 	= Ложь;
	КонецЕсли;
	
	НаименованиеОсновнойВалюты = Справочники.Валюты.ОсновнаяВалюта.Наименование ;
	элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег и не ИспользоватьУчетВалют;
	элементы.Декорация1.Видимость 				  = ВестиУчетДвиженияДенег; 

	Если не УчетПоКлиентам 
		и не УчетПоПоставщикам Тогда
		
		элементы.УкажитеВидДокумента.Видимость = истина;
		
		Если ЗначениеЗаполнено(объект.КлиентПоставщик) Тогда
			Если ТипЗнч(объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
			иначе	
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение;
			КонецЕсли;
			
		иначе
			УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Оприходование;
		КонецЕсли;
		
		элементы.ВидДокумента.Видимость 	   = ложь;
		
	Иначе
		элементы.УкажитеВидДокумента.Видимость = ложь;
	КонецЕсли;   	
	                                                                         
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
	КлиентПриИзмененииНаСервере();	
	видимостьдополнительныхрасходов();
	
	СерииНоменклатурыВидны = УчетПоСериям И ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
	Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
	
	ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
	Элементы.ТоварыЗаказ.Видимость = УчетЗаказовПоставщикам и ЭтоРасчетысПоставщиком И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	Элементы.ТоварыЗаказПокупателя.Видимость = УчетЗаказовКлиентов и ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	Элементы.ВидЦенВалютаЦены.Видимость = ИспользоватьСложныйМеханизмЦен;
	
	Если ИспользоватьУчетВалют
		и ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВидЦенВалютаЦены = основнаявалюта;
	КонецЕсли;
	
	Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
	
КонецПроцедуры

&НаСервере
процедура видимостьдополнительныхрасходов()
	
	ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров") ;
	ЕстьДополнительныеРасходы = не ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
								и НЕ объект.ДополнительныеРасходы.Количество() = 0;
								
	элементы.ДобавитьДополнительныеРасходы.Видимость 	= не ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
														И НЕ ЕстьДополнительныеРасходы;
														
	элементы.ДополнительныеРасходы.Видимость 			= ЕстьДополнительныеРасходы;
	элементы.ИтогоРасходов.Видимость 					= ЕстьДополнительныеРасходы;
	элементы.ГруппаВыбыло.Видимость 					= ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода И НЕ ЕстьДополнительныеРасходы;
	элементы.основнаявалюта.Видимость 					= ЕстьДополнительныеРасходы;
	
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)  	
	ВзятьСуммуПоДокументуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	если ЕстьДополнительныеРасходы тогда
		
		если объект.ДополнительныеРасходы.Количество() = 0 тогда
			СтрокаДР = объект.ДополнительныеРасходы.Добавить();
		иначе
			СтрокаДР = объект.ДополнительныеРасходы[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидЦен)
			и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			СтрокаДР.Валюта = Объект.ВидЦен.ВалютаЦены;
		КонецЕсли;
		
		СтрокаДР.Сумма = Объект.Товары.Итог("Сумма");	
		
		ПересчитатьСуммуПрочихРасходов();
		
	иначе
		
		Если ЗначениеЗаполнено(Объект.ВидЦен)
			и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
		КонецЕсли;
		
		Объект.ВыбылоДенег = Объект.Товары.Итог("Сумма");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруПечатьЭтикетки(Команда)
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Форма = ПолучитьФорму("Обработка.ПечатьЭтикетки.Форма", ПараметрыФормы);
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервере1(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	
	напечатаноНоменклатуры = Форма.ОткрытьМодально();
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите,.. создание номенклатуры."));
	
	Если ТипЗнч(напечатаноНоменклатуры) = Тип("Структура") Тогда
		
		ШтрихКод 		= напечатаноНоменклатуры.ШтрихКод;
		Количество 		= напечатаноНоменклатуры.количество;
		Номенклатура 	= напечатаноНоменклатуры.номенклатура;
		серияНоменклатуры = напечатаноНоменклатуры.серияНоменклатуры;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
			СтруктураПараметров.Вставить("серияНоменклатуры", серияНоменклатуры);
			СтруктураПараметров.Вставить("Цена", напечатаноНоменклатуры.Цена);
			СтруктураПараметров.Вставить("Количество", напечатаноНоменклатуры.количество);
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров, истина);
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(СтруктураПараметров, ИзДиалогаСоздания = ложь, НеСтановитсяНаЭтуСтроку = Ложь, множительКоличества = 1)
	
	Номенклатура 		 = СтруктураПараметров.Номенклатура;
	СерияНоменклатуры 	 = СтруктураПараметров.СерияНоменклатуры;
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	
	если не ДокументЗаблокирован Тогда		
		
		если не ИзДиалогаСоздания
			или не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара") тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
			если ТоварВедетсяПоСериям тогда
				ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);	
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);	
			Если СтрокаТовара.Количество() = 0 Тогда  					
				СтрокаТовара = Объект.Товары.Добавить();	
				
				Если ТоварВедетсяПоСериям 
					И НЕ СерииНоменклатурыВидны Тогда
					
					СерииНоменклатурыВидны = Истина;		
					Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
				КонецЕсли;
				
			иначе
				СтрокаТовара = СтрокаТовара[0];
			КонецЕсли;                	
			
		иначе
			СтрокаТовара = Объект.Товары.Добавить();	
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
					
				СерииНоменклатурыВидны = Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
			КонецЕсли;
			
		КонецЕсли; 		
		
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Количество = СтрокаТовара.Количество + СтруктураПараметров.Количество * множительКоличества;
		если ТоварВедетсяПоСериям тогда
			
			если не СтруктураПараметров.серияНоменклатуры = неопределено Тогда				
				СтрокаТовара.Количество = 1;
				СтрокаТовара.серияНоменклатуры = СтруктураПараметров.серияНоменклатуры;	
			КонецЕсли;
			
		конецесли;
		
		если не ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену тогда
			ЦенаСтруктуры = 0;
			СтруктураПараметров.Свойство("Цена", ЦенаСтруктуры);
			если ЦенаСтруктуры = Неопределено 
				или ЦенаСтруктуры = 0 Тогда
				
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество);	
			Иначе
				СтрокаТовара.Цена = ЦенаСтруктуры;
			КонецЕсли;                              	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;	
		КонецЕсли;
		
	иначеЕсли НЕ НеСтановитсяНаЭтуСтроку Тогда //Встать на строку            		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не найдена");
		
		если УчетПоСериям
			И не СтруктураПараметров.серияНоменклатуры = неопределено Тогда
			
			ПараметрыОтбора.Вставить("серияНоменклатуры", СтруктураПараметров.серияНоменклатуры);
			Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия Номенклатуры не найдена");
		КонецЕсли;			
		
		СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НЕ СтрокаТовара.Количество() = 0 Тогда 
			
			СтрокаТовара = СтрокаТовара[0];
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле 	= "Товары";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНаСервере1(НовыйОбъект);
	
	НовыйОбъект.Количество = 1;
	НовыйОбъект.ЭтоДобавлениеИзДокумента = Истина;
	
КонецПроцедуры

&НаСервере
процедура ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		конецесли;
	конеццикла;
	
конецпроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, Количество = 1)
	
	Результат = неопределено;
	
	Состав = новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		иначе
			ДобавитьПозициюНоменклатуры(строкасостава, , Истина, Количество);
		конецесли;
		сч = сч + 1;
	конеццикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)		
	ПриИзмененииНоменклатуры();			
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(изколичества = ложь, СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		если НЕ изколичества
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		Если УчетПоСериям 
			И (НЕ СерииНоменклатурыВидны ИЛИ СтрокаТовара.Количество <> 1) Тогда

			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				СерииНоменклатурыВидны  = Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
				
			КонецЕсли;             	
		КонецЕсли;
		
		если не изколичества 
			и не ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество);	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество) ;
		КонецЕсли;	
		
		ПоказатьТовар();
		
	иначе
		СтрокаТовара.Цена 	= 0;
		СтрокаТовара.Сумма 	= 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОстатокТовараВСтроке(Номенклатура, Количество)
	
	если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	если не СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;

	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
	//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
	//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если НЕ ДокументЗаблокирован Тогда
		Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
		Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");	
	КонецЕсли;
	
	//	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" К ОПЛАТЕ:") + " " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("    СДАЧА:") + " " + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГО:") + " " + Формат(Объект.ТовараНаСумму, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"ClearText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"DisplayText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При использовании дисплея покупателя произошла ошибка:") + " " + ВыходныеПараметры[1]; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Номенклатура, Количество = 0)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, объект.ВидЦен, Объект.КлиентПоставщик);
	иначе
		процентскидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		и ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если не ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену
		И Цена = 0 Тогда
		
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, Ложь, Количество, Объект.Договор, , , Объект.Ссылка);
	КонецЕсли;
	
	если не ПроцентСкидки = 0 
		и не Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	иначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	иначе
		Возврат Номенклатура.Цена;	
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Номенклатура)
	
	ОпределитьЦенуПоследнейПродажи = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Количество,
	|	Продажи.Сумма
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Клиент = &Клиент
	|	И Продажи.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продажи.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Объект.КлиентПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = ВыборкаДетальныеЗаписи.Количество;
			Если Количество = 0 Тогда
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		КонецЦикла;                            	
	КонецЕсли;
	
	Возврат ОпределитьЦенуПоследнейПродажи;
	
КонецФункции //ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	конецесли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод)
	
	Результат = Истина;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина);
	
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		
		СтруктураПараметров = Новый Структура("Номенклатура, Цена, Количество");
		СтруктураПараметров.Вставить("Номенклатура", РезультатОбработки.Номенклатура);
		СтруктураПараметров.Вставить("СерияНоменклатуры", РезультатОбработки.СерияНоменклатуры);
		СтруктураПараметров.Вставить("Количество", ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(РезультатОбработки.Номенклатура));
		СтруктураПараметров.Вставить("Цена", 0);
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		СтрокаДисплеяПокупателя = РезультатОбработки;
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") тогда
		РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
		если ЗначениеЗаполнено(РезультатОбработки) Тогда
			объект.Сотрудник = РезультатОбработки;
		иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар или сотрудник по Штрих-Коду не найден (") + ТекКод + ").");
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден (") + ТекКод + ").");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура КлиентПриИзмененииНаСервере()
	
	ЗначениеЗаполненоОбъектКлиент = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	//Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Доступность = не ЗначениеЗаполненоОбъектКлиент;
	
	Если ЗначениеЗаполнено(ЗначениеЗаполненоОбъектКлиент) Тогда
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = Истина;	
	Иначе
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполненоОбъектКлиент тогда
		
		Если ИспользоватьУчетВалют
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			Объект.Курс   = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;
		
		Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			Элементы.Заказ.Видимость = ложь;
			ЭтоРасчетысПоставщиком   = Ложь;
			Элементы.клиент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (при возврате от покупателя)");
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена с уч. скидки");	
				элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма с уч. скидки");	
			иначе
				элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена");	
				элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");		
			КонецЕсли;
			элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = Ложь;
			
		Иначе
			ЭтоРасчетысПоставщиком = Истина;
			Элементы.Заказ.Видимость 	   = УчетЗаказовПоставщикам;
			Элементы.Клиент.Заголовок 	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик");
			элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена прих.");	
			элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
			
		КонецЕсли;
		
		если не ЗначениеЗаполнено(объект.Склад)
			и ЗначениеЗаполнено(объект.КлиентПоставщик.Склад) Тогда
			
			объект.Склад = объект.КлиентПоставщик.Склад;		
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			И НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ не объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
			ДоговорПриИзмененииНаСервере();
		КонецЕсли;	
		
	иначе
		элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена закупки");
		Элементы.Заказ.Видимость 	   = ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) ТОгда
		ПересчитатьНасильно = Ложь;
		
		//сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			и СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = Истина;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			и НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = Истина;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
				СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЦикла;
		КонецЕсли;  
		
		Возврат Истина;
		
	Иначе //не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ложь;
			
		ИначеЕсли НЕ УчетПоКлиентам       			
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КлиентПриИзменении(Элемент) 	
	
	ПриСменеКонтрагента();        	
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()	
	
	ПроверитьСменуТипа();
	КлиентПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	если ЕстьДополнительныеРасходы тогда
		Если объект.ДополнительныеРасходы.Количество() = 0 Тогда
			объектВыбылоДенег = 0;
		иначе
			объектВыбылоДенег = объект.ДополнительныеРасходы[0].сумма;
		КонецЕсли;
		
	иначе
		объектВыбылоДенег = объект.ВыбылоДенег;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		Если ДоступенТолькоВозврат
			или ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда			
			
			Элементы.ПартияПриобретения.Видимость = Ложь;
			
			Если объектВыбылоДенег = 0 
				и не текущивиддокумента = 1 Тогда
				
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар назад и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Клиента");
				текущивиддокумента = 1;
				
			иначеесли не текущивиддокумента = 2 тогда
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар, отдать деньги и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат товара от Клиента");
				текущивиддокумента = 2;
				
			КонецЕсли;
			
		иначе
			Элементы.ПартияПриобретения.Видимость = Истина;
			
			Если объектВыбылоДенег = 0 
				и не текущивиддокумента = 3 тогда
				
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Поставщика");	
				текущивиддокумента = 3;
				
			иначеесли не текущивиддокумента = 4 тогда
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Купить товар и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение товара");	
				текущивиддокумента = 4;
				
			КонецЕсли;
		КонецЕсли;
		
		элементы.ГруппаДолгКлиента.Видимость = Истина;
		
	иначе
		Элементы.ПартияПриобретения.Видимость = Истина;
		элементы.ГруппаДолгКлиента.Видимость = ложь;
		
		Если объектВыбылоДенег = 0 
			и не текущивиддокумента = 5 Тогда
			
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать товар и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход товара");	
				текущивиддокумента = 5;
				
			иначеесли не текущивиддокумента = 6 тогда
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать, отдать деньги и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление товара");	
				текущивиддокумента = 6;
				
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, Объект.Валюта, , Объект.Дата);
	
	Видимость = не ТекущийДолг = 0 
				и ЗначениеЗаполнено(объект.КлиентПоставщик) 
				и (УчетПоКлиентам или УчетПоПоставщикам);
				
	элементы.ТекущийДолг.Видимость = Видимость;
	
	если видимость тогда
		Элементы.ТекущийДолг.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий долг (") + формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";	
	КонецЕсли;
	
	элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость = Видимость;
	
КонецПроцедуры //ПоказатьДолгКлиентаПоставщика	

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)
	
	ВзятьСуммуСУчетомДолгаКлиентанаСервере(истина);
		
КонецПроцедуры

Процедура ВзятьСуммуСУчетомДолгаКлиентанаСервере(иСуммуДолга = ложь)
	
	Если ЗначениеЗаполнено(объект.ВидЦен)
		и ЗначениеЗаполнено(объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаЦены = объект.ВидЦен.ВалютаЦены;
	иначе
		ВалютаЦены = основнаявалюта;
	КонецЕсли;
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	
	если ЕстьДополнительныеРасходы тогда
		если иСуммуДолга тогда
			
			Строкарасходов 			= объект.ДополнительныеРасходы.Добавить();
			Строкарасходов.сумма 	= -ТекущийДолг;
			Строкарасходов.валюта 	= объект.Валюта;
			Строкарасходов.курс 	= объект.Курс;
			Строкарасходов.НеРаспределятьНаСтоимость = истина;
			
			Если ТекущийДолг > 0 Тогда
				Строкарасходов.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата долга");
			иначе
				Строкарасходов.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат долга");
			КонецЕсли;
			
			Если типзнч(объект.КлиентПоставщик) = тип("СправочникСсылка.Клиенты") Тогда
				Строкарасходов.статья 	= Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				Строкарасходов.остроке 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторно") + " " + Строкарасходов.остроке ;
			иначе
				Строкарасходов.статья 	= Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров;
			КонецЕсли;       				
			
			ПересчитатьСуммуПрочихРасходов();
			
		КонецЕсли;
		
	иначе
		
		Если ЗначениеЗаполнено(объект.КлиентПоставщик)
			и ЗначениеЗаполнено(объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = объект.КлиентПоставщик.ОсновнаяВалюта;
		иначе
			Объект.Валюта = ОсновнаяВалюта;
			Объект.курс = 1;
			
		КонецЕсли;
		
		ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(объект.Товары.итог("Сумма"), объект.Валюта, валютацены, объект.Дата);
		
		Если иСуммуДолга Тогда
			объект.ВыбылоДенег = ВыбылоДенег - ТекущийДолг;
			
		иначе
			объект.ВыбылоДенег = ВыбылоДенег;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();  
	иначе
		ПоказатьДолгКлиентаПоставщика();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ОбработатьБлокировку(ПриСозданииФормы = ложь)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда
		
		Элементы.ТоварыВводШтрихКода.Доступность 			= Ложь;
		Элементы.ВзятьСуммуПоДокументу.Доступность 			= Ложь;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Ложь;
		Элементы.ТоварыСоздатьПринятьСерии.Доступность 		= Ложь;
		Элементы.ТоварыВводСКоличеством.Доступность 		= Ложь;
		Элементы.ДобавитьДополнительныеРасходы.Доступность 	= Ложь;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Доступность = Ложь;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Доступность 	= Ложь;		
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Доступность 			= Истина;
		Элементы.ВзятьСуммуПоДокументу.Доступность 			= Истина;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Истина;
		Элементы.ТоварыСоздатьПринятьСерии.Доступность 		= Истина;		
		Элементы.ТоварыВводСКоличеством.Доступность 		= Истина;
		Элементы.ДобавитьДополнительныеРасходы.Доступность 	= истина;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Доступность 	= Истина;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Доступность = Истина;
		
	КонецЕсли;               		
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ ЗначениеЗаполнено(объект.Валюта) Тогда		
			Объект.Валюта = ВидЦенВалютаЦены;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") ТОгда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
								и ИспользоватьУчетВалют;
								
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
								и ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Валюта, Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
								и ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		и ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ВестиУчетПоСкладу
		и ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры();
		элементы.Товары.ЗакончитьРедактированиеСтроки(лОЖЬ);
		Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", Истина);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", Ложь);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УкажитеВидДокументаПриИзменении(Элемент)
	
	УкажитеВидДокументаПриИзмененииНаСервере();
	ИзменитьВидДокумента() ;
	
КонецПроцедуры

&НаСервере
Процедура УкажитеВидДокументаПриИзмененииНаСервере()
	
	Если УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение Тогда 		
		объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
		
	ИначеЕсли УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя Тогда
		объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
		
	Иначе
		объект.КлиентПоставщик = Справочники.Клиенты.ПустаяСсылка() ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если не отказ
		и ЕстьДополнительныеРасходы Тогда
		
		ПересчитатьСуммуПрочихРасходов();
		
		объект.ВыбылоДенег 	= ИтогоРасходов;
		объект.курс 		= 1;
		объект.Валюта 		= основнаявалюта;
		
	КонецЕсли;
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	конецесли;
	
	Если НЕ Отказ
		и объект.Товары.Количество() > 10 Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	если не отказ тогда
		
		МассивСерий = Новый Массив;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура ДополнительныеРасходы(Команда)
	
	ДополнительныеРасходыНаСервере();
	видимостьдополнительныхрасходов();
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеРасходыНаСервере()
	
	Если объект.ДополнительныеРасходы.Количество() = 0 Тогда
		
		НовыйРасход 		= объект.ДополнительныеРасходы.Добавить();
		НовыйРасход.Валюта 	= объект.валюта;
		НовыйРасход.сумма 	= объект.ВыбылоДенег;
		НовыйРасход.курс	= объект.Курс;
		НовыйРасход.статья 	= Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров;
		НовыйРасход.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За товар");
		НовыйРасход.НеРаспределятьНаСтоимость = истина;    
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	видимостьдополнительныхрасходов();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1СуммаПриИзменении(Элемент)
	ПересчитатьСуммуПрочихРасходов();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1ВалютаПриИзменении(Элемент)
	
	строка = элементы.ДополнительныеРасходы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(строка.валюта) тогда
		строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, объект.Дата);
	КонецЕсли;	
	
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаСервере
процедура ОбновитьКурсСтрок()
	
	для каждого строка из объект.ДополнительныеРасходы цикл
		Если ЗначениеЗаполнено(строка.валюта) тогда
			строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
процедура ПересчитатьСуммуПрочихРасходов()
	
	ИтогоРасходов = 0;
	
	Для каждого СтрокаРасхода из объект.ДополнительныеРасходы цикл
		
		если СтрокаРасхода.курс = 0 Тогда
			СтрокаРасхода.курс = 1;	
		КонецЕсли;
		
		ИтогоРасходов = ИтогоРасходов + СтрокаРасхода.сумма * ?(СтрокаРасхода.курс = 0, 1, СтрокаРасхода.курс);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1КурсПриИзменении(Элемент)
	
	ТекущиеДанные = элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущиеДанные.валюта = основнаявалюта Тогда
		ТекущиеДанные.курс = 1;
	КонецЕсли;
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьУчетВалют Тогда
		Если ЕстьДополнительныеРасходы Тогда
			ОбновитьКурсСтрок();
			ПересчитатьСуммуПрочихРасходов();
			
		иначе
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			
			элементы.Курс.Видимость = не Объект.Курс = 1	
			и ИспользоватьУчетВалют;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество) ;	
	КонецЦикла;
	
КонецПроцедуры //ПереСчитатьУчетныеОстатки

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.разблокироватьсканер.видимость = СканерЗаблокирован;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) тогда
		если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если не объект.Договор.Организация = Объект.Организация Тогда		
					объект.Договор = Справочники.Договора.ПустаяСсылка() ;	
					ДоговорПриИзмененииНаСервере();
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.видц );
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВестиУчетПоСкладу
			и не ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		если не Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, Строкатовара.Цена, Объект.Ссылка);
				СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;				
		
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Если не ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, , , Строкатовара.Цена, Объект.Ссылка);
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если не отказ
		И ЗначениеЗаполнено(объект.КлиентПоставщик)
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС") Тогда
		
		Если не ЗначениеЗаполнено(Объект.Договор) тогда
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
				
				ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
				
				Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
					или ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
					
					Отказ = Истина;
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
					Сообщение.Поле  = "Договор";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Объект.Договор.ПредусматриваетСтрогиеЦены тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, Истина, Строкатовара.Цена, Объект.Ссылка);
				Если НЕ Строкатовара.Цена = Цена тогда
					
					Отказ = Истина;
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не соответствует строгой цене из договора: " + Цена);
					Сообщение.УстановитьДанные(Объект);					
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если не отказ
		И не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
		Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			Объект.ХранилищеДенег = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте ;
		КонецЕсли;
	КонецЕсли;
	
	Если не отказ 
		и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	если не отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь; 	
	
	//Ссылка = Объект.Ссылка;
	//Валюта = Объект.Валюта;
	//Дата   = Объект.Дата;
	//видцен = Объект.ВидЦен;
	//ВыбылоДенег    = объект.ВыбылоДенег;
	//ДополнительныеРасходы = Объект.ДополнительныеРасходы;
	//ХранилищеДенег = объект.ХранилищеДенег;
	//ЭтоЗаказ = Объект.ЭтоЗаказ;
	//Товары = Объект.Товары;
	//Договор = Объект.Договор;
	//КлиентПоставщик = Объект.КлиентПоставщик;
	//ТовараНаСумму = Объект.ТовараНаСумму;
	//ТовараВКоличестве = Объект.ТовараВКоличестве;	
	//Склад = Объект.Склад;
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
	ВестиУчетДвиженияДенег 			 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
		и ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Объект.Договор, Объект.Клиент, Объект.Дата, Объект.ТовараНаСумму, Объект.ТовараВКоличестве, Истина, Объект.ВыбылоДенег, Объект.Ссылка);
	КонецЕсли;
	
	Если Не Отказ ТОгда   				
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
			и НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Объект.Ссылка);						
			Отказ = Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из Объект.Товары Цикл
			
			Номенклатура      = ТекСтрокаТовары.Номенклатура;
			СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			
			Если НЕ Отказ
				И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				
				Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Объект.Дата - 1);
				Если Отказ Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	//заказ/не заказ
	
	Если не отказ
		и ВестиУчетДвиженияДенег Тогда		
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;
		КонецЕсли;			
		
		если Объект.ЭтоЗаказ 
			ИЛИ Объект.ДополнительныеРасходы.Количество() = 0 тогда
			
			если НЕ Объект.ВыбылоДенег = 0 тогда		
				
				СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Объект.ВыбылоДенег, Объект.Дата, ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, Истина, Объект.Ссылка);
				Отказ  = СтруктураПополнения.Отказ;	
			КонецЕсли;
		иначе
			
			СуммаДенег = 0;
			для каждого СтрокаРасхода из Объект.ДополнительныеРасходы цикл
				СуммаДенег = СуммаДенег + СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
			КонецЦикла;
			
			Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Объект.Дата, ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, , Объект.Ссылка);
			
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Номенклатура", )
	ФормаДобавленияСерий = ПолучитьФорму("Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии");//, ПараметрыФормы);
	СтруктураОтвета = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета)
	
	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	
	Для Каждого Серия Из СтруктураОтвета.МассивСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки, , Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;	
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	ЗаказПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	ПоказатьТовар();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если Не СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) ТОгда
				Если не Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;			                     	
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			элементы.СсылкаНаИзображение.Видимость     = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость  = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция   ПоказатьИзображениеРеквизита(ЭлементСИзображением)
			
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			элементы.СсылкаНаИзображение.Видимость    = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость = Истина;
			
			если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			конецесли; 
			
		иначе
			элементы.СсылкаНаИзображение.Видимость    = Истина;
			элементы.ИзображениеВБазеДанных.Видимость = Ложь;
		КонецЕсли; 		
		
		Результат = Истина;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	если не ПоказыватьИзображения Тогда
		элементы.СсылкаНаИзображение.Видимость     = Ложь;
		элементы.ИзображениеВБазеДанных.Видимость  = Ложь;	
		элементы.СсылкаНаИзображение1.Видимость    = Ложь;
		элементы.ИзображениеВБазеДанных1.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаПечатьБезСерий(Команда)
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьБезСерий(ФормаПечати.Результат, Объект.Ссылка);

	ФормаПечати.Результат.ОтображатьСетку = Ложь;
	ФормаПечати.Результат.Защита 		  = Истина;
	ФормаПечати.Результат.ТолькоПросмотр  = Истина;
	ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Поступление товара");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаСервере
Процедура ПечатьБезСерий(ТабДок, ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Поступление без серий. "), 2);
	Документы.ПоступленияТовара.ПечатьБезСерий(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", Истина);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для каждого Подбор Из ВыбранноеЗначение Цикл
			
		Строка = Объект.Товары.Добавить();
		Строка.номенклатура      = Подбор.номенклатура;
		Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
		Строка.Количество        = Подбор.Количество;
		Строка.Цена 			 = Подбор.Цена;
		Строка.Сумма 			 = Подбор.Сумма;
		
		ПриИзмененииНоменклатуры(, Строка);
		
	КонецЦикла;	
			   КонецЕсли;
	
КонецПроцедуры   
