//sza150111-0238 НЧ
//sza141203-0309 допрасх
//sza141117-2253 НеРегистрироватьЦеныЗаСчетЭтогоДокумента
//sza141117-0210 доквозр
//sza140827-0046 : СтрокаТовара.Цена
//sza140710-0107  
//sza140709-1723  
//sza140624-1310  
//sza130902-0352 : 

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = не Объект.Курс = 1	
	И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(Знач ШтрихКод, Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураДляВВода.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)  	
	ВзятьСуммуПоДокументуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаПоступления = Объект.ВидЦен.ВалютаЦены;
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		ВалютаПоступления = Объект.Валюта;
		ВалютаЦены = ОсновнаяВалюта; //осн
	Иначе
		ВалютаПоступления = ОсновнаяВалюта;
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	Если ЕстьДополнительныеРасходы Тогда
		
		Если Объект.ДополнительныеРасходы.Количество() = 0 Тогда
			СтрокаДР = Объект.ДополнительныеРасходы.Добавить();
		Иначе
			СтрокаДР = Объект.ДополнительныеРасходы[0];
		КонецЕсли;
		
		СтрокаДР.Валюта = ВалютаПоступления;
		СтрокаДР.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаПоступления, ОБъект.Дата, ЛОЖЬ);
		СтрокаДР.Сумма  = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ВалютаПоступления, ВалютаЦены, ОБъект.Дата, СтрокаДР.Курс);
		
		ПересчитатьСуммуПрочихРасходов();
		
	Иначе		
		Объект.Валюта = ВалютаПоступления;
		Объект.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаПоступления, ОБъект.Дата, ЛОЖЬ);
		Объект.ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ВалютаПоступления, ВалютаЦены, ОБъект.Дата, Объект.Курс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)
	
	ВзятьСуммуСУчетомДолгаКлиентанаСервере(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуСУчетомДолгаКлиентаНаСервере(Знач иСуммуДолга = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	
	Если ЕстьДополнительныеРасходы Тогда
		Если иСуммуДолга Тогда
			
			Строкарасходов 		  = Объект.ДополнительныеРасходы.Добавить();
			Строкарасходов.сумма  = -ТекущийДолг;
			Строкарасходов.валюта = Объект.Валюта;
			Строкарасходов.курс   = Объект.Курс;
			Строкарасходов.НеРаспределятьНаСтоимость = ИСТИНА;
			
			Если ТекущийДолг > 0 Тогда
				Строкарасходов.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата долга");
			Иначе
				Строкарасходов.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат долга");
			КонецЕсли;
			
			Если типзнч(Объект.КлиентПоставщик) = тип("СправочникСсылка.Клиенты") Тогда
				Строкарасходов.статья  = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				Строкарасходов.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторно") + " " + Строкарасходов.остроке;
			Иначе
				Строкарасходов.статья  = Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров;
			КонецЕсли;       				
			
			ПересчитатьСуммуПрочихРасходов();			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
		Иначе
			Объект.Валюта = ОсновнаяВалюта;
			Объект.курс   = 1;			
		КонецЕсли;
		
		ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.итог("Сумма"), Объект.Валюта, ВалютаЦены, Объект.Дата);
		
		Если иСуммуДолга Тогда
			Объект.ВыбылоДенег = ВыбылоДенег - ТекущийДолг;			
		Иначе
			Объект.ВыбылоДенег = ВыбылоДенег;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДополнительныхРасходов()
	
	ЕстьДополнительныеРасходы 						 = НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров И НЕ Объект.ДополнительныеРасходы.Количество() = 0;	
	Элементы.ДобавитьДополнительныеРасходы.Видимость = НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров И НЕ ЕстьДополнительныеРасходы;	
	Элементы.ДополнительныеРасходы.Видимость 		 = ЕстьДополнительныеРасходы;
	Элементы.ИтогоРасходов.Видимость 				 = ЕстьДополнительныеРасходы;
	Элементы.ГруппаВыбыло.Видимость 				 = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ ЕстьДополнительныеРасходы;
	Элементы.ОсновнаяВалюта.Видимость 				 = ЕстьДополнительныеРасходы;
	
	ОбновитьВидимостьРаспределенияДопРасходов();	
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач ПриНачальнойЗагрузке = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда		
			Объект.Валюта = ВидЦенВалютаЦены;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПриНачальнойЗагрузке
		И ЗначениеЗаполнено(Объект.ВидЦен) 
		И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" К ОПЛАТЕ") + ": " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		"    " + Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СДАЧА") + ": " + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГО") + ": " + Формат(Объект.ТовараНаСумму, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"ClearText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"DisplayText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При использовании дисплея покупателя Произошла ошибка") + ": " + ВыходныеПараметры[1]; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
		Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;

	Если ИспользоватьУчетВалют Тогда
		Если ЕстьДополнительныеРасходы Тогда
			ОбновитьКурсСтрок();
			ПересчитатьСуммуПрочихРасходов();
			
		Иначе
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);			
			Элементы.Курс.Видимость = не Объект.Курс = 1 И ИспользоватьУчетВалют;			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.ЕдиницаИзмерения	= СтрокаНабора.ЕдиницаИзмерения;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ПоступленияТовара"));
	ЭтотОбъект.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект,Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета)
	
	СтруктураДобавки = Новый Структура;
	СтруктураДобавки.Вставить("Номенклатура", СтруктураОтвета.Номенклатура);
	СтруктураДобавки.Вставить("Количество", 1);
	СтруктураДобавки.Вставить("СерияНоменклатуры");
	СтруктураДобавки.Вставить("ЕдиницаИзмерения");
	
	Для Каждого Серия Из СтруктураОтвета.МассивНовыхСерий Цикл
		СтруктураДобавки.СерияНоменклатуры = Серия;
		ДобавитьПозициюНоменклатуры(СтруктураДобавки, , ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(СтруктураПараметров, Знач ИзДиалогаСоздания = ЛОЖЬ, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач МножительКоличества = 1)
	
	Номенклатура 		 = СтруктураПараметров.Номенклатура;
	СерияНоменклатуры 	 = СтруктураПараметров.СерияНоменклатуры;
	ЕдиницаИзмерения 	 = СтруктураПараметров.ЕдиницаИзмерения;
	
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) И ЗначениеЗаполнено(СерияНоменклатуры);
	
	Если НЕ ДокументЗаблокирован Тогда		
		
		Если НЕ ИзДиалогаСоздания
			ИЛИ не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара") Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
			Если ТоварВедетсяПоСериям тогда
				ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);	
			КонецЕсли;
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);	
			Если СтрокаТовара.Количество() = 0 Тогда  					
				
				СтрокаТовара = Объект.Товары.Добавить();	
				СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
				Если ТоварВедетсяПоСериям 
					И НЕ СерииНоменклатурыВидны Тогда
					
					СерииНоменклатурыВидны = ИСТИНА;		
					Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
				КонецЕсли;
				
			Иначе
				СтрокаТовара = СтрокаТовара[0];
			КонецЕсли;                	
			
		Иначе
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;
			
		КонецЕсли; 		
		
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Количество = СтрокаТовара.Количество + СтруктураПараметров.Количество * множительКоличества;
		
		Если ТоварВедетсяПоСериям тогда			
			СтрокаТовара.Количество = 1;
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;				
		КонецЕсли;
		
		Если СтрокаТовара.Цена = 0 
			И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену тогда
			
			ЦенаСтруктуры = 0;
			СтруктураПараметров.Свойство("Цена", ЦенаСтруктуры);
			Если ЦенаСтруктуры = Неопределено 
				ИЛИ ЦенаСтруктуры = 0 Тогда
				
				СтрокаТовара.Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
				Если СтрокаТовара.Цена = 0 Тогда
					СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);	
				КонецЕсли;
			Иначе
				СтрокаТовара.Цена = ЦенаСтруктуры;
			КонецЕсли;                              	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;	
		КонецЕсли;
		
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку Тогда //Встать на строку            		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не найдена");
		
		Если УчетПоСериям
			И НЕ СтруктураПараметров.серияНоменклатуры = Неопределено Тогда
			
			ПараметрыОтбора.Вставить("серияНоменклатуры", СтруктураПараметров.серияНоменклатуры);
			Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия Номенклатуры не найдена");
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("с единицей") + ": " + ЕдиницаИзмерения;
		КонецЕсли;
		
		СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НЕ СтрокаТовара.Количество() = 0 Тогда 
			
			СтрокаТовара = СтрокаТовара[0];
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле 	= "Товары";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	Состав.Колонки.Добавить("ЕдиницаИзмерения");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", СтрокаСостава.номенклатура);
			Результат.Вставить("ЕдиницаИзмерения", СтрокаСостава.ЕдиницаИзмерения);
			Результат.Вставить("Количество", СтрокаСостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(СтрокаСостава, , ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
	ВидимостьИсходнойРеализации();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;				
		
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Если НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, , , Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы(Команда)
	
	ДополнительныеРасходыНаСервере();
	видимостьдополнительныхрасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1ВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.валюта) Тогда
		
		ТекущаяСтрока.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.валюта, Объект.Дата);
		
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчитатьСуммуПрочихРасходов();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1КурсПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущиеДанные.валюта = ОсновнаяВалюта Тогда
		ТекущиеДанные.курс = 1;
	КонецЕсли;
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходы1СуммаПриИзменении(Элемент)
	ПересчитатьСуммуПрочихРасходов();
КонецПроцедуры

&НаСервере
Процедура ДополнительныеРасходыНаСервере()
	
	Если НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
		И Объект.ДополнительныеРасходы.Количество() = 0 Тогда
		
		НовыйРасход 		= Объект.ДополнительныеРасходы.Добавить();
		НовыйРасход.Валюта 	= Объект.Валюта;
		НовыйРасход.сумма 	= Объект.ВыбылоДенег;
		НовыйРасход.ХранилищеДенег = Объект.ХранилищеДенег;
		
		Если НЕ ЗначениеЗаполнено(НовыйРасход.ХранилищеДенег)
			ИЛИ НЕ НовыйРасход.ХранилищеДенег.Валюта = Объект.Валюта Тогда
			
			Если ЗначениеЗаполнено(Объект.Склад)
				И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
				
				НовыйРасход.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НовыйРасход.ХранилищеДенег)
				ИЛИ НЕ НовыйРасход.ХранилищеДенег.Валюта = Объект.Валюта Тогда
				
				НовыйРасход.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				Если НЕ ЗначениеЗаполнено(НовыйРасход.ХранилищеДенег) Тогда
					НовыйРасход.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;		
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовыйРасход.ХранилищеДенег)
				И НЕ НовыйРасход.ХранилищеДенег.Валюта = Объект.Валюта Тогда
				
				НовыйРасход.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;		
		
		НовыйРасход.курс	= Объект.Курс;
		НовыйРасход.статья 	= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
		НовыйРасход.остроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За товар");
		НовыйРасход.НеРаспределятьНаСтоимость = ИСТИНА;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	видимостьдополнительныхрасходов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	ЗаказПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаказПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНаСервере1(НовыйОбъект);
	
	НовыйОбъект.Количество = 1;
	НовыйОбъект.ЭтоДобавлениеИзДокумента = ИСТИНА;
	
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") И Объект.ПередачаДляКомиссионнойТорговли;
	
	Если ЕстьДополнительныеРасходы тогда
		Если Объект.ДополнительныеРасходы.Количество() = 0 Тогда
			объектВыбылоДенег = 0;
		Иначе
			объектВыбылоДенег = Объект.ДополнительныеРасходы[0].сумма;
		КонецЕсли;
		
	Иначе
		объектВыбылоДенег = Объект.ВыбылоДенег;	
	КонецЕсли;
	
	ЭтоКлиент = ЛОЖЬ;
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		ЭтоКлиент = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		Элементы.ПередачаДляКомиссионнойТорговли.Видимость = ЭтоКлиент;
		
		Если ДоступенТолькоВозврат
			ИЛИ ЭтоКлиент Тогда
			
			Элементы.ПартияПриобретения.Видимость = ЛОЖЬ;
			
			Если объектВыбылоДенег = 0 Тогда
				Если УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли Тогда
					Если НЕ текущивиддокумента = 11 Тогда						
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять непроданный товар назад и закрыть");
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Комиссионера");
						текущивиддокумента = 11;	
					КонецЕсли;	
				Иначе				
					Если НЕ текущивиддокумента = 1 Тогда						
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар назад и закрыть");
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Клиента");
						текущивиддокумента = 1;	
					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				Если УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли Тогда
					Если НЕ текущивиддокумента = 12 тогда
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять непроданный товар, отдать деньги и закрыть");
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат товара от Комиссионера");
						текущивиддокумента = 12;						
					КонецЕсли;	
				Иначе
					Если НЕ текущивиддокумента = 2 тогда
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар, отдать деньги и закрыть");
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат товара от Клиента");
						текущивиддокумента = 2;						
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Элементы.ПартияПриобретения.Видимость = ИСТИНА;
			
			Если объектВыбылоДенег = 0 Тогда
				Если НЕ текущивиддокумента = 3 тогда
					
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять товар и закрыть");
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прием товара от Поставщика");	
					текущивиддокумента = 3;	
				КонецЕсли;
				
			Иначеесли не текущивиддокумента = 4 тогда
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Купить товар и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение товара");	
				текущивиддокумента = 4;
				
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаДолгКлиента.Видимость = ИСТИНА;
		
	Иначе
		Элементы.ПартияПриобретения.Видимость = ИСТИНА;
		Элементы.ГруппаДолгКлиента.Видимость  = ЛОЖЬ;
		
		Если объектВыбылоДенег = 0 Тогда
			Если УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли Тогда
				Если НЕ текущивиддокумента = 15 Тогда
					
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать непроданный товар и закрыть");
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление непроданного товара");	
					текущивиддокумента = 15;	
				КонецЕсли;	
			Иначе
				Если НЕ текущивиддокумента = 5 Тогда
					
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать товар и закрыть");
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление  товара");	
					текущивиддокумента = 5;	
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			Если УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли Тогда
				Если НЕ текущивиддокумента = 16 тогда
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать непроданный товар, отдать деньги и закрыть");
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление непроданного товара");	
					текущивиддокумента = 16;
					
				КонецЕсли;		
			Иначе
				Если НЕ текущивиддокумента = 6 тогда
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оприходовать, отдать деньги и закрыть");
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление товара");	
					текущивиддокумента = 6;
					
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НеРегистрироватьЦеныЗаСчетЭтогоДокумента.Видимость = НЕ ЭтоКлиент И ИспользоватьСложныйМеханизмЦен И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеРегистрироватьЦеныЗаСчетДокументовПоступления");
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент) 	
	
	ПриСменеКонтрагента();        	
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
	ВидимостьИсходнойРеализации();
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере(Знач НеМенятьПараметрыОбъекта = ЛОЖЬ)
	
	ЗначениеЗаполненоОбъектКлиент = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	//Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Доступность = не ЗначениеЗаполненоОбъектКлиент;
	
	Если НЕ НеМенятьПараметрыОбъекта
		И ЗначениеЗаполнено(ЗначениеЗаполненоОбъектКлиент) Тогда
		
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ИСТИНА;	
	ИначеЕсли не НеМенятьПараметрыОбъекта Тогда
		Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара = ЛОЖЬ;
	КонецЕсли;
	
	Если ЗначениеЗаполненоОбъектКлиент тогда
		
		Если НЕ НеМенятьПараметрыОбъекта Тогда
			Если ИспользоватьУчетВалют
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
				Объект.Курс   = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда			
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад)
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.Склад) Тогда
				
				Объект.Склад = Объект.КлиентПоставщик.Склад;		
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И НЕ ЗначениеЗаполнено(Объект.Договор) 
				ИЛИ не Объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
		КонецЕсли;
		
		Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			Элементы.Заказ.Видимость = ЛОЖЬ;
			ЭтоРасчетысПоставщиком   = ЛОЖЬ;
			Элементы.клиент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (при возврате от покупателя)");
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена с уч. скидки");	
				Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма с уч. скидки");	
			Иначе
				Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена");	
				Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");		
			КонецЕсли;
			Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ЛОЖЬ;
			
		Иначе
			ЭтоРасчетысПоставщиком = ИСТИНА;
			Элементы.Заказ.Видимость 	   = УчетЗаказовПоставщикам;
			Элементы.Клиент.Заголовок 	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик");
			Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена прих.");	
			Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.КлиентПоставщик.СпособДоставки;
		КонецЕсли;
		
	Иначе
		Элементы.ТоварыСумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		Элементы.ТоварыЦена.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена закупки");
		Элементы.Заказ.Видимость 	   = ЛОЖЬ;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = не Объект.Курс = 1	
	И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаПечатьБезСерий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьБезСерий(ФормаПечати.Результат, Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
	ФормаПечати.Результат.Защита 		  = ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Поступление товара");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.Дата + Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.Дата + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Знач Валюта, Знач Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ОбновитьКурсСтрок()
	
	Для Каждого строка из Объект.ДополнительныеРасходы цикл
		Если ЗначениеЗаполнено(строка.валюта) Тогда
			строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, Объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001702") Тогда
		
		Элементы.ТоварыВводШтрихКода.Видимость 				= ЛОЖЬ;
		Элементы.ВзятьСуммуПоДокументу.Видимость 			= ЛОЖЬ;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 		= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость 			= ЛОЖЬ;
		Элементы.ДобавитьДополнительныеРасходы.Видимость 	= ЛОЖЬ;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = ЛОЖЬ;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Видимость   = ЛОЖЬ;		
		Элементы.ТоварыПересчетПоКоэффициенту.Видимость 	= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость 		= ЛОЖЬ;
		Элементы.ДополнительныеРасходыДобавить.Видимость 	= ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Видимость 				= ИСТИНА;
		Элементы.ВзятьСуммуПоДокументу.Видимость 			= ИСТИНА;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость 	= ИСТИНА;
		Элементы.ТоварыСоздатьПринятьСерии.Видимость 		= ИСТИНА;		
		Элементы.ТоварыВводСКоличеством.Видимость 			= ИСТИНА;
		Элементы.ДобавитьДополнительныеРасходы.Видимость 	= ИСТИНА;
		Элементы.ТоварыСоздатьНоменклатуруПечатьШтрихКода.Видимость   = ИСТИНА;
		Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = ИСТИНА;
		Элементы.ТоварыПересчетПоКоэффициенту.Видимость 	= ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость 		= ИСТИНА;
		Элементы.ДополнительныеРасходыДобавить.Видимость 	= ИСТИНА;
		
	КонецЕсли;               		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Результат = ИСТИНА;
	Если НЕ ДокументЗаблокирован тогда	
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			
			СтруктураПараметров = Новый Структура("Номенклатура, Цена, Количество");
			СтруктураПараметров.Вставить("Номенклатура", РезультатОбработки.Номенклатура);
			СтруктураПараметров.Вставить("СерияНоменклатуры", РезультатОбработки.СерияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", РезультатОбработки.ЕдиницаИзмерения);
			СтруктураПараметров.Вставить("Количество", ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(РезультатОбработки.Номенклатура));
			СтруктураПараметров.Вставить("Цена", 0);
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров);
			СтрокаДисплеяПокупателя = РезультатОбработки;
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден (") + ТекКод + ").");
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли; 	 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Знач Номенклатура)
	Возврат ОбщийМодульСервер.ПолучитьПОследнююЦенуРеализации(Номенклатура, Объект.КлиентПоставщик, Объект.Договор, Объект.Дата);	
КонецФункции //ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
					ДоговорПриИзмененииНаСервере();
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.видц );
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОстатокТовараВСтроке(Знач Номенклатура, Знач Количество)
	
	Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	Если НЕ ПоказыватьИзображения Тогда
		Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;	
		Элементы.СсылкаНаИзображение1.Видимость    = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных1.Видимость = ЛОЖЬ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаДляКомиссионнойТорговлиПриИзменении(Элемент)
	ИзменитьВидДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ отказ
		И ЕстьДополнительныеРасходы Тогда
		
		ПересчитатьСуммуПрочихРасходов();
		
		Объект.ВыбылоДенег 	= ИтогоРасходов;
		Объект.курс 		= 1;
		Объект.Валюта 		= ОсновнаяВалюта;
		
	КонецЕсли;
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ
		И Объект.Товары.Количество() > 10 Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
						ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
						
						Отказ = ИСТИНА;
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
						Сообщение.Поле  = "Договор";
						Сообщение.УстановитьДанные(ТекущийОбъект);
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Объект.Договор.ПредусматриваетСтрогиеЦены тогда
				
				Договор = Объект.Договор;
				Дата 	= Объект.Дата;
				ВидЦен 	= Объект.ВидЦен;
				
				Для Каждого СтрокаТовара Из Объект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ Строкатовара.Цена = Цена тогда
						
						Отказ = ИСТИНА;
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене из договора") + ": " + Цена;
						Сообщение.УстановитьДанные(Объект);					
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ отказ
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			
			Если ЗначениеЗаполнено(Объект.Склад)
				И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
				
				Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетПоКоэффициенту(Команда)
	
	КоэффициентПересчета = 1;
	
	Если ВвестиЧисло(КоэффициентПересчета, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите коэффициент пересчета цен") + ":", 10, 6) Тогда	
		ПересчетПоКоэффициентуНаСервере(КоэффициентПересчета);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетПоКоэффициентуНаСервере(Знач КоэффициентПересчета = 1)
	
	СуммаРазницы = 0;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаРазницы = СуммаРазницы + (СтрокаТовара.Цена * СтрокаТовара.Количество) - ((СтрокаТовара.Цена * КоэффициентПересчета) * СтрокаТовара.Количество);
		СтрокаТовара.Цена  = СтрокаТовара.Цена * КоэффициентПересчета;
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
	КонецЦикла;
	
	Применен = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Применен");
	Если НЕ ЗначениеЗаполнено(Объект.Комментарий)
		ИЛИ Лев(Объект.Комментарий, 6) = Лев(Применен, 6) Тогда
		
		Объект.Комментарий = Применен + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("коэффициент на общую сумму") + ": " + СокрЛП(СуммаРазницы);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если НЕ ДокументЗаблокирован Тогда
		Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
		Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");	
	КонецЕсли;
	
	ПересчитатьРаспределениеДопРасходовПриНеобходимости();	
	//	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПрочихРасходов()
	
	ИтогоРасходов = 0;
	
	Для Каждого СтрокаРасхода из Объект.ДополнительныеРасходы цикл		
		Если СтрокаРасхода.курс = 0 Тогда
			СтрокаРасхода.курс = 1;	
		КонецЕсли;
		
		ИтогоРасходов = ИтогоРасходов + СтрокаРасхода.сумма * ?(СтрокаРасхода.курс = 0, 1, СтрокаРасхода.курс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда		
			Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
		Иначе
			Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);	
	КонецЦикла;
	
КонецПроцедуры //ПереСчитатьУчетныеОстатки

&НаСервере
Процедура ПечатьБезСерий(ТабДок, Знач ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Поступление без серий. "), 2);
	Документы.ПоступленияТовара.ПечатьБезСерий(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ИСТИНА, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, Объект.Валюта, , Объект.Дата);
	
	Видимость = не ТекущийДолг = 0 
	И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
	И (УчетПоКлиентам или УчетПоПоставщикам);
	
	Элементы.ТекущийДолг.Видимость = Видимость;
	
	Если видимость тогда
		Элементы.ТекущийДолг.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий долг (") + формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";	
	КонецЕсли;
	
	Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость = Видимость;
	
КонецПроцедуры //ПоказатьДолгКлиентаПоставщика	

Функция   ПоказатьИзображениеРеквизита(Знач ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			Элементы.СсылкаНаИзображение.Видимость    = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость = ИСТИНА;
			
			Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			КонецЕсли; 
			
		Иначе
			Элементы.СсылкаНаИзображение.Видимость    = ИСТИНА;
			Элементы.ИзображениеВБазеДанных.Видимость = ЛОЖЬ;
		КонецЕсли; 		
		
		Результат = ИСТИНА;  		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если НЕ СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если НЕ Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;			                     	
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Знач Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ЕдиницаИзмерения)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, Объект.ВидЦен, Объект.КлиентПоставщик);
	Иначе
		процентскидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену
		И Цена = 0 Тогда
		
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, Количество, Объект.Договор, , , Объект.Ссылка, , ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ПроцентСкидки = 0 
		И НЕ Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	ИначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	Иначе
		Возврат Номенклатура.Цена;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;	
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();  
	Иначе
		ПоказатьДолгКлиентаПоставщика();
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(Знач ИзКоличества = ЛОЖЬ, СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		Если НЕ изколичества
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям 
			И (НЕ СерииНоменклатурыВидны ИЛИ СтрокаТовара.Количество <> 1) Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				СерииНоменклатурыВидны  = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
				
			КонецЕсли;             	
		КонецЕсли;
		
		Если НЕ НеМенятьЦену
			И НЕ изколичества 
			И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;	
		
		ПоказатьТовар();
		
	Иначе
		СтрокаТовара.Цена  = 0;
		СтрокаТовара.Сумма = 0;
		
	КонецЕсли;
	
	ПересчитатьРаспределениеДопРасходовПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	Элементы.НаПечатьБезСерий.Видимость = УчетПоСериям и СерииНоменклатурыВидны;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	СменитьВидОтображенияДокумента(ИСТИНА);
	ВидимостьИсходнойРеализации(ИСТИНА);
	видимостьдополнительныхрасходов();
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()	
	
	ПроверитьСменуТипа();
	КлиентПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001700", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров");
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 		 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьУчетВалют 				 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		УчетПоПоставщикам 					 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		УчетПоКлиентам 						 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		УчетЗаказовПоставщикам  			 	= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
		УчетЗаказовКлиентов	    			 	= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		ВестиУчетПоСкладам 					 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДвиженияДенег 				 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		УчетПоСериям						 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");		
		СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями");
		СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями");
		СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями");
		СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями");
		ПоказыватьИзображения 					= СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
		ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену = ИспользоватьСложныйМеханизмЦен И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену");		
		Элементы.ТоварыВводСКоличеством.Видимость 	 = не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ПечатьЧека.Видимость 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПоступления");
		ИспользоватьСторнированиеДокументов	 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Видимость = ЛОЖЬ;
			Объект.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара 			  = ЛОЖЬ;
			
		Иначе
			Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаПреобразованияЦен")) Тогда
				Элементы.УстанавливатьЦенуУказаннуюВТаблицеВКачествеЦеныДляРеализацииТовара.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устанавливать цену закупки Ценой реализации товара (будут равные цены)");
			КонецЕсли;
			
		КонецЕсли;
		
		ДоступенТолькоВозврат = ОбщийМодульСерверПривилегия.ЕстьПользователи() 
		И НЕ РольДоступна("РеализацияИПриемТовара") 
		И НЕ РольДоступна("ПолныеПрава"); //Только реализация - только возврат
		
		Элементы.Клиент.ВыбиратьТип = НЕ ДоступенТолькоВозврат;
		
		Если ДоступенТолькоВозврат Тогда
			Элементы.ВозвратОтПокупателя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (для возврата)");
		КонецЕсли;
		
		Если ИспользоватьПодключаемоеОборудование Тогда 
			ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
			
			Дисплеи.ЗагрузитьЗначения(
			МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));		
		Иначе
			фр = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) 
			И ЗначениеЗаполнено(Параметры.КлиентПоставщик) Тогда		
			
			Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; //При копировании
			Объект.ДокументСторно = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если ИспользоватьСложныйМеханизмЦен 
				И НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Если ЗначениеЗаполнено(Объект.Склад)
					И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
					
					Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
						Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДоступенТолькоВозврат
				И УчетПоПоставщикам 
				И НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				
				Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");			
			КонецЕсли;		
			
			Элементы.ИтогоРасходов.Видимость 		 = ЛОЖЬ;
			Элементы.ДополнительныеРасходы.Видимость = ЛОЖЬ;
			
			ВидЦенПриИзмененииНаСервере(ИСТИНА);
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах");
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;		
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки) Тогда
				
				Объект.ДатаОтсрочки = Объект.Дата + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			ОбновитьДатуОтсрочки();
			
		Иначе
			Если НЕ Объект.Проведен тогда
				
				Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
				ОбновитьКурсСтрок();
				
				ПересчитатьСуммуПрочихРасходов();
				
			КонецЕсли;
			
			Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ЛОЖЬ;								
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность  = ЛОЖЬ;	
			КонецЕсли;
			
			Элементы.ТоварыЦена.Доступность  = ЛОЖЬ;
			Элементы.ТоварыСумма.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		Элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег и не ИспользоватьУчетВалют;
		Элементы.Декорация1.Видимость 				  = ВестиУчетДвиженияДенег; 
		
		Если НЕ УчетПоКлиентам 
			И НЕ УчетПоПоставщикам Тогда
			
			Элементы.УкажитеВидДокумента.Видимость = ИСТИНА;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
				Иначе	
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение;
				КонецЕсли;
				
			Иначе
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Оприходование;
			КонецЕсли;
			
			Элементы.ВидДокумента.Видимость 	   = ЛОЖЬ;
			
		Иначе
			Элементы.УкажитеВидДокумента.Видимость = ЛОЖЬ;
		КонецЕсли;   	
		
		ИзменитьВидДокумента();
		ПоказатьДолгКлиентаПоставщика();
		
		КлиентПриИзмененииНаСервере(ИСТИНА);	
		
		СерииНоменклатурыВидны = УчетПоСериям И ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
		Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
		
		ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
		Элементы.ТоварыЗаказ.Видимость 			 = УчетЗаказовПоставщикам и ЭтоРасчетысПоставщиком И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ТоварыЗаказПокупателя.Видимость = УчетЗаказовКлиентов и ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ВидЦенВалютаЦены.Видимость 	 = ИспользоватьСложныйМеханизмЦен;
		
		Если ИспользоватьУчетВалют
			И ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		Иначе
			ВидЦенВалютаЦены = ОсновнаяВалюта;
		КонецЕсли;
		
		Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента); 	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ДополнительныеРасходыВзятьСуммуПоДокументу.Видимость = ЛОЖЬ;
				Элементы.ВзятьСуммуПоДокументу.Видимость 		 = ЛОЖЬ;
				Элементы.ДобавитьДополнительныеРасходы.Видимость = ЛОЖЬ;
				Элементы.ДополнительныеРасходы.ТолькоПросмотр 	 = ИСТИНА;
				Элементы.ГруппаВыбыло.ТолькоПросмотр 		 	 = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ДополнительныеРасходы.Видимость = ЛОЖЬ;
				Элементы.ГруппаВыбыло.Видимость 		 = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
		
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
			
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ИСТИНА;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ; 	
	
	//Ссылка = Объект.Ссылка;
	//Валюта = Объект.Валюта;
	//Дата   = Объект.Дата;
	//видцен = Объект.ВидЦен;
	//ВыбылоДенег    = Объект.ВыбылоДенег;
	//ДополнительныеРасходы = Объект.ДополнительныеРасходы;
	//ХранилищеДенег = Объект.ХранилищеДенег;
	//ЭтоЗаказ = Объект.ЭтоЗаказ;
	//Товары = Объект.Товары;
	//Договор = Объект.Договор;
	//КлиентПоставщик = Объект.КлиентПоставщик;
	//ТовараНаСумму = Объект.ТовараНаСумму;
	//ТовараВКоличестве = Объект.ТовараВКоличестве;	
	//Склад = Объект.Склад;
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
	ВестиУчетДвиженияДенег 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Объект.Договор, Объект.КлиентПоставщик, Объект.Дата, Объект.ТовараНаСумму, Объект.ТовараВКоличестве, ИСТИНА, Объект.ВыбылоДенег, Объект.Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ Тогда   				
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Объект.Ссылка);						
			Отказ = ИСТИНА;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из Объект.Товары Цикл
			
			Номенклатура      = ТекСтрокаТовары.Номенклатура;
			СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			
			Если НЕ Отказ
				И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				
				Отказ = ОбщийМодульТоварСервер.ПроверитьОтсутствиеСерииВОстатках(Номенклатура, СерияНоменклатуры, Объект.Дата - 1);
				Если Отказ Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + ТекСтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("попытка приходовать серию повторно!"), , Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	//заказ/не заказ
	
	Если НЕ отказ
		И ВестиУчетДвиженияДенег Тогда		
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
		КонецЕсли;			
		
		Если Объект.ЭтоЗаказ 
			ИЛИ Объект.ДополнительныеРасходы.Количество() = 0 тогда
			
			Если НЕ Объект.ВыбылоДенег = 0 тогда		
				
				СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Объект.ВыбылоДенег, Объект.Дата, ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, ИСТИНА, Объект.Ссылка);
				Отказ  = СтруктураПополнения.Отказ;	
			КонецЕсли;
		Иначе
			
			СуммаДенег = 0;
			Для Каждого СтрокаРасхода из Объект.ДополнительныеРасходы цикл
				СуммаДенег = СуммаДенег + СтрокаРасхода.Сумма * ?(СтрокаРасхода.Курс = 0, 1, СтрокаРасхода.Курс);
			КонецЦикла;
			
			Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Объект.Дата, ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, , Объект.Ссылка);
			
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		ПересчитатьНасильно = ЛОЖЬ;
		
		//сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			И СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			И НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
				ВидЦенПриИзмененииНаСервере();
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				ВидЦенПриИзмененииНаСервере();
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЦикла;
		КонецЕсли;  
		
		Возврат ИСТИНА;
		
	Иначе //не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ЛОЖЬ;
			
		ИначеЕсли НЕ УчетПоКлиентам       			
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Возврат ИСТИНА;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруПечатьЭтикетки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Форма = ПолучитьФорму("Обработка.ПечатьЭтикетки.Форма", ПараметрыФормы);
	ДанныеФормы = Форма.Объект;
	ЗаполнитьНаСервере1(ДанныеФормы);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	
	напечатаноНоменклатуры = Форма.ОткрытьМодально();
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создание номенклатуры."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	
	Если ТипЗнч(напечатаноНоменклатуры) = Тип("Структура") Тогда
		
		ШтрихКод 		= напечатаноНоменклатуры.ШтрихКод;
		Количество 		= напечатаноНоменклатуры.количество;
		Номенклатура 	= напечатаноНоменклатуры.номенклатура;
		серияНоменклатуры = напечатаноНоменклатуры.серияНоменклатуры;
		ЕдиницаИзмерения  = напечатаноНоменклатуры.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
			СтруктураПараметров.Вставить("серияНоменклатуры", серияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);		
			СтруктураПараметров.Вставить("Цена", напечатаноНоменклатуры.Цена);
			СтруктураПараметров.Вставить("Количество", напечатаноНоменклатуры.количество);
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров, ИСТИНА);
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПринятьСерии(Команда)
	
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Номенклатура", )
	ИмяНеобходимойФормы = "Обработка.ОперацииССериямиНоменклатуры.Форма.СоздатьНовыеСерии";
	ФормаДобавленияСерий = ПолучитьФорму(ИмяФормы, , ЭтаФорма);//, ПараметрыФормы);
	СтруктураОтвета = ФормаДобавленияСерий.ОткрытьМодально();
	Если НЕ СтруктураОтвета = Неопределено Тогда
		ДобавитьНоменклатуруССериямиПоСтруктуре(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекСтр.Номенклатура);	
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекСтр.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры(, ТекСтр);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)		
	ПриИзмененииНоменклатуры(, ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(, Строка, ИСТИНА); 			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	
	ТекСтр = Элементы.Товары.ТекущиеДанные;	
	ПоказатьТовар();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УкажитеВидДокументаПриИзменении(Элемент)
	
	УкажитеВидДокументаПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УкажитеВидДокументаПриИзмененииНаСервере()
	
	Если УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение Тогда 		
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо");
		
	ИначеЕсли УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя Тогда
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
		
	Иначе
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		строка = Элементы.ДополнительныеРасходы.ТекущиеДанные;
		
		Если НЕ Строка = Неопределено Тогда
			
			строка.Валюта = Объект.Валюта;
			строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, Объект.Дата);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	ПредставитьДокументДвумяКолонками = не ПредставитьДокументДвумяКолонками;
	СменитьВидОтображенияДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОтображенияДокумента(Знач ПриОткрытии = ЛОЖЬ)
	
	Если ПредставитьДокументДвумяКолонками Тогда
		Элементы.Переместить(Элементы.ГруппаКнопокГоризонт, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаГоризонтШ, Элементы.ГруппаСлева);
//		Элементы.Переместить(Элементы.ГруппаГоризонтШ2, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаВидДокументаИПартияПриобретения, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаВыбыло, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаИтоговДенег, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаСредняяКолонка, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.Комментарий, Элементы.ГруппаСлева);
		
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаСправа);
		Элементы.Переместить(Элементы.ГруппаИтоговТаблицы, Элементы.ГруппаСправа);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаСлева);
		
		Элементы.ГруппаГоризонтШ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
//		Элементы.ГруппаГоризонтШ2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаВидДокументаИПартияПриобретения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
		Элементы.ГруппаВыбыло.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
		
		
	ИначеЕсли НЕ ПриОткрытии Тогда
		
		Элементы.Переместить(Элементы.ГруппаКнопокГоризонт, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаГоризонтШ, Элементы.ГруппаСтандартногоВида);
//		Элементы.Переместить(Элементы.ГруппаГоризонтШ2, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаВидДокументаИПартияПриобретения, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаВыбыло, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаСредняяКолонка, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаГоризонтТаблиц);
		Элементы.Переместить(Элементы.ГруппаГоризонтТаблиц, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаИтоговТаблицы, Элементы.ГруппаПодвал);
		Элементы.Переместить(Элементы.ГруппаИтоговДенег, Элементы.ГруппаПодвал);
		Элементы.Переместить(Элементы.ГруппаГоризонтНиз, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.Комментарий, Элементы.ГруппаСтандартногоВида);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаСтандартногоВида);
		
		Элементы.ГруппаГоризонтШ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
//		Элементы.ГруппаГоризонтШ2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаВидДокументаИПартияПриобретения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаВыбыло.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	ТекущиеДанные.Валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.Валюта);
	ТекущиеДанные.Курс = ПолучитьКурс(ТекущиеДанные.Валюта);
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаСервереБезконтекста
Функция   ВалютаХранилища(Знач ХранилищеДенег, Знач БылаВалюта)
	
	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе
		Возврат БылаВалюта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция   получитьКурс(Знач Валюта)
	
	Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Объект.Дата);
	
КонецФункции //получитьКурс

&НаКлиенте
Процедура ВидимостьИсходнойРеализации(Знач НеИзменять = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
		
		Элементы.ДокументРеализации.Видимость = ИСТИНА;		
	Иначе
		Элементы.ДокументРеализации.Видимость = ЛОЖЬ;
		Если НЕ НеИзменять Тогда
			Объект.ДокументРеализации = ПредопределенноеЗначение("Документ.РасходыТовара.ПустаяСсылка");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзменении(Элемент)
	ДокументРеализацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРеализацииПриИзмененииНаСервере()
	
	ДокументРеализации = Объект.ДокументРеализации;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		БылаДата = Объект.Дата;
		
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ОбработкаПриЗаполнении(ДокументРеализации);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
		
		Если БылаДата < ДокументРеализации.Дата Тогда
			Объект.Дата = ДокументРеализации.Дата + 1;
		Иначе
			Объект.Дата = БылаДата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКакБудутРаспределеныДополнительныеРасходы(Команда)
	
	ПоказыватьРаспределениеДопРасходов = НЕ ПоказыватьРаспределениеДопРасходов;
	ОбновитьВидимостьРаспределенияДопРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьРаспределенияДопРасходов()
	
	ПересчитатьРаспределениеДопРасходовПриНеобходимости();
	
	Элементы.ТоварыСуммаДополнительныхРасходов.Видимость = ПоказыватьРаспределениеДопРасходов И ЕстьДополнительныеРасходы;
	Элементы.ТоварыПоказатьКакБудутРаспределеныДополнительныеРасходы.Видимость = ЕстьДополнительныеРасходы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРаспределениеДопРасходовПриНеобходимости()

	Если ПоказыватьРаспределениеДопРасходов 
		И ЕстьДополнительныеРасходы Тогда
		
		ПересчитатьРаспределениеДопРасходов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРаспределениеДопРасходов()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены)
		И НЕ Объект.ВидЦен.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВалютаЦены = Неопределено;
	КонецЕсли;
	
	Дата = Объект.Дата;
	СуммаСтрокаРасходов = 0;
	ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = 0;
	СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0;
	КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0;
	
	Для Каждого СтрокаРасхода ИЗ Объект.ДополнительныеРасходы Цикл
		
		Если НЕ СтрокаРасхода.НеРаспределятьНаСтоимость Тогда
			СуммаСтрокаРасходов = суммаСтрокаРасходов + СтрокаРасхода.Сумма * СтрокаРасхода.Курс;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаСтрокаРасходов = ОбщийМодульСервер.ПоКурсу(СуммаСтрокаРасходов, ВалютаЦены, Объект.Валюта, Дата);
	
	ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
	Если ТовараВКоличестве = 0 Тогда
		ТовараВКоличестве = 1;
	КонецЕсли;
	
	РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме");
	РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости");
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
		
		Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура)
			И НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура) Тогда
			
			ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль = ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль + 1;
			
			СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов + СуммаТов;
			КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов + СтрокаТовара.Количество;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		СуммаДопРасх = 0;
		
		Если НЕ ОбщийМодульПовтор.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(СтрокаТовара.Номенклатура)
			И НЕ суммаСтрокаРасходов = 0 Тогда
			
			СуммаТов = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, ,ВалютаЦены, Дата);
			
			Если РаспределятьДополнительныеРасходыПропорциональноКоличествуАНеСумме Тогда
				Если НЕ ТовараВКоличестве = 0 тогда
					СуммаДопРасх = суммаСтрокаРасходов * (СтрокаТовара.Количество / ?( КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0,  1,  КоличествоБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов));	 //без едизм
				КонецЕсли;
				
			ИначеЕсли РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНоменклатурыНезависимоОтЕеСтоимости Тогда //Распределять дополнительные расходы пропорционально на единицу номенклатуры независимо от ее стоимости и количества
				Если НЕ ТовараВКоличестве = 0 тогда
					СуммаДопРасх = суммаСтрокаРасходов / ЧислоСтрокТоваровНаКоторыеРаспределяетсяВаловаяПрибыль;	 //без едизм
				КонецЕсли;
				
			Иначе
				Если НЕ СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов = 0 Тогда											
					СуммаДопРасх = суммаСтрокаРасходов * СуммаТов / СуммаБазыНоменклатурыНаКоторуюРаспотраняетсяРасределениеДопРасходов;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаТовара.СуммаДополнительныхРасходов = СуммаДопРасх;
	КонецЦикла;
	
КонецПроцедуры //ПересчитатьРаспределениеДопРасходов

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.Валюта 		= Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ВвестиЗначение(Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
		Если ЗначениеЗаполнено(Причина) Тогда
			ОткрытьЗначение( ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
			Закрыть();	
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

ТекСтр = Неопределено;
