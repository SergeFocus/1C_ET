//sza140601-0409 SZA: 
//sza130902-0352 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001750", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода") ;
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьУчетВалют 					= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ;
		УчетПоПоставщикам 						= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") ;
		УчетПоКлиентам 							= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;
		УчетЗаказовПоставщикам					= УчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
		УчетЗаказовКлиентов						= УчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
		ВестиУчетПоСкладу 						= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;
		ВестиУчетДвиженияДенег 					= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
		ВестиУчетДенегВНесколькихХранилищах 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") ;
		Элементы.ПланОплатыФормаОплаты.Видимость= НЕ ВестиУчетДенегВНесколькихХранилищах;		
		СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями") ;
		СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями") ;
		СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями") ;
		СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями") ;
		СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями") ;
		ПоказыватьИзображения 					= СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
		
		Элементы.ТоварыВводСКоличеством.Видимость 	= не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством") ;
		Элементы.ПечатьЧека.Видимость 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПоступления");
		
		ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		
		ДоступенТолькоВозврат = Ложь;
		
		Элементы.Клиент.ВыбиратьТип = НЕ ДоступенТолькоВозврат;
		
		Если ДоступенТолькоВозврат Тогда
			Элементы.ВозвратОтПокупателя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (для возврата)");
		КонецЕсли;
		
		если ИспользоватьПодключаемоеОборудование тогда
			ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
			
			Дисплеи.ЗагрузитьЗначения(
			МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));	
		иначе
			фр = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда		
			Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.ЭтоЗаказ = Истина;
			
			Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
				Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			если ИспользоватьСложныйМеханизмЦен 
				и НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик ) Тогда			
				Объект.КлиентПоставщик = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");			
			КонецЕсли;		
			
			ВидЦенПриИзмененииНаСервере();
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах") ;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			Если НЕ ЗначениеЗаполнено(СостояниеЗаказа) Тогда
				СостояниеЗаказа = Перечисления.СостоянияЗаказаПоставщику.Формируется ;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				и не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				
				Объект.Сотрудник = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию") ;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И не ЗначениеЗаполнено(Объект.ДатаОтсрочки) Тогда
				
				Объект.ДатаОтсрочки = Объект.Дата + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			ОбновитьДатуОтсрочки();
			
		иначе
			если не объект.Проведен тогда
				
				Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
				ОбновитьКурсСтрок();
				
				ПересчитатьСуммуПрочихРасходов();
				
			конецесли;
			
			элементы.Курс.Видимость = не объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = Ложь;								
			ОбновитьСостояниеЗаказа();
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") тогда
			
			если ЗначениеЗаполнено(объект.ВидЦен) Тогда
				элементы.ВидЦен.Доступность 	= ложь;	
			КонецЕсли;
			
			элементы.ТоварыЦена.Доступность 	= Ложь;
			элементы.ТоварыСумма.Доступность 	= Ложь;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег и не ИспользоватьУчетВалют;
		элементы.Декорация1.Видимость 				  = ВестиУчетДвиженияДенег; 
		Элементы.ВидЦенВалютаЦены.Видимость = ИспользоватьСложныйМеханизмЦен;
		
		Если не УчетПоКлиентам 
			и не УчетПоПоставщикам Тогда
			
			элементы.УкажитеВидДокумента.Видимость = истина;
			
			Если ЗначениеЗаполнено(объект.КлиентПоставщик) Тогда
				Если ТипЗнч(объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
				иначе	
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение;
				КонецЕсли;
				
			иначе
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Оприходование;
			КонецЕсли;
			
			элементы.ВидДокумента.Видимость 		= ложь;
		КонецЕсли;   	
		
		ИзменитьВидДокумента();
		ПоказатьДолгКлиентаПоставщика();
		
		КлиентПриИзмененииНаСервере(Истина);	
		видимостьдополнительныхрасходов();
		
		Если ИспользоватьУчетВалют
			и ЗначениеЗаполнено(Объект.ВидЦен)
			и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		Иначе
			ВидЦенВалютаЦены = основнаявалюта;
		КонецЕсли;
		
		Элементы.ТоварыПодборНоменклатуры.Видимость  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента); 	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , Истина);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ВзятьСуммуПоДокументу.Видимость 		 = Ложь;
				Элементы.ГруппаВыбыло.ТолькоПросмотр 		 	 = Истина;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаВыбыло.Видимость 		 = Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбновитьСостояниеЗаказа()
	
	СтруктураСостояния  = ОбщийМодульСервер.ПолучитьСостояниеЗаказа(Объект.Ссылка, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	СостояниеЗаказа 	= СтруктураСостояния.Состояние;
	СменаСостояния   	= СтруктураСостояния.Смена;
	Элементы.Разница.Заголовок = "";	
	
КонецФункции

&НаСервере
процедура видимостьдополнительныхрасходов()
	
	ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров") ;
	ЕстьДополнительныеРасходы = не ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров
	и НЕ объект.ДополнительныеРасходы.Количество() = 0;
	
	элементы.ГруппаВыбыло.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ ЕстьДополнительныеРасходы;
	
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)  	
	ВзятьСуммуПоДокументуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
	Объект.ВыбылоДенег = Объект.Товары.Итог("Сумма");	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач СтруктураПараметров, Знач ИзДиалогаСоздания = ложь, Знач НеСтановитсяНаЭтуСтроку = Ложь, Знач множительКоличества = 1)
	
	Номенклатура 	 = СтруктураПараметров.Номенклатура;
	ЕдиницаИзмерения = СтруктураПараметров.ЕдиницаИзмерения;
	
	если не ДокументЗаблокирован Тогда		
		
		если не ИзДиалогаСоздания
			или не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара") тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);	
			Если СтрокаТовара.Количество() = 0 Тогда  					
				СтрокаТовара = Объект.Товары.Добавить();	
				СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
			иначе
				СтрокаТовара = СтрокаТовара[0];
			КонецЕсли;                	
			
		иначе
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
		КонецЕсли; 		
		
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Количество   = СтрокаТовара.Количество + СтруктураПараметров.Количество * множительКоличества;
		
		если НЕ СтруктураПараметров.Свойство("Цена", СтрокаТовара.Цена) тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, Истина, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;	
		КонецЕсли;
		
	иначеЕсли НЕ НеСтановитсяНаЭтуСтроку Тогда //Встать на строку            		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не найдена");
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("с единицей") + ": " + ЕдиницаИзмерения;
		КонецЕсли;			
		
		СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НЕ СтрокаТовара.Количество() = 0 Тогда 
			
			СтрокаТовара = СтрокаТовара[0];
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле 	= "Товары";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		конецесли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = неопределено;
	
	Состав = новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		иначе
			ДобавитьПозициюНоменклатуры(строкасостава, , Истина, Количество);
		конецесли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)	
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(изколичества = ложь, СтрокаТовара = Неопределено, Знач НеМенятьЦену = Ложь) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		если НЕ изколичества
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура 	= Номенклатура;
				СтрокаТовара.Количество 	= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		если НЕ НеМенятьЦену
			И не изколичества тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество) ;
		КонецЕсли;
		
		ПоказатьТовар();
		
	иначе
		СтрокаТовара.Цена  = 0;
		СтрокаТовара.Сумма = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   остатоктоваравстроке(Номенклатура, Количество)
	
	если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	если не СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                             // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	обновитьНаименованиеформы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		//	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если НЕ ДокументЗаблокирован Тогда
		Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
		Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");	
	КонецЕсли;
	
	//	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" К ОПЛАТЕ:") + " " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("    СДАЧА:") + " " + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГО:") + " " + Формат(Объект.ТовараНаСумму, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"ClearText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"DisplayText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При использовании дисплея покупателя произошла ошибка:") + " " + ВыходныеПараметры[1]; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ЕдиницаИзмерения)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, объект.ВидЦен, Объект.КлиентПоставщик);
	иначе
		процентскидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		и ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если Цена = 0 Тогда
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, Ложь, Количество, Объект.Договор, , , Объект.Ссылка, , ЕдиницаИзмерения);
	КонецЕсли;
	
	если не ПроцентСкидки = 0 
		и не Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	иначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	иначе
		Возврат Номенклатура.Цена;	
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Номенклатура)
	
	ОпределитьЦенуПоследнейПродажи = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Количество,
	|	Продажи.Сумма
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Клиент = &Клиент
	|	И Продажи.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продажи.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Объект.КлиентПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = ВыборкаДетальныеЗаписи.Количество;
			Если Количество = 0 Тогда
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		КонецЦикла;                            	
	КонецЕсли;
	
	Возврат ОпределитьЦенуПоследнейПродажи;
	
КонецФункции //ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	конецесли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	Результат = Истина;
	
	если не ДокументЗаблокирован тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			
			СтруктураПараметров = Новый Структура("Номенклатура, Цена, Количество");
			СтруктураПараметров.Вставить("Номенклатура", РезультатОбработки);
			СтруктураПараметров.Вставить("Цена", РезультатОбработки.Цена);
			СтруктураПараметров.Вставить("СерияНоменклатуры", РезультатОбработки.СерияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", РезультатОбработки.ЕдиницаИзмерения);			
			СтруктураПараметров.Вставить("Количество", Количество * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(РезультатОбработки));
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров);
			СтрокаДисплеяПокупателя = РезультатОбработки;
			
		Иначе		
			ОстановитьПоиск = Ложь;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				если ЗначениеЗаполнено(РезультатОбработки) Тогда
					объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = Истина;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , Истина);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = Истина;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден (") + ТекКод + ").");
				Результат = Ложь;	
			КонецЕсли;
		КонецЕсли; 	 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура КлиентПриИзмененииНаСервере(Знач НеМенятьПараметрыОбъекта = Ложь)
	
	ЗначениеЗаполненоОбъектКлиент = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполненоОбъектКлиент тогда
		
		Если НЕ НеМенятьПараметрыОбъекта Тогда
			Если ИспользоватьУчетВалют
				и ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			
			если не ЗначениеЗаполнено(объект.Склад)
				и ЗначениеЗаполнено(объект.КлиентПоставщик.Склад) Тогда
				
				объект.Склад = объект.КлиентПоставщик.Склад;		
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И НЕ ЗначениеЗаполнено(Объект.Договор) 
				ИЛИ не объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;		
		КонецЕсли;
		
		ЭтоРасчетысПоставщиком = Истина;
		
		элементы.ТоварыЦена.Заголовок 			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена прих.");	
		элементы.ТоварыСумма.Заголовок 			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.КлиентПоставщик.СпособДоставки;
		КонецЕсли;
		
	Иначе
		элементы.ТоварыСумма.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		элементы.ТоварыЦена.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена закупки");
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();

КонецПроцедуры

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) ТОгда
		ПересчитатьНасильно = Ложь;
		
		//сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			и СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;
			КонецЕсли;
			
			ПересчитатьНасильно = Истина;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			и НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;
			КонецЕсли;
			
			ПересчитатьНасильно = Истина;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЦикла;
		КонецЕсли;  
		
		Возврат Истина;
		
	Иначе //не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ложь;
			
		ИначеЕсли НЕ УчетПоКлиентам       			
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КлиентПриИзменении(Элемент) 	
	
	ПриСменеКонтрагента();        	
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()	
	
	ПроверитьСменуТипа();
	КлиентПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	если объект.ВыбылоДенег > 0 тогда
		Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отдать деньги и закрыть");
	иначе
		Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить и закрыть");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, Объект.Валюта, , Объект.Дата);
	
	Видимость = не ТекущийДолг = 0 
	и ЗначениеЗаполнено(объект.КлиентПоставщик) 
	и (УчетПоКлиентам или УчетПоПоставщикам);
	
	элементы.ТекущийДолг.Видимость = Видимость;
	
	если видимость тогда
		Элементы.ТекущийДолг.Заголовок = "Текущий долг (" + формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";	
	КонецЕсли;
	
	элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость = Видимость;
	
КонецПроцедуры //ПоказатьДолгКлиентаПоставщика	

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)
	
	ВзятьСуммуСУчетомДолгаКлиентанаСервере(истина);
	
КонецПроцедуры

Процедура ВзятьСуммуСУчетомДолгаКлиентанаСервере(иСуммуДолга = ложь)
	
	Если ЗначениеЗаполнено(объект.ВидЦен)
		и ЗначениеЗаполнено(объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаЦены = объект.ВидЦен.ВалютаЦены;
	иначе
		ВалютаЦены = основнаявалюта;
	КонецЕсли;
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	
	Если ЗначениеЗаполнено(объект.КлиентПоставщик)
		и ЗначениеЗаполнено(объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
		
		Объект.Валюта = объект.КлиентПоставщик.ОсновнаяВалюта;
	иначе
		Объект.Валюта = ОсновнаяВалюта;
		Объект.курс = 1;
		
	КонецЕсли;
	
	ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(объект.Товары.итог("Сумма"), объект.Валюта, валютацены, объект.Дата);
	
	Если иСуммуДолга Тогда
		объект.ВыбылоДенег = ВыбылоДенег - ТекущийДолг;
		
	иначе
		объект.ВыбылоДенег = ВыбылоДенег;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();  
	иначе
		ПоказатьДолгКлиентаПоставщика();
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ОбработатьБлокировку(ПриСозданииФормы = ложь)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда
		
		Элементы.ТоварыВводШтрихКода.Доступность 			= Ложь;
		Элементы.ВзятьСуммуПоДокументу.Доступность 			= Ложь;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Ложь;
		Элементы.ТоварыВводСКоличеством.Доступность 		= Ложь;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Доступность 			= Истина;
		Элементы.ВзятьСуммуПоДокументу.Доступность 			= Истина;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Истина;
		Элементы.ТоварыВводСКоличеством.Доступность 		= Истина;
		
	КонецЕсли;               		
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ ЗначениеЗаполнено(объект.Валюта) Тогда		
			Объект.Валюта = ВидЦенВалютаЦены;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") ТОгда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
	и ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
	и ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Валюта, Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не Объект.Курс = 1	
	и ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		и ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ВестиУчетПоСкладу
		и ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры();
		элементы.Товары.ЗакончитьРедактированиеСтроки(лОЖЬ);
		Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", Истина);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", Ложь);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	//Если Не Отказ 
	//	и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
	//	и не значениеЗаполнено(объект.КлиентПоставщик) Тогда
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан поставщик");
	//	Сообщение.Поле  = "КлиентПоставщик";
	//	Сообщение.УстановитьДанные(Объект);
	//	Сообщение.Сообщить();
	//	
	//	Отказ = Истина;
	//	
	//иначе
	//	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ОбновитьКурсСтрок()
	
	для каждого строка из объект.ДополнительныеРасходы цикл
		Если ЗначениеЗаполнено(строка.валюта) тогда
			строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
процедура ПересчитатьСуммуПрочихРасходов()
	
	ИтогоРасходов = 0;
	
	Для каждого СтрокаРасхода из объект.ДополнительныеРасходы цикл
		
		если СтрокаРасхода.курс = 0 Тогда
			СтрокаРасхода.курс = 1;	
		КонецЕсли;
		
		ИтогоРасходов = ИтогоРасходов + СтрокаРасхода.сумма * ?(СтрокаРасхода.курс = 0, 1, СтрокаРасхода.курс);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьУчетВалют Тогда
		Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
		элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
	КонецЕсли;
	
	обновитьНаименованиеформы();
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество) ;	
	КонецЦикла;
	
КонецПроцедуры //ПереСчитатьУчетныеОстатки

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) тогда
		если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если не объект.Договор.Организация = Объект.Организация Тогда		
					объект.Договор = Справочники.Договора.ПустаяСсылка() ;	
					ДоговорПриИзмененииНаСервере();
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.видц );
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВестиУчетПоСкладу
			и не ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		если не Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;				
		
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, , , Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(объект.КлиентПоставщик)
			и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если не ЗначениеЗаполнено(Объект.Договор) тогда
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора= '00010101000000' 
						или ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
						Сообщение.Поле = "Договор";
						Сообщение.УстановитьДанные(ТекущийОбъект);
						Сообщение.Сообщить();
						
						Отказ = Истина;
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Объект.Договор.ПредусматриваетСтрогиеЦены тогда
				
				Договор = Объект.Договор;
				Дата 	= Объект.Дата;
				ВидЦен 	= Объект.ВидЦен;
				
				Для Каждого СтрокаТовара Из Объект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, Истина, Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ Строкатовара.Цена = Цена тогда
						
						Отказ = Истина;
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не соответствует строгой цене из договора:") + " "+ Цена;
						Сообщение.УстановитьДанные(Объект);					
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
		
		Если не отказ
			И не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
			Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте ;
			КонецЕсли;
		КонецЕсли;
		
		Если не отказ Тогда
			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;    	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	//Ссылка = Объект.Ссылка;
	//Валюта = Объект.Валюта;
	//Дата   = Объект.Дата;
	//видцен = Объект.ВидЦен;
	//ВыбылоДенег    = объект.ВыбылоДенег;
	//ДополнительныеРасходы = Объект.ДополнительныеРасходы;
	//ХранилищеДенег = объект.ХранилищеДенег;
	//ЭтоЗаказ = Объект.ЭтоЗаказ;
	//Товары = Объект.Товары;
	//Договор = Объект.Договор;
	//КлиентПоставщик = Объект.КлиентПоставщик;
	//ТовараНаСумму = Объект.ТовараНаСумму;
	//ТовараВКоличестве = Объект.ТовараВКоличестве;	
	//Склад = Объект.Склад;
	//
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
	Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ПоказатьТовар();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если Не СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) ТОгда
				Если не Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;			                     	
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			элементы.СсылкаНаИзображение.Видимость     = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость  = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция   ПоказатьИзображениеРеквизита(ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			элементы.СсылкаНаИзображение.Видимость    = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость = Истина;
			
			если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			конецесли; 
			
		иначе
			элементы.СсылкаНаИзображение.Видимость    = Истина;
			элементы.ИзображениеВБазеДанных.Видимость = Ложь;
		КонецЕсли; 		
		
		Результат = Истина;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	если не ПоказыватьИзображения Тогда
		элементы.СсылкаНаИзображение.Видимость     = Ложь;
		элементы.ИзображениеВБазеДанных.Видимость  = Ложь;	
		элементы.СсылкаНаИзображение1.Видимость    = Ложь;
		элементы.ИзображениеВБазеДанных1.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	обновитьНаименованиеформы();
КонецПроцедуры

&НаКлиенте
процедура обновитьНаименованиеформы()
	ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Поставщику") + " №" + объект.Номер + " - " + формат(объект.Дата, "ДФ='dd.MM.yy ЧЧ:мм'");
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", Истина);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			
			ПриИзмененииНоменклатуры(, Строка, Истина);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ИспользоватьПодключаемоеОборудование
		И НЕ Текст = "" Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, Истина, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		и НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			и не объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = Истина;
			Иначе
				Объект.ДатаОтсрочки = Объект.ДатаОкончанияОказанияУслуг + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
