// sza150605-2229 
// sza150111-0238 НЧ
// sza141225-1840 
// sza140831-0539
// sza140821-1131 ошибка отсрочки
// sza140709-1723  
// sza140610-0123  
// sza130902-0352 :
&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураДляВВода.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаклиенте(ТекКод);
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)
	ВзятьСуммуПоДокументуНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаПоступления = Объект.ВидЦен.ВалютаЦены;
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		ВалютаПоступления = Объект.Валюта;
		ВалютаЦены = ОсновнаяВалюта; // осн
	Иначе
		ВалютаПоступления = ОсновнаяВалюта;
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	Объект.Валюта = ВалютаПоступления;
	Объект.Курс   = ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаПоступления, ОБъект.Дата, ЛОЖЬ);
	Объект.ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ВалютаПоступления, ВалютаЦены, ОБъект.Дата, Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)	
	ВзятьСуммуСУчетомДолгаКлиентанаСервере(ИСТИНА);	
КонецПроцедуры

Процедура ВзятьСуммуСУчетомДолгаКлиентанаСервере(Знач иСуммуДолга = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
	Иначе
		ВалютаЦены = ОсновнаяВалюта;
	КонецЕсли;
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
		
		Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
	Иначе
		Объект.Валюта = ОсновнаяВалюта;
		Объект.курс = 1;
		
	КонецЕсли;
	
	ВыбылоДенег = ОбщийМодульСервер.ПоКурсу(Объект.Товары.итог("Сумма"), Объект.Валюта, валютацены, Объект.Дата);
	
	Если иСуммуДолга Тогда
		Объект.ВыбылоДенег = ВыбылоДенег - ТекущийДолг;		
	Иначе
		Объект.ВыбылоДенег = ВыбылоДенег;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьДополнительныхРасходов()
	
	ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров");
	ЕстьДополнительныеРасходы = НЕ ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваров И НЕ Объект.ДополнительныеРасходы.Количество() = 0;
	
	Элементы.ГруппаВыбыло.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ ЕстьДополнительныеРасходы;
	
	ПересчитатьСуммуПрочихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач ПриНачальнойЗагрузке = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда		
			Объект.Валюта = ВидЦенВалютаЦены;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПриНачальнойЗагрузке
		И ЗначениеЗаполнено(Объект.ВидЦен) 
		И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если ИспользоватьУчетВалют Тогда
		Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
		Элементы.Курс.Видимость = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	КонецЕсли;
	
	обновитьНаименованиеформы();
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ПоступленияТовара"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач СтруктураПараметров, Знач ИзДиалогаСоздания = ЛОЖЬ, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач множительКоличества = 1)
	
	Номенклатура 	 = СтруктураПараметров.Номенклатура;
	ЕдиницаИзмерения = СтруктураПараметров.ЕдиницаИзмерения;
	
	Если НЕ ДокументЗаблокирован Тогда		
		
		Если НЕ ИзДиалогаСоздания
			ИЛИ не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара") Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			КонецЕсли;
			
			СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);	
			Если СтрокаТовара.Количество() = 0 Тогда  					
				СтрокаТовара = Объект.Товары.Добавить();	
				СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
			Иначе
				СтрокаТовара = СтрокаТовара[0];
			КонецЕсли;                	
			
		Иначе
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
		КонецЕсли; 		
		
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Количество   = СтрокаТовара.Количество + СтруктураПараметров.Количество * множительКоличества;
		
		Если СтрокаТовара.Цена = 0 Тогда
			Если НЕ СтруктураПараметров.Свойство("Цена", СтрокаТовара.Цена) Тогда
				СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, СтрокаТовара.Количество, Объект.Договор, , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;	
		КонецЕсли;
		
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку Тогда // Встать на строку            		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не найдена");
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("с единицей") + ": " + ЕдиницаИзмерения;
		КонецЕсли;			
		
		СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НЕ СтрокаТовара.Количество() = 0 Тогда 
			
			СтрокаТовара = СтрокаТовара[0];
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле 	= "Товары";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(строкасостава, , ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда // насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик = Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 	   = Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Если НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену Тогда
				Для Каждого СтрокаТовара Из Объект.Товары Цикл
					СтрокаТовара.Цена  = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;				
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	Иначе		
		Дата   = Объект.Дата;
		ВидЦен = Объект.ВидЦен;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена  = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, , , СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	Попытка
		Если Объект.ВыбылоДенег > 0 тогда
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отдать деньги и закрыть");
		Иначе
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить и закрыть");
		КонецЕсли;
	Исключение // нет прав
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент) 	
	
	ПриСменеКонтрагента();        	
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере(Знач НеМенятьПараметрыОбъекта = ЛОЖЬ)
	
	ЗначениеЗаполненоОбъектКлиент = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполненоОбъектКлиент тогда
		
		Если НЕ НеМенятьПараметрыОбъекта Тогда
			Если ИспользоватьУчетВалют
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Объект.Склад)
				ИЛИ Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"))
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.Склад) Тогда
				
				Объект.Склад = Объект.КлиентПоставщик.Склад;		
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И НЕ ЗначениеЗаполнено(Объект.Договор) 
				ИЛИ не Объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;		
		КонецЕсли;
		
		ЭтоРасчетысПоставщиком = ИСТИНА;
		
		Элементы.ТоварыЦена.Заголовок	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена прих.");	
		Элементы.ТоварыСумма.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.КлиентПоставщик.СпособДоставки;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	Иначе
		Элементы.ТоварыЦена.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена закупки");
		Элементы.ТоварыСумма.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = не Объект.Курс = 1	
	И ИспользоватьУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	обновитьНаименованиеформы();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.Дата + Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.Дата + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Знач Валюта, Знач Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ОбновитьКурсСтрок()
	
	Для Каждого строка из Объект.ДополнительныеРасходы цикл
		Если ЗначениеЗаполнено(строка.валюта) Тогда
			строка.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(строка.валюта, Объект.Дата);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура обновитьНаименованиеформы()
	ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Поставщику") + " №" + Объект.Номер + " - " + формат(Объект.Дата, "ДФ='dd.MM.yy ЧЧ:мм'");
КонецПроцедуры

&НаСервере
Функция   ОбновитьСостояниеЗаказа()
	
	СтруктураСостояния  = ОбщийМодульСервер.ПолучитьСостояниеЗаказа(Объект.Ссылка, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	СостояниеЗаказа 	= СтруктураСостояния.Состояние;
	СменаСостояния   	= СтруктураСостояния.Смена;
	Элементы.Разница.Заголовок = "";	
	
КонецФункции

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001752") Тогда
		
		Элементы.ТоварыВводШтрихКода.Видимость 			= ЛОЖЬ;
		Элементы.ВзятьСуммуПоДокументу.Видимость 		= ЛОЖЬ;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость 		= ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость 	= ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Видимость 			= ИСТИНА;
		Элементы.ВзятьСуммуПоДокументу.Видимость 		= НЕ ВестиУчетДвиженияДенегТолькоЧтение;
		Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость= НЕ ТекущийДолг = 0 
	И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
	И (УчетПоКлиентам или УчетПоПоставщикам);

		Элементы.ТоварыВводСКоличеством.Видимость 		= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ТоварыПодборНоменклатуры.Видимость 	= ВключитьМеханизмПодбораНоменклатуры;
		
	КонецЕсли;               		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = ИСТИНА;
	
	Если НЕ ДокументЗаблокирован тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки.Номенклатура) Тогда
			
			СтруктураПараметров = Новый Структура("Номенклатура, Цена, Количество");
			СтруктураПараметров.Вставить("Номенклатура", РезультатОбработки);
			СтруктураПараметров.Вставить("Цена", РезультатОбработки.Цена);
			СтруктураПараметров.Вставить("СерияНоменклатуры", РезультатОбработки.СерияНоменклатуры);
			СтруктураПараметров.Вставить("ЕдиницаИзмерения", РезультатОбработки.ЕдиницаИзмерения);			
			СтруктураПараметров.Вставить("Количество", Количество * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(РезультатОбработки));
			
			ДобавитьПозициюНоменклатуры(СтруктураПараметров);
			СтрокаДисплеяПокупателя = СокрЛП(РезультатОбработки.Номенклатура);
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден") + " (" + ТекКод + ").");
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли; 	 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Номенклатура)
	
	ОпределитьЦенуПоследнейПродажи = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Количество,
	|	Продажи.Сумма
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Клиент = &Клиент
	|	И Продажи.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продажи.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Клиент", Объект.КлиентПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = ВыборкаДетальныеЗаписи.Количество;
			Если Количество = 0 Тогда
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				ОпределитьЦенуПоследнейПродажи = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		КонецЦикла;                            	
	КонецЕсли;
	
	Возврат ОпределитьЦенуПоследнейПродажи;
	
КонецФункции // ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
					ДоговорПриИзмененииНаСервере();
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.видц );
				ДоговорПриИзмененииНаСервере();
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   остатоктоваравстроке(Знач Номенклатура, Знач Количество)
	
	Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	Если НЕ ПоказыватьИзображения Тогда
		Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;	
	Иначе
		НоменклатураИзображения = Неопределено;
		ПоказатьТовар();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	// Если Не Отказ 
	// 	И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
	// 	И НЕ значениеЗаполнено(Объект.КлиентПоставщик) Тогда
	// 	
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан поставщик");
	// 	Сообщение.Поле  = "КлиентПоставщик";
	// 	Сообщение.УстановитьДанные(Объект);
	// 	Сообщение.Сообщить();
	// 	
	// 	Отказ = ИСТИНА;
	// 	
	// иначе
	// 	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));
	// КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.КлиентПоставщик)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Договор) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора= '00010101000000' 
						ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= ТекущийОбъект.Дата Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
						Сообщение.Поле = "Договор";
						Сообщение.УстановитьДанные(ТекущийОбъект);
						Сообщение.Сообщить();
						
						Отказ = ИСТИНА;
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТекущийОбъект.Договор.ПредусматриваетСтрогиеЦены тогда
				
				Договор = ТекущийОбъект.Договор;
				Дата 	= ТекущийОбъект.Дата;
				ВидЦен 	= ТекущийОбъект.ВидЦен;
				
				Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, СтрокаТовара.Цена, ТекущийОбъект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена тогда
						
						Отказ = ИСТИНА;
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене из договора") + ": "+ Цена;
						Сообщение.УстановитьДанные(ТекущийОбъект);					
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ отказ
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
			
			Если ЗначениеЗаполнено(ТекущийОбъект.Склад)
				И ЗначениеЗаполнено(ТекущийОбъект.Склад.ХранилищеДенег) Тогда
				
				ТекущийОбъект.ХранилищеДенег = ТекущийОбъект.Склад.ХранилищеДенег;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
				ТекущийОбъект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
					ТекущийОбъект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Если НЕ ДокументЗаблокирован Тогда
		Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
		Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");	
	КонецЕсли;
	
	// 	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПрочихРасходов()
	
	ИтогоРасходов = 0;
	
	Для Каждого СтрокаРасхода из Объект.ДополнительныеРасходы цикл
		
		Если СтрокаРасхода.курс = 0 Тогда
			СтрокаРасхода.курс = 1;	
		КонецЕсли;
		
		ИтогоРасходов = ИтогоРасходов + СтрокаРасхода.сумма * ?(СтрокаРасхода.курс = 0, 1, СтрокаРасхода.курс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда		
			Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
		Иначе
			Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);	
	КонецЦикла;
	
КонецПроцедуры // ПереСчитатьУчетныеОстатки

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ИСТИНА, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, Объект.Валюта, , Объект.Дата);
	
	Видимость = не ТекущийДолг = 0 
	И ЗначениеЗаполнено(Объект.КлиентПоставщик) 
	И (УчетПоКлиентам или УчетПоПоставщикам);
	
	Элементы.ТекущийДолг.Видимость = Видимость;
	Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость = НЕ ДокументЗаблокирован И Видимость;
	
	Если видимость тогда
		Элементы.ТекущийДолг.Заголовок = "Текущий долг (" + формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";	
	КонецЕсли;
	
КонецПроцедуры // ПоказатьДолгКлиентаПоставщика	

Функция   ПоказатьИзображениеРеквизита(ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			Элементы.СсылкаНаИзображение.Видимость    = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость = ИСТИНА;
			
			Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			КонецЕсли; 
			
		Иначе
			Элементы.СсылкаНаИзображение.Видимость    = ИСТИНА;
			Элементы.ИзображениеВБазеДанных.Видимость = ЛОЖЬ;
		КонецЕсли; 		
		
		Результат = ИСТИНА;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если НЕ СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если НЕ Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ЕдиницаИзмерения)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
	Иначе
		процентскидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену
		И Цена = 0 Тогда
		
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата - 1, ЛОЖЬ, Количество, Объект.Договор, , , Объект.Ссылка, , ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ПроцентСкидки = 0 
		И НЕ Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	ИначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	Иначе
		Возврат Номенклатура.Цена;	
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();  
	Иначе
		ПоказатьДолгКлиентаПоставщика();
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		// 	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(изколичества = ЛОЖЬ, СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		Если НЕ изколичества
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура 	= Номенклатура;
				СтрокаТовара.Количество 	= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НеМенятьЦену
			И НЕ изколичества 
			И НЕ ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
		Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;
		
		ПоказатьТовар();
		
	Иначе
		СтрокаТовара.Цена  = 0;
		СтрокаТовара.Сумма = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		// 	ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	обновитьНаименованиеформы();
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
	ВыводНадписиПоФормуле();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ПриСменеКонтрагента()	
	
	ПроверитьСменуТипа();
	КлиентПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	ПоказатьДолгКлиентаПоставщика();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001750", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьУчетВалют 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		УчетПоПоставщикам 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		УчетПоКлиентам 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		УчетЗаказовПоставщикам					= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
		УчетЗаказовКлиентов						= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		ВестиУчетПоСкладам 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДвиженияДенег 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетДенегВНесколькихХранилищах 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		Элементы.ПланОплатыФормаОплаты.Видимость= НЕ ВестиУчетДенегВНесколькихХранилищах;		
		СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями");
		СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями");
		СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями");
		СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями");
		ПоказыватьИзображения 					= СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
		ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену = ИспользоватьСложныйМеханизмЦен И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВПриходномДокументеНеЗаполнятьЗакупочнуюЦену");
		ИспользоватьСторнированиеДокументов	 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ИспользоватьСкидки						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость 	= НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ПечатьЧека.Видимость 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПоступления");
		
		ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		
		ДоступенТолькоВозврат = ЛОЖЬ;
		
		Элементы.Клиент.ВыбиратьТип = НЕ ДоступенТолькоВозврат;
		
		Если ДоступенТолькоВозврат Тогда
			Элементы.ВозвратОтПокупателя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент (для возврата)");
		КонецЕсли;
		
		Если ИспользоватьПодключаемоеОборудование тогда
			ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
			
			Дисплеи.ЗагрузитьЗначения(
			МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя",,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));	
		Иначе
			фр = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда		
			Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Объект.ЭтоЗаказ = ИСТИНА;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если ИспользоватьСложныйМеханизмЦен 
				И НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Если ЗначениеЗаполнено(Объект.Склад)
					И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
					
					Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
						Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик ) Тогда			
				Если НЕ УчетПоПоставщикам Тогда
					Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо");	
				Иначе
					Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
					Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;		
			
			ВидЦенПриИзмененииНаСервере(ИСТИНА);
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных");
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			Если НЕ ЗначениеЗаполнено(СостояниеЗаказа) Тогда
				СостояниеЗаказа = Перечисления.СостоянияЗаказаПоставщику.Формируется ;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки) Тогда
				
				Объект.ДатаОтсрочки = Объект.Дата + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			ОбновитьДатуОтсрочки();
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
		Иначе
			Если НЕ Объект.Проведен тогда
				
				Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
				ОбновитьКурсСтрок();
				
				ПересчитатьСуммуПрочихРасходов();
				
			КонецЕсли;
			
			Элементы.Курс.Видимость = не Объект.Курс = 1 и ИспользоватьУчетВалют;
			
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ЛОЖЬ;								
			ОбновитьСостояниеЗаказа();
			
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность 	= ЛОЖЬ;	
			КонецЕсли;
			
			Элементы.ТоварыЦена.Доступность 	= ЛОЖЬ;
			Элементы.ТоварыСумма.Доступность 	= ЛОЖЬ;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		Элементы.НаименованиеОсновнойВалюты.Видимость = ВестиУчетДвиженияДенег и не ИспользоватьУчетВалют;
		Элементы.Декорация1.Видимость 				  = ВестиУчетДвиженияДенег; 
		Элементы.ВидЦенВалютаЦены.Видимость = ИспользоватьСложныйМеханизмЦен;
		
		Если НЕ УчетПоКлиентам 
			И НЕ УчетПоПоставщикам Тогда
			
			Элементы.УкажитеВидДокумента.Видимость = ИСТИНА;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
				Иначе	
					УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Приобретение;
				КонецЕсли;
				
			Иначе
				УкажитеВидДокумента = Перечисления.ВидыДокументаПриходаТовара.Оприходование;
			КонецЕсли;
			
			Элементы.ВидДокумента.Видимость 		= ЛОЖЬ;
		КонецЕсли;   	
		
		ИзменитьВидДокумента();
		ПоказатьДолгКлиентаПоставщика();
		
		КлиентПриИзмененииНаСервере(ИСТИНА);	
		ВидимостьДополнительныхРасходов();
		
		Если ИспользоватьУчетВалют
			И ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			ВидЦенВалютаЦены = Объект.ВидЦен.ВалютаЦены;
		Иначе
			ВидЦенВалютаЦены = ОсновнаяВалюта;
		КонецЕсли;
		
		ВключитьМеханизмПодбораНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента); 	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000894", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				ВестиУчетДвиженияДенегТолькоЧтение = ИСТИНА;
				Элементы.ВзятьСуммуПоДокументу.Видимость 		 = ЛОЖЬ;
				Элементы.ГруппаВыбыло.ТолькоПросмотр 		 	 = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаВыбыло.Видимость 		 = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	// Ссылка = Объект.Ссылка;
	// Валюта = Объект.Валюта;
	// Дата   = Объект.Дата;
	// видцен = Объект.ВидЦен;
	// ВыбылоДенег    = Объект.ВыбылоДенег;
	// ДополнительныеРасходы = Объект.ДополнительныеРасходы;
	// ХранилищеДенег = Объект.ХранилищеДенег;
	// ЭтоЗаказ = Объект.ЭтоЗаказ;
	// Товары = Объект.Товары;
	// Договор = Объект.Договор;
	// КлиентПоставщик = Объект.КлиентПоставщик;
	// ТовараНаСумму = Объект.ТовараНаСумму;
	// ТовараВКоличестве = Объект.ТовараВКоличестве;	
	// Склад = Объект.Склад;
	// 
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		ПересчитатьНасильно = ЛОЖЬ;
		
		// сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			И СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			И НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			КонецЕсли;
			
			ПересчитатьНасильно = ИСТИНА;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.Цена 	= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
				СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЦикла;
		КонецЕсли;  
		
		Возврат ИСТИНА;
		
	Иначе // не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ЛОЖЬ;
			
		ИначеЕсли НЕ УчетПоКлиентам       			
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Возврат ИСТИНА;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекСтр.Номенклатура);	
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекСтр.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры(, ТекСтр);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)	
	ПриИзмененииНоменклатуры(, ТекСтр);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(, Строка, ИСТИНА);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекСтр = Элементы.Товары.ТекущиеДанные;	
	ПоказатьТовар();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта.Видимость = ВидимостьВалюты;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.Валюта = Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));				
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПоставщикуПриИзменении(Элемент)
	
	СтруктураСостояния  = ОбщийМодульСервер.УстановитьСостояниеЗаказа(Объект.Ссылка, ОбщийМодульСервисСервер.ПользователяТекущаяДата(), СостояниеЗаказа);
	СостояниеЗаказа 	= СтруктураСостояния.Состояние;
	СменаСостояния   	= СтруктураСостояния.Смена;
	Элементы.Разница.Заголовок = "";
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.КлиентПоставщик, Объект.Договор, Объект.Организация, , Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ПланОплатыПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

ТекСтр = Неопределено;
