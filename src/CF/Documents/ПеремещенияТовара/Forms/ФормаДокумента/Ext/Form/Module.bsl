//sza140509-0502 SZA: 
//sza130909-0106 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000810", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьСложныйМеханизмЦен 			  = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьПодключаемоеОборудование 	  = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		УчетПоСериям							  = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		ЗапретитьТоварВПути 					  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеИспользоватьПеремещениеТовараЧерезСкладТоварВПути");		
		элементы.ТоварыВводСКоличеством.Видимость = НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПеремещения");
		
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Параметры.Склад;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад ) Тогда
				Объект.Склад = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен ) тогда
				
				если ЗначениеЗаполнено(Объект.Склад)
					и ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
					
					Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
				Иначе
					Объект.ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен");
				КонецЕсли;	
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			ВидЦенПриИзмененииНаСервере();
			ОбновитьДанныеДокумента();
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах");
			
		Иначе
			если не Объект.Проведен Тогда				
				ОбновитьДанныеДокумента();			
			КонецЕсли;
			СкладКудаПриИзмененииНаСервере();
			ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = Ложь;
			
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость = ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") тогда
			если ЗначениеЗаполнено(объект.ВидЦен) Тогда
				элементы.ВидЦен.Доступность = Ложь;	
			КонецЕсли;
			элементы.ТоварыЦена.Доступность = Ложь;
		КонецЕсли;
		
		СерииНоменклатурыВидны = УчетПоСериям И ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
		Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
		
		Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		
		Если ЗначениеЗаполнено(Объект.Дата)
			и НЕ ЗначениеЗаполнено(Объект.ДатаПрибытия) Тогда
			
			Объект.ДатаПрибытия = Объект.Дата;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Дата)
			и ЗначениеЗаполнено(Объект.ДатаПрибытия)
			и не объект.ДатаПрибытия = объект.Дата Тогда
			
			ЗапретитьТоварВПути = Ложь;
		КонецЕсли;
		
		Если ЗапретитьТоварВПути Тогда
			Элементы.Дата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата перемещения");
			Элементы.ДатаПрибытия.Видимость = Ложь;
			Элементы.СкладКуда.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество, , Истина); 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                             // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСкладВПути.Видимость = не ЗапретитьТоварВПути и (не объект.Дата = объект.ДатаПрибытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	конецесли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	Результат = Истина;
	
	СтруктураПараметров = Новый Структура("Номенклатура, Количество");
	СтруктураРезультат	= ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина, , Объект.Дата);
	номенклатура = СтруктураРезультат.номенклатура;
	
	Если ЗначениеЗаполнено(номенклатура) Тогда
		
		СтруктураПараметров.Вставить("СерияНоменклатуры", СтруктураРезультат.СерияНоменклатуры);		
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтруктураРезультат.ЕдиницаИзмерения);		
		Если ИспользоватьСложныйМеханизмЦен  тогда
			СтруктураПараметров.Вставить("Номенклатура", Номенклатура);		
			СтруктураПараметров.Вставить("Цена", ОбщийМодульСервер.ПолучитьСложнуюЦену(Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , СтруктураРезультат.ЕдиницаИзмерения));
		иначе
			СтруктураПараметров.Вставить("Цена", Номенклатура.Цена);
		КонецЕсли;
		СтруктураПараметров.Вставить("Количество", ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура));
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		
	иначе		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден(") + ТекКод + ").");
		Результат = ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(СтруктураПараметров, НеСтановитсяНаЭтуСтроку = Ложь, МножительДляКоличества = 1)
	
	Номенклатура 			= СтруктураПараметров.Номенклатура;
	серияНоменклатуры 		= СтруктураПараметров.серияНоменклатуры;
	ЕдиницаИзмерения 		= СтруктураПараметров.ЕдиницаИзмерения;
	
	ТоварВедетсяПоСериям 	= УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) и ЗначениеЗаполнено(серияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", серияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	если не ДокументЗаблокирован Тогда
		Если СтрокаТовара.Количество() = 0 Тогда
			
			СтрокаТовара = Объект.Товары.Добавить();				
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
			КонецЕсли;
			
		иначе
			СтрокаТовара = СтрокаТовара[0]; 
		КонецЕсли;
		
		СтрокаТовара.Номенклатура = СтруктураПараметров.Номенклатура;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + СтруктураПараметров.Количество * МножительДляКоличества;
		если ТоварВедетсяПоСериям тогда
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
			СтрокаТовара.Количество = 1;
		конецесли;
		
		если НЕ СтруктураПараметров.Свойство("Цена", СтрокаТовара.Цена) тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		если не НеСтановитсяНаЭтуСтроку тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;	
		КонецЕсли;
		
	иначеЕсли не НеСтановитсяНаЭтуСтроку
		и НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;
		
	КонецЕсли;                             	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		конецесли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = неопределено;
	
	Состав = новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		иначе
			ДобавитьПозициюНоменклатуры(строкасостава, Истина, Количество);
		конецесли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено, Знач НеМенятьЦену = Ложь) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);	
		КонецЕсли;
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = Истина;	
			КонецЕсли;             	
			
		КонецЕсли;	
		
		Если НЕ НеМенятьЦену Тогда
			СтрокаТовара.Цена 	= ЦенаНаСервере(Номенклатура, СтрокаТовара.ЕдиницаИзмерения);	
		КонецЕсли;
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество) ;
		КонецЕсли;	
	КонецЕсли;
	
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаСервере
Функция   ЦенаНаСервере(Знач Номенклатура, Знач ЕдиницаИзмерения)
	Возврат ПолучитьЦенуНаСервере(Номенклатура, ЕдиницаИзмерения);
КонецФункции //ЦенаНаСервере

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	
	СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	Если ЗначениеЗаполнено(Номенклатура) Тогда		
		
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество) ;
		КонецЕсли;
		
		Если УчетПоСериям 
			И СтрокаТовара.Количество = 1 Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= Истина;		
			КонецЕсли;             	
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьСклады(Команда)
	
	Склад = Объект.Склад;
	Объект.Склад 		= Объект.СкладКуда;
	Объект.СкладКуда 	= Склад;
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ложь)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда
		Элементы.ТоварыВводШтрихКода.Доступность 			= Ложь;
		Элементы.ТоварыВводСКоличеством.Доступность 		= Ложь;
		Элементы.ТоварыЗаполнитьУчетнымиДанными.Доступность = Ложь;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Доступность 			= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Доступность 		= истина;
		Элементы.ТоварыЗаполнитьУчетнымиДанными.Доступность = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	если не СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач ЕдиницаИзмерения)
	
	Если ИспользоватьСложныйМеханизмЦен  тогда
		Возврат ОбщийМодульСервер.ПолучитьСложнуюЦену(Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , ЕдиницаИзмерения);
	иначе
		Возврат Номенклатура.Цена;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьДанныеДокумента();
	
	Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество) ;	
	КонецЦикла;
	
КонецПроцедуры //ПереСчитатьУчетныеОстатки

&НаСервере
Функция   остатоктоваравстроке(Знач Номенклатура, Знач Количество)
	
	если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) + Количество;	
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Если ИспользоватьСложныйМеханизмЦен 
		и НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;
		Если ЗначениеЗаполнено(Объект.Склад) 
			и ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
			
			Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен ;
		КонецЕсли;                               	
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьДанныеДокумента

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетнымиДанными(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ЗаполнитьУчетнымиДаннымиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнымиДаннымиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.СуммаОстаток,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.Номенклатура
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ) КАК ТоварыОстатки ";
	
	Если ЗначениеЗаполнено(объект.Склад) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыОстатки.Склад = &Склад";	
		Запрос.УстановитьПараметр("Склад", объект.Склад);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатка", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= ВыборкаДетальныеЗаписи.номенклатура;
			СтрокаТовара.Количество 	= ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СтрокаТовара.цена 			= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма 			= СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;                            	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		и ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	ПараметрыФормы.Вставить("ИзПеремещения", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		ПриИзмененииНоменклатуры();
		элементы.Товары.ЗакончитьРедактированиеСтроки(лОЖЬ);
		Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ИзПеремещения", Истина);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", Истина);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 		
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	конецесли;
	
	Если НЕ Отказ 
		и объект.Товары.Количество() > 10 Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПрибытия) Тогда
		Объект.ДатаПрибытия = Объект.Дата;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	если не отказ тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура СкладКудаПриИзменении(Элемент)
	СкладКудаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладКудаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(объект.СкладКуда) 
		и ЗначениеЗаполнено(объект.СкладКуда.ОбязательныйВидЦенПриПеремещенииНаЭтотСклад) Тогда
		
		Объект.ВидЦен = объект.СкладКуда.ОбязательныйВидЦенПриПеремещенииНаЭтотСклад;
		Элементы.ВидЦен.Доступность = Ложь;
	иначе
		Элементы.ВидЦен.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.разблокироватьсканер.видимость	= СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если не отказ 
		и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	Если Не Отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	Ссылка = Объект.Ссылка;
	Дата   = Объект.Дата;
	Товары = Объект.Товары;
	Склад  = Объект.Склад; 
	
	ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
	ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
	
	ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
	ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать) ;
	
	СтруктураТаблиц 	= ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ОстаткиСледуетПроверять);
	ТаблицаЦенСписания  = СтруктураТаблиц.ТаблицаЦенСписания;
	если ОстаткиСледуетПроверять тогда
		ГТ = СтруктураТаблиц.ТаблицаОстатков;	
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		
		Номенклатура = ТекСтрокаТовары.Номенклатура;
		НоменклатураПредопределенный = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
		
		СуммаОстаток 	  = 0;
		КоличествоОстаток = 0;
		
		если ОстаткиСледуетПроверять тогда
			СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
			Если не СтрокаОстаток = Неопределено Тогда
				КоличествоОстаток = СтрокаОстаток.КоличествоОстаток;
				СуммаОстаток = СтрокаОстаток.СуммаОстаток;
			КонецЕсли;
		КонецЕсли;
		
		Если ОстаткиСледуетПроверять
			и НЕ НоменклатураПредопределенный Тогда
			
			Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, ТекСтрокаТовары.Количество, Дата, Истина, КоличествоОстаток, Ссылка);
		КонецЕсли;				
		
		если не отказ 
			и ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда				
			
			отказ = обработатьотказдвижениядлянабора(Отказ, Номенклатура, ТекСтрокаТовары.Количество, ТекСтрокаТовары.Сумма, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

Функция   обработатьотказдвижениядлянабора(Отказ, Знач Номенклатура, Знач КоличествоВх, Знач Сумма = 0, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		Количество = КоличествоВх * СтрокаСоставаНабора.Количество;	
		
		СуммаЭлемента = 0; //СуммаЭлемента при перемещении принебречь
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			обработатьотказдвижениядлянабора(Отказ, НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		иначе
			
			ЭлементПредопределенный = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			если не ЭлементПредопределенный тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Объект.Склад, НоменклатураСостава, Количество, Объект.Дата, Истина, , Объект.Ссылка);
				
			КонецЕсли;		
		КонецЕсли;					
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура НаПечатьБезСерий(Команда)
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьБезСерий(ФормаПечати.Результат, Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = Ложь;
	ФормаПечати.Результат.Защита 		  = Истина;
	ФормаПечати.Результат.ТолькоПросмотр  = Истина;
	ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Перемещение товара");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаСервере
Процедура ПечатьБезСерий(ТабДок, Знач ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Поступление без серий. "), 2);
	Документы.ПеремещенияТовара.ПечатьБезСерий(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", Истина);
	//ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка, Истина);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДатаПрибытия < ОБъект.Дата Тогда
		Объект.ДатаПрибытия = ОБъект.Дата;		
	КонецЕсли;
	
	Элементы.ГруппаСкладВПути.Видимость = не ЗапретитьТоварВПути и (не объект.Дата = объект.ДатаПрибытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПрибытияПриИзменении(Элемент)
	
	Если Объект.Дата > объект.ДатаПрибытия Тогда
		Объект.Дата = объект.ДатаПрибытия;
		
	ИначеЕсли Объект.Дата < объект.ДатаПрибытия Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладВПути) Тогда
			Объект.СкладВПути = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути");
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.ГруппаСкладВПути.Видимость = не ЗапретитьТоварВПути и (не объект.Дата = объект.ДатаПрибытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПеремещения(Команда)
	
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод;
	ПеременнаяТипаСтандартныйПериод.ДатаНачала = Объект.Дата;
	ПеременнаяТипаСтандартныйПериод.ДатаОкончания = Объект.ДатаПрибытия;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПеременнаяТипаСтандартныйПериод;
	Если Диалог.Редактировать() Тогда 
		ПеременнаяТипаСтандартныйПериод = Диалог.Период;
		
		Объект.Дата = ПеременнаяТипаСтандартныйПериод.ДатаНачала;
		Объект.ДатаПрибытия = ПеременнаяТипаСтандартныйПериод.ДатаОкончания;
		
		Если Объект.Дата > объект.ДатаПрибытия Тогда
			Объект.Дата = объект.ДатаПрибытия;
			
		ИначеЕсли Объект.Дата < объект.ДатаПрибытия Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СкладВПути) Тогда
				Объект.СкладВПути = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути");
			КонецЕсли;
			Элементы.ГруппаСкладВПути.Видимость = не ЗапретитьТоварВПути и (не объект.Дата = объект.ДатаПрибытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		и НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры
