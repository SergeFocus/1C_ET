// sza151101-2347 перемещал
// sza150620-0034 
// sza150112-0420
// sza150111-0238 НЧ
// sza141228-0606 
// sza140710-0038  СменитьВидОтображенияДокумента
// sza140701-1649  
// sza140509-0502  
// sza130909-0106 : 

&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ИзПеремещения", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ИСТИНА);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 		
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаклиенте(ТекКод);
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПеремещения(Команда)
	
	ПеременнаяТипаСтандартныйПериод = Новый СтандартныйПериод;
	ПеременнаяТипаСтандартныйПериод.ДатаНачала = Объект.Дата;
	ПеременнаяТипаСтандартныйПериод.ДатаОкончания = Объект.ДатаПрибытия;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПеременнаяТипаСтандартныйПериод;
	Диалог.Показать(Новый ОписаниеОповещения("ВыбратьПериодПеремещенияЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПеремещенияЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;	
	
	Если Период Тогда 
		ПеременнаяТипаСтандартныйПериод = Диалог.Период;
		
		Объект.Дата = ПеременнаяТипаСтандартныйПериод.ДатаНачала;
		Объект.ДатаПрибытия = ПеременнаяТипаСтандартныйПериод.ДатаОкончания;
		
		Если Объект.Дата > Объект.ДатаПрибытия Тогда
			Объект.Дата = Объект.ДатаПрибытия;
			
		ИначеЕсли Объект.Дата < Объект.ДатаПрибытия Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СкладВПути) Тогда
				Объект.СкладВПути = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути");
			КонецЕсли;
			
			ДвижетсяНеМгновенно = НЕ ЗапретитьТоварВПути И (НЕ Объект.Дата = Объект.ДатаПрибытия);
			Элементы.ГруппаСкладВПути.Видимость = ДвижетсяНеМгновенно;
			Элементы.Перемещал.Видимость = ДвижетсяНеМгновенно;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПрибытияПриИзменении(Элемент)
	
	Если Объект.Дата > Объект.ДатаПрибытия Тогда
		Объект.Дата = Объект.ДатаПрибытия;
		
	ИначеЕсли Объект.Дата < Объект.ДатаПрибытия Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СкладВПути) Тогда
			Объект.СкладВПути = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути");
		КонецЕсли;		
	КонецЕсли;
	
			ДвижетсяНеМгновенно = НЕ ЗапретитьТоварВПути И (НЕ Объект.Дата = Объект.ДатаПрибытия);
			Элементы.ГруппаСкладВПути.Видимость = ДвижетсяНеМгновенно;
			Элементы.Перемещал.Видимость = ДвижетсяНеМгновенно;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если Объект.ДатаПрибытия < Объект.Дата Тогда
		Объект.ДатаПрибытия = Объект.Дата;		
	КонецЕсли;
	
			ДвижетсяНеМгновенно = НЕ ЗапретитьТоварВПути И (НЕ Объект.Дата = Объект.ДатаПрибытия);
			Элементы.ГруппаСкладВПути.Видимость = ДвижетсяНеМгновенно;
			Элементы.Перемещал.Видимость = ДвижетсяНеМгновенно;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ПеремещенияТовара"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач СтруктураПараметров, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач МножительДляКоличества = 1)
	
	Номенклатура 			= СтруктураПараметров.Номенклатура;
	серияНоменклатуры 		= СтруктураПараметров.серияНоменклатуры;
	ЕдиницаИзмерения 		= СтруктураПараметров.ЕдиницаИзмерения;
	
	ТоварВедетсяПоСериям 	= УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) и ЗначениеЗаполнено(серияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", серияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		Если СтрокаТовара.Количество() = 0 Тогда
			
			СтрокаТовара = Объект.Товары.Добавить();				
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;
			
		Иначе
			СтрокаТовара = СтрокаТовара[0]; 
		КонецЕсли;
		
		СтрокаТовара.Номенклатура = СтруктураПараметров.Номенклатура;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + СтруктураПараметров.Количество * МножительДляКоличества;
		Если ТоварВедетсяПоСериям тогда
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("Цена", СтрокаТовара.Цена) Тогда
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);	
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		Если НЕ НеСтановитсяНаЭтуСтроку тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;	
		КонецЕсли;
		
	ИначеЕсли не НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличество;
		
	КонецЕсли;                             	
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(строкасостава, ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетнымиДанными(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ЗаполнитьУчетнымиДаннымиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнымиДаннымиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.СуммаОстаток,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.Номенклатура
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ) КАК ТоварыОстатки ";
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыОстатки.Склад = &Склад";	
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатка", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= ВыборкаДетальныеЗаписи.номенклатура;
			СтрокаТовара.Количество 	= ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СтрокаТовара.цена 			= ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения);
			СтрокаТовара.Сумма 			= СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЦикла;                            	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаПечатьБезСерий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьБезСерий(ФормаПечати.Результат, Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
	ФормаПечати.Результат.Защита 		  = ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Перемещение товара");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Если ИспользоватьСложныйМеханизмЦен 
		И НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
		Если ЗначениеЗаполнено(Объект.Склад) 
			И ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
			
			Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		КонецЕсли;                               	
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеДокумента

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000812") Тогда
		Элементы.ТоварыВводШтрихКода.Видимость 			  = ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость 		  = ЛОЖЬ;
		Элементы.ТоварыЗаполнитьУчетнымиДанными.Видимость = ЛОЖЬ;
		Элементы.ВыбратьПериодПеремещения.Видимость 	  = ЛОЖЬ;
		Элементы.ПоменятьСклады.Видимость 	  			  = ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Видимость 	  = ЛОЖЬ;
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Видимость 			  = ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Видимость 		  = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ТоварыЗаполнитьУчетнымиДанными.Видимость = ИСТИНА;
		Элементы.ВыбратьПериодПеремещения.Видимость 	  = ИСТИНА;
		Элементы.ПоменятьСклады.Видимость 	  			  = ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Видимость 	  = ВключитьМеханизмПодбораНоменклатуры;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ОбработатьОтказДвиженияДляНабора(Отказ, Знач Номенклатура, Знач КоличествоВх, Знач Сумма = 0, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка) // для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		Количество = КоличествоВх * СтрокаСоставаНабора.Количество;	
		
		СуммаЭлемента = 0; // СуммаЭлемента при перемещении принебречь
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			обработатьотказдвижениядлянабора(Отказ, НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		Иначе
			
			ЭлементПредопределенный = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ЭлементПредопределенный тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Объект.Склад, НоменклатураСостава, Количество, Объект.Дата, ИСТИНА, , Объект.Ссылка);
				
			КонецЕсли;		
		КонецЕсли;					
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = ИСТИНА;
	
	СтруктураПараметров = Новый Структура("Номенклатура, Количество");
	СтруктураРезультат	= ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
	номенклатура = СтруктураРезультат.номенклатура;
	
	Если НЕ ЗначениеЗаполнено(номенклатура)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры") Тогда
		
		Вацчер = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
		Если ЗначениеЗаполнено(Вацчер) Тогда
			Номенклатура = Вацчер.Номенклатура;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(номенклатура) Тогда
		
		СтруктураПараметров.Вставить("СерияНоменклатуры", СтруктураРезультат.СерияНоменклатуры);		
		СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтруктураРезультат.ЕдиницаИзмерения);		
		Если ИспользоватьСложныйМеханизмЦен  тогда
			СтруктураПараметров.Вставить("Номенклатура", Номенклатура);		
			СтруктураПараметров.Вставить("Цена", ОбщийМодульСервер.ПолучитьСложнуюЦену(Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , СтруктураРезультат.ЕдиницаИзмерения));
		Иначе
			СтруктураПараметров.Вставить("Цена", Номенклатура.Цена);
		КонецЕсли;
		СтруктураПараметров.Вставить("Количество", ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура));
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		
	Иначе		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Функция   ОстатокТовараВСтроке(Знач Номенклатура, Знач Количество, Знач НаСкладеПолучателе = ЛОЖЬ)
	
	Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе
		Если НаСкладеПолучателе Тогда
			Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.СкладКуда, Объект.ДатаПрибытия) + Количество;
		Иначе
			Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) - Количество;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ 
		И Объект.Товары.Количество() > 10 Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПрибытия) Тогда
		Объект.ДатаПрибытия = Объект.Дата;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ отказ 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента   = ОстатокТовараВСтроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
		СтрокаТовара.РезультатСУчетомДокумента = ОстатокТовараВСтроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры // ПереСчитатьУчетныеОстатки

&НаСервере
Процедура ПечатьБезСерий(ТабДок, Знач ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Поступление без серий."), 2);
	Документы.ПеремещенияТовара.ПечатьБезСерий(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ЛОЖЬ);
	// ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач ЕдиницаИзмерения)
	
	Если ИспользоватьСложныйМеханизмЦен  тогда
		Возврат ОбщийМодульСервер.ПолучитьСложнуюЦену(Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , ЕдиницаИзмерения);
	Иначе
		Возврат Номенклатура.Цена;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоменятьСклады(Команда)
	
	Склад = Объект.Склад;
	Объект.Склад 		= Объект.СкладКуда;
	Объект.СкладКуда 	= Склад;
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = ТекСтр
	КонецЕсли;
	
	Если СтрокаТовара = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;             	
			
		КонецЕсли;	
		
		Если НЕ НеМенятьЦену Тогда
			СтрокаТовара.Цена 	= ЦенаНаСервере(Номенклатура, СтрокаТовара.ЕдиницаИзмерения);	
		КонецЕсли;
		Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = ОстатокТовараВСтроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;	
	КонецЕсли;
	
	СтрокаТовара.Сумма 	= СтрокаТовара.Цена * СтрокаТовара.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
			ДвижетсяНеМгновенно = НЕ ЗапретитьТоварВПути И (НЕ Объект.Дата = Объект.ДатаПрибытия);
			Элементы.ГруппаСкладВПути.Видимость = ДвижетсяНеМгновенно;
			Элементы.Перемещал.Видимость = ДвижетсяНеМгновенно;
			
			СменитьВидОтображенияДокумента(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000810", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		
		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		
		ЗапретитьТоварВПути = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеИспользоватьПеремещениеТовараЧерезСкладТоварВПути");
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляПеремещения");
		ИспользоватьСторнированиеДокументов	 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Параметры.Склад;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад ) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен ) Тогда
				
				Если ЗначениеЗаполнено(Объект.Склад)
					И ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
					
					Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
				Иначе
					Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;	
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			ВидЦенПриИзмененииНаСервере();
			ОбновитьДанныеДокумента();
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных");
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
		Иначе
			Если НЕ Объект.Проведен Тогда				
				ОбновитьДанныеДокумента();			
			КонецЕсли;
			СкладКудаПриИзмененииНаСервере();
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ЛОЖЬ;
			
		КонецЕсли;
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость   = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		Элементы.ТоварыРезультатСУчетомДокумента.Видимость = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.ТоварыЦена.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
		СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
		Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
		
		ВключитьМеханизмПодбораНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		
		Если ЗначениеЗаполнено(Объект.Дата)
			И НЕ ЗначениеЗаполнено(Объект.ДатаПрибытия) Тогда
			
			Объект.ДатаПрибытия = Объект.Дата;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Дата)
			И ЗначениеЗаполнено(Объект.ДатаПрибытия)
			И НЕ Объект.ДатаПрибытия = Объект.Дата Тогда
			
			ЗапретитьТоварВПути = ЛОЖЬ;
		КонецЕсли;
		
		Если ЗапретитьТоварВПути Тогда
			Элементы.Дата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата перемещения");
			Элементы.ДатаПрибытия.Видимость = ЛОЖЬ;
			Элементы.СкладКуда.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество, , ИСТИНА); 	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыРезультатСУчетомДокумента);
		
		Если Параметры.ОперацияСВаучерами Тогда
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переместить ваучеры");
			Исключение // нет прав
			КонецПопытки;
			Элементы.ТоварыНоменклатура.Заголовок 	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры");
			Элементы.ТоварыПодборНоменклатуры.Видимость = ЛОЖЬ;
			
			ЭтоВаучер = ИСТИНА;
			Объект.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещение ваучеров");
		КонецЕсли;
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	Ссылка = Объект.Ссылка;
	Дата   = Объект.Дата;
	Товары = Объект.Товары;
	Склад  = Объект.Склад; 
	
	ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
	ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
	
	ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
	ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
	И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
	
	СтруктураТаблиц 	= ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ОстаткиСледуетПроверять);
	ТаблицаЦенСписания  = СтруктураТаблиц.ТаблицаЦенСписания;
	Если ОстаткиСледуетПроверять тогда
		ГТ = СтруктураТаблиц.ТаблицаОстатков;	
	КонецЕсли;
	
	Для Каждого ТекСтрокаТовара Из Товары Цикл
		
		Номенклатура = ТекСтрокаТовара.Номенклатура;
		НоменклатураПредопределенный = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
		
		СуммаОстаток 	  = 0;
		КоличествоОстаток = 0;
		
		Если ОстаткиСледуетПроверять тогда
			СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
			Если НЕ СтрокаОстаток = Неопределено Тогда
				КоличествоОстаток = СтрокаОстаток.КоличествоОстаток;
				СуммаОстаток = СтрокаОстаток.СуммаОстаток;
			КонецЕсли;
		КонецЕсли;
		
		Если ОстаткиСледуетПроверять
			И НЕ НоменклатураПредопределенный Тогда
			
			Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, ТекСтрокаТовара.Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);
		КонецЕсли;				
		
		Если НЕ отказ 
			И ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда				
			
			отказ = обработатьотказдвижениядлянабора(Отказ, Номенклатура, ТекСтрокаТовара.Количество, ТекСтрокаТовара.Сумма, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции // ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.разблокироватьсканер.видимость	= СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладКудаПриИзменении(Элемент)
	СкладКудаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладКудаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СкладКуда) 
		И ЗначениеЗаполнено(Объект.СкладКуда.ОбязательныйВидЦенПриПеремещенииНаЭтотСклад) Тогда
		
		Объект.ВидЦен = Объект.СкладКуда.ОбязательныйВидЦенПриПеремещенииНаЭтотСклад;
		Элементы.ВидЦен.Доступность = ЛОЖЬ;
	Иначе
		Элементы.ВидЦен.Доступность = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьДанныеДокумента();
	
	Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры(ТекСтр) ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	
	СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
	Если ЗначениеЗаполнено(Номенклатура) Тогда		
		
		Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = ОстатокТовараВСтроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;
		
		Если УчетПоСериям 
			И СтрокаТовара.Количество = 1 Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;	
				СерииНоменклатурыВидны 	= ИСТИНА;		
			КонецЕсли;             	
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Номенклатура = Неопределено;
	
	Если ЭтоВаучер Тогда
		
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.Форма.ФормаВыбораВаучера");
		Номенклатура = ФормаВыбора.ОткрытьМодально();
		
	Иначе	
		ПараметрыФормы = Новый Структура;
		Если ИспользоватьСложныйМеханизмЦен
			И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
		КонецЕсли;	
		ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
		ПараметрыФормы.Вставить("ИзПеремещения", ИСТИНА);
		Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);	
		КонецЕсли;
		
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);	
		Номенклатура = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;			
		ПриИзмененииНоменклатуры(ТекСтр) ;	
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекущиеДанные	= ТекСтр;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(ТекущиеДанные) ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент) 	
	ПриИзмененииНоменклатуры(ТекСтр) ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена 			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка, ИСТИНА);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТовара.Количество = 0 тогда
		СтрокаТовара.Цена = СтрокаТовара.Сумма / СтрокаТовара.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ЦенаНаСервере(Знач Номенклатура, Знач ЕдиницаИзмерения)
	Возврат ПолучитьЦенуНаСервере(Номенклатура, ЕдиницаИзмерения);
КонецФункции // ЦенаНаСервере

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	ПредставитьДокументДвумяКолонками = не ПредставитьДокументДвумяКолонками;
	СменитьВидОтображенияДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОтображенияДокумента(Знач ПриОткрытии = ЛОЖЬ)
	
	Если ПредставитьДокументДвумяКолонками Тогда
		Элементы.Переместить(Элементы.ФормаГруппаГлоб, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаСкладОткуда, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаСкладВПути, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаКомандШапки, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаСкладКуда, Элементы.ГруппаСлеваАльтернативногоВида);
		
		Элементы.Переместить(Элементы.ГруппаОВидеЦен, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.КолонкаСправа, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаКомментарий, Элементы.ГруппаСлеваАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаСлеваАльтернативногоВида);
		
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаСправаАльтернативногоВида);
		Элементы.Переместить(Элементы.ГруппаПодвал, Элементы.ГруппаСправаАльтернативногоВида);
		
	ИначеЕсли НЕ ПриОткрытии Тогда
		
		Элементы.Переместить(Элементы.ФормаГруппаГлоб, Элементы.ГруппаОбычногоВида);
		Элементы.Переместить(Элементы.ГруппаСкладОткуда, Элементы.ГруппаПоСкладам);
		Элементы.Переместить(Элементы.ГруппаСкладВПути, Элементы.ГруппаПоСкладам);
		Элементы.Переместить(Элементы.ГруппаСкладКуда, Элементы.ГруппаПоСкладам);
		Элементы.Переместить(Элементы.ГруппаКомандШапки, Элементы.Склады);
		Элементы.Переместить(Элементы.ГруппаОВидеЦен, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.Товары, Элементы.ГруппаСлева);
		Элементы.Переместить(Элементы.ГруппаПодвал, Элементы.ГруппаСлева);
		
		Элементы.Переместить(Элементы.КолонкаСправа, Элементы.ГруппаГоризонт);
		Элементы.Переместить(Элементы.ГруппаГоризонт, Элементы.ГруппаОбычногоВида);		
		Элементы.Переместить(Элементы.ГруппаКомментарий, Элементы.ГруппаОбычногоВида);
		Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаОбычногоВида);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтр	= Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности();	
КонецПроцедуры
