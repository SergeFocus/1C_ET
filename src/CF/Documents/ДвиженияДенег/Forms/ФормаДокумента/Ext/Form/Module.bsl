//sza140118-1915 
//sza130901-2354 : 

Перем СтатьяПоступленияДенегПоУмолчанию;
Перем СтатьяРасходаДенегПоУмолчанию;

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидДокумента() 
	
	Если Объект.НачислениеИВыплатаЗаработнойПлаты Тогда		
		ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начисление, расчет и выдача Заработной платы");	
		
	Иначе		
		ЗначениеЗаполненоОбъектКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
		
		Если ЗначениеЗаполненоОбъектКлиентПоставщик тогда
			ТекущийДолг = 0;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1, Объект.Договор);
			КонецЕсли;
			
			Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") ТОгда
				Элементы.КлиентВСлучаеОплатыИлиВозврата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент (в случае оплаты клиентом за товар или возврата денег клиенту)");
				ЭтоРасчетысПоставщиком = Ложь;
				Если Объект.Статья = Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров Тогда
					Объект.Статья = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				КонецЕсли;
				
			Иначе
				ЭтоРасчетысПоставщиком = Истина;
				элементы.КлиентВСлучаеОплатыИлиВозврата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент (в случае оплаты за товар поставщику или возрата денег поставщиком)");	
				Если Объект.Статья = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации Тогда
					Объект.Статья = Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			КонецЕсли;
			
		иначе
			ТекущийДолг = 0;
		КонецЕсли;		
		
		элементы.ТекущийДолг.Видимость 			= не ТекущийДолг = 0;
		элементы.ПогаситьСуммуДолга.Видимость 	= не ТекущийДолг = 0;
		
		Если Объект.ЕстьПриход 
			и объект.ЕстьРасход Тогда
			
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет с Поставщиком");	
				иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет с Клиентом");
				КонецЕсли;
			иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");
			КонецЕсли;
			ЭтаФорма.Элементы.Сумма.ЦветФона = Новый Цвет(255, 255, 255);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма: ");
			
		ИначеЕсли Объект.ПриходДенег Тогда
			
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат от поставщика");	
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода за товар (сторно)");
				иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата клиента");
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья реализации (сторно)");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
					Объект.Статья = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				КонецЕсли;			
				
			иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход денег");
				ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья поступления: ");
				Если Объект.Статья = СтатьяПоступленияДенегПоУмолчанию Тогда
					Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;				
				КонецЕсли;			
			КонецЕсли;
			ЭтаФорма.Элементы.Сумма.ЦветФона = Новый Цвет(245, 255, 245);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступило сумма");
			
		Иначе
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				
				если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата поставщику");	
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода за товар");
				иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат денег клиенту");			
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья реализации");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
					Объект.Статья = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации;
				КонецЕсли;			
				ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья реализации");
				
			иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход денег");
				ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода");
				Если Объект.Статья = СтатьяРасходаДенегПоУмолчанию Тогда
					Объект.Статья = СтатьяРасходаДенегПоУмолчанию;
				КонецЕсли;	
			КонецЕсли;
			
			ЭтаФорма.Элементы.Сумма.ЦветФона = Новый Цвет(255, 245, 245);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбыло сумма");
			
		КонецЕсли;  	
	КонецЕсли;
	
КонецПроцедуры //ОбновитьВидДокумента

&НаКлиенте
Процедура ПриходДенегПриИзменении(Элемент)
	
	ОбновитьВидДокумента();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ВестиУчетЗарплатыСотрудников 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
	УчитыватьДеньгиВНесколькихХранилищах 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчитыватьДеньгиВНесколькихХранилищах");
	УчетПоОрганизациям 						= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС");
	Элементы.ПлатежиФормаОплаты.Видимость   = НЕ УчитыватьДеньгиВНесколькихХранилищах;
	ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
	Элементы.ПлатежиЗаказ.Видимость			= ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	Элементы.Заказ.Видимость				= НЕ ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	
	Если не Объект.НачислениеИВыплатаЗаработнойПлаты Тогда
		НачислениеИВыплатаЗаработнойПлаты = параметры.РасчетЗП И ВестиУчетЗарплатыСотрудников;		
	иначе
		НачислениеИВыплатаЗаработнойПлаты = истина;
	КонецЕсли;	
	
	Если не ВестиУчетЗарплатыСотрудников
		и НачислениеИВыплатаЗаработнойПлаты
		и (ОбщийМодульСерверПривилегия.ЕстьПользователи() 
		И НЕ РольДоступна("ПолныеПрава")
		И НЕ РольДоступна("Казначей")) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вам недоступна функция начисления и выдачи заработной платы!");
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
	
	Если НачислениеИВыплатаЗаработнойПлаты
		И ЗначениеЗаполнено(параметры.Сотрудник) Тогда
		
		ОтборПоСотруднику = параметры.Сотрудник; 		
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
	ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	ИспользоватьУчетВалют 				 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
	
	СтатьяПоступленияДенегПоУмолчанию 	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию");
	СтатьяРасходаДенегПоУмолчанию 		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию");
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если УчитыватьДеньгиВНесколькихХранилищах
			И не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
		КонецЕсли;
		
		Объект.НачислениеИВыплатаЗаработнойПлаты = НачислениеИВыплатаЗаработнойПлаты;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие") ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта ) Тогда
			Объект.Валюта 	= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
			Объект.Курс 	= 1;
		КонецЕсли;
		
		объект.ПриходДенег = НЕ объект.естьрасход;
		
		Если НЕ ЗначениеЗаполнено(Объект.Статья ) Тогда
			Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Если УчитыватьДеньгиВНесколькихХранилищах 
				И ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
			Иначе
				Объект.ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) тогда
			
			если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Объект.КлиентПоставщик = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");				
			Иначе
				Объект.КлиентПоставщик = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Поставщики.ПустаяСсылка()");
			КонецЕсли;					
			
			ОбновитьВидДокумента();
		КонецЕсли;
		
		Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата(); //для курса
		
		Если Объект.НачислениеИВыплатаЗаработнойПлаты Тогда
			ЗаполнитьНаСервере();	
		КонецЕсли;
		
	Иначе
		если не Объект.Проведен Тогда		
			
			Если Не ЗначениеЗаполнено(Объект.Курс) Тогда
				объект.Курс 			= ОбновитьКурс(Объект.Валюта, Объект.Дата);
				элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.КурсОбмена) Тогда
				Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеОсновнойВалюты = ОсновнаяВалюта.Наименование ;
	элементы.НаименованиеОсновнойВалюты.Видимость 	= не ИспользоватьУчетВалют;
	элементы.НаименованиеОсновнойВалюты1.Видимость 	= не ИспользоватьУчетВалют;
	
	элементы.Курс1.Видимость 		= не объект.валюта = ОсновнаяВалюта;
	элементы.КурсОбмена.Видимость 	= не объект.ВалютаОбмена = ОсновнаяВалюта;
	элементы.Курс.Видимость 		= не объект.Валюта = ОсновнаяВалюта;
	
	элементы.ФормаОплаты.Видимость 			= не объект.ВНесколькоСтрок и не УчитыватьДеньгиВНесколькихХранилищах;
	Элементы.ХранилищеДенег.Видимость 		= не объект.ВНесколькоСтрок и УчитыватьДеньгиВНесколькихХранилищах;
	Элементы.ХранилищеДенег1.Видимость 		= УчитыватьДеньгиВНесколькихХранилищах;
	Элементы.ХранилищеДенегОбмена.Видимость = УчитыватьДеньгиВНесколькихХранилищах;
	
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаСервереБезконтекста
Функция   ОбновитьКурс(Валюта, Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();
	ОбновитьВидДокумента();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагента()
	
	Если  ЗначениеЗаполнено(Объект.КлиентПоставщик) тогда
		если ИспользоватьУчетВалют
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
		КонецЕсли;	
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			И НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ не объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата);
		КонецЕсли;		
		
		Если УчитыватьДеньгиВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.КлиентПоставщик.ХранилищеДенег;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		
		ОбновитьВидимостьЭлементов();
		ОбработатьБлокировку();                                               	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(ПриСозданииФормы = ложь)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда
		Элементы.ГруппаБлоков.Доступность 		= Ложь;
		Элементы.ПогаситьСуммуДолга.Доступность = Ложь;
		Элементы.ОбработкаТаблицы.Доступность 	= Ложь;
		
	Иначе
		Элементы.ГруппаБлоков.Доступность 		= Истина;
		Элементы.ПогаситьСуммуДолга.Доступность = Истина;
		Элементы.ОбработкаТаблицы.Доступность 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
			
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
		
		ОбновитьВидДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
	конецесли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	Результат = Истина;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Ложь);
	
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		если не ДокументЗаблокирован Тогда
			ДобавитьДанныеНоменклатуры(РезультатОбработки);	
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар не найден (") + ТекКод + ").");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьДанныеНоменклатуры(Номенклатура)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	
	ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
	если ИспользоватьСложныйМеханизмЦен тогда
		если Объект.ПриходДенег тогда
			ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;
		Иначе
			ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен ;
		КонецЕсли;                               	
	КонецЕсли;
	
	Объект.Сумма = Объект.Сумма  +  ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Объект.Дата, Истина, , , , , Объект.Ссылка) * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьСуммуДолга(Команда)
	
	Если Объект.ВНесколькоСтрок Тогда
		
		СтрокаПлатежа = Объект.Платежи.Добавить();
		если ТекущийДолг > 0 тогда
			СтрокаПлатежа.ПриходИлиРасход = ПредопределенноеЗначение("Перечисление.ПриходРасход.Приход");
			СтрокаПлатежа.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
			СтрокаПлатежа.Сумма = ТекущийДолг ;
			
		иначе
			СтрокаПлатежа.ПриходИлиРасход = ПредопределенноеЗначение("Перечисление.ПриходРасход.Расход");
			СтрокаПлатежа.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
			СтрокаПлатежа.Сумма = -ТекущийДолг ;
			
		КонецЕсли;
		СтрокаПлатежа.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		СтрокаПлатежа.курс = 1;
		
	Иначе
		если ТекущийДолг > 0 тогда
			Объект.ПриходДенег = Истина;
			Объект.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
			Объект.Сумма = ТекущийДолг ;	
			
		иначе
			Объект.ПриходДенег = Ложь;
			Объект.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
			Объект.Сумма = -ТекущийДолг ;
			
		КонецЕсли;
		
		Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		Объект.курс = 1;
		
	КонецЕсли;
	
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("СтатьиДвиженияДенег", ДанныеВыбора, Текст, Объект.Статья);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") ТОгда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	Если Объект.НачислениеИВыплатаЗаработнойПлаты Тогда
		
		объект.Сумма = объект.Зарплата.Итог("Сумма") ;
		
		если объект.Сумма = 0 Тогда
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (начисление)");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислить зарплату");
		иначе
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (выплата)");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислить и выдать зарплату");
		КонецЕсли;
		
		Элементы.ГруппаЗП.Видимость = Истина;
		
		Элементы.ГруппаОбычноеДвижениеДенег.Видимость 	= Ложь;
		Элементы.ГруппаОбменВалют.Видимость 			= Ложь;	
		Элементы.ГруппаОдногоПлатежа.Видимость 			= Ложь;
		Элементы.ГруппаВНесколькоСтрок.Видимость 		= Ложь;
		Элементы.Декорация1.Видимость 					= Ложь;
		Элементы.ОбменВалют.Видимость 					= Ложь;
		Элементы.ГруппаПериодаРасчета.Видимость 		= НЕ Объект.Проведен;
		Элементы.ЗарплатаДолг.Видимость 				= НЕ Объект.Проведен;
		Элементы.ЗарплатаГруппаКолонокИстории.Видимость = НЕ Объект.Проведен;
		
		Объект.Статья = Справочники.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников;
		
	Иначе   		
		Элементы.ГруппаЗП.Видимость = Ложь;
		
		Если Объект.ОбменВалют
			и не ЗначениеЗаполнено(Объект.Статья) Тогда
			
			Объект.Статья = Справочники.СтатьиДвиженияДенег.ОбменВалют ;			
		КонецЕсли;
		
		Элементы.ГруппаОбычноеДвижениеДенег.Видимость 	= НЕ Объект.ОбменВалют;
		Элементы.ГруппаОбменВалют.Видимость 			= Объект.ОбменВалют;	
		Элементы.ВНесколькоСтрок.Видимость 				= не ДокументЗаблокирован И НЕ Объект.ОбменВалют;	
		Элементы.ОбменВалют.Видимость					= не ДокументЗаблокирован и не Объект.ВНесколькоСтрок;
		Элементы.Декорация1.Видимость 					= НЕ Объект.ОбменВалют;	
		Элементы.ГруппаОдногоПлатежа.Видимость 			= НЕ Объект.ВНесколькоСтрок;
		Элементы.ГруппаВНесколькоСтрок.Видимость 		= Объект.ВНесколькоСтрок;
		элементы.ФормаОплаты.Видимость 					= не объект.ВНесколькоСтрок и не УчитыватьДеньгиВНесколькихХранилищах;		
		Элементы.ХранилищеДенег.Видимость 				= не объект.ВНесколькоСтрок и УчитыватьДеньгиВНесколькихХранилищах;
		
		Если Объект.ОбменВалют Тогда
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обменять деньги");
			
		ИначеЕсли Объект.ЕстьПриход 
			и Объект.ЕстьРасход Тогда
			
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести движение денег и закрыть");
			
		ИначеЕсли Объект.ПриходДенег Тогда
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять Деньги");
			
		Иначе
			Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
			элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдать Деньги");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВыбылоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(объект.ВалютаОбмена)
		и НЕ объект.Валюта = ОсновнаяВалюта тогда		
		
		объект.ВалютаОбмена = ОсновнаяВалюта;
		Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
		
	ИначеЕсли объект.Валюта = ОсновнаяВалюта
		и объект.ВалютаОбмена = ОсновнаяВалюта тогда
		
		объект.ВалютаОбмена = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");		
		Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
		
	КонецЕсли;
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура Курс1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбменаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(объект.Валюта)
		и НЕ объект.ВалютаОбмена = ОсновнаяВалюта тогда		
		
		объект.Валюта 	= ОсновнаяВалюта;
		объект.Курс 	= ОбновитьКурс(Объект.Валюта, Объект.Дата);
		
	ИначеЕсли объект.Валюта = ОсновнаяВалюта
		и объект.ВалютаОбмена = ОсновнаяВалюта тогда
		
		объект.Валюта 	= ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");		
		объект.Курс 	= ОбновитьКурс(Объект.Валюта, Объект.Дата);
		
	КонецЕсли;
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	
	Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыбылоПриИзменении(Элемент)
	ПересчитатьОбмен();
КонецПроцедуры

&НаКлиенте
Процедура Курс1ПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОбменаПриИзменении(Элемент)
	
	Если Объект.КурсОбмена = 0 Тогда
		Объект.КурсОбмена = 1;
	КонецЕсли;
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОбменаПриИзменении(Элемент)
	ПересчитатьОбмен(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбмен(ПересчитатьКурсы = Ложь)
	
	Если Объект.КурсОбмена = 0 Тогда
		Объект.КурсОбмена = 1;
	КонецЕсли;
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
	Если ПересчитатьКурсы Тогда
		Если объект.Валюта = ОсновнаяВалюта Тогда
			Объект.КурсОбмена = Объект.СуммаОбмена / (Объект.Сумма * Объект.Курс);
		иначе
			Объект.Курс = Объект.СуммаОбмена * Объект.КурсОбмена / Объект.Сумма;
		КонецЕсли;	
		
	Иначе
		Объект.СуммаОбмена = Объект.Сумма * Объект.Курс / Объект.КурсОбмена;
	КонецЕсли;
	
	элементы.Курс1.Видимость 		= не объект.валюта = ОсновнаяВалюта;
	элементы.КурсОбмена.Видимость 	= не объект.ВалютаОбмена = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийОстаток()
	
	ТекущийОстаток = ОбщийМодульСервер.ОстатокДенег(Объект.Дата - 1, Объект.ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег);
	ТекущийОстаток = ОбщийМодульСервер.ПоКурсу(ТекущийОстаток, Объект.Валюта, , Объект.Дата - 1);	
	элементы.ТекущийОстаток.Видимость 				= не ТекущийОстаток = 0;
	элементы.НаименованиеОсновнойВалюты2.Видимость 	= не ТекущийОстаток = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНесколькоСтрокПриИзменении(Элемент)
	
	ВНесколькоСтрокПриИзмененииНаСервере();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ВНесколькоСтрокПриИзмененииНаСервере()
	
	Если Объект.ВНесколькоСтрок 
		и Объект.Платежи.Количество() = 0 Тогда
		
		ДобавитьПлатеж = Объект.Платежи.Добавить();
		ДобавитьПлатеж.ПриходИлиРасход 	= ?(Объект.ПриходДенег, Перечисления.ПриходРасход.Приход, Перечисления.ПриходРасход.Расход);
		ДобавитьПлатеж.сумма 			= Объект.Сумма;
		ДобавитьПлатеж.валюта 			= ?(ЗначениеЗаполнено(Объект.Валюта), Объект.Валюта, ОсновнаяВалюта);
		ДобавитьПлатеж.курс 			= ?(объект.курс = 0, 1, объект.курс);
		ДобавитьПлатеж.Статья 			= Объект.Статья;
		
		ПлатежиПриИзмененииНаСервере();
		
	ИначеЕсли Не Объект.ВНесколькоСтрок
		и не Объект.Платежи.Количество() = 0 Тогда
		
		ПерваяСтрока = Объект.Платежи.Получить(0);
		
		Объект.ПриходДенег 	= ?(ПерваяСтрока.ПриходИлиРасход = Перечисления.ПриходРасход.Приход, Истина, Ложь);
		Объект.Валюта 		= ПерваяСтрока.Валюта;
		Объект.курс 		= ?(ПерваяСтрока.Курс = 0, 1, ПерваяСтрока.Курс);
		Объект.Сумма 		= Объект.Платежи.Итог("Сумма");
		Объект.Статья 		= ПерваяСтрока.Статья;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриИзменении(Элемент)
	ПлатежиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПлатежиПриИзмененииНаСервере()
	
	Сумма = 0;
	Объект.ЕстьПриход = Ложь;
	Объект.ЕстьПриход = Ложь;
	
	Для Каждого СтрокаПлатежа Из Объект.Платежи Цикл
		Если СтрокаПлатежа.ПриходИлиРасход = Перечисления.ПриходРасход.Приход Тогда
			Сумма = Сумма + СтрокаПлатежа.сумма * СтрокаПлатежа.курс;
			Объект.ЕстьПриход = Истина;
			
		Иначе
			Сумма = Сумма - СтрокаПлатежа.сумма * СтрокаПлатежа.курс;
			Объект.ЕстьРасход = Истина;
			
		КонецЕсли;       	
		
	КонецЦикла;
	Объект.Сумма = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПлатежиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция   получитьКурс(Валюта)
	
	Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Объект.Дата);
	
КонецФункции //получитьКурс

&НаКлиенте
Процедура ПлатежиКурсПриИзменении(Элемент)
	ПлатежиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиСуммаПриИзменении(Элемент)
	ПлатежиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	
	если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПриходИлиРасход) Тогда
		ТекущиеДанные.ПриходИлиРасход = ?(Объект.ПриходДенег, ПредопределенноеЗначение("Перечисление.ПриходРасход.Приход"),  ПредопределенноеЗначение("Перечисление.ПриходРасход.Расход"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.формаоплаты) 
		и ЗначениеЗаполнено(Объект.формаоплаты) Тогда
		
		ТекущиеДанные.формаоплаты = Объект.формаоплаты;
		ТекущиеДанные.валюта = Объект.валюта;
		ТекущиеДанные.курс 	 = Объект.курс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьВсем(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	НачислитьВсемНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НачислитьВсемНаСервере()
	
	ЗаполнитьНаСервере();	
	ЗарплатаПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Зарплата.Количество() = 0
		или Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу по заработной плате?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
		ЗаполнитьНаСервере();	
		ЗарплатаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	объект.ЕстьПриход = ложь;
	объект.ЕстьРасход = истина;
	
	Объект.Зарплата.Очистить();
	
	Сотрудники = Справочники.Сотрудники.Выбрать() ;
	Пока Сотрудники.Следующий() Цикл
		
		Если (НЕ ЗначениеЗаполнено(ОтборПоСотруднику)
			и Не Сотрудники.ПометкаУдаления )
			или Сотрудники.Ссылка = ОтборПоСотруднику Тогда
			
			Для Каждого начисление Из Сотрудники.РасчетЗарплаты Цикл
				
				Если (Не ЗначениеЗаполнено(Начисление.ДатаНачала) ИЛИ Начисление.ДатаНачала <= Объект.Дата)
					И (Не ЗначениеЗаполнено(Начисление.ДатаОкончания) ИЛИ Начисление.ДатаОкончания > Объект.Дата) Тогда
					
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник = Сотрудники.Ссылка;
					
					НоваяСтрокаЗП.размер = Начисление.Размер;				
					
					ПоследнийРасчет = ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);	
					НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;	
					НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					
					НоваяСтрокаЗП.ДатаНачала = ДатаНачала;
					НоваяСтрокаЗП.ДатаОкончания = ДатаОкончания;
					
					НоваяСтрокаЗП.ВидНачисления = Начисление.ВидНачисления;
					Если Начисление.ВидНачисления = Перечисления.ВидыНачислений.ЗаСмену Тогда
						НоваяСтрокаЗП.Количество = Начисление.Количество;
						Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
							НоваяСтрокаЗП.ДатаНачала = НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания + 3600 * 24 + 1;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
							НоваяСтрокаЗП.ДатаОкончания = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 1;
						КонецЕсли;						
						
					ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.Другое Тогда
						НоваяСтрокаЗП.Количество = 1;
					ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли Тогда
						//расчитано для строки
					ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда
						//расчитано для строки
					ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыЛичнойРеализации Тогда
						//расчитано для строки
					ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.Ставка Тогда
						Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
							НоваяСтрокаЗП.ДатаНачала = НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания + 3600 * 24 + 1;	
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
							Если День(НоваяСтрокаЗП.ДатаНачала) = 1  Тогда
								НоваяСтрокаЗП.ДатаОкончания = КонецМесяца(НоваяСтрокаЗП.ДатаНачала);
							Иначе
								НоваяСтрокаЗП.ДатаОкончания = НачалоМесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 1;
							КонецЕсли;                         	
						КонецЕсли;
						
						Если Начисление.Количество = 0 Тогда
							НоваяСтрокаЗП.Количество = 1;
						Иначе
							НоваяСтрокаЗП.Количество = Начисление.Количество;
						КонецЕсли;					
					КонецЕсли;
					
					НоваяСтрокаЗП.ВалютаНачисления = Начисление.Валюта;
					НоваяСтрокаЗП.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрокаЗП.ВалютаНачисления, Объект.Дата);					
					НоваяСтрокаЗП.Валюта = НоваяСтрокаЗП.ВалютаНачисления;	
					
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла;
	
	//добавим долги
	ДобавитьТолькоЗадолженностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТолькоЗадолженность(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	ДобавитьТолькоЗадолженностьНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТолькоЗадолженностьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаОстатки.ВидНачисления,
	|	ЗарплатаОстатки.СуммаОстаток,
	|	ЗарплатаОстатки.СуммаВВалютеОстаток
	|ИЗ
	|	РегистрНакопления.Зарплата.Остатки(&Дата, ) КАК ЗарплатаОстатки ";
	
	Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ	ЗарплатаОстатки.Сотрудник = &Сотрудник ";
		Запрос.УстановитьПараметр("Сотрудник", ОтборПоСотруднику);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		если не ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
			
			НоваяСтрокаЗП = Объект.Зарплата.Добавить();
			НоваяСтрокаЗП.Сотрудник 		= ВыборкаДетальныеЗаписи.Сотрудник;				
			НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
			НоваяСтрокаЗП.Количество 		= 1;				
			НоваяСтрокаЗП.ВидНачисления 	= ВыборкаДетальныеЗаписи.ВидНачисления;				
			НоваяСтрокаЗП.ВалютаНачисления 	= Справочники.Валюты.ОсновнаяВалюта;
			НоваяСтрокаЗП.Курс 				= 1;
			НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;	
			ПоследнийРасчет 				= ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);	
			НоваяСтрокаЗП.Долг 				= Истина;
			НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислено ранее");
			НоваяСтрокаЗП.ДатаПоследнегоРасчета 		= ПоследнийРасчет.ДатаПоследнегоРасчета;	
			НоваяСтрокаЗП.ПрошлыйПериодДатаНачала 		= ПоследнийРасчет.ПрошлыйПериодДатаНачала;
			НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания 	= ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
			
			РассчитатьСтрокуЗП(НоваяСтрокаЗП);	                 	
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗадолженностьЗаТовары();
	
КонецПроцедуры	

&НаСервере
процедура ДобавитьЗадолженностьЗаТовары() 
	
	Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
		ДобавитьЗадолженностьЗаТоварыСотрудника(ОтборПоСотруднику);
		
	Иначе
		сотрудник = Справочники.Сотрудники.Выбрать() ;
		пока сотрудник.Следующий() цикл
			если не сотрудник.ЭтоГруппа тогда
				ДобавитьЗадолженностьЗаТоварыСотрудника(сотрудник.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ДобавитьЗадолженностьЗаТоварыСотрудника(сотрудник)
	
	если значениезаполнено(сотрудник.клиент) тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Расчеты.Остатки(&дата, Клиент = &Клиент) КАК РасчетыОстатки";
		
		Запрос.УстановитьПараметр("дата", объект.дата);
		Запрос.УстановитьПараметр("Клиент", сотрудник.клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				если не ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
					
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 	= Сотрудник;	
					НоваяСтрокаЗП.размер 		= - ВыборкаДетальныеЗаписи.СуммаОстаток; //за минусом
					НоваяСтрокаЗП.Количество 	= 1;				
					НоваяСтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.Другое;				
					НоваяСтрокаЗП.Курс 			= 1;
					НоваяСтрокаЗП.Валюта 		= НоваяСтрокаЗП.ВалютаНачисления;	
					НоваяСтрокаЗП.ВалютаНачисления 	= Справочники.Валюты.ОсновнаяВалюта;
					НоваяСтрокаЗП.КлиентПоставщик 	= сотрудник.клиент;
					//ПоследнийРасчет = ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);	
					//НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;	
					//НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					//НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					НоваяСтрокаЗП.Долг 			= Истина;
					НоваяСтрокаЗП.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За купленный товар");
					
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);	
				КонецЕсли;
			КонецЦикла;                        	
		КонецЕсли;
	КонецЕсли;
	
	если значениезаполнено(сотрудник.поставщик) тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&дата, Поставщик = &поставщик) КАК РасчетыСПоставщикамиОстатки";
		
		Запрос.УстановитьПараметр("дата", объект.дата);
		Запрос.УстановитьПараметр("поставщик", сотрудник.поставщик);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				если не ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
					
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 		= Сотрудник;	
					НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
					НоваяСтрокаЗП.Количество 		= 1;				
					НоваяСтрокаЗП.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;				
					НоваяСтрокаЗП.ВалютаНачисления 	= Справочники.Валюты.ОсновнаяВалюта;
					НоваяСтрокаЗП.Курс 				= 1;
					НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;	
					НоваяСтрокаЗП.КлиентПоставщик 	= сотрудник.поставщик;
					//ПоследнийРасчет = ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник);	
					//НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;	
					//НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					//НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					НоваяСтрокаЗП.Долг 				= Истина;
					НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За приобретенный товар");
					
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	ОчиститьТаблицуНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	Объект.Зарплата.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарплатаПриИзмененииНаСервере()
	
	Сумма = 0;
	Для Каждого СтрокаЗП из Объект.Зарплата Цикл
		Сумма = Сумма + СтрокаЗП.Сумма * СтрокаЗП.Курс; 	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	если ТекущиеДанные.Курс = 0 тогда
		ТекущиеДанные.Курс = 1;
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВидНачисленияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаРазмерПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКурсПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку()
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;	
	если не ТекущиеДанные = Неопределено тогда
		ПересчитатьСтрокуНаСервере(ТекущиеДанные.номерстроки);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуНаСервере(НомерСтроки)
	
	СтрокаЗП = Объект.Зарплата[НомерСтроки - 1];
	РассчитатьСтрокуЗП(СтрокаЗП);  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуПриИзменении(Элемент)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДатуПоследнегоРасчета(Сотрудник)
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаПоследнегоРасчета", '00010101000000');
	Результат.Вставить("ПрошлыйПериодДатаНачала", '00010101000000');
	Результат.Вставить("ПрошлыйПериодДатаОкончания", '00010101000000');
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияДенегЗарплата.Ссылка.Дата КАК Дата,
	|	ДвиженияДенегЗарплата.ДатаНачала,
	|	ДвиженияДенегЗарплата.ДатаОкончания
	|ИЗ
	|	Документ.ДвиженияДенег.Зарплата КАК ДвиженияДенегЗарплата
	|ГДЕ
	|	ДвиженияДенегЗарплата.Сотрудник = &Сотрудник
	|	И ДвиженияДенегЗарплата.Ссылка.НачислениеИВыплатаЗаработнойПлаты = ИСТИНА
	|	И ДвиженияДенегЗарплата.Ссылка.Проведен = ИСТИНА
	|	И ДвиженияДенегЗарплата.Ссылка.Дата < &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.ДатаПоследнегоРасчета 		= ВыборкаДетальныеЗаписи.Дата;
		Результат.ПрошлыйПериодДатаНачала 		= ВыборкаДетальныеЗаписи.ДатаНачала;
		Результат.ПрошлыйПериодДатаОкончания 	= ВыборкаДетальныеЗаписи.ДатаОкончания;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ПолучитьДатуПоследнегоРасчета(Сотрудник)

&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	
	ДатаНачала 		= ПериодРасчета.ДатаНачала;
	ДатаОкончания 	= ПериодРасчета.ДатаОкончания;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРасчетаПриИзмененииНаСервере()
	
	Для Каждого СтрокаЗП Из объект.Зарплата Цикл
		СтрокаЗП.ДатаНачала 	= ДатаНачала;
		СтрокаЗП.ДатаОкончания 	= ДатаОкончания;
		РассчитатьСтрокуЗП(СтрокаЗП);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодРасчета.ДатаОкончания = ДатаОкончания;
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаНачала = ДатаОкончания;
		ПериодРасчета.ДатаНачала = ДатаНачала;
	КонецЕсли;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодРасчета.ДатаНачала = ДатаНачала;
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаОкончания = ДатаНачала;
		ПериодРасчета.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтрокуЗП(СтрокаЗП)
	
	Если ЗначениеЗаполнено(СтрокаЗП.Сотрудник)
		и не СтрокаЗП.Размер = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаНачала) Тогда
			СтрокаЗП.ДатаНачала = ДатаНачала;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
			СтрокаЗП.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.Валюта) Тогда
			СтрокаЗП.Валюта = СтрокаЗП.ВалютаНачисления;
		КонецЕсли;
		
		Если СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли Тогда
			
			Если не ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				и ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемПрибылиЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
				
			Иначеесли не СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				и ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
				
			Иначеесли не СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыЛичнойРеализации Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				и ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, Истина) / 100;
				
			Иначеесли не СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗП.СуммаНачисления = СтрокаЗП.Размер * СтрокаЗП.Количество;
		
		если НЕ СтрокаЗП.Долг Тогда
			СтрокаЗП.ОписаниеНачисления = "" + формат(ДатаНачала, "ДФ=dd.MM.yy") + "-" + формат(ДатаОкончания, "ДФ=dd.MM.yy") + " " + сокрлп(СтрокаЗП.Размер) + "*" + сокрлп(СтрокаЗП.Количество);	
		КонецЕсли;
		
		СтрокаЗП.Курс 	= ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаЗП.Валюта, Объект.Дата);		
		Сумма 			= СтрокаЗП.СуммаНачисления * СтрокаЗП.Курс;
		Сумма 			= ОбщийМодульСервер.ПоКурсу(Сумма, , СтрокаЗП.ВалютаНачисления, Объект.Дата); 		
		СтрокаЗП.Сумма 	= Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Сотрудники", ДанныеВыбора, Текст, ОтборПоСотруднику);	
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Сотрудники", ДанныеВыбора, Текст, Элементы.Зарплата.ТекущиеДанные.Сотрудник);		
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаДатаНачалаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаДатаОкончанияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	элементы.Курс.Видимость = не объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)	
	ОбновитьВидимостьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ОбновитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		если не Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
			ПриИзмененииКонтрагента();
		КонецЕсли;
		
		если не Объект.Организация 	= Объект.Договор.Организация тогда
			Объект.Организация 		= Объект.Договор.Организация;         	
		КонецЕсли;		
		
		Если УчитыватьДеньгиВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			и ЗначениеЗаполнено(Объект.Договор.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Договор.ХранилищеДенег;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Объект.НачислениеИВыплатаЗаработнойПлаты
		И ЗначениеЗаполнено(объект.КлиентПоставщик)
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
		и не ЗначениеЗаполнено(Объект.Договор) 
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
		
		ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
		
		Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
			или ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
			Сообщение.Поле 	= "Договор";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если не отказ
		и УчитыватьДеньгиВНесколькихХранилищах
		и не Объект.НачислениеИВыплатаЗаработнойПлаты
		и не Объект.ВНесколькоСтрок Тогда
		
		если объект.ОбменВалют Тогда
			если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег не указано!");
				Сообщение.Поле 	= "ХранилищеДенег1";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ Объект.Валюта = Объект.ХранилищеДенег.Валюта Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
				Сообщение.Поле 	= "ХранилищеДенег1";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;	
			КонецЕсли;
			
			если НЕ ЗначениеЗаполнено(объект.ХранилищеДенегОбмена) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег обмена не указано!");
				Сообщение.Поле 	= "ХранилищеДенегОбмена";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ Объект.ВалютаОбмена = Объект.ХранилищеДенегОбмена.Валюта Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег обмена иная!");
				Сообщение.Поле 	= "ХранилищеДенегОбмена";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;	
			КонецЕсли;
			
		иначе
			если НЕ ЗначениеЗаполнено(объект.ХранилищеДенег) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег не указано!");
				Сообщение.Поле 	= "ХранилищеДенег";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ Объект.Валюта = Объект.ХранилищеДенег.Валюта Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
				Сообщение.Поле 	= "ХранилищеДенег";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;	
			КонецЕсли;
			
		конецесли;
		
	КонецЕсли;
	
	Если не отказ
		и УчитыватьДеньгиВНесколькихХранилищах
		и не Объект.НачислениеИВыплатаЗаработнойПлаты
		и Объект.ВНесколькоСтрок Тогда
		
		для каждого платеж из объект.Платежи Цикл
			
			платежХранилищеДенег = платеж.ХранилищеДенег;
			если НЕ ЗначениеЗаполнено(платежХранилищеДенег) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег не указано в строке: " + Платеж.НомерСтроки);
				Сообщение.Поле 	= "ПлатежиХранилищеДенег";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ Платеж.Валюта = ПлатежХранилищеДенег.Валюта Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая в строке: " + Платеж.НомерСтроки);
				Сообщение.Поле 	= "Платежи";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина; 				
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	Если не отказ
		и УчитыватьДеньгиВНесколькихХранилищах
		и Объект.НачислениеИВыплатаЗаработнойПлаты
		и НЕ Объект.ВНесколькоСтрок Тогда
		
		для каждого платеж из объект.Зарплата Цикл
			
			если НЕ ЗначениеЗаполнено(платеж.ХранилищеДенег) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег не указано в строке: " + Платеж.НомерСтроки);
				Сообщение.Поле 	= "ЗарплатаХранилищеДенег";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			ИначеЕсли НЕ Платеж.Валюта = Платеж.ХранилищеДенег.Валюта Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая в строке: " + Платеж.НомерСтроки);
				Сообщение.Поле 	= "Зарплата";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина; 				
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Объект.ВНесколькоСтрок
		И НЕ Объект.НачислениеИВыплатаЗаработнойПлаты
		И не отказ
		и УчитыватьДеньгиВНесколькихХранилищах
		и ЗначениеЗаполнено(Объект.ХранилищеДенег)
		и НЕ Объект.Валюта = Объект.ХранилищеДенег.Валюта Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
		Сообщение.Поле 	= "ХранилищеДенег";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Отказ = Истина;		
	КонецЕсли;
	
	Если не отказ 
		и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если не объект.Договор.Организация = Объект.Организация Тогда		
					объект.Договор = Справочники.Договора.ПустаяСсылка() ;	
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчитыватьДеньгиВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			и ЗначениеЗаполнено(Объект.Организация.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Организация.ХранилищеДенег;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.ФормаОплаты 	= Объект.ХранилищеДенег.ФормаОплаты;
		Объект.Валюта 		= Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенег1ПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегОбменаПриИзменении(Элемент)
	ХранилищеДенегОбменаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегОбменаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенегОбмена) Тогда
		Объект.ВалютаОбмена	= Объект.ХранилищеДенегОбмена.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	ТекущиеДанные.валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.валюта);
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПлатежиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервереБезконтекста
Функция   ВалютаХранилища(ХранилищеДенег, БылаВалюта)
	
	если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе
		Возврат БылаВалюта;
	КонецЕслИ;
	
КонецФункции

&НаКлиенте
Процедура ЗарплатаХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	ТекущиеДанные.валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.валюта);
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПересчитатьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПересчитатьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	Если Не Отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	//ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	//ДокументОбъект.ПодготовкаКПроведению(Отказ);
	//ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");

	если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		
		Дата 		= объект.Дата;
		ОбменВалют  = Объект.ОбменВалют;
		ФормаОплаты = Объект.ФормаОплаты;
		Ссылка 		= Объект.Ссылка;
		Договор 	= Объект.Договор;
		Платежи 	= Объект.Платежи;
		Зарплата 	= объект.Зарплата;
		СуммаПриход = объект.СуммаПриход;
		СуммаРасход = объект.СуммаРасход;
		ПриходДенег = Объект.ПриходДенег;
		Валюта 		= Объект.Валюта;
		Сумма		= Объект.Сумма;
		КлиентПоставщик = Объект.КлиентПоставщик;
		ВНесколькоСтрок = объект.ВНесколькоСтрок;
		ОсновнаяВалюта  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ХранилищеДенег  = Объект.ХранилищеДенег;
		НачислениеИВыплатаЗаработнойПлаты = объект.НачислениеИВыплатаЗаработнойПлаты;
		
		если НЕ ОбменВалют Тогда
			
			Если НачислениеИВыплатаЗаработнойПлаты Тогда
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда //зп
					
					Для Каждого Начисление Из Зарплата Цикл
						
						Если Не Начисление.Сумма = 0 тогда
							
							НачислениеСумма = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
							
							СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(НачислениеСумма, Дата, ФормаОплаты, Начисление.Валюта, Начисление.ХранилищеДенег, Истина, Ссылка);
							Отказ = СтруктураПополнения.Отказ;
							
						КонецЕсли;
						
					КонецЦикла; 	
				КонецЕсли;
				
			Иначе //обычный платеж				
				
				ВестиУчетОплатПоОтдельнымЗаказам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам");
				ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
				
				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
				Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
					и ЗначениеЗаполнено(Договор) Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, СуммаПриход, Истина, СуммаРасход, , Ссылка );
				КонецЕсли;
				
				Если Не Отказ Тогда
					если ВНесколькоСтрок Тогда
						
						Для Каждого Платеж Из Платежи Цикл
							
							ЭтоПриход = платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход;
							
							Если ЭтоПриход тогда
								
								Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( - платеж.Сумма, Дата, платеж.формаоплаты, ?(ЗначениеЗаполнено(платеж.валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, , Ссылка);
							иначе
								СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(платеж.Сумма, Дата, платеж.формаоплаты, ?(ЗначениеЗаполнено(платеж.Валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, Истина, Ссылка);
								Отказ = СтруктураПополнения.Отказ;
								
							конецесли;
							
						КонецЦикла;
						
					Иначе //один платеж						  						
						Если ПриходДенег тогда
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, , Ссылка);
							
						иначе
							СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, Истина, Ссылка);
							Отказ = СтруктураПополнения.Отказ;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		Иначеесли ОбменВалют
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") тогда //обмен
			
			СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, Истина, Ссылка);
			Отказ = СтруктураПополнения.Отказ;
			
		КонецЕсли;          	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ
