// sza150702-1332 фикс
// sza150111-1636 
// sza150108-0349 НЧ
// sza141110-1642 
// sza140805-1349 ЭтоРасход
// sza140725-1954 !сброс валюты
// sza140701-1634  
// sza140627-1718  
// sza140603-1604 : 
// sza130901-2354 : 
Перем СтатьяПоступленияДенегПоУмолчанию;
Перем СтатьяРасходаДенегПоУмолчанию;

&НаКлиенте
Процедура ВалютаВыбылоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаОбмена)
		И НЕ Объект.Валюта = ОсновнаяВалюта тогда		
		
		Объект.ВалютаОбмена = ОсновнаяВалюта;
		Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
		
	ИначеЕсли Объект.Валюта = ОсновнаяВалюта
		И Объект.ВалютаОбмена = ОсновнаяВалюта тогда
		
		Объект.ВалютаОбмена = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");		
		Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
		
	КонецЕсли;
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьТекущийОстаток();
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбменаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Валюта)
		И НЕ Объект.ВалютаОбмена = ОсновнаяВалюта тогда		
		
		Объект.Валюта 	= ОсновнаяВалюта;
		Объект.Курс 	= ОбновитьКурс(Объект.Валюта, Объект.Дата);
		
	ИначеЕсли Объект.Валюта = ОсновнаяВалюта
		И Объект.ВалютаОбмена = ОсновнаяВалюта тогда
		
		Объект.Валюта 	= ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");		
		Объект.Курс 	= ОбновитьКурс(Объект.Валюта, Объект.Дата);
		
	КонецЕсли;
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
	КонецЕсли;
	
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаСервереБезконтекста
Функция   ВалютаХранилища(Знач ХранилищеДенег, Знач БылаВалюта)
	
	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.Валюта;
	Иначе
		Возврат БылаВалюта;
	КонецЕсли;
	
КонецФункции

&НаСервереБезконтекста
Функция   ФормаОплатыХранилища(Знач ХранилищеДенег)
	
	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
		Возврат ХранилищеДенег.ФормаОплаты;
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВНесколькоСтрокПриИзменении(Элемент)
	
	ВНесколькоСтрокПриИзмененииНаСервере();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ВНесколькоСтрокПриИзмененииНаСервере()
	
	Если Объект.ВНесколькоСтрок 
		И Объект.Платежи.Количество() = 0 Тогда
		
		ДобавитьПлатеж = Объект.Платежи.Добавить();
		ДобавитьПлатеж.ПриходИлиРасход 	= ?(Объект.ПриходДенег, Перечисления.ПриходРасход.Приход, Перечисления.ПриходРасход.Расход);
		ДобавитьПлатеж.сумма 			= Объект.Сумма;
		ДобавитьПлатеж.валюта 			= ?(ЗначениеЗаполнено(Объект.Валюта), Объект.Валюта, ОсновнаяВалюта);
		ДобавитьПлатеж.курс 			= ?(Объект.курс = 0, 1, Объект.курс);
		ДобавитьПлатеж.Статья 			= Объект.Статья;
		ДобавитьПлатеж.ФормаОплаты		= Объект.ФормаОплаты;
		
		ПлатежиПриИзмененииПересчет();
		
	ИначеЕсли НЕ Объект.ВНесколькоСтрок
		И НЕ Объект.Платежи.Количество() = 0 Тогда
		
		ПерваяСтрока = Объект.Платежи.Получить(0);
		
		Объект.ПриходДенег 	= ?(ПерваяСтрока.ПриходИлиРасход = Перечисления.ПриходРасход.Приход, ИСТИНА, ЛОЖЬ);
		Объект.Валюта 		= ПерваяСтрока.Валюта;
		Объект.курс 		= ?(ПерваяСтрока.Курс = 0, 1, ПерваяСтрока.Курс);
		Объект.Сумма 		= Объект.Платежи.Итог("Сумма");
		Объект.Статья 		= ПерваяСтрока.Статья;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодРасчета.ДатаНачала = ДатаНачала;
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаОкончания = ДатаНачала;
		ПериодРасчета.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодРасчета.ДатаОкончания = ДатаОкончания;
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаНачала = ДатаОкончания;
		ПериодРасчета.ДатаНачала = ДатаНачала;
	КонецЕсли;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеНоменклатуры(Знач Номенклатура)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	
	ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	Если ИспользоватьСложныйМеханизмЦен тогда
		Если Объект.ПриходДенег тогда
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		Иначе
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик) 
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		КонецЕсли;                               	
	КонецЕсли;
	
	Объект.Сумма = Объект.Сумма  +  ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Объект.Дата, ИСТИНА, , , , , Объект.Ссылка) * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадолженностьЗаТовары() 
	
	Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
		ДобавитьЗадолженностьЗаТоварыСотрудника(ОтборПоСотруднику);
		
	Иначе
		Сотрудник = Справочники.Сотрудники.Выбрать();
		
		Пока Сотрудник.Следующий() Цикл
			Если НЕ ОбщийМодульПовтор.ЭтоГруппа(Сотрудник.Ссылка) тогда
				ДобавитьЗадолженностьЗаТоварыСотрудника(Сотрудник.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадолженностьЗаТоварыСотрудника(Знач Сотрудник)
	
	Если ЗначениеЗаполнено(сотрудник.клиент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток ИЗ РегистрНакопления.Расчеты.Остатки(&дата, Клиент = &Клиент) КАК РасчетыОстатки";
		
		Запрос.УстановитьПараметр("дата", Объект.дата);
		Запрос.УстановитьПараметр("Клиент", сотрудник.клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
					
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 	= Сотрудник;	
					НоваяСтрокаЗП.размер 		= - ВыборкаДетальныеЗаписи.СуммаОстаток; // за минусом
					НоваяСтрокаЗП.Количество 	= 1;				
					НоваяСтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.Другое;				
					НоваяСтрокаЗП.Курс 			= 1;
					НоваяСтрокаЗП.Валюта 		= НоваяСтрокаЗП.ВалютаНачисления;	
					НоваяСтрокаЗП.ВалютаНачисления 	= Справочники.Валюты.ОсновнаяВалюта;
					НоваяСтрокаЗП.КлиентПоставщик 	= сотрудник.клиент;
					// ПоследнийРасчет = ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник, Объект.Дата);	
					// НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;	
					// НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					// НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					НоваяСтрокаЗП.Долг 			= ИСТИНА;
					НоваяСтрокаЗП.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За купленный товар");
					
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);	
				КонецЕсли;
			КонецЦикла;                        	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(сотрудник.поставщик) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&дата, Поставщик = &поставщик) КАК РасчетыСПоставщикамиОстатки";
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Поставщик", Сотрудник.Поставщик);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
					
					НоваяСтрокаЗП = Объект.Зарплата.Добавить();
					НоваяСтрокаЗП.Сотрудник 		= Сотрудник;	
					НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
					НоваяСтрокаЗП.Количество 		= 1;				
					НоваяСтрокаЗП.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;				
					НоваяСтрокаЗП.ВалютаНачисления 	= Справочники.Валюты.ОсновнаяВалюта;
					НоваяСтрокаЗП.Курс 				= 1;
					НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;	
					НоваяСтрокаЗП.КлиентПоставщик 	= сотрудник.поставщик;
					// ПоследнийРасчет = ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник, Объект.Дата);
					// НоваяСтрокаЗП.ДатаПоследнегоРасчета = ПоследнийРасчет.ДатаПоследнегоРасчета;	
					// НоваяСтрокаЗП.ПрошлыйПериодДатаНачала = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
					// НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
					НоваяСтрокаЗП.Долг 				= ЛОЖЬ;
					НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За приобретенный товар");
					
					РассчитатьСтрокуЗП(НоваяСтрокаЗП);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 =ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ВыполненияРабот"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТолькоЗадолженность(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	ДобавитьТолькоЗадолженностьНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТолькоЗадолженностьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаОстатки.ВидНачисления,
	|	ЗарплатаОстатки.СуммаОстаток,
	|	ЗарплатаОстатки.СуммаВВалютеОстаток
	|ИЗ РегистрНакопления.Зарплата.Остатки(&Дата, ) КАК ЗарплатаОстатки ";
	
	Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ	ЗарплатаОстатки.Сотрудник = &Сотрудник ";
		Запрос.УстановитьПараметр("Сотрудник", ОтборПоСотруднику);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = 0 тогда
			
			НоваяСтрокаЗП = Объект.Зарплата.Добавить();
			НоваяСтрокаЗП.Сотрудник 		= ВыборкаДетальныеЗаписи.Сотрудник;				
			НоваяСтрокаЗП.размер 			= ВыборкаДетальныеЗаписи.СуммаОстаток;
			НоваяСтрокаЗП.Количество 		= 1;				
			НоваяСтрокаЗП.ВидНачисления 	= ВыборкаДетальныеЗаписи.ВидНачисления;				
			НоваяСтрокаЗП.ВалютаНачисления 	= ОсновнаяВалюта;
			НоваяСтрокаЗП.Курс 				= 1;
			НоваяСтрокаЗП.Валюта 			= НоваяСтрокаЗП.ВалютаНачисления;	
			ПоследнийРасчет 				= ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник, Объект.Дата);
			НоваяСтрокаЗП.Долг 				= ИСТИНА;
			НоваяСтрокаЗП.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислено ранее");
			НоваяСтрокаЗП.ДатаПоследнегоРасчета 	 = ПоследнийРасчет.ДатаПоследнегоРасчета;	
			НоваяСтрокаЗП.ПрошлыйПериодДатаНачала 	 = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
			НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
			
			РассчитатьСтрокуЗП(НоваяСтрокаЗП);	                 	
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗадолженностьЗаТовары();
	
КонецПроцедуры	

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда // насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
			ПриИзмененииКонтрагента();
		КонецЕсли;
		
		Если НЕ Объект.Организация 	= Объект.Договор.Организация тогда
			Объект.Организация 		= Объект.Договор.Организация;         	
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Договор.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Договор.ХранилищеДенег;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Зарплата.Количество() = 0 Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
		ЗаполнитьНаСервере();	
		ЗарплатаПриИзмененииНаСервере();	
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу по заработной плате?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
		ЗаполнитьНаСервере();	
		ЗарплатаПриИзмененииНаСервере();	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Объект.ЕстьПриход = ЛОЖЬ;
	Объект.ЕстьРасход = ИСТИНА;
	
	Объект.Зарплата.Очистить();
	
	МассивСотрудников = Новый Массив;
	
	Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
		МассивСотрудников.Добавить(ОтборПоСотруднику);
		
	ИначеЕсли ЗначениеЗаполнено(ОтборПоПодразделению) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПодразделенияСостав.Сотрудник
		|ИЗ Справочник.Подразделения.Состав КАК ПодразделенияСостав
		|ГДЕ ПодразделенияСостав.Ссылка = &ОтборПоПодразделению";
		
		Запрос.УстановитьПараметр("ОтборПоПодразделению", ОтборПоПодразделению);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МассивСотрудников.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
			КонецЦикла;     	
		КонецЕсли;
		
	Иначе
		Сотрудники = Справочники.Сотрудники.Выбрать();
		Пока Сотрудники.Следующий() Цикл
			Если НЕ Сотрудники.ПометкаУдаления ТОгда
				МассивСотрудников.Добавить(Сотрудники.Ссылка);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Для Каждого Сотрудники Из МассивСотрудников Цикл
		Для Каждого начисление Из Сотрудники.РасчетЗарплаты Цикл
			
			Если (Не ЗначениеЗаполнено(Начисление.ДатаНачала) ИЛИ Начисление.ДатаНачала <= Объект.Дата)
				И (Не ЗначениеЗаполнено(Начисление.ДатаОкончания) ИЛИ Начисление.ДатаОкончания > Объект.Дата) Тогда
				
				НоваяСтрокаЗП = Объект.Зарплата.Добавить();
				НоваяСтрокаЗП.Сотрудник = Сотрудники.Ссылка;					
				НоваяСтрокаЗП.размер    = Начисление.Размер;				
				
				ПоследнийРасчет = ОбщийМодульСервер.ПолучитьДатуПоследнегоРасчета(НоваяСтрокаЗП.Сотрудник, Объект.Дата);
				НоваяСтрокаЗП.ДатаПоследнегоРасчета      = ПоследнийРасчет.ДатаПоследнегоРасчета;	
				НоваяСтрокаЗП.ПрошлыйПериодДатаНачала    = ПоследнийРасчет.ПрошлыйПериодДатаНачала;
				НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания = ПоследнийРасчет.ПрошлыйПериодДатаОкончания;
				
				НоваяСтрокаЗП.ДатаНачала = ДатаНачала;
				НоваяСтрокаЗП.ДатаОкончания = ДатаОкончания;
				
				НоваяСтрокаЗП.ВидНачисления = Начисление.ВидНачисления;
				Если Начисление.ВидНачисления = Перечисления.ВидыНачислений.ЗаСмену Тогда
					
					НоваяСтрокаЗП.Количество = Начисление.Количество;
					Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
						НоваяСтрокаЗП.ДатаНачала = НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания + 3600 * 24 + 1;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
						НоваяСтрокаЗП.ДатаОкончания = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 1;
					КонецЕсли;						
					
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.Другое Тогда
					НоваяСтрокаЗП.Количество = 1;
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСтоимостиВыполненныхРабот Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыЛичнойРеализации Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ЗаКомплектацию Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ЗаОказанныеУслугиЗаВремя Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыОказанныхУслугЗаВремя Тогда
					// расчитано для строки
				ИначеЕсли Начисление.ВидНачисления = Перечисления.ВидыНачислений.Ставка Тогда
					Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
						НоваяСтрокаЗП.ДатаНачала = НоваяСтрокаЗП.ПрошлыйПериодДатаОкончания + 3600 * 24 + 1;	
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
						Если День(НоваяСтрокаЗП.ДатаНачала) = 1  Тогда
							НоваяСтрокаЗП.ДатаОкончания = КонецМесяца(НоваяСтрокаЗП.ДатаНачала);
						Иначе
							НоваяСтрокаЗП.ДатаОкончания = НачалоМесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 1;
						КонецЕсли;                         	
					КонецЕсли;
					
					Если Начисление.Количество = 0 Тогда
						НоваяСтрокаЗП.Количество = 1;
					Иначе
						НоваяСтрокаЗП.Количество = Начисление.Количество;
					КонецЕсли;					
				КонецЕсли;
				
				НоваяСтрокаЗП.ВалютаНачисления = Начисление.Валюта;
				НоваяСтрокаЗП.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрокаЗП.ВалютаНачисления, Объект.Дата);					
				НоваяСтрокаЗП.Валюта = НоваяСтрокаЗП.ВалютаНачисления;	
				
				РассчитатьСтрокуЗП(НоваяСтрокаЗП);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// добавим долги
	ДобавитьТолькоЗадолженностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПересчитатьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаВидНачисленияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаДатаНачалаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаДатаОкончанияПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКурсПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	Если ТекущиеДанные.Курс = 0 тогда
		ТекущиеДанные.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриИзменении(Элемент)
	ЗарплатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарплатаПриИзмененииНаСервере()
	
	Сумма = 0;
	Для Каждого СтрокаЗП из Объект.Зарплата Цикл
		Сумма = Сумма + СтрокаЗП.Сумма * СтрокаЗП.Курс; 	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаРазмерПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Сотрудники", ДанныеВыбора, Текст, Элементы.Зарплата.ТекущиеДанные.Сотрудник);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;
	ТекущиеДанные.валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.валюта);
	ТекущиеДанные.курс = ПолучитьКурс(ТекущиеДанные.валюта);
	ПересчитатьСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидДокумента(Знач БезИзменений = ЛОЖЬ) 
	
	Если Объект.НачислениеИВыплатаЗаработнойПлаты Тогда		
		ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начисление, расчет и выдача Заработной платы");	
		Если НЕ БезИзменений Тогда
			Объект.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников");	
		КонецЕсли;
		
	Иначе		
		ЗначениеЗаполненоОбъектКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
		
		Если ЗначениеЗаполненоОбъектКлиентПоставщик тогда
			ТекущийДолг = 0;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1, Объект.Договор);
			КонецЕсли;
			
			Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				Элементы.КлиентВСлучаеОплатыИлиВозврата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент клиент (оплата клиентом за товар или возврат денег клиенту)");
				ЭтоРасчетысПоставщиком = ЛОЖЬ;
				Если НЕ БезИзменений
					И (НЕ ЗначениеЗаполнено(Объект.Статья) 
					ИЛИ Объект.Статья = СтатьяРасходаДенегПоУмолчанию) Тогда
					
					Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;
				КонецЕсли;
				
			Иначе
				ЭтоРасчетысПоставщиком = ИСТИНА;
				Элементы.КлиентВСлучаеОплатыИлиВозврата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент поставщик (оплата за товар поставщику или возрат денег поставщиком)");	
				Если НЕ БезИзменений
					И (НЕ ЗначениеЗаполнено(Объект.Статья) 
					ИЛИ Объект.Статья = СтатьяПоступленияДенегПоУмолчанию) Тогда
					
					Объект.Статья = СтатьяРасходаДенегПоУмолчанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ БезИзменений
				И (НЕ ЗначениеЗаполнено(Объект.Валюта)
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта)) Тогда
				
				Объект.Валюта 	= Объект.КлиентПоставщик.ОсновнаяВалюта;
				Объект.Курс 	= ОбновитьКурс(Объект.Валюта, Объект.Дата);
				Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
				ОбновитьТекущийОстатокНаСервере();
			КонецЕсли;
			
		Иначе
			ТекущийДолг = 0;
		КонецЕсли;		
		
		Элементы.ТекущийДолг.Видимость 			= НЕ ТекущийДолг = 0;
		Элементы.ПогаситьСуммуДолга.Видимость 	= НЕ ТекущийДолг = 0;
		
		Если Объект.ЕстьПриход 
			И Объект.ЕстьРасход Тогда
			
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				Если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет с Поставщиком");	
				Иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет с Клиентом");
				КонецЕсли;
			Иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");
			КонецЕсли;
			ЭтаФорма.Элементы.Сумма.ЦветФона  = Новый Цвет(255, 255, 255);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма") + ": ";
			
		ИначеЕсли Объект.ПриходДенег Тогда
			
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				Если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат от поставщика");	
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода за товар (сторно)");
				Иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата клиента");
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья реализации (сторно)");
				КонецЕсли;
				
				Если НЕ БезИзменений
					И (НЕ ЗначениеЗаполнено(Объект.Статья) 
					ИЛИ Объект.Статья = СтатьяРасходаДенегПоУмолчанию) Тогда
					
					Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;
				КонецЕсли;			
				
			Иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход денег");
				ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья поступления") + ": ";
				Если НЕ БезИзменений
					И (НЕ ЗначениеЗаполнено(Объект.Статья) 
					ИЛИ НЕ Объект.Статья = СтатьяПоступленияДенегПоУмолчанию) Тогда
					
					Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;				
				КонецЕсли;			
			КонецЕсли;
			
			ЭтаФорма.Элементы.Сумма.ЦветФона  = Новый Цвет(245, 255, 245);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступило сумма");
			
		Иначе
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				
				Если ЭтоРасчетысПоставщиком тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оплата поставщику");	
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода за товар");
					
					Если НЕ БезИзменений
						И (НЕ ЗначениеЗаполнено(Объект.Статья) 
						ИЛИ Объект.Статья = СтатьяПоступленияДенегПоУмолчанию) Тогда
						
						Объект.Статья = СтатьяРасходаДенегПоУмолчанию;
					КонецЕсли;
					
				Иначе
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат денег клиенту");			
					ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья реализации");
					
					Если НЕ БезИзменений
						И (НЕ ЗначениеЗаполнено(Объект.Статья) 
						ИЛИ Объект.Статья = СтатьяРасходаДенегПоУмолчанию) Тогда
						
						Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;
					КонецЕсли;			
				КонецЕсли;				
				
			Иначе
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход денег");
				ЭтаФорма.Элементы.Статья.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статья расхода");
				
				Если НЕ БезИзменений
					И (НЕ ЗначениеЗаполнено(Объект.Статья)
					ИЛИ Объект.Статья = СтатьяПоступленияДенегПоУмолчанию) Тогда
					
					Объект.Статья = СтатьяРасходаДенегПоУмолчанию;
				КонецЕсли;	
			КонецЕсли;
			
			ЭтаФорма.Элементы.Сумма.ЦветФона = Новый Цвет(255, 245, 245);
			ЭтаФорма.Элементы.Сумма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбыло сумма");
			
		КонецЕсли;  	
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры // ИзменитьВидДокумента

&НаКлиенте
Процедура КлиентПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();
	ИзменитьВидДокумента();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Курс1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура Курс1ПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОбменаПриИзменении(Элемент)
	
	Если Объект.КурсОбмена = 0 Тогда
		Объект.КурсОбмена = 1;
	КонецЕсли;
	ПересчитатьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьВсем(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	НачислитьВсемНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НачислитьВсемНаСервере()
	
	ЗаполнитьНаСервере();	
	ЗарплатаПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменВалютПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов(Знач БезИзменений = ЛОЖЬ)
	
	Если Объект.НачислениеИВыплатаЗаработнойПлаты Тогда
		
		Если НЕ БезИзменений Тогда
			Объект.Сумма = Объект.Зарплата.Итог("Сумма");	
		КонецЕсли;
		
		Если Объект.Сумма = 0 Тогда
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (начисление)");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислить зарплату");
			Исключение // нет прав
			КонецПопытки;
			
		Иначе
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (выплата)");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начислить и выдать зарплату");
			Исключение // нет прав
			КонецПопытки;
		КонецЕсли;
		
		Элементы.ГруппаЗП.Видимость = ИСТИНА;
		
		Элементы.ГруппаОбычноеДвижениеДенег.Видимость 	= ЛОЖЬ;
		Элементы.ГруппаОбменВалют.Видимость 			= ЛОЖЬ;	
		Элементы.ГруппаОдногоПлатежа.Видимость 			= ЛОЖЬ;
		Элементы.ВНесколькоСтрок.Видимость				= ЛОЖЬ;
		Элементы.ГруппаВНесколькоСтрок.Видимость 		= ЛОЖЬ;		
		Элементы.ОбменВалют.Видимость 					= ЛОЖЬ;
		Элементы.ГруппаПериодаРасчета.Видимость 		= НЕ Объект.Проведен;
		Элементы.ЗарплатаДолг.Видимость 				= НЕ Объект.Проведен;
		Элементы.ЗарплатаГруппаКолонокИстории.Видимость = НЕ Объект.Проведен;
		
		Если НЕ БезИзменений Тогда
			Объект.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников");	
		КонецЕсли;
		
	Иначе   		
		Элементы.ГруппаЗП.Видимость = ЛОЖЬ;
		
		Если НЕ БезИзменений
			И Объект.ОбменВалют
			И НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
			
			Объект.Статья = Справочники.СтатьиДвиженияДенег.ОбменВалют ;			
		КонецЕсли;
		
		Элементы.ГруппаОбычноеДвижениеДенег.Видимость 	= НЕ Объект.ОбменВалют;
		Элементы.ГруппаОбменВалют.Видимость 			= Объект.ОбменВалют;	
		Элементы.ВНесколькоСтрок.Видимость 				= НЕ ДокументЗаблокирован И НЕ Объект.ОбменВалют;	
		Элементы.ОбменВалют.Видимость					= НЕ ДокументЗаблокирован и НЕ Объект.ВНесколькоСтрок;		
		Элементы.ГруппаОдногоПлатежа.Видимость 			= НЕ Объект.ВНесколькоСтрок;
		Элементы.ГруппаВНесколькоСтрок.Видимость 		= Объект.ВНесколькоСтрок;
		Элементы.ФормаОплаты.Видимость 					= НЕ Объект.ВНесколькоСтрок и НЕ ВестиУчетДенегВНесколькихХранилищах;		
		Элементы.ХранилищеДенег.Видимость 				= НЕ Объект.ВНесколькоСтрок и ВестиУчетДенегВНесколькихХранилищах;
		
		Если Объект.ОбменВалют Тогда
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обменять деньги");
			Исключение // нет прав
			КонецПопытки;
			
		ИначеЕсли Объект.ЕстьПриход 
			И Объект.ЕстьРасход Тогда
			
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести движение денег и закрыть");
			Исключение // нет прав
			КонецПопытки;
			
		ИначеЕсли Объект.ПриходДенег Тогда
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступление");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять Деньги");
			Исключение // нет прав
			КонецПопытки;
			
		Иначе
			Если НЕ БезИзменений Тогда
				Объект.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");	
			КонецЕсли;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдать Деньги");
			Исключение // нет прав
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезконтекста
Функция   ОбновитьКурс(Знач Валюта, Знач Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекущийОстаток()
	
	ТекущийОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(Объект.Дата - 1, Объект.ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, ИСТИНА);
	ОстатокПоХранилищу = ОбщийМодульСервер.ПолучитьОстатокДенег(Объект.Дата - 1, Объект.ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, ИСТИНА);
	Элементы.ТекущийОстаток.Видимость 				= НЕ ТекущийОстаток = 0;
	Элементы.НаименованиеОсновнойВалюты2.Видимость 	= НЕ ТекущийОстаток = 0;
	Элементы.НомерПлатежногоДокумента.Видимость		= Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичные");
	Элементы.ОстатокПоХранилищу.Видимость 			= ВестиУчетДенегВНесколькихХранилищах И НЕ Объект.Валюта = ОсновнаяВалюта И НЕ ОстатокПоХранилищу = 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийОстатокНаСервере()
	
	ТекущийОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(Объект.Дата - 1, Объект.ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег);
	ОстатокПоХранилищу = ОбщийМодульСервер.ПолучитьОстатокДенег(Объект.Дата - 1, Объект.ФормаОплаты, Объект.Валюта, Объект.ХранилищеДенег, ИСТИНА);
	Элементы.ТекущийОстаток.Видимость 				= НЕ ТекущийОстаток = 0;
	Элементы.НаименованиеОсновнойВалюты2.Видимость 	= НЕ ТекущийОстаток = 0;
	Элементы.НомерПлатежногоДокумента.Видимость		= Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичные");
	Элементы.ОстатокПоХранилищу.Видимость 			= ВестиУчетДенегВНесколькихХранилищах И НЕ Объект.Валюта = ОсновнаяВалюта И НЕ ОстатокПоХранилищу = 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000892") Тогда
		Элементы.ГруппаБлоков.Доступность 		= ЛОЖЬ;
		Элементы.ПогаситьСуммуДолга.Доступность = ЛОЖЬ;
		Элементы.ОбработкаТаблицы.Доступность 	= ЛОЖЬ;
		
		Элементы.КлиентВСлучаеОплатыИлиВозврата.Видимость = ЗначениеЗаполнено(Объект.КлиентПоставщик);
		Элементы.ПриходДенег.Видимость 			= ЛОЖЬ;
		Элементы.ПогаситьВаучер.Видимость		= ЛОЖЬ;
		Элементы.ПрошлыйМесяц.Видимость			= ЛОЖЬ;
		
	Иначе
		Элементы.ГруппаБлоков.Доступность 		= ИСТИНА;
		Элементы.ПогаситьСуммуДолга.Доступность = ИСТИНА;
		Элементы.ОбработкаТаблицы.Доступность 	= ИСТИНА;
		Элементы.ПрошлыйМесяц.Видимость			= ИСТИНА;
		
		Элементы.КлиентВСлучаеОплатыИлиВозврата.Видимость = ИСТИНА;
		Элементы.ПриходДенег.Видимость 			= ИСТИНА;
		Элементы.ПогаситьВаучер.Видимость	 	= ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
		ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = ИСТИНА;
	
	Если НЕ ДокументЗаблокирован тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			
			ДобавитьДанныеНоменклатуры(РезультатОбработки);
			
		Иначе			
			ОстановитьПоиск = ЛОЖЬ;
			// Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
			// 	РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
			// 	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			// 		Объект.Сотрудник = РезультатОбработки;
			// 		ОстановитьПоиск = ИСТИНА;
			// 	КонецЕсли;	
			// КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;
					
					ПриИзмененииКонтрагента();
					ИзменитьВидДокумента();
					ОбновитьВидимостьЭлементов();
					
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);
				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОрганизацияПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
		Если НЕ ОстановитьПоиск
			И ИспользоватьВаучеры Тогда
			
			РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Результат = ИСТИНА;
				ДобавитьПрименитьВаучер(РезультатОбработки);
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду НЕ найден") + " (" + ТекКод + ").");
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
		
		ИзменитьВидДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");	
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Организация.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Организация.ХранилищеДенег;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Подразделения", ДанныеВыбора, Текст, ОтборПоСотруднику);	
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюПриИзменении(Элемент)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Сотрудники", ДанныеВыбора, Текст, ОтборПоСотруднику);	
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуПриИзменении(Элемент)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите формирования данных по заработной плате.."));
	НачислитьВсемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	ОчиститьТаблицуНаСервере();
	ЗарплатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	Объект.Зарплата.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ Отказ
		И ИспользоватьВаучеры Тогда
		
		Ваучеров = 0;
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			Если СтрокаВаучера.ВаучерИзъят Тогда
				Ваучеров = Ваучеров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ваучеров = 0
			И Вопрос(?(Ваучеров = 1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучер?"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучеры") + " (" + СокрЛП(Ваучеров) + ")?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Отказ = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НЕ ТекущийОбъект.НачислениеИВыплатаЗаработнойПлаты
			И ЗначениеЗаполнено(ТекущийОбъект.КлиентПоставщик)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.Договор) 
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
			
			ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
			
			Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
				ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= ТекущийОбъект.Дата Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы НЕ указали обязательный Договор с контрагентом!");
				Сообщение.Поле 	= "Договор";
				Сообщение.УстановитьДанные(ТекущийОбъект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ отказ
			И ВестиУчетДенегВНесколькихХранилищах
			И НЕ ТекущийОбъект.НачислениеИВыплатаЗаработнойПлаты
			И НЕ ТекущийОбъект.ВНесколькоСтрок Тогда
			
			Если ТекущийОбъект.ОбменВалют Тогда
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег НЕ указано!");
					Сообщение.Поле 	= "ХранилищеДенег1";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				ИначеЕсли НЕ ТекущийОбъект.Валюта = ТекущийОбъект.ХранилищеДенег.Валюта Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
					Сообщение.Поле 	= "ХранилищеДенег1";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенегОбмена) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег обмена НЕ указано!");
					Сообщение.Поле 	= "ХранилищеДенегОбмена";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				ИначеЕсли НЕ ТекущийОбъект.ВалютаОбмена = ТекущийОбъект.ХранилищеДенегОбмена.Валюта Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег обмена иная!");
					Сообщение.Поле 	= "ХранилищеДенегОбмена";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;	
				КонецЕсли;
				
			Иначе
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег НЕ указано!");
					Сообщение.Поле 	= "ХранилищеДенег";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				ИначеЕсли НЕ ТекущийОбъект.Валюта = ТекущийОбъект.ХранилищеДенег.Валюта Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
					Сообщение.Поле 	= "ХранилищеДенег";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ отказ
			И ВестиУчетДенегВНесколькихХранилищах
			И НЕ ТекущийОбъект.НачислениеИВыплатаЗаработнойПлаты
			И ТекущийОбъект.ВНесколькоСтрок Тогда
			
			Для Каждого платеж из ТекущийОбъект.Платежи Цикл
				
				платежХранилищеДенег = платеж.ХранилищеДенег;
				Если НЕ ЗначениеЗаполнено(платежХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег НЕ указано в строке: " + Платеж.НомерСтроки);
					Сообщение.Поле 	= "ПлатежиХранилищеДенег";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				ИначеЕсли НЕ Платеж.Валюта = ПлатежХранилищеДенег.Валюта Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая в строке: " + Платеж.НомерСтроки);
					Сообщение.Поле 	= "Платежи";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА; 				
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ отказ
			И ВестиУчетДенегВНесколькихХранилищах
			И ТекущийОбъект.НачислениеИВыплатаЗаработнойПлаты
			И НЕ ТекущийОбъект.ВНесколькоСтрок Тогда
			
			Для Каждого платеж из ТекущийОбъект.Зарплата Цикл
				
				Если НЕ ЗначениеЗаполнено(платеж.ХранилищеДенег) Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилище денег НЕ указано в строке: " + Платеж.НомерСтроки);
					Сообщение.Поле 	= "ЗарплатаХранилищеДенег";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				ИначеЕсли НЕ Платеж.Валюта = Платеж.ХранилищеДенег.Валюта Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая в строке: " + Платеж.НомерСтроки);
					Сообщение.Поле 	= "Зарплата";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА; 				
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ТекущийОбъект.ВНесколькоСтрок
			И НЕ ТекущийОбъект.НачислениеИВыплатаЗаработнойПлаты
			И НЕ отказ
			И ВестиУчетДенегВНесколькихХранилищах
			И ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег)
			И НЕ ТекущийОбъект.Валюта = ТекущийОбъект.ХранилищеДенег.Валюта Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта хранилища денег другая!");
			Сообщение.Поле 	= "ХранилищеДенег";
			Сообщение.УстановитьДанные(ТекущийОбъект);
			Сообщение.Сообщить();
			
			Отказ = ИСТИНА;		
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;     	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбмен(Знач ПересчитатьКурсы = ЛОЖЬ)
	
	Если Объект.КурсОбмена = 0 Тогда
		Объект.КурсОбмена = 1;
	КонецЕсли;
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
	Если ПересчитатьКурсы Тогда
		Если Объект.Валюта = ОсновнаяВалюта Тогда
			Объект.КурсОбмена = Объект.СуммаОбмена / (Объект.Сумма * Объект.Курс);
		Иначе
			Объект.Курс = Объект.СуммаОбмена * Объект.КурсОбмена / Объект.Сумма;
		КонецЕсли;	
		
	Иначе
		Объект.СуммаОбмена = Объект.Сумма * Объект.Курс / Объект.КурсОбмена;
	КонецЕсли;
	
	Элементы.Курс1.Видимость 	  = НЕ Объект.валюта = ОсновнаяВалюта;
	Элементы.КурсОбмена.Видимость = НЕ Объект.ВалютаОбмена = ОсновнаяВалюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку()
	
	ТекущиеДанные = Элементы.Зарплата.ТекущиеДанные;	
	Если НЕ ТекущиеДанные = Неопределено тогда
		ПересчитатьСтрокуНаСервере(ТекущиеДанные.номерстроки);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуНаСервере(Знач НомерСтроки)
	
	СтрокаЗП = Объект.Зарплата[НомерСтроки - 1];
	РассчитатьСтрокуЗП(СтрокаЗП);  	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	
	ДатаНачала 		= ПериодРасчета.ДатаНачала;
	ДатаОкончания 	= ПериодРасчета.ДатаОкончания;
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРасчетаПриИзмененииНаСервере()
	
	Для Каждого СтрокаЗП Из Объект.Зарплата Цикл
		СтрокаЗП.ДатаНачала 	= ДатаНачала;
		СтрокаЗП.ДатаОкончания 	= ДатаОкончания;
		РассчитатьСтрокуЗП(СтрокаЗП);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Платежи.ТекущиеДанные;
	ТекущаяСтрока.Курс = ПолучитьКурс(ТекущаяСтрока.Валюта);
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПлатежиПриИзмененииПересчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриИзменении(Элемент)
	ПлатежиПриИзмененииПересчет();
КонецПроцедуры

Процедура ПлатежиПриИзмененииПересчет()
	
	Сумма = 0;
	Объект.ЕстьПриход = ЛОЖЬ;
	Объект.ЕстьРасход = ЛОЖЬ;
	
	Для Каждого СтрокаПлатежа Из Объект.Платежи Цикл
		Если СтрокаПлатежа.ПриходИлиРасход = ПредопределенноеЗначение("Перечисление.ПриходРасход.Приход") Тогда
			Сумма = Сумма + СтрокаПлатежа.Сумма * СтрокаПлатежа.Курс;
			Объект.ЕстьПриход = ИСТИНА;
			
		Иначе
			Сумма = Сумма - СтрокаПлатежа.Сумма * СтрокаПлатежа.Курс;
			Объект.ЕстьРасход = ИСТИНА;
			
		КонецЕсли;       	
		
	КонецЦикла;
	Объект.Сумма = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПриходИлиРасход) Тогда
		ТекущиеДанные.ПриходИлиРасход = ?(Объект.ПриходДенег, ПредопределенноеЗначение("Перечисление.ПриходРасход.Приход"),  ПредопределенноеЗначение("Перечисление.ПриходРасход.Расход"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФормаОплаты) 
		И ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
		
		ТекущиеДанные.ФормаОплаты = Объект.ФормаОплаты;
		ТекущиеДанные.Валюта = Объект.Валюта;
		ТекущиеДанные.Курс 	 = Объект.Курс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)	
	ОбновитьВидимостьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиХранилищеДенегПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Платежи.ТекущиеДанные;
	ТекущиеДанные.Валюта = ВалютаХранилища(ТекущиеДанные.ХранилищеДенег, ТекущиеДанные.Валюта);
	ТекущиеДанные.ФормаОплаты = ФормаОплатыХранилища(ТекущиеДанные.ХранилищеДенег);
	ТекущиеДанные.Курс = ПолучитьКурс(ТекущиеДанные.Валюта);
	
	ПлатежиПриИзмененииПересчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьСуммуДолга(Команда)
	
	Если Объект.ВНесколькоСтрок Тогда
		
		СтрокаПлатежа = Объект.Платежи.Добавить();
		Если ТекущийДолг > 0 тогда
			СтрокаПлатежа.ПриходИлиРасход = ПредопределенноеЗначение("Перечисление.ПриходРасход.Приход");
			СтрокаПлатежа.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
			СтрокаПлатежа.Сумма = ТекущийДолг ;
			
		Иначе
			СтрокаПлатежа.ПриходИлиРасход = ПредопределенноеЗначение("Перечисление.ПриходРасход.Расход");
			СтрокаПлатежа.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
			СтрокаПлатежа.Сумма = -ТекущийДолг ;
			
		КонецЕсли;
		СтрокаПлатежа.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		СтрокаПлатежа.курс = 1;
		
	Иначе
		Если ТекущийДолг > 0 тогда
			Объект.ПриходДенег = ИСТИНА;
			Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
				Объект.Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");	
			КонецЕсли;
			Объект.Сумма = ТекущийДолг ;	
			
		Иначе
			Объект.ПриходДенег = ЛОЖЬ;
			Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
				Объект.статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");	
			КонецЕсли;
			Объект.Сумма = -ТекущийДолг ;
			
		КонецЕсли;
		
		Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		Объект.курс = 1;
		
	КонецЕсли;
	
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
			
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент НЕ найден."));
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ПолучитьКурс(Знач Валюта)	
	Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Объект.Дата);	
КонецФункции // получитьКурс

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		
		ОбновитьВидимостьЭлементов();
		ОбработатьБлокировку();                                               	
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
	ВидимостьСторно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                            // ПРИ ЗАКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагента()
	
	Если  ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		Если ИспользоватьУчетВалют
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
			Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
			ОбновитьТекущийОстатокНаСервере();
		КонецЕсли;	
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И (НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ НЕ Объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик) Тогда
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата);
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.КлиентПоставщик.ХранилищеДенег;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                       // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов(ИСТИНА);
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)        // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда	
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ВестиУчетЗарплатыСотрудников 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		ВестиУчетДенегВНесколькихХранилищах  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		УчетПоОрганизациям 					 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС");
		Элементы.ПлатежиФормаОплаты.Видимость= НЕ ВестиУчетДенегВНесколькихХранилищах;
		ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
		Элементы.ПлатежиЗаказ.Видимость		 = ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.Заказ.Видимость			 = НЕ ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляДвиженияДенег");
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ИспользоватьВаучеры 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
		
		Если НЕ Объект.НачислениеИВыплатаЗаработнойПлаты Тогда
			НачислениеИВыплатаЗаработнойПлаты = Параметры.РасчетЗП И ВестиУчетЗарплатыСотрудников;		
		Иначе
			НачислениеИВыплатаЗаработнойПлаты = ИСТИНА;
		КонецЕсли;	
		
		Если НЕ ВестиУчетЗарплатыСотрудников
			И НачислениеИВыплатаЗаработнойПлаты Тогда
			
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001450", ЭтаФорма, Отказ, );
			
			Если НЕ Отказ 
				И (ОбщийМодульСерверПривилегия.ЕстьПользователи() 
				И НЕ РольДоступна("ПолныеПрава")) Тогда
				
				Казначей = ИСТИНА;
				Попытка 
					Выполнить(" Казначей = РольДоступна(""Казначей""); ");
				Исключение 	
				КонецПопытки;
				
				Если НЕ Казначей Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вам недоступна функция начисления и выдачи заработной платы!");
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;	
							   КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			
			Если НачислениеИВыплатаЗаработнойПлаты
				И ЗначениеЗаполнено(параметры.Сотрудник) Тогда
				
				ОтборПоСотруднику = Параметры.Сотрудник; 		
			КонецЕсли;
			
			ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
			ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
			ИспользоватьУчетВалют 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");			
			СтатьяПоступленияДенегПоУмолчанию 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию");
			СтатьяРасходаДенегПоУмолчанию 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию");
			
			Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
			КонецЕсли;
			
			Если Параметры.ОбменВалют Тогда
				Объект.ОбменВалют = ИСТИНА;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
				
				Объект.Сторный = ЛОЖЬ; // При копировании
				Объект.ДокументСторно = Неопределено;				
				
				Объект.ПриходДенег = НЕ параметры.ЭтоРасход;
				Если Объект.естьрасход Тогда
					Объект.ПриходДенег = ЛОЖЬ;	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда					
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					ХранилищеДенегПриИзмененииНаСервере();
				КонецЕсли;
				
				Объект.НачислениеИВыплатаЗаработнойПлаты = НачислениеИВыплатаЗаработнойПлаты;
				
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Валюта ) Тогда
					Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
					Объект.Курс   = 1;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Статья) Тогда
					Если Объект.ПриходДенег Тогда
						Объект.Статья = СтатьяПоступленияДенегПоУмолчанию;
					Иначе
						Объект.Статья = СтатьяРасходаДенегПоУмолчанию;
					КонецЕсли;					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
					Если ВестиУчетДенегВНесколькихХранилищах 
						И ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
						
						Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
					Иначе
						Объект.ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
					
					Если Объект.ПриходДенег Тогда
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
							Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
						Иначе
							Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
						КонецЕсли;	
						
					Иначе
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
							Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");
						Иначе
							Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо");
						КонецЕсли;					
					КонецЕсли;
					
					ИзменитьВидДокумента();
				КонецЕсли;
				
				Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата(); // для курса
				
				Если Объект.НачислениеИВыплатаЗаработнойПлаты
					И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеУчитыватьДолгиПоЗаработнойПлатеПриФормированииНовыхДокументов") Тогда
					
					ЗаполнитьНаСервере();	
				КонецЕсли;
				
				Если ВестиУчетПоНаправлениямДеятельности
					И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
					
					ОбновитьЗначениеНаправленияДеятельности();
				КонецЕсли;
				
			Иначе
				Если НЕ Объект.Проведен Тогда		
					
					Если НЕ ЗначениеЗаполнено(Объект.Курс) Тогда
						Объект.Курс 			= ОбновитьКурс(Объект.Валюта, Объект.Дата);
						Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Объект.КурсОбмена) Тогда
						Объект.КурсОбмена = ОбновитьКурс(Объект.ВалютаОбмена, Объект.Дата);
					КонецЕсли;	
					
				КонецЕсли;
				
				ВаучерыВидимость = НЕ Объект.Ваучеры.Количество() = 0;
				Элементы.Ваучеры.Видимость = ВаучерыВидимость;
				Элементы.ПогаситьВаучер.Видимость = ИспользоватьВаучеры И НЕ ВаучерыВидимость;
			КонецЕсли;
			
			НаименованиеОсновнойВалюты = ОсновнаяВалюта.Наименование ;
			Элементы.НаименованиеОсновнойВалюты.Видимость 	= НЕ ИспользоватьУчетВалют;
			Элементы.НаименованиеОсновнойВалюты1.Видимость 	= НЕ ИспользоватьУчетВалют;
			
			Элементы.Курс1.Видимость 	  = НЕ Объект.валюта = ОсновнаяВалюта;
			Элементы.КурсОбмена.Видимость = НЕ Объект.ВалютаОбмена = ОсновнаяВалюта;
			Элементы.Курс.Видимость 	  = НЕ Объект.Валюта = ОсновнаяВалюта;
			
			Элементы.ВаучерыВаучерИзъят.Видимость 	= ИспользоватьВаучеры И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
			Элементы.ФормаОплаты.Видимость 			= НЕ Объект.ВНесколькоСтрок и НЕ ВестиУчетДенегВНесколькихХранилищах;
			Элементы.ХранилищеДенег.Видимость 		= НЕ Объект.ВНесколькоСтрок и ВестиУчетДенегВНесколькихХранилищах;
			Элементы.ХранилищеДенег1.Видимость 		= ВестиУчетДенегВНесколькихХранилищах;
			Элементы.ХранилищеДенегОбмена.Видимость = ВестиУчетДенегВНесколькихХранилищах;
			
			ИзменитьВидДокумента(ИСТИНА);
			
			Если ПараметрыСеанса.ВерсияПриложения < 803050000 
				ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда
				
				Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
					Выполнить(" Элементы.ОбменВалют.ВидФлажка = ВидФлажка.Флажок;
					|Элементы.ВНесколькоСтрок.ВидФлажка = ВидФлажка.Флажок;
					|Элементы.ПриходДенег.ВидФлажка = ВидФлажка.Флажок; ");	
				КонецЕсли;
				Элементы.ОбменВалют.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");
				Элементы.ОбменВалют.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
				
				Элементы.ВНесколькоСтрок.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В несколько строк");
				Элементы.ВНесколькоСтрок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
				
				Элементы.ПриходДенег.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Это поступление денег");
				Элементы.ПриходДенег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			КонецЕсли;
		КонецЕсли;	
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;			
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходДенегПриИзменении(Элемент)
	
	ИзменитьВидДокумента();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	// ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	// ДокументОбъект.ПодготовкаКПроведению(Отказ);
	// ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		
		Дата 		= Объект.Дата;
		ОбменВалют  = Объект.ОбменВалют;
		ФормаОплаты = Объект.ФормаОплаты;
		Ссылка 		= Объект.Ссылка;
		Договор 	= Объект.Договор;
		Платежи 	= Объект.Платежи;
		Зарплата 	= Объект.Зарплата;
		СуммаПриход = Объект.СуммаПриход;
		СуммаРасход = Объект.СуммаРасход;
		ПриходДенег = Объект.ПриходДенег;
		Валюта 		= Объект.Валюта;
		Сумма		= Объект.Сумма;
		КлиентПоставщик = Объект.КлиентПоставщик;
		ВНесколькоСтрок = Объект.ВНесколькоСтрок;
		ОсновнаяВалюта  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ХранилищеДенег  = Объект.ХранилищеДенег;
		НачислениеИВыплатаЗаработнойПлаты = Объект.НачислениеИВыплатаЗаработнойПлаты;
		
		Если НЕ ОбменВалют Тогда
			
			Если НачислениеИВыплатаЗаработнойПлаты Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда // зп
					
					Для Каждого Начисление Из Зарплата Цикл
						
						Если НЕ Начисление.Сумма = 0 тогда
							
							НачислениеСумма = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
							
							СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(НачислениеСумма, Дата, ФормаОплаты, Начисление.Валюта, Начисление.ХранилищеДенег, ИСТИНА, Ссылка);
							Отказ = СтруктураПополнения.Отказ;
							
						КонецЕсли;
						
					КонецЦикла; 	
				КонецЕсли;
				
			Иначе // обычный платеж				
				
				ВестиУчетОплатПоОтдельнымЗаказам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам");
				ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
				
				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
				Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
					И ЗначениеЗаполнено(Договор) Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, СуммаПриход, ИСТИНА, СуммаРасход, , Ссылка );
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					Если ВНесколькоСтрок Тогда
						
						Для Каждого Платеж Из Платежи Цикл
							
							ЭтоПриход = платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход;
							
							Если ЭтоПриход тогда
								
								Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( - платеж.Сумма, Дата, платеж.ФормаОплаты, ?(ЗначениеЗаполнено(платеж.валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, , Ссылка);
							Иначе
								СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(платеж.Сумма, Дата, платеж.ФормаОплаты, ?(ЗначениеЗаполнено(платеж.Валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, ИСТИНА, Ссылка);
								Отказ = СтруктураПополнения.Отказ;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе // один платеж						  						
						Если ПриходДенег тогда
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, , Ссылка);
							
						Иначе
							СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, ИСТИНА, Ссылка);
							Отказ = СтруктураПополнения.Отказ;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		Иначеесли ОбменВалют
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда // обмен
			
			СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, ИСТИНА, Ссылка);
			Отказ = СтруктураПополнения.Отказ;
			
		КонецЕсли;          	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Процедура РассчитатьСтрокуЗП(СтрокаЗП)
	
	Если ЗначениеЗаполнено(СтрокаЗП.Сотрудник)
		И НЕ СтрокаЗП.Размер = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаНачала) Тогда
			СтрокаЗП.ДатаНачала = ДатаНачала;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
			СтрокаЗП.ДатаОкончания = ДатаОкончания;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗП.Валюта) Тогда
			СтрокаЗП.Валюта = СтрокаЗП.ВалютаНачисления;
		КонецЕсли;
		
		Если СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемПрибылиЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыЛичнойРеализации Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьОбъемРеализацииЗаПериод(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ИСТИНА) / 100;
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСтоимостиВыполненныхРабот Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник) / 100;
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ЗаКомплектацию Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ИСТИНА);
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ЗаОказанныеУслугиЗаВремя Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ЛОЖЬ, ИСТИНА);
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли СтрокаЗП.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыОказанныхУслугЗаВремя Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗП.ДатаНачала)
				И ЗначениеЗаполнено(СтрокаЗП.ДатаОкончания) Тогда
				
				СтрокаЗП.Количество = ОбщийМодульСервер.ПолучитьСтоимостьВыполненныхРабот(СтрокаЗП.ДатаНачала, СтрокаЗП.ДатаОкончания, строкаЗП.Сотрудник, ЛОЖЬ, ЛОЖЬ, ИСТИНА) / 100;
				
			Иначеесли НЕ СтрокаЗП.долг тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " " + СтрокаЗП.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан период Начисления!");
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаЗП.СуммаНачисления = СтрокаЗП.Размер * СтрокаЗП.Количество;
		
		Если НЕ СтрокаЗП.Долг Тогда
			СтрокаЗП.ОписаниеНачисления = "" + формат(ДатаНачала, "ДФ=dd.MM.yy") + "-" + формат(ДатаОкончания, "ДФ=dd.MM.yy") + " " + СокрЛП(СтрокаЗП.Размер) + "*" + СокрЛП(СтрокаЗП.Количество);	
		КонецЕсли;
		
		СтрокаЗП.Курс 	= ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаЗП.Валюта, Объект.Дата);		
		Сумма 			= СтрокаЗП.СуммаНачисления * СтрокаЗП.Курс;
		Сумма 			= ОбщийМодульСервер.ПоКурсу(Сумма, , СтрокаЗП.ВалютаНачисления, Объект.Дата); 		
		СтрокаЗП.Сумма 	= Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("СтатьиДвиженияДенег", ДанныеВыбора, Текст, Объект.Статья);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыбылоПриИзменении(Элемент)
	ПересчитатьОбмен();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОбменаПриИзменении(Элемент)
	ПересчитатьОбмен(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенег1ПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	ОбновитьТекущийОстаток();	
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегОбменаПриИзменении(Элемент)
	ХранилищеДенегОбменаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегОбменаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенегОбмена) Тогда
		Объект.ВалютаОбмена	= Объект.ХранилищеДенегОбмена.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);
	Элементы.Курс.Видимость = НЕ Объект.Валюта = ОсновнаяВалюта;
	ОбновитьТекущийОстаток();
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.ФормаОплаты 	= Объект.ХранилищеДенег.ФормаОплаты;
		Объект.Валюта 		= Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.КлиентПоставщик, Объект.Договор, Объект.Организация, , , );	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВаучер(Команда)
	
	Элементы.ПогаситьВаучер.Видимость 	= ЛОЖЬ;
	Элементы.Ваучеры.Видимость 			= ИСТИНА;
	СтрокаВаучера = Объект.Ваучеры.Добавить();
	Элементы.Ваучеры.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
	Элементы.Ваучеры.ТекущийЭлемент 	= Элементы.ВаучерыВаучер;		
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьПрименитьВаучер(Знач Ваучер, Знач НеДобавлятьРучнойВыбор = ЛОЖЬ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если НЕ Объект.Ваучеры.Количество() = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ваучер", Ваучер);
			
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
			Если НЕ ДокументЗаблокирован Тогда
				
				Если НеДобавлятьРучнойВыбор
					ИЛИ СтрокаВаучера.Количество() = 0 Тогда
					
					Если НЕ НеДобавлятьРучнойВыбор Тогда
						СтрокаВаучера = Объект.Ваучеры.Добавить();
						СтрокаВаучера.Ваучер = Ваучер;
					Иначе
						СтрокаВаучера = СтрокаВаучера[0];
					КонецЕсли;
					
					Если Ваучер.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
						КонтрагентВаучера = Ваучер.Контрагент;
						
						Если ЗначениеЗаполнено(КонтрагентВаучера)
							И НЕ Объект.КлиентПоставщик = КонтрагентВаучера Тогда
							
							Объект.КлиентПоставщик = КонтрагентВаучера;
							ПриИзмененииКонтрагента();
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
						// ОтветПоВаучеру для накопительной карты не нужен - по ней не будет накоплений, если товар неподходящий
						ОстатокНакопленияЧислом = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Ваучер, Объект.Дата);
						ОстатокНакопления = "" + СокрЛП(ОстатокНакопленияЧислом);
						ОстатокНакопления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток накопления") + ": " + ОстатокНакопления;
						
						Результат = Новый Структура("Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом", Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом);
						
						ДобавитьКОплатеВаучером(Результат.Ваучер, ЛОЖЬ, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено из накоплений"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"), Результат.ОстатокНакопленияЧислом);
						
						СтрокаВаучера.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принят к оплате");			
						Объект.ВаучерНакопления = Результат.Ваучер;
						
						Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
						Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено ваучером"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочная карта"), Ваучер.НоминалПроцент);
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент Тогда
						
						Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта не в этом документе не используется!"));
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено скидкой"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта на сумму"), Ваучер.НоминалПроцент);
					КонецЕсли;
					
				Иначе
					СтрокаВаучера = СтрокаВаучера[0];
					Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаВаучера.Количество() = 0 Тогда // Встать на строку
				
				СтрокаВаучера = СтрокаВаучера[0];
				Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ДобавитьКОплатеВаучером(Знач Ваучер, Знач ВаучерИзъят = ЛОЖЬ, Знач ТекстПогашения = "", Знач ТекстДляНеподходящего = "", Знач СуммаПогашения = 0, Знач СтрокаВаучера = Неопределено)
	
	ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, , , ИСТИНА);
	
	Если ОтветПоВаучеру.ВаучерПодходит Тогда
		
		Объект.ФормаОплаты 	= Перечисления.ФормыОплаты.Сертификат;
		Объект.Сумма		= СуммаПогашения;
		Объект.СуммаПриход  = СуммаПогашения;
		Объект.Статья		= ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
		ОБъект.Комментарий 	= ТекстПогашения + ": " + Ваучер.Наименование;
		
		Если Не СтрокаВаучера = Неопределено Тогда
			СтрокаВаучера.ВаучерИзъят = ВаучерИзъят;
			ЭтаФорма.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;
		КонецЕсли;
		Результат = ИСТИНА;
		
	Иначе
		Сообщить(ТекстДляНеподходящего + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
		Результат = ЛОЖЬ;
	КонецЕсли;						
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВаучерыПослеУдаления(Элемент)
	ВаучерыПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВаучерыПослеУдаленияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВаучерНакопления) Тогда
		ВаучерНакопленияВОплатах = Неопределено;
		
		МассивВаучеровОплаты = Новый Массив;
		
		Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
			Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
				МассивВаучеровОплаты.Добавить(СтрокаВаучер.Ваучер);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВаучеровОплаты.Количество() = 0
			И МассивВаучеровОплаты.Найти(Объект.ВаучерНакопления) = Неопределено Тогда
			
			Объект.ВаучерНакопления = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыВаучерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ваучеры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ДобавитьПрименитьВаучер(ТекущиеДанные.Ваучер, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыйМесяц(Команда)
	
	ТекущаяДата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	ДатаНачала = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 2600);
	ДатаОкончания = КонецМесяца(ДатаНачала);
	ПериодРасчета.ДатаНачала = ДатаНачала;
	ПериодРасчета.ДатаОкончания = ДатаОкончания;
	
	ПериодРасчетаПриИзмененииНаСервере();
	
КонецПроцедуры
