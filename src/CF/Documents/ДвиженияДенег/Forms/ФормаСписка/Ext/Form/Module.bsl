//sza140509-0111 SZA: 
//sza130901-2345 :

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьТекущийОстаток(ОтборПоХранилищуДенег) 
	
	ТекущийОстаток = 0;
	
	ДатаОстатка = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Возврат ОбщийМодульСервер.ОстатокДенег(ДатаОстатка, , , ?(ЗначениеЗаполнено(ОтборПоХранилищуДенег), ОтборПоХранилищуДенег, Неопределено));
	
КонецФункции //ОбновитьТекущийОстаток

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                       // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	ОтборПоОрганизацииПриИзмененииНаСервере(Истина);
	ОтборПоХранилищуДенегПриИзмененииНаСервере();
	ПрименитьВидФормыСписка();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаток(Команда)
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	этаформа.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ	
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокВОднуКолонку);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Расходы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасход(Команда)
	
	СсылкаНаДокумент = СоздатьНовыйДокументРасход();
    ОткрытьЗначение(СсылкаНаДокумент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   СоздатьНовыйДокументРасход()
	
   НовыйДокумент = Документы.ДвиженияДенег.СоздатьДокумент();
   НовыйДокумент.Дата 			= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
   НовыйДокумент.ПриходДенег 	= Ложь;
   НовыйДокумент.Записать();
   
   Возврат НовыйДокумент.Ссылка;
   
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоВалютам(Команда)
	
	ФормаВалют = ПолучитьФорму("Справочник.Валюты.ФормаСписка");
	ФормаВалют.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходПриходДокументОбменаВалют(Команда)
	
	СсылкаНаДокумент = СоздатьНовыйДокументОбмен();
    ОткрытьЗначение(СсылкаНаДокумент);
	
КонецПроцедуры

&НаСервере
Функция   СоздатьНовыйДокументОбмен()
	
   НовыйДокумент = Документы.ДвиженияДенег.СоздатьДокумент();
   НовыйДокумент.Дата 		= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
   НовыйДокумент.ОбменВалют = Истина;
   НовыйДокумент.Записать();
   
   Возврат НовыйДокумент.Ссылка;
   
КонецФункции

&НаКлиенте
Процедура Деньги(Команда)
	
	ФормаОстатоков = ПолучитьФорму("ОбщаяФорма.Деньги");
	ФормаОстатоков.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНачисленияИВыдачиЗаработнойПлаты(Команда)
	
	ПараметрыФормы = Новый Структура("РасчетЗП", Истина);
	ФормаНовогоДокумента = ПолучитьФорму("Документ.ДвиженияДенег.ФормаОбъекта", ПараметрыФормы);
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	ОтборПоОрганизацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПоОрганизацииПриИзмененииНаСервере(НеОбновлятьВЭтотРаз = Ложь)
	
	Если параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
		Расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
		
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", Истина);
		расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", Истина);
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", Истина);		
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	расходы.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	
	Если НЕ НеОбновлятьВЭтотРаз Тогда
		Если РежимВидаОкнаВОдинСписок Тогда
			Элементы.СписокВОднуКолонку.Обновить();
		Иначе
			Элементы.Расходы.Обновить();
			Элементы.Список.Обновить();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьВидФормыСписка(Команда)
	
	РежимВидаОкнаВОдинСписок = НЕ РежимВидаОкнаВОдинСписок;
	элементы.ГруппаГоризонт.Видимость 		= не РежимВидаОкнаВОдинСписок;
	элементы.ГруппаВОдинСписок.Видимость 	= РежимВидаОкнаВОдинСписок;
	элементы.ГруппаКоманд.Видимость 		= не РежимВидаОкнаВОдинСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьВидФормыСписка()
	
	элементы.ГруппаГоризонт.Видимость 		= не РежимВидаОкнаВОдинСписок;
	элементы.ГруппаВОдинСписок.Видимость 	= РежимВидаОкнаВОдинСписок;
	элементы.ГруппаКоманд.Видимость 		= не РежимВидаОкнаВОдинСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоХранилищуДенегПриИзменении(Элемент)
	
	ОтборПоХранилищуДенегПриИзмененииНаСервере();
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоХранилищуДенегПриИзмененииНаСервере()
	
	Если параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		Расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", Истина);
		расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", Истина);
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", Истина);		
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	расходы.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	
	Если РежимВидаОкнаВОдинСписок Тогда
		Элементы.СписокВОднуКолонку.Обновить();
	Иначе
		Элементы.Расходы.Обновить();
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры
