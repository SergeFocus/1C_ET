// sza150115-1326 фикс
// sza140619-1406
// sza130901-2345 :

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;

КонецПроцедуры

&НаКлиенте
Процедура Деньги(Команда)

	ОткрытьФорму("ОбщаяФорма.Деньги");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаток(Команда)

	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	ЭтаФорма.ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьТекущийОстаток(Знач ОтборПоХранилищуДенег)

	ТекущийОстаток = 0;
	ДатаОстатка = ОбщийМодульСервисСервер.ПользователяТекущаяДата();

	Возврат ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, , , ?(ЗначениеЗаполнено(ОтборПоХранилищуДенег), ОтборПоХранилищуДенег, неопределено), ИСТИНА);

КонецФункции // ОбновитьТекущийОстаток

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)

	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПоВалютам(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	ОтборПоОрганизацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтборПоОрганизацииПриИзмененииНаСервере(Знач НеОбновлятьВЭтотРаз = ЛОЖЬ)

	Если ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
		Расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", НЕ ЗначениеЗаполнено(ОтборПоОрганизации));
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", ИСТИНА);
		расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", ИСТИНА);
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоОрганизации", ИСТИНА);
	КонецЕсли;

	Список.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	расходы.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("организация", ОтборПоОрганизации);
	Если НЕ НеОбновлятьВЭтотРаз Тогда
		Если РежимВидаОкнаВОдинСписок Тогда
			Элементы.СписокВОднуКолонку.Обновить();
		Иначе
			Элементы.Расходы.Обновить();
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоХранилищуДенегПриИзменении(Элемент)

	ОтборПоХранилищуДенегПриИзмененииНаСервере();
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);

КонецПроцедуры

&НаСервере
Процедура ОтборПоХранилищуДенегПриИзмененииНаСервере()

	Если ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС Тогда
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		Расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", НЕ ЗначениеЗаполнено(ОтборПоХранилищуДенег));
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", ИСТИНА);
		расходы.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", ИСТИНА);
		СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("НетОтбораПоХранилищу", ИСТИНА);
	КонецЕсли;

	Список.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	расходы.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	СписокВОднуКолонку.Параметры.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	Если РежимВидаОкнаВОдинСписок Тогда
		Элементы.СписокВОднуКолонку.Обновить();
	Иначе
		Элементы.Расходы.Обновить();
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоменятьВидФормыСписка(Команда)

	РежимВидаОкнаВОдинСписок = НЕ РежимВидаОкнаВОдинСписок;
	Элементы.ГруппаГоризонт.Видимость 		= не РежимВидаОкнаВОдинСписок;
	Элементы.ГруппаВОдинСписок.Видимость 	= РежимВидаОкнаВОдинСписок;
	Элементы.ГруппаКоманд.Видимость 		= не РежимВидаОкнаВОдинСписок;

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю

	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                            // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьВидФормыСписка()

	Элементы.ГруппаГоризонт.Видимость 		= не РежимВидаОкнаВОдинСписок;
	Элементы.ГруппаВОдинСписок.Видимость 	= РежимВидаОкнаВОдинСписок;
	Элементы.ГруппаКоманд.Видимость 		= не РежимВидаОкнаВОдинСписок;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                       // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;
	ОтборПоОрганизацииПриИзмененииНаСервере(ИСТИНА);
	ОтборПоХранилищуДенегПриИзмененииНаСервере();
	ПрименитьВидФормыСписка();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	текущийОстаток = ОбновитьТекущийОстаток(ОтборПоХранилищуДенег);
	Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ текущийОстаток = 0;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)        // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокВОднуКолонку);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Расходы);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РеестрДвиженияДенег(Команда)

	ПараметрыФормыРеестра = Новый Структура;
	ОткрытьФорму("Документ.ДвиженияДенег.Форма.РеестрДвиженияДенег", ПараметрыФормыРеестра);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНачисленияИВыдачиЗаработнойПлаты(Команда)

	ПараметрыФормы = Новый Структура("РасчетЗП", ИСТИНА);
	ОткрытьФорму("Документ.ДвиженияДенег.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция   СоздатьНовыйДокументОбмен()

   НовыйДокумент = Документы.ДвиженияДенег.СоздатьДокумент();
   НовыйДокумент.Дата 		= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
   НовыйДокумент.ОбменВалют = ИСТИНА;
   НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);

   Возврат НовыйДокумент.Ссылка;

КонецФункции

&НаСервереБезКонтекста
Функция   СоздатьНовыйДокументРасход()

   НовыйДокумент = Документы.ДвиженияДенег.СоздатьДокумент();
   НовыйДокумент.Дата 			= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
   НовыйДокумент.ПриходДенег 	= ЛОЖЬ;
   НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);

   Возврат НовыйДокумент.Ссылка;

КонецФункции

&НаКлиенте
Процедура СоздатьРасход(Команда)

	СсылкаНаДокумент = СоздатьНовыйДокументРасход();
    ПоказатьЗначение(Неопределено, СсылкаНаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходПриходДокументОбменаВалют(Команда)

	СсылкаНаДокумент = СоздатьНовыйДокументОбмен();
    ПоказатьЗначение(Неопределено, СсылкаНаДокумент);

КонецПроцедуры
