// sza151210-2334 про
// sza150606-0125 
// sza150109-0207 сторно
// sza140903-1155 
// sza140725-1954 !СуммаКУЧету
// sza140701-1316  
// sza140613-1407 : 
// sza130914-0350 : 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			ПриходДенег 	= ЛОЖЬ;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");// сторно
				Иначе
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
				КонецЕсли;
			КонецЕсли;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			ПриходДенег 	= ИСТИНА;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
				Иначе
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
				КонецЕсли;
			КонецЕсли;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СредстваПредприятия") Тогда
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			СуммаРасход = ДанныеЗаполнения.НачальнаяСтоимость;
			Сумма = ДанныеЗаполнения.НачальнаяСтоимость;
			ХранилищеДенег = ДанныеЗаполнения.ХранилищеДенег;
			ЕстьРасход = ИСТИНА;			
			ПриходДенег = ЛОЖЬ;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			Комментарий = ДанныеЗаполнения.Комментарий;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Если ДанныеЗаполнения.ТовараНаСумму > 0 Тогда
				ПриходДенег = ИСТИНА;
				Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			Иначе
				ПриходДенег = ЛОЖЬ;
				Сумма 		= -ДанныеЗаполнения.ТовараНаСумму;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.События") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.Направление;
			Комментарий = ДанныеЗаполнения.Комментарий;
			
			Если ДанныеЗаполнения.ТовараНаСумму > 0 Тогда
				ПриходДенег = ИСТИНА;
				Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			Иначе
				ПриходДенег = ЛОЖЬ;
				Сумма 		= -ДанныеЗаполнения.ТовараНаСумму;
			КонецЕсли;
			
			КлиентПоставщик = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Клиент), ДанныеЗаполнения.Клиент, ДанныеЗаполнения.Поставщик);			
			
		Иначе
			Если НЕ ДанныеЗаполнения.свойство("Валюта", Валюта) Тогда
				ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				
				Если ДанныеЗаполнения.свойство("ВидЦен", ВидЦен) Тогда			
					Валюта = ВидЦен.ВалютаЦены;
				КонецЕсли;		
			КонецЕсли;		
			
			ЕстьПриход = ЛОЖЬ;
			ЕстьРасход = ЛОЖЬ;
			
			Если НЕ ДанныеЗаполнения.свойство("ЕстьПриход", ЕстьПриход) Тогда
				ДанныеЗаполнения.свойство("ЕстьРасход", ЕстьРасход)
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если НЕ Отказ Тогда
			
			движения.РасчетыСПоставщиками.Записать();
			движения.Расчеты.Записать();
			движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			движения.РасчетыСОтсрочкой.Записать();
			движения.ОплатаПоЗаказам.Записать();
			движения.Деньги.Записать();
			движения.Зарплата.Записать();
			движения.НакоплениеНаВаучеры.Записать();
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
				
				Если НЕ Сторный Тогда
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
				Иначе
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
				КонецЕсли;
				
				ДвиженияСОтсрочкой = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				
				ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
				ОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
				
				Если НЕ ОбменВалют Тогда
					
					Если НачислениеИВыплатаЗаработнойПлаты Тогда
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда // зп
							
							ЗаработнаяПлатаСотрудников = Справочники.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников;
							
							Для Каждого Начисление Из Зарплата Цикл
								
								Если НЕ ЗначениеЗаполнено(Начисление.КлиентПоставщик)
									И НЕ Начисление.СуммаНачисления = 0
									И НЕ Начисление.долг Тогда  // начисление, кроме долгов перед сотрудниками как клиентами и поставщиками
									
									Движение = Движения.Зарплата.Добавить();		
									Движение.Валюта 		= Начисление.ВалютаНачисления;
									Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
									Движение.ВидНачисления 	= Начисление.ВидНачисления;
									Движение.Комментарий 	= ?(ЗначениеЗаполнено(Начисление.Комментарий), Начисление.Комментарий, Комментарий);
									Движение.Период 		= Дата;
									Движение.Сотрудник 		= Начисление.Сотрудник;
									Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(Начисление.СуммаНачисления, Начисление.ВалютаНачисления, , Дата);
									Движение.СуммаВВалюте 	= Начисление.СуммаНачисления;									
								КонецЕсли;
								
								Если НЕ Начисление.Сумма = 0 Тогда
									
									НачислениеСумма = Начисление.Сумма;// * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
									
									СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(НачислениеСумма, Дата, ФормаОплаты, Начисление.Валюта, Начисление.ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ );
									Отказ = СтруктураПополнения.Отказ;
									
									Если НЕ Отказ Тогда								
										Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
										
										Если НЕ СтруктураПополнения.СуммаПополнения = 0 Тогда
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= ЗаработнаяПлатаСотрудников;
											Движение.Валюта 		= Начисление.Валюта;
											Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
											Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
											Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
											Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= ЗаработнаяПлатаСотрудников;
											Движение.Валюта 		= Начисление.Валюта;
											Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
											Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
											Движение.ХранилищеДенег = Начисление.ХранилищеДенег;
											Движение.ФормаОплаты 	= ФормаОплаты;	
											
											Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
												И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
												
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
												// Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
											КонецЕсли;
										КонецЕсли;
										
										Движение = Движения.Деньги.Добавить();		
										Движение.Валюта 		= Начисление.Валюта;
										Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										Движение.Период 		= Дата;
										Движение.Статья 		= ЗаработнаяПлатаСотрудников;
										Движение.Сумма 			= Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
										Движение.ХранилищеДенег = Начисление.ХранилищеДенег;
										Движение.СуммаВВалюте 	= начисление.Сумма;
										Движение.ФормаОплаты 	= ФормаОплаты;
										
										Если НЕ ЗначениеЗаполнено(Начисление.КлиентПоставщик) Тогда // списание долга перед сотрудником
											
											Движение = Движения.Зарплата.Добавить();		
											Движение.Валюта 		= Начисление.Валюта;
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.ВидНачисления 	= Начисление.ВидНачисления;
											Движение.Комментарий 	= ?(ЗначениеЗаполнено(Начисление.Комментарий), Начисление.Комментарий, Комментарий);
											Движение.Период 		= Дата;
											Движение.Сотрудник 		= Начисление.Сотрудник;
											Движение.Сумма 			= Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
											Движение.СуммаВВалюте 	= Начисление.Сумма;
											Движение.ОписаниеНачисления = "" + формат(Начисление.ДатаНачала, "ДФ=dd.MM.yy")  + "-" + Формат(начисление.ДатаОкончания, "ДФ=dd.MM.yy") + " " + СокрЛП(начисление.Размер) + "*" + СокрЛП(начисление.Количество);	
											
										Иначе // расчеты с сотрудниками как с клиентами или поставщиками
											
											Если ТипЗнч(Начисление.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
												Движения.Расчеты.Записывать = ИСТИНА;
												Движение 			 = Движения.Расчеты.Добавить();		
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Сумма 		 = - Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); // минус на минус											
												Движение.Клиент 	 = Начисление.КлиентПоставщик;
												Движение.Комментарий = Начисление.Комментарий;
												Движение.Период 	 = Дата;
												
												Если ДвиженияСОтсрочкой Тогда
													Движения.РасчетыСОтсрочкой.Записывать = ИСТИНА;
													Движение 			 = Движения.Расчеты.Добавить();		
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Движение.Сумма 		 = - Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); // минус на минус
													Движение.Клиент 	 = Начисление.КлиентПоставщик;
													Движение.Комментарий = Начисление.Комментарий;
													Движение.Период 	 = Дата;
												КонецЕсли;
												
											Иначе
												Движения.РасчетыСПоставщиками.Записывать = ИСТИНА;
												Движение 			 = Движения.РасчетыСПоставщиками.Добавить();		
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Сумма 		 = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
												Движение.Клиент 	 = Начисление.КлиентПоставщик;
												Движение.Комментарий = Начисление.Комментарий;
												Движение.Период 	 = Дата;
												
												Если ДвиженияСОтсрочкой Тогда
													Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = ИСТИНА;
													Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();		
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Движение.Сумма 		 = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
													Движение.Клиент 	 = Начисление.КлиентПоставщик;
													Движение.Комментарий = Начисление.Комментарий;
													Движение.Период 	 = Дата;	
												КонецЕсли;
											КонецЕсли; 										
											
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла; 	
						КонецЕсли;
						
					Иначе // обычный Платеж				
						
						ВестиУчетОплатПоОтдельнымЗаказам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам");
						ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
						зНачениеЗаполненоЗаказ = зНачениеЗаполнено(Заказ);
						
						ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
						Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
							И ЗначениеЗаполнено(Договор) Тогда
							
							Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, СуммаПриход, ИСТИНА, СуммаРасход, , Ссылка );
						КонецЕсли;
						
						Если НЕ Отказ Тогда
							Если ВНесколькоСтрок Тогда
								
								Для Каждого Платеж Из Платежи Цикл
									
									ЭтоПриход = Платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход;
									
									Если ВестиУчетОплатПоОтдельнымЗаказам Тогда
										
										ЗаказТут = Неопределено;
										Если ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов
											И ЗначениеЗаполнено(Платеж.Заказ) Тогда
											
											ЗаказТут = Платеж.Заказ
										ИначеЕсли зНачениеЗаполненоЗаказ Тогда
											ЗаказТут = Заказ;									
										КонецЕсли;
										
										Если НЕ ЗаказТут = Неопределено Тогда									
											Движение = Движения.ОплатаПоЗаказам.Добавить();
											Движение.ВидДвижения = ?(ЭтоПриход, ВидДвиженияНакопленияПриход, ВидДвиженияНакопленияРасход);
											Движение.Заказ  = ЗаказТут;
											Движение.Сумма	= Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
											Движение.Период = Дата;
										КонецЕсли;
									КонецЕсли;
									
									Если ЭтоПриход Тогда
										
										Если НЕ ОтменитьПроверкиНаОтказ 
											И (- Платеж.Сумма) > 0 Тогда
											
											Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( - Платеж.Сумма, Дата, Платеж.формаоплаты, ?(ЗначениеЗаполнено(Платеж.валюта), Платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, , Ссылка);	
										КонецЕсли;
										
										Если НЕ Отказ Тогда
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											Движение.Период 	 = Дата;
											Если ЗначениеЗаполнено(Платеж.статья) Тогда
												Движение.Статья  = Платеж.Статья;
											Иначе
												Движение.Статья  = Справочники.СтатьиДвиженияДенег.ПрочееПоступлениеДенег;
											КонецЕсли;	
										КонецЕсли;
										
									Иначе
										СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Платеж.Сумма, Дата, Платеж.формаоплаты, ?(ЗначениеЗаполнено(Платеж.Валюта), Платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ);
										Отказ = СтруктураПополнения.Отказ;
										
										Если НЕ Отказ Тогда								
											
											Если ЗначениеЗаполнено(Платеж.статья) Тогда
												Статья = Платеж.Статья;
											Иначе
												Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
											КонецЕсли;
											
											Если НЕ СтруктураПополнения.СуммаПополнения = 0 Тогда
												
												Движение = Движения.Деньги.Добавить();
												Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
												Движение.Период 		= Дата - 1;
												Движение.Статья 		= Статья;
												Движение.Валюта 		= Платеж.Валюта;
												Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
												Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Платеж.Курс = 0, 1, Платеж.Курс);
												Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
												Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;
												
												Движение = Движения.Деньги.Добавить();
												Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
												Движение.Период 		= Дата - 1;
												Движение.Статья 		= Статья;
												Движение.Валюта 		= Платеж.Валюта;
												Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
												Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Платеж.Курс = 0, 1, Платеж.Курс);
												Движение.ХранилищеДенег = Платеж.ХранилищеДенег;
												Движение.ФормаОплаты 	= ФормаОплаты;	
												
												Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
													И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
													
													ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
													// Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
												КонецЕсли;
											КонецЕсли;
											
											Если НЕ Отказ Тогда
												Движение  = Движения.Деньги.Добавить();
												Движение.Период 	 = Дата;
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Статья 	 = Статья;	
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЕсли;
									
									Если НЕ Отказ Тогда
										
										Движение.СуммаВВалюте 	= Платеж.Сумма;
										Движение.Сумма 			= Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
										Движение.Валюта 		= ?(ЗначениеЗаполнено(Платеж.Валюта), Платеж.Валюта, ОсновнаяВалюта);
										Движение.ФормаОплаты 	= ?(ЗначениеЗаполнено(Платеж.ХранилищеДенег), Платеж.ХранилищеДенег.ФормаОплаты, Платеж.формаоплаты);
										Движение.ХранилищеДенег = Платеж.ХранилищеДенег;
										
										Если ЗначениеЗаполненоКлиентПоставщик Тогда 									
											Если Клиент Тогда
												
												Движение = Движения.Расчеты.Добавить();
												Если ЭтоПриход Тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												КонецЕсли;
												Движение.Клиент 	 = КлиентПоставщик;
												Движение.Договор	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = ?(ЗначениеЗаполнено(Платеж.ОСтроке), Платеж.ОСтроке, Комментарий);
												Движение.Сумма 		 = Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
												
											ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
												
												Движение = Движения.РасчетыСПоставщиками.Добавить();
												Если ЭтоПриход Тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;													
												КонецЕсли;
												Движение.Поставщик 	 = КлиентПоставщик;
												Движение.Договор	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = ?(ЗначениеЗаполнено(Платеж.ОСтроке), Платеж.ОСтроке, Комментарий);
												Движение.Сумма 		 = Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
												
											КонецЕсли;										
											
											Если ДвиженияСОтсрочкой Тогда
												Если Клиент Тогда
													
													Движение = Движения.РасчетыСОтсрочкой.Добавить();
													Если ЭтоПриход Тогда
														Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Иначе
														Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
													КонецЕсли;
													Движение.Клиент = КлиентПоставщик;
													Движение.Договор	 = Договор;
													Движение.Период 	 = Дата;
													Движение.Комментарий = ?(ЗначениеЗаполнено(Платеж.ОСтроке), Платеж.ОСтроке, Комментарий);
													Движение.Сумма 		 = Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
													
												ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
													
													Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
													Если ЭтоПриход Тогда
														Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
													Иначе
														Движение.ВидДвижения = ВидДвиженияНакопленияРасход;														
													КонецЕсли;
													Движение.Поставщик = КлиентПоставщик;
													Движение.Договор	 = Договор;
													Движение.Период 	 = Дата;
													Движение.Комментарий = ?(ЗначениеЗаполнено(Платеж.ОСтроке), Платеж.ОСтроке, Комментарий);
													Движение.Сумма 		 = Платеж.Сумма * ?(Платеж.Курс = 0, 1, Платеж.Курс);
													
												КонецЕсли;
												
											КонецЕсли;										
										КонецЕсли;
										
									Иначе // отказ
										прервать;
									КонецЕсли;
									
								КонецЦикла;
								
							Иначе // один Платеж						  						
								Если ВестиУчетОплатПоОтдельнымЗаказам Тогда
									
									ЗаказТут = Неопределено;
									Если зНачениеЗаполненоЗаказ Тогда
										ЗаказТут = Заказ;									
									КонецЕсли;
									
									Если НЕ ЗаказТут = Неопределено Тогда									
										Движение = Движения.ОплатаПоЗаказам.Добавить();
										Движение.ВидДвижения = ?(ПриходДенег, ВидДвиженияНакопленияПриход, ВидДвиженияНакопленияРасход);
										Движение.Заказ  	 = ЗаказТут;
										Движение.Сумма		 = Сумма * ?(Курс = 0, 1, Курс);
										Движение.Период 	 = Дата;
									КонецЕсли;
								КонецЕсли;
								
								Если ПриходДенег Тогда
									
									Если НЕ ФормаОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
										Если НЕ ОтменитьПроверкиНаОтказ Тогда
											Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, , Ссылка);
										КонецЕсли;
										
										Если НЕ Отказ Тогда
											
											Движение = Движения.Деньги.Добавить();
											Движение.Период 	 	= Дата;						
											Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
											Если ЗначениеЗаполнено(статья) Тогда
												Движение.Статья 	= Статья;
											Иначе
												Движение.Статья 	= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееПоступлениеДенег");
											КонецЕсли;         	
											Движение.СуммаВВалюте 	= Сумма;
											Движение.Сумма 			= Сумма * ?(Курс = 0, 1, Курс);
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.ФормаОплаты 	= ФормаОплаты;
											Движение.ХранилищеДенег = ХранилищеДенег;
											
										КонецЕсли;	
									КонецЕсли;
									
								Иначе //расход
									СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ);
									Отказ = СтруктураПополнения.Отказ;
									
									Если НЕ Отказ Тогда								
										
										Если НЕ ЗначениеЗаполнено(статья) Тогда
											Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
										КонецЕсли;
										
										СуммаПополнения = СтруктураПополнения.СуммаПополнения;
										Если НЕ СуммаПополнения = 0 Тогда
											
											ОсновнаяСумма = СуммаПополнения * ?(Курс = 0, 1, Курс);
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= Статья;
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.СуммаВВалюте 	= СуммаПополнения;
											Движение.Сумма 			= ОсновнаяСумма;
											Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
											Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= Статья;
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.СуммаВВалюте 	= СуммаПополнения;
											Движение.Сумма 			= ОсновнаяСумма;
											Движение.ХранилищеДенег = ХранилищеДенег;
											Движение.ФормаОплаты 	= ФормаОплаты;	
											
											Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно()
												И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
												
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
												// Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
											КонецЕсли;
										КонецЕсли;
										
										Если НЕ Отказ Тогда		
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Статья 	 	= Статья;	
											Движение.Период 	 	= Дата;						
											Движение.СуммаВВалюте 	= Сумма;
											Движение.Сумма 			= Сумма * ?(Курс = 0, 1, Курс);
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.ФормаОплаты 	= ФормаОплаты;
											Движение.ХранилищеДенег = ХранилищеДенег;
											
										КонецЕсли;
										
									КонецЕсли;	
								КонецЕсли;
								
								Если НЕ Отказ Тогда
									
									Если ЗначениеЗаполненоКлиентПоставщик Тогда
										
										СуммаКУЧету = ОбщийМодульСервер.ПоКурсу(Сумма, , ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта) ,Дата);
										
										Если Клиент Тогда
											
											Движение = Движения.Расчеты.Добавить();
											Если ПриходДенег Тогда
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
											Иначе
												Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											КонецЕсли;
											Движение.Клиент 	 = КлиентПоставщик;
											Движение.Договор 	 = Договор;
											Движение.Период 	 = Дата;
											Движение.Комментарий = Комментарий;
											Движение.Сумма 		 = СуммаКУЧету;
											
										ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда										
											
											Движение = Движения.РасчетыСПоставщиками.Добавить();
											Если ПриходДенег Тогда
												Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											Иначе
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;												
											КонецЕсли;
											Движение.Поставщик   = КлиентПоставщик;
											Движение.Договор 	 = Договор;
											Движение.Период 	 = Дата;
											Движение.Комментарий = Комментарий;
											Движение.Сумма 		 = СуммаКУЧету;
											
										КонецЕсли;
										
										Если ДвиженияСОтсрочкой Тогда
											Если Клиент Тогда
												
												Движение = Движения.РасчетыСОтсрочкой.Добавить();
												Если ПриходДенег Тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												КонецЕсли;
												Движение.Клиент 	 = КлиентПоставщик;
												Движение.Договор 	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = Комментарий;
												Движение.Сумма 		 = СуммаКУЧету;
												
											ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
												
												Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
												Если ПриходДенег Тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;												
												КонецЕсли;
												Движение.Поставщик   = КлиентПоставщик;
												Движение.Договор 	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = Комментарий;
												Движение.Сумма 		 = СуммаКУЧету;
												
											КонецЕсли;
											
										КонецЕсли;										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					
				Иначеесли ОбменВалют
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда // обмен
					
					СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, ИСТИНА, Ссылка, ОтменитьПроверкиНаОтказ);				
					Отказ = СтруктураПополнения.Отказ;
					
					Если НЕ Отказ Тогда
						
						Если НЕ СтруктураПополнения.СуммаПополнения = 0 Тогда
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Курс = 0, 1, Курс);
							Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
							Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Курс = 0, 1, Курс);
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
								И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								// Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
							КонецЕсли;
						КонецЕсли;
						
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Период 		= Дата;
						Движение.СуммаВВалюте 	= Сумма;
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(Сумма, , ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), Дата); // для уничтожения курсовой разницы
						Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
						Движение.Статья 		= Статья;
						Движение.ФормаОплаты 	= ФормаОплаты;
						Движение.ХранилищеДенег = ХранилищеДенег;
						
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= Дата;
						Движение.СуммаВВалюте 	= СуммаОбмена;
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(СуммаОбмена, , ВалютаОбмена, Дата); // для уничтожения курсовой разницы
						Движение.Валюта 		= ВалютаОбмена;
						Движение.Статья 		= Статья;
						Движение.ФормаОплаты 	= ?(ЗначениеЗаполнено(ХранилищеДенегОбмена), ХранилищеДенегОбмена.ФормаОплаты, ФормаОплаты);
						Движение.ХранилищеДенег = ХранилищеДенегОбмена;					
						
					КонецЕсли;			
				КонецЕсли;
			КонецЕсли; 	
			
			Если ЗначениеЗаполнено(ВаучерНакопления)
				И ВаучерНакопления.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
				
				Движение = Движения.НакоплениеНаВаучеры.Добавить();
				Движение.Валюта			= Валюта;
				Движение.Ваучер			= ВаучерНакопления;
				Движение.ВидДвижения	= ВидДвиженияНакопленияРасход;
				Движение.Сумма			= Сумма * ?(Курс = 0, 1, Курс);
				Движение.Период			= Дата;
				Движение.СуммаВВалюте	= Сумма;
				Движение.Комментарий	= Комментарий;
			КонецЕсли;
		КонецЕсли; 
		
		Движения.НакоплениеНаВаучеры.Записывать  = НЕ Отказ;
		Движения.Зарплата.Записывать 			 = НЕ Отказ;
		Движения.Деньги.Записывать 				 = НЕ Отказ;
		Движения.ОплатаПоЗаказам.Записывать 	 = НЕ Отказ;
		Движения.Расчеты.Записывать 			 = НЕ Отказ;
		Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать 	 = НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность() Тогда
		
		Если Проведен
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов") Тогда
			
			Отказ = ИСТИНА;
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменение проведенных документов запрещено!"), , Ссылка);
		КонецЕсли;
		
		Если НЕ Отказ
			И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
				ПодготовкаКПроведению(Отказ);	
			КонецЕсли;
			
			Если НЕ отказ
				И НЕ ЕстьПриход 
				И НЕ ЕстьРасход
				И Платежи.Количество() = 0 
				И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "Зарплата", "Сотрудник", "-");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		МассивПустыхСтрок = Новый массив;
		Для Каждого СтрокаСоставаНабора из Платежи цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСоставаНабора.Сумма) Тогда
				МассивПустыхСтрок.Добавить(СтрокаСоставаНабора);				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСоставаНабора.ФормаОплаты)
				И ЗначениеЗаполнено(СтрокаСоставаНабора.ХранилищеДенег) Тогда
				
				СтрокаСоставаНабора.ФормаОплаты = СтрокаСоставаНабора.ХранилищеДенег.ФормаОплаты;
			КонецЕсли;                                    	
		КонецЦикла;
		
		Для Каждого СтрокаСоставаНабора из МассивПустыхСтрок цикл
			Платежи.Удалить(СтрокаСоставаНабора);	
		КонецЦикла;
		
		Если курс = 0 Тогда
			курс = 1;
		КонецЕсли;
		
		Если НачислениеИВыплатаЗаработнойПлаты Тогда
			ЕстьПриход 		= ЛОЖЬ;
			ЕстьРасход 		= ИСТИНА;
			СуммаПриход 	= 0;
			СуммаРасход		= Сумма;
			ВалютаПриход 	= ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
			
		ИначеЕсли ОбменВалют Тогда
			ЕстьПриход 		= ИСТИНА;
			ЕстьРасход 		= ИСТИНА;
			СуммаПриход 	= СуммаОбмена;
			СуммаРасход		= Сумма;
			ВалютаПриход 	= ВалютаОбмена;
			
		ИначеЕсли ВНесколькоСтрок Тогда
			ЕстьПриход 		= ЛОЖЬ;
			ЕстьРасход 		= ЛОЖЬ;
			СуммаПриход 	= 0;
			СуммаРасход		= 0;
			ВалютаПриход 	= ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
			Сумма 			= 0;
			
			Если НЕ Платежи.Количество() = 0 Тогда
				Валюта = Платежи[0].Валюта;
				Курс   = Платежи[0].Курс;
				Статья = Платежи[0].Статья;
				
				Для Каждого Платеж Из Платежи Цикл
					
					Если НЕ статья = Платеж.Статья Тогда
						статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПустаяСсылка()");
					КонецЕсли;
					
					Если НЕ валюта = Платеж.Валюта Тогда
						валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ПустаяСсылка()");
					КонецЕсли;
					
					Если НЕ курс = Платеж.Курс Тогда
						курс = 0;						
					КонецЕсли;
					
					Если Платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход Тогда
						ЕстьПриход 	 = ИСТИНА;
						ВалютаПриход = Платеж.Валюта;
						СуммаПриход  = СуммаПриход + Платеж.сумма * Платеж.Курс;
						сумма 		 = сумма + Платеж.сумма * Платеж.Курс;
						
					Иначе
						ЕстьРасход 	 = ИСТИНА;
						СуммаРасход  = СуммаРасход + Платеж.сумма * Платеж.Курс;
						сумма 		 = сумма - Платеж.сумма * Платеж.Курс;
						
					КонецЕсли;   
					
				КонецЦикла;				
			КонецЕсли;
			
		ИначеЕсли ПриходДенег Тогда
			ЕстьПриход 	 = ИСТИНА;
			ЕстьРасход 	 = ЛОЖЬ;
			СуммаПриход  = Сумма;
			СуммаРасход	 = 0;
			ВалютаПриход = Валюта;
			
		Иначе
			ЕстьПриход 	 = ЛОЖЬ;
			ЕстьРасход 	 = ИСТИНА;
			СуммаПриход  = 0;
			СуммаРасход	 = Сумма;
			ВалютаПриход = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ПустаяСсылка()");
			
		КонецЕсли;
		
		Если НачислениеИВыплатаЗаработнойПлаты Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата");
		ИначеЕсли ОбменВалют Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");
			
		ИначеЕсли ЕстьПриход 
			И ЕстьРасход Тогда
			
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");
		ИначеЕсли ЕстьПриход Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
		Иначе
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
			ФормаОплаты  = Перечисления.ФормыОплаты.Наличные;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			Для Каждого СтрокаДенег Из Платежи Цикл
				Если НЕ СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого СтрокаДенег Из Зарплата Цикл
				Если НЕ СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
				КонецЕсли;	
			КонецЦикла;	
			
			Если НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда		
				ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);	
			КонецЕсли;				
		КонецЕсли;
		
		Если НЕ отказ 
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И ЗначениеЗаполнено(договор) Тогда
			
			Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
				КлиентПоставщик = договор.КлиентПоставщик;
			ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
				Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				И ЗначениеЗаполнено(Организация) 
				И НЕ Организация = договор.Организация Тогда
				
				Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000891", , Отказ, ЭтотОбъект);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьВидДокумента() Экспорт
	
	СтатьяПоступленияДенегПоУмолчанию 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию");
	СтатьяРасходаДенегПоУмолчанию 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию");
	
	Если НачислениеИВыплатаЗаработнойПлаты Тогда		
		Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников");	
	Иначе		
		ЗначениеЗаполненоОбъектКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
		
		Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
			ТекущийДолг = 0;
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(КлиентПоставщик, Дата - 1, Договор);
			КонецЕсли;
			
			Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				ЭтоРасчетысПоставщиком = ЛОЖЬ;
				Если НЕ ЗначениеЗаполнено(Статья) 
					ИЛИ Статья = СтатьяРасходаДенегПоУмолчанию Тогда
					
					Статья = СтатьяПоступленияДенегПоУмолчанию;
				КонецЕсли;
				
			Иначе
				ЭтоРасчетысПоставщиком = ИСТИНА;
				Если НЕ ЗначениеЗаполнено(Статья) 
					ИЛИ Статья = СтатьяПоступленияДенегПоУмолчанию Тогда
					
					Статья = СтатьяРасходаДенегПоУмолчанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Валюта)
				И ЗначениеЗаполнено(КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Валюта 	= КлиентПоставщик.ОсновнаяВалюта;
				Курс 	= ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
			КонецЕсли;
			
		Иначе
			ТекущийДолг = 0;
		КонецЕсли;		
		
		Если ПриходДенег Тогда
			
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				Если НЕ ЗначениеЗаполнено(Статья) 
					ИЛИ Статья = СтатьяРасходаДенегПоУмолчанию Тогда
					
					Статья = СтатьяПоступленияДенегПоУмолчанию;
				КонецЕсли;			
				
			Иначе
				Если НЕ ЗначениеЗаполнено(Статья) 
					ИЛИ НЕ Статья = СтатьяПоступленияДенегПоУмолчанию Тогда
					
					Статья = СтатьяПоступленияДенегПоУмолчанию;				
				КонецЕсли;			
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполненоОбъектКлиентПоставщик Тогда
				
				Если ЭтоРасчетысПоставщиком Тогда
					
					Если НЕ ЗначениеЗаполнено(Статья) 
						ИЛИ Статья = СтатьяПоступленияДенегПоУмолчанию Тогда
						
						Статья = СтатьяРасходаДенегПоУмолчанию;
					КонецЕсли;			
				Иначе
					
					Если НЕ ЗначениеЗаполнено(Статья) 
						ИЛИ Статья = СтатьяРасходаДенегПоУмолчанию Тогда
						
						Статья = СтатьяПоступленияДенегПоУмолчанию;
					КонецЕсли;			
				КонецЕсли;				
				
			Иначе
				Если НЕ ЗначениеЗаполнено(Статья) 
					ИЛИ НЕ Статья = СтатьяРасходаДенегПоУмолчанию Тогда
					
					Статья = СтатьяРасходаДенегПоУмолчанию;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;  	
	КонецЕсли;
	
	Если НачислениеИВыплатаЗаработнойПлаты Тогда
		
		Сумма = Зарплата.Итог("Сумма");	
		
		Если Сумма = 0 Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (начисление)");	
		Иначе
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата (выплата)");	
		КонецЕсли;
		Статья = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников");	
		
	Иначе   		
		Если ОбменВалют
			И НЕ ЗначениеЗаполнено(Статья) Тогда
			
			Статья = Справочники.СтатьиДвиженияДенег.ОбменВалют ;			
		КонецЕсли;
		
		Если ОбменВалют Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");	
			
		ИначеЕсли ЕстьПриход 
			И ЕстьРасход Тогда
			
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");	
			
		ИначеЕсли ПриходДенег Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");	
			
		Иначе
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗадатьВидДокумента
