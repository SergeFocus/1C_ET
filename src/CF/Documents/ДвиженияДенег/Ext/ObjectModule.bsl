//sza140613-1407 : 
//sza130914-0350 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
		Если НЕ отказ Тогда
			
			движения.РасчетыСПоставщиками.Записать();
			движения.Расчеты.Записать();
			движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			движения.РасчетыСОтсрочкой.Записать();
			движения.ОплатаПоЗаказам.Записать();
			движения.Деньги.Записать();
			движения.Зарплата.Записать();
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
				
				ДвиженияСОтсрочкой = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
				
				ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
				ОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
				
				Если НЕ ОбменВалют Тогда
					
					Если НачислениеИВыплатаЗаработнойПлаты Тогда
						Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда //зп
							
							ЗаработнаяПлатаСотрудников = Справочники.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников;
							
							Для Каждого Начисление Из Зарплата Цикл
								
								Если НЕ ЗначениеЗаполнено(Начисление.КлиентПоставщик)
									И НЕ Начисление.СуммаНачисления = 0
									и НЕ Начисление.долг Тогда  //начисление, кроме долгов перед сотрудниками как клиентами и поставщиками
									
									Движение = Движения.Зарплата.Добавить();		
									Движение.Валюта 		= Начисление.ВалютаНачисления;
									Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
									Движение.ВидНачисления 	= Начисление.ВидНачисления;
									Движение.Комментарий 	= ?(ЗначениеЗаполнено(Начисление.Комментарий), Начисление.Комментарий, Комментарий);
									Движение.Период 		= Дата;
									Движение.Сотрудник 		= Начисление.Сотрудник;
									Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(Начисление.СуммаНачисления, Начисление.ВалютаНачисления, , Дата);
									Движение.СуммаВВалюте 	= Начисление.СуммаНачисления;
									
								КонецЕсли;
								
								Если Не Начисление.Сумма = 0 тогда
									
									НачислениеСумма = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
									
									СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(НачислениеСумма, Дата, ФормаОплаты, Начисление.Валюта, Начисление.ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);
									Отказ = СтруктураПополнения.Отказ;
									
									если не отказ тогда								
										Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
										
										Если не СтруктураПополнения.СуммаПополнения = 0 Тогда
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= ЗаработнаяПлатаСотрудников;
											Движение.Валюта 		= Начисление.Валюта;
											Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
											Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
											Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
											Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= ЗаработнаяПлатаСотрудников;
											Движение.Валюта 		= Начисление.Валюта;
											Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
											Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Начисление.Курс = 0, 1, Начисление.Курс); 
											Движение.ХранилищеДенег = Начисление.ХранилищеДенег;
											Движение.ФормаОплаты 	= ФормаОплаты;	
											
											если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
												и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
												
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
												//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
											КонецЕсли;
										КонецЕсли;
										
										Движение = Движения.Деньги.Добавить();		
										Движение.Валюта 		= Начисление.Валюта;
										Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										Движение.Период 		= Дата;
										Движение.Статья 		= ЗаработнаяПлатаСотрудников;
										Движение.Сумма 			= Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
										Движение.ХранилищеДенег = Начисление.ХранилищеДенег;
										Движение.СуммаВВалюте 	= начисление.Сумма;
										Движение.ФормаОплаты 	= ФормаОплаты;
										
										Если НЕ ЗначениеЗаполнено(Начисление.КлиентПоставщик) Тогда //списание долга перед сотрудником
											
											Движение = Движения.Зарплата.Добавить();		
											Движение.Валюта 		= Начисление.Валюта;
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.ВидНачисления 	= Начисление.ВидНачисления;
											Движение.Комментарий 	= ?(ЗначениеЗаполнено(Начисление.Комментарий), Начисление.Комментарий, Комментарий);
											Движение.Период 		= Дата;
											Движение.Сотрудник 		= Начисление.Сотрудник;
											Движение.Сумма 			= Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
											Движение.СуммаВВалюте 	= Начисление.Сумма;
											Движение.ОписаниеНачисления = "" + формат(Начисление.ДатаНачала, "ДФ=dd.MM.yy")  + "-" + Формат(начисление.ДатаОкончания, "ДФ=dd.MM.yy") + " " + сокрлп(начисление.Размер) + "*" + сокрлп(начисление.Количество);	
											
										Иначе //расчеты с сотрудниками как с клиентами или поставщиками
											
											Если ТипЗнч(Начисление.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
												Движения.Расчеты.Записывать = истина;
												Движение 			 = Движения.Расчеты.Добавить();		
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Сумма 		 = - Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); //минус на минус											
												Движение.Клиент 	 = Начисление.КлиентПоставщик;
												Движение.Комментарий = Начисление.Комментарий;
												Движение.Период 	 = Дата;
												
												Если ДвиженияСОтсрочкой Тогда
													Движения.РасчетыСОтсрочкой.Записывать = истина;
													Движение 			 = Движения.Расчеты.Добавить();		
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Движение.Сумма 		 = - Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс); //минус на минус
													Движение.Клиент 	 = Начисление.КлиентПоставщик;
													Движение.Комментарий = Начисление.Комментарий;
													Движение.Период 	 = Дата;
												КонецЕсли;
												
											Иначе
												Движения.РасчетыСПоставщиками.Записывать = истина;
												Движение 			 = Движения.РасчетыСПоставщиками.Добавить();		
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Сумма 		 = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
												Движение.Клиент 	 = Начисление.КлиентПоставщик;
												Движение.Комментарий = Начисление.Комментарий;
												Движение.Период 	 = Дата;
												
												Если ДвиженияСОтсрочкой Тогда
													Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = истина;
													Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();		
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Движение.Сумма 		 = Начисление.Сумма * ?(Начисление.Курс = 0, 1, Начисление.Курс);
													Движение.Клиент 	 = Начисление.КлиентПоставщик;
													Движение.Комментарий = Начисление.Комментарий;
													Движение.Период 	 = Дата;	
												КонецЕсли;
											КонецЕсли; 										
											
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЦикла; 	
						КонецЕсли;
						
					Иначе //обычный платеж				
						
						ВестиУчетОплатПоОтдельнымЗаказам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам");
						ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
						зНачениеЗаполненоЗаказ = зНачениеЗаполнено(Заказ);
						
						ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
						Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
							и ЗначениеЗаполнено(Договор) Тогда
							
							Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, СуммаПриход, Истина, СуммаРасход, , Ссылка );
						КонецЕсли;
						
						Если Не Отказ Тогда
							если ВНесколькоСтрок Тогда
								
								Для Каждого Платеж Из Платежи Цикл
									
									ЭтоПриход = платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход;
									
									если ВестиУчетОплатПоОтдельнымЗаказам тогда
										
										ЗаказТут = Неопределено;
										если ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов
											и ЗначениеЗаполнено(Платеж.Заказ) тогда
											
											ЗаказТут = Платеж.Заказ
										ИначеЕсли зНачениеЗаполненоЗаказ тогда
											ЗаказТут = Заказ;									
										конецесли;
										
										Если Не ЗаказТут = Неопределено Тогда									
											Движение  = Движения.ОплатаПоЗаказам.Добавить();
											Движение.ВидДвижения = ?(ЭтоПриход, ВидДвиженияНакопленияПриход, ВидДвиженияНакопленияРасход);
											Движение.Заказ  = ЗаказТут;
											Движение.Сумма	= Платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
											Движение.Период = Дата;
										КонецЕсли;
									конецесли;
									
									Если ЭтоПриход тогда
										
										Если НЕ ОтменитьПроверкиНаОтказ Тогда
											Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( - платеж.Сумма, Дата, платеж.формаоплаты, ?(ЗначениеЗаполнено(платеж.валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, , Ссылка);	
										КонецЕсли;
										
										если не отказ тогда
											Движение  = Движения.Деньги.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											Движение.Период = Дата;
											Если ЗначениеЗаполнено(платеж.статья) Тогда
												Движение.Статья = платеж.Статья;
											иначе
												Движение.Статья = Справочники.СтатьиДвиженияДенег.ПрочееПоступлениеДенег;
											КонецЕсли;	
										КонецЕсли;
										
									иначе
										СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(платеж.Сумма, Дата, платеж.формаоплаты, ?(ЗначениеЗаполнено(платеж.Валюта), платеж.Валюта, ОсновнаяВалюта), Платеж.ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);
										Отказ = СтруктураПополнения.Отказ;
										
										если не отказ тогда								
											
											Если ЗначениеЗаполнено(платеж.статья) Тогда
												Статья = платеж.Статья;
											иначе
												Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
											КонецЕсли;
											
											Если не СтруктураПополнения.СуммаПополнения = 0 Тогда
												
												Движение = Движения.Деньги.Добавить();
												Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
												Движение.Период 		= Дата - 1;
												Движение.Статья 		= Статья;
												Движение.Валюта 		= платеж.Валюта;
												Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
												Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(платеж.Курс = 0, 1, платеж.Курс);
												Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
												Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
												
												Движение = Движения.Деньги.Добавить();
												Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
												Движение.Период 		= Дата - 1;
												Движение.Статья 		= Статья;
												Движение.Валюта 		= платеж.Валюта;
												Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
												Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(платеж.Курс = 0, 1, платеж.Курс);
												Движение.ХранилищеДенег = платеж.ХранилищеДенег;
												Движение.ФормаОплаты 	= ФормаОплаты;	
												
												если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
													и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
													
													ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
													//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
												КонецЕсли;
											КонецЕсли;
											
											если не отказ тогда
												Движение  = Движения.Деньги.Добавить();
												Движение.Период 	 = Дата;
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Движение.Статья = Статья;	
											КонецЕсли;
											
										КонецЕсли;
										
									конецесли;
									
									Если не Отказ тогда
										
										Движение.СуммаВВалюте 	= платеж.Сумма;
										Движение.Сумма 			= платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
										Движение.Валюта 		= ?(ЗначениеЗаполнено(платеж.Валюта), Платеж.Валюта, ОсновнаяВалюта);
										Движение.ФормаОплаты 	= платеж.формаоплаты;
										Движение.ХранилищеДенег = платеж.ХранилищеДенег;
										
										Если ЗначениеЗаполненоКлиентПоставщик тогда 									
											Если Клиент Тогда
												
												Движение = Движения.Расчеты.Добавить();
												если ЭтоПриход тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												КонецЕсли;
												Движение.Клиент = КлиентПоставщик;
												Движение.Договор	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = ?(ЗначениеЗаполнено(платеж.ОСтроке), платеж.ОСтроке, Комментарий);
												Движение.Сумма 		 = платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
												
											ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
												
												Движение = Движения.РасчетыСПоставщиками.Добавить();
												если ЭтоПриход тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													
												КонецЕсли;
												Движение.Поставщик = КлиентПоставщик;
												Движение.Договор	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = ?(ЗначениеЗаполнено(платеж.ОСтроке), платеж.ОСтроке, Комментарий);
												Движение.Сумма 		 = платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
												
											КонецЕсли;										
											
											Если ДвиженияСОтсрочкой Тогда
												Если Клиент Тогда
													
													Движение = Движения.РасчетыСОтсрочкой.Добавить();
													Если ЭтоПриход тогда
														Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
													Иначе
														Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
													КонецЕсли;
													Движение.Клиент = КлиентПоставщик;
													Движение.Договор	 = Договор;
													Движение.Период 	 = Дата;
													Движение.Комментарий = ?(ЗначениеЗаполнено(платеж.ОСтроке), платеж.ОСтроке, Комментарий);
													Движение.Сумма 		 = платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
													
												ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
													
													Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
													Если ЭтоПриход тогда
														Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
													Иначе
														Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
														
													КонецЕсли;
													Движение.Поставщик = КлиентПоставщик;
													Движение.Договор	 = Договор;
													Движение.Период 	 = Дата;
													Движение.Комментарий = ?(ЗначениеЗаполнено(платеж.ОСтроке), платеж.ОСтроке, Комментарий);
													Движение.Сумма 		 = платеж.Сумма * ?(платеж.Курс = 0, 1, платеж.Курс);
													
												КонецЕсли;
												
											КонецЕсли;										
										КонецЕсли;
										
									иначе //отказ
										прервать;
									КонецЕсли;
									
								КонецЦикла;
								
							Иначе //один платеж						  						
								если ВестиУчетОплатПоОтдельнымЗаказам тогда
									
									ЗаказТут = Неопределено;
									если зНачениеЗаполненоЗаказ тогда
										ЗаказТут = Заказ;									
									конецесли;
									
									Если Не ЗаказТут = Неопределено Тогда									
										Движение  = Движения.ОплатаПоЗаказам.Добавить();
										Движение.ВидДвижения = ?(ПриходДенег, ВидДвиженияНакопленияПриход, ВидДвиженияНакопленияРасход);
										Движение.Заказ  = ЗаказТут;
										Движение.Сумма	= Сумма * ?(Курс = 0, 1, Курс);
										Движение.Период = Дата;
									КонецЕсли;
								конецесли;
								
								Если ПриходДенег тогда
									
									Если НЕ ОтменитьПроверкиНаОтказ Тогда
										Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, , Ссылка);
									КонецЕсли;
									
									Если Не Отказ Тогда
										Движение = Движения.Деньги.Добавить();
										Движение.Период 	 = Дата;						
										Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
										Если ЗначениеЗаполнено(статья) Тогда
											Движение.Статья = Статья;
										иначе
											Движение.Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееПоступлениеДенег");
										КонецЕсли;         	
									КонецЕсли;
									
								иначе
									СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);
									Отказ = СтруктураПополнения.Отказ;
									
									если не отказ тогда								
										
										Если НЕ ЗначениеЗаполнено(статья) Тогда
											Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
										КонецЕсли;
										
										СуммаПополнения = СтруктураПополнения.СуммаПополнения;
										Если не СуммаПополнения = 0 Тогда
											
											ОсновнаяСумма = СуммаПополнения * ?(Курс = 0, 1, Курс);
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= Статья;
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.СуммаВВалюте 	= СуммаПополнения;
											Движение.Сумма 			= ОсновнаяСумма;
											Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
											Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
											
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
											Движение.Период 		= Дата - 1;
											Движение.Статья 		= Статья;
											Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
											Движение.СуммаВВалюте 	= СуммаПополнения;
											Движение.Сумма 			= ОсновнаяСумма;
											Движение.ХранилищеДенег = ХранилищеДенег;
											Движение.ФормаОплаты 	= ФормаОплаты;	
											
											если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно()
												и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
												
												ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
												//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
											КонецЕсли;
										КонецЕсли;
										
										если не отказ тогда		
											Движение = Движения.Деньги.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
											Движение.Статья 	 = Статья;	
											Движение.Период 	 = Дата;						
										КонецЕсли;
										
									конецесли;	
								КонецЕсли;
								
								Если не отказ тогда
									
									Движение.СуммаВВалюте 	= Сумма;
									Движение.Сумма 			= Сумма * ?(Курс = 0, 1, Курс);
									Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
									Движение.ФормаОплаты 	= ФормаОплаты;
									Движение.ХранилищеДенег = ХранилищеДенег;
									
									Если ЗначениеЗаполненоКлиентПоставщик тогда 								
										Если Клиент Тогда
											
											Движение = Движения.Расчеты.Добавить();
											если ПриходДенег тогда
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
											иначе
												Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											КонецЕсли;
											Движение.Клиент = КлиентПоставщик;
											Движение.Договор 	 = Договор;
											Движение.Период 	 = Дата;
											Движение.Комментарий = Комментарий;
											Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Сумма, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ,Дата);
											
										ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда										
											Движение = Движения.РасчетыСПоставщиками.Добавить();
											если ПриходДенег тогда
												Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											иначе
												Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												
											КонецЕсли;
											Движение.Поставщик = КлиентПоставщик;
											Движение.Договор 	 = Договор;
											Движение.Период 	 = Дата;
											Движение.Комментарий = Комментарий;
											Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Сумма, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ,Дата);
											
										КонецЕсли;
										
										Если ДвиженияСОтсрочкой Тогда
											Если Клиент Тогда
												
												Движение = Движения.РасчетыСОтсрочкой.Добавить();
												Если ПриходДенег тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												КонецЕсли;
												Движение.Клиент = КлиентПоставщик;
												Движение.Договор 	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = Комментарий;
												Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Сумма, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ,Дата);
												
											ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
												Движение = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
												Если ПриходДенег тогда
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
												Иначе
													Движение.ВидДвижения = ВидДвиженияНакопленияРасход;												
												КонецЕсли;
												Движение.Поставщик = КлиентПоставщик;
												Движение.Договор 	 = Договор;
												Движение.Период 	 = Дата;
												Движение.Комментарий = Комментарий;
												Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Сумма, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ,Дата);
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					
				Иначеесли ОбменВалют
					И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") тогда //обмен
					
					СтруктураПополнения = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Сумма, Дата, ФормаОплаты, ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), ХранилищеДенег, Истина, Ссылка, ОтменитьПроверкиНаОтказ);				
					Отказ = СтруктураПополнения.Отказ;
					
					если не отказ тогда
						
						Если не СтруктураПополнения.СуммаПополнения = 0 Тогда
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Курс = 0, 1, Курс);
							Движение.ХранилищеДенег = СтруктураПополнения.ХранилищеПополнения;
							Движение.ФормаОплаты 	= СтруктураПополнения.ХранилищеПополнения.ФормаОплаты;	
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата - 1;
							Движение.Статья 		= Статья;
							Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
							Движение.СуммаВВалюте 	= СтруктураПополнения.СуммаПополнения;
							Движение.Сумма 			= СтруктураПополнения.СуммаПополнения * ?(Курс = 0, 1, Курс);
							Движение.ХранилищеДенег = ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
							если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
								и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание, Ссылка);
								//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги выбыли с учетом пополнения на сумму") + " " + СтруктураПополнения.СуммаПополнения, СтатусСообщения.Внимание);	
							КонецЕсли;
						КонецЕсли;
						
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Период 		= Дата;
						Движение.СуммаВВалюте 	= Сумма;
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(Сумма, , ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта), Дата); //для уничтожения курсовой разницы
						Движение.Валюта 		= ?(ЗначениеЗаполнено(Валюта), Валюта, ОсновнаяВалюта);
						Движение.Статья 		= Статья;
						Движение.ФормаОплаты 	= ФормаОплаты;
						Движение.ХранилищеДенег = ХранилищеДенег;
						
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= Дата;
						Движение.СуммаВВалюте 	= СуммаОбмена;
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(СуммаОбмена, , ВалютаОбмена, Дата); //для уничтожения курсовой разницы
						Движение.Валюта 		= ВалютаОбмена;
						Движение.Статья 		= Статья;
						Движение.ФормаОплаты 	= ?(ЗначениеЗаполнено(ХранилищеДенегОбмена), ХранилищеДенегОбмена.ФормаОплаты, ФормаОплаты);
						Движение.ХранилищеДенег = ХранилищеДенегОбмена;					
						
					КонецЕсли;			
				КонецЕсли;
			КонецЕсли; 	
			
		КонецЕсли; 
		
		Движения.Зарплата.Записывать 			 = НЕ Отказ;
		Движения.Деньги.Записывать 				 = НЕ Отказ;
		Движения.ОплатаПоЗаказам.Записывать 	 = НЕ Отказ;
		Движения.Расчеты.Записывать 			 = НЕ Отказ;
		Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать 	 = НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) ТОгда
		
		Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			ПриходДенег 	= Ложь;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");//сторно
				Иначе
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров") ;
				КонецЕсли;
			КонецЕсли;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			ПриходДенег 	= Истина;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
				Иначе
					Статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
				КонецЕсли;
			КонецЕсли;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			Комментарий = ДанныеЗаполнения.Комментарий;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта = ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			
			Если ДанныеЗаполнения.ТовараНаСумму > 0 Тогда
				ПриходДенег = Истина;
				Сумма 		= ДанныеЗаполнения.ТовараНаСумму;
			иначе
				ПриходДенег = Ложь;
				Сумма 		= -ДанныеЗаполнения.ТовараНаСумму;
			КонецЕсли;
			
		Иначе
			Если НЕ ДанныеЗаполнения.свойство("Валюта", Валюта) Тогда
				ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен ;
				
				Если ДанныеЗаполнения.свойство("ВидЦен", ВидЦен) Тогда			
					Валюта = ВидЦен.ВалютаЦены;
				КонецЕсли;		
			КонецЕсли;		
			
			ЕстьПриход = ложь;
			ЕстьРасход = ложь;
			
			Если НЕ ДанныеЗаполнения.свойство("ЕстьПриход", ЕстьПриход) Тогда
				ДанныеЗаполнения.свойство("ЕстьРасход", ЕстьРасход)
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность()
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		если не отказ
			и НЕ ЕстьПриход 
			и не ЕстьРасход
			и платежи.Количество() = 0 
			и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	   
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	массивпустыхстрок = новый массив;
	для каждого СтрокаСоставаНабора из Платежи цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСоставаНабора.Сумма) Тогда
			массивпустыхстрок.Добавить(СтрокаСоставаНабора);
		КонецЕсли;                                    	
	КонецЦикла;
	
	для каждого СтрокаСоставаНабора из массивпустыхстрок цикл
		платежи.Удалить(СтрокаСоставаНабора);	
	КонецЦикла;
	
	Если курс = 0 Тогда
		курс = 1;
	КонецЕсли;
	
	Если НачислениеИВыплатаЗаработнойПлаты Тогда
		ЕстьПриход 		= Ложь;
		ЕстьРасход 		= Истина;
		СуммаПриход 	= 0;
		СуммаРасход		= Сумма;
		ВалютаПриход 	= Справочники.Валюты.ПустаяСсылка();
		
	ИначеЕсли ОбменВалют Тогда
		ЕстьПриход 		= Истина;
		ЕстьРасход 		= Истина;
		СуммаПриход 	= СуммаОбмена;
		СуммаРасход		= Сумма;
		ВалютаПриход 	= ВалютаОбмена;
		
	ИначеЕсли ВНесколькоСтрок Тогда
		ЕстьПриход 		= Ложь;
		ЕстьРасход 		= Ложь;
		СуммаПриход 	= 0;
		СуммаРасход		= 0;
		ВалютаПриход 	= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ПустаяСсылка()");
		Сумма 			= 0;
		
		если не платежи.Количество() = 0 тогда
			Валюта 	= Платежи[0].Валюта;
			Курс 	= Платежи[0].Курс;
			Статья 	= платежи[0].Статья;
			
			Для Каждого платеж Из Платежи Цикл
				
				если не статья = платеж.Статья тогда
					статья = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ПустаяСсылка()");
				КонецЕсли;
				
				если не валюта = платеж.Валюта тогда
					валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ПустаяСсылка()");
				конецесли;
				
				если не курс = платеж.Курс тогда
					курс = 0;						
				КонецЕсли;
				
				Если Платеж.ПриходИлиРасход = Перечисления.ПриходРасход.Приход Тогда
					ЕстьПриход 	 = Истина;
					ВалютаПриход = Платеж.Валюта;
					СуммаПриход  = СуммаПриход + Платеж.сумма * Платеж.Курс;
					сумма 		 = сумма + Платеж.сумма * Платеж.Курс;
					
				Иначе
					ЕстьРасход 	 = Истина;
					СуммаРасход  = СуммаРасход + Платеж.сумма * Платеж.Курс;
					сумма 		 = сумма - Платеж.сумма * Платеж.Курс;
					
				КонецЕсли;   
				
			КонецЦикла;				
		КонецЕсли;
		
	ИначеЕсли ПриходДенег Тогда
		ЕстьПриход 		= Истина;
		ЕстьРасход 		= Ложь;
		СуммаПриход 	= Сумма;
		СуммаРасход		= 0;
		ВалютаПриход 	= Валюта;
		
	Иначе
		ЕстьПриход 		= Ложь;
		ЕстьРасход 		= Истина;
		СуммаПриход 	= 0;
		СуммаРасход		= Сумма;
		ВалютаПриход 	= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ПустаяСсылка()");
		
	КонецЕсли;
	
	Если НачислениеИВыплатаЗаработнойПлаты Тогда
		ВидДокумента 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарплата");
	ИначеЕсли ОбменВалют Тогда
		ВидДокумента 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен валют");
		
	ИначеЕсли ЕстьПриход 
		и ЕстьРасход Тогда
		
		ВидДокумента 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движение денег");
	ИначеЕсли ЕстьПриход Тогда
		ВидДокумента 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
	Иначе
		ВидДокумента 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
		ФормаОплаты 	= Перечисления.ФормыОплаты.Наличные;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ТОгда
		
		Для Каждого СтрокаДенег Из Платежи Цикл
			Если Не СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
				СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого СтрокаДенег Из Зарплата Цикл
			Если Не СтрокаДенег.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
				СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда		
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);	
		КонецЕсли;				
	КонецЕсли;
	
	Если не отказ 
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		и ЗначениеЗаполнено(договор) ТОгда
		
		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) ТОгда
			КлиентПоставщик = договор.КлиентПоставщик;
		ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
			Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(договор) 
			и ЗначениеЗаполнено(Организация) 
			и не Организация = договор.Организация Тогда
			
			Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
