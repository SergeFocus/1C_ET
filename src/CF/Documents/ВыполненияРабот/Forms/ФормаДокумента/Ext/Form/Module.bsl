//sza141228-2242 
//sza140709-1613  группа шапка
//sza140703-1415  ошибка КлиентПоставщик, видимость кодпродукта
//sza140627-1105  
//sza140605-0124  
//sza140125-0334  
&НаКлиенте
Процедура БезПланаПриИзменении(Элемент)
	
	БезПлана = Объект.БезПлана;
	ОтключитьПланированиеВДокументеВыполненияРабот = БезПлана;
	Если БезПлана Тогда
		Объект.Актуален = ИСТИНА;
	КонецЕсли;
	
	СменаБезПланаНаСервере();
	ОбновитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьДатуНачалаРабот(Команда)
	
	Объект.ДатаПоступленияОбъектаРаботНаНашСклад = Объект.Дата;
	Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно)
		И Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно < Объект.ДатаПоступленияОбъектаРаботНаНашСклад Тогда		
		
		Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = Объект.ДатаПоступленияОбъектаРаботНаНашСклад + 1;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
		Объект.СкладДляОбъектаВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляОбъектовКлиентаПоУмолчанию");
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере(ЛОЖЬ);
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач НеМенятьЦеныТаблицы = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ НеМенятьЦеныТаблицы Тогда
			Для Каждого СтрокаТовара из Объект.Товары Цикл
				
				Если Объект.Актуален Тогда
					СтрокаТовара.Валюта = Объект.ВидЦен.ВалютаЦены;
					СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
					СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);
					
					Если ИспользоватьСкидки тогда
						СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
						
						Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
							СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
							
						Иначе
							СтрокаТовара.Сумма = 0;
						КонецЕсли;
						
					Иначе
						СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
					КонецЕсли;
					
				Иначе
					СтрокаТовара.ВалютаПлан = Объект.ВидЦен.ВалютаЦены;
					СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
					СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, строкатовара.количествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);
					
					Если ИспользоватьСкидки тогда
						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
						
						Если НЕ СтрокаТовара.СуммаБезСкидкиПлан = 0 тогда
							СтрокаТовара.план  = СтрокаТовара.СуммаБезСкидкиПлан - СтрокаТовара.ПроцентСкидкиПлан * СтрокаТовара.СуммаБезСкидкиПлан / 100;
							
						Иначе
							СтрокаТовара.План  = 0;
						КонецЕсли;
						
					Иначе
						СтрокаТовара.План  = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;	
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;  	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыдачиОбъектаРаботКлиентуОбратноПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад) 
			ИЛИ Объект.ДатаПоступленияОбъектаРаботНаНашСклад > Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно Тогда
			
			Объект.ДатаПоступленияОбъектаРаботНаНашСклад = Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно - 1
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияОбъектаРаботНаНашСкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад) Тогда
		Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно)
			И Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно < Объект.ДатаПоступленияОбъектаРаботНаНашСклад Тогда		
			
			Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = Объект.ДатаПоступленияОбъектаРаботНаНашСклад + 1;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
			Объект.СкладДляОбъектаВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляОбъектовКлиентаПоУмолчанию");
		КонецЕсли;
		
	Иначе
		Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = '00010101000000';
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьДатуОтсрочки();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
конецпроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураВх, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, множительКоличества = 1)
	
	СерияНоменклатуры = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура = НоменклатураВх;
		Количество 	 = множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх);
		Цена 		 = 0;
		ЦенаЕсть 	 = ЛОЖЬ;
		
	Иначе
		Номенклатура = НоменклатураВх.Номенклатура;
		Количество 	 = НоменклатураВх.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх.Номенклатура);
		НоменклатураВх.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		Цена 		 = 0;
		ЦенаЕсть 	 = НоменклатураВх.Свойство("Цена", Цена);
		
	КонецЕсли; 
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.Номенклатура = Номенклатура;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.РаботыСерияНоменклатуры.Видимость 	= ИСТИНА;
			КонецЕсли;
			
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;		
		
		Если Объект.Актуален Тогда
			СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
			Если ТоварВедетсяПоСериям тогда
				
				Если НЕ серияНоменклатуры = Неопределено Тогда				
					СтрокаТовара.Количество = 1;
					СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЦенаЕсть тогда
				СтрокаТовара.Цена = Цена;
			Иначе			
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Строкатовара.Количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;		
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.Количество, Объект.ВидЦен, Объект.Клиент);	
			КонецЕсли;
			
			пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, ЛОЖЬ);	
		Иначе
			СтрокаТовара.КоличествоПлан = СтрокаТовара.КоличествоПлан + Количество;
			Если ТоварВедетсяПоСериям тогда
				
				Если НЕ серияНоменклатуры = Неопределено Тогда				
					СтрокаТовара.КоличествоПлан = 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЦенаЕсть тогда
				СтрокаТовара.ЦенаПлан = Цена;
			Иначе			
				СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Строкатовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;		
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.КоличествоПлан, Объект.ВидЦен, Объект.Клиент);	
			КонецЕсли;
			
			пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, ИСТИНА);	
		КонецЕсли;
		ПересчитатьРезультатыНаСервере();
		
		
		Если НЕ НеСтановитсяНаЭтуСтроку тогда
			Элементы.Работы.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Работы.ТекущийЭлемент 	= Элементы.РаботыКоличество;
		КонецЕсли;
		
	ИначеЕсли не НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Работы.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Работы.ТекущийЭлемент 	= Элементы.РаботыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(строкасостава, ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		Если НЕ Объект.Клиент = Объект.Договор.КлиентПоставщик тогда
			Объект.Клиент = Объект.Договор.КлиентПоставщик;             	
			ПриИзмененииКонтрагента();
		КонецЕсли;
		
		Если НЕ Объект.Организация 	= Объект.Договор.Организация тогда
			Объект.Организация = Объект.Договор.Организация;         	
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Договор.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Договор.ХранилищеДенег;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов")
			И НЕ ЗначениеЗаполнено(Объект.ОбъектКлиента)
			И ЗначениеЗаполнено(Объект.Договор.ОбъектКлиента) Тогда
			Объект.ОбъектКлиента = Объект.Договор.ОбъектКлиента;	
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура КлиентОповещенПриИзменении(Элемент)
	
	Если Объект.КлиентОповещен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОповещения) Тогда
		
		Объект.ДатаОповещения = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)	
	ПриИзмененииКонтрагента();	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииНаСервере();
	ОбновитьВидимостьСерииОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Номенклатура)
		И НЕ ЗначениеЗаполнено(Объект.ОбъектКлиента)
		ИЛИ (ЗначениеЗаполнено(Объект.ОбъектКлиента.СвязаннаяНоменклатура)
		И НЕ Объект.ОбъектКлиента.СвязаннаяНоменклатура = Объект.Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыКлиентов.Ссылка
		|ИЗ Справочник.ОбъектыКлиентов КАК ОбъектыКлиентов
		|ГДЕ ОбъектыКлиентов.СвязаннаяНоменклатура = &СвязаннаяНоменклатура";
		
		Запрос.УстановитьПараметр("СвязаннаяНоменклатура", Объект.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Объект.Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьНаСервере()
	
	ОбъектАктуален = Объект.Актуален;
	Элементы.СметаУтвержденаПриступитьКВыполнению.Видимость = НЕ ОбъектАктуален;
	Элементы.Результат.Видимость = ОбъектАктуален;
	Элементы.РезультатРазница.Видимость = ОбъектАктуален;
	Если НЕ ОбъектАктуален Тогда
		Элементы.ГруппаРаботы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняемые работы");
	КонецЕсли;
	
	Элементы.Дата.Видимость = ОбъектАктуален;
	Элементы.ПечатьСметы.Видимость = не Объект.БезПлана и не ОтключитьПланированиеВДокументеВыполненияРабот;	
	Элементы.РаботыДата.Видимость  = ОбъектАктуален;
	Элементы.РаботыСотрудник.Видимость = ОбъектАктуален;
	СерииНоменклатурыВидны 		   = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка, "Товары");
	Элементы.РаботыСерияНоменклатуры.Видимость = ОбъектАктуален И СерииНоменклатурыВидны;
	
	Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Видимость = не Объект.БезПлана и не ОтключитьПланированиеВДокументеВыполненияРабот И ОбъектАктуален;
	Элементы.РаботыСумма.Видимость = ОбъектАктуален;
	Элементы.РасходыФакт.Видимость = ОбъектАктуален;
	Элементы.ОплатыДата.Видимость  = ОбъектАктуален;
	Элементы.ОплатыСумма.Видимость = ОбъектАктуален;
	Элементы.ОплатыФакт.Видимость  = ОбъектАктуален;
	Элементы.РаботыКоличество.Видимость = ОбъектАктуален;
	Элементы.РаботыЦена.Видимость 		= ОбъектАктуален;
	Элементы.РаботыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.РаботыКурс.Видимость 		= ОбъектАктуален;
	Элементы.ОплатыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.ОплатыКурс.Видимость 		= ОбъектАктуален;
	Элементы.РасходыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.РасходыКурс.Видимость 		= ОбъектАктуален;
	Элементы.РасходыДата.Видимость 		= ОбъектАктуален;
	Элементы.РасходыСотрудник.Видимость = ОбъектАктуален;
	Элементы.РасходыСумма.Видимость     = ОбъектАктуален;
	Элементы.РаботыИтогСумма.Видимость  = ОбъектАктуален;
	Элементы.ВалютаХранилища.Видимость  = ВестиУчетДенегВНесколькихХранилищах;
	Элементы.РаботыПроцентСкидки.Видимость  = ОбъектАктуален;
	Элементы.РаботыСуммаБезСкидки.Видимость = ОбъектАктуален;
	Элементы.ДвижениеОбъектаРабот.Видимость = ОбъектАктуален И ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьСерииОбъекта()
	
	Если УчетПоСериям
		И ЗначениеЗаполнено(Объект.Номенклатура)
		И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Объект.Номенклатура) Тогда
		
		Элементы.СерияНоменклатуры.Видимость = ИСТИНА;
		Элементы.СерияНоменклатурыКодПродукта.Видимость = ИСТИНА;
	Иначе
		
		Элементы.СерияНоменклатуры.Видимость = ЛОЖЬ;
		Элементы.СерияНоменклатурыКодПродукта.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		Если ЗначениеЗаполнено(Объект.Клиент) 
			И НЕ Объект.Клиент.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДнейОтсрочки = Объект.Клиент.СрокОплатыВДняхПоУмолчанию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДнейОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДнейОтсрочки = Объект.Договор.УстанавливаетСрокОплатыВДнях;
				Элементы.ДнейОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДнейХранилось()
	
	ДнейХранилось = Окр((Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно - Объект.ДатаПоступленияОбъектаРаботНаНашСклад) / (3600 * 24));
	Элементы.ДнейХранилось.Видимость = ДнейХранилось > 0;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультаты(Команда)
	
	ОбновитьРезультатыНаСервере();
	ПересчитатьРезультаты();		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультатыНаСервере()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс);
		СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТекущийОстаток()
	//остаток долга контра например
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000692") Тогда
		Элементы.РаботыДобавить.Видимость 	 = ЛОЖЬ;
		Элементы.ОплатыДобавить.Видимость  	 = ЛОЖЬ;
		Элементы.РасходыДобавить.Видимость   = ЛОЖЬ;
		Элементы.ВзятьДатуНачалаРабот.Доступность = ЛОЖЬ;
		Элементы.СметаУтвержденаПриступитьКВыполнению.Доступность = ЛОЖЬ;
		Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Доступность = ЛОЖЬ;
		Элементы.РаботыОбновитьРезультаты.Доступность = ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.РаботыДобавить.Видимость 	 = ИСТИНА;
		Элементы.ОплатыДобавить.Видимость  	 = ИСТИНА;
		Элементы.РасходыДобавить.Видимость 	 = ИСТИНА;
		Элементы.ВзятьДатуНачалаРабот.Доступность = ИСТИНА;
		Элементы.СметаУтвержденаПриступитьКВыполнению.Доступность = ИСТИНА;
		Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Доступность = ИСТИНА;
		Элементы.РаботыОбновитьРезультаты.Доступность = ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьОТКАЗдвижениядлянабора(Знач Номенклатура, Знач КоличествоВх, Знач Сумма, Знач ВестиУчетВаловойПрибыли, Знач Клиент, Знач ЗначениеЗаполненоКлиентПоставщик, Отказ, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач Склад) //для вложенных наборов
	
	Общкво = Номенклатура.Состав.Итог("Количество");
	Если Общкво = 0 Тогда
		Общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / Общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			Отказ = обработатьОТКАЗдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, склад);
		Иначе
			
			Количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, Объект.Дата, ИСТИНА, , Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)	
	ОбработатьПолученныйШКНаСервере(ТекКод);	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = ИСТИНА;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
	
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		
		СерияНоменклатуры = Неопределено;
		
		Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда  		
			Объект.Номенклатура = РезультатОбработки;
		Иначе
			Объект.Номенклатура = РезультатОбработки.Номенклатура;
			РезультатОбработки.Свойство("СерияНоменклатуры", Объект.СерияНоменклатуры);
			
			СтрокаДисплеяПокупателя = СокрЛП(Объект.Номенклатура);		
		КонецЕсли;
		
	Иначе
		
		ОстановитьПоиск = ЛОЖЬ;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
			РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Сотрудник = РезультатОбработки;
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
			
			РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, ИСТИНА);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Клиент = РезультатОбработки;
				ПриИзмененииКонтрагента();				
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
			
			РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Организация = РезультатОбработки;
				ОрганизацияПриИзмененииНаСервере();	
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар или сотрудник по Штрих-Коду не найден (") + ТекКод + ").");
			Результат = ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКлиентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектКлиента) Тогда
		ОбъектКлиентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектКлиентаПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
		Объект.Клиент = Объект.ОбъектКлиента.СвязанныйКлиент;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.Номенклатура = Объект.ОбъектКлиента.СвязаннаяНоменклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыВалютаПланПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты.ТекущиеДанные;
	ТекущаяСтрока.курсплан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.ВалютаПлан, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.ВалютаПлан Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты.ТекущиеДанные;
	ТекущаяСтрока.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыКурсПланПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыКурсПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПланПриИзменении(Элемент)	
	ПересчетИтоговОплаты();	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;
	
	СтрокаТовара = Элементы.Оплаты.ТекущиеДанные;
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) 
		И ЗначениеЗаполнено(ВалютаХранилища) Тогда
		
		СтрокаТовара.Валюта = ВалютаХранилища;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаХранилища, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	КонецЕсли;
	
	Если СтрокаТовара.Курс = 0 Тогда
		СтрокаТовара.Курс = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыСуммаПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");	
				КонецЕсли;
				
			Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.Клиент, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Организация.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Организация.ХранилищеДенег;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ОТказ
		И УчетПоСериям Тогда
		
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			Если НЕ значениеЗаполнено(Объект.Клиент) 
				И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Клиента.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести документ?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = ИСТИНА;
				
			ИначеЕсли Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	
	Если НЕ Отказ
		И ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот 
		И Объект.Актуален
		И ЗначениеЗаполнено(Объект.Номенклатура)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И (ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно) или ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад))
		И НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Склад хранения объекта работ!");
		Сообщение.Поле  = "СкладДляОбъектаВыполненияРабот";
		Сообщение.Сообщить();
		
		Отказ = ИСТИНА;
		
	КонецЕсли;
	
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(Объект.Клиент)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора= '00010101000000' 
						ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
						Сообщение.Поле  = "Договор";
						Сообщение.УстановитьДанные(ТекущийОбъект);
						Сообщение.Сообщить();
						
						Отказ = ИСТИНА;
						
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли Объект.Договор.ПредусматриваетСтрогиеЦены тогда
				
				Договор = Объект.Договор;
				Дата 	= Объект.Дата;
				ВидЦен 	= Объект.ВидЦен;
				
				Для Каждого СтрокаТовара Из Объект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Строкатовара.Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, Строкатовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ Строкатовара.Цена = Цена тогда
						
						Отказ = ИСТИНА;
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене из договора") + ": " + Цена;
						Сообщение.УстановитьДанные(ТекущийОбъект);					
						Сообщение.Сообщить();
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Если СтрокаТовара.процентскидки = 0
					И строкатовара.суммабезскидки = 0 Тогда
					
					строкатовара.суммабезскидки = строкатовара.сумма;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если НЕ отказ
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Актуален
			И НЕ отказ 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке работ №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!");
					Сообщение.УстановитьДанные(ТекущийОбъект);					
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого СтрокаТовара Из ТекущийОбъект.Оплаты Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке оплат №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!");
					Сообщение.УстановитьДанные(ТекущийОбъект);					
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого СтрокаТовара Из ТекущийОбъект.Расходы Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке расходов №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!");
					Сообщение.УстановитьДанные(ТекущийОбъект);					
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтоговОплаты(Знач БезПересчета = ЛОЖЬ)
	
	ПересчетИтоговОплатыНаСервере(БезПересчета);
	ПересчитатьРезультаты(БезПересчета);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетИтоговОплатыНаСервере(Знач БезПересчета = ЛОЖЬ)
	
	ОплатыПлан = 0;
	ОплатыФакт = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплаты Цикл
		Если НЕ БезПересчета
			И СтрокаОплаты.Курс = 0 Тогда
			
			СтрокаОплаты.Курс = 1;
		КонецЕсли;
		
		Если НЕ БезПересчета
			И СтрокаОплаты.КурсПлан = 0 Тогда
			
			СтрокаОплаты.КурсПлан = 1;
		КонецЕсли;
		
		ОплатыФакт = ОплатыФакт + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
		ОплатыПлан = ОплатыПлан + СтрокаОплаты.План * СтрокаОплаты.КурсПлан;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтоговРасходов()
	
	ПересчетИтоговРасходовНаСервере();
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаСервере
Процедура ПересчетИтоговРасходовНаСервере(Знач БезПересчета = ЛОЖЬ)
	
	РасходыПлан = 0;
	РасходыФакт = 0;
	Для Каждого СтрокаОплаты Из Объект.Расходы Цикл
		Если НЕ БезПересчета
			И СтрокаОплаты.Курс = 0 Тогда
			
			СтрокаОплаты.Курс = 1;	
		КонецЕсли;
		
		Если НЕ БезПересчета
			И СтрокаОплаты.КурсПлан = 0 Тогда
			
			СтрокаОплаты.КурсПлан = 1;	
		КонецЕсли;
		
		РасходыПлан = РасходыПлан + СтрокаОплаты.План * СтрокаОплаты.КурсПлан;
		РасходыФакт = РасходыФакт + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРезультаты(Знач БезПересчета = ЛОЖЬ)
	
	ВаловаяПрибыль 		= Объект.Товары.Итог("ВаловаяПрибыль");
	ВаловаяПрибыльПлан  = Объект.Товары.Итог("ВаловаяПрибыльПлан");
	РезультатПлан  = ВаловаяПрибыльПлан - РасходыПлан; 
	Результат 	   = ?(Объект.Актуален, ВаловаяПрибыль, 0) - РасходыФакт; 
	
	Если НЕ БезПересчета Тогда
		Если НЕ РезультатПлан = Объект.РезультатПлан Тогда
			Объект.РезультатПлан = РезультатПлан; 	
		КонецЕсли;
		Если НЕ Результат = Объект.Результат Тогда
			Объект.Результат = Результат; 	
		КонецЕсли;	
	КонецЕсли;
	РезультатРазница = Результат - РезультатПлан;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРезультатыНаСервере();
	
	ВаловаяПрибыль 		= Объект.Товары.Итог("ВаловаяПрибыль");
	ВаловаяПрибыльПлан  = Объект.Товары.Итог("ВаловаяПрибыльПлан");
	РезультатПлан  = ВаловаяПрибыльПлан - РасходыПлан; 
	Результат 	   = ?(Объект.Актуален, ВаловаяПрибыль, 0) - РасходыФакт; 
	
	Если НЕ РезультатПлан = Объект.РезультатПлан Тогда
		Объект.РезультатПлан = РезультатПлан; 	
		РезультатРазница = Результат - РезультатПлан;
	КонецЕсли;
	Если НЕ Результат = Объект.Результат Тогда
		Объект.Результат = Результат; 	
		РезультатРазница = Результат - РезультатПлан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуРабот(Знач ИзСуммы = ЛОЖЬ, Знач ИзКонечнойСуммы = ИСТИНА, СтрокаТовара = Неопределено, Знач План = ЛОЖЬ)
	
	//	Если СтрокаТовара = Неопределено Тогда
	СтрокаТовара = Элементы.Работы.ТекущиеДанные;
	//	КонецЕсли;
	
	Если План Тогда
		Если СтрокаТовара.КоличествоПлан = 0 Тогда
			СтрокаТовара.КоличествоПлан = 1;
		КонецЕсли;
		Если СтрокаТовара.КурсПлан = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
				СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
			Иначе
				СтрокаТовара.КурсПлан = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.План;
			СтрокаТовара.ПроцентСкидкиПлан  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда			
			СтрокаТовара.ценаПлан = СтрокаТовара.СуммаБезСкидкиПлан / СтрокаТовара.КоличествоПлан;
			
		Иначе
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
			Если НЕ СтрокаТовара.ПроцентСкидкиПлан = 0 Тогда
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - ((СтрокаТовара.СуммаБезСкидкиПлан / 100) * СтрокаТовара.ПроцентСкидкиПлан);
				
			Иначе
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		Если СтрокаТовара.Курс = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
			Иначе
				СтрокаТовара.Курс = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Сумма;
			СтрокаТовара.ПроцентСкидки  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда			
			СтрокаТовара.цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;
			
		Иначе
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
			Если НЕ СтрокаТовара.ПроцентСкидки = 0 Тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - ((СтрокаТовара.СуммаБезСкидки / 100) * СтрокаТовара.ПроцентСкидки);
				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс);
	СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуРаботНаСервере(Знач ИзСуммы = ЛОЖЬ, Знач ИзКонечнойСуммы = ИСТИНА, СтрокаТовара, Знач План = ЛОЖЬ)
	
	Если План Тогда
		Если СтрокаТовара.КоличествоПлан = 0 Тогда
			СтрокаТовара.КоличествоПлан = 1;
		КонецЕсли;
		Если СтрокаТовара.КурсПлан = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
				СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
			Иначе
				СтрокаТовара.КурсПлан = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.План;
			СтрокаТовара.ПроцентСкидкиПлан  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда
			
			СтрокаТовара.ценаПлан = СтрокаТовара.СуммаБезСкидкиПлан / СтрокаТовара.КоличествоПлан;
			
		Иначе
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
			Если НЕ СтрокаТовара.ПроцентСкидкиПлан = 0 Тогда
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - ((СтрокаТовара.СуммаБезСкидкиПлан / 100) * СтрокаТовара.ПроцентСкидкиПлан);
				
			Иначе
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		Если СтрокаТовара.Курс = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
			Иначе
				СтрокаТовара.Курс = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Сумма;
			СтрокаТовара.ПроцентСкидки  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда
			
			СтрокаТовара.цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;
			
		Иначе
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
			Если НЕ СтрокаТовара.ПроцентСкидки = 0 Тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - ((СтрокаТовара.СуммаБезСкидки / 100) * СтрокаТовара.ПроцентСкидки);
				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс);
	СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоТалона(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыбораЭлементов = Новый Структура("ЭтоВыполнениеРабот", ИСТИНА);
	ВыборЭлементовПечатнойФормы = получитьформу("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		
		ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, ПараметрыПечати);
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Гарантийные обязательства");
		
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьГарантийногоТалонаНаСервере(ТабДок, Знач ПараметрыПечати)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал гарантийные обязательства. "), 2);
	ОбщийМодульТоварСервер.ПечатьГарантийногоТалона(ТабДок, ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНалоговойНакладной(Команда)
	
	ПараметрыВыбораЭлементов = Новый Структура("НалоговаяНакладная", ИСТИНА);
	ПараметрыВыбораЭлементов.Вставить("Организация", Объект.Организация);
	ПараметрыВыбораЭлементов.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
	ВыборЭлементовПечатнойФормы = получитьформу("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ВставлятьРазделительСтраниц = ЛОЖЬ;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыПечати.Вставить("ПечататьОригинал", ПереченьЭлементов.ПечататьОригинал);
		ПараметрыПечати.Вставить("ПечататьКопию",  ПереченьЭлементов.ПечататьКопию);
		ПараметрыПечати.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
		
		Если ПереченьЭлементов.ПечататьТОРГ12 Тогда
			ПечатьТорг12(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечатьСчета Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.СчетВДваЭкземпляра, , ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;		
		Если ПереченьЭлементов.ПечататьТакжеРасходнуюНакладную Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ЛОЖЬ, ПереченьЭлементов.ПечатьСчета, ПереченьЭлементов.РасходнаяВДваЭкземпляра, ПереченьЭлементов.ЗаголовокРасходнойНакладной, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечататьАктВыполненныхРабот Тогда
			ПечататьАктВыполненныхРабот(ФормаПечати.Результат, Объект.Ссылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ФормаПечати.Результат.АвтоМасштаб = ЛОЖЬ;
		
		Если ПереченьЭлементов.ПечататьОригинал 
			ИЛИ ПереченьЭлементов.ПечататьКопию Тогда			
			
			ПечатьНалоговойНакладнойНаСервере(ФормаПечати.Результат, ПараметрыПечати, ВставлятьРазделительСтраниц);	
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Налоговая накладная");
		
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьНалоговойНакладнойНаСервере(ТабДок, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал налоговую накладную."), 2);
	ОбщийМодульТоварСервер.ПечатьНалоговойНакладной(ТабДок, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьАктВыполненныхРабот(ТабДок, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Акт выполненных работ"), 2);
	ОбщийМодульТоварСервер.ПечатьАктаВполненныхРабот(ТабДок, ОбъектСсылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьРН(ТабДок, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ВДваЭкземпляра = ЛОЖЬ, Знач ЗаголовокРасходнойНакладной = "", Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал") + " " + ?(ЭтоСчет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход товара")), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, ИСТИНА , , , ЗаголовокРасходнойНакладной, ВДваЭкземпляра, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСметы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Предупреждение(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ сначала следует записать."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перед Печатью сметы"));
	Иначе
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПечатьСметыНаСервере(ФормаПечати.Результат, Объект.Ссылка);
		
		ФормаПечати.Результат.ОтображатьСетку 	= ЛОЖЬ;
		ФормаПечати.Результат.Защита 			= ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	= ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Смета");
		ФормаПечати.открыть();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьСметыНаСервере(ТабДок, Знач ОбъектСсылка)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Смету "), 2);
	Документы.ВыполненияРабот.Смета(ТабДок, ОбъектСсылка);
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ЛОЖЬ, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "Оплаты");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПечатьТорг12(ТабДок, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ТОРГ12ВДваЭкземпляра = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал ТОРГ 12"), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, ИСТИНА, ИСТИНА, , , ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВыполнениеПланаДляВыделенныхСтрок(Команда)
	
	Для Каждого ВыделеннаяСтрокаТаблицы Из Элементы.Работы.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.Работы.ДанныеСтроки(ВыделеннаяСтрокаТаблицы);  
		
		ВыделеннаяСтрока.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ВыделеннаяСтрока.Количество = ВыделеннаяСтрока.КоличествоПлан;
		ВыделеннаяСтрока.Цена = ВыделеннаяСтрока.ЦенаПлан;
		ВыделеннаяСтрока.Сумма = ВыделеннаяСтрока.План;
		ВыделеннаяСтрока.ПроцентСкидки = ВыделеннаяСтрока.ПроцентСкидкиПлан;
		ВыделеннаяСтрока.СуммаБезСкидки = ВыделеннаяСтрока.СуммаБезСкидкиПлан;
		ВыделеннаяСтрока.Валюта = ВыделеннаяСтрока.ВалютаПлан;
		ВыделеннаяСтрока.Курс = ВыделеннаяСтрока.Курс;
	КонецЦикла;
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач НоменклатураИлиКлиентПоставщик, Знач Количество = 0)
	
	Если ИспользоватьСкидки тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, Объект.ВидЦен, Объект.Клиент);
		
	Иначе
		возврат 0;
	КонецЕсли;
	
КонецФункции //ПолучитьПроцентСкидкиНаСервере

&НаСервереБезКонтекста
Функция   ПолучитьСкладПоУмолчанию()
	
	Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество, Знач Дата, Знач ЕдиницаИзмерения)
	
	Возврат ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Дата, ИСТИНА, Количество, Объект.Договор, , , Объект.Ссылка, ИСТИНА, ЕдиницаИзмерения);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
	ВидимостьСторно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагента()
	
	Если  ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И (НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ не Объект.Договор.КлиентПоставщик = Объект.Клиент) Тогда
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.Клиент, Объект.Дата);
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Клиент.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Клиент.ХранилищеДенег;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Клиент.ВидЦен;
		КонецЕсли;
		
		Если ИспользоватьСкидки Тогда
			Для Каждого СтрокаТовара из Объект.Товары Цикл
				СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.Клиент);
				
				пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, НЕ Объект.Актуален);
				ПересчитатьРезультатыНаСервере();
			КонецЦикла;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Клиент.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.Клиент.СпособДоставки;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Работы.ТекущиеДанные;	
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если Объект.Актуален Тогда
			
			Если СтрокаТовара.Количество = 0 тогда
				СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
				И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
				
				СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
				
				Если НЕ СтрокаТовараСтруктура = Неопределено тогда
					Номенклатура = СтрокаТовараСтруктура.Номенклатура;
					СтрокаТовара.Номенклатура = Номенклатура;
					СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетПоСериям ТОгда
				
				ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
				
				Если ТоварВедетсяПоСериям Тогда
					СтрокаТовара.Количество = 1;
					СерииНоменклатурыВидны 	= ИСТИНА;		
					Элементы.РаботыСерияНоменклатуры.Видимость 	= ИСТИНА;	
				КонецЕсли;             				
			КонецЕсли;
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЕсли;
			
			ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
			
		Иначе
			Если СтрокаТовара.КоличествоПлан = 0 тогда
				СтрокаТовара.КоличествоПлан = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
				И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
				
				СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.КоличествоПлан);
				
				Если НЕ СтрокаТовараСтруктура = Неопределено тогда
					Номенклатура = СтрокаТовараСтруктура.Номенклатура;
					СтрокаТовара.Номенклатура = Номенклатура;
					СтрокаТовара.КоличествоПлан = СтрокаТовараСтруктура.КоличествоПлан;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетПоСериям Тогда
				
				ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
				Если ТоварВедетсяПоСериям Тогда
					СтрокаТовара.КоличествоПлан = 1;
				КонецЕсли;             				
			КонецЕсли;
			
			СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки тогда
				СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
				СтрокаТовара.ПроцентСкидкиПлан 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан);
			Иначе
				СтрокаТовара.План = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
			КонецЕсли;
			
			ПересчитатьСтрокуРабот(, ЛОЖЬ, , ИСТИНА);		
		КонецЕсли;
		
		ПересчитатьРезультаты();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
		
		попытка
			СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
			Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
		Исключение
		конецпопытки;				
	КонецЕсли;
	
	ОбновитьТекущийОстаток();	
	ПересчетИтоговРасходовНаСервере(ИСТИНА);//не наоборот
	ПересчетИтоговОплаты(ИСТИНА);
	ОбновитьВидимостьСерииОбъекта();	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000690", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		УчетПоСериям 		   = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		ИспользоватьСкидки 	   = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");	
		ОсновнаяВалюта 		   = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетПоСкладам 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДенегВНесколькихХранилищах  = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ОтключитьПланированиеВДокументеВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОтключитьПланированиеВДокументеВыполненияРабот");
		ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот = Элементы.ДвижениеОбъектаРабот.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот");
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		Элементы.ПечатьГарантийногоТалона.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе");
		Элементы.ПечатьЧека.Видимость 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляВыполненияРабот");
		
		Элементы.ОплатыФормаОплаты.Видимость  = не ВестиУчетДенегВНесколькихХранилищах;
		Элементы.РасходыФормаОплаты.Видимость = не ВестиУчетДенегВНесколькихХранилищах;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.Дополнительно, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; //При копировании
			Объект.ДокументСторно = Неопределено;
			
			Объект.ТипРаботы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТипРаботПоУмолчанию");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДнейОтсрочки) Тогда
				
				Объект.ДнейОтсрочки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
				Объект.Клиент 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта		= ОсновнаяВалюта;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
				Объект.СпособДоставки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СпособДоставкиПоУмолчанию");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			ВалютаХранилища = Объект.ХранилищеДенег.Валюта;
		Иначе
			ВалютаХранилища = Объект.Валюта;
		КонецЕсли;
		
		Если (ОтключитьПланированиеВДокументеВыполненияРабот
			ИЛИ параметры.БезПлана)
			И НЕ Объект.БезПлана Тогда
			
			Объект.БезПлана = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПлан) Тогда
			Объект.ДатаПлан = ОбщийМодульСервисСервер.ПользователяТекущаяДата() + 24 * 3600;
		КонецЕсли;
		
		СменаБезПланаНаСервере();
		
		Элементы.БезПлана.Видимость = НЕ ОтключитьПланированиеВДокументеВыполненияРабот;
		
		Элементы.ОсновнаяВалюта1.Видимость = ВестиУчетДвиженияДенег;
		Элементы.ОсновнаяВалюта2.Видимость = ВестиУчетДвиженияДенег;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличествоПлан);
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.РаботыЦенаПлан.Доступность = ЛОЖЬ;
			Элементы.РаботыЦена.Доступность 	= ЛОЖЬ;
		КонецЕсли;
		
		ОбновитьВидимостьНаСервере();	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000892", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.Оплаты.ТолькоПросмотр = ИСТИНА;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.Оплаты.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
		Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
			
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ЛОЖЬ;
		Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаПровести.Видимость = ИСТИНА;
		Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	Ссылка = Объект.Ссылка;
	Дата   = Объект.Дата;
	видцен = Объект.ВидЦен;
	ПоступилоДенег = ОплатыФакт;
	ХранилищеДенег = Объект.ХранилищеДенег;
	Договор = Объект.Договор;
	Клиент  = Объект.Клиент;
	ТовараНаСумму 	  = Объект.Товары.Итог("Сумма");
	ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Клиент);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик;
	ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	ВестиУчетЗаказовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		И ЗначениеЗаполнено(Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенег, Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		
		ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
		ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
		
		ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
		ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
		
		Если ИспользоватьСложныйМеханизмЦен
			И ЗначениеЗаполнено(видцен)
			И ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
			
			ВалютаЦены = видцен.ВалютаЦены ;
		Иначе
			ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из Объект.Товары Цикл
			
			Склад = ТекСтрокаТовары.Склад;
			Дата  = ТекСтрокаТовары.Дата;
			Если ВестиУчетПоСкладам
				И НЕ ЗначениеЗаполнено(Склад) Тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В работах не везде указан склад!"), , Ссылка);
				
				Отказ = ИСТИНА;	
				Прервать;
			КонецЕсли;	
			
			Номенклатура 	   = ТекСтрокаТовары.Номенклатура;		
			СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(, склад, дата, ОстаткиСледуетПроверять, Номенклатура);
			ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
			
			Если ОстаткиСледуетПроверять тогда
				ГТ = СтруктураТаблиц.ТаблицаОстатков;	
			КонецЕсли;	
			
			СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			Количество 		  = ТекСтрокаТовары.Количество;
			КоличествоОстаток = Неопределено;
			
			Если ОстаткиСледуетПроверять тогда
				СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
				
				Если НЕ СтрокаОстаток = Неопределено Тогда
					ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
					ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
					
				Иначе
					ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
					ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
					
				КонецЕсли;			
				
			Иначе 			
				ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
				
			КонецЕсли;	
			
			Если НЕ ПредопределенныйТовар
				И НЕ этонабор тогда
				
				Если ОстаткиСледуетПроверять тогда
					Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);	
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				сумма 	 = ТекСтрокаТовары.Сумма;
				СуммаТов = сумма;//ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
				
				Если ЭтоНабор Тогда 										
					отказ = обработатьОТКАЗдвижениядлянабора(Номенклатура, ТекСтрокаТовары.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ТекСтрокаТовары.Склад);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//если НЕ ПоступилоДенег = 0 
	//	И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
	//	
	//	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
	//		ФормаОплаты = ХранилищеДенег.ФормаОплаты;
	//	Иначе
	//		ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");				
	//	КонецЕсли;
	//	
	//	Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Объект.Ссылка);	
	//	
	//КонецЕсли;
	//
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!");
					Сообщение.Поле 	= "РаботыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "РаботыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура РаботыВалютаПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.курсплан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.ВалютаПлан, ТекущиеДанные.ДатаПлан);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.Валюта, ТекущиеДанные.Дата);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКурсПланПриИзменении(Элемент)
	ПересчитатьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура РаботыКурсПриИзменении(Элемент)
	ПересчитатьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	СтрокаТовара = Элементы.Работы.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", СтрокаТовара.Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.Клиент);
	
	ПараметрыФормы.Вставить("ОтборПоДате", ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);	
																		КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Работы.ТекущиеДанные.Номенклатура = Номенклатура;	
		ПриИзмененииНоменклатуры(СтрокаТовара);
		Элементы.Работы.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Если Объект.Актуален Тогда
			Элементы.Работы.ТекущийЭлемент = Элементы.РаботыКоличество;
		Иначе
			Элементы.Работы.ТекущийЭлемент = Элементы.РаботыКоличествоПлан;
		КонецЕсли;			
		
	Иначе
		Элементы.Работы.ЗакончитьРедактированиеСтроки(ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаТовара = Элементы.Работы.ТекущиеДанные;	
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, СтрокаТовара.Номенклатура, Объект.Клиент);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(СтрокаТовара) 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;	
	СтрокаТовара = Элементы.Работы.ТекущиеДанные;
	
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		СтрокаТовара.Склад = ПолучитьСкладПоУмолчанию();
	КонецЕсли;
	
	Если БезПлана Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтрокаТовара.Валюта = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
			Иначе
				СтрокаТовара.Валюта = ОсновнаяВалюта;
			КонецЕсли;
		КонецЕсли;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтрокаТовара.ВалютаПлан = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
			Иначе
				СтрокаТовара.ВалютаПлан = ОсновнаяВалюта;
			КонецЕсли;
		КонецЕсли;
		СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроцентСкидкиПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроцентСкидкиПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаБезСкидкиПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ИСТИНА, ИСТИНА, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаБезСкидкиПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ИСТИНА);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПланПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	ТекущаяСтрока.курсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.ВалютаПлан, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.ВалютаПлан Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговРасходов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	ТекущаяСтрока.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговРасходов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКурсПланПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКурсПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПередНачаломИзменения(Элемент, Отказ)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;
	
	СтрокаТовара = Элементы.Расходы.ТекущиеДанные;
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) 
		И ЗначениеЗаполнено(ВалютаХранилища) Тогда
		
		СтрокаТовара.Валюта = ВалютаХранилища;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаХранилища, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	КонецЕсли;
	
	Если СтрокаТовара.Курс = 0 Тогда
		СтрокаТовара.Курс = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПланПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервереР();
	ПересчетИтоговРасходов();
	
КонецПроцедуры

&НаСервере
Процедура СменаБезПланаНаСервере()
	
	БезПлана = ОтключитьПланированиеВДокументеВыполненияРабот или Объект.БезПлана;
	
	Элементы.ДатаПлан.Видимость 		= НЕ БезПлана;
	Элементы.РезультатПлан.Видимость    = НЕ БезПлана;
	Элементы.РезультатРазница.Видимость = НЕ БезПлана;
	Элементы.РасходыДатаПлан.Видимость  = НЕ БезПлана;
	Элементы.РасходыПлан.Видимость 	    = НЕ БезПлана;
	Элементы.РаботыИтогПлан.Видимость   = НЕ БезПлана;
	Элементы.ОплатыПлан1.Видимость   	= НЕ БезПлана;
	Элементы.ОплатыПлан.Видимость 	  	= НЕ БезПлана;
	Элементы.ОплатыДатаПлан.Видимость 	= НЕ БезПлана;
	Элементы.РаботыПлан.Видимость	  	= НЕ БезПлана;
	Элементы.РаботыВалютаПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыДатаПлан.Видимость 	= НЕ БезПлана;
	Элементы.РасходыПлан1.Видимость 	= НЕ БезПлана;
	Элементы.РасходыВалютаПлан.Видимость= НЕ БезПлана;
	Элементы.РасходыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.ОплатыВалютаПлан.Видимость	= НЕ БезПлана;
	Элементы.ОплатыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыЦенаПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыКоличествоПлан.Видимость 	= НЕ БезПлана;
	Элементы.РаботыПроцентСкидкиПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыСуммаБезСкидкиПлан.Видимость = НЕ БезПлана;
	
	Если БезПлана 
		И НЕ Объект.Актуален Тогда		
		
		Объект.Актуален = ИСТИНА;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СметаУтвержденаПриступитьКВыполнению(Команда)
	
	Объект.Актуален = ИСТИНА;
	Элементы.СметаУтвержденаПриступитьКВыполнению.Видимость = ЛОЖЬ;
	ОбновитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере1();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	СтрокаТовара = Объект.Оплаты[Элементы.Оплаты.ТекущаяСтрока];
	Если ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег) 
		И ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег.Валюта) Тогда
		
		СтрокаТовара.ФормаОплаты = СтрокаТовара.ХранилищеДенег.ФормаОплаты;
		СтрокаТовара.Валюта = СтрокаТовара.ХранилищеДенег.Валюта; 
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
			СтрокаТовара.ВалютаПлан = СтрокаТовара.Валюта;
		КонецЕсли;
		
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.КурсПлан) Тогда
			СтрокаТовара.КурсПлан = СтрокаТовара.Курс;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервереР()
	
	СтрокаТовара = Объект.Расходы[Элементы.Расходы.ТекущаяСтрока];
	Если ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег) 
		И ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег.Валюта) Тогда
		
		СтрокаТовара.ФормаОплаты = СтрокаТовара.ХранилищеДенег.ФормаОплаты;
		СтрокаТовара.Валюта = СтрокаТовара.ХранилищеДенег.Валюта;
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
			СтрокаТовара.ВалютаПлан = СтрокаТовара.Валюта;
		КонецЕсли;
		
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));		
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.КурсПлан) Тогда
			СтрокаТовара.КурсПлан = СтрокаТовара.Курс;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере1()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		ВалютаХранилища = Объект.ХранилищеДенег.Валюта;
		Объект.Валюта = ВалютаХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	ПриИзмененииКонтрагента();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ВыполненияРабот"));
	ЭтотОбъект.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект,Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Записать(); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ВвестиЗначение(Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
		Если ЗначениеЗаполнено(Причина) Тогда
			ОткрытьЗначение( ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
			Закрыть();	
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланПриИзменении(Элемент)
		
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры
