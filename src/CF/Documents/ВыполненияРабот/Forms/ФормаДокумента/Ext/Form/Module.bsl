// sza150703-1528 выбранные серии с ост
// sza150604-1813 ваучер
// sza141228-2242 
// sza140709-1613  группа шапка
// sza140703-1415  ошибка КлиентПоставщик, видимость КодПродукта
// sza140627-1105  
// sza140605-0124  
// sza140125-0334  

&НаКлиенте
Процедура БезПланаПриИзменении(Элемент)
	
	БезПлана = Объект.БезПлана;
	ОтключитьПланированиеВДокументеВыполненияРабот = БезПлана;
	Если БезПлана Тогда
		Объект.Актуален = ИСТИНА;
	КонецЕсли;
	
	СменаБезПланаНаСервере();
	ОбновитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыВаучерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ваучеры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РезультатНакопление = ДобавитьПрименитьВаучер(ТекущиеДанные.Ваучер, ИСТИНА);
		Если НЕ РезультатНакопление = Неопределено Тогда
			ВыяснитьОПогашенииНакопления(РезультатНакопление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыПослеУдаления(Элемент)
	ВаучерыПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВаучерыПослеУдаленияНаСервере()
	
	Объект.ВаучерСкидки = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
	ВаучерНакопленияВОплатах = Неопределено;
	
	МассивВаучеровОплаты = Новый Массив;
	
	Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
		Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
			МассивВаучеровОплаты.Добавить(СтрокаВаучер.Ваучер);
			Если СтрокаВаучер.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент Тогда
				Объект.ВаучерСкидки = СтрокаВаучер.Ваучер;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокНаУдаление = Новый Массив;
	Для Каждого СтрокаОплаты Из Объект.Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.Ваучер) Тогда
			Если МассивВаучеровОплаты.Найти(СтрокаОплаты.Ваучер) = Неопределено Тогда			
				МассивСтрокНаУдаление.Добавить(СтрокаОплаты);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВаучерНакопленияВОплатах)
				И СтрокаОплаты.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
				
				ВаучерНакопленияВОплатах = СтрокаОплаты.Ваучер
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаОплаты Из МассивСтрокНаУдаление цикл
		Объект.Оплаты.Удалить(СтрокаОплаты);	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ВаучерНакопленияВОплатах) Тогда
		ОБъект.ВаучерНакопления = ВаучерНакопленияВОплатах;
	Иначе
		ОБъект.ВаучерНакопления = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, СтрокаТовара.Склад);
		
		ПересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, НЕ Объект.Актуален);
		ПересчитатьРезультатыНаСервере();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьДатуНачалаРабот(Команда)
	
	Объект.ДатаПоступленияОбъектаРаботНаНашСклад = Объект.Дата;
	Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно)
		И Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно < Объект.ДатаПоступленияОбъектаРаботНаНашСклад Тогда		
		
		Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = Объект.ДатаПоступленияОбъектаРаботНаНашСклад + 1;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
		Объект.СкладДляОбъектаВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляОбъектовКлиентаПоУмолчанию");
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость 		 = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость 		 = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Попытка
			Элементы.ФормаСторно.Видимость 			 = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость 		 = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Попытка
			Элементы.ФормаСторно.Видимость 			 = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость 		 = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ВидЦенПриИзмененииНаСервере(ЛОЖЬ);
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач НеМенятьЦеныТаблицы = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
		
		Если НЕ НеМенятьЦеныТаблицы Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Если Объект.Актуален Тогда
					СтрокаТовара.Валюта = Объект.ВидЦен.ВалютаЦены;
					СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
					СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);
					
					Если ИспользоватьСкидки Тогда
						СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
						
						Если НЕ СтрокаТовара.СуммаБезСкидки = 0 Тогда
							СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
							
						Иначе
							СтрокаТовара.Сумма = 0;
						КонецЕсли;
						
					Иначе
						СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
					КонецЕсли;
					
				Иначе
					СтрокаТовара.ВалютаПлан = Объект.ВидЦен.ВалютаЦены;
					СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
					СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);
					
					Если ИспользоватьСкидки Тогда
						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
						
						Если НЕ СтрокаТовара.СуммаБезСкидкиПлан = 0 Тогда
							СтрокаТовара.план  = СтрокаТовара.СуммаБезСкидкиПлан - СтрокаТовара.ПроцентСкидкиПлан * СтрокаТовара.СуммаБезСкидкиПлан / 100;
							
						Иначе
							СтрокаТовара.План  = 0;
						КонецЕсли;
						
					Иначе
						СтрокаТовара.План  = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;	
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;  	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыяснитьОПогашенииНакопления(Знач РезультатНакопление)
	
	Если НЕ РезультатНакопление.ОстатокНакопленияЧислом = 0 Тогда
		
		ОплатитьНакопительнымВаучером = ЛОЖЬ;
		
		КомандыВопроса = Новый Массив(3, 3);
		КомандыВопроса[0][0] = "OK";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, оплатить накопленными средствами");
		КомандыВопроса[0][2] = "Результат = 1;";
		КомандыВопроса[1][0] = "НЕТ";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет, продолжить накопление");
		КомандыВопроса[1][2] = "Результат = 2;";
		КомандыВопроса[2][0] = "ОТМЕНА";
		КомандыВопроса[2][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена ваучера");
		КомандыВопроса[2][2] = "Результат = 3;";
		
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"));
		ПараметрыФормы.Вставить("ЭтоВыборПериода", ЛОЖЬ);
		
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер") + ": " +
		РезультатНакопление.Ваучер + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Использовать накопительный ваучер для оплаты?") +
		Символы.ПС + РезультатНакопление.ОстатокНакопления);
		ПараметрыФормы.Вставить("ЭтоВопрос", ИСТИНА);
		ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
		ОтветПользователя = ФормаВопроса.ОткрытьМодально();
		
		Если НЕ ОтветПользователя = Неопределено
			И НЕ ОтветПользователя = 3 Тогда
			
			ОплатитьНакопительнымВаучером = ?(ОтветПользователя = 1, ИСТИНА, ЛОЖЬ);
			
			Если ОплатитьНакопительнымВаучером Тогда
				ДобавитьКОплатеВаучером(РезультатНакопление.Ваучер, ЛОЖЬ, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено Из накоплений"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"), РезультатНакопление.ОстатокНакопленияЧислом);
			Иначе
				Объект.ВаучерНакопления = РезультатНакопление.Ваучер;
			КонецЕсли;
			
			СтруктураДляСтроки = Новый Структура("Ваучер", РезультатНакопление.Ваучер);
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(СтруктураДляСтроки);
			Если НЕ СтрокаВаучера.Количество() = 0 Тогда
				СтрокаВаучера = СтрокаВаучера[0];
				СтрокаВаучера.ОСтроке = ?(ОплатитьНакопительнымВаучером, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принят к оплате"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для накопления.."));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ВаучерНакопления = РезультатНакопление.Ваучер;		
	КонецЕсли;
	
КонецПроцедуры // ВыяснитьОПогашенииНакопления

&НаКлиенте
Процедура ДатаВыдачиОбъектаРаботКлиентуОбратноПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад) 
			ИЛИ Объект.ДатаПоступленияОбъектаРаботНаНашСклад > Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно Тогда
			
			Объект.ДатаПоступленияОбъектаРаботНаНашСклад = Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно - 1
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияОбъектаРаботНаНашСкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад) Тогда
		Если ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно)
			И Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно < Объект.ДатаПоступленияОбъектаРаботНаНашСклад Тогда		
			
			Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = Объект.ДатаПоступленияОбъектаРаботНаНашСклад + 1;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
			Объект.СкладДляОбъектаВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляОбъектовКлиентаПоУмолчанию");
		КонецЕсли;
		
	Иначе
		Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно = '00010101000000';
	КонецЕсли;
	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьДатуОтсрочки();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьКОплатеВаучером(Знач Ваучер, Знач ВаучерИзъят = ЛОЖЬ, Знач ТекстПогашения = "", Знач ТекстДляНеподходящего = "", Знач СуммаПогашения = 0, Знач СтрокаВаучера = Неопределено)
	
	ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, , ЛОЖЬ, ИСТИНА);
	
	Если ОтветПоВаучеру.ВаучерПодходит Тогда
		
		НоваяОплата = Объект.Оплаты.Добавить();
		НоваяОплата.Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		НоваяОплата.Сумма 	= СуммаПогашения;
		НоваяОплата.Валюта 	= Ваучер.Валюта;
		НоваяОплата.Ваучер	= Ваучер;
		НоваяОплата.Курс 	= ОбщийМодульСервер.ПолучитьТекущийКурс(НоваяОплата.Валюта, НоваяОплата.Дата, ЛОЖЬ);
		//НоваяОплата.ХранилищеДенег = 
		НоваяОплата.ФормаОплаты = Перечисления.ФормыОплаты.Сертификат;
		НоваяОплата.ОСтроке = ТекстПогашения + ": " + Ваучер.Наименование;
		
		Если Не СтрокаВаучера = Неопределено Тогда
			СтрокаВаучера.ВаучерИзъят = ВаучерИзъят;
			Элементы.Оплаты.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
			Элементы.Оплаты.ТекущийЭлемент = Элементы.ОплатыХранилищеДенег;	
		КонецЕсли;
		Результат = ИСТИНА;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстДляНеподходящего + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
		Результат = ЛОЖЬ;
	КонецЕсли;						
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураСтруктура, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, множительКоличества = 1)
	
	СерияНоменклатуры = Неопределено;
	
	Если ТипЗнч(НоменклатураСтруктура) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура = НоменклатураСтруктура;
		Количество 	 = множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура);
		Цена 		 = 0;
		ЦенаЕсть 	 = ЛОЖЬ;
		
	Иначе
		Номенклатура = НоменклатураСтруктура.Номенклатура;
		Количество 	 = НоменклатураСтруктура.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура.Номенклатура);
		НоменклатураСтруктура.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		Цена 		 = 0;
		ЦенаЕсть 	 = НоменклатураСтруктура.Свойство("Цена", Цена);
		
	КонецЕсли; 
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.Номенклатура = Номенклатура;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.РаботыСерияНоменклатуры.Видимость 	= ИСТИНА;
			КонецЕсли;
			
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;		
		
		Если Объект.Актуален Тогда
			СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
			Если ТоварВедетсяПоСериям Тогда
				
				Если НЕ серияНоменклатуры = Неопределено Тогда				
					СтрокаТовара.Количество = 1;
					СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЦенаЕсть Тогда
				СтрокаТовара.Цена = Цена;
			Иначе			
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;		
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, СтрокаТовара.Склад, СтрокаТовара.Дата);	
			КонецЕсли;
			
			пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, ЛОЖЬ);	
		Иначе
			СтрокаТовара.КоличествоПлан = СтрокаТовара.КоличествоПлан + Количество;
			Если ТоварВедетсяПоСериям Тогда
				
				Если НЕ серияНоменклатуры = Неопределено Тогда				
					СтрокаТовара.КоличествоПлан = 1;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЦенаЕсть Тогда
				СтрокаТовара.ЦенаПлан = Цена;
			Иначе			
				СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);	
			КонецЕсли;		
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.КоличествоПлан, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, СтрокаТовара.Склад, СтрокаТовара.ДатаПлан);
			КонецЕсли;
			
			пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, ИСТИНА);	
		КонецЕсли;
		ПересчитатьРезультатыНаСервере();
		
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.РаботыКоличество;
		КонецЕсли;
		
	ИначеЕсли не НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.РаботыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьПрименитьВаучер(Знач Ваучер, Знач НеДобавлятьРучнойВыбор = ЛОЖЬ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если НЕ Объект.Ваучеры.Количество() = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ваучер", Ваучер);
			
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
			Если НЕ ДокументЗаблокирован Тогда
				
				Если НеДобавлятьРучнойВыбор
					ИЛИ СтрокаВаучера.Количество() = 0 Тогда
					
					Если НЕ НеДобавлятьРучнойВыбор Тогда
						СтрокаВаучера = Объект.Ваучеры.Добавить();
						СтрокаВаучера.Ваучер = Ваучер;
					Иначе
						СтрокаВаучера = СтрокаВаучера[0];
					КонецЕсли;
					
					Если Ваучер.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
						КонтрагентВаучера = Ваучер.Контрагент;
						
						Если ЗначениеЗаполнено(КонтрагентВаучера)
							И ТипЗнч(КонтрагентВаучера) = Тип("СправочникСсылка.Клиенты")
							И НЕ Объект.Клиент = КонтрагентВаучера Тогда
							
							Объект.Клиент = КонтрагентВаучера;
							ПриИзмененииКонтрагента();	
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
						// ОтветПоВаучеру для накопительной карты не нужен - по ней не будет накоплений, если товар неподходящий
						ОстатокНакопленияЧислом = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Ваучер, Объект.Дата);
						ОстатокНакопления = "" + СокрЛП(ОстатокНакопленияЧислом);
						ОстатокНакопления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток накопления") + ": " + ОстатокНакопления;
						СтрокаВаучера.ОСтроке = ОстатокНакопления;
						
						Результат = Новый Структура("Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом", Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом);
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено ваучером"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочная карта"), Ваучер.НоминалПроцент);
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент
						И ИспользоватьСкидки Тогда
						
						ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, , ЛОЖЬ, ИСТИНА);
						
						Если ОтветПоВаучеру.ВаучерПодходит Тогда
							Объект.ВаучерСкидки = Ваучер; // приоритет свежего ваучера. раз пробили, значит надо
							
							Для Каждого СтрокаТовара Из Объект.Товары Цикл
								СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, СтрокаТовара.Склад);
								
								ПересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, НЕ Объект.Актуален);
								ПересчитатьРезультатыНаСервере();
							КонецЦикла;	
							
						Иначе
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма
						И ИспользоватьСкидки Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено скидкой"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта на сумму"), Ваучер.НоминалПроцент);
					КонецЕсли;
					
				Иначе
					СтрокаВаучера = СтрокаВаучера[0];
					Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаВаучера.Количество() = 0 Тогда // Встать на строку
				
				СтрокаВаучера = СтрокаВаучера[0];
				Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Знач Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", СтрокаСостава.номенклатура);
			Результат.Вставить("Количество", СтрокаСостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(СтрокаСостава, ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда // насильно
		
		Если НЕ Объект.Клиент = Объект.Договор.КлиентПоставщик Тогда
			Объект.Клиент = Объект.Договор.КлиентПоставщик;             	
			ПриИзмененииКонтрагента();
		КонецЕсли;
		
		Если НЕ Объект.Организация 	= Объект.Договор.Организация Тогда
			Объект.Организация = Объект.Договор.Организация;         	
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Договор.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Договор.ХранилищеДенег;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов")
			И НЕ ЗначениеЗаполнено(Объект.ОбъектКлиента)
			И ЗначениеЗаполнено(Объект.Договор.ОбъектКлиента) Тогда
			Объект.ОбъектКлиента = Объект.Договор.ОбъектКлиента;	
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ВыполненияРабот"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОповещенПриИзменении(Элемент)
	
	Если Объект.КлиентОповещен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОповещения) Тогда
		
		Объект.ДатаОповещения = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)	
	ПриИзмененииКонтрагента();	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииНаСервере();
	ОбновитьВидимостьСерииОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Номенклатура)
		И НЕ ЗначениеЗаполнено(Объект.ОбъектКлиента)
		ИЛИ (ЗначениеЗаполнено(Объект.ОбъектКлиента.СвязаннаяНоменклатура)
		И НЕ Объект.ОбъектКлиента.СвязаннаяНоменклатура = Объект.Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыКлиентов.Ссылка
		|ИЗ Справочник.ОбъектыКлиентов КАК ОбъектыКлиентов
		|ГДЕ ОбъектыКлиентов.СвязаннаяНоменклатура = &СвязаннаяНоменклатура";
		
		Запрос.УстановитьПараметр("СвязаннаяНоменклатура", Объект.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Объект.Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;		
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьНаСервере()
	
	ОбъектАктуален = Объект.Актуален;
	Элементы.СметаУтвержденаПриступитьКВыполнению.Видимость = НЕ ОбъектАктуален;
	Элементы.Результат.Видимость = ОбъектАктуален;
	Элементы.РезультатРазница.Видимость = ОбъектАктуален;
	Если НЕ ОбъектАктуален Тогда
		Элементы.ГруппаРаботы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняемые работы");
	КонецЕсли;
	
	Элементы.Дата.Видимость = ОбъектАктуален;
	Элементы.ПечатьСметы.Видимость = не Объект.БезПлана и не ОтключитьПланированиеВДокументеВыполненияРабот;	
	Элементы.РаботыДата.Видимость  = ОбъектАктуален;
	Элементы.РаботыСотрудник.Видимость = ОбъектАктуален;
	ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
	СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
	Элементы.РаботыСерияНоменклатуры.Видимость = ОбъектАктуален И СерииНоменклатурыВидны;
	
	Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Видимость = не Объект.БезПлана и не ОтключитьПланированиеВДокументеВыполненияРабот И ОбъектАктуален;
	Элементы.РаботыСумма.Видимость = ОбъектАктуален;
	Элементы.РасходыФакт.Видимость = ОбъектАктуален;
	Элементы.ОплатыДата.Видимость  = ОбъектАктуален;
	Элементы.ОплатыСумма.Видимость = ОбъектАктуален;
	Элементы.ОплатыФакт.Видимость  = ОбъектАктуален;
	Элементы.РаботыКоличество.Видимость = ОбъектАктуален;
	Элементы.РаботыЦена.Видимость 		= ОбъектАктуален;
	Элементы.РаботыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.РаботыКурс.Видимость 		= ОбъектАктуален;
	Элементы.ОплатыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.ОплатыКурс.Видимость 		= ОбъектАктуален;
	Элементы.РасходыВалюта.Видимость 	= ОбъектАктуален;
	Элементы.РасходыКурс.Видимость 		= ОбъектАктуален;
	Элементы.РасходыДата.Видимость 		= ОбъектАктуален;
	Элементы.РасходыСотрудник.Видимость = ОбъектАктуален;
	Элементы.РасходыСумма.Видимость     = ОбъектАктуален;
	Элементы.РаботыИтогСумма.Видимость  = ОбъектАктуален;
	Элементы.ВалютаХранилища.Видимость  = ВестиУчетДенегВНесколькихХранилищах;
	Элементы.РаботыПроцентСкидки.Видимость  = ОбъектАктуален;
	Элементы.РаботыСуммаБезСкидки.Видимость = ОбъектАктуален;
	Элементы.ДвижениеОбъектаРабот.Видимость = ОбъектАктуален И ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьСерииОбъекта()
	
	Если УчетПоСериям
		И ЗначениеЗаполнено(Объект.Номенклатура)
		И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Объект.Номенклатура) Тогда
		
		Элементы.СерияНоменклатуры.Видимость = ИСТИНА;
		Элементы.СерияНоменклатурыКодПродукта.Видимость = ИСТИНА;
	Иначе
		
		Элементы.СерияНоменклатуры.Видимость = ЛОЖЬ;
		Элементы.СерияНоменклатурыКодПродукта.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		Если ЗначениеЗаполнено(Объект.Клиент) 
			И НЕ Объект.Клиент.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДнейОтсрочки = Объект.Клиент.СрокОплатыВДняхПоУмолчанию;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДнейОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДнейОтсрочки = Объект.Договор.УстанавливаетСрокОплатыВДнях;
				Элементы.ДнейОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДнейХранилось()
	
	ДнейХранилось = Окр((Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно - Объект.ДатаПоступленияОбъектаРаботНаНашСклад) / (3600 * 24));
	Элементы.ДнейХранилось.Видимость = ДнейХранилось > 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.Клиент, Объект.Договор, Объект.Организация, Объект.Номенклатура, Объект.СкладДляОбъектаВыполненияРабот, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРезультаты(Команда)
	
	ОбновитьРезультатыНаСервере();
	ПересчитатьРезультаты();		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРезультатыНаСервере()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс, СтрокаТовара.СерияНоменклатуры);
		СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	КонецЦикла;
	
КонецПроцедуры
Процедура ОбновитьТекущийОстаток()
	// остаток долга контра например
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000692") Тогда
		Элементы.РаботыДобавить.Видимость 	 = ЛОЖЬ;
		Элементы.ОплатыДобавить.Видимость  	 = ЛОЖЬ;
		Элементы.РасходыДобавить.Видимость   = ЛОЖЬ;
		Элементы.ВзятьДатуНачалаРабот.Доступность = ЛОЖЬ;
		Элементы.СметаУтвержденаПриступитьКВыполнению.Доступность = ЛОЖЬ;
		Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Доступность = ЛОЖЬ;
		Элементы.РаботыОбновитьРезультаты.Доступность = ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость = ЛОЖЬ;
		Элементы.ПогаситьВаучер.Видимость	 = ЛОЖЬ;
		Элементы.СформироватьТекстПредметаСделки.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.РаботыДобавить.Видимость 	 = ИСТИНА;
		Элементы.ОплатыДобавить.Видимость  	 = ИСТИНА;
		Элементы.РасходыДобавить.Видимость 	 = ИСТИНА;
		Элементы.ВзятьДатуНачалаРабот.Доступность = ИСТИНА;
		Элементы.СметаУтвержденаПриступитьКВыполнению.Доступность = ИСТИНА;
		Элементы.РаботыПодтвердитьВыполнениеПланаДляВыделенныхСтрок.Доступность = ИСТИНА;
		Элементы.РаботыОбновитьРезультаты.Доступность = ЛОЖЬ;
		Элементы.ЧастныйПокупатель.Видимость = ИСТИНА;
		Элементы.ПогаситьВаучер.Видимость	 = ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
		Элементы.СформироватьТекстПредметаСделки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьОтказДвиженияДляНабора(Знач Номенклатура, Знач КоличествоВходящее, Знач Сумма, Знач ВестиУчетВаловойПрибыли, Знач Клиент, Знач ЗначениеЗаполненоКлиентПоставщик, Отказ, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач Склад) // для вложенных наборов
	
	ОбщееКоличество = Номенклатура.Состав.Итог("Количество");
	Если ОбщееКоличество = 0 Тогда
		ОбщееКоличество = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора Из Номенклатура.Состав Цикл
		СуммаЭлемента = (Сумма / ОбщееКоличество) * СтрокаСоставаНабора.Количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			Отказ = ОбработатьОтказДвиженияДляНабора(НоменклатураСостава, КоличествоВходящее * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, склад);
		Иначе
			
			Количество = СтрокаСоставаНабора.количество * КоличествоВходящее;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, Объект.Дата, ИСТИНА, , Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)	
	
	РезультатНакопление = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
	Если НЕ РезультатНакопление = Неопределено Тогда
		ВыяснитьОПогашенииНакопления(РезультатНакопление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Количество = 1)
	
	Результат = Неопределено;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
	
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		
		СерияНоменклатуры = Неопределено;
		
		Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда  		
			Объект.Номенклатура = РезультатОбработки;
		Иначе
			Объект.Номенклатура = РезультатОбработки.Номенклатура;
			РезультатОбработки.Свойство("СерияНоменклатуры", Объект.СерияНоменклатуры);
			
			СтрокаДисплеяПокупателя = СокрЛП(Объект.Номенклатура);		
		КонецЕсли;
		
	Иначе		
		ОстановитьПоиск = ЛОЖЬ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
			РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Сотрудник = РезультатОбработки;
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
			
			РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, ИСТИНА);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Клиент = РезультатОбработки;
				ПриИзмененииКонтрагента();				
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
			
			РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Объект.Организация = РезультатОбработки;
				ОрганизацияПриИзмененииНаСервере();	
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск
			И ИспользоватьВаучеры Тогда
			
			РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
			
			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Результат = ДобавитьПрименитьВаучер(РезультатОбработки);
				ОстановитьПоиск = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ОстановитьПоиск Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар или идентификатор по Штрих-Коду не найден") + " (" + ТекКод + ").");
			//Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			
			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКлиентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектКлиента) Тогда
		ОбъектКлиентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбъектКлиентаПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
		Объект.Клиент = Объект.ОбъектКлиента.СвязанныйКлиент;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.Номенклатура = Объект.ОбъектКлиента.СвязаннаяНоменклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыВалютаПланПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты.ТекущиеДанные;
	ТекущаяСтрока.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.ВалютаПлан, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.ВалютаПлан Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты.ТекущиеДанные;
	ТекущаяСтрока.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыКурсПланПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыКурсПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПланПриИзменении(Элемент)	
	ПересчетИтоговОплаты();	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;
	
	СтрокаТовара = Элементы.Оплаты.ТекущиеДанные;
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) 
		И ЗначениеЗаполнено(ВалютаХранилища) Тогда
		
		СтрокаТовара.Валюта = ВалютаХранилища;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаХранилища, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	КонецЕсли;
	
	Если СтрокаТовара.Курс = 0 Тогда
		СтрокаТовара.Курс = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыСуммаПриИзменении(Элемент)
	ПересчетИтоговОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	ПересчетИтоговОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");	
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.Клиент, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Организация.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Организация.ХранилищеДенег;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ОТказ
		И УчетПоСериям Тогда
		
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) 
				И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Клиента.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести документ?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = ИСТИНА;
				
			ИначеЕсли Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	
	Если НЕ Отказ
		И ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот 
		И Объект.Актуален
		И ЗначениеЗаполнено(Объект.Номенклатура)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И (ЗначениеЗаполнено(Объект.ДатаВыдачиОбъектаРаботКлиентуОбратно) или ЗначениеЗаполнено(Объект.ДатаПоступленияОбъектаРаботНаНашСклад))
		И НЕ ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Склад хранения объекта работ!"), , "СкладДляОбъектаВыполненияРабот");
		Отказ = ИСТИНА;		
	КонецЕсли;
	
	Если НЕ Отказ
		И ИспользоватьВаучеры Тогда
		
		Ваучеров = 0;
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			Если СтрокаВаучера.ВаучерИзъят Тогда
				Ваучеров = Ваучеров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ваучеров = 0
			И Вопрос(?(Ваучеров = 1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучер?"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучеры") + " (" + СокрЛП(Ваучеров) + ")?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Отказ = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Клиент)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Договор) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
					
					ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
					
					Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
						ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= ТекущийОбъект.Дата Тогда
						
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!"), ТекущийОбъект, "Договор");
						Отказ = ИСТИНА;
						
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ТекущийОбъект.Договор.ПредусматриваетСтрогиеЦены Тогда
				
				Договор = ТекущийОбъект.Договор;
				Дата 	= ТекущийОбъект.Дата;
				ВидЦен 	= ТекущийОбъект.ВидЦен;
				
				Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, СтрокаТовара.Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, СтрокаТовара.Цена, ТекущийОбъект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						
						Отказ = ИСТИНА;
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене Из договора") + ": " + Цена, ТекущийОбъект);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
				
				Если СтрокаТовара.ПроцентСкидки = 0
					И СтрокаТовара.СуммаБезСкидки = 0 Тогда
					
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.сумма;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если НЕ Отказ
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
			
			ТекущийОбъект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
				ТекущийОбъект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийОбъект.Актуален
			И НЕ Отказ 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке работ №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!"), ТекущийОбъект);
					Отказ = ИСТИНА;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого СтрокаТовара Из ТекущийОбъект.Оплаты Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке оплат №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!"), ТекущийОбъект);
					Отказ = ИСТИНА;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого СтрокаТовара Из ТекущийОбъект.Расходы Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке расходов №") + " " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указана дата!"), ТекущийОбъект);
					Отказ = ИСТИНА;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;   	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтоговОплаты(Знач БезПересчета = ЛОЖЬ)
	
	ПересчетИтоговОплатыНаСервере(БезПересчета);
	ПересчитатьРезультаты(БезПересчета);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетИтоговОплатыНаСервере(Знач БезПересчета = ЛОЖЬ)
	
	ОплатыПлан = 0;
	ОплатыФакт = 0;
	Для Каждого СтрокаОплаты Из Объект.Оплаты Цикл
		Если НЕ БезПересчета
			И СтрокаОплаты.Курс = 0 Тогда
			
			СтрокаОплаты.Курс = 1;
		КонецЕсли;
		
		Если НЕ БезПересчета
			И СтрокаОплаты.КурсПлан = 0 Тогда
			
			СтрокаОплаты.КурсПлан = 1;
		КонецЕсли;
		
		ОплатыФакт = ОплатыФакт + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
		ОплатыПлан = ОплатыПлан + СтрокаОплаты.План * СтрокаОплаты.КурсПлан;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетИтоговРасходов()
	
	ПересчетИтоговРасходовНаСервере();
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаСервере
Процедура ПересчетИтоговРасходовНаСервере(Знач БезПересчета = ЛОЖЬ)
	
	РасходыПлан = 0;
	РасходыФакт = 0;
	Для Каждого СтрокаОплаты Из Объект.Расходы Цикл
		Если НЕ БезПересчета
			И СтрокаОплаты.Курс = 0 Тогда
			
			СтрокаОплаты.Курс = 1;	
		КонецЕсли;
		
		Если НЕ БезПересчета
			И СтрокаОплаты.КурсПлан = 0 Тогда
			
			СтрокаОплаты.КурсПлан = 1;	
		КонецЕсли;
		
		РасходыПлан = РасходыПлан + СтрокаОплаты.План * СтрокаОплаты.КурсПлан;
		РасходыФакт = РасходыФакт + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРезультаты(Знач БезПересчета = ЛОЖЬ)
	
	ВаловаяПрибыль 		= Объект.Товары.Итог("ВаловаяПрибыль");
	ВаловаяПрибыльПлан  = Объект.Товары.Итог("ВаловаяПрибыльПлан");
	РезультатПлан  = ВаловаяПрибыльПлан - РасходыПлан; 
	Результат 	   = ?(Объект.Актуален, ВаловаяПрибыль, 0) - РасходыФакт; 
	
	Если НЕ БезПересчета Тогда
		Если НЕ РезультатПлан = Объект.РезультатПлан Тогда
			Объект.РезультатПлан = РезультатПлан; 	
		КонецЕсли;
		Если НЕ Результат = Объект.Результат Тогда
			Объект.Результат = Результат; 	
		КонецЕсли;	
	КонецЕсли;
	РезультатРазница = Результат - РезультатПлан;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРезультатыНаСервере();
	
	ВаловаяПрибыль 		= Объект.Товары.Итог("ВаловаяПрибыль");
	ВаловаяПрибыльПлан  = Объект.Товары.Итог("ВаловаяПрибыльПлан");
	РезультатПлан  = ВаловаяПрибыльПлан - РасходыПлан; 
	Результат 	   = ?(Объект.Актуален, ВаловаяПрибыль, 0) - РасходыФакт; 
	
	Если НЕ РезультатПлан = Объект.РезультатПлан Тогда
		Объект.РезультатПлан = РезультатПлан; 	
		РезультатРазница = Результат - РезультатПлан;
	КонецЕсли;
	Если НЕ Результат = Объект.Результат Тогда
		Объект.Результат = Результат; 	
		РезультатРазница = Результат - РезультатПлан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуРабот(Знач ИзСуммы = ЛОЖЬ, Знач ИзКонечнойСуммы = ИСТИНА, СтрокаТовара = Неопределено, Знач План = ЛОЖЬ)
	
	// 	Если СтрокаТовара = Неопределено Тогда
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	// 	КонецЕсли;
	
	Если План Тогда
		Если СтрокаТовара.КоличествоПлан = 0 Тогда
			СтрокаТовара.КоличествоПлан = 1;
		КонецЕсли;
		
		Если СтрокаТовара.КурсПлан = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
				СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
			Иначе
				СтрокаТовара.КурсПлан = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.План;
			СтрокаТовара.ПроцентСкидкиПлан  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда			
			СтрокаТовара.ценаПлан = СтрокаТовара.СуммаБезСкидкиПлан / СтрокаТовара.КоличествоПлан;
			
		Иначе
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
			Если НЕ СтрокаТовара.ПроцентСкидкиПлан = 0 Тогда
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - ((СтрокаТовара.СуммаБезСкидкиПлан / 100) * СтрокаТовара.ПроцентСкидкиПлан);
				
			Иначе
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		
		Если СтрокаТовара.Курс = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
			Иначе
				СтрокаТовара.Курс = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Сумма;
			СтрокаТовара.ПроцентСкидки  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда			
			СтрокаТовара.цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;
			
		Иначе
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
			Если НЕ СтрокаТовара.ПроцентСкидки = 0 Тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - ((СтрокаТовара.СуммаБезСкидки / 100) * СтрокаТовара.ПроцентСкидки);
				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс, СтрокаТовара.СерияНоменклатуры);
	СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуРаботНаСервере(Знач ИзСуммы = ЛОЖЬ, Знач ИзКонечнойСуммы = ИСТИНА, СтрокаТовара, Знач План = ЛОЖЬ)
	
	Если План Тогда
		Если СтрокаТовара.КоличествоПлан = 0 Тогда
			СтрокаТовара.КоличествоПлан = 1;
		КонецЕсли;
		Если СтрокаТовара.КурсПлан = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
				СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
			Иначе
				СтрокаТовара.КурсПлан = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.План;
			СтрокаТовара.ПроцентСкидкиПлан  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда
			
			СтрокаТовара.ценаПлан = СтрокаТовара.СуммаБезСкидкиПлан / СтрокаТовара.КоличествоПлан;
			
		Иначе
			СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.КоличествоПлан * СтрокаТовара.ЦенаПлан;
			Если НЕ СтрокаТовара.ПроцентСкидкиПлан = 0 Тогда
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - ((СтрокаТовара.СуммаБезСкидкиПлан / 100) * СтрокаТовара.ПроцентСкидкиПлан);
				
			Иначе
				СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если СтрокаТовара.Количество = 0 Тогда
			СтрокаТовара.Количество = 1;
		КонецЕсли;
		
		Если СтрокаТовара.Курс = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
			Иначе
				СтрокаТовара.Курс = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ИзКонечнойСуммы Тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Сумма;
			СтрокаТовара.ПроцентСкидки  = 0;
		КонецЕсли;
		
		Если ИзСуммы Тогда			
			СтрокаТовара.цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;			
		Иначе
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
			Если НЕ СтрокаТовара.ПроцентСкидки = 0 Тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - ((СтрокаТовара.СуммаБезСкидки / 100) * СтрокаТовара.ПроцентСкидки);				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТовара.ВаловаяПрибыль 	= ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.Сумма, СтрокаТовара.Валюта, СтрокаТовара.Курс, СтрокаТовара.СерияНоменклатуры);
	СтрокаТовара.ВаловаяПрибыльПлан = ОбщийМодульСервер.РассчитатьОриентировочнуюВаловуюПрибыль(СтрокаТовара.номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.План, СтрокаТовара.ВалютаПлан, СтрокаТовара.КурсПлан);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьАктВыполненныхРабот(ДокументДляПечати, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Акт выполненных работ"), 2);
	ОбщийМодульТоварСервер.ПечатьАктаВыполненныхРабот(ДокументДляПечати, ОбъектСсылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьСвоюПечатнуюФорму(ДокументДляПечати, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач СвояПроизвольнаяПечатнаяФорма)  
	
	Если ЗначениеЗаполнено(СвояПроизвольнаяПечатнаяФорма) Тогда
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал свою форму") + ": " + СокрЛП(СвояПроизвольнаяПечатнаяФорма), 2);
		ОбщийМодульТоварСервер.ПечататьСвоюПечатнуюФорму(ДокументДляПечати, ОбъектСсылка, ПараметрыПечати, ВставлятьРазделительСтраниц, СвояПроизвольнаяПечатнаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоТалона(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыбораЭлементов = Новый Структура("ЭтоВыполнениеРабот", ИСТИНА);
	ВыборЭлементовПечатнойФормы = ПолучитьФорму("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		
		ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, ПараметрыПечати);
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Гарантийные обязательства");
		
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьГарантийногоТалонаНаСервере(ДокументДляПечати, Знач ПараметрыПечати)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал гарантийные обязательства."), 2);
	ОбщийМодульТоварСервер.ПечатьГарантийногоТалона(ДокументДляПечати, ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНалоговойНакладной(Команда)
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе") Тогда
		РежимПакета = "НалоговаяИГарантийный";
	Иначе
		РежимПакета = "НалоговаяНакладная";
	КонецЕсли;
	
	ПараметрыВыбораЭлементов = Новый Структура(РежимПакета, ИСТИНА);
	ПараметрыВыбораЭлементов.Вставить("Организация", Объект.Организация);
	ПараметрыВыбораЭлементов.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
	ВыборЭлементовПечатнойФормы = ПолучитьФорму("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ВставлятьРазделительСтраниц = ЛОЖЬ;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыПечати.Вставить("ПечататьОригинал", ПереченьЭлементов.ПечататьОригинал);
		ПараметрыПечати.Вставить("ПечататьКопию",  ПереченьЭлементов.ПечататьКопию);
		ПараметрыПечати.Вставить("ЭтоВыполнениеРабот", ИСТИНА);
		
		Если ПереченьЭлементов.ПечататьТОРГ12 Тогда
			ПечатьТорг12(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечатьСчета Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.СчетВДваЭкземпляра, , ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;		
		Если ПереченьЭлементов.ПечататьСчетФактуру Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.СчетФактураВДваЭкземпляра, , ВставлятьРазделительСтраниц, ИСТИНА);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;		
		Если ПереченьЭлементов.ПечататьТакжеРасходнуюНакладную Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ЛОЖЬ, ПереченьЭлементов.ПечатьСчета, ПереченьЭлементов.РасходнаяВДваЭкземпляра, ПереченьЭлементов.ЗаголовокРасходнойНакладной, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечататьАктВыполненныхРабот Тогда
			ПечататьАктВыполненныхРабот(ФормаПечати.Результат, Объект.Ссылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;		
		Если ПереченьЭлементов.ПечататьСвоюПечатнуюФорму Тогда
			ПечататьСвоюПечатнуюФорму(ФормаПечати.Результат, Объект.Ссылка, ПараметрыПечати, ВставлятьРазделительСтраниц, ПереченьЭлементов.СвояПроизвольнаяПечатнаяФорма);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ФормаПечати.Результат.АвтоМасштаб = ЛОЖЬ;
		
		Если ПереченьЭлементов.ПечататьОригинал 
			ИЛИ ПереченьЭлементов.ПечататьКопию Тогда			
			
			ПечатьНалоговойНакладнойНаСервере(ФормаПечати.Результат, ПараметрыПечати, ВставлятьРазделительСтраниц);	
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, ПараметрыПечати);
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Налоговая накладная");
		
		ФормаПечати.Открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьНалоговойНакладнойНаСервере(ДокументДляПечати, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал налоговую накладную."), 2);
	ОбщийМодульТоварСервер.ПечатьНалоговойНакладной(ДокументДляПечати, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьРН(ДокументДляПечати, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ВДваЭкземпляра = ЛОЖЬ, Знач ЗаголовокРасходнойНакладной = "", Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач ЭтоСчетФактура = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал") + " " + ?(ЭтоСчетФактура, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет-фактуру"), ?(ЭтоСчет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход товара"))), 2);
	Документы.РасходыТовара.Печать(ДокументДляПечати, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, ИСТИНА , , , ЗаголовокРасходнойНакладной, ВДваЭкземпляра, ВставлятьРазделительСтраниц, ЭтоСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСметы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ сначала следует записать."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перед Печатью сметы"));
		
	Иначе
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПечатьСметыНаСервере(ФормаПечати.Результат, Объект.Ссылка);
		
		ФормаПечати.Результат.ОтображатьСетку 	= ЛОЖЬ;
		ФормаПечати.Результат.Защита 			= ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	= ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Смета");
		ФормаПечати.Открыть();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьСметыНаСервере(ДокументДляПечати, Знач ОбъектСсылка)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Смету"), 2);
	Документы.ВыполненияРабот.Смета(ДокументДляПечати, ОбъектСсылка);
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ЛОЖЬ, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), "Оплаты");
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПечатьТорг12(ДокументДляПечати, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ТОРГ12ВДваЭкземпляра = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал ТОРГ 12"), 2);
	Документы.РасходыТовара.Печать(ДокументДляПечати, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, ИСТИНА, ИСТИНА, , , ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		Объект.ПКОНапечатан = ИСТИНА;
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(Текст) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(Текст);
		ТекстовыйДокумент.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товарный Чек"));
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВаучер(Команда)
	
	Элементы.ПогаситьВаучер.Видимость 	= ЛОЖЬ;
	Элементы.Ваучеры.Видимость 			= ИСТИНА;
	СтрокаВаучера = Объект.Ваучеры.Добавить();
	Элементы.Ваучеры.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
	Элементы.Ваучеры.ТекущийЭлемент 	= Элементы.ВаучерыВаучер;		
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВыполнениеПланаДляВыделенныхСтрок(Команда)
	
	Для Каждого ВыделеннаяСтрокаТаблицы Из Элементы.Товары.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.Товары.ДанныеСтроки(ВыделеннаяСтрокаТаблицы);  
		
		ВыделеннаяСтрока.Дата 		= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ВыделеннаяСтрока.Количество = ВыделеннаяСтрока.КоличествоПлан;
		ВыделеннаяСтрока.Цена 		= ВыделеннаяСтрока.ЦенаПлан;
		ВыделеннаяСтрока.Сумма 		= ВыделеннаяСтрока.План;
		ВыделеннаяСтрока.ПроцентСкидки = ВыделеннаяСтрока.ПроцентСкидкиПлан;
		ВыделеннаяСтрока.СуммаБезСкидки = ВыделеннаяСтрока.СуммаБезСкидкиПлан;
		ВыделеннаяСтрока.Валюта 	= ВыделеннаяСтрока.ВалютаПлан;
		ВыделеннаяСтрока.Курс 		= ВыделеннаяСтрока.Курс;
	КонецЦикла;
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.Клиент = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.Клиент = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач НоменклатураИлиКлиентПоставщик, Знач Количество = 0, Знач Склад = Неопределено, Знач Дата = Неопределено)
	
	Если ИспользоватьСкидки Тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, Склад, Дата);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПроцентСкидкиНаСервере

&НаСервереБезКонтекста
Функция   ПолучитьСкладПоУмолчанию()
	
	Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество, Знач Дата, Знач ЕдиницаИзмерения)
	
	Возврат ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Дата, ИСТИНА, Количество, Объект.Договор, , , Объект.Ссылка, ИСТИНА, ЕдиницаИзмерения);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
	ВидимостьСторно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагента()
	
	Если  ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И (НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ не Объект.Договор.КлиентПоставщик = Объект.Клиент) Тогда
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.Клиент, Объект.Дата);
		КонецЕсли;		
		
		Если ВестиУчетДенегВНесколькихХранилищах
			И НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) 
			И ЗначениеЗаполнено(Объект.Клиент.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Клиент.ХранилищеДенег;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Клиент.ВидЦен) Тогда
			Объект.ВидЦен = Объект.Клиент.ВидЦен;
		КонецЕсли;
		
		Если ИспользоватьСкидки Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.Клиент, Объект.ВаучерСкидки, СтрокаТовара.Склад);
				
				пересчитатьСтрокуРаботНаСервере(, , СтрокаТовара, НЕ Объект.Актуален);
				ПересчитатьРезультатыНаСервере();
			КонецЦикла;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Клиент.СпособДоставки) Тогда
			Объект.СпособДоставки = Объект.Клиент.СпособДоставки;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если Объект.Актуален Тогда
			
			Если СтрокаТовара.Количество = 0 Тогда
				СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
				И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
				
				СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
				
				Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
					Номенклатура = СтрокаТовараСтруктура.Номенклатура;
					СтрокаТовара.Номенклатура = Номенклатура;
					СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетПоСериям Тогда
				
				ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
				
				Если ТоварВедетсяПоСериям Тогда
					СтрокаТовара.Количество = 1;
					СерииНоменклатурыВидны 	= ИСТИНА;		
					Элементы.РаботыСерияНоменклатуры.Видимость 	= ИСТИНА;	
				КонецЕсли;             				
			КонецЕсли;
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.Дата, СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.Склад, СтрокаТовара.Дата);
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЕсли;
			
			ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
			
		Иначе
			Если СтрокаТовара.КоличествоПлан = 0 Тогда
				СтрокаТовара.КоличествоПлан = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
				И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
				
				СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.КоличествоПлан);
				
				Если НЕ СтрокаТовараСтруктура = Неопределено Тогда
					Номенклатура = СтрокаТовараСтруктура.Номенклатура;
					СтрокаТовара.Номенклатура = Номенклатура;
					СтрокаТовара.КоличествоПлан = СтрокаТовараСтруктура.КоличествоПлан;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетПоСериям Тогда
				
				ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
				Если ТоварВедетсяПоСериям Тогда
					СтрокаТовара.КоличествоПлан = 1;
				КонецЕсли;             				
			КонецЕсли;
			
			СтрокаТовара.ЦенаПлан = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.ДатаПлан, СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
				СтрокаТовара.ПроцентСкидкиПлан 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПлан, СтрокаТовара.Склад, СтрокаТовара.ДатаПлан);
			Иначе
				СтрокаТовара.План = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
			КонецЕсли;
			
			ПересчитатьСтрокуРабот(, ЛОЖЬ, , ИСТИНА);		
		КонецЕсли;
		
		ПересчитатьРезультаты();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда		
		Попытка
			СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
			Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
		Исключение
		КонецПопытки;				
	КонецЕсли;
	
	ОбновитьТекущийОстаток();	
	ПересчетИтоговРасходовНаСервере(ИСТИНА);// не наоборот
	ПересчетИтоговОплаты(ИСТИНА);
	ОбновитьВидимостьСерииОбъекта();	
	ОбновитьДнейХранилось();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000690", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		
		ИспользоватьСкидки 	   = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");	
		ОсновнаяВалюта 		   = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетПоСкладам 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДенегВНесколькихХранилищах  = ВестиУчетДвиженияДенег И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		ОтключитьПланированиеВДокументеВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОтключитьПланированиеВДокументеВыполненияРабот");
		ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот = Элементы.ДвижениеОбъектаРабот.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРабот");
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСторнированиеДокументов	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ИспользоватьВаучеры 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
		
		Элементы.ПечатьГарантийногоТалона.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе");
		Элементы.ПечатьЧека.Видимость 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляВыполненияРабот");
		
		Элементы.ОплатыФормаОплаты.Видимость  = НЕ ВестиУчетДенегВНесколькихХранилищах;
		Элементы.РасходыФормаОплаты.Видимость = НЕ ВестиУчетДенегВНесколькихХранилищах;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.Дополнительно, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Объект.ТипРаботы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипРаботПоУмолчанию");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДнейОтсрочки) Тогда
				
				Объект.ДнейОтсрочки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
				Объект.Клиент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОсновнаяВалюта;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
				Объект.СпособДоставки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СпособДоставкиПоУмолчанию");
			КонецЕсли;
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
		Иначе
			ВаучерыВидимость = НЕ Объект.Ваучеры.Количество() = 0;
			Элементы.Ваучеры.Видимость = ВаучерыВидимость;
			Элементы.ПогаситьВаучер.Видимость = ИспользоватьВаучеры И НЕ ВаучерыВидимость;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			ВалютаХранилища = Объект.ХранилищеДенег.Валюта;
		Иначе
			ВалютаХранилища = Объект.Валюта;
		КонецЕсли;
		
		Если (ОтключитьПланированиеВДокументеВыполненияРабот
			ИЛИ параметры.БезПлана)
			И НЕ Объект.БезПлана Тогда
			
			Объект.БезПлана = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПлан) Тогда
			Объект.ДатаПлан = ОбщийМодульСервисСервер.ПользователяТекущаяДата() + 24 * 3600;
		КонецЕсли;
		
		СменаБезПланаНаСервере();
		
		Элементы.БезПлана.Видимость = НЕ ОтключитьПланированиеВДокументеВыполненияРабот;
		
		Элементы.ВаучерыВаучерИзъят.Видимость = ИспользоватьВаучеры И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
		Элементы.ОсновнаяВалюта1.Видимость 	  = ВестиУчетДвиженияДенег;
		Элементы.ОсновнаяВалюта2.Видимость 	  = ВестиУчетДвиженияДенег;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличествоПлан);
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			Элементы.РаботыЦенаПлан.Доступность = ЛОЖЬ;
			Элементы.РаботыЦена.Доступность 	= ЛОЖЬ;
		КонецЕсли;
		
		ОбновитьВидимостьНаСервере();	
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000892", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.Оплаты.ТолькоПросмотр = ИСТИНА;				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.Оплаты.Видимость = ЛОЖЬ;				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();
		
		Элементы.ГруппаПредметаСделки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	Отказ = ЛОЖЬ;
	
	Ссылка = Объект.Ссылка;
	Дата   = Объект.Дата;
	ВидЦен = Объект.ВидЦен;
	ПоступилоДенег = ОплатыФакт;
	ХранилищеДенег = Объект.ХранилищеДенег;
	Договор = Объект.Договор;
	Клиент  = Объект.Клиент;
	ТовараНаСумму 	  = Объект.Товары.Итог("Сумма");
	ТовараВКоличестве = Объект.Товары.Итог("Количество");
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Клиент);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик;
	ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	ВестиУчетЗаказовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		И ЗначениеЗаполнено(Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенег, Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		
		ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
		ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
		
		ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
		ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
		
		Если ИспользоватьСложныйМеханизмЦен
			И ЗначениеЗаполнено(ВидЦен)
			И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
			
			ВалютаЦены = ВидЦен.ВалютаЦены ;
		Иначе
			ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовара Из Объект.Товары Цикл
			
			Склад = ТекСтрокаТовара.Склад;
			Дата  = ТекСтрокаТовара.Дата;
			Если ВестиУчетПоСкладам
				И НЕ ЗначениеЗаполнено(Склад) Тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В работах не везде указан склад!"), , Ссылка);				
				Отказ = ИСТИНА;
				
				Прервать;
			КонецЕсли;	
			
			Номенклатура 	   = ТекСтрокаТовара.Номенклатура;		
			СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(, склад, дата, ОстаткиСледуетПроверять, Номенклатура);
			ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
			
			Если ОстаткиСледуетПроверять Тогда
				ГотоваяТаблицаОстатков = СтруктураТаблиц.ТаблицаОстатков;	
			КонецЕсли;	
			
			СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
			Количество 		  = ТекСтрокаТовара.Количество;
			КоличествоОстаток = Неопределено;
			
			Если ОстаткиСледуетПроверять Тогда
				СтрокаОстаток = ГотоваяТаблицаОстатков.Найти(Номенклатура, "Номенклатура");
				
				Если НЕ СтрокаОстаток = Неопределено Тогда
					ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
					ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
					
				Иначе
					ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
					ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
					
				КонецЕсли;			
				
			Иначе 			
				ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);					
			КонецЕсли;	
			
			Если НЕ ПредопределенныйТовар
				И НЕ ЭтоНабор Тогда
				
				Если ОстаткиСледуетПроверять Тогда
					Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);	
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				сумма 	 = ТекСтрокаТовара.Сумма;
				СуммаТов = сумма;// ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
				
				Если ЭтоНабор Тогда 										
					отказ = ОбработатьОтказДвиженияДляНабора(Номенклатура, ТекСтрокаТовара.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ТекСтрокаТовара.Склад);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// если НЕ ПоступилоДенег = 0 
	// 	И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
	// 	
	// 	Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
	// 		ФормаОплаты = ХранилищеДенег.ФормаОплаты;
	// 	Иначе
	// 		ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");				
	// 	КонецЕсли;
	// 	
	// 	Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Объект.Ссылка);	
	// 	
	// КонецЕсли;
	// 
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!"), Объект, "РаботыСерияНоменклатуры");
					Отказ = ИСТИНА;
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!"), Объект, "РаботыСерияНоменклатуры");
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьУчетПоСериям

&НаКлиенте
Процедура РаботыВалютаПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.ВалютаПлан, ТекущиеДанные.ДатаПлан);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.Валюта, ТекущиеДанные.Дата);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКурсПланПриИзменении(Элемент)
	ПересчитатьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура РаботыКурсПриИзменении(Элемент)
	ПересчитатьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", СтрокаТовара.Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.Клиент);
	
	ПараметрыФормы.Вставить("ОтборПоДате", ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		ПриИзмененииНоменклатуры(СтрокаТовара);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Если Объект.Актуален Тогда
			Элементы.Товары.ТекущийЭлемент = Элементы.РаботыКоличество;
		Иначе
			Элементы.Товары.ТекущийЭлемент = Элементы.РаботыКоличествоПлан;
		КонецЕсли;			
		
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, СтрокаТовара.Номенклатура, Объект.Клиент);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(СтрокаТовара) 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПланПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		СтрокаТовара.Склад = ПолучитьСкладПоУмолчанию();
	КонецЕсли;
	
	Если БезПлана Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтрокаТовара.Валюта = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
			Иначе
				СтрокаТовара.Валюта = ОсновнаяВалюта;
			КонецЕсли;
		КонецЕсли;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, СтрокаТовара.Дата);
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				СтрокаТовара.ВалютаПлан = ОбщийМодульСервер.получитьЗначениеРеквизита(Объект.ВидЦен, "ВалютаЦены");
			Иначе
				СтрокаТовара.ВалютаПлан = ОсновнаяВалюта;
			КонецЕсли;
		КонецЕсли;
		СтрокаТовара.КурсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.ВалютаПлан, СтрокаТовара.ДатаПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроцентСкидкиПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроцентСкидкиПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(СтрокаТовара.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", СтрокаТовара.Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
	
	ПараметрыФормы.Вставить("ОтборПоДате", ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.СерияНоменклатуры);
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы);
	
	СерияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Элементы.Товары.ТекущиеДанные.СерияНоменклатуры = СерияНоменклатуры;	
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Если Объект.Актуален Тогда
			Элементы.Товары.ТекущийЭлемент = Элементы.РаботыКоличество;
		Иначе
			Элементы.Товары.ТекущийЭлемент = Элементы.РаботыКоличествоПлан;
		КонецЕсли;			
		
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаБезСкидкиПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ИСТИНА, ИСТИНА, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаБезСкидкиПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ИСТИНА, ИСТИНА);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПланПриИзменении(Элемент)
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ, , ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	ПересчитатьСтрокуРабот(ЛОЖЬ, ЛОЖЬ);
	ПересчитатьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПланПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	ТекущаяСтрока.курсПлан = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.ВалютаПлан, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.ВалютаПлан Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговРасходов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	ТекущаяСтрока.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, ?(Объект.Актуален, ТекущаяСтрока.Дата, ТекущаяСтрока.ДатаПлан));
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ПересчетИтоговРасходов();	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКурсПланПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКурсПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПередНачаломИзменения(Элемент, Отказ)
	
	БезПлана = Объект.БезПлана или Объект.Актуален;
	
	СтрокаТовара = Элементы.Расходы.ТекущиеДанные;
	Если БезПлана
		И НЕ ЗначениеЗаполнено(СтрокаТовара.Дата) Тогда
		
		СтрокаТовара.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТовара.Валюта) 
		И ЗначениеЗаполнено(ВалютаХранилища) Тогда
		
		СтрокаТовара.Валюта = ВалютаХранилища;
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаХранилища, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
	КонецЕсли;
	
	Если СтрокаТовара.Курс = 0 Тогда
		СтрокаТовара.Курс = 1;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПланПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	ПересчетИтоговРасходов();	
КонецПроцедуры

&НаКлиенте
Процедура РасходыХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервереР();
	ПересчетИтоговРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладДляОбъектаВыполненияРаботПриИзменении(Элемент)
	СкладДляОбъектаВыполненияРаботПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладДляОбъектаВыполненияРаботПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СкладДляОбъектаВыполненияРабот)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СменаБезПланаНаСервере()
	
	БезПлана = ОтключитьПланированиеВДокументеВыполненияРабот или Объект.БезПлана;
	
	Элементы.ДатаПлан.Видимость 		= НЕ БезПлана;
	Элементы.РезультатПлан.Видимость    = НЕ БезПлана;
	Элементы.РезультатРазница.Видимость = НЕ БезПлана;
	Элементы.РасходыДатаПлан.Видимость  = НЕ БезПлана;
	Элементы.РасходыПлан.Видимость 	    = НЕ БезПлана;
	Элементы.РаботыИтогПлан.Видимость   = НЕ БезПлана;
	Элементы.ОплатыПлан1.Видимость   	= НЕ БезПлана;
	Элементы.ОплатыПлан.Видимость 	  	= НЕ БезПлана;
	Элементы.ОплатыДатаПлан.Видимость 	= НЕ БезПлана;
	Элементы.РаботыПлан.Видимость	  	= НЕ БезПлана;
	Элементы.РаботыВалютаПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыДатаПлан.Видимость 	= НЕ БезПлана;
	Элементы.РасходыПлан1.Видимость 	= НЕ БезПлана;
	Элементы.РасходыВалютаПлан.Видимость= НЕ БезПлана;
	Элементы.РасходыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.ОплатыВалютаПлан.Видимость	= НЕ БезПлана;
	Элементы.ОплатыКурсПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыЦенаПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыКоличествоПлан.Видимость 	= НЕ БезПлана;
	Элементы.РаботыПроцентСкидкиПлан.Видимость	= НЕ БезПлана;
	Элементы.РаботыСуммаБезСкидкиПлан.Видимость = НЕ БезПлана;
	
	Если БезПлана 
		И НЕ Объект.Актуален Тогда		
		
		Объект.Актуален = ИСТИНА;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СметаУтвержденаПриступитьКВыполнению(Команда)
	
	Объект.Актуален = ИСТИНА;
	Элементы.СметаУтвержденаПриступитьКВыполнению.Видимость = ЛОЖЬ;
	ОбновитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПредметаСделки(Команда)
	Объект.ПредметСделки = ТекстПредметаСделкиНаСервере();
КонецПроцедуры

&НаСервере
Функция ТекстПредметаСделкиНаСервере()
	
	Если Объект.Товары.Количество() = 1 Тогда
		Номенклатура = Объект.Товары[0].Номенклатура;
		Возврат ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, , , Объект.Клиент, ИСТИНА);
	Иначе
		Сумма = Объект.Товары.Итог("Сумма");
		Если Сумма = 0 Тогда
			Сумма = Объект.Товары.Итог("План");
		КонецЕсли;
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товары на сумму") + " " + Сумма;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере1();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	СтрокаТовара = Объект.Оплаты[Элементы.Оплаты.ТекущаяСтрока];
	Если ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег) Тогда
		
		Если СтрокаТовара.ФормаОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
			СтрокаТовара.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При оплате сертификатом хранилище денег не указывается."), , Объект.Ссылка);
			
		Иначе		
			СтрокаТовара.ФормаОплаты = СтрокаТовара.ХранилищеДенег.ФормаОплаты;
			
			Если ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег.Валюта) Тогда
				
				СтрокаТовара.Валюта = СтрокаТовара.ХранилищеДенег.Валюта; 
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
					СтрокаТовара.ВалютаПлан = СтрокаТовара.Валюта;
				КонецЕсли;
				
				СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.КурсПлан) Тогда
					СтрокаТовара.КурсПлан = СтрокаТовара.Курс;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере1()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		ВалютаХранилища = Объект.ХранилищеДенег.Валюта;
		Объект.Валюта = ВалютаХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервереР()
	
	СтрокаТовара = Объект.Расходы[Элементы.Расходы.ТекущаяСтрока];
	Если ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег) 
		И ЗначениеЗаполнено(СтрокаТовара.ХранилищеДенег.Валюта) Тогда
		
		СтрокаТовара.ФормаОплаты = СтрокаТовара.ХранилищеДенег.ФормаОплаты;
		СтрокаТовара.Валюта = СтрокаТовара.ХранилищеДенег.Валюта;
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ВалютаПлан) Тогда
			СтрокаТовара.ВалютаПлан = СтрокаТовара.Валюта;
		КонецЕсли;
		
		СтрокаТовара.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаТовара.Валюта, ?(Объект.Актуален, СтрокаТовара.Дата, СтрокаТовара.ДатаПлан));		
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.КурсПлан) Тогда
			СтрокаТовара.КурсПлан = СтрокаТовара.Курс;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	ПриИзмененииКонтрагента();	
	
КонецПроцедуры
