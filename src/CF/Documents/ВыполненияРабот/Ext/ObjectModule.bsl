// sza151210-2333 про
// sza150604-0232 сертификаты
// sza150109-1645 НЧ
// sza141112-0134 валовая
// sza140722-0059 склад в продажи
// sza140701-1314  
// sza140624-1351  
// sza140206-0029

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция   ОбработатьДвиженияДляНабора(НоменклатураТ, КоличествоСтруктура, Сумма, ВестиУчетВаловойПрибыли, ЭтоКлиент, Знач ЗначениеЗаполненоКлиентПоставщик, Отказ, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач ОтменитьПроверкиНаОтказ, ДатаТ, Склад) // для вложенных наборов
	
	ОбщееКоличество = Номенклатура.Состав.Итог("Количество");
	Если ОбщееКоличество = 0 Тогда
		ОбщееКоличество = 1;
	КонецЕсли;
	
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора Из НоменклатураТ.Состав Цикл
		СуммаЭлемента = (Сумма / ОбщееКоличество) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			Отказ = ОбработатьДвиженияДляНабора(НоменклатураСостава, КоличествоСтруктура * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ, ДатаТ, Склад);
		Иначе
			
			Количество = СтрокаСоставаНабора.Количество * КоличествоСтруктура;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ОтменитьПроверкиНаОтказ
				И НЕ ПредопределенныйТовар Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, ДатаТ, ИСТИНА, , Ссылка);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СуммаТов = СуммаЭлемента;
				
				ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, ДатаТ, , ПредопределенныйТовар, Склад);
				
				Если НЕ ПредопределенныйТовар Тогда
					
					Движение = Движения.Товары.Добавить();					
					Движение.Номенклатура = НоменклатураСостава;
					Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
					Движение.Период 	  = ДатаТ;
					Движение.Склад 		  = Склад;		
					Движение.Комментарий  = Комментарий;
					Движение.Количество   = Количество;
					ДвижениеСумма 		  = ЦенаСписания * Количество;
					Движение.Сумма 		  = ДвижениеСумма;
					Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
					
				КонецЕсли;
				
				Если ВестиУчетВаловойПрибыли Тогда
					Если ЭтоКлиент Тогда // нормальная реализация
						
						Если ЦенаСписания = 0 
							ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Количество  = Количество;
							
							Если ЦенаСписания = 0 
								ИЛИ ПредопределенныйТовар
								ИЛИ Количество = 0 Тогда
								
								Движение.Сумма 	= СуммаТов;
								Движение.ПроцентНаценки = 100;
								
							Иначе
								Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);
								Цена 			= СуммаТов / Количество;
								ЦенаПоКурсу 	= Цена;// ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, ДатаТ);
								Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
								Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
								
							КонецЕсли; 								
							
							Движение.Склад			= склад;
							Движение.Период 		= ДатаТ;
							Движение.Номенклатура 	= НоменклатураСостава;
							Движение.Комментарий 	= Комментарий;
						КонецЕсли;
						
					ИначеЕсли НЕ ЗначениеЗаполненоКлиентПоставщик Тогда // списание						
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
		ВидЦен 		= ДанныеЗаполнения.ВидЦен;
		Договор 	= ДанныеЗаполнения.Договор;
		Клиент 		= ДанныеЗаполнения.КлиентПоставщик;
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник 	= ДанныеЗаполнения.Сотрудник;
		ЗаказКлиента 	= ДанныеЗаполнения.Ссылка;
		ХранилищеДенег 	= ДанныеЗаполнения.ХранилищеДенег;
		ДатаОтправки 	= ДанныеЗаполнения.ДатаОтправки;
		СпособДоставки	= ДанныеЗаполнения.СпособДоставки;
		НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
		
		Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовара.ОСтроке;
			НоваяСтрока.ПроцентСкидки 	= ТекСтрокаТовара.ПроцентСкидки;
			НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
			НоваяСтрока.СуммаБезСкидки 	= ТекСтрокаТовара.СуммаБезСкидки;
			НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.Дата;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовара.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		ВидЦен 			= ДанныеЗаполнения.ВидЦен;
		Договор 		= ДанныеЗаполнения.Договор;
		ЗаказКлиента 	= ДанныеЗаполнения.ЗаказКлиента;
		Организация 	= ДанныеЗаполнения.Организация;
		Сотрудник 		= ДанныеЗаполнения.Сотрудник;
		ХранилищеДенег 	= ДанныеЗаполнения.ХранилищеДенег;
		НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
		
		Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовара.ОСтроке;
			НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.Дата;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовара.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		ВидЦен 			= ДанныеЗаполнения.ВидЦен;
		Договор 		= ДанныеЗаполнения.Договор;
		Организация 	= ДанныеЗаполнения.Организация;
		Сотрудник 		= ДанныеЗаполнения.Сотрудник;
		ХранилищеДенег 	= ДанныеЗаполнения.ХранилищеДенег;
		НаправлениеДеятельности = ДанныеЗаполнения.Направление;
		Клиент			= ДанныеЗаполнения.Клиент;
		
		Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовара.ОСтроке;
			НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.Дата;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
			
			НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
		
		Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовара.ОСтроке;
			НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.ДатаПрибытия;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовара.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
		
	Иначе		
		Если НЕ Отказ Тогда
			
			Движения.ВаловаяПрибыль.Записать();
			Движения.ОплатаПоЗаказам.Записать();
			Движения.Деньги.Записать();
			Движения.ЗаказыКлиентов.Записать();
			Движения.Продажи.Записать();
			Движения.РасчетыСПоставщиками.Записать();
			Движения.РасчетыСОтсрочкой.Записать();
			Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			Движения.Товары.Записать();
			Движения.Зарплата.Записать();
			Движения.ВыполнениеРаботСотрудниками.Записать();
			Движения.ЗадействованныеСредстваПредприятия.записать();
			Движения.НакоплениеНаВаучеры.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			Если Актуален Тогда
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
					Для Каждого СтрокаСредств Из ЗадействованныеСредства Цикл
						Движение = Движения.ЗадействованныеСредстваПредприятия.Добавить();	
						Движение.Количество		= СтрокаСредств.Коэффициент;
						Движение.Комментарий	= СтрокаСредств.ОСтроке;
						Движение.Период			= ?(ЗначениеЗаполнено(СтрокаСредств.ДатаНачала), СтрокаСредств.ДатаНачала, Дата);
						Движение.Средство		= СтрокаСредств.Средство;
						Движение.ДатаОкончания 	= СтрокаСредств.ДатаОкончания;
					КонецЦикла;
				КонецЕсли;
				
				ДвиженияСОтсрочкой = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					
					Если ЗначениеЗаполнено(ДатаПоступленияОбъектаРаботНаНашСклад) Тогда					
						Движение = Движения.Товары.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= ДатаПоступленияОбъектаРаботНаНашСклад ;
						Движение.Номенклатура 	= Номенклатура;
						Движение.Склад 			= СкладДляОбъектаВыполненияРабот;
						Движение.Количество 	= 1;
						Движение.Сумма 			= ОценочнаяСтоимостьОбъектаРабот;
						Движение.Комментарий	= КомментарийПриПоступленииОбъектаРабот;
						Движение.СерияНоменклатуры = СерияНоменклатуры;	
						Движение.СписаниеИлиОприходование = ИСТИНА;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДатаВыдачиОбъектаРаботКлиентуОбратно) Тогда					
						Движение = Движения.Товары.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Период 		= ДатаВыдачиОбъектаРаботКлиентуОбратно;
						Движение.Номенклатура 	= Номенклатура;
						Движение.Склад 			= СкладДляОбъектаВыполненияРабот;
						Движение.Количество 	= 1;
						Движение.Сумма 			= ОценочнаяСтоимостьОбъектаРабот;
						Движение.Комментарий	= КомментарийПриВыдачеОбъектаРабот;
						Движение.СерияНоменклатуры = СерияНоменклатуры;	
						Движение.СписаниеИлиОприходование = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
				
				ТовараНаСумму 	  = 0;
				Для Каждого ТекСтрокаТовара Из Товары Цикл
					СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовара.Сумма, , ТекСтрокаТовара.Валюта, ТекСтрокаТовара.Дата);			
					ТовараНаСумму = ТовараНаСумму + СуммаТов;	
				КонецЦикла;
				
				ТовараВКоличестве = Товары.Итог("Количество");
				ПоступилоДенег = 0;
				Для Каждого СтрокаОплаты Из Оплаты Цикл		
					ПоступилоДенег = ПоступилоДенег + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
				КонецЦикла;	 
				
				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Клиент);
				ЭтоКлиент						 = ЗначениеЗаполненоКлиентПоставщик;
				ВестиУчетЗаказовКлиентов 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
				
				ВестиУчетПродажСотрудников  = Актуален И ЭтоКлиент И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
				ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
				
				Движения.ЗаказыКлиентов.Записывать = ВестиУчетЗаказовКлиентов;
				
				Если НЕ ОтменитьПроверкиНаОтказ
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
					И ЗначениеЗаполнено(Договор) Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, ЭтоКлиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенег, Ссылка);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					
					ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
					ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");				
					ВестиУчетПоСкладам 			   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");				
					
					Если ИспользоватьСложныйМеханизмЦен
						И ЗначениеЗаполнено(ВидЦен)
						И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
						
						ВалютаЦены = ВидЦен.ВалютаЦены ;
					Иначе
						ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
					КонецЕсли;
					
					ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
					ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
					
					ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
					И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
					ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
					И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
					
					БылоПополнение = ЛОЖЬ;	
					
					Для Каждого ТекСтрокаТовара Из Товары Цикл
						
						Склад = ТекСтрокаТовара.Склад;
						ДатаТ = ТекСтрокаТовара.Дата;
						НоменклатураТ = ТекСтрокаТовара.Номенклатура;
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ВестиУчетПоСкладам
							И НЕ ЗначениеЗаполнено(Склад) Тогда
							
							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
							КонецЕсли;
							
							Отказ = ИСТИНА;						
						КонецЕсли;
						СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(, склад, датаТ, ОстаткиСледуетПроверять, НоменклатураТ);
						ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
						
						Если ОстаткиСледуетПроверять Тогда
							ГотоваяТаблицаОстатков = СтруктураТаблиц.ТаблицаОстатков;	
						КонецЕсли;	
						
						Если ВестиУчетПоСкладам  
							И ЗначениеЗаполнено(склад.СкладПополнения) Тогда
							
							ДоступенСкладПополнения = ИСТИНА;
							СкладПополнения 		= склад.СкладПополнения;
							
						Иначе
							ДоступенСкладПополнения = ЛОЖЬ;
						КонецЕсли;						
						
						СерияНоменклатурыТ = ТекСтрокаТовара.СерияНоменклатуры;
						Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
						КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
						КоличествоОстаток = 0;
						
						Если ВестиУчетЗаказовКлиентов Тогда
							
							ЗаказКлиентаКлиентПоставщик = Неопределено;
							Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
								ЗаказКлиентаКлиентПоставщик = ЗаказКлиента.КлиентПоставщик;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗаказКлиентаКлиентПоставщик) Тогда
								
								ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьРасход();
								ЗаписьРегистра.Активность 	= ИСТИНА;
								ЗаписьРегистра.Количество   = Количество;
								ЗаписьРегистра.Номенклатура = НоменклатураТ;
								ЗаписьРегистра.Период       = ДатаТ;
								ЗаписьРегистра.Клиент    	= ЗаказКлиентаКлиентПоставщик;
								
							КонецЕсли;							
						КонецЕсли;
						
						Если ОстаткиСледуетПроверять Тогда
							СтрокаОстаток = ГотоваяТаблицаОстатков.найти(номенклатура, "Номенклатура");
							
							Если НЕ СтрокаОстаток = Неопределено Тогда
								
								КоличествоОстаток 	  = СтрокаОстаток.КоличествоОстаток;
								СуммаОстаток 		  = СтрокаОстаток.СуммаОстаток;
								ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток ИЛИ СтрокаОстаток.Предопределенный;
								ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
								
							Иначе
								ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(НоменклатураТ);
								ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураТ);
								СуммаОстаток		  = 0;
								КоличествоОстаток 	  = 0;								
							КонецЕсли;			
							
						Иначе 			
							ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(НоменклатураТ);
							ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураТ);
							СуммаОстаток 		  = 0;
							КоличествоОстаток 	  = 0;							
						КонецЕсли;		
						
						Если НЕ ПредопределенныйТовар
							И НЕ ЭтоНабор Тогда
							
							Если ДоступенСкладПополнения Тогда // необходимость в до-оприходовании товаров Из склада пополнения
								Останется = КоличествоОстаток - Количество;
								
								Если останется < 0 Тогда
									
									НеобходимоПополнить = -Останется;
									
									СтруктураОстатка = ОбщийМодульСервер.ОстатокТовара(СкладПополнения, НоменклатураТ, датаТ, ИСТИНА);
									ОстатокНаСкладеПополнения = СтруктураОстатка.Количество;
									
									Если ОстатокНаСкладеПополнения >= НеобходимоПополнить Тогда
										переносить = НеобходимоПополнить;
									Иначе // остатка и там не хватает
										переносить = ОстатокНаСкладеПополнения;					
									КонецЕсли;
									
									Движение = Движения.Товары.Добавить();					
									Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
									Движение.Период 		= ДатаТ ;
									Движение.Номенклатура 	= НоменклатураТ;
									Движение.Склад 			= СкладПополнения;
									Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;									
									ЦенаСписания   			= ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураТ, переносить, датаТ, СтруктураОстатка, ,СкладПополнения, СерияНоменклатурыТ);
									СуммаСписания  			= ЦенаСписания * переносить;
									Движение.Количество 	= переносить;	
									Движение.Сумма 			= СуммаСписания;
									
									Движение = Движения.Товары.Добавить();
									Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
									Движение.Период 		= ДатаТ ;
									Движение.Номенклатура 	= НоменклатураТ;
									Движение.Склад 			= Склад;
									Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;
									Движение.Количество 	= переносить;					
									Движение.Сумма 			= СуммаСписания;
									
									КоличествоОстаток = КоличествоОстаток + переносить; 
									СуммаОстаток 	  = СуммаОстаток + СуммаСписания;
									
									БылоПополнение 	  = ИСТИНА;
									
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ОтменитьПроверкиНаОтказ
								И ОстаткиСледуетПроверять Тогда
								
								Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураТ, Количество, ДатаТ, ИСТИНА, КоличествоОстаток, Ссылка);	
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ Отказ Тогда
							
							сумма 	 = ТекСтрокаТовара.Сумма;
							цена 	 = ТекСтрокаТовара.цена;					
							СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ТекСтрокаТовара.Валюта, ДатаТ);			
							
							Если НЕ ЭтоНабор Тогда 				
								
								Если ПредопределенныйТовар Тогда
									
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураТ, Количество, ДатаТ, , ИСТИНА, Склад, СерияНоменклатурыТ);
									
								ИначеЕсли НЕ ТаблицаЦенСписания = Неопределено Тогда
									
									СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
									Если НЕ СтрокаЦеныСписания = Неопределено Тогда					
										ЦенаСписания = СтрокаЦеныСписания.Цена;					
									Иначе
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатураТ, ИСТИНА, датаТ, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
									КонецЕсли;
									
								Иначе
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатураТ, ИСТИНА, датаТ, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
								КонецЕсли;
								
								Если НЕ ПредопределенныйТовар Тогда									
									
									Движение = Движения.Товары.Добавить();					
									Движение.Номенклатура = НоменклатураТ;
									Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
									Движение.Период 	  = ДатаТ;
									Движение.Склад 		  = Склад;
									Движение.Комментарий  = КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;									
									Движение.Количество   = Количество;
									ДвижениеСумма 		  = ЦенаСписания * Количество;
									Движение.Сумма 		  = ДвижениеСумма;
									Движение.СписаниеИлиОприходование 	= НЕ ЗначениеЗаполненоКлиентПоставщик;	
									
								КонецЕсли;
								
								Если ВестиУчетВаловойПрибыли Тогда
									
									Если ЭтоКлиент Тогда // нормальная реализация
										
										Если ЦенаСписания = 0 
											ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
											
											Движение = Движения.ВаловаяПрибыль.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											Движение.Количество  = Количество;
											
											Если ЦенаСписания = 0 Тогда
												Движение.Сумма 			= СуммаТов;
												Движение.ПроцентНаценки = 100;
												
											Иначе
												Движение.Сумма 			= СуммаТов - (ЦенаСписания * Количество);
												ЦенаПоКурсу 			= ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, ДатаТ);
												Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
												Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
												
											КонецЕсли; 			
											
											Движение.Склад		  = Склад;
											Движение.Период 	  = ДатаТ;
											Движение.Номенклатура = НоменклатураТ;
											Движение.Комментарий  = КомментарийСтроки;
											
											Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
												Движение.СерияНоменклатуры = СерияНоменклатурыТ;
											КонецЕсли;								
										КонецЕсли;
										
									ИначеЕсли не ЗначениеЗаполненоКлиентПоставщик Тогда // списание
										// Движение = Движения.ВаловаяПрибыль.Добавить();
										// Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										// Движение.Количество  	= Количество;
										// Движение.Склад		= Склад;
										// Движение.Сумма 		= СуммаТов;
										// Движение.ПроцентНаценки = 100;
										// Движение.Период 		= ДатаТ;
										// Движение.Номенклатура = НоменклатураТ;
										// Движение.Комментарий	= КомментарийСтроки;
										
									КонецЕсли;
									
								КонецЕсли;
								
							Иначе // ЭтоНабор
								Отказ = ОбработатьДвиженияДляНабора(НоменклатураТ, Количество, СуммаТов, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ, ДатаТ, Склад);								
							КонецЕсли;
							
							Если НЕ Отказ
								И ЗначениеЗаполненоКлиентПоставщик Тогда
								
								Если ЭтоКлиент Тогда
									
									Движение = Движения.Продажи.Добавить();
									Движение.Клиент 	= Клиент;
									Движение.Склад		= Склад;
									Движение.Количество = Количество;
									Движение.Сумма 		= СуммаТов;							
									Движение.Договор	= Договор;
									Движение.Период 	= ДатаТ;
									Движение.Номенклатура = НоменклатураТ;
									Движение.Комментарий = КомментарийСтроки;
									
									Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
										И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда
										
										Движение.СерияНоменклатуры = СерияНоменклатурыТ;
									КонецЕсли;								
									
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
						Если ПредопределенныйТовар
							И ВестиУчетПродажСотрудников Тогда
							
							Движение = Движения.ВыполнениеРаботСотрудниками.Добавить();
							Движение.Количество 	= Количество;
							Движение.Комментарий 	= КомментарийСтроки;
							Движение.Номенклатура	= НоменклатураТ;
							Движение.Период			= ДатаТ;
							Движение.Сотрудник		= ?(ЗначениеЗаполнено(ТекСтрокаТовара.Сотрудник), ТекСтрокаТовара.Сотрудник, Сотрудник);
							Движение.Сумма			= СуммаТов;
							
						КонецЕсли;						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ ПоступилоДенег = 0 
					И ЗначениеЗаполнено(ЗаказКлиента)
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
					
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
					ЗаписьРегистра.Период	  = Дата;
					ЗаписьРегистра.Активность = ИСТИНА;
					ЗаписьРегистра.Заказ   	  = Ссылка;
					ЗаписьРегистра.Сумма 	  = ПоступилоДенег;// * Курс;
					
				КонецЕсли;
				
				Если НЕ Отказ
					И БылоПополнение Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
						И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада") + ": " + СкладПополнения, , Ссылка);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ Отказ 
					И ЗначениеЗаполненоКлиентПоставщик Тогда
					
					Если ЭтоКлиент Тогда
						
						Движение = Движения.Расчеты.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Клиент 	 = Клиент;			
						Движение.Договор 	 = Договор;
						Движение.Период 	 = Дата;
						Движение.Комментарий = Комментарий;					
						Движение.Сумма 		 = ТовараНаСумму;
						
						Если ДвиженияСОтсрочкой Тогда
							
							Движение = Движения.РасчетыСОтсрочкой.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = Клиент;			
							Движение.Договор 	 = Договор;
							Движение.Период 	 = Дата + ?(ЗначениеЗаполнено(Договор), ?(Договор.УстанавливаетСрокОплатыВДнях = 0, ДнейОтсрочки, Договор.УстанавливаетСрокОплатыВДнях) * 3600 * 24, 0);
							Движение.Комментарий = Комментарий;					
							Движение.Сумма 		 = ТовараНаСумму;	
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
				Если НЕ ПоступилоДенег = 0 Тогда
					Для Каждого Оплата Из Оплаты ЦИкл
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
							Если НЕ Оплата.ФормаОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
								Если ЗначениеЗаполнено(Оплата.ХранилищеДенег) Тогда
									ФормаОплаты = Оплата.ХранилищеДенег.ФормаОплаты;
								ИначеЕсли ЗначениеЗаполнено(Оплата.ФормаОплаты) Тогда
									ФормаОплаты = Оплата.ФормаОплаты;
								Иначе					
									ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
								КонецЕсли;
								
								Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Оплата.Сумма, Оплата.Дата, Оплата.ФормаОплаты, Оплата.Валюта, Оплата.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
								
								Если НЕ Отказ Тогда			
									
									Движение = Движения.Деньги.Добавить();
									Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
									Движение.Период 		= Оплата.Дата;
									Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
									Движение.Валюта 		= Оплата.Валюта;
									Движение.СуммаВВалюте 	= Оплата.Сумма;
									Движение.Сумма 			= Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
									Движение.ХранилищеДенег = Оплата.ХранилищеДенег;
									Движение.ФормаОплаты 	= Оплата.ФормаОплаты;	
									
								КонецЕсли;	
							КонецЕсли;					
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Оплата.Ваучер)
							И Оплата.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
							
							Движение = Движения.НакоплениеНаВаучеры.Добавить();
							Движение.Валюта			= Оплата.Валюта;
							Движение.Ваучер			= Оплата.Ваучер;
							Движение.ВидДвижения	= ВидДвиженияНакопленияРасход;
							Движение.Сумма			= Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
							Движение.Период			= Оплата.Дата;
							Движение.СуммаВВалюте	= Оплата.Сумма;
							Движение.Комментарий	= Оплата.ОСтроке;
							
						КонецЕсли;
						
						Если ЭтоКлиент Тогда
							
							Движение = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Клиент 	 = Клиент;					
							Движение.Договор	 = Договор;
							Движение.Период 	 = Оплата.Дата;
							Движение.Комментарий = Комментарий;						
							Движение.Сумма 		 = Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
							
							Если ДвиженияСОтсрочкой Тогда
								
								Движение = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Клиент 	 = Клиент;					
								Движение.Договор	 = Договор;
								Движение.Период 	 = Оплата.Дата;
								Движение.Комментарий = Комментарий;						
								Движение.Сумма 		 = Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ Отказ
					И НЕ расходы.Количество() = 0 Тогда			
					
					Для Каждого Расход Из Расходы Цикл
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
							
							Если ЗначениеЗаполнено(Расход.ХранилищеДенег) Тогда
								ФормаОплаты = Расход.ХранилищеДенег.ФормаОплаты;
							ИначеЕсли ЗначениеЗаполнено(Расход.ФормаОплаты) Тогда
								ФормаОплаты = Расход.ФормаОплаты;
							Иначе					
								ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
							КонецЕсли;
							
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Расход.Сумма, Расход.Дата, Расход.ФормаОплаты, Расход.Валюта, Расход.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
							
							Если НЕ Отказ Тогда										
								
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Расход.Дата;
								Движение.Статья 		= Расход.Статья;
								Движение.Валюта 		= Расход.Валюта;
								Движение.СуммаВВалюте 	= Расход.Сумма;
								Движение.Сумма 			= Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
								Движение.ХранилищеДенег = Расход.ХранилищеДенег;
								Движение.ФормаОплаты 	= Расход.ФормаОплаты;
								
							КонецЕсли;			             	
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Расход.Поставщик) Тогда						
							
							Движение = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = Расход.Поставщик; 					
							Движение.Договор	 = Расход.Договор;
							Движение.Период 	 = Расход.Дата;
							Движение.Комментарий = Расход.ОСтроке;
							Движение.Сумма 		 = Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
							
							Если ДвиженияСОтсрочкой Тогда
								
								Движение = Движения.РасчетыСПоставщиками.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = Расход.Поставщик;
								Движение.Договор	 = Расход.Договор;
								Движение.Период 	 = Расход.Дата + ?(ЗначениеЗаполнено(Расход.Договор), Расход.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0);
								Движение.Комментарий = Расход.ОСтроке;
								Движение.Сумма 		 = Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
								
							КонецЕсли;							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Расход.Сотрудник) Тогда
							
							Движение = Движения.Зарплата.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Валюта      	= Расход.Валюта;
							Движение.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;
							Движение.Комментарий 	= Расход.ОСтроке;
							Движение.ОписаниеНачисления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возмещение за расходы при выполнении работ для") + " " + Клиент + Расход.Дата;
							Движение.Период 		= расход.Дата;
							Движение.Сотрудник 		= расход.Сотрудник;
							Движение.Сумма		 	= Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
							Движение.СуммаВВалюте 	= Расход.Сумма;
							
						КонецЕсли;						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Отказ
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда
				
				ОтслеживатьВаучерыВКачествеНоменклатуры = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
				
				Для Каждого СтрокаВаучер Из Ваучеры Цикл
					Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
						
						Если СтрокаВаучер.ВаучерИзъят Тогда
							Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Контрагент) Тогда
								
								ОбъектВаучер = СтрокаВаучер.Ваучер.ПолучитьОбъект();
								ОбъектВаучер.Контрагент = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
								ОбъектВаучер.Записать();	
							КонецЕсли;
							
							Если ОтслеживатьВаучерыВКачествеНоменклатуры
								И ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Номенклатура) Тогда
								
								Движение = Движения.Товары.Добавить();					
								Движение.Номенклатура = СтрокаВаучер.Ваучер.Номенклатура;
								Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
								Движение.Период 	  = Дата;
								
								СкладДвижения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");
								Если НЕ ЗначениеЗаполнено(СкладДвижения) Тогда
									Если ЗначениеЗаполнено(СкладДляОбъектаВыполненияРабот) Тогда
										СкладДвижения = СкладДляОбъектаВыполненияРабот;
									Иначе
										СкладДвижения = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
									КонецЕсли;
								КонецЕсли;
								Движение.Склад 		  = СкладДвижения;
								Движение.Комментарий  = СтрокаВаучер.ОСтроке;
								Движение.Количество   = 1;
								Движение.Сумма 		  = 0;
								Движение.СписаниеИлиОприходование = ИСТИНА;
								
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;				
				
				Если ЗначениеЗаполнено(ВаучерНакопления) Тогда
					
					СуммаНакопления = 0;
					Для Каждого СтрокаТовара Из Товары Цикл
						СуммаНакопления = СуммаНакопления + ОбщийМодульТоварСервер.ВычислитьСуммуНакопления(ВаучерНакопления, СтрокаТовара.Номенклатура, СтрокаТовара.Сумма, СтрокаТовара.Склад, СтрокаТовара.Дата);
					КонецЦикла;
					
					Движение = Движения.НакоплениеНаВаучеры.Добавить();
					Движение.Валюта		  = ВаучерНакопления.Валюта;
					Движение.Ваучер		  = ВаучерНакопления;
					Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
					Движение.Период		  = Дата;
					Движение.Сумма		  = ОбщийМодульСервер.ПоКурсу(СуммаНакопления, ВаучерНакопления.Валюта, Валюта, Дата);
					Движение.СуммаВВалюте = СуммаНакопления;
					Движение.Комментарий  = Комментарий;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СерияНоменклатуры)
			И НЕ ЗначениеЗаполнено(СерияНоменклатуры.ДокументПриобретения) Тогда
			
			СерияОбъект = СерияНоменклатуры.ПолучитьОбъект();
			СерияОбъект.ДокументПриобретения = Ссылка;
			СерияОбъект.Записать();
		КонецЕсли;
		
		Движения.НакоплениеНаВаучеры.Записывать = НЕ Отказ;
		Движения.ОплатаПоЗаказам.Записывать  	= НЕ Отказ;
		Движения.ВаловаяПрибыль.Записывать   	= НЕ Отказ;
		Движения.ЗаказыКлиентов.Записывать   	= НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать	= НЕ Отказ;
		Движения.Деньги.Записывать    = НЕ Отказ;
		Движения.Расчеты.Записывать   = НЕ Отказ;
		Движения.Продажи.Записывать   = НЕ Отказ;
		Движения.Товары.Записывать    = НЕ Отказ;
		Движения.Зарплата.Записывать  = НЕ Отказ;
		Движения.РасчетыСПоставщиками.Записывать   			= НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать  = НЕ Отказ;	
		Движения.ВыполнениеРаботСотрудниками.Записывать   	= НЕ Отказ;	
		Движения.ЗадействованныеСредстваПредприятия.записывать = НЕ Отказ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Попытка // ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000691", , Отказ, ЭтотОбъект);	
		Исключение			
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			
			Если ЗначениеЗаполнено(СерияНоменклатуры)
				И СерияНоменклатуры.ДокументПриобретения = Ссылка Тогда
				
				СерияОбъект = СерияНоменклатуры.ПолучитьОбъект();
				СерияОбъект.ДокументПриобретения = Неопределено;
				СерияОбъект.Записать();
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
Если ОбменДанными.Загрузка Тогда 
     Возврат; 
 КонецЕсли; 
 
 Если НЕ Отказ
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА)
		И Модифицированность() 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		Если НЕ Актуален Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "ЗадействованныеСредства", "Средство", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("задействованных средств"));
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Если Актуален
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И ЗначениеЗаполнено(договор) Тогда
				
				Если НЕ ЗначениеЗаполнено(Клиент) Тогда
					Клиент = договор.КлиентПоставщик;
				ИначеЕсли НЕ Клиент = договор.КлиентПоставщик Тогда
					Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");	
				КонецЕсли;			
				
				Если ЗначениеЗаполнено(Договор) 
					И ЗначениеЗаполнено(Организация) 
					И НЕ Организация = договор.Организация Тогда
					
					Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

#КонецЕсли