//sza150109-1645 НЧ
//sza141112-0134 валовая
//sza140722-0059 склад в продажи
//sza140701-1314  
//sza140624-1351  
//sza140206-0029 
Функция   обработатьдвижениядлянабора(НоменклатураТ, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ, ДатаТ, склад) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Если НЕ Сторный Тогда
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	Иначе
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из НоменклатураТ.Состав Цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			отказ = обработатьдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ, ДатаТ, Склад);
		Иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ОтменитьПроверкиНаОтказ
				И НЕ ПредопределенныйТовар Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, ДатаТ, ИСТИНА, , Ссылка);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СуммаТов = СуммаЭлемента;//ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, Валюта, , ДатаТ);
				
				ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, ДатаТ, , ПредопределенныйТовар);
				
				Если НЕ ПредопределенныйТовар Тогда
					Движение = Движения.Товары.Добавить();
					
					Движение.Номенклатура = НоменклатураСостава;
					Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
					Движение.Период 	  = ДатаТ;
					Движение.Склад 		  = Склад;		
					Движение.Комментарий  = Комментарий;
					Движение.Количество   = Количество;
					ДвижениеСумма 		  = ЦенаСписания * Количество;
					Движение.Сумма 		  = ДвижениеСумма;
					Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
				КонецЕсли;
				
				Если ВестиУчетВаловойПрибыли Тогда
					Если ЭтоКлиент Тогда //нормальная реализация
						
						Если ЦенаСписания = 0 
							ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Количество  = Количество;
							
							Если ЦенаСписания = 0 
								ИЛИ ПредопределенныйТовар
								ИЛИ Количество = 0 Тогда
								
								Движение.Сумма 	= СуммаТов;
								Движение.ПроцентНаценки = 100;
								
							Иначе
								Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);
								Цена 			= СуммаТов / Количество;
								ЦенаПоКурсу 	= Цена;//ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, ДатаТ);
								Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
								Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
								
							КонецЕсли; 								
							
							Движение.Склад			= склад;
							Движение.Период 		= ДатаТ;
							Движение.Номенклатура 	= НоменклатураСостава;
							Движение.Комментарий 	= Комментарий;
						КонецЕсли;
						
					ИначеЕсли НЕ ЗначениеЗаполненоКлиентПоставщик Тогда //списание						
						//Движение = Движения.ВаловаяПрибыль.Добавить();
						//Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						//Движение.Сумма 		= СуммаТов;
						//Движение.Количество  	= Количество;
						//Движение.ПроцентНаценки = 100;
						//Движение.Период 		= ДатаТ;
						//Движение.Склад		= Склад;
						//Движение.Номенклатура = НоменклатураСостава;
						//Движение.Комментарий 	= Комментарий;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = ДанныеЗаполнения.Ссылка;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
		ВидЦен 		= ДанныеЗаполнения.ВидЦен;
		Договор 	= ДанныеЗаполнения.Договор;
		Клиент 		= ДанныеЗаполнения.КлиентПоставщик;
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник 	= ДанныеЗаполнения.Сотрудник;
		ЗаказКлиента 	= ДанныеЗаполнения.Ссылка;
		ХранилищеДенег 	= ДанныеЗаполнения.ХранилищеДенег;
		ДатаОтправки 	= ДанныеЗаполнения.ДатаОтправки;
		СпособДоставки	= ДанныеЗаполнения.СпособДоставки; 
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.ПроцентСкидки 	= ТекСтрокаТовары.ПроцентСкидки;
			НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаБезСкидки 	= ТекСтрокаТовары.СуммаБезСкидки;
			НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.Дата;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		ВидЦен 			= ДанныеЗаполнения.ВидЦен;
		Договор 		= ДанныеЗаполнения.Договор;
		ЗаказКлиента 	= ДанныеЗаполнения.ЗаказКлиента;
		Организация 	= ДанныеЗаполнения.Организация;
		Сотрудник 		= ДанныеЗаполнения.Сотрудник;
		ХранилищеДенег 	= ДанныеЗаполнения.ХранилищеДенег;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.Дата;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		ВидЦен = ДанныеЗаполнения.ВидЦен;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ОСтроке 		= ТекСтрокаТовары.ОСтроке;
			НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
			НоваяСтрока.Дата 			= ДанныеЗаполнения.ДатаПрибытия;
			НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовары.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрокаТовары.ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				НоваяСтрока.Валюта = ВидЦен.ВалютаЦены;
			Иначе
				НоваяСтрока.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			НоваяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(НоваяСтрока.Валюта, НоваяСтрока.Дата);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
	Иначе
		
		Если НЕ Отказ Тогда
			
			движения.ВаловаяПрибыль.Записать();
			движения.ОплатаПоЗаказам.Записать();
			движения.Деньги.Записать();
			движения.ЗаказыКлиентов.Записать();
			движения.Продажи.Записать();
			движения.РасчетыСПоставщиками.Записать();
			движения.РасчетыСОтсрочкой.Записать();
			движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
			движения.Товары.Записать();
			движения.Зарплата.Записать();
			движения.ВыполнениеРаботСотрудниками.Записать();
			движения.ЗадействованныеСредстваПредприятия.записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			Если Актуален Тогда
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
					Для Каждого СтрокаСредств Из ЗадействованныеСредства Цикл
						Движение = Движения.ЗадействованныеСредстваПредприятия.Добавить();	
						Движение.Количество		= СтрокаСредств.Коэффициент;
						Движение.Комментарий	= СтрокаСредств.ОСтроке;
						Движение.Период			= ?(ЗначениеЗаполнено(СтрокаСредств.ДатаНачала), СтрокаСредств.ДатаНачала, Дата);
						Движение.Средство		= СтрокаСредств.Средство;
						Движение.ДатаОкончания 	= СтрокаСредств.ДатаОкончания;
					КонецЦикла;
				КонецЕсли;
				
				ДвиженияСОтсрочкой = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					
					Если ЗначениеЗаполнено(ДатаПоступленияОбъектаРаботНаНашСклад) Тогда					
						Движение = Движения.Товары.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= ДатаПоступленияОбъектаРаботНаНашСклад ;
						Движение.Номенклатура 	= Номенклатура;
						Движение.Склад 			= СкладДляОбъектаВыполненияРабот;
						Движение.Количество 	= 1;
						Движение.Сумма 			= ОценочнаяСтоимостьОбъектаРабот;
						Движение.Комментарий	= КомментарийПриПоступленииОбъектаРабот;
						Движение.СерияНоменклатуры = СерияНоменклатуры;	
						Движение.СписаниеИлиОприходование = ИСТИНА;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДатаВыдачиОбъектаРаботКлиентуОбратно) Тогда					
						Движение = Движения.Товары.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Период 		= ДатаВыдачиОбъектаРаботКлиентуОбратно;
						Движение.Номенклатура 	= Номенклатура;
						Движение.Склад 			= СкладДляОбъектаВыполненияРабот;
						Движение.Количество 	= 1;
						Движение.Сумма 			= ОценочнаяСтоимостьОбъектаРабот;
						Движение.Комментарий	= КомментарийПриВыдачеОбъектаРабот;
						Движение.СерияНоменклатуры = СерияНоменклатуры;	
						Движение.СписаниеИлиОприходование = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
				
				ТовараНаСумму 	  = 0;
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					СуммаТов = ОбщийМодульСервер.ПоКурсу(ТекСтрокаТовары.Сумма, , ТекСтрокаТовары.Валюта, ТекСтрокаТовары.Дата);			
					ТовараНаСумму = ТовараНаСумму + СуммаТов;	
				КонецЦикла;
				
				ТовараВКоличестве = Товары.Итог("Количество");
				ПоступилоДенег = 0;
				Для Каждого СтрокаОплаты Из Оплаты Цикл		
					ПоступилоДенег = ПоступилоДенег + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
				КонецЦикла;	 
				
				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Клиент);
				ЭтоКлиент						 = ЗначениеЗаполненоКлиентПоставщик;
				ВестиУчетЗаказовКлиентов 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
				
				ВестиУчетПродажСотрудников  = Актуален И ЭтоКлиент и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
				ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
				
				Движения.ЗаказыКлиентов.Записывать = ВестиУчетЗаказовКлиентов;
				
				Если НЕ ОтменитьПроверкиНаОтказ
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
					И ЗначениеЗаполнено(Договор) Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, ЭтоКлиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенег, Ссылка);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					
					ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
					ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");				
					ВестиУчетПоСкладам 			   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");				
					
					Если ИспользоватьСложныйМеханизмЦен
						И ЗначениеЗаполнено(видцен)
						И ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
						
						ВалютаЦены = видцен.ВалютаЦены ;
					Иначе
						ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
					КонецЕсли;
					
					ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
					ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
					
					ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
					И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
					ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
					И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
					
					былопополнение     = ЛОЖЬ;	
					
					Для Каждого ТекСтрокаТовары Из Товары Цикл
						
						Склад = ТекСтрокаТовары.Склад;
						ДатаТ = ТекСтрокаТовары.Дата;
						НоменклатураТ = ТекСтрокаТовары.Номенклатура;
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ВестиУчетПоСкладам
							И НЕ ЗначениеЗаполнено(Склад) Тогда
							
							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								//Сообщение = Новый СообщениеПользователю;
								//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!");
								//Сообщение.Поле 	= "Склад";
								//Сообщение.Сообщить();	
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
							КонецЕсли;
							
							Отказ = ИСТИНА;						
						КонецЕсли;
						СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(, склад, датаТ, ОстаткиСледуетПроверять, НоменклатураТ);
						ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
						
						Если ОстаткиСледуетПроверять тогда
							ГТ = СтруктураТаблиц.ТаблицаОстатков;	
						КонецЕсли;	
						
						Если ВестиУчетПоСкладам  
							И ЗначениеЗаполнено(склад.СкладПополнения) Тогда
							
							ДоступенСкладПополнения = ИСТИНА;
							СкладПополнения 		= склад.СкладПополнения;
							
						Иначе
							ДоступенСкладПополнения = ЛОЖЬ;
						КонецЕсли;			
						
						
						СерияНоменклатурыТ = ТекСтрокаТовары.СерияНоменклатуры;
						Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовары.ЕдиницаИзмерения), ТекСтрокаТовары.ЕдиницаИзмерения.Количество * ТекСтрокаТовары.Количество, ТекСтрокаТовары.Количество);
						КомментарийСтроки = ?(ЗначениеЗаполнено(текстрокатовары.ОСтроке), текстрокатовары.ОСтроке, Комментарий);
						КоличествоОстаток = 0;
						
						Если ВестиУчетЗаказовКлиентов тогда
							
							ЗаказКлиентаКлиентПоставщик = Неопределено;
							Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
								ЗаказКлиентаКлиентПоставщик = ЗаказКлиента.КлиентПоставщик;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗаказКлиентаКлиентПоставщик) Тогда
								ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьРасход();
								ЗаписьРегистра.Активность 	= ИСТИНА;
								ЗаписьРегистра.Количество   = Количество;
								ЗаписьРегистра.Номенклатура = НоменклатураТ;
								ЗаписьРегистра.Период       = ДатаТ;
								ЗаписьРегистра.Клиент    	= ЗаказКлиентаКлиентПоставщик;
							КонецЕсли;
							
						КонецЕсли;
						
						Если ОстаткиСледуетПроверять тогда
							СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
							
							Если НЕ СтрокаОстаток = Неопределено Тогда
								
								КоличествоОстаток 	  = СтрокаОстаток.КоличествоОстаток;
								СуммаОстаток 		  = СтрокаОстаток.СуммаОстаток;
								ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
								ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
								
							Иначе
								ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(НоменклатураТ);
								ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураТ);
								СуммаОстаток		  = 0;
								КоличествоОстаток 	  = 0;
								
							КонецЕсли;			
							
						Иначе 			
							ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(НоменклатураТ);
							ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураТ);
							СуммаОстаток 		  = 0;
							КоличествоОстаток 	  = 0;
							
						КонецЕсли;		
						
						Если НЕ ПредопределенныйТовар
							И НЕ этонабор тогда
							
							Если ДоступенСкладПополнения  тогда //необходимость в дооприходовании товаров из склада пополнения
								Останется = КоличествоОстаток - Количество;
								
								Если останется < 0 Тогда
									
									необходимопополнить = -Останется;
									
									СтруктураОстатка = ОбщийМодульСервер.ОстатокТовара(СкладПополнения, НоменклатураТ, датаТ, ИСТИНА);
									ОстатокНаСкладеПополнения = СтруктураОстатка.Количество;
									
									Если ОстатокНаСкладеПополнения >= необходимопополнить Тогда
										переносить = необходимопополнить;
									Иначе //остатка и там не хватает
										переносить = ОстатокНаСкладеПополнения;					
									КонецЕсли;
									
									Движение = Движения.Товары.Добавить();					
									Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
									Движение.Период 		= ДатаТ ;
									Движение.Номенклатура 	= НоменклатураТ;
									Движение.Склад 			= СкладПополнения;
									Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;									
									ЦенаСписания   			= ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураТ, переносить, датаТ, СтруктураОстатка);
									СуммаСписания  			= ЦенаСписания * переносить;
									Движение.Количество 	= переносить;	
									Движение.Сумма 			= СуммаСписания;
									
									Движение = Движения.Товары.Добавить();
									Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
									Движение.Период 		= ДатаТ ;
									Движение.Номенклатура 	= НоменклатураТ;
									Движение.Склад 			= Склад;
									Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;
									Движение.Количество 	= переносить;					
									Движение.Сумма 			= СуммаСписания;
									
									КоличествоОстаток = КоличествоОстаток + переносить; 
									СуммаОстаток 	  = СуммаОстаток + СуммаСписания;
									
									БылоПополнение 	  = ИСТИНА;
									
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ОтменитьПроверкиНаОтказ
								И ОстаткиСледуетПроверять тогда
								
								Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураТ, Количество, ДатаТ, ИСТИНА, КоличествоОстаток, Ссылка);	
							КонецЕсли;
							
						КонецЕсли;
						
						Если НЕ Отказ Тогда
							
							сумма 	 = ТекСтрокаТовары.Сумма;
							цена 	 = ТекСтрокаТовары.цена;					
							СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ТекСтрокаТовары.Валюта, ДатаТ);			
							
							Если НЕ ЭтоНабор Тогда 				
								
								Если ПредопределенныйТовар Тогда
									
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураТ, Количество, ДатаТ, , ИСТИНА);
									
								ИначеЕсли НЕ ТаблицаЦенСписания = Неопределено тогда
									
									СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
									Если НЕ СтрокаЦеныСписания = Неопределено Тогда					
										ЦенаСписания = СтрокаЦеныСписания.Цена;					
									Иначе
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатураТ, ИСТИНА, датаТ, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовары.ЕдиницаИзмерения);
									КонецЕсли;
									
								Иначе
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатураТ, ИСТИНА, датаТ, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовары.ЕдиницаИзмерения);
								КонецЕсли;
								
								Если НЕ ПредопределенныйТовар Тогда									
									Движение = Движения.Товары.Добавить();					
									Движение.Номенклатура = НоменклатураТ;
									Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
									Движение.Период 	  = ДатаТ;
									Движение.Склад 		  = Склад;
									Движение.Комментарий  = КомментарийСтроки;
									Движение.СерияНоменклатуры = СерияНоменклатурыТ;									
									Движение.Количество   = Количество;
									ДвижениеСумма 		  = ЦенаСписания * Количество;
									Движение.Сумма 		  = ДвижениеСумма;
									Движение.СписаниеИлиОприходование 	= НЕ ЗначениеЗаполненоКлиентПоставщик;	
								КонецЕсли;
								
								Если ВестиУчетВаловойПрибыли Тогда
									
									Если ЭтоКлиент Тогда //нормальная реализация
										
										Если ЦенаСписания = 0 
											ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
											
											Движение = Движения.ВаловаяПрибыль.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											Движение.Количество  = Количество;
											
											Если ЦенаСписания = 0 Тогда
												Движение.Сумма 			= СуммаТов;
												Движение.ПроцентНаценки = 100;
												
											Иначе
												Движение.Сумма 			= СуммаТов - (ЦенаСписания * Количество);
												ЦенаПоКурсу 			= ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, ДатаТ);
												Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
												Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
												
											КонецЕсли; 			
											
											Движение.Склад		  = Склад;
											Движение.Период 	  = ДатаТ;
											Движение.Номенклатура = НоменклатураТ;
											Движение.Комментарий  = КомментарийСтроки;
											
										КонецЕсли;
										
									ИначеЕсли не ЗначениеЗаполненоКлиентПоставщик Тогда //списание
										//Движение = Движения.ВаловаяПрибыль.Добавить();
										//Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										//Движение.Количество  	= Количество;
										//Движение.Склад		= Склад;
										//Движение.Сумма 		= СуммаТов;
										//Движение.ПроцентНаценки = 100;
										//Движение.Период 		= ДатаТ;
										//Движение.Номенклатура = НоменклатураТ;
										//Движение.Комментарий	= КомментарийСтроки;
										
									КонецЕсли;
									
								КонецЕсли;
								
							Иначе //этоНабор
								отказ = обработатьдвижениядлянабора(НоменклатураТ, Количество, СуммаТов, ВестиУчетВаловойПрибыли, ЭтоКлиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ, ДатаТ, Склад);
								
							КонецЕсли;
							
							Если НЕ отказ
								И ЗначениеЗаполненоКлиентПоставщик Тогда
								
								Если ЭтоКлиент Тогда
									Движение = Движения.Продажи.Добавить();
									Движение.Клиент 	= Клиент;
									Движение.Склад		= Склад;
									Движение.Количество = Количество;
									Движение.Сумма 		= СуммаТов;							
									Движение.Договор	= Договор;
									Движение.Период 	= ДатаТ;
									Движение.Номенклатура = НоменклатураТ;
									Движение.Комментарий = КомментарийСтроки;
								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;
						
						Если ПредопределенныйТовар
							И ВестиУчетПродажСотрудников Тогда
							
							Движение = Движения.ВыполнениеРаботСотрудниками.Добавить();
							Движение.Количество 	= Количество;
							Движение.Комментарий 	= КомментарийСтроки;
							Движение.Номенклатура	= НоменклатураТ;
							Движение.Период			= ДатаТ;
							Движение.Сотрудник		= ?(ЗначениеЗаполнено(ТекСтрокаТовары.Сотрудник), ТекСтрокаТовары.Сотрудник, Сотрудник);
							Движение.Сумма			= СуммаТов;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ ПоступилоДенег = 0 
					И ЗначениеЗаполнено(ЗаказКлиента)
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
					
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
					ЗаписьРегистра.Период	  = Дата;
					ЗаписьРегистра.Активность = ИСТИНА;
					ЗаписьРегистра.Заказ   	  = Ссылка;
					ЗаписьРегистра.Сумма 	  = ПоступилоДенег;// * Курс;
					
				КонецЕсли;
				
				Если НЕ отказ
					И былопополнение Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
						И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада") + ": " + СкладПополнения, , Ссылка);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ отказ 
					И ЗначениеЗаполненоКлиентПоставщик Тогда
					
					Если ЭтоКлиент тогда
						Движение = Движения.Расчеты.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Клиент 	 = Клиент;			
						Движение.Договор 	 = Договор;
						Движение.Период 	 = Дата;
						Движение.Комментарий = Комментарий;					
						Движение.Сумма 		 = ТовараНаСумму;
						
						Если ДвиженияСОтсрочкой Тогда
							Движение = Движения.РасчетыСОтсрочкой.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = Клиент;			
							Движение.Договор 	 = Договор;
							Движение.Период 	 = Дата + ?(ЗначениеЗаполнено(Договор), ?(Договор.УстанавливаетСрокОплатыВДнях = 0, ДнейОтсрочки, Договор.УстанавливаетСрокОплатыВДнях) * 3600 * 24, 0);
							Движение.Комментарий = Комментарий;					
							Движение.Сумма 		 = ТовараНаСумму;	
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
				Если НЕ ПоступилоДенег = 0 Тогда
					Для Каждого Оплата из Оплаты ЦИкл
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
							
							Если ЗначениеЗаполнено(Оплата.ХранилищеДенег) Тогда
								ФормаОплаты = Оплата.ХранилищеДенег.ФормаОплаты;
							ИначеЕсли ЗначениеЗаполнено(Оплата.ФормаОплаты) Тогда
								ФормаОплаты = Оплата.ФормаОплаты;
							Иначе					
								ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
							КонецЕсли;
							
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Оплата.Сумма, Оплата.Дата, Оплата.ФормаОплаты, Оплата.Валюта, Оплата.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
							
							Если НЕ Отказ Тогда			
								
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
								Движение.Период 		= Оплата.Дата;
								Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
								Движение.Валюта 		= Оплата.Валюта;
								Движение.СуммаВВалюте 	= Оплата.Сумма;
								Движение.Сумма 			= Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
								Движение.ХранилищеДенег = Оплата.ХранилищеДенег;
								Движение.ФормаОплаты 	= Оплата.ФормаОплаты;	
								
							КонецЕсли;			             	
						КонецЕсли;
						
						Если ЭтоКлиент тогда
							
							Движение = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Клиент 	 = Клиент;					
							Движение.Договор	 = Договор;
							Движение.Период 	 = Оплата.Дата;
							Движение.Комментарий = Комментарий;						
							Движение.Сумма 		 = Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
							
							Если ДвиженияСОтсрочкой Тогда
								Движение = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Клиент 	 = Клиент;					
								Движение.Договор	 = Договор;
								Движение.Период 	 = Оплата.Дата;
								Движение.Комментарий = Комментарий;						
								Движение.Сумма 		 = Оплата.Сумма * ?(Оплата.Курс = 0, 1, Оплата.Курс);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ отказ и
					НЕ расходы.Количество() = 0 Тогда			
					
					Для Каждого Расход из Расходы ЦИкл
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
							
							Если ЗначениеЗаполнено(Расход.ХранилищеДенег) Тогда
								ФормаОплаты = Расход.ХранилищеДенег.ФормаОплаты;
							ИначеЕсли ЗначениеЗаполнено(Расход.ФормаОплаты) Тогда
								ФормаОплаты = Расход.ФормаОплаты;
							Иначе					
								ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
							КонецЕсли;
							
							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(Расход.Сумма, Расход.Дата, Расход.ФормаОплаты, Расход.Валюта, Расход.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
							
							Если НЕ Отказ Тогда										
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Расход.Дата;
								Движение.Статья 		= Расход.Статья;
								Движение.Валюта 		= Расход.Валюта;
								Движение.СуммаВВалюте 	= Расход.Сумма;
								Движение.Сумма 			= Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
								Движение.ХранилищеДенег = Расход.ХранилищеДенег;
								Движение.ФормаОплаты 	= Расход.ФормаОплаты;								
							КонецЕсли;			             	
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Расход.Поставщик) Тогда						
							Движение = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = Расход.Поставщик; 					
							Движение.Договор	 = Расход.Договор;
							Движение.Период 	 = Расход.Дата;
							Движение.Комментарий = Расход.ОСтроке;
							Движение.Сумма 		 = Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
							
							Если ДвиженияСОтсрочкой Тогда
								Движение = Движения.РасчетыСПоставщиками.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = Расход.Поставщик;
								Движение.Договор	 = Расход.Договор;
								Движение.Период 	 = Расход.Дата + ?(ЗначениеЗаполнено(Расход.Договор), Расход.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0);
								Движение.Комментарий = Расход.ОСтроке;
								Движение.Сумма 		 = Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
							КонецЕсли;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Расход.Сотрудник) Тогда
							Движение = Движения.Зарплата.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Валюта      	= Расход.Валюта;
							Движение.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;
							Движение.Комментарий 	= Расход.ОСтроке;
							Движение.ОписаниеНачисления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возмещение за расходы при выполнении работ для ") + " " + Клиент + Расход.Дата;
							Движение.Период 		= расход.Дата;
							Движение.Сотрудник 		= расход.Сотрудник;
							Движение.Сумма		 	= Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
							Движение.СуммаВВалюте 	= Расход.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движения.ОплатаПоЗаказам.Записывать  = НЕ Отказ;
		Движения.ВаловаяПрибыль.Записывать   = НЕ Отказ;
		Движения.ЗаказыКлиентов.Записывать   = НЕ Отказ;
		Движения.РасчетыСОтсрочкой.Записывать= НЕ Отказ;
		Движения.Деньги.Записывать    = НЕ Отказ;
		Движения.Расчеты.Записывать   = НЕ Отказ;
		Движения.Продажи.Записывать   = НЕ Отказ;
		Движения.Товары.Записывать    = НЕ Отказ;
		Движения.Зарплата.Записывать  = НЕ Отказ;
		Движения.РасчетыСПоставщиками.Записывать   			= НЕ Отказ;
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать  = НЕ Отказ;	
		Движения.ВыполнениеРаботСотрудниками.Записывать   	= НЕ Отказ;	
		Движения.ЗадействованныеСредстваПредприятия.записывать = НЕ Отказ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ отказ 
		И Модифицированность() 
		И РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		//если ТовараВКоличестве 	= 0
		//	И ТовараНаСумму 	= 0
		//	И ПоступилоДенег 	= 0
		//	И РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
		//	
		//	РежимЗаписи = РежимЗаписиДокумента.Запись;
		//КонецЕсли;	
		Если НЕ Актуален Тогда
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	//если не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") Тогда
	//	
	//	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
	//		Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ПроцентСкидки", "Количество, Сумма, СуммаБезСкидки");
	//	Иначе
	//		Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена", "Количество, Сумма");	
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//МассивПустыхСтрок  = Новый массив;
	//массивноменклатуры = Новый массив;
	//
	//для каждого СтрокаТовары из товары цикл
	//	
	//	Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
	//		МассивПустыхСтрок.Добавить(СтрокаТовары);
	//		
	//	Иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
	//		
	//		Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
	//			//Сообщение = Новый СообщениеПользователю;
	//			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На строке №") + " " + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:" + СтрокаТовары.Номенклатура);
	//			//Сообщение.Сообщить();                                               	
	//			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура:" + СтрокаТовары.Номенклатура), , Ссылка);
	//		КонецЕсли;
	//		
	//	Иначе
	//		массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
	//		
	//	КонецЕсли;                                    	
	//КонецЦикла;
	//
	//для каждого СтрокаТовары из МассивПустыхСтрок цикл
	//	товары.Удалить(СтрокаТовары);	
	//КонецЦикла;	
	//
	//		ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
	//
	//Если ЗначениеЗаполнено(ВидЦен)
	//	И ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
	//	
	//	ТовараНаСумму 		= ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
	//иначе
	//	ТовараНаСумму 		= товары.Итог("Сумма");
	//КонецЕсли;
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если Актуален
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И ЗначениеЗаполнено(договор) Тогда
			
			Если НЕ ЗначениеЗаполнено(Клиент) Тогда
				Клиент = договор.КлиентПоставщик;
			ИначеЕСли НЕ Клиент = договор.КлиентПоставщик Тогда
				Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");	
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				И ЗначениеЗаполнено(Организация) 
				И НЕ Организация = договор.Организация Тогда
				
				Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда		
		Попытка //ЭтотОбъект
			Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000691", , Отказ, ЭтотОбъект);	
		Исключение			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
