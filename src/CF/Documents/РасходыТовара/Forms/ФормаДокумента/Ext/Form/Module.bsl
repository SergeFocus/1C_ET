// sza150703-1546 выбор серии с ост
// sza150626-0002 
// sza150612-0303 вауч
// sza150605-1708 
// sza150111-0238 НЧ
// sza141220-1322 обнов дан контр
// sza141120-1537 НеПредупреждатьЕслиКлиентНеДоплатилИлиПереплатил
// sza141118-1401 фикс
// sza140916-0349 ответственный за доставку
// sza140821-1131 ошибка отсрочки
// sza140718-1457 закрепл хран денегэ
// sza140709-1726  подбор при блокировке
// sza140611-1630  
// sza130902-0532
&НаКлиенте
Перем ТекСтр;

&НаКлиенте
Процедура Адрес1ПриИзменении(Элемент)	
	Адрес1ПриИзмененииНаСервере();		
КонецПроцедуры

&НаСервере
Процедура Адрес1ПриИзмененииНаСервере()
	
	КлиентПоставщик = Объект.КлиентПоставщик;
	Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
		
		ПравоРедакции = ОбщийМодульСервисСервер.ПроверитьПравоРедакции("000600", КлиентПоставщик);
		
		Если ПравоРедакции 
			И (не КлиентПоставщик.Адрес   = Объект.Адрес
			ИЛИ не КлиентПоставщик.Телефон = Объект.Телефон) Тогда
			
			КлиентПоставщикОбъект = КлиентПоставщик.ПолучитьОбъект();
			КлиентПоставщикОбъект.Адрес   = Объект.Адрес;
			КлиентПоставщикОбъект.Телефон = Объект.Телефон;
			КлиентПоставщикОбъект.Записать();
			Объект.КлиентПоставщик = КлиентПоставщикОбъект.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Валюта1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяВалюта = Объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяВалюта = Объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	
	Если НЕ ТекущаяВалюта = Объект.Валюта Тогда
		ПересчитатьСуммуПриСменеВалюты();          	
	КонецЕсли;
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	Элементы.Курс.Видимость  = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	Элементы.Курс1.Видимость = Элементы.Курс.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если НЕ ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта);
	КонецЕсли;
	
	Если НЕ ТекущаяВалюта = Объект.Валюта тогда
		ПересчитатьСуммуПриСменеВалюты();          	
	КонецЕсли;
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	Элементы.Курс.Видимость  = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	Элементы.Курс1.Видимость = Элементы.Курс.Видимость;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводНовойСтрокиОплаты(ТекущаяСтрока)
	
	ТекущаяСтрока.ХранилищеДенег = Объект.ХранилищеДенег;
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		ТекущаяСтрока.ФормаОплаты = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "ФормаОплаты");
		ТекущаяСтрока.Валюта = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта");
	Иначе
		ТекущаяСтрока.ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
		ТекущаяСтрока.Валюта = Объект.Валюта;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Валюта) Тогда
		ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	СтруктураДляВВода.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	СтруктураДляВВода.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) Тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			Если НЕ СтрокаТовараСтруктура = Неопределено тогда
				СтруктураПараметров.Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 	 = СтрокаТовараСтруктура.Количество;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		
		Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Товары1;
		Иначе
			ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаклиенте(ТекКод);
	КонецЕсли;                              	
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)
	
	ВзятьСуммуПоДокументуНаСервере();
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере(Знач СУчетомДолга = ЛОЖЬ)
	
	Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
		
		Объект.Оплаты.Очистить();
		СтрокаОплаты = Объект.Оплаты.Добавить();
		Если ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			СтрокаОплаты.Валюта = Объект.ВидЦен.ВалютаЦены;
		ИначеЕсли ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			СтрокаОплаты.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
		Иначе			
			СтрокаОплаты.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		СтрокаОплаты.формаоплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
		Если Не Значениезаполнено(СтрокаОплаты.формаоплаты) Тогда
			СтрокаОплаты.формаоплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
		КонецЕсли;
		
		СтрокаОплаты.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ХранилищеДенегДляРабочегоМестаОператораКассы");
		Если Не Значениезаполнено(СтрокаОплаты.ХранилищеДенег) тогда
			СтрокаОплаты.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОплаты.ХранилищеДенег)
			И (НЕ СтрокаОплаты.Валюта = СтрокаОплаты.ХранилищеДенег.Валюта
			ИЛИ НЕ СтрокаОплаты.формаоплаты = СтрокаОплаты.ХранилищеДенег.формаоплаты) Тогда
			
			СтрокаОплаты.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(СтрокаОплаты.Валюта, СтрокаОплаты.формаоплаты);
		КонецЕсли;
		
		Если ВестиУчетДенегВНесколькихХранилищах 
			И ЗначениеЗаполнено(СтрокаОплаты.ХранилищеДенег) Тогда
			
			СтрокаОплаты.формаоплаты = СтрокаОплаты.ХранилищеДенег.ФормаОплаты;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ХранилищеДенег) Тогда
			СтрокаОплаты.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");	
		КонецЕсли;
		
		СтрокаОплаты.Курс  = ОбщийМодульПовтор.ПолучитьТекущийКурс(СтрокаОплаты.Валюта, Объект.Дата);
		Сумма = Объект.Товары.Итог("Сумма");
		
		СтрокаОплаты.Сумма = Сумма;
		Если СУчетомДолга 
			И НЕ ТекущийДолг = 0 Тогда
			
			Сумма = Сумма + ТекущийДолг;	
		КонецЕсли;
		СтрокаОплаты.Сумма = Сумма;
		
		Если НЕ Объект.ПоступилоДенег = Сумма Тогда
			Объект.ПоступилоДенег = Сумма;
		КонецЕсли;
		
		ОбновитьСуммуОплаты();		
		
	Иначе
		ВалютаЦены = ?(ЗначениеЗаполнено(Объект.Валюта), Объект.Валюта, ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
		
		Если ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
			
			ВалютаЦены = Объект.ВидЦен.ВалютаЦены;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				
				Объект.Валюта = ВалютаЦены;
				Объект.Курс   = ОбщийМодульПовтор.ПолучитьТекущийКурс(Объект.Валюта, Объект.Дата);
				
				Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
					И НЕ Объект.ХранилищеДенег.Валюта = Объект.Валюта Тогда
					
					Объект.ХранилищеДенег.Валюта = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Сумма = Объект.Товары.Итог("Сумма");
		Сумма = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Объект.Дата, Объект.Курс);
		
		Если СУчетомДолга 
			И НЕ ТекущийДолг = 0 Тогда
			
			Сумма = Сумма + ТекущийДолг;	
		КонецЕсли;
		
		Сумма = ОбщийМодульСервер.ПоКурсу(Сумма, Объект.Валюта, , Объект.Дата, Объект.Курс);
		
		Если НЕ Объект.ПоступилоДенег = Сумма Тогда
			Объект.ПоступилоДенег = Сумма;
		КонецЕсли;
		
		РасчетПоступилоДенегПоКурсуНаСервере();
	КонецЕсли;
	
КонецПроцедуры     

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)
	
	ПоказатьДолгКлиентаПоставщика();
	ВзятьСуммуПоДокументуНаСервере(ИСТИНА);
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента();
	
	Элементы.ТекущийДолг.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий долг") + " (" + формат(ОбщийМодульКлиент.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";
	Элементы.ТекущийДолг1.Заголовок = Элементы.ТекущийДолг.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент) 	
	ВидЦенПриИзмененииНаСервере(ЛОЖЬ);
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере(Знач НеМенятьЦеныТаблицы = ЛОЖЬ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		ВалютаПродаж  = Объект.ВидЦен.ВалютаЦены;
		Если НЕ НеМенятьЦеныТаблицы Тогда
			Объект.Валюта = ВалютаПродаж;    	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НеМенятьЦеныТаблицы Тогда
		Для Каждого СтрокаТовара ИЗ Объект.Товары Цикл
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
				Если НЕ СтрокаТовара.СуммаБезСкидки = 0 Тогда
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
				Иначе
					СтрокаТовара.Сумма = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
			КонецЕсли;
		КонецЦикла;
		
		ТоварыПриИзмененииНаСервере(ЛОЖЬ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		" " + Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("К ОПЛАТЕ") + ": " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		"    " + Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СДАЧА") + ": " + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГО") + ": " + Формат(Объект.ТовараНаСумму, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"ClearText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"DisplayText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При использовании дисплея покупателя произошла ошибка.
			|Дополнительное описание: %ДополнительноеОписание%");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			ВыходныеПараметры[1]);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	Элементы.Курс.Видимость 	= НЕ Объект.Курс = 1 и ИспользоватьУчетВалют;
	Элементы.Курс1.Видимость 	= Элементы.Курс.Видимость;
	
	Если ИспользуетсяДатаКомиссии Тогда
		ОбновитьДатуКомиссии();
	КонецЕсли;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеЭлементыСостава(Знач Номенклатура, Состав, Знач Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		Иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.РасходыТовара"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот документ. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураВх, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач МножительКоличества = 1)
	
	СерияНоменклатуры = Неопределено;
	ЕдиницаИзмерения  = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура = НоменклатураВх;
		Количество 	 = множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх);
		Цена 		 = 0;
		ЦенаЕсть 	 = ЛОЖЬ;
		
	Иначе
		Номенклатура = НоменклатураВх.Номенклатура;
		Количество 	 = НоменклатураВх.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх.Номенклатура);
		НоменклатураВх.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		НоменклатураВх.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		Цена 		 = 0;
		ЦенаЕсть 	 = НоменклатураВх.Свойство("Цена", Цена);
		
	КонецЕсли;
	
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) и ЗначениеЗаполнено(СерияНоменклатуры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();				
			СтрокаТовара.Номенклатура 	  = Номенклатура;
			СтрокаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость 	= ИСТИНА;
				Элементы.ТоварыСерияНоменклатуры1.Видимость = ИСТИНА;	
			КонецЕсли;
			
		Иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;		
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
		Если ТоварВедетсяПоСериям Тогда			
			СтрокаТовара.Количество = 1;
			СтрокаТовара.серияНоменклатуры = серияНоменклатуры;				
		КонецЕсли;
		
		Если ЦенаЕсть Тогда
			СтрокаТовара.Цена = Цена;
		Иначе			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;		
		
		Если ИспользоватьСкидки Тогда
			СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
		КонецЕсли;
		
		пересчитатьСтрокуНаСервере(СтрокаТовара);	
		
		Если НЕ НеСтановитсяНаЭтуСтроку Тогда
			Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;			
		КонецЕсли;
		
	ИначеЕсли НЕ НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Знач Номенклатура, Количество = 1)
	
	Результат = Неопределено;
	
	Состав = Новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		Если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		Иначе
			ДобавитьПозициюНоменклатуры(строкасостава, ИСТИНА, Количество);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат Результат;
	
конецФункции

&НаСервере
Процедура ДобавлениеЧастогоСпроса(Знач Позиция)
	ДобавитьПозициюНоменклатуры(ОбщийМодульПовтор.ПолучитьНоменклатуруБыстрогоСпроса(Позиция));
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда // насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				
				Если НЕ Цена = СтрокаТовара.Цена Тогда
					СтрокаТовара.ПроцентСкидки 	= 0;
					СтрокаТовара.Цена 			= Цена;
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
					СтрокаТовара.Сумма 			= СтрокаТовара.СуммаБезСкидки;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;				
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
		
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, , , СтрокаТовара.Цена, Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
			
			Если ИспользоватьСкидки тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
				СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
				
				Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
				Иначе
					СтрокаТовара.Сумма = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;		
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	
	Элементы.ГруппаАдресТелефон.Видимость 	 = РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации И ЗначениеЗаполненоКлиентПоставщик;
	Элементы.ГруппаАдресТелефон1.Видимость 	 = РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации И ЗначениеЗаполненоКлиентПоставщик;
	
	ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") И Объект.ПередачаДляКомиссионнойТорговли;
	Элементы.ДатаОтчетаПоКомиссии.Видимость  = ИспользуетсяДатаКомиссии И ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли;
	Элементы.ДатаОтчетаПоКомиссии1.Видимость = ИспользуетсяДатаКомиссии И ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли;
	
	ЭтоКлиент = ЛОЖЬ;
	
	Если ЗначениеЗаполненоКлиентПоставщик Тогда
		
		ЭтоКлиент = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоКлиент Тогда
			
			Элементы.ПартияПриобретения.Видимость 	= ЛОЖЬ;
			Элементы.ПартияПриобретения1.Видимость 	= ЛОЖЬ;
			
			Если Объект.ПоступилоДенег = 0 Тогда
				Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
					Если НЕ ТекущийТипДокумента = 15 тогда
						
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передача товара");	
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передать товар и закрыть");				
						Исключение // нет прав
						КонецПопытки;
						ТекущийТипДокумента = 15;           	
					КонецЕсли;	
				Иначе
					Если НЕ ТекущийТипДокумента = 5 тогда
						
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдача товара");	
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдать товар и закрыть");				
						Исключение // нет прав
						КонецПопытки;
						ТекущийТипДокумента = 5;           	
					КонецЕсли;	
				КонецЕсли;
				
			Иначе
				Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
					Если НЕ ТекущийТипДокумента = 14 тогда
						
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На Комиссию");	
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передать на комиссию и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ТекущийТипДокумента = 14;	
					КонецЕсли;	
				Иначе
					Если НЕ ТекущийТипДокумента = 4 тогда
						
						ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация товара");	
						Попытка
							Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продать товар и закрыть");
						Исключение // нет прав
						КонецПопытки;
						ТекущийТипДокумента = 4;	
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;			
			
		Иначе
			Элементы.ПартияПриобретения.Видимость 	= ИСТИНА;
			Элементы.ПартияПриобретения1.Видимость 	= ИСТИНА;
			
			Если Объект.ПоступилоДенег = 0 Тогда
				Если НЕ ТекущийТипДокумента = 3 тогда					
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отдать поставщику и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдача Поставщику");	
					ТекущийТипДокумента = 3;	
				КонецЕсли;	
				
			Иначеесли не ТекущийТипДокумента = 2 тогда				
				Попытка
					Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вернуть поставщику и закрыть");
				Исключение // нет прав
				КонецПопытки;
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат Поставщику");	
				ТекущийТипДокумента = 2;
				
			КонецЕсли;			
			
		КонецЕсли;
		
	Иначе
		Элементы.ПартияПриобретения.Видимость 	= ЛОЖЬ;
		Элементы.ПартияПриобретения1.Видимость 	= ЛОЖЬ;
		ЭтоКлиент = ЛОЖЬ;
		
		Если Объект.ПоступилоДенег = 0 Тогда
			Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
				Если НЕ ТекущийТипДокумента = 11 тогда
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комиссование");	
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комиссовать товар и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ТекущийТипДокумента = 11;
				КонецЕсли;
				
			Иначе
				Если НЕ ТекущийТипДокумента = 1 тогда			
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара");	
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ТекущийТипДокумента = 1;	
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			
			Если ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли Тогда
				Если НЕ ТекущийТипДокумента = 1 тогда 	
					
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комиссование за деньги");	
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комиссовать, принять деньги и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ТекущийТипДокумента = 1;	
				КонецЕсли;
				
			Иначе
				Если НЕ ТекущийТипДокумента = 6 тогда 	
					
					ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара за деньги");	
					Попытка
						Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать товар, принять деньги и закрыть");
					Исключение // нет прав
					КонецПопытки;
					ТекущийТипДокумента = 6;	
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ЗаказКлиента.Видимость  = учетЗаказовКлиентам И ЭтоКлиент;
	Элементы.ЗаказКлиента1.Видимость = учетЗаказовКлиентам И ЭтоКлиент;
		
	Попытка
		Элементы.ФормаПровестиИЗакрыть1.Заголовок = Элементы.ФормаПровестиИЗакрыть.Заголовок;
	Исключение // нет прав
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОповещенПриИзменении(Элемент)
	
	Если Объект.КлиентОповещен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОповещения) Тогда
		
		Объект.ДатаОповещения = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);
	КонецЕсли;
	
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикПриИзменении(Элемент)   
	ПриСменеКонтрагента();	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере(Знач НеПересчитыватьТаблицу = ЛОЖЬ)
	
	НеФизик = УчетПоКлиентам И НЕ Объект.КлиентПоставщик = ФизическоеЛицо;
	Элементы.ЧастныйПокупатель.Видимость 	= НеФизик;
	Элементы.ЧастныйПокупатель1.Видимость 	= НеФизик;
	
	Элементы.ДатаРождения.Видимость 		= ЛОЖЬ;
	Элементы.ДатаРождения1.Видимость 		= ЛОЖЬ;
	Элементы.ДатаРожденияСкидка.Видимость 	= ЛОЖЬ;
	Элементы.ДатаРожденияСкидка1.Видимость 	= ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		Элементы.ДобавитьНовогоКлиента.Видимость   = ЛОЖЬ;
		Элементы.ДобавитьНовогоКлиента1.Видимость  = ЛОЖЬ;
		Элементы.ДанныеКонтрагента.Видимость 	   = ИСТИНА;
		Элементы.ГруппаДанныхКонтрагента.Видимость = ИСТИНА;
		
		ПроверитьДатуРождения();
		
		Если НЕ НеПересчитыватьТаблицу Тогда
			Если ИспользоватьУчетВалют
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
				
				Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Объект.Склад)
				ИЛИ Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"))
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.Склад) Тогда
				
				Объект.Склад = Объект.КлиентПоставщик.Склад;
			КонецЕсли;
			
			Если ИспользоватьСкидки Тогда
				Для Каждого СтрокаТовара из Объект.Товары Цикл
					СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
					
					пересчитатьСтрокуНаСервере(СтрокаТовара);
				КонецЦикла;		
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И НЕ ЗначениеЗаполнено(Объект.Договор) 
				ИЛИ не Объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;	
			
		КонецЕсли;
		
		Если РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации ТОгда
			Если НЕ ЗначениеЗаполнено(Объект.Адрес) Тогда			
				Объект.Адрес   = Объект.КлиентПоставщик.Адрес;
			КонецЕсли; 	
			Если НЕ ЗначениеЗаполнено(Объект.Телефон) Тогда			
				Объект.Телефон = Объект.КлиентПоставщик.Телефон; // толькоосн
			КонецЕсли;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.СпособДоставки)
			И НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
			
			Объект.СпособДоставки = Объект.КлиентПоставщик.СпособДоставки;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
		
	Иначе
		Элементы.ДобавитьНовогоКлиента.Видимость   = ИСТИНА;
		Элементы.ДобавитьНовогоКлиента1.Видимость  = ИСТИНА;
		Элементы.ДанныеКонтрагента.Видимость 	   = ЛОЖЬ;
		Элементы.ГруппаДанныхКонтрагента.Видимость = ЛОЖЬ;
		
		ПроцентСкидки = 0;
		Если НЕ НеПересчитыватьТаблицу
			И РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации Тогда
			
			Если НЕ ПустаяСтрока(Объект.Адрес) Тогда
				Объект.Адрес = "";	
			КонецЕсли;
			Если НЕ ПустаяСтрока(Объект.Телефон) Тогда
				Объект.Телефон = "";	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДатуОтсрочки();	
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	Элементы.Курс.Видимость 	= не Объект.Курс = 1 и ИспользоватьУчетВалют;
	Элементы.Курс1.Видимость 	= Элементы.Курс.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкидкуДляВсехСтрок(Команда)
	
	РазмерСкидки = 0;
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("НазначитьСкидкуДляВсехСтрокЗавершение", ЭтаФорма, Новый Структура("РазмерСкидки", РазмерСкидки)), РазмерСкидки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите процент скидки") + "%: ", 10,4 );
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкидкуДляВсехСтрокЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	РазмерСкидки = ?(Число = Неопределено, ДополнительныеПараметры.РазмерСкидки, Число);
	
	Если (Число <> Неопределено) Тогда
		
		НазначитьСкидкуДляВсехСтрокНаСервере(РазмерСкидки);                                                                        	
	КонецЕсли;
	ТоварыПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура НазначитьСкидкуДляВсехСтрокНаСервере(Знач РазмерСкидки)
	
	Для Каждого СтрокаТовара Из Объект.товары Цикл		
		СтрокаТовара.процентСкидки = РазмерСкидки;
		ПересчитатьСтрокуНаСервере(СтрокаТовара);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуКомиссии()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты")
		И ЗначениеЗаполнено(Объект.КлиентПоставщик.СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров) Тогда
		
		СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров = Объект.КлиентПоставщик.СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров;
	Иначе
		СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваровПоУмолчаниюВДнях");	
	КонецЕсли;
	
	Объект.ДатаОтчетаПоКомиссии = Объект.Дата + СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров * 3600 * 24;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОтсрочки()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.ДатаОтсрочки = Объект.Дата + Объект.КлиентПоставщик.СрокОплатыВДняхПоУмолчанию * 3600 * 24;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Если Объект.Договор.УстанавливаетСрокОплатыВДнях = 0 Тогда
				Элементы.ДатаОтсрочки.Доступность = ИСТИНА;
			Иначе
				Объект.ДатаОтсрочки = Объект.Дата + Объект.Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24;
				Элементы.ДатаОтсрочки.Доступность = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Знач Валюта, Знач Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;	
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСуммуОплаты()
	РасчетПоступилоДенегПоКурсуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЧастыйСпрос()
	
	
	ТоварыЧастогоСпроса = ОбщийМодульПовтор.ПолучитьСписокНоменклатурыБыстрогоСпроса(ЛОЖЬ).Выгрузить();
	
	Если НЕ ТоварыЧастогоСпроса.Количество() = 0 тогда
		ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса");
		
		Если ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса Тогда
			элементыТоварыЧастогоСпроса  = Элементы.ГруппаКомандНоменклатурыЧастогоСпроса;
			элементыТоварыЧастогоСпроса1 = Элементы.ГруппаКомандНоменклатурыЧастогоСпроса1;
			
			НоваяДекорация = Элементы.найти("ЗаголовокЧастогоСпроса");
			Если НоваяДекорация = Неопределено тогда
				НоваяДекорация = Элементы.Добавить("ЗаголовокЧастогоСпроса", тип("ДекорацияФормы"), элементыТоварыЧастогоСпроса);
				НоваяДекорация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Частый спрос") + ": ";
			КонецЕсли;
			
			НоваяДекорация = Элементы.найти("ЗаголовокЧастогоСпроса1");
			Если НоваяДекорация = Неопределено тогда
				НоваяДекорация = Элементы.Добавить("ЗаголовокЧастогоСпроса1", тип("ДекорацияФормы"), элементыТоварыЧастогоСпроса1);
				НоваяДекорация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Частый спрос") + ": ";
			КонецЕсли;
			элементыТоварыЧастогоСпроса.Видимость  = ИСТИНА;
			элементыТоварыЧастогоСпроса1.Видимость = ИСТИНА;
			
		Иначе
			элементыТоварыЧастогоСпроса  = Элементы.ТоварыЧастогоСпроса;
			элементыТоварыЧастогоСпроса1 = Элементы.ТоварыЧастогоСпроса1;
		КонецЕсли;	
		
		Для Каждого товар ИЗ ТоварыЧастогоСпроса Цикл
			
			позиция 		= товар.позиция;
			комментарий 	= товар.комментарий;
			номенклатура 	= товар.номенклатура;
			
			КомандаФормы  = команды.Найти("К" + позиция);
			Если КомандаФормы  = Неопределено Тогда
				
				КомандаФормы  = Команды.Добавить("К" + позиция);
				КомандаФормы.Действие = "ПроцедураОбработкиНажатия";
				Если позиция < 10 тогда
					КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["_" + СокрЛП(позиция)], , ИСТИНА, ИСТИНА);	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(комментарий) Тогда
					КомандаФормы.Подсказка = комментарий;
				Иначе
					КомандаФормы.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавить") + " " + номенклатура;
				КонецЕсли;
				
				НоваяКнопка = Элементы.Найти("КФ" + позиция);
				Если НоваяКнопка = Неопределено тогда
					НоваяКнопка = Элементы.Добавить("КФ" + позиция, тип("КнопкаФормы"), элементыТоварыЧастогоСпроса);		
					НоваяКнопка.Заголовок = СокрЛП(номенклатура);
					НоваяКнопка.ИмяКоманды = "К" + позиция;		
				КонецЕсли;
				
				НоваяКнопка = Элементы.Найти("КБ" + позиция);
				Если НоваяКнопка = Неопределено тогда
					НоваяКнопка = Элементы.Добавить("КБ" + позиция, тип("КнопкаФормы"), элементыТоварыЧастогоСпроса1);		
					НоваяКнопка.Заголовок = СокрЛП(номенклатура);
					НоваяКнопка.ИмяКоманды = "К" + позиция;			
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "001802") Тогда		
		
		Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			Элементы.ТоварыВводШтрихКода.Видимость 				= ЛОЖЬ;
			Элементы.ВзятьСуммуПоДокументу.Видимость 			= ЛОЖЬ;
			Элементы.ТоварыВводСКоличеством.Видимость 			= ЛОЖЬ;
			Попытка
				Элементы.ФормаЗакрыть.КнопкаПоУмолчанию 		= ИСТИНА;
				Элементы.ФормаПровестиИЗакрыть.Видимость 		= ЛОЖЬ;
				Элементы.ФормаПровести.Видимость 				= ЛОЖЬ;
				Элементы.РаспечататьПровестиИЗакрыть.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать и закрыть");
				Элементы.ФормаЗаписать.Видимость 				= ЛОЖЬ;
			Исключение // нет прав
			КонецПопытки;
			
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок.Видимость  = ЛОЖЬ;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса.Видимость = ЛОЖЬ;
			Элементы.ТоварыЧастогоСпроса.Видимость 				= ЛОЖЬ;
			Элементы.ЧастныйПокупатель.Видимость 				= ЛОЖЬ;
			Элементы.ОплатаВзятьСуммуПоДокументу.Видимость 		= ЛОЖЬ;
			Элементы.ГруппаКомандНоменклатурыЧастогоСпроса.Видимость = ЛОЖЬ;
			Элементы.ТоварыПодборНоменклатуры.Видимость 		= ЛОЖЬ;
			Элементы.ДобавитьНовогоКлиента.Видимость 			= ЛОЖЬ;
			Элементы.ОбновитьДанныеКонтрагента.Видимость		= ЛОЖЬ;
			Элементы.ПогаситьВаучер.Видимость	 				= ЛОЖЬ;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость	= ЛОЖЬ;
			Элементы.СформироватьТекстПредметаСделки.Видимость  = ЛОЖЬ;
			
		Иначе
			Элементы.ТоварыВводШтрихКода1.Видимость 		= ЛОЖЬ;
			Элементы.ВзятьСуммуПоДокументу1.Видимость 		= ЛОЖЬ;
			Элементы.ТоварыВводСКоличеством1.Видимость 		= ЛОЖЬ;
			Попытка
				Элементы.ФормаЗакрыть1.КнопкаПоУмолчанию 		= ИСТИНА;
				Элементы.ФормаПровестиИЗакрыть1.Видимость 		= ЛОЖЬ;
				Элементы.ФормаПровести1.Видимость 				= ЛОЖЬ;
				Элементы.РаспечататьПровестиИЗакрыть1.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать и закрыть");
				Элементы.ФормаЗаписать1.Видимость 				= ЛОЖЬ;
			Исключение // нет прав
			КонецПопытки;
			
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок1.Видимость 	= ЛОЖЬ;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса1.Видимость 	= ЛОЖЬ;
			Элементы.ГруппаКомандыТаблицы.Видимость 			= ЛОЖЬ;
			Элементы.ЧастныйПокупатель1.Видимость 				= ЛОЖЬ;
			Элементы.Оплата1ВзятьСуммуПоДокументу.Видимость 	= ЛОЖЬ;
			Элементы.ГруппаКомандНоменклатурыЧастогоСпроса1.Видимость = ЛОЖЬ;
			Элементы.Товары1ПодборНоменклатуры.Видимость 		= ЛОЖЬ;
			Элементы.ДобавитьНовогоКлиента1.Видимость 			= ЛОЖЬ;
			Элементы.ОбновитьДанныеКонтрагента1.Видимость		= ЛОЖЬ;
			Элементы.ПогаситьВаучер1.Видимость	 				= ЛОЖЬ;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента1.Видимость	= ЛОЖЬ;
			Элементы.СформироватьТекстПредметаСделки1.Видимость = ЛОЖЬ;
			
		КонецЕсли;
		
	Иначе
		Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			Элементы.ТоварыВводШтрихКода.Видимость 				= ИСТИНА;
			Элементы.ВзятьСуммуПоДокументу.Видимость 			= ИСТИНА;
			Элементы.ТоварыВводСКоличеством.Видимость 			= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
			Попытка
				Элементы.ФормаПровестиИЗакрыть.Видимость 		= ИСТИНА;
				Элементы.ФормаПровести.Видимость 				= ИСТИНА;
				Элементы.ФормаЗаписать.Видимость 				= ИСТИНА;
				Элементы.РаспечататьПровестиИЗакрыть.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать, провести и закрыть");
				Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию= ИСТИНА;
			Исключение // нет прав
			КонецПопытки;
			
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок.Видимость  = ИСТИНА;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса.Видимость = ИСТИНА;
			Элементы.ТоварыЧастогоСпроса.Видимость 				= ИСТИНА;
			Элементы.ЧастныйПокупатель.Видимость 				= УчетПоКлиентам и не Объект.КлиентПоставщик = ФизическоеЛицо;// Справочники.Клиенты.ФизическоеЛицо;
			Элементы.ОплатаВзятьСуммуПоДокументу.Видимость 		= ИСТИНА;	
			Элементы.ГруппаКомандНоменклатурыЧастогоСпроса.Видимость = ИСТИНА;
			Элементы.ТоварыПодборНоменклатуры.Видимость 		= ВключитьМеханизмПодбораНоменклатуры;
			Элементы.ДобавитьНовогоКлиента.Видимость 			= ИСТИНА;
			Элементы.ОбновитьДанныеКонтрагента.Видимость		= ИСТИНА;
			Элементы.ПогаситьВаучер.Видимость	 				= ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента.Видимость	= НЕ ТекущийДолг = 0 и ЗначениеЗаполнено(Объект.КлиентПоставщик) и (УчетПоКлиентам или УчетПоПоставщикам);
			Элементы.СформироватьТекстПредметаСделки.Видимость  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
			
		Иначе
			Элементы.ТоварыВводШтрихКода1.Видимость 			= ИСТИНА;
			Элементы.ВзятьСуммуПоДокументу1.Видимость 			= ИСТИНА;
			Элементы.ТоварыВводСКоличеством1.Видимость 			= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
			Попытка
				Элементы.ФормаПровестиИЗакрыть1.Видимость 		= ИСТИНА;
				Элементы.ФормаПровести1.Видимость 				= ИСТИНА;
				Элементы.ФормаЗаписать1.Видимость 				= ИСТИНА;
				Элементы.РаспечататьПровестиИЗакрыть1.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать, провести и закрыть");
				Элементы.ФормаПровестиИЗакрыть1.КнопкаПоУмолчанию 	= ИСТИНА;		
			Исключение // нет прав
			КонецПопытки;
			
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок1.Видимость  = ИСТИНА;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса1.Видимость = ИСТИНА;
			Элементы.ГруппаКомандыТаблицы.Видимость 			= ИСТИНА;
			Элементы.ЧастныйПокупатель1.Видимость 				= УчетПоКлиентам и не Объект.КлиентПоставщик = ФизическоеЛицо;// Справочники.Клиенты.ФизическоеЛицо;
			Элементы.Оплата1ВзятьСуммуПоДокументу.Видимость 	= ИСТИНА;
			Элементы.ГруппаКомандНоменклатурыЧастогоСпроса1.Видимость = ИСТИНА;
			Элементы.Товары1ПодборНоменклатуры.Видимость 		= ВключитьМеханизмПодбораНоменклатуры;
			Элементы.ДобавитьНовогоКлиента1.Видимость 			= ИСТИНА;
			Элементы.ОбновитьДанныеКонтрагента1.Видимость		= ИСТИНА;
			Элементы.ПогаситьВаучер1.Видимость	 				= ИспользоватьВаучеры И Объект.Ваучеры.Количество() = 0;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента1.Видимость	= НЕ ТекущийДолг = 0 И ЗначениеЗаполнено(Объект.КлиентПоставщик) И (УчетПоКлиентам или УчетПоПоставщикам);
			Элементы.СформироватьТекстПредметаСделки1.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
			
		КонецЕсли;
		
		ТекущийТипДокумента = 0;
		ИзменитьВидДокумента();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьОтказДвиженияДляНабора(Знач Номенклатура, Знач КоличествоВх, Знач Сумма, Знач ВестиУчетВаловойПрибыли, Знач клиент, Знач ЗначениеЗаполненоКлиентПоставщик, отказ, Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка) // для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	Для Каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			отказ = обработатьОТКАЗдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		Иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Объект.Склад, НоменклатураСостава, Количество, Объект.Дата, ИСТИНА, , Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	РезультатСтруктура = ОбработатьПолученныйШКНаСервере(ТекКод);		
	
	Если РезультатСтруктура.Результат = Неопределено Тогда // 0 - ничего
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) И НЕ ДокументЗаблокирован;
		Элементы.разблокироватьсканер.видимость 	= СканерЗаблокирован;
		Элементы.разблокироватьсканер1.видимость 	= СканерЗаблокирован;
		
	ИначеЕсли РезультатСтруктура.Результат = 1 Тогда
		ПриИзмененииНоменклатуры(ТекСтр);
	ИначеЕсли РезультатСтруктура.Результат = 2 Тогда
		ПриСменеКонтрагента();
	ИначеЕсли РезультатСтруктура.Результат = 3 Тогда
		ОрганизацияПриИзмененииНаКлиенте();
	ИначеЕсли РезультатСтруктура.Результат = 4 Тогда
		//СотрудникПриИзмененииНаСервере();
	ИначеЕсли РезультатСтруктура.Результат = 5 Тогда
		ВыяснитьОПогашенииНакопления(РезультатСтруктура.Ответ);
	КонецЕсли;	
	
	Если НЕ РезультатСтруктура.Результат = Неопределено Тогда
		ПересчитатьДокументНаКлиенте();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	РезультатСтруктура = Новый Структура("Результат", Неопределено);
	
	Если НЕ ДокументЗаблокирован тогда
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Объект.Дата);
		
		Если ЗначениеЗаполнено(РезультатОбработки.Номенклатура) Тогда
			ДобавитьПозициюНоменклатуры(РезультатОбработки);
			СтрокаДисплеяПокупателя = СокрЛП(РезультатОбработки.Номенклатура);	
			РезультатСтруктура.Результат = 1;
			
		Иначе		
			ОстановитьПоиск = ЛОЖЬ;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Сотрудник = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 4;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.КлиентПоставщик = РезультатОбработки;					
					КлиентПриИзмененииНаСервере();
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 2;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				РезультатОбработки = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Объект.Организация = РезультатОбработки;
					ОстановитьПоиск = ИСТИНА;
					РезультатСтруктура.Результат = 3;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ИспользоватьВаучеры Тогда
				
				РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
				
				Если ЗначениеЗаполнено(РезультатОбработки) Тогда
					Результат = ДобавитьПрименитьВаучер(РезультатОбработки);
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден") + " (" + ТекКод + ").");
				РезультатСтруктура.Результат = Неопределено;
			КонецЕсли;
		КонецЕсли; 	 	
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураОбработкиНажатия(Элемент)
	
	Позиция = число(стрзаменить(Элемент.Имя, "К", ""));
	ДобавлениеЧастогоСпроса(Позиция);
	
КонецПроцедуры  

&НаКлиенте
Процедура Оплата1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВводНовойСтрокиОплаты(Элементы.Оплаты1.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВалюта1ПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты1.ТекущиеДанные;
	ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
	ТекущаяСтрока.сумма = ТекущаяСтрока.сумма / ?(ТекущаяСтрока.Курс = 0, 1, ТекущаяСтрока.Курс);
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьСуммуОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплаты.ТекущиеДанные;
	ТекущаяСтрока.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
	ТекущаяСтрока.сумма = ТекущаяСтрока.сумма / ?(ТекущаяСтрока.Курс = 0, 1, ТекущаяСтрока.Курс);
	
	Если Не ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ХранилищеДенег, "Валюта") = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьСуммуОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКурсПриИзменении(Элемент)
	ОбновитьСуммуОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоступилоДенегПриИзменении(Элемент)
	ОбновитьСуммуОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВводНовойСтрокиОплаты(Элементы.Оплаты.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаХранилищеДенег1ПриИзменении(Элемент)
	ОплатаХранилищеДенегПриИзмененииНаСервере(Элементы.Оплаты1.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаХранилищеДенегПриИзменении(Элемент)
	ОплатаХранилищеДенегПриИзмененииНаСервере(Элементы.Оплаты.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ОплатаХранилищеДенегПриИзмененииНаСервере(Знач ТекСтрока)	
	
	ТекущаяСтрока = Объект.Оплаты[ТекСтрока];
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ХранилищеДенег) Тогда
		ТекущаяСтрока.ФормаОплаты = ТекущаяСтрока.ХранилищеДенег.ФормаОплаты;
		ТекущаяСтрока.Валюта	  = ТекущаяСтрока.ХранилищеДенег.Валюта;
		ТекущаяСтрока.Курс        = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущаяСтрока.Валюта, Объект.Дата);
		
		ОбновитьСуммуОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьЦенуПоследнейПокупки(Знач Номенклатура)
	
	ОпределитьЦенуПоследнейПокупки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Количество,
	|	Закупки.Сумма
	|ИЗ РегистрНакопления.Закупки КАК Закупки
	|ГДЕ Закупки.Номенклатура = &Номенклатура
	|	И Закупки.Поставщик = &Поставщик
	|УПОРЯДОЧИТЬ ПО Закупки.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Поставщик", Объект.КлиентПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = ВыборкаДетальныеЗаписи.Количество;
			Если Количество = 0 Тогда
				ОпределитьЦенуПоследнейПокупки = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				ОпределитьЦенуПоследнейПокупки = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		КонецЦикла;                            	
	КонецЕсли;
	
	Возврат ОпределитьЦенуПоследнейПокупки;
	
КонецФункции // ОпределитьЦенуПоследнейПокупки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаКлиенте();
КонецПроцедуры	

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаКлиенте()
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор)
				И ЗначениеЗаполнено(Объект.Клиент) Тогда
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОстатокТовараВСтроке(Номенклатура, Количество)
	
	Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) - Количество;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = НЕ ПоказыватьИзображения;
	Если НЕ ПоказыватьИзображения Тогда
		Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;	
		Элементы.СсылкаНаИзображение1.Видимость    = ЛОЖЬ;
		Элементы.ИзображениеВБазеДанных1.Видимость = ЛОЖЬ;	
	Иначе
		НоменклатураИзображения = Неопределено;
		ПоказатьТовар();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаДляКомиссионнойТорговли1ПриИзменении(Элемент)
	ИзменитьВидДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПередачаДляКомиссионнойТорговлиПриИзменении(Элемент)
	ИзменитьВидДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	
	Если НЕ Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			Если НЕ значениеЗаполнено(Объект.КлиентПоставщик) 
				И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Клиента или Поставщика.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать этот товар?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = ИСТИНА;
				
			ИначеЕсли ВестиУчетДвиженияДенег
				И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода
				И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПредупреждатьЕслиКлиентНеДоплатилИлиПереплатил")
				И Объект.КлиентПоставщик = ФизическоеЛицо 
				И НЕ Объект.ТовараНаСумму = ПоступилоДенегПоКурсу 				
				И Вопрос("" + ФизическоеЛицо + ?(Объект.ТовараНаСумму > ПоступилоДенегПоКурсу, " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ доплатил") + ": ", " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("переплатил") + ": ") + СокрЛП(?(Объект.ТовараНаСумму - ПоступилоДенегПоКурсу > 0, Объект.ТовараНаСумму - ПоступилоДенегПоКурсу, -(Объект.ТовараНаСумму - ПоступилоДенегПоКурсу)))  + " " + НаименованиеОсновнойВалюты + " ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = ИСТИНА;
				
			ИначеЕсли Объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ
		И ИспользоватьВаучеры Тогда
		
		Ваучеров = 0;
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			Если СтрокаВаучера.ВаучерИзъят Тогда
				Ваучеров = Ваучеров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Ваучеров = 0
			И Вопрос(?(Ваучеров = 1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучер?"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изъяли ваучеры") + " (" + СокрЛП(Ваучеров) + ")?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Отказ = ИСТИНА;
		КонецЕсли;	
	КонецЕсли;
	
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.КлиентПоставщик) Тогда
			
			Если ТипЗнч(ТекущийОбъект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") 
				И ВестиУчетПоСкладам
				И ЗначениеЗаполнено(ТекущийОбъект.Склад) 
				И ТекущийОбъект.Склад.СДанногоСкладаПродаватьЗапрещено Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы указали склад, с которого нельзя продавать!");
				Сообщение.Поле  = "Склад";
				Сообщение.УстановитьДанные(ТекущийОбъект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;				
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
				
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Договор) Тогда
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
						
						ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
						
						Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = '00010101000000' 
							ИЛИ ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= ТекущийОбъект.Дата Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
							Сообщение.Поле  = "Договор";
							Сообщение.УстановитьДанные(ТекущийОбъект);
							Сообщение.Сообщить();
							
							Отказ = ИСТИНА;
							
						КонецЕсли;	
					КонецЕсли;
					
				ИначеЕсли ТекущийОбъект.Договор.ПредусматриваетСтрогиеЦены тогда
					
					Договор = ТекущийОбъект.Договор;
					Дата 	= ТекущийОбъект.Дата;
					ВидЦен 	= ТекущийОбъект.ВидЦен;
					
					Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
						
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ЛОЖЬ, СтрокаТовара.Количество, Договор, ИСТИНА, СтрокаТовара.Цена, ТекущийОбъект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
						Если НЕ СтрокаТовара.Цена = Цена тогда
							
							Отказ = ИСТИНА;
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке") + " №" + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не соответствует строгой цене из договора") + ": " + Цена;
							Сообщение.УстановитьДанные(ТекущийОбъект);					
							Сообщение.Сообщить();
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;		
			КонецЕсли;		
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
				
				Если СтрокаТовара.процентскидки = 0
					И СтрокаТовара.суммабезскидки = 0 Тогда
					
					СтрокаТовара.суммабезскидки = СтрокаТовара.сумма;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		Если НЕ отказ
			И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
				
				Если ЗначениеЗаполнено(ТекущийОбъект.Склад)
					И ЗначениеЗаполнено(ТекущийОбъект.Склад.ХранилищеДенег) Тогда
					
					ТекущийОбъект.ХранилищеДенег = ТекущийОбъект.Склад.ХранилищеДенег;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
					ТекущийОбъект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег) Тогда
						ТекущийОбъект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
			
			Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
				
				Если НЕ ТекущийОбъект.ПоступилоДенег = 0 
					И ТекущийОбъект.Оплаты.Количество() = 0 Тогда
					
					Оплата = ТекущийОбъект.Оплаты.Добавить();
					Оплата.ХранилищеДенег = ТекущийОбъект.ХранилищеДенег;
					Оплата.ФормаОплаты    = ?(ЗначениеЗаполнено(ТекущийОбъект.ХранилищеДенег), ТекущийОбъект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров"));				
					Оплата.Сумма  = ТекущийОбъект.ПоступилоДенег;
					Оплата.Валюта = ТекущийОбъект.Валюта;
					Оплата.Курс	  = ТекущийОбъект.Курс; 	
				КонецЕсли;
				
				ОбновитьСуммуОплаты();
				
				ТекущийОбъект.ПоступилоДенег = ИтогоОплата;
				ТекущийОбъект.Курс   = 1;
				ТекущийОбъект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда			
			Отказ = ПроверитьНаОтказ();
		КонецЕсли;    	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере();
	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере()
	ТоварыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку(Знач ИзКоличества = ЛОЖЬ, Знач ИзПроцентаСкидки = ЛОЖЬ, Знач ИзСуммы = ЛОЖЬ, СтрокаТовара = Неопределено)
	
	Если НЕ изсуммы тогда
		
		Если СтрокаТовара = Неопределено Тогда
			Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
				СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
			Иначе
				СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
			КонецЕсли;
		КонецЕсли;
		
		Номенклатура = СтрокаТовара.Номенклатура;
		
		Если УчетПоСериям 
			И НЕ СтрокаТовара.Количество = 1 Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
			КонецЕсли;             				
		КонецЕсли;
		
		Если ИспользоватьСкидки тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
			Если НЕ изпроцентаскидки тогда
				СтрокаТовара.ПроцентСкидки = ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество);	
			КонецЕсли;
			
			Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
			Иначе
				СтрокаТовара.Сумма = 0;
			КонецЕсли;
			
		Иначе
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;		
		КонецЕсли;	
		
		Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество);
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере         
Процедура ПересчитатьСтрокуНаСервере(СтрокаТовара)
	
	Если ИспользоватьСкидки тогда
		
		СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
		Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
			СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
		Иначе
			СтрокаТовара.Сумма = 0;
		КонецЕсли;
		
	Иначе
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		
	КонецЕсли;
	
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПриСменеВалюты()
	
	Если ЗначениеЗаполнено(Объект.Валюта) 
		И НЕ Объект.ПоступилоДенег = 0 Тогда
		
		Объект.ПоступилоДенег = ОбщийМодульСервер.ПоКурсу(Объект.ПоступилоДенег, Объект.Валюта, ТекущаяВалюта, Объект.Дата);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда		
			Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
		Иначе
			Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);	
	КонецЦикла;
	
КонецПроцедуры // ПереСчитатьУчетныеОстатки

&НаСервере
Процедура Печать(ТабДок, ПараметрКоманды)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Расход товара"), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоТалона(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыбораЭлементов = Новый Структура;
	ВыборЭлементовПечатнойФормы = получитьформу("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		
		ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, ПараметрыПечати);
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Гарантийные обязательства");
		
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьГарантийногоТалонаНаСервере(ТабДок, Знач ПараметрыПечати, Знач НеОчищатьТабДок = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал гарантийные обязательства."), 2);
	ОбщийМодульТоварСервер.ПечатьГарантийногоТалона(ТабДок, ПараметрыПечати, НеОчищатьТабДок, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНалоговойНакладной(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе") Тогда
		РежимПакета = "НалоговаяИГарантиный";
	Иначе
		РежимПакета = "НалоговаяНакладная";
	КонецЕсли;
	
	ПараметрыВыбораЭлементов = Новый Структура(РежимПакета, ИСТИНА);
	ПараметрыВыбораЭлементов.Вставить("Организация", Объект.Организация);
	ВыборЭлементовПечатнойФормы = ПолучитьФорму("ОбщаяФорма.ВыборЭлементовПечатнойФормы", ПараметрыВыбораЭлементов);
	ПереченьЭлементов = ВыборЭлементовПечатнойФормы.ОткрытьМодально();
	
	Если НЕ ПереченьЭлементов = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);		
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		
		ПараметрыПечати = Новый Структура("ПереченьЭлементов", ПереченьЭлементов);
		ПараметрыПечати.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыПечати.Вставить("ПечататьОригинал", ПереченьЭлементов.ПечататьОригинал);
		ПараметрыПечати.Вставить("ПечататьКопию",  ПереченьЭлементов.ПечататьКопию);
		
		ФормаПечатиРезультатОчистить(ФормаПечати.Результат);
		ВставлятьРазделительСтраниц = ЛОЖЬ;
		
		Если ПереченьЭлементов.ПечататьТОРГ12 Тогда
			ПечатьТорг12(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечатьСчета Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.СчетВДваЭкземпляра, , ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечататьСчетФактуру Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ИСТИНА, , ПереченьЭлементов.СчетФактураВДваЭкземпляра, , ВставлятьРазделительСтраниц, ИСТИНА);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;		
		Если ПереченьЭлементов.ПечататьТакжеРасходнуюНакладную Тогда
			ПечатьРН(ФормаПечати.Результат, Объект.Ссылка, ЛОЖЬ, ПереченьЭлементов.ПечатьСчета, ПереченьЭлементов.РасходнаяВДваЭкземпляра, ПереченьЭлементов.ЗаголовокРасходнойНакладной, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечататьАктВыполненныхРабот Тогда
			ПечататьАктВыполненныхРабот(ФормаПечати.Результат, Объект.Ссылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		Если ПереченьЭлементов.ПечататьСвоюПечатнуюФорму Тогда
			ПечататьСвоюПечатнуюФорму(ФормаПечати.Результат, Объект.Ссылка, ПараметрыПечати, ВставлятьРазделительСтраниц, ПереченьЭлементов.СвояПроизвольнаяПечатнаяФорма);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ФормаПечати.Результат.АвтоМасштаб = ЛОЖЬ;
		
		Если ПереченьЭлементов.ПечататьОригинал 
			ИЛИ ПереченьЭлементов.ПечататьКопию Тогда
			
			ПечатьНалоговойНакладнойНаСервере(ФормаПечати.Результат, ПараметрыПечати, ВставлятьРазделительСтраниц);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, ПараметрыПечати, ИСТИНА, ВставлятьРазделительСтраниц);
		
		ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
		ФормаПечати.Результат.Защита 		  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Пакет документов");
		
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьСвоюПечатнуюФорму(ТабДок, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач СвояПроизвольнаяПечатнаяФорма)  
	
	Если ЗначениеЗаполнено(СвояПроизвольнаяПечатнаяФорма) Тогда
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал свою форму") + ": " + СокрЛП(СвояПроизвольнаяПечатнаяФорма), 2);
		ОбщийМодульТоварСервер.ПечататьСвоюПечатнуюФорму(ТабДок, ОбъектСсылка, ПараметрыПечати, ВставлятьРазделительСтраниц, СвояПроизвольнаяПечатнаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечататьАктВыполненныхРабот(ТабДок, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Акт выполненных работ"), 2);
	ОбщийМодульТоварСервер.ПечатьАктаВыполненныхРабот(ТабДок, ОбъектСсылка, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьНалоговойНакладнойНаСервере(ТабДок, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал налоговую накладную."), 2);
	ОбщийМодульТоварСервер.ПечатьНалоговойНакладной(ТабДок, ПараметрыПечати, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьРН(ТабДок, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ВДваЭкземпляра = ЛОЖЬ, Знач ЗаголовокРасходнойНакладной = "", Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач ЭтоСчетФактура = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал") + " " + ?(ЭтоСчетФактура, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет-фактуру"), ?(ЭтоСчет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход товара"))), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, , , , ЗаголовокРасходнойНакладной, ВДваЭкземпляра, ВставлятьРазделительСтраниц, ЭтоСчетФактура);
	
КонецПроцедуры

&НаСервере
Функция   ПечатьТоварногоЧекаНаСервере()
	Возврат ОбщийМодульСервер.ПечатьТоварногоЧека(Объект.Ссылка, ЛОЖЬ, Объект.КлиентПоставщик, "Товары", ?(ЗначениеЗаполнено(Объект.ХранилищеДенег), Объект.ХранилищеДенег.ФормаОплаты, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")), ?(РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах, "Оплаты", ""));
КонецФункции 

&НаСервереБезКонтекста
Процедура ПечатьТорг12(ТабДок, Знач ПараметрКоманды, Знач ЭтоСчет, Знач НоСчетЕсть = ЛОЖЬ, Знач ТОРГ12ВДваЭкземпляра = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал ТОРГ 12"), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды, ЭтоСчет, НоСчетЕсть, ЛОЖЬ, ИСТИНА, , , ТОРГ12ВДваЭкземпляра, ВставлятьРазделительСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	Текст = ПечатьТоварногоЧекаНаСервере();
	
	Если ТипЗнч(Текст) = Тип("ТабличныйДокумент") Тогда
		
		Текст.Напечатать();
		Объект.ПКОНапечатан = ИСТИНА;
		
	ИначеЕсли ИспользоватьПодключаемоеОборудование
		И НЕ ПустаяСтрока(Текст) Тогда
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	ИначеЕсли НЕ ПустаяСтрока(Текст) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(Текст);
		ТекстовыйДокумент.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товарный Чек"));
		
		Если ОбщийМодульКлиент.ПечатьЧека(Текст, УникальныйИдентификатор, Объект.Ссылка) Тогда
			Объект.ПКОНапечатан = ИСТИНА;	
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ЛОЖЬ);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	ИмяНеобходимойФормы = "Справочник.Номенклатура.Форма.ФормаПодбора";
	Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
		ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары1);
	Иначе
		ОткрытьФорму(ИмяНеобходимойФормы, ПараметрыФормы, Элементы.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпроса(Команда)
	
	СписокНоменклатурыЧастогоСпроса = ОбщийМодульПовтор.ПолучитьСписокНоменклатурыБыстрогоСпроса();	
	
	Если СписокНоменклатурыЧастогоСпроса.количество() Тогда
		
		формаменеджерапозицийчастогоспроса = получитьформу("РегистрСведений.НоменклатураЧастогоСпроса.ФормаСписка");
		формаменеджерапозицийчастогоспроса.открытьМодально();
		ОбновитьЧастыйСпрос();
		
	Иначе
		РаботаетВыборЧастогоСпроса = ИСТИНА;
		
		Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			
			попытка
				Выполнить(" Элементы.ТоварыНоменклатура1.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать; ");
			исключение // старая 1С				
			КонецПопытки;
			
			Элементы.Товары1.ДобавитьСтроку();			
			ТекущиеДанные = Элементы.Товары1.ТекущиеДанные;
			
			Номенклатура = Неопределено;
			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПозицияИзСпискаЧастогоСпросаЗавершение1", ЭтаФорма, Новый Структура("СписокНоменклатурыЧастогоСпроса, ТекущиеДанные", СписокНоменклатурыЧастогоСпроса, ТекущиеДанные)), СписокНоменклатурыЧастогоСпроса, ТекущиеДанные.Номенклатура);
            Возврат;
			
		Иначе
			попытка
				Выполнить(" Элементы.ТоварыНоменклатура.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать; ");
			исключение // старая 1С				
			КонецПопытки;
			
			Элементы.Товары.ДобавитьСтроку();
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПозицияИзСпискаЧастогоСпросаЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)), СписокНоменклатурыЧастогоСпроса, ТекущиеДанные.Номенклатура);
            Возврат;
			
		КонецЕсли;
		
		ПозицияИзСпискаЧастогоСпросаФрагмент1();

	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпросаЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СписокНоменклатурыЧастогоСпроса = ДополнительныеПараметры.СписокНоменклатурыЧастогоСпроса;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;	
	
	Номенклатура = ВыбранныйЭлемент; 
	Если НЕ Номенклатура = Неопределено тогда
		ТекущиеДанные.Номенклатура = Номенклатура.Значение;
		Элементы.Товары1.ЗакончитьРедактированиеСтроки(ЛОЖЬ); 	
		ПриИзмененииНоменклатуры();
	Иначе
		Элементы.Товары1.ЗакончитьРедактированиеСтроки(ИСТИНА);
	КонецЕсли;
	
	попытка
		Выполнить(" Элементы.ТоварыНоменклатура1.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто; ");
	исключение // старая 1С				
	КонецПопытки;	
	
	ПозицияИзСпискаЧастогоСпросаФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпросаФрагмент1()
	
	ПозицияИзСпискаЧастогоСпросаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпросаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;	
	
	Номенклатура = ВыбранныйЭлемент;
	Если НЕ Номенклатура = Неопределено тогда
		ТекущиеДанные.Номенклатура = Номенклатура.Значение;
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);	                                   	
		ПриИзмененииНоменклатуры();
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);
	КонецЕсли;
	
	попытка
		Выполнить(" Элементы.ТоварыНоменклатура.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто; ");
	исключение // старая 1С				
	КонецПопытки;	
	
	ПозицияИзСпискаЧастогоСпросаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпросаФрагмент()
	
	РаботаетВыборЧастогоСпроса = ЛОЖЬ;

КонецПроцедуры

&НаСервере
Процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, ВалютаПродаж, Объект.Валюта, Объект.Дата);
	Видимость   = НЕ ДокументЗаблокирован И не ТекущийДолг = 0 и ЗначениеЗаполнено(Объект.КлиентПоставщик) и (УчетПоКлиентам или УчетПоПоставщикам);
	
	Элементы.ТекущийДолг.Видимость 	= Видимость;
	Элементы.ТекущийДолг1.Видимость = Видимость;
	Элементы.ВзятьСуммуСУчетомДолгаКлиента.видимость 	= НЕ ДокументЗаблокирован И Видимость;
	Элементы.ВзятьСуммуСУчетомДолгаКлиента1.видимость 	= НЕ ДокументЗаблокирован И Видимость;
	
КонецПроцедуры

Функция   ПоказатьИзображениеРеквизита(Знач ЭлементСИзображением)
	
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ИСТИНА;
			Элементы.СсылкаНаИзображение1.Видимость    = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных1.Видимость = ИСТИНА;
			
			Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			КонецЕсли; 
			
		Иначе
			Элементы.СсылкаНаИзображение.Видимость     = ИСТИНА;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
			Элементы.СсылкаНаИзображение1.Видимость    = ИСТИНА;
			Элементы.ИзображениеВБазеДанных1.Видимость = ЛОЖЬ;
		КонецЕсли; 		
		
		Результат = ИСТИНА;		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если НЕ СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если НЕ Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			Элементы.СсылкаНаИзображение.Видимость     = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных.Видимость  = ЛОЖЬ;
			Элементы.СсылкаНаИзображение1.Видимость    = ЛОЖЬ;
			Элементы.ИзображениеВБазеДанных1.Видимость = ЛОЖЬ;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(Знач МКод)
	
	Если НЕ ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если НЕ Клиент = Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач НоменклатураИлиКлиентПоставщик, Знач Количество = 0)
	
	Если ИспользоватьСкидки Тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПроцентСкидкиНаСервере

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество, Знач ЕдиницаИзмерения)
	
	Цена = 0 ;
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		
		Цена = ОпределитьЦенуПоследнейПокупки(Номенклатура);
	КонецЕсли;	
	
	Если Цена = 0 Тогда
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, Количество, Объект.Договор, , , Объект.Ссылка, , ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
	ВидимостьСторно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступилоДенегПриИзменении(Элемент)
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено, Знач НеМенятьЦену = ЛОЖЬ) 
	
	Если СтрокаТовара = Неопределено Тогда
		Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
		Иначе
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		Номенклатура = СтрокаТовара.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда  		
			
			Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
				И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
				
				СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
			КонецЕсли;
			
			Если СтрокаТовара.Количество = 0 Тогда
				СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
				И ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) Тогда
				
				СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
				
				Если НЕ СтрокаТовараСтруктура = Неопределено тогда
					Номенклатура = СтрокаТовараСтруктура.Номенклатура;
					СтрокаТовара.Номенклатура = Номенклатура;
					СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если УчетПоСериям Тогда
				// И НЕ СерииНоменклатурыВидны Тогда
				
				ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
				
				Если ТоварВедетсяПоСериям Тогда
					СтрокаТовара.Количество = 1;
					СерииНоменклатурыВидны 	= ИСТИНА;		
					Элементы.ТоварыСерияНоменклатуры.Видимость 	= ИСТИНА;	
					Элементы.ТоварыСерияНоменклатуры1.Видимость = ИСТИНА;	
				КонецЕсли;             				
			КонецЕсли;
			
			Если НЕ НеМенятьЦену Тогда
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			
			Если ИспользоватьСкидки Тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
			Иначе
				СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
			КонецЕсли;
			
			ПересчитатьСтроку(, , , СтрокаТовара);
			ПоказатьТовар();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)     									// ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ТоварыПриИзмененииНаСервере(ИСТИНА);
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
	ВыводНадписиПоФормуле();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ПриСменеКонтрагента()
	
	ПроверитьСменуТипа();
	ПоказатьДолгКлиентаПоставщика();
	КлиентПриИзмененииНаСервере();
	ПересчитатьДокументНаКлиенте();
	ИзменитьВидДокумента();	
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)         // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001800", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ВестиУчетПоСкладам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		УчетПоПоставщикам 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		УчетПоКлиентам 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		учетЗаказовКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		УчетПоСериям		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		ПредставитьДокументРасходаТовараДвумяКолонками  = константы.ПредставитьДокументРасходаТовараДвумяКолонками.Получить(); // без кеширования
		
		СопровождатьНоменклатуруИзображениями		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		СопровождатьДоговораИзображениями			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями");
		СопровождатьКлиентовИзображениями			= УчетПоКлиентам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями");
		СопровождатьПоставщиковИзображениями		= УчетПоПоставщикам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями");
		СопровождатьОрганизацииИзображениями		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями");
		ПоказыватьИзображения 						= СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
		
		ФизическоеЛицо 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Клиенты.ФизическоеЛицо");
		ЭтоФизическоеЛицо = Объект.КлиентПоставщик 	= ФизическоеЛицо;
		ВестиУчетПоНаправлениямДеятельности 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		Элементы.ЧастныйПокупатель.Видимость 		= УчетПоКлиентам И НЕ ЭтоФизическоеЛицо;
		Элементы.ЧастныйПокупатель1.Видимость 		= УчетПоКлиентам И НЕ ЭтоФизическоеЛицо;
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьСложныйМеханизмЦен 				= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ВестиУчетДенегВНесколькихХранилищах 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		Элементы.ОплатаФормаОплаты.Видимость 		= НЕ ВестиУчетДенегВНесколькихХранилищах;
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах");
		Элементы.ГруппаПоступилоДенег.Видимость 	= ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах;
		Элементы.ГруппаПоступилоДенег1.Видимость 	= ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НЕ РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах;	
		Элементы.ГруппаПредметаСделки.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
		Элементы.ГруппаПредметаСделки1.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки");
		ИспользоватьВаучеры 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");		
		
		ОплатВидимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода 
		И (РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах
		ИЛИ ИспользоватьВаучеры);
		
		Элементы.МногоСтрочнаяОплата.Видимость		= ОплатВидимость;
		Элементы.ШАПКАОплата1.Видимость				= ОплатВидимость;
		ОтветственныйЗаДоставкуВидимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетИнформацииОДоставкеВДокументахРасхода") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		Элементы.ОтветственныйЗаДоставку.Видимость	= ОтветственныйЗаДоставкуВидимость;
		Элементы.ОтветственныйЗаДоставку1.Видимость	= ОтветственныйЗаДоставкуВидимость;
		ИспользоватьСторнированиеДокументов	 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");		
		ИспользоватьСкидки 		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");	
		ИспользоватьУчетВалют 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ПоступилоРавноСумме 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОбычноРеализацияОзначаетЧтоДеньгиОтКлиентаПолучены");
		ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		
		ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе");
		Элементы.ПечатьГарантийногоТалона.Видимость = ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе;
		Элементы.ПечатьГарантийногоТалона1.Видимость= ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе;
		
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость   = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ТоварыВводСКоличеством1.Видимость  = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Попытка
			Элементы.ВидЦенВалютаЦены.Видимость 		= ИспользоватьСложныйМеханизмЦен;
		Исключение // нет прав
		КонецПопытки;
		
		ПоказыватьСуммуРасходногоДокументаТакжеВВалюте 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьСуммуРасходногоДокументаТакжеВВалюте");
		ПоказыватьЭлементСуммуРасходногоДокументаТакжеВВалюте = ИспользоватьУчетВалют и ЗначениеЗаполнено(ПоказыватьСуммуРасходногоДокументаТакжеВВалюте);
		Элементы.СуммаВДругойВалюте.Видимость  		= ПоказыватьЭлементСуммуРасходногоДокументаТакжеВВалюте;
		Элементы.СуммаВДругойВалюте1.Видимость 		= ПоказыватьЭлементСуммуРасходногоДокументаТакжеВВалюте;
		
		ВестиДополнительнуюИнформациюДляРасхода		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляРасхода");
		Элементы.ГруппаДополнительнаяИнформация.Видимость  = ВестиДополнительнуюИнформациюДляРасхода;
		Элементы.ГруппаДополнительнаяИнформация1.Видимость = ВестиДополнительнуюИнформациюДляРасхода;
		
		ИспользуетсяДатаКомиссии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КомиссионерыОтчитываютсяПоОтдельнымДокументамПередачиНаКоммиссию");
		
		Элементы.ДатаОтчетаПоКомиссии.Видимость 	= ИспользуетсяДатаКомиссии;
		Элементы.ДатаОтчетаПоКомиссии1.Видимость 	= ИспользуетсяДатаКомиссии;
		
		ПечататьЧек = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		Элементы.ПечатьЧека.Видимость	= ПечататьЧек;
		Элементы.ПечатьЧека1.Видимость	= ПечататьЧек;
		
		РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализации");
		
		Если ИспользоватьПодключаемоеОборудование ТОгда
			ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();	
			Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));	
		Иначе
			ФР = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
			Объект.КлиентПоставщик = Параметры.КлиентПоставщик;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;
			
			Если НЕ Параметры.ДляСписания
				И НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				
				Если НЕ УчетПоКлиентам Тогда
					Объект.КлиентПоставщик = ФизическоеЛицо ;
				Иначе
					Объект.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
				КонецЕсли;                    	
			КонецЕсли;
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных");
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			КлиентПриИзмененииНаСервере(ИСТИНА);
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");		
				Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
					Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				
				Если ЗначениеЗаполнено(Объект.Склад)
					И ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда
					
					Объект.ХранилищеДенег = Объект.Склад.ХранилищеДенег;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
					Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
					Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
						Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен ) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
				И ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;		
			
			Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
			Элементы.Курс.Видимость  = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
			Элементы.Курс1.Видимость = Элементы.Курс.Видимость;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
				И НЕ ЗначениеЗаполнено(Объект.ДатаОтсрочки) Тогда
				
				Объект.ДатаОтсрочки = Объект.Дата + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию") * 3600 * 24;
			КонецЕсли;
			
			Если ОтветственныйЗаДоставкуВидимость
				И НЕ ЗначениеЗаполнено(Объект.ОтветственныйЗаДоставку) Тогда
				
				Объект.ОтветственныйЗаДоставку = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОтветственныйЗаДоставкуПоУмолчанию");
			КонецЕсли;
			
			ОбновитьДатуОтсрочки();
			
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
			
		Иначе
			Если НЕ Объект.Проведен Тогда
				Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
			КонецЕсли;
			Элементы.Курс.Видимость  = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
			Элементы.Курс1.Видимость = Элементы.Курс.Видимость;
			
			РасчетПоступилоДенегПоКурсуНаСервере();
			ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных = ЛОЖЬ;
			
			ПроверитьДатуРождения();
			
			Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
				ОбновитьСуммуОплаты();
			КонецЕсли;
			
			КлиентПриИзмененииНаСервере(ИСТИНА);
			
			ВаучерыВидимость = НЕ Объект.Ваучеры.Количество() = 0;
			Элементы.Ваучеры.Видимость 			= ВаучерыВидимость;
			Элементы.ПогаситьВаучер.Видимость 	= ИспользоватьВаучеры И НЕ ВаучерыВидимость;
			Элементы.Ваучеры1.Видимость 		= ВаучерыВидимость;
			Элементы.ПогаситьВаучер1.Видимость 	= ИспользоватьВаучеры И НЕ ВаучерыВидимость;
		КонецЕсли;   
		
		ВидЦенПриИзмененииНаСервере(ИСТИНА);
		
		ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
		
		Элементы.ТоварыОстатокСУчетомДокумента.Видимость  = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		Элементы.ТоварыОстатокСУчетомДокумента1.Видимость = ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных;
		
		ПроверкаВидаОтображенияДокумента();	
		
		Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			
			СтруктураНоменклатура = Новый структура;
			СтруктураНоменклатура.Вставить("Номенклатура" , Параметры.Номенклатура);
			СтруктураНоменклатура.Вставить("Количество" , Параметры.Количество);
			СтруктураНоменклатура.Вставить("ЕдиницаИзмерения", Параметры.ЕдиницаИзмерения);
			Если СтруктураНоменклатура.Количество 	= 0 Тогда
				СтруктураНоменклатура.Количество 	= 1;
			КонецЕсли;
			СтруктураНоменклатура.Вставить("Цена" , Параметры.Цена);		
			Если СтруктураНоменклатура.Цена = 0 Тогда
				СтруктураНоменклатура.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Параметры.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, СтруктураНоменклатура.Количество, Объект.Договор, , , Объект.Ссылка);
			КонецЕсли;
			
			ДобавитьПозициюНоменклатуры(СтруктураНоменклатура);
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность 	= ЛОЖЬ;	
				Элементы.ВидЦен1.Доступность 	= ЛОЖЬ;	
			КонецЕсли;
			
			Элементы.ТоварыЦена.Доступность 	= ЛОЖЬ;
			Элементы.ТоварыСумма.Доступность 	= ЛОЖЬ;
			Элементы.ТоварыЦена1.Доступность 	= ЛОЖЬ;
			Элементы.ТоварыСумма1.Доступность 	= ЛОЖЬ;
			Элементы.ТоварыПроцентСкидки1.Доступность = ЛОЖЬ;
			Элементы.ТоварыПроцентСкидки.Доступность  = ЛОЖЬ;
			
		КонецЕсли;	
		
		НаименованиеОсновнойВалюты = СокрЛП(ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование);
		Элементы.ОстанетсяСУчетомПоступления.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Долг с учетом поступления") + " (" + НаименованиеОсновнойВалюты + ")";
		Элементы.ОстанетсяСУчетомПоступления.Видимость 	= ВестиУчетДвиженияДенег И (УчетПоКлиентам ИЛИ УчетПоПоставщикам) И НЕ ОстанетсяСУчетомПоступления = 0;
		Элементы.ОстанетсяСУчетомПоступления1.Заголовок = Элементы.ОстанетсяСУчетомПоступления.Заголовок;
		Элементы.ОстанетсяСУчетомПоступления1.Видимость = Элементы.ОстанетсяСУчетомПоступления.Видимость;
		
		Элементы.НаименованиеОсновнойВалюты.Видимость 	= ВестиУчетДвиженияДенег И НЕ ИспользоватьУчетВалют;
		Элементы.НаименованиеОсновнойВалюты2.Видимость 	= ВестиУчетДвиженияДенег И НЕ ИспользоватьУчетВалют;
		
		ВалютаПродажВидимость    			 = ИспользоватьУчетВалют И НЕ Объект.ТовараНаСумму = 0;
		Элементы.ВалютаПродаж.Видимость 	 = ВалютаПродажВидимость;	
		Элементы.ВалютаПродаж1.Видимость 	 = ВалютаПродажВидимость;
		
		Элементы.ТоварыСумма.ТолькоПросмотр  = НЕ ИспользоватьСкидки;	
		Элементы.ТоварыСумма1.ТолькоПросмотр = НЕ ИспользоватьСкидки;
		
		Если НЕ УчетПоКлиентам 
			И НЕ УчетПоПоставщикам Тогда
			
			Элементы.УкажитеВидДокумента.Видимость 	= ИСТИНА;
			Элементы.УкажитеВидДокумента1.Видимость = ИСТИНА;
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.Реализация ;
				Иначе	
					УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.ВозвратПоставщику ;
				КонецЕсли;
				
			Иначе
				УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.Списание;
			КонецЕсли;
			
			Элементы.ВидДокумента.Видимость  = ЛОЖЬ;
			Элементы.ВидДокумента1.Видимость = ЛОЖЬ;
			
		Иначе
			Элементы.УкажитеВидДокумента.Видимость 	= ЛОЖЬ;
			Элементы.УкажитеВидДокумента1.Видимость = ЛОЖЬ;
			
		КонецЕсли;
		
		ОбновитьЧастыйСпрос();	
		ИзменитьВидДокумента();
		ПоказатьДолгКлиентаПоставщика();	
		
		ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
		СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
		Элементы.ТоварыСерияНоменклатуры.Видимость  = СерииНоменклатурыВидны;
		Элементы.ТоварыСерияНоменклатуры1.Видимость = СерииНоменклатурыВидны;
		Элементы.ТоварыЗаказКлиента.Видимость 		= учетЗаказовКлиентам И ЭтоКлиент И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.Товары1ЗаказКлиента.Видимость 		= учетЗаказовКлиентам И ЭтоКлиент И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
		Элементы.ЗаказКлиента.Видимость 			= учетЗаказовКлиентам И ЭтоКлиент;
		Элементы.ЗаказКлиента1.Видимость 			= учетЗаказовКлиентам И ЭтоКлиент;
		
		НеОтслеживатьВаучерыВКачествеНоменклатуры 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
		Элементы.ВаучерыВаучерИзъят.Видимость 		= ИспользоватьВаучеры И НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры;
		Элементы.ВаучерыВаучерИзъят1.Видимость 		= ИспользоватьВаучеры И НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры;
		
		ВключитьМеханизмПодбораНоменклатуры 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ТоварыПодборНоменклатуры.Видимость = ВключитьМеханизмПодбораНоменклатуры;
		Элементы.Товары1ПодборНоменклатуры.Видимость= ВключитьМеханизмПодбораНоменклатуры;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество1, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество1);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыОстатокСУчетомДокумента1);	
		
		Если ВестиУчетДвиженияДенег ТОгда
			
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000892", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				
				Элементы.ГруппаПоступилоДенег.ТолькоПросмотр = ИСТИНА;
				Элементы.МногоСтрочнаяОплата.ТолькоПросмотр	 = ИСТИНА;
				Элементы.ГруппаПоступилоДенег1.ТолькоПросмотр= ИСТИНА;
				Элементы.ШАПКАОплата1.ТолькоПросмотр 		 = ИСТИНА;
				Элементы.ВзятьСуммуПоДокументу.Видимость 	 = ЛОЖЬ;
				Элементы.ВзятьСуммуПоДокументу1.Видимость 	 = ЛОЖЬ;
				Элементы.ОплатаВзятьСуммуПоДокументу.Видимость 	= ЛОЖЬ;
				Элементы.Оплата1ВзятьСуммуПоДокументу.Видимость	= ЛОЖЬ;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ГруппаПоступилоДенег.Видимость 	 = ЛОЖЬ;
				Элементы.МногоСтрочнаяОплата.Видимость 		 = ЛОЖЬ;
				Элементы.ГруппаПоступилоДенег1.Видимость 	 = ЛОЖЬ;
				Элементы.ШАПКАОплата1.Видимость 		 	 = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		ВидимостьСторно();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость 		 = НЕ ЗначениеЗаполненоДокументСторнирован;
			Элементы.ФормаСторно1.Видимость 	 = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
			Элементы.ФормаСторно1.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести1.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения1.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть1.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть1.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать1.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаСторно1.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести1.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения1.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
	Иначе
		Элементы.ФормаСторно.Видимость = ЛОЖЬ;
		Элементы.ФормаСторно1.Видимость = ЛОЖЬ;
		Попытка
			Элементы.ФормаПровести.Видимость = ИСТИНА;		
			Элементы.ФормаПровести1.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения1.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуРождения()
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
		ДатаРождения = Объект.КлиентПоставщик.ДатаРождения;
		
		Если ЗначениеЗаполнено(ДатаРождения) 
			И Месяц(ДатаРождения) = Месяц(Объект.Дата)
			И День(ДатаРождения) = День(Объект.Дата) Тогда
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерСкидкиНаДатаРождения") = 0 Тогда
				Элементы.ДатаРождения.Видимость 	= ИСТИНА;
				Элементы.ДатаРождения1.Видимость 	= ИСТИНА;
			Иначе
				Элементы.ДатаРожденияСкидка.Видимость 	= ИСТИНА;
				Элементы.ДатаРожденияСкидка1.Видимость 	= ИСТИНА;
			КонецЕсли;
		КонецЕсли;          	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	Отказ = ЛОЖЬ;
	
	Ссылка = Объект.Ссылка;
	Валюта = Объект.Валюта;
	Дата   = Объект.Дата;
	ВидЦен = Объект.ВидЦен;
	Склад  = Объект.Склад;
	ЭтоЗаказ = Объект.ЭтоЗаказ;
	Товары   = Объект.Товары;
	Договор  = Объект.Договор;
	ПоступилоДенег  = Объект.ПоступилоДенег;
	ХранилищеДенег  = Объект.ХранилищеДенег;
	КлиентПоставщик = Объект.КлиентПоставщик;
	ТовараНаСумму   = Объект.ТовараНаСумму;
	ТовараВКоличестве = Объект.ТовараВКоличестве;	
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
	Клиент = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
	ВестиУчетДвиженияДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	ВестиУчетЗаказовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	
	Если ТовараВКоличестве = 0
		И НЕ ТовараНаСумму = 0 
		И НЕ ЗначениеЗаполненоКлиентПоставщик Тогда
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание услуги? Контрагент не указан!"), , Объект.Ссылка);
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
		И ЗначениеЗаполнено(Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенег, Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
			
			Отказ = ИСТИНА;	
		КонецЕсли;
		
		Если ИспользоватьСложныйМеханизмЦен
			И ЗначениеЗаполнено(ВидЦен)
			И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
			
			ВалютаЦены = ВидЦен.ВалютаЦены ;
		Иначе
			ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		КонецЕсли;
		
		ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
		ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
		
		ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
		ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
		
		СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Объект.ссылка, склад, дата, ОстаткиСледуетПроверять);
		ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
		
		Если ОстаткиСледуетПроверять тогда
			ГТ = СтруктураТаблиц.ТаблицаОстатков;	
		КонецЕсли;	
		
		Для Каждого ТекСтрокаТовара Из Товары Цикл
			
			Номенклатура 	  = ТекСтрокаТовара.Номенклатура;
			СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
			Количество 		  = ТекСтрокаТовара.Количество;
			КоличествоОстаток = Неопределено;
			
			Если ОстаткиСледуетПроверять тогда
				СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
				
				Если НЕ СтрокаОстаток = Неопределено Тогда
					ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
					ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
					
				Иначе
					ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
					ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
					
				КонецЕсли;			
				
			Иначе 			
				ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
				
			КонецЕсли;	
			
			Если НЕ ПредопределенныйТовар
				И НЕ этонабор тогда
				
				Если ОстаткиСледуетПроверять тогда
					Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);	
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				сумма 	 = ТекСтрокаТовара.Сумма;
				СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
				
				Если ЭтоНабор Тогда 										
					отказ = обработатьОТКАЗдвижениядлянабора(Номенклатура, ТекСтрокаТовара.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") 
		И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода тогда
		
		Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
			Для Каждого Оплата Из Объект.Оплаты Цикл
				Если НЕ Оплата.Сумма = 0 тогда
					
					Если ЗначениеЗаполнено(Оплата.ХранилищеДенег) Тогда
						ФормаОплаты = Оплата.ХранилищеДенег.ФормаОплаты;
					Иначе
						ФормаОплаты = Оплата.ФормаОплаты;				
					КонецЕсли;
					
					Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -Оплата.Сумма, Объект.Дата, ФормаОплаты, Оплата.Валюта, Оплата.ХранилищеДенег, , Объект.Ссылка);	
					
				КонецЕсли;   	
			КонецЦикла;
			
		Иначеесли НЕ ПоступилоДенег = 0 тогда
			
			Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
				ФормаОплаты = ХранилищеДенег.ФормаОплаты;
			Иначе
				ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");				
			КонецЕсли;
			
			Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Объект.Ссылка);	
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		ПересчитатьНасильно = ЛОЖЬ;
		
		// сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			И СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			КонецЕсли;
			ПересчитатьНасильно = ИСТИНА;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			И НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			КонецЕсли;
			ПересчитатьНасильно = ИСТИНА;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				// Если ИспользоватьСложныйМеханизмЦен Тогда
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
				// Иначеесли ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
				// 	СтрокаТовара.Цена = СтрокаТовара.Номенклатура.Цена;
				// КонецЕсли;
				// 
				Если ИспользоватьСкидки Тогда
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
					Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
						СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
					Иначе
						СтрокаТовара.Сумма = 0;
					КонецЕсли;	
				Иначе
					СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;   	
		
		Возврат ИСТИНА;
		
	Иначе // не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат ЛОЖЬ;
			
		ИначеЕсли НЕ УчетПоКлиентам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Возврат ИСТИНА;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = ИСТИНА;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = ИСТИНА;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции // ПроверитьУчетПоСериям

&НаСервере
Процедура ПроверкаВидаОтображенияДокумента() 
	
	Элементы.ВнешнийВидВертикаль.видимость 	= не ПредставитьДокументРасходаТовараДвумяКолонками;	
	Элементы.ВнешнийВидГоризонт.видимость 	= ПредставитьДокументРасходаТовараДвумяКолонками;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.разблокироватьсканер.видимость 	= СканерЗаблокирован;
	Элементы.разблокироватьсканер1.видимость 	= СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПровестиИЗакрыть(Команда)
	
	ПараметрыФормы = Новый структура;
	ПараметрыФормы.Вставить("СразуНаПечать", ИСТИНА);
	ПараметрыФормы.Вставить("СразуЗакрыть", ИСТИНА);
	
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	Печать(ФормаПечати.Результат,Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
	ФормаПечати.Результат.Защита = ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр = ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печать") + ": " + ЭтаФорма.Заголовок;
	ФормаПечати.открыть();	
	
	Если НЕ ДокументЗаблокирован Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));	
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РасчетПоступилоДенегПоКурсуНаСервере()
	
	Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
		ИтогоОплата = 0;
		Для Каждого Оплата Из Объект.Оплаты Цикл
			ИтогоОплата = ИтогоОплата + Оплата.Сумма * Оплата.Курс;
		КонецЦикла;
		ПоступилоДенегПоКурсу = ИтогоОплата;
		
		ИтогоОплатаСтрока = "" + Формат(ИтогоОплата, "ЧГ=0") + " " + НаименованиеОсновнойВалюты;
		
	Иначе
		ПоступилоДенегПоКурсу = ОбщийМодульСервер.ПоКурсу(Объект.ПоступилоДенег, , Объект.Валюта, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЧтоОстанетсяСУчетомПоступления()
	
	ВалютаПродажи = Неопределено;
	
	Если УчетПоКлиентам 
		ИЛИ УчетПоПоставщикам Тогда
		
		РасчетПоступилоДенегПоКурсуНаСервере();
		
		ОстанетсяСУчетомПоступления = 0;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			И НЕ Объект.КлиентПоставщик.Предопределенный Тогда
			
			Если ИспользоватьУчетВалют тогда
				
				Если ИспользоватьСложныйМеханизмЦен
					И ЗначениеЗаполнено(Объект.ВидЦен)
					И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
					
					ВалютаПродажи = Объект.ВидЦен.ВалютаЦены;
				Иначе
					ВалютаПродажи = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.Валюта) Тогда
					валютапоступления = Объект.Валюта;
				Иначе
					валютапоступления = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;
				
				ОстанетсяСУчетомПоступления = (ТекущийДолг + ?(валютапоступления = ВалютаПродажи, Объект.ТовараНаСумму, ОбщийМодульСервер.ПоКурсу(Объект.ТовараНаСумму, валютапоступления, ВалютаПродажи, Объект.Дата)) - Объект.ПоступилоДенег ) * Объект.Курс;		
				
			ИначеЕсли ВестиУчетДвиженияДенег тогда
				
				ОстанетсяСУчетомПоступления = ТекущийДолг + Объект.ТовараНаСумму - Объект.ПоступилоДенег;
				
			КонецЕсли; 	
			Элементы.ОстанетсяСУчетомПоступления.Видимость 	= не ОстанетсяСУчетомПоступления = 0;
			Элементы.ОстанетсяСУчетомПоступления1.Видимость = Элементы.ОстанетсяСУчетомПоступления.Видимость;
			
		Иначе
			Элементы.ОстанетсяСУчетомПоступления.Видимость 	= ЛОЖЬ;
			Элементы.ОстанетсяСУчетомПоступления1.Видимость = ЛОЖЬ;
			
		КонецЕсли; 	
		
	Иначе
		Элементы.ОстанетсяСУчетомПоступления.Видимость 	= ЛОЖЬ;
		Элементы.ОстанетсяСУчетомПоступления1.Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
	Если ИспользоватьУчетВалют
		И ЗначениеЗаполнено(ПоказыватьСуммуРасходногоДокументаТакжеВВалюте) Тогда
		
		Если ВалютаПродажи = Неопределено Тогда
			Если ИспользоватьСложныйМеханизмЦен
				И ЗначениеЗаполнено(Объект.ВидЦен)
				И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
				
				ВалютаПродажи = Объект.ВидЦен.ВалютаЦены;
			Иначе
				ВалютаПродажи = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;                     	
		КонецЕсли;
		
		СуммаВДругойВалюте = " " + Формат(ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("Сумма"), ПоказыватьСуммуРасходногоДокументаТакжеВВалюте, ВалютаПродажи, Объект.Дата), "ЧДЦ=2") + " " + СокрЛП(ПоказыватьСуммуРасходногоДокументаТакжеВВалюте);
	КонецЕсли;
	
	ВидимостьВалюты = ИспользоватьУчетВалют И (НЕ ЗначениеЗаполнено(Объект.Валюта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег));
	Элементы.Валюта1.Видимость = ВидимостьВалюты;
	Элементы.Валюта.Видимость  = ВидимостьВалюты;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьОстатокТовараСУчетомДокВНепроведенных Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	СменитьВидОтображенияДокумента();
	ПроверкаВидаОтображенияДокумента();
	ОбработатьБлокировку();
	Этаформа.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОтображенияДокумента()
	
	ПредставитьДокументРасходаТовараДвумяКолонками = не ПредставитьДокументРасходаТовараДвумяКолонками;
	Константы.ПредставитьДокументРасходаТовараДвумяКолонками.Установить(ПредставитьДокументРасходаТовараДвумяКолонками);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварОтправленПриИзменении(Элемент)
	
	Если Объект.ТоварОтправлен
		И НЕ ЗначениеЗаполнено(Объект.ДатаОтправки) Тогда
		
		Объект.ДатаОтправки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Товары1ЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПересчитатьСтроку(ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатура1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатура1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			ТекСтр = Элементы.Товары1.ТекущиеДанные;
		Иначе
			ТекСтр = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;	
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("КлиентПоставщик", Объект.КлиентПоставщик);
	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	СтрокаТовара = ТекСтр;	
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ТекСтр.Номенклатура = Номенклатура;	
		ПриИзмененииНоменклатуры();
		
		Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			Элементы.Товары1.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
			Элементы.Товары1.ТекущийЭлемент = Элементы.ТоварыКоличество1;
			
		Иначе			
			Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
			
		КонецЕсли; 
		
	Иначе
		Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			Элементы.Товары1.ЗакончитьРедактированиеСтроки(ИСТИНА);			
		Иначе
			Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТекСтр = Неопределено Тогда
		Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
			ТекСтр = Элементы.Товары1.ТекущиеДанные;
		Иначе
			ТекСтр = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;	
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(ТекСтр) 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)  	
	ПриИзмененииНоменклатуры(ТекСтр);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена  			 = Подбор.Цена;
			Строка.Сумма 			 = Подбор.Сумма;
			Строка.ОСтроке 			 = Подбор.ОСтроке;
			
			ПриИзмененииНоменклатуры(Строка, ИСТИНА);
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры   

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	
	Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
		ТекСтр = Элементы.Товары1.ТекущиеДанные;
	Иначе
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	ПоказатьТовар();	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере(Знач ПриОткрытии = ЛОЖЬ)
	
	Если НЕ ПриОткрытии
		И НЕ ДокументЗаблокирован тогда
		
		Количество = Объект.Товары.Итог("Количество");
		Если НЕ Объект.ТовараВКоличестве = Количество Тогда
			Объект.ТовараВКоличестве = Количество;	
		КонецЕсли;
		Сумма = Объект.Товары.Итог("Сумма");	
		Если НЕ Объект.ТовараНаСумму = Сумма Тогда
			Объект.ТовараНаСумму 	 = Сумма;		
		КонецЕсли;
		
		Если ПоступилоРавноСумме Тогда
			
			ВзятьСуммуПоДокументуНаСервере();
			РассчитатьЧтоОстанетсяСУчетомПоступления();
			ИзменитьВидДокумента();
		КонецЕсли;
	КонецЕсли;
	
	ОбъектТовараНаСумму = Объект.ТовараНаСумму;
	
	Если ИспользоватьСкидки Тогда
		СуммаБезСкидки = Объект.Товары.Итог("СуммаБезСкидки");
		СуммаСкидки    = ОбъектТовараНаСумму - СуммаБезСкидки;
		
		Элементы.СуммаБезСкидки.Видимость 	= НЕ СуммаБезСкидки = ОбъектТовараНаСумму;
		Элементы.СуммаБезСкидки1.Видимость 	= НЕ СуммаБезСкидки = ОбъектТовараНаСумму;
		Элементы.СуммаСкидки.Видимость 		= НЕ СуммаСкидки = 0;
		Элементы.СуммаСкидки1.Видимость 	= НЕ СуммаСкидки = 0;
	КонецЕсли;
	
	Элементы.ТоварыИтогКоличество.Видимость  = НЕ Объект.ТовараВКоличестве = 0;
	Элементы.ТоварыИтогКоличество1.Видимость = Элементы.ТоварыИтогКоличество.Видимость;
	Элементы.ТоварыИтогСумма.Видимость 		 = НЕ ОбъектТовараНаСумму = 0;
	Элементы.ТоварыИтогСумма1.Видимость 	 = Элементы.ТоварыИтогСумма.Видимость;
	ВалютаПродажВидимость 					 = ИспользоватьУчетВалют И НЕ ОбъектТовараНаСумму = 0;
	Элементы.ВалютаПродаж.Видимость 		 = ВалютаПродажВидимость;
	Элементы.ВалютаПродаж1.Видимость 		 = ВалютаПродажВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)	
	пересчитатьСтроку(ЛОЖЬ, ИСТИНА)  ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	Иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если НЕ СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;
	КонецЕсли;
	пересчитатьСтроку(, , , СтрокаТовара)	;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	Иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Количество = 1;		
	КонецЕсли;
	
	Если ИспользоватьСкидки тогда
		Если СтрокаТовара.СуммаБезСкидки = 0 Тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.цена * СтрокаТовара.количество;
		КонецЕсли;
		
		СтрокаТовара.ПроцентСкидки = (СтрокаТовара.СуммаБезСкидки - СтрокаТовара.Сумма) / (СтрокаТовара.СуммаБезСкидки / 100);	
	КонецЕсли;
	
	пересчитатьСтроку(ЛОЖЬ, ЛОЖЬ, ИСТИНА, СтрокаТовара)	;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура УкажитеВидДокументаПриИзменении(Элемент)
	
	Если УкажитеВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументаРасходаТовара.ВозвратПоставщику") Тогда
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо");
	ИначеЕсли УкажитеВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументаРасходаТовара.Реализация") Тогда
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	Иначе
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	КонецЕсли;
	
	ИзменитьВидДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ФормаПечатиРезультатОчистить(ФормаПечатиРезультат)
	ФормаПечатиРезультат.Очистить()	
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	Объект.КлиентПоставщик = ФизическоеЛицо;
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовогоКлиента(Команда)
	
	НовыйКлиент = ОбщийМодульСервер.СоздатьНовыйИлиНайтиЭлементДокумент(ИСТИНА, "Клиенты", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый Клиент"));
	ПоказатьЗначение(Новый ОписаниеОповещения("ДобавитьНовогоКлиентаЗавершение", ЭтаФорма, Новый Структура("НовыйКлиент", НовыйКлиент)), НовыйКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовогоКлиентаЗавершение(ДополнительныеПараметры) Экспорт
	
	НовыйКлиент = ДополнительныеПараметры.НовыйКлиент;	
	
	Объект.КлиентПоставщик = НовыйКлиент;
	
	ПриСменеКонтрагента();
	
	Элементы.ОбновитьДанныеКонтрагента.Видимость = ИСТИНА;
	Элементы.ОбновитьДанныеКонтрагента1.Видимость = ИСТИНА;
	Элементы.ДобавитьНовогоКлиента.Видимость = ЛОЖЬ;
	Элементы.ДобавитьНовогоКлиента1.Видимость = ЛОЖЬ;

КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	
	ХранилищеДенегПриИзмененииНаСервере();
	
	Объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	Если НЕ ТекущаяВалюта = Объект.Валюта тогда
		ПересчитатьСуммуПриСменеВалюты();          	
	КонецЕсли;
	
	Элементы.Курс.Видимость  = НЕ Объект.Курс = 1 И ИспользоватьУчетВалют;
	Элементы.Курс1.Видимость = Элементы.Курс.Видимость;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.Валюта = Объект.ХранилищеДенег.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКонтрагента(Команда)
	
	ПриСменеКонтрагента();
	
	Элементы.ОбновитьДанныеКонтрагента.Видимость = ЛОЖЬ;
	Элементы.ОбновитьДанныеКонтрагента1.Видимость = ЛОЖЬ;
	Элементы.ДобавитьНовогоКлиента.Видимость = ИСТИНА;
	Элементы.ДобавитьНовогоКлиента1.Видимость = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		Закрыть();	
		ПоказатьЗначение(Неопределено,  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.КлиентПоставщик, Объект.Договор, Объект.Организация, , Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьВаучер(Команда)
	
	Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
		Элементы.ПогаситьВаучер.Видимость 	= ЛОЖЬ;
		Элементы.Ваучеры.Видимость 			= ИСТИНА;
		СтрокаВаучера = Объект.Ваучеры.Добавить();
		Элементы.Ваучеры.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
		Элементы.Ваучеры.ТекущийЭлемент 	= Элементы.ВаучерыВаучер;
		
	Иначе
		Элементы.ПогаситьВаучер1.Видимость 	= ЛОЖЬ;
		Элементы.Ваучеры1.Видимость 			= ИСТИНА;
		СтрокаВаучера = Объект.Ваучеры.Добавить();
		Элементы.Ваучеры1.ТекущаяСтрока  	= СтрокаВаучера.ПолучитьИдентификатор();
		Элементы.Ваучеры1.ТекущийЭлемент 	= Элементы.ВаучерыВаучер1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ДобавитьПрименитьВаучер(Знач Ваучер, Знач НеДобавлятьРучнойВыбор = ЛОЖЬ)
	
	РезультатСтруктура = Новый Структура("Результат", Неопределено);;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если НЕ Объект.Ваучеры.Количество() = 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ваучер", Ваучер);
			
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
			Если НЕ ДокументЗаблокирован Тогда
				
				Если НеДобавлятьРучнойВыбор
					ИЛИ СтрокаВаучера.Количество() = 0 Тогда
					
					Если НЕ НеДобавлятьРучнойВыбор Тогда
						СтрокаВаучера = Объект.Ваучеры.Добавить();
						СтрокаВаучера.Ваучер = Ваучер;
					Иначе
						СтрокаВаучера = СтрокаВаучера[0];
					КонецЕсли;
					
					Если Ваучер.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
						КонтрагентВаучера = Ваучер.Контрагент;
						
						Если ЗначениеЗаполнено(КонтрагентВаучера)
							И НЕ Объект.КлиентПоставщик = КонтрагентВаучера Тогда
							
							Объект.КлиентПоставщик = КонтрагентВаучера;
							РезультатСтруктура.Результат = 3;
						КонецЕсли;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
						// ОтветПоВаучеру для накопительной карты не нужен - по ней не будет накоплений, если товар неподходящий
						ОстатокНакопленияЧислом = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Ваучер, Объект.Дата);
						ОстатокНакопления 		= "" + СокрЛП(ОстатокНакопленияЧислом);
						ОстатокНакопления 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток накопления") + ": " + ОстатокНакопления;
						СтрокаВаучера.ОСтроке 	= ОстатокНакопления;
						
							РезультатСтруктура.Результат = 5;
							РезультатСтруктура.Вставить("Ответ", Новый Структура("Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом", Ваучер, ОстатокНакопления, ОстатокНакопленияЧислом));
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено ваучером"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочная карта"), Ваучер.НоминалПроцент);
						РезультатСтруктура.Результат = 0;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент
						И ИспользоватьСкидки Тогда
						
						ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, Объект.Склад, ЛОЖЬ);
						
						Если ОтветПоВаучеру.ВаучерПодходит Тогда
							Объект.ВаучерСкидки = Ваучер; // приоритет свежего ваучера. раз пробили, значит надо
							
							Для Каждого СтрокаТовара ИЗ Объект.Товары Цикл
								СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
								
								СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
								
								Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
									СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
								Иначе
									СтрокаТовара.Сумма = 0;
								КонецЕсли;
							КонецЦикла;	
							
						Иначе
							Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
						КонецЕсли;
						РезультатСтруктура.Результат = 0;
						
					ИначеЕсли Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма
						И ИспользоватьСкидки Тогда
						
						ДобавитьКОплатеВаучером(Ваучер, ИСТИНА, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено скидкой"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочная карта на сумму"), Ваучер.НоминалПроцент);
						РезультатСтруктура.Результат = 0;
					КонецЕсли;
					
				Иначе
					СтрокаВаучера = СтрокаВаучера[0];
					Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
						Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
						Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
					Иначе
						Элементы.Ваучеры1.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
						Элементы.Ваучеры1.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят1;		
					КонецЕсли;
					РезультатСтруктура.Результат = 0;
				КонецЕсли;
				
			ИначеЕсли НЕ СтрокаВаучера.Количество() = 0 Тогда // Встать на строку
				
				СтрокаВаучера = СтрокаВаучера[0];
				Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
					Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят;		
				Иначе
					Элементы.Ваучеры1.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
					Элементы.Ваучеры1.ТекущийЭлемент = Элементы.ВаучерыВаучерИзъят1;		
				КонецЕсли;
				РезультатСтруктура.Результат = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ВаучерыПослеУдаления(Элемент)
	
	ВаучерыПослеУдаленияНаСервере();
	ПересчитатьДокументНаКлиенте();	
	
КонецПроцедуры

&НаСервере
Процедура ВаучерыПослеУдаленияНаСервере()
	
	Объект.ВаучерСкидки = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
	ВаучерНакопленияВОплатах = Неопределено;
	
	МассивВаучеровОплаты = Новый Массив;
	
	Для Каждого СтрокаВаучер Из Объект.Ваучеры Цикл
		Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
			МассивВаучеровОплаты.Добавить(СтрокаВаучер.Ваучер);
			Если СтрокаВаучер.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент Тогда
				Объект.ВаучерСкидки = СтрокаВаучер.Ваучер;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокНаУдаление = Новый Массив;
	Для Каждого СтрокаОплаты Из Объект.Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.Ваучер) Тогда
			Если МассивВаучеровОплаты.Найти(СтрокаОплаты.Ваучер) = Неопределено Тогда			
				МассивСтрокНаУдаление.Добавить(СтрокаОплаты);	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВаучерНакопленияВОплатах)
				И СтрокаОплаты.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
				
				ВаучерНакопленияВОплатах = СтрокаОплаты.Ваучер
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаОплаты из МассивСтрокНаУдаление цикл
		Объект.Оплаты.Удалить(СтрокаОплаты);	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ВаучерНакопленияВОплатах) Тогда
		ОБъект.ВаучерНакопления = ВаучерНакопленияВОплатах;
	Иначе
		ОБъект.ВаучерНакопления = ПредопределенноеЗначение("Справочник.Ваучеры.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого СтрокаТовара ИЗ Объект.Товары Цикл
		СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, Объект.ВидЦен, Объект.КлиентПоставщик, Объект.ВаучерСкидки, Объект.Склад, Объект.Дата);
		
		СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		
		Если НЕ СтрокаТовара.СуммаБезСкидки = 0 тогда
			СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
		Иначе
			СтрокаТовара.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыВаучерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ваучеры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РезультатНакопление = ДобавитьПрименитьВаучер(ТекущиеДанные.Ваучер, ИСТИНА);
		Если РезультатНакопление.Результат = 5 Тогда
			ВыяснитьОПогашенииНакопления(РезультатНакопление.Ответ);
		КонецЕсли;
		
		ПриИзмененииНоменклатуры(ТекСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыяснитьОПогашенииНакопления(Знач РезультатНакопление)
	
	Если НЕ РезультатНакопление.ОстатокНакопленияЧислом = 0 Тогда
		
		ОплатитьНакопительнымВаучером = ЛОЖЬ;
		
		КомандыВопроса = Новый Массив(3, 3);
		КомандыВопроса[0][0] = "OK";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, оплатить накопленными средствами");
		КомандыВопроса[0][2] = "Результат = 1;";
		КомандыВопроса[1][0] = "НЕТ";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет, продолжить накопление");
		КомандыВопроса[1][2] = "Результат = 2;";
		КомандыВопроса[2][0] = "ОТМЕНА";
		КомандыВопроса[2][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена ваучера");
		КомандыВопроса[2][2] = "Результат = 3;";
		
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"));
		ПараметрыФормы.Вставить("ЭтоВыборПериода", ЛОЖЬ);
		
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер") + ": " +
		РезультатНакопление.Ваучер + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Использовать накопительный ваучер для оплаты?") +
		Символы.ПС + РезультатНакопление.ОстатокНакопления);
		
		ПараметрыФормы.Вставить("ЭтоВопрос", ИСТИНА);
		ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
		ОтветПользователя = ФормаВопроса.ОткрытьМодально();
		
		Если НЕ ОтветПользователя = Неопределено
			И НЕ ОтветПользователя = 3 Тогда
			
			ОплатитьНакопительнымВаучером = ?(ОтветПользователя = 1, ИСТИНА, ЛОЖЬ);
			
			Если ОплатитьНакопительнымВаучером Тогда
				ДобавитьКОплатеВаучером(РезультатНакопление.Ваучер, ЛОЖЬ, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Погашено из накоплений"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительный ваучер"), РезультатНакопление.ОстатокНакопленияЧислом);
			Иначе
				Объект.ВаучерНакопления = РезультатНакопление.Ваучер;
			КонецЕсли;
			
			СтруктураДляСтроки = Новый Структура("Ваучер", РезультатНакопление.Ваучер);
			СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(СтруктураДляСтроки);
			Если НЕ СтрокаВаучера.Количество() = 0 Тогда
				СтрокаВаучера = СтрокаВаучера[0];
				СтрокаВаучера.ОСтроке = ?(ОплатитьНакопительнымВаучером, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принят к оплате"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для накопления.."));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ВаучерНакопления = РезультатНакопление.Ваучер;		
	КонецЕсли;
	
КонецПроцедуры // ВыяснитьОПогашенииНакопления

&НаСервере
Функция   ДобавитьКОплатеВаучером(Знач Ваучер, Знач ВаучерИзъят = ЛОЖЬ, Знач ТекстПогашения = "", Знач ТекстДляНеподходящего = "", Знач СуммаПогашения = 0, Знач СтрокаВаучера = Неопределено)
	
	ОтветПоВаучеру = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерПодходит(Ваучер, Объект.Дата, Объект.Товары, Объект.Склад, ЛОЖЬ);
	
	Если ОтветПоВаучеру.ВаучерПодходит Тогда
		
		НоваяОплата = Объект.Оплаты.Добавить();
		НоваяОплата.Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		НоваяОплата.Сумма 	= СуммаПогашения;
		НоваяОплата.Валюта 	= Ваучер.Валюта;
		НоваяОплата.Ваучер	= Ваучер;
		НоваяОплата.Курс 	= ОбщийМодульСервер.ПолучитьТекущийКурс(НоваяОплата.Валюта, НоваяОплата.Дата, ЛОЖЬ);
		//НоваяОплата.ХранилищеДенег = 
		НоваяОплата.ФормаОплаты = Перечисления.ФормыОплаты.Сертификат;
		НоваяОплата.ОСтроке = ТекстПогашения + ": " + Ваучер.Наименование;
		
		Если Не СтрокаВаучера = Неопределено Тогда
			СтрокаВаучера.ВаучерИзъят = ВаучерИзъят;
			Если НЕ ПредставитьДокументРасходаТовараДвумяКолонками Тогда
				Элементы.Оплаты.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Оплаты.ТекущийЭлемент = Элементы.ОплатыХранилищеДенег;	
			Иначе
				Элементы.Оплаты1.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
				Элементы.Оплаты1.ТекущийЭлемент = Элементы.ОплатыХранилищеДенег1;
			КонецЕсли;
		КонецЕсли;
		Результат = ИСТИНА;
		
	Иначе
		Сообщить(ТекстДляНеподходящего + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не подходит") + ": " + Символы.ПС + ОтветПоВаучеру.Причина);
		Результат = ЛОЖЬ;
	КонецЕсли;						
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПриВыбореСерииНоменклатуры();
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриВыбореСерииНоменклатуры(СтрокаТовара = Неопределено)
	
	Если СтрокаТовара = Неопределено Тогда
		Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
		Иначе
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		Номенклатура = СтрокаТовара.Номенклатура;
		Если ЗначениеЗаполнено(Номенклатура) Тогда  		
			СтандартнаяОбработка = ЛОЖЬ;
			
			ПараметрыФормы = Новый Структура;
			
			Если ВестиУчетПоСкладам
				И ЗначениеЗаполнено(Объект.Склад) Тогда
				
				ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
			КонецЕсли;	
			
			ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
			ПараметрыФормы.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			
			ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
			Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.СерияНоменклатуры);
			КонецЕсли;
			ФормаВыбора = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы);
			
			СерияНоменклатуры = ФормаВыбора.ОткрытьМодально();
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
					Элементы.Товары1.ТекущиеДанные.СерияНоменклатуры = СерияНоменклатуры;	
					Элементы.Товары1.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
					Элементы.Товары1.ТекущийЭлемент = Элементы.ТоварыКоличество1;	
				Иначе
					Элементы.Товары.ТекущиеДанные.СерияНоменклатуры = СерияНоменклатуры;	
					Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
					Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;	
				КонецЕсли;
				
			Иначе
				Если ПредставитьДокументРасходаТовараДвумяКолонками тогда
					Элементы.Товары1.ЗакончитьРедактированиеСтроки(ИСТИНА);		
				Иначе
					Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);		
				КонецЕсли;
				
			КонецЕсли; 	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура Товары1ПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура Оплаты1ПриИзменении(Элемент)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПредметаСделки(Команда)
	Объект.ПредметСделки = ТекстПредметаСделкиНаСервере();
КонецПроцедуры

&НаСервере
Функция ТекстПредметаСделкиНаСервере()
	
	Если Объект.Товары.Количество() = 1 Тогда
		Номенклатура = Объект.Товары[0].Номенклатура;
		Возврат ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, , , Объект.КлиентПоставщик, ИСТИНА);
	Иначе
		Сумма = Объект.Товары.Итог("Сумма");
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товары на сумму") + " " + Сумма;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КлиентПоставщикОчистка(Элемент, СтандартнаяОбработка)
	
	ВестиУчетПоПоставщикам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	ВестиУчетПоКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	
	Если ВестиУчетПоКлиентам
		И НЕ ВестиУчетПоПоставщикам Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
		
	ИначеЕсли НЕ ВестиУчетПоКлиентам
		И ВестиУчетПоПоставщикам Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");		
	КонецЕсли;
	
КонецПроцедуры

ТекСтр = Неопределено;
