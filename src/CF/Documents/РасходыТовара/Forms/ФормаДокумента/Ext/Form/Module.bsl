//sza140119-1424 
//sza130902-0532 

&НаКлиенте
Процедура ВзятьСуммуПоДокументу(Команда)
	
	ВзятьСуммуПоДокументуНаСервере();
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента() ;
	
КонецПроцедуры

&НаСервере
Процедура ВзятьСуммуПоДокументуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
	Объект.ПоступилоДенег = Объект.Товары.Итог("Сумма");
	ПоступилоДенегПоКурсу = ОбщийМодульСервер.ПоКурсу(Объект.ПоступилоДенег, , Объект.Валюта, Объект.Дата);
	
КонецПроцедуры     

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ВестиУчетПоСкладу 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	УчетПоПоставщикам 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	УчетПоКлиентам 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	учетЗаказовКлиентам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	УчетПоСериям		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
	ПредставитьДокументРасходаТовараДвумяКолонками  = константы.ПредставитьДокументРасходаТовараДвумяКолонками.Получить(); //без кеширования
	
	СопровождатьНоменклатуруИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями") ;
	СопровождатьДоговораИзображениями		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями") ;
	СопровождатьКлиентовИзображениями		= УчетПоКлиентам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями") ;
	СопровождатьПоставщиковИзображениями	= УчетПоПоставщикам И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьПоставщиковИзображениями") ;
	СопровождатьОрганизацииИзображениями	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьОрганизацииИзображениями") ;
	ПоказыватьИзображения = СопровождатьОрганизацииИзображениями ИЛИ СопровождатьПоставщиковИзображениями ИЛИ СопровождатьКлиентовИзображениями ИЛИ СопровождатьДоговораИзображениями ИЛИ СопровождатьНоменклатуруИзображениями;
	
	ФизическоеЛицо 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Клиенты.ФизическоеЛицо");
	ЭтоФизическоеЛицо = объект.КлиентПоставщик 	= ФизическоеЛицо;
	элементы.ЧастныйПокупатель.Видимость 		= УчетПоКлиентам и не ЭтоФизическоеЛицо;
	элементы.ЧастныйПокупатель1.Видимость 		= УчетПоКлиентам и не ЭтоФизическоеЛицо;
	ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
	ИспользоватьСложныйМеханизмЦен 				= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода") ;
	Элементы.ГруппаПоступилоДенег.Видимость 	= ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода;
	Элементы.ГруппаПоступилоДенег1.Видимость 	= ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода;	
	
	ИспользоватьСкидки 		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");	
	ИспользоватьУчетВалют 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
	ПоступилоРавноСумме 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОбычноРеализацияОзначаетЧтоДеньгиОтКлиентаПолучены") ;
	ВестиУчетДвиженияДенег 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	
	ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе");
	Элементы.ПечатьГарантийногоТалона.Видимость  = ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе;
	Элементы.ПечатьГарантийногоТалона1.Видимость = ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе;
	
	элементы.ТоварыВводСКоличеством.Видимость  = не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством") ;
	элементы.ТоварыВводСКоличеством1.Видимость = не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством") ;
	Элементы.ВидЦенВалютаЦены.Видимость = ИспользоватьСложныйМеханизмЦен;
	
	Если ИспользоватьПодключаемоеОборудование ТОгда
		ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();	
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()));	
	Иначе
		ФР = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
			Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте") ;
			КонецЕсли;
		КонецЕсли;
		
		если не ЗначениеЗаполнено(Объект.КлиентПоставщик) тогда
			Если НЕ УчетПоКлиентам Тогда
				Объект.КлиентПоставщик = ФизическоеЛицо ;
			Иначе
				Объект.КлиентПоставщик = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
			КонецЕсли;                    	
		КонецЕсли;
		ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах");
		
		Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		КлиентПриИзмененииНаСервере();
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Склад ) Тогда
			Объект.Склад = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");		
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Склады.ОсновнойСклад") ;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен ) Тогда
			Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик)
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			
			Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;		
		
		ВидЦенПриИзмененииНаСервере();
		
		объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
		элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
		элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие");
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
			и не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			
			Объект.Сотрудник = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СотрудникРеализацииПоУмолчанию") ;
		КонецЕсли;
		
	иначе
		если не объект.Проведен тогда
			объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
		КонецЕсли;
			элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
			элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
		
		ПоступилоДенегПоКурсу 		= ОбщийМодульСервер.ПоКурсу(Объект.ПоступилоДенег, , Объект.Валюта, Объект.Дата);
		ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах = Ложь;
		
		ПроверитьДатуРождения();
		
	КонецЕсли;   
	
	ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов");
	
	Элементы.ТоварыОстатокСУчетомДокумента.Видимость 	= ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
	Элементы.ТоварыОстатокСУчетомДокумента1.Видимость 	= ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах;
	
	ПроверкаВидаОтображенияДокумента();	
	
	Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		
		СтруктураНоменклатура = новый структура;
		СтруктураНоменклатура.Вставить("Номенклатура" , Параметры.Номенклатура);
		СтруктураНоменклатура.Вставить("Количество" , Параметры.Количество);
		Если СтруктураНоменклатура.Количество 	= 0 Тогда
			СтруктураНоменклатура.Количество 	= 1;
		КонецЕсли;
		СтруктураНоменклатура.Вставить("Цена" , Параметры.Цена);		
		Если СтруктураНоменклатура.Цена = 0 Тогда
			СтруктураНоменклатура.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Параметры.Номенклатура, Объект.ВидЦен, Объект.Дата, истина, СтруктураНоменклатура.Количество, Объект.Договор, , , Объект.Ссылка);
		КонецЕсли;
		
		ДобавитьПозициюНоменклатуры(СтруктураНоменклатура);
		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") тогда
		
		если ЗначениеЗаполнено(объект.ВидЦен) Тогда
			элементы.ВидЦен.Доступность 	= ложь;	
			элементы.ВидЦен1.Доступность 	= ложь;	
		КонецЕсли;
		
		элементы.ТоварыЦена.Доступность 	= Ложь;
		элементы.ТоварыСумма.Доступность 	= Ложь;
		элементы.ТоварыЦена1.Доступность 	= Ложь;
		элементы.ТоварыСумма1.Доступность 	= Ложь;
		элементы.ТоварыПроцентСкидки1.Доступность = Ложь;
		элементы.ТоварыПроцентСкидки.Доступность  = Ложь;
		
	КонецЕсли;	
	
	НаименованиеОсновнойВалюты = сокрлп(Справочники.Валюты.ОсновнаяВалюта.Наименование) ;
	элементы.ОстанетсяСУчетомПоступления.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Долг с учетом поступления") + " (" + НаименованиеОсновнойВалюты + ")";
	элементы.ОстанетсяСУчетомПоступления.Видимость 	= ВестиУчетДвиженияДенег и (УчетПоКлиентам или УчетПоПоставщикам) и не ОстанетсяСУчетомПоступления = 0;
	элементы.ОстанетсяСУчетомПоступления1.Заголовок = элементы.ОстанетсяСУчетомПоступления.Заголовок;
	элементы.ОстанетсяСУчетомПоступления1.Видимость = элементы.ОстанетсяСУчетомПоступления.Видимость;
	элементы.НаименованиеОсновнойВалюты.Видимость 	= ВестиУчетДвиженияДенег и не ИспользоватьУчетВалют;
	элементы.НаименованиеОсновнойВалюты1.Видимость 	= не ИспользоватьУчетВалют и не Объект.ТовараНаСумму = 0;
	элементы.НаименованиеОсновнойВалюты2.Видимость 	= элементы.НаименованиеОсновнойВалюты.Видимость;
	элементы.НаименованиеОсновнойВалюты3.Видимость 	= элементы.НаименованиеОсновнойВалюты1.Видимость;  	
	элементы.ТоварыСумма.ТолькоПросмотр 			= не ИспользоватьСкидки;
	элементы.ТоварыСумма1.ТолькоПросмотр 			= не ИспользоватьСкидки;
	
	Если не УчетПоКлиентам 
		и не УчетПоПоставщикам Тогда
		
		элементы.УкажитеВидДокумента.Видимость 	= истина;
		элементы.УкажитеВидДокумента1.Видимость = истина;
		
		Если ЗначениеЗаполнено(объект.КлиентПоставщик) Тогда
			Если ТипЗнч(объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
				УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.Реализация ;
			иначе	
				УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.ВозвратПоставщику ;
			КонецЕсли;
			
		иначе
			УкажитеВидДокумента = Перечисления.ВидыДокументаРасходаТовара.Списание;
		КонецЕсли;
		
		элементы.ВидДокумента.Видимость  = ложь;
		элементы.ВидДокумента1.Видимость = ложь;
		
	Иначе
		элементы.УкажитеВидДокумента.Видимость 	= ложь;
		элементы.УкажитеВидДокумента1.Видимость = ложь;
		
	КонецЕсли;
	
	ОбновитьЧастыйСпрос();	
	ИзменитьВидДокумента() ;
	ПоказатьДолгКлиентаПоставщика();	
	
	СерииНоменклатурыВидны = УчетПоСериям И ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(Объект.Ссылка);
	Элементы.ТоварыСерияНоменклатуры.Видимость  = СерииНоменклатурыВидны;
	Элементы.ТоварыСерияНоменклатуры1.Видимость = СерииНоменклатурыВидны;
	Элементы.ТоварыЗаказКлиента.Видимость 		= учетЗаказовКлиентам и ЭтоКлиент И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	Элементы.Товары1ЗаказКлиента.Видимость 		= учетЗаказовКлиентам и ЭтоКлиент И ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказов;
	Элементы.ЗаказКлиента.Видимость 			= учетЗаказовКлиентам и ЭтоКлиент;
	Элементы.ЗаказКлиента1.Видимость 			= учетЗаказовКлиентам и ЭтоКлиент;
	
	Элементы.ТоварыПодборНоменклатуры.Видимость  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
	Элементы.Товары1ПодборНоменклатуры.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЧастыйСпрос()
	
	ТоварыЧастогоСпроса = ОбщийМодульПовтор.ПолучитьСписокНоменклатурыБыстрогоСпроса(ложь).Выгрузить();
	
	если не ТоварыЧастогоСпроса.Количество() = 0 тогда
		ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса");
		
		если ПоказыватьКнопкиДобавленияНоменклатурыЧастогоСпроса тогда
			элементыТоварыЧастогоСпроса 	= элементы.ГруппаКомандНоменклатурыЧастогоСпроса;
			элементыТоварыЧастогоСпроса1 	= элементы.ГруппаКомандНоменклатурыЧастогоСпроса1;
			
			НоваяДекорация = Элементы.найти("ЗаголовокЧастогоСпроса");
			если НоваяДекорация = неопределено тогда
				НоваяДекорация = Элементы.Добавить("ЗаголовокЧастогоСпроса", тип("ДекорацияФормы"), элементыТоварыЧастогоСпроса);
				НоваяДекорация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Частый спрос:");
			конецесли;
			
			НоваяДекорация = Элементы.найти("ЗаголовокЧастогоСпроса1");
			если НоваяДекорация = неопределено тогда
				НоваяДекорация = Элементы.Добавить("ЗаголовокЧастогоСпроса1", тип("ДекорацияФормы"), элементыТоварыЧастогоСпроса1);
				НоваяДекорация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Частый спрос:");
			конецесли;
			элементыТоварыЧастогоСпроса.Видимость  = Истина;
			элементыТоварыЧастогоСпроса1.Видимость = Истина;
			
		иначе
			элементыТоварыЧастогоСпроса 	= элементы.ТоварыЧастогоСпроса;
			элементыТоварыЧастогоСпроса1 	= элементы.ТоварыЧастогоСпроса1;
		конецесли;	
		
		Для каждого товар из ТоварыЧастогоСпроса цикл
			
			позиция 		= товар.позиция;
			комментарий 	= товар.комментарий;
			номенклатура 	= товар.номенклатура;
			
			КомандаФормы  = команды.Найти("К" + позиция);
			если КомандаФормы  = неопределено тогда
				
				КомандаФормы  = Команды.Добавить("К" + позиция);
				КомандаФормы.Действие = "ПроцедураОбработкиНажатия";
				если позиция < 10 тогда
					КомандаФормы.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["_" + сокрлп(позиция)], , Истина, Истина) ;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(комментарий) Тогда
					КомандаФормы.Подсказка = комментарий;
				Иначе
					КомандаФормы.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавить") + " " + номенклатура;
				КонецЕсли;
				
				НоваяКнопка = элементы.Найти("КФ" + позиция);
				если НоваяКнопка = неопределено тогда
					НоваяКнопка = элементы.Добавить("КФ" + позиция, тип("КнопкаФормы"), элементыТоварыЧастогоСпроса);		
					НоваяКнопка.Заголовок = сокрлп(номенклатура);
					НоваяКнопка.ИмяКоманды = "К" + позиция;		
				Конецесли;
				
				НоваяКнопка = элементы.Найти("КБ" + позиция);
				если НоваяКнопка = неопределено тогда
					НоваяКнопка = элементы.Добавить("КБ" + позиция, тип("КнопкаФормы"), элементыТоварыЧастогоСпроса1);		
					НоваяКнопка.Заголовок = сокрлп(номенклатура);
					НоваяКнопка.ИмяКоманды = "К" + позиция;			
				КонецЕсли;
			конецесли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураОбработкиНажатия(Элемент)
	
	Позиция = число(стрзаменить(Элемент.Имя, "К", ""));
	ДобавлениеЧастогоСпроса(Позиция);
	
КонецПроцедуры  

&НаСервере
Процедура ДобавлениеЧастогоСпроса(Позиция)
		
	ДобавитьПозициюНоменклатуры(ОбщийМодульПовтор.ПолучитьНоменклатуруБыстрогоСпроса(Позиция));
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
процедура ПроверкаВидаОтображенияДокумента() 
	
	Элементы.ВнешнийВидВертикаль.видимость 	= не ПредставитьДокументРасходаТовараДвумяКолонками;	
	Элементы.ВнешнийВидГоризонт.видимость 	= ПредставитьДокументРасходаТовараДвумяКолонками;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал();
		иначе
			
			ПересчитатьДокументНаКлиенте();   		
		КонецЕсли;
	КонецЕсли;                              	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураВх, НеСтановитсяНаЭтуСтроку = Ложь, множительКоличества = 1)
	
	СерияНоменклатуры = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура 	= НоменклатураВх;
		Количество 		= множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх);
		Цена 		= 0;
		ЦенаЕсть 	= Ложь;
		
	Иначе
		Номенклатура 	= НоменклатураВх.Номенклатура;
		Количество 		= НоменклатураВх.Количество * множительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураВх.Номенклатура);
		НоменклатураВх.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		Цена 		= 0;
		ЦенаЕсть 	= НоменклатураВх.Свойство("Цена", Цена);
		
	КонецЕсли; 
	ТоварВедетсяПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТоварВедетсяПоСериям Тогда
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	если не ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();	
			СтрокаТовара.Номенклатура = Номенклатура;
			
			Если ТоварВедетсяПоСериям 
				И НЕ СерииНоменклатурыВидны Тогда
				
				СерииНоменклатурыВидны = Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость 	= Истина;
				Элементы.ТоварыСерияНоменклатуры1.Видимость = Истина;	
			КонецЕсли;
			
		иначе
			СтрокаТовара = СтрокаТовара[0];
		КонецЕсли;		
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
		если ТоварВедетсяПоСериям тогда
			
			если не серияНоменклатуры = неопределено Тогда				
				СтрокаТовара.Количество = 1;
				СтрокаТовара.серияНоменклатуры = серияНоменклатуры;	
			КонецЕсли;
			
		конецесли;
		
		если ЦенаЕсть тогда
			СтрокаТовара.Цена = Цена;
		Иначе			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Строкатовара.Количество);	
		КонецЕсли;		
		
		Если ИспользоватьСкидки Тогда
			СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.Количество, объект.ВидЦен, объект.КлиентПоставщик);	
		КонецЕсли;
		
		пересчитатьСтрокуНаСервере(СтрокаТовара);	
		
		если не НеСтановитсяНаЭтуСтроку тогда
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;			
		КонецЕсли;
		
	иначеЕсли не НеСтановитсяНаЭтуСтроку
		И НЕ СтрокаТовара.Количество() = 0 Тогда //Встать на строку
		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= элементы.ТоварыКоличество;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьСменуТипа()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) ТОгда
		
		ПересчитатьНасильно = Ложь;
		
		//сменился тип - сменим вид цен насильно	
		СталоКлиентом = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоРасчетысПоставщиком 
			и СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;
			КонецЕсли;
			ПересчитатьНасильно = Истина;
			
		ИначеЕсли НЕ ЭтоРасчетысПоставщиком 
			и НЕ СталоКлиентом Тогда
			
			Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
				Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;
			КонецЕсли;
			ПересчитатьНасильно = Истина;
			
		КонецЕсли;
		
		Если ПересчитатьНасильно Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				//Если ИспользоватьСложныйМеханизмЦен Тогда
				СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
				//Иначеесли ЗначениеЗаполнено(СтрокаТовара.Номенклатура) тогда
				//	СтрокаТовара.Цена = СтрокаТовара.Номенклатура.Цена;
				//КонецЕсли;
				//
				Если ИспользоватьСкидки Тогда
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
					если не СтрокаТовара.СуммаБезСкидки = 0 тогда
						СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
					иначе
						СтрокаТовара.Сумма = 0;
					КонецЕсли;	
				иначе
					СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;   	
		
		Возврат Истина;
		
	Иначе //не заполнено - выбрали тип
		Если НЕ УчетПоПоставщикам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Объект.КлиентПоставщик = Справочники.Поставщики.ФизическоеЛицо ;
			
			Возврат Ложь;
			
		ИначеЕсли НЕ УчетПоКлиентам
			И ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
			
			Объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
процедура ПоказатьДолгКлиентаПоставщика()
	
	ТекущийДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Объект.КлиентПоставщик, Объект.Дата - 1);
	ТекущийДолг = ОбщийМодульСервер.ПоКурсу(ТекущийДолг, , Объект.Валюта, Объект.Дата);
	Видимость   = не ТекущийДолг = 0 и ЗначениеЗаполнено(Объект.КлиентПоставщик) и (УчетПоКлиентам или УчетПоПоставщикам);
	
	элементы.ТекущийДолг.Видимость 	= Видимость;
	элементы.ТекущийДолг1.Видимость = Видимость;
	элементы.ВзятьСуммуСУчетомДолгаКлиента.видимость 	= Видимость;
	элементы.ВзятьСуммуСУчетомДолгаКлиента1.видимость 	= Видимость;
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	элементы.ЧастныйПокупатель.Видимость 	= УчетПоКлиентам и не объект.КлиентПоставщик = ФизическоеЛицо;
	элементы.ЧастныйПокупатель1.Видимость 	= УчетПоКлиентам и не объект.КлиентПоставщик = ФизическоеЛицо;
	
	Элементы.ДатаРождения.Видимость 		= Ложь;
	Элементы.ДатаРождения1.Видимость 		= Ложь;
	Элементы.ДатаРожденияСкидка.Видимость 	= Ложь;
	Элементы.ДатаРожденияСкидка1.Видимость 	= Ложь;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) ТОгда
		
		ПроверитьДатуРождения();
		
		Если ИспользоватьУчетВалют
			и ЗначениеЗаполнено(Объект.КлиентПоставщик.ОсновнаяВалюта) Тогда
			
			Объект.Валюта = Объект.КлиентПоставщик.ОсновнаяВалюта;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(объект.Склад)
			и ЗначениеЗаполнено(объект.КлиентПоставщик.Склад) Тогда
			
			объект.Склад = объект.КлиентПоставщик.Склад;
		КонецЕсли;
		
		Если ИспользоватьСкидки Тогда
			Для Каждого СтрокаТовара из Объект.Товары Цикл
				СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, объект.ВидЦен, объект.КлиентПоставщик);
				
				пересчитатьСтрокуНаСервере(СтрокаТовара);
			КонецЦикла;		
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			И НЕ ЗначениеЗаполнено(Объект.Договор) 
			ИЛИ не объект.Договор.КлиентПоставщик = Объект.КлиентПоставщик Тогда			
			
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
		КонецЕсли;	
		
	иначе
		ПроцентСкидки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуРождения()
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
		ДатаРождения = Объект.КлиентПоставщик.ДатаРождения;
		
		Если ЗначениеЗаполнено(ДатаРождения) 
			и Месяц(ДатаРождения) = Месяц(Объект.Дата)
			и День(ДатаРождения) = День(Объект.Дата) Тогда
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмерСкидкиНаДатаРождения") = 0 Тогда
				Элементы.ДатаРождения.Видимость 	= Истина;
				Элементы.ДатаРождения1.Видимость 	= Истина;
			Иначе
				Элементы.ДатаРожденияСкидка.Видимость 	= Истина;
				Элементы.ДатаРожденияСкидка1.Видимость 	= Истина;
			КонецЕсли;
		КонецЕсли;          	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество)
	
	Для Каждого СтрокаНабора Из Номенклатура.Состав Цикл
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) тогда
			ДобавитьВсеЭлементыСостава(СтрокаНабора.Номенклатура, Состав, Количество)
			
		иначе
			СтрокаСостава = состав.добавить();
			СтрокаСостава.Номенклатура 		= СтрокаНабора.Номенклатура;
			СтрокаСостава.Количество 		= СтрокаНабора.Количество * Количество;
			СтрокаСостава.СерияНоменклатуры = Неопределено;
			
		конецесли;
	конеццикла;
	
конецпроцедуры

&НаСервере
Функция   ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, Количество = 1)
	
	Результат = неопределено;
	
	Состав = новый ТаблицаЗначений;
	Состав.Колонки.Добавить("Номенклатура");
	Состав.Колонки.Добавить("Количество");
	Состав.Колонки.Добавить("СерияНоменклатуры");
	
	ДобавитьВсеЭлементыСостава(Номенклатура, Состав, Количество);
	
	сч = 0;
	Для Каждого СтрокаСостава Из Состав Цикл
		
		если сч = 0 тогда
			Результат = Новый Структура;
			Результат.Вставить("Номенклатура", строкасостава.номенклатура);
			Результат.Вставить("Количество", строкасостава.Количество * Количество);
			
		иначе
			ДобавитьПозициюНоменклатуры(строкасостава, Истина, Количество);
		конецесли;
		сч = сч + 1;
	конеццикла;
	
	Возврат Результат;
	
конецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)  	
	ПриИзмененииНоменклатуры() ;	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТовара = Неопределено) 
	
	Если СтрокаТовара = Неопределено Тогда
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
		иначе
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		КонецЕсли;
	КонецЕсли;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(Номенклатура, СтрокаТовара.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				Номенклатура = СтрокаТовараСтруктура.Номенклатура;
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Количество   = СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				СерииНоменклатурыВидны 	= Истина;		
				Элементы.ТоварыСерияНоменклатуры.Видимость 	= Истина;	
				Элементы.ТоварыСерияНоменклатуры1.Видимость = Истина;	
			КонецЕсли;             				
		КонецЕсли;
		
		СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
		
		если ИспользоватьСкидки тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);
		иначе
			СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		КонецЕсли;
		
		ПересчитатьСтроку(, , , СтрокаТовара);
		ТоварыПриИзмененииНаСервере();	
		ПоказатьТовар();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   остатоктоваравстроке(Номенклатура, Количество)
	
	если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
		Возврат 0;			
	Иначе		
		Возврат ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, Объект.Склад, Объект.Дата) - Количество;	
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество = 0)
	
	если ИспользоватьСкидки тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоменклатураИлиКлиентПоставщик, Количество, объект.ВидЦен, объект.КлиентПоставщик);
		
	иначе
		возврат 0;
	КонецЕсли;
	
КонецФункции //ПолучитьПроцентСкидкиНаСервере

&НаСервере
Функция   ПолучитьЦенуНаСервере(Номенклатура, Количество)
	
	Цена = 0 ;
	Если ЗначениеЗаполнено(объект.КлиентПоставщик)
		и ТипЗнч(объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		
		Цена = ОпределитьЦенуПоследнейПокупки(Номенклатура);
	КонецЕсли;	
	
	Если Цена = 0 Тогда
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, истина, Количество, Объект.Договор, , , Объект.Ссылка);
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

&НаСервере
Функция   ОпределитьЦенуПоследнейПокупки(Номенклатура)
	
	ОпределитьЦенуПоследнейПокупки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Закупки.Количество,
	|	Закупки.Сумма
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.Номенклатура = &Номенклатура
	|	И Закупки.Поставщик = &Поставщик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Закупки.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Поставщик", Объект.КлиентПоставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = ВыборкаДетальныеЗаписи.Количество;
			Если Количество = 0 Тогда
				ОпределитьЦенуПоследнейПокупки = ВыборкаДетальныеЗаписи.Сумма;
			Иначе
				ОпределитьЦенуПоследнейПокупки = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			
		КонецЦикла;                            	
	КонецЕсли;
	
	Возврат ОпределитьЦенуПоследнейПокупки;
	
КонецФункции //ОпределитьЦенуПоследнейПокупки

&наклиенте
процедура ПересчитатьСтроку(изколичества = ложь, изпроцентаскидки = ложь, изсуммы = ложь, СтрокаТовара = Неопределено)
	
	если не изсуммы тогда
		
		Если СтрокаТовара = Неопределено Тогда
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
		иначе
			СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		КонецЕсли;
		КонецЕсли;
		
		Номенклатура = СтрокаТовара.Номенклатура;
		
		Если УчетПоСериям 
			И НЕ СтрокаТовара.Количество = 1 Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
			КонецЕсли;             				
		КонецЕсли;
		
		если ИспользоватьСкидки тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
			если не изпроцентаскидки тогда
				СтрокаТовара.ПроцентСкидки = ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.Количество);	
			КонецЕсли;
			
			если не СтрокаТовара.СуммаБезСкидки = 0 тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
			иначе
				СтрокаТовара.Сумма = 0;
			КонецЕсли;
			
		иначе
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;		
		КонецЕсли;	
		
		Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
			СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(Номенклатура, СтрокаТовара.Количество) ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере         
процедура ПересчитатьСтрокуНаСервере(СтрокаТовара)
	
	если ИспользоватьСкидки тогда
		
		СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
		если не СтрокаТовара.СуммаБезСкидки = 0 тогда
			СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
		иначе
			СтрокаТовара.Сумма = 0;
		КонецЕсли;
		
	иначе
		СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(истина);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере();
	ВывестиИнформациюНаДисплейПокупателя();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере()
	ТоварыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	ПолучитьКлиентаНаСервере(МКод);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлиентаНаСервере(МКод)
	
	если не ДокументЗаблокирован Тогда
		
		Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
		Если Клиент <> Неопределено Тогда
			Объект.КлиентПоставщик = Клиент;
		Иначе
			ПустаяСсылка = Новый (Тип("СправочникСсылка.Клиенты"));
			Объект.КлиентПоставщик = ПустаяСсылка;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден."));
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	Результат = Истина;
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина);
	
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
		СтрокаДисплеяПокупателя = РезультатОбработки;	
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") тогда
		РезультатОбработки = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
		если ЗначениеЗаполнено(РезультатОбработки) Тогда
			объект.Сотрудник = РезультатОбработки;
		иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар или сотрудник по Штрих-Коду не найден (") + ТекКод + ").");
			Результат = Ложь;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден(") + ТекКод + ").");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 	
	ПересчитатьСтроку(истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)	
	ПересчитатьСтроку();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)	
	пересчитатьСтроку(ложь, истина)  ;	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если не СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Цена = СтрокаТовара.СуммаБезСкидки / СтрокаТовара.Количество;
	КонецЕсли;
	пересчитатьСтроку(, , , СтрокаТовара)	;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Дисплей = Неопределено;
	
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Расчет Тогда
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" К ОПЛАТЕ:") + " " + Формат(Объект.СуммаДокумента, ФорматнаяСтрока), ДлинаТекста));
		
		Доплата = Объект.СуммаДокумента - Объект.СуммаОплаты;
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("    СДАЧА:") + " " + Формат(Объект.Сдача, ФорматнаяСтрока), ДлинаТекста));
		
	Иначе
		
		ДПТекст1 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(СтрокаДисплеяПокупателя, ДлинаТекста));
		
		ДПТекст2 = ?(
		Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		"",
		Лев(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГО:") + " " + Формат(Объект.ТовараНаСумму, ФорматнаяСтрока), ДлинаТекста));
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"ClearText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
		Дисплей.Ссылка,
		"DisplayText",
		ВходныеПараметры,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При использовании дисплея покупателя произошла ошибка.
			|Дополнительное описание: %ДополнительноеОписание%");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			ВыходныеПараметры[1]);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		элементы.разблокироватьсканер.видимость 	= СканерЗаблокирован;
		элементы.разблокироватьсканер1.видимость 	= СканерЗаблокирован;
		
	Иначе
		ПересчитатьДокументНаКлиенте();
	конецесли;
	
КонецПроцедуры

Процедура ИзменитьВидДокумента() 
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		ЭтоКлиент = ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		
		Если ЭтоКлиент Тогда
			
			Элементы.ПартияПриобретения.Видимость 	= Ложь;
			Элементы.ПартияПриобретения1.Видимость 	= Ложь;
			
			Если объект.ПоступилоДенег = 0 
				и не ТекущийТипДокумента = 5 тогда
				
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдача товара");	
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдать товар и закрыть");				
				ТекущийТипДокумента = 5;
				
			Иначеесли не ТекущийТипДокумента = 4 тогда
				
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация товара");	
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продать товар и закрыть");
				ТекущийТипДокумента = 4;
				
			КонецЕсли;			
			
		Иначе
			Элементы.ПартияПриобретения.Видимость 	= Истина;
			Элементы.ПартияПриобретения1.Видимость 	= Истина;
			
			Если объект.ПоступилоДенег = 0 
				и не ТекущийТипДокумента = 3 тогда
				
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отдать поставщику и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдача Поставщику");	
				ТекущийТипДокумента = 3;
				
			Иначеесли не ТекущийТипДокумента = 2 тогда
				
				Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вернуть поставщику и закрыть");
				ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат Поставщику");	
				ТекущийТипДокумента = 2;
				
			КонецЕсли;			
			
		КонецЕсли;
		
	иначе
		Элементы.ПартияПриобретения.Видимость 	= Ложь;
		Элементы.ПартияПриобретения1.Видимость 	= Ложь;
		ЭтоКлиент = Ложь;
		
		Если объект.ПоступилоДенег = 0 
			и не ТекущийТипДокумента = 1 тогда
			
			ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара");	
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать товар и закрыть");
			ТекущийТипДокумента = 1;
			
		иначеесли не ТекущийТипДокумента = 6 тогда 	
			
			ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара за деньги");	
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать товар, принять деньги и закрыть");
			ТекущийТипДокумента = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаПровестиИЗакрыть1.Заголовок = Элементы.ФормаПровестиИЗакрыть.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуммуСУчетомДолгаКлиента(Команда)
	
	ВзятьСуммуПоДокументуНаСервере();
	ПоказатьДолгКлиентаПоставщика();
	Элементы.ТекущийДолг.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий долг (") + формат(ОбщийМодульКлиент.ПользователяТекущаяДата(), "ДФ='dd.MM.yy ЧЧ:мм'") + ")";
	Элементы.ТекущийДолг1.Заголовок = Элементы.ТекущийДолг.Заголовок;
	
	Объект.ПоступилоДенег = Объект.ПоступилоДенег + ТекущийДолг;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента() ;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	если НЕ ПараметрыЗаписи.режимзаписи = РежимЗаписиДокумента.Запись тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ОбработатьБлокировку(ПриСозданииФормы = ложь);
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда		
		
		если не ПредставитьДокументРасходаТовараДвумяКолонками тогда
			Элементы.ТоварыВводШтрихКода.Доступность 			= Ложь;
			Элементы.ВзятьСуммуПоДокументу.Доступность 			= Ложь;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Ложь;
			Элементы.ТоварыВводСКоличеством.Доступность 		= Ложь;
			Элементы.ФормаПровестиИЗакрыть.Доступность 			= Ложь;
			Элементы.ФормаПровести.Доступность 					= Ложь;
			Элементы.РаспечататьПровестиИЗакрыть.Заголовок 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать и закрыть");
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию 			= истина;
			Элементы.Записать.Видимость 						= ложь;
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок.Доступность 	= Ложь;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса.Доступность = Ложь;
			Элементы.ТоварыЧастогоСпроса.Видимость 				= ложь;
			Элементы.ЧастныйПокупатель.Видимость 				= ложь;
			
		иначе
			Элементы.ТоварыВводШтрихКода1.доступность 			= Ложь;
			Элементы.ВзятьСуммуПоДокументу1.доступность 		= Ложь;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента1.доступность = Ложь;
			Элементы.ТоварыВводСКоличеством1.доступность 		= Ложь;
			Элементы.ФормаПровестиИЗакрыть1.доступность 		= Ложь;
			Элементы.ФормаПровести1.доступность 				= Ложь;
			Элементы.РаспечататьПровестиИЗакрыть1.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать и закрыть");
			Элементы.ФормаЗакрыть1.КнопкаПоУмолчанию 			= истина;
			Элементы.Записать1.Видимость 						= ложь;
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок1.доступность 	= Ложь;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса1.Доступность 	= Ложь;
			Элементы.ГруппаКомандыТаблицы.Видимость 			= ложь;
			Элементы.ЧастныйПокупатель1.Видимость 				= ложь;
			
		КонецЕсли;
		
	Иначе
		если не ПредставитьДокументРасходаТовараДвумяКолонками тогда
			Элементы.ТоварыВводШтрихКода.Доступность 			= Истина;
			Элементы.ВзятьСуммуПоДокументу.Доступность 			= Истина;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента.Доступность 	= Истина;
			Элементы.ТоварыВводСКоличеством.Доступность 		= истина;
			Элементы.ФормаПровестиИЗакрыть.Доступность 			= истина;
			Элементы.ФормаПровести.Доступность 					= Истина;
			Элементы.Записать.Видимость 						= истина;
			Элементы.РаспечататьПровестиИЗакрыть.Заголовок 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать, провести и закрыть");
			Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию 	= истина;
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок.Доступность 	= истина;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса.Доступность = истина;
			Элементы.ТоварыЧастогоСпроса.Видимость 				= истина;
			Элементы.ЧастныйПокупатель.Видимость 				= УчетПоКлиентам и не объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
		иначе
			Элементы.ТоварыВводШтрихКода1.доступность 			= Истина;
			Элементы.ВзятьСуммуПоДокументу1.доступность 		= Истина;
			Элементы.ВзятьСуммуСУчетомДолгаКлиента1.доступность = Истина;
			Элементы.ТоварыВводСКоличеством1.доступность 		= истина;
			Элементы.ФормаПровестиИЗакрыть1.доступность 		= истина;
			Элементы.ФормаПровести1.доступность 				= Истина;
			Элементы.Записать1.Видимость 						= истина;
			Элементы.РаспечататьПровестиИЗакрыть1.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Распечатать, провести и закрыть");
			Элементы.ФормаПровестиИЗакрыть1.КнопкаПоУмолчанию 	= истина;		
			Элементы.ТоварыНазначитьСкидкуДляВсехСтрок1.доступность 	= истина;
			Элементы.ТоварыПозицияИзСпискаЧастогоСпроса1.Доступность 	= истина;
			Элементы.ГруппаКомандыТаблицы.Видимость 			= истина;
			Элементы.ЧастныйПокупатель1.Видимость 				= УчетПоКлиентам и не объект.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо;
			
		КонецЕсли;
		ТекущийТипДокумента = 0;
		ИзменитьВидДокумента() ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	Если СтрокаТовара.Количество = 0 Тогда
		СтрокаТовара.Количество = 1;		
	КонецЕсли;
	
	если ИспользоватьСкидки тогда
		Если СтрокаТовара.СуммаБезСкидки = 0 Тогда
			СтрокаТовара.СуммаБезСкидки = строкатовара.цена * строкатовара.количество;
		КонецЕсли;
		
		СтрокаТовара.ПроцентСкидки = (СтрокаТовара.СуммаБезСкидки - СтрокаТовара.Сумма) / (СтрокаТовара.СуммаБезСкидки / 100);	
	КонецЕсли;
	
	пересчитатьСтроку(ложь, ложь, истина, СтрокаТовара)	;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент) 	
	ВидЦенПриИзмененииНаСервере();      	
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		и ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
	Для Каждого СтрокаТовара из Объект.Товары Цикл
		СтрокаТовара.Цена = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество);
		
		если ИспользоватьСкидки тогда
			СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
			если не СтрокаТовара.СуммаБезСкидки = 0 тогда
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * СтрокаТовара.СуммаБезСкидки / 100;
			иначе
				СтрокаТовара.Сумма = 0;
			КонецЕсли;
			
		иначе
			СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикПриИзменении(Элемент)    	
	
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ((ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") И СопровождатьКлиентовИзображениями)
		ИЛИ (ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") И СопровождатьПоставщиковИзображениями)) Тогда
		
		ПоказатьИзображениеРеквизита(Объект.КлиентПоставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеКонтрагента()
	
	ПроверитьСменуТипа();
	ПоказатьДолгКлиентаПоставщика();
	КлиентПриИзмененииНаСервере();
	ПересчитатьДокументНаКлиенте();
	ИзменитьВидДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, СтрокаТовара.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры() 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") ТОгда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКурс(Валюта, Дата)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, Дата);
	Иначе
		Возврат 1;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	если не ТекущаяВалюта = объект.Валюта тогда
		ПересчитатьСуммуПриСменеВалюты();          	
	КонецЕсли;
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
	элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаСервере
процедура ПересчитатьСуммуПриСменеВалюты()
	
	Если ЗначениеЗаполнено(объект.Валюта) 
		и не объект.ПоступилоДенег = 0 Тогда
		
		объект.ПоступилоДенег = ОбщийМодульСервер.ПоКурсу(объект.ПоступилоДенег, объект.Валюта, ТекущаяВалюта, объект.Дата);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КурсОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
		элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
		элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
		
КонецПроцедуры

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	Если Объект.Курс = 0 Тогда
		Объект.Курс = 1;
	КонецЕсли;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		и ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;
	
	Если ВестиУчетПоСкладу
		и ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", истина);
	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	если ПредставитьДокументРасходаТовараДвумяКолонками тогда
		СтрокаТовара = Элементы.Товары1.ТекущиеДанные;	
	иначе
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			Элементы.Товары1.ТекущиеДанные.Номенклатура = Номенклатура;	
			ПриИзмененииНоменклатуры() ;
			элементы.Товары1.ЗакончитьРедактированиеСтроки(лОЖЬ);
			Элементы.Товары1.ТекущийЭлемент = элементы.ТоварыКоличество1;
			
		иначе
			Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
			ПриИзмененииНоменклатуры() ;
			элементы.Товары.ЗакончитьРедактированиеСтроки(лОЖЬ);
			Элементы.Товары.ТекущийЭлемент = элементы.ТоварыКоличество;
			
		КонецЕсли; 
		
	иначе
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			элементы.Товары1.ЗакончитьРедактированиеСтроки(истина);			
		иначе
			элементы.Товары.ЗакончитьРедактированиеСтроки(истина);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, Объект.Склад);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Валюты", ДанныеВыбора, Текст, Объект.Валюта);
	
	если не ТекущаяВалюта = объект.Валюта тогда
		ПересчитатьСуммуПриСменеВалюты();          	
	КонецЕсли;
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
	элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", Ложь);
	СтруктураДляВВода.Вставить("ВызовИзРасходаТовара", истина);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		
		если ОбщийМодульПовтор.ЭтоНабор(СтруктураПараметров.Номенклатура) 
			и ОбщийМодульТоварСервер.ПроверитьСерийностьЭлементовНабора(СтруктураПараметров.Номенклатура) тогда
			
			СтрокаТовараСтруктура = ДобавитьСоставНабораВСвязиССерийнымУчетомКомпонент(СтруктураПараметров.Номенклатура, СтруктураПараметров.Количество);
			
			если не СтрокаТовараСтруктура = неопределено тогда
				СтруктураПараметров.Номенклатура 	= СтрокаТовараСтруктура.Номенклатура;
				СтруктураПараметров.Количество 		= СтрокаТовараСтруктура.Количество;
			конецесли;
		конецесли;
		
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Товары1;
		иначе
			ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТоварыПриИзмененииНаСервере();
	РассчитатьЧтоОстанетсяСУчетомПоступления(); 	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере()
	
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
	элементы.ТоварыИтогКоличество.Видимость 		= не объект.ТовараВКоличестве = 0;
	элементы.ТоварыИтогКоличество1.Видимость 		= элементы.ТоварыИтогКоличество.Видимость;
	элементы.ТоварыИтогСумма.Видимость 				= не Объект.ТовараНаСумму = 0;
	элементы.ТоварыИтогСумма1.Видимость 			= элементы.ТоварыИтогСумма.Видимость;
	элементы.НаименованиеОсновнойВалюты1.Видимость 	= не Объект.ТовараНаСумму = 0;
	элементы.НаименованиеОсновнойВалюты3.Видимость 	= элементы.НаименованиеОсновнойВалюты1.Видимость;
	
	Если ПоступилоРавноСумме Тогда
		
		ИзменитьВидДокумента() ;
		
		Если ИспользоватьСложныйМеханизмЦен
			и ЗначениеЗаполнено(объект.ВидЦен) тогда
			
			если не ЗначениеЗаполнено(объект.Валюта) Тогда 				
				Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
			иначе
				Объект.ПоступилоДенег = ОбщийМодульСервер.ПоКурсу(Объект.ТовараНаСумму, объект.Валюта, Объект.ВидЦен.ВалютаЦены, объект.Дата);		
			КонецЕсли;
			
		КонецЕсли;		
		
		РассчитатьЧтоОстанетсяСУчетомПоступления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УкажитеВидДокументаПриИзменении(Элемент)
	
	объект.КлиентПоставщик = УкажитеВидДокументаПриИзмененииНаСервере(УкажитеВидДокумента);
	ИзменитьВидДокумента() ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УкажитеВидДокументаПриИзмененииНаСервере(УкажитеВидДокументаБК)
	
	Если УкажитеВидДокументаБК = Перечисления.ВидыДокументаРасходаТовара.ВозвратПоставщику Тогда  		
		Возврат Справочники.Поставщики.ФизическоеЛицо ;
	ИначеЕсли УкажитеВидДокументаБК = Перечисления.ВидыДокументаРасходаТовара.Реализация Тогда
		Возврат Справочники.Клиенты.ФизическоеЛицо;
	Иначе
		Возврат Справочники.Клиенты.ПустаяСсылка() ;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	конецесли;
	
	Если Не Отказ Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
			
			Если не значениеЗаполнено(объект.КлиентПоставщик) 
				и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали Клиента или Поставщика.") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списать этот товар?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = Истина;
				
			ИначеЕсли ВестиУчетДвиженияДенег
				и объект.КлиентПоставщик = ФизическоеЛицо 
				и не объект.ТовараНаСумму = ПоступилоДенегПоКурсу 
				и Вопрос("" + ФизическоеЛицо + ?(объект.ТовараНаСумму > ПоступилоДенегПоКурсу, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" НЕ доплатил: "), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" переплатил: ")) + сокрлп(?(объект.ТовараНаСумму - ПоступилоДенегПоКурсу > 0, объект.ТовараНаСумму - ПоступилоДенегПоКурсу, -(объект.ТовараНаСумму - ПоступилоДенегПоКурсу))) + " ?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				
				Отказ = Истина;
				
			ИначеЕсли объект.Товары.Количество() > 10 Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документа.."));	
			КонецЕсли;
			
		ИначеЕсли объект.Товары.Количество() > 10 Тогда
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));
		КонецЕсли;
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	если не отказ тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Серия повторяется!");
					Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.номенклатура) тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" обязательная Серия НЕ указана!");
				Сообщение.Поле 	= "ТоварыСерияНоменклатуры";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат отказ;
	
КонецФункции //ПроверитьУчетПоСериям

&НаКлиенте
Процедура ПоступилоДенегПриИзменении(Элемент)
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	ИзменитьВидДокумента() ;
	
КонецПроцедуры

&НаСервере
процедура РассчитатьЧтоОстанетсяСУчетомПоступления()
	
	если (УчетПоКлиентам или УчетПоПоставщикам) тогда
		
		ПоступилоДенегПоКурсу = ОбщийМодульСервер.ПоКурсу(Объект.ПоступилоДенег, , Объект.Валюта, Объект.Дата);
		
		ОстанетсяСУчетомПоступления = 0;
		
		если ЗначениеЗаполнено(объект.КлиентПоставщик)
			и не объект.КлиентПоставщик.Предопределенный тогда
			
			если ИспользоватьУчетВалют тогда
				
				Если ИспользоватьСложныйМеханизмЦен
					и ЗначениеЗаполнено(объект.ВидЦен)
					и ЗначениеЗаполнено(объект.ВидЦен.ВалютаЦены) Тогда
					
					валютапродажи = объект.ВидЦен.ВалютаЦены;
				иначе
					валютапродажи = Справочники.Валюты.ОсновнаяВалюта ;		
				КонецЕсли;
				
				Если ЗначениеЗаполнено(объект.Валюта) Тогда
					валютапоступления = объект.Валюта;
				иначе
					валютапоступления = Справочники.Валюты.ОсновнаяВалюта ;		
				КонецЕсли;
				
				ОстанетсяСУчетомПоступления = (ТекущийДолг + ?(валютапоступления = валютапродажи, Объект.ТовараНаСумму, ОбщийМодульСервер.ПоКурсу(Объект.ТовараНаСумму, валютапоступления, валютапродажи, объект.Дата)) - объект.ПоступилоДенег ) * объект.Курс;		
				
			иначеЕсли ВестиУчетДвиженияДенег тогда
				
				ОстанетсяСУчетомПоступления = ТекущийДолг + Объект.ТовараНаСумму - объект.ПоступилоДенег;
				
			КонецЕсли; 	
			элементы.ОстанетсяСУчетомПоступления.Видимость 	= не ОстанетсяСУчетомПоступления = 0;
			элементы.ОстанетсяСУчетомПоступления1.Видимость = элементы.ОстанетсяСУчетомПоступления.Видимость;
			
		иначе
			элементы.ОстанетсяСУчетомПоступления.Видимость 	= ложь;
			элементы.ОстанетсяСУчетомПоступления1.Видимость = ложь;
			
		КонецЕсли; 	
		
	иначе
		элементы.ОстанетсяСУчетомПоступления.Видимость 	= ложь;
		элементы.ОстанетсяСУчетомПоступления1.Видимость = ложь;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПровестиИЗакрыть(Команда)
	
	ПараметрыФормы = Новый структура;
	ПараметрыФормы.Вставить("СразуНаПечать", Истина);
	ПараметрыФормы.Вставить("СразуЗакрыть", Истина);
	
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	Печать(ФормаПечати.Результат,Объект.Ссылка);
	
	ФормаПечати.Результат.ОтображатьСетку = Ложь;
	ФормаПечати.Результат.Защита = Истина;
	ФормаПечати.Результат.ТолькоПросмотр = Истина;
	ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать:") + " " + ЭтаФорма.Заголовок;
	ФормаПечати.открыть();	
	
	если не ДокументЗаблокирован тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));	
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура Печать(ТабДок, ПараметрКоманды)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал Расход товара "), 2);
	Документы.РасходыТовара.Печать(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСкидкуДляВсехСтрок(Команда)
	
	РазмерСкидки = 0;
	
	если ВвестиЧисло(РазмерСкидки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите %процент скидки:"), 10,4 ) тогда
		
		НазначитьСкидкуДляВсехСтрокНаСервере(РазмерСкидки);                                                                        	
	КонецЕсли;
	ТоварыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСкидкуДляВсехСтрокНаСервере(РазмерСкидки)
	
	Для каждого СтрокаТовара Из Объект.товары Цикл
		
		СтрокаТовара.процентСкидки = РазмерСкидки;
		ПересчитатьСтрокуНаСервере(СтрокаТовара);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	сменитьвидотображениядокумента();
	ПроверкаВидаОтображенияДокумента() ;
	ОбработатьБлокировку();
	Этаформа.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура сменитьвидотображениядокумента()
	
	ПредставитьДокументРасходаТовараДвумяКолонками = не ПредставитьДокументРасходаТовараДвумяКолонками;
	Константы.ПредставитьДокументРасходаТовараДвумяКолонками.Установить(ПредставитьДокументРасходаТовараДвумяКолонками) ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияИзСпискаЧастогоСпроса(Команда)
	
	СписокНоменклатурыЧастогоСпроса = ОбщийМодульПовтор.ПолучитьСписокНоменклатурыБыстрогоСпроса();	
	
	если СписокНоменклатурыЧастогоСпроса.количество() тогда
		
		формаменеджерапозицийчастогоспроса = получитьформу("РегистрСведений.НоменклатураЧастогоСпроса.ФормаСписка");
		формаменеджерапозицийчастогоспроса.открытьМодально();
		ОбновитьЧастыйСпрос();
		
	иначе
		РаботаетВыборЧастогоСпроса = истина;
		
		если ПредставитьДокументРасходаТовараДвумяКолонками тогда
			
			попытка
				выполнить(" элементы.ТоварыНоменклатура1.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать; ");
			исключение //старая 1С				
			КонецПопытки;
			
			элементы.Товары1.ДобавитьСтроку();			
			ТекущиеДанные = Элементы.Товары1.ТекущиеДанные;
			
			Номенклатура = ВыбратьИзСписка(СписокНоменклатурыЧастогоСпроса, ТекущиеДанные.Номенклатура); 
			если не Номенклатура = Неопределено тогда
				ТекущиеДанные.Номенклатура = Номенклатура.Значение;
				элементы.Товары1.ЗакончитьРедактированиеСтроки(ложь); 	
				ПриИзмененииНоменклатуры() ;
			иначе
				элементы.Товары1.ЗакончитьРедактированиеСтроки(истина);
			КонецЕсли;
			
			попытка
				выполнить(" элементы.ТоварыНоменклатура1.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто; ");
			исключение //старая 1С				
			КонецПопытки;
			
		иначе
			попытка
				выполнить(" элементы.ТоварыНоменклатура.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать; ");
			исключение //старая 1С				
			КонецПопытки;
			
			элементы.Товары.ДобавитьСтроку();
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Номенклатура = ВыбратьИзСписка(СписокНоменклатурыЧастогоСпроса, ТекущиеДанные.Номенклатура) ;
			если не Номенклатура = Неопределено тогда
				ТекущиеДанные.Номенклатура = Номенклатура.Значение;
				элементы.Товары.ЗакончитьРедактированиеСтроки(ложь);	                                   	
				ПриИзмененииНоменклатуры() ;
			иначе
				элементы.Товары.ЗакончитьРедактированиеСтроки(истина);
			КонецЕсли;
			
			попытка
				выполнить(" элементы.ТоварыНоменклатура.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто; ");
			исключение //старая 1С				
			КонецПопытки;
			
		КонецЕсли;
		
		РаботаетВыборЧастогоСпроса = ложь;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатура1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатура1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = не РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ЧастныйПокупатель(Команда)
	
	объект.КлиентПоставщик = ФизическоеЛицо;
	ПриСменеКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура Валюта1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяВалюта = объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяВалюта = объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	объект.Курс = ОбновитьКурс(Объект.Валюта, Объект.Дата);	
	элементы.Курс.Видимость 	= не объект.Курс = 1 и ИспользоватьУчетВалют;
	элементы.Курс1.Видимость 	= элементы.Курс.Видимость;
	
	РассчитатьЧтоОстанетсяСУчетомПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ПереСчитатьУчетныеОстатки()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.ОстатокСУчетомДокумента = остатоктоваравстроке(СтрокаТовара.Номенклатура, СтрокаТовара.Количество) ;	
	КонецЦикла;
	
КонецПроцедуры //ПереСчитатьУчетныеОстатки

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументах Тогда
		ПереСчитатьУчетныеОстатки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = Ложь;
	элементы.разблокироватьсканер.видимость 	= СканерЗаблокирован;
	элементы.разблокироватьсканер1.видимость 	= СканерЗаблокирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Организация)
		И СопровождатьОрганизацииИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) тогда
		если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС") Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если не объект.Договор.Организация = Объект.Организация Тогда		
				объект.Договор = Справочники.Договора.ПустаяСсылка() ;	
			КонецЕсли;
			
		Иначеесли ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
			Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.КлиентПоставщик, Объект.Дата, Объект.ВидЦен);
		КонецЕсли;	
				  КонецЕсли;
		Если ВестиУчетПоСкладу
			и не ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	ПриСменеКонтрагента();
	
	Если ПоказыватьИзображения
		И ЗначениеЗаполнено(Объект.Договор)
		И СопровождатьДоговораИзображениями Тогда
		
		ПоказатьИзображениеРеквизита(Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда //насильно
		
		Если НЕ Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик;             	
		КонецЕсли;
		
		если не Объект.КлиентПоставщик 	= Объект.Договор.КлиентПоставщик тогда
			Объект.Организация 		= Объект.Договор.Организация;             	
		КонецЕсли;
		
		ПредусматриваетСтрогиеЦены = Объект.Договор.ПредусматриваетСтрогиеЦены;
		Если ПредусматриваетСтрогиеЦены Тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, ПредусматриваетСтрогиеЦены, Строкатовара.Цена, Объект.Ссылка);
				
				Если НЕ Цена = СтрокаТовара.Цена Тогда
					СтрокаТовара.ПроцентСкидки 	= 0;
					СтрокаТовара.Цена 			= Цена;
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;
					СтрокаТовара.Сумма 			= СтрокаТовара.СуммаБезСкидки;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;				
		
	Иначе		
		Дата 	= Объект.Дата;
		ВидЦен 	= Объект.ВидЦен;
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, , , Строкатовара.Цена, Объект.Ссылка);
			
			если ИспользоватьСкидки тогда
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Количество * СтрокаТовара.Цена;	
				СтрокаТовара.ПроцентСкидки 	= ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество);	
				
				если не СтрокаТовара.СуммаБезСкидки = 0 тогда
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - СтрокаТовара.ПроцентСкидки * (СтрокаТовара.СуммаБезСкидки / 100);
				иначе
					СтрокаТовара.Сумма = 0;
				КонецЕсли;
				
			иначе
				СтрокаТовара.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;		
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если не отказ
		И ЗначениеЗаполнено(объект.КлиентПоставщик)
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС") Тогда
		
		Если не ЗначениеЗаполнено(Объект.Договор) тогда
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
				
				ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора");
				
				Если ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора= '00010101000000' 
					или ДатаСКоторойТребуетсяОбязательноеУказаниеДоговора <= Объект.Дата Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы не указали обязательный Договор с контрагентом!");
					Сообщение.Поле  = "Договор";
					Сообщение.УстановитьДанные(ТекущийОбъект);
					Сообщение.Сообщить();
					
					Отказ = Истина;
					
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли Объект.Договор.ПредусматриваетСтрогиеЦены тогда
			
			Договор = Объект.Договор;
			Дата 	= Объект.Дата;
			ВидЦен 	= Объект.ВидЦен;
			
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				
				Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Строкатовара.Номенклатура, ВидЦен, Дата, Ложь, СтрокаТовара.Количество, Договор, Истина, Строкатовара.Цена, Объект.Ссылка);
				Если НЕ Строкатовара.Цена = Цена тогда
					
					Отказ = Истина;
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена в строке №") + " " + СтрокаТовара.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не соответствует строгой цене из договора: " + Цена);
					Сообщение.УстановитьДанные(Объект);					
					Сообщение.Сообщить();
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		Для Каждого СтрокаТовара Из ТекущийОбъект.Товары Цикл
			
			Если СтрокаТовара.процентскидки = 0
				и строкатовара.суммабезскидки = 0 Тогда
				
				строкатовара.суммабезскидки = строкатовара.сумма;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если не отказ
		И не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег") ;
		Если не ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
			Объект.ХранилищеДенег = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте ;
		КонецЕсли;
	КонецЕсли;
	
	Если не отказ 
		и ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура ПодготовкаКПроведению(Отказ)
	
	Если Не Отказ тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	Ссылка = Объект.Ссылка;
	Валюта = Объект.Валюта;
	Дата   = Объект.Дата;
	видцен = Объект.ВидЦен;
	ПоступилоДенег    = объект.ПоступилоДенег;
	ХранилищеДенег = объект.ХранилищеДенег;
	ЭтоЗаказ = Объект.ЭтоЗаказ;
	Товары = Объект.Товары;
	Договор = Объект.Договор;
	КлиентПоставщик = Объект.КлиентПоставщик;
	ТовараНаСумму = Объект.ТовараНаСумму;
	ТовараВКоличестве = Объект.ТовараВКоличестве;	
	Склад = Объект.Склад;
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
	Клиент 							 = ЗначениеЗаполненоКлиентПоставщик И (ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты"));
	ВестиУчетДвиженияДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
	
	ВестиУчетЗаказовКлиентов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
	
	Если ТовараВКоличестве = 0
		и не ТовараНаСумму = 0 
		и не ЗначениеЗаполненоКлиентПоставщик Тогда
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание услуги? Контрагент не указан!"), , Объект.Ссылка);
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
		и ЗначениеЗаполнено(Договор) Тогда
		
		Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, Ложь, ПоступилоДенег, Ссылка);
	КонецЕсли;
	
	Если Не Отказ ТОгда
		
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") ;
		ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
		
		ВестиУчетПоСкладам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		
		Если ВестиУчетПоСкладам
			и НЕ ЗначениеЗаполнено(Склад) Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
			
			Отказ = Истина;	
		КонецЕсли;
		
		Если ИспользоватьСложныйМеханизмЦен
			и ЗначениеЗаполнено(видцен)
			и ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
			
			ВалютаЦены = видцен.ВалютаЦены ;
		иначе
			ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
		КонецЕсли;
		
		ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
		ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
		
		ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
		ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать) ;
		
		СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Объект.ссылка, склад, дата, ОстаткиСледуетПроверять);
		ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
		
		если ОстаткиСледуетПроверять тогда
			ГТ = СтруктураТаблиц.ТаблицаОстатков;	
		КонецЕсли;	
		
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			
			Номенклатура 	  = ТекСтрокаТовары.Номенклатура;
			СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			Количество 		  = ТекСтрокаТовары.Количество;
			КоличествоОстаток = неопределено;
			
			если ОстаткиСледуетПроверять тогда
				СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
				
				Если не СтрокаОстаток = Неопределено Тогда
					ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
					ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
					
				иначе
					ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
					ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
					
				КонецЕсли;			
				
			иначе 			
				ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
				
			КонецЕсли;	
			
			если не ПредопределенныйТовар
				и не этонабор тогда
				
				если ОстаткиСледуетПроверять тогда
					Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, Истина, КоличествоОстаток, Объект.Ссылка);	
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не отказ тогда
				
				сумма 	 = ТекСтрокаТовары.Сумма;
				СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
				
				если ЭтоНабор Тогда 										
					отказ = обработатьОТКАЗдвижениядлянабора(Номенклатура, ТекСтрокаТовары.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	если НЕ ПоступилоДенег = 0 
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") тогда
		
		Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
			ФормаОплаты = ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;				
		КонецЕсли;
		
		Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Объект.Ссылка);	
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьНаОтказ

&НаСервере
Функция   обработатьОТКАЗдвижениядлянабора(Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			отказ = обработатьОТКАЗдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка);
		иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если НЕ ПредопределенныйТовар Тогда
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Объект.Склад, НоменклатураСостава, Количество, Объект.Дата, Истина, , Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	ПоказатьТовар();	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТовар()
	
	Если ПоказыватьИзображения
		И СопровождатьНоменклатуруИзображениями Тогда
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;	
		
		Если Не СтрокаТовара = Неопределено Тогда
			Номенклатура = СтрокаТовара.Номенклатура;
			Если ЗначениеЗаполнено(Номенклатура) ТОгда
				Если не Номенклатура = НоменклатураИзображения Тогда
					НоменклатураИзображения = Номенклатура;
					ЕстьЧтоПоказать = ПоказатьИзображениеРеквизита(Номенклатура);	
				КонецЕсли;
			КонецЕсли;			                     	
		КонецЕсли;
		
		Если НоменклатураИзображения = Неопределено Тогда
			элементы.СсылкаНаИзображение.Видимость     = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость  = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция   ПоказатьИзображениеРеквизита(ЭлементСИзображением)
			
	ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ЭлементСИзображением);
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
		
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Если СтруктураИзображения.ИзображениеВБазеДанных ТОгда
			элементы.СсылкаНаИзображение.Видимость     = Ложь;
			элементы.ИзображениеВБазеДанных.Видимость  = Истина;
			
			если СтруктураИзображения.РазмерПриОтображении = 1 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
			иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
			иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
			иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
				элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
			конецесли; 
			
		иначе
			элементы.СсылкаНаИзображение.Видимость     = Истина;
			элементы.ИзображениеВБазеДанных.Видимость  = Ложь;
		КонецЕсли; 		
		
		Результат = Истина;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьИзображения(Команда)
	
	ПоказыватьИзображения = не ПоказыватьИзображения;
	если не ПоказыватьИзображения Тогда
		элементы.СсылкаНаИзображение.Видимость     = Ложь;
		элементы.ИзображениеВБазеДанных.Видимость  = Ложь;	
		элементы.СсылкаНаИзображение1.Видимость    = Ложь;
		элементы.ИзображениеВБазеДанных1.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГарантийногоТалона(Команда)
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ПечатьГарантийногоТалонаНаСервере(ФормаПечати.Результат, Объект.Ссылка);

	ФормаПечати.Результат.ОтображатьСетку = Ложь;
	ФормаПечати.Результат.Защита 		  = Истина;
	ФормаПечати.Результат.ТолькоПросмотр  = Истина;
	ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Гарантийный талон");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаСервере
Процедура ПечатьГарантийногоТалонаНаСервере(ТабДок, ПараметрКоманды)  
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Напечатал гарантийный талон. "), 2);
	ОбщийМодульТоварСервер.ПечатьГарантийногоТалона(ТабДок, ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", Истина);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	Если ПредставитьДокументРасходаТовараДвумяКолонками Тогда
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары1);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.номенклатура      = Подбор.номенклатура;
			Строка.СерияНоменклатуры = Подбор.СерияНоменклатуры;
			Строка.Количество        = Подбор.Количество;
			Строка.Цена  = Подбор.Цена;
			Строка.Сумма = Подбор.Сумма;
			
			ПриИзмененииНоменклатуры(Строка);
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры   
