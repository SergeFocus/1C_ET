//sza140614-2213 Хозяин: 
//sza130913-1601 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = Ложь;
	Иначе
	Если НЕ отказ Тогда
		
		Движения.ВаловаяПрибыль.Записать();
		Движения.ОплатаПоЗаказам.Записать();
		Движения.ЗаказыКлиентов.Записать();
		Движения.Деньги.Записать();
		Движения.Закупки.Записать();
		Движения.Расчеты.Записать();
		Движения.РасчетыСОтсрочкой.Записать();
		Движения.Продажи.Записать();
		Движения.Товары.Записать();
		Движения.РасчетыСПоставщиками.Записать();
		Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
		Движения.ПродажиСотрудников.Записать();
		Движения.ТоварыПереданныеНаКомиссию.Записать();
		
		ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах");
		
		ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
		Клиент 						= ЗначениеЗаполненоКлиентПоставщик и ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		ВестиУчетЗаказовКлиентов 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
		ВестиУчетПоКлиентам         = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		ВестиУчетПоПоставщикам      = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		
		ВестиУчетПродажСотрудников  = не ЭтоЗаказ И клиент и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
		ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
		
		ПоступилоДенегТут = 0;
		
		Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода тогда
			Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
				Если Не оплаты.Количество() = 0 Тогда
					
					Для Каждого СтрокаОплаты Из Оплаты Цикл
						ПоступилоДенегТут = ПоступилоДенегТут + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ПоступилоДенег <> 0 Тогда
				ПоступилоДенегТут = ПоступилоДенег * ?(Курс = 0, 1, Курс);	
			КонецЕсли; 	
		КонецЕсли;
		
		Если ЭтоЗаказ Тогда
			Если ВестиУчетЗаказовКлиентов тогда
				
				Сумма = 0;
				
				Для Каждого строкатовар из Товары цикл
					ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьПриход();
					ЗаписьРегистра.Активность 	= Истина;
					ЗаписьРегистра.Количество   = строкатовар.Количество;
					ЗаписьРегистра.Номенклатура = строкатовар.Номенклатура;
					ЗаписьРегистра.Период       = Дата;
					ЗаписьРегистра.Клиент    	= КлиентПоставщик;
					Сумма = Сумма + строкатовар.Сумма
				КонецЦикла;
				
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
					ЗаписьРегистра.Период		= Дата;
					ЗаписьРегистра.Активность 	= Истина;
					ЗаписьРегистра.Заказ   		= Ссылка;
					ЗаписьРегистра.Сумма 		= Сумма;
					
					Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода 
						и не ПоступилоДенегТут = 0 тогда
						
						ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
						ЗаписьРегистра.Период		= Дата;
						ЗаписьРегистра.Активность 	= Истина;
						ЗаписьРегистра.Заказ   		= Ссылка;
						ЗаписьРегистра.Сумма 		= ПоступилоДенегТут;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		Иначе		
			Движения.ЗаказыКлиентов.Записывать = ВестиУчетЗаказовКлиентов;
			
			Если не ОтменитьПроверкиНаОтказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				и ЗначениеЗаполнено(Договор) Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, Ложь, ПоступилоДенегТут, Ссылка);
			КонецЕсли;
			
			Если Не Отказ ТОгда
				
				ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") ;
				ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
				
				ВестиУчетПоСкладам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
				
				Если не ОтменитьПроверкиНаОтказ
					И ВестиУчетПоСкладам
					и НЕ ЗначениеЗаполнено(Склад) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!");
						//Сообщение.Поле 	= "Склад";
						//Сообщение.Сообщить();	
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
					КонецЕсли;
					
					Отказ = Истина;						
				КонецЕсли;
				
				Если ИспользоватьСложныйМеханизмЦен
					и ЗначениеЗаполнено(видцен)
					и ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
					
					ВалютаЦены = видцен.ВалютаЦены ;
				иначе
					ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
				КонецЕсли;
				
				ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
				ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
				
				ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
				И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
				ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
				И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать) ;
				
				былопополнение     = ложь;	
				
				СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ОстаткиСледуетПроверять);
				ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
				
				если ОстаткиСледуетПроверять тогда
					ГТ = СтруктураТаблиц.ТаблицаОстатков;	
				КонецЕсли;	
				
				если ВестиУчетПоСкладам  
					и ЗначениеЗаполнено(склад.СкладПополнения) тогда
					
					ДоступенСкладПополнения = истина;
					СкладПополнения 		= склад.СкладПополнения;
					
				иначе
					ДоступенСкладПополнения = ложь;
				КонецЕсли;
				
				Для Каждого ТекСтрокаТовара Из Товары Цикл
					
					Номенклатура 	  = ТекСтрокаТовара.Номенклатура;
					СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
					КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
					КоличествоОстаток = 0;
					
					если ВестиУчетЗаказовКлиентов тогда
						
						ЗаказКлиентаКлиентПоставщик = Неопределено;
						Если ЗначениеЗаполнено(ТекСтрокаТовара.ЗаказКлиента) Тогда
							ЗаказКлиентаКлиентПоставщик = ТекСтрокаТовара.ЗаказКлиента.КлиентПоставщик;
						иначеесли ЗначениеЗаполнено(ЗаказКлиента) тогда
							ЗаказКлиентаКлиентПоставщик = ЗаказКлиента.КлиентПоставщик;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЗаказКлиентаКлиентПоставщик) Тогда
							ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьРасход();
							ЗаписьРегистра.Активность 	= Истина;
							ЗаписьРегистра.Количество   = Количество;
							ЗаписьРегистра.Номенклатура = Номенклатура;
							ЗаписьРегистра.Период       = Дата;
							ЗаписьРегистра.Клиент    	= ЗаказКлиентаКлиентПоставщик;
						КонецЕсли;
						
					КонецЕсли;
					
					если ОстаткиСледуетПроверять тогда
						СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
						
						Если не СтрокаОстаток = Неопределено Тогда
							
							КоличествоОстаток 	  = СтрокаОстаток.КоличествоОстаток;
							СуммаОстаток 		  = СтрокаОстаток.СуммаОстаток;
							ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
							ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
							
						иначе
							ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
							ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
							СуммаОстаток		  = 0;
							КоличествоОстаток 	  = 0;
							
						КонецЕсли;			
						
					иначе 			
						ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
						ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
						СуммаОстаток 		  = 0;
						КоличествоОстаток 	  = 0;
						
					КонецЕсли;		
					
					если не ПредопределенныйТовар
						и не этонабор тогда
						
						если ДоступенСкладПополнения  тогда //необходимость в дооприходовании товаров из склада пополнения
							Останется = КоличествоОстаток - Количество;
							
							Если останется < 0 Тогда
								
								необходимопополнить = -Останется;
								
								СтруктураОстатка = ОбщийМодульСервер.ОстатокТовара(СкладПополнения, Номенклатура, дата, истина);
								ОстатокНаСкладеПополнения = СтруктураОстатка.Количество;
								
								Если ОстатокНаСкладеПополнения >= необходимопополнить Тогда
									переносить = необходимопополнить;
								Иначе //остатка и там не хватает
									переносить = ОстатокНаСкладеПополнения;					
								КонецЕсли;
								
								Движение = Движения.Товары.Добавить();					
								Движение.Количество 	= переносить;	
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата ;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Склад 			= СкладПополнения;
								Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								ЦенаСписания   = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, переносить, дата, СтруктураОстатка);
								СуммаСписания  = ЦенаСписания * переносить;
								Движение.Сумма = СуммаСписания;
								
								Движение = Движения.Товары.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
								Движение.Период 		= Дата ;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Склад 			= Склад;
								Движение.Количество 	= переносить;					
								Движение.Сумма 			= СуммаСписания;
								Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								КоличествоОстаток = КоличествоОстаток + переносить; 
								СуммаОстаток 	  = СуммаОстаток + СуммаСписания;
								
								былопополнение 	  = истина;
								
							КонецЕсли;
						КонецЕсли;
						
						если не ОтменитьПроверкиНаОтказ
							И ОстаткиСледуетПроверять тогда
							
							Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, Истина, КоличествоОстаток, Ссылка);	
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не отказ тогда
						
						сумма 	 = ТекСтрокаТовара.Сумма;
						цена 	 = ТекСтрокаТовара.цена;					
						СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
						
						если НЕ ЭтоНабор Тогда 				
							
							если не ТаблицаЦенСписания = Неопределено тогда
								
								СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
								Если не СтрокаЦеныСписания = Неопределено Тогда					
									ЦенаСписания = СтрокаЦеныСписания.Цена;					
								иначе
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
								КонецЕсли;
								
							иначе
								ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
							КонецЕсли;
							
							если не отказ
								и не ПредопределенныйТовар тогда
								
								Движение = Движения.Товары.Добавить();					
								Движение.Количество   = Количество;  						
								Движение.Номенклатура = Номенклатура;
								Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
								Движение.Период 	  = Дата;
								Движение.Склад 		  = Склад;
								Движение.Комментарий  = КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								Движение.Сумма = ЦенаСписания * Количество;
								Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;					
								
								Если ВестиУчетВаловойПрибыли Тогда
									
									Если Клиент Тогда //нормальная реализация
										
										Если ЦенаСписания = 0 
											или не (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
											
											Движение = Движения.ВаловаяПрибыль.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											
											Если ЦенаСписания = 0 Тогда
												Движение.Сумма 			= СуммаТов;
												Движение.ПроцентНаценки = 100;
												
											Иначе
												Движение.Сумма 			= СуммаТов - (ЦенаСписания * Количество);
												ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
												Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
												Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
												
											КонецЕсли; 			
											
											Движение.Период 	  = Дата;
											Движение.Номенклатура = Номенклатура;
											Движение.Склад		  = Склад;
											Движение.Комментарий  = КомментарийСтроки;
											
										КонецЕсли;
										
									ИначеЕсли не ЗначениеЗаполненоКлиентПоставщик Тогда
										Движение = Движения.ВаловаяПрибыль.Добавить();
										Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										Движение.Сумма 			= СуммаТов;
										Движение.ПроцентНаценки = 100;
										Движение.Период 		= Дата;
										Движение.Номенклатура 	= Номенклатура;
										Движение.Склад		  	= Склад;
										Движение.Комментарий	= КомментарийСтроки;
										
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
						Иначе //это Набор
							отказ = обработатьДвижениядлянабора(Номенклатура, ТекСтрокаТовара.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
							
						КонецЕсли;
						
						Если ВестиУчетПродажСотрудников Тогда
							Движение = Движения.ПродажиСотрудников.Добавить();
							Движение.Комментарий  = КомментарийСтроки; 
							Движение.Номенклатура = Номенклатура;
							Движение.Период 	  = Дата;
							Движение.Сотрудник    = Сотрудник;
							Движение.Сумма  	  = СуммаТов;
						КонецЕсли;
						
						Если не отказ
							и ЗначениеЗаполненоКлиентПоставщик Тогда
							
							Если Клиент Тогда
								Если НЕ ПередачаДляКомиссионнойТорговли
									ИЛИ НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионера") Тогда
									
								Движение = Движения.Продажи.Добавить();
								Движение.Клиент 	= КлиентПоставщик;
								Движение.Количество = Количество;
								Движение.Сумма 		= СуммаТов;
								Движение.Договор		= Договор;
								Движение.Период 		= Дата;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Комментарий	= КомментарийСтроки;	
																			КонецЕсли;
								
							ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
								Движение = Движения.Закупки.Добавить();
								Движение.Поставщик 	= КлиентПоставщик;
								Движение.Количество = -Количество;
								Движение.Сумма 		= -СуммаТов;
								Движение.Договор		= Договор;
								Движение.Период 		= Дата;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Комментарий	= КомментарийСтроки;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если не ПоступилоДенегТут = 0 
				и ЗначениеЗаполнено(ЗаказКлиента)
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
				
				ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
				ЗаписьРегистра.Период		= Дата;
				ЗаписьРегистра.Активность = Истина;
				ЗаписьРегистра.Заказ   	  = Ссылка;
				ЗаписьРегистра.Сумма 	  = ПоступилоДенегТут;				
			КонецЕсли;
			
			Если не отказ
				и былопополнение Тогда
				
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
					и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада:") + " " + СкладПополнения;
					//Сообщение.Сообщить();                                               	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада:") + " " + СкладПополнения, , Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			Если не отказ 
				и ЗначениеЗаполненоКлиентПоставщик Тогда
				
				Если ЗначениеЗаполнено(ВидЦен)
					и ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда
					
					КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВидЦен.ВалютаЦены, дата);
				Иначе
					КурсТовара = 1;
				КонецЕсли;
				
				ИтогоСумма = товары.Итог("Сумма") * КурсТовара;
				
				Если Клиент 
					И ВестиУчетПоКлиентам тогда
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Клиент 	 = КлиентПоставщик;
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ИтогоСумма;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда						
						Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Клиент 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
						Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
					КонецЕсли;
					
				ИначеЕсли ВестиУчетПоПоставщикам Тогда
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Поставщик 	 = КлиентПоставщик;	
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ИтогоСумма;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Поставщик 	 = КлиентПоставщик;	
						Движение.Договор	 = Договор;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ИтогоСумма;
						Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;	//заказ/не заказ
		
		Если НЕ ПоступилоДенегТут = 0 Тогда
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") тогда
				
				Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах
					И НЕ Оплаты.количество() = 0 Тогда
					
					для каждого СтрокаОплаты Из Оплаты Цикл
						Если ЗначениеЗаполнено(СтрокаОплаты.ХранилищеДенег) Тогда
							ФормаОплаты = СтрокаОплаты.ХранилищеДенег.ФормаОплаты;
						Иначе
							ФормаОплаты = СтрокаОплаты.ФормаОплаты;				
						КонецЕсли;
						
						Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -СтрокаОплаты.Сумма, Дата, ФормаОплаты, СтрокаОплаты.Валюта, СтрокаОплаты.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
						
						если не отказ тогда			
							
							Движение = Движения.Деньги.Добавить();
							Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
							Движение.Период 		= Дата;
							Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
							Движение.Валюта 		= СтрокаОплаты.Валюта;
							Движение.СуммаВВалюте 	= СтрокаОплаты.Сумма;
							Движение.Сумма 			= СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
							Движение.ХранилищеДенег = СтрокаОплаты.ХранилищеДенег;
							Движение.ФормаОплаты 	= ФормаОплаты;	
							
						КонецЕсли;	
					КонецЦикла;				
				иначеЕсли НЕ ПоступилоДенегТут = 0 Тогда
					
					Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
						ФормаОплаты = ХранилищеДенег.ФормаОплаты;
					Иначе
						ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;				
					КонецЕсли;
					
					Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
					
					если не отказ тогда			
						
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= Дата;
						Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
						Движение.Валюта 		= Валюта;
						Движение.СуммаВВалюте 	= ПоступилоДенег;
						Движение.Сумма 			= ПоступилоДенегТут;
						Движение.ХранилищеДенег = ХранилищеДенег;
						Движение.ФормаОплаты 	= ФормаОплаты;	
						
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполненоКлиентПоставщик Тогда
				
				Если Клиент 
					И ВестиУчетПоКлиентам Тогда
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Клиент 	 = КлиентПоставщик;
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ПоступилоДенегТут;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение = Движения.РасчетыСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
						Движение.Клиент 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ПоступилоДенегТут;
						Движение.Период 	 = Дата;
					КонецЕсли;
					
				ИначеЕсли ВестиУчетПоПоставщикам Тогда
					
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Поставщик 	 = КлиентПоставщик;
					Движение.Договор	 = Договор;
					Движение.Период 	 = Дата;
					Движение.Комментарий = Комментарий;
					Движение.Сумма 		 = ПоступилоДенегТут;
					
					Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
						
						Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.Поставщик 	 = КлиентПоставщик;
						Движение.Договор	 = Договор;
						Движение.Комментарий = Комментарий;
						Движение.Сумма 		 = ПоступилоДенегТут;
						Движение.Период 	 = Дата;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;   	
		
		Если не отказ 
			и ПередачаДляКомиссионнойТорговли
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
			
			Для Каждого СтрокаТовара Из Товары Цикл
				Движение 			 = Движения.ТоварыПереданныеНаКомиссию.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
				Движение.ДатаОтчетаПоКомиссии = ДатаОтчетаПоКомиссии;
				Движение.Договор	 		= Договор;
				Движение.Клиент 			= КлиентПоставщик;
				Движение.Количество 		= СтрокаТовара.Количество;
				Движение.Комментарий 	 	= СтрокаТовара.ОСтроке;
				Движение.Номенклатура		= СтрокаТовара.Номенклатура;
				Движение.Период				= Дата;
				Движение.СерияНоменклатуры	= СтрокаТовара.СерияНоменклатуры;
				Движение.Сумма             	= СтрокаТовара.Сумма;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Движения.Деньги.Записывать    = НЕ Отказ;
	Движения.Закупки.Записывать   = НЕ Отказ;
	Движения.Расчеты.Записывать   = НЕ Отказ;
	Движения.Продажи.Записывать   = НЕ Отказ;
	Движения.Товары.Записывать    = НЕ Отказ;
	Движения.РасчетыСОтсрочкой.Записывать= НЕ Отказ;
	Движения.ОплатаПоЗаказам.Записывать  = НЕ Отказ;
	Движения.ВаловаяПрибыль.Записывать   = НЕ Отказ;
	Движения.ЗаказыКлиентов.Записывать   = НЕ Отказ;
	Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
	Движения.ПродажиСотрудников.Записывать   = НЕ Отказ;
	Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
	Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ Отказ;	
															  КонецЕсли;
	
КонецПроцедуры

Функция   ОбработатьДвиженияДляНабора(Знач Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			отказ = обработатьДвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
		иначе
			
			Количество = КоличествоВх * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если не ОтменитьПроверкиНаОтказ
				И НЕ ПредопределенныйТовар Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, Дата, Истина, , Ссылка);
			КонецЕсли;
			
			если не отказ тогда
				
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, Валюта, , Дата);
				
				ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата);
				
				если не ПредопределенныйТовар тогда
					Движение = Движения.Товары.Добавить();
					
					Движение.Количество   = Количество;  						
					Движение.Номенклатура = НоменклатураСостава;
					Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
					Движение.Период 	  = Дата;
					Движение.Склад 		  = Склад;		
					Движение.Комментарий  = Комментарий;
					Движение.Сумма = ЦенаСписания * Количество;
					Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
				КонецЕсли;
				
				Если ВестиУчетВаловойПрибыли Тогда
					Если Клиент Тогда //нормальная реализация
						
						Если ЦенаСписания = 0 
							или не (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							
							Если ЦенаСписания = 0 
								или ПредопределенныйТовар
								или Количество = 0 Тогда
								
								Движение.Сумма 	= СуммаТов;
								Движение.ПроцентНаценки = 100;
								
							Иначе
								Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);
								Цена 			= СуммаТов / Количество;
								//Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
								ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, Дата);
								Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
								Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
								
							КонецЕсли; 								
							
							Движение.Период 		= Дата;
							Движение.Номенклатура 	= НоменклатураСостава;
							Движение.Склад		  	= Склад;
							Движение.Комментарий 	= Комментарий;
						КонецЕсли;
						
					ИначеЕсли НЕ ЗначениеЗаполненоКлиентПоставщик Тогда //поставщик - возврат поставщику
						
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Сумма 			= СуммаТов;
						Движение.ПроцентНаценки = 100;
						Движение.Период 		= Дата;
						Движение.Номенклатура 	= НоменклатураСостава;
						Движение.Склад		    = Склад;
						Движение.Комментарий 	= Комментарий;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		если ТовараВКоличестве 	= 0
			и ТовараНаСумму 	= 0
			и ПоступилоДенег 	= 0 
			И Оплаты.Количество() = 0
			и РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если не отказ тогда
		
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И Не Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
	КонецЕсли;
	
	если не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") тогда
			
			если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") тогда
				Товары.Свернуть("Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ПроцентСкидки, ОСтроке", "Количество, Сумма, СуммаБезСкидки");
			иначе
				Товары.Свернуть("Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ОСтроке", "Количество, Сумма");	
			КонецЕсли;	
		КонецЕсли;
		
		массивпустыхстрок  = новый массив;
		массивноменклатуры = Новый массив;
		
		для каждого СтрокаТовары из товары цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				массивпустыхстрок.Добавить(СтрокаТовары);
				
			иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
				
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На строке №") + " " + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:" + СтрокаТовары.Номенклатура);
					//Сообщение.Сообщить();                                               	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура:") + " " + СтрокаТовары.Номенклатура, , Ссылка);
				КонецЕсли;
				
			иначе
				массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТовары из массивпустыхстрок цикл
			товары.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		Если ЭтоЗаказ Тогда
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если (не ПоступилоДенег = 0 или НЕ оплаты.Количество() = 0) Тогда
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ и предоплата");
				иначе
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Клиента");
				КонецЕсли;
			Иначе
				
				ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое списание");
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Если ПередачаДляКомиссионнойТорговли Тогда
						Если (не ПоступилоДенег = 0 или НЕ оплаты.Количество() = 0) Тогда
							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация комиссионеру");
						Иначе
							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передача комиссионеру");
						КонецЕсли;	
					Иначе
						Если (не ПоступилоДенег = 0 или НЕ оплаты.Количество() = 0) Тогда
							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация");
						Иначе
							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					Если (не ПоступилоДенег = 0 или НЕ оплаты.Количество() = 0) Тогда
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена покупки");
					иначе
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат поставщику");
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание");
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
		
		Если Курс = 0 Тогда
			Курс = 1;
		КонецЕсли;
		
		ТовараВКоличестве 	= товары.итог("Количество");
		
		Если ЗначениеЗаполнено(ВидЦен)
			и ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
			
			ТовараНаСумму 	= ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
		иначе
			ТовараНаСумму 	= товары.Итог("Сумма");
		КонецЕсли;
		
		если не отказ
			и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			и ЗначениеЗаполнено(договор) ТОгда
			
			Если НЕ ЗначениеЗаполнено(КлиентПоставщик) ТОгда
				КлиентПоставщик = договор.КлиентПоставщик;
			ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
				Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()") ;	
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				и ЗначениеЗаполнено(Организация) 
				и не Организация = договор.Организация Тогда
				
				Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") Тогда
			
			ПоступилоДенегТут = 0;
			Для Каждого СтрокаОплаты Из Оплаты Цикл
				ПоступилоДенегТут = ПоступилоДенегТут + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
			КонецЦикла;
			
		Иначе
			ПоступилоДенегТут = ПоступилоДенег * Курс;	
		КонецЕсли;
		
		Если не отказ
			И ЭтоЗаказ
			и ТовараНаСумму <= ПоступилоДенегТут Тогда
			
			ЗаказОплачен = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		НетДоПересчета = Ложь;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= 1;
			НоваяСтрока.Номенклатура 	= ДанныеЗаполнения.ссылка;
			НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ложь, 1, , , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
			НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество; 
			
			ЭтоЗаказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
			НетДоПересчета = Истина;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			Если ДанныеЗаполнения.ЭтоЗаказ Тогда
				ЗаказКлиента = ДанныеЗаполнения.ссылка;
			КонецЕсли;
			
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Адрес 			= ДанныеЗаполнения.Адрес;
			Телефон			= ДанныеЗаполнения.Телефон;
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
			Сотрудник		= ДанныеЗаполнения.Сотрудник;
			//ТалонТрек 		= ДанныеЗаполнения.ТалонТрек;
			ДатаОтправки 	= ДанныеЗаполнения.ДатаОтправки;
			СпособДоставки	= ДанныеЗаполнения.СпособДоставки; 
			ДатаОтсрочки    = ДанныеЗаполнения.ДатаОтсрочки;
			ПередачаДляКомиссионнойТорговли = ДанныеЗаполнения.ПередачаДляКомиссионнойТорговли;
			//КлиентОповещен  = ДанныеЗаполнения.КлиентОповещен; 
			//ТоварОтправлен  = ДанныеЗаполнения.ТоварОтправлен; 
			//ДатаОповещения  = ДанныеЗаполнения.ДатаОповещения; 
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.ЗаказКлиента 	= ТекСтрокаТовара.ЗаказКлиента;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
				НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма; 
				НоваяСтрока.ПроцентСкидки   = ТекСтрокаТовара.ПроцентСкидки; 
				НоваяСтрока.СуммаБезСкидки  = ТекСтрокаТовара.СуммаБезСкидки; 
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке; 
			КонецЦикла;
			НетДоПересчета = Истина;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			
			ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			Сотрудник		= ДанныеЗаполнения.Сотрудник;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
				НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
				НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;
			КонецЦикла;			
			НетДоПересчета = Истина;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			//как списание
			ПоступилоДенег 	= ДанныеЗаполнения.ПоступилоДенег;
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			//			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			//			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			//			Договор 		= ДанныеЗаполнения.Договор;
			//			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				если ТекСтрокаТовара.КоличествоРазница < 0 тогда
					НоваяСтрока = Товары.Добавить(); 				
					НоваяСтрока.Количество 		= -ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= -ТекСтрокаТовара.СуммаРазница;	
				КонецЕсли;
			КонецЦикла;
			НетДоПересчета = Истина;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
			
			ЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Склад 		= ДанныеЗаполнения.СкладКуда;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
				НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
				//НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(НоваяСтрока.Номенклатура, ВидЦен, , , НоваяСтрока.Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
				//НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦена;
			КонецЕсли;
			
			ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				//НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(НоваяСтрока.Номенклатура, ВидЦен, , , НоваяСтрока.Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
				//НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ НетДоПересчета Тогда
			использоватьскидки = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");
			//допересчет
			Для Каждого НоваяСтрока Из Товары Цикл
				
				Если НоваяСтрока.Количество = 0 Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;
				
				НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(НоваяСтрока.Номенклатура, ВидЦен, Дата, Ложь, НоваяСтрока.Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
				
				если использоватьскидки тогда
					НоваяСтрока.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоваяСтрока.Номенклатура, новаястрока.Количество, ВидЦен, КлиентПоставщик);
					
					НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Количество * НоваяСтрока.Цена;
					если не НоваяСтрока.СуммаБезСкидки = 0 тогда
						НоваяСтрока.Сумма = НоваяСтрока.СуммаБезСкидки - НоваяСтрока.ПроцентСкидки * НоваяСтрока.СуммаБезСкидки / 100;
					иначе
						НоваяСтрока.Сумма = 0;
					КонецЕсли;
					
				иначе
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				
			КонецЦикла;            		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
