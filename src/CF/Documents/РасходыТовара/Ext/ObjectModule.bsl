//sza140119-0206
//sza130913-1601 : 

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если не отказ Тогда
		
		движения.ВаловаяПрибыль.Записать();
		движения.ОплатаПоЗаказам.Записать();
		движения.Деньги.Записать();
		движения.ЗаказыКлиентов.Записать();
		движения.Закупки.Записать();
		движения.Расчеты.Записать();
		движения.Продажи.Записать();
		движения.РасчетыСПоставщиками.Записать();
		движения.Товары.Записать();
		Движения.ПродажиСотрудников.Записать();
		
		ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);
		Клиент 							 = ЗначениеЗаполненоКлиентПоставщик и ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
		ВестиУчетЗаказовКлиентов 		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
		ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
		
		ВестиУчетПродажСотрудников  = не ЭтоЗаказ И клиент и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") и ЗначениеЗаполнено(Сотрудник);
		ОтменитьПроверкиНаОтказ 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
		
		если ВестиУчетЗаказовКлиентов
			И ЭтоЗаказ тогда
			
			Сумма = 0;
			
			для каждого строкатовар из Товары цикл
				ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьПриход();
				ЗаписьРегистра.Активность 	= Истина;
				ЗаписьРегистра.Количество   = строкатовар.Количество;
				ЗаписьРегистра.Номенклатура = строкатовар.Номенклатура;
				ЗаписьРегистра.Период       = Дата;
				ЗаписьРегистра.Клиент    	= КлиентПоставщик;
				Сумма = Сумма + строкатовар.Сумма
			конеццикла;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
				ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
				ЗаписьРегистра.Активность 	= Истина;
				ЗаписьРегистра.Заказ   		= Ссылка;
				ЗаписьРегистра.Сумма 		= Сумма;
				
				Если ПоступилоДенег <> 0 Тогда
					ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
					ЗаписьРегистра.Активность 	= Истина;
					ЗаписьРегистра.Заказ   		= Ссылка;
					ЗаписьРегистра.Сумма 		= ПоступилоДенег * Курс;
				КонецЕсли;
			КонецЕсли;
			
		иначе		
			Движения.ЗаказыКлиентов.Записывать = ВестиУчетЗаказовКлиентов;
			
			Если не ОтменитьПроверкиНаОтказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
				и ЗначениеЗаполнено(Договор) Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, Ложь, ПоступилоДенег, Ссылка);
			КонецЕсли;
			
			Если Не Отказ ТОгда
				
				ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") ;
				ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") ;
				
				ВестиУчетПоСкладам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
				
				Если не ОтменитьПроверкиНаОтказ
					И ВестиУчетПоСкладам
					и НЕ ЗначениеЗаполнено(Склад) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!");
						//Сообщение.Поле 	= "Склад";
						//Сообщение.Сообщить();	
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
					КонецЕсли;
					
					Отказ = Истина;						
				КонецЕсли;
				
				Если ИспользоватьСложныйМеханизмЦен
					и ЗначениеЗаполнено(видцен)
					и ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
					
					ВалютаЦены = видцен.ВалютаЦены ;
				иначе
					ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") ;
				КонецЕсли;
				
				ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
				ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
				
				ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
				И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
				ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
				И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать) ;
				
				былопополнение     = ложь;	
				
				СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(ссылка, склад, дата, ОстаткиСледуетПроверять);
				ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;
				
				если ОстаткиСледуетПроверять тогда
					ГТ = СтруктураТаблиц.ТаблицаОстатков;	
				КонецЕсли;	
				
				если ВестиУчетПоСкладам  
					и ЗначениеЗаполнено(склад.СкладПополнения) тогда
					
					ДоступенСкладПополнения = истина;
					СкладПополнения 		= склад.СкладПополнения;
					
				иначе
					ДоступенСкладПополнения = ложь;
				КонецЕсли;
				
				Для Каждого ТекСтрокаТовары Из Товары Цикл
					
					Номенклатура 	  = ТекСтрокаТовары.Номенклатура;
					СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
					Количество 		  = ТекСтрокаТовары.Количество;
					КомментарийСтроки = ?(ЗначениеЗаполнено(текстрокатовары.ОСтроке), текстрокатовары.ОСтроке, Комментарий);
					КоличествоОстаток = 0;
					
					если ВестиУчетЗаказовКлиентов тогда
						
						ЗаказКлиентаКлиентПоставщик = Неопределено;
						Если ЗначениеЗаполнено(ТекСтрокаТовары.ЗаказКлиента) Тогда
							ЗаказКлиентаКлиентПоставщик = ТекСтрокаТовары.ЗаказКлиента.КлиентПоставщик;
						иначеесли ЗначениеЗаполнено(ЗаказКлиента) тогда
							ЗаказКлиентаКлиентПоставщик = ЗаказКлиента.КлиентПоставщик;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЗаказКлиентаКлиентПоставщик) Тогда
							ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьРасход();
							ЗаписьРегистра.Активность 	= Истина;
							ЗаписьРегистра.Количество   = Количество;
							ЗаписьРегистра.Номенклатура = Номенклатура;
							ЗаписьРегистра.Период       = Дата;
							ЗаписьРегистра.Клиент    	= ЗаказКлиентаКлиентПоставщик;
						КонецЕсли;
						
					КонецЕсли;
					
					если ОстаткиСледуетПроверять тогда
						СтрокаОстаток = ГТ.найти(номенклатура, "Номенклатура");
						
						Если не СтрокаОстаток = Неопределено Тогда
							
							КоличествоОстаток 	  = СтрокаОстаток.КоличествоОстаток;
							СуммаОстаток 		  = СтрокаОстаток.СуммаОстаток;
							ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
							ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
							
						иначе
							ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
							ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
							СуммаОстаток		  = 0;
							КоличествоОстаток 	  = 0;
							
						КонецЕсли;			
						
					иначе 			
						ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
						ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);		
						СуммаОстаток 		  = 0;
						КоличествоОстаток 	  = 0;
						
					КонецЕсли;		
					
					если не ПредопределенныйТовар
						и не этонабор тогда
						
						если ДоступенСкладПополнения  тогда //необходимость в дооприходовании товаров из склада пополнения
							Останется = КоличествоОстаток - Количество;
							
							Если останется < 0 Тогда
								
								необходимопополнить = -Останется;
								
								СтруктураОстатка = ОбщийМодульСервер.ОстатокТовара(СкладПополнения, Номенклатура, дата, истина);
								ОстатокНаСкладеПополнения = СтруктураОстатка.Количество;
								
								Если ОстатокНаСкладеПополнения >= необходимопополнить Тогда
									переносить = необходимопополнить;
								Иначе //остатка и там не хватает
									переносить = ОстатокНаСкладеПополнения;					
								КонецЕсли;
								
								Движение = Движения.Товары.Добавить();					
								Движение.Количество 	= переносить;	
								Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
								Движение.Период 		= Дата ;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Склад 			= СкладПополнения;
								Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								ЦенаСписания   = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, переносить, дата, СтруктураОстатка);
								СуммаСписания  = ЦенаСписания * переносить;
								Движение.Сумма = СуммаСписания;
								
								Движение = Движения.Товары.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
								Движение.Период 		= Дата ;
								Движение.Номенклатура 	= Номенклатура;
								Движение.Склад 			= Склад;
								Движение.Количество 	= переносить;					
								Движение.Сумма 			= СуммаСписания;
								Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								КоличествоОстаток = КоличествоОстаток + переносить; 
								СуммаОстаток 	  = СуммаОстаток + СуммаСписания;
								
								былопополнение 	  = истина;
								
							КонецЕсли;
						КонецЕсли;
						
						если не ОтменитьПроверкиНаОтказ
							И ОстаткиСледуетПроверять тогда
							
							Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, Истина, КоличествоОстаток, Ссылка);	
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не отказ тогда
						
						сумма 	 = ТекСтрокаТовары.Сумма;
						цена 	 = ТекСтрокаТовары.цена;					
						СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);			
						
						если НЕ ЭтоНабор Тогда 				
							
							если не ТаблицаЦенСписания = Неопределено тогда
								
								СтрокаЦеныСписания = ТаблицаЦенСписания.найти(номенклатура, "Номенклатура");
								Если не СтрокаЦеныСписания = Неопределено Тогда					
									ЦенаСписания = СтрокаЦеныСписания.Цена;					
								иначе
									ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка);
								КонецЕсли;
								
							иначе
								ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь, , , , , Ссылка);
							КонецЕсли;
							
							если не отказ
								и не ПредопределенныйТовар тогда
								
								Движение = Движения.Товары.Добавить();					
								Движение.Количество   = Количество;  						
								Движение.Номенклатура = Номенклатура;
								Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
								Движение.Период 	  = Дата;
								Движение.Склад 		  = Склад;
								Движение.Комментарий  = КомментарийСтроки;
								Движение.СерияНоменклатуры = СерияНоменклатуры;
								
								Движение.Сумма = ЦенаСписания * Количество;
								Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;					
								
								Если ВестиУчетВаловойПрибыли Тогда
									
									Если Клиент Тогда //нормальная реализация
										
										Если ЦенаСписания = 0 
											или не (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
											
											Движение = Движения.ВаловаяПрибыль.Добавить();
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
											
											Если ЦенаСписания = 0 Тогда
												Движение.Сумма 			= СуммаТов;
												Движение.ПроцентНаценки = 100;
												
											Иначе
												Движение.Сумма 			= СуммаТов - (ЦенаСписания * Количество);
												ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
												Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
												Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
												
											КонецЕсли; 			
											
											Движение.Период 	  = Дата;
											Движение.Номенклатура = Номенклатура;
											Движение.Комментарий  = КомментарийСтроки;
											
										КонецЕсли;
										
									ИначеЕсли не ЗначениеЗаполненоКлиентПоставщик Тогда
										Движение = Движения.ВаловаяПрибыль.Добавить();
										Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										Движение.Сумма 			= СуммаТов;
										Движение.ПроцентНаценки = 100;
										Движение.Период 		= Дата;
										Движение.Номенклатура 	= Номенклатура;
										Движение.Комментарий	= КомментарийСтроки;
										
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
						иначе //этоабор
							отказ = обработатьдвижениядлянабора(Номенклатура, ТекСтрокаТовары.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
							
						КонецЕсли;
						
						Если ВестиУчетПродажСотрудников Тогда
							Движение = Движения.ПродажиСотрудников.Добавить();
							Движение.Комментарий  = КомментарийСтроки; 
							Движение.Номенклатура = Номенклатура;
							Движение.Период 	  = Дата;
							Движение.Сотрудник    = Сотрудник;
							Движение.Сумма  	  = СуммаТов;
						КонецЕсли;
						
						Если не отказ
							и ЗначениеЗаполненоКлиентПоставщик Тогда
							
							Если Клиент Тогда
								Движение = Движения.Продажи.Добавить();
								Движение.Клиент 	= КлиентПоставщик;
								Движение.Количество = Количество;
								Движение.Сумма 		= СуммаТов;
								
							Иначе
								Движение = Движения.Закупки.Добавить();
								Движение.Поставщик 	= КлиентПоставщик;
								Движение.Количество = -Количество;
								Движение.Сумма 		= -СуммаТов;
								
							КонецЕсли;
							
							Движение.Договор		= Договор;
							Движение.Период 		= Дата;
							Движение.Номенклатура 	= Номенклатура;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если не ПоступилоДенег = 0 
				и ЗначениеЗаполнено(ЗаказКлиента)
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда
				
				ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
				ЗаписьРегистра.Активность = Истина;
				ЗаписьРегистра.Заказ   	  = Ссылка;
				ЗаписьРегистра.Сумма 	  = ПоступилоДенег * Курс;
				
			КонецЕсли;
			
			Если не отказ
				и былопополнение Тогда
				
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() 
					и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") тогда
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада:") + " " + СкладПополнения;
					//Сообщение.Сообщить();                                               	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада:") + " " + СкладПополнения, , Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
			Если не отказ 
				и ЗначениеЗаполненоКлиентПоставщик Тогда
				
				если Клиент тогда
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
					Движение.Клиент 	 = КлиентПоставщик;
					
				иначе
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Поставщик 	 = КлиентПоставщик;	
					
				КонецЕсли;
				
				Движение.Договор 	 = Договор;
				Движение.Период 	 = Дата;
				Движение.Комментарий = Комментарий;
				
				Движение.Сумма = ТовараНаСумму;
				
			КонецЕсли;	
		КонецЕсли;	//заказ/не заказ
		
		если НЕ ПоступилоДенег = 0 Тогда
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") тогда
				
				Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
					ФормаОплаты = ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров") ;				
				КонецЕсли;
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);
				
				если не отказ тогда			
					
					Движение = Движения.Деньги.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Период 		= Дата;
					Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
					Движение.Валюта 		= Валюта;
					Движение.СуммаВВалюте 	= ПоступилоДенег;
					Движение.Сумма 			= ПоступилоДенег * Курс;
					Движение.ХранилищеДенег = ХранилищеДенег;
					Движение.ФормаОплаты 	= ФормаОплаты;	
					
				КонецЕсли;			
			КонецЕсли;
			
			Если ЗначениеЗаполненоКлиентПоставщик Тогда
				
				если Клиент 
					и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") тогда
					
					Движение = Движения.Расчеты.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
					Движение.Клиент 	 = КлиентПоставщик;
					
				иначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") тогда
					
					Движение = Движения.РасчетыСПоставщиками.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
					Движение.Поставщик 		= КлиентПоставщик;
					
				КонецЕсли;
				
				Движение.Договор	 = Договор;
				Движение.Период 	 = Дата;
				Движение.Комментарий = Комментарий;
				Движение.Сумма 		 = ПоступилоДенег * ?(Курс = 0, 1, Курс);
				
			КонецЕсли;
		КонецЕсли;   	
	КонецЕсли;
	
	Движения.ОплатаПоЗаказам.Записывать  = НЕ Отказ;
	Движения.ВаловаяПрибыль.Записывать   = НЕ Отказ;
	Движения.Деньги.Записывать    = НЕ Отказ;
	Движения.ЗаказыКлиентов.Записывать   = НЕ Отказ;
	Движения.Закупки.Записывать   = НЕ Отказ;
	Движения.Расчеты.Записывать   = НЕ Отказ;
	Движения.Продажи.Записывать   = НЕ Отказ;
	Движения.РасчетыСПоставщиками.Записывать   = НЕ Отказ;
	Движения.Товары.Записывать    = НЕ Отказ;
	Движения.ПродажиСотрудников.Записывать = НЕ Отказ;
	
КонецПроцедуры

Функция   обработатьдвижениядлянабора(Номенклатура, КоличествоВх, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ) //для вложенных наборов
	
	общкво = Номенклатура.Состав.Итог("Количество");
	Если общкво = 0 Тогда
		общкво = 1;
	КонецЕсли;
	
	ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
	ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
	
	для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
		СуммаЭлемента = (Сумма / общкво) * СтрокаСоставаНабора.количество;
		НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
		
		Если НоменклатураСостава.ЭтоНабор = ИСТИНА Тогда
			отказ = обработатьдвижениядлянабора(НоменклатураСостава, КоличествоВх * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
		иначе
			
			количество = СтрокаСоставаНабора.количество * КоличествоВх;
			
			ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);
			
			Если не ОтменитьПроверкиНаОтказ
				И НЕ ПредопределенныйТовар Тогда
				
				Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, Дата, Истина, , Ссылка);
			КонецЕсли;
			
			если не отказ тогда
				
				СуммаТов = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, Валюта, , Дата);
				
				ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата);
				
				если не ПредопределенныйТовар тогда
					Движение = Движения.Товары.Добавить();
					
					Движение.Количество   = Количество;  						
					Движение.Номенклатура = НоменклатураСостава;
					Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
					Движение.Период 	  = Дата;
					Движение.Склад 		  = Склад;		
					Движение.Комментарий  = Комментарий;
					Движение.Сумма = ЦенаСписания * Количество;
					Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
				КонецЕсли;
				
				Если ВестиУчетВаловойПрибыли Тогда
					Если Клиент Тогда //нормальная реализация
						
						Если ЦенаСписания = 0 
							или не (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							
							Если ЦенаСписания = 0 
								или ПредопределенныйТовар
								или Количество = 0 Тогда
								
								Движение.Сумма 	= СуммаТов;
								Движение.ПроцентНаценки = 100;
								
							Иначе
								Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);
								Цена 			= СуммаТов / Количество;
								//Движение.ПроцентНаценки = (Цена / (ЦенаСписания / 100)) - 100 ;
								ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, Дата);
								Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
								Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
								
							КонецЕсли; 								
							
							Движение.Период 		= Дата;
							Движение.Номенклатура 	= НоменклатураСостава;
							Движение.Комментарий 	= Комментарий;
						КонецЕсли;
						
					ИначеЕсли НЕ ЗначениеЗаполненоКлиентПоставщик Тогда //поставщик - возврат поставщику
						
						Движение = Движения.ВаловаяПрибыль.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Сумма 			= СуммаТов;
						Движение.ПроцентНаценки = 100;
						Движение.Период 		= Дата;
						Движение.Номенклатура 	= НоменклатураСостава;
						Движение.Комментарий 	= Комментарий;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	если не отказ 
		и Модифицированность() 
		и РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
		
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
	
		если ТовараВКоличестве 	= 0
			и ТовараНаСумму 	= 0
			и ПоступилоДенег 	= 0
			и РежимЗаписи 		= РежимЗаписиДокумента.Проведение тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	
		
	КонецЕсли;		
			
КонецПроцедуры
	
Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
		если не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") тогда
			
			если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") тогда
				Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена, ПроцентСкидки", "Количество, Сумма, СуммаБезСкидки");
			иначе
				Товары.Свернуть("Номенклатура, СерияНоменклатуры, Цена", "Количество, Сумма");	
			КонецЕсли;	
		КонецЕсли;
		
		массивпустыхстрок  = новый массив;
		массивноменклатуры = Новый массив;
		
		для каждого СтрокаТовары из товары цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				массивпустыхстрок.Добавить(СтрокаТовары);
				
			иначеесли не массивноменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено тогда
				
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На строке №") + " " + СтрокаТовары.НомерСтроки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" повторяется номенклатура:" + СтрокаТовары.Номенклатура);
					//Сообщение.Сообщить();                                               	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На строке №") + " " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура:" + СтрокаТовары.Номенклатура), , Ссылка);
				КонецЕсли;
				
			иначе
				массивноменклатуры.Добавить(СтрокаТовары.Номенклатура);
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаТовары из массивпустыхстрок цикл
			товары.Удалить(СтрокаТовары);	
		КонецЦикла;	
		
		Если ЭтоЗаказ Тогда
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если не ПоступилоДенег = 0 Тогда
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ и предоплата");
				иначе
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Клиента");
				КонецЕсли;
			Иначе
				
				ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое списание");
			КонецЕсли;
			
		иначе
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если ТипЗнч(клиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					Если не ПоступилоДенег = 0 Тогда
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация");
					иначе
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
					КонецЕсли;
					
				Иначе
					Если не ПоступилоДенег = 0 Тогда
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена покупки");
					иначе
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат поставщику");
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание");
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
		
		Если Курс = 0 Тогда
			Курс = 1;
		КонецЕсли;
		
		ТовараВКоличестве 	= товары.итог("Количество");
		
		Если ЗначениеЗаполнено(ВидЦен)
			и ЗначениеЗаполнено(видцен.ВалютаЦены) Тогда
			
			ТовараНаСумму 		= ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , видцен.ВалютаЦены, Дата);
		иначе
			ТовараНаСумму 		= товары.Итог("Сумма");
		КонецЕсли;
		
		если не отказ
			и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			и ЗначениеЗаполнено(договор) ТОгда
			
			Если НЕ ЗначениеЗаполнено(КлиентПоставщик) ТОгда
				КлиентПоставщик = договор.КлиентПоставщик;
			ИначеЕСли НЕ КлиентПоставщик = договор.КлиентПоставщик Тогда
				Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()") ;	
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(договор) 
				и ЗначениеЗаполнено(Организация) 
				и не Организация = договор.Организация Тогда
				
				Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
			КонецЕсли;
			
		КонецЕсли;
	
		Если не отказ
			И ЭтоЗаказ
			и ТовараНаСумму <= (ПоступилоДенег * курс) Тогда
			
			ЗаказОплачен = Истина;
		КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество 		= 1;
			НоваяСтрока.Номенклатура 	= ДанныеЗаполнения.ссылка;
			НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ложь, 1, , , , Ссылка);
			НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество; 
			
			ЭтоЗаказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			Если ДанныеЗаполнения.ЭтоЗаказ Тогда
				ЗаказКлиента = ДанныеЗаполнения.ссылка;
			КонецЕсли;
			
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
			Сотрудник		= ДанныеЗаполнения.Сотрудник;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.ЗаказКлиента 	= ТекСтрокаТовары.ЗаказКлиента;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
				НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			
			ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
			КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
			Договор 		= ДанныеЗаполнения.Договор;
			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			Сотрудник		= ДанныеЗаполнения.Сотрудник;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
				НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			КонецЦикла;			
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
			      //как списание
			ПоступилоДенег 	= ДанныеЗаполнения.ПоступилоДенег;
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
			ВидЦен 			= ДанныеЗаполнения.ВидЦен;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
				Валюта 		= ДанныеЗаполнения.Валюта;
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда			
				Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
			КонецЕсли;		
			Комментарий 	= ДанныеЗаполнения.Комментарий;
			Склад 			= ДанныеЗаполнения.Склад;
//			ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
//			ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
//			Договор 		= ДанныеЗаполнения.Договор;
//			Организация 	= ДанныеЗаполнения.Организация;
			ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег; 
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				если ТекСтрокаТовары.КоличествоРазница < 0 тогда
					НоваяСтрока = Товары.Добавить(); 				
					НоваяСтрока.Количество 		= -ТекСтрокаТовары.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовары.Цена;
					НоваяСтрока.Сумма 			= -ТекСтрокаТовары.СуммаРазница;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
			
			ЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
			
			Комментарий = ДанныеЗаполнения.Комментарий;
			Склад 		= ДанныеЗаполнения.СкладКуда;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
				НоваяСтрока.Сумма 			= ТекСтрокаТовары.Сумма;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
			
			Комментарий 		= ДанныеЗаполнения.Комментарий;
			ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
				ВидЦен = ДанныеЗаполнения.ВидЦен;
				Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦена;
			КонецЕсли;
			
			ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;
			
			Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= ТекСтрокаТовары.Количество;
				НоваяСтрока.Номенклатура 	= ТекСтрокаТовары.Номенклатура;
				НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовары.СерияНоменклатуры;
			КонецЦикла;
			
		КонецЕсли;
		
		использоватьскидки = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");
		//допересчет
		Для Каждого НоваяСтрока Из Товары Цикл
			
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Количество = 1;
			КонецЕсли;
			
			НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(НоваяСтрока.Номенклатура, ВидЦен, Дата, Ложь, НоваяСтрока.Количество, Договор, , , Ссылка);
			
			если использоватьскидки тогда
				НоваяСтрока.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоваяСтрока.Номенклатура, новаястрока.Количество, ВидЦен, КлиентПоставщик);
				
				НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Количество * НоваяСтрока.Цена;
				если не НоваяСтрока.СуммаБезСкидки = 0 тогда
					НоваяСтрока.Сумма = НоваяСтрока.СуммаБезСкидки - НоваяСтрока.ПроцентСкидки * НоваяСтрока.СуммаБезСкидки / 100;
				иначе
					НоваяСтрока.Сумма = 0;
				КонецЕсли;
				
			иначе
				НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			КонецЕсли;
			
		КонецЦикла;            	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
