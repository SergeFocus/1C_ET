// sza160302-0258 расчеты в валюте
// sza151210-2339
// sza150613-0240
// sza141228-0628
// sza140722-0120 склад
// sza140701-1324
// sza140614-2213
// sza130913-1601 :

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	Функция   ОбработатьДвиженияДляНабора(Знач Номенклатура, КоличествоСтруктура, Сумма, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ) // для вложенных наборов

		ОбщееКоличество = Номенклатура.Состав.Итог("Количество");

		Если ОбщееКоличество = 0 Тогда
			ОбщееКоличество = 1;
		КонецЕсли;

		Если НЕ Сторный Тогда
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
			ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
		Иначе
			ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
			ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
		КонецЕсли;

		Для Каждого СтрокаСоставаНабора Из Номенклатура.Состав Цикл
			СуммаЭлемента = (Сумма / ОбщееКоличество) * СтрокаСоставаНабора.количество;
			НоменклатураСостава = СтрокаСоставаНабора.Номенклатура;
			Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
				Отказ = ОбработатьДвиженияДляНабора(НоменклатураСостава, КоличествоСтруктура * СтрокаСоставаНабора.количество, СуммаЭлемента, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
			Иначе
				Количество = КоличествоСтруктура * ?(ЗначениеЗаполнено(СтрокаСоставаНабора.ЕдиницаИзмерения), СтрокаСоставаНабора.ЕдиницаИзмерения.Количество, 1) * СтрокаСоставаНабора.Количество;
				ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСостава);

				Если НЕ ОтменитьПроверкиНаОтказ
					И НЕ ПредопределенныйТовар Тогда

					Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, НоменклатураСостава, Количество, Дата, ИСТИНА, , Ссылка);
				КонецЕсли;

				Если НЕ Отказ Тогда
					СуммаТов 	 = ОбщийМодульСервер.ПоКурсу(СуммаЭлемента, Валюта, , Дата);
					ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(НоменклатураСостава, Количество, Дата, , ПредопределенныйТовар, Склад);
					Если НЕ ПредопределенныйТовар Тогда
						Движение = Движения.Товары.Добавить();
						Движение.Количество   = Количество;
						Движение.Номенклатура = НоменклатураСостава;
						Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
						Движение.Период 	  = Дата;
						Движение.Склад 		  = Склад;
						Движение.Комментарий  = Комментарий;
						Движение.Сумма 		  = ЦенаСписания * Количество;
						Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
					КонецЕсли;

					Если ВестиУчетВаловойПрибыли Тогда
						Если Клиент Тогда // нормальная реализация

							Если ЦенаСписания = 0
								ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда

								Движение = Движения.ВаловаяПрибыль.Добавить();
								Движение.Количество  = Количество;
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;

								Если ЦенаСписания = 0
									ИЛИ ПредопределенныйТовар
									ИЛИ Количество = 0 Тогда

									Движение.Сумма 	= СуммаТов;
									Движение.ПроцентНаценки = 100;
								Иначе
									Движение.Сумма 	= СуммаТов - (ЦенаСписания * Количество);
									Цена 			= СуммаТов / Количество;
									ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , Валюта, Дата);
									Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
									Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
								КонецЕсли;

								Движение.Период 		= Дата;
								Движение.Номенклатура 	= НоменклатураСостава;
								Движение.Склад		  	= Склад;
								Движение.Комментарий 	= Комментарий;
							КонецЕсли;
						ИначеЕсли НЕ ЗначениеЗаполненоКлиентПоставщик Тогда // нет контрагента - списание
							// Движение = Движения.ВаловаяПрибыль.Добавить();
							// Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
							// Движение.Количество     = Количество;
							// Движение.Сумма 			= СуммаТов;
							// Движение.ПроцентНаценки = 100;
							// Движение.Период 		= Дата;
							// Движение.Номенклатура 	= НоменклатураСостава;
							// Движение.Склад		    = Склад;
							// Движение.Комментарий 	= Комментарий;
							//
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Возврат Отказ;

	КонецФункции

	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			НетДоПересчета = ЛОЖЬ;
			Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Клиенты") Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				КлиентПоставщик = ДанныеЗаполнения.Ссылка;
				НетДоПересчета = ИСТИНА;
				ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество 		= 1;
				НоваяСтрока.Номенклатура 	= ДанныеЗаполнения.ссылка;
				НоваяСтрока.Цена 			= ОбщийМодульСервер.ПолучитьЦенуНаСервере(ДанныеЗаполнения.ссылка, , Дата, ЛОЖЬ, 1, , , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);
				НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
				ЭтоЗаказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
				НетДоПересчета = ИСТИНА;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;

				Если ДанныеЗаполнения.ЭтоЗаказ Тогда
					ЗаказКлиента = ДанныеЗаполнения.ссылка;
				КонецЕсли;

				ВаучерСкидки	= ДанныеЗаполнения.ВаучерСкидки;
				КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;
				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта 		= ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Если ПустаяСтрока(ДанныеЗаполнения.Адрес)
					И ЗначениеЗаполнено(КлиентПоставщик) Тогда

					Адрес 		= ?(ПустаяСтрока(КлиентПоставщик.Адрес), КлиентПоставщик.ЮридическийАдрес, КлиентПоставщик.Адрес);
				Иначе
					Адрес 		= ДанныеЗаполнения.Адрес;
				КонецЕсли;

				Телефон			= ОбщийМодульСервер.ПолучитьТекстТелефонов(ДанныеЗаполнения.КлиентПоставщик);
				Комментарий 	= ДанныеЗаполнения.Комментарий;
				Склад 			= ДанныеЗаполнения.Склад;
				ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
				Договор 		= ДанныеЗаполнения.Договор;
				Организация 	= ДанныеЗаполнения.Организация;
				ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
				Сотрудник		= ДанныеЗаполнения.Сотрудник;
				ДатаОтправки 	= ДанныеЗаполнения.ДатаОтправки;
				СпособДоставки	= ДанныеЗаполнения.СпособДоставки;
				ДатаОтсрочки    = ДанныеЗаполнения.ДатаОтсрочки;
				ПередачаДляКомиссионнойТорговли = ДанныеЗаполнения.ПередачаДляКомиссионнойТорговли;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.ЗаказКлиента 	= ТекСтрокаТовара.ЗаказКлиента;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
					НоваяСтрока.ПроцентСкидки   = ТекСтрокаТовара.ПроцентСкидки;
					НоваяСтрока.СуммаБезСкидки  = ТекСтрокаТовара.СуммаБезСкидки;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;

				НетДоПересчета = ИСТИНА;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				ПоступилоДенег 	= ДанныеЗаполнения.ВыбылоДенег;
				КлиентПоставщик = ДанныеЗаполнения.КлиентПоставщик;
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;

				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта 		= ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий 	= ДанныеЗаполнения.Комментарий;
				Склад 			= ДанныеЗаполнения.Склад;
				ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
				Договор 		= ДанныеЗаполнения.Договор;
				Организация 	= ДанныеЗаполнения.Организация;
				ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
				Сотрудник		= ДанныеЗаполнения.Сотрудник;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения  = ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;
					НоваяСтрока.ЗаказКлиента	= ТекСтрокаТовара.ЗаказКлиента;

				КонецЦикла;

				НетДоПересчета = ИСТИНА;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.События") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.Направление;
				КлиентПоставщик = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Клиент), ДанныеЗаполнения.Клиент, ДанныеЗаполнения.Поставщик);
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;
				Комментарий 	= ДанныеЗаполнения.Комментарий;
				ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 	= ДанныеЗаполнения.ТовараНаСумму;
				Договор 		= ДанныеЗаполнения.Договор;
				Организация 	= ДанныеЗаполнения.Организация;
				ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
				Сотрудник		= ДанныеЗаполнения.Сотрудник;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
					НоваяСтрока.Сумма 			= ТекСтрокаТовара.Сумма;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;

				НетДоПересчета = ИСТИНА;

			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Инвентаризации") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				// как списание
				ПоступилоДенег 	= ДанныеЗаполнения.ПоступилоДенег;
				КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
				ВидЦен 			= ДанныеЗаполнения.ВидЦен;

				Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
					Валюта 		= ДанныеЗаполнения.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					Валюта 		= ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				Комментарий 	= ДанныеЗаполнения.Комментарий;
				Склад 			= ДанныеЗаполнения.Склад;
				ХранилищеДенег	= ДанныеЗаполнения.ХранилищеДенег;
				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					Если ТекСтрокаТовара.КоличествоРазница < 0 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.Количество 		= -ТекСтрокаТовара.КоличествоРазница;
						НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
						НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
						НоваяСтрока.Цена 			= ТекСтрокаТовара.Цена;
						НоваяСтрока.Сумма 			= -ТекСтрокаТовара.СуммаРазница;
					КонецЕсли;

				КонецЦикла;

				НетДоПересчета = ИСТИНА;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
				ЭтоЗаказ = ДанныеЗаполнения.ЭтоЗаказ;
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				Комментарий = ДанныеЗаполнения.Комментарий;
				Склад 		= ДанныеЗаполнения.СкладКуда;
				ВидЦен 		= ДанныеЗаполнения.ВидЦен;

				ТовараВКоличестве 	= ДанныеЗаполнения.ТовараВКоличестве;
				ТовараНаСумму 		= ДанныеЗаполнения.ТовараНаСумму;
				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовара.ЕдиницаИзмерения;
					НоваяСтрока.ОСтроке			= ТекСтрокаТовара.ОСтроке;

				КонецЦикла;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
				НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
				Комментарий 	  = ДанныеЗаполнения.Комментарий;
				ТовараВКоличестве = ДанныеЗаполнения.ТовараВКоличестве;

				Если ЗначениеЗаполнено(ДанныеЗаполнения.ВидЦен) Тогда
					ВидЦен = ДанныеЗаполнения.ВидЦен;
					Валюта = ДанныеЗаполнения.ВидЦен.ВалютаЦены;
				КонецЕсли;

				ТовараНаСумму = ДанныеЗаполнения.ТовараНаСумму;

				Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
					НоваяСтрока = Товары.Добавить();
					НоваяСтрока.Количество 		= ТекСтрокаТовара.Количество;
					НоваяСтрока.Номенклатура 	= ТекСтрокаТовара.Номенклатура;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;

				КонецЦикла;
			КонецЕсли;

			Если НЕ НетДоПересчета Тогда
				ИспользоватьСкидки = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");
				Для Каждого НоваяСтрока Из Товары Цикл
					Если НоваяСтрока.Количество = 0 Тогда
						НоваяСтрока.Количество = 1;
					КонецЕсли;

					НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(НоваяСтрока.Номенклатура, ВидЦен, Дата, ЛОЖЬ, НоваяСтрока.Количество, Договор, , , Ссылка, , НоваяСтрока.ЕдиницаИзмерения);

					Если ИспользоватьСкидки Тогда
						НоваяСтрока.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(НоваяСтрока.Номенклатура, НоваяСтрока.Количество, ВидЦен, КлиентПоставщик, ВаучерСкидки, Склад, Дата);
						НоваяСтрока.СуммаБезСкидки = НоваяСтрока.Количество * НоваяСтрока.Цена;
						Если НЕ НоваяСтрока.СуммаБезСкидки = 0 Тогда
							НоваяСтрока.Сумма = НоваяСтрока.СуммаБезСкидки - НоваяСтрока.ПроцентСкидки * НоваяСтрока.СуммаБезСкидки / 100;
						Иначе
							НоваяСтрока.Сумма = 0;
						КонецЕсли;
					Иначе
						НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ОбработкаПроведения(Отказ, Режим)

		Если НеПроводить Тогда
			НеПроводить = ЛОЖЬ;
			Записать(РежимЗаписиДокумента.Запись);
		Иначе
			Если НЕ Отказ Тогда

				Движения.ВаловаяПрибыль.Записать();
				Движения.Деньги.Записать();
				Движения.Закупки.Записать();
				Движения.Товары.Записать();
				Движения.Расчеты.Записать();
				Движения.РасчетыСОтсрочкой.Записать();
				Движения.РасчетыСПоставщиками.Записать();
				Движения.РасчетыСПоставщикамиСОтсрочкой.Записать();
				Движения.РасчетыВВалюте.Записать();
				Движения.Продажи.Записать();
				Движения.ПродажиСотрудников.Записать();
				Движения.ОплатаПоЗаказам.Записать();
				Движения.ЗаказыКлиентов.Записать();
				Движения.ТоварыПереданныеНаКомиссию.Записать();
				Движения.НакоплениеНаВаучеры.Записать();

				Если НЕ Сторный Тогда
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
				Иначе
					ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
					ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
				КонецЕсли;

				ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
				ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
				РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах");
				ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(КлиентПоставщик);

				Клиент 					 = ЗначениеЗаполненоКлиентПоставщик
				И ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты");
				ВестиУчетЗаказовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
				ВестиУчетПоКлиентам      = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
				ВестиУчетПоПоставщикам   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
				ВестиУчетДвиженияДенег   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
				ВестиУчетВалют			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
				ВестиУчетПродажСотрудников  = НЕ ЭтоЗаказ И Клиент
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников")
				И ЗначениеЗаполнено(Сотрудник);
				ОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");

				Если ВестиУчетВалют
					И ВестиУчетДвиженияДенег
					И ЗначениеЗаполнено(Валюта)
					И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта")
					И (Курс = 1 ИЛИ Курс = 0) Тогда

					Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);
				КонецЕсли;

				ПоступилоДенегТут = 0;

				Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
					Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах Тогда
						Если НЕ оплаты.Количество() = 0 Тогда
							Для Каждого СтрокаОплаты Из Оплаты Цикл
								ПоступилоДенегТут = ПоступилоДенегТут + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;

							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ПоступилоДенег <> 0 Тогда
						ПоступилоДенегТут = ПоступилоДенег * ?(Курс = 0, ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата), Курс);
					КонецЕсли;
				КонецЕсли;

				ВалютаКонтрагента = ОбщийМодульСервер.ПолучитьВалютуКонтрагента(КлиентПоставщик);

				РасчетыВВалюте = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(ВалютаКонтрагента)
				И НЕ ВалютаКонтрагента = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

				Если ЭтоЗаказ Тогда
					Если ВестиУчетЗаказовКлиентов Тогда
						Сумма = 0;
						Для Каждого СтрокаТовар Из Товары Цикл
							ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьПриход();
							ЗаписьРегистра.Активность 	= ИСТИНА;
							ЗаписьРегистра.Количество   = СтрокаТовар.Количество;
							ЗаписьРегистра.Номенклатура = СтрокаТовар.Номенклатура;
							ЗаписьРегистра.Период       = Дата;
							ЗаписьРегистра.Клиент    	= КлиентПоставщик;
							Сумма = Сумма + СтрокаТовар.Сумма
						КонецЦикла;

						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам")  Тогда
							ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьПриход();
							ЗаписьРегистра.Период		= Дата;
							ЗаписьРегистра.Активность 	= ИСТИНА;
							ЗаписьРегистра.Заказ   		= Ссылка;
							ЗаписьРегистра.Сумма 		= Сумма;

							Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода
								И НЕ ПоступилоДенегТут = 0 Тогда

								ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
								ЗаписьРегистра.Период		= Дата;
								ЗаписьРегистра.Активность 	= ИСТИНА;
								ЗаписьРегистра.Заказ   		= Ссылка;
								ЗаписьРегистра.Сумма 		= ПоступилоДенегТут;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Движения.ЗаказыКлиентов.Записывать = ВестиУчетЗаказовКлиентов;

					Если НЕ ОтменитьПроверкиНаОтказ
						И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
						И ЗначениеЗаполнено(Договор) Тогда

						Отказ = ОбщийМодульСервер.ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Отказ, Договор, Клиент, Дата, ТовараНаСумму, ТовараВКоличестве, ЛОЖЬ, ПоступилоДенегТут, Ссылка);
					КонецЕсли;

					Если НЕ Отказ Тогда
						ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
						ВестиУчетВаловойПрибыли 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
						ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");

						Если НЕ ОтменитьПроверкиНаОтказ
							И ВестиУчетПоСкладам
							И НЕ ЗначениеЗаполнено(Склад) Тогда

							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан склад!"), , Ссылка);
							КонецЕсли;

							Отказ = ИСТИНА;
						КонецЕсли;

						Если ИспользоватьСложныйМеханизмЦен
							И ЗначениеЗаполнено(ВидЦен)
							И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда

							ВалютаЦены = ВидЦен.ВалютаЦены ;
						Иначе
							ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
						КонецЕсли;

						ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
						ПоведениеПрограммыПриРасходеТоваровБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка");
						ОстаткиСледуетПроверять = (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
						И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать )
						ИЛИ (ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
						И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать);
						БылоПополнение     = ЛОЖЬ;
						СтруктураТаблиц    = ОбщийМодульСервер.ПолучитьТаблицыЦенСписанияИОстатков(Ссылка, Склад, Дата, ОстаткиСледуетПроверять);
						ТаблицаЦенСписания = СтруктураТаблиц.ТаблицаЦенСписания;

						Если ОстаткиСледуетПроверять Тогда
							ГотоваяТаблицаОстатков = СтруктураТаблиц.ТаблицаОстатков;
						КонецЕсли;

						Если ВестиУчетПоСкладам
							И ЗначениеЗаполнено(склад.СкладПополнения) Тогда

							ДоступенСкладПополнения = ИСТИНА;
							СкладПополнения 		= Склад.СкладПополнения;
						Иначе
							ДоступенСкладПополнения = ЛОЖЬ;
						КонецЕсли;

						Для Каждого ТекСтрокаТовара Из Товары Цикл
							Номенклатура 	  = ТекСтрокаТовара.Номенклатура;
							СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
							Количество 		  = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ЕдиницаИзмерения), ТекСтрокаТовара.ЕдиницаИзмерения.Количество * ТекСтрокаТовара.Количество, ТекСтрокаТовара.Количество);
							КомментарийСтроки = ?(ЗначениеЗаполнено(ТекСтрокаТовара.ОСтроке), ТекСтрокаТовара.ОСтроке, Комментарий);
							КоличествоОстаток = 0;

							Если ВестиУчетЗаказовКлиентов Тогда
								ЗаказКлиентаКлиентПоставщик = Неопределено;
								Если ЗначениеЗаполнено(ТекСтрокаТовара.ЗаказКлиента) Тогда
									ЗаказКлиентаКлиентПоставщик = ТекСтрокаТовара.ЗаказКлиента.КлиентПоставщик;
								ИначеЕсли ЗначениеЗаполнено(ЗаказКлиента) Тогда
									ЗаказКлиентаКлиентПоставщик = ЗаказКлиента.КлиентПоставщик;
								КонецЕсли;

								Если ЗначениеЗаполнено(ЗаказКлиентаКлиентПоставщик) Тогда
									ЗаписьРегистра = Движения.ЗаказыКлиентов.ДобавитьРасход();
									ЗаписьРегистра.Активность 	= ИСТИНА;
									ЗаписьРегистра.Количество   = Количество;
									ЗаписьРегистра.Номенклатура = Номенклатура;
									ЗаписьРегистра.Период       = Дата;
									ЗаписьРегистра.Клиент    	= ЗаказКлиентаКлиентПоставщик;
								КонецЕсли;
							КонецЕсли;

							Если ОстаткиСледуетПроверять Тогда
								СтрокаОстаток = ГотоваяТаблицаОстатков.найти(номенклатура, "Номенклатура");
								Если НЕ СтрокаОстаток = Неопределено Тогда
									КоличествоОстаток 	  = СтрокаОстаток.КоличествоОстаток;
									СуммаОстаток 		  = СтрокаОстаток.СуммаОстаток;
									ПредопределенныйТовар = СтрокаОстаток.НеОтслеживатьОстаток или СтрокаОстаток.Предопределенный;
									ЭтоНабор 			  = СтрокаОстаток.ЭтоНабор;
								Иначе
									ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
									ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
									СуммаОстаток		  = 0;
									КоличествоОстаток 	  = 0;
								КонецЕсли;
							Иначе
								ЭтоНабор 			  = ОбщийМодульПовтор.ЭтоНабор(Номенклатура);
								ПредопределенныйТовар = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
								СуммаОстаток 		  = 0;
								КоличествоОстаток 	  = 0;
							КонецЕсли;

							Если НЕ ПредопределенныйТовар
								И НЕ ЭтоНабор Тогда

								Если ДоступенСкладПополнения Тогда // необходимость в до-оприходовании товаров из склада пополнения
									Останется = КоличествоОстаток - Количество;
									Если Останется < 0 Тогда
										НеобходимоПополнить = -Останется;
										СтруктураОстатка = ОбщийМодульСервер.ОстатокТовара(СкладПополнения, Номенклатура, дата, ИСТИНА);
										ОстатокНаСкладеПополнения = СтруктураОстатка.Количество;

										Если ОстатокНаСкладеПополнения >= НеобходимоПополнить Тогда
											Переносить = НеобходимоПополнить;
										Иначе // остатка и там не хватает
											Переносить = ОстатокНаСкладеПополнения;
										КонецЕсли;

										ЦенаСписания   = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, Переносить, Дата, СтруктураОстатка, , Склад, СерияНоменклатуры);
										СуммаСписания  = ЦенаСписания * Переносить;
										Движение = Движения.Товары.Добавить();
										Движение.Количество 	= Переносить;
										Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
										Движение.Период 		= Дата ;
										Движение.Номенклатура 	= Номенклатура;
										Движение.Склад 			= СкладПополнения;
										Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
										Движение.СерияНоменклатуры = СерияНоменклатуры;
										Движение.Сумма 			= СуммаСписания;
										Движение.ВнутреннееПеремещение = ИСТИНА;
										Движение = Движения.Товары.Добавить();
										Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
										Движение.Период 		= Дата ;
										Движение.Номенклатура 	= Номенклатура;
										Движение.Склад 			= Склад;
										Движение.Количество 	= Переносить;
										Движение.Сумма 			= СуммаСписания;
										Движение.Комментарий	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пополнение") + " " + КомментарийСтроки;
										Движение.СерияНоменклатуры = СерияНоменклатуры;
										Движение.ВнутреннееПеремещение = ИСТИНА;

										КоличествоОстаток = КоличествоОстаток + Переносить;
										СуммаОстаток 	  = СуммаОстаток + СуммаСписания;
										БылоПополнение 	  = ИСТИНА;
									КонецЕсли;
								КонецЕсли;

								Если НЕ ОтменитьПроверкиНаОтказ
									И ОстаткиСледуетПроверять Тогда

									Отказ = ОбщийМодульСервер.ПроверитьОстатокТоваров(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, Склад, Номенклатура, Количество, Дата, ИСТИНА, КоличествоОстаток, Ссылка);
								КонецЕсли;
							КонецЕсли;

							Если НЕ Отказ Тогда
								Сумма 	 = ТекСтрокаТовара.Сумма;
								Цена 	 = ТекСтрокаТовара.Цена;
								СуммаТов = ОбщийМодульСервер.ПоКурсу(Сумма, , ВалютаЦены, Дата);

								Если НЕ ЭтоНабор Тогда
									Если ПредопределенныйТовар Тогда
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, Количество, Дата, , ИСТИНА, Склад, СерияНоменклатуры);
									ИначеЕсли НЕ ТаблицаЦенСписания = Неопределено Тогда

										Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
											И ЗначениеЗаполнено(СерияНоменклатуры)
											И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда

											СтрокаЦеныСписания = ТаблицаЦенСписания.Найти(СерияНоменклатуры, "СерияНоменклатуры");

											Если СтрокаЦеныСписания = Неопределено Тогда
												СтрокаЦеныСписания = ТаблицаЦенСписания.Найти(Номенклатура, "Номенклатура");
											КонецЕсли;
										Иначе
											СтрокаЦеныСписания = ТаблицаЦенСписания.Найти(Номенклатура, "Номенклатура");
										КонецЕсли;

										Если НЕ СтрокаЦеныСписания = Неопределено Тогда
											ЦенаСписания = СтрокаЦеныСписания.Цена;
										Иначе
											ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
										КонецЕсли;
									Иначе
										ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура, ИСТИНА, дата, ЛОЖЬ, , , , , Ссылка, , ТекСтрокаТовара.ЕдиницаИзмерения);
									КонецЕсли;

									Если НЕ Отказ Тогда
										Если НЕ ПредопределенныйТовар Тогда
											Движение = Движения.Товары.Добавить();
											Движение.Количество   = Количество;
											Движение.Номенклатура = Номенклатура;
											Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
											Движение.Период 	  = Дата;
											Движение.Склад 		  = Склад;
											Движение.Комментарий  = КомментарийСтроки;
											Движение.СерияНоменклатуры = СерияНоменклатуры;
											Движение.Сумма 		  = ЦенаСписания * Количество;
											Движение.СписаниеИлиОприходование = НЕ ЗначениеЗаполненоКлиентПоставщик;
										КонецЕсли;

										Если ВестиУчетВаловойПрибыли Тогда
											Если Клиент Тогда // нормальная реализация

												Если ЦенаСписания = 0
													ИЛИ НЕ (СуммаТов - (ЦенаСписания * Количество) = 0) Тогда

													Движение = Движения.ВаловаяПрибыль.Добавить();
													Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
													Если ЦенаСписания = 0 Тогда
														Движение.Сумма 			= СуммаТов;
														Движение.ПроцентНаценки = 100;
													Иначе
														Движение.Сумма = СуммаТов - (ЦенаСписания * Количество);
														ЦенаПоКурсу = ОбщийМодульСервер.ПоКурсу(Цена, , ВалютаЦены, Дата);
														Движение.ПроцентНаценки = (ЦенаПоКурсу / (ЦенаСписания / 100)) - 100 ;
														Движение.РентабельностьПродаж = (ЦенаСписания / ?(ЦенаПоКурсу = 0, 1, ЦенаПоКурсу)) * 100;
													КонецЕсли;

													Движение.Период 	  = Дата;
													Движение.Номенклатура = Номенклатура;
													Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
														Движение.СерияНоменклатуры = СерияНоменклатуры;
													КонецЕсли;

													Движение.Склад		  = Склад;
													Движение.Комментарий  = КомментарийСтроки;
													Движение.Количество   = Количество;

												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								Иначе // это набор
									Отказ = ОбработатьДвиженияДляНабора(Номенклатура, ТекСтрокаТовара.Количество, СуммаТов, ВестиУчетВаловойПрибыли, клиент, ЗначениеЗаполненоКлиентПоставщик, отказ, ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, ПоведениеПрограммыПриРасходеТоваровБезОстатка, ОтменитьПроверкиНаОтказ);
								КонецЕсли;

								Если ВестиУчетПродажСотрудников Тогда
									Движение = Движения.ПродажиСотрудников.Добавить();
									Движение.Комментарий  = КомментарийСтроки;
									Движение.Номенклатура = Номенклатура;
									Движение.Период 	  = Дата;
									Движение.Сотрудник    = Сотрудник;
									Движение.Сумма  	  = СуммаТов;
									Движение.Количество	  = Количество;
								КонецЕсли;

								Если НЕ Отказ
									И ЗначениеЗаполненоКлиентПоставщик Тогда

									Если Клиент Тогда

										Если НЕ ПередачаДляКомиссионнойТорговли
											ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионера") Тогда

											Движение = Движения.Продажи.Добавить();
											Движение.Склад		= Склад;
											Движение.Клиент 	= КлиентПоставщик;
											Движение.Количество = Количество;
											Движение.Сумма 		= СуммаТов;
											Движение.Договор		= Договор;
											Движение.Период 		= Дата;
											Движение.Номенклатура 	= Номенклатура;
											Движение.Комментарий	= КомментарийСтроки;

											Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
												И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда

												Движение.СерияНоменклатуры = СерияНоменклатуры;
											КонецЕсли;
										КонецЕсли;
									ИначеЕсли ЗначениеЗаполнено(КлиентПоставщик) Тогда
										Движение = Движения.Закупки.Добавить();
										Движение.Поставщик 	= КлиентПоставщик;
										Движение.Количество = -Количество;
										Движение.Сумма 		= -СуммаТов;
										Движение.Договор		= Договор;
										Движение.Период 		= Дата;
										Движение.Номенклатура 	= Номенклатура;
										Движение.Комментарий	= КомментарийСтроки;

										Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
											И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиПриобретениеИРеализациюПоСериямНоменклатуры") Тогда

											Движение.СерияНоменклатуры = СерияНоменклатуры;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;

						КонецЦикла;
					КонецЕсли;

					Если НЕ ПоступилоДенегТут = 0
						И ЗначениеЗаполнено(ЗаказКлиента)
						И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОплатПоОтдельнымЗаказам") Тогда

						ЗаписьРегистра = Движения.ОплатаПоЗаказам.ДобавитьРасход();
						ЗаписьРегистра.Период	  = Дата;
						ЗаписьРегистра.Активность = ИСТИНА;
						ЗаписьРегистра.Заказ   	  = Ссылка;
						ЗаписьРегистра.Сумма 	  = ПоступилоДенегТут;
					КонецЕсли;

					Если НЕ Отказ
						И БылоПополнение Тогда

						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно()
							И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСообщатьОПополненииТовараИлиДенег") Тогда

							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произведено пополнение за счет склада") + ": " + СкладПополнения, , Ссылка);
						КонецЕсли;
					КонецЕсли;

					Если НЕ Отказ
						И ЗначениеЗаполненоКлиентПоставщик Тогда

						Если ЗначениеЗаполнено(ВидЦен)
							И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда

							ВалютаЦены = ВидЦен.ВалютаЦены;
							КурсТовара = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаЦены, Дата);
						Иначе
							КурсТовара = 1;
							ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
						КонецЕсли;

						ИтогоСумма = Товары.Итог("Сумма") * КурсТовара;

						Если Клиент
							И ВестиУчетПоКлиентам Тогда

							Движение = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда

								Движение 			 = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ИтогоСумма;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
							КонецЕсли;
						ИначеЕсли ВестиУчетПоПоставщикам Тогда
							Движение = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ИтогоСумма;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ИтогоСумма;
								Движение.Период 	 = ?(ЗначениеЗаполнено(ДатаОтсрочки), ДатаОтсрочки, Дата + ?(ЗначениеЗаполнено(Договор), Договор.УстанавливаетСрокОплатыВДнях * 3600 * 24, 0));
							КонецЕсли;
						КонецЕсли;

						Если РасчетыВВалюте Тогда
							Движение = Движения.РасчетыВВалюте.Добавить();
							Если Клиент Тогда
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Иначе
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							КонецЕсли;

							Движение.КлиентПоставщик = КлиентПоставщик;
							Движение.Договор 	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(Товары.Итог("Сумма"), ВалютаКонтрагента, ВалютаЦены, Дата);
							Движение.Валюта 	 = ВалютаКонтрагента;
							Движение.СуммаВОсновнойВалюте = ИтогоСумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	// заказ/не заказ

				Если НЕ ПоступилоДенегТут = 0 Тогда
					Если ВестиУчетДвиженияДенег Тогда

						Если РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах
							И НЕ Оплаты.количество() = 0 Тогда

							Для Каждого СтрокаОплаты Из Оплаты Цикл
								Если НЕ СтрокаОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
									Если ЗначениеЗаполнено(СтрокаОплаты.ХранилищеДенег) Тогда
										ФормаОплаты = СтрокаОплаты.ХранилищеДенег.ФормаОплаты;
									Иначе
										ФормаОплаты = СтрокаОплаты.ФормаОплаты;
									КонецЕсли;

									Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -СтрокаОплаты.Сумма, Дата, ФормаОплаты, СтрокаОплаты.Валюта, СтрокаОплаты.ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);

									Если НЕ Отказ Тогда
										Движение = Движения.Деньги.Добавить();
										Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
										Движение.Период 		= Дата;
										Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
										Движение.Валюта 		= СтрокаОплаты.Валюта;
										Движение.СуммаВВалюте 	= СтрокаОплаты.Сумма;
										Движение.Сумма 			= СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
										Движение.ХранилищеДенег = СтрокаОплаты.ХранилищеДенег;
										Движение.ФормаОплаты 	= ФормаОплаты;
									КонецЕсли;

									Если РасчетыВВалюте Тогда
										Движение = Движения.РасчетыВВалюте.Добавить();
										Если Клиент Тогда
											Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
										Иначе
											Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
										КонецЕсли;

										Движение.КлиентПоставщик = КлиентПоставщик;
										Движение.Договор 	 = Договор;
										Движение.Период 	 = Дата;
										Движение.Комментарий = СтрокаОплаты.ОСтроке;
										Движение.Сумма 		 = ОбщийМодульСервер.ПоКурсу(СтрокаОплаты.Сумма, ВалютаКонтрагента, СтрокаОплаты.Валюта, Дата, СтрокаОплаты.Курс);
										Движение.Валюта 	 = ВалютаКонтрагента;
										Движение.СуммаВОсновнойВалюте = СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
									КонецЕсли;
								КонецЕсли;

								Если ЗначениеЗаполнено(СтрокаОплаты.Ваучер)
									И СтрокаОплаты.Ваучер.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда

									Движение = Движения.НакоплениеНаВаучеры.Добавить();
									Движение.Валюта			= СтрокаОплаты.Валюта;
									Движение.Ваучер			= СтрокаОплаты.Ваучер;
									Движение.ВидДвижения	= ВидДвиженияНакопленияРасход;
									Движение.Сумма			= СтрокаОплаты.Сумма * ?(СтрокаОплаты.Курс = 0, 1, СтрокаОплаты.Курс);
									Движение.Период			= Дата;
									Движение.СуммаВВалюте	= СтрокаОплаты.Сумма;
									Движение.Комментарий	= СтрокаОплаты.ОСтроке;
								КонецЕсли;

							КонецЦикла;
						ИначеЕсли НЕ ПоступилоДенегТут = 0 Тогда
							Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
								ФормаОплаты = ХранилищеДенег.ФормаОплаты;
							Иначе
								ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
							КонецЕсли;

							Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств( -ПоступилоДенег, Дата, ФормаОплаты, Валюта, ХранилищеДенег, , Ссылка, ОтменитьПроверкиНаОтказ);

							Если НЕ Отказ Тогда
								Движение = Движения.Деньги.Добавить();
								Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
								Движение.Период 		= Дата;
								Движение.Статья 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СтатьиДвиженияДенег.ДоходОтРеализации");
								Движение.Валюта 		= Валюта;
								Движение.СуммаВВалюте 	= ПоступилоДенег;
								Движение.Сумма 			= ПоступилоДенегТут;
								Движение.ХранилищеДенег = ХранилищеДенег;
								Движение.ФормаОплаты 	= ФормаОплаты;
							КонецЕсли;

							Если РасчетыВВалюте Тогда
								Движение = Движения.РасчетыВВалюте.Добавить();
								Если Клиент Тогда
									Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Иначе
									Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								КонецЕсли;

								Движение.КлиентПоставщик = КлиентПоставщик;
								Движение.Договор 	 	 = Договор;
								Движение.Период 	 	 = Дата;
								Движение.Комментарий 	 = Комментарий;
								Движение.Сумма 		 	 = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег, ВалютаКонтрагента, Валюта, Дата, Курс);
								Движение.Валюта 	 	 = ВалютаКонтрагента;
								Движение.СуммаВОсновнойВалюте = ПоступилоДенегТут;
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;

					Если ЗначениеЗаполненоКлиентПоставщик Тогда

						Если Клиент
							И ВестиУчетПоКлиентам Тогда

							Движение = Движения.Расчеты.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
							Движение.Клиент 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ПоступилоДенегТут;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								Движение = Движения.РасчетыСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияРасход;
								Движение.Клиент 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ПоступилоДенегТут;
								Движение.Период 	 = Дата;
							КонецЕсли;

						ИначеЕсли ВестиУчетПоПоставщикам Тогда
							Движение = Движения.РасчетыСПоставщиками.Добавить();
							Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
							Движение.Поставщик 	 = КлиентПоставщик;
							Движение.Договор	 = Договор;
							Движение.Период 	 = Дата;
							Движение.Комментарий = Комментарий;
							Движение.Сумма 		 = ПоступилоДенегТут;

							Если ИспользоватьМеханизмОтсрочкиПлатежа Тогда
								Движение 			 = Движения.РасчетыСПоставщикамиСОтсрочкой.Добавить();
								Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
								Движение.Поставщик 	 = КлиентПоставщик;
								Движение.Договор	 = Договор;
								Движение.Комментарий = Комментарий;
								Движение.Сумма 		 = ПоступилоДенегТут;
								Движение.Период 	 = Дата;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ Отказ
					И ПередачаДляКомиссионнойТорговли
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") Тогда

					Для Каждого СтрокаТовара Из Товары Цикл
						Движение 			 = Движения.ТоварыПереданныеНаКомиссию.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопленияПриход;
						Движение.ДатаОтчетаПоКомиссии = ДатаОтчетаПоКомиссии;
						Движение.Договор	 		= Договор;
						Движение.Клиент 			= КлиентПоставщик;
						Движение.Количество 		= СтрокаТовара.Количество;
						Движение.Комментарий 	 	= СтрокаТовара.ОСтроке;
						Движение.Номенклатура		= СтрокаТовара.Номенклатура;
						Движение.Период				= Дата;
						Движение.СерияНоменклатуры	= СтрокаТовара.СерияНоменклатуры;
						Движение.Сумма             	= СтрокаТовара.Сумма;

					КонецЦикла;
				КонецЕсли;

				Если НЕ Отказ
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда

					ОтслеживатьВаучерыВКачествеНоменклатуры = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");

					Для Каждого СтрокаВаучер Из Ваучеры Цикл
						Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер) Тогда
							Если СтрокаВаучер.ВаучерИзъят Тогда
								Если ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Контрагент) Тогда
									ОбъектВаучер = СтрокаВаучер.Ваучер.ПолучитьОбъект();
									ОбъектВаучер.Контрагент = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
									ОбъектВаучер.Записать();
								КонецЕсли;

								Если ОтслеживатьВаучерыВКачествеНоменклатуры
									И ЗначениеЗаполнено(СтрокаВаучер.Ваучер.Номенклатура) Тогда

									Движение = Движения.Товары.Добавить();
									Движение.Номенклатура = СтрокаВаучер.Ваучер.Номенклатура;
									Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
									Движение.Период 	  = Дата;
									СкладДвижения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");

									Если НЕ ЗначениеЗаполнено(СкладДвижения) Тогда
										Если ЗначениеЗаполнено(Склад) Тогда
											СкладДвижения = Склад;
										Иначе
											СкладДвижения = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
										КонецЕсли;
									КонецЕсли;

									Движение.Склад 		  = СкладДвижения;
									Движение.Комментарий  = СтрокаВаучер.ОСтроке;
									Движение.Количество   = 1;
									Движение.Сумма 		  = 0;
									Движение.СписаниеИлиОприходование = ИСТИНА;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;

					КонецЦикла;

					Если ЗначениеЗаполнено(ВаучерНакопления) Тогда
						СуммаНакопления = 0;
						Для Каждого СтрокаТовара Из Товары Цикл
							СуммаНакопления = СуммаНакопления + ОбщийМодульТоварСервер.ВычислитьСуммуНакопления(ВаучерНакопления, СтрокаТовара.Номенклатура, СтрокаТовара.Сумма, Склад, СтрокаТовара.Дата);

						КонецЦикла;

						Движение = Движения.НакоплениеНаВаучеры.Добавить();
						Движение.Валюта		  = ВаучерНакопления.Валюта;
						Движение.Ваучер		  = ВаучерНакопления;
						Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
						Движение.Период		  = Дата;
						Движение.Сумма		  = ОбщийМодульСервер.ПоКурсу(СуммаНакопления, ВаучерНакопления.Валюта, Валюта, Дата);
						Движение.СуммаВВалюте = СуммаНакопления;
						Движение.Комментарий  = Комментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Движения.Деньги.Записывать    = НЕ Отказ;
			Движения.Закупки.Записывать   = НЕ Отказ;
			Движения.Расчеты.Записывать   = НЕ Отказ;
			Движения.РасчетыСОтсрочкой.Записывать	 = НЕ Отказ;
			Движения.РасчетыСПоставщиками.Записывать = НЕ Отказ;
			Движения.РасчетыСПоставщикамиСОтсрочкой.Записывать = НЕ Отказ;
			Движения.РасчетыВВалюте.Записывать 	 = НЕ Отказ;
			Движения.Продажи.Записывать   = НЕ Отказ;
			Движения.Товары.Записывать    = НЕ Отказ;
			Движения.ОплатаПоЗаказам.Записывать  = НЕ Отказ;
			Движения.ВаловаяПрибыль.Записывать   = НЕ Отказ;
			Движения.ЗаказыКлиентов.Записывать   = НЕ Отказ;
			Движения.ПродажиСотрудников.Записывать   = НЕ Отказ;
			Движения.ТоварыПереданныеНаКомиссию.Записывать = НЕ Отказ;
			Движения.НакоплениеНаВаучеры.Записывать  = НЕ Отказ;
		КонецЕсли;

	КонецПроцедуры

	Процедура ОбработкаУдаленияПроведения(Отказ)

		Если НЕ Отказ Тогда
			Если ЭтоЗаказ Тогда
				Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001851", , Отказ, ЭтотОбъект);
			Иначе
				Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001801", , Отказ, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;

		Если НЕ Отказ
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА)
			И Модифицированность()
			И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
				ПодготовкаКПроведению(Отказ);
			КонецЕсли;

			Если ТовараВКоличестве 	= 0
				И ТовараНаСумму 	= 0
				И ПоступилоДенег 	= 0
				И Оплаты.Количество() = 0
				И РежимЗаписи 		= РежимЗаписиДокумента.Проведение Тогда

				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;

			// ОБМЕН С САЙТОМ+
			Если НЕ ЗначениеЗаполнено(НалогообложениеНДС) Тогда

				НалогообложениеНДС = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НалогообложениеНДСПоУмолчанию");
			КонецЕсли;

			// ОБМЕН С САЙТОМ-
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда

				ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПодготовкаКПроведению(Отказ) Экспорт

		Если НЕ Отказ
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда

			Если Дата > ТекущаяДата()
				И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда

				Дата = ТекущаяДата();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
				И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда

				ХранилищеДенег = ОбщийМодульПовтор.НайтиХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
			КонецЕсли;

			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах") Тогда
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
					Товары.Свернуть("Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ПроцентСкидки, ОСтроке, ЗаказКлиента", "Количество, Сумма, СуммаБезСкидки");
				Иначе
					Товары.Свернуть("Номенклатура, СерияНоменклатуры, ЕдиницаИзмерения, Цена, ОСтроке, ЗаказКлиента", "Количество, Сумма");
				КонецЕсли;
			КонецЕсли;

			ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");

			ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");

			МассивПустыхСтрок  = Новый Массив;
			МассивНоменклатуры = Новый Массив;
			МассивСерий 	   = Новый Массив;

			Для Каждого СтрокаТовары Из Товары Цикл
				НоменклатураСтроки = СтрокаТовары.Номенклатура;
				СерияНоменклатуры  = СтрокаТовары.СерияНоменклатуры;

				Если ИспользоватьЕдиницыИзмеренияНоменклатуры
					И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда

					НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(СтрокаТовары.ЕдиницаИзмерения) = Неопределено;
				Иначе
					НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(НоменклатураСтроки) = Неопределено;
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
					МассивПустыхСтрок.Добавить(СтрокаТовары);
				ИначеЕсли НоменклатураПовторяется Тогда

					Если ВестиУчетСерийНоменклатуры
						И ЗначениеЗаполнено(СерияНоменклатуры) Тогда

						Если НЕ МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
							Отказ = ИСТИНА;
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется серия товара") + ": " + НоменклатураСтроки, , Ссылка);
						КонецЕсли;
					ИначеЕсли ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номенклатура") + ": " + НоменклатураСтроки, , Ссылка);
					КонецЕсли;
				Иначе

					Если ИспользоватьЕдиницыИзмеренияНоменклатуры
						И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда

						МассивНоменклатуры.Добавить(СтрокаТовары.ЕдиницаИзмерения);
					Иначе
						МассивНоменклатуры.Добавить(НоменклатураСтроки);
					КонецЕсли;

					Если ВестиУчетСерийНоменклатуры
						И ЗначениеЗаполнено(СерияНоменклатуры) Тогда

						МассивСерий.Добавить(СерияНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Для Каждого СтрокаТовары Из МассивПустыхСтрок Цикл
				Товары.Удалить(СтрокаТовары);
			КонецЦикла;

			Если ЭтоЗаказ Тогда
				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
					Если (НЕ ПоступилоДенег = 0 ИЛИ НЕ оплаты.Количество() = 0) Тогда
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ и предоплата");
					Иначе
						ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ клиента");
					КонецЕсли;
				Иначе
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое списание");
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда

					Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
						Если ПередачаДляКомиссионнойТорговли Тогда
							Если (НЕ ПоступилоДенег = 0 ИЛИ НЕ Оплаты.Количество() = 0) Тогда
								ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация комиссионеру");
							Иначе
								ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передача комиссионеру");
							КонецЕсли;
						Иначе
							Если (НЕ ПоступилоДенег = 0 ИЛИ НЕ Оплаты.Количество() = 0) Тогда

								ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация");
							Иначе
								ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если (НЕ ПоступилоДенег = 0 ИЛИ НЕ оплаты.Количество() = 0) Тогда

							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена покупки");
						Иначе
							ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат поставщику");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание");
				КонецЕсли;
			КонецЕсли;

			Попытка // ЭтотОбъект
				ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
			Исключение
			КонецПопытки;

			Если Курс = 0 Тогда
				Курс = ?(ЗначениеЗаполнено(Валюта), ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата), 1);
			КонецЕсли;

			ТовараВКоличестве = Товары.итог("Количество");

			Если ЗначениеЗаполнено(ВидЦен)
				И ЗначениеЗаполнено(ВидЦен.ВалютаЦены) Тогда

				ТовараНаСумму = ОбщийМодульСервер.ПоКурсу(товары.Итог("Сумма"), , ВидЦен.ВалютаЦены, Дата);
			Иначе
				ТовараНаСумму = товары.Итог("Сумма");
			КонецЕсли;

			Если НЕ Отказ
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И ЗначениеЗаполнено(договор) Тогда

				Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
					КлиентПоставщик = Договор.КлиентПоставщик;
				ИначеЕсли НЕ КлиентПоставщик = Договор.КлиентПоставщик Тогда
					Договор = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Договора.ПустаяСсылка()");
				КонецЕсли;

				Если ЗначениеЗаполнено(Договор)
					И ЗначениеЗаполнено(Организация)
					И НЕ Организация = договор.Организация Тогда

					Организация = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ПустаяСсылка()");
				КонецЕсли;
			КонецЕсли;

			Если НЕ Отказ Тогда

				РасчетыВВалюте = ЗначениеЗаполнено(КлиентПоставщик)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
				И ЗначениеЗаполнено(КлиентПоставщик.ОсновнаяВалюта)
				И НЕ КлиентПоставщик.ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

				ВалютаКонтрагента = ОбщийМодульСервер.ПолучитьВалютуКонтрагента(КлиентПоставщик);

				ТовараНаСуммуВВалютеКУстановке = 0;

				Если РасчетыВВалюте Тогда
					ТовараНаСуммуВВалютеКУстановке = ОбщийМодульСервер.ПоКурсу(ТовараНаСумму, ВалютаКонтрагента, ?(ЗначениеЗаполнено(ВидЦен), ВидЦен.ВалютаЦены, Неопределено), Дата);
				КонецЕсли;

				Если НЕ ТовараНаСуммуВВалютеКУстановке = ТовараНаСуммуВВалюте Тогда
					ТовараНаСуммуВВалюте = ТовараНаСуммуВВалютеКУстановке;
				КонецЕсли;

			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") Тогда
				ПоступилоДенегТут = 0;
				Для Каждого СтрокаОплаты Из Оплаты Цикл
					ПоступилоДенегТут = ПоступилоДенегТут + СтрокаОплаты.Сумма * СтрокаОплаты.Курс;
				КонецЦикла;

				Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			Иначе
				ПоступилоДенегТут = ОбщийМодульСервер.ПоКурсу(ПоступилоДенег * Курс, , Валюта, Дата);
			КонецЕсли;

			РазницаВОплате = ТовараНаСумму - ПоступилоДенегТут;

			Если НЕ отказ
				И ЭтоЗаказ
				И РазницаВОплате < 1 Тогда

				ЗаказОплачен = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	Процедура ПриКопировании(ОбъектКопирования)
		Комментарий = "";
	КонецПроцедуры

#КонецЕсли
