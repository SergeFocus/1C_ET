// sza151121-1732
// sza150629-0219
// sza150518-0243
// sza150515-1706 печать ППФ
// sza150418-0000
// sza150414-0305
// sza150303-1717 мест
// sza141208-2217
// sza141201-0346
// sza141114-0239
// sza141016-2359 : артикул
// sza140807-1204 косметика
// sza140703-1737  текст заголовка счета
// sza140602-0141
// sza130909-2144 :

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)

	ДанныеСсылка  = Данные.Ссылка;
	Представление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ДанныеСсылка.ВидДокумента) + " " + ДанныеСсылка.Номер + " - " + формат(ДанныеСсылка.Дата, "ДФ='dd.MM.yy ЧЧ:мм'");
	СтандартнаяОбработка = ЛОЖЬ;

КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	ЗначенияЗаполнения = Неопределено;
	Попытка
		ЭтоЗаказ = Параметры.Ключ.ЭтоЗаказ;
	Исключение
		ЭтоЗаказ = ЛОЖЬ;
	КонецПопытки;

	Если (Параметры.Свойство("ЭтоЗаказ")
		И Параметры.ЭтоЗаказ)
		ИЛИ ЭтоЗаказ Тогда

		СтандартнаяОбработка = ЛОЖЬ;

		Если ВидФормы = "ФормаСписка" Тогда
			ВыбраннаяФорма = "ФормаСпискаЗаказов";
		ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "ФормаДокументаЗаказ";
		Иначе
			ВыбраннаяФорма = "ФормаВыбораЗаказов";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура Печать(ТабДокРезультат, Знач Ссылка, Знач ЭтоПечатьСчета = ЛОЖЬ, Знач НоСчетЕсть = ЛОЖЬ, Знач ЭтоВыполнениеРабот = ЛОЖЬ, Знач ЭтоТорг12 = ЛОЖЬ, Знач ЭтоЗаказНаряд = ЛОЖЬ, Знач ЗаголовокРасходнойНакладной = Неопределено, Знач ДваЭкземпляра = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач ЭтоСчетФактура = ЛОЖЬ) Экспорт

	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	ДокументДляПечати = Новый ТабличныйДокумент;
	ДокументДляПечати.ИмяПараметровПечати  = "РН" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;

	Если НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходыТовара")
		И НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыполненияРабот") Тогда

		Ссылка = Ссылка[0].ссылка;
	КонецЕсли;

	Запрос = Новый Запрос;

	Если ЭтоВыполнениеРабот Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент КАК КлиентПоставщик,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.СкладДляОбъектаВыполненияРабот,
		|	ВыполненияРабот.ДатаПоступленияОбъектаРаботНаНашСклад,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот,
		|	ВыполненияРабот.ДатаВыдачиОбъектаРаботКлиентуОбратно,
		|	ВыполненияРабот.КомментарийПриВыдачеОбъектаРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВЫРАЗИТЬ(ВыполненияРабот.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.ПредметСделки,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВаловаяПрибыль,
		|		ВаловаяПрибыльПлан,
		|		Валюта,
		|		ВалютаПлан,
		|		Дата,
		|		ДатаПлан,
		|		Количество,
		|		КоличествоПлан,
		|		Курс,
		|		КурсПлан,
		|		Номенклатура,
		|		ОСтроке,
		|		План,
		|		ПроцентСкидки,
		|		ПроцентСкидкиПлан,
		|		СерияНоменклатуры,
		|		Склад,
		|		Сотрудник,
		|		Сумма,
		|		СуммаБезСкидки,
		|		СуммаБезСкидкиПлан,
		|		Цена,
		|		ЦенаПлан,
		|		ЕдиницаИзмерения
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ВалютаПлан,
		|		КурсПлан,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ВалютаПлан,
		|		КурсПлан,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ЕСТЬNULL(ВыполненияРабот.Клиент.Телефон, "") КАК Телефон,
		|						ЕСТЬNULL(ВыполненияРабот.Клиент.Адрес, "") КАК Адрес,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ЛОЖЬ КАК ЭтоЗаказ,
		|	"""" КАК Телефон
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Ссылка В(&Ссылка)";
		КлиентПоставщик = Ссылка.Клиент;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Курс,
		|	ВЫРАЗИТЬ(РасходыТовара.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПредметСделки,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ЕдиницаИзмерения,
		|		ОСтроке
		|	),
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ХранилищеДенег,
		|		Сумма,
		|		ФормаОплаты,
		|		Валюта,
		|		Курс,
		|		ОСтроке
		|	),
		|	РасходыТовара.Адрес,
		|	РасходыТовара.Телефон,
		|	РасходыТовара.СпособДоставки,
		|	РасходыТовара.ТалонТрек,
		|	РасходыТовара.КлиентОповещен,
		|	РасходыТовара.ТоварОтправлен,
		|	РасходыТовара.ДатаОтправки,
		|	РасходыТовара.ДатаОповещения,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка В(&Ссылка)";
		КлиентПоставщик = Ссылка.КлиентПоставщик;
	КонецЕсли;

	ЯзыкДокументов = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик, , ЛОЖЬ);
	Запрос.Параметры.Вставить("Ссылка", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	ОсновнаяВалюта 	= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	СуммаСкидки = 0;
	ЕстьСкидка  = ЛОЖЬ;
	ВыводитьВРасходномДокументеЧислоМест 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеЧислоМест");
	НаименованиеЕдиницыМеста 				= СокрЛП(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеЕдиницыМеста"));
	ИспользоватьРеквизитАртикулНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
	ИспользоватьШтрихКоды 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	ПечататьАртикул 						= ИспользоватьРеквизитАртикулНоменклатуры И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую");
	НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента");
	ИспользоватьСкидки = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") И НЕ НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента;
	ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
	И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой");
	ЭтоЗаказ = ЛОЖЬ;

	Пока Выборка.Следующий() Цикл
		ЭтоЗаказ = Выборка.ЭтоЗаказ;
		Если ИспользоватьСкидки Тогда
			ВыборкаТовары = Выборка.Товары.Выбрать();

			Пока ВыборкаТовары.Следующий() Цикл
				Если НЕ ВыборкаТовары.СуммаБезСкидки = 0 Тогда
					Скидка = (ВыборкаТовары.Сумма - ВыборкаТовары.СуммаБезСкидки);
					Если НЕ ЕстьСкидка Тогда
						ЕстьСкидка = НЕ Скидка = 0;
					КонецЕсли;

					СуммаСкидки = СуммаСкидки + Скидка; // Не прерывать!
				КонецЕсли;
			КонецЦикла;
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Выборка.Сбросить();
	ОбластьПечатиЭкземпляра = Новый ТабличныйДокумент;
	Если ЭтоСчетФактура Тогда
		СсылкаНаОбъектПечати = Ссылка;
		РазрядМетаданных = ""; ИмяМетаданных = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.СчетФактура, Выборка.Дата, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ОбластьПечатиЭкземпляра = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ОбластьПечатиЭкземпляра, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		Иначе
			Макет = ПолучитьОбщийМакет("СчетФактура");
			Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
			Шапка = Макет.ПолучитьОбласть("РазделительШапка");
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ОбластьПечатиЭкземпляра.Вывести(Шапка);
			ОбластьПечатиЭкземпляра.Область().СоздатьФорматСтрок();

			Пока Выборка.Следующий() Цикл
				Если ВставлятьРазделительСтраниц Тогда
					ОбластьПечатиЭкземпляра.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие"));
				СведенияОПоставщике = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов));
				АдресПоставщика = ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
				ИННПоставщика = Организация.ИНН;
				КлиентПоставщик = Выборка.КлиентПоставщик;

				Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
					КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
				КонецЕсли;

				СведенияОПокупателе = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов));
				АдресДоставки = Выборка.Адрес;
				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
					Если ПустаяСтрока(АдресДоставки) Тогда
						АдресДоставки = КлиентПоставщик.Адрес;

						Если ПустаяСтрока(АдресДоставки) Тогда
							АдресДоставки = КлиентПоставщик.ЮридическийАдрес;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				ВыборкаВидЦен = Выборка.ВидЦен;

				Если ЗначениеЗаполнено(ВыборкаВидЦен)
					И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда

					ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
				Иначе
					ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаБезШК");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продавец", ЯзыкДокументов) + ": " + СведенияОПоставщике;
				ОбластьМакета.Параметры.АдресПоставщика 				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Адрес", ЯзыкДокументов) + ": " + АдресПоставщика;
				ОбластьМакета.Параметры.ИННПоставщика 					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИНН/КПП продавца", ЯзыкДокументов) + ": " + ИННПоставщика;
				ОбластьМакета.Параметры.ПредставлениеГрузоотправителя 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Грузоотправитель и его адрес", ЯзыкДокументов) + ": " + СведенияОПоставщике;
				ОбластьМакета.Параметры.Грузоотправитель 				= Организация;
				ОбластьМакета.Параметры.ПредставлениеГрузополучателя    = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Грузополучатель и его адрес", ЯзыкДокументов) + ": " + СведенияОПокупателе;
				ОбластьМакета.Параметры.Грузополучатель                 = КлиентПоставщик;
				ОбластьМакета.Параметры.ПоДокументу						= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("К платежно-расчетному документу", ЯзыкДокументов) + " -- " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " --";
				ОбластьМакета.Параметры.ПредставлениеПокупателя         = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Покупатель", ЯзыкДокументов) + ": " + СведенияОПокупателе;
				ОбластьМакета.Параметры.Покупатель                      = КлиентПоставщик;
				ОбластьМакета.Параметры.АдресПокупателя					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Адрес", ЯзыкДокументов) + ": " + АдресДоставки;
				ОбластьМакета.Параметры.АдресПокупателя					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИНН/КПП покупателя", ЯзыкДокументов) + ": " + КлиентПоставщик.ИНН;
				ОбластьМакета.Параметры.Валюта							= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюта", ЯзыкДокументов) + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("наименование, код", ЯзыкДокументов) + " " + ?(ВалютаЦены.Код = "643", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Российский рубль", ЯзыкДокументов), СокрЛП(ВалютаЦены)) + ", " + ВалютаЦены.Код;
				НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, НомерСчетаФактуры, ДатаСчетаФактуры, НомерИсправленияСчетаФактуры, ДатаИсправленияСчетаФактуры");
				НомераДаты.Номер = Выборка.Номер;
				НомераДаты.Дата = Формат(Выборка.Дата, "ДФ='дд ММММ гггг'")+ " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("г.", ЯзыкДокументов);
				НомераДаты.НомерИсправления = "--";
				НомераДаты.ДатаИсправления  = "--";
				НомераДаты.НомерСчетаФактуры = Выборка.Номер;
				НомераДаты.ДатаСчетаФактуры = Формат(Выборка.Дата, "ДФ='дд ММММ гггг'")+ " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("г.", ЯзыкДокументов);
				НомераДаты.НомерИсправленияСчетаФактуры = "";
				НомераДаты.ДатаИсправленияСчетаФактуры = "";
				ОбластьМакета.Параметры.Заполнить(НомераДаты);
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьМакета);
				ОбластьПечатиЭкземпляра.Вывести(ОбластьМакета);
				ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЗаголовокТаблицы);
				ОбластьПечатиЭкземпляра.Вывести(ЗаголовокТаблицы);
				ИтоговыеСуммы = Новый Структура;
				СтруктураРесурсовДляИтогов = Новый Структура;
				СтруктураРесурсовДляИтогов.Вставить("СуммаБезНДС",       0);
				СтруктураРесурсовДляИтогов.Вставить("СуммаНДС",          0);
				СтруктураРесурсовДляИтогов.Вставить("СуммаСНДС",         0);
				СтруктураРесурсовДляИтогов.Вставить("Количество",        0);
				СтруктураРесурсовДляИтогов.Вставить("КоличествоМест",    0);
				СтруктураРесурсовДляИтогов.Вставить("КоличествоПринято", 0);
				СтруктураРесурсовДляИтогов.Вставить("МассаБрутто",       0);
				СтруктураРесурсовДляИтогов.Вставить("МассаНетто",        0);
				СтруктураРесурсовДляИтогов.Вставить("Сумма",             0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаБезНДСУвеличение", 0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаБезНДСУменьшение", 0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаНДСУвеличение",    0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаНДСУменьшение",    0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаСНДСУвеличение",   0);
				СтруктураРесурсовДляИтогов.Вставить("РазницаСНДСУменьшение",   0);

				Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
					ИтоговыеСуммы.Вставить("Итого" + Элемент.Ключ + "НаСтранице", 0);
					ИтоговыеСуммы.Вставить("Итого" + Элемент.Ключ, 0);
				КонецЦикла;

				МассивВыводимыхОбластей = Новый Массив;
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				СтруктураПараметров = Новый Структура;

				Если Организация.ПравовойСтатус = Перечисления.ПравовойСтатус.ЮрЛицо
					ИЛИ Организация.ПравовойСтатус = Перечисления.ПравовойСтатус.ЮрЛицоНеРезидент Тогда

					СтруктураПараметров.Вставить("ФИОРуководителя", Организация.Руководитель);
					СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", Организация.ГлавныйБухгалтер);
				Иначе
					СтруктураПараметров.Вставить("ФИОПБОЮЛ", Организация.Руководитель);
					СтруктураПараметров.Вставить("Свидетельство", Организация.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость);
				КонецЕсли;

				ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
				ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
				ОбластьИтого = Макет.ПолучитьОбласть("Итого");
				ВыборкаТовары = Выборка.Товары.Выбрать();
				КоличествоСтрок = ВыборкаТовары.Количество();
				ТолькоСтавкаБезНДС = ИСТИНА;
				НомерСтроки = 0;

				Пока ВыборкаТовары.Следующий() Цикл
					НомерСтроки = НомерСтроки + 1;
					ОбластьМакета.Параметры.Заполнить(ВыборкаТовары);
					СтруктураПараметров = Новый Структура("КоличествоМест, КоличествоВОдномМесте, НоменклатураКод, ПредставлениеНоменклатуры", 0, 0, "", "");
					СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
					Номенклатура = ВыборкаТовары.Номенклатура;

					Если ЗначениеЗаполнено(Номенклатура) Тогда
						ЕдиницаИзмерения = ВыборкаТовары.ЕдиницаИзмерения;
						СтруктураПараметров.КоличествоМест = ОбщийМодульТоварСервер.ВычислитьЧислоМест(Номенклатура, ЕдиницаИзмерения, ВыборкаТовары.Количество);
						СтруктураПараметров.КоличествоВОдномМесте = Номенклатура.НаОдноМесто;
						СтруктураПараметров.НоменклатураКод	= ?(ПустаяСтрока(Номенклатура.КодУКТВЭД), Номенклатура.Код, Номенклатура.КодУКТВЭД);
						Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
						ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");
						СтруктураПараметров.ПредставлениеНоменклатуры = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;

						Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
							ЕдиницаИзмерения = Номенклатура.ОсновнаяЕдиницаИзмерения;
							КодЕдиницыИзмерения = "";
						Иначе
							КодЕдиницыИзмерения = ЕдиницаИзмерения.КодЕдиницыПоКлассификатору;
						КонецЕсли;

						Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
							Если ВРег(Лев(ЕдиницаИзмерения, 1)) = "Ш" Тогда
								КодЕдиницыИзмерения = "2009";
							ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "К" Тогда
								КодЕдиницыИзмерения = "0301";
							ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "М" Тогда
								КодЕдиницыИзмерения = "0101";
							ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "Л" Тогда
								КодЕдиницыИзмерения = "0138";
							ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 2)) = "УП" Тогда
								КодЕдиницыИзмерения = "2102";
							ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 3)) = "УСЛ"
								ИЛИ ВРег(Лев(ЕдиницаИзмерения, 4)) = "ПОСЛ" Тогда

								КодЕдиницыИзмерения = "2454";
							КонецЕсли;
						КонецЕсли;

						Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
							ЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.", ЯзыкДокументов);
						КонецЕсли;

						Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
							КодЕдиницыИзмерения = "2009";
						КонецЕсли;

						СтруктураПараметров.Вставить("ЕдиницаИзмеренияКод", КодЕдиницыИзмерения);
						СтруктураПараметров.Вставить("ЕдиницаИзмеренияНаименование", ЕдиницаИзмерения);
						СтавкаНДС = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
						Сумма = ВыборкаТовары.Сумма;
						СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
						СуммаНДС = Сумма - СуммаБезНДС;
						СтруктураПараметров.Вставить("СуммаБезНДС", СуммаБезНДС);

						Если СтавкаНДС = 0 Тогда
							СтруктураПараметров.Вставить("СтавкаНДС", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("без НДС", ЯзыкДокументов));
							СтруктураПараметров.Вставить("СуммаНДС", СтруктураПараметров.СтавкаНДС);
						Иначе
							СтруктураПараметров.Вставить("СтавкаНДС", СтавкаНДС);
							СтруктураПараметров.Вставить("СуммаНДС", СуммаНДС);
							ТолькоСтавкаБезНДС = Ложь;
						КонецЕсли;

						СтруктураПараметров.Вставить("СуммаСНДС", Сумма);
						СтруктураПараметров.Вставить("СтранаПроисхождения", ?(ЗначениеЗаполнено(Номенклатура.Производитель), Номенклатура.Производитель.Регион, ""));
						Если ЗначениеЗаполнено(СтруктураПараметров.СтранаПроисхождения) Тогда
							СтруктураПараметров.Вставить("СтранаПроисхожденияКод", СтруктураПараметров.СтранаПроисхождения.Код);
						Иначе
							СтруктураПараметров.Вставить("СтранаПроисхожденияКод", "");
						КонецЕсли;

						СтруктураПараметров.Вставить("НомерГТД", "--");
					КонецЕсли;

					СтруктураПараметров.Вставить("Акциз", "--");
					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
					Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
						ТекПараметр = ОбластьМакета.Параметры.Получить(т);

						Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
							ОбластьМакета.Параметры.Установить(т, "--");
						КонецЕсли;
					КонецЦикла;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьМакета);
					ОбластьПечатиЭкземпляра.Вывести(ОбластьМакета);
					СтруктураСуммПоСтроке = Новый Структура;
					СтруктураСуммПоСтроке.Вставить("СуммаБезНДС",       0);
					СтруктураСуммПоСтроке.Вставить("СуммаНДС",          0);
					СтруктураСуммПоСтроке.Вставить("СуммаСНДС",         0);
					СтруктураСуммПоСтроке.Вставить("Количество",        0);
					СтруктураСуммПоСтроке.Вставить("КоличествоМест",    0);
					СтруктураСуммПоСтроке.Вставить("КоличествоПринято", 0);
					СтруктураСуммПоСтроке.Вставить("МассаБрутто",       0);
					СтруктураСуммПоСтроке.Вставить("МассаНетто",        0);
					СтруктураСуммПоСтроке.Вставить("Сумма",             0);
					СтруктураСуммПоСтроке.Вставить("РазницаБезНДСУвеличение", 0);
					СтруктураСуммПоСтроке.Вставить("РазницаБезНДСУменьшение", 0);
					СтруктураСуммПоСтроке.Вставить("РазницаНДСУвеличение",    0);
					СтруктураСуммПоСтроке.Вставить("РазницаНДСУменьшение",    0);
					СтруктураСуммПоСтроке.Вставить("РазницаСНДСУвеличение",   0);
					СтруктураСуммПоСтроке.Вставить("РазницаСНДСУменьшение",   0);
					ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтруктураПараметров);

					Если НЕ СтруктураСуммПоСтроке.КоличествоМест = Цел(СтруктураСуммПоСтроке.КоличествоМест) Тогда
						СтруктураСуммПоСтроке.КоличествоМест = Цел(СтруктураСуммПоСтроке.КоличествоМест) + 1;
					КонецЕсли;

					Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
						Если ЗначениеЗаполнено(Элемент.Значение) Тогда
							ИтоговыеСуммы["Итого" + Элемент.Ключ + "НаСтранице"] = ИтоговыеСуммы["Итого" + Элемент.Ключ + "НаСтранице"] + ОбщийМодульТекстСервер.ПреобразоватьВЧисло(Элемент.Значение);
							ИтоговыеСуммы["Итого" + Элемент.Ключ] = ИтоговыеСуммы["Итого" + Элемент.Ключ] + ОбщийМодульТекстСервер.ПреобразоватьВЧисло(Элемент.Значение);
						КонецЕсли;

					КонецЦикла;

				КонецЦикла;

				ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(НомерСтроки, , ",,,,,,,,0"));
				ИтоговыеСуммы.Вставить("СуммаПрописью", ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаЦены, ЯзыкДокументов));
				Если ТолькоСтавкаБезНДС Тогда
					ИтоговыеСуммы.ИтогоСуммаНДС = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("без НДС", ЯзыкДокументов);
				КонецЕсли;

				ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);

				Для т = 0 По ОбластьИтого.Параметры.Количество() - 1 Цикл
					ТекПараметр = ОбластьИтого.Параметры.Получить(т);
					Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
						ОбластьИтого.Параметры.Установить(т, "--");
					КонецЕсли;

				КонецЦикла;

				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьИтого);
				ОбластьПечатиЭкземпляра.Вывести(ОбластьИтого);
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПодвала);
				ОбластьПечатиЭкземпляра.Вывести(ОбластьПодвала);
				ВставлятьРазделительСтраниц = ИСТИНА;

			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ЭтоТорг12 Тогда
		ДокументДляПечати.ИмяПараметровПечати  = "Торг12" + СокрЛП(ИмяКомпьютера());
		ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
		СсылкаНаОбъектПечати = Ссылка;
		РазрядМетаданных = ""; ИмяМетаданных = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.Торг12, Выборка.Дата, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ОбластьПечатиЭкземпляра = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ОбластьПечатиЭкземпляра, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		Иначе
			Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
			Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
			Шапка = Макет.ПолучитьОбласть("РазделительШапка");
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ОбластьПечатиЭкземпляра.Вывести(Шапка);
			ОбластьПечатиЭкземпляра.Область().СоздатьФорматСтрок();
			Шапка = Макет.ПолучитьОбласть("Шапка");
			ЗаголовокТаб  = Макет.ПолучитьОбласть("ЗаголовокТаб");
			НомерСтраницы = 1;
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьВсего  = Макет.ПолучитьОбласть("Всего");
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

			Пока Выборка.Следующий() Цикл
				Если ВставлятьРазделительСтраниц Тогда
					ОбластьПечатиЭкземпляра.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				ВыборкаВидЦен = Выборка.ВидЦен;

				Если ЗначениеЗаполнено(ВыборкаВидЦен)
					И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда

					ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
				Иначе
					ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;

				Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие"));
				ПредставлениеОрганизации = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов));
				ДолжностьРуководителя 	 = Организация.ДолжностьРуководителя;
				КлиентПоставщик = Выборка.КлиентПоставщик;
				ПредставлениеПлательщика = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов));
				Договор = Выборка.договор;

				Если ЗначениеЗаполнено(Договор) Тогда
					ОснованиеНомер = Договор.НомерДоговора;
					ОснованиеДата  = Договор.ДатаЗаключения;
				Иначе
					ОснованиеНомер = "";
					ОснованиеДата  = "";
					Договор = "";
				КонецЕсли;

				Сотрудник = Выборка.Сотрудник;

				Если ЗначениеЗаполнено(Сотрудник) Тогда
					Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
					ПредставлениеПодразделения = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Подразделение, ЯзыкДокументов));
				Иначе
					Подразделение = "";
					ПредставлениеПодразделения = "";
				КонецЕсли;

				ПредставлениеГрузополучателя = ПредставлениеПлательщика;
				Грузополучатель = КлиентПоставщик;
				Шапка.Параметры.Организация 				= Организация;
				Шапка.Параметры.ПредставлениеОрганизации 	= ПредставлениеОрганизации;
				Шапка.Параметры.Контрагент 					= КлиентПоставщик;
				Шапка.Параметры.ПредставлениеПлательщика 	= ПредставлениеПлательщика;
				Шапка.Параметры.Основание 					= Договор;
				Шапка.Параметры.ПредставлениеПодразделения 	= ПредставлениеПодразделения;
				Шапка.Параметры.Подразделение 				= Подразделение;
				Шапка.Параметры.ПредставлениеГрузополучателя= ПредставлениеГрузополучателя;
				Шапка.Параметры.Грузополучатель 			= Грузополучатель;
				Шапка.Параметры.ПредставлениеПоставщика 	= ПредставлениеОрганизации;
				АдресДоставки = Выборка.Адрес;

				Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
					Если ПустаяСтрока(АдресДоставки) Тогда
						АдресДоставки = КлиентПоставщик.Адрес;
						Если ПустаяСтрока(АдресДоставки) Тогда
							АдресДоставки = КлиентПоставщик.ЮридическийАдрес;
						КонецЕсли;
					КонецЕсли;

					ОКПО = КлиентПоставщик.ОКПО;
					Шапка.Параметры.ГрузополучательПоОКПО = ОКПО;
					Шапка.Параметры.ПлательщикПоОКПО 	  = ОКПО;
				Иначе
					Шапка.Параметры.ГрузополучательПоОКПО = "";
					Шапка.Параметры.ПлательщикПоОКПО 	  = "";
				КонецЕсли;

				Шапка.Параметры.АдресДоставки  = АдресДоставки;
				Шапка.Параметры.НомерДокумента = Выборка.Номер;
				Шапка.Параметры.ДатаДокумента  = Выборка.Дата;
				Если ЗначениеЗаполнено(Организация) Тогда
					ОКПО = Организация.ОКПО;
					Шапка.Параметры.ОрганизацияПоОКПО 	  = ОКПО;
					Шапка.Параметры.ПоставщикПоОКПО	  	  = ОКПО;
					Шапка.Параметры.ВидДеятельностиПоОКДП = Организация.ВидДеятельностиПоОКДП;
				Иначе
					Шапка.Параметры.ОрганизацияПоОКПО 	  = "";
					Шапка.Параметры.ПоставщикПоОКПО   	  = "";
					Шапка.Параметры.ВидДеятельностиПоОКДП = "";
				КонецЕсли;

				Шапка.Параметры.ОснованиеНомер = ОснованиеНомер;
				Шапка.Параметры.ОснованиеДата  = ОснованиеДата;

				// ТранспортнаяНакладнаяНомер
				// ТранспортнаяНакладнаяДата
				// ВидОперации
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ОбластьПечатиЭкземпляра.Вывести(Шапка);
				ЗаголовокТаб.Параметры.НомерСтраницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Страница") + " " + НомерСтраницы;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЗаголовокТаб);
				ОбластьПечатиЭкземпляра.Вывести(ЗаголовокТаб);
				ВставлятьРазделительСтраниц = ИСТИНА;
				НомерСтраницы = НомерСтраницы + 1;
				ВестиУчетРазмеровИВесаТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРазмеровИВесаТоваров");
				ИтогоМассаБрутто = 0;
				ИтогоКоличество  = 0;
				ИтогоСуммаБезНДС = 0;
				ВсегоСНДС 		 = 0;
				Всего 			 = 0;
				ЧислоСтрок 		 = 0;
				СуммаВсегоНДС 	 = 0;

				Если ЗначениеЗаполнено(Организация) Тогда
					СтавкаНДСОрганизации = Организация.СтавкаНДС;
				Иначе
					СтавкаНДСОрганизации = 0;
				КонецЕсли;

				ВыборкаТовары = Выборка.Товары.Выбрать();

				Пока ВыборкаТовары.Следующий() Цикл
					ЧислоСтрок   = ЧислоСтрок + 1;
					Номенклатура = ВыборкаТовары.Номенклатура;
					ЗначениеЗаполненоНоменклатура = ЗначениеЗаполнено(Номенклатура);
					ОбластьСтрока.Параметры.НомерСтроки = "" + ЧислоСтрок;

					Если ЗначениеЗаполненоНоменклатура Тогда
						Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
						ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");
						ОбластьСтрока.Параметры.Номенклатура 			  = Номенклатура;
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
						ОбластьСтрока.Параметры.НоменклатураКод 		  = ?(ПустаяСтрока(Номенклатура.КодУКТВЭД), Номенклатура.Код, Номенклатура.КодУКТВЭД);
					Иначе
						ОбластьСтрока.Параметры.Номенклатура 			  = "";
						ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = "";
						ОбластьСтрока.Параметры.НоменклатураКод 		  = "";
					КонецЕсли;

					ЕдиницаИзмерения = ВыборкаТовары.ЕдиницаИзмерения;

					Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ЕдиницаИзмерения, , , ЯзыкДокументов);
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = ЕдиницаИзмерения.Код;
					ИначеЕсли ЗначениеЗаполненоНоменклатура
						И НЕ ПустаяСтрока(Номенклатура.ОсновнаяЕдиницаИзмерения) Тогда

						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = Номенклатура.ОсновнаяЕдиницаИзмерения;
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = "";
					Иначе
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = "";
						ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = "";
					КонецЕсли;

					Количество = ВыборкаТовары.Количество;

					Если Количество = 0 Тогда
						Количество = 1;
					КонецЕсли;

					ИтогоКоличество = ИтогоКоличество + Количество;
					Сумма = ВыборкаТовары.Сумма;

					Если ВестиУчетРазмеровИВесаТоваров
						И ЗначениеЗаполненоНоменклатура Тогда

						Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
							ВесЕдиницы = ЕдиницаИзмерения.Вес;
						Иначе
							ВесЕдиницы = Номенклатура.Вес;
						КонецЕсли;

						МассаБрутто 	 = ВесЕдиницы * Количество;
						ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
						ОбластьСтрока.Параметры.МассаБрутто = МассаБрутто;
					Иначе
						ОбластьСтрока.Параметры.МассаБрутто = "";
					КонецЕсли;

					ОбластьСтрока.Параметры.Количество = Количество;
					ВсегоСНДС 	= ВсегоСНДС + Сумма;
					СтавкаНДС 	= ?(ЗначениеЗаполненоНоменклатура И ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, СтавкаНДСОрганизации);
					СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
					СуммаНДС 	= Сумма - СуммаБезНДС;
					Всего 		= Всего + Сумма;
					СуммаВсегоНДС 	 = СуммаВсегоНДС + СуммаНДС;
					ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
					ОбластьСтрока.Параметры.Цена  		= СуммаБезНДС / Количество;
					ОбластьСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
					ОбластьСтрока.Параметры.СтавкаНДС 	= СтавкаНДС;
					ОбластьСтрока.Параметры.СуммаНДС 	= СуммаНДС;
					ОбластьСтрока.Параметры.СуммаСНДС 	= Сумма;
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьСтрока);
					ОбластьПечатиЭкземпляра.Вывести(ОбластьСтрока);

				КонецЦикла;

				ОбластьВсего.Параметры.ИтогоКоличествоМест = "";
				Если ИтогоМассаБрутто = 0 Тогда
					ИтогоМассаБрутто    = "";
					МассаБруттоПрописью = "";
				Иначе
					МассаБруттоПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ИтогоМассаБрутто, ВалютаЦены, ЯзыкДокументов);
				КонецЕсли;

				ОбластьВсего.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
				ОбластьВсего.Параметры.ИтогоКоличество	= ИтогоКоличество;
				ОбластьВсего.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
				ОбластьВсего.Параметры.ИтогоСуммаНДС    = СуммаВсегоНДС;
				ОбластьВсего.Параметры.ИтогоСуммаСНДС   = Всего;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьВсего);
				ОбластьПечатиЭкземпляра.Вывести(ОбластьВсего);
				ОбластьПодвал.Параметры.КоличествоЛистовВПриложении = 1;
				КоличествоПорядковыхНомеровЗаписейПрописью  = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ЧислоСтрок, , ЯзыкДокументов, , "."); // вне валют
				КоличествоПорядковыхНомеровЗаписейПрописью 	= СокрЛП(СтрЗаменить(КоличествоПорядковыхНомеровЗаписейПрописью, "00", ""));
				ОбластьПодвал.Параметры.МассаНеттоПрописью 	= МассаБруттоПрописью;
				ОбластьПодвал.Параметры.МассаБруттоПрописью = МассаБруттоПрописью;
				ОбластьПодвал.Параметры.ВсегоМестПрописью 	= "";
				ОбластьПодвал.Параметры.СуммаПрописью 		= ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Всего, ВалютаЦены, ЯзыкДокументов);
				ОбластьПодвал.Параметры.ФИОРуководителя     = Организация.Руководитель;
				ОбластьПодвал.Параметры.ФИОГлавБухгалтера   = Организация.ГлавныйБухгалтер;
				ОбластьПодвал.Параметры.ДолжностьКладовщика = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник.Должность, "");
				ОбластьПодвал.Параметры.ФИОКладовщика       = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник, "");
				ОбластьПодвал.Параметры.ДатаДокументаДень   = Формат(Выборка.Дата, "ДФ=дд");
				ОбластьПодвал.Параметры.ДатаДокументаМесяц	= Формат(Выборка.Дата, "ДФ=ММММ");
				ОбластьПодвал.Параметры.ДатаДокументаГод	= Формат(Выборка.Дата, "ДФ=гггг");
				ОбластьПодвал.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
				ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = КоличествоПорядковыхНомеровЗаписейПрописью;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПодвал);
				ОбластьПечатиЭкземпляра.Вывести(ОбластьПодвал);
				ВставлятьРазделительСтраниц = ИСТИНА;

			КонецЦикла;
		КонецЕсли;
	Иначе	// регламентированный или собственный
		Если ЭтоПечатьСчета Тогда

			ВидПроизвольнойПечатнойФормы = Перечисления.ВидыПечатныхФорм.СчетКлиенту;
		ИначеЕсли ЭтоЗаказ Тогда
			ВидПроизвольнойПечатнойФормы = Перечисления.ВидыПечатныхФорм.ЗаказКлиента;
		Иначе
			ВидПроизвольнойПечатнойФормы = Перечисления.ВидыПечатныхФорм.ДокументРеализации;
		КонецЕсли;

		СсылкаНаОбъектПечати = Ссылка;
		РазрядМетаданных = ""; ИмяМетаданных = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(ВидПроизвольнойПечатнойФормы, Выборка.Дата, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ОбластьПечатиЭкземпляра = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ОбластьПечатиЭкземпляра, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		Иначе
			РегламентированныйДокумент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьРегламентированныйДокументРасходнойНакладной")
			ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиФормыТОРГ12") И ЭтоТорг12);
			ЦенаТоваровСодержитНДС = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЦенаТоваровСодержитНДС");
			ВыводитьАртикулОтдельнойКолонкой = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьАртикулОтдельнойКолонкой");

			Если РегламентированныйДокумент Тогда
				Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
				Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
				Шапка = Макет.ПолучитьОбласть("РазделительШапка");
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ОбластьПечатиЭкземпляра.Вывести(Шапка);
				ОбластьПечатиЭкземпляра.Область().СоздатьФорматСтрок();
				ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок1");
				ОбластьПоставщик 	= Макет.ПолучитьОбласть("Поставщик");
				ОбластьПокупатель 	= Макет.ПолучитьОбласть("Покупатель");
				ДопИнформация 		= Макет.ПолучитьОбласть("ДопИнформация");
				Пробел 				= Макет.ПолучитьОбласть("Пробел");
				ИтогоНДС 			= Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьИтоговСумм 	= Макет.ПолучитьОбласть("СуммаПрописью");
				МестоСоставления 	= Макет.ПолучитьОбласть("МестоСоставления");

				Если НЕ ЭтоПечатьСчета Тогда
					Подписи = Макет.ПолучитьОбласть("Подписи");
				Иначе
					Подписи = Макет.ПолучитьОбласть("ПодписиСчета");
				КонецЕсли;

				Если ЦенаТоваровСодержитНДС Тогда
					Если НЕ ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							ИмяШапкиТаблицы = "ШапкаБезНДС_нетЕдИзм";
							ИмяОбластьТовары = "СтрокаБезНдс_нетЕдИзм";
						Иначе
							ИмяШапкиТаблицы = "ШапкаБезНДС_нетЕдИзм_нетАрт";
							ИмяОбластьТовары = "СтрокаБезНдс_нетЕдИзм_нетАрт";
						КонецЕсли;
					Иначе
						Если ВыводитьАртикулОтдельнойКолонкой Тогда

							ИмяШапкиТаблицы = "ШапкаБезНДС";
							ИмяОбластьТовары = "СтрокаБезНдс";
						Иначе
							ИмяШапкиТаблицы = "ШапкаБезНДС_нетАрт";
							ИмяОбластьТовары = "СтрокаБезНдс_нетАрт";
						КонецЕсли;
					КонецЕсли;

					Если ВыводитьВРасходномДокументеЧислоМест Тогда
						ИмяШапкиТаблицы = ИмяШапкиТаблицы + "_ЧМ";
						ИмяОбластьТовары = ИмяОбластьТовары + "_ЧМ";
					КонецЕсли;

					ШапкаТаблицы  = Макет.ПолучитьОбласть(ИмяШапкиТаблицы);
					ОбластьТовары = Макет.ПолучитьОбласть(ИмяОбластьТовары);
					Если ЕстьСкидка Тогда
						ОбластьИтоговСумм = Макет.ПолучитьОбласть("ПодвалБезНДС");
					Иначе
						ОбластьИтоговСумм = Макет.ПолучитьОбласть("ПодвалБезНДСБезСкидки");
					КонецЕсли;
				ИначеЕсли ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
					Если ЕстьСкидка Тогда
						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							Если ВыводитьВРасходномДокументеЧислоМест Тогда
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомМестСкидка1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомМестСкидка1");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомСкидка1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомСкидка1");
							КонецЕсли;
						Иначе
							Если ВыводитьВРасходномДокументеЧислоМест Тогда

								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыМестСкидка1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаМестСкидка1");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыСкидка1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСкидка1");
							КонецЕсли;
						КонецЕсли;

						Подвал = Макет.ПолучитьОбласть("ИтогоСкидка1");
					Иначе
						Если ВыводитьАртикулОтдельнойКолонкой Тогда

							Если ВыводитьВРасходномДокументеЧислоМест Тогда
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомМест1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомМест1");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодом1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодом1");
							КонецЕсли;
						Иначе
							Если ВыводитьВРасходномДокументеЧислоМест Тогда

								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыМест1");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаМест1");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы1");
								ОбластьТовары = Макет.ПолучитьОбласть("Строка1");
							КонецЕсли;
						КонецЕсли;

						Подвал = Макет.ПолучитьОбласть("Итого1");
					КонецЕсли;
				Иначе
					Если ЕстьСкидка Тогда

						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							Если ВыводитьВРасходномДокументеЧислоМест Тогда
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомМестСкидка");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомМестСкидка");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомСкидка");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомСкидка");
							КонецЕсли;
						Иначе
							Если ВыводитьВРасходномДокументеЧислоМест Тогда

								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыМестСкидка");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаМестСкидка");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыСкидка");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСкидка");
							КонецЕсли;
						КонецЕсли;

						Подвал = Макет.ПолучитьОбласть("ИтогоСкидка");
					Иначе
						Если ВыводитьАртикулОтдельнойКолонкой Тогда

							Если ВыводитьВРасходномДокументеЧислоМест Тогда
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодомМест");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодомМест");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаСКодом");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСКодом");
							КонецЕсли;
						Иначе
							Если ВыводитьВРасходномДокументеЧислоМест Тогда

								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыМест");
								ОбластьТовары = Макет.ПолучитьОбласть("СтрокаМест");
							Иначе
								ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
								ОбластьТовары = Макет.ПолучитьОбласть("Строка");
							КонецЕсли;
						КонецЕсли;

						Подвал = Макет.ПолучитьОбласть("Итого");
					КонецЕсли;
				КонецЕсли;

				ОДействительностиСчета	= Макет.ПолучитьОбласть("ОДействительностиСчета");
			Иначе  // собственный встроенный
				ДокументДляПечати.ИмяПараметровПечати  = "ДокРасходВстроенный" + СокрЛП(ИмяКомпьютера());
				ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
				Макет = Документы.РасходыТовара.ПолучитьМакет("Печать");
				Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
				Шапка = Макет.ПолучитьОбласть("РазделительШапка");
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ОбластьПечатиЭкземпляра.Вывести(Шапка);
				ОбластьПечатиЭкземпляра.Область().СоздатьФорматСтрок();
				ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");

				Если ЭтоПечатьСчета Тогда
					Шапка = Макет.ПолучитьОбласть("ШапкаСчета");
				Иначе
					Шапка = Макет.ПолучитьОбласть("Шапка");
				КонецЕсли;

				Если ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
					Если ЕстьСкидка Тогда
						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							ИмяОбластиТоварыШапка = "ТоварыШапка1_арт";
							ИмяОбластиТовары = "Товары1_арт";
						Иначе
							ИмяОбластиТоварыШапка = "ТоварыШапка1";
							ИмяОбластиТовары = "Товары1";
						КонецЕсли;

						ИмяОбластиПодвала = "Подвал";
					Иначе
						Если ВыводитьАртикулОтдельнойКолонкой Тогда

							ИмяОбластиТоварыШапка = "ТоварыШапкаБезСкидки1_арт";
							ИмяОбластиТовары = "ТоварыБезСкидки1_арт";
						Иначе
							ИмяОбластиТоварыШапка = "ТоварыШапкаБезСкидки1";
							ИмяОбластиТовары = "ТоварыБезСкидки1";
						КонецЕсли;

						ИмяОбластиПодвала = "ПодвалБезСкидки";
					КонецЕсли;
				Иначе
					Если ЕстьСкидка Тогда

						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							ИмяОбластиТоварыШапка = "ТоварыШапка_арт";
							ИмяОбластиТовары = "Товары_арт";
						Иначе
							ИмяОбластиТоварыШапка = "ТоварыШапка";
							ИмяОбластиТовары = "Товары";
						КонецЕсли;

						ИмяОбластиПодвала = "Подвал";
					Иначе
						Если ВыводитьАртикулОтдельнойКолонкой Тогда

							ИмяОбластиТоварыШапка = "ТоварыШапкаБезСкидки_арт";
							ИмяОбластиТовары = "ТоварыБезСкидки_арт";
						Иначе
							ИмяОбластиТоварыШапка = "ТоварыШапкаБезСкидки";
							ИмяОбластиТовары = "ТоварыБезСкидки";
						КонецЕсли;

						ИмяОбластиПодвала = "ПодвалБезСкидки";
					КонецЕсли;
				КонецЕсли;

				Если ВыводитьВРасходномДокументеЧислоМест Тогда
					ИмяОбластиТоварыШапка = ИмяОбластиТоварыШапка + "_ЧМ";
					ИмяОбластиТовары = ИмяОбластиТовары + "_ЧМ";
				КонецЕсли;

				ОбластьТоварыШапка 	= Макет.ПолучитьОбласть(ИмяОбластиТоварыШапка);
				ОбластьТовары 		= Макет.ПолучитьОбласть(ИмяОбластиТовары);
				Подвал 				= Макет.ПолучитьОбласть(ИмяОбластиПодвала);
				ОбластьОплатыШапка  = Макет.ПолучитьОбласть("ОплатыШапка");
				ОбластьОплаты 		= Макет.ПолучитьОбласть("Оплаты");
			КонецЕсли;

			Пока Выборка.Следующий() Цикл
				Если ВставлятьРазделительСтраниц Тогда
					ОбластьПечатиЭкземпляра.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;

				ОбщееЧислоМест = 0;
				Валюта = ?(ЗначениеЗаполнено(Выборка.ВидЦен), Выборка.ВидЦен.ВалютаЦены, ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта));
				Если РегламентированныйДокумент Тогда
					Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.организация, ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие"));
					ПредставлениеОрганизации = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов);

					Если ЗначениеЗаполнено(Организация) Тогда
						СтавкаНДСОрганизации = Организация.СтавкаНДС;
					Иначе
						СтавкаНДСОрганизации = 0;
					КонецЕсли;

					КлиентПоставщик = Выборка.КлиентПоставщик;
					ПредставлениеПокупателя = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
					Сотрудник = ?(ЗначениеЗаполнено(Выборка.Сотрудник), Выборка.Сотрудник, Организация.Сотрудник);
					Если ЭтоПечатьСчета Тогда
						НомерСчета = ?(ПустаяСтрока(Выборка.НомерСчета), Выборка.Номер, Выборка.НомерСчета);
						ДатаСчета  = ?(Выборка.ДатаСчета = '00010101000000', Выборка.Дата, Выборка.ДатаСчета);
						ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаСчета");

						Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаСчета) Тогда
							ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату", ЯзыкДокументов);
						КонецЕсли;

						ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовкаСчета + " № " + НомерСчета + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(ДатаСчета, "ДФ=dd.MM.yyyy");
					Иначе

						Если ЗаголовокРасходнойНакладной = Неопределено
							ИЛИ ПустаяСтрока(ЗаголовокРасходнойНакладной) Тогда

							ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовара");
						Иначе
							ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЗаголовокРасходнойНакладной);
						КонецЕсли;

						Если ПустаяСтрока(ИмяДокумента) Тогда
							ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходная накладная", ЯзыкДокументов);
						КонецЕсли;

						ОбластьЗаголовок.Параметры.ТекстЗаголовка = ИмяДокумента + " № " + выборка.номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(выборка.дата, "ДФ=dd.MM.yyyy");
					КонецЕсли;

					ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
					ОбластьПоставщик.Параметры.Поставщик = Организация;
					РеквизитыПоставщика = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетный счет", ЯзыкДокументов) + " " + Организация.НомерСчета + ", " + Организация.НаименованиеБанка + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО", ЯзыкДокументов) + " " + Организация.МФО;
					РеквизитыПоставщика = РеквизитыПоставщика + Символы.ПС;
					РеквизитыПоставщика = РеквизитыПоставщика + ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
					ОКПО = Организация.ОКПО;

					Если ЗначениеЗаполнено(ОКПО) Тогда
						РеквизитыПоставщика = РеквизитыПоставщика + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("код по ОКПО", ЯзыкДокументов) + " " + ОКПО;
					КонецЕсли;

					ОбластьПоставщик.Параметры.РеквизитыПоставщика = РеквизитыПоставщика;

					Если ДваЭкземпляра Тогда
						ВсегоЭкземпляров = 2;
					Иначе
						ВсегоЭкземпляров = 1;
					КонецЕсли;

					ПоляПредставленийНоменклатурыАртикул = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул");

					Для счетчикЭкземпляров = 1 по ВсегоЭкземпляров Цикл
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЗаголовок);
						ОбластьПечатиЭкземпляра.Вывести(ОбластьЗаголовок);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПоставщик);
						ОбластьПечатиЭкземпляра.Вывести(ОбластьПоставщик);

						Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
							ОбластьПокупатель.Параметры.ПредставлениеПокупателя = ПредставлениеПокупателя;
							ОбластьПокупатель.Параметры.Покупатель = КлиентПоставщик;

							Если НЕ КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо")
								И НЕ КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо") Тогда

								РеквизитыПокупателя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетный счет", ЯзыкДокументов) + " " + КлиентПоставщик.НомерСчета + ", " + КлиентПоставщик.НаименованиеБанка + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО", ЯзыкДокументов) + " " + КлиентПоставщик.МФО;
								РеквизитыПокупателя = РеквизитыПокупателя + Символы.ПС;
								РеквизитыПокупателя = РеквизитыПокупателя + ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
								ОКПО = КлиентПоставщик.ОКПО;

								Если НЕ ПустаяСтрока(ОКПО) Тогда
									РеквизитыПокупателя = РеквизитыПокупателя + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("код по ОКПО", ЯзыкДокументов) + " " + ОКПО;
								КонецЕсли;
							Иначе
								ОбластьПокупатель.Параметры.РеквизитыПокупателя = "";
							КонецЕсли;

							ОбластьПокупатель.Параметры.РеквизитыПокупателя = РеквизитыПокупателя;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПокупатель);
							ОбластьПечатиЭкземпляра.Вывести(ОбластьПокупатель);
						КонецЕсли;

						Если НЕ ЭтоПечатьСчета Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Плательщик", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тот же самый", ЯзыкДокументов);
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
							ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
							ЗаказКлиента = Выборка.ЗаказКлиента;

							Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
								ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ", ЯзыкДокументов);
								ДопИнформация.Параметры.ЗначениеПараметра = ЗаказКлиента;
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
								ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
							ИначеЕсли НоСчетЕсть Тогда
								ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ", ЯзыкДокументов);
								ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату", ЯзыкДокументов) + " № " + выборка.номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(выборка.дата, "ДФ=dd.MM.yyyy");
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
								ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
							КонецЕсли;

							ТекстУсловииПродажиРегламентированногоДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстУсловииПродажиРегламентированногоДокумента");

							Если НЕ ПустаяСтрока(ТекстУсловииПродажиРегламентированногоДокумента) Тогда
								ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Условие продажи", ЯзыкДокументов);
								ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекстУсловииПродажиРегламентированногоДокумента, ЯзыкДокументов);
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
								ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
							КонецЕсли;
						КонецЕсли;

						Договор = Выборка.договор;

						Если ЗначениеЗаполнено(Договор) Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Договор", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = Договор;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
							ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
							ФормаВзаиморасчетов = Договор.ФормаВзаиморасчетов;
						Иначе
							ФормаВзаиморасчетов = Организация.ФормаВзаиморасчетовПоУмолчанию;
						КонецЕсли;

						Если ЗначениеЗаполнено(ФормаВзаиморасчетов) Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Условие продажи", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = ФормаВзаиморасчетов;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДопИнформация);
							ОбластьПечатиЭкземпляра.Вывести(ДопИнформация);
						КонецЕсли;

						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Пробел);
						ОбластьПечатиЭкземпляра.Вывести(Пробел);
						Если НЕ ЦенаТоваровСодержитНДС Тогда
							ШапкаТаблицы.Параметры.Цена  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена без НДС", ЯзыкДокументов);
							ШапкаТаблицы.Параметры.Сумма = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма без НДС", ЯзыкДокументов);
						КонецЕсли;

						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
								ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Артикул", ЯзыкДокументов);
							ИначеЕсли ИспользоватьШтрихКоды Тогда
								ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-код", ЯзыкДокументов);
							Иначе
								ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код", ЯзыкДокументов);
							КонецЕсли;

							ШапкаТаблицы.Параметры.Колонка = ДопКолонка;
						КонецЕсли;

						ОбластьПечатиЭкземпляра.Вывести(ШапкаТаблицы);
						СуммаСкидки = 0;
						Всего 		= 0;
						ВсегоСНДС 	= 0;
						ЧислоСтрок 	= 0;
						СуммаВсегоНДС 		 = 0;
						СуммаБезСкидкиБезНДС = 0;
						ЕдиницаИзмерения 	 = "";
						ВыборкаТовары = Выборка.Товары.Выбрать();

						Пока ВыборкаТовары.Следующий() Цикл
							ЧислоСтрок 	 = ЧислоСтрок + 1;
							Номенклатура = ВыборкаТовары.Номенклатура;
							Если ЗначениеЗаполнено(Номенклатура) Тогда
								Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПоляПредставленийНоменклатурыАртикул, ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
								ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");

								ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);

								Если ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
									ЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаТовары.ЕдиницаИзмерения, , , ЯзыкДокументов);
									Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
										ЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.", ЯзыкДокументов);
									КонецЕсли;

									ОбластьТовары.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
								КонецЕсли;

								ОбластьТовары.Параметры.НоменклатураНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
								Сумма = ВыборкаТовары.Сумма;
								Количество = ВыборкаТовары.Количество;
								Если Количество = 0 Тогда
									Количество = 1;
								КонецЕсли;

								ВсегоСНДС 	  = ВсегоСНДС + Сумма;
								СтавкаНДС 	  = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, СтавкаНДСОрганизации);
								СуммаБезНДС   = Сумма - Сумма * (СтавкаНДС / 100);
								СуммаВсегоНДС = СуммаВсегоНДС + (Сумма - СуммаБезНДС);
								Всего 		  = Всего + СуммаБезНДС;

								Если ВыводитьАртикулОтдельнойКолонкой Тогда
									Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
										ОбластьТовары.Параметры.КодАртикул = Артикул;
									ИначеЕсли ИспользоватьШтрихКоды Тогда
										ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.ОсновнойШтрихКод);
									Иначе
										ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.Код);
									КонецЕсли;
								КонецЕсли;

								ОбластьТовары.Параметры.Сумма = СуммаБезНДС;
								ОбластьТовары.Параметры.Цена  = СуммаБезНДС / Количество;
								Если ЕстьСкидка Тогда
									СуммаБезСкидки = ВыборкаТовары.СуммаБезСкидки;
									СуммаБезСкидкиБезНДСВСтроке = СуммаБезСкидки - СуммаБезСкидки * (СтавкаНДС / 100);
									Скидка 		   = СуммаБезНДС - СуммаБезСкидкиБезНДСВСтроке;
									СуммаСкидки    = СуммаСкидки + Скидка;
									СуммаБезСкидкиБезНДС = СуммаБезСкидкиБезНДС + СуммаБезСкидкиБезНДСВСтроке;

									Если НЕ ЦенаТоваровСодержитНДС Тогда
										ОбластьТовары.Параметры.Скидка = Скидка;
										ОбластьТовары.Параметры.СуммаБезСкидки = СуммаБезСкидкиБезНДСВСтроке;
									КонецЕсли;
								Иначе
									СуммаБезСкидкиБезНДС = СуммаБезСкидкиБезНДС + СуммаБезНДС;
								КонецЕсли;
							КонецЕсли;

							Если ВыводитьВРасходномДокументеЧислоМест Тогда
								ЧислоМест = ОбщийМодульТоварСервер.ВычислитьЧислоМест(Номенклатура, ВыборкаТовары.ЕдиницаИзмерения, ВыборкаТовары.Количество);
								ОбластьТовары.Параметры.КоличествоМест = ЧислоМест;
								ОбластьТовары.Параметры.ЕдиницаМест = НаименованиеЕдиницыМеста;
								ОбщееЧислоМест = ОбщееЧислоМест + ЧислоМест;
							КонецЕсли;

							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТовары);
							ОбластьПечатиЭкземпляра.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
						КонецЦикла;

						Если НЕ ЦенаТоваровСодержитНДС Тогда
							Если ЕстьСкидка Тогда
								Подвал.Параметры.ВсегоБезСкидок = СуммаБезСкидкиБезНДС;
								Подвал.Параметры.ВсегоСкидок	= СуммаСкидки;
							КонецЕсли;

							Подвал.Параметры.Всего = Всего;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Подвал);
							ОбластьПечатиЭкземпляра.Вывести(Подвал);
						КонецЕсли;

						Если ЦенаТоваровСодержитНДС Тогда
							Если ЕстьСкидка Тогда
								ОбластьИтоговСумм.Параметры.ВсегоСкидок = СуммаСкидки
							КонецЕсли;

							ОбластьИтоговСумм.Параметры.ВсегоБезНДС = СуммаБезСкидкиБезНДС;
							ОбластьИтоговСумм.Параметры.ВсегоНДС    = СуммаВсегоНДС;
							ОбластьИтоговСумм.Параметры.ВсегоСНДС   = ВсегоСНДС;
							ОбластьИтоговСумм.Параметры.Валюта      = Валюта;
						ИначеЕсли НЕ СуммаВсегоНДС = 0 Тогда
							ИтогоНДС.Параметры.НДС 		= Организация.СтавкаНДС;
							ИтогоНДС.Параметры.ВсегоНДС = СуммаВсегоНДС;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ИтогоНДС);
							ОбластьПечатиЭкземпляра.Вывести(ИтогоНДС);
							ИтогоНДС.Параметры.НДС 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего с НДС", ЯзыкДокументов);
							ИтогоНДС.Параметры.ВсегоНДС = ВсегоСНДС;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ИтогоНДС);
							ОбластьПечатиЭкземпляра.Вывести(ИтогоНДС);
						КонецЕсли;

						ИтоговаяСтрока = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего наименований", ЯзыкДокументов) + " " + ЧислоСтрок + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на сумму", ЯзыкДокументов) + " " + формат(ВсегоСНДС, "ЧЦ=15; ЧДЦ=2") + " " + валюта;

						Если ВыводитьВРасходномДокументеЧислоМест Тогда
							ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общее число мест", ЯзыкДокументов) + ": " + ОбщееЧислоМест + " " + НаименованиеЕдиницыМеста;
						КонецЕсли;

						ОбластьИтоговСумм.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
						СуммаКПрописи 		= ВсегоСНДС;
						ТекстСуммаПрописью 	= ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ВсегоСНДС, Валюта, ЯзыкДокументов);
						Если НЕ СуммаВсегоНДС = 0 Тогда
							ТекстСуммаПрописью = ТекстСуммаПрописью + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В том числе НДС", ЯзыкДокументов) + ": ";
							ТекстСуммаПрописью = ТекстСуммаПрописью + ОбщийМодульТекстСервер.СформироватьСуммуПрописью(СуммаВсегоНДС, Валюта, ЯзыкДокументов);
						КонецЕсли;

						ОбластьИтоговСумм.Параметры.СуммаПрописью = ТекстСуммаПрописью;
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьИтоговСумм);
						ОбластьПечатиЭкземпляра.Вывести(ОбластьИтоговСумм);
						Если ЭтоПечатьСчета Тогда
							ЧислоСекундДействительностиСчетаФактурыДляОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейДействительностиСчетаФактурыДляОплаты") * 3600 * 24;
							ОДействительностиСчета.Параметры.ИнформацияОДействительностиСчета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет действителен для оплаты до", ЯзыкДокументов) + " " + формат(НачалоДня(выборка.дата) + ЧислоСекундДействительностиСчетаФактурыДляОплаты, "ДФ=dd.MM.yyyy");
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОДействительностиСчета);
							ОбластьПечатиЭкземпляра.Вывести(ОДействительностиСчета);
						ИначеЕсли ЗначениеЗаполнено(Сотрудник) Тогда
							Подписи.Параметры.Сотрудник = Сотрудник;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Подписи);
							ОбластьПечатиЭкземпляра.Вывести(Подписи);
						КонецЕсли;

					КонецЦикла;
				Иначе // собственный
					СуммаТовараВВалютеСделки = 0;

					Если ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС
						И ЗначениеЗаполнено(Выборка.Организация) Тогда

						ОбщийМодульСервер.ДобавитьШапкуОрганизации(ОбластьПечатиЭкземпляра, Выборка.Организация, ЯзыкДокументов);
					КонецЕсли;

					Если ЗначениеЗаполнено(Выборка.КлиентПоставщик) Тогда
						КлиентПоставщикПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
						Если ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
							Если ЭтоПечатьСчета Тогда
					НомерСчета = ?(ПустаяСтрока(Выборка.НомерСчета), Выборка.Номер, Выборка.НомерСчета);
						ДатаСчета = ?(Выборка.ДатаСчета = '00010101000000', Выборка.Дата, Выборка.ДатаСчета);
								ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаСчета");

								Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаСчета) Тогда
									ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату", ЯзыкДокументов);
								КонецЕсли;

								ОбластьЗаголовок.Параметры.ИмяДокумента = ТекстЗаголовкаСчета + " № " + НомерСчета + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(ДатаСчета, "ДФ=dd.MM.yyyy");

							ИначеЕсли Выборка.ЭтоЗаказ Тогда
								ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыЗаказаКлиента");
								Если ПустаяСтрока(ИмяДокумента)Тогда
									ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Клиента", ЯзыкДокументов);
								Иначе
									ОбластьЗаголовок.Параметры.ИмяДокумента = ИмяДокумента;
								КонецЕсли;
							Иначе
								Если ЗаголовокРасходнойНакладной = Неопределено Тогда

									ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовара");
								Иначе
									ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЗаголовокРасходнойНакладной);
								КонецЕсли;

								Если ПустаяСтрока(ИмяДокумента) Тогда
									ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходная накладная", ЯзыкДокументов);
								Иначе
									ОбластьЗаголовок.Параметры.ИмяДокумента = ИмяДокумента;
								КонецЕсли;
							КонецЕсли;

							Шапка.Параметры.КлиентЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент", ЯзыкДокументов);

						Иначе
							ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат Поставщику", ЯзыкДокументов);
							Шапка.Параметры.КлиентЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик", ЯзыкДокументов);
						КонецЕсли;

						Шапка.Параметры.КлиентПоставщикПредставление = КлиентПоставщикПредставление;
					Иначе
						Если Выборка.ЭтоЗаказ Тогда

							ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое списание", ЯзыкДокументов);
						Иначе
							ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара", ЯзыкДокументов);
						КонецЕсли;

						Шапка.Параметры.КлиентЗ = "";
					КонецЕсли;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЗаголовок);
					ОбластьПечатиЭкземпляра.Вывести(ОбластьЗаголовок);
					Шапка.Параметры.КлиентПоставщик  = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.КлиентПоставщик, ЯзыкДокументов);
					Шапка.Параметры.Заполнить(Выборка);
					СтруктураДополнительныхПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();

					Если НЕ ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС
						ИЛИ НЕ ЗначениеЗаполнено(Выборка.Организация) Тогда

						Шапка.Параметры.ТекстВШапкеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВШапкеДокументовПриПечати;
					Иначе
						Шапка.Параметры.ТекстВШапкеДокументовПриПечати = "";
					КонецЕсли;

					Шапка.Параметры.СкладЗ = ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад", ЯзыкДокументов), "");
					Шапка.Параметры.СкладПредставление = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Выборка.Склад, , , ЯзыкДокументов);
					ДолгКлиента = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Выборка.КлиентПоставщик, Выборка.Дата -1, , ИСТИНА, ОсновнаяВалюта, ЯзыкДокументов);
					ДолгКлиентаЧисло = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Выборка.КлиентПоставщик, Выборка.Дата -1);

					Если НЕ ДолгКлиентаЧисло = 0 Тогда
						Шапка.Параметры.Долг = ДолгКлиента;
					КонецЕсли;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ОбластьПечатиЭкземпляра.Вывести(Шапка, Выборка.Уровень());
					АдресДоставки = Выборка.Адрес;

					Если ЗначениеЗаполнено(КлиентПоставщик)
						И ПустаяСтрока(АдресДоставки) Тогда

						АдресДоставки = КлиентПоставщик.Адрес;
					КонецЕсли;

					ПолныйНомерТелефона = Выборка.Телефон;

					Если ЗначениеЗаполнено(КлиентПоставщик)
						И ПустаяСтрока(ПолныйНомерТелефона) Тогда

						ПолныйНомерТелефона = КлиентПоставщик.Телефон;

						Для НомерТелефона = 2 по 5 Цикл
							ЭтотНомерТелефона = КлиентПоставщик["Телефон" + СокрЛП(НомерТелефона)];
							Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
								ПолныйНомерТелефона = ПолныйНомерТелефона + ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
							КонецЕсли;

						КонецЦикла;
					КонецЕсли;

					Если НЕ ПолныйНомерТелефона = ""
						ИЛИ НЕ ПустаяСтрока(АдресДоставки) Тогда

						АдресТелефон = Макет.ПолучитьОбласть("АдресТелефон");
						АдресТелефон.Параметры.Адрес   = АдресДоставки;
						АдресТелефон.Параметры.Телефон = ПолныйНомерТелефона;
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(АдресТелефон);
						ОбластьПечатиЭкземпляра.Вывести(АдресТелефон);
					КонецЕсли;

					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьТекстовоеПолеПредметСделки")
						И НЕ ПустаяСтрока(Выборка.ПредметСделки) Тогда

						ПредметСделки = Макет.ПолучитьОбласть("ПредметСделки");
						ПредметСделки.Параметры.Заполнить(Выборка);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ПредметСделки);
						ДокументДляПечати.Вывести(ПредметСделки);
					КонецЕсли;

					СуммаБезСкидки = 0;

					Если ВыводитьАртикулОтдельнойКолонкой Тогда
						Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Артикул", ЯзыкДокументов);
						ИначеЕсли ИспользоватьШтрихКоды Тогда
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-код", ЯзыкДокументов);
						Иначе
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код", ЯзыкДокументов);
						КонецЕсли;

						ОбластьТоварыШапка.Параметры.Колонка = ДопКолонка;
					КонецЕсли;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТоварыШапка);
					ОбластьПечатиЭкземпляра.Вывести(ОбластьТоварыШапка);
					ВыборкаТовары  = Выборка.Товары.Выбрать();
					Пока ВыборкаТовары.Следующий() Цикл
						Номенклатура = ВыборкаТовары.Номенклатура;
						Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
						ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Номенклатура.Артикул), ", " + Номенклатура.Артикул, "");
						ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
						ОбластьТовары.Параметры.НоменклатураНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;

						Если ВыводитьАртикулОтдельнойКолонкой Тогда
							Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
								ОбластьТовары.Параметры.КодАртикул = Артикул;
							ИначеЕсли ИспользоватьШтрихКоды Тогда
								ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.ОсновнойШтрихКод);
							Иначе
								ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.Код);
							КонецЕсли;
						КонецЕсли;

						Если НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента Тогда
							Количество = ОбластьТовары.Параметры.Количество;
							Если НЕ Количество = 0 Тогда
								ОбластьТовары.Параметры.Цена = ВыборкаТовары.Сумма / Количество;
							КонецЕсли;
						КонецЕсли;

						Если ВыводитьВРасходномДокументеЧислоМест Тогда
							ЧислоМест = ОбщийМодульТоварСервер.ВычислитьЧислоМест(Номенклатура, ВыборкаТовары.ЕдиницаИзмерения, ВыборкаТовары.Количество);
							ОбластьТовары.Параметры.ЧислоМест = СокрЛП("" + ЧислоМест + " " + НаименованиеЕдиницыМеста);
							ОбщееЧислоМест = ОбщееЧислоМест + ЧислоМест;
						КонецЕсли;

						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТовары);
						ОбластьПечатиЭкземпляра.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
						Если ИспользоватьСкидки Тогда
							СуммаБезСкидки = СуммаБезСкидки + ВыборкаТовары.СуммаБезСкидки;
						КонецЕсли;

						СуммаТовараВВалютеСделки = СуммаТовараВВалютеСделки + ВыборкаТовары.Сумма;

					КонецЦикла;

					Если ВыводитьВРасходномДокументеЧислоМест Тогда
						ОбластьЧислоМест = Макет.ПолучитьОбласть("ЧислоМест");
						ОбластьЧислоМест.Параметры.ЧислоМест = ОбщееЧислоМест;
						ОбластьЧислоМест.Параметры.НаименованиеЕдиницыМеста = НаименованиеЕдиницыМеста;
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЧислоМест);
						ОбластьПечатиЭкземпляра.Вывести(ОбластьЧислоМест);
					КонецЕсли;

					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") Тогда
						ВыборкаОплаты = Выборка.Оплаты.Выбрать();
						Если НЕ ВыборкаОплаты.Количество() = 0 Тогда
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьОплатыШапка);
							ОбластьПечатиЭкземпляра.Вывести(ОбластьОплатыШапка);

							Пока ВыборкаОплаты.Следующий() Цикл
								ОбластьОплаты.Параметры.Заполнить(ВыборкаОплаты);
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьОплаты);
								ОбластьПечатиЭкземпляра.Вывести(ОбластьОплаты);

							КонецЦикла;
						КонецЕсли;
					КонецЕсли;

					Подвал.Параметры.Заполнить(Выборка);
					Подвал.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВПодвалеДокументовПриПечати;

					Если ИспользоватьСкидки
						И ЕстьСкидка Тогда

						Подвал.Параметры.Стоимость   = СуммаБезСкидки ;
						Подвал.Параметры.СуммаСкидки = СуммаБезСкидки - СуммаТовараВВалютеСделки;// Выборка.ТовараНаСумму ;
					КонецЕсли;

					поступилоДенегНам = 0;

					Если ЭтоВыполнениеРабот Тогда
						Если НЕ Ссылка.Оплаты.Количество() = 0 Тогда
							Для Каждого Оплата Из Ссылка.Оплаты Цикл
								поступилоДенегНам = поступилоДенегНам + Оплата.Сумма * Оплата.Курс;

							КонецЦикла;
						КонецЕсли;
					Иначе

						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах")
							И НЕ Ссылка.Оплаты.Количество() = 0 Тогда

							Для Каждого Оплата Из Ссылка.Оплаты Цикл
								поступилоДенегНам = поступилоДенегНам + Оплата.Сумма * Оплата.Курс;
							КонецЦикла;
						Иначе
							поступилоДенегНам = Выборка.поступилоДенег;

						КонецЕсли;
					КонецЕсли;

					Если поступилоДенегНам = 0 Тогда
						Подвал.Параметры.поступилоДенегНам = "";
					ИначеЕсли поступилоДенегНам > 0 Тогда
						Подвал.Параметры.поступилоДенегНам = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принято от контрагента", ЯзыкДокументов) + ": " + формат(поступилоДенегНам,"ЧЦ=15; ЧДЦ=2") + " " + валюта;
					Иначе
						Подвал.Параметры.поступилоДенегНам = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Также передано контрагенту", ЯзыкДокументов) + ": " + формат(-поступилоДенегНам,"ЧЦ=15; ЧДЦ=2") + " " + валюта;
					КонецЕсли;

					Если ЗначениеЗаполнено(Выборка.КлиентПоставщик) Тогда

						Если ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты")
							И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда

							Подвал.Параметры.ОстатокДолга = "";
						ИначеЕсли ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики")
							И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда

							Подвал.Параметры.ОстатокДолга = "";
						Иначе

							Если ПараметрыСеанса.ВестиУчетВалютВСеансе
								И ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС
								И ЗначениеЗаполнено(Выборка.ВидЦен)
								И ЗначениеЗаполнено(Выборка.ВидЦен.ВалютаЦены)
								И НЕ Выборка.ВидЦен.ВалютаЦены = Выборка.валюта
								И (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах")
								ИЛИ Ссылка.Оплаты.Количество() = 0) Тогда

								Сумма = ОбщийМодульСервер.ПоКурсу(Выборка.ТовараНаСумму, Выборка.Валюта, Выборка.ВидЦен.ВалютаЦены, выборка.дата) - Выборка.ПоступилоДенег;
							Иначе
								Сумма = СуммаТовараВВалютеСделки - поступилоДенегНам;
							КонецЕсли;

							Если ЭтоВыполнениеРабот Тогда
								ОстатокДолга = ДолгКлиентаЧисло + Сумма;
							Иначе
								ОстатокДолга = ДолгКлиентаЧисло + Сумма * Выборка.курс;
							КонецЕсли;

							Если ОстатокДолга = 0 Тогда
								Подвал.Параметры.ОстатокДолга = "";
							ИначеЕсли ОстатокДолга > 0 Тогда
								Подвал.Параметры.ОстатокДолга = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток долг", ЯзыкДокументов) + ": " + формат(ОстатокДолга,"ЧЦ=15; ЧДЦ=2") + " " + ОсновнаяВалюта;
							Иначе
								Подвал.Параметры.ОстатокДолга = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток переплата", ЯзыкДокументов) + ": " + формат(-ОстатокДолга,"ЧЦ=15; ЧДЦ=2") + " " + ОсновнаяВалюта;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Подвал.Параметры.ОстатокДолга = "";
					КонецЕсли;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Подвал);
					ОбластьПечатиЭкземпляра.Вывести(Подвал);
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетИнформацииОДоставкеВДокументахРасхода") Тогда
						Подписи = Макет.ПолучитьОбласть("Подписи");
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Подписи);
						ОбластьПечатиЭкземпляра.Вывести(Подписи);
						ИнформацияОДоставке = Макет.ПолучитьОбласть("ИнформацияОДоставке");
						ИнформацияОДоставке.Параметры.Заполнить(Выборка);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ИнформацияОДоставке);
						ОбластьПечатиЭкземпляра.Вывести(ИнформацияОДоставке);
					КонецЕсли;
				КонецЕсли;

				ВставлятьРазделительСтраниц = ИСТИНА;

			КонецЦикла;
		КонецЕсли;// ППФ
	КонецЕсли;

	ДокументДляПечати.Область().СоздатьФорматСтрок();
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиЭкземпляра);
	ДокументДляПечати.Вывести(ОбластьПечатиЭкземпляра);
	Если ДваЭкземпляра Тогда
		ДокументДляПечати.ВывестиГоризонтальныйРазделительСтраниц();
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиЭкземпляра);
		ДокументДляПечати.Вывести(ОбластьПечатиЭкземпляра);
	КонецЕсли;

	ДокументДляПечати.АвтоМасштаб = ИСТИНА;
	ТабДокРезультат.Вывести(ДокументДляПечати);

КонецПроцедуры

#КонецЕсли
