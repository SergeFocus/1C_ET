//sza141208-2217 фкс
//sza141201-0346 ПК
//sza141114-0239 фикс
//sza141016-2359 : артикул
//sza140807-1204 косметика
//sza140703-1737  текст заголовка счета
//sza140602-0141  
//sza130909-2144 : 
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ДанныеСсылка = Данные.Ссылка;
	Представление = ДанныеСсылка.ВидДокумента + " " + ДанныеСсылка.Номер + " - " + формат(ДанныеСсылка.Дата, "ДФ='dd.MM.yy ЧЧ:мм'");	
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ЗначенияЗаполнения = Неопределено;
	Попытка 
		ЭтоЗаказ = Параметры.Ключ.ЭтоЗаказ;
	Исключение 	
		ЭтоЗаказ = ЛОЖЬ;		
	КонецПопытки;
	
	Если (Параметры.свойство("ЭтоЗаказ")
		И Параметры.ЭтоЗаказ)
		ИЛИ ЭтоЗаказ Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		
		Если ВидФормы = "ФормаСписка" Тогда
			ВыбраннаяФорма = "ФормаСпискаЗаказов";
			
		ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "ФормаДокументаЗаказ";
			
		Иначе
			ВыбраннаяФорма = "ФормаВыбораЗаказов";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(ТабДокРезультат, Знач Ссылка, Знач ЭтоСчет = ЛОЖЬ, Знач НоСчетЕсть = ЛОЖЬ, Знач ЭтоВыполнениеРабот = ЛОЖЬ, Знач ЭтоТорг12 = ЛОЖЬ, Знач ЭтоЗаказНаряд = ЛОЖЬ, Знач ЗаголовокРасходнойНакладной = Неопределено, Знач ДваЭкземпляра = ЛОЖЬ, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "РН" + СокрЛП(ИмяКомпьютера());
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	Если НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходыТовара") 
		И НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		
		Ссылка = Ссылка[0].ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЯзыкДокументов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЯзыкПечатныхФорм");
	
	Если ЭтоВыполнениеРабот Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВыполненияРабот.Ссылка,
		               |	ВыполненияРабот.ВерсияДанных,
		               |	ВыполненияРабот.ПометкаУдаления,
		               |	ВыполненияРабот.Номер,
		               |	ВыполненияРабот.Дата,
		               |	ВыполненияРабот.Проведен,
		               |	ВыполненияРабот.Клиент КАК КлиентПоставщик,
		               |	ВыполненияРабот.Организация,
		               |	ВыполненияРабот.Договор,
		               |	ВыполненияРабот.ЗаказКлиента,
		               |	ВыполненияРабот.ВидЦен,
		               |	ВыполненияРабот.Результат,
		               |	ВыполненияРабот.ХранилищеДенег,
		               |	ВыполненияРабот.ДатаПлан,
		               |	ВыполненияРабот.РезультатПлан,
		               |	ВыполненияРабот.Актуален,
		               |	ВыполненияРабот.БезПлана,
		               |	ВыполненияРабот.Номенклатура,
		               |	ВыполненияРабот.СерияНоменклатуры,
		               |	ВыполненияРабот.СкладДляОбъектаВыполненияРабот,
		               |	ВыполненияРабот.ДатаПоступленияОбъектаРаботНаНашСклад,
		               |	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот,
		               |	ВыполненияРабот.ДатаВыдачиОбъектаРаботКлиентуОбратно,
		               |	ВыполненияРабот.КомментарийПриВыдачеОбъектаРабот,
		               |	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		               |	ВыполненияРабот.Сотрудник,
		               |	ВыполненияРабот.ОбъектКлиента,
		               |	ВыполненияРабот.Комментарий,
		               |	ВыполненияРабот.Ответственный,
		               |	ВыполненияРабот.ДатаСоздания,
		               |	ВыполненияРабот.ДатаРедакции,
		               |	ВыполненияРабот.Товары.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ВаловаяПрибыль,
		               |		ВаловаяПрибыльПлан,
		               |		Валюта,
		               |		ВалютаПлан,
		               |		Дата,
		               |		ДатаПлан,
		               |		Количество,
		               |		КоличествоПлан,
		               |		Курс,
		               |		КурсПлан,
		               |		Номенклатура,
		               |		ОСтроке,
		               |		План,
		               |		ПроцентСкидки,
		               |		ПроцентСкидкиПлан,
		               |		СерияНоменклатуры,
		               |		Склад,
		               |		Сотрудник,
		               |		Сумма,
		               |		СуммаБезСкидки,
		               |		СуммаБезСкидкиПлан,
		               |		Цена,
		               |		ЦенаПлан,
		               |		ЕдиницаИзмерения
		               |	),
		               |	ВыполненияРабот.Оплаты.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДатаПлан,
		               |		Дата,
		               |		План,
		               |		Сумма,
		               |		Валюта,
		               |		Курс,
		               |		ХранилищеДенег,
		               |		ФормаОплаты,
		               |		ВалютаПлан,
		               |		КурсПлан,
		               |		ОСтроке
		               |	),
		               |	ВыполненияРабот.Расходы.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДатаПлан,
		               |		Дата,
		               |		Поставщик,
		               |		Статья,
		               |		План,
		               |		Сумма,
		               |		Валюта,
		               |		Курс,
		               |		ХранилищеДенег,
		               |		ФормаОплаты,
		               |		Договор,
		               |		Сотрудник,
		               |		ВалютаПлан,
		               |		КурсПлан,
		               |		ОСтроке
		               |	),
		               |	ВыполненияРабот.ТипРаботы,
		               |	ВыполненияРабот.ОрганизацияПродавец,
		               |	ВыполненияРабот.ДатаПродажи,
		               |	ВыполненияРабот.ВнешнийВид,
		               |	ВыполненияРабот.Комплектность,
		               |	ВыполненияРабот.Валюта,
		               |	ВыполненияРабот.ПричинаЦельРабот,
		               |	ЕСТЬNULL(ВыполненияРабот.Клиент.Телефон, "") КАК Телефон,
		               |						ЕСТЬNULL(ВыполненияРабот.Клиент.Адрес, "") КАК Адрес,
		               |	ВыполненияРабот.НомерСчета,
		               |	ВыполненияРабот.ДатаСчета,
		               |	ЛОЖЬ КАК ЭтоЗаказ,
		               |	"""" КАК Телефон
		               |ИЗ
		               |	Документ.ВыполненияРабот КАК ВыполненияРабот
		               |ГДЕ
		               |	ВыполненияРабот.Ссылка В(&Ссылка)";
		
		КлиентПоставщик = Ссылка.Клиент;
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасходыТовара.Ссылка,
		               |	РасходыТовара.ВерсияДанных,
		               |	РасходыТовара.ПометкаУдаления,
		               |	РасходыТовара.Номер,
		               |	РасходыТовара.Дата,
		               |	РасходыТовара.Проведен,
		               |	РасходыТовара.Склад,
		               |	РасходыТовара.КлиентПоставщик,
		               |	РасходыТовара.ПоступилоДенег,
		               |	РасходыТовара.ВидЦен,
		               |	РасходыТовара.Валюта,
		               |	РасходыТовара.Курс,
		               |	РасходыТовара.Комментарий,
		               |	РасходыТовара.ВидДокумента,
		               |	РасходыТовара.ТовараНаСумму,
		               |	РасходыТовара.ТовараВКоличестве,
		               |	РасходыТовара.ПартияПриобретения,
		               |	РасходыТовара.Организация,
		               |	РасходыТовара.Договор,
		               |	РасходыТовара.ХранилищеДенег,
		               |	РасходыТовара.ЗаказКлиента,
		               |	РасходыТовара.ЭтоЗаказ,
		               |	РасходыТовара.ЗаказСогласован,
		               |	РасходыТовара.ЗаказОплачен,
		               |	РасходыТовара.ЗаказДатаПлана,
		               |	РасходыТовара.ЗаказДатаФакта,
		               |	РасходыТовара.ЗаказНомерПриРегистрации,
		               |	РасходыТовара.Сотрудник,
		               |	РасходыТовара.Ответственный,
		               |	РасходыТовара.ДатаСоздания,
		               |	РасходыТовара.ДатаРедакции,
		               |	РасходыТовара.Товары.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		Номенклатура,
		               |		СерияНоменклатуры,
		               |		Количество,
		               |		Цена,
		               |		Сумма,
		               |		ПроцентСкидки,
		               |		СуммаБезСкидки,
		               |		ЗаказКлиента,
		               |		ЕдиницаИзмерения,
		               |		ОСтроке
		               |	),
		               |	РасходыТовара.ПланОплаты.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		Дата,
		               |		ФормаОплаты,
		               |		ХранилищеДенег,
		               |		Сумма,
		               |		ОСтроке
		               |	),
		               |	РасходыТовара.Оплаты.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ХранилищеДенег,
		               |		Сумма,
		               |		ФормаОплаты,
		               |		Валюта,
		               |		Курс,
		               |		ОСтроке
		               |	),
		               |	РасходыТовара.Адрес,
		               |	РасходыТовара.Телефон,
		               |	РасходыТовара.СпособДоставки,
		               |	РасходыТовара.ТалонТрек,
		               |	РасходыТовара.КлиентОповещен,
		               |	РасходыТовара.ТоварОтправлен,
		               |	РасходыТовара.ДатаОтправки,
		               |	РасходыТовара.ДатаОповещения,
		               |	РасходыТовара.НомерСчета,
		               |	РасходыТовара.ДатаСчета
		               |ИЗ
		               |	Документ.РасходыТовара КАК РасходыТовара
		               |ГДЕ
		               |	РасходыТовара.Ссылка В(&Ссылка)";
		
		КлиентПоставщик = Ссылка.КлиентПоставщик;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(КлиентПоставщик)
		И ЗначениеЗаполнено(КлиентПоставщик.ЯзыкДокументов) Тогда
		
		ЯзыкДокументов = КлиентПоставщик.ЯзыкДокументов;
		Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
			ЯзыкДокументов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ВалютаОсн = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	
	СуммаСкидки = 0;
	ЕстьСкидка  = ЛОЖЬ;
	
	ИспользоватьРеквизитАртикулНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
	ПечататьАртикул = ИспользоватьРеквизитАртикулНоменклатуры И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую");
	НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента");
	ИспользоватьСкидки = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") И НЕ НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента;
	ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой =	ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой");
	
	
	Если ИспользоватьСкидки тогда
		Пока Выборка.Следующий() Цикл
			ВыборкаТовары = Выборка.Товары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				
				Если НЕ ВыборкаТовары.СуммаБезСкидки = 0 Тогда
					Скидка = (ВыборкаТовары.Сумма - ВыборкаТовары.СуммаБезСкидки);
					Если НЕ ЕстьСкидка тогда 					
						ЕстьСкидка = не Скидка = 0;
					КонецЕсли;
					СуммаСкидки = СуммаСкидки + Скидка; //Не прерывать!
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;		
	КонецЕсли;
	
	Выборка.Сбросить();
	
	Если ЭтоТорг12 Тогда
		
		Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");		
		Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
		
		Шапка = Макет.ПолучитьОбласть("РазделительШапка");
		ТабДок.Вывести(Шапка);
		ТабДок.Область().СоздатьФорматСтрок();
		
		Шапка = Макет.ПолучитьОбласть("Шапка");
		
		ЗаголовокТаб  = Макет.ПолучитьОбласть("ЗаголовокТаб");
		НомерСтраницы = 1;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		//ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		//
		//ИтогоКоличествоМестНаСтранице
		//ИтогоМассаБруттоНаСтранице
		//ИтогоКоличествоНаСтранице
		//ИтогоСуммаБезНДСНаСтранице
		//ИтогоСуммаНДСНаСтранице
		//ИтогоСуммаСНДСНаСтранице
		
		ОбластьВсего  = Макет.ПолучитьОбласть("Всего");		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Пока Выборка.Следующий() Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ВыборкаВидЦен = Выборка.ВидЦен;
			Если ЗначениеЗаполнено(ВыборкаВидЦен) 
				И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда
				
				ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
			Иначе
				ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");				
			КонецЕсли;
			
			Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие"));
			ПредставлениеОрганизации = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов));
			ДолжностьРуководителя 	 = Организация.ДолжностьРуководителя;
			
			КлиентПоставщик = Выборка.КлиентПоставщик;
			ПредставлениеПлательщика = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов));
			
			Договор = Выборка.договор;
			Если ЗначениеЗаполнено(Договор) Тогда
				ОснованиеНомер = Договор.НомерДоговора;
				ОснованиеДата  = Договор.ДатаЗаключения;
			Иначе
				ОснованиеНомер = "";
				ОснованиеДата  = "";
				Договор = "";	
			КонецЕсли;
			
			Сотрудник = Выборка.Сотрудник;
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				ПредставлениеПодразделения = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Подразделение, ЯзыкДокументов));
			Иначе
				Подразделение = "";
				ПредставлениеПодразделения = "";
			КонецЕсли;
			
			Шапка.Параметры.Организация 				= Организация;
			Шапка.Параметры.ПредставлениеОрганизации 	= ПредставлениеОрганизации;
			Шапка.Параметры.Контрагент 					= КлиентПоставщик;
			Шапка.Параметры.ПредставлениеПлательщика 	= ПредставлениеПлательщика;
			Шапка.Параметры.Основание 					= Договор;
			Шапка.Параметры.ПредставлениеПодразделения 	= ПредставлениеПодразделения;
			Шапка.Параметры.Подразделение 				= Подразделение;		
			Шапка.Параметры.Грузополучатель 			= КлиентПоставщик;
			Шапка.Параметры.ПредставлениеПоставщика 	= ПредставлениеОрганизации;
			
			АдресДоставки = Выборка.Адрес;
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда			
					АдресДоставки = КлиентПоставщик.Адрес;
				КонецЕсли;	
				
				ОКПО = КлиентПоставщик.ОКПО;
				Шапка.Параметры.ГрузополучательПоОКПО = ОКПО;
				Шапка.Параметры.ПлательщикПоОКПО 	  = ОКПО;
			Иначе
				Шапка.Параметры.ГрузополучательПоОКПО = "";
				Шапка.Параметры.ПлательщикПоОКПО 	  = "";
			КонецЕсли;
			
			Шапка.Параметры.АдресДоставки  = АдресДоставки;
			Шапка.Параметры.НомерДокумента = Выборка.Номер;		
			Шапка.Параметры.ДатаДокумента  = Выборка.Дата;
			
			Если ЗначениеЗаполнено(Организация) Тогда
				ОКПО = Организация.ОКПО;
				Шапка.Параметры.ОрганизацияПоОКПО 	  = ОКПО;
				Шапка.Параметры.ПоставщикПоОКПО	  	  = ОКПО;
				Шапка.Параметры.ВидДеятельностиПоОКДП = Организация.ВидДеятельностиПоОКДП;
			Иначе
				Шапка.Параметры.ОрганизацияПоОКПО 	  = "";
				Шапка.Параметры.ПоставщикПоОКПО   	  = "";
				Шапка.Параметры.ВидДеятельностиПоОКДП = "";
			КонецЕсли;
			
			Шапка.Параметры.ОснованиеНомер = ОснованиеНомер;
			Шапка.Параметры.ОснованиеДата  = ОснованиеДата;		
			
			//ТранспортнаяНакладнаяНомер
			//ТранспортнаяНакладнаяДата
			//ВидОперации
			
			ТабДок.Вывести(Шапка);		
			
			ЗаголовокТаб.Параметры.НомерСтраницы = "" + НомерСтраницы;
			ТабДок.Вывести(ЗаголовокТаб);		
			
			ВставлятьРазделительСтраниц = ИСТИНА;		
			НомерСтраницы = НомерСтраницы + 1;
			
			ВестиУчетРазмеровИВесаТоваров = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРазмеровИВесаТоваров");
			ИтогоМассаБрутто = 0;
			ИтогоКоличество  = 0;
			ИтогоСуммаБезНДС = 0;			
			ВсегоСНДС 		 = 0;
			Всего 			 = 0;			
			ЧислоСтрок 		 = 0;
			СуммаВсегоНДС 	 = 0;
			
			Если ЗначениеЗаполнено(Организация) Тогда
				СтавкаНДСОрганизации = Организация.СтавкаНДС;
			Иначе
				СтавкаНДСОрганизации = 0;
			КонецЕсли;
			
			ВыборкаТовары = Выборка.Товары.Выбрать();
			Пока ВыборкаТовары.Следующий() Цикл
				
				ЧислоСтрок   = ЧислоСтрок + 1;
				Номенклатура = ВыборкаТовары.Номенклатура;
				ЗначениеЗаполненоНоменклатура = ЗначениеЗаполнено(Номенклатура);
				
				ОбластьСтрока.Параметры.НомерСтроки = "" + ЧислоСтрок;
				Если ЗначениеЗаполненоНоменклатура Тогда
					
					Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
					ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");
					
					ОбластьСтрока.Параметры.Номенклатура 			  = Номенклатура;
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
					ОбластьСтрока.Параметры.НоменклатураКод 		  = Номенклатура.Код;
				Иначе
					ОбластьСтрока.Параметры.Номенклатура 			  = "";
					ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = "";
					ОбластьСтрока.Параметры.НоменклатураКод 		  = "";
				КонецЕсли;
				
				ЕдиницаИзмерения = ВыборкаТовары.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ЕдиницаИзмерения, , , ЯзыкДокументов);
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = ЕдиницаИзмерения.Код;
				ИначеЕсли ЗначениеЗаполненоНоменклатура 
					И НЕ ПустаяСтрока(Номенклатура.ОсновнаяЕдиницаИзмерения) Тогда
					
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = Номенклатура.ОсновнаяЕдиницаИзмерения;
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = "";
				Иначе
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = "";
					ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод 		 = "";					
				КонецЕсли;
				
				Количество = ВыборкаТОвары.Количество;
				Если Количество = 0 Тогда
					Количество = 1;
				КонецЕсли;
				
				ИтогоКоличество = ИтогоКоличество + Количество;				
				Сумма = ВыборкаТовары.Сумма;
				
				//ОбластьСтрока.Параметры.ВидУпаковки
				//ОбластьСтрока.Параметры.КоличествоВОдномМесте
				//ОбластьСтрока.Параметры.КоличествоМест
				Если ВестиУчетРазмеровИВесаТоваров 
					И ЗначениеЗаполненоНоменклатура Тогда
					
					Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ВесЕдиницы = ЕдиницаИзмерения.Вес;
					Иначе
						ВесЕдиницы = Номенклатура.Вес;
					КонецЕсли;
					МассаБрутто 	 = ВесЕдиницы * Количество;
					ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
					ОбластьСтрока.Параметры.МассаБрутто = МассаБрутто;
					
				Иначе
					ОбластьСтрока.Параметры.МассаБрутто = "";
				КонецЕсли;
				
				ОбластьСтрока.Параметры.Количество = Количество;				
				//ОбластьСтрока.Параметры.Цена = Сумма / Количество;	
				
				ВсегоСНДС 	= ВсегоСНДС + Сумма;
				СтавкаНДС 	= ?(ЗначениеЗаполненоНоменклатура И ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, СтавкаНДСОрганизации);
				СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
				СуммаНДС 	= Сумма - СуммаБезНДС;
				Всего 		= Всего + Сумма;
				СуммаВсегоНДС = СуммаВсегоНДС + СуммаНДС;				
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
				
				ОбластьСтрока.Параметры.Цена  		= СуммаБезНДС / Количество;
				ОбластьСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьСтрока.Параметры.СтавкаНДС 	= СтавкаНДС; 
				ОбластьСтрока.Параметры.СуммаНДС 	= СуммаНДС;
				ОбластьСтрока.Параметры.СуммаСНДС 	= Сумма;
				
				ТабДок.Вывести(ОбластьСтрока);				
			КонецЦикла;   
			
			ОбластьВсего.Параметры.ИтогоКоличествоМест = "";
			Если ИтогоМассаБрутто = 0 Тогда
				ИтогоМассаБрутто    = "";
				МассаБруттоПрописью = "";
			Иначе
				МассаБруттоПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ИтогоМассаБрутто, ВалютаЦены, ЯзыкДокументов);
			КонецЕсли;
			
			ОбластьВсего.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
			ОбластьВсего.Параметры.ИтогоКоличество	= ИтогоКоличество;
			ОбластьВсего.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
			ОбластьВсего.Параметры.ИтогоСуммаНДС    = СуммаВсегоНДС;
			ОбластьВсего.Параметры.ИтогоСуммаСНДС   = Всего;
			
			ТабДок.Вывести(ОбластьВсего);
			
			ОбластьПодвал.Параметры.КоличествоЛистовВПриложении = 1;
			КоличествоПорядковыхНомеровЗаписейПрописью  = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ЧислоСтрок, , ЯзыкДокументов, , "."); //вне валют
			КоличествоПорядковыхНомеровЗаписейПрописью 	= СокрЛП(СтрЗаменить(КоличествоПорядковыхНомеровЗаписейПрописью, "00", ""));
			ОбластьПодвал.Параметры.МассаНеттоПрописью 	= МассаБруттоПрописью;
			ОбластьПодвал.Параметры.МассаБруттоПрописью = МассаБруттоПрописью;
			ОбластьПодвал.Параметры.ВсегоМестПрописью 	= "";
			ОбластьПодвал.Параметры.СуммаПрописью 		= ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Всего, ВалютаЦены, ЯзыкДокументов);
			ОбластьПодвал.Параметры.ФИОРуководителя     = Организация.Руководитель;
			ОбластьПодвал.Параметры.ФИОГлавБухгалтера   = Организация.ГлавныйБухгалтер;
			ОбластьПодвал.Параметры.ДолжностьКладовщика = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник.Должность, "");
			ОбластьПодвал.Параметры.ФИОКладовщика       = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник, "");
			ОбластьПодвал.Параметры.ДатаДокументаДень   = День(Выборка.Дата);
			ОбластьПодвал.Параметры.ДатаДокументаМесяц	= Месяц(Выборка.Дата);
			ОбластьПодвал.Параметры.ДатаДокументаГод	= Год(Выборка.Дата);
			//ОбластьПодвал.Параметры.ДоверенностьНомер
			//ОбластьПодвал.Параметры.ДоверенностьДата
			//ОбластьПодвал.Параметры.ДоверенностьВыдана
			//ОбластьПодвал.Параметры.ДоверенностьЧерезКого
			ОбластьПодвал.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
			ОбластьПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = КоличествоПорядковыхНомеровЗаписейПрописью;
			
			ТабДок.Вывести(ОбластьПодвал);
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЦикла;     	
		
	Иначе	//регламентированный или произвольный
		
		РегламентированныйДокумент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьРегламентированныйДокументРасходнойНакладной")
//		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраины")
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиФормыТОРГ12") И ЭтоТорг12);
		//и НЕ Ссылка.ЭтоЗаказ;
		
		ЦенаТоваровСодержитНДС = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЦенаТоваровСодержитНДС");
		
		Если РегламентированныйДокумент Тогда
			
			Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
			Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
			
			Шапка = Макет.ПолучитьОбласть("РазделительШапка");
			ТабДок.Вывести(Шапка);
			ТабДок.Область().СоздатьФорматСтрок();
			
			ОбластьЗаголовок 	= Макет.ПолучитьОбласть("Заголовок1");
			ОбластьПоставщик 	= Макет.ПолучитьОбласть("Поставщик");
			ОбластьПокупатель 	= Макет.ПолучитьОбласть("Покупатель");
			ДопИнформация 		= Макет.ПолучитьОбласть("ДопИнформация");
			Пробел 				= Макет.ПолучитьОбласть("Пробел");
			ИтогоНДС 			= Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьИтоговСумм 	= Макет.ПолучитьОбласть("СуммаПрописью");
			МестоСоставления 	= Макет.ПолучитьОбласть("МестоСоставления");
			
			Если НЕ этосчет Тогда
				Подписи = Макет.ПолучитьОбласть("Подписи");
			Иначе
				Подписи = Макет.ПолучитьОбласть("ПодписиСчета");	
			КонецЕсли;
			
			Если ЦенаТоваровСодержитНДС Тогда
				
				Если НЕ ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда					
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаБезНДС_нетЕдИзм");
					ОбластьТовары = Макет.ПолучитьОбласть("СтрокаБезНдс_нетЕдИзм");	
				Иначе
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаБезНДС");
					ОбластьТовары = Макет.ПолучитьОбласть("СтрокаБезНдс");	
				КонецЕсли;
				
				Если ЕстьСкидка Тогда
					ОбластьИтоговСумм = Макет.ПолучитьОбласть("ПодвалБезНДС");
				Иначе
					ОбластьИтоговСумм = Макет.ПолучитьОбласть("ПодвалБезНДСБезСкидки");	
				КонецЕсли;	
				
			ИначеЕсли ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
				
				Если ЕстьСкидка Тогда
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыСкидка1");	
					ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСкидка1");
					Подвал 		  = Макет.ПолучитьОбласть("ИтогоСкидка1");					
				Иначе
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы1");
					ОбластьТовары = Макет.ПолучитьОбласть("Строка1");	
					Подвал 		  = Макет.ПолучитьОбласть("Итого1");	
				КонецЕсли;	
				
			Иначе
				Если ЕстьСкидка Тогда
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицыСкидка");	
					ОбластьТовары = Макет.ПолучитьОбласть("СтрокаСкидка");
					Подвал 		  = Макет.ПолучитьОбласть("ИтогоСкидка");					
				Иначе
					ШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
					ОбластьТовары = Макет.ПолучитьОбласть("Строка");	
					Подвал 		  = Макет.ПолучитьОбласть("Итого");	
				КонецЕсли;	
			КонецЕсли;
			
			ОДействительностиСчета	= Макет.ПолучитьОбласть("ОДействительностиСчета");
			
		Иначе  //произвольный
			Макет = Документы.РасходыТовара.ПолучитьМакет("Печать");
			Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
			
			Шапка = Макет.ПолучитьОбласть("РазделительШапка");
			ТабДок.Вывести(Шапка);
			ТабДок.Область().СоздатьФорматСтрок();
			
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			Шапка = Макет.ПолучитьОбласть("Шапка");
			
			Если ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
				
				Если ЕстьСкидка Тогда
					ОбластьТоварыШапка 	= Макет.ПолучитьОбласть("ТоварыШапка1");
					ОбластьТовары	   	= Макет.ПолучитьОбласть("Товары1");
					Подвал				= Макет.ПолучитьОбласть("Подвал");					
				Иначе
					ОбластьТоварыШапка 	= Макет.ПолучитьОбласть("ТоварыШапкаБезСкидки1");
					ОбластьТовары 		= Макет.ПолучитьОбласть("ТоварыБезСкидки1");
					Подвал				= Макет.ПолучитьОбласть("ПодвалБезСкидки");
				КонецЕсли;
				
			Иначе				
				Если ЕстьСкидка Тогда
					ОбластьТоварыШапка 	= Макет.ПолучитьОбласть("ТоварыШапка");
					ОбластьТовары 		= Макет.ПолучитьОбласть("Товары");
					Подвал 				= Макет.ПолучитьОбласть("Подвал");					
				Иначе
					ОбластьТоварыШапка 	= Макет.ПолучитьОбласть("ТоварыШапкаБезСкидки");
					ОбластьТовары 		= Макет.ПолучитьОбласть("ТоварыБезСкидки");
					Подвал 				= Макет.ПолучитьОбласть("ПодвалБезСкидки");
				КонецЕсли;
			КонецЕсли;
			
			ОбластьОплатыШапка  = Макет.ПолучитьОбласть("ОплатыШапка");
			ОбластьОплаты 		= Макет.ПолучитьОбласть("Оплаты");			
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ВалютаОсн);
			
			Если РегламентированныйДокумент Тогда
				
				Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.организация, ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие"));
				ПредставлениеОрганизации = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов);
				
				Если ЗначениеЗаполнено(Организация) Тогда
					СтавкаНДСОрганизации = Организация.СтавкаНДС;
				Иначе
					СтавкаНДСОрганизации = 0;
				КонецЕсли;
				
				Клиентпоставщик = Выборка.КлиентПоставщик;
				ПредставлениеПокупателя = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
				
				Сотрудник = ?(ЗначениеЗаполнено(Выборка.Сотрудник), Выборка.Сотрудник, Организация.Сотрудник);
				
				Если ЭтоСчет Тогда
					ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаСчета");
					Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаСчета) Тогда
						ТекстЗаголовкаСчета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату", ЯзыкДокументов);
					КонецЕсли;
					
					ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовкаСчета + " № " + выборка.номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(выборка.дата, "ДФ=dd.MM.yyyy");
				Иначе
					Если ЗаголовокРасходнойНакладной = Неопределено 
						ИЛИ ПустаяСтрока(ЗаголовокРасходнойНакладной) Тогда
						
						ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовара");
					Иначе
						ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЗаголовокРасходнойНакладной);
					КонецЕсли;	
					
					Если ПустаяСтрока(ИмяДокумента) Тогда
						ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходная накладная", ЯзыкДокументов);
					КонецЕсли;
					
					ОбластьЗаголовок.Параметры.ТекстЗаголовка = ИмяДокумента + " № " + выборка.номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(выборка.дата, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
				ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
				ОбластьПоставщик.Параметры.Поставщик = Организация;
					РеквизитыПоставщика = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетный счет", ЯзыкДокументов) + " " + Организация.НомерСчета + ", " + Организация.НаименованиеБанка + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО", ЯзыкДокументов) + " " + Организация.МФО;
					РеквизитыПоставщика = РеквизитыПоставщика + Символы.ПС;
					РеквизитыПоставщика = РеквизитыПоставщика + ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
					
					ОКПО = Организация.ОКПО;
					Если ЗначениеЗаполнено(ОКПО) Тогда
						РеквизитыПоставщика = РеквизитыПоставщика + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("код по ОКПО", ЯзыкДокументов) + " " + ОКПО;
					КонецЕсли;					
				
				ОбластьПоставщик.Параметры.РеквизитыПоставщика = РеквизитыПоставщика;
				
				Если ДваЭкземпляра Тогда
					ВсегоЭкземпляров = 2;
				Иначе
					ВсегоЭкземпляров = 1;
				КонецЕсли;
				
				ПоляПредставленийНоменклатурыАртикул = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул");
				ИспользоватьШтрихКоды = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
					
				Для счетчикЭкземпляров = 1 по ВсегоЭкземпляров Цикл
					
					ТабДок.Вывести(ОбластьЗаголовок);
					ТабДок.Вывести(ОбластьПоставщик);
					
					Если ЗначениеЗаполнено(Клиентпоставщик) Тогда
						ОбластьПокупатель.Параметры.ПредставлениеПокупателя = ПредставлениеПокупателя;
						ОбластьПокупатель.Параметры.Покупатель = Клиентпоставщик;
						РеквизитыПокупателя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("расчетный счет", ЯзыкДокументов) + " " + Клиентпоставщик.НомерСчета + ", " + Клиентпоставщик.НаименованиеБанка + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО", ЯзыкДокументов) + " " + Клиентпоставщик.МФО;
						РеквизитыПокупателя = РеквизитыПокупателя + Символы.ПС;
						РеквизитыПокупателя = РеквизитыПокупателя + ?(ПустаяСтрока(Клиентпоставщик.ЮридическийАдрес), Клиентпоставщик.Адрес, Клиентпоставщик.ЮридическийАдрес);
						
						ОКПО = Клиентпоставщик.ОКПО;
						Если НЕ ПустаяСтрока(ОКПО) Тогда
							РеквизитыПокупателя = РеквизитыПокупателя + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("код по ОКПО", ЯзыкДокументов) + " " + ОКПО;
						КонецЕсли;					
						
						ОбластьПокупатель.Параметры.РеквизитыПокупателя = РеквизитыПокупателя;
						
						ТабДок.Вывести(ОбластьПокупатель);
					КонецЕсли;
					
					Если НЕ ЭтоСчет Тогда
						ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Плательщик", ЯзыкДокументов);
						ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тот же самый", ЯзыкДокументов);
						ТабДок.Вывести(ДопИнформация);
						
						ЗаказКлиента = Выборка.ЗаказКлиента;
						Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = ЗаказКлиента;
							ТабДок.Вывести(ДопИнформация);
							
						ИначеЕсли НоСчетЕсть Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату", ЯзыкДокументов) + " № " + выборка.номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокументов) + " " + формат(выборка.дата, "ДФ=dd.MM.yyyy");
							ТабДок.Вывести(ДопИнформация);
						КонецЕсли;	
						
						ТекстУсловииПродажиРегламентированногоДокумента = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстУсловииПродажиРегламентированногоДокумента");
						Если НЕ ПустаяСтрока(ТекстУсловииПродажиРегламентированногоДокумента) Тогда
							ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Условие продажи", ЯзыкДокументов);
							ДопИнформация.Параметры.ЗначениеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекстУсловииПродажиРегламентированногоДокумента, ЯзыкДокументов);
							ТабДок.Вывести(ДопИнформация);
						КонецЕсли;
					КонецЕсли;
					
					Договор = Выборка.договор;
					Если ЗначениеЗаполнено(Договор) Тогда
						ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Договор", ЯзыкДокументов);
						ДопИнформация.Параметры.ЗначениеПараметра = Договор;
						ТабДок.Вывести(ДопИнформация);
						ФормаВзаиморасчетов = Договор.ФормаВзаиморасчетов;
						
					Иначе
						ФормаВзаиморасчетов = Организация.ФормаВзаиморасчетовПоУмолчанию;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ФормаВзаиморасчетов) Тогда
						ДопИнформация.Параметры.НазваниеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Условие продажи", ЯзыкДокументов);
						ДопИнформация.Параметры.ЗначениеПараметра = ФормаВзаиморасчетов;
						ТабДок.Вывести(ДопИнформация);	
					КонецЕсли;
					ТабДок.Вывести(пробел);	
					
					Если НЕ ЦенаТоваровСодержитНДС Тогда
						ШапкаТаблицы.Параметры.Цена  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена без НДС", ЯзыкДокументов);
						ШапкаТаблицы.Параметры.Сумма = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма без НДС", ЯзыкДокументов);	
					Иначе
						Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Артикул", ЯзыкДокументов);	
						ИначеЕсли ИспользоватьШтрихКоды Тогда
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-код", ЯзыкДокументов);	
						Иначе
							ДопКолонка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код", ЯзыкДокументов);	
						КонецЕсли;								
						ШапкаТаблицы.Параметры.Колонка = ДопКолонка;	
					КонецЕсли;
					ТабДок.Вывести(ШапкаТаблицы);	
					
					СуммаСкидки = 0;
					Всего 		= 0;					
					ВсегоСНДС 	= 0;
					ЧислоСтрок 	= 0;
					СуммаВсегоНДС = 0;
					СуммаБезСкидкиБезНДС = 0;
					ЕдиницаИзмерения = "";
					
					ВыборкаТовары = Выборка.Товары.Выбрать();
					
					Пока ВыборкаТовары.Следующий() Цикл
						
						ЧислоСтрок 	 = ЧислоСтрок + 1;
						Номенклатура = ВыборкаТовары.Номенклатура;
						
						Если ЗначениеЗаполнено(Номенклатура) Тогда
							
							Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПоляПредставленийНоменклатурыАртикул, ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
							ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");
							
							ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
							
							Если ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой Тогда
								ЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаТовары.ЕдиницаИзмерения, , , ЯзыкДокументов);
							
								Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
									ЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.", ЯзыкДокументов);	
								КонецЕсли;	
							
								ОбластьТовары.Параметры.ЕдиницаИзмерения = ЕдиницаИзмерения;
							КонецЕсли;
						
							ОбластьТовары.Параметры.НоменклатураНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, Клиентпоставщик) + ДополнениеКНаименованиюНоменклатуры;
							
							Сумма = ВыборкаТовары.Сумма;
							Количество 	= ВыборкаТовары.Количество;
							Если Количество = 0 Тогда
								Количество = 1;
							КонецЕсли;
							
							ВсегоСНДС 	  = ВсегоСНДС + Сумма;
							СтавкаНДС 	  = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, СтавкаНДСОрганизации);
							СуммаБезНДС   = Сумма - Сумма * (СтавкаНДС / 100);
							СуммаВсегоНДС = СуммаВсегоНДС + (Сумма - СуммаБезНДС);
							Всего 		  = Всего + СуммаБезНДС;
							
							Если ЦенаТоваровСодержитНДС Тогда
								Если ИспользоватьРеквизитАртикулНоменклатуры Тогда
									ОбластьТовары.Параметры.КодАртикул = Артикул;
								ИначеЕсли ИспользоватьШтрихКоды Тогда
									ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.ОсновнойШтрихКод);
								Иначе
									ОбластьТовары.Параметры.КодАртикул = СокрЛП(Номенклатура.Код);
								КонецЕсли;								
							КонецЕсли;
							
							ОбластьТовары.Параметры.Сумма = СуммаБезНДС;
							ОбластьТовары.Параметры.Цена  = СуммаБезНДС / Количество;
							
							Если ЕстьСкидка тогда
								СуммаБезСкидки = ВыборкаТовары.СуммаБезСкидки;
								СуммаБезСкидкиБезНДСВСтроке = СуммаБезСкидки - СуммаБезСкидки * (СтавкаНДС / 100);	
								Скидка 		= СуммаБезНДС - СуммаБезСкидкиБезНДСВСтроке;
								СуммаСкидки = СуммаСкидки + Скидка;
								СуммаБезСкидкиБезНДС = СуммаБезСкидкиБезНДС + СуммаБезСкидкиБезНДСВСтроке;
								
								Если НЕ ЦенаТоваровСодержитНДС Тогда
									ОбластьТовары.Параметры.Скидка = Скидка;
									ОбластьТовары.Параметры.СуммаБезСкидки = СуммаБезСкидкиБезНДСВСтроке;
								КонецЕсли;
							Иначе
								СуммаБезСкидкиБезНДС = СуммаБезСкидкиБезНДС + СуммаБезНДС;
							КонецЕсли;	
							
						КонецЕсли;
						
						ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());					
					КонецЦикла;
					
					Если НЕ ЦенаТоваровСодержитНДС Тогда
						
						Если ЕстьСкидка Тогда						
							Подвал.Параметры.ВсегоБезСкидок = СуммаБезСкидкиБезНДС;
							Подвал.Параметры.ВсегоСкидок	= СуммаСкидки;
						КонецЕсли;
						
						Подвал.Параметры.Всего = Всего;
						ТабДок.Вывести(Подвал);	
					КонецЕсли;
					
					Если ЦенаТоваровСодержитНДС Тогда
						
						Если ЕстьСкидка тогда
							ОбластьИтоговСумм.Параметры.ВсегоСкидок = СуммаСкидки
						КонецЕсли;
						ОбластьИтоговСумм.Параметры.ВсегоБезНДС = СуммаБезСкидкиБезНДС;
						ОбластьИтоговСумм.Параметры.ВсегоНДС    = СуммаВсегоНДС;
						ОбластьИтоговСумм.Параметры.ВсегоСНДС   = ВсегоСНДС;
						ОбластьИтоговСумм.Параметры.Валюта      = Валюта;
						
					ИначеЕсли НЕ СуммаВсегоНДС = 0 Тогда
						
						ИтогоНДС.Параметры.НДС 		= Организация.СтавкаНДС;
						ИтогоНДС.Параметры.ВсегоНДС = СуммаВсегоНДС;
						ТабДок.Вывести(ИтогоНДС);					
						
						ИтогоНДС.Параметры.НДС 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего с НДС", ЯзыкДокументов);
						ИтогоНДС.Параметры.ВсегоНДС = ВсегоСНДС;
						ТабДок.Вывести(ИтогоНДС);
					КонецЕсли;
					
					ОбластьИтоговСумм.Параметры.ИтоговаяСтрока = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего наименований", ЯзыкДокументов) + " " + ЧислоСтрок + ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на сумму", ЯзыкДокументов) + " " + формат(ВсегоСНДС, "ЧЦ=15; ЧДЦ=2") + " " + валюта;
					СуммаКПрописи 		= ВсегоСНДС;
					ТекстСуммаПрописью 	= ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ВсегоСНДС, Валюта, ЯзыкДокументов);
					Если НЕ СуммаВсегоНДС = 0 Тогда
						ТекстСуммаПрописью = ТекстСуммаПрописью + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В том числе НДС", ЯзыкДокументов) + ": ";
						ТекстСуммаПрописью = ТекстСуммаПрописью + ОбщийМодульТекстСервер.СформироватьСуммуПрописью(СуммаВсегоНДС, Валюта, ЯзыкДокументов);
					КонецЕсли;
					ОбластьИтоговСумм.Параметры.СуммаПрописью = ТекстСуммаПрописью;
					ТабДок.Вывести(ОбластьИтоговСумм);
					
					Если ЭтоСчет Тогда
						ЧислоСекундДействительностиСчетаФактурыДляОплаты = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЧислоДнейДействительностиСчетаФактурыДляОплаты") * 3600 * 24;
						ОДействительностиСчета.Параметры.ИнформацияОДействительностиСчета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет действителен для оплаты до", ЯзыкДокументов) + " " + формат(НачалоДня(выборка.дата) + ЧислоСекундДействительностиСчетаФактурыДляОплаты, "ДФ=dd.MM.yyyy");
						ТабДок.Вывести(ОДействительностиСчета);	
						
					ИначеЕсли ЗначениеЗаполнено(Сотрудник) Тогда
						Подписи.Параметры.Сотрудник = Сотрудник;
						ТабДок.Вывести(Подписи);	
					КонецЕсли;
				КонецЦикла;
				
			Иначе //произвольный
				
				СуммаТовараВВалютеСделки = 0;
				
				Если параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС
					И ЗначениеЗаполнено(Выборка.Организация) Тогда
					
					ОбщийМодульСервер.ДобавитьШапкуОрганизации(ТабДок, Выборка.Организация);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.КлиентПоставщик) Тогда					
					
					КлиентПоставщикПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
					
					Если ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
						
						Если Выборка.ЭтоЗаказ Тогда
							ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыЗаказаКлиента");
							Если ПустаяСтрока(ИмяДокумента)тогда
								ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ Клиента", ЯзыкДокументов);						
							Иначе
								ОбластьЗаголовок.Параметры.ИмяДокумента = ИмяДокумента;
							КонецЕсли;
							
						Иначе
							Если ЗаголовокРасходнойНакладной = Неопределено Тогда
								ИмяДокумента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовара");
							Иначе
								ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЗаголовокРасходнойНакладной);
							КонецЕсли;	
							
							Если ПустаяСтрока(ИмяДокумента) Тогда
								ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходная накладная", ЯзыкДокументов);
							Иначе
								ОбластьЗаголовок.Параметры.ИмяДокумента = ИмяДокумента;
							КонецЕсли;
						КонецЕсли;
						
						Шапка.Параметры.КлиентЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент", ЯзыкДокументов);
						
					Иначе
						ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат Поставщику", ЯзыкДокументов);
						Шапка.Параметры.КлиентЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик", ЯзыкДокументов);
					КонецЕсли;
					Шапка.Параметры.КлиентПоставщикПредставление = КлиентПоставщикПредставление;
					
				Иначе
					Если Выборка.ЭтоЗаказ Тогда
						ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планируемое списание", ЯзыкДокументов);
					Иначе				
						ОбластьЗаголовок.Параметры.ИмяДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание товара", ЯзыкДокументов);
					КонецЕсли;
					
					Шапка.Параметры.КлиентЗ = "";	
				КонецЕсли;	
				
				ТабДок.Вывести(ОбластьЗаголовок);
				Шапка.Параметры.КлиентПоставщик  = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.КлиентПоставщик, ЯзыкДокументов);
				
				Шапка.Параметры.Заполнить(Выборка);
				СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
				Если НЕ параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС
					ИЛИ НЕ ЗначениеЗаполнено(Выборка.Организация) Тогда
					
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
				Иначе
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати = "";
				КонецЕсли;
				
				Шапка.Параметры.СкладЗ = ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад", ЯзыкДокументов), "");
				
				ДолгКлиента = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Выборка.КлиентПоставщик, Выборка.Дата -1);
				Если долгКлиента = 0 Тогда
					Шапка.Параметры.Долг = "";
				ИначеЕсли долгКлиента> 0 Тогда
					Шапка.Параметры.Долг = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Долг до продажи составляет", ЯзыкДокументов) + ": " + ДолгКлиента + " " + валютаосн;			
				Иначе
					Шапка.Параметры.Долг = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переплата до продажи составила", ЯзыкДокументов) + ": " + СокрЛП(-ДолгКлиента) + " " + валютаосн;
				КонецЕсли;
				
				ТабДок.Вывести(Шапка, Выборка.Уровень());
				
				АдресДоставки = Выборка.Адрес;
				Если ЗначениеЗаполнено(КлиентПоставщик) 
					И ПустаяСтрока(АдресДоставки) Тогда			
					
					АдресДоставки = КлиентПоставщик.Адрес;
				КонецЕсли;
				
				ПолныйНомерТелефона = Выборка.Телефон;
				Если ЗначениеЗаполнено(КлиентПоставщик) 
					И ПустаяСтрока(ПолныйНомерТелефона) Тогда
					
					ПолныйНомерТелефона = КлиентПоставщик.Телефон;
					Для НомерТелефона = 2 по 5 Цикл
						ЭтотНомерТелефона = КлиентПоставщик["Телефон" + СокрЛП(НомерТелефона)];
						Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
							ПолныйНомерТелефона = ПолныйНомерТелефона + ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ПолныйНомерТелефона = ""
					ИЛИ НЕ ПустаяСтрока(АдресДоставки) Тогда
					
					АдресТелефон = Макет.ПолучитьОбласть("АдресТелефон");
					АдресТелефон.Параметры.Адрес   = АдресДоставки;
					АдресТелефон.Параметры.Телефон = ПолныйНомерТелефона;
					
					ТабДок.Вывести(АдресТелефон);
				КонецЕсли;
				
				СуммаБезСкидки = 0;
				ТабДок.Вывести(ОбластьТоварыШапка);
				
				ВыборкаТовары  = Выборка.Товары.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					
					Номенклатура = ВыборкаТовары.Номенклатура;
					Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
					ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Номенклатура.Артикул), ", " + Номенклатура.Артикул, "");
					
					ОбластьТовары.Параметры.Заполнить(ВыборкаТовары);
					ОбластьТовары.Параметры.НоменклатураНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, Клиентпоставщик) + ДополнениеКНаименованиюНоменклатуры;
					
					Если НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента Тогда
						Количество = ОбластьТовары.Параметры.Количество;
						Если НЕ Количество = 0 Тогда
							ОбластьТовары.Параметры.Цена = ВыборкаТовары.Сумма / Количество;	
						КонецЕсли;
					КонецЕсли;
					
					ТабДок.Вывести(ОбластьТовары, ВыборкаТовары.Уровень());
					Если ИспользоватьСкидки Тогда
						СуммаБезСкидки = СуммаБезСкидки + ВыборкаТовары.СуммаБезСкидки;	
					КонецЕсли;
					
					СуммаТовараВВалютеСделки = СуммаТовараВВалютеСделки + ВыборкаТовары.Сумма;
					
				КонецЦикла;
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") Тогда
					ВыборкаОплаты = Выборка.Оплаты.Выбрать();
					
					Если НЕ ВыборкаОплаты.Количество() = 0 Тогда				
						ТабДок.Вывести(ОбластьОплатыШапка);	
						
						Пока ВыборкаОплаты.Следующий() Цикл
							ОбластьОплаты.Параметры.Заполнить(ВыборкаОплаты);	
							ТабДок.Вывести(ОбластьОплаты);	
						КонецЦикла;
					КонецЕсли;	
					
				КонецЕсли;
				
				Подвал.Параметры.Заполнить(Выборка);
				Подвал.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
				
				Если ИспользоватьСкидки
					И ЕстьСкидка Тогда
					
					Подвал.Параметры.Стоимость   = СуммаБезСкидки ;
					Подвал.Параметры.СуммаСкидки = СуммаБезСкидки - СуммаТовараВВалютеСделки;//Выборка.ТовараНаСумму ;	
				КонецЕсли;
				
				поступилоДенегНам = 0;
				Если ЭтоВыполнениеРабот Тогда
					
					Если НЕ Ссылка.Оплаты.Количество() = 0 Тогда				
						
						Для Каждого Оплата Из Ссылка.Оплаты Цикл
							поступилоДенегНам = поступилоДенегНам + Оплата.Сумма * Оплата.Курс;
						КонецЦикла;
						
					КонецЕсли;	
					
				Иначе
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") 
						И НЕ Ссылка.Оплаты.Количество() = 0 Тогда				
						
						Для Каждого Оплата Из Ссылка.Оплаты Цикл
							поступилоДенегНам = поступилоДенегНам + Оплата.Сумма * Оплата.Курс;
						КонецЦикла;
						
					Иначе
						поступилоДенегНам = Выборка.поступилоДенег;					
						
					КонецЕсли;	
				КонецЕсли;
				
				Если поступилоДенегНам = 0 Тогда
					Подвал.Параметры.поступилоДенегНам = "";
				ИначеЕсли поступилоДенегНам > 0 Тогда
					Подвал.Параметры.поступилоДенегНам = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принято от покупателя", ЯзыкДокументов) + ": " + формат(поступилоДенегНам,"ЧЦ=15; ЧДЦ=2") + " " + валюта;
				Иначе
					Подвал.Параметры.поступилоДенегНам = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Также передано покупателю", ЯзыкДокументов) + ": " + формат(-поступилоДенегНам,"ЧЦ=15; ЧДЦ=2") + " " + валюта;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.КлиентПоставщик) Тогда
					Если ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") 
						И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
						
						Подвал.Параметры.ОстатокДолга = "";
						
					ИначеЕсли ТипЗнч(Выборка.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") 
						И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
						
						Подвал.Параметры.ОстатокДолга = "";						
					Иначе
						
						Если ПараметрыСеанса.ВестиУчетВалютВСеансе
							И ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС
							И ЗначениеЗаполнено(Выборка.ВидЦен) 
							И ЗначениеЗаполнено(Выборка.ВидЦен.ВалютаЦены) 
							И НЕ Выборка.ВидЦен.ВалютаЦены = Выборка.валюта
							И (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах") 
							ИЛИ Ссылка.Оплаты.Количество() = 0) Тогда
							
							Сумма = ОбщийМодульСервер.ПоКурсу(Выборка.ТовараНаСумму, Выборка.Валюта, Выборка.ВидЦен.ВалютаЦены, выборка.дата) - Выборка.ПоступилоДенег;
							
						Иначе
							Сумма = СуммаТовараВВалютеСделки - поступилоДенегНам;
						КонецЕсли;
						
						Если ЭтоВыполнениеРабот Тогда
							ОстатокДолга = ДолгКлиента + Сумма;	
						Иначе
							ОстатокДолга = ДолгКлиента + Сумма * Выборка.курс;	
						КонецЕсли;
						
						Если ОстатокДолга = 0 Тогда
							Подвал.Параметры.ОстатокДолга = "";
						ИначеЕсли ОстатокДолга > 0 Тогда
							Подвал.Параметры.ОстатокДолга = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток долг", ЯзыкДокументов) + ": " + формат(ОстатокДолга,"ЧЦ=15; ЧДЦ=2") + " " + валютаосн;
						Иначе
							Подвал.Параметры.ОстатокДолга = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток переплата", ЯзыкДокументов) + ": " + формат(-ОстатокДолга,"ЧЦ=15; ЧДЦ=2") + " " + валютаосн;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Подвал.Параметры.ОстатокДолга = "";
				КонецЕсли;
				
				ТабДок.Вывести(Подвал);
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УчитыватьИнформациюОДоставкеВДокументахРасхода") Тогда
					Подписи = Макет.ПолучитьОбласть("Подписи");
					ТабДок.Вывести(Подписи);
				
					ИнформацияОДоставке = Макет.ПолучитьОбласть("ИнформацияОДоставке");
					ИнформацияОДоставке.Параметры.Заполнить(Выборка);
					ТабДок.Вывести(ИнформацияОДоставке);
				КонецЕсли;
				
			КонецЕсли;
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЦикла;     	
	КонецЕсли;
	
	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ТабДок.Область().СоздатьФорматСтрок();	
	КонецЕсли;
	ТабДок.АвтоМасштаб = ИСТИНА;
	ТабДокРезультат.Вывести(ТабДок);
	
КонецПроцедуры
