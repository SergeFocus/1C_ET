// sza150720-1850 регион
// sza150113-0329
// sza140710-0156  
// sza140610-1626  
// sza131003-0222 : 
&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ЛОЖЬ);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	

	Если НЕ СтруктураПараметров = Неопределено Тогда
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();	
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШКНаСервере(ТекКод);
		ПересчитатьДокументНаКлиенте();   	
	КонецЕсли;                              	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодПланирования.ДатаНачала = Объект.ДатаНачала;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания 				= Объект.ДатаНачала;
		ПериодПланирования.ДатаОкончания 	= Объект.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончания;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала 				= Объект.ДатаОкончания;
		ПериодПланирования.ДатаНачала 	= Объект.ДатаНачала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсюНоменклатуру(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));	
	ДобавитьВсюНоменклатуруНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсюНоменклатуруНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.ПланыПродаж"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокумента(Команда)
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить("Корректировки И Регистрация Остатков");
	СписокТиповДокументов.Добавить("Инвентаризации");
	СписокТиповДокументов.Добавить("Расходы Товара");
	СписокТиповДокументов.Добавить("Поступления Товара");
	СписокТиповДокументов.Добавить("Перемещения Товара");
	СписокТиповДокументов.Добавить("Установки Цен");
	СписокТиповДокументов.Добавить("Планы продаж");
	ТипДокументаДляДобавления = Неопределено;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДобавитьНоменклатуруДругогоДокументаЗавершение", ЭтаФорма), СписокТиповДокументов, , СписокТиповДокументов[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТипДокументаДляДобавления = ВыбранныйЭлемент;
	Если НЕ ТипДокументаДляДобавления = Неопределено тогда
		ТипДокументаДляДобавления = стрзаменить(ТипДокументаДляДобавления, " ", "");
		
		ФормаВыбораДокумента = ПолучитьФорму("Документ." + ТипДокументаДляДобавления + ".ФормаВыбора");
		
		ФормаВыбораДокумента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Документ для добавления его номенклатуры в Установку цен") + ": ";
		ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();
		Если ЗначениеЗаполнено(ДругойДокумент) Тогда
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
			ДобавитьНоменклатуруДругогоДокументаНаСервере();      	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруДругогоДокументаНаСервере()
	
	Если ЗначениеЗаполнено(ДругойДокумент) Тогда		
		Объект.Товары.Загрузить(ДругойДокумент.Товары.Выгрузить());		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоГруппеНоменклатуры(Команда)
	
	ФормаВыбораГруппыНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбораГруппы");
	ФормаВыбораГруппыНоменклатуры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Группу номенклатуры для добавления в установку цен") + ": ";
	ГруппаНоменклатуры = ФормаВыбораГруппыНоменклатуры.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПогруппеНоменклатурыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоГруппеНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Родитель", ГруппаНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураВх)
	
	ЕдиницаИзмерения = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура = НоменклатураВх;
		Количество = 1;
		Цена = 0;
		ЦенаЕсть = ЛОЖЬ;
		
	Иначе
		Номенклатура = НоменклатураВх.Номенклатура;
		Количество = НоменклатураВх.Количество;
		Цена = 0;
		ЦенаЕсть = НоменклатураВх.Свойство("Цена", Цена);
		
		НоменклатураВх.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Количество = Количество * ЕдиницаИзмерения.Количество;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НоменклатураИлиГруппа", Номенклатура);
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если СтрокаТовара.Количество() = 0 Тогда
			СтрокаТовара = Объект.Товары.Добавить();	
			
			СтрокаТовара.НоменклатураИлиГруппа = Номенклатура;
			
			СтрокаТовара.Количество = Количество;
			СтрокаТовара.Сумма = Количество * Цена;
			
			Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		КонецЕсли;
		
	ИначеЕсли НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоНоменклатурнойГруппе(Команда)
	
	ФормаНоменклатурнойГруппы = ПолучитьФорму("Справочник.НоменклатурныеГруппы.ФормаВыбора");
	ФормаНоменклатурнойГруппы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Номенклатурную Группу для добавления её номенклатуры в установку цен") + ": ";
	НоменклатурнаяГруппа = ФормаНоменклатурнойГруппы.ОткрытьМодально();
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа)  Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоНоменклатурнойГруппеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоНоменклатурнойГруппеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЦикла;     	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПроизводителю(Команда)
	
	ФормаВыбораПроизводителя = ПолучитьФорму("Справочник.Производители.ФормаВыбора");
	ФормаВыбораПроизводителя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Производителя для добавления его номенклатуры в установку цен") + ": ";
	Производитель = ФормаВыбораПроизводителя.ОткрытьМодально();
	Если ЗначениеЗаполнено(Производитель) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоПроизводителюНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоПроизводителюНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Производитель = &Производитель";
	
	Запрос.УстановитьПараметр("Производитель", Производитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатками(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	ЗаполнитьОстаткамиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.Товары.Остатки(&ДатаДокумента, " + ?(ЗначениеЗаполнено(Объект.Склад), "Склад = &Склад", "") + ") КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("ДатДокумента", Объект.Дата);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродажам(Знач СпособЗаполнения);
	
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьПоПродажамФрагмент(СпособЗаполнения);
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПродажамЗавершение", ЭтаФорма, Новый Структура("СпособЗаполнения", СпособЗаполнения)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу?"), РежимДиалогаВопрос.ДаНет);
		                                     	
	КонецЕсли;      	
					КонецПроцедуры
					
					&НаКлиенте
					Процедура ЗаполнитьПоПродажамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
						
						СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;						
						
						Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
							ЗаполнитьПоПродажамФрагмент(СпособЗаполнения);
						КонецЕсли;

КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьПоПродажамФрагмент(Знач СпособЗаполнения)
		
		Объект.Товары.Очистить();
		
		Если Началодня(Объект.ДатаНачала) = НачалоМесяца(Объект.ДатаНачала)
			И Конецдня(Объект.ДатаОкончания) = КонецМесяца(Объект.ДатаОкончания) Тогда
			
			ДатаОкончанияАнализа = КонецМесяца(Началодня(Объект.ДатаНачала) - 3600);
			ДатаНачалаАнализа = НачалоМесяца(ДатаОкончанияАнализа - (Объект.ДатаОкончания - Объект.ДатаНачала) + 3600 * 24 * 3);
			
		Иначе
			ДатаОкончанияАнализа = Объект.ДатаНачала - 1;
			ДатаНачалаАнализа = ДатаОкончанияАнализа - (Объект.ДатаОкончания - Объект.ДатаНачала);
			
		КонецЕсли;
		
		КомандыВопроса = Новый Массив(2, 3);
		КомандыВопроса[0][0] = "ОК";
		КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Готово");
		КомандыВопроса[0][2] = "Результат = Новый Структура(""ДатаНачала, ДатаОкончания"", ВыбранныйПериод.ДатаНачала, ВыбранныйПериод.ДатаОкончания);";
		КомандыВопроса[1][0] = "НЕТ";
		КомандыВопроса[1][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена");
		КомандыВопроса[1][2] = "Результат = Неопределено;";
		ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
		ПараметрыФормы.Вставить("ЗаголовокФормы", "");
		ПараметрыФормы.Вставить("ЭтоВыборПериода", ИСТИНА);
		ПараметрыФормы.Вставить("ДатаНачала", ДатаНачалаАнализа);
		ПараметрыФормы.Вставить("ДатаОкончания", ДатаОкончанияАнализа);
		ПараметрыФормы.Вставить("ТекстВопроса", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите период для изучения продаж?"));
		ПараметрыФормы.Вставить("ЭтоПериод", ИСТИНА);
		
		ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
		ОтветПользователя = ФормаВопроса.ОткрытьМодально();
		Если НЕ ОтветПользователя = Неопределено Тогда
			ДатаНачалаАнализа = ОтветПользователя.ДатаНачала;
			ДатаОкончанияАнализа = ОтветПользователя.ДатаОкончания;
			ЗаполнитьПоПродажамНаСервере(СпособЗаполнения, ДатаНачалаАнализа, ДатаОкончанияАнализа);
		КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПродажамНаСервере(Знач СпособЗаполнения, Знач ДатаНачалаАнализа, Знач ДатаОкончанияАнализа)
	
	Объект.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На основании продаж за период") + ": " + формат(ДатаНачалаАнализа, "ДФ=dd.MM.yy") + "-" + формат(ДатаОкончанияАнализа, "ДФ=dd.MM.yy");
	
	Запрос = Новый Запрос;
	Если СпособЗаполнения = 1 Тогда
		Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.Номенклатура КАК Ссылка,
		|	ПродажиОбороты.КоличествоОборот КАК Количество,
		|	ПродажиОбороты.СуммаОборот КАК Сумма
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачалаАнализа, &ДатаОкончанияАнализа, , ) КАК ПродажиОбороты";
		
	ИначеЕсли СпособЗаполнения = 2 Тогда
		Запрос.Текст = "ВЫБРАТЬ СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(ПродажиОбороты.СуммаОборот) КАК Сумма,
		|	ПродажиОбороты.Номенклатура.Родитель КАК Ссылка
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачалаАнализа, &ДатаОкончанияАнализа, , ) КАК ПродажиОбороты
		|СГРУППИРОВАТЬ ПО ПродажиОбороты.Номенклатура.Родитель";
		
	Иначе 
		Запрос.Текст = "ВЫБРАТЬ СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(ПродажиОбороты.СуммаОборот) КАК Сумма,
		|	ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа КАК Ссылка
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачалаАнализа, &ДатаОкончанияАнализа, , ) КАК ПродажиОбороты
		|СГРУППИРОВАТЬ ПО ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачалаАнализа", ДатаНачалаАнализа);
	Запрос.УстановитьПараметр("ДатаОкончанияАнализа", ДатаОкончанияАнализа);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТоваров = Объект.Товары.Добавить();
			СтрокаТоваров.НоменклатураИлиГруппа = ВыборкаДетальныеЗаписи.Ссылка;
			СтрокаТоваров.Количество = ВыборкаДетальныеЗаписи.Количество;
			СтрокаТоваров.Сумма  	 = ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродажамиГруппНоменклатуры(Команда)
	ЗаполнитьПоПродажам(2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродажамиНоменклатуры(Команда)	
	ЗаполнитьПоПродажам(1);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродажамиПоНоменклатурнымГруппам(Команда)
	ЗаполнитьПоПродажам(3);
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы) Тогда
		Элементы.ОбработкаТаблицы.Доступность 		= ЛОЖЬ;
		Элементы.ТоварыВводШтрихКода.Доступность 	= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Доступность = ЛОЖЬ;
		Элементы.ТоварыПодборНоменклатуры.Доступность = ЛОЖЬ;
		
	Иначе
		Элементы.ОбработкаТаблицы.Доступность 		= ИСТИНА;
		Элементы.ТоварыВводШтрихКода.Доступность 	= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Доступность = ИСТИНА;
		Элементы.ТоварыПодборНоменклатуры.Доступность = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	ОбработатьПолученныйШКНаСервере(ТекКод);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныйШКНаСервере(ТекКод, Количество = 1)
	
	РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод , , , Объект.Дата);
	Если ЗначениеЗаполнено(РезультатОбработки) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("Сумма");
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияПриИзменении(Элемент)
	
	Объект.ДатаНачала 		= ПериодПланирования.ДатаНачала;
	Объект.ДатаОкончания 	= ПериодПланирования.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
// 	ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	ПараметрыФормы.Вставить("Добавление", ИСТИНА);
	// ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Товары", Объект.Товары);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбора", ПараметрыФормы, Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработатьБлокировку();
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                             // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                        // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	ПериодПланирования.ДатаНачала 		= Объект.ДатаНачала;
	ПериодПланирования.ДатаОкончания 	= Объект.ДатаОкончания;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)         // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002400", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		
		Элементы.ТоварыВводСКоличеством.Видимость = не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ФормаГруппаГлоб, Элементы.ГруппаАльтернативногоВидаСлева);
			Элементы.Переместить(Элементы.ГруппаНомерДата, Элементы.ГруппаАльтернативногоВидаСлева);
			Элементы.ГруппаНомерДата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Элементы.Переместить(Элементы.ГруппаПериодПланированияПродаж, Элементы.ГруппаАльтернативногоВидаСлева);
			Элементы.ГруппаПериодПланированияПродаж.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Элементы.Переместить(Элементы.ГруппаСлева, Элементы.ГруппаАльтернативногоВидаСправа);
			Элементы.Переместить(Элементы.ГруппаДополнительнаяИнформация, Элементы.ГруппаАльтернативногоВидаСлева);
			Элементы.Переместить(Элементы.ГруппаКомментария, Элементы.ГруппаАльтернативногоВидаСлева);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.ГруппаАльтернативногоВидаСлева);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда			
			ПериодПланирования.Вариант 	= ВариантСтандартногоПериода.СледующийМесяц;
			Объект.ДатаНачала 			= ПериодПланирования.ДатаНачала;
			Объект.ДатаОкончания 		= ПериодПланирования.ДатаОкончания;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			Объект.Регион = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионПоУмолчанию");
		КонецЕсли;
		
		Если НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
			Элементы.ТоварыНоменклатураИлиГруппа.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура или Группа");
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		
		Элементы.ТоварыПодборНоменклатуры.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмПодбораНоменклатуры");
		Элементы.ДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляРасхода");
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);	
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.ПланНеАктуален.ВидФлажка = ВидФлажка.Флажок; ");	
			КонецЕсли;
			Элементы.ПланНеАктуален.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("План НЕ актуален");
			Элементы.ПланНеАктуален.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Товары.Очистить();
		Для Каждого Подбор Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Товары.Добавить();
			Строка.НоменклатураИлиГруппа = Подбор.номенклатура;
			Строка.Количество            = Подбор.Количество;
			Строка.Сумма 			 	 = Подбор.Сумма;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(, , , , Объект.Склад, );	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад)
		И ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры
