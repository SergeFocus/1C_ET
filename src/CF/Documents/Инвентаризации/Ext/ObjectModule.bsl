// sza151210-2335 про
// sza150210-2256 серийная
// sza150109-2342 НЧ
// sza141101-0407 : 
// sza140701-1318  
// sza140409-0228  
// sza130909-0335 : 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			Комментарий = ДанныеЗаполнения.Комментарий;
			Склад 		= ДанныеЗаполнения.Склад;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходыТовара") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			Комментарий = ДанныеЗаполнения.Комментарий;
			Склад 		= ДанныеЗаполнения.Склад;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.События") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.Направление;
			Комментарий = ДанныеЗаполнения.Комментарий;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			Комментарий = ДанныеЗаполнения.Комментарий;
			Склад 		= ДанныеЗаполнения.Склад;
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			Комментарий = ДанныеЗаполнения.Комментарий;
			НаправлениеДеятельности = ДанныеЗаполнения.НаправлениеДеятельности;
			
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ТекСтрокаТовара.СерияНоменклатуры;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.УстановкиЦен") Тогда
			ВидЦен 		= ДанныеЗаполнения.ВидЦен;
			Комментарий = ДанныеЗаполнения.Комментарий;
			Для Каждого ТекСтрокаТовара Из ДанныеЗаполнения.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ТекСтрокаТовара.Номенклатура;
				НоваяСтрока.Цена 				= ТекСтрокаТовара.Цена;
			КонецЦикла;
			
		КонецЕсли;
		
		ИспользоватьСкидкиПС = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС");
		
		Для Каждого СтрокаТовара Из Товары Цикл
			СтрокаТовара.КоличествоУчет = ОбщийМодульСервер.ПолучитьОстатокТовара(СтрокаТовара.Номенклатура, Склад, ?(ЗначениеЗаполнено(Дата), дата, ОбщийМодульСервисСервер.ПользователяТекущаяДата()));
			
			Если ИспользоватьСкидкиПС Тогда
				
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.КоличествоПоФакту, ВидЦен, , , Склад, Дата); // акция номенклатуры
				Если НЕ ПроцентСкидки = 0 
					И НЕ СтрокаТовара.Цена = 0 Тогда
					
					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
				КонецЕсли;                                     	
			КонецЕсли;
			
			СтрокаТовара.СуммаУчет 				= СтрокаТовара.КоличествоУчет * СтрокаТовара.Цена;
			СтрокаТовара.СуммаПоФакту 			= СтрокаТовара.КоличествоПоФакту * СтрокаТовара.Цена;
			СтрокаТовара.СуммаНеучтенныйВозврат	= СтрокаТовара.КоличествоНеучтенныйВозврат * СтрокаТовара.Цена;
			СтрокаТовара.КоличествоРазница 		= СтрокаТовара.КоличествоПоФакту - СтрокаТовара.КоличествоУчет + СтрокаТовара.КоличествоНеучтенныйВозврат;
			СтрокаТовара.СуммаРазница 			= СтрокаТовара.КоличествоРазница * СтрокаТовара.Цена;
			
		КонецЦикла;       	
	КонецЕсли;	
	
КонецПроцедуры
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если НеПроводить Тогда
		НеПроводить = ЛОЖЬ;
		Записать(РежимЗаписиДокумента.Запись);
		
	Иначе		
		ПриходоватьИзлишкиИнвентаризацииВсегда	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриходоватьИзлишкиИнвентаризацииВсегда", ИСТИНА);
		ЗначениеЗаполненоСвязанныйДокументРеализации = ЗначениеЗаполнено(СвязанныйДокументРеализации);
		
		Если НЕ отказ
			И (НЕ ЗначениеЗаполненоСвязанныйДокументРеализации
			ИЛИ ПриходоватьИзлишкиИнвентаризацииВсегда) Тогда
			
			Движения.ВаловаяПрибыль.Записать();
			Движения.Деньги.Записать();
			Движения.Зарплата.Записать();
			Движения.Товары.Записать();
			
			Если НЕ Сторный Тогда
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Расход;
			Иначе
				ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Расход;
				ВидДвиженияНакопленияРасход = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			
			ИспользоватьСложныйМеханизмЦен = ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
			ВестиУчетВаловойПрибыли = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
			ВидЦенПриходованияТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");			
			
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				ВалютаЦены = ВидЦен.ВалютаЦены;
				Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВалютаЦены, Дата);
			Иначе
				ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				Курс = 1;
			КонецЕсли;
			
			ГотоваяТаблицаОстатков = ОбщийМодульСервер.СформироватьТаблицуОстатков(Ссылка, Склад, Дата);
			
			Для Каждого ТекСтрокаТовара Из Товары Цикл
				
				Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
					И НЕ ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения) Тогда
					
					СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
					СерияОбъект.ДокументПриобретения = Ссылка;
					СерияОбъект.Записать();
				КонецЕсли;
				
				СуммаТов 	 = ТекСтрокаТовара.СуммаРазница * Курс;	
				Номенклатура = ТекСтрокаТовара.Номенклатура;
				Количество 	 = ТекСтрокаТовара.КоличествоРазница;
				КомментарийСтроки = ?(НЕ ПустаяСтрока(ТекСтрокаТовара.Комментарий), ТекСтрокаТовара.Комментарий, Комментарий);
				СерияНоменклатуры = ТекСтрокаТовара.СерияНоменклатуры;
				
				Если ТекСтрокаТовара.КоличествоРазница < 0 
					И НЕ ЗначениеЗаполненоСвязанныйДокументРеализации Тогда
					
					ЦенаСписания = ОбщийМодульСервер.ПолучитьЦенуСписания(Номенклатура, -Количество, Дата, , , Склад, СерияНоменклатуры);// , СтруктураОстатка);
					
					Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
						
						СтрокаОстаток = ГотоваяТаблицаОстатков.найти(Номенклатура, "Номенклатура");
						Если НЕ СтрокаОстаток = Неопределено Тогда
							КоличествоОстаток = СтрокаОстаток.КоличествоОстаток;
							СуммаОстаток 	  = СтрокаОстаток.СуммаОстаток;
						Иначе
							СуммаОстаток 	  = 0;
							КоличествоОстаток = 0;
						КонецЕсли;
						
						СтруктураОстатка = Новый Структура;
						СтруктураОстатка.Вставить("Количество", КоличествоОстаток);
						СтруктураОстатка.Вставить("Сумма", СуммаОстаток);
						
						Если НЕ НеПроизводитьОприходованиеИСписаниеЭтимДокументом Тогда
							
							Движение = Движения.Товары.Добавить();
							Движение.ВидДвижения  = ВидДвиженияНакопленияРасход;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = Номенклатура;					
							Движение.Склад 		  = Склад;  					
							Движение.Количество   = -Количество;
							Движение.Сумма 		  = ЦенаСписания * (-Количество);	
							Движение.Комментарий  = КомментарийСтроки;
							Движение.СерияНоменклатуры 		  = СерияНоменклатуры;
							Движение.СписаниеИлиОприходование = ИСТИНА;
							
						КонецЕсли;						
					КонецЕсли;
					
					Если ВестиУчетВаловойПрибыли Тогда
						
						СтруктураСреднейВаловойПрибыли = ОбщийМодульТоварСервер.ПолучитьСреднююВаловуюПрибыльРеализации(Номенклатура, Дата, Ссылка, ИСТИНА, СерияНоменклатуры);
						
						Если НЕ СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль = 0 Тогда
							
							Движение = Движения.ВаловаяПрибыль.Добавить();
							Движение.Количество   = -Количество;
							Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = Номенклатура;
							Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда
								Движение.СерияНоменклатуры = СерияНоменклатуры;
							КонецЕсли;
							Движение.Склад		  = Склад;
							Движение.Комментарий  = КомментарийСтроки;											
							Движение.Сумма 		  = -(СтруктураСреднейВаловойПрибыли.СредняяВаловаяПрибыль * ?(Количество = 0, 1, Количество));
							Движение.ПроцентНаценки = СтруктураСреднейВаловойПрибыли.ПроцентНаценки;
							Движение.РентабельностьПродаж = СтруктураСреднейВаловойПрибыли.РентабельностьПродаж;
							
						КонецЕсли;						
					КонецЕсли;
					
				ИначеЕсли Количество > 0 Тогда
					
					Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
						
						Если НЕ НеПроизводитьОприходованиеИСписаниеЭтимДокументом ИЛИ
							ПриходоватьИзлишкиИнвентаризацииВсегда И ЗначениеЗаполненоСвязанныйДокументРеализации Тогда
							
							ЦенаОприходования = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦенПриходованияТовара, Дата, , Количество, , , , Ссылка, , , ИСТИНА);
							
							Если ЦенаОприходования > 0 Тогда
								СуммаТов = ЦенаОприходования * Количество;
							КонецЕсли;
							
							Движение = Движения.Товары.Добавить();
							Движение.ВидДвижения  = ВидДвиженияНакопленияПриход;
							Движение.Период 	  = Дата;
							Движение.Номенклатура = Номенклатура;
							Движение.Склад 		  = Склад;					
							Движение.Количество   = Количество;
							Движение.Комментарий  = КомментарийСтроки;					
							Движение.Сумма 		  = СуммаТов;
							Движение.СерияНоменклатуры 		  = ТекСтрокаТовара.СерияНоменклатуры;
							Движение.СписаниеИлиОприходование = ИСТИНА;   	
						КонецЕсли;
						
					КонецЕсли;				
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.ПриходРасходДенег Тогда
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
					
					ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
					
					Движения.Зарплата.Записывать = ИСТИНА;
					Для Каждого СтрокаОтражения Из ОтражениеВЗарплате Цикл
						
						Движение = Движения.Зарплата.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= Дата;
						Движение.ВидНачисления 	= Перечисления.ВидыНачислений.Другое;
						Движение.Сумма 			= СтрокаОтражения.Сумма;	
						Движение.СуммаВВалюте 	= СтрокаОтражения.Сумма;
						Движение.Валюта 		= ОсновнаяВалюта;
						Движение.Комментарий 	= ?(ЗначениеЗаполнено(СтрокаОтражения.ОСтроке), СтрокаОтражения.ОСтроке, Комментарий);
						Движение.Сотрудник 		= СтрокаОтражения.Сотрудник;
						Движение.ОписаниеНачисления = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По результатам инвентаризации") + " " + Номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " " + Дата;
						
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
				И НЕ ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.НедостачаВЗаработнойПлате Тогда
				
				ВалютаДок = ?(ЗначениеЗаполнено(Валюта), Валюта, ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
				
				Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
					ФормаОплаты = ХранилищеДенег.ФормаОплаты;
				Иначе
					ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
					ФормаОплаты = перечисления.ФормыОплаты.Наличные;
				КонецЕсли;
				
				// чтобы не было двойного оприходования денег
				// штатно должно быть ПоступилоДенегСУчетомРеализации = 0, если есть реализация
				ПоступилоДенегСУчетомРеализации	= ПоступилоДенег - ?(ЗначениеЗаполненоСвязанныйДокументРеализации, СвязанныйДокументРеализации.ПоступилоДенег, 0);
				СуммаДенег = ВыбылоДенег - ПоступилоДенегСУчетомРеализации;
				
				Если НЕ СуммаДенег = 0 Тогда
					
					Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
						Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Дата, ФормаОплаты, ВалютаДок, ХранилищеДенег, , Ссылка);
					КонецЕсли;
					
					Если НЕ отказ 
						И ВыбылоДенег > 0 Тогда				
						
						Движения.Деньги.Записывать = ИСТИНА;
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияРасход;
						Движение.Период 		= Дата;
						Движение.Статья 		= СтатьяВыбытия;
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(ВыбылоДенег, ВалютаДок, , Дата);	
						Движение.Валюта			= ВалютаДок;
						Движение.СуммаВВалюте 	= ВыбылоДенег;
						Движение.ХранилищеДенег = ХранилищеДенег;
						Движение.ФормаОплаты 	= ФормаОплаты;
					КонецЕсли;
					
					Если НЕ отказ 
						И ПоступилоДенегСУчетомРеализации > 0 Тогда
						
						Движения.Деньги.Записывать = ИСТИНА;
						Движение = Движения.Деньги.Добавить();
						Движение.ВидДвижения 	= ВидДвиженияНакопленияПриход;
						Движение.Период 		= Дата;
						Движение.Статья 		= СтатьяПоступления;
						
						Движение.Сумма 			= ОбщийМодульСервер.ПоКурсу(ПоступилоДенегСУчетомРеализации, ВалютаДок, , Дата);	
						Движение.Валюта			= ВалютаДок;
						Движение.СуммаВВалюте 	= ПоступилоДенегСУчетомРеализации;
						
						Движение.ХранилищеДенег = ХранилищеДенег;
						Движение.ФормаОплаты 	= ФормаОплаты;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движения.ВаловаяПрибыль.Записывать = НЕ Отказ;	
		Движения.Деньги.Записывать 	 = НЕ Отказ;	
		Движения.Зарплата.Записывать = НЕ Отказ;	
		Движения.Товары.Записывать 	 = НЕ Отказ;		
	КонецЕсли;
	
КонецПроцедуры
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ Отказ Тогда	
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000311", , Отказ, ЭтотОбъект);	
		
		Если НЕ Отказ Тогда
			
			Для Каждого ТекСтрокаТовара Из Товары Цикл
				
				Если ЗначениеЗаполнено(ТекСтрокаТовара.СерияНоменклатуры)
					И ТекСтрокаТовара.СерияНоменклатуры.ДокументПриобретения = Ссылка Тогда
					
					СерияОбъект = ТекСтрокаТовара.СерияНоменклатуры.ПолучитьОбъект();
					СерияОбъект.ДокументПриобретения = Неопределено;
					СерияОбъект.Записать();
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
Если ОбменДанными.Загрузка Тогда 
     Возврат; 
 КонецЕсли; 
 
 Если НЕ Отказ
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА)
		И Модифицированность()
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ") Тогда
			ПодготовкаКПроведению(Отказ);	
		КонецЕсли;
		
		Если НЕ отказ
			И Товары.Количество() = 0 
			И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;	                      	
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
			ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ Отказ
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		
		Если Дата > ТекущаяДата() 
			И ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002900", , , ЭтотОбъект) Тогда
			
			Дата = ТекущаяДата();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата и время документа установлены сейчас."));
		КонецЕсли;
		
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		МассивПустыхСтрок  = Новый Массив;
		МассивНоменклатуры = Новый Массив;
		
		Для Каждого СтрокаТовары Из товары Цикл
			НоменклатураСтроки = СтрокаТовары.Номенклатура;
			
				Если ИспользоватьЕдиницыИзмеренияНоменклатуры
				И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
				
				НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(СтрокаТовары.ЕдиницаИзмерения) = Неопределено;
			Иначе
				НоменклатураПовторяется = НЕ МассивНоменклатуры.Найти(НоменклатураСтроки) = Неопределено;
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда   				
				
				МассивПустыхСтрок.Добавить(СтрокаТовары);
				
			ИначеЕсли ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(НоменклатураСтроки)
				ИЛИ ОбщийМодульПовтор.ЭтоНабор(НоменклатураСтроки) Тогда
				
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура без количественного учета") + ": " + НоменклатураСтроки, , Ссылка);
				КонецЕсли;
				Отказ = ИСТИНА;
				
			ИначеЕсли НоменклатураПовторяется Тогда
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовары.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется Номенклатура") + ": " + НоменклатураСтроки, , Ссылка);
				КонецЕсли;
				Отказ = ИСТИНА;
				
			ИначеЕсли НЕ НоменклатураСтроки.СерийныйУчет Тогда
				Если ИспользоватьЕдиницыИзмеренияНоменклатуры
					И ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмерения) Тогда
					
					МассивНоменклатуры.Добавить(СтрокаТовары.ЕдиницаИзмерения);
				Иначе
					МассивНоменклатуры.Добавить(НоменклатураСтроки);
				КонецЕсли;				
				
			КонецЕсли;                                    	
		КонецЦикла;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
			И НЕ Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
			
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Валюта, ХранилищеДенег);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Для Каждого СтрокаТовары Из МассивПустыхСтрок Цикл
				товары.Удалить(СтрокаТовары);	
			КонецЦикла;
			
			Попытка // ЭтотОбъект
				ОбщийМодульТоварСервер.ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект);
			Исключение
			КонецПопытки;
			
			ТовараВКоличестве = Товары.Итог("КоличествоРазница");
			ТовараНаСумму 	  = товары.Итог("СуммаРазница");	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

#КонецЕсли