// sza150605-2227
// sza150116-1639
// sza150109-2341
// sza141129-0307
// sza140710-0021  
// sza140618-1339  
// sza130909-1805

&НаКлиенте
Процедура Валюта1ПриИзменении(Элемент)
	Валюта1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура Валюта1ПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ Объект.Валюта = Объект.ХранилищеДенег.Валюта Тогда
		
		Объект.ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Валюта1ПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод = "", Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите Штрих-Код");
	КонецЕсли;
	
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводСКоличеством(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	СтруктураДляВВода = Новый Структура;
	СтруктураДляВВода.Вставить("Дата", Объект.Дата);
	СтруктураДляВВода.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДляВВода.Вставить("Склад", Объект.Склад);
	СтруктураДляВВода.Вставить("ЭтоДобавка", ИСТИНА);
	СтруктураДляВВода.Вставить("БлокВидаЦенИЦены", ИСТИНА);
	
	СтруктураПараметров = ОбщийМодульКлиент.ВвестиНоменклатуруИКоличество(СтруктураДляВВода);	
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		ДобавитьПозициюНоменклатуры(СтруктураПараметров);
		ПересчитатьДокументНаКлиенте();
		ЭтаФорма.ТекущийЭлемент = Элементы.Товары;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
	КонецЕсли;                              	
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьСторно()
	
	ЗначениеЗаполненоДокументСторнирован = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ИспользоватьСторнированиеДокументов Тогда
		
		Элементы.Декорация2.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ заблокирован");
		
		Если НЕ Объект.Сторный Тогда
			
			ДокументСторнирован = ОбщийМодульСервер.ПроверитьЧтоДокументСторнирован(Объект.Ссылка);
			
			ЗначениеЗаполненоДокументСторнирован = ЗначениеЗаполнено(ДокументСторнирован);
			Элементы.ФормаСторно.Видимость = НЕ ЗначениеЗаполненоДокументСторнирован;
			Если ЗначениеЗаполненоДокументСторнирован Тогда
				ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(ДокументСторнирован);
				Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
					Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
					Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
				КонецЕсли;
			КонецЕсли;			
			
		Иначе
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			ПричинаСторнирования = ОбщийМодульСервисСервер.ПолучитьПричинуСторнирования(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПричинаСторнирования) Тогда
				Элементы.ГруппаПричиныСторнирования.Видимость = ИСТИНА;
				Элементы.ПричинаСторнированияОписание.Видимость = ЗначениеЗаполнено(ПричинаСторнирования.Описание);	
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаПровестиИЗакрыть.Видимость = ЛОЖЬ;
			Элементы.ФормаЗаписать.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
		
	ИначеЕсли Объект.Проведен Тогда
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ЛОЖЬ;
			Элементы.ФормаОтменаПроведения.Видимость = ИСТИНА;
		Исключение // нет прав
		КонецПопытки;
		
	Иначе
		Попытка
			Элементы.ФормаСторно.Видимость = ЛОЖЬ;
			Элементы.ФормаПровести.Видимость = ИСТИНА;
			Элементы.ФормаОтменаПроведения.Видимость = ЛОЖЬ;
		Исключение // нет прав
		КонецПопытки;
	КонецЕсли;
	
	Элементы.ДокументСторно.Видимость = ЗначениеЗаполнено(Объект.ДокументСторно);
	Элементы.КартинкаСторно.Видимость = Объект.Сторный;
	Элементы.ДокументСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	Элементы.КартинкаСторнирован.Видимость = ЗначениеЗаполненоДокументСторнирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)	
	ВидЦенПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВидЦенПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;		
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка);
		ПересчитатьСтрокуНаСервере(СтрокаТовара);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньгиПоРезультату(Команда)
	ДеньгиПоРезультатуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДеньгиПоРезультатуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидЦен)
		И ЗначениеЗаполнено(Объект.ВидЦен.ВалютаЦены) Тогда
		
		Объект.Валюта = Объект.ВидЦен.ВалютаЦены;
	КонецЕсли;
	
	Если УчетЗарплаты 
		И Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.ПриходПоРеализацииИНедостачуПоКассе Тогда
		
		СуммаРеализации	= 0;
		
		Для каждого Стр Из Объект.Товары Цикл
			
			Если Стр.СуммаРазница >= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаРеализации	= СуммаРеализации - Стр.СуммаРазница;
		КонецЦикла;
		
		// Если "-", то это забранная выручка, "+" не должно быть, перед инвентаризацией нужно кассу снять
		ОстатокВКассе 	= ОбщийМодульСервер.ПолучитьОстатокДенег(КонецДня(Объект.Дата), , Объект.Валюта, Объект.ХранилищеДенег);
		
		Если Объект.СвязанныйДокументРеализации.Проведен Тогда
			Недостача	= ОстатокВКассе;
		Иначе	
			Недостача	= СуммаРеализации + ОстатокВКассе;
		КонецЕсли;
		
		Недостача		= Макс(0, Недостача);
		
		РасписатьПоСотрудникам(-Недостача);
		
		Объект.ВыбылоДенег = Недостача;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяВыбытия) Тогда
			Объект.СтатьяВыбытия = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
		КонецЕсли;
		
		Объект.ПоступилоДенег 	 = СуммаРеализации;
		Объект.СтатьяПоступления = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
		
	ИначеЕсли УчетЗарплаты
		И Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.НедостачаВЗаработнойПлате Тогда
		
		СуммаРазница = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("СуммаРазница"), , Объект.Валюта, Объект.Дата);	// к основной валюте
		
		РасписатьПоСотрудникам(СуммаРазница)
		
	Иначе
		СуммаРазница = ОбщийМодульСервер.ПоКурсу(Объект.Товары.Итог("СуммаРазница"), Объект.Валюта, , Объект.Дата);
		
		Если СуммаРазница > 0 Тогда
			Объект.ВыбылоДенег 		= СуммаРазница;
			Объект.ПоступилоДенег 	= 0;
			Если НЕ ЗначениеЗаполнено(Объект.СтатьяВыбытия) Тогда
				Объект.СтатьяВыбытия = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ПрочееВыбытиеДенег");
			КонецЕсли;
			
		Иначе
			Объект.ПоступилоДенег 	= -СуммаРазница;
			Объект.ВыбылоДенег 		= 0;
			Если НЕ ЗначениеЗаполнено(Объект.СтатьяПоступления) Тогда
				Объект.СтатьяПоступления = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ПрочееПоступлениеДенег");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзНеучтенныхВозвратов(Команда)
	
	МассивВозвратов			= Новый Массив;
	ФормаВыбораДокумента 	= ПолучитьФорму("Документ.РасходыТовара.ФормаВыбора");
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
	
	ФормаВыбораДокумента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Документ для добавления его количеств в Инвентаризацию") + ": ";
	ОбщийМодульКлиент.УстановитьЭлементОтбора(ФормаВыбораДокумента.Список.Отбор,	
	"Склад", Объект.Склад);
	
	ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();
	
	Пока ЗначениеЗаполнено(ДругойДокумент) Цикл		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ добавлен") +": " + ДругойДокумент);		
		МассивВозвратов.Добавить(ДругойДокумент);
		ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();	
	КонецЦикла;
	
	ДобавитьИзНеучтенныхВозвратовНаСервере(МассивВозвратов)
	
КонецПроцедуры
Процедура ДобавитьИзНеучтенныхВозвратовНаСервере(МассивВозвратов)
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыТовараТовары.Номенклатура,
	|	РасходыТовараТовары.СерияНоменклатуры,
	|	СУММА(РасходыТовараТовары.Количество) КАК Количество,
	|	РасходыТовараТовары.Номенклатура.Цена КАК Цена
	|ИЗ
	|	Документ.РасходыТовара.Товары КАК РасходыТовараТовары
	|ГДЕ
	|	РасходыТовараТовары.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыТовараТовары.Номенклатура,
	|	РасходыТовараТовары.СерияНоменклатуры,
	|	РасходыТовараТовары.Номенклатура.Цена";
	
	Запрос.УстановитьПараметр("Ссылка", МассивВозвратов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура");
	
	Если УчетПоСериям Тогда
		СтруктураОтбора.Вставить("СерияНоменклатуры");
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаДетальныеЗаписи);
		
		СтрокиДокумента = Объект.Товары.НайтиСтроки(СтруктураОтбора);			
		Если СтрокиДокумента.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
			
			Если ИспользоватьСложныйМеханизмЦен Тогда
				НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.Номенклатура, Объект.ВидЦен, Объект.Дата);
			КонецЕсли;
			
		Иначе
			НоваяСтрока = СтрокиДокумента[0];
			
		КонецЕсли;
		
		НоваяСтрока .КоличествоНеучтенныйВозврат = ВыборкаДетальныеЗаписи.Количество;				
		ПересчитатьСтрокуНаСервере(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокумента(Команда)
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить("Корректировки И Регистрация Остатков");
	СписокТиповДокументов.Добавить("Инвентаризации");
	СписокТиповДокументов.Добавить("Расходы Товара");
	СписокТиповДокументов.Добавить("Поступления Товара");
	СписокТиповДокументов.Добавить("Перемещения Товара");
	СписокТиповДокументов.Добавить("Установки Цен");
	СписокТиповДокументов.Добавить("Планы продаж");
	
	ТипДокументаДляДобавления = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДобавитьНоменклатуруДругогоДокументаЗавершение", ЭтаФорма), СписокТиповДокументов, , СписокТиповДокументов[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТипДокументаДляДобавления = ВыбранныйЭлемент;
	
	Если НЕ ТипДокументаДляДобавления = Неопределено Тогда
		ТипДокументаДляДобавления = СтрЗаменить(ТипДокументаДляДобавления, " ", "");
		
		ФормаВыбораДокумента = ПолучитьФорму("Документ." + ТипДокументаДляДобавления + ".ФормаВыбора");
		
		Если ТипДокументаДляДобавления = "ПоступленияТовара" ИЛИ
			ТипДокументаДляДобавления = "РасходыТовара" Тогда
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(ФормаВыбораДокумента.Список.Отбор, "Склад", Объект.Склад);
		КонецЕсли;
		
		ФормаВыбораДокумента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Документ для добавления его номенклатуры в инвентаризацию") + ": ";
		ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();
		
		Если ЗначениеЗаполнено(ДругойДокумент) Тогда
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
			ДобавитьНоменклатуруДругогоДокументаНаСервере();      	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруДругогоДокументаНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ДругойДокумент) Тогда
		Возврат;	
	КонецЕсли;
	
	ПромТовары= ДругойДокумент.Товары.Выгрузить();
	Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавлено из") + " " + Строка(ДругойДокумент);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура");			
	
	Если УчетПоСериям Тогда
		СтруктураОтбора.Вставить("СерияНоменклатуры");
	КонецЕсли;
	
	ОбновлятьОстатки = Ложь;
	
	Для каждого СтрокаТовара Из ПромТовары Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТовара);		
		СтрокиДокумента = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		
		Если НЕ СтрокиДокумента.Количество() = 0 Тогда // товар уже есть, ничего делать не нужно
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока				= Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		НоваяСтрока.Комментарий	= Комментарий;
		ОбновлятьОстатки		= ИСТИНА;
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.Номенклатура, Объект.ВидЦен, Объект.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновлятьОстатки Тогда
		ОбновитьУчетныеДанныеВсехСтрокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруСОтрицательнымиОстатками(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
	ДобавитьНоменклатуруСОтрицательнымиОстаткамиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруСОтрицательнымиОстаткамиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.Номенклатура.Цена КАК Цена,
	|	ТоварыОстатки.СерияНоменклатуры
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			&НетОтбораПоСкладу
	|				ИЛИ Склад = &Склад) КАК ТоварыОстатки
	|ГДЕ ТоварыОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("НетОтбораПоСкладу", не ВестиУчетПоСкладам ИЛИ Не ЗначениеЗаполнено(Объект.Склад));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ДатаОстатка", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			Если УчетПоСериям Тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
			КонецЕсли;
			
			СтрокиДокумента = Объект.Товары.НайтиСтроки(СтруктураОтбора);			
			Если СтрокиДокумента.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				
				Если УчетПоСериям Тогда
					НоваяСтрока.СерияНоменклатуры = ВыборкаДетальныеЗаписи.СерияНоменклатуры;
				КонецЕсли;
				
				Если ИспользоватьСложныйМеханизмЦен Тогда
					НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.Номенклатура, Объект.ВидЦен, Объект.Дата);
				Иначе
					НоваяСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
				КонецЕсли;
				
				НоваяСтрока.КоличествоУчет = ВыборкаДетальныеЗаписи.КоличествоОстаток;
				ПересчитатьСтрокуНаСервере(НоваяСтрока);
				
			Иначе
				ТакаяСтрока = СтрокиДокумента[0];
				ТакаяСтрока .КоличествоУчет = ВыборкаДетальныеЗаписи.КоличествоОстаток;				
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПо(Знач Режим = 0)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.СерияНоменклатуры,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток,
	|	ТоварыОстатки.Номенклатура.Цена КАК Цена
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&Дата,
	|			НЕ &ОтборПоСкладу
	|				ИЛИ Склад = &Склад) КАК ТоварыОстатки
	|ГДЕ ТоварыОстатки.КоличествоОстаток <> 0";
	
	Если режим = 0 Тогда
		Запрос.Текст = Запрос.Текст +" И ТоварыОстатки.Номенклатура.Родитель = &Родитель ";		
		Запрос.УстановитьПараметр("Родитель", ГруппаНоменклатуры);	
		
	ИначеЕсли режим = 1 Тогда
		Запрос.Текст = Запрос.Текст +" И ТоварыОстатки.Номенклатура.Производитель = &Производитель ";		
		Запрос.УстановитьПараметр("производитель", производитель);	
		
	ИначеЕсли режим = 2 Тогда
		Запрос.Текст = Запрос.Текст +" И ТоварыОстатки.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа ";		
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ОтборПоСкладу", ВестиУчетПоСкладам и ЗначениеЗаполнено(Объект.Склад));
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			Если УчетПоСериям Тогда
				СтруктураОтбора.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
			КонецЕсли;
			
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
				НоваяСтрока.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;				
				КоличествоОстаток 				= ВыборкаДетальныеЗаписи.КоличествоОстаток;
				
				Если НЕ КоличествоОстаток = 0 Тогда
					НоваяСтрока.КоличествоУчет 	= КоличествоОстаток;
					НоваяСтрока.Цена 			= ВыборкаДетальныеЗаписи.СуммаОстаток / КоличествоОстаток;
				КонецЕсли;
				
				Если НоваяСтрока.Цена = 0 Тогда
					Если ИспользоватьСложныйМеханизмЦен Тогда
						НоваяСтрока.Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(НоваяСтрока.Номенклатура, Объект.ВидЦен, Объект.Дата);
					Иначе
						НоваяСтрока.Цена = ВыборкаДетальныеЗаписи.Цена;
					КонецЕсли;                     	
				КонецЕсли;
				
				НоваяСтрока.СуммаУчет = ВыборкаДетальныеЗаписи.СуммаОстаток;
				ПересчитатьСтрокуНаСервере(НоваяСтрока);		
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПо

&НаКлиенте
Процедура ДобавитьПоГруппеНоменклатуры(Команда)
	
	ФормаВыбораГруппыНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбораГруппы");
	ФормаВыбораГруппыНоменклатуры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите группу номенклатуры для добавления в инвентаризацию") + ": ";
	
	ГруппаНоменклатуры = ФормаВыбораГруппыНоменклатуры.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
		ДобавитьПоГруппеНоменклатурыНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоГруппеНоменклатурыНаСервере()	
	ДобавитьПо(0);	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураСтруктура)
	
	СерияНоменклатуры = Неопределено;
	ЕдиницаИзмерения  = Неопределено;
	
	Если ТипЗнч(НоменклатураСтруктура) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура 	= НоменклатураСтруктура;
		Количество 		= 1;	
		
	Иначе
		Номенклатура	= НоменклатураСтруктура.Номенклатура;
		Количество 		= НоменклатураСтруктура.Количество;
		НоменклатураСтруктура.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		НоменклатураСтруктура.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Количество 	= ЕдиницаИзмерения.Количество * НоменклатураСтруктура.Количество;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если УчетПоСериям Тогда		
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	КонецЕсли;
	
	СтрокаТовара = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НЕ ДокументЗаблокирован Тогда
		
		Если ОбщийМодульПовтор.ЭтоНабор(Номенклатура) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности инвентаризировать набор товара."), Объект);
		Иначе		
			Если СтрокаТовара.Количество() = 0 Тогда
				
				Если УчетПоСериям
					И ЗначениеЗаполнено(СерияНоменклатуры)
					И НЕ СерииНоменклатурыВидны Тогда
					
					СерииНоменклатурыВидны = ИСТИНА;		
					Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
				КонецЕсли;
				
				СтрокаТовара 		= Объект.Товары.Добавить();	
				СтрокаТовара.Номенклатура = Номенклатура;
				СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, , , , , Объект.Ссылка);
				
			Иначе
				СтрокаТовара 		= СтрокаТовара[0];
			КонецЕсли;
			
			Если УчетПоСериям
				И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				
				СтрокаТовара.СерияНоменклатуры = СерияНоменклатуры;
				СтрокаТовара.КоличествоПоФакту = 1;
			Иначе
				СтрокаТовара.КоличествоПоФакту = СтрокаТовара.КоличествоПоФакту + Количество;
			КонецЕсли;						
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
				
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.КоличествоПоФакту, Объект.ВидЦен, , , Объект.Склад, Объект.Дата); // акция
				Если НЕ ПроцентСкидки = 0 
					И НЕ СтрокаТовара.Цена = 0 Тогда
					
					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
				КонецЕсли;
			КонецЕсли;
			
			ПересчитатьСтрокуНаСервере(СтрокаТовара);	
			
			Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
			Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличествоПоФакту;   	
		КонецЕсли;
		
	ИначеЕсли НЕ СтрокаТовара.Количество() = 0 Тогда // Встать на строку		
		СтрокаТовара = СтрокаТовара[0];
		Элементы.Товары.ТекущаяСтрока 	= СтрокаТовара.ПолучитьИдентификатор();
		Элементы.Товары.ТекущийЭлемент 	= Элементы.ТоварыКоличествоПоФакту;
		
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоНоменклатурнойГруппе(Команда)
	
	ФормаНоменклатурнойГруппы = ПолучитьФорму("Справочник.НоменклатурныеГруппы.ФормаВыбора");
	ФормаНоменклатурнойГруппы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите номенклатурную группу для добавления ее номенклатуры в инвентаризацию") + ": ";
	
	НоменклатурнаяГруппа = ФормаНоменклатурнойГруппы.ОткрытьМодально();
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
		ДобавитьПоНоменклатурнойГруппеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоНоменклатурнойГруппеНаСервере()	
	ДобавитьПо(2);	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПроизводителю(Команда)
	
	ФормаВыбораПроизводителя = ПолучитьФорму("Справочник.Производители.ФормаВыбора");
	ФормаВыбораПроизводителя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите производителя для добавления его номенклатуры в инвентаризацию") + ": ";
	
	Производитель = ФормаВыбораПроизводителя.ОткрытьМодально();
	Если ЗначениеЗаполнено(Производитель) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));
		ДобавитьПоПроизводителюНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоПроизводителюНаСервере() 	
	ДобавитьПо(1);	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("ДокументОбъект.Инвентаризации"));
	ЭтотОбъект1.Записать();
	ЗначениеВДанныеФормы(ЭтотОбъект1, Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоФактуДаннымиИзУчетаДляВсехСтрокГдеФактНеУказан(Команда)
	ЗаполнитьКоличествоПоФактуДаннымиИзУчетаДляВсехСтрокГдеФактНеУказанНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоПоФактуДаннымиИзУчетаДляВсехСтрокГдеФактНеУказанНаСервере()
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.КоличествоПоФакту = 0 Тогда
			
			СтрокаТовара.КоличествоПоФакту 	= СтрокаТовара.КоличествоУчет;
			СтрокаТовара.СуммаУчет 			= СтрокаТовара.КоличествоУчет * СтрокаТовара.Цена;
			СтрокаТовара.СуммаПоФакту 		= СтрокаТовара.КоличествоПоФакту * СтрокаТовара.Цена;
			
			СтрокаТовара.СуммаНеучтенныйВозврат	= СтрокаТовара.КоличествоНеучтенныйВозврат * СтрокаТовара.Цена;
			СтрокаТовара.КоличествоРазница 		= СтрокаТовара.КоличествоПоФакту - СтрокаТовара.КоличествоУчет + 
			СтрокаТовара.КоличествоНеучтенныйВозврат;
			СтрокаТовара.СуммаРазница 			= СтрокаТовара.КоличествоРазница * СтрокаТовара.Цена;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетнымиДанными(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));	
	ЗаполнитьУчетнымиДаннымиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетнымиДаннымиНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОстатки.СуммаОстаток,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.СерияНоменклатуры
	|ИЗ
	|	РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			&НетОтбораПоСкладу
	|				ИЛИ Склад = &Склад) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("НетОтбораПоСкладу", не ВестиУчетПоСкладам ИЛИ Не ЗначениеЗаполнено(Объект.Склад));
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ДатаОстатка", Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура 		= ВыборкаДетальныеЗаписи.Номенклатура;
			СтрокаТовары.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
			СтрокаТовары.КоличествоУчет 	= ВыборкаДетальныеЗаписи.КоличествоОстаток;			
			СтрокаТовары.цена 				= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовары.Номенклатура, Объект.ВидЦен, Объект.Дата, , , , , , Объект.Ссылка);
			ПересчитатьСтрокуНаСервере(СтрокаТовары);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализации(Команда)
	
	Если ПроверитьНаличиеОприходования() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииЗавершение1", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создать расходный документ и заполнить его разницей данных инвентаризации?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииНаСервере();
		ПоказатьЗначение(Новый ОписаниеОповещения("ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииЗавершение", ЭтаФорма), Объект.СвязанныйДокументРеализации);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализацииНаСервере()
	
	Объект.НеПроизводитьОприходованиеИСписаниеЭтимДокументом = ИСТИНА;
	
	Если ЗначениеЗаполнено(Объект.СвязанныйДокументРеализации) Тогда
		объектСвязанныйДокументРеализации = Объект.СвязанныйДокументРеализации.ПолучитьОбъект();
		объектСвязанныйДокументРеализации.ПометкаУдаления = ЛОЖЬ;
		объектСвязанныйДокументРеализации.Товары.Очистить();
	Иначе
		объектСвязанныйДокументРеализации = Документы.РасходыТовара.СоздатьДокумент();
	КонецЕсли;
	
	объектСвязанныйДокументРеализации.Дата = Объект.Дата + 1;
	объектСвязанныйДокументРеализации.Валюта = Объект.Валюта;
	объектСвязанныйДокументРеализации.ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация за счет данных инвентаризации");
	объектСвязанныйДокументРеализации.ВидЦен = Объект.ВидЦен;
	// объектСвязанныйДокументРеализации.Договор
	объектСвязанныйДокументРеализации.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
	объектСвязанныйДокументРеализации.Комментарий = Объект.Комментарий;
	объектСвязанныйДокументРеализации.Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, Объект.Дата);
	объектСвязанныйДокументРеализации.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	объектСвязанныйДокументРеализации.ПоступилоДенег = Объект.ПоступилоДенег;
	объектСвязанныйДокументРеализации.Склад = Объект.Склад;
	объектСвязанныйДокументРеализации.ХранилищеДенег = Объект.ХранилищеДенег;
	объектСвязанныйДокументРеализации.Сотрудник = Объект.Сотрудник;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.КоличествоРазница < 0 Тогда
			Количество = -СтрокаТовара.КоличествоРазница;
			СтрокаРеализации = объектСвязанныйДокументРеализации.Товары.Добавить();
			СтрокаРеализации.Номенклатура      = СтрокаТовара.Номенклатура;
			СтрокаРеализации.СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			СтрокаРеализации.Количество		   = Количество;
			СтрокаРеализации.Цена              = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Объект.ВидЦен, Объект.Дата, ЛОЖЬ, Количество, , , , Объект.Ссылка);
			СтрокаРеализации.Сумма			   = СтрокаРеализации.Цена * Количество;
			СтрокаРеализации.ОСтроке = СтрокаТовара.Комментарий;
			
		КонецЕсли;	
	КонецЦикла;
	
	Попытка 
		объектСвязанныйДокументРеализации.Записать(РежимЗаписиДокумента.Проведение);
		Объект.СвязанныйДокументРеализации = объектСвязанныйДокументРеализации.Ссылка;
		
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении документа реализации") + ": " + ТекстОписаниеОшибки);
		
	КонецПопытки;
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПроизводитьОприходованиеИСписаниеЭтимДокументомПриИзменении(Элемент)
	СменитьВидДокумента();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимость()
	
	РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада", ИСТИНА);
	Элементы.ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализации.Видимость   = НЕ Объект.Проведен И РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада;
	Элементы.ТоварыГруппаВВозврате.Видимость 				= РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада;
	Элементы.ТоварыИтогКоличествоНеучтенныйВозврат.Видимость= РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада;
	Элементы.ТоварыИтогСуммаНеучтенныйВозврат.Видимость		= РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада;
	Элементы.ТоварыДобавитьИзНеучтенныхВозвратов.Видимость  = РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСклада;
	ЗначениеЗаполненоОбъектСвязанныйДокументРеализации 		= ЗначениеЗаполнено(Объект.СвязанныйДокументРеализации);
	Элементы.СвязанныйДокументРеализации.Видимость 	   		= ЗначениеЗаполненоОбъектСвязанныйДокументРеализации;
	Элементы.НеПроизводитьОприходованиеИСписаниеЭтимДокументом.Видимость = НЕ ЗначениеЗаполненоОбъектСвязанныйДокументРеализации;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(, , ,, Объект.Склад, Объект.Сотрудник);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУчетныеДанныеВсехСтрок(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товара.."));	
	ОбновитьУчетныеДанныеВсехСтрокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУчетныеДанныеВсехСтрокНаСервере()
	
	Для каждого СтрокаДокумента Из Объект.Товары Цикл
		СтрокаДокумента.КоличествоУчет = 0;
		ПересчитатьСтрокуНаСервере(СтрокаДокумента);		
	КонецЦикла;
	
	ТаблицаОстатков = ОбщийМодульСервер.СформироватьТаблицуОстатков(Объект.Ссылка, Объект.Склад, Объект.Дата);
	Для Каждого СтрокаТовара Из ТаблицаОстатков Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);			
		Если УчетПоСериям Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", СтрокаТовара.СерияНоменклатуры);
		КонецЕсли;
		
		СтрокиДокумента = Объект.Товары.НайтиСтроки(СтруктураОтбора);			
		Если НЕ СтрокиДокумента.Количество() = 0 Тогда
			СтрокаДокумента = СтрокиДокумента[0];
			
			СтрокаДокумента.КоличествоУчет = СтрокаТовара.КоличествоОстаток;
			ПересчитатьСтрокуНаСервере(СтрокаДокумента);		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ОбщийМодульСервер.ОбработатьБлокировку(Объект, ЭтаФорма, ПриСозданииФормы, "000312") Тогда			
		Элементы.ТоварыВводШтрихКода.Видимость	 	= ЛОЖЬ;
		Элементы.ДеньгиПоРезультату.Доступность 	= ЛОЖЬ;
		Элементы.ОбработкаТаблицы.Доступность 		= ЛОЖЬ;
		Элементы.ТоварыВводСКоличеством.Видимость	= ЛОЖЬ;
		Элементы.Декорация2.Видимость 				= ИСТИНА;
		Элементы.ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализации.Доступность = ЛОЖЬ;
		Элементы.ОбработкаТаблицы.Видимость			= ЛОЖЬ;
		Элементы.ОтразитьВЗаработнойПлате.Видимость = ЛОЖЬ;
		Элементы.КачествоОтраженияРезультата.Видимость = ИСТИНА;
		Если Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.ПриходПоРеализацииИНедостачуПоКассе Тогда
			Элементы.КачествоОтраженияРезультата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция отражается: приход по реализации и недостача на заработной плате..");	
		ИначеЕсли Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.НедостачаВЗаработнойПлате Тогда	
			Элементы.КачествоОтраженияРезультата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция отражается на заработной плате..");
		Иначе
			Элементы.КачествоОтраженияРезультата.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция отражается движением денег..");
		КонецЕсли;		
		
	Иначе
		Элементы.ТоварыВводШтрихКода.Видимость	 	= ИСТИНА;
		Элементы.ДеньгиПоРезультату.Доступность 	= ИСТИНА;
		Элементы.ОбработкаТаблицы.Доступность 		= ИСТИНА;
		Элементы.ТоварыВводСКоличеством.Видимость	= ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.Декорация2.Видимость 				= ЛОЖЬ;
		Элементы.ЗафиксироватьРезультатыИнвентаризацииВКачествеРеализации.Доступность = ИСТИНА;
		Элементы.ОбработкаТаблицы.Видимость			= ИСТИНА;
		Элементы.ОтразитьВЗаработнойПлате.Видимость = ИСТИНА;
		Элементы.КачествоОтраженияРезультата.Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)
	
	Если НЕ ОбработатьПолученныйШтрихкодНаСервере(ТекКод) Тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод) и не ДокументЗаблокирован;
		Элементы.РазблокироватьСканер.Видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьСтроку();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = ИСТИНА;
	
	РезультатОбработки 	= ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, Объект.Дата);
	Номенклатура 		= РезультатОбработки.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
		СтрокаДисплеяПокупателя = РезультатОбработки;		
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			
			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбщийМодульСерверПолучитьПроцентСкидкиНаСервере(Знач Номенклатура, Знач Количество)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		Возврат ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, Объект.ВидЦен, , , Объект.Склад, Объект.Дата);
	Иначе
		возврат 0;	
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтразитьВЗаработнойПлатеПриИзменении(Элемент)
	ОтразитьВЗаработнойПлатеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтразитьВЗаработнойПлатеПриИзмененииНаСервере()
	
	Если УчетЗарплаты
		И Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.ПриходПоРеализацииИНедостачуПоКассе Тогда
		
		Элементы.ОприходованиеИлиРасходДенег.Видимость 		= ИСТИНА;
		Элементы.ИлиУчестьВЗарплатеСотрудников.Видимость 	= ИСТИНА;
		
	ИначеЕсли УчетЗарплаты
		И Объект.ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.НедостачаВЗаработнойПлате Тогда
		
		Элементы.ОприходованиеИлиРасходДенег.Видимость 		= ЛОЖЬ;
		Элементы.ИлиУчестьВЗарплатеСотрудников.Видимость 	= ИСТИНА;
		
	Иначе
		Элементы.ОприходованиеИлиРасходДенег.Видимость 		= ИСТИНА;
		Элементы.ИлиУчестьВЗарплатеСотрудников.Видимость 	= ЛОЖЬ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТаблицуЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу документа?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуНаСервере();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	
	Объект.Товары.Очистить();
	Объект.ТовараВКоличестве = 0;
	Объект.ТовараНаСумму 	 = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьСторнированиеДокументов
		И Объект.Дата < ОбщийМодульКлиент.ПользователяТекущаяДата() Тогда
		
		Объект.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если УчетПоСериям Тогда
		Отказ = ПроверитьУчетПоСериям(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись документа.."));	
	КонецЕсли;
	
	ПодготовкаКПроведению(Отказ);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПерезаполнитьУчетныеДанные(СтрокаТовара)
	
	Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		
		СтруктураОстатков 			= ПолучитьСтруктуруОстатков(СтрокаТовара.Номенклатура, Объект.Склад, Объект.Дата, СтрокаТовара.СерияНоменклатуры);
		СтрокаТовара.КоличествоУчет = СтруктураОстатков.КоличествоОстаток;
		СтрокаТовара.СуммаУчет 		= СтруктураОстатков.СуммаОстаток;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.ТовараНаСумму 		= Объект.Товары.Итог("СуммаРазница");
	Объект.ТовараВКоличестве 	= Объект.Товары.Итог("КоличествоРазница");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку(Знач ИзКоличества = ЛОЖЬ)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		Если ИзКоличества
			И УчетПоСериям
			И СтрокаТовара.КоличествоПоФакту > 0
			И ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
			
			СтрокаТовара.КоличествоПоФакту = 1;
		КонецЕсли;
		
		СтрокаТовара.СуммаУчет 			= СтрокаТовара.КоличествоУчет * СтрокаТовара.Цена;
		СтрокаТовара.СуммаПоФакту 		= СтрокаТовара.КоличествоПоФакту * СтрокаТовара.Цена;
		СтрокаТовара.СуммаНеучтенныйВозврат	= СтрокаТовара.КоличествоНеучтенныйВозврат * СтрокаТовара.Цена;
		СтрокаТовара.КоличествоРазница 		= СтрокаТовара.КоличествоПоФакту - СтрокаТовара.КоличествоУчет + 
		СтрокаТовара.КоличествоНеучтенныйВозврат;
		СтрокаТовара.СуммаРазница 			= СтрокаТовара.КоличествоРазница * СтрокаТовара.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуНаСервере(СтрокаТовара)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количествоПоФакту, Объект.ВидЦен, , , Объект.Склад, Объект.Дата); 
		Если НЕ ПроцентСкидки = 0 
			И НЕ СтрокаТовара.Цена = 0 Тогда
			
			СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена/100 * ПроцентСкидки);	
		КонецЕсли;                                     	
	КонецЕсли;
	
	Если УчетПоСериям
		И СтрокаТовара.КоличествоПоФакту > 0
		И ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
		
		СтрокаТовара.КоличествоПоФакту = 1;
	КонецЕсли;
	
	СтрокаТовара.СуммаУчет 			= СтрокаТовара.КоличествоУчет * СтрокаТовара.Цена;
	СтрокаТовара.СуммаПоФакту 		= СтрокаТовара.КоличествоПоФакту * СтрокаТовара.Цена;
	СтрокаТовара.СуммаНеучтенныйВозврат	= СтрокаТовара.КоличествоНеучтенныйВозврат * СтрокаТовара.Цена;
	СтрокаТовара.КоличествоРазница 		= СтрокаТовара.КоличествоПоФакту - СтрокаТовара.КоличествоУчет + 
	СтрокаТовара.КоличествоНеучтенныйВозврат;
	СтрокаТовара.СуммаРазница 			= СтрокаТовара.КоличествоРазница * СтрокаТовара.Цена;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ)
	
	Если НЕ Отказ Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		ДокументОбъект.ПодготовкаКПроведению(Отказ);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
	КонецЕсли;
	
КонецПроцедуры
функция   ПолучитьСтруктуруОстатков(Знач Номенклатура, Знач Склад, Знач Дата, Знач СерияНоменклатуры)
	
	СтруктураОстатков = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			Номенклатура = &Номенклатура
	|				И Склад = &склад
	|				И СерияНоменклатуры = &СерияНоменклатуры) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатка", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса  = Запрос.Выполнить();	
	КоличествоОстаток = 0;
	СуммаОстаток 	  = 0;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоОстаток 	= КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СуммаОстаток 		= СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОстатков.Вставить("КоличествоОстаток", КоличествоОстаток);
	СтруктураОстатков.Вставить("СуммаОстаток", СуммаОстаток);
	
	Возврат СтруктураОстатков;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбработатьБлокировку();                                                	
	КонецЕсли;
	ОбновитьВидимость();
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;  	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры() 
	
	СтрокаТовара 		= Элементы.Товары.ТекущиеДанные;
	
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Объект.ВидЦен, Объект.Дата, ИСТИНА, , , , , Объект.Ссылка);// , СтрокаТовара.количествоПоФакту);
		ПроцентСкидки 		= ОбщийМодульСерверПолучитьПроцентСкидкиНаСервере(Номенклатура, СтрокаТовара.КоличествоПоФакту); // акция номенклатуры
		
		Если УчетПоСериям 
			И НЕ СерииНоменклатурыВидны Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				
				СерииНоменклатурыВидны = ИСТИНА;		
				Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;             	
			
		КонецЕсли;
		
		Если НЕ ПроцентСкидки = 0 
			И НЕ СтрокаТовара.Цена = 0 Тогда
			
			СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
		КонецЕсли;		
	КонецЕсли;
	
	ПерезаполнитьУчетныеДанные(СтрокаТовара);
	ПересчитатьСтроку();
	
КонецПроцедуры // ПриИзмененииНоменклатуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьБлокировку(ИСТИНА);		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000310", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();	
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		УчетЗарплаты 						 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		ВестиУчетПоСкладам 					 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетДвиженияДенег 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		ВестиУчетПоНаправлениямДеятельности  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		
		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");
		
		ИспользоватьСторнированиеДокументов  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		
		ПоказыватьКомандуДобавленияНоменклатурыСКоличеством = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством");
		Элементы.ТоварыВводСКоличеством.Видимость 		  = ПоказыватьКомандуДобавленияНоменклатурыСКоличеством;
		Элементы.ГруппаДополнительнаяИнформация.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиДополнительнуюИнформациюДляИнвентаризации");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВсеРеквизитыШапкиДокументовВПервуюЗакладкуРежимБольшихТаблицДляМалыхМониторов") Тогда
			Элементы.Переместить(Элементы.ГруппаШапки, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаВидаЦен, Элементы.СтраницаШапки);
			Элементы.Переместить(Элементы.ГруппаСтандартныхРеквизитов, Элементы.СтраницаШапки);			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = параметры.Склад;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Объект.Сторный = ЛОЖЬ; // При копировании
			Объект.ДокументСторно = Неопределено;				
			
			Объект.ОтразитьВЗаработнойПлате = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СпособОтраженияРезультатовИнвентаризацииВЗаработнойПлатеПоУмолчанию");
			
			Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
				Объект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если УчетЗарплаты
				И НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен)
				И ЗначениеЗаполнено(Объект.Склад)
				И ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда
				
				Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;
			Иначе
				Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				Объект.Сотрудник = ОбщийМодульПовтор.ПолучитьТекущегоСотрудника();
			КонецЕсли;
			
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			
			ВидЦенПриИзмененииНаСервере();
			Если ВестиУчетПоНаправлениямДеятельности
				И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
				
				ОбновитьЗначениеНаправленияДеятельности();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ВестиУчетДвиженияДенег Тогда
			Элементы.ДвиженияДенегПоРезультату.Заголовок   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий");
			Элементы.ОприходованиеИлиРасходДенег.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		Если НЕ Объект.Проведен Тогда		
			ОтразитьВЗаработнойПлатеПриИзмененииНаСервере();	
			ВидЦенПриИзмененииНаСервере();	    	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Элементы.ВидЦен.Доступность = ЛОЖЬ;	
			КонецЕсли;
			
			Элементы.ТоварыЦена.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ПереченьНоменклатуры   = Объект.Товары.Выгрузить(, "Номенклатура");
		СерииНоменклатурыВидны = ОбщийМодульТоварСервер.ПроверитьНаличиеСерийНоменклатуры(ПереченьНоменклатуры, ИСТИНА);
		Элементы.ТоварыСерияНоменклатуры.Видимость = СерииНоменклатурыВидны;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличествоПоФакту, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличествоРазница, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличествоПоФакту, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличествоРазница, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличествоУчет, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличествоНеучтенныйВозврат, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличествоНеучтенныйВозврат, , ИСТИНА);
		
		ОбновитьВидимость();	
		
		НетПраваНаЗарплату = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001450", ЭтаФорма, Отказ, Объект);
		Если НетПраваНаЗарплату Тогда
			Элементы.ОтражениеВЗарплате.Видимость 		= ЛОЖЬ;
			Элементы.ОтразитьВЗаработнойПлате.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		Если ВестиУчетДвиженияДенег ТОгда
			СтруктураОтказа = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000890", , , , ИСТИНА);
			Если СтруктураОтказа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				Элементы.ОприходованиеИлиРасходДенег.ТолькоПросмотр = ИСТИНА;
				Элементы.ДеньгиПоРезультату.Видимость = ЛОЖЬ;
				
			ИначеЕсли СтруктураОтказа.Отказ Тогда
				Элементы.ОприходованиеИлиРасходДенег.Видимость = ЛОЖЬ;
				Элементы.ДеньгиПоРезультату.Видимость = ЛОЖЬ;
				
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьСторно();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаличиеОприходования()
	
	ПриходоватьИзлишкиИнвентаризацииВсегда	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриходоватьИзлишкиИнвентаризацииВсегда", ИСТИНА);
	Если ПриходоватьИзлишкиИнвентаризацииВсегда Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	ЕстьОприходование = ЛОЖЬ;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.КоличествоРазница > 0 Тогда
			ЕстьОприходование = ИСТИНА;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Если ЕстьОприходование Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В документе есть строки с оприходованием. Их нельзя отразить в реализации!"), Объект, "Товары");
	КонецЕсли;
	
	Возврат НЕ ЕстьОприходование;
	
КонецФункции // ПроверитьНаличиеОприходования

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	// ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	// ДокументОбъект.ПодготовкаКПроведению(Отказ);
	// ЗначениеВРеквизитФормы(ДокументОбъект.Ссылка.ПолучитьОбъект(), "Объект");
	
	Ссылка = Объект.Ссылка;
	Валюта = Объект.Валюта;
	Дата   = Объект.Дата;
	ВидЦен = Объект.ВидЦен;
	ХранилищеДенег = Объект.ХранилищеДенег;
	ВыбылоДенег    = Объект.ВыбылоДенег;
	ПоступилоДенег = Объект.ПоступилоДенег;	
	ОтразитьВЗаработнойПлате = Объект.ОтразитьВЗаработнойПлате;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ВидЦен.ВалютаЦены, Дата);
	Иначе
		Курс = 1;
	КонецЕсли;
	
	Если ОтразитьВЗаработнойПлате = Перечисления.СпособыОтраженияВЗаработнойПлате.ПриходРасходДенег
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		
		ВалютаДок = ?(ЗначениеЗаполнено(Валюта), Валюта, ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
		
		Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
			ФормаОплаты = ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
			ФормаОплаты = перечисления.ФормыОплаты.Наличные;
		КонецЕсли;
		
		СуммаДенег = ВыбылоДенег - ПоступилоДенег;
		Если НЕ СуммаДенег = 0 Тогда
			Отказ = ОбщийМодульСервер.ПроверитьОстатокДенежныхСредств(СуммаДенег, Дата, ФормаОплаты, ВалютаДок, Объект.ХранилищеДенег, , Объект.Ссылка);
		КонецЕсли;  	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьНаОтказ

&НаСервере
Функция   ПроверитьУчетПоСериям(Отказ)
	
	Если НЕ Отказ Тогда
		
		МассивСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			
			СерияНоменклатуры = СтрокаТовара.СерияНоменклатуры;
			Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
				Если МассивСерий.Найти(СерияНоменклатуры) = Неопределено Тогда
					МассивСерий.Добавить(СерияНоменклатуры);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("серия повторяется!"));
					Отказ = ИСТИНА;
				КонецЕсли;
				
			ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериямИСерияОбязательна(СтрокаТовара.Номенклатура) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " № " + СтрокаТовара.НомерСтроки + " " +ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обязательная Серия НЕ указана!"));
				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверитьУчетПоСериям

&НаКлиенте
Процедура РазблокироватьСканер(Команда)
	
	СканерЗаблокирован = ЛОЖЬ;
	Элементы.РазблокироватьСканер.видимость = СканерЗаблокирован;
	
КонецПроцедуры

&НаСервере
Процедура РасписатьПоСотрудникам(Знач СуммаРазница)
	
	Объект.ОтражениеВЗарплате.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СтрокаОтражения = Объект.ОтражениеВЗарплате.Добавить();
		СтрокаОтражения.Сотрудник = Объект.Сотрудник;	
		
	ИначеЕсли ВестиУчетПоСкладам		
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСклады.Ссылка
		|ИЗ Справочник.Сотрудники.Склады КАК СотрудникиСклады
		|ГДЕ СотрудникиСклады.Склад = &Склад";
		
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаОтражения = Объект.ОтражениеВЗарплате.Добавить();
				СтрокаОтражения.Сотрудник = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(Объект.Склад.ОтветственныйСотрудник) Тогда
			
			СтрокаОтражения = Объект.ОтражениеВЗарплате.Добавить();
			СтрокаОтражения.Сотрудник = Объект.Склад.ОтветственныйСотрудник;	
		КонецЕсли;
		
	Иначе
		Сотрудники = Справочники.Сотрудники.Выбрать();
		
		Пока Сотрудники.Следующий() Цикл
			Если НЕ Сотрудники.ПометкаУдаления Тогда
				СтрокаОтражения = Объект.ОтражениеВЗарплате.Добавить();
				СтрокаОтражения.Сотрудник = Сотрудники.Ссылка;	
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	КоличествоСотрудников = Объект.ОтражениеВЗарплате.Количество();
	Если КоличествоСотрудников = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не найдены ответственные сотрудники по складу!"));
	Иначе
		СуммаНаКаждого = СуммаРазница / КоличествоСотрудников;
		Для Каждого СтрокаОтраженияВЗП Из Объект.ОтражениеВЗарплате Цикл
			СтрокаОтраженияВЗП.Сумма = СуммаНаКаждого;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // РасписатьПоСотрудникам()

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;	
	КонецЕсли;
	
	СвязанныеИзображенияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()
	
	Перем ПараметрыФормы;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте                             
Процедура СкладПриИзменении(Элемент)	
	
	СкладПриИзмененииНаСервере();
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнить учетными данными?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьУчетнымиДаннымиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Если ЗначениеЗаполнено(Объект.Склад.ВидЦенРеализацииСЭтогоСклада) Тогда			
			Объект.ВидЦен = Объект.Склад.ВидЦенРеализацииСЭтогоСклада;             
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад.ОтветственныйСотрудник) Тогда			
			Объект.Сотрудник	= Объект.Склад.ОтветственныйСотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Склад.ХранилищеДенег) Тогда			
			Объект.ХранилищеДенег	= Объект.Склад.ХранилищеДенег;
		КонецЕсли;
		
		Если УчетЗарплаты Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиСклады.Ссылка
			|ИЗ Справочник.Сотрудники.Склады КАК СотрудникиСклады
			|ГДЕ СотрудникиСклады.Склад = &Склад";
			
			Запрос.УстановитьПараметр("Склад", Объект.Склад);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Сотрудник", ВыборкаДетальныеЗаписи.Ссылка);
					
					СтрокаСотрудника = Объект.ОтражениеВЗарплате.НайтиСтроки(ПараметрыОтбора);
					Если СтрокаСотрудника.Количество() = 0 Тогда
						СтрокаСотрудника = Объект.ОтражениеВЗарплате.Добавить();
						СтрокаСотрудника.Сотрудник = ВыборкаДетальныеЗаписи.Ссылка;
					Иначе
						СтрокаСотрудника = СтрокаСотрудника[0];
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидДокумента()
	
	Попытка
		Если Объект.НеПроизводитьОприходованиеИСписаниеЭтимДокументом Тогда
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести и закрыть");
		ИначеЕсли Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести и закрыть") Тогда
			Элементы.ФормаПровестиИЗакрыть.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести (списание / оприходование к факту) и закрыть");
		КонецЕсли;
	Исключение // нет прав
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Сторно(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СторноЗавершение2", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить сторнирование (отмену текущим временем) документа?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция необратима!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение(ДополнительныеПараметры) Экспорт
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	Причина = ?(Значение = Неопределено, ДополнительныеПараметры.Причина, Значение);	
	
	Если ЗначениеЗаполнено(Причина) Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("СторноЗавершение", ЭтаФорма),  ОбщийМодульСервер.СоздатьДокументСторно(Объект.Ссылка, Причина));	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторнирование без причин запрещено!"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторноЗавершение2(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Причина = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("СторноЗавершение1", ЭтаФорма, Новый Структура("Причина", Причина)), Причина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите причину сторнирования.."));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПоФактуПриИзменении(Элемент)
	ПересчитатьСтроку(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоРазницаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", Объект.ВидЦен);
	КонецЕсли;	
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Объект.Склад);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ОтборПоДате", Объект.Дата);
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		ПриИзмененииНоменклатуры();
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоПоФакту;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры() 	;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)	
	ПриИзмененииНоменклатуры();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПоФактуПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРазницаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиВКоторыхНетРазницы(Команда)
	УдалитьСтрокиВКоторыхНетРазницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиВКоторыхНетРазницыНаСервере()
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.КоличествоРазница = 0 Тогда
			МассивСтрок.добавить(СтрокаТовара);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТовара Из МассивСтрок Цикл
		Объект.Товары.Удалить(СтрокаТовара);
	КонецЦикла;
	
КонецПроцедуры
