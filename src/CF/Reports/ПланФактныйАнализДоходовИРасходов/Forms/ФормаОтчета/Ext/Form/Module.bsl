// sza150508-0054 по направлению
// sza140603-1503 : 
// sza140530-1609 : 
&НаКлиенте
Процедура ДокументПланДоходовИРасходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументПланДоходовИРасходов) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет формирование отчета.."));
		СформироватьПланФактныйОтчетНаСервере();
		Результат.показатьуровеньгруппировокстрок(0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаданиеПараметровИКомпоновкаОтчета() 
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных") Тогда
		Если ЗначениеЗаполнено(ДокументПланДоходовИРасходов) Тогда
			СформироватьПланФактныйОтчетНаСервере();
			Результат.показатьуровеньгруппировокстрок(0);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДокументПланДоходовИРасходов) Тогда
		СформироватьПланФактныйОтчетНаСервере();
		Результат.показатьуровеньгруппировокстрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если НЕ ЗначениеЗаполнено(ПериодДляОтчета) Тогда
		ПериодДляОтчета.ДатаНачала 		= НачалоМесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
		ПериодДляОтчета.ДатаОкончания 	= КонецДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
		ДатаНачала 		= ПериодДляОтчета.ДатаНачала;
		ДатаОкончания 	= ПериодДляОтчета.ДатаОкончания;		
	КонецЕсли;	
	ЗаданиеПараметровИКомпоновкаОтчета();
	
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002450", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Если НЕ Отказ
			И ЗначениеЗаполнено(параметры.ДокументПланДоходовИРасходов) Тогда
			
			ДокументПланДоходовИРасходов = параметры.ДокументПланДоходовИРасходов;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ПроверитьДоступКНастройкамОтчета(ЭтаФорма, ЭтаФорма.ИмяФормы, Отказ);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДобавитьДату()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормы") Тогда
		МакетДатыВремени = ПолучитьОбщийМакет("МакетДатыВремени");
		ТаблицаТекущейДатыВремени = МакетДатыВремени.ПолучитьОбласть("Ш");
		ТаблицаТекущейДатыВремени.Параметры.ТекущаяДатаИВремя = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТаблицаТекущейДатыВремени);
		Результат.Вывести(ТаблицаТекущейДатыВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыПоЯчейкам(ТабДок)
	
	СтруктураРасчетаСуммыЯчеек = ОбщийМодульКлиент.РасчетСуммыПоЯчейкам(ТабДок, Результат);	
	СуммаЯчеек 		= СтруктураРасчетаСуммыЯчеек.СуммаЯчеек;
	ВыделеноЯчеек 	= СтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек;
	КоличествоЧисел = СтруктураРасчетаСуммыЯчеек.КоличествоЧисел;              
	СреднееЗначение = СтруктураРасчетаСуммыЯчеек.СреднееЗначение;
	
КонецПроцедуры	

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	РасчетСуммыПоЯчейкам(Результат);
	Элементы.ГруппаСуммВыделеныхЯчеек.Видимость = не КоличествоЧисел = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПланФактныйОтчет(Команда)
	
	Если ЗначениеЗаполнено(ДокументПланДоходовИРасходов) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет формирование отчета.."));
		
		СформироватьПланФактныйОтчетНаСервере();
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ План Доходов и Расходов не указан!");
		Сообщение.Поле  = "ДокументПланДоходовИРасходов";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПланФактныйОтчетНаСервере()
	
	НаправлениеДокумента = ДокументПланДоходовИРасходов.НаправлениеДеятельности;
	
	ТаблицаРезультат = ДокументПланДоходовИРасходов.ПланДохода.Выгрузить();	
	ТаблицаРезультат.Колонки.Добавить("ЭтоДоход");
	ТаблицаРезультат.Колонки.Добавить("СуммаФакт");
	ТаблицаРезультат.Колонки.Добавить("СуммаФактОборота");
	ТаблицаРезультат.Колонки.Добавить("СуммаОборота");
	ТаблицаРезультат.Колонки.Добавить("Разница");
	ТаблицаРезультат.Колонки.Добавить("РазницаОборота");
	ТаблицаРезультат.Колонки.Добавить("ДокументПланДоходовИРасходов");
	ТаблицаРезультат.Колонки.Добавить("Направление");
	
	ДатаНачала 	  = НачалоМесяца(ДокументПланДоходовИРасходов.МесяцПланирования);
	ДатаОкончания = КонецМесяца(ДокументПланДоходовИРасходов.МесяцПланирования); 
	
	ВидДвиженияНакопленияПриход = ВидДвиженияНакопления.Приход;
	
	Для Каждого СтрокаПлана Из ТаблицаРезультат Цикл		
		СтрокаПлана.ЭтоДоход = ИСТИНА;
		СтрокаПлана.ДокументПланДоходовИРасходов = ДокументПланДоходовИРасходов.Ссылка;
		СтрокаПлана.Сумма = СтрокаПлана.Сумма * ?(СтрокаПлана.Курс = 0, 1, СтрокаПлана.Курс);
		СтрокаПлана.СуммаОборота = СтрокаПлана.Сумма;
		СтрокаПлана.Разница = 0;
		СтрокаПлана.РазницаОборота = 0;
		СтрокаПлана.СуммаФактОборота = 0;
		СтрокаПлана.СуммаФакт = 0;
		СтрокаПлана.Направление = НаправлениеДокумента;
	КонецЦикла;
	
	Для Каждого СтрокаДокументаПлана Из ДокументПланДоходовИРасходов.ПланРасхода Цикл		
		СтрокаПлана = ТаблицаРезультат.Добавить();
		СтрокаПлана.ЭтоДоход = ЛОЖЬ;
		СтрокаПлана.ДокументПланДоходовИРасходов = ДокументПланДоходовИРасходов.Ссылка;
		СтрокаПлана.СуммаОборота = СтрокаДокументаПлана.Сумма * ?(СтрокаДокументаПлана.Курс = 0, 1, СтрокаДокументаПлана.Курс);
		СтрокаПлана.Сумма = - СтрокаПлана.СуммаОборота;
		СтрокаПлана.СтатьяДвиженияДенег = СтрокаДокументаПлана.СтатьяДвиженияДенег;
		СтрокаПлана.Остроке = СтрокаДокументаПлана.ОСтроке;
		СтрокаПлана.Разница = 0;
		СтрокаПлана.РазницаОборота = 0;
		СтрокаПлана.СуммаФактОборота = 0;
		СтрокаПлана.СуммаФакт = 0;
		СтрокаПлана.Направление = НаправлениеДокумента;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Деньги.Статья,
	|	Деньги.ВидДвижения,
	|	Деньги.Период,
	|	Деньги.Сумма
	|ИЗ
	|	РегистрНакопления.Деньги КАК Деньги
	|ГДЕ
	|	Деньги.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Деньги.Статья = &Статья ";
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности")
		И ЗначениеЗаполнено(НаправлениеДокумента) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Деньги.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности";
		Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	СписокСтатей = Новый СписокЗначений;
	Для Каждого СтрокаПлана Из ТаблицаРезультат Цикл		
		
		Запрос.УстановитьПараметр("Статья", СтрокаПлана.СтатьяДвиженияДенег);
		СписокСтатей.Добавить(СтрокаПлана.СтатьяДвиженияДенег);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопленияПриход Тогда
					СтрокаПлана.СуммаФакт = СтрокаПлана.СуммаФакт + ВыборкаДетальныеЗаписи.Сумма;
				Иначе
					СтрокаПлана.СуммаФакт = СтрокаПлана.СуммаФакт - ВыборкаДетальныеЗаписи.Сумма;	
				КонецЕсли;
				СтрокаПлана.СуммаФактОборота = СтрокаПлана.СуммаФактОборота + ВыборкаДетальныеЗаписи.Сумма;
				
			КонецЦикла;	
			СтрокаПлана.Разница = СтрокаПлана.Сумма - СтрокаПлана.СуммаФакт;
			СтрокаПлана.РазницаОборота = СтрокаПлана.Сумма - СтрокаПлана.СуммаФакт;
		КонецЕсли;
		
	КонецЦикла; 	 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Деньги.Статья,
	|	Деньги.ВидДвижения,
	|	Деньги.Период,
	|	Деньги.Сумма
	|ИЗ РегистрНакопления.Деньги КАК Деньги
	|ГДЕ Деньги.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ Деньги.Статья В (&СписокСтатей)";
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности")					   
		И ЗначениеЗаполнено(НаправлениеДокумента) Тогда
		
		Запрос.Текст = Запрос.Текст + " И Деньги.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности";
		Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСтатей", СписокСтатей);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаДополнительныхДвижений = РезультатЗапроса.Выгрузить();
		ТабДоп = Новый ТаблицаЗначений;
		ТабДоп.Колонки.Добавить("Статья");
		ТабДоп.Колонки.Добавить("Сумма");
		Для Каждого СтрокаТаблицаДопДвижений Из ТаблицаДополнительныхДвижений Цикл
			СтрокаТабДоп = ТабДоп.Добавить();	
			СтрокаТабДоп.статья = СтрокаТаблицаДопДвижений.Статья;
			Если СтрокаТаблицаДопДвижений.ВидДвижения = ВидДвиженияНакопленияПриход Тогда
				СтрокаТабДоп.Сумма = СтрокаТаблицаДопДвижений.Сумма;
			Иначе
				СтрокаТабДоп.Сумма = - СтрокаТаблицаДопДвижений.Сумма;	
			КонецЕсли;
		КонецЦикла;
		ТабДоп.Свернуть("Статья", "Сумма");
		
		Для Каждого СтрокаТабДоп Из ТабДоп Цикл
			СтрокаПлана = ТаблицаРезультат.Добавить();
			СтрокаПлана.СтатьяДвиженияДенег = СтрокаТабДоп.Статья;
			СтрокаПлана.Сумма = 0;
			СтрокаПлана.СуммаФакт = СтрокаТабДоп.Сумма;
			СтрокаПлана.СуммаОборота = 0;
			СтрокаПлана.СуммаФактОборота = ?(СтрокаТабДоп.Сумма > 0, СтрокаТабДоп.сумма, - СтрокаТабДоп.сумма);
			СтрокаПлана.ЭтоДоход = ?(СтрокаТабДоп.Сумма > 0, ИСТИНА, ЛОЖЬ);
			
			СтрокаПлана.Разница = - СтрокаТабДоп.Сумма;
			СтрокаПлана.РазницаОборота = - ?(СтрокаТабДоп.Сумма > 0, СтрокаТабДоп.сумма, - СтрокаТабДоп.сумма);
			СтрокаПлана.ДокументПланДоходовИРасходов = Неопределено;
			СтрокаПлана.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Незапланированное движение денег");
			СтрокаПлана.Направление = НаправлениеДокумента;
		КонецЦикла;	
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаРезультат", ТаблицаРезультат); 
	
	Попытка	
		Схема = Отчеты.ПланФактныйАнализДоходовИРасходов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Настройки = Отчет.КомпоновщикНастроек.Настройки;    
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = Компоновщик.Выполнить(Схема,Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки);
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);		
		ПроверитьНеобходимостьДобавитьДату();
		
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки;
		Сообщение.Сообщить();		
	КонецПопытки;
	
КонецПроцедуры
