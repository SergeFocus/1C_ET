// sza151026-1314 конецдня
// sza141201-0318 ПК
// sza141104-1432 : фикс едизм
// sza140420-1700  
// sza130915-1233 : 
&НаСервере
Функция   ВедетсяУчетПоВидамЦен()
	
	Возврат ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС;
	
КонецФункции // ВедетсяУчетПоВидамЦен()

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодДляОтчета.ДатаОкончания = ДатаОкончания;
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаНачала = ДатаОкончания;
		ПериодДляОтчета.ДатаНачала = НачалоДня(ДатаНачала);
	КонецЕсли;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

Процедура ЗаданиеПараметровИКомпоновкаОтчета()
	
	Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", КонецДня(ПериодДляОтчета.ДатаОкончания));
	Если ВедетсяУчетПоВидамЦен() Тогда
		отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);		
	Иначе
		отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЛОЖЬ);
		отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЦЕНА"));		
	КонецЕсли;
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатурнойГруппе", ЗначениеЗаполнено(ОтборПоНоменклатурнойГруппе));
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОтборПоНоменклатурнойГруппе);		
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтборПоСкладуНаличияТоваров);		
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НетОтбораПоНаличию", НЕ ТолькоВНаличии);		
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ТолькоВНаличии или не ЗначениеЗаполнено(ОтборПоСкладуНаличияТоваров));		
	отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
	
	// отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлиентПоставщик", КлиентПоставщик);		
	// отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Язык", Язык);
	// отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПолеАртикул", ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"));		
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных") Тогда
		Попытка 
			
			#Если Клиент Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формируется отчет.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.АнимацияОжиданиеСиниеСтрелки);
			#КонецЕсли
			ЭтаФорма.СкомпоноватьРезультат();
			Результат.показатьуровеньгруппировокстрок(1);
			ПроверитьНеобходимостьДобавитьДату();
			
		Исключение 	
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();		
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтборПоВидуЦенОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("ВидыЦен", ДанныеВыбора, Текст, ОтборПоВидуЦен);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЦенПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатурнойГруппеПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуНаличияТоваровПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРуководителю(Команда)
	
	ОбщийМодульКлиент.ОтправитьПоEMAIL(Результат, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет Продажи"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                               // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПериодДляОтчета) Тогда
        ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.Вчера;
		ДатаНачала = ПериодДляОтчета.ДатаНачала;
		ДатаОкончания = ПериодДляОтчета.ДатаОкончания;		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЗаданиеПараметровИКомпоновкаОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                          // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если НЕ ЗначениеЗаполнено(ПериодДляОтчета) Тогда
		ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
		ДатаНачала = ПериодДляОтчета.ДатаНачала;
		ДатаОкончания = ПериодДляОтчета.ДатаОкончания;		
	КонецЕсли;	
// 	ЗаданиеПараметровИКомпоновкаОтчета();

	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Элементы.РезультатОтправитьРуководителю.Видимость = не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь", ИСТИНА) = "";
		ОбщийМодульСервисСервер.ПроверитьДоступКНастройкамОтчета(ЭтаФорма, ЭтаФорма.ИмяФормы, Отказ);	
		
		Язык = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДобавитьДату()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормы") Тогда
		МакетДатыВремени = ПолучитьОбщийМакет("МакетДатыВремени");
		ТаблицаТекущейДатыВремени = МакетДатыВремени.ПолучитьОбласть("Ш");
		ТаблицаТекущейДатыВремени.Параметры.ТекущаяДатаИВремя = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТаблицаТекущейДатыВремени);
		результат.Вывести(ТаблицаТекущейДатыВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыПоЯчейкам(ТабДок)
	
	СтруктураРасчетаСуммыЯчеек = ОбщийМодульКлиент.РасчетСуммыПоЯчейкам(ТабДок, Результат);	
	СуммаЯчеек 		= СтруктураРасчетаСуммыЯчеек.СуммаЯчеек;
	ВыделеноЯчеек 	= СтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек;
	КоличествоЧисел = СтруктураРасчетаСуммыЯчеек.КоличествоЧисел;              
	СреднееЗначение = СтруктураРасчетаСуммыЯчеек.СреднееЗначение;
	
КонецПроцедуры	

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	РасчетСуммыПоЯчейкам(Результат);
	Элементы.ГруппаСуммВыделеныхЯчеек.Видимость = не КоличествоЧисел = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры
