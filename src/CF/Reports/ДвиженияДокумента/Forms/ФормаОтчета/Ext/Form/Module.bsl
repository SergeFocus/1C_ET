// sza151022-2310 ссылки
// sza150110-0026 +
// sza140429-2101 :
// sza131021-1701

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Документ) Тогда
		ФормироватьОтчетПоДвижениям();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчет(Команда)

	ФормироватьОтчетПоДвижениям();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНезаполненныеЗначенияПриИзменении(Элемент)

	ФормироватьОтчетПоДвижениям();

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю

	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()            // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)       // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если ЗначениеЗаполнено(Параметры.ДокументСсылка) Тогда
		Документ = Параметры.ДокументСсылка;
		ФормироватьОтчетПоДвижениям();
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДобавитьДату()

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормы") Тогда
		МакетДатыВремени = ПолучитьОбщийМакет("МакетДатыВремени");
		ТаблицаТекущейДатыВремени = МакетДатыВремени.ПолучитьОбласть("Ш");
		ТаблицаТекущейДатыВремени.Параметры.ТекущаяДатаИВремя = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТаблицаТекущейДатыВремени);
		Результат.Вывести(ТаблицаТекущейДатыВремени);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыПоЯчейкам(ДокументДляПечати)

	СтруктураРасчетаСуммыЯчеек = ОбщийМодульКлиент.РасчетСуммыПоЯчейкам(ДокументДляПечати, Результат);
	СуммаЯчеек 		= СтруктураРасчетаСуммыЯчеек.СуммаЯчеек;
	ВыделеноЯчеек 	= СтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек;
	КоличествоЧисел = СтруктураРасчетаСуммыЯчеек.КоличествоЧисел;
	СреднееЗначение = СтруктураРасчетаСуммыЯчеек.СреднееЗначение;

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)

	РасчетСуммыПоЯчейкам(Результат);
	Элементы.ГруппаСуммВыделенныхЯчеек.Видимость = не КоличествоЧисел = 0;

КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()

	Результат.Очистить();
	Результат.НачатьАвтогруппировкуСтрок();
	МетаданныеДокумента = документ.Метаданные();
	Макет = Отчеты.ДвиженияДокумента.ПолучитьМакет("Макет");
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
	Шапка = Макет.ПолучитьОбласть("Ш");
	Дата  = Документ.Дата;
	Шапка.Параметры.Дата  = Дата;
	Шапка.Параметры.Номер = Документ.номер;
	Шапка.Параметры.НаименованиеДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(МетаданныеДокумента.ПредставлениеОбъекта);
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
	Результат.Вывести(Шапка, 0);
	СтрокаПараметра = Макет.ПолучитьОбласть("СП");

	Для Каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
		ЗначениеПараметра = документ[РеквизитДокумента.имя];
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			СтрокаПараметра.Параметры.НаименованиеПараметра = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитДокумента.синоним) + ":";
			СтрокаПараметра.Параметры.ЗначениеПараметра = документ[РеквизитДокумента.имя];
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаПараметра);
			Результат.Вывести(СтрокаПараметра, 1);
		КонецЕсли;

	КонецЦикла;

	ШапкаДвижений  		= Макет.ПолучитьОбласть("ШД");
	КонецСтрокиДвижения = Макет.ПолучитьОбласть("КСД");
	ШапкаСтрокиДвижений = Макет.ПолучитьОбласть("ШСД");
	СтрокаМассиваПропущенныхРегистров = Макет.ПолучитьОбласть("СМПР");
	МассивПропущенныхРегистров = Новый Массив;

	Для Каждого видДвиженияДокумента Из МетаданныеДокумента.Движения Цикл
		Попытка // Для движений по регистрам сведений
			Обороты = СокрЛП(видДвиженияДокумента.ВидРегистра) = "Обороты";
			видДвиженияДокументаПредставление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(видДвиженияДокумента.Представление());
			ШапкаДвижений.параметры.НаименованиеРегистра = видДвиженияДокументаПредставление;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ";
			Для Каждого измерение Из видДвиженияДокумента.Измерения Цикл
				Запрос.Текст = Запрос.Текст + "	РН." + Измерение.Имя + " КАК " + Измерение.Имя + ", ";

			КонецЦикла;

			Для Каждого ресурс Из видДвиженияДокумента.Ресурсы Цикл
				Запрос.Текст = Запрос.Текст + "	РН." + ресурс.Имя + " КАК " + ресурс.Имя + ", ";
			КонецЦикла;

			Для Каждого реквизит Из видДвиженияДокумента.реквизиты Цикл
				Запрос.Текст = Запрос.Текст + "	РН." + реквизит.Имя + " КАК " + реквизит.Имя + ", ";
			КонецЦикла;

			Запрос.Текст = Запрос.Текст + "	РН.Период КАК ПериодРН, ";

			Если Обороты Тогда
				Запрос.Текст = Запрос.Текст + " ""Обороты"" КАК ВидДвижения Из РегистрНакопления." + видДвиженияДокумента.Имя + " КАК РН ГДЕ РН.Регистратор = &Регистратор";
			Иначе
				Запрос.Текст = Запрос.Текст + " РН.ВидДвижения Из РегистрНакопления." + видДвиженияДокумента.Имя + " КАК РН ГДЕ РН.Регистратор = &Регистратор";
			КонецЕсли;

			Запрос.УстановитьПараметр("Регистратор", документ);

			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаДвижений);
				Результат.Вывести(ШапкаДвижений, 0);
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаСтрокиДвижений);
				Результат.Вывести(ШапкаСтрокиДвижений, 1);
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				МассивСтрокОписанияПроводки = Новый Массив(19);
				сч = 0;

				Пока сч < 19 Цикл
					СтруктураСтрокиОписанияПроводки = Новый Структура("Используется", ЛОЖЬ);
					МассивСтрокОписанияПроводки[сч] = СтруктураСтрокиОписанияПроводки;
					сч = сч + 1;

				КонецЦикла;

				сч = 0;
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если Обороты Тогда
						ВидДвижения = Неопределено;
					Иначе
						ВидДвижения = ВыборкаДетальныеЗаписи.ВидДвижения;
					КонецЕсли;

					Измерения  = "";
					Значения   = "";
					измерениеР = Неопределено;
					сч = 0;

					Для Каждого измерение Из видДвиженияДокумента.Измерения Цикл
						ЗначениеТут = ВыборкаДетальныеЗаписи[Измерение.Имя];

						Если ПоказатьНезаполненныеЗначения
							ИЛИ ЗначениеЗаполнено(ЗначениеТут) Тогда

							МассивСтрокОписанияПроводки[сч].Вставить("Измерения", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Измерение.Синоним));
							МассивСтрокОписанияПроводки[сч].Вставить("Значения", ЗначениеТут);
							МассивСтрокОписанияПроводки[сч].Вставить("измерениеР", ЗначениеТут);
							МассивСтрокОписанияПроводки[сч].Используется = ИСТИНА;
						КонецЕсли;

						сч = сч + 1;

					КонецЦикла;

					сч = 0;
					ресурсы   = "";
					ЗначенияР = "";
					Для Каждого ресурс Из видДвиженияДокумента.ресурсы Цикл
						ЗначениеТут = ВыборкаДетальныеЗаписи[ресурс.Имя];

						Если ПоказатьНезаполненныеЗначения
							ИЛИ ЗначениеЗаполнено(ЗначениеТут) Тогда

							МассивСтрокОписанияПроводки[сч].Вставить("ресурсы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ресурс.Синоним));
							МассивСтрокОписанияПроводки[сч].Вставить("ЗначенияР", ЗначениеТут);
							МассивСтрокОписанияПроводки[сч].Используется = ИСТИНА;
						КонецЕсли;

						сч = сч + 1;

					КонецЦикла;

					сч = 0;
					реквизиты = "";
					ЗначенияРеквизитов = "";
					реквизитР = Неопределено;

					Для Каждого реквизит Из видДвиженияДокумента.реквизиты Цикл
						ЗначениеТут = ВыборкаДетальныеЗаписи[реквизит.Имя];

						Если ПоказатьНезаполненныеЗначения
							ИЛИ ЗначениеЗаполнено(ЗначениеТут) Тогда

							МассивСтрокОписанияПроводки[сч].Вставить("реквизиты", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(реквизит.Синоним));
							МассивСтрокОписанияПроводки[сч].Вставить("ЗначенияРеквизитов", ЗначениеТут);
							МассивСтрокОписанияПроводки[сч].Вставить("реквизитР", ЗначениеТут);
							МассивСтрокОписанияПроводки[сч].Используется = ИСТИНА;
						КонецЕсли;

						сч = сч + 1;

					КонецЦикла;

					Если Обороты Тогда
						ВидДвижения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обороты");
					КонецЕсли;

					Если НЕ ВыборкаДетальныеЗаписи.ПериодРН = Дата Тогда
						ВидДвижения = формат(ВыборкаДетальныеЗаписи.ПериодРН, "ДФ='dd.MM.yy ЧЧ:мм'") + Символы.ПС + ВидДвижения;
					КонецЕсли;

					МассивСтрокОписанияПроводки[0].Вставить("ВидДвижения", ВидДвижения);

					Для Каждого ЭлементМассиваОписания Из МассивСтрокОписанияПроводки Цикл
						Если ЭлементМассиваОписания.Используется Тогда
							СтрокаДвижения = Макет.ПолучитьОбласть("СД"); // надо здесь, чтобы с нуля
							СтрокаДвижения.Параметры.Заполнить(ЭлементМассиваОписания);
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаДвижения);
							Результат.Вывести(СтрокаДвижения, 1);
						КонецЕсли;

					КонецЦикла;

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(КонецСтрокиДвижения);
					Результат.Вывести(КонецСтрокиДвижения, 1);
				КонецЦикла;
			Иначе
				МассивПропущенныхРегистров.Добавить(видДвиженияДокументаПредставление);
			КонецЕсли;

		Исключение
		КонецПопытки;
	КонецЦикла;

	Если НЕ МассивПропущенныхРегистров.Количество() = 0 Тогда
		Результат.Вывести(Макет.ПолучитьОбласть("Пропуск"), 0);
	КонецЕсли;

	Если НЕ МассивПропущенныхРегистров.Количество() = 0 Тогда
		Результат.Вывести(Макет.ПолучитьОбласть("ЗаголовокНетДвижений"), 0);
		Для Каждого ЭлементМассиваПропущенныхРегистров Из МассивПропущенныхРегистров Цикл
			СтрокаМассиваПропущенныхРегистров.Параметры.НаименованиеРегистра = ЭлементМассиваПропущенныхРегистров;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаМассиваПропущенныхРегистров);
			Результат.Вывести(СтрокаМассиваПропущенныхРегистров, 1);

		КонецЦикла;
	КонецЕсли;

	МассивИзЭтогоДокумента = Новый Массив;
	МассивИзЭтогоДокумента.Добавить(Документ.Ссылка);
	НайденыСсылки = НайтиПоСсылкам(МассивИзЭтогоДокумента);
	Если НЕ НайденыСсылки.Количество() = 0 Тогда
		Результат.Вывести(Макет.ПолучитьОбласть("ЗаголовокСсылки"), 0);
		СтрокаСсылки = Макет.ПолучитьОбласть("СтрокаСсылки");
		СтрокаМетаданных = Макет.ПолучитьОбласть("СтрокаМетаданных");
		НайденыСсылки.Сортировать("Метаданные, Данные");
		ТекущиеМетаданные = "";
		СтрокВГруппе = 0;

		Для Каждого СтрокаНайденныхСсылок Из НайденыСсылки Цикл
			Если НЕ Документ.Ссылка = СтрокаНайденныхСсылок.Данные Тогда
				МетаданныеСтроки = СокрЛП(СтрокаНайденныхСсылок.Метаданные);
				Если НЕ МетаданныеСтроки = ТекущиеМетаданные Тогда
					Если НЕ СтрокВГруппе = 0 Тогда
						Результат.ЗакончитьГруппуСтрок();
						СтрокВГруппе = 0;
					КонецЕсли;

					ТекущиеМетаданные = МетаданныеСтроки;
					СтрокаМетаданных.Параметры.ТекущиеМетаданные = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекущиеМетаданные);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаМетаданных);
					Результат.Вывести(СтрокаМетаданных, 1);
					Результат.НачатьГруппуСтрок(, ЛОЖЬ);
					СтрокВГруппе = СтрокВГруппе + 1;
				КонецЕсли;

				СтрокаСсылки.Параметры.СсылкиНаОбъектСсылка = СтрокаНайденныхСсылок.Данные;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаСсылки);
				Результат.Вывести(СтрокаСсылки, 2);
			КонецЕсли;

		КонецЦикла;

		Если НЕ СтрокВГруппе = 0 Тогда
			Результат.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЕсли;

	Результат.ЗакончитьАвтогруппировкуСтрок();
	ПроверитьНеобходимостьДобавитьДату();

КонецПроцедуры

&НаКлиенте
Процедура ФормироватьОтчетПоДвижениям()

	СформироватьНаСервере();
	Результат.ОтображатьСетку = ЛОЖЬ;
	Результат.Защита          = ИСТИНА;
	Результат.ТолькоПросмотр      = ЛОЖЬ;
	Результат.ОтображатьЗаголовки = ЛОЖЬ;

КонецПроцедуры
