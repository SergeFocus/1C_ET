//sza140717-2318
//sza140420-1714  
//sza130831-0257
&НаКлиенте
Процедура ВесьПериод(Команда)
	
	отчет.ДатаНачала    = ОбщийМодульСервисСервер.ДатаПервогоДокумента();
	отчет.ДатаОкончания = конецгода(ОбщийМодульКлиент.ПользователяТекущаяДата());
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура Вчера(Команда)
	
	отчет.ДатаНачала = началодня(началодня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 100);
	отчет.ДатаОкончания = конецдня(отчет.ДатаНачала);
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	отчет.ПериодОтчета.ДатаНачала = отчет.ДатаНачала;
	Если отчет.ДатаНачала > Отчет.ДатаОкончания Тогда
		Отчет.ДатаОкончания = отчет.ДатаНачала;
		отчет.ПериодОтчета.ДатаОкончания = Отчет.ДатаОкончания;
	КонецЕсли;
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	отчет.ПериодОтчета.ДатаОкончания = отчет.ДатаОкончания;
	Если отчет.ДатаНачала > Отчет.ДатаОкончания Тогда
		отчет.ДатаНачала = Отчет.ДатаОкончания;
		отчет.ПериодОтчета.ДатаНачала = Отчет.ДатаНачала;
	КонецЕсли;
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура МинусДень(Команда)
	
	отчет.ДатаНачала = отчет.ДатаНачала - 3600 * 24;
	отчет.ДатаОкончания = отчет.ДатаОкончания - 3600 * 24;
	отчет.ПериодОтчета.ДатаНачала = отчет.ДатаНачала;
	отчет.ПериодОтчета.ДатаОкончания = отчет.ДатаОкончания;
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуПриИзменении(Элемент)
	СформироватьОтчетСразу();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРуководителю(Команда)
	
	Результат = Новый ТабличныйДокумент;
	Результат.КлючПараметровПечати = "Отчет_Руководителю";
	Результат.КлючПараметровПечати = Результат.ИмяПараметровПечати;
	
	ОбщийМодульСервер.ПечатьНаСервереОтчетаРуководителю(СтруктураДанныхОтчета(), Результат);
	ОбщийМодульКлиент.ОтправитьПоEMAIL(Результат, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет Руководителю"));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОтчет(СтруктураОтчета)
	
	Реквизиты = метаданные.Отчеты.ОтчетРуководителю.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		Попытка 
			Отчет[Реквизит.имя] = СтруктураОтчета[Реквизит.имя];
		Исключение 	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	Отчет.ДатаНачала = Отчет.ПериодОтчета.ДатаНачала;
	Отчет.ДатаОкончания = Отчет.ПериодОтчета.ДатаОкончания;
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати");
	ОбщийМодульСервер.ПечатьНаСервереОтчетаРуководителю(СтруктураДанныхОтчета(), ФормаПечати.Результат);
	
	ФормаПечати.Результат.ОтображатьСетку 	= ЛОЖЬ;
	ФормаПечати.Результат.Защита 			= ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр 	= ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Отчет руководителю");
	ФормаПечати.открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлюсДень(Команда)
	
	отчет.ДатаНачала = отчет.ДатаНачала + 3600 * 24;
	отчет.ДатаОкончания = отчет.ДатаОкончания + 3600 * 24;
	отчет.ПериодОтчета.ДатаНачала = отчет.ДатаНачала;
	отчет.ПериодОтчета.ДатаОкончания = отчет.ДатаОкончания;
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                 // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                            // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);	
	Элементы.Взаиморасчеты.Видимость = УчетПоКлиентам;
	
	Если НЕ ЗначениеЗаполнено(Отчет.ДатаНачала) Тогда
		Отчет.ДатаНачала 	= началоГода(ОбщийМодульКлиент.ПользователяТекущаяДата());
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Отчет.ДатаОкончания) Тогда
		Отчет.ДатаОкончания = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	Отчет.ПериодОтчета.ДатаНачала 		= Отчет.ДатаНачала;	
	Отчет.ПериодОтчета.ДатаОкончания 	= Отчет.ДатаОкончания;
	
	Отчет.ПериодОтчета.ДатаНачала 		= Отчет.ДатаНачала;
	отчет.ПериодОтчета.ДатаОкончания 	= Отчет.ДатаОкончания;
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных") Тогда
		СформироватьОтчетСразу();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002600", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		УчетПоКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		Элементы.ВзаиморасчетыСПоставщиками.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		Элементы.Деньги.Видимость 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		Элементы.КромеДолговПоТоварам.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
		Элементы.ОтправитьРуководителю.Видимость 		= НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь", ИСТИНА) = "";
		Элементы.ОбщаяВаловаяПрибыль.Видимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		Детализировать 									= Константы.ДетализироватьОтчетРуководителю.Получить();
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КупленоКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПроданоКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СреднееКоличествоРеализации, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписаноКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиТоваровКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПоступилоКоличество, , ИСТИНА);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	отчет.датаначала = ОбщийМодульКлиент.ПользователяТекущаяДата();
	отчет.датаокончания = ОбщийМодульКлиент.ПользователяТекущаяДата();
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаСервере
Функция   СтруктураДанныхОтчета()
	
	РезультатСтруктураДанныхОтчета = Новый Структура;
	
	Реквизиты = метаданные.Отчеты.ОтчетРуководителю.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		РезультатСтруктураДанныхОтчета.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя]);
	КонецЦикла;	
	
	Возврат РезультатСтруктураДанныхОтчета;
	
КонецФункции //СтруктураДанныхОтчета

&НаКлиенте
Функция   СтруктураУсловий()
	
	РезультатСтруктураУсловий = Новый Структура;
	РезультатСтруктураУсловий.Вставить("ДатаНачала", отчет.ДатаНачала);
	РезультатСтруктураУсловий.Вставить("ДатаОкончания", Отчет.ДатаОкончания);
	РезультатСтруктураУсловий.Вставить("ОтборПоСкладу", Отчет.ОтборПоСкладу);
	
	Возврат РезультатСтруктураУсловий;
	
КонецФункции //СтруктураУсловий()

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетСразу(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетСразу(ИзКнопки = ЛОЖЬ)
	
	Если изкнопки 
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных") Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формируется отчет.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураОтчета = ОбщийМодульСервер.СформироватьОтчетРуководителюНаСервере(СтруктураУсловий());
		Если НЕ СтруктураОтчета = Неопределено Тогда
			ОформитьОтчет(СтруктураОтчета);
		КонецЕсли;
		ОбновитьИнтерфейс();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотМесяц(Команда)
	
	отчет.ДатаНачала = началомесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
	отчет.ДатаОкончания = конецмесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
	СформироватьОтчетСразу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьПриИзменении(Элемент)
	ДетализироватьПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДетализироватьПриИзмененииНаСервере()
	Константы.ДетализироватьОтчетРуководителю.Установить(Детализировать);
КонецПроцедуры
