// sza151011-0229 функция
// sza150716-1730
// sza150623-1742 глОграниченКонтрагент
// sza150602-2307 окно запуска
// sza150515-0232 программы
// sza150429-1803
// sza150111-1956
// sza140117-0131 :
// sza131003-1850 :

Перем глВэбКамера Экспорт;
Перем глЧислоОбъектов Экспорт;
Перем глВерсияПлатформы Экспорт;
Перем глМассоваяЗагрузка Экспорт;
Перем глФормаЗаданаСтрого Экспорт;
Перем глПроверятьСообщения Экспорт;
Перем глКонфигурацияВРаботе Экспорт;
Перем глОграниченКонтрагент Экспорт;
Перем глТекущийПользователь Экспорт;
Перем глВремяПоследнегоСобытия Экспорт;
Перем глВремяНачалаРаботыПользователя Экспорт;
Перем глЕдинственнаяФормаЗакрыта Экспорт;
Перем глПодключаемоеОборудование Экспорт;
Перем глПараметрыСообщенийПользователя Экспорт;
Перем глМассивФормСПользовательскимПереводом Экспорт;

Процедура ВыполнениеРегламентныхЗаданий() Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний") Тогда
		МассивНапоминаний 	 = Новый Массив;
		СтруктураНапоминаний = ОбщийМодульСерверПривилегия.ПроверитьНаличиеПропущенныхНапоминаний(ИСТИНА);
		Если СтруктураНапоминаний.Есть Тогда
			Сч = 0;
			НаименованиеФЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фоновая задача") + " ";
			
			Для Каждого Напоминание Из СтруктураНапоминаний.МассивНапоминаний Цикл
				Состояние(НаименованиеФЗ + СтруктураНапоминаний.МассивНаименований[сч]);
				Напоминание = ОбщийМодульСерверПривилегия.ЗаписатьВыполнениеНапоминания(Напоминание);
				ОбщийМодульСерверПривилегия.ВыполнитьЗадачку(Напоминание);
				Сч = Сч + 1;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	
	Если НЕ Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При обработке внешнего события от устройства произошла ошибка.") + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОЗавершенииРаботыЕдинственнойФормы() Экспорт
	
	Если глЕдинственнаяФормаЗакрыта Тогда
		ОтключитьОбработчикОжидания("ОЗавершенииРаботыЕдинственнойФормы");
		ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	СледуетВыполнитьОперацииПередЗавершением = ОбщийМодульСервисСервер.СледуетВыполнитьОперацииПередЗавершением();
	Если НЕ СледуетВыполнитьОперацииПередЗавершением.количество() = 0 Тогда
		Количество = СледуетВыполнитьОперацииПередЗавершением.Количество();
		
		Для Каждого ОперацияПередЗавершением Из СледуетВыполнитьОперацииПередЗавершением Цикл
			
			Если ОперацияПередЗавершением = "Восстановление Валовой Прибыли"
				И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Необходимо восстановить показатели валовой прибыли. Восстановить сейчас?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция") + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОперацияПередЗавершением));
				ОбщийМодульСервисСервер.ПередЗавершениемРаботыСистемы(ОперацияПередЗавершением);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("ЧислоОбъектов", глЧислоОбъектов, ИСТИНА);
		ПрограммыКВыполнению = ОбщийМодульСерверПривилегия.ОпределитьПрограммыПользователя(глТекущийПользователь, ЛОЖЬ);
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Клиент) Тогда
			Попытка
				Выполнить(" " + ПрограммыКВыполнению.Клиент + " ");
			Исключение
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка исполнения программы пользователя") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("при завершении работы системы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на клиенте") + ": " + ТекстОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Сервер) Тогда
			Попытка
				ОбщийМодульСерверПривилегия.ВыполнитьКод(ПрограммыКВыполнению.Сервер, ИСТИНА);
			Исключение
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка исполнения программы пользователя") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("при завершении работы системы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на сервере") + ": " + ТекстОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
		
		глВремяПоследнегоСобытия = ТекущаяДата();
		Если (глВремяПоследнегоСобытия - глВремяНачалаРаботыПользователя) > 2 Тогда 
			ОбщийМодульСервисСервер.ЗавершитьПериодРаботыПользователя(4, глВремяНачалаРаботыПользователя, глВремяПоследнегоСобытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если ОбщийМодульСерверПривилегия.ОпределитьКонтрагентаПредприятия() Тогда
		глОграниченКонтрагент = ОткрытьФормуМодально("ОбщаяФорма.ИдентификацияКонтрагента");
		Если НЕ ЗначениеЗаполнено(глОграниченКонтрагент) Тогда
			Отказ = ИСТИНА;
			ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		глТекущийПользователь = ОбщийМодульСерверПривилегия.ОпределитьПользователя();
		глКонфигурацияВРаботе = ИСТИНА;
		ОбщийМодульКлиент.ПриНачалеРаботыПользователяСБазойДанных();
		МенеджерОборудованияКлиент.ПриНачалеРаботыПользователяСБазойДанных();
		ПрограммыКВыполнению = ОбщийМодульСерверПривилегия.ОпределитьПрограммыПользователя(глТекущийПользователь, ИСТИНА);
		
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Клиент) Тогда
			Попытка
				Выполнить(" " + ПрограммыКВыполнению.Клиент + " ");
			Исключение
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю("ERROR with running script at start of system on Client side: " + ТекстОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Сервер) Тогда
			Попытка
				ОбщийМодульСерверПривилегия.ВыполнитьКод(ПрограммыКВыполнению.Сервер, ИСТИНА);
			Исключение
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю("ERROR with running script at start of system on Server side: " + ТекстОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
		ПроверитьПодключениеОбработчикаОжидания();
		ДобавитьНапоминанияПриСтартеСистемы();
		глЧислоОбъектов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоОбъектов");
		ПриЗапуске = ОбщийМодульСерверПривилегия.ОпределитьОкноПриЗапускеПользователя(глТекущийПользователь);
		
		Если НЕ ПустаяСтрока(ПриЗапуске.Форма) Тогда
			ФормаМодально = ПриЗапуске.Модально;
			глФормаЗаданаСтрого = ПриЗапуске.НеПозволятьЗакрыть;
			Если ФормаМодально Тогда
				Если глФормаЗаданаСтрого Тогда
					Отказ = ИСТИНА;
				КонецЕсли;
				
				Если ПриЗапуске.Форма = "ДополнительнаяОбработка" Тогда
					ОбщийМодульКлиент.ОткрытьФункциюОператора(ПриЗапуске.ДополнительнаяОбработка, ИСТИНА);
				Иначе
					ОткрытьФормуМодально(ПриЗапуске.Форма);
				КонецЕсли;
				
				Если глФормаЗаданаСтрого Тогда
					ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);
				КонецЕсли;
			Иначе
				Если ПриЗапуске.Форма = "ДополнительнаяОбработка" Тогда
					
					ОбщийМодульКлиент.ОткрытьФункциюОператора(ПриЗапуске.ДополнительнаяОбработка, ЛОЖЬ);
				Иначе
					ОткрытьФорму(ПриЗапуске.Форма);
				КонецЕсли;
				
				Если глФормаЗаданаСтрого Тогда
					ПодключитьОбработчикОжидания("ОЗавершенииРаботыЕдинственнойФормы", 10);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт
	
	Если Константы.ИспользоватьМеханизмЗаметокИНапоминаний.Получить() Тогда
		ПодключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданий", 240);
	Иначе
		ОтключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданий");
	КонецЕсли;
	
	глПараметрыСообщенийПользователя = Новый Структура("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
	ПодключитьОбработчикОжидания("СообщенияПользователюОтСистемы", 2);
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРабочегоВремениСотрудников")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьЗапросОТомЧтоСотрудникПользовательНаРабочемМесте") Тогда
		
		ПодключитьОбработчикОжидания("ВопросПользовательНаРабочемМесте", 60);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщенияПользователюОтСистемы() Экспорт
	
	Если глПроверятьСообщения
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуВнутреннихСообщенийПользователей")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПользователямДоставлятьСообщенияНемедленно")) Тогда
		
		ОбщийМодульКлиент.ПроверитьВывестиСообщенияПользователю(глПараметрыСообщенийПользователя);
		глПроверятьСообщения = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросПользовательНаРабочемМесте() Экспорт
	
	ТекущаяДатаСейчас = ТекущаяДата();
	Если НЕ глВремяПоследнегоСобытия = '00010101000000'  Тогда
		
		ПериодМолчания = ТекущаяДатаСейчас - глВремяПоследнегоСобытия;
		ЧислоСекунд    = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоМинутПослеПоследнейОперацииКоторыеСчитаютсяРабочими") * 60;
		
		Если ПериодМолчания >= (ЧислоСекунд - 40) Тогда
			
			КомандыВопроса = Новый Массив(1, 4);
			КомандыВопроса[0][0] = "ДА";
			КомандыВопроса[0][1] = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, я работаю!");
			КомандыВопроса[0][2] = "Результат = ИСТИНА;";
			КомандыВопроса[0][3] = 2;
			ПараметрыФормы = Новый Структура("СтруктураКнопокИПоведения", КомандыВопроса);
			ПараметрыФормы.Вставить("ЗаголовокФормы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы на рабочем месте?"));
			ПараметрыФормы.Вставить("ТекстВопроса", "");
			ПараметрыФормы.Вставить("ЭтоВопрос", ИСТИНА);
			ПараметрыФормы.Вставить("ВремяВопроса", 30);
			
			ФормаВопроса = ПолучитьФорму("ОбщаяФорма.ФормаВопроса", ПараметрыФормы);
			ОтветПользователя = ФормаВопроса.ОткрытьМодально();
			
			Если ОтветПользователя = "99" Тогда
				ОбщийМодульСервисСервер.ЗавершитьПериодРаботыПользователя(5, глВремяНачалаРаботыПользователя, глВремяПоследнегоСобытия + ЧислоСекунд);
				глВремяПоследнегоСобытия = '00010101000000';
			Иначе
				глВремяПоследнегоСобытия = ТекущаяДата();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

глЧислоОбъектов 		= 0;
глФормаЗаданаСтрого 	= ЛОЖЬ;
глПроверятьСообщения 	= ЛОЖЬ;
глМассоваяЗагрузка      = ЛОЖЬ;
глВерсияПлатформы 		= 803050001;
глЕдинственнаяФормаЗакрыта = ЛОЖЬ;
глОграниченКонтрагент 	= Неопределено;
глВремяПоследнегоСобытия = '00010101000000';
глМассивФормСПользовательскимПереводом = Новый Соответствие;
глВремяНачалаРаботыПользователя = '00010101000000';