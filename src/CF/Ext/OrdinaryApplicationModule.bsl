// sza151011-0229 функция
// sza150716-1730 
// sza150623-1742 глОграниченКонтрагент
// sza150602-2307 окно запуска
// sza150515-0232 программы
// sza150429-1803 
// sza150111-1956
// sza140117-0131 : 
// sza131003-1850 :

Перем глЧислоОбъектов Экспорт;
Перем глПодключаемоеОборудование Экспорт;
Перем глКонфигурацияВРаботе Экспорт;
Перем глПараметрыСообщенийПользователя Экспорт;
Перем глПроверятьСообщения Экспорт;
Перем глТекущийПользователь Экспорт;
Перем глВерсияПлатформы Экспорт;
Перем глМассивФормСПользовательскимПереводом Экспорт;
Перем глФормаЗаданаСтрого Экспорт;
Перем глОграниченКонтрагент Экспорт;
Перем глВэбКамера Экспорт;
Перем глЕдинственнаяФормаЗакрыта Экспорт;

Процедура ВыполнениеРегламентныхЗаданий() Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний") Тогда
		
		МассивНапоминаний 	 = Новый Массив;
		СтруктураНапоминаний = ОбщийМодульСерверПривилегия.ПроверитьНаличиеПропущенныхНапоминаний(ИСТИНА);
		
		Если СтруктураНапоминаний.Есть Тогда			
			
			Сч = 0;
			НаименованиеФЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фоновая задача") + " ";
			Для Каждого Напоминание из СтруктураНапоминаний.МассивНапоминаний Цикл				
				
				Состояние(НаименованиеФЗ + СтруктураНапоминаний.МассивНаименований[сч]);
				Напоминание = ОбщийМодульСерверПривилегия.ЗаписатьВыполнениеНапоминания(Напоминание);
				ОбщийМодульСерверПривилегия.ВыполнитьЗадачку(Напоминание);
				Сч = Сч + 1;
				
			КонецЦикла;
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
	// Подготовить данные
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	// Передать на обработку данные
	Результат = МенеджерОборудованияКлиент.ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если НЕ Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При обработке внешнего события от устройства произошла ошибка.") + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	СледуетВыполнитьОперацииПередЗавершением = ОбщийМодульСервисСервер.СледуетВыполнитьОперацииПередЗавершением();
	Если НЕ СледуетВыполнитьОперацииПередЗавершением.количество() = 0 Тогда
		
		Количество = СледуетВыполнитьОперацииПередЗавершением.Количество();
		Для Каждого ОперацияПередЗавершением Из СледуетВыполнитьОперацииПередЗавершением Цикл
			
			Если ОперацияПередЗавершением = "Восстановление Валовой Прибыли" 
				И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Необходимо восстановить показатели валовой прибыли. Восстановить сейчас?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Операция") + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОперацияПередЗавершением));
				ОбщийМодульСервисСервер.ПередЗавершениемРаботыСистемы(ОперацияПередЗавершением);		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("ЧислоОбъектов", глЧислоОбъектов, ИСТИНА);
	
	ПрограммыКВыполнению = ОбщийМодульСерверПривилегия.ОпределитьПрограммыПользователя(глТекущийПользователь, ЛОЖЬ);
	Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Клиент) Тогда
		Попытка 
			Выполнить(" " + ПрограммыКВыполнению.Клиент + " ");
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка исполнения программы пользователя") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("при завершении работы системы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на клиенте") + ": " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Сервер) Тогда
		Попытка 
			ОбщийМодульСерверПривилегия.ВыполнитьКод(ПрограммыКВыполнению.Сервер, ИСТИНА);
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка исполнения программы пользователя") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("при завершении работы системы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на сервере") + ": " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;	
	
	МенеджерОборудованияКлиент.ПередЗавершениемРаботыСистемы();
	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)
	
	Если ОбщийМодульСерверПривилегия.ОпределитьКонтрагентаПредприятия() Тогда
		глОграниченКонтрагент = ОткрытьФормуМодально("ОбщаяФорма.ИдентификацияКонтрагента");
		Если НЕ ЗначениеЗаполнено(глОграниченКонтрагент) Тогда
			Отказ = ИСТИНА;
			ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);
		КонецЕсли;
	КонецЕсли;	
	
	Если Не Отказ Тогда
		глТекущийПользователь = ОбщийМодульСерверПривилегия.ОпределитьПользователя();	
		
		глКонфигурацияВРаботе = ИСТИНА;
		ОбщийМодульКлиент.ПриНачалеРаботыСистемы();
		
		МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
		
		ПрограммыКВыполнению = ОбщийМодульСерверПривилегия.ОпределитьПрограммыПользователя(глТекущийПользователь, ИСТИНА);
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Клиент) Тогда
			Попытка 
				Выполнить(" " + ПрограммыКВыполнению.Клиент + " ");
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "ERROR with running script at start of system on Client side: " + ТекстОписаниеОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПрограммыКВыполнению.Сервер) Тогда
			Попытка 
				ОбщийМодульСерверПривилегия.ВыполнитьКод(ПрограммыКВыполнению.Сервер, ИСТИНА);
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "ERROR with running script at start of system on Server side: " + ТекстОписаниеОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
		ПроверитьПодключениеОбработчикаОжидания();
		ДобавитьНапоминанияПриСтартеСистемы();
		глЧислоОбъектов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоОбъектов");
		
		ПриЗапуске = ОбщийМодульСерверПривилегия.ОпределитьОкноПриЗапускеПользователя(глТекущийПользователь);
		Если НЕ ПустаяСтрока(ПриЗапуске.Форма) Тогда
			
			ФормаМодально = ПриЗапуске.Модально;
			глФормаЗаданаСтрого = ПриЗапуске.НеПозволятьЗакрыть;
			
			Если ФормаМодально Тогда
				
				Если глФормаЗаданаСтрого Тогда
					Отказ = ИСТИНА;
				КонецЕсли;
				
				Если ПриЗапуске.Форма = "ДополнительнаяОбработка" Тогда
					ОбщийМодульКлиент.ОткрытьФункциюОператора(ПриЗапуске.ДополнительнаяОбработка, ИСТИНА);
				Иначе
					ОткрытьФормуМодально(ПриЗапуске.Форма);
				КонецЕсли;
				
				Если глФормаЗаданаСтрого Тогда
					ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);	
				КонецЕсли;
				
			Иначе
				Если ПриЗапуске.Форма = "ДополнительнаяОбработка" Тогда
					ОбщийМодульКлиент.ОткрытьФункциюОператора(ПриЗапуске.ДополнительнаяОбработка, ЛОЖЬ);
				Иначе
					ОткрытьФорму(ПриЗапуске.Форма);	
				КонецЕсли;
				
				Если глФормаЗаданаСтрого Тогда
					ПодключитьОбработчикОжидания("ОЗавершенииРаботыЕдинственнойФормы", 10);
				КонецЕсли;				
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодключениеОбработчикаОжидания() Экспорт
	
	Если Константы.ИспользоватьМеханизмЗаметокИНапоминаний.Получить() Тогда
		ПодключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданий", 240);
	Иначе
		ОтключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданий");
	КонецЕсли; 	
	
	глПараметрыСообщенийПользователя = Новый Структура("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
	ПодключитьОбработчикОжидания("СообщенияПользователюОтСистемы", 2);
	
КонецПроцедуры

Процедура ОЗавершенииРаботыЕдинственнойФормы() Экспорт
	
	Если глЕдинственнаяФормаЗакрыта Тогда
	ОтключитьОбработчикОжидания("ОЗавершенииРаботыЕдинственнойФормы");
	ЗавершитьРаботуСистемы(ЛОЖЬ, ЛОЖЬ);	
									   КонецЕсли;
	
КонецПроцедуры

Процедура СообщенияПользователюОтСистемы() Экспорт
	
	Если глПроверятьСообщения
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуВнутреннихСообщенийПользователей")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПользователямДоставлятьСообщенияНемедленно")) Тогда
		
		ОбщийМодульКлиент.ПроверитьВывестиСообщенияПользователю(глПараметрыСообщенийПользователя);	
		глПроверятьСообщения = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

глПроверятьСообщения 	= ЛОЖЬ;
глВерсияПлатформы 		= 803050001;
глФормаЗаданаСтрого 	= ЛОЖЬ;
глОграниченКонтрагент 	= Неопределено;
глЧислоОбъектов 		= 0;
глМассивФормСПользовательскимПереводом = Новый Соответствие;
глЕдинственнаяФормаЗакрыта = ЛОЖЬ;
