// sza150518-0458
// sza150117-0413

&НаСервере
Процедура ЗаполнитьСписокПользователей()

	Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();

	Для каждого ТекПользователь Из Пользователи Цикл
		Элементы.Пользователь.СписокВыбора.Добавить(ТекПользователь.Имя);
	КонецЦикла;

КонецПроцедуры

// Обработчик команды поиска
&НаКлиенте
Процедура ИскатьВыполнить()

	ПрименитьФильтр();

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// Обработчики команд
// Обработчик команды Обновить
&НаКлиенте
Процедура ОбновитьВыполнить()

	ОбновитьСписокФорм();
	ПрименитьФильтр();

КонецПроцедуры

// Процедура обновляет список сохраненных настроек форм
&НаСервере
Процедура ОбновитьСписокФорм()

	Обработка = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УправлениеНастройкамиФорм"));
	СписокФорм = Новый СписокЗначений;
	Обработка.ПолучитьСписокФорм(СписокФорм);
	Формы.Очистить();
	Обработка.ПолучитьСписокСохраненныхНастроек(СписокФорм, Пользователь, Формы);

КонецПроцедуры

// Обработчик изменения строки поиска
&НаКлиенте
Процедура ПоискПриИзменении(Элемент)

	ПрименитьФильтр();

КонецПроцедуры

// Функция получает выделенные настройки в массиве
//
// Возврат :
//  Массив имен настроек форм
&НаСервере
Функция ПолучитьМассивВыделенныхНастроек()

	МассивНастроек = Новый Массив;
	ВыделенныеЭлементы = Элементы.ОтфильтрованныеФормы.ВыделенныеСтроки;
	Для каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
		МассивНастроек.Добавить(Формы.НайтиПоЗначению(ОтфильтрованныеФормы.НайтиПоИдентификатору(ВыделенныйЭлемент).Значение).Значение);

	КонецЦикла;

	Возврат МассивНастроек;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// Обработчики событий элементов управления
// Обработчик изменения имени пользователя
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)

	ОбновитьСписокФорм();
	ПрименитьФильтр();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

КонецПроцедуры

// Процедура применяет фильтр к списку настроек
&НаСервере
Процедура ПрименитьФильтр()

	ОтфильтрованныеФормы.Очистить();

	Для каждого ЭлементФорма Из Формы Цикл
		Если Поиск = "" ИЛИ Найти(ВРег(ЭлементФорма.Представление), ВРег(Поиск)) <> 0 Тогда
			ОтфильтрованныеФормы.Добавить(ЭлементФорма.Значение, ЭлементФорма.Представление, ЭлементФорма.Пометка, ЭлементФорма.Картинка);
		КонецЕсли;

	КонецЦикла;

	ПримененныйПоиск = Поиск;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// Обработчики событий формы
// Обработчик события создания формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
	КонецЕсли;

	ЗаполнитьСписокПользователей();
	Пользователь = ИмяПользователя();
	ОбновитьСписокФорм();
	ПрименитьФильтр();

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

// Обработчик команды Скопировать другому пользователю
&НаКлиенте
Процедура СкопироватьВыполнить()

	Если Элементы.ОтфильтрованныеФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для копирования нужно выбрать настройки, которые требуется скопировать.");
		Если глВерсияПлатформы < 803040000  Тогда
			Выполнить(" Предупреждение(ТекстПредупреждения); ");
		Иначе
			Выполнить(" ПоказатьПредупреждение( , ТекстПредупреждения); ");
		КонецЕсли;

		Возврат;
	КонецЕсли;

	СписокВыбораПользователей = Элементы.Пользователь.СписокВыбора.Скопировать();
	СписокВыбораПользователей.Удалить(
	СписокВыбораПользователей.НайтиПоЗначению(Пользователь));
	Если НЕ глВерсияПлатформы < 803040000  Тогда
		ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отметьте пользователей, которым нужно скопировать настройки.");
		Выполнить(" Оповещение = Новый ОписаниеОповещения(""СкопироватьВыполнитьОтметитьЗавершение"", ЭтаФорма, СписокВыбораПользователей);
		| СписокВыбораПользователей.ПоказатьОтметкуЭлементов(Оповещение, ТекстОповещения); ");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнитьВопросЗавершение(Результат, Контекст) Экспорт

	Если Результат = Контекст.Действие Тогда
		СкопироватьНаСервере(Контекст.ПользователиПриемник);
		ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Настройки скопированы");
		Если НЕ глВерсияПлатформы < 803040000 Тогда
			Выполнить(" ПоказатьОповещениеПользователя(ТекстОповещения); ");
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОповещения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнитьОтметитьЗавершение(Результат, Пользователи) Экспорт

	Если Результат Тогда
		ПользователиПриемник = Новый Массив;
		Для каждого Элемент Из Пользователи Цикл
			Элементы.Пользователь.СписокВыбора.НайтиПоЗначению(Элемент.Значение).Пометка = Элемент.Пометка;

			Если Элемент.Пометка Тогда
				ПользователиПриемник.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;

		Если ПользователиПриемник.Количество() = 0 Тогда
			ТекстПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для копирования нужно отметить пользователей, которым требуется скопировать настройки.");
			Если глВерсияПлатформы < 803040000  Тогда
				Выполнить(" Предупреждение(ТекстПредупреждения); ");
			Иначе
				Выполнить(" ПоказатьПредупреждение( , ТекстПредупреждения); ");
			КонецЕсли;

			Возврат;
		КонецЕсли;

		Действие = "ВыполнитьКопирование";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(Действие, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить копирование"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		Контекст = Новый Структура("Действие, ПользователиПриемник", Действие, ПользователиПриемник);

		Если НЕ глВерсияПлатформы < 803040000 Тогда
			ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("После копирования настроек пользователю форма у пользователя будет открываться с настройками, которые ему копируются. При этом его собственные настройки будут потеряны.");
			Выполнить(" Оповещение = Новый ОписаниеОповещения(""СкопироватьВыполнитьВопросЗавершение"", ЭтаФорма, Контекст);
			| ПоказатьВопрос(Оповещение, ТекстОповещения , СписокКнопок, , Действие); ");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура копирует выделенные настройки указанному пользователю
// Параметры :
//  ПользователиПриемник - имя пользователя, которому нужно скопировать настройки
&НаСервере
Процедура СкопироватьНаСервере(ПользователиПриемник)

	МассивНастроекДляКопирования = ПолучитьМассивВыделенныхНастроек();
	Обработка = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УправлениеНастройкамиФорм"));
	Обработка.СкопироватьНастройкиФорм(Пользователь, ПользователиПриемник, МассивНастроекДляКопирования);

КонецПроцедуры

// Обработчик команды удаления
&НаКлиенте
Процедура УдалитьВыполнить()

	Если Элементы.ОтфильтрованныеФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для удаления нужно выбрать настройки, которые требуется удалить.");
		Если глВерсияПлатформы < 803040000  Тогда
			Выполнить(" Предупреждение(ТекстПредупреждения); ");
		Иначе
			Выполнить(" ПоказатьПредупреждение( , ТекстПредупреждения); ");
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Действие = "ВыполнитьУдаление";
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(Действие, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить удаление"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);

	Если НЕ глВерсияПлатформы < 803040000 Тогда
		ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("После удаления настроек форма будет открываться с настройками по умолчанию.");
		Выполнить(" Оповещение = Новый ОписаниеОповещения(""УдалитьВыполнитьВопросЗавершение"", ЭтаФорма, Действие);
		| ПоказатьВопрос(Оповещение, ТекстОповещения, СписокКнопок, , Действие); ");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыполнитьВопросЗавершение(Результат, Действие) Экспорт

	Если Результат = Действие Тогда
		УдалитьНаСервере();
		ОбновитьСписокФорм();
		ПрименитьФильтр();
		ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Настройки удалены");

		Если НЕ глВерсияПлатформы < 803040000 Тогда
			Выполнить(" ПоказатьОповещениеПользователя(ТекстОповещения); ");
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОповещения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура удаляет выделенные настройки
&НаСервере
Процедура УдалитьНаСервере()

	МассивНастроекДляУдаления = ПолучитьМассивВыделенныхНастроек();
	Обработка = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УправлениеНастройкамиФорм"));
	Обработка.УдалитьНастройкиФорм(Пользователь, МассивНастроекДляУдаления);

КонецПроцедуры
