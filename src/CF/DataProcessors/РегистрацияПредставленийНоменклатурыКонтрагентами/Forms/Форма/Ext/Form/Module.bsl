// sza150216-1504 
// sza141130-0334
&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьШтрихКоды тогда
		
		Если ИспользоватьПодключаемоеОборудование И 
			МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			
			ОписаниеОшибки = "" ;
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
			
			Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки ;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("00065B", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ИспользоватьШтрихКоды 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
		ИспользоватьПодключаемоеОборудование = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");	
		Объект.Язык = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
		Если НЕ ЗначениеЗаполнено(Объект.Язык) Тогда
			Объект.Язык = ПредопределенноеЗначение("Справочник.Языки.Русский");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(Знач ТекКод)
	
	Результат = ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		СтрокаТовара = Объект.Товары.Добавить();
		СтрокаТовара.Номенклатура 		   = КодЭлемента;
		СтрокаТовара.КлиентПоставщик 	   = Объект.КлиентПоставщик;
		СтрокаТовара.ЗначениеПредставления = "";
		СтрокаТовара.Поле 		 = Объект.Поле;
		СтрокаТовара.Язык 		 = Объект.Язык;
		СтрокаТовара.Комментарий = "";
		СтрокаТовара.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Язык, СтрокаТовара.Поле);
		
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Знач ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по Штрих-коду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТаблицуЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу товаров?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьТаблицуНаСервере();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоНоменклатурнойГруппе(Команда)
	
	НоменклатурнаяГруппа = Неопределено;
	ФормаНоменклатурнойГруппы = ПолучитьФорму("Справочник.НоменклатурныеГруппы.ФормаВыбора");
	ФормаНоменклатурнойГруппы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Номенклатурную Группу для добавления ее номенклатуры") + ": ";
	НоменклатурнаяГруппа = ФормаНоменклатурнойГруппы.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ДобавитьПоПараметрОтбораНаСервере(НоменклатурнаяГруппа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоГруппеНоменклатуры(Команда)
	
	ГруппаНоменклатуры = Неопределено;
	ФормаВыбораГруппыНоменклатуры = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбораГруппы");
	ФормаВыбораГруппыНоменклатуры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Группу номенклатуры для добавления") + ": ";
	ГруппаНоменклатуры = ФормаВыбораГруппыНоменклатуры.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоПараметрОтбораНаСервере(ГруппаНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоПроизводителю(Команда)
	
	Производитель = Неопределено;
	ФормаВыбораПроизводителя = ПолучитьФорму("Справочник.Производители.ФормаВыбора");
	ФормаВыбораПроизводителя.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Производителя для добавления его номенклатуры") + ": ";
	Производитель = ФормаВыбораПроизводителя.ОткрытьМодально();
	Если ЗначениеЗаполнено(Производитель) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
		ДобавитьПоПараметрОтбораНаСервере(Производитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокумента(Команда)
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить("КорректировкиИРегистрацияОстатков", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ввод остатков (корректировка)"));
	СписокТиповДокументов.Добавить("Инвентаризации", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инвентаризация"));
	СписокТиповДокументов.Добавить("РасходыТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходы товара, услуг"));
	СписокТиповДокументов.Добавить("ПоступленияТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступления (возвраты) товара"));	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот") Тогда
		СписокТиповДокументов.Добавить("ВыполненияРабот", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Выполнения работ"));	
	КонецЕсли;
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		СписокТиповДокументов.Добавить("ПеремещенияТовара", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещения товара"));
	КонецЕсли;	
	СписокТиповДокументов.Добавить("УстановкиЦен", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установки Цен"));
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КонфигурацияВРаботе") Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановДоходовИРасходов") Тогда
			СписокТиповДокументов.Добавить("ПланыПродаж", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планы продаж"));	
		КонецЕсли;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") Тогда
			СписокТиповДокументов.Добавить("ОтчетыКомиссионеров", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты комиссионеров"));	
		КонецЕсли;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию") Тогда
			СписокТиповДокументов.Добавить("Комплектация", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектации"));	
		КонецЕсли;
	КонецЕсли;
	
	ТипДокументаДляДобавления = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДобавитьНоменклатуруДругогоДокументаЗавершение", ЭтаФорма), СписокТиповДокументов, , СписокТиповДокументов[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруДругогоДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТипДокументаДляДобавления = ВыбранныйЭлемент;
	
	Если НЕ ТипДокументаДляДобавления = Неопределено тогда
		ТипДокументаДляДобавления = стрзаменить(ТипДокументаДляДобавления, " ", "");
		
		ФормаВыбораДокумента = ПолучитьФорму("Документ." + ТипДокументаДляДобавления + ".ФормаВыбора");
		
		ФормаВыбораДокумента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Документ для добавления его номенклатуры") + ": ";
		ДругойДокумент = ФормаВыбораДокумента.ОткрытьМодально();
		Если ЗначениеЗаполнено(ДругойДокумент) Тогда
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."));
			ДобавитьНоменклатуруДругогоДокументаНаСервере(ДругойДокумент);      	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруДругогоДокументаНаСервере(Знач ДругойДокумент)
	
	Если ЗначениеЗаполнено(ДругойДокумент) Тогда
		
		Если ТипЗнч(ДругойДокумент) = Тип("ДокументСсылка.ВыполненияРабот")
			ИЛИ ТипЗнч(ДругойДокумент) = Тип("ДокументСсылка.ОтчетыКомиссионеров") Тогда
			
			Объект.КлиентПоставщик = ДругойДокумент.Клиент;
		ИначеЕсли  ТипЗнч(ДругойДокумент) = Тип("ДокументСсылка.ДвиженияДенег")
			ИЛИ ТипЗнч(ДругойДокумент) = Тип("ДокументСсылка.ПоступленияТовара")
			ИЛИ ТипЗнч(ДругойДокумент) = Тип("ДокументСсылка.РасходыТовара") Тогда
			
			Объект.КлиентПоставщик = ДругойДокумент.КлиентПоставщик;
		КонецЕсли;
		
		Объект.Товары.Загрузить(ДругойДокумент.Товары.Выгрузить());		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.КлиентПоставщик = Объект.КлиентПоставщик;
			СтрокаТовара.Поле = Объект.Поле;
			СтрокаТовара.Язык = Объект.Язык;
			СтрокаТовара.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Язык, СтрокаТовара.Поле);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоПараметрОтбораНаСервере(Знач ПараметрОтбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.КлиентПоставщик, &ПустойКлиент) КАК КлиентПоставщик,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.Поле, &ПолеПоУмолчанию) КАК Поле,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.Язык, &ЯзыкПоУмолчанию) КАК Язык,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.ЗначениеПредставления, """") КАК ЗначениеПредставления,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.СобственноеПредставление, """") КАК СобственноеПредставление,
	|	ЕСТЬNULL(ПредставлениеТоваровКонтрагентами.Комментарий, """") КАК Комментарий
	|ИЗ Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
	|		ПО СпрНоменклатура.Ссылка = ПредставлениеТоваровКонтрагентами.Номенклатура
	|ГДЕ ";
	
	Если ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Запрос.Текст = Запрос.Текст + " СпрНоменклатура.НоменклатурнаяГруппа = &ПараметрОтбора ";   
		Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора);
		
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Номенклатура") 
		И ОбщийМодульПовтор.ЭтоГруппа(ПараметрОтбора) Тогда
		
		Запрос.Текст = Запрос.Текст + " СпрНоменклатура.Ссылка В ИЕРАРХИИ (&ПараметрОтбора) ";   
		Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора);
	ИначеЕсли ТипЗнч(ПараметрОтбора) = Тип("СправочникСсылка.Производители") Тогда
		Запрос.Текст = Запрос.Текст + " СпрНоменклатура.Производитель = &ПараметрОтбора ";   
		Запрос.УстановитьПараметр("ПараметрОтбора", ПараметрОтбора);
		
	Иначе
		Запрос.Текст = Запрос.Текст + " ИСТИНА ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик ";
		Запрос.УстановитьПараметр("КлиентПоставщик", Объект.КлиентПоставщик);			   
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Поле) Тогда
		Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Поле = &Поле ";
		Запрос.УстановитьПараметр("Поле", Объект.Поле); 
	КонецЕсли;
	// Если ЗначениеЗаполнено(Объект.Язык) Тогда
	// 	Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Поле = &Язык ";
	// 	Запрос.УстановитьПараметр("Язык", Объект.Язык); 
	// КонецЕсли;
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Ссылка";
	
	
	Запрос.УстановитьПараметр("ЯзыкПоУмолчанию", Объект.Язык);
	Запрос.УстановитьПараметр("ПолеПоУмолчанию", Объект.Поле);
	Запрос.УстановитьПараметр("ПустойКлиент", Объект.КлиентПоставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.ссылка);
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаТовара = Объект.Товары.Добавить();
				СтрокаТовара.номенклатура 	= ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаТовара.КлиентПоставщик = ВыборкаДетальныеЗаписи.КлиентПоставщик;
				СтрокаТовара.Поле = ВыборкаДетальныеЗаписи.Поле;
				СтрокаТовара.Язык = ВыборкаДетальныеЗаписи.Язык;
				СтрокаТовара.ЗначениеПредставления = ВыборкаДетальныеЗаписи.ЗначениеПредставления;
				СтрокаТовара.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
				СтрокаТовара.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Язык, СтрокаТовара.Поле);
			КонецЕсли;
		КонецЦикла;     	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуНаСервере()
	
	Объект.Товары.Очистить();
	Попытка 
		Объект.ТовараВКоличестве = 0;
		Объект.ТовараНаСумму 	 = 0;
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьКонтрагентаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.КлиентПоставщик = Объект.КлиентПоставщик;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКонтрагента(Команда)
	НазначитьКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура НазначитьЯзыкНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Язык) Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.Язык = Объект.Язык;
			СтрокаТовара.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Язык, СтрокаТовара.Поле);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЯзык(Команда)
	НазначитьЯзыкНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеКонтрагента(Команда)
	ЗагрузитьДанныеКонтрагентаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеКонтрагентаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПредставлениеТоваровКонтрагентами.Номенклатура,
		|	ПредставлениеТоваровКонтрагентами.КлиентПоставщик,
		|	ПредставлениеТоваровКонтрагентами.Поле,
		|	ПредставлениеТоваровКонтрагентами.Язык,
		|	ПредставлениеТоваровКонтрагентами.ЗначениеПредставления,
		|	ПредставлениеТоваровКонтрагентами.Комментарий,
		|	ПредставлениеТоваровКонтрагентами.СобственноеПредставление
		|ИЗ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
		|ГДЕ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик";
		
		Запрос.УстановитьПараметр("КлиентПоставщик", Объект.КлиентПоставщик);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	БылиИзменения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПредставленияНоменклатуры(Команда)
	ЗаписатьПредставленияНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПредставленияНоменклатурыНаСервере()
	
	ЯзыкОсновной = ?(ЗначениеЗаполнено(Объект.Язык), Объект.Язык, ПредопределенноеЗначение("Справочник.Языки.Русский"));
	
	БылиИзменения = ЛОЖЬ;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		
		ПК = РегистрыСведений.ПредставлениеТоваровКонтрагентами.СоздатьМенеджерЗаписи();
		ПК.Активность = ИСТИНА;
		ПК.ЗначениеПредставления = СтрокаТовара.ЗначениеПредставления;
		ПК.КлиентПоставщик  	 = СтрокаТовара.КлиентПоставщик;
		ПК.Комментарий  		 = СтрокаТовара.Комментарий;
		ПК.Номенклатура 		 = СтрокаТовара.Номенклатура;
		ПК.СобственноеПредставление = СтрокаТовара.СобственноеПредставление;
		ПК.Поле = СтрокаТовара.Поле;
		ПК.Язык = ?(ЗначениеЗаполнено(СтрокаТовара.Язык), СтрокаТовара.Язык, ЯзыкОсновной);
		ПК.Записать(ИСТИНА);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ВыполняетсяЗакрытие
		И БылиИзменения Тогда
		
		Отказ = ИСТИНА;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Закрыть без сохранения представлений?"), РежимДиалогаВопрос.ДаНет);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = ИСТИНА;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗначениеПредставленияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Поле) Тогда
		ТекущаяСтрока.ЗначениеПредставления = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Язык, ТекущаяСтрока.Поле);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ОбновитьСобственноеЗначениеТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолеПриИзменении(Элемент)
	ОбновитьСобственноеЗначениеТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЯзыкПриИзменении(Элемент)
	ОбновитьСобственноеЗначениеТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСобственноеЗначениеТекущейСтроки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Язык, ТекущаяСтрока.Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГруппойАналогов(Команда)
	
	ФормаВыбораГА = ПолучитьФорму("Справочник.ГруппыАналогов.ФормаВыбора");
	ФормаВыбораГА.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите группу Аналогов для добавления в документ") + ": ";
	ГруппаАналогов = ФормаВыбораГА.ОткрытьМодально();
	Если ЗначениеЗаполнено(ГруппаАналогов) Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка и заполнение таблицы товаров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗаполнитьГруппойАналоговНаСервере(ГруппаАналогов);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппойАналоговНаСервере(Знач ГруппаАналогов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ГруппыАналоговТовары.Номенклатура,
	|	ГруппыАналоговТовары.ЕдиницаИзмерения,
	|	ГруппыАналоговТовары.Количество
	|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
	|ГДЕ ГруппыАналоговТовары.Ссылка = &ГруппаАналогов";
	
	Запрос.УстановитьПараметр("ГруппаАналогов", ГруппаАналогов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			
			Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтрокаТовара = Объект.Товары.Добавить();
				СтрокаТовара.номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				СтрокаТовара.КлиентПоставщик = Объект.КлиентПоставщик;
				СтрокаТовара.Поле = Объект.Поле;
				СтрокаТовара.Язык = Объект.Язык;
				СтрокаТовара.СобственноеПредставление = ОбщийМодульТоварСервер.СобственноеЗначениеНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Язык, СтрокаТовара.Поле);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
