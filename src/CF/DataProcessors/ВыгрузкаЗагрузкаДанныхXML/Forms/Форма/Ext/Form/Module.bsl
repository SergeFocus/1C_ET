// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
	ОчиститьСообщения();
	
	Если Не РежимРаботыНаКлиенте Тогда
		
		Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поле Имя файла не заполнено");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаВыгрузки");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется выгрузка данных. Пожалуйста, подождите.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	
	АдресФайлаВоВременномХранилище = "";
	ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище);
	
	Если РежимРаботыНаКлиенте И Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл выгрузки.xml"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище)
	
	Если РежимРаботыНаКлиенте Тогда
		
		Расширение = ?(Объект.ИспользоватьФорматFastInfoSet, ".fi", ".xml");
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаВыгрузки;
		
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	
	ОбъектНаСервере.ВыполнитьВыгрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРежимПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьИзЗапроса(Команда)
	
	ОткрытьФорму(ИмяФормыКонсолиЗапросов(),ПараметрыКонсолиЗапросов(),ЭтаФорма);
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДополнительныеОбъектыДляВыгрузки

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТипОбъектовДляВыгрузки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда
		
		Элемент.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Элемент.ТекущиеДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище = "";
	
	Если РежимРаботыНаКлиенте Тогда
		
		ТекстФайлВыгрузки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл выгрузки");
		
		Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОписаниеОповещения = Новый ОписаниеОповещения(""ЗагрузитьДанныеЗавершение"", ЭтаФорма); 
		| НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище, ТекстФайлВыгрузки,, УникальныйИдентификатор); ");	
																																			  КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поле Имя файла не заполнено");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаЗагрузки);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл не существует");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеЗавершение(ИСТИНА, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется загрузка данных. Пожалуйста, подождите.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		
		Файл = Новый Файл(ИмяФайлаЗагрузки);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Указанный файл не существует");
			ПутьКДанным = ?(РежимРаботыНаКлиенте, "", "ИмяФайлаЗагрузки");
			СообщитьПользователю(ТекстСообщения, ПутьКДанным);
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)
	
	Если РежимРаботыНаКлиенте Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаЗагрузки;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ВыполнитьЗагрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипуДляЗапроса(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаВыгрузки", СтандартнаяОбработка);
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИмяФайлаВыгрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ИмяФормыКонсолиЗапросов()
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		Обработка = РеквизитФормыВЗначение("Объект");
		ИдентификаторФормы = ".Форма.ВыборИзЗапроса";
		
	ИначеЕсли ВариантИспользованияКонсолиЗапросов = 1 Тогда
		
		Обработка = Обработки["КонсольЗапросов"].Создать();
		ИдентификаторФормы = ".Форма";
		
	Иначе // ВариантИспользованияКонсолиЗапросов = 2
		
		Обработка = ВнешниеОбработки.Создать(ПутьКВнешнейКонсолиЗапросов);
		ИдентификаторФормы = ".ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат Обработка.Метаданные().ПолноеИмя() + ИдентификаторФормы;
	
КонецФункции

&НаСервере
Функция ИмяФормыНастроекКонсолиЗапросов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ИмяФормыНастроек = Обработка.Метаданные().ПолноеИмя() + ".Форма.НастройкиКонсолиЗапросов";
	
	Возврат ИмяФормыНастроек;
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФорматFastInfoSet Тогда
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".fi");
	Иначе
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонсолиЗапросов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
	ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
	
	ОткрытьФорму(ИмяФормыНастроекКонсолиЗапросов(), ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.МножественныйВыбор = ЛОЖЬ;
	ДиалогВыбораФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Задайте имя файла выгрузки");
	ДиалогВыбораФайла.ПолноеИмяФайла = ?(РежимВыгрузки, ИмяФайлаВыгрузки, ИмяФайлаЗагрузки);
	
	ДиалогВыбораФайла.Фильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формат выгрузки") + " (*.xml)|*.xml|FastInfoSet (*.fi)|*.fi|" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все файлы") + " (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если РежимВыгрузки Тогда
			ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранныеЗначения)
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("Структура") Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ВыбранныеЗначения.ДанныеВыбора);
		
		Если ТипЗнч(РезультатЗапроса)=Тип("Массив") Тогда
			
			РезультатЗапроса = РезультатЗапроса[РезультатЗапроса.ВГраница()];
			
			Если РезультатЗапроса.Колонки.Найти("Ссылка") <> Неопределено Тогда
				ВыбранныеСсылки = РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыбранныеСсылки = ВыбранныеЗначения;
		
	КонецЕсли;
	
	Для Каждого Значение Из ВыбранныеСсылки Цикл
		
		НоваяСтрока = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.Объект = Значение.Ссылка;
		НоваяСтрока.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Значение.Ссылка);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиКонсолиЗапросов" Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВПриложении(Элемент, ПутьКДанным, СтандартнаяОбработка)
	Файл = Новый Файл(Элемент.ТекстРедактирования);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	Иначе
		
		СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл не найден"), ПутьКДанным);
		
	КонецЕсли;
	
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДополнительныеОбъектыВыгрузки(Команда)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыКонсолиЗапросов()
	
	ПараметрыФормы = Новый Структура;
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
		ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
		
	Иначе
		
		ПараметрыФормы.Вставить("Заголовок", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбор данных для выгрузки"));
		ПараметрыФормы.Вставить("РежимВыбора", ИСТИНА);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", ЛОЖЬ);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(ИСТИНА);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаботы()
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка и загрузка данных XML") + " ("+РеквизитФормыВЗначение("Объект").ВерсияОбъекта()+")";
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач Текст, Знач ПутьКДанным = "")
	ОбщегоНазначения.СообщитьПользователю(Текст, , , ПутьКДанным);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = ЛОЖЬ;
	НайденыВыключенные = ЛОЖЬ;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = ИСТИНА;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = ИСТИНА;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры
