// sza140228-1424
// sza110805-1642
// sza110721-0300 sz:
// sza110520-0133 поккасса И ФИКС
// sza110506-1640 ПОВыполнятьВТранзакциях
// sza110506-1623 ПриводитьАртикулКСимволамНаРусском
// sza110407-0227
// sza110322-1650
// sza110319-1612
// sza110315-1728
// sza110314-2131
// sza110313-2140
// sza110312-1230
// sza110311-1534
// sza110309-1626 ОбменСПОDBFВидимость
// sza110209-1649
// sza101216-0200
// sza101207-1411
// sza101207-1238
// sza101202-2102
// sza101202-0144
// sza101119-1152
// sza101117-1610
// sza101115-1639
// sza101114-2316
// sza101114-0309
// sza101111-1620
// sza101110-1455
// sza101109-1809
// sza101105-0308
// sza101103

&НаКлиенте
Процедура АдресВторогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонВремени);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл времени:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресВторогоФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;

	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресВторогоФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресВторогоФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресФайла1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонЗаготовки);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл заготовки:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;

	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресФайла2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонСвернутойСпецификации);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл свернутой спецификации:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;

	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ТекущаяСтраницаПОDBF = 0 Тогда
		ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите каталог :";
	Иначе
		СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонШапки, ИСТИНА);
		ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
		ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
		ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл :";
		ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
		ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;
		ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
		ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
		ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	КонецЕсли;

	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Если ТекущаяСтраницаПОDBF = 0 Тогда
			Объект.АдресФайла = ДиалогВыбораФайлаИлиКаталога.Каталог;
		Иначе
			Объект.АдресФайла = ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		КонецЕсли;

		Попытка
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   АртикулНоменклатуры(ВладелецСпецификаций)

	Если ЗначениеЗаполнено(ВладелецСпецификаций) Тогда
		Возврат ВладелецСпецификаций.Артикул;
	Иначе

		Возврат "";
	КонецЕсли;

КонецФункции // АртикулНоменклатуры(Объект.ВладелецСпецификаций)

&НаКлиенте
Процедура БезОграниченияПоПериоду1ПриИзменении(Элемент)
	ОбновитьДоступностьДатПериода();
КонецПроцедуры

&НаКлиенте
Процедура БезОграниченияПоПериодуПриИзменении(Элемент)

	ОбновитьДоступностьДатПериода();

КонецПроцедуры

&НаКлиенте
Процедура ВладелецСпецификаций1ПриИзменении(Элемент)

	ЭтаФорма.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);

КонецПроцедуры

&НаКлиенте
Процедура ВладелецСпецификацийПриИзменении(Элемент)

	ЭтаФорма.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеПоШаблону(ШаблонФайла, ТекстДиалогаФайла = Неопределено, ДополнительныйПараметр = Неопределено) Экспорт

	Если ТекстДиалогаФайла = Неопределено ТОгда
		ТекстДиалогаФайла = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл выгрузки");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда

		ПериодДляДокументов = "";
	Иначе
		ПериодДляДокументов = Новый Структура;
		ПериодДляДокументов.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПериодДляДокументов.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	КонецЕсли;

	СтруктураИмпортаЭкспорта = ПодсистемаИЭКлиент.СоздатьСтруктуруВызоваИмпЭкспОперации(
	Объект,
	ШаблонФайла,
	ИСТИНА,
	Объект.АдресФайла,
	"",  	,
	ПериодДляДокументов,
	ДополнительныйПараметр);

	Если ДополнительныйПараметр = "Спецификации" Тогда
		СтруктураИмпортаЭкспорта.ВладелецСпецификаций = Объект.ВладелецСпецификаций;
		СтруктураИмпортаЭкспорта.ХарактеристикаВладельцаСпецификации = Объект.ХарактеристикаВладельцаСпецификации;
		СтруктураИмпортаЭкспорта.АдресВторогоФайла = Объект.АдресВторогоФайла;
	Иначе
		СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "DBFНоменклатура";
	КонецЕсли;

	СтруктураИмпортаЭкспорта.ДляТаблицыМатериалы = Объект.ДляТаблицыМатериалы;
	СтруктураИмпортаЭкспорта.ДатаАктуальности 	 = Объект.ДатаАктуальности;
	СтруктураИмпортаЭкспорта.ТипОбъектаОперации  = СокрЛП(Объект.ТипОбъектаОперации);
	СтруктураИмпортаЭкспорта.РежимТестирования 	 = Объект.РежимТестирования;
	ПодсистемаИЭКлиент.ИмпортЭкспортОбработкаОбмена(СтруктураИмпортаЭкспорта);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРазвернутойСпецификации(Команда)

	Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		ШаблонФайла = Объект.ШаблонЗаготовки;
		ВыгрузитьДанныеПоШаблону(ШаблонФайла, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл выгрузки заготовки спецификации"), "Спецификации");
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбран владелец спецификации!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаСвернутойСпецификации(Команда)

	ШаблонФайла = Объект.ШаблонЗаготовки;
	ВыгрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл выгрузки свернутой спецификации", "Спецификации");

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЦенДляПОDBFВФайлФорматаMSExcel(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	ВыгрузитьДанныеПоШаблону(ШаблонФайла);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачала2ПриИзменении(Элемент)

	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончания2ПриИзменении(Элемент)

	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбИзделииНажатие(Элемент)

	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия(1);
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОматериалеНажатие(Элемент)

	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия();
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОПокупателеНажатие(Элемент)

	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия(2);
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);

КонецПроцедуры

&НаСервере
Процедура ДопроверитьСоставы() // Экспорт

	// из-за многовложенности невозожно все время содержать весь стек спецификаций
	// Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций.Спецификация) Тогда

	// 	ПроверитьСоставСпецификации(Объект.ВладелецСпецификаций.Спецификация);
	//
	// Иначе
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Специификация объекта владельца спецификации не установлена.");
	// 	Сообщение.УстановитьДанные(Объект);
	// 	Сообщение.Сообщить();
	// КонецЕсли;

КонецПроцедуры // ДопроверитьСоставы

&НаСервере
Процедура ЗагруженыЛиПредопределенныеШаблоныDBF(ОбновитьОбязательно = ЛОЖЬ)

КонецПроцедуры // ЗагруженыЛиПредопределенныеШаблоныDBF

&НаСервере
Процедура ЗагруженыЛиПредопределенныеШаблоныСпецификаций(ОбновитьОбязательно = ЛОЖЬ)

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПоШаблону(ШаблонФайла, Т = "", ДополнительныйПараметр = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда

		ПериодДляДокументов = "";
	Иначе
		ПериодДляДокументов = Новый Структура;
		ПериодДляДокументов.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПериодДляДокументов.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	КонецЕсли;

	СтруктураИмпортаЭкспорта = ПодсистемаИЭКлиент.СоздатьСтруктуруВызоваИмпЭкспОперации(
	Объект,
	ШаблонФайла,
	ЛОЖЬ,
	Объект.АдресФайла,
	"", 	,
	ПериодДляДокументов,
	ДополнительныйПараметр);

	Если ДополнительныйПараметр = "Спецификации" Тогда
		СтруктураИмпортаЭкспорта.ВладелецСпецификаций = Объект.ВладелецСпецификаций;
		СтруктураИмпортаЭкспорта.ХарактеристикаВладельцаСпецификации = Объект.ХарактеристикаВладельцаСпецификации;
		СтруктураИмпортаЭкспорта.АдресВторогоФайла = Объект.АдресВторогоФайла;
		СтруктураИмпортаЭкспорта.Вставить("ПриводитьАртикулКСимволамНаРусском", Объект.ПриводитьАртикулКСимволамНаРусском);

		Если ШаблонФайла = СправочникиПодсистемаИЭШаблоныСпецификацияЗаготовка() Тогда
			СтруктураИмпортаЭкспорта.ПредПодготовка = ИСТИНА; // очистка спецификаций
		КонецЕсли;
	ИначеЕсли ДополнительныйПараметр = "СпецификацииСвернутые" Тогда
		Если НЕ Объект.ЭлементСоставаОпределяетсяПоАртикулу Тогда
			СтруктураИмпортаЭкспорта.ПредПодготовка = ИСТИНА;
		КонецЕсли;

		СтруктураИмпортаЭкспорта.Вставить("ЭлементСоставаОпределяетсяПоАртикулу", Объект.ЭлементСоставаОпределяетсяПоАртикулу);
	КонецЕсли;

	СтруктураИмпортаЭкспорта.ДляТаблицыМатериалы = Объект.ДляТаблицыМатериалы;
	СтруктураИмпортаЭкспорта.ДатаАктуальности = Объект.ДатаАктуальности;
	СтруктураИмпортаЭкспорта.ТипОбъектаОперации = СокрЛП(Объект.ТипОбъектаОперации);
	СтруктураИмпортаЭкспорта.РежимТестирования = Объект.РежимТестирования;
	ПодсистемаИЭКлиент.ИмпортЭкспортОбработкаОбмена(СтруктураИмпортаЭкспорта);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказыПокупателейИзПОDBF(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Заказов покупателей");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхСписком(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.АдресФайла) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан адрес каталога с файлами Из ПО DBF!"));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Начало загрузки..") + " " + ТекущаяДата());
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("..конец загрузки") + ": " + ТекущаяДата());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовНаПроизводствоИзПОDBF(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказНаПроизводство"); // на производство

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовПокупателяИзПОDBF(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказПокупателя"); // покупателя

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовПоставщикамИзПОDBF(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказПоставщику"); // поставщикам

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНоменклатурыИзПОDBF(Команда)

	ШаблонФайла =  СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНоменклатурыИЦенИзПОDBFИзФайлаФорматаMSExcel(Команда)

	ШаблонФайла = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПоВидуДокументовИзПОDBF(Команда)

	Если ЗначениеЗаполнено(Объект.ЗагружаемыйВидДокументов) Тогда
		ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл загрузки Данных ПО") + " DBF (BASE11)", СокрЛП(Объект.ЗагружаемыйВидДокументов));
	Иначе
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тип документов не указан!") , 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаРазвернутойСпецификации(Команда)

	Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		ШаблонФайла = Объект.ШаблонЗаготовки;
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл загрузки заготовки спецификации"), "Спецификации");
		ДопроверитьСоставы();
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбран владелец спецификации!"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСвернутойСпецификации(Команда)

	ШаблонФайла = Объект.ШаблонСвернутойСпецификации;
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки свернутой спецификации", "СпецификацииСвернутые");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСпецификаций(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан владелец спецификаций!"));
	Иначе
		ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл загрузки Данных ПО DBF (BASE11)"), "Спецификации");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   КонстантыSZИмпортЭкспортСПОDBF()

	Возврат ЛОЖЬ;// Константы.SZИмпортЭкспортСПОDBF.Получить();

КонецФункции

&НаКлиенте
Процедура ОбновитьДоступностьДатПериода() Экспорт

	Если Объект.БезОграниченияПоПериоду Тогда
		Объект.ДатаНачала = '00010101000000';
		Объект.ДатаОкончания = '00010101000000';
		Элементы.ДатаНачала.Доступность = ЛОЖЬ;
		Элементы.ДатаОкончания.Доступность = ЛОЖЬ;
		Элементы.ДатаНачала1.Доступность = ЛОЖЬ;
		Элементы.ДатаОкончания1.Доступность = ЛОЖЬ;
	Иначе
		Элементы.ДатаНачала.Доступность = ИСТИНА;
		Элементы.ДатаОкончания.Доступность = ИСТИНА;
		Элементы.ДатаНачала1.Доступность = ИСТИНА;
		Элементы.ДатаОкончания1.Доступность = ИСТИНА;
	КонецЕсли;

КонецПроцедуры // ОбновитьДоступностьДатПериода

&НаКлиенте
Процедура ОбновитьПредопределенныеШаблоны(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьПредопределенныеШаблоныЗавершение", ЭтаФорма), "Вы уверены, что готовы исправить все настройки предопределенных шаблонов обмена на стандартные?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредопределенныеШаблоныЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагруженыЛиПредопределенныеШаблоныDBF(ИСТИНА)	 ;
		ЗагруженыЛиПредопределенныеШаблоныСпецификаций(ИСТИНА)	;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ПолучитьОпределенноеДляОткрытия(Режим = 0)

	//Если Режим = 0 Тогда
	//	Возврат Справочники.Номенклатура.НеизвестныйМатериал ;
	//ИначеЕсли Режим = 1 Тогда
	//	Возврат Справочники.Номенклатура.НеизвестныйТовар ;
	//ИначеЕсли Режим = 2 Тогда
	//	Возврат Справочники.Контрагенты.НевыясненныйПокупатель;
	//КонецЕсли;

	Возврат неопределено;

КонецФункции // ПолучитьОпределенноеДляОткрытия()

&НаСервере
Процедура ПолучитьСписокДокументовСЗапасами()

	Элементы.ЗагружаемыйВидДокументов.СписокВыбора.Очистить();

	Для Каждого ВидДокумента Из Метаданные.Документы Цикл
		Если ВидДокумента.ТабличныеЧасти.Найти("Запасы") <> Неопределено Тогда
			Если ВидДокумента.ТабличныеЧасти["Запасы"].Реквизиты.Найти("Номенклатура") <> Неопределено Тогда
				Элементы.ЗагружаемыйВидДокументов.СписокВыбора.Добавить(ВидДокумента.Имя, ВидДокумента.Синоним);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	Попытка
		Элементы.РазвернутыеСпецификации.Видимость = НЕ Параметры.КлючНазначенияИспользования;
		Элементы.СвернутыеСпецификации.Видимость = НЕ Параметры.КлючНазначенияИспользования;
	Исключение
	КонецПопытки;
	ОбменСПОDBFВидимость = ЛОЖЬ;
	Попытка
		ОбменСПОDBFВидимость = КонстантыSZИмпортЭкспортСПОDBF();
	Исключение
	КонецПопытки;
	Элементы.ОбменСПОDBF.Видимость = ОбменСПОDBFВидимость;
	ЭтаФорма.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);
	ЗагруженыЛиПредопределенныеШаблоныDBF();
	ЗагруженыЛиПредопределенныеШаблоныСпецификаций() 	;
	Объект.ШаблонНоменклатурыИЦен = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF();
	Объект.ШаблонНоменклатурыИЦенExcel = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	Объект.ШаблонШапки = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	Объект.ШаблонТела = СправочникиПодсистемаИЭШаблоныОбменТелоЗаказаСПОDBF();
	Объект.ШаблонЗаказаПокупателя = СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF();
	Объект.ШаблонСвернутойСпецификации = СправочникиПодсистемаИЭШаблоныШаблонСвернутойСпецификации();

	Если НЕ ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли;

	Если НЕ Параметры.КлючНазначенияИспользования Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Объект.ДатаОкончания = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДатаОкончания)
		И Объект.ДатаОкончания < Объект.ДатаНачала Тогда

		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;

	ПолучитьСписокДокументовСЗапасами();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

	//Объект.ШаблонЗаготовки = Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка ;
	//Объект.ШаблонВремени = Справочники.ПодсистемаИЭШаблоны.СпецификацияВремя ;
	УстановитьВидимостьДоступность();

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF() // Экспорт

	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBF;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.ИмпортНоменклатурыИзПОDBF

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL() // Экспорт

	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBFEXCEL;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.ИмпортНоменклатурыИзПОDBFEXCEL

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF()

	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныОбменТелоЗаказаСПОDBF()

	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменТелоЗаказаСПОDBF;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF()

	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменШапкаЗаказаСПОDBF;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция   СправочникиПодсистемаИЭШаблоныСпецификацияЗаготовка()

	//Возврат Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка;

	Возврат неопределено;

КонецФункции // Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка

Функция   СправочникиПодсистемаИЭШаблоныШаблонСвернутойСпецификации()

//	Возврат Справочники.ПодсистемаИЭШаблоны.СпецификацияЧтоКуда;

Возврат неопределено;

КонецФункции

&НаКлиенте
Процедура СтраницыФормыDBFПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ЗагрузкаВсехДанныхСписком Тогда
		ТекущаяСтраницаПОDBF = 0;
	Иначе
		ТекущаяСтраницаПОDBF = 1;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьДоступность() // Экспорт

	Если ТекущаяСтраницаПОDBF = 0 Тогда
		Элементы.АдресФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог файлов ПО DBF") + " ";
	Иначе
		Элементы.АдресФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Адрес файла ПО DBF") + " ";
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьДоступность
