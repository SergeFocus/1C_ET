// sza140228-1424  
// sza110805-1642 
// sza110721-0300 sz: 
// sza110520-0133 поккасса И ФИКС
// sza110506-1640 ПОВыполнятьВТранзакциях
// sza110506-1623 ПриводитьАртикулКСимволамНаРусском
// sza110407-0227 
// sza110322-1650 
// sza110319-1612 
// sza110315-1728 
// sza110314-2131 
// sza110313-2140 
// sza110312-1230 
// sza110311-1534 
// sza110309-1626 ОбменСПОDBFВидимость
// sza110209-1649 
// sza101216-0200       
// sza101207-1411      
// sza101207-1238      
// sza101202-2102       
// sza101202-0144       
// sza101119-1152       
// sza101117-1610       
// sza101115-1639       
// sza101114-2316       
// sza101114-0309       
// sza101111-1620       
// sza101110-1455       
// sza101109-1809       
// sza101105-0308       
// sza101103
&НаКлиенте
Процедура АдресВторогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонВремени);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл времени:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресВторогоФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;
	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресВторогоФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка 
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресВторогоФайла);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресФайла1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонЗаготовки);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл заготовки:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;
	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка 
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФайла2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонСвернутойСпецификации);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл свернутой спецификации:";
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
	ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
	ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
	ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;
	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Объект.АдресФайла= ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		Попытка 
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекущаяСтраницаПОDBF = 0 Тогда		
		ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите каталог :";
	Иначе
		СтруктураДиалогФильтр = ПодсистемаИЭ.СтруктураДиалогФильтр(Объект.ШаблонШапки, ИСТИНА);
		ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
		ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
		ДиалогВыбораФайлаИлиКаталога 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлаИлиКаталога.Заголовок				=	"Выберите файл :";
		ДиалогВыбораФайлаИлиКаталога.ПредварительныйПросмотр	=	ИСТИНА;
		ДиалогВыбораФайлаИлиКаталога.ПроверятьСуществованиеФайла	=	ЛОЖЬ;
		ДиалогВыбораФайлаИлиКаталога.ИндексФильтра			=	0;
		ДиалогВыбораФайлаИлиКаталога.Фильтр					=	ДиалогФильтр;
		ДиалогВыбораФайлаИлиКаталога.Расширение				=	ДиалогРасширение;
	КонецЕсли;
	
	ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла			=	Объект.АдресФайла;
	ДиалогВыбораФайлаИлиКаталога.МножественныйВыбор		=	ЛОЖЬ;
	
	Если ДиалогВыбораФайлаИлиКаталога.Выбрать() Тогда
		Если ТекущаяСтраницаПОDBF = 0 Тогда		
			Объект.АдресФайла = ДиалогВыбораФайлаИлиКаталога.Каталог;
		Иначе
			Объект.АдресФайла = ДиалогВыбораФайлаИлиКаталога.ПолноеИмяФайла;
		КонецЕсли;
		Попытка 
			ПодсистемаИЭ.константыПодсистемаИЭУстановить(Объект.АдресФайла);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АртикулНоменклатуры(ВладелецСпецификаций)
	Если ЗначениеЗаполнено(ВладелецСпецификаций) Тогда
		Возврат ВладелецСпецификаций.Артикул;	
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // АртикулНоменклатуры(Объект.ВладелецСпецификаций)

&НаКлиенте
Процедура БезОграниченияПоПериоду1ПриИзменении(Элемент)
	ОбновитьДоступностьДатПериода();
КонецПроцедуры

&НаКлиенте
Процедура БезОграниченияПоПериодуПриИзменении(Элемент)
	
	ОбновитьДоступностьДатПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСпецификаций1ПриИзменении(Элемент)
	Этаформа.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСпецификацийПриИзменении(Элемент)
	Этаформа.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);
КонецПроцедуры

//&НаСервере
//Процедура ВЛог(ОбъектЛога, СобытиеТут = "Запись") // процедура используется в программно генерируемых элементах	
//	
//	Если Объект.ПОВестиЛог Тогда
//		тд = Новый ТекстовыйДокумент;
//		Попытка 
//			тд.Прочитать("C:\TEMP\tdlog.txt");	
//		Исключение 	
//			
//		КонецПопытки;
//		
//		Попытка 
//			Типтут = СокрЛП(типзнч(ОбъектЛога));
//		Исключение 	
//			ТипТут = "";
//			
//		КонецПопытки;
//		тд.ДобавитьСтроку("" + ТекущаяДата() + " - " + СобытиеТут + " " + ТипТут + " " + ОбъектЛога);
//		тд.Записать("C:\TEMP\tdlog.txt");
//		
//	КонецЕсли;	
//	
//КонецПроцедуры // ВЛог

&НаКлиенте
Процедура ВыгрузитьДанныеПоШаблону(ШаблонФайла, ТекстДиалогаФайла = Неопределено, ДополнительныйПараметр = Неопределено) Экспорт
	
	Если ТекстДиалогаФайла = Неопределено ТОгда
		ТекстДиалогаФайла = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл выгрузки");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) 
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ПериодДляДокументов = "";
	Иначе
		ПериодДляДокументов = Новый Структура;
		ПериодДляДокументов.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПериодДляДокументов.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	КонецЕсли;
	
	СтруктураИмпортаЭкспорта = ПодсистемаИЭКлиент.СоздатьСтруктуруВызоваИмпЭкспОперации(
	Объект, 
	ШаблонФайла, 
	ИСТИНА, 
	Объект.АдресФайла, 
	"",  	,
	ПериодДляДокументов,
	ДополнительныйПараметр);
	
	Если ДополнительныйПараметр = "Спецификации" Тогда
		СтруктураИмпортаЭкспорта.ВладелецСпецификаций = Объект.ВладелецСпецификаций;
		СтруктураИмпортаЭкспорта.ХарактеристикаВладельцаСпецификации = Объект.ХарактеристикаВладельцаСпецификации;
		СтруктураИмпортаЭкспорта.АдресВторогоФайла = Объект.АдресВторогоФайла;
	Иначе	
		СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "DBFНоменклатура";	
	КонецЕсли;	
	СтруктураИмпортаЭкспорта.ДляТаблицыМатериалы = Объект.ДляТаблицыМатериалы;
	СтруктураИмпортаЭкспорта.ДатаАктуальности 	 = Объект.ДатаАктуальности;
	СтруктураИмпортаЭкспорта.ТипОбъектаОперации  = СокрЛП(Объект.ТипОбъектаОперации);
	СтруктураИмпортаЭкспорта.РежимТестирования 	 = Объект.РежимТестирования;	
	
	ПодсистемаИЭКлиент.ИмпортЭкспортОбработкаОбмена(СтруктураИмпортаЭкспорта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРазвернутойСпецификации(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		ШаблонФайла = Объект.ШаблонЗаготовки;
		ВыгрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл выгрузки заготовки спецификации", "Спецификации");
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран владелец спецификации!";
		Сообщение.Поле = "ВладелецСпецификации1";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаСвернутойСпецификации(Команда)
	
	ШаблонФайла = Объект.ШаблонЗаготовки;
	ВыгрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл выгрузки свернутой спецификации", "Спецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЦенДляПОDBFВФайлФорматаMSExcel(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	ВыгрузитьДанныеПоШаблону(ШаблонФайла);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачала2ПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончания2ПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбИзделииНажатие(Элемент)
	
	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия(1);
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОматериалеНажатие(Элемент)
	
	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия();
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОПокупателеНажатие(Элемент)
	
	ОпределенноеДляОткрытия = ПолучитьОпределенноеДляОткрытия(2);
	ПоказатьЗначение(Неопределено, ОпределенноеДляОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ДопроверитьСоставы() // Экспорт	
	// из-за многовложенности невозожно все время содержать весь стек спецификаций
	
	// Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций.Спецификация) Тогда
	// 	ПроверитьСоставСпецификации(Объект.ВладелецСпецификаций.Спецификация);	
	// 	
	// Иначе
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Специификация объекта владельца спецификации не установлена.");
	// 	Сообщение.УстановитьДанные(Объект);
	// 	Сообщение.Сообщить();
	// КонецЕсли;	
	
КонецПроцедуры // ДопроверитьСоставы

&НаСервере
Процедура ЗагруженыЛиПредопределенныеШаблоныDBF(ОбновитьОбязательно = ЛОЖЬ) 
	
	// ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
	// 
	// ТипПоля = Справочники.ПодсистемаИЭПоля;
	// ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF;
	// Если ОбновитьОбязательно 
	// 	ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	// 	
	// 	ПодсистемаИЭ.ЗаполнитьКомментарииИТипы();
	// 	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();	
	// 	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "DBFЗаказы";
	// 	ШаблонОпределенный.МаскаФайла = "BASE11.DBf";
	// 	ШаблонОпределенный.ВидШаблона = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	// 	ШаблонОпределенный.ВыдаватьЗапросДляИнтервалаДокументов = ИСТИНА;
	// 	ШаблонОпределенный.КодировкаDOS = ИСТИНА;
	// 	ШаблонОпределенный.Комментарий = "Предопределенный шаблон загрузки собственно заказов из ПОDBF";
	// 	ШаблонОпределенный.НеПропускатьНепроведенныеДокументы = ИСТИНА;
	// 	ШаблонОпределенный.НеПропускатьОбъектыПомеченныеНаУдаление = ИСТИНА;
	// 	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	// 	ПоследовательностьПолейВФайле.Очистить();
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер заказа в ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "ZAKNUM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НомерДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Идентификатор заказа в ПОDBF (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "ZAKID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Адрес (в комментарий)";
	// 	ПолеШаблона.ИмяПоляВФайле = "ADRESS";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Комментарий;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Количество";
	// 	ПолеШаблона.ИмяПоляВФайле = "KOLVO";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Количество;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "  (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "KOLVOMKV";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	ПолеШаблона.КомментарийПоля = "Заказчик";
	// 	ПолеШаблона.ИмяПоляВФайле = "ZAKAZCHIK";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НаименованиеКонтрагента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Дата документа";
	// 	ПолеШаблона.ИмяПоляВФайле = "DATE";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ДатаДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Дата изготовления (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "DATEIZGOT";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Дата доставки";
	// 	ПолеШаблона.ИмяПоляВФайле = "DATEDOSTAV";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ДатаОтгрузки;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Дата монтажа (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "DATEMONTAG";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Тип доставки (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOSTAVTYP";		
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Тип монтажа (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "MONTAGTYP";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Ответственный пользователь (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "USEROWN";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Кто зарегистрировал (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "USER";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Трудозатраты (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "TRUDOZATR";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Группа товара";
	// 	ПолеШаблона.ИмяПоляВФайле = "PROFNAME";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.РодительЭлемента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Серия (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SERIES";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма заказа";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMMA";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Сумма;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Оплачено";
	// 	ПолеШаблона.ИмяПоляВФайле = "PROPL";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Всего;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Долг (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOLG";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма за профиль (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMPROF";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма за комплектующие (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMKOMP";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " ";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMUPL";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	
	// 	ПолеШаблона.КомментарийПоля = " ";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMOST";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	
	// 	ПолеШаблона.КомментарийПоля = "Сумма за фурнитуру (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMFURN";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " ";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMMATMONT";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Скидка 1 (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SKIDKA1";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Скидка 2 (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SKIDKA2";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма за доставку (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMDOST";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма за дополнительные материалы (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMDOPMAT";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " ";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMDOPMATM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "ИТОГО Сумма (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMITOG";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Продтайм (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "PRODTIME";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "ГородКонтрагента";;
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "ZKZCHCITY";
	// 	СтруктураПоля.Комментарий = "Город контрагента";
	// 	СтруктураПоля.ДлинаТут = 20;
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "НаименованиеБанка";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "ZKZCHBANK";
	// 	СтруктураПоля.Комментарий = "Банк заказчика";
	// 	СтруктураПоля.ДлинаТут = 30;
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "НомерРасчетногоСчета";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "ZKZCHRSCH";
	// 	СтруктураПоля.Комментарий = "Расчетный счет заказчика";
	// 	СтруктураПоля.ДлинаТут = 20;
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "МФО";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "ZKZCHMFO";
	// 	СтруктураПоля.Комментарий = "МФО счета заказчика";
	// 	СтруктураПоля.ДлинаТут = 10;
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ШаблонОпределенный.ИспользоватьТолькоДляИмпорта = ИСТИНА;
	// 	ШаблонОпределенный.РазделительПолей=";";
	// 	ШаблонОпределенный.РазделительЧисел=",";
	// 	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.DBF;
	// 	
	// 	Попытка 
	// 		ШаблонОпределенный.Записать();
	// 		Сообщение = Новый СообщениеПользователю;
	// 		Сообщение.Текст = "Предопределенный шаблон Загрузки шапки заказов и поля обновлены.";
	// 		Сообщение.Сообщить();
	// 	Исключение 
	// 		Если ВыводитьСообщенияОбОшибках тогда
	// 			Сообщение  =  Новый СообщениеПользователю;
	// 			Сообщение.Текст  =  ОписаниеОшибки();
	// 			Сообщение.УстановитьДанные(Объект);
	// 			Сообщение.Сообщить();
	// 		КонецЕсли;
	// 	КонецПопытки;  // записи  ШаблонОпределенный
	// КонецЕсли;
	// 
	// ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBF;
	// Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	// 	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();
	// 	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "DBFНоменклатура";
	// 	// ШаблонОпределенный.АдресФайла  = "";
	// 	ШаблонОпределенный.ВидШаблона  = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	// 	// ШаблонОпределенный.ВыдаватьЗапросДляИнтервалаДокументов = ЛОЖЬ;
	// 	// ШаблонОпределенный.ГруппаДляНовойНоменклатуры
	// 	// ШаблонОпределенный.КодировкаDOS = ЛОЖЬ;
	// 	ШаблонОпределенный.Комментарий = "Предопределенный шаблон для загрузки номенклатуры из ПОDBF";
	// 	ШаблонОпределенный.РазделительЧисел  =  ",";
	// 	// ШаблонОпределенный.Наименование
	// 	// ШаблонОпределенный.НеПропускатьНепроведенныеДокументы = ЛОЖЬ;
	// 	// ШаблонОпределенный.НеПропускатьОбъектыПомеченныеНаУдаление = ЛОЖЬ;
	// 	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	// 	
	// 	ПоследовательностьПолейВФайле.Очистить();
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер элемента в ПОDBF (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "№ п/п";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Артикул ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Артикул";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.АртикулНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Наименование Номенклатуры";
	// 	ПолеШаблона.ИмяПоляВФайле = "Наименование";
	// 	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НаименованиеОбъекта;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "пустое поле (пропускается)";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Единица измерения ПОDBF";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ЕдиницаИзмеренияНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Валюта цены номенклатуры ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Валюта";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ВалютаДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Цена номенклатуры ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Цена";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Цена;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Раздел номенклатуры в ПОDBF (Группа)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Раздел";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.РодительЭлемента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Группа номенклатуры в ПОDBF (Номенклатурная группа)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Группа";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НоменклатурнаяГруппаНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Производитель (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Производитель";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	// В демо базе не выгружается
	// 	// ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	// ПолеШаблона.КомментарийПоля = "Поставщик";
	// 	// ПолеШаблона.ПолеТаблицы = ТипПоля.НаименованиеКонтрагента;
	// 	// ШаблонОпределенный.ФормироватьПервуюСтрокуИзЗаголовковПолей = ИСТИНА;
	// 	ШаблонОпределенный.РазделительПолей = Символы.Таб;
	// 	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	// 	// ШаблонОпределенный.ФорматПолейДаты = "ДДммГГГГ";
	// 	// ШаблонОпределенный.ФорматФайлаDBF = ЛОЖЬ;
	// 	// ШаблонОпределенный.ФорматФайлаEXCEL = ЛОЖЬ;
	// 	// ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 0;
	// 	Попытка 
	// 		ШаблонОпределенный.Записать();
	// 		Сообщение = Новый СообщениеПользователю;
	// 		Сообщение.Текст = "Предопределенный шаблон Номенклатуры и Цен (текст) и поля обновлены.";
	// 		Сообщение.Сообщить();
	// 	Исключение 	
	// 		Если ВыводитьСообщенияОбОшибках тогда
	// 			Сообщение  =  Новый СообщениеПользователю;
	// 			Сообщение.Текст  =  ОписаниеОшибки();
	// 			Сообщение.УстановитьДанные(Объект);
	// 			Сообщение.Сообщить();
	// 		КонецЕсли;
	// 	КонецПопытки;  // записи  ШаблонОпределенный
	// КонецЕсли;
	// 
	// ШаблонОпределенныйExcel = Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBFEXCEL;
	// Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенныйExcel.ВидШаблона) Тогда
	// 	ШаблонОпределенный = ШаблонОпределенныйExcel.ПолучитьОбъект();
	// 	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "DBFНоменклатура";
	// 	// ШаблонОпределенный.АдресФайла  = "";
	// 	ШаблонОпределенный.ВидШаблона  = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	// 	// ШаблонОпределенный.ВыдаватьЗапросДляИнтервалаДокументов = ЛОЖЬ;
	// 	// ШаблонОпределенный.ГруппаДляНовойНоменклатуры
	// 	// ШаблонОпределенный.КодировкаDOS = ЛОЖЬ;
	// 	ШаблонОпределенный.Комментарий = "Предопределенный шаблон для загрузки номенклатуры из ПОDBF (EXCEL)";
	// 	ШаблонОпределенный.РазделительЧисел  =  ",";
	// 	// ШаблонОпределенный.Наименование
	// 	// ШаблонОпределенный.НеПропускатьНепроведенныеДокументы = ЛОЖЬ;
	// 	// ШаблонОпределенный.НеПропускатьОбъектыПомеченныеНаУдаление = ЛОЖЬ;
	// 	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	// 	
	// 	ПоследовательностьПолейВФайле.Очистить();
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер строки в файле (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "№ п/п";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Идентификатор в ПОDBF (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Идентификатор";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Наименование Номенклатуры";
	// 	ПолеШаблона.ИмяПоляВФайле = "Наименование";
	// 	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НаименованиеОбъекта;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Единица измерения ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Единица измерения"; // учите русский язык, ув. DBF
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ЕдиницаИзмеренияНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Артикул ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Артикул" ;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.АртикулНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Цвет номенклатуры в ПОDBF (Характеристика номенклатуры)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Цвет";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Характеристика;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Цена номенклатуры ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Цена";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Цена;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Артикул связи ПОDBF (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Артикул связи";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Валюта цены номенклатуры ПОDBF";
	// 	ПолеШаблона.ИмяПоляВФайле = "Валюта";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ВалютаДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Раздел номенклатуры в ПОDBF (Группа)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Раздел";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.РодительЭлемента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Группа номенклатуры в ПОDBF (Номенклатурная группа)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Группа";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НоменклатурнаяГруппаНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Производитель (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Производитель";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Отход (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "Отход";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	// В демо базе не выгружается
	// 	// ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	// ПолеШаблона.КомментарийПоля = "Поставщик";
	// 	// ПолеШаблона.ПолеТаблицы = ТипПоля.НаименованиеКонтрагента;
	// 	
	// 	ШаблонОпределенный.НомерПоляКотороеВсегдаЗаполнено = 1;
	// 	ШаблонОпределенный.РазделительПолей = Символы.Таб;
	// 	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	// 	// ШаблонОпределенный.ФорматПолейДаты = "ДДммГГГГ";
	// 	// ШаблонОпределенный.ФорматФайлаDBF = ЛОЖЬ;
	// 	ШаблонОпределенный.ФормироватьПервуюСтрокуИзЗаголовковПолей = ИСТИНА;
	// 	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.XLS;
	// 	ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 0;
	// 	Попытка 
	// 		ШаблонОпределенный.Записать();
	// 		Сообщение = Новый СообщениеПользователю;
	// 		Сообщение.Текст = "Предопределенный шаблон Номенклатуры и Цен и поля обновлены.";
	// 		Сообщение.Сообщить();
	// 	Исключение 	
	// 		Если ВыводитьСообщенияОбОшибках тогда
	// 			Сообщение  =  Новый СообщениеПользователю;
	// 			Сообщение.Текст  =  ОписаниеОшибки();
	// 			Сообщение.УстановитьДанные(Объект);
	// 			Сообщение.Сообщить();
	// 		КонецЕсли;
	// 	КонецПопытки;  // записи  ШаблонОпределенный
	// КонецЕсли;
	// 
	// ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.ОбменШапкаЗаказаСПОDBF;
	// Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	// 	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();
	// 	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "DBFЗаказ";
	// 	ШаблонОпределенный.МаскаФайла = "BASE11.DBF";
	// 	ШаблонОпределенный.ВидШаблона = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	// 	// ШаблонОпределенный.ВыдаватьЗапросДляИнтервалаДокументов = ЛОЖЬ;
	// 	// ШаблонОпределенный.ГруппаДляНовойНоменклатуры
	// 	ШаблонОпределенный.КодировкаDOS = ИСТИНА;
	// 	ШаблонОпределенный.Комментарий = "Предопределенный шаблон для загрузки шапки заказа из ПОDBF";
	// 	// ШаблонОпределенный.РазделительЧисел  =  ",";
	// 	// ШаблонОпределенный.Наименование
	// 	// ШаблонОпределенный.НеПропускатьНепроведенныеДокументы = ЛОЖЬ;
	// 	// ШаблонОпределенный.НеПропускатьОбъектыПомеченныеНаУдаление = ЛОЖЬ;
	// 	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	// 	
	// 	ПоследовательностьПолейВФайле.Очистить();
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер Документа";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOCID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НомерДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOCNUM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Дата Документа";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOCDATE";
	// 	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ДатаДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Тип документа (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "TYPEID"; // учите русский язык, ув. DBF
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "ZAKAZID" ;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "ZAKAZNUM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Примечание";
	// 	ПолеШаблона.ИмяПоляВФайле = "PRIM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Комментарий;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSESSELF";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "КурсДоллара";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию =  "CURSUSD";
	// 	СтруктураПоля.Комментарий = "Курс доллара";
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	СтруктураПоля.ДлинаТут = 20;
	// 	СтруктураПоля.ТипТут = "N";
	// 	СтруктураПоля.ТочностьТут = 5;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSLVL";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курс гривни (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSUAH";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "КурсРубля";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "CURSRUB";
	// 	СтруктураПоля.Комментарий = "Курс рубля РФ";
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	СтруктураПоля.ДлинаТут = 20;
	// 	СтруктураПоля.ТипТут = "N";
	// 	СтруктураПоля.ТочностьТут = 5;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курс у.е. (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSU_E_";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	// 	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	// 	СтруктураПоля.Наименование = "КурсЕвро";
	// 	СтруктураПоля.ЗаголовокПоляПоУмолчанию =  "CURSEUR";
	// 	СтруктураПоля.Комментарий = "Курс евро";
	// 	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	// 	СтруктураПоля.ДлинаТут = 20;
	// 	СтруктураПоля.ТипТут = "N";
	// 	СтруктураПоля.ТочностьТут = 5;
	// 	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	// 	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	// 	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	// 	
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курс молдавской леи (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSMDL";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курс казахского тэньге (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSKZT";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курс азербайджанского (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSAZM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSNIS";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSAUD";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Курск рублей Белоруссии (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSBYR";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSINR";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSGEL";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "CURSEGP";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ШаблонОпределенный.НомерПоляКотороеВсегдаЗаполнено = 1;
	// 	// ШаблонОпределенный.РазделительПолей = Символы.Таб;
	// 	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	// 	ШаблонОпределенный.ФорматПолейДаты = "ДД.мм.ГГГГ";
	// 	// ШаблонОпределенный.ФормироватьПервуюСтрокуИзЗаголовковПолей = ИСТИНА;
	// 	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.DBF;
	// 	// 		ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 0;
	// 	Попытка 
	// 		ШаблонОпределенный.Записать();
	// 		Сообщение = Новый СообщениеПользователю;
	// 		Сообщение.Текст = "Предопределенный шаблон Загрузки заказа покупателя и поля обновлены.";
	// 		Сообщение.Сообщить();
	// 	Исключение 	
	// 		Если ВыводитьСообщенияОбОшибках тогда
	// 			Сообщение  =  Новый СообщениеПользователю;
	// 			Сообщение.Текст  =  ОписаниеОшибки();
	// 			Сообщение.УстановитьДанные(Объект);
	// 			Сообщение.Сообщить();
	// 		КонецЕсли;
	// 	КонецПопытки;  // записи  ШаблонОпределенный
	// КонецЕсли;
	// 
	// ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.ОбменТелоЗаказаСПОDBF;
	// Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	// 	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();
	// 	ШаблонОпределенный.МаскаФайла  = "BASE12.DBF";
	// 	ШаблонОпределенный.ВидШаблона  = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	// 	// ШаблонОпределенный.ВыдаватьЗапросДляИнтервалаДокументов = ЛОЖЬ;
	// 	// ШаблонОпределенный.ГруппаДляНовойНоменклатуры
	// 	ШаблонОпределенный.КодировкаDOS = ИСТИНА;
	// 	ШаблонОпределенный.Комментарий = "Предопределенный шаблон для загрузки тела производства заказа из ПОDBF";
	// 	// ШаблонОпределенный.РазделительЧисел  =  ",";
	// 	// ШаблонОпределенный.Наименование
	// 	// ШаблонОпределенный.НеПропускатьНепроведенныеДокументы = ЛОЖЬ;
	// 	// ШаблонОпределенный.НеПропускатьОбъектыПомеченныеНаУдаление = ЛОЖЬ;
	// 	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	// 	
	// 	ПоследовательностьПолейВФайле.Очистить();
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер Документа";
	// 	ПолеШаблона.ИмяПоляВФайле = "DOCID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НомерДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Код Номенклатуры";
	// 	ПолеШаблона.ИмяПоляВФайле = "MATID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.НоменклатурыКод;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Артикул Номенклатуры";
	// 	ПолеШаблона.ИмяПоляВФайле = "MATART";
	// 	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.АртикулНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "ART";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Наименование Номенклатуры";
	// 	ПолеШаблона.ИмяПоляВФайле = "MATNAME" ;
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Номенклатура;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Номер цвета (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "COLORID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Цвет (характеристика)";
	// 	ПолеШаблона.ИмяПоляВФайле = "COLOR";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Характеристика;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Единица измерения";
	// 	ПолеШаблона.ИмяПоляВФайле = "EDIZM";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ЕдиницаИзмеренияНоменклатуры;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Количество";
	// 	ПолеШаблона.ИмяПоляВФайле = "KOLVO";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Количество;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = " (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "KOLVO2";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Цена";
	// 	ПолеШаблона.ИмяПоляВФайле = "CENA";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Цена;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Сумма";
	// 	ПолеШаблона.ИмяПоляВФайле = "SUMMA";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Сумма;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Валюта ID (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "VALUTAID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.Сумма;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Валюта";
	// 	ПолеШаблона.ИмяПоляВФайле = "VALUTA";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ВалютаДокумента;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "ID Производителя (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "PROIZVID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	// 	ПолеШаблона.КомментарийПоля = "Имя Производителя (пропускается)";
	// 	ПолеШаблона.ИмяПоляВФайле = "PROIZVID";
	// 	ПолеШаблона.ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле;
	// 	
	// 	ШаблонОпределенный.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = ИСТИНА;
	// 	ШаблонОпределенный.НомерПоляКотороеВсегдаЗаполнено = 1;
	// 	// ШаблонОпределенный.РазделительПолей = Символы.Таб;
	// 	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	// 	ШаблонОпределенный.ФорматПолейДаты = "ДД.мм.ГГГГ";
	// 	// ШаблонОпределенный.ФормироватьПервуюСтрокуИзЗаголовковПолей = ИСТИНА;
	// 	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.DBF;
	// 	// 		ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 0;
	// 	Попытка 
	// 		ШаблонОпределенный.Записать();
	// 		Сообщение = Новый СообщениеПользователю;
	// 		Сообщение.Текст = "Предопределенный шаблон Загрузки заказов и поля обновлены.";
	// 		Сообщение.Сообщить();
	// 	Исключение 	
	// 		Если ВыводитьСообщенияОбОшибках тогда
	// 			Сообщение  =  Новый СообщениеПользователю;
	// 			Сообщение.Текст  =  ОписаниеОшибки();
	// 			Сообщение.УстановитьДанные(Объект);
	// 			Сообщение.Сообщить();
	// 		КонецЕсли;
	// 	КонецПопытки;  // записи  ШаблонОпределенный
	// КонецЕсли;
	// 
КонецПроцедуры // ЗагруженыЛиПредопределенныеШаблоныDBF

&НаСервере
Процедура ЗагруженыЛиПредопределенныеШаблоныСпецификаций(ОбновитьОбязательно = ЛОЖЬ) 
	
	//ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
	//
	//ТипПоля = Справочники.ПодсистемаИЭПоля;
	//ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка;
	//
	//Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	//	ПодсистемаИЭ.ЗаполнитьКомментарииИТипы();
	//	
	//	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();	
	//	Если ШаблонОпределенный.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла = 0 тогда
	//		ШаблонОпределенный.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла = 2;          	
	//	КонецЕсли;
	//	ШаблонОпределенный.ЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.шт ;
	//	ШаблонОпределенный.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияЗапасов.Производство ;
	//	// 		ШаблонОпределенный.СчетУчетаЗапасов = ПланыСчетов.Управленческий.
	//	ШаблонОпределенный.СоздаватьМаркиНоменклатуры = ИСТИНА;
	//	ШаблонОпределенный.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	//	ШаблонОпределенный.СоздаватьМетодыПолученияНоменклатуры = ИСТИНА;
	//	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	//	ШаблонОпределенный.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = ИСТИНА;
	//	
	//	Если ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 0 тогда
	//		ШаблонОпределенный.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = 8;          	
	//	КонецЕсли;
	//	Если ШаблонОпределенный.НомерПоляКотороеВсегдаЗаполнено = 0 тогда
	//		ШаблонОпределенный.НомерПоляКотороеВсегдаЗаполнено = 3;
	//	КонецЕсли;
	//	Если НЕ ЗначениеЗаполнено(ШаблонОпределенный.СоставлятьНаименованиеПоВыражениюИзИменПолей) Тогда
	//		ШаблонОпределенный.СоставлятьНаименованиеПоВыражениюИзИменПолей = "C(Наименование) - B(Артикул)";
	//	КонецЕсли;
	//	
	//	ШаблонОпределенный.РазделительЧисел = ",";
	//	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.XLS;
	//	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "СпецификацияЗаготовка";
	//	ШаблонОпределенный.МаскаФайла = "*.XLS";
	//	ШаблонОпределенный.ВидШаблона = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	//	ШаблонОпределенный.Комментарий = "Предопределенный шаблон загрузки дерева спецификаций заготовок";
	//	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	//	ПоследовательностьПолейВФайле.Очистить();
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.УзелСпецификации;		
	//	ПолеШаблона.КомментарийПоля = "Основной узел";
	//	ПолеШаблона.ИмяПоляВФайле = "A";
	//	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ИСТИНА;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.АртикулНоменклатуры;		
	//	ПолеШаблона.КомментарийПоля = "Артикул";
	//	ПолеШаблона.ИмяПоляВФайле = "B(Артикул)";
	//	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	// ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЛОЖЬ;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.НаименованиеОбъекта;		
	//	ПолеШаблона.КомментарийПоля = "Наименование";
	//	ПолеШаблона.ИмяПоляВФайле = "C(Наименование)";
	//	// ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	// ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЛОЖЬ;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.Количество;		
	//	ПолеШаблона.КомментарийПоля = "Количество";
	//	ПолеШаблона.ИмяПоляВФайле = "D";
	//	// ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	// ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЛОЖЬ;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.КоличествоУзлов;		
	//	ПолеШаблона.КомментарийПоля = "Количество на изделие";
	//	ПолеШаблона.ИмяПоляВФайле = "E";
	//	// ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	// ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЛОЖЬ;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.ВидИзСортамента;		
	//	ПолеШаблона.КомментарийПоля = "Вид (материал) из сортамента";
	//	ПолеШаблона.ИмяПоляВФайле = "F";
	//	// ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	// ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЛОЖЬ;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.ДополнительныйШифрНоменклатуры;
	//	ПолеШаблона.КомментарийПоля = "Типоразмер";
	//	ПолеШаблона.ИмяПоляВФайле = "G";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.МаркаНоменклатуры;
	//	ПолеШаблона.КомментарийПоля = "Марка";
	//	ПолеШаблона.ИмяПоляВФайле = "H";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.КоличествоДеталейВЗаготовке;		
	//	ПолеШаблона.КомментарийПоля = "Количество деталей в заготовке";
	//	ПолеШаблона.ИмяПоляВФайле = "I";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.Комментарий;		
	//	ПолеШаблона.КомментарийПоля = "Размеры заготовки";
	//	ПолеШаблона.ИмяПоляВФайле = "J";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.ВесНоменклатуры;
	//	ПолеШаблона.КомментарийПоля = "Вес заготовки";
	//	ПолеШаблона.ИмяПоляВФайле = "K";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.НормаРасходаМатериала;
	//	ПолеШаблона.КомментарийПоля = "Норма расхода";
	//	ПолеШаблона.ИмяПоляВФайле = "L";
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.МетодПолучения;
	//	ПолеШаблона.КомментарийПоля = "Метод получения";
	//	ПолеШаблона.ИмяПоляВФайле = "M";
	//	
	//	Попытка 
	//		ШаблонОпределенный.Записать();
	//		
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Предопределенный шаблон Загрузки спецификаций заготовок и его поля обновлены.";
	//		Сообщение.Сообщить();
	//	Исключение 	
	//		
	//		Если ВыводитьСообщенияОбОшибках тогда
	//			Сообщение  =  Новый СообщениеПользователю;			
	//			Сообщение.Текст  =  ОписаниеОшибки();
	//			Сообщение.УстановитьДанные(Объект);
	//			Сообщение.Сообщить();
	//		КонецЕсли;
	//	КонецПопытки;  // записи  ШаблонОпределенный
	//	
	//КонецЕсли;		
	//
	//ШаблонОпределенный = Справочники.ПодсистемаИЭШаблоны.СпецификацияЧтоКуда;
	//
	//Если ОбновитьОбязательно ИЛИ НЕ ЗначениеЗаполнено(ШаблонОпределенный.ВидШаблона) Тогда
	//	
	//	ШаблонОпределенный = ШаблонОпределенный.ПолучитьОбъект();	
	//	ШаблонОпределенный.ЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.шт ;
	//	ШаблонОпределенный.ИспользоватьТолькоДляИмпорта = ИСТИНА;
	//	ШаблонОпределенный.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияЗапасов.Производство ;
	//	ШаблонОпределенный.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	//	ШаблонОпределенный.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ИСТИНА;
	//	
	//	ШаблонОпределенный.РазделительЧисел = ",";
	//	ШаблонОпределенный.ФорматФайла = Перечисления.SZИмпортЭкспортФорматыФайлов.DBF;
	//	ШаблонОпределенный.ИмяТаблицыШаблонаФайла = "СпецификацияСвернутая";
	//	ШаблонОпределенный.МаскаФайла = "*.DBF";
	//	ШаблонОпределенный.ВидШаблона = Перечисления.SZИмпортЭкспортФайловВидыШаблонов.Предопределенный ;
	//	ШаблонОпределенный.Комментарий = "Предопределенный шаблон загрузки свернутых спецификаций";
	//	ПоследовательностьПолейВФайле = ШаблонОпределенный.ПоследовательностьПолейВФайле;
	//	ПоследовательностьПолейВФайле.Очистить();
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.Размер1;		
	//	ПолеШаблона.КомментарийПоля = "Номер элемента состава";
	//	ПолеШаблона.ИмяПоляВФайле = "NUM_ZAP1";
	//	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	//	ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ИСТИНА;
	//	СтруктураПоля =  ПодсистемаИЭ.СоздатьСтруктуруПоляШаблона();
	//	СтруктураПоля.Наименование = "НомерВладельца";
	//	СтруктураПоля.ЗаголовокПоляПоУмолчанию = "NUM_ZAP2";
	//	СтруктураПоля.Комментарий = "Номер владельца состава";
	//	СтруктураПоля.ДлинаТут = 25;
	//	СтруктураПоля.СоздаватьВПапкеСпециальные = ИСТИНА;
	//	ПолеШаблона.ПолеТаблицы = ПодсистемаИЭ.ОпределитьПолеДляШаблона(СтруктураПоля);		
	//	ПолеШаблона.КомментарийПоля = СтруктураПоля.Комментарий;
	//	ПолеШаблона.ИмяПоляВФайле = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
	//	
	//	ПолеШаблона = ПоследовательностьПолейВФайле.Добавить();		
	//	ПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭПоля.Количество;		
	//	ПолеШаблона.КомментарийПоля = "Количество элементов состава";
	//	ПолеШаблона.ИмяПоляВФайле = "KOLICH_D";
	//	
	//	Попытка 
	//		ШаблонОпределенный.Записать();
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Предопределенный шаблон Загрузки свернутых спецификаций и его поля обновлены.";
	//		Сообщение.Сообщить();
	//	Исключение 	
	//		
	//		Если ВыводитьСообщенияОбОшибках тогда
	//			Сообщение  =  Новый СообщениеПользователю;
	//			Сообщение.Текст  =  ОписаниеОшибки();
	//			Сообщение.УстановитьДанные(Объект);
	//			Сообщение.Сообщить();
	//		КонецЕсли;
	//	КонецПопытки;  // записи  ШаблонОпределенный
	//	
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПоШаблону(ШаблонФайла, Т = "", ДополнительныйПараметр = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) 
		И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ПериодДляДокументов = "";
	Иначе
		ПериодДляДокументов = Новый Структура;
		ПериодДляДокументов.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПериодДляДокументов.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	КонецЕсли;
	
	СтруктураИмпортаЭкспорта = ПодсистемаИЭКлиент.СоздатьСтруктуруВызоваИмпЭкспОперации(
	Объект, 
	ШаблонФайла, 
	ЛОЖЬ, 
	Объект.АдресФайла, 
	"", 	,
	ПериодДляДокументов,
	ДополнительныйПараметр);
	
	Если ДополнительныйПараметр = "Спецификации" Тогда
		СтруктураИмпортаЭкспорта.ВладелецСпецификаций = Объект.ВладелецСпецификаций;
		СтруктураИмпортаЭкспорта.ХарактеристикаВладельцаСпецификации = Объект.ХарактеристикаВладельцаСпецификации;
		СтруктураИмпортаЭкспорта.АдресВторогоФайла = Объект.АдресВторогоФайла;
		СтруктураИмпортаЭкспорта.Вставить("ПриводитьАртикулКСимволамНаРусском", Объект.ПриводитьАртикулКСимволамНаРусском);
		Если ШаблонФайла = СправочникиПодсистемаИЭШаблоныСпецификацияЗаготовка() Тогда
			СтруктураИмпортаЭкспорта.ПредПодготовка = ИСТИНА; // очистка спецификаций
			
		КонецЕсли;
	ИначеЕсли ДополнительныйПараметр = "СпецификацииСвернутые" Тогда
		Если НЕ Объект.ЭлементСоставаОпределяетсяПоАртикулу Тогда
			СтруктураИмпортаЭкспорта.ПредПодготовка = ИСТИНА;
		КонецЕсли;
		СтруктураИмпортаЭкспорта.Вставить("ЭлементСоставаОпределяетсяПоАртикулу", Объект.ЭлементСоставаОпределяетсяПоАртикулу);
	КонецЕсли;	
	СтруктураИмпортаЭкспорта.ДляТаблицыМатериалы = Объект.ДляТаблицыМатериалы;
	СтруктураИмпортаЭкспорта.ДатаАктуальности = Объект.ДатаАктуальности;
	СтруктураИмпортаЭкспорта.ТипОбъектаОперации = СокрЛП(Объект.ТипОбъектаОперации);
	СтруктураИмпортаЭкспорта.РежимТестирования = Объект.РежимТестирования;
	
	ПодсистемаИЭКлиент.ИмпортЭкспортОбработкаОбмена(СтруктураИмпортаЭкспорта);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказыПокупателейИзПОDBF(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Заказов покупателей");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхСписком(Команда)
	
	// Если НЕ ЗначениеЗаполнено(Объект.ПОКНоменклатураИзделие) Тогда
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = "Не указана номенклатура - изделие!";
	// 	Сообщение.Поле = "ПОКНоменклатураИзделие";
	// 	Сообщение.УстановитьДанные(Объект);
	// 	Сообщение.Сообщить();
	// 	
	// ИначеЕсли SZДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ПолучитьФункциональнуюОпциюИспользоватьХарактеристики()
	// 	И НЕ Объект.ПОКНоменклатураИзделие.ИспользоватьХарактеристики Тогда
	// 	
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = "У указанной номенклатуры - изделия нет учета по характеристикам!";
	// 	Сообщение.Поле = "ПОКНоменклатураИзделие";
	// 	Сообщение.УстановитьДанные(Объект);
	// 	Сообщение.Сообщить();
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресФайла) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан адрес каталога с файлами из ПОDBF!";
		Сообщение.Поле = "АдресФайла";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Начало загрузки.. " + ТекущаяДата();
		Сообщение.Сообщить();
		
		// ЗагрузитьДанныеСпискомНаСервере();
		// ЗагрузитьДанныеСпискомНаСервереВторойШаг();
		// ЗагрузитьДанныеСпискомНаСервереТретийШаг();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "..конец загрузки: " + ТекущаяДата();
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовНаПроизводствоИзПОDBF(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказНаПроизводство"); // на производство
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовПокупателяИзПОDBF(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказПокупателя"); // покупателя
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаказовПоставщикамИзПОDBF(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "ЗаказПоставщику"); // поставщикам
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНоменклатурыИзПОDBF(Команда)
	ШаблонФайла =  СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНоменклатурыИЦенИзПОDBFИзФайлаФорматаMSExcel(Команда)
	ШаблонФайла = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	ЗагрузитьДанныеПоШаблону(ШаблонФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПоВидуДокументовИзПОDBF(Команда)
	Если ЗначениеЗаполнено(Объект.ЗагружаемыйВидДокументов) Тогда
		ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл загрузки Данных ПО") + " DBF (BASE11)", СокрЛП(Объект.ЗагружаемыйВидДокументов)); 		
	Иначе 
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид документов не указан!") , 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание!"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаРазвернутойСпецификации(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		ШаблонФайла = Объект.ШаблонЗаготовки;
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки заготовки спецификации", "Спецификации");
		ДопроверитьСоставы();
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран владелец спецификации!";
		Сообщение.Поле = "ВладелецСпецификации1";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСвернутойСпецификации(Команда)
	
	ШаблонФайла = Объект.ШаблонСвернутойСпецификации;
	ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки свернутой спецификации", "СпецификацииСвернутые");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСпецификаций(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецСпецификаций) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан владелец спецификаций!";
		Сообщение.Поле = "ВладелецСпецификаций";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	Иначе
		ШаблонФайла = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
		ЗагрузитьДанныеПоШаблону(ШаблонФайла, "Укажите файл загрузки Данных ПОDBF (BASE11)", "Спецификации"); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КонстантыSZИмпортЭкспортСПОDBF()
	
	Возврат ЛОЖЬ;// Константы.SZИмпортЭкспортСПОDBF.Получить();
	
КонецФункции

// sza101114-2348       
&НаКлиенте
Процедура ОбновитьДоступностьДатПериода() Экспорт
	
	Если Объект.БезОграниченияПоПериоду Тогда
		Объект.ДатаНачала = '00010101000000';
		Объект.ДатаОкончания = '00010101000000';
		Элементы.ДатаНачала.Доступность = ЛОЖЬ;
		Элементы.ДатаОкончания.Доступность = ЛОЖЬ;
		Элементы.ДатаНачала1.Доступность = ЛОЖЬ;
		Элементы.ДатаОкончания1.Доступность = ЛОЖЬ;
		
	Иначе
		Элементы.ДатаНачала.Доступность = ИСТИНА;
		Элементы.ДатаОкончания.Доступность = ИСТИНА;
		Элементы.ДатаНачала1.Доступность = ИСТИНА;
		Элементы.ДатаОкончания1.Доступность = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьДатПериода

&НаКлиенте
Процедура ОбновитьПредопределенныеШаблоны(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьПредопределенныеШаблоныЗавершение", ЭтаФорма), "Вы уверены, что готовы исправить все настройки предопределенных шаблонов обмена на стандартные?", РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредопределенныеШаблоныЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагруженыЛиПредопределенныеШаблоныDBF(ИСТИНА)	 ;
		ЗагруженыЛиПредопределенныеШаблоныСпецификаций(ИСТИНА)	;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ПолучитьОпределенноеДляОткрытия(Режим = 0)
	
	//Если Режим = 0 Тогда
	//	Возврат Справочники.Номенклатура.НеизвестныйМатериал ;
	//ИначеЕсли Режим = 1 Тогда
	//	Возврат Справочники.Номенклатура.НеизвестныйТовар ;
	//ИначеЕсли Режим = 2 Тогда
	//	Возврат Справочники.Контрагенты.НевыясненныйПокупатель;
	//КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции // ПолучитьОпределенноеДляОткрытия()

&НаСервере
Процедура ПолучитьСписокДокументовСЗапасами()
	Элементы.ЗагружаемыйВидДокументов.СписокВыбора.Очистить();
	Для Каждого ВидДокумента из Метаданные.Документы Цикл 	
		Если ВидДокумента.ТабличныеЧасти.Найти("Запасы") <> Неопределено Тогда
			Если ВидДокумента.ТабличныеЧасти["Запасы"].Реквизиты.Найти("Номенклатура") <> Неопределено Тогда
				Элементы.ЗагружаемыйВидДокументов.СписокВыбора.Добавить(ВидДокумента.Имя, ВидДокумента.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);	
	
	// Если НЕ SZДополнительныеРазработки.ВыразитьБлагодарностьЖителямДонбасса() Тогда
	// 	Сообщение = Новый СообщениеПользователю;
	// 	Сообщение.Текст = "Инсталляционный код не указан!";
	// 	Сообщение.Сообщить();
	// 	
	// 	// Отказ = ИСТИНА;																		  
	// 	
	// КонецЕсли;
	
	Попытка 
		Элементы.РазвернутыеСпецификации.Видимость = НЕ Параметры.КлючНазначенияИспользования;
		Элементы.СвернутыеСпецификации.Видимость = НЕ Параметры.КлючНазначенияИспользования;
	Исключение 	
	КонецПопытки;
	
	ОбменСПОDBFВидимость = ЛОЖЬ;
	Попытка 
		ОбменСПОDBFВидимость = КонстантыSZИмпортЭкспортСПОDBF();
	Исключение 	
	КонецПопытки;
	Элементы.ОбменСПОDBF.Видимость = ОбменСПОDBFВидимость;
	
	Этаформа.Артикул = АртикулНоменклатуры(Объект.ВладелецСпецификаций);
	
	ЗагруженыЛиПредопределенныеШаблоныDBF();
	ЗагруженыЛиПредопределенныеШаблоныСпецификаций() 	;
	
	Объект.ШаблонНоменклатурыИЦен = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF();
	Объект.ШаблонНоменклатурыИЦенExcel = СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL();
	Объект.ШаблонШапки = СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF();
	Объект.ШаблонТела = СправочникиПодсистемаИЭШаблоныОбменТелоЗаказаСПОDBF();
	Объект.ШаблонЗаказаПокупателя = СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF();
	Объект.ШаблонСвернутойСпецификации = СправочникиПодсистемаИЭШаблоныШаблонСвернутойСпецификации();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаАктуальности) Тогда
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ Параметры.КлючНазначенияИспользования Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Объект.ДатаОкончания = ТекущаяДата();
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) 
		И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
	ПолучитьСписокДокументовСЗапасами();		
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
	//Объект.ШаблонЗаготовки = Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка ;
	//Объект.ШаблонВремени = Справочники.ПодсистемаИЭШаблоны.СпецификацияВремя ;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

//&НаСервере
//Процедура ПроверитьСоставСпецификации(Знач Спецификация) // Экспорт	
//	
//	//ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
//	//
//	//СпецификацияВПроцедуре = Спецификация.ссылка.ПолучитьОбъект();
//	//Изменен = ЛОЖЬ;	
//	//
//	//ЗапросСП = Новый Запрос;
//	//ЗапросСП.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	//|	Спецификации.Ссылка
//	//|ИЗ
//	//|	Справочник.Спецификации КАК Спецификации
//	//|ГДЕ
//	//|	Спецификации.Владелец = &Владелец
//	//|	И Спецификации.ПометкаУдаления = ЛОЖЬ ";  // ВЫБРАТЬ ПЕРВЫЕ 1
//	//
//	//Для Каждого ЭлементСостава Из СпецификацияВПроцедуре.Состав Цикл
//	//	
//	//	Если ЭлементСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Сборка 
//	//		ИЛИ ЗначениеЗаполнено(ЭлементСостава.Спецификация)
//	//		ИЛИ ЗначениеЗаполнено(ЭлементСостава.Номенклатура.Спецификация) Тогда
//	//		
//	//		Если НЕ ЗначениеЗаполнено(ЭлементСостава.Спецификация)
//	//			ИЛИ НЕ ЭлементСостава.ТипСтрокиСостава= Перечисления.ТипыСтрокСоставаСпецификации.Сборка Тогда
//	//			
//	//			ЗапросСП.УстановитьПараметр("Владелец", ЭлементСостава.Номенклатура);
//	//			Если ЗначениеЗаполнено(ЭлементСостава.Характеристика) Тогда
//	//				ЗапросСП.Текст = ЗапросСП.Текст + " И  Спецификации.ХарактеристикаПродукции = &Характеристика  ";
//	//				ЗапросСП.УстановитьПараметр("Характеристика", ЭлементСостава.Характеристика);
//	//			КонецЕсли;  // ЗначениеЗаполнено(ЭлементСостава.Характеристика)
//	//			
//	//			
//	//			ВыборСП = ЗапросСП.Выполнить();
//	//			Если НЕ ВыборСП.Пустой() Тогда
//	//				РезСП = ВыборСП.Выбрать();
//	//				РезСП.Следующий();
//	//				ЭлементСостава.Спецификация = РезСП.Ссылка;
//	//				Если НЕ ЗначениеЗаполнено(ЭлементСостава.Номенклатура.Спецификация) Тогда
//	//					н = ЭлементСостава.Номенклатура.получитьобъект();
//	//					н.Спецификация = РезСП.Ссылка;
//	//					н.Записать();
//	//					н = Неопределено;
//	//				КонецЕсли;
//	//				ЭлементСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Сборка ;
//	//				
//	//				Изменен = ИСТИНА;	
//	//				
//	//			КонецЕсли; // запрос СП 
//	//			
//	//		КонецЕсли;	
//	//	КонецЕсли;
//	//КонецЦикла;
//	//
//	//Если изменен Тогда
//	//	Попытка // Записи Спецификация
//	//		СпецификацияВПроцедуре.Записать();
//	//		СпецификацияВПроцедуре = СпецификацияВПроцедуре.ссылка;
//	//		
//	//	Исключение // Записи Спецификация
//	//		Если ВыводитьСообщенияОбОшибках тогда
//	//			Сообщение = Новый СообщениеПользователю;
//	//			Сообщение.Текст = "Ошибка при попытке записи справочника: " + Спецификация + " " + ОписаниеОшибки();
//	//			Сообщение.УстановитьДанные(Объект);
//	//			Сообщение.Сообщить();
//	//		КонецЕсли;
//	//	КонецПопытки; // Записи Спецификация
//	//КонецЕсли;
//	//
//	//Для Каждого ЭлементСостава Из СпецификацияВПроцедуре.Состав Цикл
//	//	Если ЭлементСостава.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Сборка Тогда
//	//		Если ЗначениеЗаполнено(ЭлементСостава.Спецификация) Тогда
//	//			ПроверитьСоставСпецификации(ЭлементСостава.Спецификация);
//	//		КонецЕсли;	
//	//	КонецЕсли;
//	//КонецЦикла;
//	
//КонецПроцедуры // ПроверитьСоставСпецификации

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBF() // Экспорт
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBF;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.ИмпортНоменклатурыИзПОDBF

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныИмпортНоменклатурыИзПОDBFEXCEL() // Экспорт
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменНоменклатурыСПОDBFEXCEL;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.ИмпортНоменклатурыИзПОDBFEXCEL

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныОбменЗаказамиСПОDBF() 
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныОбменТелоЗаказаСПОDBF() 
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменТелоЗаказаСПОDBF;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныОбменШапкаЗаказаСПОDBF() 
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.ОбменШапкаЗаказаСПОDBF;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.ОбменЗаказамиСПОDBF

&НаСервере
Функция СправочникиПодсистемаИЭШаблоныСпецификацияЗаготовка()
	
	//Возврат Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка;
	Возврат неопределено;
	
КонецФункции // Справочники.ПодсистемаИЭШаблоны.СпецификацияЗаготовка

Функция СправочникиПодсистемаИЭШаблоныШаблонСвернутойСпецификации()
	
//	Возврат Справочники.ПодсистемаИЭШаблоны.СпецификацияЧтоКуда;
Возврат неопределено;
	
КонецФункции

&НаКлиенте
Процедура СтраницыФормыDBFПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ЗагрузкаВсехДанныхСписком Тогда
		ТекущаяСтраницаПОDBF = 0;
	Иначе
		ТекущаяСтраницаПОDBF = 1;
	КонецЕсли;
	
КонецПроцедуры

// &НаСервере
// Процедура ЗагрузитьДанныеСпискомНаСервере()
// 	
// 	ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
// 	
// 	// данные заказчика, предоплаты, заказа
// 	ВсегоЗаказов = 0;
// 	БазаДБФБаза1 = Новый XBase;
// 	БазаДБФБаза1.Кодировка = КодировкаXBase.OEM;
// 	БазаДБФБаза1.ОткрытьФайл(Объект.АдресФайла + "/BASE1.DBF");
// 	МассивПропущенныхЗаказов = Новый СписокЗначений;
// 	
// 	КоличествоЗаписейДБФБаза1 = БазаДБФБаза1.КоличествоЗаписей();
// 	ДатаНачала = Объект.ДатаНачала;
// 	ДатаОкончания = Объект.ДатаОкончания;
// 	МаксимальноеЧислоЗаказов = Объект.МаксимальноеЧислоЗаказов;
// 	
// 	ОбъектПОВыполнятьВТранзакциях = Объект.ПОВыполнятьВТранзакциях ;
// 	
// 	Если БазаДБФБаза1.Первая() Тогда
// 		
// 		ЗапросЗаказПоНомеру = Новый Запрос;
// 		ЗапросЗаказПоНомеру.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ЗаказПокупателя.Ссылка
// 		|ИЗ
// 		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
// 		|ГДЕ
// 		|	ЗаказПокупателя.SZПОКУникальныйИдентификатор = &SZПОКУникальныйИдентификатор";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЗапросДоговорОрганизацииИКонтрагента = Новый Запрос;
// 		ЗапросДоговорОрганизацииИКонтрагента.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ДоговорыКонтрагентов.Ссылка
// 		|ИЗ
// 		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
// 		|ГДЕ
// 		|	ДоговорыКонтрагентов.Организация = &Организация
// 		|	И ДоговорыКонтрагентов.Владелец = &Владелец
// 		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
// 		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЗапросПроплата = Новый Запрос;
// 		ЗапросПроплата.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ПоступлениеВКассу.Ссылка
// 		|ИЗ
// 		|	Документ.ПоступлениеВКассу КАК ПоступлениеВКассу
// 		|ГДЕ
// 		|	ПоступлениеВКассу.ДокументОснование = &ДокументОснование
// 		|	И ПоступлениеВКассу.ПометкаУдаления = ЛОЖЬ ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЧислоЗаказов = -1;
// 		Пока ИСТИНА Цикл
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				НачатьТранзакцию();
// 			КонецЕсли;	
// 			
// 			НомерЗаказа = СокрЛП(БазаДБФБаза1.ZAKNUM);
// 			
// 			ДатаЗаказа = БазаДБФБаза1.DATE;
// 			Если НЕ ЗначениеЗаполнено(ДатаЗаказа) Тогда
// 				ДатаЗаказа = ТекущаяДата();
// 			КонецЕсли;
// 			
// 			УникальныйИдентификаторЙ = БазаДБФБаза1.ZAKID;
// 			
// 			ЧислоЗаказов = ЧислоЗаказов + 1;
// 			
// 			Если (ЗначениеЗаполнено(ДатаНачала) 
// 				И ДатаЗаказа < ДатаНачала)
// 				ИЛИ (ЗначениеЗаполнено(ДатаОкончания)
// 				И ДатаЗаказа > ДатаОкончания) 
// 				ИЛИ (НЕ МаксимальноеЧислоЗаказов = 0
// 				И ЧислоЗаказов >= МаксимальноеЧислоЗаказов) Тогда
// 				
// 				МассивПропущенныхЗаказов.Добавить(УникальныйИдентификаторЙ);
// 				
// 				Если (НЕ МаксимальноеЧислоЗаказов = 0
// 					И ЧислоЗаказов = МаксимальноеЧислоЗаказов) Тогда 
// 					
// 					Сообщение = Новый СообщениеПользователю;
// 					Сообщение.Текст = "Программа остановилась на заказе (пропущен) " + НомерЗаказа + "  от  " + ДатаЗаказа;
// 					Сообщение.Поле = "МаксимальноеЧислоЗаказов";
// 					Сообщение.УстановитьДанные(оБЪЕКТ);
// 					Сообщение.Сообщить();
// 					
// 					// Прервать;// НЕТ!!!!!!!!!!!!!!
// 				КонецЕсли;
// 				
// 			Иначе
// 				
// 				ЗапросЗаказПоНомеру.УстановитьПараметр("SZПОКУникальныйИдентификатор", УникальныйИдентификаторЙ);
// 				
// 				ВыборЗаказПоНомеру = ЗапросЗаказПоНомеру.Выполнить();
// 				Пользователь = ОбщегоНазначения.ТекущийПользователь();
// 				Если НЕ ВыборЗаказПоНомеру.Пустой() Тогда
// 					Если Объект.ПОКОбновлятьТакЖеСуществующиеЗаказы Тогда
// 						РезЗаказПоНомеру = ВыборЗаказПоНомеру.Выбрать();
// 						РезЗаказПоНомеру.Следующий();
// 						ЗаказПокупателя = РезЗаказПоНомеру.Ссылка.ПолучитьОбъект();
// 					Иначе
// 						Если НЕ БазаДБФБаза1.Следующая() Тогда 
// 							Прервать;
// 						КонецЕсли;		
// 						
// 						Продолжить;
// 						
// 					КонецЕсли;
// 					
// 					// Сообщение.Текст = "" + РезСсылка;
// 				Иначе 	// запрос пуст!
// 					// Сообщение.Текст = "Запрос ЗаказПоНомеру пуст.";
// 					ЗаказПокупателя = Документы.РасходыТовара.СоздатьДокумент();
// 					ЗаказПокупателя.ЭтоЗаказ = ИСТИНА;
// 					ЗаказПоНомеру = Документы.РасходыТовара.НайтиПоНомеру(НомерЗаказа);
// 					Если НЕ ЗначениеЗаполнено(ЗаказПоНомеру) Тогда
// 						ЗаказПокупателя.Номер = НомерЗаказа;
// 					КонецЕсли;
// 					ЗаказПокупателя.Ответственный = параметрысеанса.ТекущийПользователь;
// 					// ЗаказПокупателя.SZПОКУникальныйИдентификатор = УникальныйИдентификаторЙ;
// 					
// 				КонецЕсли;
// 				
// 				ЗаказПокупателя.Дата = ДатаЗаказа;
// 				
// 			// 	ЗаказПокупателя.Автор = Пользователь;
// 				Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
// 				Если НЕ ЗначениеЗаполнено(Организация) Тогда
// 					Организация = Справочники.Организации.ОсновнаяОрганизация;	
// 				КонецЕсли;
// 				ЗаказПокупателя.Организация = Организация;
// 				
// 				ЗаказПокупателя.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, ЗаказПокупателя.Дата);
// 				
// 				СтруктурнаяЕдиницаПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
// 				
// 				Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаПродажи) Тогда
// 					СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;	
// 				КонецЕсли;
// 				ЗаказПокупателя.СтруктурнаяЕдиницаПродажи = СтруктурнаяЕдиницаПродажи;
// 				
// 				СостояниеЗаказа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "СостояниеНовогоЗаказаПокупателя");
// 				Если НЕ ЗначениеЗаполнено(СостояниеЗаказа) Тогда
// 					СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Открыт;	
// 				КонецЕсли;
// 				ЗаказПокупателя.СостояниеЗаказа = СостояниеЗаказа;
// 				
// 				СтруктурнаяЕдиницаРезерв = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
// 				Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаРезерв) Тогда
// 					СтруктурнаяЕдиницаРезерв = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;	
// 				КонецЕсли;
// 				ЗаказПокупателя.СтруктурнаяЕдиницаРезерв = СтруктурнаяЕдиницаРезерв;
// 				
// 				ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойВидЦенПродажи");
// 				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
// 					ВидЦен = Справочники.ВидыЦен.Оптовая;
// 				КонецЕсли;
// 				ЗаказПокупателя.ВидЦен = ВидЦен;
// 				ЗаказПокупателя.СуммаВключаетНДС = ВидЦен.ЦенаВключаетНДС;
// 				
// 				// 	ЗаказПокупателя.АвторасчетНДС
// 				// 	ЗаказПокупателя.БанковскийСчет
// 				ЗаказПокупателя.ВалютаДокумента = Справочники.Валюты.НациональнаяВалюта ;
// 				
// 				ЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу ;
// 				// 	ЗаказПокупателя.ВидРабот = Справочники.Номенклатура. ; ;
// 				// 	ЗаказПокупателя.ВидСкидкиНаценки
// 				
// 				КодЕДРПОУ = СокрЛП(БазаДБФБаза1.ZKZCHZKPO);
// 				Контрагент = Справочники.Контрагенты.ПустаяСсылка();
// 				Если ЗначениеЗаполнено(КодЕДРПОУ) Тогда
// 					Контрагент = ПодсистемаИЭ.НайтиКонтрагентаПоОКПО(КодЕДРПОУ);
// 				КонецЕсли;
// 				
// 				Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
// 					
// 					НаименованиеЗаказчика = СокрЛП(БазаДБФБаза1.ZAKAZCHIK);
// 					Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеЗаказчика);
// 					Если ЗначениеЗаполнено(Контрагент)
// 						И Контрагент.ЭтоГруппа Тогда
// 						Контрагент = Справочники.Контрагенты.ПустаяСсылка();
// 					КонецЕсли;
// 					
// 					Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
// 						Если Объект.ПОКСоздаватьЗаказчикаПриНовомНаименовании тогда
// 							
// 							Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
// 							Если ЗначениеЗаполнено(Объект.ПОКГруппаНовыхКонтрагентов) Тогда
// 								Контрагент.Родитель = Объект.ПОКГруппаНовыхКонтрагентов;
// 							КонецЕсли;
// 							
// 							Контрагент.Наименование = НаименованиеЗаказчика;
// 							Контрагент.ИНН 			= КодЕДРПОУ;
// 							Контрагент.КодПоЕДРПОУ 	= КодЕДРПОУ;
// 							ГородЗаказчика 			= СокрЛП(БазаДБФБаза1.ZKZCHCITY);
// 							Контрагент.Комментарий 	= ГородЗаказчика + СокрЛП(БазаДБФБаза1.ZKZCHBANK) + " " + СокрЛП(БазаДБФБаза1.ZKZCHMFO) + " " + СокрЛП(БазаДБФБаза1.ZKZCHRSCH);
// 							Контрагент.ПравовойСтатус 	= Справочники.Контрагенты.НевыясненныйПокупатель.ПравовойСтатус;
// 							Контрагент.НаименованиеПолное 	= НаименованиеЗаказчика;
// 							Контрагент.НеЯвляетсяРезидентом = Справочники.Контрагенты.НевыясненныйПокупатель.НеЯвляетсяРезидентом;
// 							Контрагент.НомерСвидетельства 	= Справочники.Контрагенты.НевыясненныйПокупатель.НомерСвидетельства;
// 							Контрагент.ФизическоеЛицо 		= Справочники.Контрагенты.НевыясненныйПокупатель.ФизическоеЛицо;
// 							Контрагент.СчетУчетаАвансовПокупателя 		= Справочники.Контрагенты.НевыясненныйПокупатель.СчетУчетаАвансовПокупателя;
// 							Контрагент.СчетУчетаАвансовПоставщику 		= Справочники.Контрагенты.НевыясненныйПокупатель.СчетУчетаАвансовПоставщику;
// 							Контрагент.СчетУчетаРасчетовСПокупателем 	= Справочники.Контрагенты.НевыясненныйПокупатель.СчетУчетаРасчетовСПокупателем;
// 							Контрагент.СчетУчетаРасчетовСПоставщиком 	= Справочники.Контрагенты.НевыясненныйПокупатель.СчетУчетаРасчетовСПоставщиком;
// 							
// 							Попытка // Записи Контрагент
// 								Если НЕ Объект.РежимТестирования Тогда
// 									Контрагент.ОбменДанными.Загрузка = ИСТИНА;
// 									ВЛог(Контрагент, "Перед записью 1");
// 									Контрагент.Записать();
// 									ВЛог(Контрагент);
// 								КонецЕсли;								
// 								Контрагент = Контрагент.Ссылка; 	
// 								
// 							Исключение // Записи Контрагент
// 								Если ВыводитьСообщенияОбОшибках тогда
// 									Сообщение = Новый СообщениеПользователю;
// 									Сообщение.Текст = "Ошибка при попытке записи справочника: " + Контрагент + " " + ОписаниеОшибки();
// 									Сообщение.УстановитьДанные(Объект);
// 									Сообщение.Сообщить();
// 								КонецЕсли;
// 								Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 									Возврат;
// 								КонецЕсли;
// 								
// 								Контрагент = Справочники.Контрагенты.НевыясненныйПокупатель;
// 							КонецПопытки; // Записи Контрагент
// 							
// 						Иначе
// 							Контрагент = Справочники.Контрагенты.НевыясненныйПокупатель.Ссылка;
// 						КонецЕсли;	
// 					КонецЕсли;   	
// 				КонецЕсли;
// 				
// 				ЗаказПокупателя.Контрагент = Контрагент;
// 				
// 				ЗапросДоговорОрганизацииИКонтрагента.УстановитьПараметр("Владелец", Контрагент);
// 				ЗапросДоговорОрганизацииИКонтрагента.УстановитьПараметр("Организация", Организация);
// 				ЗапросДоговорОрганизацииИКонтрагента.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоров.СПокупателем);
// 				
// 				ВыборДоговорОрганизацииИКонтрагента = ЗапросДоговорОрганизацииИКонтрагента.Выполнить();
// 				Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
// 				Если НЕ ВыборДоговорОрганизацииИКонтрагента.Пустой() Тогда
// 					РезДоговорОрганизацииИКонтрагента = ВыборДоговорОрганизацииИКонтрагента.Выбрать();
// 					РезДоговорОрганизацииИКонтрагента.Следующий();
// 					Договор = РезДоговорОрганизацииИКонтрагента.Ссылка;
// 					ЗаказПокупателя.Договор = Договор;
// 					
// 					// Сообщение.Текст = "" + РезСсылка;
// 				Иначе 	// запрос пуст!
// 					// Сообщение.Текст = "Запрос ДоговорОрганизацииИКонтрагента пуст.";
// 					Если Объект.ПОКСоздаватьДоговораСЗаказчикомАвтоматически Тогда
// 						Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
// 						Договор.ВалютаРасчетов = Справочники.Валюты.НациональнаяВалюта ;
// 						Договор.SZВидВзаиморасчетов = SZДополнительныеРазработки.ПолучитьЗначениеНастройкиДополнительныхРазработок("ВидВзаиморасчетовПоДоговоруПоУмолчанию");
// 						Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем ;
// 						// Договор.ВидСкидкиНаценки = Справочники.ВидыСкидокНаценок.				; ;
// 						// 				Договор.ВидЦенКонтрагента = Справочники.ВидыЦенКонтрагентов. ;
// 						Договор.ВидЦен = ВидЦен;
// 						Договор.Владелец = Контрагент;
// 						Договор.ДатаДоговора = ДатаЗаказа;
// 						Договор.Наименование = "Создан автоматически";
// 						// Договор.НомерДоговора = 
// 						Договор.Организация = Организация;
// 						// Договор.РасчетыВУсловныхЕдиницах
// 						// Договор.СрокОплатыПокупателя
// 						// Договор.СрокОплатыПоставщику
// 						
// 						Попытка // Записи Договор
// 							Если НЕ Объект.РежимТестирования Тогда
// 								Договор.ОбменДанными.Загрузка = ИСТИНА;
// 								ВЛог(Договор, "Перед записью 2");
// 								Договор.Записать();
// 								ВЛог(Договор);
// 							КонецЕсли;
// 							Договор = Договор.Ссылка;
// 							ЗаказПокупателя.Договор = Договор;	
// 							
// 						Исключение // Записи Договор
// 							Если ВыводитьСообщенияОбОшибках тогда
// 								Сообщение = Новый СообщениеПользователю;
// 								Сообщение.Текст = "Ошибка при попытке записи справочника: " + Договор + " " + ОписаниеОшибки();
// 								Сообщение.УстановитьДанные(Объект);
// 								Сообщение.Сообщить();
// 							КонецЕсли;
// 							Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 								Возврат;
// 							КонецЕсли;
// 							
// 						КонецПопытки; // Записи Договор
// 					КонецЕсли;
// 				КонецЕсли; // запрос ДоговорОрганизацииИКонтрагента 
// 				
// 				Если ЗначениеЗаполнено(Контрагент)
// 					И ЗначениеЗаполнено(Договор) 
// 					И НЕ ЗначениеЗаполнено(Контрагент.ДоговорПоУмолчанию) Тогда
// 					
// 					Контрагент = Контрагент.ПолучитьОбъект();
// 					Контрагент.ДоговорПоУмолчанию = Договор;
// 					Попытка // Записи Контрагент
// 						Если НЕ Объект.РежимТестирования Тогда
// 							ВЛог(Контрагент, "Перед записью 3");
// 							Контрагент.Записать();
// 							ВЛог(Контрагент);
// 							Контрагент.ОбменДанными.Загрузка = ИСТИНА;
// 						КонецЕсли;
// 						Контрагент = Контрагент.Ссылка;	
// 						
// 					Исключение // Записи Контрагент
// 						Если ВыводитьСообщенияОбОшибках тогда
// 							Сообщение = Новый СообщениеПользователю;
// 							Сообщение.Текст = "Ошибка при попытке записи справочника: " + Контрагент + " " + ОписаниеОшибки();
// 							Сообщение.УстановитьДанные(Объект);
// 							Сообщение.Сообщить();
// 						КонецЕсли;
// 						
// 						Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 							Возврат;
// 						КонецЕсли;
// 						
// 						Контрагент = Справочники.Контрагенты.НевыясненныйПокупатель;
// 					КонецПопытки; // Записи Контрагент				
// 				КонецЕсли;
// 				// Сообщение.Сообщить(); 
// 				
// 				// /!!!		ЗаказПокупателя.Комментарий
// 				ЗаказПокупателя.СуммаДокумента = БазаДБФБаза1.SUMMA;
// 				
// 				ЗаказПокупателя.ДатаОтгрузки = БазаДБФБаза1.DATEDOSTAV;
// 				Если НЕ ЗначениеЗаполнено(ЗаказПокупателя.ДатаОтгрузки) Тогда
// 					ЗаказПокупателя.ДатаОтгрузки = ЗаказПокупателя.Дата;
// 				КонецЕсли;
// 				ЗаказПокупателя.Запасы.Очистить();
// 				// 
// 				// ЗаказПокупателя.Закрыт
// 				// 			ЗаказПокупателя.ЗапланироватьОплату
// 				// 			ЗаказПокупателя.Исполнители
// 				// 			ЗаказПокупателя.Касса
// 				
// 				// 			ЗаказПокупателя.Кратность
// 				// 			ЗаказПокупателя.Курс
// 				// 			ЗаказПокупателя.Материалы
// 				// 			ЗаказПокупателя.МатериалыЗаказчика
// 				
// 				// 			ЗаказПокупателя.НДСВключатьВСтоимость
// 				// 			ЗаказПокупателя.ПлатежныйКалендарь
// 				// 			ЗаказПокупателя.Предоплата 
// 				// 			ЗаказПокупателя.ПринадлежностьПоследовательностям
// 				// 			ЗаказПокупателя.Проект
// 				// 			ЗаказПокупателя.Работы
// 				// 			ЗаказПокупателя.Событие
// 				// 			ЗаказПокупателя.Старт
// 				
// 				// 			ЗаказПокупателя.ТипДенежныхСредств
// 				// 			ЗаказПокупателя.Финиш
// 				Попытка 
// 					ЗаказПокупателя.SZАдресКонтрагента = СокрЛП(БазаДБФБаза1.ADRESS);
// 				Исключение 	
// 				КонецПопытки;
// 				
// 				// 			ЗаказПокупателя.Ячейка
// 				
// 				Попытка // Записи ЗаказПокупателя
// 					ВсегоЗаказов = ВсегоЗаказов + 1;
// 					Если НЕ Объект.РежимТестирования Тогда
// 						ЗаказПокупателя.ОбменДанными.Загрузка = ИСТИНА;
// 						ВЛог(ЗаказПокупателя, "Перед записью 4");
// 						ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
// 						ВЛог(ЗаказПокупателя);
// 						ЗаказПокупателя = ЗаказПокупателя.Ссылка;	
// 						
// 						Если Объект.ПОКРегистрироватьПредоплатыПриходнымиКассовымиОрдерами 
// 							И БазаДБФБаза1.PROPL > 0 Тогда
// 							
// 							ЗапросПроплата.УстановитьПараметр("ДокументОснование", ЗаказПокупателя.ссылка);
// 							
// 							ВыборПроплата = ЗапросПроплата.Выполнить();
// 							Если НЕ ВыборПроплата.Пустой() Тогда
// 								РезПроплата = ВыборПроплата.Выбрать();
// 								РезПроплата.Следующий();
// 								ПриходныйКассовыйОрдер = РезПроплата.Ссылка.ПолучитьОбъект();
// 								
// 							Иначе 	// запрос пуст!
// 								// Сообщение.Текст = "Запрос Проплата пуст.";
// 								ПриходныйКассовыйОрдер = Документы.ПоступлениеВКассу.СоздатьДокумент();
// 								ПриходныйКассовыйОрдер.ДокументОснование = ЗаказПокупателя;
// 							КонецЕсли; // запрос Проплата 
// 							// Сообщение.Сообщить(); 
// 							ПриходныйКассовыйОрдер.Заполнить(ЗаказПокупателя.ссылка);
// 							ПриходныйКассовыйОрдер.СуммаДокумента = БазаДБФБаза1.PROPL;
// 							ПриходныйКассовыйОрдер.СуммаУчета = БазаДБФБаза1.PROPL;
// 							// sza110520-0133 
// 							Если ЗначениеЗаполнено(Объект.ПОККасса) Тогда
// 								ПриходныйКассовыйОрдер.Касса = Объект.ПОККасса;
// 							КонецЕсли;
// 							
// 							ЗапросКасса = Новый Запрос;
// 							ЗапросКасса.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 							|	Кассы.Ссылка
// 							|ИЗ
// 							|	Справочник.Кассы КАК Кассы
// 							|ГДЕ
// 							|	Кассы.ВалютаПоУмолчанию = &ВалютаПоУмолчанию
// 							|	И Кассы.ПометкаУдаления = ЛОЖЬ ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 							ЗапросКасса.УстановитьПараметр("ВалютаПоУмолчанию", Справочники.Валюты.НациональнаяВалюта);
// 							
// 							ВыборКасса = ЗапросКасса.Выполнить();
// 							Если НЕ ВыборКасса.Пустой() Тогда
// 								РезКасса = ВыборКасса.Выбрать();
// 								РезКасса.Следующий();
// 								ПриходныйКассовыйОрдер.Касса = РезКасса.Ссылка;
// 								
// 								РезКасса = Неопределено;
// 								ВыборКасса = Неопределено;
// 							КонецЕсли; // запрос Касса 
// 							// Сообщение.Сообщить(); 
// 							ПриходныйКассовыйОрдер.Дата = БазаДБФБаза1.DATE;
// 							Попытка // Записи ПриходныйКассовыйОрдер
// 								Если НЕ Объект.РежимТестирования Тогда 
// 									// ПриходныйКассовыйОрдер.ОбменДанными.Загрузка = ИСТИНА;
// 									Если Объект.ПОКПытатьсяПровестиДокументы Тогда
// 										ВЛог(ПриходныйКассовыйОрдер, "Перед проведением");
// 										Попытка 
// 											ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Проведение, режимПроведенияДокумента.Неоперативный);		
// 											
// 										Исключение 	
// 											ВЛог(ПриходныйКассовыйОрдер, "Перед записью 6");
// 											ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Запись);		
// 											
// 											Если ВыводитьСообщенияОбОшибках тогда
// 												Если ВыводитьСообщенияОбОшибках тогда
// 													Сообщение = Новый СообщениеПользователю;
// 													Сообщение.Текст = "Ошибка при попытке проведения документа: " + ПриходныйКассовыйОрдер + " " + ОписаниеОшибки();
// 													Сообщение.УстановитьДанные(Объект);
// 													Сообщение.Сообщить();
// 												КонецЕсли;
// 											КонецЕсли;
// 											Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 												Возврат;
// 											КонецЕсли;
// 											
// 										КонецПопытки;
// 									Иначе
// 										ВЛог(ПриходныйКассовыйОрдер, "Перед записью 5");
// 										ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Запись);	
// 										
// 									КонецЕсли;
// 									ВЛог(ПриходныйКассовыйОрдер);
// 									ПриходныйКассовыйОрдер = Неопределено;
// 								КонецЕсли;
// 								
// 							Исключение // Записи ПриходныйКассовыйОрдер
// 								Если ВыводитьСообщенияОбОшибках тогда
// 									Сообщение = Новый СообщениеПользователю;
// 									Сообщение.Текст = "Ошибка при попытке записи документа: " + ПриходныйКассовыйОрдер + " " + ОписаниеОшибки();
// 									Сообщение.УстановитьДанные(Объект);
// 									Сообщение.Сообщить();
// 								КонецЕсли;
// 								Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 									Возврат;
// 								КонецЕсли;
// 								
// 							КонецПопытки; // Записи ПриходныйКассовыйОрдер
// 							
// 						КонецЕсли;
// 					КонецЕсли;
// 					
// 				Исключение // Записи ЗаказПокупателя
// 					Если ВыводитьСообщенияОбОшибках тогда
// 						Сообщение = Новый СообщениеПользователю;
// 						Сообщение.Текст = "Ошибка при попытке записи документа: " + ЗаказПокупателя + " " + ОписаниеОшибки();
// 						Сообщение.УстановитьДанные(Объект);
// 						Сообщение.Сообщить();
// 					КонецЕсли;
// 					Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 						Возврат;
// 					КонецЕсли;
// 					
// 				КонецПопытки; // Записи ЗаказПокупателя
// 				ЗаказПокупателя = Неопределено;
// 				ВыборЗаказПоНомеру = Неопределено;
// 				РезЗаказПоНомеру = Неопределено;
// 			КонецЕсли;
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				ЗафиксироватьТранзакцию();	
// 			КонецЕсли;
// 			
// 			Если НЕ БазаДБФБаза1.Следующая() Тогда 
// 				Прервать;
// 			КонецЕсли;		
// 			// ОбработкаПрерыванияПользователя();
// 		КонецЦикла; // обхода ДБФ База1
// 		
// 		// Сообщение.Текст = "Итого записей: " + КоличествоЗаписейДБФБаза1;
// 	Иначе // База пустая
// 		// Сообщение.Текст = "База данных пустая: " + ;
// 	КонецЕсли;
// 	// Сообщение.Сообщить();
// 	БазаДБФБаза1.ЗакрытьФайл();
// 	
// 	Сообщение = Новый СообщениеПользователю;
// 	Сообщение.Текст = "Всего заказов: " + ВсегоЗаказов;
// 	Сообщение.УстановитьДанные(Объект);
// 	Сообщение.Сообщить();
// 	
// КонецПроцедуры // ЗагрузитьДанныеСпискомНаервере()
// &НаСервере
// Процедура ЗагрузитьДанныеСпискомНаСервереВторойШаг()
// 	
// 	ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
// 	
// 	// данные перечная конструкций - изделий
// 	ВсегоИзделий = 0;
// 	БазаДБФБаза4 = Новый XBase;
// 	БазаДБФБаза4.Кодировка = КодировкаXBase.OEM;
// 	БазаДБФБаза4.ОткрытьФайл(Объект.АдресФайла + "/BASE4.DBF");
// 	
// 	КоличествоЗаписейДБФБаза4 = БазаДБФБаза4.КоличествоЗаписей();
// 	
// 	ОбъектПОВыполнятьВТранзакциях = Объект.ПОВыполнятьВТранзакциях ;
// 	
// 	Если БазаДБФБаза4.Первая() Тогда
// 		
// 		ЗапросЗаказПоНомеру = Новый Запрос;
// 		ЗапросЗаказПоНомеру.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ЗаказПокупателя.Ссылка
// 		|ИЗ
// 		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
// 		|ГДЕ
// 		|	ЗаказПокупателя.SZПОКУникальныйИдентификатор = &SZПОКУникальныйИдентификатор";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЗапросНоменклатураИзделие = Новый Запрос;
// 		ЗапросНоменклатураИзделие.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	Номенклатура.Ссылка
// 		|ИЗ
// 		|	Справочник.Номенклатура КАК Номенклатура
// 		|ГДЕ
// 		|	Номенклатура.НаименованиеПолное ПОДОБНО &НаименованиеПолное ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЗапросХарка = Новый Запрос;
// 		ЗапросХарка.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ХарактеристикиНоменклатуры.Ссылка
// 		|ИЗ
// 		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
// 		|ГДЕ
// 		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
// 		|	И ХарактеристикиНоменклатуры.Наименование = &Наименование ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		Пока ИСТИНА Цикл
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				НачатьТранзакцию();	
// 			КонецЕсли;
// 			
// 			УникальныйИдентификаторЙ = БазаДБФБаза4.ZAKID;
// 			
// 			Если МассивПропущенныхЗаказов.НайтиПоЗначению(УникальныйИдентификаторЙ) = Неопределено Тогда
// 				
// 				ЗапросЗаказПоНомеру.УстановитьПараметр("SZПОКУникальныйИдентификатор", УникальныйИдентификаторЙ);
// 				НомерЗаказа = СокрЛП(БазаДБФБаза4.ZAKNUM);
// 				
// 				ВыборЗаказПоНомеру = ЗапросЗаказПоНомеру.Выполнить();
// 				Пользователь = ОбщегоНазначения.ТекущийПользователь();
// 				Если НЕ ВыборЗаказПоНомеру.Пустой() Тогда
// 					РезЗаказПоНомеру = ВыборЗаказПоНомеру.Выбрать();
// 					РезЗаказПоНомеру.Следующий();
// 					ЗаказПокупателя = РезЗаказПоНомеру.Ссылка.ПолучитьОбъект();
// 					
// 					НаименованиеПолное = СокрЛП(БазаДБФБаза4.ZAKNUM) + " - " + СокрЛП(БазаДБФБаза4.KONNAME);
// 					НаименованиеХарактеристики = СокрЛП(БазаДБФБаза4.COLOR);
// 					ЗапросНоменклатураИзделие.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
// 					
// 					НоменклатураИзделие = Справочники.Номенклатура.ПустаяСсылка();
// 					ВыборНоменклатураИзделие = ЗапросНоменклатураИзделие.Выполнить();
// 					Если НЕ ВыборНоменклатураИзделие.Пустой() Тогда
// 						РезНоменклатураИзделие = ВыборНоменклатураИзделие.Выбрать();
// 						РезНоменклатураИзделие.Следующий();
// 						НоменклатураИзделие = РезНоменклатураИзделие.Ссылка;
// 						
// 						Если ЗначениеЗаполнено(НоменклатураИзделие.Спецификация) Тогда
// 							СпецификацияИзделия = НоменклатураИзделие.Спецификация.получитьОбъект();
// 							СпецификацияИзделия.состав.Очистить();
// 							Попытка // Записи СпецификацияИзделия
// 								Если НЕ Объект.РежимТестирования Тогда
// 									СпецификацияИзделия.ОбменДанными.Загрузка = ИСТИНА;
// 									ВЛог(СпецификацияИзделия, "Перед записью 6");
// 									СпецификацияИзделия.Записать();	
// 									ВЛог(СпецификацияИзделия);
// 									
// 								КонецЕсли;
// 								СпецификацияИзделия = СпецификацияИзделия.ссылка;
// 								
// 							Исключение // Записи СпецификацияИзделия
// 								Если ВыводитьСообщенияОбОшибках тогда
// 									Сообщение = Новый СообщениеПользователю;
// 									Сообщение.Текст = "Ошибка при попытке записи справочника: " + СпецификацияИзделия + " " + ОписаниеОшибки();
// 									Сообщение.УстановитьДанные(Объект);
// 									Сообщение.Сообщить();
// 								КонецЕсли;
// 								Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 									Возврат;
// 								КонецЕсли;
// 								
// 							КонецПопытки; // Записи СпецификацияИзделия
// 						КонецЕсли;
// 						РезНоменклатураИзделие = Неопределено;
// 						ВыборНоменклатураИзделие = Неопределено;
// 						
// 					Иначе 	// запрос пуст!
// 						// Сообщение.Текст = "Запрос НоменклатураИзделие пуст.";
// 						НоменклатураИзделие = Справочники.Номенклатура.СоздатьЭлемент();
// 						
// 						НоменклатураИзделие.Артикул = Справочники.Номенклатура.НеизвестныйТовар.Артикул ;
// 						НоменклатураИзделие.ЕдиницаИзмерения = Справочники.Номенклатура.НеизвестныйТовар.ЕдиницаИзмерения;
// 						НоменклатураИзделие.ИспользоватьХарактеристики = ?(НаименованиеХарактеристики = "", ЛОЖЬ, ИСТИНА);
// 						// НоменклатураИзделие.Комментарий = 
// 						НоменклатураИзделие.МетодОценки = Справочники.Номенклатура.НеизвестныйТовар.МетодОценки;
// 						НоменклатураИзделие.Наименование = ?(Объект.ПОКФормироватьНаименованиеИзделийСНомеромЗаказаВпереди, НаименованиеПолное, СокрЛП(БазаДБФБаза4.KONNAME));
// 						НоменклатураИзделие.НаименованиеПолное  = НаименованиеПолное;
// 						НоменклатураИзделие.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление ;
// 						НоменклатураИзделие.НоменклатурнаяГруппа = Справочники.Номенклатура.НеизвестныйТовар.НоменклатурнаяГруппа;
// 						НоменклатураИзделие.НормаВремени = Справочники.Номенклатура.НеизвестныйТовар.НормаВремени;
// 						НоменклатураИзделие.Поставщик = Справочники.Номенклатура.НеизвестныйТовар.Поставщик;
// 						НоменклатураИзделие.Родитель = Объект.ПОКГруппаНовойНоменклатурыИзделий;
// 						НоменклатураИзделие.Склад = Справочники.Номенклатура.НеизвестныйТовар.Склад;
// 						// !!НоменклатураИзделие.Спецификация
// 						НоменклатураИзделие.СпособПополнения = Справочники.Номенклатура.НеизвестныйТовар.СпособПополнения;
// 						НоменклатураИзделие.СрокИсполненияЗаказа = Справочники.Номенклатура.НеизвестныйТовар.СрокИсполненияЗаказа;
// 						НоменклатураИзделие.СрокПополнения = Справочники.Номенклатура.НеизвестныйТовар.СрокПополнения;
// 						НоменклатураИзделие.СтавкаНДС = Справочники.Номенклатура.НеизвестныйТовар.СтавкаНДС;
// 						НоменклатураИзделие.СчетУчетаЗапасов = Справочники.Номенклатура.НеизвестныйТовар.СчетУчетаЗапасов;
// 						НоменклатураИзделие.СчетУчетаЗатрат = Справочники.Номенклатура.НеизвестныйТовар.СчетУчетаЗатрат;
// 						НоменклатураИзделие.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
// 						НоменклатураИзделие.ТранспортнаяУслуга = Справочники.Номенклатура.НеизвестныйТовар.ТранспортнаяУслуга;
// 						НоменклатураИзделие.ФиксированнаяСтоимость = БазаДБФБаза4.SUMMA;
// 						попытка
// 							// НоменклатураИзделие.SZВес
// 							// НоменклатураИзделие.SZДополнительныйКод
// 							// НоменклатураИзделие.SZДополнительныйШифр
// 							// НоменклатураИзделие.SZКатегорииНоменклатуры
// 							Выполнить(" НоменклатураИзделие.SZМарка = Справочники.SZМаркиНоменклатуры.НайтиПоНаименованию(СокрЛП(БазаДБФБаза4.PROFNAME)); ");
// 							// НоменклатураИзделие.SZМетодПолучения
// 							
// 							Выполнить(" НоменклатураИзделие.SZРазмер1 = БазаДБФБаза4.L;");
// 							Выполнить(" НоменклатураИзделие.SZРазмер2 = БазаДБФБаза4.H;");
// 							Выполнить(" НоменклатураИзделие.SZПлощадьОбъем = НоменклатураИзделие.SZРазмер1 * НоменклатураИзделие.SZРазмер2;");
// 							// НоменклатураИзделие.SZРазмер3
// 							// НоменклатураИзделие.SZСвойства
// 						исключение
// 						конецпопытки;
// 						НоменклатураИзделие.ЦеноваяГруппа =Справочники.Номенклатура.НеизвестныйТовар.ЦеноваяГруппа ;
// 						НоменклатураИзделие.Ячейка = Справочники.Номенклатура.НеизвестныйТовар.Ячейка ;
// 						
// 						Попытка // Записи НоменклатураИзделие
// 							Если НЕ Объект.РежимТестирования Тогда
// 								НоменклатураИзделие.ОбменДанными.Загрузка = ИСТИНА;
// 								ВЛог(НоменклатураИзделие, "Перед записью 7");
// 								НоменклатураИзделие.Записать();
// 								ВЛог(НоменклатураИзделие);
// 							КонецЕсли;
// 							НоменклатураИзделие = НоменклатураИзделие.ссылка;	
// 							
// 						Исключение // Записи НоменклатураИзделие
// 							Если ВыводитьСообщенияОбОшибках тогда
// 								Сообщение = Новый СообщениеПользователю;
// 								Сообщение.Текст = "Ошибка при попытке записи справочника: " + НоменклатураИзделие + " " + ОписаниеОшибки();
// 								Сообщение.УстановитьДанные(Объект);
// 								Сообщение.Сообщить();
// 							КонецЕсли;
// 							Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 								Возврат;
// 							КонецЕсли;
// 							НоменклатураИзделие = Справочники.Номенклатура.НеизвестныйТовар.Ссылка ;
// 							
// 						КонецПопытки; // Записи НоменклатураИзделие
// 					КонецЕсли; // запрос НоменклатураИзделие 
// 					
// 					Если ЗначениеЗаполнено(НоменклатураИзделие) Тогда
// 						СтрокаЗаказаПокупателя = ЗаказПокупателя.запасы.добавить();
// 						
// 						СтрокаЗаказаПокупателя.Номенклатура = НоменклатураИзделие;
// 						Если НЕ НаименованиеХарактеристики = "" Тогда
// 							ЗапросХарка.УстановитьПараметр("Владелец", НоменклатураИзделие);
// 							ЗапросХарка.УстановитьПараметр("Наименование", НаименованиеХарактеристики);
// 							
// 							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
// 							ВыборХарка = ЗапросХарка.Выполнить();
// 							Если НЕ ВыборХарка.Пустой() Тогда
// 								РезХарка = ВыборХарка.Выбрать();
// 								РезХарка.Следующий();
// 								Характеристика = РезХарка.Ссылка;
// 								
// 								РезХарка = Неопределено;
// 								ВыборХарка = Неопределено;
// 								
// 							Иначе 	// запрос пуст!
// 								// Сообщение.Текст = "Запрос Харка пуст.";
// 								Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
// 								Характеристика.Владелец = НоменклатураИзделие;
// 								Характеристика.Наименование = НаименованиеХарактеристики;
// 								Попытка // Записи Характеристика
// 									Если НЕ Объект.РежимТестирования Тогда
// 										Характеристика.ОбменДанными.Загрузка = ИСТИНА;
// 										ВЛог(Характеристика, "Перед записью 8");
// 										Характеристика.Записать();
// 										ВЛог(Характеристика);
// 									КонецЕсли;
// 									Характеристика = Характеристика.Ссылка;	
// 									
// 								Исключение // Записи Характеристика
// 									Если ВыводитьСообщенияОбОшибках тогда
// 										Сообщение = Новый СообщениеПользователю;
// 										Сообщение.Текст = "Ошибка при попытке записи справочника: " + Характеристика + " " + ОписаниеОшибки();
// 										Сообщение.УстановитьДанные(Объект);
// 										Сообщение.Сообщить();
// 									КонецЕсли;
// 									Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 										Возврат;
// 									КонецЕсли;
// 									
// 								КонецПопытки; // Записи Характеристика
// 							КонецЕсли; // запрос Харка 
// 							// Сообщение.Сообщить(); 
// 							
// 							СтрокаЗаказаПокупателя.Характеристика =	Характеристика;
// 						КонецЕсли;
// 						
// 						// СтрокаЗаказаПокупателя.Партия
// 						СтрокаЗаказаПокупателя.Количество = БазаДБФБаза4.KOLVO;
// 						// СтрокаЗаказаПокупателя.резерв
// 						СтрокаЗаказаПокупателя.ЕдиницаИзмерения = НоменклатураИзделие.ЕдиницаИзмерения ;
// 						СтрокаЗаказаПокупателя.Цена = БазаДБФБаза4.CENA;
// 						// СтрокаЗаказаПокупателя.ПроцентСкидкиНаценки
// 						СтрокаЗаказаПокупателя.Сумма = БазаДБФБаза4.SUMMA;
// 						СтрокаЗаказаПокупателя.СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС ;
// 						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗаказаПокупателя.СтавкаНДС);
// 						
// 						СтрокаЗаказаПокупателя.СуммаНДС = ?(ЗаказПокупателя.СуммаВключаетНДС, 
// 						СтрокаЗаказаПокупателя.Сумма - (СтрокаЗаказаПокупателя.Сумма) / ((СтавкаНДС + 100) / 100),
// 						СтрокаЗаказаПокупателя.Сумма * СтавкаНДС / 100);
// 						
// 						СтрокаЗаказаПокупателя.Всего = БазаДБФБаза4.SUMMA;
// 						СтрокаЗаказаПокупателя.Всего = СтрокаЗаказаПокупателя.Сумма + ?(ЗаказПокупателя.СуммаВключаетНДС, 0, СтрокаЗаказаПокупателя.СуммаНДС);
// 						
// 						СтрокаЗаказаПокупателя.датаотгрузки = ЗаказПокупателя.датаотгрузки;
// 						// !!!!				 СтрокаЗаказаПокупателя.Спецификация
// 						// СтрокаЗаказаПокупателя.Содержание
// 						
// 						// Сообщение.Сообщить(); 
// 						
// 						Попытка // Записи ЗаказПокупателя
// 							Всегоизделий = Всегоизделий + 1;
// 							Если НЕ Объект.РежимТестирования Тогда
// 								ЗаказПокупателя.ОбменДанными.Загрузка = ИСТИНА;
// 								ВЛог(ЗаказПокупателя, "Перед записью 9");
// 								ЗаказПокупателя.Записать(РежимЗаписиДокумента.Запись);
// 								ВЛог(ЗаказПокупателя);
// 							КонецЕсли;
// 							ЗаказПокупателя = ЗаказПокупателя.Ссылка; 	
// 							
// 						Исключение // Записи ЗаказПокупателя
// 							Если ВыводитьСообщенияОбОшибках тогда
// 								Сообщение = Новый СообщениеПользователю;
// 								Сообщение.Текст = "Ошибка при попытке записи документа: " + ЗаказПокупателя + " " + ОписаниеОшибки();
// 								Сообщение.Сообщить();
// 							КонецЕсли;
// 							Если Объект.ПООстановитьсяПриПервойОшибке Тогда
// 								Возврат;
// 							КонецЕсли;
// 							
// 						КонецПопытки; // Записи ЗаказПокупателя
// 						
// 					КонецЕсли;	
// 					РезЗаказПоНомеру = Неопределено;
// 					ВыборЗаказПоНомеру = Неопределено;
// 					
// 				Иначе 	// запрос пуст!
// 					// МАЛО ЛИ - ВДРУГ ПРОПУЩЕН ПО УСЛОВИЯМ?
// 					
// 					// если ВыводитьСообщенияОбОшибках тогда
// 					// 	Сообщение = Новый СообщениеПользователю;
// 					// 	Сообщение.Текст = "Заказ " + НомерЗаказа + " не найден при загрузке конструкций.";
// 					// 	Сообщение.УстановитьДанные(Объект);
// 					// 	Сообщение.Сообщить();
// 					// КонецЕсли;
// 					
// 				КонецЕсли;
// 			КонецЕсли;
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				ЗафиксироватьТранзакцию();	
// 			КонецЕсли;
// 			
// 			Если НЕ БазаДБФБаза4.Следующая() Тогда 
// 				Прервать;
// 			КонецЕсли;		
// 			// ОбработкаПрерыванияПользователя();
// 		КонецЦикла; // обхода ДБФ База1
// 		
// 		// Сообщение.Текст = "Итого записей: " + КоличествоЗаписейДБФБаза1;
// 	Иначе // База пустая
// 		// Сообщение.Текст = "База данных пустая: " + ;
// 	КонецЕсли;
// 	// Сообщение.Сообщить();
// 	БазаДБФБаза4.ЗакрытьФайл();
// 	
// 	Сообщение = Новый СообщениеПользователю;
// 	Сообщение.Текст = "Всего изделий: " + Всегоизделий;
// 	Сообщение.УстановитьДанные(Объект);
// 	Сообщение.Сообщить();
// 	
// КонецПроцедуры // ЗагрузитьДанныеСпискомНаервере()
// &НаСервере
// Процедура ЗагрузитьДанныеСпискомНаСервереТретийШаг()
// 	
// 	ВыводитьСообщенияОбОшибках = НЕ Объект.НеВыводитьСообщенияОбОшибках;
// 	
// 	// данные состава изделий - материалов
// 	ВсегоМатериалов = 0;
// 	БазаДБФБаза3 = Новый XBase;
// 	БазаДБФБаза3.Кодировка = КодировкаXBase.OEM;
// 	БазаДБФБаза3.ОткрытьФайл(Объект.АдресФайла + "/BASE3.DBF");
// 	
// 	Дозволено = Константы.SZИмпортЭкспортОграничитьЧислоСтрокЗагрузки.Получить();
// 	КоличествоЗаписейДБФБаза3 = БазаДБФБаза3.КоличествоЗаписей();
// 	
// 	ОбъектПОВыполнятьВТранзакциях = Объект.ПОВыполнятьВТранзакциях ;
// 	
// 	Если БазаДБФБаза3.Первая() Тогда
// 		
// 		ЗапросЗаказПоНомеру = Новый Запрос;
// 		ЗапросЗаказПоНомеру.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ЗаказПокупателя.Ссылка
// 		|ИЗ
// 		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
// 		|ГДЕ
// 		|	ЗаказПокупателя.SZПОКУникальныйИдентификатор = &SZПОКУникальныйИдентификатор";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ЗапросСпецификацияИзделия = Новый Запрос;
// 		ЗапросСпецификацияИзделияТекст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	Спецификации.Ссылка
// 		|ИЗ
// 		|	Справочник.Спецификации КАК Спецификации
// 		|ГДЕ
// 		|	Спецификации.Владелец = &Владелец ";
// 		
// 		ЗапросХарка = Новый Запрос;
// 		
// 		ЗапросХарка.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
// 		|	ХарактеристикиНоменклатуры.Ссылка
// 		|ИЗ
// 		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
// 		|ГДЕ
// 		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
// 		|	И ХарактеристикиНоменклатуры.Наименование = &Наименование ";  // ВЫБРАТЬ ПЕРВЫЕ 1
// 		
// 		ОбъектПОКИспользоватьАртикулыКонтрагентовПриСинхронизацииНоменклатуры = Объект.ПОКИспользоватьАртикулыКонтрагентовПриСинхронизацииНоменклатуры ;
// 		ОбъектПОКЗагрузитьНоменклатуруМатериалыУчаствующиеВСпецификации = Объект.ПОКЗагрузитьНоменклатуруМатериалыУчаствующиеВСпецификации;
// 		ОбъектПООстановитьсяПриПервойОшибке = Объект.ПООстановитьсяПриПервойОшибке;
// 		ПеречисленияТипыСтрокСоставаСпецификацииМатериал = Перечисления.ТипыСтрокСоставаСпецификации.Материал;
// 		СправочникиНоменклатураНеизвестныйМатериал = Справочники.Номенклатура.НеизвестныйМатериал;
// 		
// 		Пока ИСТИНА Цикл			
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				НачатьТранзакцию();	
// 			КонецЕсли;
// 			
// 			УникальныйИдентификаторЙ = БазаДБФБаза3.ZAKID;
// 			
// 			Если МассивПропущенныхЗаказов.НайтиПоЗначению(УникальныйИдентификаторЙ) = Неопределено Тогда
// 				
// 				ЗапросЗаказПоНомеру.УстановитьПараметр("SZПОКУникальныйИдентификатор", УникальныйИдентификаторЙ);
// 				НомерЗаказа = СокрЛП(БазаДБФБаза3.ZAKNUM);
// 				
// 				ВыборЗаказПоНомеру = ЗапросЗаказПоНомеру.Выполнить();
// 				Пользователь = ОбщегоНазначения.ТекущийПользователь();
// 				
// 				Если НЕ ВыборЗаказПоНомеру.Пустой() Тогда
// 					РезЗаказПоНомеру = ВыборЗаказПоНомеру.Выбрать();
// 					РезЗаказПоНомеру.Следующий();
// 					ЗаказПокупателя = РезЗаказПоНомеру.ссылка.ПолучитьОбъект();
// 					
// 					СтрокаЗаказаПокупателя = ЗаказПокупателя.запасы.получить(БазаДБФБаза3.KONNUM - 1);
// 					НоменклатураИзделие = СтрокаЗаказаПокупателя.Номенклатура;
// 					КоличествоИзделий = СтрокаЗаказаПокупателя.Количество;
// 					Если КоличествоИзделий = 0 Тогда
// 						КоличествоИзделий = 1;
// 					КонецЕсли;
// 					
// 					Если ЗначениеЗаполнено(НоменклатураИзделие) Тогда
// 						
// 						ЗапросСпецификацияИзделия.Текст = ЗапросСпецификацияИзделияТекст;
// 						
// 						Если ЗначениеЗаполнено(СтрокаЗаказаПокупателя.Характеристика) Тогда
// 							
// 							ЗапросСпецификацияИзделия.Текст = ЗапросСпецификацияИзделия.Текст + " 	И Спецификации.ХарактеристикаПродукции = &ХарактеристикаПродукции ";  
// 							ЗапросСпецификацияИзделия.УстановитьПараметр("ХарактеристикаПродукции", СтрокаЗаказаПокупателя.Характеристика);
// 							
// 						КонецЕсли;
// 						
// 						ЗапросСпецификацияИзделия.УстановитьПараметр("Владелец", НоменклатураИзделие.ссылка);
// 						
// 						ВыборСпецификацияИзделия = ЗапросСпецификацияИзделия.Выполнить();
// 						Если НЕ ВыборСпецификацияИзделия.Пустой() Тогда
// 							РезСпецификацияИзделия = ВыборСпецификацияИзделия.Выбрать();
// 							РезСпецификацияИзделия.Следующий();
// 							СпецификацияИзделия = РезСпецификацияИзделия.Ссылка.ПолучитьОбъект();
// 							
// 							РезСпецификацияИзделия = Неопределено;
// 							ВыборСпецификацияИздели = Неопределено;
// 							// Сообщение.Текст = "" + РезСсылка;
// 						Иначе 	// запрос пуст!
// 							// Сообщение.Текст = "Запрос СпецификацияИзделия пуст.";
// 							СпецификацияИзделия = Справочники.Спецификации.СоздатьЭлемент();
// 							СпецификацияИзделия.Владелец = НоменклатураИзделие;
// 							СпецификацияИзделия.Наименование = "Для конструкции " + СокрЛП(НоменклатураИзделие) + " заказа " + СокрЛП(БазаДБФБаза3.ZAKNUM);
// 							СпецификацияИзделия.ХарактеристикаПродукции = СтрокаЗаказаПокупателя.Характеристика;
// 							// СпецификацияИзделия.Операции
// 							// !СпецификацияИзделия.Состав
// 							// СпецификацияИзделия.SZВес
// 							// СпецификацияИзделия.SZКоличествоВУпаковке
// 							// СпецификацияИзделия.SZОбъем
// 							Попытка
// 								Выполнить(" СпецификацияИзделия.SZРазмеры = НоменклатураИзделие.SZПлощадьОбъем; ");
// 							исключение
// 							КонецПопытки;
// 							
// 						КонецЕсли; // запрос СпецификацияИзделия 
// 						// Сообщение.Сообщить(); 
// 						
// 						Запросматериал = Новый Запрос;
// 						Артикул = СокрЛП(БазаДБФБаза3.ART);
// 						АртикулМатериала = СокрЛП(БазаДБФБаза3.MATART);
// 						НаименованиеМатериала = СокрЛП(БазаДБФБаза3.MATNAME);
// 						ХарактеристикаМатериала = СокрЛП(БазаДБФБаза3.MATCOLOR);					
// 						
// 						НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка ;
// 						
// 						Если ЗначениеЗаполнено(Артикул) Тогда
// 							
// 							НоменклатураМатериал = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул);
// 							
// 						КонецЕсли;
// 						
// 						Если (НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка
// 							ИЛИ НЕ ЗначениеЗаполнено(НоменклатураМатериал))
// 							И ЗначениеЗаполнено(АртикулМатериала) Тогда
// 							
// 							НоменклатураМатериал = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", АртикулМатериала);
// 							
// 						КонецЕсли;
// 						
// 						Если (НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка
// 							ИЛИ НЕ ЗначениеЗаполнено(НоменклатураМатериал))
// 							И ОбъектПОКИспользоватьАртикулыКонтрагентовПриСинхронизацииНоменклатуры 
// 							И ЗначениеЗаполнено(АртикулМатериала) Тогда
// 							
// 							СтруктураПоиска = SZДополнительныеМеханизмыУчетаИАнализаНоменклатуры.АртикулИНаименованиеКонтрагента(, , АртикулМатериала, , );
// 							Если НЕ СтруктураПоиска = Неопределено Тогда
// 								НоменклатураМатериал = СтруктураПоиска.Номенклатура;
// 							КонецЕсли;
// 							
// 						КонецЕсли;
// 						
// 						Если (НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка
// 							ИЛИ НЕ ЗначениеЗаполнено(НоменклатураМатериал))
// 							И ОбъектПОКИспользоватьАртикулыКонтрагентовПриСинхронизацииНоменклатуры 
// 							И ЗначениеЗаполнено(Артикул) Тогда
// 							
// 							СтруктураПоиска = SZДополнительныеМеханизмыУчетаИАнализаНоменклатуры.АртикулИНаименованиеКонтрагента(, , Артикул, , );
// 							Если НЕ СтруктураПоиска = Неопределено Тогда
// 								НоменклатураМатериал = СтруктураПоиска.Номенклатура;
// 							КонецЕсли;
// 							
// 						КонецЕсли;
// 						
// 						Если (НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка
// 							ИЛИ НЕ ЗначениеЗаполнено(НоменклатураМатериал)) Тогда
// 							
// 							НоменклатураМатериал = Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеМатериала);
// 							
// 						КонецЕсли;
// 						
// 						Если НЕ ЗначениеЗаполнено(НоменклатураМатериал) Тогда
// 							НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка ;
// 							
// 							Если ОбъектПОКЗагрузитьНоменклатуруМатериалыУчаствующиеВСпецификации Тогда
// 								
// 								НоменклатураМатериал = Справочники.Номенклатура.СоздатьЭлемент();
// 								НоменклатураМатериал.Артикул = ?(ЗначениеЗаполнено(АртикулМатериала), АртикулМатериала, Артикул);
// 								ЕдИзм = СокрЛП(БазаДБФБаза3.EDIZM);
// 								ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдИзм);
// 								Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
// 									ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
// 									ЕдиницаИзмерения.МеждународноеСокращение = ЕдИзм;
// 									ЕдиницаИзмерения.Наименование = ЕдИзм;
// 									ЕдиницаИзмерения.НаименованиеПолное = ЕдИзм;
// 									Попытка // Записи ЕдиницаИзмерения
// 										Если НЕ Объект.РежимТестирования Тогда
// 											ЕдиницаИзмерения.ОбменДанными.Загрузка = ИСТИНА;
// 											ВЛог(ЕдиницаИзмерения, "Перед записью 10");
// 											ЕдиницаИзмерения.Записать();
// 											ВЛог(ЕдиницаИзмерения);
// 										КонецЕсли;
// 										ЕдиницаИзмерения = ЕдиницаИзмерения.Ссылка;	
// 										
// 									Исключение // Записи ЕдиницаИзмерения
// 										Если ВыводитьСообщенияОбОшибках тогда
// 											Сообщение = Новый СообщениеПользователю;
// 											Сообщение.Текст = "Ошибка при попытке записи справочника: " + ЕдиницаИзмерения + " " + ОписаниеОшибки();
// 											Сообщение.УстановитьДанные(Объект);
// 											Сообщение.Сообщить();
// 										КонецЕсли;
// 										
// 										Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 											Возврат;
// 										КонецЕсли;
// 										
// 										ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
// 										
// 									КонецПопытки; // Записи ЕдиницаИзмерения
// 								КонецЕсли;
// 								
// 								НоменклатураМатериал.ЕдиницаИзмерения = ЕдиницаИзмерения;
// 								
// 								НоменклатураМатериал.ИспользоватьХарактеристики = ?(ХарактеристикаМатериала = "", ЛОЖЬ, ИСТИНА);
// 								// НоменклатураМатериал.Комментарий
// 								НоменклатураМатериал.Наименование = НаименованиеМатериала;
// 								НоменклатураМатериал.НаименованиеПолное = НаименованиеМатериала;
// 								НоменклатураМатериал.НоменклатурнаяГруппа = СправочникиНоменклатураНеизвестныйМатериал.НоменклатурнаяГруппа ;
// 								НоменклатураМатериал.НормаВремени = СправочникиНоменклатураНеизвестныйМатериал.НормаВремени;
// 								НоменклатураМатериал.Поставщик = СправочникиНоменклатураНеизвестныйМатериал.Поставщик;
// 								НоменклатураМатериал.Родитель = Объект.ПОКГруппаНовойНоменклатурыМатериалов;
// 								НоменклатураМатериал.Склад = СправочникиНоменклатураНеизвестныйМатериал.Склад;
// 								// ?НоменклатураМатериал.Спецификация
// 								НоменклатураМатериал.СпособПополнения = СправочникиНоменклатураНеизвестныйМатериал.СпособПополнения;
// 								НоменклатураМатериал.СрокИсполненияЗаказа = СправочникиНоменклатураНеизвестныйМатериал.СрокИсполненияЗаказа;
// 								НоменклатураМатериал.СрокПополнения = СправочникиНоменклатураНеизвестныйМатериал.СрокПополнения;
// 								НоменклатураМатериал.СтавкаНДС = СправочникиНоменклатураНеизвестныйМатериал.СтавкаНДС;
// 								НоменклатураМатериал.СчетУчетаЗапасов = СправочникиНоменклатураНеизвестныйМатериал.СчетУчетаЗапасов;
// 								НоменклатураМатериал.СчетУчетаЗатрат = СправочникиНоменклатураНеизвестныйМатериал.СчетУчетаЗатрат;
// 								НоменклатураМатериал.ТипНоменклатуры = СправочникиНоменклатураНеизвестныйМатериал.ТипНоменклатуры;
// 								НоменклатураМатериал.ТранспортнаяУслуга = СправочникиНоменклатураНеизвестныйМатериал.ТранспортнаяУслуга;
// 								НоменклатураМатериал.ФиксированнаяСтоимость = БазаДБФБаза3.CENA;
// 								
// 								попытка
// 									// НоменклатураМатериал.SZВес
// 									// НоменклатураМатериал.SZДополнительныйКод
// 									// НоменклатураМатериал.SZДополнительныйШифр
// 									КатегорияНоменклатуры = Неопределено;						
// 									Выполнить(" КатегорияНоменклатуры = Справочники.SZКатегорииНоменклатуры.НайтиПоНаименованию(СокрЛП(БазаДБФБаза3.RAZDEL)); ");
// 									Выполнить(" Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда НоваяСтрокаКатегорий = НоменклатураМатериал.SZКатегорииНоменклатуры.Добавить(); НоваяСтрокаКатегорий.КатегорияНоменклатуры = КатегорияНоменклатуры; КонецЕсли; ");
// 									Выполнить(" НоменклатураМатериал.SZМарка = Справочники.SZМаркиНоменклатуры.НайтиПоНаименованию(СокрЛП(БазаДБФБаза4.PROFNAME)); ");
// 									// НоменклатураМатериал.SZМетодПолучения
// 									
// 									Выполнить(" НоменклатураМатериал.SZРазмер1 = БазаДБФБаза4.L;");
// 									Выполнить(" НоменклатураМатериал.SZРазмер2 = БазаДБФБаза4.H;");
// 									Выполнить(" НоменклатураМатериал.SZПлощадьОбъем = НоменклатураМатериал.SZРазмер1 * НоменклатураМатериал.SZРазмер2;");
// 									// НоменклатураМатериал.SZРазмер3
// 									// НоменклатураМатериал.SZСвойства
// 								исключение
// 								конецпопытки;
// 								НоменклатураМатериал.ЦеноваяГруппа = СправочникиНоменклатураНеизвестныйМатериал.ЦеноваяГруппа ;
// 								НоменклатураМатериал.Ячейка = СправочникиНоменклатураНеизвестныйМатериал.Ячейка ;
// 								
// 								Попытка // Записи НоменклатураМатериал
// 									Если НЕ Объект.РежимТестирования Тогда
// 										НоменклатураМатериал.ОбменДанными.Загрузка = ИСТИНА;
// 										ВЛог(НоменклатураМатериал, "Перед записью 11");
// 										НоменклатураМатериал.Записать();
// 										ВЛог(НоменклатураМатериал);
// 									КонецЕсли;
// 									НоменклатураМатериал = НоменклатураМатериал.ссылка;	
// 									
// 								Исключение // Записи НоменклатураМатериал
// 									Если ВыводитьСообщенияОбОшибках тогда
// 										Сообщение = Новый СообщениеПользователю;
// 										Сообщение.Текст = "Ошибка при попытке записи справочника: " + НоменклатураМатериал + " " + ОписаниеОшибки();
// 										Сообщение.УстановитьДанные(Объект);
// 										Сообщение.Сообщить();
// 									КонецЕсли;
// 									
// 									Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 										Возврат;
// 									КонецЕсли;
// 									НоменклатураМатериал = СправочникиНоменклатураНеизвестныйМатериал.Ссылка ;
// 									
// 								КонецПопытки; // Записи НоменклатураМатериал 	
// 							КонецЕсли;
// 						КонецЕсли;		
// 						
// 						Если НЕ ЗначениеЗаполнено(НоменклатураМатериал)Тогда 
// 							Если ВыводитьСообщенияОбОшибках тогда
// 								Сообщение = Новый СообщениеПользователю;
// 								Сообщение.Текст = "Не найдена номенклатура - материал: " + НаименованиеМатериала + " " + ОписаниеОшибки();
// 								Сообщение.УстановитьДанные(Объект);
// 								Сообщение.Сообщить();
// 							КонецЕсли;
// 							
// 							Если НЕ БазаДБФБаза3.Следующая() Тогда 
// 								Прервать;
// 							КонецЕсли;		
// 							
// 							Продолжить	;
// 							
// 						КонецЕсли;
// 						
// 						СтрокаСоставаНабора = СпецификацияИзделия.Состав.Добавить();
// 						СтрокаСоставаНабора.ДоляСтоимости = 1;
// 						СтрокаСоставаНабора.ЕдиницаИзмерения = НоменклатураМатериал.ЕдиницаИзмерения;
// 						СтрокаСоставаНабора.Количество = БазаДБФБаза3.KOLVO / КоличествоИзделий;
// 						СтрокаСоставаНабора.КоличествоПродукции = 1;
// 						СтрокаСоставаНабора.Номенклатура = НоменклатураМатериал;
// 						// СтрокаСоставаНабора.Спецификация
// 						СтрокаСоставаНабора.ТипСтрокиСостава = ПеречисленияТипыСтрокСоставаСпецификацииМатериал ;
// 						
// 						Если НЕ ХарактеристикаМатериала = "" Тогда
// 							ЗапросХарка.УстановитьПараметр("Владелец", НоменклатураМатериал);
// 							ЗапросХарка.УстановитьПараметр("Наименование", ХарактеристикаМатериала);
// 							
// 							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
// 							ВыборХарка = ЗапросХарка.Выполнить();
// 							Если НЕ ВыборХарка.Пустой() Тогда
// 								РезХарка = ВыборХарка.Выбрать();
// 								РезХарка.Следующий();
// 								Характеристика = РезХарка.Ссылка;
// 								
// 								РезХарка = Неопределено;
// 								ВыборХарка = Неопределено;
// 							Иначе 	// запрос пуст!
// 								// Сообщение.Текст = "Запрос Харка пуст.";
// 								Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
// 								Характеристика.Владелец = НоменклатураМатериал;
// 								
// 								Характеристика.Наименование = ХарактеристикаМатериала;
// 								Попытка // Записи Характеристика
// 									Если НЕ Объект.РежимТестирования Тогда
// 										Характеристика.ОбменДанными.Загрузка = ИСТИНА;
// 										ВЛог(Характеристика, "Перед записью 12");
// 										Характеристика.Записать();
// 										ВЛог(Характеристика);
// 									КонецЕсли;
// 									Характеристика = Характеристика.Ссылка;	
// 									
// 								Исключение // Записи Характеристика
// 									Если ВыводитьСообщенияОбОшибках тогда
// 										Сообщение = Новый СообщениеПользователю;
// 										Сообщение.Текст = "Ошибка при попытке записи справочника: " + Характеристика + " " + ОписаниеОшибки();
// 										Сообщение.УстановитьДанные(Объект);
// 										Сообщение.Сообщить();
// 									КонецЕсли;
// 									
// 									Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 										Возврат;
// 									КонецЕсли;
// 									
// 								КонецПопытки; // Записи Характеристика
// 							КонецЕсли; // запрос Харка 
// 							// Сообщение.Сообщить(); 
// 							
// 							СтрокаСоставаНабора.Характеристика = Характеристика;
// 							Характеристика = Неопределено;
// 							
// 						КонецЕсли;				
// 						НоменклатураМатериал = Неопределено;
// 						
// 						Попытка // Записи СпецификацияИзделия
// 							ВсегоМатериалов = ВсегоМатериалов + 1;
// 							Если Дозволено > 0 
// 								И ВсегоМатериалов > Дозволено Тогда
// 								
// 								Прервать;
// 								
// 							КонецЕсли;
// 							
// 							Если НЕ Объект.РежимТестирования Тогда
// 								
// 								СпецификацияИзделия.ОбменДанными.Загрузка = ИСТИНА;
// 								ВЛог(СпецификацияИзделия, "Перед записью 13");
// 								СпецификацияИзделия.Записать();
// 								ВЛог(СпецификацияИзделия);
// 								СпецификацияИзделия = СпецификацияИзделия.Ссылка;
// 								
// 								Если НЕ ЗначениеЗаполнено(СтрокаЗаказаПокупателя.Спецификация) 
// 									ИЛИ НЕ СтрокаЗаказаПокупателя.Спецификация = СпецификацияИзделия Тогда
// 									
// 									СтрокаЗаказаПокупателя.Спецификация = СпецификацияИзделия;
// 									СпецификацияИзделия = Неопределено;
// 									
// 									Попытка // Записи Заказпокупателя
// 										// 	Заказпокупателя.ОбменДанными.Загрузка = ИСТИНА;
// 										Если Объект.ПОКПытатьсяПровестиДокументы Тогда
// 											ВЛог(Заказпокупателя, "Перед проведением");
// 											Заказпокупателя.Записать(РежимЗаписиДокумента.Проведение, режимПроведенияДокумента.Неоперативный);		
// 										Иначе
// 											ВЛог(Заказпокупателя, "Перед записью 14");
// 											Заказпокупателя.Записать(РежимЗаписиДокумента.Запись);	
// 										КонецЕсли;
// 										ВЛог(Заказпокупателя);
// 										ЗаказПокупателя = Неопределено;
// 										
// 									Исключение // Записи Заказпокупателя
// 										Если ВыводитьСообщенияОбОшибках тогда
// 											Сообщение = Новый СообщениеПользователю;
// 											Сообщение.Текст = "Ошибка при попытке записи документа: " + Заказпокупателя + " " + ОписаниеОшибки();
// 											Сообщение.УстановитьДанные(Объект);
// 											Сообщение.Сообщить();
// 										КонецЕсли;
// 										
// 										Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 											Возврат;
// 										КонецЕсли;
// 										
// 									КонецПопытки; // Записи Заказпокупателя
// 									
// 								КонецЕсли;
// 								
// 							КонецЕсли;
// 							
// 							Если НЕ Объект.РежимТестирования
// 								И НЕ ЗначениеЗаполнено(НоменклатураИзделие.Спецификация) Тогда
// 								
// 								НоменклатураИзделие = НоменклатураИзделие.получитьОбъект();
// 								НоменклатураИзделие.Спецификация = СпецификацияИзделия;
// 								Попытка // Записи НоменклатураИзделие
// 									Если НЕ Объект.РежимТестирования Тогда
// 										НоменклатураИзделие.ОбменДанными.Загрузка = ИСТИНА;
// 										ВЛог(НоменклатураИзделие, "Перед записью 15");
// 										НоменклатураИзделие.Записать();	
// 										ВЛог(НоменклатураИзделие);
// 									КонецЕсли;
// 									// НоменклатураИзделие = НоменклатураИзделие.Ссылка;
// 									НоменклатураИзделие = Неопределено;
// 									
// 								Исключение // Записи НоменклатураИзделие
// 									Если ВыводитьСообщенияОбОшибках тогда
// 										Сообщение = Новый СообщениеПользователю;
// 										Сообщение.Текст = "Ошибка при попытке записи справочника: " + НоменклатураИзделие + " " + ОписаниеОшибки();
// 										Сообщение.УстановитьДанные(Объект);
// 										Сообщение.Сообщить();
// 									КонецЕсли;
// 									
// 									Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 										Возврат;
// 									КонецЕсли;
// 									
// 								КонецПопытки; // Записи НоменклатураИзделие
// 								
// 							КонецЕсли;
// 							
// 						Исключение // Записи СпецификацияИзделия
// 							Если ВыводитьСообщенияОбОшибках тогда
// 								Сообщение = Новый СообщениеПользователю;
// 								Сообщение.Текст = "Ошибка при попытке записи справочника: " + СпецификацияИзделия + " " + ОписаниеОшибки();
// 								Сообщение.УстановитьДанные(Объект);
// 								Сообщение.Сообщить();
// 							КонецЕсли;
// 							
// 							Если ОбъектПООстановитьсяПриПервойОшибке Тогда
// 								Возврат;
// 							КонецЕсли;
// 							
// 						КонецПопытки; // Записи СпецификацияИзделия
// 						
// 					Иначе
// 						Если ВыводитьСообщенияОбОшибках тогда
// 							Сообщение = Новый СообщениеПользователю;
// 							Сообщение.Текст = "Не найдена номенклатура - изделие: " + СокрЛП(БазаДБФБаза3.KONNAME) + " " + ОписаниеОшибки();
// 							Сообщение.УстановитьДанные(Объект);
// 							Сообщение.Сообщить();
// 						КонецЕсли;
// 						
// 					КонецЕсли;
// 				Иначе 	// запрос пуст!
// 					Если ВыводитьСообщенияОбОшибках тогда
// 						Сообщение = Новый СообщениеПользователю;
// 						Сообщение.Текст = "Заказ " + НомерЗаказа + " не найден при загрузке спецификаций.";
// 						Сообщение.УстановитьДанные(Объект);
// 						Сообщение.Сообщить();
// 					КонецЕсли;
// 				КонецЕсли;
// 				
// 			КонецЕсли;
// 			
// 			Если ОбъектПОВыполнятьВТранзакциях Тогда
// 				ЗафиксироватьТранзакцию();	
// 			КонецЕсли;
// 			
// 			Если НЕ БазаДБФБаза3.Следующая() Тогда 
// 				Прервать;
// 			КонецЕсли;		
// 			
// 		КонецЦикла; // обхода ДБФ База1
// 		
// 		// Сообщение.Текст = "Итого записей: " + КоличествоЗаписейДБФБаза1;
// 	Иначе // База пустая
// 		// Сообщение.Текст = "База данных пустая: " + ;
// 	КонецЕсли;
// 	// Сообщение.Сообщить();
// 	БазаДБФБаза3.ЗакрытьФайл();
// 	
// 	Сообщение = Новый СообщениеПользователю;
// 	Сообщение.Текст = "Всего позиций спецификаций: " + ВсегоМатериалов;
// 	Сообщение.УстановитьДанные(Объект);
// 	Сообщение.Сообщить();	
// 	
// КонецПроцедуры // З3
Процедура УстановитьВидимостьДоступность() // Экспорт	
	
	Если ТекущаяСтраницаПОDBF = 0 Тогда
		Элементы.АдресФайла.Заголовок = "Каталог файлов ПОDBF ";
	Иначе
		Элементы.АдресФайла.Заголовок = "Адрес файла ПОDBF ";
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступность



