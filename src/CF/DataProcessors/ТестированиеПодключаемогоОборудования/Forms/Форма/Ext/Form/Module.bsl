// sza140827-0030
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаКлиенте
Процедура АварийнаяОтменаОперации(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерСсылкиОперации);
	ВходныеПараметры.Добавить(ЭТНомерЧека);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "EmergencyVoid",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		ЭТНомерКарты           = "";
		ЭТНомерСсылкиОперации  = "";
		ЭТНомерЧека            = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВернутьПлатежПоКарте(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерКарты);
	ВходныеПараметры.Добавить(ЭТНомерСсылкиОперации);
	ВходныеПараметры.Добавить(ЭТНомерЧека);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizeRefund",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
		КонецЕсли;

		ЭТНомерКарты           = ВыходныеПараметры[0];
		ЭТНомерСсылкиОперации  = ВыходныеПараметры[1];
		ЭТНомерЧека            = ВыходныеПараметры[2];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВесыСПечатьюЭтикетокВыгрузить(Команда)
	
	Если ВесыСПечатьюЭтикеток.Пустая() Тогда
		ТекстСообщения = "Весы с печатью этикеток не выбраны!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоваровВесовСПечатьюЭтикеток.Количество() = 0 Тогда
		ТекстСообщения = "Таблица пуста. Нечего выгружать.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив;
	ВходныеПараметры.Добавить(ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток());
	ВходныеПараметры.Добавить(ЛОЖЬ);
	ВыходныеПараметры = Неопределено;

	Результат = ВыполнитьКомандуОборудования(ВесыСПечатьюЭтикеток, "ВыгрузитьТовары",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
	
КонецПроцедуры

// Тест выгрузки без предварительного подключения (как в рабочих конфигурациях)
&НаКлиенте
Процедура ВесыСПечатьюЭтикетокВыгрузить1(Команда)
	
	Если ВесыСПечатьюЭтикеток.Пустая() Тогда
		ТекстСообщения = "Весы с печатью этикеток не выбраны!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоваровВесовСПечатьюЭтикеток.Количество() = 0 Тогда
		ТекстСообщения = "Таблица пуста. Нечего выгружать.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив;
	ВходныеПараметры.Добавить(ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток());
	ВыходныеПараметры = Неопределено;

	Результат = ВыполнитьКомандуОборудования(ВесыСПечатьюЭтикеток, "ВыгрузитьТовары",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыСПечатьюЭтикетокЗаполнитьБазуДемоДанными(Команда)	
	// Формирование тестовых данных	
	Для Итератор = 1 По 50 Цикл
		Строка = ТаблицаТоваровВесовСПечатьюЭтикеток.Добавить();
		Строка.PLU = ТекущийПЛУ;
		Строка.Наименование = "Наименование товара " + Строка(ТекущийПЛУ);
		Строка.Цена = ТекущийПЛУ + 11.01;
		Строка.Код = ТекущийПЛУ;
		Строка.СрокХранения = 4;
		Строка.ОписаниеТовара = "Описание товара " + Строка(ТекущийПЛУ);
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВесыСПечатьюЭтикетокОчиститьБазу(Команда)
	Если ВесыСПечатьюЭтикеток.Пустая() Тогда
		ТекстСообщения = "Весы с печатью этикеток не выбраны!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры 	= Неопределено;
	ВыходныеПараметры 	= Неопределено;
	
	Результат = ВыполнитьКомандуОборудования(ВесыСПечатьюЭтикеток, "ОчиститьБазу",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
КонецПроцедуры

// Тест очистки без предварительного подключения (как в рабочих конфигурациях)
&НаКлиенте
Процедура ВесыСПечатьюЭтикетокОчиститьБазу1(Команда)
	Если ВесыСПечатьюЭтикеток.Пустая() Тогда
		ТекстСообщения = "Весы с печатью этикеток не выбраны!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры 	= Неопределено;
	ВыходныеПараметры 	= Неопределено;
	
	Результат = ВыполнитьКомандуОборудования(ВесыСПечатьюЭтикеток, "ОчиститьБазу",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВесыСПечатьюЭтикетокОчиститьДемоДанные(Команда)
	ТаблицаТоваровВесовСПечатьюЭтикеток.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОборудованиеПоТипу(Команда)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Имя команды: Подключить") + Символы.ПС;

	// МеханизмПодключаемогоОборудования
	ОписаниеОшибки = "";
	Если НЕ ЗначениеЗаполнено(ТипОборудования) Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите тип оборудования!"), 5);
		Возврат;
	КонецЕсли;

	ИмяТипа = ПолучитьИмяТипаОборудования(ТипОборудования);

	ПоддерживаемыеТипыПО = Новый Массив();
	ПоддерживаемыеТипыПО.Добавить(ИмяТипа);

	Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(ЭтаФорма.УникальныйИдентификатор, ПоддерживаемыеТипыПО, ОписаниеОшибки) Тогда
		// Пишем лог
		Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
		      "========================================" + Символы.ПС;
		ОтветОтУстройства = Лог + ОтветОтУстройства;
	КонецЕсли;

КонецПроцедуры

// Тест выгрузки без предварительного подключения (как в рабочих конфигурациях)
&НаКлиенте
Процедура ВыгрузитьВТСД1(Команда)
	ТаблицаТСД = Новый Массив;
	Для Каждого текСтрока Из ТаблицаЗагрузкиИзТСД Цикл
		НоваяСтрока = Новый Структура("ШтрихКод, Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры, СерияНоменклатуры, Качество, Цена, Количество"
		,текСтрока.ШтрихКод, текСтрока.Номенклатура, текСтрока.ЕдиницаИзмерения, текСтрока.ХарактеристикаНоменклатуры, текСтрока.СерияНоменклатуры
		,текСтрока.Качество ,текСтрока.Цена ,текСтрока.Количество);
		ТаблицаТСД.Добавить(НоваяСтрока);
	КонецЦикла;
	МенеджерОборудованияКлиент.ВыгрузитьДанныеВТСД(УникальныйИдентификатор, ТаблицаТСД);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВТСДВыполнить()
#Если НЕ ВебКлиент Тогда
	Если ТСД.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗагрузкиИзТСД.Количество() = 0 Тогда
		ТекстСообщения = "Таблица пуста. Нечего выгружать.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ТаблицаТСД = ПолучитьМассивБазыТоваров();
	ВходныеПараметры.Добавить("Items");
	ВходныеПараметры.Добавить(ТаблицаТСД);

	ВыполнитьКомандуОборудования(ТСД,
								"UploadDirectory",
								ВходныеПараметры,
								ВыходныеПараметры);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция   ВыполнитьКомандуОборудования(ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1)
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: " + ИмяКоманды + Символы.ПС;

	Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
												ИмяКоманды,
												ВходныеПараметры,
												ВыходныеПараметры,
												Таймаут);
	Если НЕ Результат Тогда
		ОписаниеОшибки = ВыходныеПараметры[1];
	Иначе
		ОписаниеОшибки = "Команда выполнена успешно!";
	КонецЕсли;

	ОтобразитьПараметры(ВходныеПараметры, ВыходныеПараметры);

	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПреавторизацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерКарты);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizePreSales",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
		КонецЕсли;

		ЭТНомерКарты           = ВыходныеПараметры[0];
		ЭТНомерСсылкиОперации  = ВыходныеПараметры[1];
		ЭТНомерЧека            = ВыходныеПараметры[2];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "Settlement",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[0][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[0][1]);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСканераПриИзменении(Элемент)
	
	ТипШтрихКода  = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихКода(ДанныеСканера);
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИСПЛЕЕМ ПОКУПАТЕЛЯ
&НаКлиенте
Процедура ДП_ВывестиТекстВыполнить()

	Если Дисплей.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ДПТекст);

	ВыполнитьКомандуОборудования(Дисплей,
	                             "DisplayText",
	                             ВходныеПараметры,
	                             ВыходныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ДП_ОчиститьТекстВыполнить()

	Если Дисплей.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВыполнитьКомандуОборудования(Дисплей,
	                             "ClearText",
	                             ВходныеПараметры,
	                             ВыходныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПреавторизацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерКарты);
	ВходныеПараметры.Добавить(ЭТНомерСсылкиОперации);
	ВходныеПараметры.Добавить(ЭТНомерЧека);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizeCompletion",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[0][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[0][1]);
		КонецЕсли;
		
		ЭТНомерКарты           = "";
		ЭТНомерСсылкиОперации  = "";
		ЭТНомерЧека            = "";
	КонецЕсли;

КонецПроцедуры

// Тест загрузки без предварительного подключения (как в рабочих конфигурациях)
&НаКлиенте
Процедура ЗагрузитьИзТСД1(Команда)
	ТаблицаТСД = Неопределено;
	ТаблицаЗагрузкиИзТСД.Очистить();
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаТСД, ТСДСворачиватьДанныеПриЗагрузке);
	Для Каждого текСтрока Из ТаблицаТСД Цикл
		НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
		НоваяСтрока.ШтрихКод 	= текСтрока.ШтрихКод;
		НоваяСтрока.Количество 	= текСтрока.Количество;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДВыполнить()

	Если ТСД.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	Результат = ВыполнитьКомандуОборудования(ТСД,"DownloadDocument",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
	Если Результат Тогда
		ТаблицаЗагрузкиИзТСД.Очистить();

		Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			НоваяСтрока.ШтрихКод   = ВыходныеПараметры[0][Индекс * 2 + 0];
			НоваяСтрока.Количество = ВыходныеПараметры[0][Индекс * 2 + 1];
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineВыгрузитьТовары(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = "ККМ Offline не выбрана!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоваровККМOffline.Количество() = 0 Тогда
		ТекстСообщения = "Таблица пуста. Нечего выгружать.";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив;
	ВходныеПараметры.Добавить(ПолучитьМассивБазыТоваровККМOffline());
	ВходныеПараметры.Добавить(ККМOfflineЧастичнаяВыгрузка);
	ВыходныеПараметры = Неопределено;

	Результат = ВыполнитьКомандуОборудования(ККМOffline, "ВыгрузитьТовары",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineВыгрузитьТовары1(Команда)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineЗагрузитьОтчет(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = "ККМ Offline не выбрана!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры 	= Неопределено;
	ВыходныеПараметры 	= Неопределено;
	
	Результат = ВыполнитьКомандуОборудования(ККМOffline, "ЗагрузитьОтчет",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
	Если Результат Тогда
		ОтчетККМOffline.Очистить();

		Для Каждого текСтрока Из ВыходныеПараметры[0] Цикл
			НоваяСтрока = ОтчетККМOffline.Добавить();
			НоваяСтрока.Код   		= текСтрока.Код;
			НоваяСтрока.Цена	 	= текСтрока.Цена;
			НоваяСтрока.Количество 	= текСтрока.Количество;
			НоваяСтрока.Скидка		= текСтрока.Скидка;
			НоваяСтрока.Сумма		= текСтрока.Сумма;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineЗагрузитьОтчет1(Команда)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОтчетЗагружен(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = "ККМ Offline не выбрана!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры 	= Неопределено;
	ВыходныеПараметры 	= Неопределено;
	
	Результат = ВыполнитьКомандуОборудования(ККМOffline, "ОтчетЗагружен",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОтчетОчистить(Команда)
	
	ОтчетККМOffline.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОчиститьБазуТоваров(Команда)
	
	Если ККМOffline.Пустая() Тогда
		ТекстСообщения = "ККМ Offline не выбрана!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВходныеПараметры 	= Неопределено;
	ВыходныеПараметры 	= Неопределено;
	
	Результат = ВыполнитьКомандуОборудования(ККМOffline, "ОчиститьБазу",
	                                         ВходныеПараметры,
	                                         ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ККМOfflineОчиститьБазуТоваров1(Команда)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)

	Если ФР.Пустая() Тогда
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ФР не выбран!");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "PrintSlipOnTerminal",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если ВыходныеПараметры.Количество() > 0  И ВыходныеПараметры[0] Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печать осуществляется на внутреннем печатающем устройстве терминала."));
		КонецЕсли;
	КонецЕсли;


	СлипЧек = глПодключаемоеОборудование.ПоследнийСлипЧек;
	Если НЕ ПустаяСтрока(СлипЧек) Тогда
		ПечатьСлипаЧека(СлипЧек);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отсутствует последний чек") + ".
		    |" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возможно после запуска приложения операции по картам еще не проводились."));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОборудование(Оборудование)
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Настроить" + Символы.ПС;

	Результат = МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(Оборудование);

	Если Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно!";
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУстройствоВыполнить(Команда)
	// Получаем имя типу оборудования
	ИмяТипа = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя,"Настроить","");
	// Получаем оборудование по типу
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Вызываем форму настроек оборудования
	НастроитьОборудование(Оборудование);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
	   И ЭтаФорма.ВводДоступен() Тогда
		// Отладочное
		Лог = "Получено внешнее событие
		      |Источник = " + Источник + "
		      |Событие = "  + ИмяСобытия;
		ЭтаФорма.ОбновитьОтображениеДанных();
	
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("ШтрихКод, Количество", Параметр[0], 1));
			Иначе
				Данные.Добавить(Новый Структура("ШтрихКод, Количество", Параметр[1][1], 1));
			КонецЕсли;

			ПолученыШтрихКоды(Данные);
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭКВАРИНГОВЫМ ТЕРМИНАЛОМ
&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерКарты);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizeSales",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
		КонецЕсли;

		ЭТНомерКарты           = ВыходныеПараметры[0];
		ЭТНомерСсылкиОперации  = ВыходныеПараметры[1];
		ЭТНомерЧека            = ВыходныеПараметры[2];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодключенноеОборудованиеВыполнить()
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудование(Оборудование)
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Отключить" + Символы.ПС;

	ОписаниеОшибки = "";
	Результат = МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(ЭтаФорма.УникальныйИдентификатор, Оборудование, ОписаниеОшибки);
	
	Если Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно!";
	КонецЕсли;

	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства; 
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеПоТипу(Команда)

	// МеханизмПодключаемогоОборудования
	Если НЕ ЗначениеЗаполнено(ТипОборудования) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Укажите тип оборудования!'"));
		Возврат;
	КонецЕсли;

	ИмяТипа = ПолучитьИмяТипаОборудования(ТипОборудования);

	ПоддерживаемыеТипыПО = Новый Массив();
	ПоддерживаемыеТипыПО.Добавить(ИмяТипа);

	ОписаниеОшибки = "";
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(ЭтаФорма.УникальныйИдентификатор, ПоддерживаемыеТипыПО, ОписаниеОшибки);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить(Команда)
	// Получаем имя типу оборудования
	ИмяТипа = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя,"Отключить","");
	// Получаем оборудование по типу
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Отключаем оборудование
	ОтключитьОборудование(Оборудование);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПлатежПоКарте(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерСсылкиОперации);
	ВходныеПараметры.Добавить(ЭТНомерЧека);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizeVoid",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[0][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[0][1]);
		КонецЕсли;

		ЭТНомерКарты           = "";
		ЭТНомерСсылкиОперации  = "";
		ЭТНомерЧека            = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПреавторизацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	ВходныеПараметры.Добавить(ЭТСумма);
	ВходныеПараметры.Добавить(ЭТНомерКарты);
	ВходныеПараметры.Добавить(ЭТНомерСсылкиОперации);
	ВходныеПараметры.Добавить(ЭТНомерЧека);

	// Выполнение операции на ЭТ
	Если ВыполнитьКомандуОборудования(ЭТ,
	                                  "AuthorizeVoidPreSales",
	                                  ВходныеПараметры,
	                                  ВыходныеПараметры) Тогда
		Если НЕ ПустаяСтрока(ВыходныеПараметры[0][1]) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[0][1]);
		КонецЕсли;
		
		ЭТНомерКарты           = "";
		ЭТНомерСсылкиОперации  = "";
		ЭТНомерЧека            = "";
	КонецЕсли;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура ОтобразитьПараметры(ВходныеПараметры, ВыходныеПараметры)

	тзВходныеПараметры.Очистить();
	Если ВходныеПараметры <> Неопределено
	   И ТипЗнч(ВходныеПараметры) = Тип("Массив") Тогда
		Для Индекс = 0 По ВходныеПараметры.Количество() - 1 Цикл
			тзПараметр = тзВходныеПараметры.Добавить();

			тзПараметр.ИмяПараметра = "Параметр" + Строка(Индекс);
			тзПараметр.Значение     = ВходныеПараметры[Индекс];
		КонецЦикла;
	ИначеЕсли ВходныеПараметры <> Неопределено
	   И ТипЗнч(ВходныеПараметры) = Тип("Строка") Тогда
		тзПараметр = тзВходныеПараметры.Добавить();

		тзПараметр.ИмяПараметра = "Параметр";
		тзПараметр.Значение     = ВходныеПараметры;
	КонецЕсли;

	тзВыходныеПараметры.Очистить();
	Если ВыходныеПараметры <> Неопределено
	   И ТипЗнч(ВыходныеПараметры) = Тип("Массив") Тогда
		Для Индекс = 0 По ВыходныеПараметры.Количество() - 1 Цикл
			тзПараметр = тзВыходныеПараметры.Добавить();

			тзПараметр.ИмяПараметра = "Параметр" + Строка(Индекс);
			тзПараметр.Значение     = ВыходныеПараметры[Индекс];
		КонецЦикла;
	ИначеЕсли ВыходныеПараметры <> Неопределено
	   И ТипЗнч(ВыходныеПараметры) = Тип("Строка") Тогда
		тзПараметр = тзВыходныеПараметры.Добавить();

		тзПараметр.ИмяПараметра = "Параметр";
		тзПараметр.Значение     = ВыходныеПараметры;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьКэш()
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшВыполнить()
	ОчиститьКэш();
КонецПроцедуры

&НаКлиенте
Функция ПечатьСлипаЧека(СлипЧек)

	Если НЕ ПустаяСтрока(СлипЧек) Тогда
		ВходныеПараметры = Новый Массив();
		ВходныеПараметры.Добавить(СлипЧек);
		ВыходныеПараметры = Неопределено;

		Если НЕ ВыполнитьКомандуОборудования(ФР,
											 "PrintText",
											 ВходныеПараметры,
											 ВыходныеПараметры) Тогда
			
		КонецЕсли;
	КонецЕсли;
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБОРУДОВАНИЕМ 
&НаКлиенте
Процедура ПодключитьОборудование(Оборудование)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Подключить" + Символы.ПС;

	ОписаниеОшибки = "";

	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(ЭтаФорма.УникальныйИдентификатор, Оборудование, ОписаниеОшибки);

	Если Результат Тогда
		ОписаниеОшибки = "Команда выполнена успешно!";
	КонецЕсли;

	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБЩИЕ КОМАНДЫ 
&НаКлиенте
Процедура ПодключитьУстройствоВыполнить(Команда)

	// Получаем имя типу оборудования
	ИмяТипа = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя,"Подключить","");
	// Получаем оборудование по типу
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Включаем оборудование
	ПодключитьОборудование(Оборудование);

КонецПроцедуры

&НаКлиенте
Функция   ПолученКодКарты(КодКарты, ДанныеДорожек) Экспорт

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(), "ДЛФ=T") + " Имя команды: ПолученКодКарты" + Символы.ПС;
	Лог = Лог + "Код карты: " + КодКарты + Символы.ПС;
	Если ТипЗнч(ДанныеДорожек) =Тип("Массив") Тогда
		Для НомерДорожки = 1 По ДанныеДорожек.Количество() Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			Лог = Лог + "ДанныеДорожки(" + НомерДорожки + "): " + ДанныеДорожек[НомерДорожки - 1] + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	// Выводим считанные данные
	Дорожка1 = ДанныеДорожек[0];
	Дорожка2 = ДанныеДорожек[1];
	Дорожка3 = ДанныеДорожек[2];
	
	ЭтаФорма.ОбновитьОтображениеДанных();

	Возврат ИСТИНА;

КонецФункции

&НаКлиенте
Функция   ПолученыШтрихКоды(МассивДанных) Экспорт

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ПолученыШтрихКоды" + Символы.ПС;
	Сч = 0;

	ТаблицаЗагрузкиИзТСД.Очистить();
	ЧислоКодов = МассивДанных.Количество();
	Для Каждого СтрокаЗагрузки Из МассивДанных Цикл
		Сч = Сч + 1;
		НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
		НоваяСтрока.ШтрихКод   = СтрокаЗагрузки.ШтрихКод;
		НоваяСтрока.Количество = СтрокаЗагрузки.Количество;
		Лог = Лог + "ШтрихКод" + ?(ЧислоКодов > 1,"(" + Сч + ")", "") + ": " + СтрокаЗагрузки.ШтрихКод;
		Лог = Лог + " Количество: " + СтрокаЗагрузки.Количество + Символы.ПС;
	КонецЦикла;
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;

	ДанныеСканера = МассивДанных[0].ШтрихКод; // Выводим считанные данные
	ТипШтрихКода  = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихКода(МассивДанных[0].ШтрихКод);
	
	ЭтаФорма.ОбновитьОтображениеДанных();

	Возврат ИСТИНА;

КонецФункции

// Функция возвращает имя перечисления из его метаданных
&НаСервере
Функция   ПолучитьИмяТипаОборудования(ТипОборудованияСсылка) Экспорт

	МтОбъект = ТипОборудованияСсылка.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудованияСсылка);
	Результат = МтОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТСД
&НаКлиенте
Функция   ПолучитьМассивБазыТоваров()

	// ТекТаблица = РеквизитФормыВЗначение("ТаблицаВыгрузки");

	МассивВыгрузки = Новый Массив();

	Для Каждого СтрокаТЧ Из ТаблицаЗагрузкиИзТСД Цикл
		СтруктураСтроки = Новый СписокЗначений;
		СтруктураСтроки.Добавить(СтрокаТЧ.ШтрихКод);
		СтруктураСтроки.Добавить(СтрокаТЧ.Номенклатура);
		СтруктураСтроки.Добавить(СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураСтроки.Добавить(СтрокаТЧ.ХарактеристикаНоменклатуры);
		СтруктураСтроки.Добавить(СтрокаТЧ.СерияНоменклатуры);
		СтруктураСтроки.Добавить(СтрокаТЧ.Качество);
		СтруктураСтроки.Добавить(СтрокаТЧ.Цена);
		СтруктураСтроки.Добавить(СтрокаТЧ.Количество);

		МассивВыгрузки.Добавить(СтруктураСтроки);
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВЕСАМИ С ПЕЧАТЬЮ ЭТИКЕТОК
&НаКлиенте
Функция   ПолучитьМассивБазыТоваровВесовСПечатьюЭтикеток()

	МассивВыгрузки = Новый Массив();

	Для Каждого СтрокаТЧ Из ТаблицаТоваровВесовСПечатьюЭтикеток Цикл
		ЭлементМассива = Новый Структура("PLU, Код, ШтрихКод, Наименование, НаименованиеПолное, Цена, ОписаниеТовара, СрокХранения"
		, СтрокаТЧ.PLU
		, СтрокаТЧ.Код
		, СтрокаТЧ.ШтрихКод
		, СтрокаТЧ.Наименование
		, СтрокаТЧ.НаименованиеПолное
		, СтрокаТЧ.Цена
		, СтрокаТЧ.ОписаниеТовара
		, СтрокаТЧ.СрокХранения);
		МассивВыгрузки.Добавить(ЭлементМассива);
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ККМ OFFLINE
&НаКлиенте
Функция   ПолучитьМассивБазыТоваровККМOffline()

	МассивВыгрузки = Новый Массив();

	Для Каждого СтрокаТЧ Из ТаблицаТоваровККМOffline Цикл
		ЭлементМассива = Новый Структура("Код, ШтрихКод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар"
		, СтрокаТЧ.Код
		, СтрокаТЧ.ШтрихКод
		, СтрокаТЧ.Наименование
		, СтрокаТЧ.НаименованиеПолное
		, СтрокаТЧ.ЕдиницаИзмерения
		, СтрокаТЧ.Цена
		, СтрокаТЧ.Остаток
		, СтрокаТЧ.ВесовойТовар);
		МассивВыгрузки.Добавить(ЭлементМассива);
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

&НаСервере
Процедура ПолучитьОборудованиеРМНаСервере()

	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ОборудованиеРМ = Справочники.ПодключаемоеОборудование.Выбрать(,, Отбор);
	Пока ОборудованиеРМ.Следующий() Цикл
		Если ОборудованиеРМ.УстройствоОтключено Или ОборудованиеРМ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		_ТипОборудования = ОборудованиеРМ.ТипОборудования;

		Если _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихКода Тогда
			СканерШК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			ФР = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
			ТСД = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
			Дисплей = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
			СчитывательМК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
			Весы = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ЭТ = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			ВесыСПечатьюЭтикеток = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline Тогда
			ККМOffline = ОборудованиеРМ.Ссылка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(ТипОборудования) Тогда
		ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихКода;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ПолучитьСтрокиМакетаЧеков()	
  	Возврат Обработки.ТестированиеПодключаемогоОборудования.ПолучитьМакет("МакетЧеков").ПолучитьТекст();
КонецФункции

&НаКлиенте
Функция   ПолучитьТекущееТО(ИмяТипа)
	Если ИмяТипа = "ФР" Тогда
		Оборудование = ФР;
	ИначеЕсли ИмяТипа = "ТСД" Тогда
		Оборудование = ТСД;
	ИначеЕсли ИмяТипа = "Дисплей" Тогда
		Оборудование = Дисплей;
	ИначеЕсли ИмяТипа = "Весы" Тогда
		Оборудование = Весы;
	ИначеЕсли ИмяТипа = "ЭТ" Тогда
		Оборудование = ЭТ;
	ИначеЕсли ИмяТипа = "Сканер" Тогда
		Оборудование = СканерШК;
	ИначеЕсли ИмяТипа = "СМК" Тогда
		Оборудование = СчитывательМК;
	ИначеЕсли ИмяТипа = "ККМOffline" Тогда
		Оборудование = ККМOffline;
	ИначеЕсли ИмяТипа = "ВесыСПечатьюЭтикеток" Тогда
		Оборудование = ВесыСПечатьюЭтикеток;
	КонецЕсли;
	Возврат Оборудование;
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	ПолучитьОборудованиеРМНаСервере();
	ТекущийПЛУ = 1;

КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)

	// Заполняем оборудование рабочего места
	ПолучитьОборудованиеРМНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	// Получаем имя типу оборудования
	ИмяТипа = СтрЗаменить(ЭтаФорма.ТекущийЭлемент.Имя,"Тест","");
	// Получаем оборудование по типу
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Отключаем оборудование
	ТестОборудование(Оборудование);
КонецПроцедуры

&НаКлиенте
Процедура ТестОборудование(Оборудование)
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ТестУстройства" + Символы.ПС;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Оборудование);

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                                      ВходныеПараметры,
	                                                                      ВыходныеПараметры,
	                                                                      Оборудование,
	                                                                      ПараметрыУстройства);
	Если НЕ Результат Тогда
		Попытка 
			ОписаниеОшибки = ВыходныеПараметры[1];
		Исключение
			ОписаниеОшибки = "";
		КонецПопытки;
		
		ОписаниеОшибки = "Тест не был пройден!" + Символы.ПС + ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = "Команда выполнена успешно!"+(?(ВыходныеПараметры.Количество()>1, Символы.ПС+ВыходныеПараметры[1], ""));
	КонецЕсли;

	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
КонецПроцедуры

&НаКлиенте
Процедура ТСДЗаполнитьБазуДемоДанными(Команда)
	// Формирование тестовых данных	       
	Для Итератор = 1 По 50 Цикл
		Строка = ТаблицаЗагрузкиИзТСД.Добавить();
		Строка.ШтрихКод = ТекущийПЛУ;
		Строка.Номенклатура = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.ЕдиницаИзмерения = "Штука";
		Строка.ХарактеристикаНоменклатуры = "Цвет" + Строка(ТекущийПЛУ);
		Строка.СерияНоменклатуры  = "Серия" + Строка(ТекущийПЛУ); 
		Строка.Качество  = "Качество"; 
		Строка.Цена = ТекущийПЛУ + 11.20;
		Строка.Количество = ТекущийПЛУ;
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТСДОчиститьТаблицу(Команда)
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ВнестиСуммуВыполнить(Команда)
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить(1);
	ВходныеПараметры.Добавить(СуммаИнкассации);

	ВыполнитьКомандуОборудования(ФР, "Encash", ВходныеПараметры, ВыходныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ИзъятьСуммуВыполнить(Команда)
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить(0);
	ВходныеПараметры.Добавить(СуммаИнкассации);

	ВыполнитьКомандуОборудования(ФР, "Encash", ВходныеПараметры, ВыходныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_НапечататьСлипЧекВыполнить()
#Если НЕ ВебКлиент Тогда
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	тзВходныеПараметры.Очистить();
	тзВыходныеПараметры.Очистить();

	// Подготовка данных
	ПотокXML = Новый ЧтениеXML();
	СтрокиМакета = ПолучитьСтрокиМакетаЧеков();
	ПотокXML.УстановитьСтроку(СтрокиМакета);
	СтрокаПечати = Неопределено;
	НаименованиеЭлемента = "";

	Пока ПотокXML.Прочитать() Цикл
		Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ПотокXML.Имя = "СлипЧек" Тогда
			ИначеЕсли ПотокXML.Имя = "МассивСтрок" Тогда
				СтрокаПечати = "";
			КонецЕсли;
		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если СтрокаПечати <> Неопределено Тогда
				СтрокаПечати = ПотокXML.Значение;
			КонецЕсли;
		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.Атрибут Тогда

		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ПотокXML.Имя = "МассивСтрок" Тогда
				СтрокаПечати = СтрЗаменить(СтрокаПечати, Символы.ПС, Символ(13) + Символ(10));
				// Печатаем слип чек
				ВходныеПараметры = Новый Массив();
				ВходныеПараметры.Добавить(СтрокаПечати);
				ВыходныеПараметры = Неопределено;

				ВыполнитьКомандуОборудования(ФР,
											"PrintText",
											ВходныеПараметры,
											ВыходныеПараметры);

				СтрокаПечати = Неопределено;
			ИначеЕсли ПотокXML.Имя = "СлипЧек" Тогда
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФР
&НаКлиенте
Процедура ФР_НапечататьЧекиВыполнить()
#Если НЕ ВебКлиент Тогда
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	тзВходныеПараметры.Очистить();
	тзВыходныеПараметры.Очистить();

	// Подготовка данных
	ПотокXML = Новый ЧтениеXML();
	ПотокXML.УстановитьСтроку(ПолучитьСтрокиМакетаЧеков());
	ФискальныйЧек = ИСТИНА;
	ЧекВозврата   = ЛОЖЬ;
	ЧекПКОРКО     = ЛОЖЬ;
	НомерСекции   = 0;

	ВходныеПараметры    = Неопределено;
	ВыходныеПараметры   = Неопределено;
	ТаблицаНоменклатуры = Неопределено;
	СтрокаНоменклатуры  = Неопределено;
	ТаблицаОплат        = Неопределено;
	СтрокаОплаты        = Неопределено;
	ОбщиеПараметры      = Неопределено;

	НаименованиеЭлемента = "";

	Пока ПотокXML.Прочитать() Цикл
		Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ПотокXML.Имя = "Чек" Тогда
				Для НомерАтрибута = 0 ПО ПотокXML.КоличествоАтрибутов() - 1 Цикл
					Если ПотокXML.ИмяАтрибута(НомерАтрибута) = "ОписаниеЧека" Тогда
						ЧекПКОРКО = (ПотокXML.ЗначениеАтрибута(НомерАтрибута) = "ЧекПКОРКО");

						НомерСекции = 2;
					КонецЕсли;
				КонецЦикла;

				ВходныеПараметры  = Новый Массив();
			ИначеЕсли ПотокXML.Имя = "ТаблицаНоменклатуры" Тогда
				Если ТаблицаНоменклатуры = Неопределено Тогда
					ТаблицаНоменклатуры = Новый Массив();
				КонецЕсли;

			ИначеЕсли ПотокXML.Имя = "СтрокаНоменклатуры" Тогда
				СтрокаНоменклатуры = Новый СписокЗначений();

			ИначеЕсли ПотокXML.Имя = "ТаблицаОплат" Тогда
				ТаблицаОплат = Новый Массив();

			ИначеЕсли ПотокXML.Имя = "СтрокаОплаты" Тогда
				СтрокаОплаты = Новый СписокЗначений();

			ИначеЕсли ПотокXML.Имя = "ОбщиеПараметры" Тогда
				ОбщиеПараметры = Новый Массив();

			Иначе
				НаименованиеЭлемента = ПотокXML.Имя;
			КонецЕсли;
		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если СтрокаНоменклатуры <> Неопределено
			   И НЕ ПустаяСтрока(НаименованиеЭлемента) Тогда
				СтрокаНоменклатуры.Добавить(// НаименованиеЭлемента,
											?(НаименованиеЭлемента = "Name"
											  Или НаименованиеЭлемента = "Code"
											  Или НаименованиеЭлемента = "Article"
											  Или НаименованиеЭлемента = "DiscountName"
											  Или НаименованиеЭлемента = "ItemSection",
											  Строка(ПотокXML.Значение),
											  ?(НаименованиеЭлемента = "Department" И ЧекПКОРКО,
												НомерСекции,
												Число(ПотокXML.Значение))));

			ИначеЕсли СтрокаОплаты <> Неопределено Тогда
				СтрокаОплаты.Добавить(?(НаименованиеЭлемента = "PaymentTypeNum"
									  Или НаименованиеЭлемента = "Sum", Число(ПотокXML.Значение), ПотокXML.Значение));

			ИначеЕсли ОбщиеПараметры <> Неопределено Тогда
				ОбщиеПараметры.Добавить(?(НаименованиеЭлемента = "RecType"
										  Или НаименованиеЭлемента = "TotalWithoutRecDisc"
										  Или НаименованиеЭлемента = "Total"
										  Или НаименованиеЭлемента = "DayNum"
										  Или НаименованиеЭлемента = "RecNum"
										  Или НаименованиеЭлемента = "DocumentNum"
										  Или НаименованиеЭлемента = "TemplateNumber",
										  Число(ПотокXML.Значение),
										  ?(НаименованиеЭлемента = "IsFiscal"
										    Или НаименованиеЭлемента = "IsSlip",
										    Булево(ПотокXML.Значение),
										    ?(НаименованиеЭлемента = "RecDate",
										      Дата(ПотокXML.Значение),
										      ПотокXML.Значение))));
			КонецЕсли;
		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.Атрибут Тогда

		ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ПотокXML.Имя = "Чек" Тогда
				// Печатаем чек
				Результат = ВыполнитьКомандуОборудования(ФР,
														 "PrintReceipt",
														 ВходныеПараметры,
														 ВыходныеПараметры);

				Если Результат Тогда
					НомерСмены = ВыходныеПараметры[0];
					НомерЧека  = ВыходныеПараметры[1];
				Иначе
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка'") + " " + ВыходныеПараметры[0] + ":"
					  + ВыходныеПараметры[1]);
					Возврат;
				КонецЕсли;

			ИначеЕсли ПотокXML.Имя = "СтрокаНоменклатуры" Тогда
				Если ТипЗнч(ТаблицаНоменклатуры) = Тип("Массив") Тогда
					ТаблицаНоменклатуры.Добавить(СтрокаНоменклатуры);
					СтрокаНоменклатуры = Неопределено;
				КонецЕсли;

			ИначеЕсли ПотокXML.Имя = "ТаблицаНоменклатуры" Тогда
				ВходныеПараметры.Добавить(ТаблицаНоменклатуры);
				ТаблицаНоменклатуры = Неопределено;

			ИначеЕсли ПотокXML.Имя = "СтрокаОплаты" Тогда
				Если ТипЗнч(ТаблицаОплат) = Тип("Массив") Тогда
					ТаблицаОплат.Добавить(СтрокаОплаты);
					СтрокаОплаты = Неопределено;
				КонецЕсли;

			ИначеЕсли ПотокXML.Имя = "ТаблицаОплат" Тогда
				ВходныеПараметры.Добавить(ТаблицаОплат);
				ТаблицаОплат = Неопределено;

			ИначеЕсли ПотокXML.Имя = "ОбщиеПараметры" Тогда
				ВходныеПараметры.Добавить(ОбщиеПараметры);
				ОбщиеПараметры = Неопределено;

			Иначе
				НаименованиеЭлемента = "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ФР_НапечататьШтрихКодВыполнить(Команда)
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить(ЛОЖЬ);
	ВходныеПараметры.Добавить(ИСТИНА);
	ВыполнитьКомандуОборудования(ФР, "OpenCheck", ВходныеПараметры, ВыходныеПараметры);
	
	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить("EAN13");
	ВходныеПараметры.Добавить("2900001462105");

	ВыполнитьКомандуОборудования(ФР, "PrintBarCode", ВходныеПараметры, ВыходныеПараметры);
	
	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить("EAN8");
	ВходныеПараметры.Добавить("46120441");

	ВыполнитьКомандуОборудования(ФР, "PrintBarCode", ВходныеПараметры, ВыходныеПараметры);

	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВыполнитьКомандуОборудования(ФР, "CancelCheck", ВходныеПараметры, ВыходныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФР_ОткрытьДенежныйЯщикВыполнить(Команда)
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных ФР
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	ВыполнитьКомандуОборудования(ФР,
	                             "OpenCashDrawer",
	                             ВходныеПараметры,
	                             ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ФР_ОтчетБезГашенияВыполнить()
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных ФР
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	ВыполнитьКомандуОборудования(ФР,
								 "PrintXReport",
								 ВходныеПараметры,
								 ВыходныеПараметры);
								 
КонецПроцедуры

&НаКлиенте
Процедура ФР_ОтчетСГашениемВыполнить()
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных ФР
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	
	ВыполнитьКомандуОборудования(ФР,
	                             "PrintZReport",
	                             ВходныеПараметры,
	                             ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ФР_ПолучитьШиринуСтрокиВыполнить(Команда)
	
	Если ФР.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных ФР
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры.Очистить();
	ВходныеПараметры.Добавить(ЛОЖЬ);
	ВходныеПараметры.Добавить(ИСТИНА);
	ВыполнитьКомандуОборудования(ФР, "GetLineLength", ВходныеПараметры, ВыходныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнить(Команда)
	
	Если Весы.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Подготовка данных
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	Если ВыполнитьКомандуОборудования(Весы,
									  "ПолучитьВес",
									  ВходныеПараметры,
									  ВыходныеПараметры) Тогда
		Вес = ВыходныеПараметры[0];
	КонецЕсли;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
&НаКлиенте
Процедура ЭВ_ТарироватьВыполнить(Команда)
	
	Если Весы.Пустая() Тогда
		ТекстСообщения = "Оборудование не выбрано!";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Подготовка данных
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	Если ВесТарыВручную Тогда
		ВходныеПараметры.Добавить(Вес);
	КонецЕсли;
	
	ВыполнитьКомандуОборудования(Весы,
								 "Тарировать",
								 ВходныеПараметры,
								 ВыходныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОкноТеста(Команда)
	ОтветОтУстройства = "";
КонецПроцедуры
