// sza160329-0512 
// sza160324-0427
// sza160314-1349

&НаКлиенте
Процедура ЗагрузитьДанныеИзЭтойТаблицы(Команда)
	
	ИдетПробел   = 0;
	СчетчикСтрок = 1;
	Пока СчетчикСтрок < 999999 Цикл
		ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, НомерКолонкиКотораяЗаполненаОбязательно);
		
		Если ПустаяСтрока(СокрЛП(ОбластьСЯчейкой.Текст)) Тогда
			ИдетПробел = ИдетПробел + 1;
			Если ИдетПробел > ДоступноеЧислоПробелов Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ИдетПробел = 0;
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
	ВсегоСтрок = СчетчикСтрок - 1;
	ВсегоКИмпорту = ВсегоСтрок - 1;
	
	Если СчетчикСтрок < 2 Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таблица данных пуста. Нечего импортировать."), 60, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание!"));
	Иначе
		
		Если ИспользоватьФлагМассоваяЗагрузка Тогда
			ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("МассоваяЗагрузка", ИСТИНА);
		КонецЕсли;
		
		Импортировано = 0;
		
		Если ДемонстрироватьХодЗагрузки
			И НЕ СоздатьЗаполнитьДокументВводаОстатков Тогда
			
			ПодготовитьТаблицы();
			
			ВсегоСтрок = СчетчикСтрок;
			СчетчикСтрок = 2; // первая строка - заголовки
			
			ДатаНачалаСостояния = ОбщийМодульКлиент.ПользователяТекущаяДата();
			ДатаПоследнегоСостояния = '00010101000000';
			
			Пока СчетчикСтрок <= ВсегоСтрок Цикл
				ОбщийМодульКлиент.ВычислитьСостояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт") + " " + ВыбранныйОбъект, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт данных.."), "АнимацияОжиданиеСиниеСтрелки", ВсегоКИмпорту, СчетчикСтрок -1, ДатаНачалаСостояния, ДатаПоследнегоСостояния, , ИСТИНА);
				
				НомерКолонки = 1;
				МассивЗначенийЯчеек = Новый Массив;
				
				Пока НомерКолонки <= ВсегоКолонок Цикл
					
					Если НЕ ПоследовательностьКолонок[НомерКолонки - 1].НомерКолонкиВТаблицеДанных = 0 Тогда // колонка используется
						ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, НомерКолонки);
						ТекстЯчейки = СокрЛП(ОбластьСЯчейкой.Текст);
						Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
							ТаблицаПоследнихЗначений[НомерКолонки - 1].ПоследнееЗначение = ТекстЯчейки;
							МассивЗначенийЯчеек.Добавить(ТекстЯчейки);
						Иначе
							
							Если ПоследовательностьКолонок[НомерКолонки - 1].ПриниматьПредыдущееЗначение Тогда
								МассивЗначенийЯчеек.Добавить(ТаблицаПоследнихЗначений[НомерКолонки - 1].ПоследнееЗначение);
							Иначе
								МассивЗначенийЯчеек.Добавить("");
							КонецЕсли;
						КонецЕсли;
					Иначе
						МассивЗначенийЯчеек.Добавить(Неопределено); // колонка не используется
					КонецЕсли;
					
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла;
				
				ИмпортироватьСтроку(МассивЗначенийЯчеек);
				
				СчетчикСтрок = СчетчикСтрок + 1;
			КонецЦикла;
			
		Иначе
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт") + " " + ВыбранныйОбъект + " (" + ВсегоКИмпорту + ")", , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.АнимацияСерая);
			ПроизвестиВесьИмпортНаСервере();
		КонецЕсли;
		
		Если ИспользоватьФлагМассоваяЗагрузка Тогда
			ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("МассоваяЗагрузка", ЛОЖЬ);
		КонецЕсли;
		
		Если НЕ Импортировано = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импортировано") + ": " + Импортировано);
			
			Если ЭтоНоменклатура
				И СоздатьЗаполнитьДокументВводаОстатков Тогда
				
				Элементы.ГруппаДокументаРезультата.Видимость = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиВесьИмпортНаСервере()
	
	УстановленМонопольныйРежим = ЛОЖЬ;
	
	Попытка
		УстановитьМонопольныйРежим(ИСТИНА);
		УстановленМонопольныйРежим = ИСТИНА;
	Исключение
	КонецПопытки;
	
	ПодготовитьТаблицы();
	
	Если ЭтоНоменклатура
		И СоздатьЗаполнитьДокументВводаОстатков Тогда
		
		НовыйДокументОстатков = Документы.КорректировкиИРегистрацияОстатков.СоздатьДокумент();
		НовыйДокументОстатков.Дата = ДатаРегистрации;
		НовыйДокументОстатков.Комментарий = ТекстКомментария;
	КонецЕсли;
	
	СчетчикСтрок = 2; // первая строка - заголовки
	
	Пока СчетчикСтрок <= ВсегоСтрок Цикл
		
		НомерКолонки = 1;
		МассивЗначенийЯчеек = Новый Массив;
		
		Пока НомерКолонки <= ВсегоКолонок Цикл
			
			Если НЕ ПоследовательностьКолонок[НомерКолонки - 1].НомерКолонкиВТаблицеДанных = 0 Тогда // колонка используется
				ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, НомерКолонки);
				ТекстЯчейки = СокрЛП(ОбластьСЯчейкой.Текст);
				Если НЕ ПустаяСтрока(ТекстЯчейки) Тогда
					ТаблицаПоследнихЗначений[НомерКолонки - 1].ПоследнееЗначение = ТекстЯчейки;
					МассивЗначенийЯчеек.Добавить(ТекстЯчейки);
				Иначе
					
					Если ПоследовательностьКолонок[НомерКолонки - 1].ПриниматьПредыдущееЗначение Тогда
						МассивЗначенийЯчеек.Добавить(ТаблицаПоследнихЗначений[НомерКолонки - 1].ПоследнееЗначение);
					Иначе
						МассивЗначенийЯчеек.Добавить("");
					КонецЕсли;
				КонецЕсли;
			Иначе
				МассивЗначенийЯчеек.Добавить(Неопределено); // колонка не используется
			КонецЕсли;
			
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		
		ИмпортироватьСтроку(МассивЗначенийЯчеек, НовыйДокументОстатков);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
	Если ЭтоНоменклатура
		И СоздатьЗаполнитьДокументВводаОстатков Тогда
		
		НовыйДокументОстатков.Записать(РежимЗаписиДокумента.Запись);
		ДокументРезультат = НовыйДокументОстатков.Ссылка;
	КонецЕсли;
	
	Если УстановленМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(ЛОЖЬ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицы()
	
	КПоследовательностиКолонок.Очистить();
	КПоследовательностиКолонок.Загрузить(ОБъект.ОписаниеКолонок.Выгрузить());
	МассивНеиспользуемых = Новый Массив;
	
	Для Каждого СтрокаПоследовательности Из КПоследовательностиКолонок Цикл
		Если СтрокаПоследовательности.НомерКолонкиВТаблицеДанных = 0 Тогда
			МассивНеиспользуемых.Добавить(СтрокаПоследовательности);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Неиспользуемый Из МассивНеиспользуемых Цикл
		КПоследовательностиКолонок.Удалить(Неиспользуемый);
	КонецЦикла;
	КПоследовательностиКолонок.Сортировать("НомерКолонкиВТаблицеДанных");
	
	СоздаватьЭтотЭлементПоНаименованию = Новый Структура;
	ПоследовательностьКолонок.Очистить();
	ТаблицаПоследнихЗначений.Очистить();
	НомерКолонки = 1;
	
	Пока НомерКолонки <= ВсегоКолонок Цикл
		СтрокаТаблицы = ТаблицаПоследнихЗначений.Добавить(); //  по числу колонок
		
		СтрокаТаблицы = ПоследовательностьКолонок.Добавить();
		ОтборПоЗаявленным = Новый Структура("НомерКолонкиВТаблицеДанных", НомерКолонки);
		СтрокиЗаявленных = КПоследовательностиКолонок.НайтиСтроки(ОтборПоЗаявленным);
		Если НЕ СтрокиЗаявленных.Количество() = 0 Тогда
			Для Каждого Заявленная Из СтрокиЗаявленных Цикл
				СтрокаТаблицы.НомерКолонкиВТаблицеДанных  = Заявленная.НомерКолонкиВТаблицеДанных;
				СтрокаТаблицы.НаименованиеРеквизита 	  = Заявленная.НаименованиеРеквизита;
				СтрокаТаблицы.ПриниматьПредыдущееЗначение = Заявленная.ПриниматьПредыдущееЗначение;
				СоздаватьЭтотЭлементПоНаименованию.Вставить(Заявленная.НаименованиеРеквизита, Заявленная.СоздаватьНовыйЭлементПоНаименованию);
			КонецЦикла;
		Иначе
			СтрокаТаблицы.НомерКолонкиВТаблицеДанных = 0; // колонка не используется
		КонецЕсли;
		
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	СтруктураЗначенийПоУмолчанию = Новый Структура;
	Для Каждого СтрокаПеречня Из Объект.ПереченьРеквизитов Цикл
		СтруктураЗначенийПоУмолчанию.Вставить(СтрокаПеречня.НаименованиеРеквизита, СтрокаПеречня.ЗначениеПоУмолчанию);
	КонецЦикла;
	
	ОтборПоЗаявленным = Новый Структура("НаименованиеРеквизита", "Родитель");
	СтрокиЗаявленных = КПоследовательностиКолонок.НайтиСтроки(ОтборПоЗаявленным);
	Если НЕ СтрокиЗаявленных.Количество() = 0 Тогда
		Заявленная = СтрокиЗаявленных[0];
		ПолеРодителя = Заявленная.НомерКолонкиВТаблицеДанных;
	Иначе
		ПолеРодителя = 0;
	КонецЕсли;
	
	ЕстьПрограммаДляСтроки = НЕ ПустаяСтрока(ВыполнитьПрограмму);
	СимволРазделителяЧислаНашейБазы = Сред(СокрЛП(1.5), 2, 1);
	
	ТекстКомментария = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При импорте") + " " + СохраненнаяНастройка + " " + ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(СкладИмпорта1) Тогда
		СкладИмпорта1 = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СкладИмпорта2) Тогда
		СкладИмпорта2 = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СкладИмпорта3) Тогда
		СкладИмпорта3 = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
	КонецЕсли; // даже если склады не используются!
	
	Если ДатаРегистрации = '00010101000000' Тогда
		ДатаРегистрации = НачалоМесяца(ТекущаяДата()) - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИмпортироватьСтроку(Знач МассивЗначенийЯчеек, Знач НовыйДокументОстатков = Неопределено)
	
	Если ЭтоНоменклатура Тогда
		Если ВестиУчетСерий Тогда
			Серия = "";
			КодПродукта 		= "";
			ДополнительныйКод1 	= "";
			ДополнительныйКод2 	= "";
			КомментарийКСерии  	= "";
			ШтрихКодСерии 		= "";
			
			ЭтаСерия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
		КонецЕсли;
		
		КоличествоОстатка1 = 0;
		КоличествоОстатка2 = 0;
		КоличествоОстатка3 = 0;
		
		Если ИспользоватьСложныйМеханизмЦен Тогда		
			Цена1 = 0;
			Цена2 = 0;
			Цена3 = 0;	
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	НомерКолонки = 0;
	Для Каждого СтрокаОписания Из ПоследовательностьКолонок Цикл
		Если НЕ СтрокаОписания.НомерКолонкиВТаблицеДанных = 0 Тогда // используется
			СтруктураРеквизитов.Вставить(СтрокаОписания.НаименованиеРеквизита, МассивЗначенийЯчеек[НомерКолонки]);
		КонецЕсли;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	СтруктураЗначений = СтруктураЗначенийПоУмолчанию;
	Для Каждого ОпределяемыйРеквизит Из СтруктураРеквизитов Цикл
		
		ПринятьИзЧисла = ЛОЖЬ;
		СтроковоеЗначение = ОпределяемыйРеквизит.Значение;
		
		Если ЭтоНоменклатура Тогда
			
			Если ВестиУчетСерий
				И (ОпределяемыйРеквизит.Ключ = "Серия"
				ИЛИ ОпределяемыйРеквизит.Ключ = "КодПродукта"
				ИЛИ ОпределяемыйРеквизит.Ключ = "ДополнительныйКод1"
				ИЛИ ОпределяемыйРеквизит.Ключ = "ДополнительныйКод2"
				ИЛИ ОпределяемыйРеквизит.Ключ = "КомментарийКСерии"
				ИЛИ ОпределяемыйРеквизит.Ключ = "ШтрихКодСерии") Тогда
				
			Попытка
				Выполнить(" " + ОпределяемыйРеквизит.Ключ + " = СтроковоеЗначение; ");
			Исключение
			КонецПопытки;
				Продолжить;
			КонецЕсли;
			
			Если ИспользоватьСложныйМеханизмЦен Тогда
				
				Если ОпределяемыйРеквизит.Ключ = "Цена1"
					ИЛИ ОпределяемыйРеквизит.Ключ = "Цена2"
					ИЛИ ОпределяемыйРеквизит.Ключ = "Цена3" Тогда
					
					ПринятьИзЧисла = ИСТИНА;
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "ВидЦен1" Тогда
					
					ВидЦен1 = Справочники.ВидыЦен.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(ВидЦен1)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.ВидыЦен.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						ВидыЦен1 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "ВидЦен2" Тогда
					
					ВидЦен2 = Справочники.ВидыЦен.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(ВидЦен2)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.ВидыЦен.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						ВидыЦен2 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "ВидЦен3" Тогда
					
					ВидЦен3 = Справочники.ВидыЦен.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(ВидЦен3)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.ВидыЦен.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						ВидыЦен3 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ВестиУчетПоСкладам Тогда
				Если ОпределяемыйРеквизит.Ключ = "СкладОстатка1" Тогда
					
					СкладИмпорта1 = Справочники.Склады.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(СкладИмпорта1)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.Склады.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						СкладИмпорта1 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "СкладОстатка2" Тогда
					
					СкладИмпорта2 = Справочники.Склады.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(СкладИмпорта2)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.Склады.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						СкладИмпорта2 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "СкладОстатка3" Тогда
					
					СкладИмпорта3 = Справочники.Склады.НайтиПоНаименованию(СтроковоеЗначение);
					
					Если НЕ ЗначениеЗаполнено(СкладИмпорта3)
						И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
						
						ЗначениеРеквизитаОбъект = Справочники.Склады.СоздатьЭлемент();
						ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
						ЗначениеРеквизитаОбъект.Записать();
						
						СкладИмпорта3 = ЗначениеРеквизитаОбъект.Ссылка;
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ОпределяемыйРеквизит.Ключ = "КоличествоОстатка1"
					ИЛИ ОпределяемыйРеквизит.Ключ = "КоличествоОстатка2"
					ИЛИ ОпределяемыйРеквизит.Ключ = "КоличествоОстатка3" Тогда
					
					ПринятьИзЧисла = ИСТИНА;
				КонецЕсли;
			ИначеЕсли ОпределяемыйРеквизит.Ключ = "КоличествоОстатка1" Тогда // может быть и без учета складов
				ПринятьИзЧисла = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
		
		Если ПринятьИзЧисла Тогда
			Если НЕ СимволРазделителяЧислаНашейБазы = РазделительЧисел Тогда
				СтроковоеЗначение = СтрЗаменить(СтроковоеЗначение, СимволРазделителяЧислаНашейБазы, РазделительЧисел);
			КонецЕсли;
			
			СтроковоеЗначение = СтрЗаменить(СтроковоеЗначение, Символы.НПП, "");
			ОбщийМодульСервер.УдалитьНечисловыеСимволыИзТекста(СтроковоеЗначение, РазделительЧисел, ИСТИНА);
			
			Попытка
				Выполнить(" " + ОпределяемыйРеквизит.Ключ + " = Число(СтроковоеЗначение); ");
			Исключение
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Неопределено;
		ОписаниеРеквизита = ОбщийМодульПовтор.ПолучитьТипРеквизита(ВыбранныйТипОбъекта, ОпределяемыйРеквизит.Ключ, ЭтоСправочник, ЭтоДокумент);
		
		Если ОписаниеРеквизита.ТипСтрокой = "Строка" Тогда
			ЗначениеРеквизита = СтроковоеЗначение;
		ИначеЕсли ОписаниеРеквизита.ТипСтрокой = "Число" Тогда
			
			Если НЕ СимволРазделителяЧислаНашейБазы = РазделительЧисел Тогда
				СтроковоеЗначение = СтрЗаменить(СтроковоеЗначение, СимволРазделителяЧислаНашейБазы, РазделительЧисел);
			КонецЕсли;
			
			ОбщийМодульСервер.УдалитьНечисловыеСимволыИзТекста(СтроковоеЗначение, РазделительЧисел, ИСТИНА);
			
			Попытка
				ЗначениеРеквизита = Число(СтроковоеЗначение);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ОписаниеРеквизита.ТипСтрокой = "Дата" Тогда
			
			СтроковоеЗначение = СокрЛП(СтроковоеЗначение);
			СтрДлинаЭлементаДанныхФайла = СтрДлина(СтроковоеЗначение);
			
			Если СтрДлинаЭлементаДанныхФайла = 8
				ИЛИ СтрДлинаЭлементаДанныхФайла = 10 Тогда
				
				СредЭлементаДанныхФайла3 = Сред(СтроковоеЗначение, 3, 1);
				СредЭлементаДанныхФайла6 = Сред(СтроковоеЗначение, 6, 1);
				
				Если (СредЭлементаДанныхФайла3 = РазделительДаты И СредЭлементаДанныхФайла6 = РазделительДаты)
					ИЛИ (СредЭлементаДанныхФайла3 = "." И СредЭлементаДанныхФайла6 = ".")
					ИЛИ (СредЭлементаДанныхФайла3 = "-" И СредЭлементаДанныхФайла6 = "-")
					ИЛИ (СредЭлементаДанныхФайла3 = "," И СредЭлементаДанныхФайла6 = ",") Тогда
					
					СтроковоеЗначение = Прав(СтроковоеЗначение, СтрДлина(СтроковоеЗначение) - 6) + Сред(СтроковоеЗначение, 4, 2) + Сред(СтроковоеЗначение, 1, 2);
					
					Если СтрДлина(СтроковоеЗначение) = 6 Тогда
						СтроковоеЗначение = "20" + СтроковоеЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ЗначениеРеквизита = Дата(СтроковоеЗначение);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ОписаниеРеквизита.ТипСтрокой = "Булево" Тогда
			
			Если ПустаяСтрока(СтроковоеЗначение) Тогда
				ЗначениеРеквизита = ЛОЖЬ;
			Иначе
				ПервыйСимвол = Лев(СтроковоеЗначение, 1);
				Если ПервыйСимвол = "1"
					ИЛИ Врег(ПервыйСимвол) = "Д"
					ИЛИ ВРег(ПервыйСимвол) = "И"
					ИЛИ Врег(ПервыйСимвол) = "Y"
					ИЛИ Врег(ПервыйСимвол) = "T" Тогда
					
					ЗначениеРеквизита = ИСТИНА;
				Иначе
					ЗначениеРеквизита = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ОписаниеРеквизита.ТипСтрокой = "NULL" Тогда
			//Если ОписаниеРеквизита.Составной Тогда
			//
			//Иначе
			Если ОписаниеРеквизита.ТипСсылка = "Справочник" Тогда
				ЗначениеРеквизита = Справочники[ ОписаниеРеквизита.ТипСтрокой ].НайтипоНаименованию(СтроковоеЗначение);
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита)
					И СоздаватьЭтотЭлементПоНаименованию[ОпределяемыйРеквизит.Ключ] Тогда
					
					ЗначениеРеквизитаОбъект = Справочники[ ОписаниеРеквизита.ТипСтрокой ].СоздатьЭлемент();
					ЗначениеРеквизитаОбъект.Наименование = СтроковоеЗначение;
					ЗначениеРеквизитаОбъект.Записать();
					
					ЗначениеРеквизита = ЗначениеРеквизитаОбъект.Ссылка;
				КонецЕсли;
				
			ИначеЕсли ОписаниеРеквизита.ТипСсылка = "Документ" Тогда
				ЗначениеРеквизита = Документы[ ОписаниеРеквизита.ТипСтрокой ].НайтипоНомеру(СтроковоеЗначение);
			ИначеЕсли ОписаниеРеквизита.ТипСсылка = "Перечисление" Тогда
				ЗначениеРеквизита = Перечисления[ ОписаниеРеквизита.ТипСтрокой ][ СтроковоеЗначение ];
			КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеРеквизита = Неопределено Тогда
			СтруктураЗначений[ОпределяемыйРеквизит.Ключ] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоСправочник Тогда // отдельно определим родителя
		
		Если СправочникИерархический Тогда
			Родитель = СтруктураЗначенийПоУмолчанию.Родитель;
			
			Если НЕ ПолеРодителя = 0 Тогда
				НаименованиеРодителя = МассивЗначенийЯчеек[ПолеРодителя - 1];
				
				Если НЕ ПустаяСтрока(НаименованиеРодителя)
					И НЕ НаименованиеРодителя = НаименованиеПрошлогоРодителя Тогда
					
					Если НЕ ЗначениеЗаполнено(Родитель)
						ИЛИ НЕ Родитель.Наименование = НаименованиеРодителя Тогда
						
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + ВыбранныйТипОбъекта + ".Ссылка
						|ИЗ Справочник." + ВыбранныйТипОбъекта + " КАК " + ВыбранныйТипОбъекта + "
						|ГДЕ " + ВыбранныйТипОбъекта + ".Наименование = &Наименование
						|	И " + ВыбранныйТипОбъекта + ".ЭтоГруппа = ИСТИНА";
						
						Запрос.УстановитьПараметр("Наименование", НаименованиеРодителя);
						
						РезультатЗапроса = Запрос.Выполнить();
						Если НЕ РезультатЗапроса.Пустой() Тогда
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							ВыборкаДетальныеЗаписи.Следующий();
							Родитель = ВыборкаДетальныеЗаписи.Ссылка;
						ИначеЕсли НайтиСоздатьГруппу Тогда
							ОбъектРодитель = Справочники[ВыбранныйТипОбъекта].СоздатьГруппу();
							ОбъектРодитель.Наименование = НаименованиеРодителя;
							ОбъектРодитель.Родитель = СтруктураЗначенийПоУмолчанию.Родитель;
							ОбъектРодитель.Записать();
							
							Родитель = ОбъектРодитель.Ссылка;
						КонецЕсли;
						
						НаименованиеПрошлогоРодителя = НаименованиеРодителя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСправочник
		ИЛИ ЭтоДокумент Тогда // !!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + ВыбранныйТипОбъекта + ".Ссылка ИЗ " + ?(ЭтоСправочник, "Справочник", "Документ") + "." + ВыбранныйТипОбъекта + " КАК " + ВыбранныйТипОбъекта + " ГДЕ ИСТИНА ";
		
		Если ЗначениеЗаполнено(ПервоеПолеУникальности) Тогда
			Запрос.Текст = Запрос.Текст + " И " + ВыбранныйТипОбъекта + "." + ПервоеПолеУникальности + " = &" + ПервоеПолеУникальности + " ";
			Запрос.УстановитьПараметр(ПервоеПолеУникальности, СтруктураЗначений[ПервоеПолеУникальности]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВтороеПолеУникальности) Тогда
			Запрос.Текст = Запрос.Текст + " И " + ВыбранныйТипОбъекта + "." + ВтороеПолеУникальности + " = &" + ВтороеПолеУникальности + " ";
			Запрос.УстановитьПараметр(ВтороеПолеУникальности, СтруктураЗначений[ВтороеПолеУникальности]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТретьеПолеУникальности) Тогда
			Запрос.Текст = Запрос.Текст + " И " + ВыбранныйТипОбъекта + "." + ТретьеПолеУникальности + " = &" + ТретьеПолеУникальности + " ";
			Запрос.УстановитьПараметр(ТретьеПолеУникальности, СтруктураЗначений[ТретьеПолеУникальности]);
		КонецЕсли;
		
		ОбъектИмпорта = Неопределено;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Если НЕ ПропускатьСуществующие Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				ОбъектИмпорта = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОБъект();
			КонецЕсли;
		ИначеЕсли НЕ ТолькоОбновлять Тогда
			Если ЭтоСправочник Тогда
				ОбъектИмпорта = Справочники[ВыбранныйТипОбъекта].СоздатьЭлемент();
			Иначе // документ
				ОбъектИмпорта = Документы[ВыбранныйТипОбъекта].СоздатьДокумент();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОбъектИмпорта = Неопределено Тогда
			Былизм = ЛОЖЬ;
			
			Для Каждого РеквизитСтруктуры Из СтруктураЗначений Цикл
				
				Если ЭтоНоменклатура
					И НЕ СписокНеактивныхКлючей.НайтиПоЗначению(РеквизитСтруктуры.Ключ) = Неопределено Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если ПропускатьСуществующие
					ИЛИ НЕ ОбъектИмпорта[РеквизитСтруктуры.Ключ] = РеквизитСтруктуры.Значение Тогда
					
					Попытка
						ОбъектИмпорта[РеквизитСтруктуры.Ключ] = РеквизитСтруктуры.Значение;
						Былизм = ИСТИНА;
					Исключение // например квалификатор числе 10.6   """!!!!
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьПрограммаДляСтроки Тогда
				Попытка
					Выполнить(" " + ВыполнитьПрограмму + " ");
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если ЭтоСправочник Тогда
				
				Если СправочникИерархический
					И ЗначениеЗаполнено(Родитель)
					И НЕ ЗначениеЗаполнено(ОбъектИмпорта.Родитель) Тогда
					
					ОбъектИмпорта.Родитель = Родитель;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(Серия)
					И НЕ ОбъектИмпорта.СерийныйУчет Тогда
					
					ОбъектИмпорта.СерийныйУчет = ИСТИНА;
					Былизм = ИСТИНА;
				КонецЕсли;
				
				ОбъектИмпортаСсылка = ОбъектИмпорта.Ссылка;
				
				Если Былизм Тогда
					Попытка
						ОбъектИмпорта.Записать();
						Импортировано = Импортировано + 1;
						ОбъектИмпортаСсылка = ОбъектИмпорта.Ссылка;
						
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи при импорте") + ": " + ТекстОписанияОшибки);
						ОбъектИмпортаСсылка = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				Если НЕ ОбъектИмпортаСсылка = Неопределено Тогда
					
					Если ЭтоНоменклатура Тогда
						
						ЗначениеЗаполненоЭтаСерия = ЛОЖЬ;
						
						Если ВестиУчетСерий 
							И НЕ ПустаяСтрока(Серия) Тогда
							
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
							|	СерииНоменклатуры.Ссылка
							|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
							|ГДЕ СерииНоменклатуры.Владелец = &Номенклатура
							|	И СерииНоменклатуры.Наименование = &Серия";
							
							Запрос.УстановитьПараметр("Номенклатура", ОбъектИмпортаСсылка);
							Запрос.УстановитьПараметр("Серия", Серия);
							
							РезультатЗапроса = Запрос.Выполнить();
							Если НЕ РезультатЗапроса.Пустой() Тогда
								Если НЕ ПропускатьСуществующие Тогда
									ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
									
									ВыборкаДетальныеЗаписи.Следующий();
									ЭтаСерия = ВыборкаДетальныеЗаписи.Ссылка;
								КонецЕсли;
							Иначе
								Если НЕ ТолькоОбновлять Тогда
									ЭтаСерияОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
									ЭтаСерияОбъект.Владелец = ОбъектИмпортаСсылка;
									ЭтаСерияОбъект.ДополнительныйКод1 = ДополнительныйКод1;
									ЭтаСерияОбъект.ДополнительныйКод2 = ДополнительныйКод2;
									ЭтаСерияОбъект.КодПродукта 	= КодПродукта;
									ЭтаСерияОбъект.Комментарий 	= КомментарийКСерии;
									ЭтаСерияОбъект.Наименование = Серия;
									
									Попытка
										ЭтаСерияОбъект.Записать();
										Импортировано = Импортировано + 1;
										ЭтаСерия = ЭтаСерияОбъект.Ссылка;
										
									Исключение
										ТекстОписанияОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи серии") + ": " + ТекстОписанияОшибки);
										ЭтаСерия = Неопределено;
									КонецПопытки;
								КонецЕсли;
							КонецЕсли;
							
							Если НЕ ПустаяСтрока(ШтрихКодСерии) Тогда
								Если ЭтаСерия = Неопределено Тогда								
									ЭтаСерия = ОбщийМодульТоварСервер.НайтиНоменклатуруПоШтрихКоду(ШтрихКодСерии).СерияНоменклатуры;
								Иначе
									ОбщийМодульТоварСервер.ЗарегистрироватьШтрихКод(ШтрихКодСерии, ОбъектИмпортаСсылка, , ЭтаСерия);
								КонецЕсли;	
							КонецЕсли;							
							
							ЗначениеЗаполненоЭтаСерия = ЗначениеЗаполнено(ЭтаСерия);
							
							Если ЗначениеЗаполненоЭтаСерия
								И КоличествоОстатка1 = 0 Тогда
								
								КоличествоОстатка1 = 1;
							КонецЕсли;
						КонецЕсли;
						
						Если ИспользоватьСложныйМеханизмЦен Тогда
							
							Если СоздатьЗаполнитьДокументВводаОстатков
								И НЕ НовыйДокументОстатков = Неопределено Тогда
								
								Если НЕ КоличествоОстатка1 = 0 Тогда
									СтрокаТовара = НовыйДокументОстатков.Товары.Добавить();
									СтрокаТовара.Склад = СкладИмпорта1;
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.СерияНоменклатуры = ЭтаСерия;
									СтрокаТовара.Количество = ?(ЗначениеЗаполненоЭтаСерия, 1, КоличествоОстатка1);
									СтрокаТовара.Цена  = Цена1;
									СтрокаТовара.Сумма = Цена1 * СтрокаТовара.Количество;
								КонецЕсли;
								
								Если НЕ КоличествоОстатка2 = 0 Тогда
									СтрокаТовара = НовыйДокументОстатков.Товары.Добавить();
									СтрокаТовара.Склад = СкладИмпорта2;
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.СерияНоменклатуры = ЭтаСерия;
									СтрокаТовара.Количество = ?(ЗначениеЗаполненоЭтаСерия, 1, КоличествоОстатка2);
									СтрокаТовара.Цена  = Цена1;
									СтрокаТовара.Сумма = Цена1 * СтрокаТовара.Количество;
								КонецЕсли;
								
								Если НЕ КоличествоОстатка3 = 0 Тогда
									СтрокаТовара = НовыйДокументОстатков.Товары.Добавить();
									СтрокаТовара.Склад = СкладИмпорта3;
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.СерияНоменклатуры = ЭтаСерия;
									СтрокаТовара.Количество = ?(ЗначениеЗаполненоЭтаСерия, 1, КоличествоОстатка3);
									СтрокаТовара.Цена  = Цена1;
									СтрокаТовара.Сумма = Цена1 * СтрокаТовара.Количество;
								КонецЕсли;
								
								Если НЕ Цена1 = 0
									И ЗначениеЗаполнено(ВидЦен1) Тогда
									
									СтрокаТовара = НовыйДокументОстатков.Цены.Добавить();
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.ВидЦен = ВидЦен1;
									СтрокаТовара.Цена 	= Цена1;
								КонецЕсли;
								
								Если НЕ Цена2 = 0
									И ЗначениеЗаполнено(ВидЦен2) Тогда
									
									СтрокаТовара = НовыйДокументОстатков.Цены.Добавить();
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.ВидЦен = ВидЦен2;
									СтрокаТовара.Цена 	= Цена2;
								КонецЕсли;
								
								Если НЕ Цена3 = 0
									И ЗначениеЗаполнено(ВидЦен3) Тогда
									
									СтрокаТовара = НовыйДокументОстатков.Цены.Добавить();
									СтрокаТовара.Номенклатура = ОбъектИмпорта.Ссылка;
									СтрокаТовара.ВидЦен = ВидЦен3;
									СтрокаТовара.Цена 	= Цена3;
								КонецЕсли;
								
							Иначе // цены в регистр
								
								Если НЕ Цена1 = 0
									И ЗначениеЗаполнено(ВидЦен1) Тогда
									
									ЦенаНоменклатуры = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									ЦенаНоменклатуры.Активность 	= ИСТИНА;
									ЦенаНоменклатуры.ВидЦен			= ВидЦен1;
									ЦенаНоменклатуры.Вручную		= ИСТИНА;
									// ЦенаНоменклатуры.ЕдиницаИзмерения
									ЦенаНоменклатуры.Комментарий	= ТекстКомментария;
									ЦенаНоменклатуры.Номенклатура	= ОбъектИмпорта.Ссылка;
									ЦенаНоменклатуры.Период			= ДатаРегистрации;
									ЦенаНоменклатуры.Цена			= Цена1;
									
									Попытка
										ЦенаНоменклатуры.Записать(ИСТИНА);
									Исключение
										ТекстОписанияОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка установки цены 1 при импорте") + ": " + ТекстОписанияОшибки);
									КонецПопытки;
									
								КонецЕсли;
								
								Если НЕ Цена2 = 0
									И ЗначениеЗаполнено(ВидЦен2) Тогда
									
									ЦенаНоменклатуры = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									ЦенаНоменклатуры.Активность 	= ИСТИНА;
									ЦенаНоменклатуры.ВидЦен			= ВидЦен2;
									ЦенаНоменклатуры.Вручную		= ИСТИНА;
									// ЦенаНоменклатуры.ЕдиницаИзмерения
									ЦенаНоменклатуры.Комментарий	= ТекстКомментария;
									ЦенаНоменклатуры.Номенклатура	= ОбъектИмпорта.Ссылка;
									ЦенаНоменклатуры.Период			= ДатаРегистрации;
									ЦенаНоменклатуры.Цена			= Цена2;
									
									Попытка
										ЦенаНоменклатуры.Записать(ИСТИНА);
									Исключение
										ТекстОписанияОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка установки цены 2 при импорте") + ": " + ТекстОписанияОшибки);
									КонецПопытки;
									
								КонецЕсли;
								
								Если НЕ Цена3 = 0
									И ЗначениеЗаполнено(ВидЦен3) Тогда
									
									ЦенаНоменклатуры = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									ЦенаНоменклатуры.Активность 	= ИСТИНА;
									ЦенаНоменклатуры.ВидЦен			= ВидЦен3;
									ЦенаНоменклатуры.Вручную		= ИСТИНА;
									// ЦенаНоменклатуры.ЕдиницаИзмерения
									ЦенаНоменклатуры.Комментарий	= ТекстКомментария;
									ЦенаНоменклатуры.Номенклатура	= ОбъектИмпорта.Ссылка;
									ЦенаНоменклатуры.Период			= ДатаРегистрации;
									ЦенаНоменклатуры.Цена			= Цена3;
									
									Попытка
										ЦенаНоменклатуры.Записать(ИСТИНА);
									Исключение
										ТекстОписанияОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка установки цены 3 при импорте") + ": " + ТекстОписанияОшибки);
									КонецПопытки;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе  // это документ
				
				Если Былизм Тогда
					Если ОбъектИмпорта.Дата = '00010101000000' Тогда
						ОбъектИмпорта.Дата = ТекущаяДата();
					КонецЕсли;
					
					Попытка
						ОбъектИмпорта.Записать(РежимЗаписиДокумента.Запись);
						Импортировано = Импортировано + 1;
						
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи при импорте") + ": " + ТекстОписанияОшибки);
					КонецПопытки
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе // это регистр сведений
		
		ОбъектИмпорта = РегистрыСведений[ВыбранныйТипОбъекта].СоздатьМенеджерЗаписи();
		
		Для Каждого РеквизитСтруктуры Из СтруктураЗначений Цикл
			Попытка
				ОбъектИмпорта[РеквизитСтруктуры.Ключ] = РеквизитСтруктуры.Значение;
				Былизм = ИСТИНА;
			Исключение // например квалификатор числе 10.6   """!!!!
			КонецПопытки;
		КонецЦикла;
		
		Если ЕстьПрограммаДляСтроки Тогда
			Попытка
				Выполнить(" " + ВыполнитьПрограмму + " ");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ОбъектИмпорта.Записать(НЕ ПропускатьСуществующие);
			Импортировано = Импортировано + 1;
			
		Исключение
			ТекстОписанияОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи при импорте") + ": " + ТекстОписанияОшибки);
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПримерПрограммы(Команда)
	ВыполнитьПрограмму = " ОъектИмпорта.Производитель = Справочники.Производители.НайтиПоНаименованию(""Nike""); Былизм = ИСТИНА;";
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если НомерКолонкиКотораяЗаполненаОбязательно = 0
		ИЛИ НомерКолонкиКотораяЗаполненаОбязательно > ВсегоКолонок Тогда
		
		НомерКолонкиКотораяЗаполненаОбязательно = 1;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОтображениеПолучателя) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ": " + ОтображениеПолучателя;
	КонецЕсли;
	
	Если ПустаяСтрока(РазделительЧисел) Тогда
		РазделительЧисел = Сред(СокрЛП(1.5), 2, 1);
	КонецЕсли;
	
	Если ПустаяСтрока(РазделительДаты) Тогда
		РазделительДаты = ".";
	КонецЕсли;
	
	Элементы.ТаблицаДанных.РежимМасштабированияПросмотра = ?(РежимМасштабаКрупный, РежимМасштабированияПросмотра.Крупный, РежимМасштабированияПросмотра.Обычный);
	Элементы.ПерваяСтрокаТаблицыИгнорируется.Видимость = РежимМасштабаКрупный;
	
КонецПроцедуры

&НаСервере
Процедура ОределитьТипПолучателя(ТипПолучателяТаблицы, НаименованиеТаблицы, ИсходнаяТаблицаДанных)
	
	Разделитель = Найти(ТипПолучателяТаблицы, ".");
	
	Если НЕ Разделитель = 0 Тогда
		РазделПолучателяТаблицы = Лев(ТипПолучателяТаблицы, Разделитель - 1);
		СокрИмяФормы = Прав(ТипПолучателяТаблицы, СтрДлина(ТипПолучателяТаблицы) - Разделитель);
		Разделитель2 = Найти(СокрИмяФормы, ".");
		ТипПолучателяТаблицы = Лев(СокрИмяФормы, Разделитель2 - 1);
	КонецЕсли;
	
	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Документ", "Документы");
	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Справочник", "Справочники");
	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Обработка", "Обработки");
	
	ТаблицаПоМетаданным 	= Метаданные[РазделПолучателяТаблицы][ТипПолучателяТаблицы].ТабличныеЧасти[НаименованиеТаблицы];
	
	Сплошная 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
	ЖирныйШрифт 	 = Новый Шрифт(, , ИСТИНА,);
	ЕстьНоменклатура = ЛОЖЬ;
	ЕстьСоставной    = ЛОЖЬ;
	ВсегоКолонок 	 = 1;
	
	Для Каждого РеквизитТаблицы Из ТаблицаПоМетаданным.Реквизиты Цикл
		СписокКолонокТаблицы.Добавить(РеквизитТаблицы.Имя, РеквизитТаблицы.Синоним);
		ТипТут = РеквизитТаблицы.Тип.Типы()[0];
		Если ТипТут = Тип("Строка") Тогда
			ТипыКолонок.Добавить("Строка");
		ИначеЕсли ТипТут = Тип("Булево") Тогда
			ТипыКолонок.Добавить("Булево");
		ИначеЕсли ТипТут = Тип("Число") Тогда
			ТипыКолонок.Добавить("Число");
		ИначеЕсли ТипТут = Тип("Дата") Тогда
			ТипыКолонок.Добавить("Дата");
		Иначе
			НайденыМета = Метаданные.НайтиПоТипу(ТипТут);
			
			Если НЕ НайденыМета = Неопределено Тогда
				ТипыКолонок.Добавить(Метаданные.НайтиПоТипу(РеквизитТаблицы.Тип.Типы()[0]).Имя);
			Иначе
				ТипыКолонок.Добавить(NULL);
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитТаблицы.Имя = "Номенклатура" Тогда
			ЕстьНоменклатура = ИСТИНА;
		КонецЕсли;
		
		Если НЕ РеквизитТаблицы.Тип.Типы().Количество() = 1 Тогда
			ЕстьСоставной = ИСТИНА;
		КонецЕсли;
		
		ОбластьЗаголовка = ТаблицаДанных.Область(1, ВсегоКолонок);  // "R1C" + Формат(СчетчикКолонок, "ЧРГ=' '; ЧГ=0")
		ОбластьЗаголовка.Текст 			  = РеквизитТаблицы.Синоним;
		ОбластьЗаголовка.АвтоВысотаСтроки = ИСТИНА;
		ОбластьЗаголовка.ШиринаКолонки 	  = СтрДлина(РеквизитТаблицы.Синоним);
		ОбластьЗаголовка.Шрифт 			  = ЖирныйШрифт;
		
		Для СчетчикСтрок = 1 по 10 Цикл
			ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, ВсегоКолонок);
			ОбластьСЯчейкой.ГраницаСправа = Сплошная;
		КонецЦикла;
		
		ВсегоКолонок = ВсегоКолонок + 1;
	КонецЦикла;
	
	СчетчикСтрок = 2;
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблицаДанных Цикл
		СчетчикКолонок = 1;
		Для Каждого РеквизитТаблицы Из ТаблицаПоМетаданным.Реквизиты Цикл
			ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, СчетчикКолонок);
			ОбластьСЯчейкой.Текст = СтрокаТаблицы[РеквизитТаблицы.Имя];
			СчетчикКолонок = СчетчикКолонок + 1;
		КонецЦикла;
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
	ВсегоКолонок = ВсегоКолонок - 1;
	Элементы.НоменклатураПредставлена.Видимость = ЕстьНоменклатура;
	Элементы.ТипПоляСоставногоВида.Видимость    = ЕстьСоставной;
	ОтображениеПолучателя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таблица") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(НаименованиеТаблицы) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("для") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ТипПолучателяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
	ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	
	ВестиУчетСерий = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
	ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");
	
	ИспользоватьШтрихКоды = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	
	ОбщийМодульСервер.СформироватьПереченьОбъектовБазыДанных(ИСТИНА, ОбъектыБазыДанных);
	Для Каждого ЭлементСписка Из ОбъектыБазыДанных Цикл
		Элементы.ИмпортДанных.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрограмму(Команда)
	
	НаименованиеПрограммы = СокрЛП(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт данных") + " " + СохраненнаяНастройка);
	ПоказатьВводСтроки(Новый ОписаниеОповещения("СохранитьПрограммуЗавершение", ЭтотОбъект, Новый Структура("НаименованиеПрограммы", НаименованиеПрограммы)), НаименованиеПрограммы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите наименование программы"), 50, ЛОЖЬ);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрограммуЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	НаименованиеПрограммы = ?(Строка = Неопределено, ДополнительныеПараметры.НаименованиеПрограммы, Строка);
	
	Если НЕ ПустаяСтрока(НаименованиеПрограммы) Тогда
		ЗаписатьЭтуПрограммуНаСервере(НаименованиеПрограммы, ВыполнитьПрограмму);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЭтуПрограммуНаСервере(Знач НаименованиеПрограммы, Знач ТекстПрограммы)
	
	НоваяПрограмма = Справочники.ТекстыПрограмм.СоздатьЭлемент();
	НоваяПрограмма.Наименование   = НаименованиеПрограммы;
	НоваяПрограмма.ТекстПрограммы = ТекстПрограммы;
	НоваяПрограмма.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрограммуИзСправочника(Команда)
	
	ТекстПрограммы = ПредопределенноеЗначение("Справочник.ТекстыПрограмм.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьПрограммуИзСправочникаЗавершение", ЭтотОбъект, Новый Структура("ТекстПрограммы", ТекстПрограммы)), ТекстПрограммы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы"), Тип("СправочникСсылка.ТекстыПрограмм"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрограммуИзСправочникаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммы = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммы, Значение);
	
	Если ЗначениеЗаполнено(ТекстПрограммы) Тогда
		ВыполнитьПрограмму = ЗагрузитьТекстПрограммыНаСервере(ТекстПрограммы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ЗагрузитьТекстПрограммыНаСервере(Знач ТекстПрограммы)
	Возврат ТекстПрограммы.ТекстПрограммы + ТекстПрограммы.ТекстПрограммы2 + ТекстПрограммы.ТекстПрограммы3;
КонецФункции

&НаКлиенте
Процедура ИмпортДанныхОбработкаВыбора(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка)
	
	ВыбранныйТипОбъекта = ОбъектыБазыДанных.НайтиПоЗначению(ВыбраннаяСтрока).Значение;
	
	Если НЕ ПустаяСтрока(ВыбранныйТипОбъекта) Тогда
		ВыбранныйОбъект = СокрЛП(ОбъектыБазыДанных.НайтиПоЗначению(ВыбраннаяСтрока).Представление);
	КонецЕсли;
	
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбъектИмпорта()
	
	ОбновитьРеквизиты(ИСТИНА);
	ОбновитьВыборКлючевых();
	
	Элементы.ФормаЗагрузитьДанныеИзЭтойТаблицы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импортировать") + " " + ВыбранныйОбъект;
	Элементы.СоздатьПримерТаблицыИмпорта.Видимость = НЕ ПустаяСтрока(ВыбранныйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизиты(Знач ЗаполнитьТаблицуИмпорта = ЛОЖЬ)
	
	РезультатСтруктура = ОбщийМодульСервисСервер.ПолучитьРеквизитыОбъектаМетаданных(РеквизитыОбъекта, ВыбранныйТипОбъекта, ИСТИНА);
	ТипВСтроку 		= РезультатСтруктура.ТипВСтроку;
	СправочникИерархический = РезультатСтруктура.СправочникИерархический;
	ЭтоСправочник 	= РезультатСтруктура.ЭтоСправочник;
	ЭтоДокумент 	= РезультатСтруктура.ЭтоДокумент;
	ЭтоНоменклатура = ВыбранныйТипОбъекта = "Номенклатура";
	Элементы.ГруппаДокументаОстатков.Видимость = ЭтоНоменклатура;
	Элементы.ТолькоОбновлять.Видимость = ЭтоСправочник ИЛИ ЭтоДокумент;
	
	Если ЗаполнитьТаблицуИмпорта Тогда
		Объект.ОписаниеКолонок.Очистить();
		
		ПримерныйОбъект = Неопределено;
		Если ЭтоСправочник Тогда
			ПримерныйОбъект = Справочники[ВыбранныйТипОбъекта].СоздатьЭлемент();
		ИначеЕсли ЭтоДокумент Тогда
			ПримерныйОбъект = Документы[ВыбранныйТипОбъекта].СоздатьДокумент();
		Иначе
			ПримерныйОбъект = РегистрыСведений[ВыбранныйТипОбъекта].СоздатьМенеджерЗаписи();
		КонецЕсли;
		
		Элементы.НайтиСоздатьГруппу.Видимость = СправочникИерархический;
		
		Если ЭтоНоменклатура Тогда
			
			ДобавитьРеквизитВОписания("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование номенклатуры"), "");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
				ДобавитьРеквизитВОписания("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Артикул номенклатуры"), "");
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") Тогда
				ДобавитьРеквизитВОписания("Производитель", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Производитель номенклатуры"), ПредопределенноеЗначение("Справочник.Производители.ПустаяСсылка"));
			КонецЕсли;
			
			ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
			ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
			УчетСерий = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры") ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");
			
			Если ВестиУчетПоСкладам Тогда
				ДобавитьРеквизитВОписания("СкладОстатка1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад с остатком 1"), ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"));
				ДобавитьРеквизитВОписания("КоличествоОстатка1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество остатка 1"), 0);
				ДобавитьРеквизитВОписания("СкладОстатка2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад с остатком 2"), ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
				ДобавитьРеквизитВОписания("КоличествоОстатка2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество остатка 2"), 0);
				ДобавитьРеквизитВОписания("СкладОстатка3", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад с остатком 3"), ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
				ДобавитьРеквизитВОписания("КоличествоОстатка3", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество остатка 3"), 0);
			Иначе
				ДобавитьРеквизитВОписания("КоличествоОстатка1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество остатка"), 0);
			КонецЕсли;
			
			Если ИспользоватьСложныйМеханизмЦен Тогда
				ДобавитьРеквизитВОписания("ВидЦен1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вида цен 1"), ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен"));
				ДобавитьРеквизитВОписания("Цена1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена вида цен 1"), 0);
				ДобавитьРеквизитВОписания("ВидЦен2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вида цен 2"), ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
				ДобавитьРеквизитВОписания("Цена2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена вида цен 2"), 0);
				ДобавитьРеквизитВОписания("ВидЦен3", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вида цен 3"), ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
				ДобавитьРеквизитВОписания("Цена3", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена вида цен 3"), 0);
			КонецЕсли;
			
			ДобавитьРеквизитВОписания("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий к номенклатуре"), "");
			
			Если ВестиУчетСерий Тогда				
				ДобавитьРеквизитВОписания("Серия", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия товара"), "");
				ДобавитьРеквизитВОписания("КодПродукта", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код продукта"), "");
				ДобавитьРеквизитВОписания("ДополнительныйКод1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный код 1"), "");
				ДобавитьРеквизитВОписания("ДополнительныйКод2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный код 2"), "");
				ДобавитьРеквизитВОписания("КомментарийКСерии", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий к серии"), "");
				
				Если ИспользоватьШтрихКоды Тогда
					ДобавитьРеквизитВОписания("ШтрихКодСерии", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрихкод серии"), "");
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьШтрихКоды Тогда
				ДобавитьРеквизитВОписания("ОсновнойШтрихКод", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрихкод номенклатуры"), "");	
			КонецЕсли;
			
			ДобавитьРеквизитВОписания("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код номенклатуры"), "");
		ИначеЕсли ЭтоСправочник Тогда
			ДобавитьРеквизитВОписания("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование"), "");
			ДобавитьРеквизитВОписания("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код"), "");
		ИначеЕсли ЭтоДокумент Тогда
			ДобавитьРеквизитВОписания("Номер", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер документа"), "");
			ДобавитьРеквизитВОписания("Дата", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата документа"), '00010101000000');
		КонецЕсли;
		
		Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
			
			Если ЭтоСправочник Тогда
				Если РеквизитОбъекта.Значение = "Наименование"
					ИЛИ РеквизитОбъекта.Значение = "Код" Тогда // заявлены раньше
					
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоДокумент тогда
				Если РеквизитОбъекта.Значение = "Номер"
					ИЛИ РеквизитОбъекта.Значение = "Дата" Тогда // заявлены раньше
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоНоменклатура Тогда
				
				Если РеквизитОбъекта.Значение = "Артикул"
					ИЛИ РеквизитОбъекта.Значение = "Производитель"
					ИЛИ РеквизитОбъекта.Значение = "Комментарий"
					ИЛИ РеквизитОбъекта.Значение = "ОсновнойШтрихКод" Тогда // заявлены раньше
					
					Продолжить;
				КонецЕсли;
				
				Если ИспользоватьСложныйМеханизмЦен
					И РеквизитОбъекта.Значение = "Цена" Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если НЕ ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
					И РеквизитОбъекта.Значение = "НоменклатурнаяГруппа" Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если НЕ ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп
					И НЕ Найти(РеквизитОбъекта.Значение, "РеквизитНоменклатурнойГруппы") = 0 Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если НЕ УчетСерий
					И РеквизитОбъекта.Значение = "СерийныйУчет" Тогда
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьРеквизитВОписания(РеквизитОбъекта.Значение, РеквизитОбъекта.Представление, ?(ПримерныйОбъект = Неопределено, Неопределено, ПримерныйОбъект[РеквизитОбъекта.Значение]));
		КонецЦикла;
		
		ПримерныйОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитВОписания(Знач РеквизитОбъектаЗначение, Знач РеквизитОбъектаПредставление, Знач ЗначениеПримера)
	
	СтрокаОписания = Объект.ОписаниеКолонок.Добавить();
	СтрокаОписания.НаименованиеРеквизита = РеквизитОбъектаЗначение;
	СтрокаОписания.ОписаниеРеквизита = РеквизитОбъектаПредставление;
	СтрокаОписания.НомерКолонкиВТаблицеДанных = 0;
	
	Если НЕ ЗначениеПримера = Неопределено Тогда
		
		Если НЕ РеквизитОбъектаЗначение = "ПометкаУдаления"
			И НЕ РеквизитОбъектаЗначение = "ЭтоГруппа" Тогда
			
			СтрокаРеквизит = Объект.ПереченьРеквизитов.Добавить();
			СтрокаРеквизит.НаименованиеРеквизита = РеквизитОбъектаЗначение;
			СтрокаРеквизит.ОписаниеРеквизита = РеквизитОбъектаПредставление;
			Если ЗначениеПримера = NULL Тогда // отключен функциональной опцией
				СтрокаРеквизит.ЗначениеПоУмолчанию = Неопределено;
			Иначе
				СтрокаРеквизит.ЗначениеПоУмолчанию = ЗначениеПримера;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокНомерКолонкиВТаблицеДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОписаниеКолонок.ТекущиеДанные;
	ПрименитьКТаблице(ТекущиеДанные.НомерКолонкиВТаблицеДанных, ТекущиеДанные.ОписаниеРеквизита);
	
	Если ВсегоКолонок < ТекущиеДанные.НомерКолонкиВТаблицеДанных Тогда
		ВсегоКолонок = ТекущиеДанные.НомерКолонкиВТаблицеДанных;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьКТаблице(Знач НомерКолонки, Знач НаименованиеКолонки)
	
	Если НомерКолонки > 0 Тогда
		ОбластьСЯчейкой = ТаблицаДанных.Область(1, НомерКолонки);
		ОбластьСЯчейкой.Текст = НаименованиеКолонки;
		ДлинаКолонки = Окр(СтрДлина(НаименованиеКолонки) * 1.2);
		Если ДлинаКолонки < 9 Тогда
			ДлинаКолонки = 9;
		КонецЕсли;
		ОбластьСЯчейкой.ШиринаКолонки = ДлинаКолонки;
		ЖирныйШрифт = Новый Шрифт(, , ИСТИНА,);
		ОбластьСЯчейкой.Шрифт = ЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзПеречняЛишниеРеквизиты(Команда)
	
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ОписаниеКолонок Цикл
		Если СтрокаТаблицы.НомерКолонкиВТаблицеДанных = 0 Тогда
			МассивКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивКУдалению Цикл
		Объект.ОписаниеКолонок.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СправочникИерархический
		И Элементы.ПереченьРеквизитов.ТекущиеДанные.НаименованиеРеквизита = "Родитель" Тогда
		
		ДанныеВыбора = ОткрытьФормуМодально("Справочник." + ВыбранныйТипОбъекта + ".ФормаВыбораГруппы");
		Элементы.ПереченьРеквизитов.ТекущиеДанные.ЗначениеПоУмолчанию = ДанныеВыбора;
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметрыИмпорта(Команда)
	
	НаименованиеПараметров = "" + ВыбранныйОбъект;
	ПоказатьВводСтроки(Новый ОписаниеОповещения("СохранитьПараметрыИмпортаЗавершение", ЭтотОбъект, Новый Структура("НаименованиеПараметров", НаименованиеПараметров)), НаименованиеПараметров, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите наименование параметров импорта"), 100, ЛОЖЬ);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметрыИмпортаЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	НаименованиеПараметров = ?(Строка = Неопределено, ДополнительныеПараметры.НаименованиеПараметров, Строка);
	
	Если НЕ ПустаяСтрока(НаименованиеПараметров) Тогда
		СохранитьПараметрыИмпортаНаСервере(НаименованиеПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыИмпортаНаСервере(Знач НаименованиеПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицыДанных.Ссылка
	|ИЗ Документ.ТаблицыДанных КАК ТаблицыДанных
	|ГДЕ ТаблицыДанных.ОбщееНаименование = &ОбщееНаименование
	|	И ТаблицыДанных.ТипДокумента = ""Параметры импорта""";
	
	Запрос.УстановитьПараметр("ОбщееНаименование", НаименованиеПараметров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ДокументПараметров = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументПараметров.ТаблицаСДанными.Очистить();
	Иначе
		ДокументПараметров = Документы.ТаблицыДанных.СоздатьДокумент();
		ДокументПараметров.ОбщееНаименование = НаименованиеПараметров;
		ДокументПараметров.Комментарий 		 = НаименованиеПараметров;
		ДокументПараметров.ТипДокумента 	 = "Параметры импорта"; // без перевода
		
		НоваяКолонка = ДокументПараметров.ОписаниеКолонок.Добавить();
		НоваяКолонка.ОписаниеПоляКолонки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Имя параметра");
		НоваяКолонка = ДокументПараметров.ОписаниеКолонок.Добавить();
		НоваяКолонка.ОписаниеПоляКолонки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Значение параметра");
	КонецЕсли;
	
	ДокументПараметров.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	ДобавитьЗначениеНастройки("ВыбранныйТипОбъекта", ВыбранныйТипОбъекта, ДокументПараметров);
	ДобавитьЗначениеНастройки("ВыбранныйОбъект", ВыбранныйОбъект, ДокументПараметров);
	ДобавитьЗначениеНастройки("ТипВСтроку", ТипВСтроку, ДокументПараметров);
	ДобавитьЗначениеНастройки("ЭтоДокумент", ЭтоДокумент, ДокументПараметров);
	ДобавитьЗначениеНастройки("ВсегоКолонок", ВсегоКолонок, ДокументПараметров);
	ДобавитьЗначениеНастройки("ЭтоСправочник", ЭтоСправочник, ДокументПараметров);
	ДобавитьЗначениеНастройки("РазделительДаты", РазделительДаты, ДокументПараметров);
	ДобавитьЗначениеНастройки("ТолькоОбновлять", ТолькоОбновлять, ДокументПараметров);
	ДобавитьЗначениеНастройки("РазделительЧисел", РазделительЧисел, ДокументПараметров);
	ДобавитьЗначениеНастройки("НайтиСоздатьГруппу", НайтиСоздатьГруппу, ДокументПараметров);
	ДобавитьЗначениеНастройки("ВыполнитьПрограмму", ВыполнитьПрограмму, ДокументПараметров);
	ДобавитьЗначениеНастройки("ТипПоляСоставногоВида", ТипПоляСоставногоВида, ДокументПараметров);
	ДобавитьЗначениеНастройки("ТретьеПолеУникальности", ТретьеПолеУникальности, ДокументПараметров);
	ДобавитьЗначениеНастройки("ПервоеПолеУникальности", ПервоеПолеУникальности, ДокументПараметров);
	ДобавитьЗначениеНастройки("ДоступноеЧислоПробелов", ДоступноеЧислоПробелов, ДокументПараметров);
	ДобавитьЗначениеНастройки("ВтороеПолеУникальности", ВтороеПолеУникальности, ДокументПараметров);
	ДобавитьЗначениеНастройки("ПропускатьСуществующие", ПропускатьСуществующие, ДокументПараметров);
	ДобавитьЗначениеНастройки("СправочникИерархический", СправочникИерархический, ДокументПараметров);
	ДобавитьЗначениеНастройки("НоменклатураПредставлена", НоменклатураПредставлена, ДокументПараметров);
	ДобавитьЗначениеНастройки("НомерКолонкиКотораяЗаполненаОбязательно", НомерКолонкиКотораяЗаполненаОбязательно, ДокументПараметров);
	
	Для Каждого СтрокаОписания Из Объект.ОписаниеКолонок Цикл // всё без перевода
		ДобавитьЗначениеНастройки("Новая строка описания", ИСТИНА, ДокументПараметров);
		ДобавитьЗначениеНастройки("Наименование реквизита", СтрокаОписания.НаименованиеРеквизита, ДокументПараметров);
		ДобавитьЗначениеНастройки("Описание реквизита", СтрокаОписания.ОписаниеРеквизита, ДокументПараметров);
		ДобавитьЗначениеНастройки("Номер колонки в таблице данных", СтрокаОписания.НомерКолонкиВТаблицеДанных, ДокументПараметров);
		ДобавитьЗначениеНастройки("Значение по-умолчанию", СтрокаОписания.ЗначениеПоУмолчанию, ДокументПараметров);
		ДобавитьЗначениеНастройки("О строке", СтрокаОписания.ОСтроке, ДокументПараметров);
		ДобавитьЗначениеНастройки("Принимать предыдущее значение", СтрокаОписания.ПриниматьПредыдущееЗначение, ДокументПараметров);
		ДобавитьЗначениеНастройки("Создавать новый элемент по наименованию", СтрокаОписания.СоздаватьНовыйЭлементПоНаименованию, ДокументПараметров);
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
	КонецЦикла;
	
	Для Каждого СтрокаПеречня Из Объект.ПереченьРеквизитов Цикл // всё без перевода
		ДобавитьЗначениеНастройки("Новый элемент перечня", ИСТИНА, ДокументПараметров);
		ДобавитьЗначениеНастройки("Наименование реквизита", СтрокаПеречня.НаименованиеРеквизита, ДокументПараметров);
		ДобавитьЗначениеНастройки("Описание реквизита", СтрокаПеречня.ОписаниеРеквизита, ДокументПараметров);
		ДобавитьЗначениеНастройки("Номер колонки в таблице данных", СтрокаПеречня.НомерКолонкиВТаблицеДанных, ДокументПараметров);
		ДобавитьЗначениеНастройки("Значение по-умолчанию", СтрокаПеречня.ЗначениеПоУмолчанию, ДокументПараметров);
		ДобавитьЗначениеНастройки("О строке", СтрокаПеречня.ОСтроке, ДокументПараметров);
		ДобавитьЗначениеНастройки("Принимать предыдущее значение", СтрокаПеречня.ПриниматьПредыдущееЗначение, ДокументПараметров);
		ДобавитьЗначениеНастройки("Создавать новый элемент по наименованию", СтрокаПеречня.СоздаватьНовыйЭлементПоНаименованию, ДокументПараметров);
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
		ДобавитьЗначениеНастройки("", "", ДокументПараметров); // резерв
	КонецЦикла;
	
	ДокументПараметров.Записать(РежимЗаписиДокумента.Запись);
	СохраненнаяНастройка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант") + ": " + НаименованиеПараметров;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеНастройки(Знач ИмяНастройки, Знач ЗначениеНастройки, ДокументПараметров)
	
	СтрокаНастроек = ДокументПараметров.ТаблицаСДанными.Добавить();
	СтрокаНастроек.ЗначениеПоляТаблицы1 = ИмяНастройки;
	СтрокаНастроек.ЗначениеПоляТаблицы2 = ЗначениеНастройки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПараметрыИмпорта(Команда)
	
	СписокСохораненныхПараметров = ПолучитьСписокСохраненныхПараметров();
	Если СписокСохораненныхПараметров.Количество() = 0 Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ВосстановитьПараметрыИмпортаЗавершение", ЭтотОбъект), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохраненных параметров нет."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нечего восстановить"));
	Иначе
		НаименованиеСохраненныхПараметров = Неопределено;
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВосстановитьПараметрыИмпортаВыбор", ЭтотОбъект), СписокСохораненныхПараметров, Элементы.ВосстановитьПараметрыИмпорта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПараметрыИмпортаВыбор(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	НаименованиеСохраненныхПараметров = ВыбранныйЭлемент;
	Если Не НаименованиеСохраненныхПараметров = Неопределено Тогда
		ВосстановитьПараметрыИмпортаНаСервере(НаименованиеСохраненныхПараметров.Значение);
		ОбновитьВыборКлючевых();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПараметрыИмпортаЗавершение(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПараметрыИмпортаНаСервере(Знач НаименованиеПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицыДанных.Ссылка
	|ИЗ Документ.ТаблицыДанных КАК ТаблицыДанных
	|ГДЕ ТаблицыДанных.ОбщееНаименование = &ОбщееНаименование
	|	И ТаблицыДанных.ТипДокумента = ""Параметры импорта""
	|УПОРЯДОЧИТЬ ПО ТаблицыДанных.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ОбщееНаименование", НаименованиеПараметров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Объект.ОписаниеКолонок.Очистить();
		Объект.ПереченьРеквизитов.Очистить();;
		ПочиститьЗаголовки();
		
		ДокументТаблицаДанных = ВыборкаДетальныеЗаписи.Ссылка;
		ВсегоСтрок = ДокументТаблицаДанных.ТаблицаСДанными.Количество();
		НомерСтроки = 0;
		
		Пока НомерСтроки < ВсегоСтрок Цикл
			СтрокаТаблицы = ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки];
			ИмяПараметра = СтрокаТаблицы.ЗначениеПоляТаблицы1;
			
			Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
				Если ИмяПараметра = "Новая строка описания" Тогда
					
					СтрокаТаблицыОбъекта = Объект.ОписаниеКолонок.Добавить();
					СтрокаТаблицыОбъекта.НаименованиеРеквизита  	= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 1].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ОписаниеРеквизита 			= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 2].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.НомерКолонкиВТаблицеДанных	= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 3].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ЗначениеПоУмолчанию 		= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 4].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ОСтроке 					= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 5].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ПриниматьПредыдущееЗначение= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 6].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.СоздаватьНовыйЭлементПоНаименованию = ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 7].ЗначениеПоляТаблицы2;
					
					ПрименитьКТаблице(СтрокаТаблицыОбъекта.НомерКолонкиВТаблицеДанных, СтрокаТаблицыОбъекта.ОписаниеРеквизита);
					
					Если ВсегоКолонок < СтрокаТаблицыОбъекта.НомерКолонкиВТаблицеДанных Тогда
						ВсегоКолонок = СтрокаТаблицыОбъекта.НомерКолонкиВТаблицеДанных;
					КонецЕсли;
					
					НомерСтроки = НомерСтроки + 10;
				ИначеЕсли ИмяПараметра = "Новый элемент перечня" Тогда
					
					СтрокаТаблицыОбъекта = Объект.ПереченьРеквизитов.Добавить();
					СтрокаТаблицыОбъекта.НаименованиеРеквизита  	= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 1].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ОписаниеРеквизита 			= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 2].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.НомерКолонкиВТаблицеДанных	= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 3].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ЗначениеПоУмолчанию 		= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 4].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ОСтроке 					= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 5].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.ПриниматьПредыдущееЗначение= ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 6].ЗначениеПоляТаблицы2;
					СтрокаТаблицыОбъекта.СоздаватьНовыйЭлементПоНаименованию = ДокументТаблицаДанных.ТаблицаСДанными[НомерСтроки + 7].ЗначениеПоляТаблицы2;
					
					НомерСтроки = НомерСтроки + 10;
				Иначе
					ЗначениеПараметра = СтрокаТаблицы.ЗначениеПоляТаблицы2;
					
					Выполнить(" " + ИмяПараметра + " = ЗначениеПараметра;");
				КонецЕсли;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		СохраненнаяНастройка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант") + ": " + НаименованиеПараметров;
		ЭтоНоменклатура = ВыбранныйТипОбъекта = "Номенклатура";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьСписокСохраненныхПараметров()
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТаблицыДанных.ОбщееНаименование
	|ИЗ Документ.ТаблицыДанных КАК ТаблицыДанных
	|ГДЕ ТаблицыДанных.ТипДокумента = ""Параметры импорта""
	|УПОРЯДОЧИТЬ ПО ТаблицыДанных.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.Добавить(ВыборкаДетальныеЗаписи.ОбщееНаименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант") + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВыборкаДетальныеЗаписи.ОбщееНаименование));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПараметрыИмпортаВФайл(Команда)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для выгрузки настроек") + ": ";
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	= ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.Показать(Новый ОписаниеОповещения("СохранитьПараметрыИмпортаВФайлЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбФайла", ДиалогВыбФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметрыИмпортаВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбФайла = ДополнительныеПараметры.ДиалогВыбФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		ЗаписатьПараметрыИмпортаВФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПараметрыИмпортаВФайл()
	
	ДокументПараметров = Новый ЗаписьТекста(АдресФайла);;
	
	ДокументПараметров.ЗаписатьСтроку("Elementary Trade universal import settings v1");
	ДокументПараметров.ЗаписатьСтроку(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Параметры импорта"));
	ДокументПараметров.ЗаписатьСтроку(ОбщийМодульКлиент.ПользователяТекущаяДата());
	
	ДокументПараметров.ЗаписатьСтроку("ВыбранныйТипОбъекта");ДокументПараметров.ЗаписатьСтроку(ВыбранныйТипОбъекта);
	ДокументПараметров.ЗаписатьСтроку("ВыбранныйОбъект");ДокументПараметров.ЗаписатьСтроку(ВыбранныйОбъект);
	ДокументПараметров.ЗаписатьСтроку("ТипВСтроку");ДокументПараметров.ЗаписатьСтроку(ТипВСтроку);
	ДокументПараметров.ЗаписатьСтроку("ЭтоДокумент");ДокументПараметров.ЗаписатьСтроку(ЭтоДокумент);
	ДокументПараметров.ЗаписатьСтроку("ВсегоКолонок");ДокументПараметров.ЗаписатьСтроку(ВсегоКолонок);
	ДокументПараметров.ЗаписатьСтроку("ЭтоСправочник");ДокументПараметров.ЗаписатьСтроку(ЭтоСправочник);
	ДокументПараметров.ЗаписатьСтроку("РазделительДаты");ДокументПараметров.ЗаписатьСтроку(РазделительДаты);
	ДокументПараметров.ЗаписатьСтроку("ТолькоОбновлять");ДокументПараметров.ЗаписатьСтроку(ТолькоОбновлять);
	ДокументПараметров.ЗаписатьСтроку("РазделительЧисел");ДокументПараметров.ЗаписатьСтроку(РазделительЧисел);
	ДокументПараметров.ЗаписатьСтроку("НайтиСоздатьГруппу");ДокументПараметров.ЗаписатьСтроку(НайтиСоздатьГруппу);
	ДокументПараметров.ЗаписатьСтроку("ВыполнитьПрограмму");ДокументПараметров.ЗаписатьСтроку(СтрЗаменить(ВыполнитьПрограмму, Символы.ПС, Символы.Таб));
	ДокументПараметров.ЗаписатьСтроку("ТипПоляСоставногоВида");ДокументПараметров.ЗаписатьСтроку(ТипПоляСоставногоВида);
	ДокументПараметров.ЗаписатьСтроку("ТретьеПолеУникальности");ДокументПараметров.ЗаписатьСтроку(ТретьеПолеУникальности);
	ДокументПараметров.ЗаписатьСтроку("ПервоеПолеУникальности");ДокументПараметров.ЗаписатьСтроку(ПервоеПолеУникальности);
	ДокументПараметров.ЗаписатьСтроку("ДоступноеЧислоПробелов");ДокументПараметров.ЗаписатьСтроку(ДоступноеЧислоПробелов);
	ДокументПараметров.ЗаписатьСтроку("ВтороеПолеУникальности");ДокументПараметров.ЗаписатьСтроку(ВтороеПолеУникальности);
	ДокументПараметров.ЗаписатьСтроку("ПропускатьСуществующие");ДокументПараметров.ЗаписатьСтроку(ПропускатьСуществующие);
	ДокументПараметров.ЗаписатьСтроку("СправочникИерархический");ДокументПараметров.ЗаписатьСтроку(СправочникИерархический);
	ДокументПараметров.ЗаписатьСтроку("НоменклатураПредставлена");ДокументПараметров.ЗаписатьСтроку(НоменклатураПредставлена);
	ДокументПараметров.ЗаписатьСтроку("НомерКолонкиКотораяЗаполненаОбязательно");ДокументПараметров.ЗаписатьСтроку(НомерКолонкиКотораяЗаполненаОбязательно);
	
	Для Каждого СтрокаОписания Из Объект.ОписаниеКолонок Цикл // всё без перевода
		ДокументПараметров.ЗаписатьСтроку("Новая строка описания");
		ДокументПараметров.ЗаписатьСтроку(СтрокаОписания.НаименованиеРеквизита);
		ДокументПараметров.ЗаписатьСтроку(СтрокаОписания.ОписаниеРеквизита);
		ДокументПараметров.ЗаписатьСтроку(СтрокаОписания.НомерКолонкиВТаблицеДанных);
		ДокументПараметров.ЗаписатьСтроку(СтрокаОписания.ЗначениеПоУмолчанию);
		ДокументПараметров.ЗаписатьСтроку(СтрокаОписания.ОСтроке);
		ДокументПараметров.ЗаписатьСтроку(?(СтрокаОписания.ПриниматьПредыдущееЗначение, "1", "0"));
		ДокументПараметров.ЗаписатьСтроку(?(СтрокаОписания.СоздаватьНовыйЭлементПоНаименованию, "1", "0"));
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
	КонецЦикла;
	
	Для Каждого СтрокаПеречня Из Объект.ПереченьРеквизитов Цикл // всё без перевода
		ДокументПараметров.ЗаписатьСтроку("Новая строка перечня");
		ДокументПараметров.ЗаписатьСтроку(СтрокаПеречня.НаименованиеРеквизита);
		ДокументПараметров.ЗаписатьСтроку(СтрокаПеречня.ОписаниеРеквизита);
		ДокументПараметров.ЗаписатьСтроку(СтрокаПеречня.НомерКолонкиВТаблицеДанных);
		ДокументПараметров.ЗаписатьСтроку(СтрокаПеречня.ЗначениеПоУмолчанию);
		ДокументПараметров.ЗаписатьСтроку(СтрокаПеречня.ОСтроке);
		ДокументПараметров.ЗаписатьСтроку(?(СтрокаПеречня.ПриниматьПредыдущееЗначение, "1", "0"));
		ДокументПараметров.ЗаписатьСтроку(?(СтрокаПеречня.СоздаватьНовыйЭлементПоНаименованию, "1", "0"));
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
		ДокументПараметров.ЗаписатьСтроку(""); // резерв
	КонецЦикла;
	
	ДокументПараметров.Закрыть();
	
	СохраненнаяНастройка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант") + ": " + АдресФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПараметрыИмпортаИзФайла(Команда)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для загрузки настроек") + ": ";
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	= ИСТИНА;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла	= ИСТИНА;
	ДиалогВыбФайла.Показать(Новый ОписаниеОповещения("ПрочитатьПараметрыИмпортаИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбФайла", ДиалогВыбФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПараметрыИмпортаИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбФайла = ДополнительныеПараметры.ДиалогВыбФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		СчитатьПараметрыИмпортаИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьПараметрыИмпортаИзФайла()
	
	ДокументПараметров = Новый ЧтениеТекста(АдресФайла);
	
	СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
	Если СтрокаФайла = "Elementary Trade universal import settings v1" Тогда
		
		Объект.ОписаниеКолонок.Очистить();
		Объект.ПереченьРеквизитов.Очистить();
		ПочиститьЗаголовки();
		
		СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
		СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
		СохраненнаяНастройка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант") + ": " + АдресФайла + " " + СтрокаФайла;
		
		СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
		Пока НЕ СтрокаФайла = Неопределено Цикл
			Если НЕ ПустаяСтрока(СтрокаФайла) Тогда
				Если СтрокаФайла = "Новая строка описания" Тогда
					
					СтрокаОписания = Объект.ОписаниеКолонок.Добавить();
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.НаименованиеРеквизита = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.ОписаниеРеквизита = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.НомерКолонкиВТаблицеДанных = Число(СтрокаФайла);
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.ЗначениеПоУмолчанию = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.ОСтроке = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.ПриниматьПредыдущееЗначение = ?(СтрокаФайла = "1", ИСТИНА, ЛОЖЬ);
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаОписания.СоздаватьНовыйЭлементПоНаименованию = ?(СтрокаФайла = "1", ИСТИНА, ЛОЖЬ);
					
					ПрименитьКТаблице(СтрокаОписания.НомерКолонкиВТаблицеДанных, СтрокаОписания.ОписаниеРеквизита);
					
					Если ВсегоКолонок < СтрокаОписания.НомерКолонкиВТаблицеДанных Тогда
						ВсегоКолонок = СтрокаОписания.НомерКолонкиВТаблицеДанных;
					КонецЕсли;
					
				ИначеЕсли СтрокаФайла = "Новая строка перечня" Тогда
					
					СтрокаПеречня = Объект.ПереченьРеквизитов.Добавить();
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.НаименованиеРеквизита = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.ОписаниеРеквизита = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.НомерКолонкиВТаблицеДанных = Число(СтрокаФайла);
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.ЗначениеПоУмолчанию = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.ОСтроке = СтрокаФайла;
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.ПриниматьПредыдущееЗначение = ?(СтрокаФайла = "1", ИСТИНА, ЛОЖЬ);
					СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
					СтрокаПеречня.СоздаватьНовыйЭлементПоНаименованию = ?(СтрокаФайла = "1", ИСТИНА, ЛОЖЬ);
					
				Иначе
					НаименованиеПараметра = СтрокаФайла;
					ЗначениеПараметра = ДокументПараметров.ПрочитатьСтроку();
					
					Выполнить(" " + НаименованиеПараметра + " = ЗначениеПараметра;");
				КонецЕсли;
			КонецЕсли;
			
			СтрокаФайла = ДокументПараметров.ПрочитатьСтроку();
		КонецЦикла;
		
		ДокументПараметров.Закрыть();
		ЭтоНоменклатура = ВыбранныйТипОбъекта = "Номенклатура";
		
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ссылочные значения потеряны. Проверьте настройки импорта!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание!"));
		ОбновитьВыборКлючевых();
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОтменаПрочитатьПараметрыИмпортаИзФайлаЗавершение", ЭтотОбъект), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл не содержит настроек определенного формата!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка чтения"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПрочитатьПараметрыИмпортаИзФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

Процедура ПочиститьЗаголовки()
	
	НомерКолонки = 1;
	Пока НомерКолонки <= ВсегоКолонок Цикл
		ОбластьСЯчейкой = ТаблицаДанных.Область(1, НомерКолонки);
		ОбластьСЯчейкой.Текст = "";
		ДлинаКолонки = 9;
		ОбластьСЯчейкой.ШиринаКолонки = ДлинаКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	ВсегоКолонок = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропускатьСуществующиеПриИзменении(Элемент)
	
	Если ПропускатьСуществующие Тогда
		ТолькоОбновлять = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОбновлятьПриИзменении(Элемент)
	
	Если ТолькоОбновлять Тогда
		ПропускатьСуществующие = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыборКлючевых()
	
	Если ЭтоСправочник Тогда
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По наименованию"));
		ПервоеПолеУникальности = "Наименование";
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По коду"));
	ИначеЕсли ЭтоДокумент Тогда
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Номер", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По номеру"));
		ПервоеПолеУникальности = "Номер";
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Дата", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По дате"));
	Иначе // регистр сведений
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Период", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По периоду"));
	КонецЕсли;
	
	Элементы.НоменклатураПредставлена.Видимость = ИСТИНА;
	Если ЭтоНоменклатура Тогда
		Элементы.НоменклатураПредставлена.Видимость = ЛОЖЬ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По артикулу"));
		КонецЕсли;
		Если ИспользоватьШтрихКоды Тогда
			Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("ОсновнойШтрихКод", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По штрихкоду"));
		КонецЕсли;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") Тогда
			Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("НоменклатурнаяГруппа", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По номенклатурной группе"));
		КонецЕсли;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") Тогда
			Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Производитель", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По производителю"));
		КонецЕсли;
		
		Если ДатаРегистрации = '00010101000000'  Тогда
			ДатаРегистрации = НачалоМесяца(ОбщийМодульКлиент.ПользователяТекущаяДата()) -1;
		КонецЕсли;
	КонецЕсли;
	
	Если СправочникИерархический Тогда
		Элементы.ПервоеПолеУникальности.СписокВыбора.Добавить("Родитель", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По группе (родителю)"));
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Элементы.ПервоеПолеУникальности.СписокВыбора Цикл
		Элементы.ВтороеПолеУникальности.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Элементы.ТретьеПолеУникальности.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Номенклатура(Команда)
	
	ВыбранныйТипОбъекта = "Номенклатура";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура (товары и услуги)");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура Клиенты(Команда)
	
	ВыбранныйТипОбъекта = "Клиенты";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиенты (покупатели)");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКлиентов(Команда)
	
	ВыбранныйТипОбъекта = "ОбъектыКлиентов";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объекты клиентов");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПоставщиков(Команда)
	
	ВыбранныйТипОбъекта = "Поставщики";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщики товара и услуг");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПользователей(Команда)
	
	ВыбранныйТипОбъекта = "Пользователи";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пользователи базы данных");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСкладов(Команда)
	
	ВыбранныйТипОбъекта = "Склады";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склады товара");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСерийНоменклатуры(Команда)
	
	ВыбранныйТипОбъекта = "СерииНоменклатуры";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серии товара");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортВаучеров(Команда)
	
	ВыбранныйТипОбъекта = "Ваучеры";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИзображений(Команда)
	
	ВыбранныйТипОбъекта = "Изображения";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изображения");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПодразделений(Команда)
	
	ВыбранныйТипОбъекта = "Подразделения";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подразделения сотрудников");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПозицийДляОказанияУслугЗаВремяНомера(Команда)
	
	ВыбранныйТипОбъекта = "ПозицииДляОказанияУслугЗаВремяНомера";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиции для оказания услуг за время (номера)");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСотрудников(Команда)
	
	ВыбранныйТипОбъекта = "Сотрудники";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сотрудники нашего предприятия");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСпецификаций(Команда)
	
	ВыбранныйТипОбъекта = "Спецификации";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Спецификации продукции");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСредствПредприятия(Команда)
	
	ВыбранныйТипОбъекта = "СредстваПредприятия";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Средства предприятия");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортДвиженийДенег(Команда)
	
	ВыбранныйТипОбъекта = "ДвиженияДенег";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движения денег");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортОказанияУслугЗаВремя(Команда)
	
	ВыбранныйТипОбъекта = "ОказанияУслугЗаВремя";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оказания услуг за время");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСобытий(Команда)
	
	ВыбранныйТипОбъекта = "События";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("События");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортДополнительнойИнформацииОФизическихЛицах(Команда)
	
	ВыбранныйТипОбъекта = "ДополнительноОФизическихЛицах";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительно о физических лицах");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортДополнительныхШтрихКодов(Команда)
	
	ВыбранныйТипОбъекта = "ДополнительныеШтрихКоды";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительные и устаревшие штрихкоды");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЗначенийНаДругихЯзыках(Команда)
	
	ВыбранныйТипОбъекта = "ЗначенияНаДругихЯзыках";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Значения на других языках");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортКурсовВалют(Команда)
	
	ВыбранныйТипОбъекта = "КурсыВалют";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Курсы валют");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПредставленияТоваровКонтрагентами(Команда)
	
	ВыбранныйТипОбъекта = "ПредставлениеТоваровКонтрагентами";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Представление номенклатуры контрагентами");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортСвоихЗначенийПечати(Команда)
	
	ВыбранныйТипОбъекта = "СвоиЗначенияПечати";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свои значения заданных параметров при печати");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЦен(Команда)
	
	ВыбранныйТипОбъекта = "Цены";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цены номенклатуры");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЦенПоставщиков(Команда)
	
	ВыбранныйТипОбъекта = "ЦеныПоставщиков";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цены поставщиков");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортШтрихкодов(Команда)
	
	ВыбранныйТипОбъекта = "ШтрихКоды";
	ВыбранныйОбъект = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрихкоды");
	УстановитьОбъектИмпорта();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаполнитьДокументВводаОстатковПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПримерТаблицыИмпорта(Команда)
	
	Если ЭтоСправочник Тогда
		Если ЭтоНоменклатура Тогда
			ВсегоКолонок = 6;
		Иначе
			ВсегоКолонок = 2;
		КонецЕсли;
	ИначеЕсли ЭтоДокумент Тогда
		ВсегоКолонок = 2;
	КонецЕсли;
	
	Для Сч = 1 По ВсегоКолонок Цикл
		Объект.ОписаниеКолонок[Сч -1].НомерКолонкиВТаблицеДанных = Сч;
		ПрименитьКТаблице(Сч, Объект.ОписаниеКолонок[Сч -1].ОписаниеРеквизита);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзФайла(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите табличный файл для импорта") + ":";
	ДиалогОткрытияФайла.Фильтр 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл") + " (*.*)|*.*";
	ДиалогОткрытияФайла.Расширение 	= "*";
	ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
	ДиалогОткрытияФайла.ПолноеИмяФайла 		= АдресТаблицы;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = ИСТИНА;
	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтаФорма), , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		СсылкаВХранилищеСервера = ПереданныйФайл.Имя;
	КонецЦикла;
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка таблицы.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЗагрузитьТаблицуИзФайла();
	
КонецПроцедуры

&НаСервере
Функция   ЗагрузитьТаблицуИзФайла();
	
	Попытка
		ТаблицаДанных.Прочитать(СсылкаВХранилищеСервера, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка загрузки из файла") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СменаРежимаМасштаба(Команда)
	
	Если РежимМасштабаКрупный Тогда
		РежимМасштабаКрупный = ЛОЖЬ;
	Иначе
		РежимМасштабаКрупный = ИСТИНА;
	КонецЕсли;
	
	Элементы.ТаблицаДанных.РежимМасштабированияПросмотра = ?(РежимМасштабаКрупный, РежимМасштабированияПросмотра.Крупный, РежимМасштабированияПросмотра.Обычный);
	Элементы.ПерваяСтрокаТаблицыИгнорируется.Видимость = РежимМасштабаКрупный;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПоКолонкам(Команда)
	
	МассивКолонок 	= Новый Массив;
	МассивПримеров 	= Новый Массив;
	НомерКолонки 	= 1;
	СчетчикСтрок 	= 1;
	
	Пока НомерКолонки < 999 Цикл
		ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, НомерКолонки);
		ТекстЯчейки = ОбластьСЯчейкой.Текст;
		Если ПустаяСтрока(СокрЛП(ТекстЯчейки)) Тогда
			Прервать;
		Иначе
			МассивКолонок.Добавить(ТекстЯчейки);
			ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок + 1, НомерКолонки);
			ТекстЯчейки = ОбластьСЯчейкой.Текст;
			МассивПримеров.Добавить(ТекстЯчейки);
		КонецЕсли;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Если МассивКолонок.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данных в таблице нет. Начните с первой колнки!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание"));
	Иначе
		МассивНаименований = Новый Массив;
		МассивОписаний = Новый Массив;
		Для Каждого ОписаниеРеквизита Из Объект.ОписаниеКолонок Цикл
			МассивНаименований.Добавить(ОписаниеРеквизита.НаименованиеРеквизита);
			МассивОписаний.Добавить(ОписаниеРеквизита.ОписаниеРеквизита);
		КонецЦикла;
		
		ОткрытьФорму("Обработка.УниверсальныйИмпорт.Форма.ОпределитьКолонки", Новый Структура("МассивНаименований, МассивОписаний, МассивКолонок, МассивПримеров", МассивНаименований, МассивОписаний, МассивКолонок, МассивПримеров), ЭтаФорма, , , , Новый ОписаниеОповещения("КолонкиОпределены", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиОпределены(РезультатОпределения, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОпределения = Неопределено Тогда
		
		Сч = 0;
		Для Каждого НомерКолонки Из РезультатОпределения.МассивНомеров Цикл
			ОтборПо = Новый Структура("НаименованиеРеквизита", РезультатОпределения.МассивКолонок[Сч]);
			СтрокиЭтогоНаименования = Объект.НаименованиеРеквизита.НайтиСтроки(ОтборПо);
			Если НЕ СтрокиЭтогоНаименования.Количество() = 0 Тогда
				СтрокаРеквизита = СтрокиЭтогоНаименования[0];
				СтрокаРеквизита.НомерКолонкиВТаблицеДанных = НомерКолонки;
				
				ПрименитьКТаблице(СтрокаРеквизита.НомерКолонкиВТаблицеДанных, СтрокаРеквизита.ОписаниеРеквизита);
				
				Если ВсегоКолонок < СтрокаРеквизита.НомерКолонкиВТаблицеДанных Тогда
					ВсегоКолонок = СтрокаРеквизита.НомерКолонкиВТаблицеДанных;
				КонецЕсли;
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПереченьРеквизитовПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

СписокНеактивныхКлючей.Добавить("Цена1");
СписокНеактивныхКлючей.Добавить("Цена2");
СписокНеактивныхКлючей.Добавить("Цена3");
СписокНеактивныхКлючей.Добавить("ВидЦен1");
СписокНеактивныхКлючей.Добавить("ВидЦен2");
СписокНеактивныхКлючей.Добавить("ВидЦен3");
СписокНеактивныхКлючей.Добавить("СкладОстатка1");
СписокНеактивныхКлючей.Добавить("СкладОстатка2");
СписокНеактивныхКлючей.Добавить("СкладОстатка3");
СписокНеактивныхКлючей.Добавить("КоличествоОстатка1");
СписокНеактивныхКлючей.Добавить("КоличествоОстатка2");
СписокНеактивныхКлючей.Добавить("КоличествоОстатка3");
СписокНеактивныхКлючей.Добавить("Серия");
СписокНеактивныхКлючей.Добавить("КодПродукта");
СписокНеактивныхКлючей.Добавить("ДополнительныйКод1");
СписокНеактивныхКлючей.Добавить("ДополнительныйКод2");
СписокНеактивныхКлючей.Добавить("КомментарийКСерии");
СписокНеактивныхКлючей.Добавить("ШтрихКодСерии");
