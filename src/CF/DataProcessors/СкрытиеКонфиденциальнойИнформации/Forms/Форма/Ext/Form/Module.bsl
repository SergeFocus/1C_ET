#Область ОбработчикиСобытийФормы

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СохраненныеНастройки = Новый Массив;
	Макеты = ОбработкаОбъект.Метаданные().Макеты;
	КоличествоНастроек = 0;

	Для Каждого Макет Из Макеты Цикл
		МакетОбъект = ОбработкаОбъект.ПолучитьМакет(Макет.Имя);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("XML");
		МакетОбъект.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
		СтрокаНастроек = ТекстовыйДокумент.ПолучитьТекст();
		СохраненныеНастройки.Добавить(СтрокаНастроек);
		КоличествоНастроек = КоличествоНастроек + 1;

	КонецЦикла;

	МакетОпределен = (КоличествоНастроек > 1);
	Заголовок = НСтр("ru = 'Скрытие конфиденциальной информации'");
	ЗаполнитьДеревоОбрабатываемыхОбъектов(СохраненныеНастройки, ОбработкаОбъект);
	ЗаполнитьПравилаОбработки(ОбработкаОбъект);

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "СкрытиеПерсональныхДанных_УстановленоПравилоОбработки" Тогда
		ИдентификаторТекущейСтроки = Элементы.ОбрабатываемыеОбъекты.ТекущаяСтрока;
		ТекущаяСтрока = ОбрабатываемыеОбъекты.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		ТекущаяСтрока.ПредставлениеПравилаОбработки = Параметр.Представление;
		ТекущаяСтрока.ПравилоОбработки = Параметр.ПравилоОбработки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если Не МакетОпределен Тогда
		Элементы.ГруппаИзменениеРежима.Видимость = Ложь;
		РасширенныеВозможностиНажатие(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийТаблицыФормыОбрабатываемыеОбъекты
&НаКлиенте
Процедура ОбрабатываемыеОбъектыПравилоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыбраннаяСтрока = Элементы.ОбрабатываемыеОбъекты.ТекущиеДанные;

	Если ВыбраннаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ВыбраннаяСтрока.ТипЗначения) Тогда
		Возврат;
	КонецЕсли;

	Если ВыбраннаяСтрока.ПравилоОбработки.Количество() > 0 Тогда
		ОбщиеПравилаОбработки = ВыбраннаяСтрока.ПравилоОбработки;
	Иначе
		ОбщиеПравилаОбработки = Новый Структура;
		ОбщиеПравилаОбработки.Вставить("ПравилоСтрока", Объект.ПравилоСтрока);

		Если ПредставлениеПравилаЧисло = "НеИзменять"
			Или ПредставлениеПравилаЧисло = "Очистить" Тогда

			ПравилоЧисло = ПредставлениеПравилаЧисло;
		Иначе
			ПравилоЧисло = ПредставлениеПравилаЧисло + ";" + ЗначениеЧисло;
		КонецЕсли;

		ОбщиеПравилаОбработки.Вставить("ПравилоЧисло", ПравилоЧисло);
		ОбщиеПравилаОбработки.Вставить("ПравилоБулево", Объект.ПравилоБулево);

		Если ПредставлениеПравилаДата = "НеИзменять"
			Или ПредставлениеПравилаДата = "Очистить" Тогда

			ПравилоДата = ПредставлениеПравилаДата;
		Иначе
			ПравилоДата = ПредставлениеПравилаДата + ";" + ЗначениеДата;
		КонецЕсли;

		ОбщиеПравилаОбработки.Вставить("ПравилоДата", ПравилоДата);
		ОбщиеПравилаОбработки.Вставить("ПравилоХранилищеЗначений", Объект.ПравилоХранилищеЗначений);
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипЗначения", ВыбраннаяСтрока.ТипЗначения);
	ПараметрыФормы.Вставить("ОбщиеПравилаОбработки", ОбщиеПравилаОбработки);
	ОткрытьФорму(ПолноеИмяФормы("ВыборПравилОбработки"), ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОбрабатываемыеОбъектыПометкаПриИзменении(Элемент)

	ТекущиеДанные       = Элементы.ОбрабатываемыеОбъекты.ТекущиеДанные;
	ИдентификаторСтроки = Элементы.ОбрабатываемыеОбъекты.ТекущаяСтрока;
	ТекущаяСтрока       = ОбрабатываемыеОбъекты.НайтиПоИдентификатору(ИдентификаторСтроки);
	ЗначениеПометки = ?(ТекущиеДанные.Пометка = 2, 0, ТекущиеДанные.Пометка);
	ТекущиеДанные.Пометка = ЗначениеПометки;
	ИзменитьДочерниеЭлементы(ТекущаяСтрока.ПолучитьЭлементы(), ЗначениеПометки);
	ИзменитьРодительскиеЭлементы(ТекущаяСтрока);

КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура ПравилоЧислоПриИзменении(Элемент)

	Если ПредставлениеПравилаЧисло = "Умножить"
		Или ПредставлениеПравилаЧисло = "Разделить"
		Или ПредставлениеПравилаЧисло = "Прибавить"
		Или ПредставлениеПравилаЧисло = "Вычесть" Тогда

		Элементы.СтраницыЗначения.ТекущаяСтраница = Элементы.ЗначениеЧисла;
	Иначе
		Элементы.СтраницыЗначения.ТекущаяСтраница = Элементы.ПустаяСтраница;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилоДатаПриИзменении(Элемент)

	Если ПредставлениеПравилаДата = "НеИзменять" Тогда
		Элементы.СтраницыЗначенияДаты.ТекущаяСтраница = Элементы.ПустаяСтраницаДата;
	Иначе
		Элементы.СтраницыЗначенияДаты.ТекущаяСтраница = Элементы.СтраницаЗначенияДата;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасширенныеВозможностиНажатие(Элемент)

	МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");

	Если ДеревоМетаданныхЗаполнено Тогда
		Если Элементы.СтраницыВидФормы.ТекущаяСтраница = Элементы.СтраницаЧастотныеВозможности Тогда
			Элементы.СтраницыВидФормы.ТекущаяСтраница = Элементы.СтраницаРасширенныеВозможности;
			Если МакетОпределен Тогда
				Заголовок = НСтр("ru = 'Скрытие конфиденциальной информации - полные возможности'");
			КонецЕсли;

			Элементы.РасширенныеВозможности.Заголовок = НСтр("ru = 'Обычный вид'");
		Иначе
			Элементы.СтраницыВидФормы.ТекущаяСтраница = Элементы.СтраницаЧастотныеВозможности;
			Заголовок = НСтр("ru = 'Скрытие конфиденциальной информации'");
			Элементы.РасширенныеВозможности.Заголовок = НСтр("ru = 'Полные возможности'");
		КонецЕсли;
	Иначе
		Если ДеревоМетаданныхЗаполнено() Тогда

			Элементы.СтраницыВидФормы.ТекущаяСтраница = Элементы.СтраницаРасширенныеВозможности;
			Элементы.РасширенныеВозможности.Доступность = Истина;
			Если МакетОпределен Тогда
				Заголовок = НСтр("ru = 'Скрытие конфиденциальной информации - полные возможности'");
			КонецЕсли;

			Элементы.РасширенныеВозможности.Заголовок = НСтр("ru = 'Обычный вид'");
		Иначе
			Элементы.СтраницыВидФормы.ТекущаяСтраница   = Элементы.СтраницаДлительнаяОперация;
			Элементы.РасширенныеВозможности.Доступность = Ложь;
			МодульДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеЧислоПриИзменении(Элемент)

	Если ЗначениеЧисло = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Значение должно быть не нулевым.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ЗначениеЧисло = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДатаПриИзменении(Элемент)

	Если ЗначениеДата = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Значение должно быть не нулевым.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ЗначениеДата = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОтметитьВсе(Команда)

	Для Каждого ДочернийЭлемент Из ОбрабатываемыеОбъекты.ПолучитьЭлементы() Цикл
		ДочернийЭлемент.Пометка = 1;
		ИзменитьДочерниеЭлементы(ДочернийЭлемент.ПолучитьЭлементы(), 1);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)

	Для Каждого ДочернийЭлемент Из ОбрабатываемыеОбъекты.ПолучитьЭлементы() Цикл
		ДочернийЭлемент.Пометка = 0;
		ИзменитьДочерниеЭлементы(ДочернийЭлемент.ПолучитьЭлементы(), 0);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрытие(Команда)

	ТекстПредупреждения = НСтр("ru = 'Скрытие конфиденциальной информации необходимо выполнять на копии рабочей базы,
		|все изменения будут выполнены безвозвратно.
		|Продолжить?'");
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыполнитьСкрытиеПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОбработкаОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет)

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрытиеПродолжение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьСкрытиеЗавершение", 1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьСкрытиеЗавершение()

	МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");

	Если МодульДлительныеОперацииКлиент = Неопределено Тогда
		СкрытиеКонфиденциальнойИнформации();

		Возврат;
	КонецЕсли;

	Если ДеревоМетаданныхЗаполнено
		Или ЗаданиеВыполнено(ИдентификаторЗадания) Тогда

		ОтключитьОбработчикОжидания("Подключаемый_ВыполнитьСкрытиеЗавершение");
	Иначе
		Если ФормаДлительнойОперации = Неопределено Тогда

			ФормаДлительнойОперации = МодульДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	РезультатЗапуска = СкрытиеКонфиденциальнойИнформации();

	Если Не РезультатЗапуска.ЗаданиеВыполнено Тогда
		МодульДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьСкрытиеКонфиденциальнойИнформации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

		Если ФормаДлительнойОперации <> Неопределено Тогда
			ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗаданияВторой;
		Иначе
			ФормаДлительнойОперации = МодульДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗаданияВторой);
		КонецЕсли;
	Иначе
		СообщитьПользователю(НСтр("ru = 'Скрытие конфиденциальной информации завершено.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСведениямОПерсональныхДанных(Команда)
	ЗаполнитьПоСведениямОПерсональныхДанныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохранения = Новый ДиалогВыбораФайла(Режим);
	ДиалогСохранения.МножественныйВыбор = Ложь;
	ДиалогСохранения.Фильтр = НСтр("ru = 'Файл настроек'") + "(*.xml)|*.xml";
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиЗавершение", ЭтотОбъект);
	ДиалогСохранения.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогВыбора = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Фильтр = НСтр("ru = 'Файл настроек'") + "(*.xml)|*.xml";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНастройкиЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ДеревоМетаданныхЗаполнено()

	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");

	Если МодульДлительныеОперации = Неопределено
		Или ИдентификаторЗадания = Неопределено Тогда

		ДеревоОбрабатываемыхОбъектов = ПолучитьИзВременногоХранилища(АдресХранилища);
		ЗначениеВРеквизитФормы(ДеревоОбрабатываемыхОбъектов, "ОбрабатываемыеОбъекты");
		ДеревоМетаданныхЗаполнено = Истина;

		Возврат Истина;
	ИначеЕсли МодульДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ДеревоОбрабатываемыхОбъектов = ПолучитьИзВременногоХранилища(АдресХранилища);
		ЗначениеВРеквизитФормы(ДеревоОбрабатываемыхОбъектов, "ОбрабатываемыеОбъекты");
		ДеревоМетаданныхЗаполнено = Истина;

		Возврат Истина;
	Иначе

		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
	ДеревоМетаданныхЗаполнено = Ложь;
	Попытка
		Если ДеревоМетаданныхЗаполнено() Тогда

			ДеревоМетаданныхЗаполнено = Истина;
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		КонецЕсли;

	Исключение
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	КонецПопытки;
	Если ДеревоМетаданныхЗаполнено Тогда
		Элементы.СтраницыВидФормы.ТекущаяСтраница = Элементы.СтраницаРасширенныеВозможности;
		Элементы.РасширенныеВозможности.Доступность = Истина;
		Заголовок = НСтр("ru = 'Скрытие конфиденциальной информации - полные возможности'");
		Элементы.РасширенныеВозможности.Заголовок = НСтр("ru = 'Обычный вид'");
	Иначе
		МодульДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьСкрытиеКонфиденциальнойИнформации()

	МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
	Попытка

		Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма")
			И ФормаДлительнойОперации.Открыта() Тогда

			Если Не ЗаданиеВыполнено() Тогда
				МодульДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьСкрытиеКонфиденциальнойИнформации",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			Иначе
				МодульДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(
					ФормаДлительнойОперации);
				ФормаДлительнойОперации = Неопределено;
				СообщитьПользователю(НСтр("ru = 'Скрытие конфиденциальной информации завершено.'"));
			КонецЕсли;
		КонецЕсли;

	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		МодульДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(
			ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗаданиеВыполнено(ИдентификаторФоновогоЗадания = Неопределено)

	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");

	Если ИдентификаторФоновогоЗадания = Неопределено Тогда
		ИдентификаторФоновогоЗадания = ИдентификаторЗаданияВторой;
	КонецЕсли;

	Возврат МодульДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);

КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Настройки = НастройкиОбработки();
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, Настройки));
	Обработчик = Новый ОписаниеОповещения("НачатьПолучениеФайловЗавершение", ЭтотОбъект);
	НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	// Обработчик не требуется
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Результат[0]);
	СтрокаНастроек = ТекстовыйДокумент.ПолучитьТекст();
	УстановитьНастройки(СтрокаНастроек);

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройки(СтрокаНастроек)

	СохраненныеНастройки = Новый Массив;
	СохраненныеНастройки.Добавить(СтрокаНастроек);
	ДеревоОбрабатываемыхОбъектов = РеквизитФормыВЗначение("ОбрабатываемыеОбъекты");
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.УстановитьНастройки(СохраненныеНастройки, ДеревоОбрабатываемыхОбъектов);
	ЗначениеВРеквизитФормы(ДеревоОбрабатываемыхОбъектов, "ОбрабатываемыеОбъекты");

КонецПроцедуры

&НаСервере
Функция НастройкиОбработки()

	ДеревоОбъектов = РеквизитФормыВЗначение("ОбрабатываемыеОбъекты");
	ТаблицаОтмеченныхОбъектов = Новый ТаблицаЗначений;
	ТаблицаОтмеченныхОбъектов.Колонки.Добавить("Пометка");
	ТаблицаОтмеченныхОбъектов.Колонки.Добавить("ПолноеИмя");
	ТаблицаОтмеченныхОбъектов.Колонки.Добавить("ПравилоОбработки");
	ТаблицаОтмеченныхОбъектов.Колонки.Добавить("ПредставлениеПравилаОбработки");
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Пометка", 1);
	ОтмеченныеОбъекты = ДеревоОбъектов.Строки.НайтиСтроки(ПараметрыПоиска, Истина);

	Для Каждого ОтмеченныйОбъект Из ОтмеченныеОбъекты Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОтмеченныхОбъектов.Добавить(), ОтмеченныйОбъект);
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(ЗначениеВСтрокуXML(ТаблицаОтмеченныхОбъектов));

КонецФункции

&НаКлиенте
Функция ПолноеИмяФормы(Имя)

	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	ЧастиИмени[3] = Имя;

	Возврат СтрСоединить(ЧастиИмени, ".");

КонецФункции

&НаСервере
Процедура ЗаполнитьПравилаОбработки(ОбработкаОбъект)

	ПравилаОбработки = ОбработкаОбъект.ПравилаОбработкиПоУмолчанию();

	Объект.ПравилоБулево = ПравилаОбработки.Булево;
	ПредставлениеПравилаДата = ПравилаОбработки.Дата;
	Объект.ПравилоСтрока = ПравилаОбработки.Строка;
	Объект.ПравилоХранилищеЗначений = ПравилаОбработки.ХранилищаЗначений;
	ПредставлениеПравилаЧисло = ПравилаОбработки.Числа;
	ЗначениеЧисло = 1;
	ЗначениеДата  = 1;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбрабатываемыхОбъектов(СохраненныеНастройки, ОбработкаОбъект)

	ОбрабатываемыеМетаданные = ОбрабатываемыеМетаданные();
	ДеревоОбрабатываемыхОбъектов = РеквизитФормыВЗначение("ОбрабатываемыеОбъекты");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОбрабатываемыеМетаданные", ОбрабатываемыеМетаданные);
	ПараметрыПроцедуры.Вставить("ДеревоОбрабатываемыхОбъектов", ДеревоОбрабатываемыхОбъектов);
	ПараметрыПроцедуры.Вставить("СохраненныеНастройки", СохраненныеНастройки);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");

	Если МодульДлительныеОперации = Неопределено Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОбработкаОбъект.ЗаполнитьДеревоОбрабатываемыхОбъектов(ПараметрыПроцедуры, АдресХранилища);

		Возврат;
	КонецЕсли;

	МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	ИдентификаторЗадания = Неопределено;
	НаименованиеЗадания = НСтр("ru = 'Скрытие конфиденциальной информации'");
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки(ОбработкаОбъект));
	ПараметрыЗадания.Вставить("ИмяМетода", "ЗаполнитьДеревоОбрабатываемыхОбъектов");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыПроцедуры);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", "");
	РезультатФоновогоЗадания = МодульДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		ВыполняемыйМетод,
		ПараметрыЗадания,
		НаименованиеЗадания);
	АдресХранилища       = РезультатФоновогоЗадания.АдресХранилища;
	ИдентификаторЗадания = РезультатФоновогоЗадания.ИдентификаторЗадания;

КонецПроцедуры

&НаСервере
Функция ОбрабатываемыеМетаданные()

	Структура = Новый Структура;
	Структура.Вставить("Константы", НСтр("ru = 'Константы'"));
	Структура.Вставить("Справочники", НСтр("ru = 'Справочники'"));
	Структура.Вставить("Документы", НСтр("ru = 'Документы'"));
	Структура.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"));
	Структура.Вставить("ПланыСчетов", НСтр("ru = 'Планы счетов'"));
	Структура.Вставить("ПланыВидовРасчета", НСтр("ru = 'Планы видов расчета'"));
	Структура.Вставить("РегистрыСведений", НСтр("ru = 'Регистры сведений'"));
	Структура.Вставить("РегистрыНакопления", НСтр("ru = 'Регистры накопления'"));
	Структура.Вставить("РегистрыБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"));
	Структура.Вставить("РегистрыРасчета", НСтр("ru = 'Регистры расчета'"));
	Структура.Вставить("БизнесПроцессы", НСтр("ru = 'Бизнес процессы'"));
	Структура.Вставить("Задачи", НСтр("ru = 'Задачи'"));

	Возврат Структура;

КонецФункции

&НаКлиенте
Процедура ИзменитьДочерниеЭлементы(ОбрабатываемыеЭлементы, ЗначениеПометки)

	Для Каждого Элемент Из ОбрабатываемыеЭлементы Цикл
		Элемент.Пометка = ЗначениеПометки;
		ДочерниеЭлементы = Элемент.ПолучитьЭлементы();
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			ИзменитьДочерниеЭлементы(ДочерниеЭлементы, ЗначениеПометки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьРодительскиеЭлементы(ТекущаяСтрока)

	Родитель = ТекущаяСтрока.ПолучитьРодителя();

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементыРодителя    = Родитель.ПолучитьЭлементы();
	КоличествоЭлементов = ЭлементыРодителя.Количество();
	ОтмеченоЭлементов   = 0;
	ЕстьСНеопределеннымСтатусом = Ложь;

	Для Каждого Элемент Из ЭлементыРодителя Цикл
		Если Элемент.Пометка = 1 Тогда
			ОтмеченоЭлементов = ОтмеченоЭлементов + 1;
		ИначеЕсли Элемент.Пометка = 2 Тогда
			ЕстьСНеопределеннымСтатусом = Истина;
		КонецЕсли;

	КонецЦикла;

	Если ОтмеченоЭлементов = КоличествоЭлементов Тогда
		Родитель.Пометка = 1;
	ИначеЕсли ОтмеченоЭлементов > 0 Или ЕстьСНеопределеннымСтатусом Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = 0;
	КонецЕсли;

	ИзменитьРодительскиеЭлементы(Родитель);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСведениямОПерсональныхДанныхНаСервере()

	МодульЗащитаПерсональныхДанных = ОбщийМодуль("ЗащитаПерсональныхДанныхПереопределяемый");

	Если МодульЗащитаПерсональныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Таблица сведений о персональных данных.
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Объект",          Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляРегистрации", Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляДоступа",     Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ОбластьДанных",   Новый ОписаниеТипов("Строка"));
	МодульЗащитаПерсональныхДанных.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	ДеревоОбъектов = РеквизитФормыВЗначение("ОбрабатываемыеОбъекты");
	ИндексыОбновляемыхСтрок = Новый Массив;

	Для Каждого СтрокаСведения Из ТаблицаСведений Цикл
		СтрокаОбъекта = ДеревоОбъектов.Строки.Найти(СтрокаСведения.Объект, "ПолноеИмя", Истина);
		Если СтрокаОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПоляДоступа = СтрокаСведения.ПоляДоступа;
		МассивПолейДоступа = СтрРазделить(ПоляДоступа, ",");
		Для Каждого ПолеДоступа Из МассивПолейДоступа Цикл
			ПолеДоступа = СокрЛП(ПолеДоступа);
			СтрокаПолеДоступа = СтрокаОбъекта.Строки.Найти(ПолеДоступа, "Имя", Истина);

			Если СтрокаПолеДоступа <> Неопределено Тогда
				СтрокаПолеДоступа.Пометка = 1;
			КонецЕсли;
		КонецЦикла;

		ОбновитьФлажкиПоОбъекту(СтрокаОбъекта);

	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоОбъектов, "ОбрабатываемыеОбъекты");

КонецПроцедуры

&НаСервере
Процедура ОбновитьФлажкиПоОбъекту(СтрокаОбъект)

	Для Каждого СтрокаГруппаСвойств Из СтрокаОбъект.Строки Цикл
		ЕстьОтмеченныеСвойства = Ложь;
		ЕстьНеОтмеченныеСвойства = Ложь;
		Для Каждого СтрокаСвойство Из СтрокаГруппаСвойств.Строки Цикл
			Если СтрокаСвойство.Пометка = 1 Тогда
				ЕстьОтмеченныеСвойства = Истина;
			Иначе
				ЕстьНеОтмеченныеСвойства = Истина;
			КонецЕсли;

		КонецЦикла;

		Если ЕстьОтмеченныеСвойства И Не ЕстьНеОтмеченныеСвойства Тогда
			СтрокаГруппаСвойств.Пометка = 1;
		ИначеЕсли ЕстьОтмеченныеСвойства Тогда
			СтрокаГруппаСвойств.Пометка = 2;
		Иначе
			СтрокаГруппаСвойств.Пометка = 0;
		КонецЕсли;

	КонецЦикла;

	ОбновитьФлажкиРодительскихОбъектов(СтрокаОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьФлажкиРодительскихОбъектов(СтрокаОбъект)

	Если СтрокаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтмеченоЭлементов = 0;
	ЕстьСНеопределеннымСтатусом = Ложь;
	КоличествоЭлементов = СтрокаОбъект.Строки.Количество();
	Для Каждого Элемент Из СтрокаОбъект.Строки Цикл
		Если Элемент.Пометка = 1 Тогда
			ОтмеченоЭлементов = ОтмеченоЭлементов + 1;
		ИначеЕсли Элемент.Пометка = 2 Тогда
			ЕстьСНеопределеннымСтатусом = Истина;
		КонецЕсли;

	КонецЦикла;

	Если ОтмеченоЭлементов = КоличествоЭлементов Тогда
		СтрокаОбъект.Пометка = 1;
	ИначеЕсли ОтмеченоЭлементов > 0 Или ЕстьСНеопределеннымСтатусом Тогда
		СтрокаОбъект.Пометка = 2;
	Иначе
		СтрокаОбъект.Пометка = 0;
	КонецЕсли;

	ОбновитьФлажкиРодительскихОбъектов(СтрокаОбъект.Родитель);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция СкрытиеКонфиденциальнойИнформации()

	ПравилаОбработки = Новый Структура;
	ПравилаОбработки.Вставить("ПравилоСтрока");
	ПравилаОбработки.Вставить("ПравилоЧисло");
	ПравилаОбработки.Вставить("ПравилоБулево");
	ПравилаОбработки.Вставить("ПравилоДата");
	ПравилаОбработки.Вставить("ПравилоХранилищеЗначений");

	Если ПредставлениеПравилаЧисло = "Умножить"
		Или ПредставлениеПравилаЧисло = "Разделить"
		Или ПредставлениеПравилаЧисло = "Прибавить"
		Или ПредставлениеПравилаЧисло = "Вычесть" Тогда

		Объект.ПравилоЧисло = ПредставлениеПравилаЧисло + ";" + ЗначениеЧисло;
	Иначе
		Объект.ПравилоЧисло = ПредставлениеПравилаЧисло;
	КонецЕсли;

	Если ПредставлениеПравилаДата = "НеИзменять" Тогда
		Объект.ПравилоДата = ПредставлениеПравилаДата;
	Иначе
		Объект.ПравилоДата = ПредставлениеПравилаДата + ";" + ЗначениеДата;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ПравилаОбработки, Объект);

	Если Не ДеревоМетаданныхЗаполнено
		И ЗначениеЗаполнено(АдресХранилища) Тогда

		ДеревоОбрабатываемыхОбъектов = ПолучитьИзВременногоХранилища(АдресХранилища);
	Иначе
		ДеревоОбрабатываемыхОбъектов = РеквизитФормыВЗначение("ОбрабатываемыеОбъекты");
	КонецЕсли;

	АдресХранилищаВторой = "";
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДеревоОбрабатываемыхОбъектов", ДеревоОбрабатываемыхОбъектов);
	ПараметрыПроцедуры.Вставить("ПравилаОбработки", ПравилаОбработки);
	МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");

	Если МодульДлительныеОперации = Неопределено Тогда
		АдресХранилищаВторой = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОбработкаОбъект.ВыполнитьСкрытиеНаСервере(ПараметрыПроцедуры, АдресХранилищаВторой);

		Возврат Истина;
	КонецЕсли;

	МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияВторой);
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	ИдентификаторЗаданияВторой = Неопределено;
	НаименованиеЗадания = НСтр("ru = 'Скрытие конфиденциальной информации'");
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки(ОбработкаОбъект));
	ПараметрыЗадания.Вставить("ИмяМетода", "ВыполнитьСкрытиеНаСервере");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыПроцедуры);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ЭтоВнешняяОбработка);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", "");
	РезультатФоновогоЗадания = МодульДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		ВыполняемыйМетод,
		ПараметрыЗадания,
		НаименованиеЗадания);
	АдресХранилищаВторой = РезультатФоновогоЗадания.АдресХранилища;
	ИдентификаторЗаданияВторой = РезультатФоновогоЗадания.ИдентификаторЗадания;

	Возврат РезультатФоновогоЗадания;

КонецФункции

&НаСервере
Функция ЗначениеВСтрокуXML(Значение)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

&НаСервере
Функция ИмяОбработки(ОбработкаОбъект)

	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	Если ЭтоВнешняяОбработка Тогда
		Возврат ОбработкаОбъект.ИспользуемоеИмяФайла;
	Иначе

		Возврат ЧастиИмени[1];
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодуль(Имя)

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда

			Модуль = Вычислить(Имя);
		Иначе
			Модуль = Неопределено;
		КонецЕсли;

		Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
			ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий модуль") + " " + Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не найден.");
		КонецЕсли;
	#Иначе
		Модуль = Вычислить(Имя);
		#Если НЕ ВебКлиент Тогда
			Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
				ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий модуль") + " " + Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не найден.");
			КонецЕсли;
		#КонецЕсли
	#КонецЕсли

	Возврат Модуль;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

#КонецОбласти
