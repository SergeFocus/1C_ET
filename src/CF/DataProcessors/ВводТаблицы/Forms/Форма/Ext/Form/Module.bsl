// sza160314-1344
// sza150728-1440

&НаКлиенте
Процедура ЗагрузитьДанныеИзЭтойТаблицы(Команда)

	ИдетПробел   = 0;
	СчетчикСтрок = 1;
	Пока СчетчикСтрок < 99999 Цикл
		ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, НомерКолонкиКотораяЗаполненаОбязательно);

		Если ПустаяСтрока(СокрЛП(ОбластьСЯчейкой.Текст)) Тогда
			ИдетПробел = ИдетПробел + 1;
			Если ИдетПробел > ДоступноеЧислоПробелов Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ИдетПробел = 0;
		КонецЕсли;

		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;

	ПараметрыЭтойТаблицы = Новый Структура("СписокКолонокТаблицы, ТаблицаДанных, СчетчикСтрок, ВыполнитьПрограмму, НоменклатураПредставлена, ТипПоляСоставногоВида, ТипыКолонок", СписокКолонокТаблицы, ТаблицаДанных, СчетчикСтрок, ВыполнитьПрограмму, НоменклатураПредставлена, ТипПоляСоставногоВида, ТипыКолонок);
	Закрыть(ПараметрыЭтойТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПримерПрограммы(Команда)
	ВыполнитьПрограмму = " СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена; ";
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если НомерКолонкиКотораяЗаполненаОбязательно = 0
		ИЛИ НомерКолонкиКотораяЗаполненаОбязательно > ВсегоКолонок Тогда

		НомерКолонкиКотораяЗаполненаОбязательно = 1;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ОтображениеПолучателя) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ": " + ОтображениеПолучателя;
	КонецЕсли;

	Если ПустаяСтрока(РазделительЧисел) Тогда
		РазделительЧисел = Сред(СокрЛП(1.5), 2, 1);
	КонецЕсли;

	Если ПустаяСтрока(РазделительДаты) Тогда
		РазделительДаты = ".";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОределитьТипПолучателя(ТипПолучателяТаблицы, НаименованиеТаблицы, ИсходнаяТаблицаДанных)

	Разделитель = Найти(ТипПолучателяТаблицы, ".");

	Если НЕ Разделитель = 0 Тогда
		РазделПолучателяТаблицы = Лев(ТипПолучателяТаблицы, Разделитель - 1);
		СокрИмяФормы = Прав(ТипПолучателяТаблицы, СтрДлина(ТипПолучателяТаблицы) - Разделитель);
		Разделитель2 = Найти(СокрИмяФормы, ".");
		ТипПолучателяТаблицы = Лев(СокрИмяФормы, Разделитель2 - 1);
	КонецЕсли;

	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Документ", "Документы");
	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Справочник", "Справочники");
	РазделПолучателяТаблицы = СтрЗаменить(РазделПолучателяТаблицы, "Обработка", "Обработки");

	ТаблицаПоМетаданным 	= Метаданные[РазделПолучателяТаблицы][ТипПолучателяТаблицы].ТабличныеЧасти[НаименованиеТаблицы];

	Сплошная 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
	ЖирныйШрифт 	 = Новый Шрифт(, , ИСТИНА,);
	ЕстьНоменклатура = ЛОЖЬ;
	ЕстьСоставной    = ЛОЖЬ;
	ВсегоКолонок 	 = 1;

	Для Каждого РеквизитТаблицы Из ТаблицаПоМетаданным.Реквизиты Цикл
		СписокКолонокТаблицы.Добавить(РеквизитТаблицы.Имя, РеквизитТаблицы.Синоним);
		ТипТут = РеквизитТаблицы.Тип.Типы()[0];
		Если ТипТут = Тип("Строка") Тогда
			ТипыКолонок.Добавить("Строка");
		ИначеЕсли ТипТут = Тип("Булево") Тогда
			ТипыКолонок.Добавить("Булево");
		ИначеЕсли ТипТут = Тип("Число") Тогда
			ТипыКолонок.Добавить("Число");
		ИначеЕсли ТипТут = Тип("Дата") Тогда
			ТипыКолонок.Добавить("Дата");
		Иначе
			НайденыМета = Метаданные.НайтиПоТипу(ТипТут);

			Если НЕ НайденыМета = Неопределено Тогда
				ТипыКолонок.Добавить(Метаданные.НайтиПоТипу(РеквизитТаблицы.Тип.Типы()[0]).Имя);
			Иначе
				ТипыКолонок.Добавить(NULL);
			КонецЕсли;
		КонецЕсли;

		Если РеквизитТаблицы.Имя = "Номенклатура" Тогда
			ЕстьНоменклатура = ИСТИНА;
		КонецЕсли;

		Если НЕ РеквизитТаблицы.Тип.Типы().Количество() = 1 Тогда
			ЕстьСоставной = ИСТИНА;
		КонецЕсли;

		ОбластьЗаголовка = ТаблицаДанных.Область(1, ВсегоКолонок);  // "R1C" + Формат(СчетчикКолонок, "ЧРГ=' '; ЧГ=0")
		ОбластьЗаголовка.Текст 			  = РеквизитТаблицы.Синоним;
		ОбластьЗаголовка.АвтоВысотаСтроки = ИСТИНА;
		ОбластьЗаголовка.ШиринаКолонки 	  = СтрДлина(РеквизитТаблицы.Синоним);
		ОбластьЗаголовка.Шрифт 			  = ЖирныйШрифт;

		Для СчетчикСтрок = 1 по 10 Цикл
			ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, ВсегоКолонок);
			ОбластьСЯчейкой.ГраницаСправа = Сплошная;
		КонецЦикла;

		ВсегоКолонок = ВсегоКолонок + 1;
	КонецЦикла;

	СчетчикСтрок = 2;
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблицаДанных Цикл
		СчетчикКолонок = 1;
		Для Каждого РеквизитТаблицы Из ТаблицаПоМетаданным.Реквизиты Цикл
			ОбластьСЯчейкой = ТаблицаДанных.Область(СчетчикСтрок, СчетчикКолонок);
			ОбластьСЯчейкой.Текст = СтрокаТаблицы[РеквизитТаблицы.Имя];
			СчетчикКолонок = СчетчикКолонок + 1;
		КонецЦикла;

		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;

	ВсегоКолонок = ВсегоКолонок - 1;
	Элементы.НоменклатураПредставлена.Видимость = ЕстьНоменклатура;
	Элементы.ТипПоляСоставногоВида.Видимость    = ЕстьСоставной;
	ОтображениеПолучателя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таблица") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(НаименованиеТаблицы) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("для") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ТипПолучателяТаблицы);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РазделПолучателяТаблицы = "Документы";
	ТипПолучателяТаблицы    = Параметры.ТипПолучателяТаблицы;
	НаименованиеТаблицы     = Параметры.НаименованиеТаблицы;
	ИсходнаяТаблицаДанных   = Параметры.ИсходнаяТаблицаДанных;

	Если НЕ ПустаяСтрока(ТипПолучателяТаблицы) Тогда
		ОределитьТипПолучателя(ТипПолучателяТаблицы, НаименованиеТаблицы, ИсходнаяТаблицаДанных);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрограмму(Команда)

	НаименованиеПрограммы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ввод таблицы");
	ПоказатьВводСтроки(Новый ОписаниеОповещения("СохранитьПрограммуЗавершение", ЭтотОбъект, Новый Структура("НаименованиеПрограммы", НаименованиеПрограммы)), НаименованиеПрограммы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите наименование программы"), 50, ЛОЖЬ);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрограммуЗавершение(Строка, ДополнительныеПараметры) Экспорт

	НаименованиеПрограммы = ?(Строка = Неопределено, ДополнительныеПараметры.НаименованиеПрограммы, Строка);

	Если НЕ ПустаяСтрока(НаименованиеПрограммы) Тогда
		ЗаписатьЭтуПрограммуНаСервере(НаименованиеПрограммы, ВыполнитьПрограмму);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЭтуПрограммуНаСервере(Знач НаименованиеПрограммы, Знач ТекстПрограммы)

	НоваяПрограмма = Справочники.ТекстыПрограмм.СоздатьЭлемент();
	НоваяПрограмма.Наименование   = НаименованиеПрограммы;
	НоваяПрограмма.ТекстПрограммы = ТекстПрограммы;
	НоваяПрограмма.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрограммуИзСправочника(Команда)

	ТекстПрограммы = ПредопределенноеЗначение("Справочник.ТекстыПрограмм.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьПрограммуИзСправочникаЗавершение", ЭтотОбъект, Новый Структура("ТекстПрограммы", ТекстПрограммы)), ТекстПрограммы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы"), Тип("СправочникСсылка.ТекстыПрограмм"));

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПрограммуИзСправочникаЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ТекстПрограммы = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммы, Значение);

	Если ЗначениеЗаполнено(ТекстПрограммы) Тогда
		ВыполнитьПрограмму = ЗагрузитьТекстПрограммыНаСервере(ТекстПрограммы);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция   ЗагрузитьТекстПрограммыНаСервере(Знач ТекстПрограммы)
	Возврат ТекстПрограммы.ТекстПрограммы + ТекстПрограммы.ТекстПрограммы2 + ТекстПрограммы.ТекстПрограммы3;
КонецФункции

&НаКлиенте
Процедура ТаблицаДанныхПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры
