// sza150727-1822 сортировка и группировка
// sza150720-1824 !
// sza140712-1044  ошкво
// sza140421-2051  
// sza140126-0230 

&НаКлиенте
Процедура ДатаЗаказаПриИзменении(Элемент)
	
	Объект.ДатаОбеспечения = Объект.ДатаЗаказов + 3600 * 24 * Объект.КоличествоДнейНаВыполнениеЗаказа;	
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбеспеченияПриИзменении(Элемент)
	
	Объект.КоличествоДнейНаВыполнениеЗаказа = Цел((Объект.ДатаОбеспечения - Объект.ДатаЗаказов) / (3600 * 24));
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейНаВыполнениеЗаказаПриИзменении(Элемент)
	
	Объект.ДатаОбеспечения = Объект.ДатаЗаказов + 3600 * 24 * Объект.КоличествоДнейНаВыполнениеЗаказа;
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

Функция   НетПриходаПО(Знач ЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступленияТовараТовары.Ссылка
	|ИЗ
	|	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
	|ГДЕ
	|	(ПоступленияТовараТовары.ЗаказКлиента = &ЗаказКлиента
	|	ИЛИ ПоступленияТовараТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента)
	|	И ПоступленияТовараТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	Элементы.НевыполненныеЗаказыКлиентов.Видимость = Объект.УчитыватьЗаказыКлиентов;
	Элементы.ТекущиеПланыПродаж.Видимость = Объект.УчитыватьПланыПродаж;
	Элементы.НедостатокТоваров.Видимость = Объект.УчитыватьПоказателиРекомендуемыхОстатковНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМассивНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ ";
	
	Если НЕ Объект.ОтборПоНоменклатуреИГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.Ссылка В ИЕРАРХИИ(&НоменклатурыИГруппы)";	
		
		НоменклатурыИГруппы = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоНоменклатуреИГруппам Цикл
			НоменклатурыИГруппы.Добавить(СтрокаОтбора.Номенклатура);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НоменклатурыИГруппы", НоменклатурыИГруппы);
	КонецЕсли;
	
	Если ВестиУчетПоПроизводителям
		И НЕ Объект.ОтборПоПроизводителям.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.Производитель В (&ПоПроизводителям)";	
		
		ПоПроизводителям = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоПроизводителям Цикл
			ПоПроизводителям.Добавить(СтрокаОтбора.Производитель);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПоПроизводителям", ПоПроизводителям);
	КонецЕсли;	
	
	Если ВестиУчетПоНоменклатурнымГруппам
		И НЕ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.НоменклатурнаяГРуппа В (&ПоНоменклатурнымГруппам)";	
		
		ПоНоменклатурнымГруппам = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоНоменклатурнымГруппам Цикл
			ПоНоменклатурнымГруппам.Добавить(СтрокаОтбора.НоменклатурнаяГруппа);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПоНоменклатурнымГруппам", ПоНоменклатурнымГруппам);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	// ПереченьНоменклатуры = РезультатЗапроса.Выбрать().Выгрузить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНедостачу(Команда)
	ОбновитьНедостачуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНедостачуНаСервере()
	
	ОбновитьМассивНоменклатуры();
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыДинамическихСписков()
	
	ЗаказыКлиентов.Параметры.УстановитьЗначениеПараметра("Дата", Объект.ДатаОбеспечения);
	ПланыПродаж.Параметры.УстановитьЗначениеПараметра("Дата", Объект.ДатаОбеспечения);
	// НедостаткиТоваров.Параметры.УстановитьЗначениеПараметра("Дата", Объект.ДатаОбеспечения);
	// НедостаткиТоваров.Параметры.УстановитьЗначениеПараметра("ИспользоватьОстатки", НЕ Объект.НеУчитыватьСобственныеОстаткиТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьВидимостьЭлементов();
	
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001750", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ВестиУчетПоПроизводителям = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры");
		ВестиУчетПоНоменклатурнымГруппам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		Объект.ДатаЗаказов = ОбщийМодульСервисСервер.ПользователяТекущаяДата() + 3600 * 24 * 7;
		ОбновитьПараметрыДинамическихСписков();
		ЗаказыКлиентов.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101');
		
		ОбновитьПараметрыДинамическихСписков();
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПоследниеПоставщикиТоваровКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ЗаказыКлиентовТовараВКоличестве, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланыПродажТовараВКоличестве, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НедостаткиТоваровОстаток);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НедостаткиТоваровРекомендуемыйМинимальныйОстатокТовара);	
		
		Для Каждого РеквизитНоменклатуры Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
			Элементы.СортироватьНоменклатуруПо.СписокВыбора.Добавить(РеквизитНоменклатуры.Имя, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитНоменклатуры.Синоним));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыПоставщикамСогласноУсловий(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формирование заказов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	СформироватьЗаказыПоставщикамСогласноУсловийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыПоставщикамСогласноУсловийНаСервере()
	
	НеСворачиватьТоварыПоКоличествуПриПриходованииТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара");
	
	ТоварыКЗаказу = Новый ТаблицаЗначений;
	ТоварыКЗаказу.Колонки.Добавить("Номенклатура");
	ТоварыКЗаказу.Колонки.Добавить("ЗаказКлиента");
	ТоварыКЗаказу.Колонки.Добавить("Количество");
	Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
		ТоварыКЗаказу.Колонки.Добавить("Комментарий");
	КонецЕсли;	
	
	ПустаяЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОбеспечения) Тогда
		Объект.ДатаОбеспечения = Объект.ДатаЗаказов;
	КонецЕсли;
	
	// ЗАПОЛНЕНИЯ
	Если Объект.ОбеспечитьРеализациюТоваровСУчетомСреднейСкорости 
		И Объект.ДатаЗаказов < Объект.ДатаОбеспечения Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Продажи.Номенклатура,
		|	СУММА(Продажи.Количество) КАК Количество,
		|	МИНИМУМ(Продажи.Период) КАК НачалоПродаж
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ (&НетОтбораПоПроизводителям
		|			ИЛИ Продажи.Номенклатура.Производитель В (&ОтборПоПроизводителям))
		|	И (&НетОтбораПоНоменклатурнымГруппам
		|			ИЛИ Продажи.Номенклатура.НоменклатурнаяГруппа В (&ОтборПоНоменклатурнымГруппам))
		|	И (&НетОтбораПоРегионам
		|			ИЛИ Продажи.Клиент.Регион В (&ОтборПоРегионам))
		|	И Продажи.Период <= &Дата
		|СГРУППИРОВАТЬ ПО Продажи.Номенклатура";
		
		Запрос.УстановитьПараметр("Дата", Объект.ДатаЗаказов);
		Запрос.УстановитьПараметр("НетОтбораПоНоменклатурнымГруппам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ИЛИ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоНоменклатурнымГруппам", Объект.ОтборПоНоменклатурнымГруппам.Выгрузить(, "НоменклатурнаяГруппа"));
		Запрос.УстановитьПараметр("НетОтбораПоПроизводителям", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") ИЛИ Объект.ОтборПоПроизводителям.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоПроизводителям", Объект.ОтборПоПроизводителям.Выгрузить(, "Производитель"));
		Запрос.УстановитьПараметр("НетОтбораПоРегионам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов") ИЛИ Объект.ОтборПоРегионам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоРегионам", Объект.ОтборПоРегионам.Выгрузить(, "Регион"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ПринятыйКомментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По статистике продаж");
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ЗаВесьПериод = ВыборкаДетальныеЗаписи.Количество;
				Если НЕ ЗаВесьПериод = 0 Тогда
					ОтношениеПериодов = (Объект.ДатаЗаказов - ВыборкаДетальныеЗаписи.НачалоПродаж) / (Объект.ДатаОбеспечения - Объект.ДатаЗаказов);
					Если НЕ ОтношениеПериодов = 0 Тогда
						СтрокаЗаказа = ТоварыКЗаказу.Добавить();
						СтрокаЗаказа.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
						Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
							СтрокаЗаказа.Комментарий = ПринятыйКомментарий;
						КонецЕсли;
						СтрокаЗаказа.Количество = ЗаВесьПериод / ОтношениеПериодов;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.УчитыватьПланыПродаж Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПланыПродажТовары.Ссылка,
		|	ПланыПродажТовары.Количество,
		|	ПланыПродажТовары.Сумма,
		|	ПланыПродажТовары.ОСтроке,
		|	ПланыПродажТовары.НоменклатураИлиГруппа КАК Номенклатура
		|ИЗ Документ.ПланыПродаж.Товары КАК ПланыПродажТовары
		|ГДЕ ПланыПродажТовары.Ссылка.ДатаОкончания <= &Дата
		|	И ПланыПродажТовары.Ссылка.ПланНеАктуален = ЛОЖЬ
		|	И (&НетОтбораПоНоменклатурнымГруппам
		|			ИЛИ ПланыПродажТовары.НоменклатураИлиГруппа.НоменклатурнаяГруппа В (&ОтборПоНоменклатурнымГруппам))
		|	И (&НетОтбораПоПроизводителям
		|			ИЛИ ПланыПродажТовары.НоменклатураИлиГруппа.Производитель В (&ОтборПоПроизводителям))
		|	И (&НетОтбораПоРегионам
		|			ИЛИ ПланыПродажТовары.Ссылка.Регион В (&ОтборПоРегионам))";
		
		Запрос.УстановитьПараметр("Дата", Объект.ДатаОбеспечения);
		Запрос.УстановитьПараметр("НетОтбораПоНоменклатурнымГруппам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ИЛИ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоНоменклатурнымГруппам", Объект.ОтборПоНоменклатурнымГруппам.Выгрузить(, "НоменклатурнаяГруппа"));
		Запрос.УстановитьПараметр("НетОтбораПоПроизводителям", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") ИЛИ Объект.ОтборПоПроизводителям.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоПроизводителям", Объект.ОтборПоПроизводителям.Выгрузить(, "Производитель"));
		Запрос.УстановитьПараметр("НетОтбораПоРегионам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов") ИЛИ Объект.ОтборПоРегионам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоРегионам", Объект.ОтборПоРегионам.Выгрузить(, "Регион"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
			//	Если НетПриходаПО(ВыборкаДетальныеЗаписи.ссылка) Тогда
					СтрокаЗаказа = ТоварыКЗаказу.Добавить();
					СтрокаЗаказа.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
						СтрокаЗаказа.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По плану продаж") + ": " + СокрЛП(ВыборкаДетальныеЗаписи.Ссылка);	
					КонецЕсли;					
					СтрокаЗаказа.Количество = ВыборкаДетальныеЗаписи.Количество;
			//	КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если Объект.УчитыватьЗаказыКлиентов Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасходыТовараТовары.Ссылка,
		|	РасходыТовараТовары.Номенклатура,
		|	РасходыТовараТовары.СерияНоменклатуры,
		|	РасходыТовараТовары.Количество,
		|	РасходыТовараТовары.Цена,
		|	РасходыТовараТовары.Сумма,
		|	РасходыТовараТовары.ПроцентСкидки,
		|	РасходыТовараТовары.СуммаБезСкидки,
		|	РасходыТовараТовары.ЗаказКлиента,
		|	РасходыТовараТовары.ЕдиницаИзмерения,
		|	РасходыТовараТовары.ОСтроке
		|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ РасходыТовараТовары.Ссылка.ЭтоЗаказ = ИСТИНА
		|	И РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовараТовары.Ссылка.Дата < &Дата
		|	И РасходыТовараТовары.Ссылка.ЗаказСогласован = ИСТИНА
		|	И (&НетОтбораПоНоменклатурнымГруппам
		|			ИЛИ РасходыТовараТовары.Номенклатура.НоменклатурнаяГруппа В (&ОтборПоНоменклатурнымГруппам))
		|	И (&НетОтбораПоПроизводителям
		|			ИЛИ РасходыТовараТовары.Номенклатура.Производитель В (&ОтборПоПроизводителям))
		|	И (&НетОтбораПоРегионам ИЛИ РасходыТовараТовары.Ссылка.КлиентПоставщик.Регион В(&ОтборПоРегионам))";
		
		Запрос.УстановитьПараметр("Дата", Объект.ДатаОбеспечения);
		Запрос.УстановитьПараметр("НетОтбораПоНоменклатурнымГруппам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ИЛИ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоНоменклатурнымГруппам", Объект.ОтборПоНоменклатурнымГруппам.Выгрузить(, "НоменклатурнаяГруппа"));
		Запрос.УстановитьПараметр("НетОтбораПоПроизводителям", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") ИЛИ Объект.ОтборПоПроизводителям.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоПроизводителям", Объект.ОтборПоПроизводителям.Выгрузить(, "Производитель"));
		Запрос.УстановитьПараметр("НетОтбораПоРегионам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов") ИЛИ Объект.ОтборПоРегионам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоРегионам", Объект.ОтборПоРегионам.Выгрузить(, "Регион"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ПринятыйКомментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По заказу");	
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если НетПриходаПО(ВыборкаДетальныеЗаписи.ссылка) Тогда
					СтрокаЗаказа = ТоварыКЗаказу.Добавить();
					СтрокаЗаказа.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					СтрокаЗаказа.ЗаказКлиента = ВыборкаДетальныеЗаписи.Ссылка;
					Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
						СтрокаЗаказа.Комментарий = ПринятыйКомментарий;
					КонецЕсли;
					
					Если ИспользоватьЕдиницыИзмеренияНоменклатуры
						И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения) Тогда
						
						СтрокаЗаказа.Количество = ВыборкаДетальныеЗаписи.Количество * ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.Количество;
					Иначе
						СтрокаЗаказа.Количество = ВыборкаДетальныеЗаписи.Количество;
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	ТоварыКЗаказу.Сортировать("Номенклатура");
	
	// СОКРАЩЕНИЯ
	Если НЕ Объект.НеУчитыватьСобственныеОстаткиТоваров Тогда
		
		ТоварыКПроверкеПоОстаткам = ТоварыКЗаказу.Скопировать();
		
		ТоварыКПроверкеПоОстаткам.Свернуть("Номенклатура", "Количество");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура,
		|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК Остаток
		|ИЗ РегистрНакопления.Товары.Остатки(
		|			&ДатаОбеспечения,
		|			Склад В (&ИсключенныеСклады)
		|				И Номенклатура В (&Номенклатура)) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура";
		
		Запрос.УстановитьПараметр("ДатаОбеспечения", Объект.ДатаОбеспечения);
		Запрос.УстановитьПараметр("Номенклатура", ТоварыКПроверкеПоОстаткам.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ИсключенныеСклады", Объект.ИсключитьОстаткиНаСкладах.Выгрузить(, "Склад"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
				Остаток = ВыборкаДетальныеЗаписи.Остаток;
				ПараметрыСтроки = Новый Структура("Номенклатура", Номенклатура);
				СтрокиКЗаказу = ТоварыКЗаказу.НайтиСтроки(ПараметрыСтроки);
				
				Для Каждого СтрокаТовара Из СтрокиКЗаказу Цикл
					Если СтрокаТовара.Количество < Остаток Тогда
						Остаток = Остаток - СтрокаТовара.Количество;
						СтрокаТовара.Количество = 0;
					ИначеЕсли СтрокаТовара.Количество >= Остаток Тогда
						СтрокаТовара.Количество = СтрокаТовара.Количество - Остаток;
						Остаток = 0;
					КонецЕсли;
					
					Если Остаток = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// ТЕПЕРЬ дополн по рекминост потому что склады отняты выше
	Если Объект.УчитыватьПоказателиРекомендуемыхОстатковНоменклатуры Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР КОГДА Номенклатура.РекомендуемыйМинимальныйОстатокТовара - ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0) > 0
		|			ТОГДА Номенклатура.РекомендуемыйМинимальныйОстатокТовара - ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТоварыОстатки.Номенклатура КАК НоменклатураОстатка,
		|			СУММА(ТоварыОстатки.КоличествоОстаток) КАК Остаток
		|		ИЗ РегистрНакопления.Товары.Остатки(
		|					&ДатаОстатка,
		|					&НетОтбораПоСкладам
		|						ИЛИ Склад В (&ОтборПоСкладам)) КАК ТоварыОстатки
		|		СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура) КАК ВложенныйЗапрос
		|		ПО (ВложенныйЗапрос.НоменклатураОстатка = Номенклатура.Ссылка)
		|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И Номенклатура.Родитель <> &Архив
		|	И Номенклатура.РекомендуемыйМинимальныйОстатокТовара <> 0
		|	И (&НетОтбораПоНоменклатурнымГруппам
		|			ИЛИ Номенклатура.НоменклатурнаяГруппа В (&ОтборПоНоменклатурнымГруппам))
		|	И (&НетОтбораПоПроизводителям
		|			ИЛИ Номенклатура.Производитель В (&ОтборПоПроизводителям))";
		
		Запрос.УстановитьПараметр("Архив", ПредопределенноеЗначение("Справочник.Номенклатура.Архив"));
		Запрос.УстановитьПараметр("ДатаОстатка", объект.ДатаОбеспечения);
		Запрос.УстановитьПараметр("НетОтбораПоСкладам", Объект.ИсключитьОстаткиНаСкладах.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоСкладам", Объект.ИсключитьОстаткиНаСкладах.Выгрузить(, "Склад"));	
		Запрос.УстановитьПараметр("НетОтбораПоНоменклатурнымГруппам", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ИЛИ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоНоменклатурнымГруппам", Объект.ОтборПоНоменклатурнымГруппам.Выгрузить(, "НоменклатурнаяГруппа"));
		Запрос.УстановитьПараметр("НетОтбораПоПроизводителям", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры") ИЛИ Объект.ОтборПоПроизводителям.Количество() = 0);
		Запрос.УстановитьПараметр("ОтборПоПроизводителям", Объект.ОтборПоПроизводителям.Выгрузить(, "Производитель"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ПринятыйКомментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рекомендованный остаток");	
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				//Если НетПриходаПО(ВыборкаДетальныеЗаписи.ссылка) Тогда
					СтрокаЗаказа = ТоварыКЗаказу.Добавить();
					СтрокаЗаказа.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
						СтрокаЗаказа.Комментарий = ПринятыйКомментарий;
					КонецЕсли;
					СтрокаЗаказа.Количество = ВыборкаДетальныеЗаписи.Количество;					
				//КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
		ТоварыКЗаказу.Свернуть("Номенклатура, ЗаказКлиента", "Количество");
	КонецЕсли;
	
	// ОТБОРЫ
	МассивСтрокНаудаление = Новый Массив;
	
	Если НЕ Объект.ОтборПоНоменклатуреИГруппам.Количество() = 0 Тогда
		Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
			
			УжеПодходит = ЛОЖЬ;
			Для Каждого СтрокаОтбора Из Объект.ОтборПоНоменклатуреИГруппам Цикл
				Если СтрокаОтбора.Номенклатура.ЭтоГруппа Тогда
					УжеПодходит = СтрокаТовара.Номенклатура.ПринадлежитЭлементу(СтрокаОтбора.Номенклатура);
				Иначе
					УжеПодходит = СтрокаТовара.Номенклатура = СтрокаОтбора.Номенклатура;
				КонецЕсли;
				
				Если УжеПодходит Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ УжеПодходит Тогда
				МассивСтрокНаудаление.Добавить(СтрокаТовара);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаНаУдаление Из МассивСтрокНаудаление Цикл
		ТоварыКЗаказу.Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
	// ФОРМИРОВАНИЕ
	Если НЕ ТоварыКЗаказу.Количество() = 0 Тогда
		
		ТоварыКЗаказу.Колонки.Добавить("Поставщик");
		
		Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
			
			СтрокаТовара.Поставщик = Объект.Поставщик;
			Если Объект.ИспользоватьДанныеОПоследнемПоставщикеТоваров Тогда
				
				Поставщик = ОбщийМодульТоварСервер.ПолучитьПоследнегоПоставщика(СтрокаТовара.Номенклатура, Объект.ДатаЗаказов);
				Если НЕ Объект.ОтборПоПоставщикам.Количество() = 0 Тогда
					
					УжеПодходит = ЛОЖЬ;
					Для Каждого СтрокаОтбора Из Объект.ОтборПоПоставщикам Цикл
						УжеПодходит = Поставщик = СтрокаОтбора.Поставщик;
						Если УжеПодходит Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если УжеПодходит Тогда
						СтрокаТовара.Поставщик = Поставщик;
					КонецЕсли;
					
				Иначе
					СтрокаТовара.Поставщик = Поставщик;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;
		
		ТоварыКЗаказу.Сортировать("Поставщик");
		
		Если НЕ Объект.НеУчитыватьНевыполненныеЗаказыПоставщикамСформированныеРанее Тогда
			
			ТоварыКПроверкеПоЗаказам = ТоварыКЗаказу.Скопировать();
			
			ТоварыКПроверкеПоЗаказам.Свернуть("Номенклатура, Поставщик", "Количество");
			
			Запрос = Новый Запрос; // !!
			Запрос.Текст = "ВЫБРАТЬ СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК Остаток
			|ИЗ РегистрНакопления.ЗаказыПоставщикам.Остатки(
			|			&ДатаОбеспечения,
			|			Номенклатура = &Номенклатура
			|				И Поставщик = &Поставщик) КАК ЗаказыПоставщикамОстатки";
			
			Запрос.УстановитьПараметр("ДатаОбеспечения", Объект.ДатаОбеспечения);
			
			Для Каждого СтрокаТовара Из ТоварыКПроверкеПоЗаказам Цикл
				Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
				Запрос.УстановитьПараметр("Поставщик", СтрокаТовара.Поставщик);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Остаток = ВыборкаДетальныеЗаписи.Остаток;
						ПараметрыСтроки = Новый Структура("Номенклатура, Поставщик", СтрокаТовара.Номенклатура, СтрокаТовара.Поставщик);
						
						СтрокиКЗаказу = ТоварыКЗаказу.НайтиСтроки(ПараметрыСтроки);
						
						Для Каждого СтрокаТовара Из СтрокиКЗаказу Цикл
							Если СтрокаТовара.Количество < Остаток Тогда
								Остаток = Остаток - СтрокаТовара.Количество;
								СтрокаТовара.Количество = 0;
							ИначеЕсли СтрокаТовара.Количество >= Остаток Тогда
								СтрокаТовара.Количество = СтрокаТовара.Количество - Остаток;
								Остаток = 0;
							КонецЕсли;
							
							Если Остаток = 0 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
				КонецЕсли;			
			КонецЦикла;
			
		КонецЕсли;		
		
		// ЧИСТКА		
		КоличествоНоменклатурыМожетБытьДробным = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
		ЧислоЗнаковПослеЗапятойДляКоличества = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества");
		
		Если НЕ КоличествоНоменклатурыМожетБытьДробным Тогда
			Коэффициент = 1;
		ИначеЕсли ЧислоЗнаковПослеЗапятойДляКоличества = 1 Тогда
			Коэффициент = 10;
		ИначеЕсли ЧислоЗнаковПослеЗапятойДляКоличества = 2 Тогда
			Коэффициент = 100;
		ИначеЕсли ЧислоЗнаковПослеЗапятойДляКоличества = 3 Тогда
			Коэффициент = 1000;
		ИначеЕсли ЧислоЗнаковПослеЗапятойДляКоличества = 4 Тогда
			Коэффициент = 10000;
		ИначеЕсли ЧислоЗнаковПослеЗапятойДляКоличества = 5 Тогда
			Коэффициент = 100000;
		Иначе
			Коэффициент = 1000000;
		КонецЕсли;			
		
		МассивСтрокНаудаление = Новый Массив;
		Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
			
			СтрокаТовара.Количество = Окр(СтрокаТовара.Количество * Коэффициент, 0, РежимОкругления.Окр15как20) / Коэффициент;
			
			Если СтрокаТовара.Количество = 0 Тогда
				МассивСтрокНаудаление.Добавить(СтрокаТовара);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаНаУдаление Из МассивСтрокНаудаление Цикл
			ТоварыКЗаказу.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		// СОРТИРОВКА
		Если НЕ ПустаяСтрока(Объект.СортироватьНоменклатуруПо) Тогда
			ТоварыКЗаказу.Колонки.Добавить(Объект.СортироватьНоменклатуруПо);
			Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
				СтрокаТовара[Объект.СортироватьНоменклатуруПо] = СтрокаТовара.Номенклатура[Объект.СортироватьНоменклатуруПо];
			КонецЦикла;
			ТоварыКЗаказу.Сортировать(Объект.СортироватьНоменклатуруПо + ", Номенклатура");
		КонецЕсли;
		
		Если Объект.РазделитьДокументыЗаказаПоГруппамНоменклатуры Тогда				
			ТоварыКЗаказу.Колонки.Добавить("ГруппаНоменклатурыОпределенная");
			Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
				СтрокаТовара.ГруппаНоменклатурыОпределенная = СтрокаТовара.Номенклатура.Родитель;
			КонецЦикла;
			ТоварыКЗаказу.Сортировать("ГруппаНоменклатурыОпределенная, Поставщик, Номенклатура");
		КонецЕсли;
		
		Если Объект.РазделитьДокументыЗаказаПоНоменклатурнымГруппам Тогда
			ТоварыКЗаказу.Колонки.Добавить("НоменклатурнаяГруппаОпределенная");
			Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
				СтрокаТовара.НоменклатурнаяГруппаОпределенная = СтрокаТовара.Номенклатура.НоменклатурнаяГруппа;
			КонецЦикла;
			ТоварыКЗаказу.Сортировать("НоменклатурнаяГруппаОпределенная, Поставщик, Номенклатура");
		КонецЕсли;
		
		// ФОРМИРОВАНИЕ
		ТекущийПоставщик = Неопределено;
		ЗаказПоставщику  = Неопределено;
		ТекущийРодитель  = Неопределено;
		ТекущаяНоменклатурнаяГруппа = Неопределено;
		
		Для Каждого СтрокаТовара Из ТоварыКЗаказу Цикл
			
			Если (НЕ СтрокаТовара.Поставщик = ТекущийПоставщик)
				ИЛИ (Объект.РазделитьДокументыЗаказаПоГруппамНоменклатуры И НЕ СтрокаТовара.ГруппаНоменклатурыОпределенная = ТекущийРодитель)
				ИЛИ (Объект.РазделитьДокументыЗаказаПоНоменклатурнымГруппам И НЕ СтрокаТовара.НоменклатурнаяГруппаОпределенная = ТекущаяНоменклатурнаяГруппа) Тогда
				
				Если НЕ ЗаказПоставщику = Неопределено Тогда
					ЗаказПоставщику.Записать();
					СтрокаДокументов = Объект.СформированныеЗаказы.Добавить();
					СтрокаДокументов.ЗаказПоставщику = ЗаказПоставщику.Ссылка;
				КонецЕсли;
				
				ТекущийПоставщик = СтрокаТовара.Поставщик;
				Если Объект.РазделитьДокументыЗаказаПоГруппамНоменклатуры Тогда
					ТекущийРодитель = СтрокаТовара.ГруппаНоменклатурыОпределенная;	
				КонецЕсли;
				Если Объект.РазделитьДокументыЗаказаПоНоменклатурнымГруппам Тогда
					ТекущаяНоменклатурнаяГруппа = СтрокаТовара.НоменклатурнаяГруппаОпределенная;	
				КонецЕсли;
				
				ЗаказПоставщику 	   = Документы.ПоступленияТовара.СоздатьДокумент();
				ЗаказПоставщику.Дата   = Объект.ДатаЗаказов;
				ЗаказПоставщику.Склад  = Объект.СкладЗаказа;
				ЗаказПоставщику.ВидЦен = Объект.ВидЦен;
				ЗаказПоставщику.Организация 	= Объект.Организация;
				ЗаказПоставщику.КлиентПоставщик = ТекущийПоставщик;
				ЗаказПоставщику.ЭтоЗаказ 		= ИСТИНА;
				
				Если ЗначениеЗаполнено(Объект.Поставщик)
					И ЗаказПоставщику.КлиентПоставщик = Объект.Поставщик Тогда
					
					ЗаказПоставщику.Договор = Объект.ДоговорСПоставщиком;
				КонецЕсли;				
			КонецЕсли;
			
			СтрокаЗаказа = ЗаказПоставщику.Товары.Добавить();
			СтрокаЗаказа.Номенклатура = СтрокаТовара.Номенклатура;
			СтрокаЗаказа.ЗаказКлиента = СтрокаТовара.ЗаказКлиента;
			СтрокаЗаказа.Количество   = СтрокаТовара.Количество;
			Если НеСворачиватьТоварыПоКоличествуПриПриходованииТовара Тогда
				СтрокаЗаказа.ОСтроке = СтрокаТовара.Комментарий;	
			КонецЕсли;
			СтрокаЗаказа.Цена  = ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.Количество, ЗаказПоставщику.ВидЦен, ТекущийПоставщик, ЗаказПоставщику.Склад, ЗаказПоставщику.Дата, ЗаказПоставщику.Договор, Объект.НеИспользоватьЦеныПоставщиков);
			СтрокаЗаказа.Сумма = СтрокаЗаказа.Количество * СтрокаЗаказа.Цена;
			
		КонецЦикла;
		
		Если НЕ ЗаказПоставщику = Неопределено Тогда
			ЗаказПоставщику.Записать();
			СтрокаДокументов = Объект.СформированныеЗаказы.Добавить();
			СтрокаДокументов.ЗаказПоставщику = ЗаказПоставщику.Ссылка;	
		КонецЕсли;
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товары для заказа поставщикам не определены!"), СтатусСообщения.Информация);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ВидЦен, Знач Поставщик, Знач Склад, Знач Дата, Знач Договор, Знач НеИспользоватьЦеныПоставщиков = ЛОЖЬ)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, ВидЦен, Поставщик, , Склад, Дата);
	Иначе
		ПроцентСкидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЦенПоставщиков")
		И НеИспользоватьЦеныПоставщиков Тогда
		
		Цена = ОбщийМодульСервер.ПолучитьЦенуПоставщика(Номенклатура, Поставщик, Дата - 1, Договор);
	КонецЕсли;
	
	Если Цена = 0 тогда
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата - 1, ЛОЖЬ, Количество, Договор);	
	КонецЕсли;
	
	Если НЕ ПроцентСкидки = 0 
		И НЕ Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	ИначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	Иначе
		Возврат Номенклатура.Цена;	
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УдалитьЭтиЗаказыОтменить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЭтиЗаказыОтменитьЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалить все сформированные заказы?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтиЗаказыОтменитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьЭтиЗаказыОтменитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭтиЗаказыОтменитьНаСервере()
	
	Для Каждого СтрокаЗаказ Из Объект.СформированныеЗаказы Цикл
		Если ЗначениеЗаполнено(СтрокаЗаказ.ЗаказПоставщику) Тогда
			ЗаказПоставщику = СтрокаЗаказ.ЗаказПоставщику.ПолучитьОбъект();
			ЗаказПоставщику.ПометкаУдаления = ИСТИНА;
			ЗаказПоставщику.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	Объект.СформированныеЗаказы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьЗаказыКлиентовПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПланыПродажПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПоказателиРекомендуемыхОстатковНоменклатурыПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСобственныеОстаткиТоваровПриИзменении(Элемент)
	ОбновитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечитьРеализациюТоваровСУчетомСреднейСкоростиПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры
