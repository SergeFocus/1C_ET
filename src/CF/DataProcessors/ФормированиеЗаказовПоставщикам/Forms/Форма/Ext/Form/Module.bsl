//sza140421-2051 SZA: 
//sza140126-0230 

&НаКлиенте
Процедура ДатаЗаказаПриИзменении(Элемент)
	
	Объект.ДатаОбеспечения = Объект.ДатаЗаказов + 3600 * 24 * Объект.КоличествоДнейНаВыполнениеЗаказа;	
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001750", ЭтаФорма, Отказ, );	
	
	Если НЕ ОТказ ТОгда
		ВестиУчетПоПроизводителям = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры");
		ВестиУчетПоНоменклатурнымГруппам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		объект.ДатаЗаказов = ОбщийМодульСервисСервер.ПользователяТекущаяДата() + 3600 * 24 * 7;
		ОбновитьПараметрыДинамическихСписков();
		ЗаказыКлиентов.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101');
		
		ОбновитьПараметрыДинамическихСписков();
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПоследниеПоставщикиТоваровКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ЗаказыКлиентовТовараВКоличестве);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланыПродажТовараВКоличестве);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НедостаткиТоваровОстаток);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НедостаткиТоваровРекомендуемыйМинимальныйОстатокТовара);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыДинамическихСписков()
	
	ЗаказыКлиентов.Параметры.УстановитьЗначениеПараметра("Дата", объект.ДатаОбеспечения);
	ПланыПродаж.Параметры.УстановитьЗначениеПараметра("Дата", объект.ДатаОбеспечения);
	//НедостаткиТоваров.Параметры.УстановитьЗначениеПараметра("Дата", объект.ДатаОбеспечения);
	//НедостаткиТоваров.Параметры.УстановитьЗначениеПараметра("ИспользоватьОстатки", НЕ объект.НеУчитыватьСобственныеОстаткиТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ВыборПоставщика();
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейНаВыполнениеЗаказаПриИзменении(Элемент)
	
	Объект.ДатаОбеспечения = Объект.ДатаЗаказов + 3600 * 24 * Объект.КоличествоДнейНаВыполнениеЗаказа;
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбеспеченияПриИзменении(Элемент)
	
	Объект.КоличествоДнейНаВыполнениеЗаказа = Цел((Объект.ДатаОбеспечения - Объект.ДатаЗаказов) / (3600 * 24));
	ОбновитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДанныеОПоследнемПоставщикеТоваров1ПриИзменении(Элемент)
	ВыборПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура Поставщик1ПриИзменении(Элемент)
	ВыборПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ВыборПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДанныеОПоследнемПоставщикеТоваровПриИзменении(Элемент)
	ВыборПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура ВыборПоставщика()
	
	элементы.Поставщик.ТолькоПросмотр  = объект.ИспользоватьДанныеОПоследнемПоставщикеТоваров;
	элементы.Поставщик1.ТолькоПросмотр = объект.ИспользоватьДанныеОПоследнемПоставщикеТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	Элементы.НевыполненныеЗаказыКлиентов.Видимость = объект.УчитыватьЗаказыКлиентов;
	Элементы.ТекущиеПланыПродаж.Видимость = объект.УчитыватьПланыПродаж;
	Элементы.НедостатокТоваров.Видимость = объект.УчитыватьПоказателиРекомендуемыхОстатковНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьЗаказыКлиентовПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПланыПродажПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПоказателиРекомендуемыхОстатковНоменклатурыПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСобственныеОстаткиТоваровПриИзменении(Элемент)
	ОбновитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНедостачу(Команда)
	ОбновитьНедостачуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНедостачуНаСервере()
	
	ОбновитьМассивНоменклатуры();
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМассивНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ ";
	
	Если НЕ Объект.ОтборПоНоменклатуреИГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.Ссылка В ИЕРАРХИИ(&НоменклатурыИГруппы)";	
		
		НоменклатурыИГруппы = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоНоменклатуреИГруппам Цикл
			НоменклатурыИГруппы.Добавить(СтрокаОтбора.Номенклатура);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("НоменклатурыИГруппы", НоменклатурыИГруппы);
	КонецЕсли;
	
	Если ВестиУчетПоПроизводителям
		И НЕ Объект.ОтборПоПроизводителям.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.Производитель В (&ПоПроизводителям)";	
		
		ПоПроизводителям = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоПроизводителям Цикл
			ПоПроизводителям.Добавить(СтрокаОтбора.Производитель);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПоПроизводителям", ПоПроизводителям);
	КонецЕсли;	
	
	Если ВестиУчетПоНоменклатурнымГруппам
		И НЕ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = Запрос.Текст + "	И Номенклатура.НоменклатурнаяГРуппа В (&ПоНоменклатурнымГруппам)";	
		
		ПоНоменклатурнымГруппам = Новый Массив;
		Для Каждого СтрокаОтбора Из Объект.ОтборПоНоменклатурнымГруппам Цикл
			ПоНоменклатурнымГруппам.Добавить(СтрокаОтбора.НоменклатурнаяГруппа);	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ПоНоменклатурнымГруппам", ПоНоменклатурнымГруппам);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	//ПереченьНоменклатуры = РезультатЗапроса.Выбрать().Выгрузить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтиЗаказыОтменить(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалить все сформированные заказы?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьЭтиЗаказыОтменитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтиЗаказыОтменитьНаСервере()
	
	Для Каждого СтрокаЗаказ Из Объект.СформированныеЗаказы Цикл
		Если ЗначениеЗаполнено(СтрокаЗаказ.ЗаказПоставщику) Тогда
			ЗаказПоставщику = СтрокаЗаказ.ЗаказПоставщику.ПолучитьОбъект();
			ЗаказПоставщику.ПометкаУдаления = Истина;
			ЗаказПоставщику.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказыПоставщикамСогласноУсловий(Команда)
	СформироватьЗаказыПоставщикамСогласноУсловийНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыПоставщикамСогласноУсловийНаСервере()
	
	ТоварыКЗаказу = Новый ТаблицаЗначений;
	ТоварыКЗаказу.Колонки.Добавить("Номенклатура");
	ТоварыКЗаказу.Колонки.Добавить("СсылкаНаЗаказ");
	ТоварыКЗаказу.Колонки.Добавить("Количество");
	ТоварыКЗаказу.Колонки.Добавить("ЕдиницаИзмерения");
	
	Если Объект.УчитыватьЗаказыКлиентов Тогда

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходыТовараТовары.Ссылка,
		|	РасходыТовараТовары.Номенклатура,
		|	РасходыТовараТовары.СерияНоменклатуры,
		|	РасходыТовараТовары.Количество,
		|	РасходыТовараТовары.Цена,
		|	РасходыТовараТовары.Сумма,
		|	РасходыТовараТовары.ПроцентСкидки,
		|	РасходыТовараТовары.СуммаБезСкидки,
		|	РасходыТовараТовары.ЗаказКлиента,
		|	РасходыТовараТовары.ЕдиницаИзмерения,
		|	РасходыТовараТовары.ОСтроке
		|ИЗ
		|	Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ
		|	РасходыТовараТовары.Ссылка.ЭтоЗаказ = ИСТИНА
		|	И РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовараТовары.Ссылка.Дата < &Дата
		|	И РасходыТовараТовары.Ссылка.ЗаказСогласован = ИСТИНА";
		
		Запрос.УстановитьПараметр("Дата", Объект.ДатаЗаказов);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если НетПриходаПО(ВыборкаДетальныеЗаписи.ссылка) Тогда
					СтрокаЗакза = ТоварыКЗаказу.Добавить();
					СтрокаЗакза.Номенклатура 	 = ВыборкаДетальныеЗаписи.Номенклатура;
					СтрокаЗакза.СсылкаНаЗаказ 	 = ВыборкаДетальныеЗаписи.Ссылка;
					СтрокаЗакза.Количество 		 = ВыборкаДетальныеЗаписи.Количество;
					СтрокаЗакза.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;                        	
			
			Если НЕ ТоварыКЗаказу.Количество() = 0 Тогда
				ЗаказПоставщику = Документы.ПоступленияТовара.СоздатьДокумент();
				ЗаказПоставщику.Товары.Загрузить(СтрокаЗакза);
				ЗаказПоставщику.Записать();
				СтрокаДокмуентов = объект.СформированныеЗаказы.Добавить();
				СтрокаДокмуентов.ЗаказПоставщику = ЗаказПоставщику.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   НетПриходаПО(Знач ЗаказКлиента)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступленияТовараТовары.Ссылка
		|ИЗ
		|	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ
		|	(ПоступленияТовараТовары.ЗаказКлиента = &ЗаказКлиента
		|	ИЛИ ПоступленияТовараТовары.Ссылка.ЗаказКлиента = &ЗаказКлиента)
		|	И ПоступленияТовараТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();	
	
КонецФункции
