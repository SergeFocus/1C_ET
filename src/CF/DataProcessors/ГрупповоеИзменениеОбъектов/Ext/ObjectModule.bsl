#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СведенияОВнешнейОбработке() Экспорт
	Перем ПараметрыРегистрации;
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработкиКлиентСервер = ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");
		
		ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
		
		ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = "2.2.1";
		ПараметрыРегистрации.БезопасныйРежим = ЛОЖЬ;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Групповое изменение реквизитов");
		НоваяКоманда.Идентификатор = "ОткрытьГлобально";
		НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = ЛОЖЬ;
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ТекстЗапроса(ОбъектМетаданных) Экспорт
	
	ТекстЗапроса = "";
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Реквизит.Имя + " КАК " + Реквизит.Имя;
	КонецЦикла;

	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + Реквизит.Имя;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + ТабличнаяЧасть.Имя + ".(";
		СтрокаРеквизитов = "НомерСтроки";
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
				СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
			КонецЕсли;
			СтрокаРеквизитов = СтрокаРеквизитов + Реквизит.Имя;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
		|)";
	КонецЦикла;
	
	ТекстЗапроса = "Выбрать " + ТекстЗапроса + Символы.ПС + "
		|ИЗ
		|	"+ ОбъектМетаданных.ПолноеИмя();
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = ИСТИНА;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

Процедура ВыполнитьИзменениеОбъектов(Параметры, АдресРезультата) Экспорт
	
	ОбрабатываемыеОбъекты = Параметры.ОбрабатываемыеОбъекты.Получить().Строки;
	ОстанавливатьИзменениеПриОшибке = Параметры.ОстанавливатьИзменениеПриОшибке;
	
	ИзменятьВТранзакции = Параметры.ИзменятьВТранзакции;
	ПрерыватьПриОшибке = Параметры.ПрерыватьПриОшибке;
	ИспользуютсяДопРеквизиты = Параметры.ИспользуютсяДопРеквизиты;
	ИспользуютсяДопСведения = Параметры.ИспользуютсяДопСведения;
	
	ОбъектыДляИзменения = Параметры.ОбъектыДляИзменения.Получить().Строки;
	
	РезультатИзменения = Новый Структура("ЕстьОшибки, СостояниеОбработки");
	РезультатИзменения.ЕстьОшибки = ЛОЖЬ;
	РезультатИзменения.СостояниеОбработки = Новый Соответствие;
	
	Если ОстанавливатьИзменениеПриОшибке = Неопределено Тогда
		ОстанавливатьИзменениеПриОшибке = ПрерыватьПриОшибке;
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты = Неопределено Тогда
		ОбрабатываемыеОбъекты = Новый Массив;
		Для Каждого ИзменяемыйОбъект Из ОбъектыДляИзменения Цикл
			ОбрабатываемыеОбъекты.Добавить(ИзменяемыйОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ПроверятьНаГруппу = ПроверятьНаГруппу(ОбрабатываемыеОбъекты[0].Ссылка);
	
	Если ИзменятьВТранзакции Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	ИзменяемыеРеквизиты = Параметры.ИзменяемыеРеквизиты;
	
	Для Каждого ДанныеОбъекта Из ОбрабатываемыеОбъекты Цикл
		
		Ссылка = ДанныеОбъекта.Ссылка;
		ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ИзменяемыйОбъект.Ссылка);
		Исключение
			Инфо = ИнформацияОбОшибке();
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_БлокировкиОбъекта", КраткоеПредставлениеОшибки);
			Если ИзменятьВТранзакции Тогда
				ОтменитьТранзакцию();
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
			Если ОстанавливатьИзменениеПриОшибке Тогда
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		ИзменяемыеРеквизитыОбъекта = Новый Массив;
		ИзменяемыеДопРеквизитыОбъекта = Новый Соответствие;
		ИзменяемыеДопСведенияОбъекта = Новый Соответствие;
		
		МассивЗаписейДопСведений = Новый Массив;
		
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		// Отбор операций изменения по каждому объекту
		// 
		
		Для Каждого Операция Из ИзменяемыеРеквизиты Цикл
			
			Если Операция.ВидОперации = 1 Тогда // изменение реквизита
				
				// для групп не устанавливаем реквизиты, которых у них нет
				Если ПроверятьНаГруппу
					И ИзменяемыйОбъект.ЭтоГруппа Тогда
					
					Если НЕ ЭтоСтандартныйРеквизит(ИзменяемыйОбъект.Метаданные().СтандартныеРеквизиты, Операция.Имя) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ИзменяемыйОбъект[Операция.Имя] = Операция.Значение;
				ИзменяемыеРеквизитыОбъекта.Добавить(Операция.Имя);
				
			ИначеЕсли Операция.ВидОперации = 2 Тогда // изменение доп реквизита
				
				Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Найти(Операция.Свойство, "Свойство");
				
				Если НайденнаяСтрока = Неопределено Тогда
					НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Добавить();
					НайденнаяСтрока.Свойство = Операция.Свойство;
				КонецЕсли;
				
				НайденнаяСтрока.Значение = Операция.Значение;
				
				ИмяРеквизитаФормы = ПрефиксИмениДопРеквизита() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
				ИзменяемыеДопРеквизитыОбъекта.Вставить(ИмяРеквизитаФормы, Операция.Значение);
				
			ИначеЕсли Операция.ВидОперации = 3 Тогда // изменение доп сведения
				
				Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
					Продолжить;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений["ДополнительныеСведения"].СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.Объект = ИзменяемыйОбъект.Ссылка;
				МенеджерЗаписи.Свойство = Операция.Свойство;
				МенеджерЗаписи.Значение = Операция.Значение;
				
				МассивЗаписейДопСведений.Добавить(МенеджерЗаписи);
				
				ИмяРеквизитаФормы = ПрефиксИмениДопСведения() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
				ИзменяемыеДопСведенияОбъекта.Вставить(ИмяРеквизитаФормы, Операция.Значение);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если Параметры.ИзменяемыеТабличныеЧасти.Количество() > 0 Тогда
			ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, Параметры.ИзменяемыеТабличныеЧасти);
		КонецЕсли;
		
		// Отбор операций изменения по каждому объекту
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		// Блок обработки проверки заполнения 
		// 
		
		ПрерватьИзменение = ЛОЖЬ;
		ПроверкаЗаполненияУспешно = ИСТИНА;
		
		Попытка
			Если Не ИзменяемыйОбъект.ПроверитьЗаполнение() Тогда
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_ОбработкиПроверкиЗаполнения",
						ПолучитьСтрокуСообщенийОбОшибках());
				Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
					ПрерватьИзменение = ИСТИНА;
				КонецЕсли;
				ПроверкаЗаполненияУспешно = ЛОЖЬ;
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_НеКлассифицированная", КраткоеПредставлениеОшибки);
			Если ОстанавливатьИзменениеПриОшибке Или ИзменятьВТранзакции Тогда
				ПрерватьИзменение = ИСТИНА;
			КонецЕсли;
			ПроверкаЗаполненияУспешно = ЛОЖЬ;
		КонецПопытки;
		
		Если ПрерватьИзменение Тогда
			Если ИзменятьВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
			Возврат;
		КонецЕсли;
		
		Если НЕ ПроверкаЗаполненияУспешно Тогда
			Продолжить;
		КонецЕсли;
		
		// 
		// Блок обработки проверки заполнения
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		// Блок записи дополнительных сведений
		// 
		
		Если МассивЗаписейДопСведений.Количество() > 0 Тогда
			
			Если НЕ ИзменятьВТранзакции Тогда
				// Если транзакция при изменении объектов не используется, включаем ее
				// для изменения доп сведений в регистре
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			КонецЕсли;
			
			Попытка
				Для Каждого МенеджерЗаписи Из МассивЗаписейДопСведений Цикл
					МенеджерЗаписи.Записать(ИСТИНА);
				КонецЦикла;
			Исключение
				Инфо = ИнформацияОбОшибке();
				
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "Ошибка_ЗаписиДопСведений", КраткоеПредставлениеОшибки);
				
				ОтменитьТранзакцию();
				
				Если ИзменятьВТранзакции ИЛИ ОстанавливатьИзменениеПриОшибке Тогда
					ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
					Возврат;
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
		
		// 
		// Блок записи дополнительных сведений
		// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
		
		Отказ = ЛОЖЬ;
		Попытка
			ИзменяемыйОбъект.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			Отказ = ИСТИНА;
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, 
							"Ошибка_ЗаписиОбъекта",
							КраткоеПредставлениеОшибки + Символы.ПС + ПолучитьСтрокуСообщенийОбОшибках());
			Если ИзменятьВТранзакции И ТранзакцияАктивна() Тогда // отменяем транзакцию на любом уровне рекурсии
				ОтменитьТранзакцию();
			КонецЕсли;
			Если ПрерыватьПриОшибке Тогда
				ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
				Возврат;
			КонецЕсли;
		КонецПопытки;
		
		// Фиксируем транзакцию записи доп. свойств, если запись объектов происходит
		// не в транзакции
		Если НЕ ИзменятьВТранзакции И МассивЗаписейДопСведений.Количество() > 0 Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Если Не Отказ Тогда
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, "",, 
						ИзменяемыйОбъект, ИзменяемыеРеквизитыОбъекта,
						ИзменяемыеДопРеквизитыОбъекта, ИзменяемыеДопСведенияОбъекта);
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(ИзменяемыйОбъект.Ссылка);
		
	КонецЦикла;
	
	Если ИзменятьВТранзакции И ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
	Возврат;

КонецПроцедуры

Функция СвойствоНужноИзменять(Ссылка, Свойство, Параметры)
	
	ОбъектыДляИзменения = Параметры.ОбъектыДляИзменения;
	Если ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
		Если МодульУправлениеСвойствами = Неопределено Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(Ссылка);
	Если (ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик")
		И ОбъектЯвляетсяГруппой(Ссылка) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ МодульУправлениеСвойствами.ПроверитьСвойствоУОбъекта(Ссылка, Свойство) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции

Функция ПолучитьСтрокуСообщенийОбОшибках()
	
	ПредставлениеОшибки = "";
	МассивСообщений = ПолучитьСообщенияПользователю(ИСТИНА);
	
	Для Каждого СообщениеПользователю Из МассивСообщений Цикл
		ПредставлениеОшибки = ПредставлениеОшибки + СообщениеПользователю.Текст + Символы.ПС;
	КонецЦикла;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

Процедура ЗаполнитьРезультатИзменения(Результат, Ссылка, КодОшибки, СообщениеОбОшибке = "",
		ИзменяемыйОбъект = Неопределено, ИзменяемыеРеквизитыОбъекта = Неопределено,
		ИзменяемыеДопРеквизитыОбъекта = Неопределено, ИзменяемыеДопСведенияОбъекта = Неопределено)
	
	СостояниеИзменения = Новый Структура("КодОшибки,СообщениеОбОшибке");
	
	Если ПустаяСтрока(КодОшибки) Тогда
		СостояниеИзменения.Вставить("ЗначенияИзмененныхРеквизитов", Новый Соответствие);
		Если ИзменяемыеРеквизитыОбъекта <> Неопределено Тогда
			Для Каждого ИмяРеквизита Из ИзменяемыеРеквизитыОбъекта Цикл
				СостояниеИзменения.ЗначенияИзмененныхРеквизитов.Вставить(ИмяРеквизита, ИзменяемыйОбъект[ИмяРеквизита]);
			КонецЦикла;
		КонецЕсли;
		СостояниеИзменения.Вставить("ЗначенияИзмененныхДопРеквизитов", ИзменяемыеДопРеквизитыОбъекта);
		СостояниеИзменения.Вставить("ЗначенияИзмененныхДопСведений", ИзменяемыеДопСведенияОбъекта);
	Иначе
		Результат.ЕстьОшибки = ИСТИНА;
	КонецЕсли;
	
	СостояниеИзменения.КодОшибки = КодОшибки;
	СостояниеИзменения.СообщениеОбОшибке = СообщениеОбОшибке;
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	
КонецПроцедуры

Функция ПрефиксИмениДопРеквизита()
	Возврат "ДопРеквизит_";
КонецФункции

Функция ПрефиксИмениДопСведения()
	Возврат "ДопСведение_";
КонецФункции

Функция ПроверятьНаГруппу(Ссылка)
	
	ВидОбъекта = ВидОбъектаПоСсылке(Ссылка);
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если ВидОбъекта = "Справочник"
	   И МетаданныеОбъекта.Иерархический
	   И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Возврат ИСТИНА;
		
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции

Процедура ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, ИзмененияВТабличныхЧастях)
	Для Каждого ИзмененияТабличнойЧасти Из ИзмененияВТабличныхЧастях Цикл
		ИмяТаблицы = ИзмененияТабличнойЧасти.Ключ;
		ИзменяемыеРеквизиты = ИзмененияТабличнойЧасти.Значение;
		Для Каждого СтрокаТаблицы Из ИзменяемыйОбъект[ИмяТаблицы] Цикл
			Если СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы) Тогда
				Для Каждого ИзменяемыйРеквизит Из ИзменяемыеРеквизиты Цикл
					СтрокаТаблицы[ИзменяемыйРеквизит.Имя] = ИзменяемыйРеквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы)
	
	Возврат ДанныеОбъекта.Строки.НайтиСтроки(Новый Структура(ИмяТаблицы + "НомерСтроки", СтрокаТаблицы.НомерСтроки)).Количество() = 1;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// Процедуры и функции из базовой функциональности для обеспечения автономности

// Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов
// 
// Параметры:
//  СтандартныеРеквизиты – ОписанияСтандартныхРеквизитов - тип и значение описывает коллекцию настроек различных стандартных реквизитов;
//  ИмяРеквизита – Строка – реквизит который необходимо проверить на принадлежность множеству стандартных реквизитов;
// 
//  Возвращаемое значение:
// Тип: Булево. ИСТИНА -  реквизит входит в подмножество стандартных реквизитов; ЛОЖЬ – нет.
// 
Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит ИЗ СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	Возврат ЛОЖЬ;
	
КонецФункции

// Функция ВидОбъектаПоСсылке возвращает имя вида объектов метаданных
// по ссылке на объект.
// 
// Не обрабатываются точки маршрутов бизнес-процессов.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
// 
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
Функция ВидОбъектаПоСсылке(Ссылка) Экспорт
	
	Возврат ВидОбъектаПоТипу(ТипЗнч(Ссылка));
	
КонецФункции 

// Функция возвращает имя вида объектов метаданных по типу объекта.
// 
// Не обрабатываются точки маршрутов бизнес-процессов.
// 
// Параметры:
//  Тип       - Тип прикладного объекта, определенный в конфигурации
// 
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
Функция ВидОбъектаПоТипу(Тип) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Справочник";
	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Документ";
	
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "БизнесПроцесс";
	
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовХарактеристик";
	
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланСчетов";
	
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовРасчета";
	
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Задача";
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланОбмена";
	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Перечисление";
	
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверный тип значения параметра (%1)'"), Строка(Тип));
	
	КонецЕсли;
	
КонецФункции 

// Проверяет является ли объект группой элементов.
// 
// Параметры:
//  Объект       - Объект, Ссылка, ДанныеФормыСтруктура по типу Объект.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ОбъектЯвляетсяГруппой(Объект) Экспорт
	
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат ЛОЖЬ;
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Возврат ЛОЖЬ;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если Ссылка <> Объект Тогда
		Возврат ОбщийМодульПовтор.ЭтоГруппа(Объект);
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
	
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
// 
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
// 
// Возвращаемое значение:
//  Булево       - ИСТИНА, если тип значения ссылочный.
// 
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
// 
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
// 
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", ИСТИНА);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// 
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
// 
// 
// Возвращаемое значение:
//  Массив - массив строк.
// 
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", ИСТИНА) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,ЛОЖЬ) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
// 
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", ИСТИНА, ЛОЖЬ);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	// 
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
// 
// Параметры:
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
// 
// Возвращаемое значение:
//  Строка   – текстовая строка с подставленными параметрами.
// 
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
// 
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

// Возвращает ИСТИНА, если подсистема существует.
// 
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
// 
// Пример вызова необязательной подсистемы:
// 
//  Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения ИСТИНА;
Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, ИСТИНА);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, ИСТИНА);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
// 
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
// 
// Возвращаемое значение:
//  ОбщийМодуль.
// 
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий модуль") + " ""%1"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не найден") + ".", Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

#КонецЕсли
