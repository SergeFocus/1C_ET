//sza150515-0143
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ВосстановитьЗапросыИзФайла(Команда)
	ОбработкаЧтенияФайла(ИСТИНА);	
	ВладелецФормы.Модифицированность = ЛОЖЬ;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗапрос(Команда)
	ОбработкаВыбораЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапросыИзФайла(Команда)
	ОбработкаЧтенияФайла(ЛОЖЬ);
	ВладелецФормы.Модифицированность = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗапросыИзФайла(ДвоичныеДанные)
	
	
	ОбъектВнешнейОбработки = ОбъектОбработки().ПрочитатьЗапросыИзФайлаXML(ДвоичныеДанные);
	ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектВнешнейОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбУстановкеРасширения(Ответ, Оповещение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Выполнить(" НачатьУстановкуРасширенияРаботыСФайлами(Оповещение); ");
		
	Иначе
		
		СохранитьФайлЗапросаЗавершение(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры
// Заполняет Из объекта внешней обработки запросы и параметры.
// 
// Параметры:
// 	ОбъектОбработки - объект внешней обработки.
// 

&НаСервере
Процедура ЗаполнитьЗапросыИПараметрыИзОбъектаВнешнейОбработки(ОбъектОбработки)
	ЗапросыОб 	= ОбъектОбработки.Запросы;
	ПараметрыОб	= ОбъектОбработки.Параметры;
	
	Объект.Запросы.Очистить();
	Объект.Параметры.Очистить();
	
	// Заполнение запросов и параметров в форме.
	Для каждого ТекЗапрос Из ЗапросыОб цикл
		ЭлементЗапроса 			= Объект.Запросы.Добавить();
		ЭлементЗапроса.Идентификатор		= ТекЗапрос.Идентификатор;
		ЭлементЗапроса.Имя		= ТекЗапрос.Имя;
		ЭлементЗапроса.Текст 	= ТекЗапрос.Текст;
	КонецЦикла;	
	
	Для каждого ТекПараметр Из ПараметрыОб цикл
		ТипСтрока 	= ТекПараметр.Тип;
		
		Значение	= ТекПараметр.Значение;
		Значение    = ЗначениеИЗСтрокиВнутр(Значение);
		
		Если ТипСтрока = "ТаблицаЗначений" или ТипСтрока = "МоментВремени" или ТипСтрока = "Граница" Тогда
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип		 					= СписокТипов.НайтиПоЗначению(ТипСтрока).Значение;
			ЭлементПараметр.Значение 					= ТекПараметр.Значение;
			ЭлементПараметр.ТипВФорме					= СписокТипов.НайтиПоЗначению(ТипСтрока).Представление;
			ЭлементПараметр.ЗначениеВФорме				= ОбъектОбработки().ФормированиеПредставленияЗначения(Значение);
		Иначе
			Массив 		= Новый Массив;
			Массив.Добавить(Тип(ТипСтрока));
			Описание	= Новый ОписаниеТипов(Массив);
			
			ЭлементПараметр								= Объект.Параметры.Добавить();
			ЭлементПараметр.ИдентификаторЗапроса		= ТекПараметр.ИдентификаторЗапроса;
			ЭлементПараметр.Идентификатор				= ТекПараметр.Идентификатор;
			ЭлементПараметр.Имя							= ТекПараметр.Имя;
			ЭлементПараметр.Тип 						= ТипСтрока;
			ЭлементПараметр.ТипВФорме					= Описание;
			ЭлементПараметр.Значение					= ЗначениеВСтрокуВнутр(Значение);
			ЭлементПараметр.ЗначениеВФорме				= Значение;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработкаВыбораЗапроса();	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыИмяПриИзменении(Элемент)
	ВладелецФормы.Модифицированность = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ 					= ИСТИНА;
	
	ЭлементКопирования = Элемент.ТекущиеДанные;
	
	ИмяЗапросаПоУмолчанию 	= ЭтаФорма.ВладелецФормы.ИмяЗапросаПоУмолчанию;
	ИдентификаторЗапроса	= Новый УникальныйИдентификатор;
	
	Запрос 					= Объект.Запросы.Добавить();
	Запрос.Имя 				= ИмяЗапросаПоУмолчанию;
	Запрос.Идентификатор	= ИдентификаторЗапроса;
	
	Если Копирование  Тогда
		ИмяНовогоЗапроса				= СформироватьИмяКопииЗапроса(ЭлементКопирования.Имя);
		Запрос.Имя						= ИмяНовогоЗапроса;
		Запрос.Текст 					= ЭлементКопирования.Текст;
		ИдентификаторТекущегоЗапроса 	= ЭлементКопирования.Идентификатор;
		
		// Копирование параметров.
		Фильтр = Новый Структура;
		Фильтр.Вставить("ИдентификаторЗапроса", ИдентификаторТекущегоЗапроса);
		МассивПараметров = Объект.Параметры.НайтиСтроки(Фильтр);
		Для каждого Стр Из МассивПараметров Цикл 
			ЭлементПараметр = Объект.Параметры.Добавить();
			ЭлементПараметр.Идентификатор 			= Новый УникальныйИдентификатор;
			ЭлементПараметр.ИдентификаторЗапроса 	= ИдентификаторЗапроса;
			ЭлементПараметр.Имя						= Стр.Имя;
			ЭлементПараметр.Тип						= Стр.Тип;
			ЭлементПараметр.Значение 				= Стр.Значение;
			ЭлементПараметр.ТипВФорме 				= Стр.ТипВФорме;
			ЭлементПараметр.ЗначениеВФорме 			= Стр.ЗначениеВФорме;
		КонецЦикла;	
	КонецЕсли;	
	
	ВладелецФормы.Модифицированность = ИСТИНА;
КонецПроцедуры
// Обработчик перед удалением Запроса.
// Удаляет параметры для данного запроса.
// 

&НаКлиенте
Процедура ЗапросыПередУдалением(Элемент, Отказ)
	ПараметрыВФорме  	= Объект.Параметры;
	ИдентификаторУдаляемогоЗапроса = Элементы.Запросы.ТекущиеДанные.Идентификатор;
	
	КоличествоСтрок  	= ПараметрыВФорме.Количество()-1;
	Пока КоличествоСтрок >= 0 цикл
		ТекущийПараметр = ПараметрыВФорме.Получить(КоличествоСтрок);
		Если ТекущийПараметр.ИдентификаторЗапроса = ИдентификаторУдаляемогоЗапроса Тогда 
			ПараметрыВФорме.Удалить(КоличествоСтрок);
			Модифицированность = ИСТИНА;
		КонецЕсли;	
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	ВладелецФормы.Модифицированность = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗапроса()
	ТекущаяСтрока = Элементы.Запросы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда 
		ТекущийЗапрос = Элементы.Запросы.ТекущиеДанные;
		ИдентификаторТекущегоЗапроса = ТекущийЗапрос.Идентификатор;
		ПараметрыПередачи = ПоместитьЗапросыВСтруктуру(ИдентификаторТекущегоЗапроса, ИдентификаторТекущегоПараметра);
		
		// Передача в открывающую форму.
		Закрыть(); 
		
		Оповестить("ВыгрузитьЗапросыВРеквизиты", ПараметрыПередачи);
		Оповестить("ОбновитьФормуКлиент");
	Иначе
		ПоказатьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите запрос."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект"));
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаЧтенияФайла(Удалять)
	// Выбор файла для загрузки.
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл запросов");
	Диалог.ПредварительныйПросмотр  	= ЛОЖЬ;
	Диалог.Фильтр   					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл запросов") + " (*.q1c)|*.q1c";
	Диалог.Расширение   				= "q1c";
	Диалог.ПроверятьСуществованиеФайла  = ИСТИНА;
	Диалог.МножественныйВыбор			= ЛОЖЬ;
	Если Диалог.Выбрать() Тогда
		ИмяФайла 		= Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
	// Чтение данных Из файла.
	Если Не ПустаяСтрока(ИмяФайла) Тогда 
		Если Удалять Тогда 
			Объект.Запросы.Очистить();
			Объект.Параметры.Очистить();
		КонецЕсли;	
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		ЗагрузитьЗапросыИзФайла(ДвоичныеДанные)
	КонецЕсли;
	Объект.ИмяФайла = ИмяФайла;	
КонецПроцедуры	
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеПользователю(ТекстСообщения, ПутьКДанным)
	ОчиститьСообщения();
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры	

&НаСервере
Процедура ПолучитьТабличныеДокументыСравниваемыхЗапросов(ИДПервогоЗапроса, ИДВторогоЗапроса, ФайлПервогоЗапроса, ФайлВторогоЗапроса)
	ФильтрПервого = Новый Структура;
	ФильтрПервого.Вставить("Идентификатор",ИДПервогоЗапроса);
	АдресПервогоДокумента = Объект.Запросы.НайтиСтроки(ФильтрПервого).Получить(0).АдресРезультата;
	
	ФильтрВторого = Новый Структура;
	ФильтрПервого.Вставить("Идентификатор",ИДВторогоЗапроса);
	АдресВторогоДокумента = Объект.Запросы.НайтиСтроки(ФильтрПервого).Получить(0).АдресРезультата;
	
	Если ПустаяСтрока(АдресПервогоДокумента) или ПустаяСтрока(АдресВторогоДокумента) Тогда 
		Возврат;
	КонецЕсли;	
	
	ТДПервогоЗапроса = ПолучитьИзВременногоХранилища(АдресПервогоДокумента);
	ТДВторогоЗапроса = ПолучитьИзВременногоХранилища(АдресВторогоДокумента);
	
	ФайлПервогоЗапроса = ПолучитьИмяВременногоФайла("mxl");
	ТДПервогоЗапроса.Записать(ФайлПервогоЗапроса);
	
	ФайлВторогоЗапроса = ПолучитьИмяВременногоФайла("mxl");
	ТДВторогоЗапроса.Записать(ФайлВторогоЗапроса);
КонецПроцедуры	

&НаСервере
Функция ПоместитьЗапросыВСтруктуру(ИдентификаторЗапроса, ИдентификаторПараметра)
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("АдресХранилища", ОбъектОбработки().ПоместитьЗапросыВоВременноеХранилище(Объект, ИдентификаторЗапроса, ИдентификаторПараметра));
	Возврат ПараметрыПередачи;
КонецФункции	

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Считывание параметров передачи.
	ПараметрыПередачи 				= ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
	Объект.Запросы.Загрузить(ПараметрыПередачи.Запросы);	
	Объект.Параметры.Загрузить(ПараметрыПередачи.Параметры);
	Объект.ИмяФайла 				= ПараметрыПередачи.ИмяФайла;
	ИдентификаторТекущегоЗапроса 	= ПараметрыПередачи.ИдентификаторТекущегоЗапроса;
	ИдентификаторТекущегоПараметра	= ПараметрыПередачи.ИдентификаторТекущегоПараметра;
	
	ОбработкаОбъект                 = ОбъектОбработки();
	Объект.ДоступныеТипыДанных		= ОбработкаОбъект.Метаданные().Реквизиты.ДоступныеТипыДанных.Тип;
	
	СписокТипов						= ОбъектОбработки().СформироватьСписокТипов();
	ОбработкаОбъект.ФильтрацияСпискаТипов(СписокТипов, "");
	
	Фильтр				= Новый Структура;
	Фильтр.Вставить("Идентификатор", ИдентификаторТекущегоЗапроса);
	СтрокиЗапросовСИдентификатор 	= Объект.Запросы.НайтиСтроки(Фильтр);
	Если СтрокиЗапросовСИдентификатор.Количество() > 0 Тогда 
		Элементы.Запросы.ТекущаяСтрока = СтрокиЗапросовСИдентификатор.Получить(0).ПолучитьИдентификатор();
	КонецЕсли;	  
	Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбрать запрос");	
КонецПроцедуры
// Сохранение запросов.
// 
// Параметры:
// 	ИмяФайла - имя файла XML.
// 	Объект - объект обработки.
// 

&НаСервере
Функция СохранитьЗапросы(знач Объект)
	
	ДвоичныеДанные = ОбъектОбработки().ЗаписатьЗапросыВФайлXML(Объект);
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаКлиенте
Процедура СохранитьЗапросыВДругойФайл(Команда)
	
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОписаниеОповещения = Новый ОписаниеОповещения(""УстановитьИмяФайлаЗапроса"", ЭтаФорма, """"); 
		| СохранитьФайлЗапроса(ОписаниеОповещения); ");
	КонецЕсли;
	
КонецПроцедуры
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБЩИЕ КОМАНДЫ

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОписаниеОповещения = Новый ОписаниеОповещения(""УстановитьИмяФайлаЗапроса"", ЭтаФорма, Объект.ИмяФайла); 
		| СохранитьФайлЗапроса(ОписаниеОповещения); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапроса(ОписаниеОповещения) // в блоке ВЫПОЛНИТЬ
	
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		
		ОписаниеОповещения = Неопределено;
		
		Выполнить(" Оповещение = Новый ОписаниеОповещения(""СохранитьФайлЗапросаЗавершение"", ЭтаФорма, ОписаниеОповещения); ");
		#Если Не ВебКлиент Тогда
			// В тонком и толстом клиентах расширение подключено всегда.
			Выполнить(" СохранитьФайлЗапросаЗавершение(ОписаниеОповещения); ");
			Возврат;
		#КонецЕсли
		
		// Если расширение и так уже подключено, незачем про него спрашивать.
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда 
			СохранитьФайлЗапросаЗавершение(ОписаниеОповещения);
			Возврат;
		КонецЕсли;
		
		Если НЕ глВерсияПлатформы < 803040000  Тогда
			
			Если Не ЗаданВопросОбУстановкеРасширения Тогда
				
				ЗаданВопросОбУстановкеРасширения = ИСТИНА;
				ТекстОповещения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить расширение для работы с файлами?");
				Выполнить(" ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(""ЗадатьВопросОбУстановкеРасширения"", ЭтаФорма, Оповещение); 
				| ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстОповещения, РежимДиалогаВопрос.ДаНет); ");
				
			Иначе		
				Выполнить(" СохранитьФайлЗапросаЗавершение(ОписаниеОповещения); ");		
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗапросаЗавершение(Оповещение) Экспорт
	
	ИмяФайла = Оповещение.ДополнительныеПараметры;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Если ПустаяСтрока(ИмяФайла) Тогда
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл запросов");
			Диалог.ПредварительныйПросмотр  	= ЛОЖЬ;
			Диалог.Фильтр   					= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл запросов") + " (*.q1c)|*.q1c";
			Диалог.Расширение   				= "q1c";
			Диалог.ПроверятьСуществованиеФайла  = ИСТИНА;
			Диалог.МножественныйВыбор			= ЛОЖЬ;
			
			Если Диалог.Выбрать() Тогда
				ИмяФайла = Диалог.ПолноеИмяФайла;
			КонецЕсли;
		КонецЕсли;
		
		// Записываются текст и параметры запроса в файл.
		Если Не ПустаяСтрока(ИмяФайла) Тогда 
			ДвоичныеДанные = СохранитьЗапросы(Объект);
			ДвоичныеДанные.Записать(ИмяФайла);
			ВладелецФормы.Модифицированность = ЛОЖЬ;
			
		КонецЕсли;
	Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В данном браузере невозможно работать с файлами.");
		ПоказатьСообщениеПользователю(ТекстСообщения, "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРезультатыЗапросов(Команда)
	
	#Если Не ВебКлиент и Не ТонкийКлиент Тогда 
		ВыделенныеЗапросы = Элементы.Запросы.ВыделенныеСтроки;
		Если ВыделенныеЗапросы.Количество() <> 2 Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для сравнения необходимо выбрать только 2 запроса");
			Текст2 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект");
			Если глВерсияПлатформы < 803040000  Тогда
				Выполнить(" Предупреждение(ТекстСообщения); ");
			Иначе
				Выполнить(" ПоказатьПредупреждение(, ТекстСообщения, , Текст2); ");
			КонецЕсли;
			
			Возврат;
			
		Иначе
			ИдентификаторСтрокиПервогоЗапроса = ВыделенныеЗапросы.Получить(0);
			ИдентификаторСтрокиВторогоЗапроса = ВыделенныеЗапросы.Получить(1);
		КонецЕсли;	
		
		ИдентификаторПервогоЗапроса = Объект.Запросы.НайтиПоИдентификатору(ИдентификаторСтрокиПервогоЗапроса).Идентификатор;
		ИдентификаторВторогоЗапроса = Объект.Запросы.НайтиПоИдентификатору(ИдентификаторСтрокиВторогоЗапроса).Идентификатор;
		
		ТабличныйДокументПервогоЗапроса = Неопределено;
		ТабличныйДокументВторогоЗапроса = Неопределено;
		
		ПолучитьТабличныеДокументыСравниваемыхЗапросов(ИдентификаторПервогоЗапроса, ИдентификаторВторогоЗапроса, ТабличныйДокументПервогоЗапроса, ТабличныйДокументВторогоЗапроса);
		
		Если ТипЗнч(ТабличныйДокументПервогоЗапроса) <> Неопределено
			и ТипЗнч(ТабличныйДокументВторогоЗапроса) <> Неопределено Тогда
			// Сравниваются два файла.
			Сравнение = Новый СравнениеФайлов;
			Сравнение.СпособСравнения 	= СпособСравненияФайлов.ТабличныйДокумент;
			Сравнение.ПервыйФайл		= ТабличныйДокументПервогоЗапроса;
			Сравнение.ВторойФайл		= ТабличныйДокументВторогоЗапроса;
			Сравнение.ПоказатьРазличияМодально();
		КонецЕсли;	
	#Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сравнивать результаты можно только в режиме толстого клиента.");
		Текст2 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект");
		Если глВерсияПлатформы < 803040000  Тогда
			Выполнить(" Предупреждение(ТекстСообщения); ");
		Иначе
			Выполнить(" ПоказатьПредупреждение(, ТекстСообщения, , Текст2); ");	
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры
// Формирует имя копии запроса.
// 
// Параметры:
// 	Имя - передаваемое имя запроса.
// 

&НаКлиенте
Функция СформироватьИмяКопииЗапроса(Имя)
	Флаг 	= ИСТИНА;
	Индекс 	= 1;
	
	Пока Флаг Цикл 
		ФормируемоеИмяЗапроса = "%ИмяЗапроса% - " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия") + " %НомерКопии%";
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%ИмяЗапроса%", Имя);
		ФормируемоеИмяЗапроса = СтрЗаменить(ФормируемоеИмяЗапроса, "%НомерКопии%", Индекс);
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("Имя", ФормируемоеИмяЗапроса);
		
		МассивЗапросовПоФильтру = Объект.Запросы.НайтиСтроки(Фильтр);
		
		Если МассивЗапросовПоФильтру.Количество() = 0 Тогда 
			Флаг = ЛОЖЬ;
		КонецЕсли;	
		
		Индекс 	= Индекс + 1;
	КонецЦикла;	
	
	Возврат ФормируемоеИмяЗапроса;
КонецФункции	

&НаКлиенте
Процедура УстановитьИмяФайлаЗапроса(ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Объект.ИмяФайла = ИмяФайла;
	
КонецПроцедуры
