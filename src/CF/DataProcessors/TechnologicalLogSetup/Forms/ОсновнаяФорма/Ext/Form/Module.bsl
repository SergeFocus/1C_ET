// sza150518-0446

&НаКлиенте
Перем ОтветПередЗакрытием;

&НаСервере
Процедура ВключитьДополненияТонкогоКлиента()
	
	// покажем "бонусы" для полей ввода путей
	Элементы.ДампРасположение.КнопкаВыбора = ИСТИНА;
	Элементы.ТЖРасположение.КнопкаВыбора = ИСТИНА;
	Элементы.СисТЖРасположение.КнопкаВыбора = ИСТИНА;
	
	// покажем дополнительные команды тонкого клиента
	Элементы.ПеречитатьФайл.Видимость = ИСТИНА;
	Элементы.СохранитьШаблон.Видимость = ИСТИНА;
	Элементы.ЗаписатьКак.Видимость = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьСобытияПоКолонке(Команда)
	
	Модифицированность = ИСТИНА;
	УстановитьКомбинацию(0, РедакторТЖ.ТекущаяОбласть.Лево, 1);
	
КонецПроцедуры

&НаКлиенте
Функция   ВыбратьКаталог(Заголовок, ТекущийПуть) Экспорт
	
	Перем Файл, ВыборКаталога;
	
	#Если НЕ ВебКлиент Тогда
		Файл = Новый Файл(ТекущийПуть+"\aux");
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.Заголовок = Заголовок;
		ВыборКаталога.Каталог = Файл.Путь;
		Если ВыборКаталога.Выбрать() Тогда
			ТекущийПуть = ВыборКаталога.Каталог + "\";
			Возврат ИСТИНА;
		КонецЕсли;
		Возврат ЛОЖЬ;
	#Иначе
		Возврат ИСТИНА;
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ВыключитьСобытияПоКолонке(Команда)
	
	Модифицированность = ИСТИНА;
	УстановитьКомбинацию(0, РедакторТЖ.ТекущаяОбласть.Лево, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДампПриИзменении(Элемент)
	
	Элементы.ГруппаДамп.Доступность = РежимДамп;
	Если РежимДамп И ПустаяСтрока(ДампРасположение) Тогда
		ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения дампов"), ДампРасположение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДампРасположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения дампов"), ДампРасположение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция   ДобавитьУзелВКоллекцию(Документ, Коллекция, ИмяУзла)
	
	Узел = Документ.СоздатьЭлемент(ИмяУзла);
	Коллекция.ДобавитьДочерний(Узел);
	
	Возврат Узел;
	
КонецФункции // ДобавитьУзелВКоллекцию()

&НаСервереБезКонтекста
Функция   ДобавитьУзелСАтрибутами(Документ, Родитель, ИмяУзла, СтруктураАтрибутов = Неопределено)
	
	Перем Узел, Атрибут;
	
	Узел = ДобавитьУзелВКоллекцию(Документ, Родитель, ИмяУзла);
	Если СтруктураАтрибутов <> Неопределено Тогда
		Для Каждого Атрибут Из СтруктураАтрибутов Цикл
			Узел.УстановитьАтрибут(Атрибут.Ключ, XMLСтрока(Атрибут.Значение));
		КонецЦикла;
	КонецЕсли;
	Возврат Узел;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОписанияКолонок()
	
	Перем ОбъектОбработки, Данные, СтрокаДанных, НомКолонки, НомСтроки, Значение, Результат, Текст;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	// загрузим события по матрице параметров
	Данные = ОбъектОбработки.ПолучитьМакет("СоставСвойствСобытий");
	// добавим спец.колонку "all"
	СтрокаДанных = ДанныеКолонок.Добавить();
	СтрокаДанных.Имя = "all";
	СтрокаДанных.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все свойства");
	СтрокаДанных.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Указание всех свойств выбранного события");
	НомКолонки = 1;
	Пока ИСТИНА Цикл
		Значение = СокрЛП(Данные.Область(1, 1+НомКолонки).Текст);
		Если ПустаяСтрока(Значение) Тогда
			Прервать;
		КонецЕсли;
		СтрокаДанных = ДанныеКолонок.Добавить();
		СтрокаДанных.Имя = НРег(Значение);
		СтрокаДанных.Текст = СтрЗаменить(Значение, "_", ":");
		СтрокаДанных.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свойство") + " " + СтрокаДанных.Текст;
		НомКолонки = НомКолонки + 1;
	КонецЦикла;
	// теперь попробуем найти те колонки, для которых есть представления и описания
	Данные = ОбъектОбработки.ПолучитьМакет("Свойства");
	НомСтроки = 1;
	Пока ИСТИНА Цикл
		Значение = НРег(СокрЛП(Данные.Область(НомСтроки, 1).Текст));
		Если ПустаяСтрока(Значение) Тогда
			Прервать;
		КонецЕсли;
		Результат = ДанныеКолонок.НайтиСтроки(Новый Структура("Имя", Значение));
		Если Результат.Количество() = 0 Тогда
			// события нет в подсказках - значит все будет очень просто
			НомСтроки = НомСтроки + 1;
			Продолжить;
		КонецЕсли;
		Текст = Данные.Область(НомСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			Результат[0].Текст = СокрЛП(Текст);
		КонецЕсли;
		Текст = Данные.Область(НомСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			Результат[0].Подсказка = СокрЛП(Текст);
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОписанияСобытий()
	
	Перем ОбъектОбработки, Данные, НомСтроки, Область, Значение, СтрокаДанных, Текст;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	// загрузим события по матрице параметров
	Данные = ОбъектОбработки.ПолучитьМакет("СоставСвойствСобытий");
	НомСтроки = 3;
	Пока ИСТИНА Цикл
		Область = Данные.Область(НомСтроки, 1);
		Значение = СокрЛП(Область.Текст);
		Если ПустаяСтрока(Значение) Тогда
			Прервать;
		КонецЕсли;
		СтрокаДанных = ДанныеСобытий.Добавить();
		СтрокаДанных.Имя = НРег(Значение);
		СтрокаДанных.Текст = Значение;
		СтрокаДанных.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Событие") + " " + СтрокаДанных.Имя;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	// теперь попробуем найти те события, для которых есть представления и описания
	Данные = ОбъектОбработки.ПолучитьМакет("События");
	НомСтроки = 1;
	Пока ИСТИНА Цикл
		Область = Данные.Область(НомСтроки, 1);
		Значение = НРег(СокрЛП(Область.Текст));
		Если ПустаяСтрока(Значение) Тогда
			Прервать;
		КонецЕсли;
		Результат = ДанныеСобытий.НайтиСтроки(Новый Структура("Имя", Значение));
		Если Результат.Количество() = 0 Тогда
			// события нет в подсказках - значит все будет очень просто
			НомСтроки = НомСтроки + 1;
			Продолжить;
		КонецЕсли;
		Текст = Данные.Область(НомСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			Результат[0].Текст = СокрЛП(Текст);
		КонецЕсли;
		Текст = Данные.Область(НомСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			Результат[0].Подсказка = СокрЛП(Текст);
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ЗагрузитьПользовательскийТип(ИмяТипа)
	
	Перем ОбъектОбработки, Типы, НеобходимостьСортировки, СписокТипа, НомерСтроки, началоТипа;
	Перем Значение, Описание;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	Типы = ОбъектОбработки.ПолучитьМакет("ЗначенияСвойств");
	НеобходимостьСотрировки = ЛОЖЬ;
	СписокТипа = Новый СписокЗначений;
	НомерСтроки = 1;
	НачалоТипа = ЛОЖЬ;
	Пока ИСТИНА Цикл
		Значение = Типы.Область(НомерСтроки, 1).Текст;
		Описание = Типы.Область(НомерСтроки, 2).Текст;
		НомерСтроки = НомерСтроки + 1;
		Если НЕ НачалоТипа Тогда
			Если НРег(Значение) = НРег(ИмяТипа) Тогда
				// Нашли начало описания типа
				НачалоТипа = ИСТИНА;
				НеобходимостьСотрировки = ?(Описание = СокрЛП(НРег(Описание)) = "+sort", ИСТИНА, ЛОЖЬ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Значение) И НачалоТипа Тогда
			// пустая ячейка после обнаружения начала типа - окончание данных типа
			НачалоТипа = ЛОЖЬ;
			Прервать;
		КонецЕсли;
		
		// добавим текущие данные в список
		СписокТипа.Добавить(Значение, Описание);
		Если ПустаяСтрока(Типы.Область(НомерСтроки, 2).Текст) Тогда
			// Две подряд пустые ячейки по вертикали - это конец файла с описанием пользовательских типов
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НеобходимостьСотрировки Тогда
		СписокТипа.СортироватьПоПредставлению();
	КонецЕсли;
	Возврат СписокТипа;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ЗагрузитьСобытиеИзXML(КорневойУзел)
	
	Перем ЕстьОшибка, Значение, Узел, Знаки, Таблица, УсловиеКолонки, Условие;
	
	Знаки = Новый Структура;
	Знаки.Вставить("eq", "=");
	Знаки.Вставить("ne", "<>");
	Знаки.Вставить("gt", ">");
	Знаки.Вставить("ge", ">=");
	Знаки.Вставить("lt", "<");
	Знаки.Вставить("le", "<=");
	Знаки.Вставить("like", "like");
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Свойство");// name etc
	Таблица.Колонки.Добавить("Тип"); // eq, ne etc.
	Таблица.Колонки.Добавить("Значение");// имя свойство (для name) или параметры условий
	
	ЕстьОшибка = ЛОЖЬ;
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		УсловиеКолонки = Таблица.Добавить();
		// проверим условие
		Условие = НРег(Узел.ИмяЭлемента);
		Если Знаки.Свойство(Условие, Условие) Тогда
			УсловиеКолонки.Тип = Условие;
		Иначе
			ЕстьОшибка = ИСТИНА;
			ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Некорректный вид условия: %1%"), Узел.ИмяЭлемента));
		КонецЕсли;
		// атрибут "property" должен быть
		Значение = Узел.ПолучитьАтрибут("property");
		Если Значение <> Неопределено Тогда
			УсловиеКолонки.Свойство = СтрЗаменить(НРег(Значение), ":", "_");
		Иначе
			ЕстьОшибка = ИСТИНА;
			ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отсутствует атрибут <property> в элементе %1%"), Узел.ИмяЭлемента));
		КонецЕсли;
		
		// атрибут "value" должен быть
		Значение = Узел.ПолучитьАтрибут("value");
		Если Значение <> Неопределено Тогда
			УсловиеКолонки.Значение = НРег(Значение);
		Иначе
			ЕстьОшибка = ИСТИНА;
			ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отсутствует атрибут <value> в элементе %1%"), Узел.ИмяЭлемента));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьОшибка, Неопределено, Таблица);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлНастроек(ПараметрыЗагрузки)
	
	ОчиститьСообщения();
	Если ЗагрузитьФайлНастроекНаСервере(ПараметрыЗагрузки.АдресХранилища) Тогда
		МестоположениеФайла = ПараметрыЗагрузки.ПолноеИмяФайла;
		// покажем только установленные колонки
		ТолькоВыбранныеКолонки = 2;
		УстановитьВидимостьКолонок(ТолькоВыбранныеКолонки);
	Иначе
		ПараметрыПоУмолчаниюНаСервере();
		ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка чтения файла: %1%"), ПараметрыЗагрузки.ПолноеИмяФайла));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ЗагрузитьФайлНастроекНаСервере(АдресХранилища)
	
	Перем Построитель, Документ, ИмяФайла, Данные, УспешнаяЗагрузка, Читатель;
	Перем Журнал, Дамп, Память, ПланыЗапросов, Утечки, ТехЖурнал, СисТехЖурнал;
	Перем ПервыйЭлемент, ИзФайла, ИзФайла2,ТипДампа, ТипДампаСтрокой, Элемент;
	Перем Точки, СтрокаДанных, СписокУзлов, Узел1, Таблица, УсловиеСобытия, Условие;
	Перем УсловиеКолонки, ИмяВедущейКолонки, Колонка, События, Эвент, Проверка;
	
	ПараметрыПоУмолчаниюНаСервере();
	ОчиститьПараметрыТЖ();
	
	Элементы["РедакторУсловийСобытий"].Доступность = ИСТИНА;
	Элементы["ОчиститьФильтрПоСтроке"].Доступность = ИСТИНА;
	Элементы["РедакторУсловийКолонки"].Доступность = ИСТИНА;
	Элементы["ОчиститьФильтрПоКолонке"].Доступность = ИСТИНА;
	
	// Сохранить временный файл с файлом конфигурации
	ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	Данные.Записать(ИмяФайла);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	// признак того, что загрузка выполнена успешно
	УспешнаяЗагрузка = ИСТИНА;
	
	// Прочитать его
	Читатель = Новый ЧтениеXML();
	Читатель.ОткрытьФайл(ИмяФайла);
	
	Построитель = Новый ПостроительDOM();
	Попытка
		Документ = Построитель.Прочитать(Читатель);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстОписаниеОшибки);
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Журнал = Документ.ПолучитьЭлементыПоИмени("config");
	Если Журнал.Количество() = 0 Тогда
		// предположение простое: если нет элемента config - не наш файл
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В загружаемом файле отсутствует элемент") + " <config>. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данный файл не является файлом настройки технологического журнала."));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РежимДамп = ЛОЖЬ;
	ДампРасположение = "";
	ДампКопияЭкрана = ЛОЖЬ;
	УстановитьТипДампа("1100000000");
	Дамп = Документ.ПолучитьЭлементыПоИмени("dump");
	Если Дамп.Количество() > 0 Тогда
		ПервыйЭлемент = Дамп.Элемент(0);
		Если ПервыйЭлемент <> Неопределено Тогда
			ИзФайла = ПервыйЭлемент.ПолучитьАтрибут("create");
			РежимДамп = ?(ИзФайла = Неопределено, ИСТИНА, XMLЗначение(Тип("Булево"), ИзФайла));
			Если РежимДамп Тогда
				ТипДампа = XMLЗначение(Тип("Число"), ПервыйЭлемент.ПолучитьАтрибут("type"));
				Если ТипДампа <> Неопределено Тогда
					ТипДампаСтрокой = "";
					Пока ТипДампа >= 1 Цикл
						Остаток = ТипДампа % 2;
						ТипДампа = Цел(ТипДампа/2);
						ТипДампаСтрокой = ТипДампаСтрокой + Строка(Остаток);
					КонецЦикла;
					ТипДампаСтрокой = Лев(ТипДампаСтрокой+"0000000000", 10);
				Иначе
					ТипДампаСтрокой = "1100000000";
				КонецЕсли;
				УстановитьТипДампа(ТипДампаСтрокой);
				ДампРасположение = ПервыйЭлемент.ПолучитьАтрибут("location");
				ИзФайла = ПервыйЭлемент.ПолучитьАтрибут("prntscrn");
				ДампКопияЭкрана = ?(ИзФайла = Неопределено, ЛОЖЬ, XMLЗначение(Тип("Булево"), ИзФайла));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаДамп.Доступность = РежимДамп;
	
	Память = Документ.ПолучитьЭлементыПоИмени("mem");
	Если Память.Количество() > 0 Тогда
		РежимПамять = ИСТИНА;
	Иначе
		РежимПамять = ЛОЖЬ;
	КонецЕсли;
	
	ПланыЗапросов = Документ.ПолучитьЭлементыПоИмени("plansql");
	Если ПланыЗапросов.Количество() > 0 Тогда
		РежимПланЗапроса = ИСТИНА;
	Иначе
		РежимПланЗапроса = ЛОЖЬ;
	КонецЕсли;
	
	РежимУтечки = ЛОЖЬ;
	УтечкиКлиент = ЛОЖЬ;
	УтечкиСервер = ЛОЖЬ;
	УтечкиМодули.Очистить();
	УтечкиПроцедуры.Очистить();
	Утечки = Документ.ПолучитьЭлементыПоИмени("leaks");
	Если Утечки.Количество() > 0 Тогда
		Элемент = Утечки.Элемент(0);
		Если Элемент <> Неопределено Тогда
			ИзФайла = Элемент.ПолучитьАтрибут("collect");
			РежимУтечки = ?(ИзФайла = Неопределено, ЛОЖЬ, XMLЗначение(Тип("Булево"), ИзФайла));
			Точки = Элемент.ПолучитьЭлементыПоИмени("point");
			Для Каждого Точка Из Точки Цикл
				ИзФайла = Точка.ПолучитьАтрибут("call");
				Если ИзФайла <> Неопределено Тогда
					Если НРег(ИзФайла) = "server" Тогда
						УтечкиСервер = ИСТИНА;
					ИначеЕсли НРег(ИзФайла) = "client" Тогда
						УтечкиКлиент = ИСТИНА;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ИзФайла = Точка.ПолучитьАтрибут("proc");
				Если ИзФайла <> Неопределено Тогда
					СтрокаДанных = УтечкиМодули.Добавить();
					СтрокаДанных.Модуль = ИзФайла;
					Продолжить;
				КонецЕсли;
				ИзФайла = Точка.ПолучитьАтрибут("on");
				ИзФайла2 = Точка.ПолучитьАтрибут("off");
				Если ИзФайла <> Неопределено И ИзФайла2 <> Неопределено Тогда
					СтрокаДанных = УтечкиПроцедуры.Добавить();
					СтрокаДанных.Строка1 = ИзФайла;
					СтрокаДанных.Строка2 = ИзФайла2;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаУтечки.Доступность = РежимУтечки;
	
	ТехЖурнал = Документ.ПолучитьЭлементыПоИмени("log");
	Если ТехЖурнал.Количество() > 0 Тогда
		// Считываем только первый лог Из существующих
		// Это должно закрыть потребности 99,99% пользователей
		ПервыйЭлемент = ТехЖурнал.Элемент(0);
		Если ПервыйЭлемент <> Неопределено Тогда
			РежимТЖ = ИСТИНА;
			ИзФайла = ПервыйЭлемент.ПолучитьАтрибут("location");
			ТЖРасположение = ?(ИзФайла = Неопределено, "c:\v82\logs", ИзФайла);
			ИзФайла = ПервыйЭлемент.ПолучитьАтрибут("history");
			ТЖИстория = ?(ИзФайла = Неопределено, 168, XMLЗначение(Тип("Число"), ИзФайла));
			// Прочитаем все <event>
			СписокУзлов = ПервыйЭлемент.ПолучитьЭлементыПоИмени("event");
			Для Каждого Узел1 Из СписокУзлов Цикл
				Если Узел1.РодительскийУзел <> ПервыйЭлемент Тогда
					// обходим только узлы непосредственного подчинения
					Продолжить;
				КонецЕсли;
				// Загрузим в таблицу значений целиком текущий узел event
				Таблица = ЗагрузитьСобытиеИзXML(Узел1);
				Если Таблица = Неопределено Тогда
					УспешнаяЗагрузка = ЛОЖЬ;
					Продолжить;
				КонецЕсли;
				// если есть спец.узел вида <ne property="name" value="">,
				// то этот узел обрабатываем особым образом и никаких условий с ним не анализируем,
				// т.к. они там не имеют смысла
				Результат = Таблица.НайтиСтроки(Новый Структура("Тип, Свойство, Значение", "<>", "name", ""));
				Если Результат.Количество() > 0 Тогда
					УстановитьКомбинацию("all", -1, 1);
					Продолжить;
				КонецЕсли;
				// если есть условия без конструкции property="name" value="имя_свойства", то
				// мы обрабатываем условия на все события (жирная отметка строки "все события")
				Результат = Таблица.НайтиСтроки(Новый Структура("Свойство", "name"));
				Если Результат.Количество() = 0 Тогда
					Для Каждого Условие Из Таблица Цикл
						УсловиеСобытия = УсловияСобытий.Добавить();
						УсловиеСобытия.Событие = "all";
						УсловиеСобытия.Колонка = Условие.Свойство;
						УсловиеСобытия.Условие = Условие.Тип;
						УсловиеСобытия.Значение = Условие.Значение;
					КонецЦикла;
					УстановитьКомбинацию("all", -1, 2);
					Продолжить;
				КонецЕсли;
				// если свойств name больше одного - неверный узел
				Если Результат.Количество() > 1 Тогда
					УспешнаяЗагрузка = ЛОЖЬ;
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В элементе") + " <event> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обнаружено более одного элемента вида") + " property=""name"" value=""ИмяСвойства""");
					Продолжить;
				Иначе
					ИмяСобытия = Результат[0].Значение;
					// проверим, что имя события нами поддерживается
					Если ПолучитьИдентификаторСобытия(НРег(ИмяСобытия)) = Неопределено Тогда
						УспешнаяЗагрузка = ЛОЖЬ;
						ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Событие не поддерживается редактором") + ": %1%", ИмяСобытия));
						Продолжить;
					КонецЕсли;
					// проверим, что указана конструкция вида <eq property=""name"" value="event_name"> - другое не умеем
					Если Результат[0].Тип <> "=" Тогда
						УспешнаяЗагрузка = ЛОЖЬ;
						ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не поддерживается конструкция, отличная от") + " <eq property=""name"" value=""%1%"">", ИмяСобытия));
						Продолжить;
					КонецЕсли;
					Для Каждого Условие Из Таблица Цикл
						Если Условие.Свойство = "name" Тогда
							// отмеченные колонки задавать не надо - их добавит УстановитьКомбинацию()
							Продолжить;
						КонецЕсли;
						УсловиеКолонки = УсловияСобытий.Добавить();
						УсловиеКолонки.Событие = ИмяСобытия;
						УсловиеКолонки.Колонка = Условие.Свойство;
						УсловиеКолонки.Условие = Условие.Тип;
						УсловиеКолонки.Значение = Условие.Значение;
					КонецЦикла;
					УстановитьКомбинацию(ИмяСобытия, -1, ?(Таблица.Количество() = 1, 1, 2));
				КонецЕсли;
			КонецЦикла;
			// Прочитаем все <property>
			СписокУзлов = ПервыйЭлемент.ПолучитьЭлементыПоИмени("property");
			Для Каждого Узел1 Из СписокУзлов Цикл
				// это колонки со своими условиями
				ИмяВедущейКолонки = НРег(Узел1.ПолучитьАтрибут("name"));
				Колонка = ПолучитьИдентификаторКолонки(ИмяВедущейКолонки);
				Если Колонка = Неопределено Тогда
					УспешнаяЗагрузка = ЛОЖЬ;
					ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свойство не поддерживается редактором") + ": %1%", ИмяВедущейКолонки));
					Продолжить;
				КонецЕсли;
				События = Узел1.ПолучитьЭлементыПоИмени("event");
				Если События.Количество() = 0 Тогда
					// это отображение колонки Из события "all"
					УстановитьКомбинацию("all", ИмяВедущейКолонки, 1);
				Иначе
					Для Каждого Эвент Из События Цикл
						Таблица = ЗагрузитьСобытиеИзXML(Эвент);
						Если Таблица = Неопределено Тогда
							УспешнаяЗагрузка = ЛОЖЬ;
							Продолжить;
						КонецЕсли;
						// если нет свойства name - это просто условия на колонку для события "all"
						Результат = Таблица.НайтиСтроки(Новый Структура("Свойство", "name"));
						Если Результат.Количество() = 0 Тогда
							Для Каждого Условие Из Таблица Цикл
								УсловиеКолонки = УсловияКолонок.Добавить();
								УсловиеКолонки.ВедущаяКолонка = ИмяВедущейКолонки;
								УсловиеКолонки.Событие = "all";
								УсловиеКолонки.Колонка = Условие.Свойство;
								УсловиеКолонки.Условие = Условие.Тип;
								УсловиеКолонки.Значение = Условие.Значение;
							КонецЦикла;
							УстановитьКомбинацию("all", ИмяВедущейКолонки, 3);
							Продолжить;
						КонецЕсли;
						// если свойств name больше одного - неверный узел
						Если Результат.Количество() > 1 Тогда
							УспешнаяЗагрузка = ЛОЖЬ;
							ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В элементе") + " <event> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("элемента") + " <property name=""%1%""> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("обнаружено более одного элемента вида") + " property=""name"" value=""ИмяСвойства""';sys= ''", "ru", ИмяВедущейКолонки));
							Продолжить;
						Иначе
							ИмяСобытия = Результат[0].Значение;
							// Проверим, что такой событие редактор поддерживает
							Проверка = ДанныеСобытий.НайтиСтроки(Новый Структура("Имя", Результат[0].Значение));
							Если Проверка.Количество() = 0 Тогда
								УспешнаяЗагрузка = ЛОЖЬ;
								ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свойство не поддерживается редактором") + ": %1%", Результат[0].Значение));
								Продолжить;
							КонецЕсли;
							// Проверим, что найденная конструкция равна <eq property="name" value="EventName"/>
							Если Результат[0].Тип <> "=" И НЕ ПустаяСтрока(Результат[0].Значение) Тогда
								УспешнаяЗагрузка = ЛОЖЬ;
								ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не поддерживается конструкция, отличная от") + " <eq property=""name"" value=""%1%"">", ИмяСобытия));
								Продолжить;
							КонецЕсли;
							Для Каждого Условие Из Таблица Цикл
								Если Условие.Свойство = "name" И Условие.Тип = "<>" Тогда
									УсловиеКолонки = ЗаданныеКолонки.Добавить();
									УсловиеКолонки.Событие = "all";
									УсловиеКолонки.Колонка = ИмяВедущейКолонки;
									УсловиеКолонки.Состояние = 1;
								ИначеЕсли Условие.Свойство = "name" Тогда
									Продолжить;
								Иначе
									УсловиеКолонки = УсловияКолонок.Добавить();
									УсловиеКолонки.ВедущаяКолонка = ИмяВедущейКолонки;
									УсловиеКолонки.Событие = ИмяСобытия;
									УсловиеКолонки.Колонка = Условие.Свойство;
									УсловиеКолонки.Условие = Условие.Тип;
									УсловиеКолонки.Значение = Условие.Значение;
								КонецЕсли;
							КонецЦикла;
							УстановитьКомбинацию(?(ПустаяСтрока(ИмяСобытия), "all", ИмяСобытия), ИмяВедущейКолонки, ?(Таблица.Количество() = 1, 1, 3));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		РежимТЖ = ЛОЖЬ;
		ТЖИстория = 168;
		ТЖРасположение = "";
	КонецЕсли;
	
	СисТехЖурнал = Документ.ПолучитьЭлементыПоИмени("defaultlog");
	Если СисТехЖурнал.Количество() > 0 Тогда
		ИзФайла = СисТехЖурнал[0].ПолучитьАтрибут("location");
		СисТЖРасположение = ?(ИзФайла = Неопределено, "", ИзФайла);
		ИзФайла = СисТехЖурнал[0].ПолучитьАтрибут("history");
		СисТЖИстория = ?(ИзФайла = Неопределено, 24, XMLЗначение(Тип("Число"), ИзФайла));
	Иначе
		СисТЖИстория = 24;
		СисТЖРасположение = "";
	КонецЕсли;
	
	СисСобытия = Документ.ПолучитьЭлементыПоИмени("system");
	Если СисСобытия.Количество() > 0 Тогда
		СистемныеУровни = ЗагрузитьПользовательскийТип("ll");
		Для Каждого СисСобытие Из СисСобытия Цикл
			Уровень = СисСобытие.ПолучитьАтрибут("level");
			Если ПустаяСтрока(Уровень) Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В элементе") + " <system> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указано значение атрибута") + " ""level"". " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент игнорируется"));
				Продолжить;
			КонецЕсли;
			Если СистемныеУровни.НайтиПоЗначению(Уровень) = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В элементе") + " <system> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("указано неизвестно значение атрибута.") + " level = ""%1%"". " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент игнорируется"), Уровень));
				Продолжить;
			КонецЕсли;
			Событие = СистемныеСобытия.Добавить();
			Событие.Уровень = Уровень;
			Событие.Компонент = СисСобытие.ПолучитьАтрибут("component");
			Событие.Класс = СисСобытие.ПолучитьАтрибут("class");
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ПараметрыТЖ.Доступность = РежимТЖ;
	Элементы.РедакторТЖ.Доступность = РежимТЖ;
	Элементы.ПодРедактором.Доступность = РежимТЖ;
	Читатель.Закрыть();
	// удалим временный файл за собой
	УдалитьФайлы(ИмяФайла);
	Возврат УспешнаяЗагрузка;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайлШаблона(Знач ИмяШаблона)
	
	Перем Действия, СписокДействий, Действие;
	
	Действия = Новый Структура;
	Действия.Вставить("Дамп", "путькдампу");
	Действия.Вставить("ТЖ", "путьктж");
	ОчиститьСообщения();
	Если НРег(Лев(ИмяШаблона, 6)) <> "шаблон" Тогда
		// это шаблон Из файла
		Документ = Новый ТекстовыйДокумент;
		Документ.Прочитать(ИмяШаблона);
		ИмяШаблона = ПоместитьВоВременноеХранилище(Документ.ПолучитьТекст());
	КонецЕсли;
	СписокДействий = ЗагрузитьШаблонНаСервере(ИмяШаблона);
	// покажем только установленные колонки
	ТолькоВыбранныеКолонки = 2;
	УстановитьВидимостьКолонок(ТолькоВыбранныеКолонки);
	// если нужно выполнить какие-то действия - выполним их.
	Для Каждого Действие Из СписокДействий Цикл
		Если НРег(Действие) = Действия.Дамп Тогда
			ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения дампов"), ДампРасположение);
		ИначеЕсли НРег(Действие) = Действия.ТЖ Тогда
			ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения технологического журнала"), ТЖРасположение);
		КонецЕсли;
	КонецЦикла;
	Модифицированность = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблон(Команда)
	
	Перем ПараметрыФормы, ОбратныйВызов;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКШаблонам", ПолучитьПутьОбщихКонфигурационныхФайлов());
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузитьШаблонЗавершение"", Объект); 
		| ОткрытьФорму(МетаПуть + "".Форма.ВыборШаблона"", ПараметрыФормы, , , , , ОбратныйВызов); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ЗагрузитьФайлШаблона(Результат);
	КонецЕсли;
	
КонецПроцедуры
// Характеристика шаблона может быть или адрес временного хранилища - если это шаблон из
// файла или имя макета обработки - если это встроенный шаблон

&НаСервере
Функция   ЗагрузитьШаблонНаСервере(ХарактеристикаШаблона)
	
	Перем Ключи, МассивДействия, Документ, ОбъектОбработки, Сч, СтрокаФайла, ВременныйФайл, Адрес;
	
	Ключи = Новый Структура;
	Ключи.Вставить("Действия", "действия:");
	Ключи.Вставить("Шаблон", "шаблон:");
	
	МассивДействия = Новый Массив;
	// Может быть или шаблон или файл
	Если ЭтоАдресВременногоХранилища(ХарактеристикаШаблона) Тогда
		// это файловый шаблон
		Документ = Новый ТекстовыйДокумент;
		Документ.УстановитьТекст(ПолучитьИзВременногоХранилища(ХарактеристикаШаблона));
	Иначе
		// это макет
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		Документ = ОбъектОбработки.ПолучитьМакет(ХарактеристикаШаблона);
	КонецЕсли;
	
	// первые 4 строки просто удаляем - они нам здесь не нужны
	Для Сч=1 По 4 Цикл
		Документ.УдалитьСтроку(1);
	КонецЦикла;
	
	СтрокаФайла = СокрЛП(Документ.ПолучитьСтроку(1));
	Если НРег(СтрокаФайла) = Ключи.Действия Тогда
		Документ.УдалитьСтроку(1);
		// может быть максимум 2 действия
		СтрокаФайла = СокрЛП(Документ.ПолучитьСтроку(1));
		Если НРег(СтрокаФайла) <> Ключи.Шаблон Тогда
			МассивДействия.Добавить(СтрокаФайла);
			Документ.УдалитьСтроку(1);
			СтрокаФайла = СокрЛП(Документ.ПолучитьСтроку(1));
		КонецЕсли;
		Если НРег(СтрокаФайла) <> Ключи.Шаблон Тогда
			МассивДействия.Добавить(СтрокаФайла);
			Документ.УдалитьСтроку(1);
			СтрокаФайла = СокрЛП(Документ.ПолучитьСтроку(1));
		КонецЕсли;
	КонецЕсли;
	Если НРег(СтрокаФайла) = Ключи.Шаблон Тогда
		Документ.УдалитьСтроку(1);
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		Документ.Записать(ВременныйФайл);
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВременныйФайл));
		ЗагрузитьФайлНастроекНаСервере(Адрес);
	КонецЕсли;
	Возврат МассивДействия;
	
КонецФункции

&НаКлиенте
// Данный обработчик обратного вызова обслуживает все попытки загрузки файла logcfg.xml в обработке
Процедура ЗагрузкаНастроекЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Перем Параметры;
	
	Если Результат Тогда
		Параметры = Новый Структура("ПолноеИмяФайла, АдресХранилища", ВыбранноеИмяФайла, Адрес);
		ЗагрузитьФайлНастроек(Параметры);
		Модифицированность = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлНастроек(ПолноеИмяФайла)
	
	Перем АдресХранилища;
	
	АдресХранилища = СформироватьФайлНастроекНаСервере();
	#Если ВебКлиент Тогда
		ПолучитьФайл(АдресХранилища, ПолноеИмяФайла, ИСТИНА);
	#Иначе
		ПолучитьФайл(АдресХранилища, ПолноеИмяФайла, ЛОЖЬ);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция   ЗаписьВозможна()
	
	Перем ЗаписьВозможна, Сообщение, ВыбранныеСвойства;
	
	ЗаписьВозможна = ИСТИНА;
	Если РежимДамп Тогда
		Если ПустаяСтрока(ДампРасположение) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не задан каталог сохранения дампов"));
			ЗаписьВозможна = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимТЖ Тогда
		Если ПустаяСтрока(ТЖРасположение) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не задан каталог хранения технологического журнала"));
			ЗаписьВозможна = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимДамп И РежимТЖ И ДампРасположение = ТЖРасположение Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нельзя задавать одинаковые каталоги для записи дампов и хранения файлов технологического журнала"));
		ЗаписьВозможна = ЛОЖЬ;
	КонецЕсли;
	
	ВыбранныеСвойства = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка", ""));
	Если ВыбранныеСвойства.Количество() = ЗаданныеКолонки.Количество() Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В технологический журнал не включено ни одно свойство. Рекомендуется включить свойство <Все свойства> для события <Все события>."));
		ЗаписьВозможна = ЛОЖЬ;
	КонецЕсли;
	
	Возврат ЗаписьВозможна;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОжидания()
	
	Перем ТекКолонка, ТекСтрока, ВнутриОбластиКолонок, ВнутриОбластиСтрок, ПерваяКолонка, КолонкаВсе, ПерваяСтрока, Текст;
	
	ТекКолонка = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
	ТекСтрока = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
	ВнутриОбластиКолонок = ?(ТекКолонка >= ГраницыОбластиРедактирования.Лево И ТекКолонка <= ГраницыОбластиРедактирования.Право, ИСТИНА, ЛОЖЬ);
	ВнутриОбластиСтрок = ?(ТекСтрока >= ГраницыОбластиРедактирования.Верх И ТекСтрока <= ГраницыОбластиРедактирования.Низ, ИСТИНА, ЛОЖЬ);
	ПерваяКолонка = ТекКолонка = 1;
	КолонкаВсе = ТекКолонка = 3;
	ПерваяСтрока = ТекСтрока = 1;
	ИмяСобытия = ?(ВнутриОбластиСтрок, СтрЗаменить(ДанныеСобытий[ТекСтрока-2].Имя, "_", ":"), "");
	ИмяСвойства = ?(ВнутриОбластиКолонок, СтрЗаменить(ДанныеКолонок[ТекКолонка-3].Имя, "_", ":"), "");
	// Сформируем подсказку для колонки
	Если ПерваяКолонка И ВнутриОбластиСтрок Тогда
		Текст = Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Включить событие") + " ""%1%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в технологический журнал"), ИмяСобытия);
	ИначеЕсли КолонкаВсе И ВнутриОбластиСтрок Тогда
		Текст = Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Включить все свойства для события") + " ""%1%""", ИмяСобытия);
	ИначеЕсли ВнутриОбластиКолонок И (ВнутриОбластиСтрок ИЛИ ПерваяСтрока) Тогда
		Текст = ДанныеКолонок[ТекКолонка-3].Подсказка;
	Иначе
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбрано свойство");
	КонецЕсли;
	Если НРег(ПодсказкаКолонки) <> НРег(Текст) Тогда
		ПодсказкаКолонки = Текст;
	КонецЕсли;
	// Сформируем подсказку для строки
	Если ВнутриОбластиСтрок Тогда
		Текст = ДанныеСобытий[ТекСтрока-2].Подсказка;
	Иначе
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбрано событие");
	КонецЕсли;
	Если НРег(ПодсказкаСобытие) <> НРег(Текст) Тогда
		ПодсказкаСобытие = Текст;
	КонецЕсли;
	// подсветим "заголовки" строк
	Если ТекСтрока <> ТекущаяСтрока Тогда
		Если ВнутриОбластиСтрок Тогда
			РедакторТЖ.Область(ТекСтрока, 2).ЦветФона = ИспользуемыеЦвета.ФонВыделения;
		КонецЕсли;
	КонецЕсли;
	ТекущаяСтрока = ТекСтрока;
	// подсветим "заголовки" столбцов
	Если ТекКолонка <> ТекущаяКолонка Тогда
		Если ВнутриОбластиКолонок Тогда
			РедакторТЖ.Область(1, ТекКолонка).ЦветФона = ИспользуемыеЦвета.ФонВыделения;
		КонецЕсли;
	КонецЕсли;
	ТекущаяКолонка = ТекКолонка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальныйДамп(Команда)
	
	Модифицированность = ИСТИНА;
	ДампТип.ЗаполнитьПометки(ЛОЖЬ);
	ДампТип[0].Пометка = ИСТИНА;
	ДампТип[1].Пометка = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Перем ОбратныйВызов, ФайлТЖ, РезультатВыбора;
	
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		#Если ВебКлиент Тогда
			Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузкаНастроекЗавершение"", Объект); 
			| НачатьПомещениеФайла(ОбратныйВызов, """", ""logcfg.xml"", ИСТИНА, УникальныйИдентификатор); ");
		#Иначе
			ФайлТЖ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ФайлТЖ.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл настройки технологического журнала") + "';sys= ''";
			ФайлТЖ.Фильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл настройки технологического журнала") + " (logcfg.xml)|logcfg.xml|XML-файлы (*.xml)|*.xml|" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все файлы") + " (*.*)|*.*';sys= ''";
			ФайлТЖ.МножественныйВыбор = ЛОЖЬ;
			РезультатВыбора = ФайлТЖ.Выбрать();
			Если РезультатВыбора Тогда
				Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузкаНастроекЗавершение"", Объект); 
				| НачатьПомещениеФайла(ОбратныйВызов, """", ФайлТЖ.ПолноеИмяФайла, ЛОЖЬ, УникальныйИдентификатор); ");
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИменаПредставленияПриИзменении(Элемент)
	
	ОтобразитьЗаголовкиСтрокСтолбцов(ОтображатьИменаПредставления);
	ТекущийЭлемент = Элементы.РедакторТЖ;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗаголовкиСтрокСтолбцов(РежимОтображения)
	
	Перем ШиринаКолонкиСобытия, Событие, ТекстЯчейки, Свойство;
	
	ШиринаКолонкиСобытия = 0;
	// Отобразим заголовки строк
	Для Каждого Событие Из ДанныеСобытий Цикл
		Если РежимОтображения = 1 Тогда
			// Покажем описания
			ТекстЯчейки = Событие.Текст;
		Иначе
			// Покажем имена
			ТекстЯчейки = СтрЗаменить(Событие.Имя, "_", ":");
		КонецЕсли;
		РедакторТЖ.Область(Событие.НомерСтроки, 2).Текст = ТекстЯчейки;
		ШиринаКолонкиСобытия = Макс(ШиринаКолонкиСобытия, Мин(СтрДлина(ТекстЯчейки), 30));
	КонецЦикла;
	
	// Отображим заголовки столбцов
	Для Каждого Свойство Из ДанныеКолонок Цикл
		Если РежимОтображения = 1 Тогда
			// Покажем описания
			ТекстЯчейки = Свойство.Текст;
		Иначе
			// Покажем имена
			ТекстЯчейки = СтрЗаменить(Свойство.Имя, "_", ":");
		КонецЕсли;
		// если текст слишком длинный - разобьем его на несколько строк
		Если СтрДлина(ТекстЯчейки) > 15 Тогда
			// ТекстЯчейки = Лев(ТекстЯчейки, 15) + "...";
			РедакторТЖ.Область(1, Свойство.НомерКолонки).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		КонецЕсли;
		РедакторТЖ.Область(1, Свойство.НомерКолонки).Текст = ТекстЯчейки;
	КонецЦикла;
	// изменим ширину колонки с именами событий
	РедакторТЖ.Область(, 2, , 2).ШиринаКолонки = ШиринаКолонкиСобытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиТЖ(Команда)
	
	Перем ОбратныйВызов, Текст;
	
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		ОбратныйВызов = Неопределено;
		Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ОчиститьНастройкиТЖЗавершение"", Объект); ");
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены в том, что хотите очистить текущие настройки технологического журнала и установить значения по умолчанию?");
		Выполнить(" ПоказатьВопрос(ОбратныйВызов, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиТЖЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// очистим все параметры тех.журнала и установим все по умолчанию
		ОчиститьПараметрыТЖ();
		ПараметрыПоУмолчаниюТЖНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрыТЖ()
	
	ТолькоВыбранныеКолонки = 2;
	Пока ЗаданныеКолонки.Количество() > 0 Цикл
		УстановитьКомбинацию(ЗаданныеКолонки[0].Событие, ?(ПустаяСтрока(ЗаданныеКолонки[0].Колонка), -1, ЗаданныеКолонки[0].Колонка), 0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтрПоКолонке(Команда)
	
	Перем НомерКолонки, НомерСтроки;
	
	Модифицированность = ИСТИНА;
	НомерКолонки = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
	НомерСтроки = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
	УстановитьКомбинацию(НомерСтроки, НомерКолонки, 0);
	УстановитьКомбинацию(НомерСтроки, НомерКолонки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтрПоСтроке(Команда)
	
	Перем НомерСтроки;
	
	Модифицированность = ИСТИНА;
	НомерСтроки = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
	УстановитьКомбинацию(НомерСтроки, -1, 0);
	УстановитьКомбинацию(НомерСтроки, -1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыПоУмолчаниюНаСервере()
	
	// очистим все настройки
	МестоположениеФайла = "";
	
	// дампы памяти (/dump)
	РежимДамп = ЛОЖЬ;
	ДампРасположение = "c:\v83\dumps";
	ДампКопияЭкрана = ЛОЖЬ;
	УстановитьТипДампа("1100000000");
	Элементы.ГруппаДамп.Доступность = РежимДамп;
	
	// контроль памяти /mem
	РежимПамять = ЛОЖЬ;
	
	// утечки (/leaks)
	РежимУтечки = ЛОЖЬ;
	УтечкиКлиент = ЛОЖЬ;
	УтечкиСервер = ЛОЖЬ;
	УтечкиМодули.Очистить();
	УтечкиПроцедуры.Очистить();
	Элементы.ГруппаУтечки.Доступность = РежимУтечки;
	
	// настройки тех.журнала (/log)
	РежимТЖ = ЛОЖЬ;
	ТЖИстория = 168;
	ТЖРасположение = "c:\v83\logs";
	ОчиститьПараметрыТЖ();
	ПараметрыПоУмолчаниюТЖНаСервере();
	Элементы.ПараметрыТЖ.Доступность = РежимТЖ;
	Элементы.РедакторТЖ.Доступность = РежимТЖ;
	Элементы.ПодРедактором.Доступность = РежимТЖ;
	
	// настройки системного лога
	СисТЖИстория = 24;
	ТЖРасположение = ""; // тут должен быть путь к каталогу профиля, а достать его мы не можем
	
	// настройки системных событий
	СистемныеСобытия.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыПоУмолчаниюТЖНаСервере()
	
	Перем Событие, Колонка;
	
	Событие = ДанныеСобытий.НайтиПоИдентификатору(ПолучитьИдентификаторСобытия("all"));
	Колонка = ДанныеКолонок.НайтиПоИдентификатору(ПолучитьИдентификаторКолонки("all"));
	УстановитьКомбинацию(Событие.НомерСтроки, -1, 1);
	УстановитьКомбинацию(Событие.НомерСтроки, Колонка.НомерКолонки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Перем Текст, ОбратныйВызов;
	
	// Если Модифицированность И ОтветПередЗакрытием <> ИСТИНА Тогда
	// 	Отказ = ИСТИНА;
	// 	ОтветПередЗакрытием = Неопределено;
	// 	Текст = Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текущий файл конфигурации технологического журнала изменен.%ПСохранить файл?"));
	// 	ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", Объект);
	// 	ПоказатьВопрос(ОбратныйВызов, Текст, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	// КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	Перем Файл, НовоеИмя;
	
	#Если ВебКлиент Тогда
		ЗаписатьФайлНастроек("logcfg.xml");
		Модифицированность = ЛОЖЬ;
	#Иначе
		Если ПустаяСтрока(МестоположениеФайла) Тогда
			// Если имя не задано - выполним команду "Сохранить как"
			СохранитьКак(Команды.СохранитьКак);
			Возврат;
		КонецЕсли;
		Если НЕ ЗаписьВозможна() Тогда
			Возврат;
		КонецЕсли;
		Файл = Новый Файл(МестоположениеФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(ЛОЖЬ);
			// сделаем копию с расширением .bak
			НовоеИмя = СтрЗаменить(МестоположениеФайла, Файл.Расширение, ".bak");
			// удалим файл резервной копии
			УдалитьФайлы(НовоеИмя);
			// сформируем файл резервной копии

			ПереместитьФайл(МестоположениеФайла, НовоеИмя);
		КонецЕсли; 
		ЗаписатьФайлНастроек(МестоположениеФайла);
		Модифицированность = ЛОЖЬ;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьФайл(Команда)
	
	Перем ОбратныйВызов, Текст;
	
	Если НЕ ПустаяСтрока(МестоположениеФайла) Тогда
		Если НЕ глВерсияПлатформы < 803040000  Тогда
			
			ОбратныйВызов = Неопределено;
			Если Модифицированность Тогда				
				Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ПеречитатьФайлЗавершение"", Объект, МестоположениеФайла); ");
				Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загруженный файл конфигурации изменен.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите заново загрузить текущий файл конфигурации?");
				Выполнить(" ПоказатьВопрос(ОбратныйВызов, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); ");
				
				Возврат;
			КонецЕсли; 
			
			Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузкаНастроекЗавершение"", Объект); 
			|НачатьПомещениеФайла(ОбратныйВызов, , МестоположениеФайла, ЛОЖЬ, УникальныйИдентификатор); ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Перем ОбратныйВызов;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
			Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузкаНастроекЗавершение"", Объект); 
			| НачатьПомещениеФайла(ОбратныйВызов, """", ДополнительныеПараметры, ЛОЖЬ, УникальныйИдентификатор); ");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлКонфигурации(Команда)
	
	Перем АдресХранилища, ТекстФайла, ТекстДокумент;
	
	Если НЕ ЗаписьВозможна() Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = СформироватьФайлНастроекНаСервере();
	ТекстФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
	ТекстДокумент = Новый ТекстовыйДокумент;
	ТекстДокумент.УстановитьТекст(ТекстФайла);
	ТекстДокумент.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл конфигурации технологического журнала"), "");
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьИдентификаторКолонки(Колонка)
	
	Перем ТипПараметры, Результат;
	
	ТипПараметра = ТипЗнч(Колонка);
	Если ТипПараметра = Тип("Строка") Тогда
		Результат = ДанныеКолонок.НайтиСтроки(Новый Структура("Имя", Колонка));
	ИначеЕсли ТипПараметра = Тип("Число") Тогда
		Если Колонка <= 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат = ДанныеКолонок.НайтиСтроки(Новый Структура("НомерКолонки", Колонка));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено ИЛИ Результат.Количество() = 0 Тогда
		Возврат Неопределено; // нет данных по этой колонке
	Иначе
		Возврат Результат[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьИдентификаторСобытия(Строка)
	
	Перем ТипПараметры, Результат;
	
	ТипПараметра = ТипЗнч(Строка);
	Если ТипПараметра = Тип("Строка") Тогда
		Результат = ДанныеСобытий.НайтиСтроки(Новый Структура("Имя", Строка));
	ИначеЕсли ТипПараметра = Тип("Число") Тогда
		Если Строка <= 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат = ДанныеСобытий.НайтиСтроки(Новый Структура("НомерСтроки", Строка));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено ИЛИ Результат.Количество() = 0 Тогда
		Возврат Неопределено; // нет данных по этой колонке
	Иначе
		Возврат Результат[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция   ПолучитьПутьОбщихКонфигурационныхФайлов()
	
	Перем Файл, Текст, СтрокаКонфигурации, Разделитель;
	#Если НЕ ВебКлиент Тогда
		Файл = Новый Файл(КаталогПрограммы()+"conf\conf.cfg");
		Если Файл.Существует() Тогда
			Текст = Новый ЧтениеТекста(файл.ПолноеИмя);
			Пока ИСТИНА Цикл
				СтрокаКонфигурации = Текст.ПрочитатьСтроку();
				Если СтрокаКонфигурации = Неопределено Тогда
					Возврат "";
				КонецЕсли;
				Если ПустаяСтрока(СтрокаКонфигурации) Тогда
					Продолжить;
				КонецЕсли;
				Разделитель = Найти(СтрокаКонфигурации, "=");
				Если Разделитель = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если НРег(Сред(СтрокаКонфигурации, 1, Разделитель-1)) = "conflocation" Тогда
					Возврат Сред(СтрокаКонфигурации, Разделитель+1)+"\";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	#КонецЕсли
	Возврат "";
	
КонецФункции

&НаСервере
Функция   ПолучитьТипДампа()
	
	Перем ТипЧислом, Сч;
	
	ТипЧислом = 0;
	Для Сч=1 По 10 Цикл
		Если ДампТип[Сч-1].Пометка Тогда
			ТипЧислом = ТипЧислом + ДампТип[Сч-1].Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат ТипЧислом;
	
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Отобразим имена или представления
	ОтображатьИменаПредставления = ?(Настройки["ОтображатьИменаПредставления"] = Неопределено, 1, Настройки["ОтображатьИменаПредставления"]);
	ОтобразитьЗаголовкиСтрокСтолбцов(ОтображатьИменаПредставления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем МассивИмен, ОбщийПуть, Путь, ИмяФайла, Файл, ОбратныйВызов;
	
	#Если НЕ ВебКлиент Тогда
		// Включим дополнительные возможности
		ВключитьДополненияТонкогоКлиента();
		// теперь попробуем найти logcfg.xml по некоторым стандартным путям, и если есть - откроем его
		// 1. bin\conf текущего релиза
		// 2. путь, куда указывает содержимое файла bin\conf\conf.cfg текущего релиза
		// Все это только в том случае, Если НЕ веб-клиент. Там кообще нет каталога программы.
		
		ИмяФайла = "logcfg.xml";
		МассивИмен = Новый Массив;
		МассивИмен.Добавить(КаталогПрограммы()+"conf\");
		// если есть файл conf.cfg - получим путь Из него
		ОбщийПуть = ПолучитьПутьОбщихКонфигурационныхФайлов();
		Если НЕ ПустаяСтрока(ОбщийПуть) Тогда
			МассивИмен.Добавить(ОбщийПуть);
		КонецЕсли;
		
		// считываться будет первый по порядку файл
		Для Каждого Путь Из МассивИмен Цикл
			Файл = Новый Файл(Путь+ИмяФайла);
			Если Файл.Существует() Тогда
				Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
					Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""ЗагрузкаНастроекЗавершение"", Объект); 
					| НачатьПомещениеФайла(ОбратныйВызов, """", Файл.ПолноеИмя, ЛОЖЬ, УникальныйИдентификатор); ");	
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ОбъектОбработки, ВесьДокумент, ПолужирныйШрифт, ВерсияПлатформы, ВерсияПлатформыЧислом, СисИнфо, Множители;
	Перем Линия, Данные, Счетчик, Колонка, Имя, Тип, СписокТипа, СписокВыбора, Событие, ПерваяСтрока;
	Перем НомерКолонкиФлага, НомерКолонкиСобытия, НомерКолонкиВсе, ШиринаКолонкиСобытия, Область, НомерСтроки;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
	КонецЕсли;
	
	Множители = Новый Массив;
	Множители.Добавить(10000000); // старшая цифра версии
	Множители.Добавить(100000); // младшая цифра версии
	Множители.Добавить(1000); // номер релиза
	Множители.Добавить(1); // номер сборки
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПлатформыЧислом = 0;
	ВерсияПлатформы = СтрЗаменить(СисИнфо.ВерсияПриложения, ".", Символы.ПС);
	Для Счетчик = 1 По 4 Цикл
		ВерсияПлатформыЧислом = ВерсияПлатформыЧислом + Число(СтрПолучитьСтроку(ВерсияПлатформы, Счетчик))*Множители[Счетчик-1];
	КонецЦикла;
	Если ВерсияПлатформыЧислом < 80303641 Тогда
		ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для работы обработки требуется 1С:Предприятие версии 8.3.3.641 или страше.");
	КонецЕсли;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МетаПуть = ОбъектОбработки.Метаданные().ПолноеИмя();
	
	ГраницыОбластиРедактирования = Новый Структура;
	ГраницыОбластиРедактирования.Вставить("Верх", 2);
	ГраницыОбластиРедактирования.Вставить("Лево", 4);
	ГраницыОбластиРедактирования.Вставить("Право", 0);
	ГраницыОбластиРедактирования.Вставить("Низ", 0);
	
	ИспользуемыеЦвета = Новый Структура;
	ИспользуемыеЦвета.Вставить("ФонВыделения", ЦветаСтиля.ЦветФонаШапкиОтчета);
	ИспользуемыеЦвета.Вставить("ФонОбычный", ЦветаСтиля.ЦветФонаФормы);
	ИспользуемыеЦвета.Вставить("ФонВыбора", ЦветаСтиля.ЦветФонаПоля);
	ИспользуемыеЦвета.Вставить("ФонВсехСвойств", ЦветаСтиля.ЦветФонаКнопки);
	
	// Типы дампа памяти
	ДампТип.Добавить(  1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный сегмент данных"), ИСТИНА);
	ДампТип.Добавить(  2, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Содержимое всей памяти процесса"), ИСТИНА);
	ДампТип.Добавить(  4, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные объектов"), ЛОЖЬ);
	ДампТип.Добавить(  8, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оставить только информацию, необходимую для восстановления стека вызовов"), ЛОЖЬ);
	ДампТип.Добавить( 16, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Если стек содержит ссылки на память модулей, то добавить флаг включения памяти, на которую есть ссылки"), ЛОЖЬ);
	ДампТип.Добавить( 32, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Память из-под выгруженных модулей"), ЛОЖЬ);
	ДампТип.Добавить( 64, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Память, на которую есть ссылки"), ЛОЖЬ);
	ДампТип.Добавить(128, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подробная информация о файлах модулей"), ЛОЖЬ);
	ДампТип.Добавить(256, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Локальные данные потоков"), ЛОЖЬ);
	ДампТип.Добавить(512, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Память Из всего доступного виртуального адресного пространства"), ЛОЖЬ);
	
	// Загрузим таблицу описаний событий
	ЗагрузитьОписанияСобытий();
	
	// Загрузим таблицу описаний колонок
	ЗагрузитьОписанияКолонок();
	
	ВесьДокумент = РедакторТЖ.Область(,,,);
	ВесьДокумент.ЦветФона = ИспользуемыеЦвета.ФонОбычный;
	
	// Сформируем список типов колонок
	ПолужирныйШрифт = Новый Шрифт(, , ИСТИНА);
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	Данные = ОбъектОбработки.ПолучитьМакет("СоставСвойствСобытий");
	ТипыКолонок = Новый Структура;
	Счетчик = 2;
	Для Каждого Колонка Из ДанныеКолонок Цикл
		// получим тип колонки
		Имя = НРег(СокрЛП(Данные.Область(1, Счетчик).Текст));
		Тип = НРег(СокрЛП(Данные.Область(2, Счетчик).Текст));
		Если Колонка.Имя = "all" Тогда
			// здесь все колонки, кроме самой ALL
			СписокТипа = Новый СписокЗначений;
			Для Каждого Колонка2 Из ДанныеКолонок Цикл
				СписокТипа.Добавить(Колонка2.Имя, Колонка2.Текст);
			КонецЦикла;
			ТипыКолонок.Вставить(Имя, СписокТипа);
			Продолжить;
		ИначеЕсли Тип = "nl" Тогда
			// это спец.тип - список всех событий
			СписокТипа = Новый СписокЗначений;
			Для Каждого Событие Из ДанныеСобытий Цикл
				СписокТипа.Добавить(Событие.Имя, Событие.Текст);
			КонецЦикла;
			ТипыКолонок.Вставить(Имя, СписокТипа);
		ИначеЕсли Тип = "s" ИЛИ Тип = "n" ИЛИ Тип = "b" Тогда
			// примитивные типы: строка - S, число - N и булево - b
			ТипыКолонок.Вставить(Имя, Тип);
		Иначе
			// пользовательские типы
			СписокТипа = ЗагрузитьПользовательскийТип(Тип);
			ТипыКолонок.Вставить(Имя, СписокТипа);
			Если Тип = "ll" Тогда
				СписокВыбора = Элементы.СистемныеСобытияУровень.СписокВыбора;
				Для Каждого ЭлементТипа Из СписокТипа Цикл
					// добавим значение в список выбора
					СписокВыбора.Добавить(ЭлементТипа.Значение, ЭлементТипа.Представление);
					// зададим условное оформление для колонки "Уровень" в таблице SYSTEM
					НовыйЭлемент = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
					НовыйЭлемент.Использование = ИСТИНА;
					ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
					ОформляемоеПоле.Использование = ИСТИНА;
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СистемныеСобытияУровень");
					НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементТипа.Представление);
					НовыйОтбор = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СистемныеСобытия.Уровень");
					НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйОтбор.ПравоеЗначение = ЭлементТипа.Значение;
					НовыйОтбор.Использование = ИСТИНА;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	// Сформируем табличный документ по шаблону в макетах
	НомерКолонкиФлага = 1;
	НомерКолонкиСобытия = 2;
	НомерКолонкиВсе = 3;
	ШиринаКолонкиСобытия = 10;
	// Заголовок области выбора событий
	Область = РедакторТЖ.Область(1, НомерКолонкиФлага);
	Область.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбор события");
	Область.Гиперссылка = ЛОЖЬ;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Область.Обвести(Линия, Линия, Линия, Линия);
	// Формируется левая часть таблицы (по строкам)
	НомерСтроки = 2;
	ГраницыОбластиРедактирования.Верх = НомерСтроки;
	Для Каждого Событие Из ДанныеСобытий Цикл
		Событие.НомерСтроки = НомерСтроки;
		// заголовок строки, но текст задается отдельно
		Область = РедакторТЖ.Область(НомерСтроки, НомерКолонкиСобытия);
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
		Область.Обвести(Линия, Линия, Линия, Линия);
		// признак включения/выключения строки
		Область = РедакторТЖ.Область(НомерСтроки, НомерКолонкиФлага);
		Область.Текст = "";
		Область.Гиперссылка = ИСТИНА;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ЦветФона = ИспользуемыеЦвета.ФонВыбора;
		Область.Обвести(Линия, Линия, Линия, Линия);
		// признак "All" для строки
		Область = РедакторТЖ.Область(НомерСтроки, НомерКолонкиВсе);
		Область.Текст = "";
		Область.Гиперссылка = ИСТИНА;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ЦветФона = ИспользуемыеЦвета.ФонВыбора;
		Область.Обвести(Линия, Линия, Линия, Линия);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	ГраницыОбластиРедактирования.Низ = НомерСтроки;
	РедакторТЖ.Область(, НомерКолонкиФлага, , НомерКолонкиФлага).ШиринаКолонки = 3;
	РедакторТЖ.Область(, НомерКолонкиВсе, , НомерКолонкиВсе).ШиринаКолонки = 3;
	ГраницыОбластиРедактирования.Низ = НомерСтроки - 1;
	
	// Формируется шапка колонок
	НомерКолонки = 3;
	Для Каждого Колонка Из ДанныеКолонок Цикл
		Колонка.НомерКолонки = НомерКолонки;
		// зададим заголовок колонки, но сам текст задается отдельно
		Область = РедакторТЖ.Область(1, НомерКолонки);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.Обвести(Линия, Линия, Линия, Линия);
		// установим ширину колонки
		РедакторТЖ.Область(, НомерКолонки, , НомерКолонки).ШиринаКолонки = 4;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	ГраницыОбластиРедактирования.Право = НомерКолонки - 1;
	// Заголовки колонок и строк будут установлены Из обработчика чтения настроек
	
	// Теперь расставим доступные ячейки по матрице параметров
	Для Каждого Событие Из ДанныеСобытий Цикл
		Для Каждого Колонка Из ДанныеКолонок Цикл
			Признак = Данные.Область(Событие.НомерСтроки+1, Колонка.НомерКолонки-2).Текст;
			Если Признак = "+" Тогда
				Область = РедакторТЖ.Область(Событие.НомерСтроки, Колонка.НомерКолонки);
				Область.Текст = "";
				Область.Гиперссылка = ИСТИНА;
				Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				Область.ЦветФона = ИспользуемыеЦвета.ФонВыбора;
				Область.Обвести(Линия, Линия, Линия, Линия);
				Потомок = Колонка.Состав.Добавить();
				Потомок.Имя = Событие.Имя;
				Потомок.Текст = Событие.Текст;
				Потомок.Идентификатор = Событие.ПолучитьИдентификатор();
				Потомок = Событие.Состав.Добавить();
				Потомок.Имя = Колонка.Имя;
				Потомок.Текст = Колонка.Текст;
				Потомок.Идентификатор = Колонка.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Параметры табличного документа
	РедакторТЖ.Область(, 2, , 2).РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.БыстроеИзменение;
	ПерваяСтрока = РедакторТЖ.Область(1, , 1, );
	// ПерваяСтрока.АвтоВысотаСтроки = ИСТИНА;
	ПерваяСтрока.АвтоВысотаСтроки = ЛОЖЬ;
	ПерваяСтрока.ВысотаСтроки = 70;
	ПерваяСтрока.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	ПерваяСтрока.ОриентацияТекста = 90;
	РедакторТЖ.ФиксацияСверху = 1;
	РедакторТЖ.ФиксацияСлева = 3;
	ТекущаяКолонка = -1;
	ТекущаяСтрока = -1;
	// установим дефолтные параметры редактора
	ПараметрыПоУмолчаниюНаСервере();
	ОтображатьИменаПредставления = 1;
	ОтобразитьЗаголовкиСтрокСтолбцов(ОтображатьИменаПредставления);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторТЖВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, ":") > 0 ИЛИ НЕ Область.Гиперссылка Тогда
		Возврат;
	КонецЕсли;
	ОтключитьОбработчикОжидания("ОбработчикОжидания");
	ОбработчикОжидания();
	Модифицированность = ИСТИНА;
	Если ПустаяСтрока(Область.Текст) Тогда
		Если Область.Лево = 1 Тогда
			УстановитьКомбинацию(Область.Верх, -1, 1);
		Иначе
			УстановитьКомбинацию(Область.Верх, -1, 1);
			УстановитьКомбинацию(Область.Верх, Область.Лево, 1);
		КонецЕсли;
	Иначе
		Если Область.Лево = 1 Тогда
			// сбрасываем флажок данного события
			УстановитьКомбинацию(Область.Верх, -1, 0);
		Иначе
			// сбрасываем флажок конкретной комбинации Событие*Колонка
			УстановитьКомбинацию(Область.Верх, Область.Лево, 0);
		КонецЕсли;
	КонецЕсли;
	Если ТолькоВыбранныеКолонки = 2 Тогда
		УстановитьВидимостьКолонок(ТолькоВыбранныеКолонки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторТЖПриАктивизацииОбласти(Элемент)
	
	Перем ТекКолонка, ТекСтрока, ВнутриОбластиКолонок, ВнутриОбластиСтрок, ПерваяКолонка, КолонкаВсе;
	Перем ДоступностьДляКолонок, ДоступностьДляКоманд;
	
	ТекКолонка = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
	ТекСтрока = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
	ВнутриОбластиКолонок = ?(ТекКолонка >= ГраницыОбластиРедактирования.Лево И ТекКолонка <= ГраницыОбластиРедактирования.Право, ИСТИНА, ЛОЖЬ);
	ВнутриОбластиСтрок = ?(ТекСтрока >= ГраницыОбластиРедактирования.Верх И ТекСтрока <= ГраницыОбластиРедактирования.Низ, ИСТИНА, ЛОЖЬ);
	ПерваяКолонка = ТекКолонка = 1;
	КолонкаВсе = ТекКолонка = 3;
	// Установим доступность команд работы с колонками
	ДоступностьДляКолонок = (ВнутриОбластиКолонок ИЛИ КолонкаВсе) И ВнутриОбластиСтрок И РедакторТЖ.Область(ТекСтрока, ТекКолонка).Гиперссылка;
	Если Элементы["РедакторУсловийКолонки"].Доступность <> ДоступностьДляКолонок Тогда
		Элементы["РедакторУсловийКолонки"].Доступность = ДоступностьДляКолонок;
		Элементы["ОчиститьФильтрПоКолонке"].Доступность = ДоступностьДляКолонок;
	КонецЕсли;
	// Установим доступность команд включения/выключения команд, связанных с работой со всей колонкой
	ДоступностьДляКоманд = ВнутриОбластиКолонок И ВнутриОбластиСтрок;
	Если Элементы["ВключитьСобытияПоКолонке"].Доступность <> ДоступностьДляКоманд Тогда
		Элементы["ВключитьСобытияПоКолонке"].Доступность = ДоступностьДляКоманд;
		Элементы["ВыключитьСобытияПоКолонке"].Доступность = ДоступностьДляКоманд;
	КонецЕсли;
	// Установим доступность команд работы с событиями
	Если Элементы["РедакторУсловийСобытий"].Доступность <> ВнутриОбластиСтрок Тогда
		Элементы["РедакторУсловийСобытий"].Доступность = ВнутриОбластиСтрок;
		Элементы["ОчиститьФильтрПоСтроке"].Доступность = ВнутриОбластиСтрок;
	КонецЕсли;
	// Отключим подсветку заголовков
	Если ТекСтрока <> ТекущаяСтрока И (ТекущаяСтрока >= ГраницыОбластиРедактирования.Верх И ТекущаяСтрока <= ГраницыОбластиРедактирования.Низ) Тогда
		РедакторТЖ.Область(ТекущаяСтрока, 2).ЦветФона = ИспользуемыеЦвета.ФонОбычный;
	КонецЕсли;
	Если ТекКолонка <> ТекущаяКолонка И (ТекущаяКолонка >= ГраницыОбластиРедактирования.Лево И ТекущаяКолонка <= ГраницыОбластиРедактирования.Право) Тогда
		РедакторТЖ.Область(1, ТекущаяКолонка).ЦветФона = ИспользуемыеЦвета.ФонОбычный;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработчикОжидания", 0.2, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторУсловийКолонки(Команда)
	
	Перем ОписаниеКолонки, ОписаниеСтроки, Условия, ПараметрыФормы, ОбратныйВызов;
	
	ОписаниеКолонки = ДанныеКолонок.НайтиПоИдентификатору(ПолучитьИдентификаторКолонки(Элементы.РедакторТЖ.ТекущаяОбласть.Лево));
	ОписаниеСтроки = ДанныеСобытий.НайтиПоИдентификатору(ПолучитьИдентификаторСобытия(Элементы.РедакторТЖ.ТекущаяОбласть.Верх));
	Условия = УсловияКолонок.НайтиСтроки(Новый Структура("Событие, ВедущаяКолонка", ОписаниеСтроки.Имя, ОписаниеКолонки.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Событие", ОписаниеСтроки.Имя);
	ПараметрыФормы.Вставить("Колонка", ОписаниеКолонки.Имя);
	ПараметрыФормы.Вставить("СписокКолонок", СобратьКолонкиСобытияСЗ(ОписаниеСтроки.Имя));
	ПараметрыФормы.Вставить("СписокТипов", ТипыКолонок);
	ПараметрыФормы.Вставить("ВсеУсловия", УсловияКолонок);
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""РедакторУсловийКолонкиЗавершение"", Объект); 
		| ОткрытьФорму(МетаПуть + "".Форма.РедакторУсловийКолонки"", ПараметрыФормы, , , , , ОбратныйВызов); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторУсловийКолонкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Перем ОписаниеКолонки, ОписаниеСтроки, ЕстьУсловия, СтрокаДанных;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Модифицированность = ИСТИНА;
		ОписаниеКолонки = ДанныеКолонок.НайтиПоИдентификатору(ПолучитьИдентификаторКолонки(Элементы.РедакторТЖ.ТекущаяОбласть.Лево));
		ОписаниеСтроки = ДанныеСобытий.НайтиПоИдентификатору(ПолучитьИдентификаторСобытия(Элементы.РедакторТЖ.ТекущаяОбласть.Верх));
		// теперь надо удалить Из списка условий те условия, что были до начала редактирования,
		// а потом добавим те, что сделаны в диалоге
		УстановитьКомбинацию(ОписаниеСтроки.НомерСтроки, ОписаниеКолонки.НомерКолонки, 0);
		ЕстьУсловия = Результат.Количество() <> 0;
		Для Каждого Условие Из Результат Цикл
			СтрокаДанных = УсловияКолонок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, Условие);
		КонецЦикла;
		Если ЕстьУсловия Тогда
			УстановитьКомбинацию(ОписаниеСтроки.НомерСтроки, ОписаниеКолонки.НомерКолонки, 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторУсловийСобытия(Команда)
	
	Перем ОписаниеСобытия, УсловияСобытия, ПараметрыФормы, ОбратныйВызов;
	
	ОписаниеСобытия = ДанныеСобытий.НайтиПоИдентификатору(ПолучитьИдентификаторСобытия(Элементы.РедакторТЖ.ТекущаяОбласть.Верх));
	УсловияСобытия = УсловияСобытий.НайтиСтроки(Новый Структура("Событие", ОписаниеСобытия.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Событие", ОписаниеСобытия.Имя);
	ПараметрыФормы.Вставить("СписокКолонок", СобратьКолонкиСобытияСЗ(ОписаниеСобытия.Имя));
	ПараметрыФормы.Вставить("СписокТипов", ТипыКолонок);
	ПараметрыФормы.Вставить("ВсеУсловия", УсловияСобытий);
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""РедакторУсловийСобытияЗавершение"", Объект); 
		| ОткрытьФорму(МетаПуть + "".Форма.РедакторУсловийСобытия"", ПараметрыФормы, , , , , ОбратныйВызов); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторУсловийСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Перем ОписаниеСобытия, ЕстьУсловия, Условие, СтрокаДанных;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Модифицированность = ИСТИНА;
		ОписаниеСобытия = ДанныеСобытий.НайтиПоИдентификатору(ПолучитьИдентификаторСобытия(Элементы.РедакторТЖ.ТекущаяОбласть.Верх));
		// теперь надо удалить Из списка условий те условия, что были до начала редактирования,
		// а потом добавим те, что сделаны в диалоге
		УстановитьКомбинацию(ОписаниеСобытия.НомерСтроки, -1, 0);
		ЕстьУсловия = Результат.Количество() <> 0;
		Для Каждого Условие Из Результат Цикл
			СтрокаДанных = УсловияСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, Условие);
		КонецЦикла;
		// Установим галочку, если она еще не стоит, и задали условия
		Если ЕстьУсловия Тогда
			УстановитьКомбинацию(ОписаниеСобытия.НомерСтроки, -1, 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимТЖПриИзменении(Элемент)
	
	Элементы.ПараметрыТЖ.Доступность = РежимТЖ;
	Элементы.РедакторТЖ.Доступность = РежимТЖ;
	Элементы.ПараметрыОтображения.Доступность = РежимТЖ;
	Элементы.ПодРедактором.Доступность = РежимТЖ;
	
	Если РежимТЖ И ПустаяСтрока(ТЖРасположение) Тогда
		ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения технологического журнала"), ТЖРасположение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиСисТЖ(Команда)
	
	СисТЖРасположение = "";
	СисТЖИстория = 24;
	Модифицированность = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура СисТЖРасположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения файлов системного технологического журнала"), СисТЖРасположение);
	
КонецПроцедуры

&НаСервере
Функция   СобратьКолонкиСобытия(ИмяСобытия)
	
	Перем Результат;
	
	Результат = ДанныеСобытий.НайтиСтроки(Новый Структура("Имя", НРег(ИмяСобытия)));
	Возврат Результат[0].Состав;
	
КонецФункции

&НаСервере
Функция   СобратьКолонкиСобытияСЗ(ИмяСобытия)
	
	Перем Результат, Список;
	
	Результат = ДанныеСобытий.НайтиСтроки(Новый Структура("Имя", НРег(ИмяСобытия)));
	Список = Новый СписокЗначений;
	Для Каждого Элемент Из Результат[0].Состав Цикл
		Список.Добавить(Элемент.Имя, Элемент.Текст);
	КонецЦикла;
	Возврат Список;
	
КонецФункции

&НаСервере
Функция   СобратьСобытияКолонки(ИмяКолонки)
	
	Перем Результат;
	
	Результат = ДанныеКолонок.НайтиСтроки(Новый Структура("Имя", НРег(ИмяКолонки)));
	Возврат Результат[0].Состав;
	
КонецФункции

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Перем ДиалогВыбора, Результат, ОбратныйВызов, Файл, Текст, ТекстТолькоЧтение;
	
	Если НЕ ЗаписьВозможна() Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог и имя сохраняемого файла") + "';sys= ''";
	ДиалогВыбора.ПолноеИмяФайла = "logcfg.xml";
	ДиалогВыбора.Фильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("XML-файл") + " (*.xml)|*.xml|" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все файлы") + " (*.*)|*.*';sys= ''";
	Результат = ДиалогВыбора.Выбрать();
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		
		ОбратныйВызов = Неопределено;
		Выполнить(" ОбратныйВызов = Новый ОписаниеОповещения(""СохранитьКакЗавершение"", Объект, ДиалогВыбора.ПолноеИмяФайла); ");
		Файл = Новый Файл(ДиалогВыбора.ПолноеИмяФайла);
		Если Файл.Существует() Тогда
			Если Файл.ПолучитьТолькоЧтение() Тогда
				ТекстТолькоЧтение = " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("и для него установлен режим 'Только чтение'");
			Иначе
				ТекстТолькоЧтение = "";
			КонецЕсли;
			Текст = Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В выбранном каталоге уже есть файл") + " ""%1%""%2%.%" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перезаписать") + "?';sys= ''", Файл.Имя, ТекстТолькоЧтение);
			Выполнить(" ПоказатьВопрос(ОбратныйВызов, Текст, РежимДиалогаВопрос.ОКОтмена); ");
		Иначе
			Выполнить(" ВыполнитьОбработкуОповещения(ОбратныйВызов, КодВозвратаДиалога.ОК); ");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЗавершение(Результат, ИмяФайла) Экспорт
	
	Перем Файл;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(ЛОЖЬ);
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		ЗаписатьФайлНастроек(ИмяФайла);
		Модифицированность = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	
	Перем АдресХранилища, ТекстФайла, ПараметрыФормы;
	#Если НЕ ВебКлиент Тогда	
		Если НЕ ЗаписьВозможна() Тогда
			Возврат;
		КонецЕсли;
		АдресХранилища = СформироватьФайлНастроекНаСервере();
		ТекстФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПутьКШаблонам", ПолучитьПутьОбщихКонфигурационныхФайлов());
		ПараметрыФормы.Вставить("ФайлКонфигурации", ТекстФайла);
		ОткрытьФорму(МетаПуть + ".Форма.СохранениеШаблона", ПараметрыФормы);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция   СформироватьФайлНастроекНаСервере()
	
	Перем Документ, ПерекодировкаУсловий;
	Перем События, Событие, Эвент, Условия, Условие, Все, Колонка, БезУсловий, СУсловиями, Свойство;
	Перем Установка, УзелВсе, Результаты, Элемент, СисСобытие, Писатель, Записать, Адрес;
	
	Документ = Новый ДокументDOM("http://v8.1c.ru/v8/tech-log", "config");
	
	Если РежимДамп Тогда
		Элемент = ДобавитьУзелВКоллекцию(Документ, Документ.ПервыйДочерний, "dump");
		Элемент.УстановитьАтрибут("create", XMLСтрока(ИСТИНА));
		Элемент.УстановитьАтрибут("location", XMLСтрока(ДампРасположение));
		Элемент.УстановитьАтрибут("type", XMLСтрока(ПолучитьТипДампа()));
		Элемент.УстановитьАтрибут("prntscrn", XMLСтрока(ДампКопияЭкрана));
	Иначе
		ДобавитьУзелСАтрибутами(Документ, Документ.ПервыйДочерний, "dump", Новый Структура("create", ЛОЖЬ));
	КонецЕсли;
	
	Если РежимПамять Тогда
		ДобавитьУзелВКоллекцию(Документ, Документ.ПервыйДочерний, "mem");
	КонецЕсли;
	
	Если РежимПланЗапроса Тогда
		ДобавитьУзелВКоллекцию(Документ, Документ.ПервыйДочерний, "plansql");
	КонецЕсли;
	
	Если РежимУтечки Тогда
		Утечки = ДобавитьУзелСАтрибутами(Документ, Документ.ПервыйДочерний, "leaks", Новый Структура("collect", ИСТИНА));
		Если УтечкиКлиент Тогда
			ДобавитьУзелСАтрибутами(Документ, Утечки, "point", Новый Структура("call", "client"));
		КонецЕсли;
		Если УтечкиСервер Тогда
			ДобавитьУзелСАтрибутами(Документ, Утечки, "point", Новый Структура("call", "server"));
		КонецЕсли;
		Для Каждого Утечка Из УтечкиМодули Цикл
			ДобавитьУзелСАтрибутами(Документ, Утечки, "point", Новый Структура("proc", Утечка.Модуль));
		КонецЦикла;
		Для Каждого Утечка Из УтечкиПроцедуры Цикл
			ДобавитьУзелСАтрибутами(Документ, Утечки, "point", Новый Структура("on, off", Утечка.Строка1, Утечка.Строка2));
		КонецЦикла;
	КонецЕсли;
	
	Если РежимТЖ Тогда
		ПерекодировкаУсловий = Новый Соответствие;
		ПерекодировкаУсловий.Вставить("=", "eq");
		ПерекодировкаУсловий.Вставить("<>", "ne");
		ПерекодировкаУсловий.Вставить(">", "gt");
		ПерекодировкаУсловий.Вставить(">=", "ge");
		ПерекодировкаУсловий.Вставить("<", "lt");
		ПерекодировкаУсловий.Вставить("<=", "le");
		ПерекодировкаУсловий.Вставить("like", "like");
		ТЖ = ДобавитьУзелСАтрибутами(Документ, Документ.ПервыйДочерний, "log", Новый Структура("location,history", ТЖРасположение, ТЖИстория));
		// // #ОбластьSTEP1 // 1. Добавим выбранные события
		ЗаданныеКолонки.Сортировать("Событие Возр");
		События = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка", ""));
		Для Каждого Событие Из События Цикл
			Эвент = ДобавитьУзелВКоллекцию(Документ, ТЖ, "event");
			Условия = УсловияСобытий.НайтиСтроки(Новый Структура("Событие", Событие.Событие));
			Если Событие.Событие = "all" Тогда
				// это событие все события - условие "ne", а не "eq", значение - пустая строка
				// и если есть условия - не нужно добавлять само событие
				Если Условия.Количество() = 0 Тогда
					ДобавитьУзелСАтрибутами(Документ, Эвент, "ne", Новый Структура("property,value","name",""));
				КонецЕсли;
			Иначе
				// это обычное событие
				ДобавитьУзелСАтрибутами(Документ, Эвент, "eq", Новый Структура("property,value","name",Событие.Событие));
			КонецЕсли;
			// теперь добавим условия для события
			Для Каждого Условие Из Условия Цикл
				ДобавитьУзелСАтрибутами(Документ, Эвент, ПерекодировкаУсловий[Условие.Условие],
				Новый Структура("property,value", СтрЗаменить(Условие.Колонка, "_", ":"), Условие.Значение));
			КонецЦикла;
		КонецЦикла; 
		// #КонецОбласти
		// #ОбластьSTEP2 // 2. Cоздадим элемент <property name="all"/>
		Все = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка,Событие", "all", "all"));
		Если Все.Количество() = 1 Тогда
			ДобавитьУзелСАтрибутами(Документ, ТЖ, "property", Новый Структура("name", "all"));
		КонецЕсли;
		// #КонецОбласти
		// #ОбластьSTEP3 // 3. Добавим отмеченные колонки, при этом условия отмечаем по-разному и не забываем, что требуется специальная обработка для строки "Все события"
		ЗаданныеКолонки.Сортировать("Колонка Возр");
		Для Каждого Колонка Из ДанныеКолонок Цикл
			Если Колонка.Имя = "all" Тогда
				// "all" - это спец. колонка, ее обработаем в самом конце
				Продолжить;
			КонецЕсли;
			// Попробуем найти текущую колонку
			БезУсловий = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка,Состояние", Колонка.Имя, 1));
			СУсловиями = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка,Состояние", Колонка.Имя, 3));
			Свойство = Неопределено;
			// 3.1. Записываем все колонки без условий
			Если БезУсловий.Количество() > 0 Тогда
				// <property name="Свойство"
				Свойство = ДобавитьУзелСАтрибутами(Документ, ТЖ, "property", Новый Структура("name", СтрЗаменить(Колонка.Имя, "_", ":")));
				Для Каждого Установка Из БезУсловий Цикл
					Если Установка.Событие = "all" И БезУсловий.Количество() = 1 Тогда
						// есть только одна отметка в строке "all" и больше ничего
						Продолжить;
					ИначеЕсли Установка.Событие = "all" И (БезУсловий.Количество() > 1 ИЛИ СУсловиями.Количество() <> 0) Тогда
						// есть только отметка в строке "all" и отметки в других событиях для этой колонки
						// <event>
						//  <ne property="name" value=""/>
						// </event>
						Эвент = ДобавитьУзелВКоллекцию(Документ, Свойство, "event");
						ДобавитьУзелСАтрибутами(Документ, Эвент, "ne", Новый Структура("property,value", "name", ""));
					Иначе
						// есть отметки в любых событиях, кроме события "all"
						// <event>
						//  <eq property="name" value="Событие"/>
						// </event>
						Эвент = ДобавитьУзелВКоллекцию(Документ, Свойство, "event");
						ДобавитьУзелСАтрибутами(Документ, Эвент, "eq", Новый Структура("property,value", "name", Установка.Событие));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// 3.2. Записываем все колонки с условиями
			Если СУсловиями.Количество() > 0 Тогда
				Если Свойство = Неопределено Тогда
					// элемент со свойством уже задан ранее, где свойство было указано без условий
					//  <property name="Свойство"
					Свойство = ДобавитьУзелСАтрибутами(Документ, ТЖ, "property", Новый Структура("name", СтрЗаменить(Колонка.Имя, "_", ":")));
				КонецЕсли;
				Для Каждого Установка Из СУсловиями Цикл
					Условия = УсловияКолонок.НайтиСтроки(Новый Структура("ВедущаяКолонка, Событие", Установка.Колонка, Установка.Событие));
					// <event>
					Эвент = ДобавитьУзелВКоллекцию(Документ, Свойство, "event");
					Если Установка.Событие = "all" И Установка.Состояние = 1 Тогда
						// это просто отмеченная ячейка
						// <ne property="name" value=""/>
						ДобавитьУзелСАтрибутами(Документ, Эвент, "ne", Новый Структура("property,value", "name", ""));
					ИначеЕсли Установка.Событие = "all" И Установка.Состояние = 3 Тогда
						// это колонка в событии "all" с условием
						// нужно записать условия без имени свойства "all"
						// т.е. ничего не далем
					Иначе
						// просто вставляем имя события, для которого будут дальнейшие условия
						// <eq property="name" value="ИмяСобытия"/>
						ДобавитьУзелСАтрибутами(Документ, Эвент, "eq", Новый Структура("property,value", "name", Установка.Событие));
					КонецЕсли;
					Для Каждого Условие Из Условия Цикл
						// <Условие property="Свойство" value="Значение"/>
						ДобавитьУзелСАтрибутами(Документ, Эвент, ПерекодировкаУсловий[Условие.Условие],
						Новый Структура("property,value", СтрЗаменить(Условие.Колонка, "_", ":"), Условие.Значение));
					КонецЦикла; 
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		// #КонецОбласти
		// #ОбластьSTEP4 // 4. Обрабатываем колонку "all"
		УзелВсе = Неопределено;
		Результаты = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Колонка", "all"));
		Для Каждого Условие Из Результаты Цикл
			Если Условие.Колонка = "all" И Условие.Событие = "all" И Условие.Состояние = 1 Тогда
				Продолжить;
			КонецЕсли;
			Если УзелВсе = Неопределено Тогда
				// <property name="all"/>
				УзелВсе = ДобавитьУзелСАтрибутами(Документ, ТЖ, "property", Новый Структура("name", "all"));
			КонецЕсли;
			Условия = УсловияКолонок.НайтиСтроки(Новый Структура("ВедущаяКолонка, Событие", "all", Условие.Событие));
			// <event>
			//  <eq property="name" value="Событие"/>
			// </event>
			Эвент = ДобавитьУзелВКоллекцию(Документ, УзелВсе, "event");
			Если Условие.Событие <> "all" Тогда
				ДобавитьУзелСАтрибутами(Документ, Эвент, "eq", Новый Структура("property,value", "name", Условие.Событие));
			КонецЕсли;
			Для Каждого Условие Из Условия Цикл
				// <Условие property="Свойство" value="Значение"/>
				ДобавитьУзелСАтрибутами(Документ, Эвент, ПерекодировкаУсловий[Условие.Условие],
				Новый Структура("property, value", СтрЗаменить(Условие.Колонка, "_", ":"), Условие.Значение));
			КонецЦикла; 
		КонецЦикла;
		// #КонецОбласти		
	КонецЕсли;
	// #КонецОбласти
	
	// #Область_SYSTEM // Характеристики системного журнала
	Если НЕ (ПустаяСтрока(СисТЖРасположение) И СисТЖИстория = 24) Тогда
		Элемент = ДобавитьУзелВКоллекцию(Документ, Документ.ПервыйДочерний, "defaultlog");
		Если НЕ ПустаяСтрока(СисТЖРасположение) Тогда
			Элемент.УстановитьАтрибут("location", XMLСтрока(СисТЖРасположение));
		КонецЕсли;
		Если СисТЖИстория <> 24 Тогда
			Элемент.УстановитьАтрибут("history", XMLСтрока(СисТЖИстория));
		КонецЕсли;
	КонецЕсли;
	// #КонецОбласти	
	
	// #Область_DEFAULTLOG // Характеристики системных событий
	Если СистемныеСобытия.Количество() Тогда
		Для Каждого СисСобытие Из СистемныеСобытия Цикл
			Если ПустаяСтрока(СисСобытие.Уровень) Тогда
				// строку с пустым уровнем события - пропускаем. Но такого быть не должно
				Продолжить;
			КонецЕсли;
			Элемент = ДобавитьУзелВКоллекцию(Документ, Документ.ПервыйДочерний, "system");
			Элемент.УстановитьАтрибут("level", XMLСтрока(СисСобытие.Уровень));
			Если НЕ ПустаяСтрока(СисСобытие.Компонент) Тогда
				Элемент.УстановитьАтрибут("component", XMLСтрока(СисСобытие.Компонент));
			КонецЕсли;
			Если НЕ ПустаяСтрока(СисСобытие.Класс) Тогда
				Элемент.УстановитьАтрибут("class", XMLСтрока(СисСобытие.Класс));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// #КонецОбласти
	
	// Вернем сформированный документ на клиент через текстовую строку во временном хранилище
	Писатель = Новый ЗаписьXML();
	Писатель.УстановитьСтроку(Новый ПараметрыЗаписиXML("UTF-8", , ИСТИНА, ЛОЖЬ, " "));
	Записать = Новый ЗаписьDOM();
	Записать.Записать(Документ, Писатель);
	Адрес = ПоместитьВоВременноеХранилище(Писатель.Закрыть());
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ТЖРасположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог размещения файлов технологического журнала"), ТЖРасположение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеКолонкиПриИзменении(Элемент)
	
	УстановитьВидимостьКолонок(ТолькоВыбранныеКолонки);
	ТекущийЭлемент = Элементы.РедакторТЖ;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеСобытияПриИзменении(Элемент)
	
	УстановитьВидимостьСтрок(ТолькоВыбранныеСобытия);
	ТекущийЭлемент = Элементы.РедакторТЖ;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКомбинацию(ИмяСобытия, ИмяКолонки)
	
	Перем Результат;
	
	Результат = ЗаданныеКолонки.НайтиСтроки(Новый Структура("Событие, Колонка", ИмяСобытия, ИмяКолонки));
	Для Каждого Комбинация Из Результат Цикл
		ЗаданныеКолонки.Удалить(Комбинация);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонок(РежимВидимости)
	
	Перем ВидимаяКолонка, ВерхняяГраница, ЛеваяГраница, Колонка, ВидимыеКолонки;
	
	Если РежимВидимости = 0 Тогда
		// показать все колонки
		Для Каждого Колонка Из ДанныеКолонок Цикл
			Если Колонка.Имя = "all" Тогда
				Продолжить;
			КонецЕсли;
			РедакторТЖ.Область(, Колонка.НомерКолонки, , Колонка.НомерКолонки).Видимость = ИСТИНА;
		КонецЦикла;
	ИначеЕсли РежимВидимости = 1 Тогда
		// по этим координатам установим область после завершения скрытия колонок
		ВидимаяКолонка = 3;
		// показать все отмеченные колонки
		ВерхняяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
		ЛеваяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
		Для Каждого Колонка Из ДанныеКолонок Цикл
			Если Колонка.Имя = "all" Тогда
				Продолжить;
			КонецЕсли;
			Оставить = ЛОЖЬ;
			Для Каждого Событие Из ДанныеСобытий Цикл
				Если РедакторТЖ.Область(Событие.НомерСтроки, Колонка.НомерКолонки).Текст = "V" Тогда
					Оставить = ИСТИНА;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Колонка.НомерКолонки <= ЛеваяГраница Тогда
				ВидимаяКолонка = ?(Оставить, Колонка.НомерКолонки, ВидимаяКолонка);
			КонецЕсли;
			РедакторТЖ.Область(, Колонка.НомерКолонки, , Колонка.НомерКолонки).Видимость = Оставить;
		КонецЦикла;
		Элементы.РедакторТЖ.ТекущаяОбласть = РедакторТЖ.Область(ВерхняяГраница, ВидимаяКолонка);
	ИначеЕсли РежимВидимости = 2 Тогда
		// показать все колонки для отмеченных событий и скрыть все остальные
		// здесь будем собирать те колонки, которые надо будет оставить
		ВидимаяКолонка = 1;
		ВидимыеКолонки = Новый Массив;
		Для Каждого Событие Из ДанныеСобытий Цикл
			Если РедакторТЖ.Область(Событие.НомерСтроки, 1).Текст = "V" Тогда
				Колонки = СобратьКолонкиСобытия(Событие.Имя);
				Для Каждого Колонка Из Колонки Цикл
					Если ВидимыеКолонки.Найти(Колонка.Имя) = Неопределено Тогда
						ВидимыеКолонки.Добавить(Колонка.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		// теперь для собранных колонок включим видимость, а остальные - выключим
		ВерхняяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
		ЛеваяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
		Для Каждого Колонка Из ДанныеКолонок Цикл
			Если Колонка.Имя = "all" Тогда
				Видимость = ИСТИНА;
			Иначе
				Видимость = ?(ВидимыеКолонки.Найти(Колонка.Имя) = Неопределено, ЛОЖЬ, ИСТИНА);
			КонецЕсли;
			РедакторТЖ.Область(, Колонка.НомерКолонки, , Колонка.НомерКолонки).Видимость = Видимость;
			Если Колонка.НомерКолонки <= ЛеваяГраница Тогда
				ВидимаяКолонка = ?(Видимость, Колонка.НомерКолонки, ВидимаяКолонка);
			КонецЕсли;
		КонецЦикла;
		Элементы.РедакторТЖ.ТекущаяОбласть = РедакторТЖ.Область(ВерхняяГраница, ВидимаяКолонка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтрок(РежимВидимости)
	
	Перем ЛеваяГраница, ВерхняяГраница, ВидимаяСтрока, Событие;
	
	// Покажем все события или спрячем те события, которые выключены
	ЛеваяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Лево;
	ВерхняяГраница = Элементы.РедакторТЖ.ТекущаяОбласть.Верх;
	ВидимаяСтрока = 1;
	Для Каждого Событие Из ДанныеСобытий Цикл
		Если РедакторТЖ.Область(Событие.НомерСтроки, 1).Текст <> "V" И ЗаданныеКолонки.НайтиСтроки(Новый Структура("Событие", Событие.Имя)).Количество() = 0 Тогда
			РедакторТЖ.Область(Событие.НомерСтроки, , Событие.НомерСтроки, ).Видимость = НЕ РежимВидимости;
		Иначе
			Если Событие.НомерСтроки <= ВерхняяГраница Тогда
				ВидимаяСтрока = Событие.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Элементы.РедакторТЖ.ТекущаяОбласть = РедакторТЖ.Область(ВидимаяСтрока, ЛеваяГраница);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомбинацию(Знач НомерСтроки, Знач НомерКолонки, Состояние)
	
	Перем ПростойШрифт, ПолужирныйШрифт, ИдСтроки, События, Событие, ИдКолонки, Колонка;
	Перем Область, Условия, Условие, Список, Комбинация;
	
	ПростойШрифт = Новый Шрифт( , , ЛОЖЬ);
	ПолужирныйШрифт = Новый Шрифт( , , ИСТИНА);
	ИдСтроки = ПолучитьИдентификаторСобытия(НомерСтроки);
	Если ИдСтроки <> Неопределено Тогда
		Событие = ДанныеСобытий.НайтиПоИдентификатору(ИдСтроки);
		НомерСтроки = Событие.НомерСтроки;
	КонецЕсли;
	ИдКолонки = ПолучитьИдентификаторКолонки(НомерКолонки);
	Если ИдКолонки <> Неопределено Тогда
		Колонка = ДанныеКолонок.НайтиПоИдентификатору(ИдКолонки);
		НомерКолонки = Колонка.НомерКолонки;
	КонецЕсли;
	// Конкретная пара Событие*Колонка
	Если НомерСтроки > 0 И НомерКолонки > 0 Тогда
		УдалитьКомбинацию(Событие.Имя, Колонка.Имя);
		Область = РедакторТЖ.Область(Событие.НомерСтроки, Колонка.НомерКолонки);
		Если Состояние = 0 Тогда
			Область.Текст = "";
			Область.Шрифт = ПростойШрифт;
			Условия = УсловияКолонок.НайтиСтроки(Новый Структура("Событие, ВедущаяКолонка", Событие.Имя, Колонка.Имя));
			Для Каждого Условие Из Условия Цикл
				УсловияКолонок.Удалить(Условие);
			КонецЦикла;
		ИначеЕсли Состояние = 1 Тогда
			Область.Текст = "V";
		ИначеЕсли Состояние = 2 ИЛИ Состояние = 3 Тогда
			Область.Текст = "V";
			Область.Шрифт = ПолужирныйШрифт;
		КонецЕсли;
		// для колонки "all" отметим (или снимем отметку), что выбраны все свойства
		Если Колонка.Имя = "all" Тогда
			Список = СобратьКолонкиСобытия(Событие.Имя);
			Для Каждого Элемент Из Список Цикл
				ИзмКолонка = ДанныеКолонок.НайтиПоИдентификатору(Элемент.Идентификатор);
				Область = РедакторТЖ.Область(Событие.НомерСтроки, ИзмКолонка.НомерКолонки);
				Если Состояние = 0 Тогда
					Область.ЦветФона = ИспользуемыеЦвета.ФонВыбора;
				Иначе
					Область.ЦветФона = ИспользуемыеЦвета.ФонВсехСвойств;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Состояние <> 0 Тогда
			Комбинация = ЗаданныеКолонки.Добавить();
			Комбинация.Событие = Событие.Имя;
			Комбинация.Колонка = Колонка.Имя;
			Комбинация.Состояние = Состояние;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Самая первая колонка события (которая определяет видимость самого события)
	Если НомерСтроки > 0 И НомерКолонки = -1 Тогда
		УдалитьКомбинацию(Событие.Имя, "");
		Область = РедакторТЖ.Область(Событие.НомерСтроки, 1);
		Если Состояние = 0 Тогда
			Область.Текст = "";
			Область.Шрифт = ПростойШрифт;
			// удалим все условия для выбранного события
			Условия = УсловияСобытий.НайтиСтроки(Новый Структура("Событие", Событие.Имя));
			Для Каждого Условие Из Условия Цикл
				УсловияСобытий.Удалить(Условие);
			КонецЦикла;
		ИначеЕсли Состояние = 1 Тогда
			Область.Текст = "V";
		ИначеЕсли Состояние = 2 Тогда
			Область.Текст = "V";
			Область.Шрифт = ПолужирныйШрифт;
		ИначеЕсли Состояние = 3 Тогда
			ВызватьИсключение Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неверный параметр вызова метода: %1%"), Состояние);
		КонецЕсли;
		Если Состояние <> 0 Тогда
			Комбинация = ЗаданныеКолонки.Добавить();
			Комбинация.Событие = Событие.Имя;
			Комбинация.Колонка = "";
			Комбинация.Состояние = Состояние;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Все колонки конкретного события - здесь отрабатывается только выключение всех колонок события
	// обрабатывается только событие выключения - это нужно когда включается колонка "all"
	Если НомерСтроки > 0 И НомерКолонки = 0 Тогда
		// обработаем все колонки события
		Если Состояние = 0 Тогда
			Список = РеквизитФормыВЗначение("ДанныеСобытий");
			Результат = Список.НайтиСтроки(Новый Структура("Имя", Событие.Имя));
			Для Каждого ЭлементСостава Из Результат[0].Состав Цикл
				Колонка = ДанныеКолонок.НайтиПоИдентификатору(ЭлементСостава.Идентификатор);
				УстановитьКомбинацию(НомерСтроки, Колонка.НомерКолонки, 0);
			КонецЦикла; 
		Иначе
			ВызватьИсключение Форматировать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неверный параметр вызова метода: %1%"), Состояние);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НомерСтроки > 0 И НомерКолонки = -2 Тогда
		// Колонка "all", которая отвечает за свойство <property="all"/>
		ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка режма: НомерСтроки > 0 И НомерКолонки = -2");
		Возврат;
	КонецЕсли;
	
	// Все события конкретной колонки
	Если НомерСтроки = 0 И НомерКолонки > 0 Тогда
		События = СобратьСобытияКолонки(Колонка.Имя);
		Для Каждого Событие Из События Цикл
			УстановитьКомбинацию(ДанныеСобытий.НайтиПоИдентификатору(Событие.Идентификатор).НомерСтроки, Колонка.НомерКолонки, Состояние);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Все события вообще - отдельная обработка
	Если НомерСтроки = -1 И НомерКолонки = -1 Тогда
		ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка режма: НомерСтроки = -1 И НомерКолонки = -1");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДампа(ФлагиДампа = "1100000000")
	
	Перем ДлинаФлагов, Сч, Флаг;
	
	ДлинаФлагов = СтрДлина(ФлагиДампа);
	Для Сч=1 По 10 Цикл
		Если Сч > ДлинаФлагов Тогда
			Флаг = ЛОЖЬ;
		Иначе
			Флаг = Булево(Число(Сред(ФлагиДампа, Сч, 1)));
		КонецЕсли;
		ДампТип[Сч-1].Пометка = Флаг;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УтечкиПриИзменении(Элемент)
	
	Элементы.ГруппаУтечки.Доступность = РежимУтечки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Форматировать(Знач ЧтоПечатаем, Параметр0 = Неопределено, Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, Параметр7 = Неопределено, Параметр8 = Неопределено, Параметр9 = Неопределено)
	
	Перем Параметры, Значение, КоличествоПараметров, Результат;
	Перем НачалоПараметра, КонецПараметра, Параметр, НомерПараметра, ШиринаПоля, ФорматПоля, Счетчик, ПодСтрока, ЗначениеСтрокой;
	Перем Сч, ПустоеМесто;
	
	// Заменим замаскированные символы, которые мешают анализу корректности строки
	ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, "%Т", Символ(1));
	ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, "%т", Символ(1));
	ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, "%П", Символ(2));
	ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, "%п", Символ(2));
	ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, "%%", Символ(3));
	
	// Если не осталось символов % - значит никакого форматирования нет и
	// надо вернуть результат после макроподстановок
	Если СтрЧислоВхождений(ЧтоПечатаем, "%") = 0 Тогда
		
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(1), Символы.Таб);
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(2), Символы.ПС);
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(3), "%");
		Возврат ЧтоПечатаем;
		
	КонецЕсли;
	
	// Проверим, что у нас нет непарных символов %
	// Если таковые скобки есть, то никакого форматирования не будет и строка
	// вернется как есть
	Если СтрЧислоВхождений(ЧтоПечатаем, "%") % 2 <> 0 Тогда
		
		// Вернем подстановки назад (но без маскирующих символов)
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(1), "%Т");
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(2), "%П");
		ЧтоПечатаем = СтрЗаменить(ЧтоПечатаем, Символ(3), "%%");
		Возврат ЧтоПечатаем;
		
	КонецЕсли;
	
	// Определим, каким образом нам переданы параметры и заполним массив параметров
	Параметры = Новый Массив;
	Если ТипЗнч(Параметр0) = Тип("Массив") Тогда
		// Параметры переданы как массив, остальные параметры не анализируем
		Параметры = Параметр0;
	ИначеЕсли ТипЗнч(Параметр0) = Тип("Структура") Тогда
		// Параметры переданы как структура
		Для Каждого Элемент Из Параметр0 Цикл
			Параметры.Добавить(Элемент.Значение);
		КонецЦикла; 
	Иначе
		// Параметры передаются через параметры функции - их не более 10 штук,
		// первый же параметр со значением Неопределено вызывает прекращение
		// дальнейшего анализа параметров
		Для Сч = 0 По 9 Цикл
			Значение = Неопределено;
			Выполнить(" Значение = Параметр" + Формат(Сч, "ЧН=0; ЧГ=0")+";");
			Если Значение = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Параметры.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
	КоличествоПараметров = Параметры.Количество();
	
	// Начнем разбор и форматирование строки
	Результат = "";
	Пока ИСТИНА Цикл
		НачалоПараметра = Найти(ЧтоПечатаем, "%");
		Если НачалоПараметра <> 0 Тогда
			Результат = Результат + Сред(ЧтоПечатаем, 1, НачалоПараметра-1);
			ЧтоПечатаем = Сред(ЧтоПечатаем, НачалоПараметра+1);
			КонецПараметра = Найти(ЧтоПечатаем, "%");
			Параметр = Сред(ЧтоПечатаем, 1, КонецПараметра-1);
			ЧтоПечатаем = Сред(ЧтоПечатаем, КонецПараметра+1);
			
			// Начнем разбор параметра
			НомерПараметра = 0;
			ШиринаПоля = 0;
			ФорматПоля = "";
			Параметр = СтрЗаменить(Параметр, ";", Символы.ПС);
			Для Счетчик = 1 По СтрЧислоСтрок(Параметр) Цикл
				ПодСтрока = СтрПолучитьСтроку(Параметр, Счетчик);
				Если Счетчик = 1 Тогда
					// Номер параметра
					ПодСтрока = СтрЗаменить(ПодСтрока, Символы.НПП, "");
					ПодСтрока = СтрЗаменить(ПодСтрока, " ", "");
					НомерПараметра = Число(ПодСтрока);
				ИначеЕсли Счетчик = 2 Тогда
					// Ширина и выравнивание поля
					ПодСтрока = СтрЗаменить(ПодСтрока, Символы.НПП, "");
					ПодСтрока = СтрЗаменить(ПодСтрока, " ", "");
					ШиринаПоля = Число(ПодСтрока);
				Иначе
					// Форматная строка параметра
					ФорматПоля = ФорматПоля + ПодСтрока + ";"
				КонецЕсли;
			КонецЦикла;
			Если НомерПараметра > КоличествоПараметров Тогда
				Возврат "Номер параметра в форматной строке (" + НомерПараметра + ") превышает количество переданных параметров (" + КоличествоПараметров + ").";
			КонецЕсли;
			ЗначениеСтрокой = Формат(Параметры[НомерПараметра-1], ФорматПоля);
			ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, "%Т", Символ(1));
			ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, "%т", Символ(1));
			ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, "%П", Символ(2));
			ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, "%п", Символ(2));
			
			// Теперь определимся с шириной поля и его выравниванием
			Если ШиринаПоля <> 0 Тогда
				ПростоШирина = ?(ШиринаПоля < 0, -ШиринаПоля, ШиринаПоля);
				ПустоеМесто = "";
				Для Сч = 1 По ПростоШирина Цикл
					ПустоеМесто = ПустоеМесто + " ";
				КонецЦикла;
				Если ШиринаПоля > 0 Тогда
					// Прижмем к левой границе
					ЗначениеСтрокой = Лев(ЗначениеСтрокой + ПустоеМесто, ПростоШирина);
				Иначе
					// Прижмем к правой границе
					ЗначениеСтрокой = Прав(ПустоеМесто + ЗначениеСтрокой, ПростоШирина);
				КонецЕсли;
			КонецЕсли;
			Результат = Результат + ЗначениеСтрокой;
		Иначе
			// Параметры закончились, прервем обработку
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// Выполним обратные преобразования символов-заменителей на реальные символы
	Результат = СтрЗаменить(Результат, Символ(2), Символы.ПС);
	Результат = СтрЗаменить(Результат, Символ(3), "%");
	Возврат Результат;
КонецФункции
