// sza160229-0157
// sza160223-2326

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()

	Если НетДоступаККлиентам Тогда
		ПроверочныйОбъект = Справочники.Поставщики.СоздатьЭлемент();
	Иначе
		ПроверочныйОбъект = Справочники.Клиенты.СоздатьЭлемент();
	КонецЕсли;

	ЕгоПустоеЗначение = ПроверочныйОбъект[ВыбранныйВидОперации];
	ПараметрКонтрагентов = ЕгоПустоеЗначение;
	ТипПараметраКонтрагента = ТипЗнч(ЕгоПустоеЗначение);
	ПроверочныйОбъект = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьПоВидуОперации()

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда
		Элементы.ПараметрКонтрагента.Заголовок = ВыбранныйВидОперацииВТексте + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("контрагентов");
		Элементы.ГруппаПараметраКонтрагентов.Видимость = ИСТИНА;
		Элементы.ВидыОперации.Видимость = ЛОЖЬ;
		Элементы.КонтрагентыЗаполнитьКлиентамиСКатегорией.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнить клиентами по параметру") + ": " + ВыбранныйВидОперацииВТексте;
		Элементы.КонтрагентыЗаполнитьПоставщикамиСКатегорией.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнить поставщиками по параметру") + ": " + ВыбранныйВидОперацииВТексте;
		Элементы.КонтрагентыЗначениеПараметра.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВыбранныйВидОперацииВТексте);
	Иначе
		Элементы.ВидыОперации.Видимость = ИСТИНА;
		Элементы.ГруппаПараметраКонтрагентов.Видимость = ЛОЖЬ;
		ВыбранныйВидОперации = "";
		ПараметрКонтрагентов = Неопределено;
	КонецЕсли;

	ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Управление реквизитом") + ": " + ВыбранныйВидОперацииВТексте + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("контрагентов");
	Элементы.ПредупреждениеПоОсновнойВалюте.Видимость = ВыбранныйВидОперации = "ОСНОВНАЯВАЛЮТА";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьВидимостьПоВидуОперации();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	НетДоступаККлиентам = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000500", ЭтаФорма);
	НетДоступаКПоставщикам = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000650", ЭтаФорма);
	Отказ = НетДоступаККлиентам И НетДоступаКПоставщикам;
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ВыбранныйВидОперации = Параметры.ВидОперации;
		ВыбранныйВидОперацииВТексте = Параметры.ВидОперацииВТексте;
		ЭтаФорма.АвтоЗаголовок = ЛОЖЬ;
		Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
			СтрокаКонтрагентов = Контрагенты.Добавить();
			СтрокаКонтрагентов.Контрагент = Параметры.Контрагент;
			СтрокаКонтрагентов.ЗначениеПараметра = Параметры.Контрагент[ВыбранныйВидОперации];
		КонецЕсли;

		Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда
			ВидОперацииПриИзмененииНаСервере();
		Иначе
			Элементы.ГруппаПараметраКонтрагентов.Видимость = ЛОЖЬ;
			ВыбранныйВидОперации = "";

			Для Каждого РеквизитКлиента Из Метаданные.Справочники.Клиенты.Реквизиты Цикл
				ОбщееНаименовнаие = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитКлиента.Синоним);
				ВидыОперации.Добавить(ВРег(РеквизитКлиента.Имя), ОбщееНаименовнаие);
				Элементы.ВидыОперации.СписокВыбора.Добавить(ВРег(РеквизитКлиента.Имя), ОбщееНаименовнаие);

			КонецЦикла;
		КонецЕсли;

		Элементы.КонтрагентыГруппаКлиенты.Видимость = НЕ НетДоступаККлиентам;
		Элементы.КонтрагентыГруппаПоставщики.Видимость = НЕ НетДоступаКПоставщикам;
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиКлиентамиНаСервере()

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Клиенты.Ссылка,
		|	Клиенты." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ";

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиКлиентами(Команда)
	ЗаполнитьВсемиКлиентамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиПоставщикамиНаСервере()

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Поставщики.Ссылка,
		|	Поставщики." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Поставщики КАК Поставщики
		|ГДЕ Поставщики.ЭтоГруппа = ЛОЖЬ";

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиПоставщиками(Команда)
	ЗаполнитьВсемиПоставщикамиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлиентамиСПараметромНаСервере(Знач ЗначениеРеквизитаКонтрагента)

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Клиенты.Ссылка,
		|	Клиенты." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
		|	И Клиенты." + ВыбранныйВидОперации + " = &ЗначениеРеквизитаКонтрагента";
		Запрос.УстановитьПараметр("ЗначениеРеквизитаКонтрагента", ЗначениеРеквизитаКонтрагента);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлиентамиСПараметром(Команда)

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда
		ПараметрВыбора = ПараметрКонтрагентов;
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьКлиентамиСПараметромЗавершение", ЭтотОбъект, Новый Структура("ПараметрВыбора", ПараметрВыбора)), ПараметрВыбора, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите клиентов с") + ": " + ВыбранныйВидОперацииВТексте, ТипПараметраКонтрагента);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлиентамиСПараметромЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ПараметрВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ПараметрВыбора, Значение);

	Если НЕ Значение = Неопределено Тогда
		ЗаполнитьКлиентамиСПараметромНаСервере(ПараметрВыбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоставщикамиСПараметромНаСервере(Знач ЗначениеРеквизитаКонтрагента)

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Поставщики.Ссылка,
		|	Поставщики." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Поставщики КАК Поставщики
		|ГДЕ Поставщики.ЭтоГруппа = ЛОЖЬ
		|	И Поставщики." + ВыбранныйВидОперации + " = &ЗначениеРеквизитаКонтрагента";
		Запрос.УстановитьПараметр("ЗначениеРеквизитаКонтрагента", ЗначениеРеквизитаКонтрагента);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикамиСПараметром(Команда)

	Если НЕ ПустаяСтрока(ВыбранныйВидОперации) Тогда
		ПараметрВыбора = ПараметрКонтрагентов;
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьПоставщикамиСПараметромЗавершение", ЭтотОбъект, Новый Структура("ПараметрВыбора", ПараметрВыбора)), ПараметрВыбора, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите поставщиков с") + ": " + ВыбранныйВидОперацииВТексте, ТипПараметраКонтрагента);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикамиСПараметромЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ПараметрВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ПараметрВыбора, Значение);

	Если НЕ Значение = Неопределено Тогда
		ЗаполнитьПоставщикамиСПараметромНаСервере(ПараметрВыбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГруппеКлиентовНаСервере(Знач ГруппаВыбора)

	Если Не ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Клиенты.Ссылка,
		|	Клиенты." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
		|	И Клиенты.Ссылка В ИЕРАРХИИ(&ГруппаВыбора)";
		Запрос.УстановитьПараметр("ГруппаВыбора", ГруппаВыбора);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеКлиентов(Команда)

	ГруппаВыбора = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
	ОткрытьФорму("Справочник.Клиенты.ФормаВыбораГруппы", Новый Структура("ГруппаВыбора", ГруппаВыбора), ЭтаФорма, , , , Новый ОписаниеОповещения("ЗаполнитьКлиентамиВГруппеЗавершение", ЭтотОбъект, Новый Структура("ГруппаВыбора", ГруппаВыбора)));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлиентамиВГруппеЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ГруппаВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ГруппаВыбора, Значение);

	Если НЕ Значение = Неопределено Тогда
		ЗаполнитьПоГруппеКлиентовНаСервере(ГруппаВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПоставщиков(Команда)

	ГруппаВыбора = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
	ОткрытьФорму("Справочник.Поставщики.ФормаВыбораГруппы", Новый Структура("ГруппаВыбора", ГруппаВыбора), ЭтаФорма, , , , Новый ОписаниеОповещения("ЗаполнитьПоставщикамиВГруппеЗавершение", ЭтотОбъект, Новый Структура("ГруппаВыбора", ГруппаВыбора)));

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикамиВГруппеЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ГруппаВыбора = ?(Значение = Неопределено, ДополнительныеПараметры.ГруппаВыбора, Значение);

	Если НЕ Значение = Неопределено Тогда
		ЗаполнитьПоГруппеПоставщиковНаСервере(ГруппаВыбора);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГруппеПоставщиковНаСервере(Знач ГруппаВыбора)

	Если Не ПустаяСтрока(ВыбранныйВидОперации) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Поставщики.Ссылка,
		|	Поставщики." + ВыбранныйВидОперации + " КАК РеквизитКонтрагента
		|ИЗ Справочник.Поставщики КАК Поставщики
		|ГДЕ Поставщики.ЭтоГруппа = ЛОЖЬ
		|	И Поставщики.Ссылка В ИЕРАРХИИ(&ГруппаВыбора)";
		Запрос.УстановитьПараметр("ГруппаВыбора", ГруппаВыбора);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаКонтрагентов = Контрагенты.Добавить();
				СтрокаКонтрагентов.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
				СтрокаКонтрагентов.ЗначениеПараметра = ВыборкаДетальныеЗаписи.РеквизитКонтрагента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтуКатегориюДляСпискаКонтрагентов(Команда)

	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись изменений.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	УстановитьЭтоЗначениеДляКонтрагентовНаСервере();

КонецПроцедуры

&НаСервере
Процедура УстановитьЭтоЗначениеДляКонтрагентовНаСервере(Знач КонтрагентТекущейСтроки = Неопределено, Знач ЗначениеПараметра = Неопределено)

	Если Не ПустаяСтрока(ВыбранныйВидОперации) Тогда
		ДокументыДляПерепроведения = Новый Массив;
		ТаблицаДокументовДляПерепроведения = Новый ТаблицаЗначений;
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Документ");
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Дата");

		Если КонтрагентТекущейСтроки = Неопределено Тогда
			КонтрагентыДляИзменения = Контрагенты;
			ЗначениеПараметра = ПараметрКонтрагентов;
		Иначе
			КонтрагентыДляИзменения = Новый ТаблицаЗначений;
			КонтрагентыДляИзменения.Колонки.Добавить("Контрагент");
			КонтрагентыДляИзменения.Колонки.Добавить("ЗначениеПараметра");
			СтрокаКонтрагента = КонтрагентыДляИзменения.Добавить();
			СтрокаКонтрагента.Контрагент = КонтрагентТекущейСтроки;
			СтрокаКонтрагента.ЗначениеПараметра = ЗначениеПараметра;
		КонецЕсли;

		Для Каждого СтрокаКонтрагента Из КонтрагентыДляИзменения Цикл
			Контрагент = СтрокаКонтрагента.Контрагент;

			Если ЗначениеЗаполнено(Контрагент)
				И НЕ Контрагент[ВыбранныйВидОперации] = ЗначениеПараметра Тогда

				КонтрагентОбъект = Контрагент.ПолучитьОбъект();
				КонтрагентОбъект[ВыбранныйВидОперации] = ЗначениеПараметра;
				СтрокаКонтрагента.ЗначениеПараметра = ЗначениеПараметра;
				Попытка
					КонтрагентОбъект.Записать();
				Исключение
					ТекстОписанияОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи контрагента") + ": " + ТекстОписанияОшибки);
				КонецПопытки;

				Если ВыбранныйВидОперации = "ОСНОВНАЯВАЛЮТА"
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда

					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Расчеты.Регистратор КАК Ссылка,
					|	Расчеты.Период КАК Дата
					|ИЗ РегистрНакопления.Расчеты КАК Расчеты
					|ГДЕ Расчеты.Клиент = &Контрагент
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РасчетыСПоставщиками.Регистратор,
					|	РасчетыСПоставщиками.Период
					|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
					|ГДЕ РасчетыСПоставщиками.Поставщик = &Контрагент
					|УПОРЯДОЧИТЬ ПО Дата";
					Запрос.УстановитьПараметр("Контрагент", КонтрагентОбъект.Ссылка);

					РезультатЗапроса = Запрос.Выполнить();

					Если НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Регистратор = ВыборкаДетальныеЗаписи.Ссылка;

							Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
								ДокументыДляПерепроведения.Добавить(Регистратор);
								СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
								СтрокаДокумент.Документ = Регистратор;
								СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Если НЕ ДокументыДляПерепроведения.Количество() = 0 Тогда
			ТаблицаДокументовДляПерепроведения.Сортировать("Дата Возр");
			Для Каждого СтрокаДокумент Из ТаблицаДокументовДляПерепроведения Цикл
				ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаТаблицы(Команда)
	Контрагенты.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКатегорияПриИзменении(Элемент)

	КонтрагентТекущейСтроки = Элементы.Контрагенты.ТекущиеДанные.Контрагент;
	ПараметрТекущейСтроки  = Элементы.Контрагенты.ТекущиеДанные.ЗначениеПараметра;
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись изменений.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	УстановитьЭтоЗначениеДляКонтрагентовНаСервере(КонтрагентТекущейСтроки, ПараметрТекущейСтроки)

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	Элементы.Контрагенты.ТекущиеДанные.ЗначениеПараметра = ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Элементы.Контрагенты.ТекущиеДанные.Контрагент, ВыбранныйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ВидыОперацииПриИзменении(Элемент)

	ВыбранныйВидОперации = ВыборВидаОперации;
	ВыбранныйВидОперацииВТексте = ВидыОперации.НайтиПоЗначению(ВыборВидаОперации).Представление;
	ВидОперацииПриИзмененииНаСервере();
	ОбновитьВидимостьПоВидуОперации();

КонецПроцедуры
