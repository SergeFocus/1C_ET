//sza140506-1011 SZA: 
//sza130915-2214

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала 		= Объект.Период.ДатаНачала;
	Объект.ДатаОкончания 	= Объект.Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Объект.Период.ДатаНачала = Объект.ДатаНачала;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания 		= Объект.ДатаНачала;
		Объект.Период.ДатаОкончания = Объект.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Объект.Период.ДатаОкончания = Объект.ДатаОкончания;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала 			= Объект.ДатаОкончания;
		Объект.Период.ДатаНачала 	= Объект.ДатаНачала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата() - 3600 * 24);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = КонецДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
	КонецЕсли;
	
	Объект.Период.ДатаНачала = Объект.ДатаНачала;
	Объект.Период.ДатаОкончания = Объект.ДатаОкончания;
	
	Попытка
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			СтраницыПанели  = Элементы.СтраницыОбработки.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			элементы.СтраницыОбработки.ТекущаяСтраница = ТекущаяСтраница;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтраницаПанели1)Тогда
			
			СтраницыПанели  = Элементы.СтраницыВыгрузки.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели1);
			элементы.СтраницыВыгрузки.ТекущаяСтраница = ТекущаяСтраница;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтраницаПанели2)Тогда
			
			СтраницыПанели  = Элементы.СтраницыЗагрузки.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели2);
			элементы.СтраницыЗагрузки.ТекущаяСтраница = ТекущаяСтраница;
			
		КонецЕсли;	
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРеализациюЗаПериод(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите имя архива для экспорта (выгрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; //АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	Ложь;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Выгрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		
		ВыгрузитьРеализациюЗаПериодНаСервере(АдресФайла);
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил данные в файл:") + " " + АдресФайла, 2);
	КонецЕсли; //когда файл АдресФайла выбран
	
КонецПроцедуры

Процедура ПодготовитьСпискиОтбора()
	
	ЕстьОтборы = ложь;
	
	СписокСкладов.Очистить();
	Для Каждого СтрокаТаблицОтбора из Объект.ОтборПоСкладам Цикл
		СписокСкладов.Добавить(СтрокаТаблицОтбора.Склад);
		ЕстьОтборы = истина;
	КонецЦикла;                	
	
	СписокПроизводителей.Очистить();
	Для Каждого СтрокаТаблицОтбора из Объект.ОтборПоПроизводителям Цикл
		СписокПроизводителей.Добавить(СтрокаТаблицОтбора.Производитель);
		ЕстьОтборы = истина;
	КонецЦикла;
	
	СписокНоменклатурныхГрупп.Очистить();
	Для Каждого СтрокаТаблицОтбора из Объект.ОтборПоНоменклатурнымГруппам Цикл
		СписокНоменклатурныхГрупп.Добавить(СтрокаТаблицОтбора.НоменклатурнаяГруппа);
		ЕстьОтборы = истина;
	КонецЦикла;
	
	СписокРегионов.Очистить();
	Для Каждого СтрокаТаблицОтбора из Объект.ОтборПоРегионам Цикл
		СписокРегионов.Добавить(СтрокаТаблицОтбора.НоменклатурнаяГруппа);
		ЕстьОтборы = истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРеализациюЗаПериодНаСервере(АдресФайла)
	
	ПодготовитьСпискиОтбора();
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	
	ФайлВыгрузки 		= Новый ЗаписьТекста;
	Каталог 			= КаталогВременныхФайлов();
	ИмяВременногоФайла 	= Каталог + "/tmp_outdata.tmp";
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	ФайлВыгрузки.Открыть(ИмяВременногоФайла);
	
	Запрос = Новый Запрос;
	
	Если ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажи.Период КАК Период,
		|	Продажи.Регистратор,
		| NULL,
		|	Продажи.Номенклатура,
		|	Продажи.Количество,
		|	Продажи.Сумма,
		|	ЕСТЬNULL(Продажи.Регистратор.КлиентПоставщик, &ПустойКлиент) КАК Клиент,
		|	Продажи.Номенклатура.Артикул,
		|	Продажи.Номенклатура.ОсновнойШтрихКод,
		|	Продажи.Номенклатура.Производитель,
		|	Продажи.Номенклатура.НоменклатурнаяГруппа,
		|	Продажи.Номенклатура.ПроцентСкидки,
		|	Продажи.Номенклатура.Наименование КАК Наименование,
		|	NULL КАК СерияНоменклатуры,
		|	ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) КАК Склад,
		|	ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0) КАК НоменклатураЦена,
		|	1 КАК ТипРегистра
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&ДатаОкончания, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних
		|		ПО Продажи.Номенклатура = ЦеныСрезПоследних.Номенклатура
		|ГДЕ
		|	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания    %%1 %%2 %%3 %%4   
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Период,
		|	Товары.Регистратор,
		|	Товары.ВидДвижения,
		|	Товары.Номенклатура,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	ЕСТЬNULL(Товары.Регистратор.КлиентПоставщик, &ПустойКлиент),
		|	Товары.Номенклатура.Артикул,
		|	Товары.Номенклатура.ОсновнойШтрихКод,
		|	Товары.Номенклатура.Производитель,
		|	Товары.Номенклатура.НоменклатурнаяГруппа,
		|	Товары.Номенклатура.ПроцентСкидки,
		|	Товары.Номенклатура.Наименование,
		|   Товары.СерияНоменклатуры,
		|	Товары.Склад,
		|	ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0),
		|	2
		|ИЗ
		|	РегистрНакопления.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&ДатаОкончания, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних
		|		ПО Товары.Номенклатура = ЦеныСрезПоследних.Номенклатура
		|ГДЕ
		|	Товары.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Товары.ВидДвижения = &ВидДвиженияРасход
		|	И Товары.СписаниеИлиОприходование = ИСТИНА    %%1 %%2 %%3 %%4   ";
		
		Запрос.УстановитьПараметр("ВидЦен", Справочники.ВидыЦен.ОсновнойВидЦен);
		
	иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Продажи.Период КАК Период,
		|	Продажи.Регистратор,
		| NULL,
		|	Продажи.Номенклатура,
		|	Продажи.Количество,
		|	Продажи.Сумма,
		|	ЕСТЬNULL(Продажи.Регистратор.КлиентПоставщик, &ПустойКлиент) КАК Клиент,
		|	Продажи.Номенклатура.Артикул,
		|	Продажи.Номенклатура.ОсновнойШтрихКод,
		|	Продажи.Номенклатура.Производитель,
		|	Продажи.Номенклатура.НоменклатурнаяГруппа,
		|	Продажи.Номенклатура.Цена,
		|	Продажи.Номенклатура.ПроцентСкидки,
		|	Продажи.Номенклатура.Наименование КАК Наименование,
		|	NULL КАК СерияНоменклатуры,
		|	ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) КАК Склад,
		|	1 КАК ТипРегистра
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания  %%1 %%2 %%3 %%4   
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Период,
		|	Товары.Регистратор,
		|	Товары.ВидДвижения,
		|	Товары.Номенклатура,
		|	Товары.Количество,
		|	Товары.Сумма,
		|	&ПустойКлиент,
		|	Товары.Номенклатура.Артикул,
		|	Товары.Номенклатура.ОсновнойШтрихКод,
		|	Товары.Номенклатура.Производитель,
		|	Товары.Номенклатура.НоменклатурнаяГруппа,
		|	Товары.Номенклатура.Цена,
		|	Товары.Номенклатура.ПроцентСкидки,
		|	Товары.Номенклатура.Наименование,
		|   Товары.СерияНоменклатуры,
		|	Товары.Склад,
		|	2
		|ИЗ
		|	РегистрНакопления.Товары КАК Товары
		|ГДЕ
		|	Товары.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Товары.ВидДвижения = &ВидДвиженияРасход
		|	И Товары.СписаниеИлиОприходование = ИСТИНА   %%1 %%2 %%3 %%4 ";
		
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		и НЕ Объект.ОтборПоСкладам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И естьnull(продажи.Регистратор.Склад, &Пустойсклад) В(&Склады) ");		
		Запрос.УстановитьПараметр("Склады", СписокСкладов);
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры")
		и НЕ Объект.ОтборПоПроизводителям.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И продажи.Номенклатура.Производитель В(&Производители) ");
		Запрос.УстановитьПараметр("Производители", СписокПроизводителей);
	КонецЕсли;
	
	Если ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС
		и НЕ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", " И продажи.Номенклатура.НоменклатурнаяГруппа В(&НоменклатурныеГруппы) ");
		Запрос.УстановитьПараметр("НоменклатурныеГруппы", СписокНоменклатурныхГрупп);
	КонецЕсли;
	
	Если ВестиУчетРегионов
		и НЕ Объект.ОтборПоРегионам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%4", " И (естьNull(продажи.Регистратор.КлиентПоставщик.Регион, &ПустойРегион) В (&Регионы) ИЛИ естьNull(продажи.Номенклатура.Производитель.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.УстановитьПараметр("Регионы", СписокРегионов);
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%4", "");
	
	Запрос.Текст = Запрос.Текст + "	УПОРЯДОЧИТЬ ПО Период ";
	
	Запрос.УстановитьПараметр("ДатаНачала", началоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ПустойКлиент", ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Пустойсклад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		ОтправитьВФайл(ФайлВыгрузки, Сокрлп(Метаданные.Версия));
		
		Пока Выб.Следующий() Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
			
			если Выб.ТипРегистра = 1 тогда
				Если не Выб.Сумма > 0 Тогда //не продажа - возврат
					ОтправитьВФайл(ФайлВыгрузки, "ПРИХОД");
				Иначе
					ОтправитьВФайл(ФайлВыгрузки, "РАСХОД");
				КонецЕсли;
				
			иначе
				Если не Выб.Сумма > 0 Тогда //дооприх
					ОтправитьВФайл(ФайлВыгрузки, "ОПРИХОД");
				Иначе
					ОтправитьВФайл(ФайлВыгрузки, "СПИСАНИЕ");
				КонецЕсли;
				
			КонецЕсли;
			
			ОтправитьВФайл(ФайлВыгрузки, Формат(Выб.Период, "ДФ=ггггММддЧЧммсс"));
			ОтправитьВФайл(ФайлВыгрузки, Выб.Наименование); 		
			НоменклатураОсновнойШтрихКод = Выб.НоменклатураОсновнойШтрихКод;
			Если НЕ ЗначениеЗаполнено(НоменклатураОсновнойШтрихКод) Тогда
				НоменклатураОсновнойШтрихКод = ОбщийМодульТоварСервер.ПолучитьШтрихКодНоменклатурыСерии(Выб.Номенклатура, Выб.СерияНоменклатуры);
			КонецЕсли;
			ОтправитьВФайл(ФайлВыгрузки, НоменклатураОсновнойШтрихКод);
			ОтправитьВФайл(ФайлВыгрузки, Выб.НоменклатураАртикул);
			ОтправитьВФайл(ФайлВыгрузки, Выб.НоменклатураПроизводитель);
			ОтправитьВФайл(ФайлВыгрузки, Выб.НоменклатураНоменклатурнаяГруппа);
			
			если СкрытьДанныеОЦенахИСуммеРеализации тогда
				ОтправитьВФайл(ФайлВыгрузки, "0"); 	
			Иначе
				ОтправитьВФайл(ФайлВыгрузки, Формат(Выб.НоменклатураЦена, "ЧЦ=15; ЧДЦ=0; ЧГ=0")); 	
			КонецЕсли;
			ОтправитьВФайл(ФайлВыгрузки, Выб.НоменклатураПроцентСкидки);
			ОтправитьВФайл(ФайлВыгрузки, Выб.СерияНоменклатуры); 
			ОтправитьВФайл(ФайлВыгрузки, Выб.Склад);
			ОтправитьВФайл(ФайлВыгрузки, ?(ЗначениеЗаполнено(Выб.Клиент), Выб.Клиент, ""));
			
			Если ЗначениеЗаполнено(Выб.Клиент) Тогда
				ОтправитьВФайл(ФайлВыгрузки, Выб.Клиент.ОКПО); 
			Иначе
				ОтправитьВФайл(ФайлВыгрузки, ""); 
			КонецЕсли;
			
			ОтправитьВФайл(ФайлВыгрузки, Формат(Выб.Количество, "ЧЦ=15; ЧДЦ=0; ЧГ=0")); 
			если СкрытьДанныеОЦенахИСуммеРеализации тогда
				ОтправитьВФайл(ФайлВыгрузки, "0"); 	
			иначе
				ОтправитьВФайл(ФайлВыгрузки, Формат(Выб.Сумма, "ЧЦ=15; ЧДЦ=2; ЧГ=0")); 	
			КонецЕсли;     		
			
		КонецЦикла;	
	КонецЕсли;
	
	Попытка 
		ФайлВыгрузки.Закрыть();
		
		ЗаписьZIP = Новый ЗаписьZipФайла(АдресФайла);     
		ЗаписьZIP.Добавить(ИмяВременногоФайла);
		ЗаписьZIP.Записать();
		
		ПодсистемаИЭИмпортЭкспортФС.ЗаписатьВЖурналИмпортноЭкспортныхОпераций(АдресФайла, , Выб.Количество(), Истина, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка реализаций, списаний за период") + " " + Формат(объект.ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(объект.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные выгружены. Всего строк:") + " " + СчетчикСтрок;
		Сообщение.Поле 	= "ВыгрузитьРеализациюЗаПериод";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при записи файла:") + " " + ОписаниеОшибки();
		Сообщение.Поле 	= "ВыгрузитьРеализациюЗаПериод";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

процедура ОтправитьВФайл(ФайлВыгрузки, СтрокаДанных)	
	ФайлВыгрузки.ЗаписатьСтроку(СтрокаДанных, символы.ПС);	
КонецПроцедуры

&насервере
функция   ПолучитьОтносительныйАдресНаСервере();	
	Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов");	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьРеализациюЗаПериод(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();	
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл архива для импорта(загрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; //АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	Ложь;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗагрузитьРеализациюЗаПериодНаСервере(АдресФайла);
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил данные из файла:") + " " + АдресФайла, 2);
		
	КонецЕсли; //когда файл АдресФайла выбран
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРеализациюЗаПериодНаСервере(АдресФайла)
	
	Каталог = КаталогВременныхФайлов();
	
	ИмяВременногоФайла = Каталог + "/tmp_outdata.tmp";
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	
	ФайлАрхива = Новый ЧтениеZIPФайла(АдресФайла); 
	ФайлАрхива.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();     
	
	Объект.СозданныеДокументы.Очистить();
	ПодготовитьСпискиОтбора();
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	СоздаватьНовуюНоменклатуру = Объект.СоздаватьНовуюНоменклатуру;
	
	ФайлЗагрузки = Новый ЧтениеТекста(ИмяВременногоФайла);
	попытка                                        		
		СчетчикСтрок = 1;
		
		ТаблицаПрихода = новый ТаблицаЗначений;
		ТаблицаПрихода.Колонки.Добавить("Период");
		ТаблицаПрихода.Колонки.Добавить("Номенклатура");
		//	ТаблицаПрихода.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаПрихода.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаПрихода.Колонки.Добавить("Склад");
		ТаблицаПрихода.Колонки.Добавить("Клиент");
		ТаблицаПрихода.Колонки.Добавить("Количество");
		ТаблицаПрихода.Колонки.Добавить("Сумма");
		ТаблицаПрихода.Колонки.Добавить("Цена");
		ТаблицаПрихода.Колонки.Добавить("ПроцентСкидки");
		
		ТаблицаРасхода = новый ТаблицаЗначений;
		ТаблицаРасхода.Колонки.Добавить("Период");
		ТаблицаРасхода.Колонки.Добавить("Номенклатура");
		//	ТаблицаРасхода.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаРасхода.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаРасхода.Колонки.Добавить("Склад");
		ТаблицаРасхода.Колонки.Добавить("Клиент");
		ТаблицаРасхода.Колонки.Добавить("Количество");
		ТаблицаРасхода.Колонки.Добавить("Сумма");
		ТаблицаРасхода.Колонки.Добавить("Цена");
		ТаблицаРасхода.Колонки.Добавить("ПроцентСкидки");
		
		ТаблицаОприхода = новый ТаблицаЗначений;
		ТаблицаОприхода.Колонки.Добавить("Период");
		ТаблицаОприхода.Колонки.Добавить("Номенклатура");
		//	ТаблицаОприхода.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаОприхода.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаОприхода.Колонки.Добавить("Склад");
		ТаблицаОприхода.Колонки.Добавить("Клиент");
		ТаблицаОприхода.Колонки.Добавить("Количество");
		ТаблицаОприхода.Колонки.Добавить("Сумма");
		ТаблицаОприхода.Колонки.Добавить("Цена");
		ТаблицаОприхода.Колонки.Добавить("ПроцентСкидки");
		
		ТаблицаСписания = новый ТаблицаЗначений;
		ТаблицаСписания.Колонки.Добавить("Период");
		ТаблицаСписания.Колонки.Добавить("Номенклатура");
		//	ТаблицаСписания.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаСписания.Колонки.Добавить("СерияНоменклатуры");
		ТаблицаСписания.Колонки.Добавить("Склад");
		ТаблицаСписания.Колонки.Добавить("Клиент");
		ТаблицаСписания.Колонки.Добавить("Количество");
		ТаблицаСписания.Колонки.Добавить("Сумма");
		ТаблицаСписания.Колонки.Добавить("Цена");
		ТаблицаСписания.Колонки.Добавить("ПроцентСкидки");
		
		ВерсияВФайле = СтрЗаменить(Сокрлп(ФайлЗагрузки.ПрочитатьСтроку()), "F", "");		
		ВерсияЗдесь  = СтрЗаменить(Сокрлп(Метаданные.Версия), "F", "");
		
		Если НЕ ВерсияВФайле = ВерсияЗдесь Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия файла:") + " " + ВерсияВФайле + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не совпадает с версией конфигурации:" + ВерсияЗдесь);
			Сообщение.Сообщить();	
			
			ФайлЗагрузки.Закрыть();
			возврат;
		КонецЕсли;
		
		ЭтоКонецФайла 	= ложь;
		ВидДвижения 	= ФайлЗагрузки.ПрочитатьСтроку();
		
		Если ВидДвижения = Неопределено тогда
			ЭтоКонецФайла = Истина;
		иначеесли ВидДвижения = "ПРИХОД" Тогда
			СтрокаТаблицы = ТаблицаПрихода.Добавить();
		ИначеЕсли ВидДвижения = "ОПРИХОД" тогда
			СтрокаТаблицы = ТаблицаОприхода.Добавить();
		ИначеЕсли ВидДвижения = "СПИСАНИЕ" тогда
			СтрокаТаблицы = ТаблицаСписания.Добавить();
		Иначе
			СтрокаТаблицы = ТаблицаРасхода.Добавить();
		КонецЕсли;
		
		запрещенопроводить 	= ложь;
		перваястрока 		= истина;
		
		Пока не ЭтоКонецФайла Цикл // строки читаются до символа перевода строки	
			
			если перваястрока тогда
				перваястрока = ложь;
				
			иначе
				ВидДвижения = ФайлЗагрузки.ПрочитатьСтроку();
				
				Если ВидДвижения = Неопределено 
					или сокрлп(ВидДвижения) = "" тогда
					
					ЭтоКонецФайла = Истина;
				иначеесли ВидДвижения = "ПРИХОД" Тогда
					СтрокаТаблицы = ТаблицаПрихода.Добавить();
				ИначеЕсли ВидДвижения = "ОПРИХОД" тогда
					СтрокаТаблицы = ТаблицаОприхода.Добавить();
				ИначеЕсли ВидДвижения = "СПИСАНИЕ" тогда
					СтрокаТаблицы = ТаблицаСписания.Добавить();
				Иначе
					СтрокаТаблицы = ТаблицаРасхода.Добавить();
				КонецЕсли;	
			КонецЕсли;
			
			если не ЭтоКонецФайла тогда
				попытка
					СтрокаТаблицы.Период = дата(ФайлЗагрузки.ПрочитатьСтроку());
				исключение
					СтрокаТаблицы.Период = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				конецпопытки;
				
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("НоменклатураНаименование", сокрлп(ФайлЗагрузки.ПрочитатьСтроку()));
				СтруктураРеквизитов.Вставить("НоменклатураОсновнойШтрихКод", сокрлп(ФайлЗагрузки.ПрочитатьСтроку()));
				СтруктураРеквизитов.Вставить("НоменклатураАртикул", сокрлп(ФайлЗагрузки.ПрочитатьСтроку()));
				СтруктураРеквизитов.Вставить("НоменклатураПроизводитель", сокрлп(ФайлЗагрузки.ПрочитатьСтроку()));
				СтруктураРеквизитов.Вставить("НоменклатураНоменклатурнаяГруппа", сокрлп(ФайлЗагрузки.ПрочитатьСтроку()));
				
				Попытка 
					СтрокаТаблицы.Цена = Число(ФайлЗагрузки.ПрочитатьСтроку());
				Исключение 	
					СтрокаТаблицы.Цена = 0;
				КонецПопытки;
				
				Номенклатура 	= ОбнаружитьНоменклатуруПоРеквизитам(СтруктураРеквизитов);
				НоваяНома 		= ложь;
				
				Если НЕ ЗначениеЗаполнено(Номенклатура) 
					и ЗначениеЗаполнено(СтруктураРеквизитов.НоменклатураНаименование)
					и СоздаватьНовуюНоменклатуру Тогда
					
					НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент() ;
					НоменклатураОбъект.Артикул 		= СтруктураРеквизитов.НоменклатураАртикул;
					НоменклатураОбъект.Наименование = СтруктураРеквизитов.НоменклатураНаименование;
					НоменклатураОбъект.Родитель 	= объект.ГруппаНовойНоменклатуры;
					Если ЗначениеЗаполнено(объект.НоменклатурнаяГруппаНовойНоменклатуры) Тогда
						НоменклатураОбъект.НоменклатурнаяГруппа  = объект.НоменклатурнаяГруппаНовойНоменклатуры;
					Иначеесли не СтруктураРеквизитов.НоменклатураНоменклатурнаяГруппа = "" тогда
						НоменклатураОбъект.НоменклатурнаяГруппа  = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(СтруктураРеквизитов.НоменклатураНоменклатурнаяГруппа) ;
					КонецЕсли;				
					
					НоменклатураОбъект.ОсновнойШтрихКод = СтруктураРеквизитов.НоменклатураОсновнойШтрихКод;
					Если ЗначениеЗаполнено(объект.ПроизводительНовойНоменклатуры) Тогда
						НоменклатураОбъект.Производитель = объект.ПроизводительНовойНоменклатуры;
					иначеесли не СтруктураРеквизитов.НоменклатураПроизводитель = "" тогда
						НоменклатураОбъект.Производитель = Справочники.Производители.НайтиПоНаименованию(СтруктураРеквизитов.НоменклатураПроизводитель);
					КонецЕсли;
					НоменклатураОбъект.Цена 		= СтрокаТаблицы.Цена;
					НоменклатураОбъект.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
					
					Попытка 
						
						НоменклатураОбъект.Записать();
						НоваяНома 		= истина;
						Номенклатура 	= НоменклатураОбъект.Ссылка;
						
					Исключение 
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Номенклатуры:") + " " + НоменклатураОбъект + " " + ОписаниеОшибки();
						Сообщение.Сообщить();
					КонецПопытки; 
					
				КонецЕсли;
				
				СтрокаТаблицы.Номенклатура = Номенклатура;
				
				Попытка 
					СтрокаТаблицы.ПроцентСкидки = Число(ФайлЗагрузки.ПрочитатьСтроку());	
				Исключение 	
					СтрокаТаблицы.ПроцентСкидки = 0;							
				КонецПопытки;
				
				СерияНоменклатуры = ФайлЗагрузки.ПрочитатьСтроку();
				Если УчетПоСериям Тогда
					СтрокаТаблицы.СерияНоменклатуры = ОбщийМодульТоварСервер.ОбнаружитьСериюНоменклатуры(Номенклатура, СерияНоменклатуры, Истина);
				конецесли;
				
				//	ЕдиницаИзмерения = ФайлЗагрузки.ПрочитатьСтроку();
				//	СтрокаТаблицы.ЕдиницаИзмерения = ОбщийМодульТоварСервер.ОбнаружитьЕдиницуНоменклатуры(Номенклатура, ЕдиницаИзмерения);
				
				наимс = ФайлЗагрузки.ПрочитатьСтроку();
				Если ЗначениеЗаполнено(Объект.УстановитьСклад) Тогда
					СтрокаТаблицы.Склад = Объект.УстановитьСклад.Ссылка;
				Иначе
					СтрокаТаблицы.Склад = Справочники.Склады.НайтиПоНаименованию(наимс);
				КонецЕсли;					
				
				КлиентНаименование 	= сокрлп(ФайлЗагрузки.ПрочитатьСтроку());
				КлиентОКПО			= сокрлп(ФайлЗагрузки.ПрочитатьСтроку());	
				
				Если ЗначениеЗаполнено(Объект.УстановитьКлиента) Тогда
					СтрокаТаблицы.Клиент = Объект.УстановитьКлиента;
					
				иначе
					Клиент = ОбнаружитьКлиента(КлиентНаименование, КлиентОКПО);
					
					Если ЗначениеЗаполнено(КлиентНаименование)
						и НЕ ЗначениеЗаполнено(Клиент) 
						и объект.СоздаватьНовыхКлиентовЕслиНеНайдены Тогда
						
						КлиентОбъект = Справочники.Клиенты.СоздатьЭлемент();
						КлиентОбъект.ВидЦен = объект.ВидЦенДляНовыхКлиентов;
						КлиентОбъект.Наименование = КлиентНаименование;
						КлиентОбъект.ОКПО = КлиентОКПО;
						КлиентОбъект.НаименованиеДляПечати = КлиентНаименование;
						КлиентОбъект.ПравовойСтатус = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПравовойСтатусПоУмолчанию") ;
						Если ЗначениеЗаполнено(объект.РегионНовыхКлиентов) Тогда
							КлиентОбъект.Регион = объект.РегионНовыхКлиентов ;
						иначе
							КлиентОбъект.Регион = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегионПоУмолчанию") ;								
						КонецЕсли;
						КлиентОбъект.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
						
						Попытка //Записи КлиентОбъект
							
							КлиентОбъект.Записать();
							Клиент = КлиентОбъект.Ссылка;
							
						Исключение //Записи КлиентОбъект
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Клиента:") + " " + КлиентОбъект + " " + ОписаниеОшибки();
							Сообщение.Сообщить();
						КонецПопытки; //Записи КлиентОбъект    							
						
					КонецЕсли;
					
					СтрокаТаблицы.Клиент = Клиент;
				КонецЕсли;     					
				
				попытка
					СтрокаТаблицы.Количество = Число(ФайлЗагрузки.ПрочитатьСтроку());
				исключение
					СтрокаТаблицы.Количество = 0;
					запрещенопроводить = истина;
				конецпопытки;
				
				Если не СтрокаТаблицы.Цена
					И ЗначениеЗаполнено(Номенклатура)
					и объект.УстанавливатьЦенуПриЗагрузке Тогда
					
					ТекущаяЦена = 0;
					если не НоваяНома
						и объект.УстанавливатьЦенуТолькоЕслиОнаНеУстановлена тогда
						
						ТекущаяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, объект.ВидЦенДляУстановкиПриЗагрузке, СтрокаТаблицы.Период, ложь, СтрокаТаблицы.Количество, , , , Объект.Ссылка, , СтрокаТаблицы.ЕдиницаИзмерения);
					КонецЕсли;
					
					Если ТекущаяЦена = 0 Тогда
						СтрокаТовара = Новый Структура;
						СтрокаТовара.Номенклатура 	= Номенклатура;
						СтрокаТовара.цена 			= СтрокаТаблицы.Цена;
						ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(объект.ВидЦенДляУстановкиПриЗагрузке, СтрокаТовара, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата(), СтрокаТаблицы.Период, ложь, , , , , СтрокаТаблицы.ЕдиницаИзмерения);
					КонецЕсли;
					
				КонецЕсли;
				
				попытка	
					СтрокаТаблицы.Сумма = Число(ФайлЗагрузки.ПрочитатьСтроку());
					
					если не СтрокаТаблицы.Количество = 0 тогда
						СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;	
					КонецЕсли;
					
				исключение
					СтрокаТаблицы.Сумма = 0;
					запрещенопроводить = истина;
				конецпопытки;
				
				СчетчикСтрок = СчетчикСтрок + 1;	
			КонецЕсли;
		КонецЦикла;	
		
		ФайлЗагрузки.Закрыть();
		
		//запись всех доков
		если НЕ ТаблицаПрихода.Количество() = 0 Тогда
			
			НовыйДокумент = Неопределено;
			ТекущийКлиент = Справочники.Клиенты.ПустаяСсылка() ;
			ТекущийСклад = Справочники.Склады.ПустаяСсылка() ;
			
			Если Объект.ФормироватьОдинДокументДляВсейРеализации Тогда
				
				НовыйДокумент = Документы.ПоступленияТовара.СоздатьДокумент();
				НовыйДокумент.Дата 			= ТаблицаПрихода[0].Период;
				НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
				НовыйДокумент.Склад 		= ТаблицаПрихода[0].Склад;
				НовыйДокумент.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо ;//это же возврат, значит он обязателен
				
			КонецЕсли;
			
			Для Каждого СтрокаПрихода Из ТаблицаПрихода Цикл
				
				если не Объект.ФормироватьОдинДокументДляВсейРеализации
					и (не ТекущийКлиент = СтрокаПрихода.клиент Или не ТекущийСклад = СтрокаПрихода.Склад) тогда
					
					если не НовыйДокумент = Неопределено тогда
						ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
					КонецЕсли;
					
					Если ПроверитьСтрокуПоОтборам(СтрокаПрихода) ТОгда
						
						НовыйДокумент = Документы.ПоступленияТовара.СоздатьДокумент();
						НовыйДокумент.КлиентПоставщик 	= СтрокаПрихода.Клиент;
						НовыйДокумент.Дата 				= СтрокаПрихода.Период;
						НовыйДокумент.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
						НовыйДокумент.Склад 			= СтрокаПрихода.Склад;	
						
					КонецЕсли;
				конецесли;
				
				Если ЗначениеЗаполнено(СтрокаПрихода.Номенклатура) Тогда
					
					СтрокаТоваров = НовыйДокумент.Товары.Добавить();
					СтрокаТоваров.Номенклатура 	= СтрокаПрихода.Номенклатура;
					СтрокаТоваров.СерияНоменклатуры = СтрокаПрихода.СерияНоменклатуры;
					СтрокаТоваров.Количество 	= СтрокаПрихода.Количество;
					СтрокаТоваров.Цена 			= СтрокаПрихода.Цена;
					СтрокаТоваров.Сумма 		= СтрокаПрихода.Сумма;
					
				КонецЕсли;
				
			КонецЦикла;	
			если не НовыйДокумент = Неопределено тогда
				ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
			КонецЕсли;
		КонецЕсли;
		
		если НЕ ТаблицаРасхода.Количество() = 0 Тогда
			
			НовыйДокумент 	= Неопределено;
			ТекущийКлиент 	= Справочники.Клиенты.ПустаяСсылка() ;
			ТекущийСклад 	= Справочники.Склады.ПустаяСсылка() ;
			
			Если Объект.ФормироватьОдинДокументДляВсейРеализации Тогда
				
				НовыйДокумент = Документы.РасходыТовара.СоздатьДокумент();
				НовыйДокумент.Дата 			= ТаблицаРасхода[0].Период;
				НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
				НовыйДокумент.Склад 		= ТаблицаРасхода[0].Склад;
				НовыйДокумент.КлиентПоставщик = Справочники.Клиенты.ФизическоеЛицо ;//это же возврат, значит он обязателен
				
			КонецЕсли;
			
			Для Каждого СтрокаРасхода Из ТаблицаРасхода Цикл
				
				если не Объект.ФормироватьОдинДокументДляВсейРеализации
					и (не ТекущийКлиент = СтрокаРасхода.клиент Или не ТекущийСклад = СтрокаРасхода.Склад) тогда
					
					если не НовыйДокумент = Неопределено тогда
						ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
					КонецЕсли;
					
					Если ПроверитьСтрокуПоОтборам(СтрокаРасхода) ТОгда
						
						НовыйДокумент = Документы.РасходыТовара.СоздатьДокумент();
						НовыйДокумент.КлиентПоставщик = СтрокаРасхода.Клиент;
						НовыйДокумент.Дата 			= СтрокаРасхода.Период;
						НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
						НовыйДокумент.Склад 		= СтрокаРасхода.Склад; 	
						
					КонецЕсли;
				конецесли;
				
				Если ЗначениеЗаполнено(СтрокаРасхода.Номенклатура) Тогда
					
					СтрокаТоваров = НовыйДокумент.Товары.Добавить();
					СтрокаТоваров.Номенклатура 		= СтрокаРасхода.Номенклатура;
					СтрокаТоваров.СерияНоменклатуры = СтрокаРасхода.СерияНоменклатуры;
					СтрокаТоваров.Количество 		= СтрокаРасхода.Количество;
					СтрокаТоваров.Цена 				= СтрокаРасхода.Цена;
					СтрокаТоваров.Сумма 			= СтрокаРасхода.Сумма;
					СтрокаТоваров.ПроцентСкидки 	=  СтрокаРасхода.ПроцентСкидки;
					
					если не СтрокаРасхода.Количество = 0 Тогда
						СтрокаТоваров.СуммаБезСкидки = СтрокаРасхода.Цена * СтрокаРасхода.Количество;
					иначе
						СтрокаТоваров.СуммаБезСкидки = СтрокаРасхода.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			если не НовыйДокумент = Неопределено тогда
				ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
			КонецЕсли;
		КонецЕсли;
		
		если НЕ ТаблицаСписания.Количество() = 0 Тогда
			
			НовыйДокумент = Неопределено;
			ТекущийКлиент = Справочники.Клиенты.ПустаяСсылка() ;
			ТекущийСклад  = Справочники.Склады.ПустаяСсылка() ;
			
			Если Объект.ФормироватьОдинДокументДляВсейРеализации Тогда
				
				НовыйДокумент = Документы.РасходыТовара.СоздатьДокумент();
				НовыйДокумент.Дата 			= ТаблицаСписания[0].Период;
				НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
				НовыйДокумент.Склад 		= ТаблицаСписания[0].Склад;
				
			КонецЕсли;
			
			Для Каждого СтрокаРасхода Из ТаблицаСписания Цикл
				
				если не Объект.ФормироватьОдинДокументДляВсейРеализации 
					и не ТекущийСклад = СтрокаРасхода.Склад тогда
					
					если не НовыйДокумент = Неопределено тогда
						ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
					КонецЕсли;
					
					Если ПроверитьСтрокуПоОтборам(СтрокаРасхода) ТОгда
						
						НовыйДокумент = Документы.РасходыТовара.СоздатьДокумент();
						НовыйДокумент.Дата 			= СтрокаРасхода.Период;
						НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
						НовыйДокумент.Склад 		= СтрокаРасхода.Склад; 	
						
					КонецЕсли;
				конецесли;
				
				Если ЗначениеЗаполнено(СтрокаРасхода.Номенклатура) Тогда
					
					СтрокаТоваров = НовыйДокумент.Товары.Добавить();
					СтрокаТоваров.Номенклатура 		= СтрокаРасхода.Номенклатура;
					СтрокаТоваров.СерияНоменклатуры = СтрокаРасхода.СерияНоменклатуры;
					СтрокаТоваров.Количество 		= СтрокаРасхода.Количество;
					СтрокаТоваров.Цена 				= СтрокаРасхода.Цена;
					СтрокаТоваров.Сумма 			= СтрокаРасхода.Сумма;
					СтрокаТоваров.ПроцентСкидки 	= СтрокаРасхода.ПроцентСкидки;
					
					если не СтрокаРасхода.Количество = 0 Тогда
						СтрокаТоваров.СуммаБезСкидки = СтрокаРасхода.Цена * СтрокаРасхода.Количество;
					иначе
						СтрокаТоваров.СуммаБезСкидки = СтрокаРасхода.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			
			если не НовыйДокумент = Неопределено тогда
				ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
			КонецЕсли;
		КонецЕсли;
		
		если НЕ ТаблицаОприхода.Количество() = 0 Тогда
			
			НовыйДокумент = Неопределено;
			ТекущийКлиент = Справочники.Клиенты.ПустаяСсылка() ;
			ТекущийСклад  = Справочники.Склады.ПустаяСсылка() ;
			
			Если Объект.ФормироватьОдинДокументДляВсейРеализации Тогда
				
				НовыйДокумент = Документы.ПоступленияТовара.СоздатьДокумент();
				НовыйДокумент.Дата 			= ТаблицаОприхода[0].Период;
				НовыйДокумент.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
				НовыйДокумент.Склад 		= ТаблицаОприхода[0].Склад;
				
			КонецЕсли;
			
			Для Каждого СтрокаОприхода Из ТаблицаОприхода Цикл
				
				если не Объект.ФормироватьОдинДокументДляВсейРеализации 
					и не ТекущийСклад = СтрокаОприхода.Склад тогда
					
					если не НовыйДокумент = Неопределено тогда
						ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
					КонецЕсли;
					
					Если ПроверитьСтрокуПоОтборам(СтрокаОприхода) ТОгда
						
						НовыйДокумент = Документы.РасходыТовара.СоздатьДокумент();
						НовыйДокумент.Дата = СтрокаОприхода.Период;
						НовыйДокумент.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружен автоматически") + " " + ТекущаяДата();
						НовыйДокумент.Склад = СтрокаОприхода.Склад; 	
						
					КонецЕсли;
				конецесли;
				
				Если ЗначениеЗаполнено(СтрокаОприхода.Номенклатура) Тогда
					
					СтрокаТоваров = НовыйДокумент.Товары.Добавить();
					СтрокаТоваров.Номенклатура 		= СтрокаОприхода.Номенклатура;
					СтрокаТоваров.СерияНоменклатуры = СтрокаОприхода.СерияНоменклатуры;
					СтрокаТоваров.Количество 		= СтрокаОприхода.Количество;
					СтрокаТоваров.Цена 				= СтрокаОприхода.Цена;
					СтрокаТоваров.Сумма 			= СтрокаОприхода.Сумма;
					СтрокаТоваров.ПроцентСкидки 	= СтрокаОприхода.ПроцентСкидки;
					
					если не СтрокаОприхода.Количество = 0 Тогда
						СтрокаТоваров.СуммаБезСкидки = СтрокаОприхода.Цена * СтрокаОприхода.Количество;
					иначе
						СтрокаТоваров.СуммаБезСкидки = СтрокаОприхода.Сумма;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			
			если не НовыйДокумент = Неопределено тогда
				ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить);
			КонецЕсли;
		КонецЕсли;
		
		ПодсистемаИЭИмпортЭкспортФС.ЗаписатьВЖурналИмпортноЭкспортныхОпераций(АдресФайла, , ТаблицаРасхода.Количество(), Ложь, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка реализаций, списаний из файла."));
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные загружены. Всего строк:") + СчетчикСтрок;
		Сообщение.Сообщить();
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при чтении файла:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
функция   ПроверитьСтрокуПоОтборам(СтрокаДокумента)
	
	Результат = Истина;
	
	Если НЕ СписокНоменклатурныхГрупп.Количество() = 0 
		и НЕ СписокНоменклатурныхГрупп.НайтиПоЗначению(СтрокаДокумента.Номенклатура.НоменклатурнаяГруппа) = Неопределено Тогда
		
		Результат = Ложь;
	КонецЕсли;	
	
	Если НЕ СписокСкладов.Количество() = 0 
		и НЕ СписокСкладов.НайтиПоЗначению(СтрокаДокумента.Склад) = Неопределено Тогда
		
		Результат = Ложь;
	КонецЕсли;	
	
	Если НЕ СписокПроизводителей.Количество() = 0 
		и НЕ СписокПроизводителей.НайтиПоЗначению(СтрокаДокумента.Номенклатура.Производитель) = Неопределено Тогда
		
		Результат = Ложь;
	КонецЕсли;	
	
	Если НЕ СписокРегионов.Количество() = 0
		и ((ЗначениеЗаполнено(СтрокаДокумента.Номенклатура.Производитель)
		и НЕ СписокРегионов.НайтиПоЗначению(СтрокаДокумента.Номенклатура.Производитель.Регион) = Неопределено)
		или (ЗначениеЗаполнено(СтрокаДокумента.Клиент) и не СписокРегионов.НайтиПоЗначению(СтрокаДокумента.Клиент = Неопределено))) Тогда
		
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат результат;
	
КонецФункции

&НаСервере
процедура ЗаписьНовогоДокумента(НовыйДокумент, запрещенопроводить = ложь)
	
	НовыйДокумент.ТовараВКоличестве = НовыйДокумент.Товары.Итог("Количество");
	НовыйДокумент.ТовараНаСумму 	= НовыйДокумент.Товары.Итог("Сумма");
	
	если не запрещенопроводить
		и Объект.ПытатьсяСразуПроводитьДокументыПриЗагрузке тогда
		
		Попытка 
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);	
			СозданДок 			= Объект.СозданныеДокументы.Добавить();
			СозданДок.Документ 	= НовыйДокумент.Ссылка;
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Попытка 
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);	
				СозданДок = Объект.СозданныеДокументы.Добавить();
				СозданДок.Документ = НовыйДокумент.Ссылка;
				
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при записи:") + " " + ОписаниеОшибки();
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
			КонецПопытки;	
		КонецПопытки;
		
	иначе
		Попытка 
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);	
			СозданДок = Объект.СозданныеДокументы.Добавить();
			СозданДок.Документ = НовыйДокумент.Ссылка;
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при записи:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		КонецПопытки;	
	конецесли;
	
КонецПроцедуры	

&НаСервере
Функция   ОбнаружитьНоменклатуруПоРеквизитам(СтруктураРеквизитов)
	
	Результат = Справочники.Номенклатура.ПустаяСсылка() ;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.НоменклатураОсновнойШтрихКод) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", СтруктураРеквизитов.НоменклатураОсновнойШтрихКод);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ссылка;
			
		иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.Номенклатура
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ ШтрихКоды.ШтрихКод = &ШтрихКод";
			
			Запрос.УстановитьПараметр("ШтрихКод", СтруктураРеквизитов.НоменклатураОсновнойШтрихКод);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Результат = ВыборкаДетальныеЗаписи.ссылка;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) 
		и ЗначениеЗаполнено(СтруктураРеквизитов.НоменклатураАртикул) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.Артикул = &Артикул
		|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Артикул", СтруктураРеквизитов.НоменклатураАртикул);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ссылка;
			
		КонецЕсли;			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.Номенклатура.НайтиПоНаименованию(СтруктураРеквизитов.НоменклатураНаименование) ;	
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ Номенклатура.Производитель.Наименование ПОДОБНО &НаименованиеПроизводитель
			|	И Номенклатура.НоменклатурнаяГруппа.Наименование ПОДОБНО &НаименованиеНоменклатурнаяГруппа";
			
			Запрос.УстановитьПараметр("НаименованиеПроизводитель", СтруктураРеквизитов.НоменклатураПроизводитель);
			Запрос.УстановитьПараметр("НаименованиеНоменклатурнаяГруппа", СтруктураРеквизитов.НоменклатураНоменклатурнаяГруппа);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				Результат = ВыборкаДетальныеЗаписи.ссылка;
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				
				Результат = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму");
				текстсообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура") + " " + СтруктураРеквизитов.НоменклатураНаименование + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не найдена.");
				если Объект.СоздаватьНовуюНоменклатуру тогда
					текстсообщения = текстсообщения + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Будет создана новая.");		
				иначе
					текстсообщения = текстсообщения + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Установлен товар_на_сумму.");		
				КонецЕсли;
				Сообщить(текстсообщения, СтатусСообщения.Важное);
				
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбнаружитьКлиента(КлиентНаименование, КлиентОКПО)
	
	Результат = Справочники.Клиенты.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(КлиентОКПО) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ОКПО = &ОКПО
		|УПОРЯДОЧИТЬ ПО Клиенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОКПО", КлиентОКПО);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.Клиенты.НайтиПоНаименованию(КлиентНаименование) ;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			
			Результат = Справочники.Клиенты.ФизическоеЛицо.Ссылка ;
			
			текстсообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент") + " " + КлиентНаименование + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не найден.");	
			если объект.СоздаватьНовуюНоменклатуру тогда
				текстсообщения = текстсообщения + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Будет создан новый.");		
			иначе
				текстсообщения = текстсообщения + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Установлен частный покупатель.");		
			КонецЕсли;
			Сообщить(текстсообщения, СтатусСообщения.Важное);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОбнаружитьКлиента

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.СтраницыОбработки.ТекущаяСтраница;
	СтраницыПанели  = Элементы.СтраницыОбработки.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.СтраницыВыгрузки.ТекущаяСтраница;
	СтраницыПанели  = Элементы.СтраницыВыгрузки.ПодчиненныеЭлементы;
	СтраницаПанели1 = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.СтраницыЗагрузки.ТекущаяСтраница;
	СтраницыПанели  = Элементы.СтраницыЗагрузки.ПодчиненныеЭлементы;
	СтраницаПанели2 = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002700", ЭтаФорма, Отказ, );	
	
	Если НЕ ОТказ ТОгда
		ВестиУчетПоКлиентам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;
		ВестиУчетРегионов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов");
		элементы.РегионНовыхКлиентов.Видимость 		= ВестиУчетПоКлиентам и ВестиУчетРегионов;
		элементы.ВидЦенДляНовыхКлиентов.Видимость 	= ВестиУчетПоКлиентам и ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
		ВестиУчетПроизводителейНоменклатуры 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПроизводителейНоменклатуры");
		элементы.ПараметрыНовогоКлиента.Видимость 	= ВестиУчетПоКлиентам;
		ИспользоватьСложныйМеханизмЦен				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") ;
		УчетПоСериям								= Параметрысеанса.ВестиУчетПоСериямНоменклатуры;
		
		ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ;
		
		Если ВестиУчетРегионов Тогда
			ОписаниеОграниченияПоРегионам			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отбор по Регионам для Клиентов и Поставщиков.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не для производителей номенклатуры.");	
		КонецЕсли;
		ВестиУчетПоСкладам							= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеРуководителю(Команда)
	
	АвтоПериодДляВыгрузкиРуководителю = Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы согласны, чтобы программа установила период выгрузки автоматически?") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("(Если прошлый пакет руководителем получен.)"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
	
	РуководительПодтвердилПрошлуюВыгрузку = АвтоПериодДляВыгрузкиРуководителю И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Руководитель удачно загрузил прошлый пакет выгрузки?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите имя архива для экспорта (выгрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла; 
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		
		ТекстОжидания = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет выгрузка данных руководителю. Ждите..");
		Состояние(ТекстОжидания, 50);
		
		Если Формирование(АвтоПериодДляВыгрузкиРуководителю, РуководительПодтвердилПрошлуюВыгрузку) Тогда
			
			Состояние(ТекстОжидания, 75);			
			ИмяФайлаTxt = "/data_out.tmp";
			
			если ВыгрузитьДанныеВФайл(ИмяФайлаTxt) тогда
				Состояние(ТекстОжидания, 90); 				
				САрхивировать(АдресФайла, ИмяФайлаTxt);
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил данные руководителю в файл:") + " " + АдресФайла, 2);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция   САрхивировать(АдресФайла, ИмяФайлаTxt)
	
	Каталог = КаталогВременныхФайлов();		
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	
	ЗаписьZIP =  Новый ЗаписьZipФайла(АдресФайла, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные руководителю"), , УровеньСжатияZIP.Максимальный);
	ЗаписьZIP.Добавить(Каталог + ИмяФайлаTxt);
	ЗаписьZIP.Записать();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка окончена.");
	Сообщение.Сообщить();
	
КонецФункции	

&НаСервере
Функция   Формирование(АвтоПериодДляВыгрузкиРуководителю = Ложь, РуководительПодтвердилПрошлуюВыгрузку = Ложь)
	
	Отказ = Ложь;
	
	ПодготовитьСпискиОтбора();	
	ЧтоВыгружено.Очистить();
	
	ТекДок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПоступленияТовара.Ссылка, ПоступленияТовара.Дата КАК Дата
	|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
	|ГДЕ ПоступленияТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И ПоступленияТовара.Проведен = ИСТИНА  %%1 %%2 
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ДвиженияДенег.Ссылка, ДвиженияДенег.Дата
	|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
	|ГДЕ ДвиженияДенег.Проведен = ИСТИНА И ДвиженияДенег.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания %%7 
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Инвентаризации.Ссылка, Инвентаризации.Дата
	|ИЗ Документ.Инвентаризации КАК Инвентаризации
	|ГДЕ Инвентаризации.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И Инвентаризации.Проведен = ИСТИНА  %%6 
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ КорректировкиИРегистрацияОстатков.Ссылка, КорректировкиИРегистрацияОстатков.Дата
	|ИЗ Документ.КорректировкиИРегистрацияОстатков КАК КорректировкиИРегистрацияОстатков
	|ГДЕ КорректировкиИРегистрацияОстатков.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И КорректировкиИРегистрацияОстатков.Проведен = ИСТИНА  
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПеремещенияТовара.Ссылка, ПеремещенияТовара.Дата
	|ИЗ Документ.ПеремещенияТовара КАК ПеремещенияТовара
	|ГДЕ ПеремещенияТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И ПеремещенияТовара.Проведен = ИСТИНА  %%5
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РасходыТовара.Ссылка, РасходыТовара.Дата
	|ИЗ Документ.РасходыТовара КАК РасходыТовара
	|ГДЕ РасходыТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания И РасходыТовара.Проведен = ИСТИНА %%3 %%4
	|УПОРЯДОЧИТЬ ПО Дата" ;
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	Если ВестиУчетПоСкладам
		и НЕ Объект.ОтборПоСкладам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ПоступленияТовара.Склад В(&Склады) ");		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", " И РасходыТовара.Склад В(&Склады) ");		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%5", " И ПеремещенияТовара.Склад В(&Склады) ");		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%6", " И Инвентаризации.Склад В(&Склады) ");		
		Запрос.УстановитьПараметр("Склады", СписокСкладов);
		
	КонецЕсли;
	
	Если ВестиУчетРегионов
		и НЕ Объект.ОтборПоРегионам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И естьNull(ПоступленияТовара.КлиентПоставщик.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%4", " И естьNull(РасходыТовара.КлиентПоставщик.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%7", " И естьNull(ДвиженияДенег.КлиентПоставщик.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.УстановитьПараметр("Регионы", СписокРегионов);
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%4", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%5", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%6", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%7", "");
	
	Если АвтоПериодДляВыгрузкиРуководителю Тогда
		
		ДатаНачала 	  = Константы.ДатаНачалаПериодаДляВыгрузкиРуководителю.Получить();
		ДатаОкончания = Константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Получить();
		ДатаНачалаПериодаПодтвержденнаяРуководителем    = Константы.ДатаНачалаПериодаПодтвержденнаяРуководителем.Получить();
		ДатаОкончанияПериодаПодтвержденнаяРуководителем = Константы.ДатаОкончанияПериодаПодтвержденнаяРуководителем.Получить() ;
		
		Если НЕ РуководительПодтвердилПрошлуюВыгрузку Тогда
			Если ДатаНачала > ДатаНачалаПериодаПодтвержденнаяРуководителем Тогда
				ДатаНачала = ДатаНачалаПериодаПодтвержденнаяРуководителем;
			КонецЕсли;
			Если ДатаОкончания < ДатаОкончанияПериодаПодтвержденнаяРуководителем Тогда
				ДатаОкончания = ДатаОкончанияПериодаПодтвержденнаяРуководителем;
			КонецЕсли;
		КонецЕсли;
		
	Иначе		
		ДатаНачала    = началоДня(Объект.ДатаНачала);
		ДатаОкончания = КонецДня(Объект.ДатаОкончания);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		ТекДок.ДобавитьСтроку(Сокрлп(Метаданные.Версия));
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			МассивЭлементов = Новый Массив;
			Отказ = ВыгрузитьДокумент(Выб.Ссылка, Выб.Ссылка.Метаданные().Имя, МассивЭлементов);
			
			если отказ тогда	
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет данных в этом периоде!");
		Сообщение.Сообщить();
		
		Отказ = Истина;		
	КонецЕсли;
	
	если АвтоПериодДляВыгрузкиРуководителю
		И РуководительПодтвердилПрошлуюВыгрузку
		И не отказ тогда
		
		Константы.ДатаНачалаПериодаПодтвержденнаяРуководителем.Установить(ДатаНачала);	
		Константы.ДатаОкончанияПериодаПодтвержденнаяРуководителем.Установить(ДатаОкончания);
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		Константы.ДатаНачалаПериодаДляВыгрузкиРуководителю.Установить(Дата);
		Константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Установить(Дата);
	КонецЕсли;
	
	Возврат не Отказ;
	
КонецФункции

Функция   ВыгрузитьДанныеВФайл(ИмяФайлаTxt)	
	
	Попытка 
		
		Каталог = КаталогВременныхФайлов();
		Попытка 
			УдалитьФайлы(Каталог + ИмяФайлаTxt);
		Исключение 	
		КонецПопытки;
		
		ТекДок.Записать(Каталог + ИмяФайлаTxt);
		
		Возврат Истина;
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при записи файла:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция   ВыгрузитьДокумент(Знач Ссылка, Знач ТипДокумента, МассивЭлементов)
	
	Отказ = Ложь;	
	
	если НЕ ЗначениеЗаполнено(Ссылка) тогда
		ТекДок.ДобавитьСтроку("NULL");
		
	иначе
		ТипДокумента = СтрЗаменить(ТипДокумента, "ДокументСсылка.", "");
		
		ТекДок.ДобавитьСтроку(ТипДокумента);
		ТекДок.ДобавитьСтроку(Ссылка.Номер);
		Попытка 
			ТекДок.ДобавитьСтроку(?(Ссылка.Проведен, "Проведен", "НеПроведен"));
		Исключение 	
			ТекДок.ДобавитьСтроку("");
		КонецПопытки;
		ТекДок.ДобавитьСтроку(Формат(Ссылка.Дата, "ДФ=ггггММддЧЧммсс"));
		
		МетаДок  = метаданные.Документы[ТипДокумента];
		Реквы 	 = МетаДок.Реквизиты;
		ТабЧасти = МетаДок.ТабличныеЧасти;
		
		Для Каждого РеквизитЭлемента Из Реквы Цикл
			
			РеквизитЭлементаТип = СтрокаТипаРеквизита(Ссылка, реквизитэлемента.имя);
			
			Отказ = ВыгрузитьРеквизит(Ссылка[РеквизитЭлемента.Имя], РеквизитЭлементаТип, МассивЭлементов);
			если отказ тогда	
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ отказ тогда
			Для Каждого ТабЧасть Из ТабЧасти Цикл
				
				РеквыТабЧасти = ТабЧасть.Реквизиты;
				ТекДок.ДобавитьСтроку(формат(Ссылка[ТабЧасть.Имя].Количество(), "ЧН=; ЧГ=0"));
				
				Для Каждого СтрокаДок Из Ссылка[ТабЧасть.Имя] Цикл
					
					Для Каждого РеквизитЭлемента Из РеквыТабЧасти Цикл
						
						РеквизитЭлементаТип = СтрокаТипаРеквизита(СтрокаДок, реквизитэлемента.имя);
						
						Отказ = ВыгрузитьРеквизит(СтрокаДок[РеквизитЭлемента.Имя], РеквизитЭлементаТип, МассивЭлементов);
						если отказ тогда	
							Прервать;
						КонецЕсли;	
						
					КонецЦикла;    				
				КонецЦикла;  			
			КонецЦикла;
			
		КонецЕсли;  	
	КонецЕсли;  	
	
	Возврат Отказ;
	
КонецФункции

Функция   ВыгрузитьРеквизит(ЗначениеРеквизита, ТипРеквизита, МассивЭлементов = Неопределено);
	
	Отказ = Ложь;
	
	Если ТипРеквизита = "Булево" Тогда
		ТекДок.ДобавитьСтроку(Формат(ЗначениеРеквизита, "БЛ=FALSE; БИ=TRUE"));
		
	ИначеЕсли ТипРеквизита = "Строка" Тогда
		ТекДок.ДобавитьСтроку(Стрзаменить(ЗначениеРеквизита, Символы.ПС, "ПЕРЕНОССТРОКИ"));
		
	ИначеЕсли ТипРеквизита = "Число" Тогда
		если ЗначениеРеквизита = 0 тогда
			ТекДок.ДобавитьСтроку("0");
		Иначеесли ЗначениеРеквизита = 1 тогда
			ТекДок.ДобавитьСтроку("1");
		иначе
			ТекДок.ДобавитьСтроку(Формат(ЗначениеРеквизита, "ЧЦ=15; ЧДЦ=4; ЧРД=.; ЧН=; ЧГ=0"));	
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = "Дата" Тогда
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ТекДок.ДобавитьСтроку("00010101000000");
		Иначе
			ТекДок.ДобавитьСтроку(Формат(ЗначениеРеквизита, "ДФ=ггггММддЧЧммсс"));
		КонецЕсли;		
		
	ИначеЕсли ТипРеквизита = "NULL" Тогда
		ТекДок.ДобавитьСтроку("NULL");		
		Если ЗначениеРеквизита = Неопределено Тогда
			ТекДок.ДобавитьСтроку("NULL");
		иначе
			ТекДок.ДобавитьСтроку(типзнч(ЗначениеРеквизита));		
		КонецЕсли;		
		ТекДок.ДобавитьСтроку(ЗначениеРеквизита);
		
	ИначеЕсли НЕ Найти(ТипРеквизита, "СправочникСсылка") = 0 Тогда
		ВыгрузитьСправочник(ЗначениеРеквизита, ТипРеквизита, МассивЭлементов);
		
	ИначеЕсли НЕ Найти(ТипРеквизита, "ДокументСсылка") = 0 Тогда
		ВыгрузитьДокумент(ЗначениеРеквизита, ТипРеквизита, МассивЭлементов);
		
	ИначеЕсли НЕ Найти(ТипРеквизита, "ПеречислениеСсылка") = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ТекДок.ДобавитьСтроку("ПУСТО");
		Иначе
			ТекДок.ДобавитьСтроку(Сокрлп(Перечисления[стрзаменить(ТипРеквизита, "ПеречислениеСсылка.", "")].Индекс(ЗначениеРеквизита)));
		КонецЕсли;		
		
	Иначе
		ТекДок.ДобавитьСтроку(Стрзаменить(ЗначениеРеквизита, Символы.ПС, "ПЕРЕНОССТРОКИ"));
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция   СпецКод(ТипСправочника, Ссылка) Экспорт
	
	Результат = "";
	
	ТипСправочника = Врег(ТипСправочника);
	Если ТипСправочника = "НОМЕНКЛАТУРА"
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		и НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = ОбщийМодульПовтор.ПолучитьШтрихКодНоменклатурыИлиСерии(Ссылка, Ложь);
		
	ИначеЕсли (ТипСправочника = "КЛИЕНТЫ" 
		ИЛИ ТипСправочника = "ПОСТАВЩИКИ" 
		ИЛИ ТипСправочника = "ОРГАНИЗАЦИИ" 
		ИЛИ ТипСправочника = "СОТРУДНИКИ")
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда
		
		Результат = Ссылка.ОКПО;
		
	ИначеЕсли ТипСправочника = "СЕРИИНОМЕНКЛАТУРЫ"
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		и НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = ОбщийМодульПовтор.ПолучитьШтрихКодНоменклатурыИлиСерии(Ссылка, Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //СпецКод

Функция   ВыгрузитьСправочник(Знач Ссылка, Знач ТипСправочника, МассивЭлементов);
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		ТекДок.ДобавитьСтроку("ПУСТО");
		
	Иначеесли НЕ ЧтоВыгружено.НайтиПоЗначению(ссылка) = Неопределено тогда
		ТипСправочника = СтрЗаменить(ТипСправочника, "СправочникСсылка.", "");
		ТекДок.ДобавитьСтроку(ТипСправочника);			
		
		ТекДок.ДобавитьСтроку("БЫЛ");
		
		ТекДок.ДобавитьСтроку(Ссылка.Код);
		Если ОбщийМодульПовтор.СпецСправочник(ТипСправочника) Тогда
			ТекДок.ДобавитьСтроку(СпецКод(ТипСправочника, Ссылка));
		КонецЕсли;
		ТекДок.ДобавитьСтроку(Ссылка.Наименование);
		
	иначе
		Пропустить	= ПроверитьЭлемент(Ссылка, ТипСправочника);
		
		Если НЕ Пропустить Тогда  		
			ЧтоВыгружено.Добавить(ссылка);
			
			ТипСправочника = СтрЗаменить(ТипСправочника, "СправочникСсылка.", "");
			ТекДок.ДобавитьСтроку(ТипСправочника);			
			
			ТекДок.ДобавитьСтроку("НОВ");
			ТекДок.ДобавитьСтроку(Ссылка.Код);
			Если ОбщийМодульПовтор.СпецСправочник(ТипСправочника) Тогда
				ТекДок.ДобавитьСтроку(СпецКод(ТипСправочника, Ссылка));
			КонецЕсли;
			ТекДок.ДобавитьСтроку(Ссылка.Наименование);
			
			МетаДок 	= метаданные.Справочники[ТипСправочника];
			Реквы 		= МетаДок.Реквизиты;
			ТабЧасти 	= МетаДок.ТабличныеЧасти;
			
			Для Каждого РеквизитЭлемента Из Реквы Цикл
				
				РеквизитЭлементаТип = СтрокаТипаРеквизита(Ссылка, реквизитэлемента.имя);
				
				Отказ = ВыгрузитьРеквизит(Ссылка[РеквизитЭлемента.Имя], РеквизитЭлементаТип);
				если отказ тогда	
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ отказ тогда
				Для Каждого ТабЧасть Из ТабЧасти Цикл
					
					РеквыТабЧасти = ТабЧасть.Реквизиты;
					
					ТекДок.ДобавитьСтроку(формат(Ссылка[ТабЧасть.Имя].Количество(), "ЧН=; ЧГ=0"));
					
					Для Каждого СтрокаДок Из Ссылка[ТабЧасть.Имя] Цикл
						
						Для Каждого РеквизитЭлемента Из РеквыТабЧасти Цикл
							
							РеквизитЭлементаТип = СтрокаТипаРеквизита(СтрокаДок, реквизитэлемента.имя);
							
							Отказ = ВыгрузитьРеквизит(СтрокаДок[РеквизитЭлемента.Имя], РеквизитЭлементаТип);
							если отказ тогда	
								Прервать;
							КонецЕсли;	
							
						КонецЦикла;    				
					КонецЦикла;  			
				КонецЦикла;	
			КонецЕсли;  		
			
		Иначе
			ТекДок.ДобавитьСтроку("ПРОП");
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция   ПроверитьЭлемент(Ссылка, ТипСправочника)
	
	Пропустить = Ложь;
	
	если ЕстьОтборы тогда
		
		Если ВестиУчетПроизводителейНоменклатуры
			и НЕ СписокПроизводителей.Количество() = 0 
			и ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Пропустить = СписокПроизводителей.НайтиПоЗначению(Ссылка.Производитель) = Неопределено;
			
		ИначеЕсли ВестиУчетПроизводителейНоменклатуры
			и НЕ СписокПроизводителей.Количество() = 0 
			и ТипЗнч(Ссылка) = Тип("СправочникСсылка.Производители") Тогда
			
			Пропустить = СписокПроизводителей.НайтиПоЗначению(Ссылка) = Неопределено;
			
		КонецЕсли;
		
		Если НЕ Пропустить		
			и ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС
			и НЕ СписокНоменклатурныхГрупп.Количество() = 0 
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Пропустить = СписокНоменклатурныхГрупп.НайтиПоЗначению(Ссылка.НоменклатурнаяГруппа) = Неопределено;
			
		ИначеЕсли НЕ Пропустить		
			и ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС
			и НЕ СписокНоменклатурныхГрупп.Количество() = 0 
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			
			Пропустить = СписокНоменклатурныхГрупп.НайтиПоЗначению(Ссылка) = Неопределено;
			
		КонецЕсли;
		
		Если НЕ Пропустить
			И ВестиУчетПоСкладам
			и НЕ СписокСкладов.Количество() = 0 
			и ТипЗнч(Ссылка) = Тип("СправочникСсылка.Склады") Тогда
			
			Пропустить = СписокСкладов.НайтиПоЗначению(Ссылка) = Неопределено;
			
		КонецЕсли;
		
		Если НЕ Пропустить
			И ВестиУчетРегионов
			и НЕ СписокРегионов.Количество() = 0 
			и ТипЗнч(Ссылка) = Тип("СправочникСсылка.Регионы") Тогда
			
			Пропустить = СписокРегионов.НайтиПоЗначению(Ссылка) = Неопределено;
			
		ИначеЕсли НЕ Пропустить
			И ВестиУчетРегионов
			и НЕ СписокРегионов.Количество() = 0 
			и (ТипЗнч(Ссылка) = Тип("СправочникСсылка.Клиенты")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.Поставщики")) ТОгда
			
			Пропустить = СписокРегионов.НайтиПоЗначению(Ссылка.Регион) = Неопределено;
			
		КонецЕсли;      	
	КонецЕсли;
	
	Возврат Пропустить;
	
КонецФункции //ПроверитьНоменклатуру

&НаКлиенте
Процедура ЗагрузитьДанныеРуководителя(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();	
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл архива для импорта(загрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; //АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	Ложь;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка данных.. ..Ждите!"));
		ЗагрузитьДанныеРуководителяНаСервере(АдресФайла);
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил данные из файла:") + " " + АдресФайла, 2);
		
	КонецЕсли; //когда файл АдресФайла выбран	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеРуководителяНаСервере(АдресФайла)
	
	Попытка 
		УстановитьМонопольныйРежим(Истина);
	Исключение 	
	КонецПопытки;
	
	Если НеВыводитьСообщенияИПредупрежденияПриЗагрузке Тогда
		СостояниеПараметраСеансаНеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
		ПараметрыСеанса.НеВыводитьСообщений = Истина;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов();
	
	ИмяВременногоФайла = Каталог + "/data_out.tmp";
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	
	ФайлАрхива = Новый ЧтениеZIPФайла(АдресФайла); 
	ФайлАрхива.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();     
	
	Объект.СозданныеДокументы.Очистить();
	ПодготовитьСпискиОтбора();
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	
	ТекДок.Очистить();
	ТекДок.Прочитать(Каталог + "/data_out.tmp");
	
	КоличествоСтрок = ТекДок.КоличествоСтрок();
	сч = 1;
	ВерсияВФайле 	= СтрЗаменить(Сокрлп(ТекДок.ПолучитьСтроку(сч)), "F", "");	
	сч = сч + 1;
	
	ВерсияЗдесь 	= СтрЗаменить(Сокрлп(Метаданные.Версия), "F", "");
	
	Если НЕ ВерсияВФайле = ВерсияЗдесь Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия файла:") + " " + ВерсияВФайле + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не совпадает с версией конфигурации:" + ВерсияЗдесь);
		Сообщение.Сообщить();	
		
		возврат;
	КонецЕсли;
	
	пока сч < КоличествоСтрок Цикл
		
		пропустить = Ложь;
		
		ТипДокумента = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
		отказ = загрузитьдокумент(, ТипДокумента, сч, пропустить);
		Если отказ Тогда
			прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеВыводитьСообщенияИПредупрежденияПриЗагрузке Тогда
		ПараметрыСеанса.НеВыводитьСообщений = СостояниеПараметраСеансаНеВыводитьСообщений;
	КонецЕсли;
	
	Попытка 
		УстановитьМонопольныйРежим(Ложь);
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

Функция   ЗагрузитьРеквизит(ЗначениеРеквизита, ТипРеквизита, сч, пропустить, ЗначениеТип, ОпределенныйЭлемент = Неопределено);
	
	Отказ = Ложь;
	попытка
		
		Если ТипРеквизита = "Булево" Тогда
			
			Значение = ТекДок.ПолучитьСтроку(сч);
			Если Значение = "TRUE" Тогда
				ЗначениеРеквизита = Истина;
			Иначе
				ЗначениеРеквизита = Ложь;
			КонецЕсли;
			сч = сч + 1;
			
		ИначеЕсли ТипРеквизита = "Строка" Тогда
			ЗначениеРеквизита = стрзаменить(ТекДок.ПолучитьСтроку(сч), "ПЕРЕНОССТРОКИ", Символы.ПС);
			сч = сч + 1;
			
		ИначеЕсли ТипРеквизита = "Число" Тогда  			
			ЗначениеРеквизита = число(ТекДок.ПолучитьСтроку(сч));
			сч = сч + 1;
			
		ИначеЕсли ТипРеквизита = "Дата" Тогда   			
			ЗначениеРеквизита = Дата(ТекДок.ПолучитьСтроку(сч));
			сч = сч + 1;
			
		ИначеЕсли ТипРеквизита = "NULL" Тогда 
			ТипТут = ТекДок.ПолучитьСтроку(сч);
			
			сч = сч + 1;
			Если ТипТут = "NULL" Тогда
				ЗначениеРеквизита = неопределено;
				сч = сч + 1;
				сч = сч + 1;
				
			ИначеЕсли ТипТут = "ПУСТО" Тогда
				ЗначениеРеквизита = неопределено;				
			иначе				
				ЗначениеРеквизита = ЗагрузитьСправочник("СправочникСсылка." + типТут, сч, пропустить, Истина, ОпределенныйЭлемент);
			КонецЕсли;
			
		ИначеЕсли НЕ Найти(ТипРеквизита, "СправочникСсылка") = 0 Тогда
			ЗначениеРеквизита = ЗагрузитьСправочник(ТипРеквизита, сч, пропустить, , ОпределенныйЭлемент);
			
		ИначеЕсли НЕ Найти(ТипРеквизита, "ДокументСсылка") = 0 Тогда
			ЗначениеРеквизита = ЗагрузитьДокумент(Истина, ТипРеквизита, сч, пропустить, ОпределенныйЭлемент);
			
		ИначеЕсли НЕ Найти(ТипРеквизита, "ПеречислениеСсылка") = 0 Тогда
			Значение = ТекДок.ПолучитьСтроку(сч);
			
			если не Значение = "ПУСТО" Тогда
				ТипРеквизитаДоп = СтрЗаменить(ТипРеквизита, "ПеречислениеСсылка.", "");
				Значение = Число(Значение);
				
				ЗначениеРеквизита = перечисления[ТипРеквизитаДоп][Значение];	
			КонецЕсли;
			сч = сч + 1;
			
		Иначе
			ЗначениеРеквизита = стрзаменить(ТекДок.ПолучитьСтроку(сч), "ПЕРЕНОССТРОКИ", Символы.ПС);
			сч = сч + 1;
			
		КонецЕсли;        		
		
	исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "№: " + сч + " ЗначениеТип: " + ЗначениеТип + " ЗначениеРеквизита: " + ЗначениеРеквизита + " ТипРеквизита: " + ТипРеквизита + " Пропустить: " + пропустить + " :" + ОписаниеОшибки();
		Сообщение.Сообщить();
		сч = сч + 1;
		
		отказ = истина;
		
	конецпопытки;
	
	Возврат Отказ;
	
КонецФункции

Функция   ЗагрузитьСправочник(Знач ТипСправочника, сч, Знач пропустить, ТипПрочитан = Ложь, ОпределенныйЭлемент = Ложь);
	
	ТипСправочника = СтрЗаменить(ТипСправочника, "СправочникСсылка.", "");
	
	если не ТипПрочитан тогда
		ЗначениеТип = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
	иначе
		ЗначениеТип = ТипСправочника;
	КонецЕсли;	
	
	Если ЗначениеТип = "ПУСТО" Тогда  		
		
		попытка
			Возврат Справочники[ТипСправочника].ПустаяССылка();
		исключение
			возврат неопределено;
		конецпопытки;
		
	ИначеЕсли НЕ ЗначениеТип = "ПРОП"
		и не ЗначениеТип = "NULL" Тогда  		
		
		ЗначениеБылНов = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
		ЗначениеКод = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
		СпецКод = "";
		Если ОбщийМодульПовтор.СпецСправочник(ТипСправочника) Тогда
			СпецКод = СокрЛП(ТекДок.ПолучитьСтроку(сч));
			сч = сч + 1;	
		КонецЕсли;
		
		ЗначениеНаименование = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
		Если ОпределенныйЭлемент = Неопределено Тогда
			Запрос = Новый Запрос;
			Если не СпецКод = "" Тогда
				Запрос.Текст = ОбщийМодульПовтор.ПолучитьТекстЗапросаПоискаСпецСправочника(ТипСправочника);
				
				если Запрос.Текст = "НШК" Тогда
					ОбъектСсылка = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(СпецКод, Ложь, Истина);
					
					РезультатЗапросаПустой = НЕ ЗначениеЗаполнено(ОбъектСсылка);
					Если РезультатЗапросаПустой Тогда
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + ТипСправочника + " КАК С ГДЕ С.Наименование = &ЗначениеНаименование ";// И С.Код = &ЗначениеКод";
						Запрос.УстановитьПараметр("ЗначениеНаименование", ЗначениеНаименование);
						
						РезультатЗапроса = Запрос.Выполнить();
						РезультатЗапросаПустой = РезультатЗапроса.Пустой();
						если не РезультатЗапросаПустой тогда
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							ВыборкаДетальныеЗаписи.Следующий();
							
							ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка;	
						КонецЕсли;                           	
					КонецЕсли;
					
				Иначе
					Запрос.УстановитьПараметр("СпецКод", СпецКод);	
					РезультатЗапроса = Запрос.Выполнить();
					РезультатЗапросаПустой = РезультатЗапроса.Пустой();		
					если не РезультатЗапросаПустой тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						ВыборкаДетальныеЗаписи.Следующий();
						
						ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка;	
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + ТипСправочника + " КАК С ГДЕ С.Наименование = &ЗначениеНаименование ";// И С.Код = &ЗначениеКод";
				Запрос.УстановитьПараметр("ЗначениеНаименование", ЗначениеНаименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				РезультатЗапросаПустой = РезультатЗапроса.Пустой();
				если не РезультатЗапросаПустой тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					
					ОбъектСсылка = ВыборкаДетальныеЗаписи.Ссылка;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		если ЗначениеБылНов = "БЫЛ" тогда
			Если не ОпределенныйЭлемент = Неопределено Тогда
				Возврат ОпределенныйЭлемент;
			Иначеесли не РезультатЗапросаПустой тогда
				Возврат ОбъектСсылка;
			иначе
				Возврат неопределено;	
			КонецЕсли;
			
		иначе
			Если НЕ ОпределенныйЭлемент = Неопределено Тогда
				
				Пропустить 		= ПроверитьЭлемент(ОпределенныйЭлемент, ТипСправочника) ;
				Если пропустить Тогда
					ОбъектС = Справочники[ТипСправочника].Создатьэлемент();
				Иначе
					ОбъектС = ОпределенныйЭлемент.ПолучитьОбъект();
				КонецЕсли;
				
			Иначе
				если РезультатЗапросаПустой тогда
					ОбъектС = Справочники[ТипСправочника].Создатьэлемент();
					Если НЕ ЗначениеЗаполнено(Справочники[ТипСправочника].НайтиПоКоду(ЗначениеКод)) Тогда
						ОбъектС.Код	= ЗначениеКод;
					КонецЕсли;				
					ОбъектС.Наименование = ЗначениеНаименование;
					
				иначеесли объект.ЗаменитьДанныеВСуществующихКарточкахСправочников тогда
					
					Пропустить 		= ПроверитьЭлемент(ОбъектСсылка, ТипСправочника) ;
					Если пропустить Тогда
						ОбъектС = Справочники[ТипСправочника].Создатьэлемент();
					Иначе
						ОбъектС = ОбъектСсылка.ПолучитьОбъект();
					КонецЕсли;
					
				иначе
					СсылкуВернуть 	= ОбъектСсылка;
					ОбъектС 		= Справочники[ТипСправочника].Создатьэлемент();
					пропустить 		= истина;
					
				КонецЕсли;	  		
			КонецЕсли;
			
			МетаДок 	= метаданные.Справочники[ТипСправочника];
			Реквы 		= МетаДок.Реквизиты;
			ТабЧасти 	= МетаДок.ТабличныеЧасти;
			отказ		= Ложь;
			
			Для Каждого РеквизитЭлемента Из Реквы Цикл
				
				РеквизитЭлементаТип = СтрокаТипаРеквизита(ОбъектС, реквизитэлемента.имя);
				
				ЗагрузитьРеквизит(ОбъектС[РеквизитЭлемента.Имя], РеквизитЭлементаТип, сч, пропустить, ЗначениеТип);
				
			КонецЦикла;
			
			Если НЕ отказ тогда
				Для Каждого ТабЧасть Из ТабЧасти Цикл
					
					РеквыТабЧасти = ТабЧасть.Реквизиты;					
					//	сч = сч + 1;
					ЧислоСтрок =  Число(ТекДок.ПолучитьСтроку(сч));
					сч = сч + 1;
					
					Для счетчикстрок = 1 по числострок Цикл
						
						СтрокаДок = ОбъектС[ТабЧасть.Имя].Добавить();
						
						Для Каждого РеквизитЭлемента Из РеквыТабЧасти Цикл
							
							РеквизитЭлементаТип = СтрокаТипаРеквизита(СтрокаДок, реквизитэлемента.имя);
							
							ЗагрузитьРеквизит(СтрокаДок[РеквизитЭлемента.Имя], РеквизитЭлементаТип, сч, пропустить, ЗначениеТип);
							
						КонецЦикла;    				
					КонецЦикла;  			
				КонецЦикла;	
			КонецЕсли;  		
			
			если не пропустить тогда
				Попытка 
					ОбъектС.Записать();			
					Возврат ОбъектС.ссылка;
					
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
					Возврат неопределено;	
					
				КонецПопытки;
				
			Иначе
				Возврат СсылкуВернуть;
			КонецЕсли;              	
			
		КонецЕсли;	
	КонецЕсли;
	
	
КонецФункции

Функция   ЗагрузитьДокумент(ВозвращатьЗначение = ложь, Знач ТипДокумента, сч, пропустить, ОпределенныйЭлемент = Ложь)
	
	Если ВозвращатьЗначение Тогда
		ЗначениеТип = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
	Иначе
		ЗначениеТип = ТипДокумента;
	КонецЕсли;      	
	
	отказ = ложь;
	Если не ЗначениеТип= "NULL" тогда
		
		попытка
			номердок = ТекДок.ПолучитьСтроку(сч);
			сч = сч + 1;
			
			СтрокаПроводить = ТекДок.ПолучитьСтроку(сч);
			Проводить = СтрокаПроводить = "Проведен";
			сч = сч + 1;
			
			датадок = дата(ТекДок.ПолучитьСтроку(сч));
			сч = сч + 1;
			
			Если НЕ ОпределенныйЭлемент = Неопределено Тогда
				
				пропустить = ложь;
				ОбъектД = ОпределенныйЭлемент.ПолучитьОбъект();
				
			Иначе
				
				Если объект.ОграничитьПериодЗагрузкиДокументов
					и датадок >= Началодня(объект.ДатаНачала)
					и датадок <= конецдня(Объект.ДатаОкончания) Тогда
					
					Пропустить = Истина;
					ОбъектД = документы[ТипДокумента].СоздатьДокумент();
					
				иначе
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Д.Ссылка ИЗ Документ." + ТипДокумента + " КАК Д ГДЕ Д.Номер = &Номер "; // И Д.Дата = &Дата";
					
					//Запрос.УстановитьПараметр("Дата", ДатаДок);
					Запрос.УстановитьПараметр("Номер", НомерДок);
					
					пропустить = ложь;
					
					РезультатЗапроса = Запрос.Выполнить();
					если РезультатЗапроса.Пустой() тогда
						ОбъектД = документы[ТипДокумента].СоздатьДокумент();
						ОбъектД.Номер 	= НомерДок;
						ОбъектД.Дата 	= ДатаДок;
						
					иначеесли объект.ЗаменитьВсеДанныеВСуществующихДокументах тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						ВыборкаДетальныеЗаписи.Следующий();
						ОбъектД = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						ОбъектД.Дата 	= ДатаДок;
						
					иначе
						пропустить = истина;
						ОбъектД = документы[ТипДокумента].СоздатьДокумент();
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			МетаДок  = метаданные.Документы[ТипДокумента];								
			Реквы 	 = МетаДок.Реквизиты;
			ТабЧасти = МетаДок.ТабличныеЧасти;
			
			Для Каждого РеквизитЭлемента Из Реквы Цикл
				
				РеквизитЭлементаТип = СтрокаТипаРеквизита(ОбъектД.ссылка, реквизитэлемента.имя);
				
				Отказ = ЗагрузитьРеквизит(ОбъектД[РеквизитЭлемента.Имя], РеквизитЭлементаТип, сч, пропустить, ЗначениеТип);
				если отказ тогда	
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ отказ тогда
				Для Каждого ТабЧасть Из ТабЧасти Цикл
					
					РеквыТабЧасти = ТабЧасть.Реквизиты;
					
					ЧислоСтрок =  Число(ТекДок.ПолучитьСтроку(сч));
					сч = сч + 1;
					
					Для счетчикстрок = 1 по числострок Цикл   						
						СтрокаДок = ОбъектД[ТабЧасть.Имя].Добавить();
						
						Для Каждого РеквизитЭлемента Из РеквыТабЧасти Цикл
							
							РеквизитЭлементаТип = СтрокаТипаРеквизита(СтрокаДок, реквизитэлемента.имя);
							
							Отказ = ЗагрузитьРеквизит(СтрокаДок[РеквизитЭлемента.Имя], РеквизитЭлементаТип, сч, пропустить, ЗначениеТип);
							если отказ тогда	
								Прервать;
							КонецЕсли;	
							
						КонецЦикла;    				
					КонецЦикла;  			
				КонецЦикла;	
			КонецЕсли; 
			
			если не отказ
				и не пропустить тогда
				
				попытка
					ОбъектД.Записать(?(Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				исключение
					попытка
						ОбъектД.Записать(РежимЗаписиДокумента.Запись);	
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Провести документ не удалось:") + " " + ОбъектД + " " + ОписаниеОшибки();
						Сообщение.Сообщить();
						
					исключение
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записать документ не удалось:") + " " + ОбъектД + " " + ОписаниеОшибки();
						Сообщение.Сообщить();
						пропустить = истина;
					конецпопытки;
				конецпопытки;
				
				если не пропустить тогда
					СтрДок = объект.СозданныеДокументы.Добавить();
					СтрДок.Документ = ОбъектД.Ссылка;
					
					если ВозвращатьЗначение тогда
						Возврат ОбъектД.ссылка;
					конецесли;
				КонецЕсли;          	
			КонецЕсли;
			
		исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "" + сч + " " + ОписаниеОшибки();
			Сообщение.Сообщить();
			
			отказ = истина;
		конецпопытки;
		
	КонецЕсли;	
	
	Возврат отказ;
	
КонецФункции

&НаСервере
Функция   СтрокаТипаРеквизита(объектик, реквизитэлементаимя) 
	
	ТипТут = типзнч(объектик[реквизитэлементаимя]);
	
	Возврат ВыяснитьТип(ТипТут);
	
КонецФункции

Функция   ВыяснитьТип(Знач ТипТут)
	
	если типтут = тип("Строка") тогда
		РеквизитЭлементаТип = "Строка";	
		
	Иначеесли типтут = тип("Булево") тогда
		РеквизитЭлементаТип = "Булево";	
		
	иначеесли типтут = тип("Число") тогда
		РеквизитЭлементаТип = "Число";        		
		
	иначеесли типтут = тип("Дата") тогда
		РеквизитЭлементаТип = "Дата";
		
	иначе
		НайденыМета = Метаданные.НайтиПоТипу(ТипТут);
		если НЕ НайденыМета = Неопределено Тогда
			
			РеквизитЭлементаТип = СтрЗаменить(НайденыМета.ПолноеИмя(), ".", "Ссылка.");
		иначе
			РеквизитЭлементаТип = "NULL";
		конецесли;                
		
	КонецЕсли;
	
	Возврат РеквизитЭлементаТип;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНастройкиПрограммы(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл настроек") + " (*.ini)|*.ini";
	ДиалогРасширение = "ini";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите имя файла для экспорта (выгрузки) настроек:");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла 		= ДиалогВыбФайла.ПолноеИмяФайла;
		
		ТекстОжидания 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет выгрузка настроек программы. Ждите..");
		Состояние(ТекстОжидания);
		
		ВыгрузитьНастройкиПрограммыНаСервере(АдресФайла);
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил настройки в файл:") + " " + АдресФайла, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНастройкиПрограммыНаСервере(АдресФайла)
	
	ТекДок.Очистить();
	ТекДок.ДобавитьСтроку(Сокрлп(Метаданные.Версия));
	
	Для Каждого Константа Из метаданные.Константы Цикл
		
		ЗначениеКонстанты = Константы[Константа.Имя].получить();		
		РеквизитЭлементаТип = ВыяснитьТип(типзнч(ЗначениеКонстанты));
		ВыгрузитьРеквизит(ЗначениеКонстанты, РеквизитЭлементаТип);
		
	КонецЦикла;
	
	ТекДок.Записать(АдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПрограммы(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы заменить ВСЕ настройки программы на данные из файла?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		АдресФайла = ПолучитьОтносительныйАдресНаСервере();	
		
		ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл настроек") + " (*.ini)|*.ini";
		ДиалогРасширение = "ini";
		ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл настроек для импорта(загрузки):");
		ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; 
		ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
		ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
		ДиалогВыбФайла.МножественныйВыбор		=	Ложь;
		ДиалогВыбФайла.ПредварительныйПросмотр	=	Ложь;
		ДиалогВыбФайла.ИндексФильтра			=	0;
		ДиалогВыбФайла.ПроверятьСуществованиеФайла	=	Истина;
		
		Если ДиалогВыбФайла.Выбрать() Тогда
			
			АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка настроек программы.. ..Ждите!"));
			ЗагрузитьНастройкиПрограммыНаСервере(АдресФайла);
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил данные из файла:") + " " + АдресФайла, 2);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиПрограммыНаСервере(АдресФайла)
	
	Попытка 
		///УстановитьМонопольныйРежим(Истина);
	Исключение 	
	КонецПопытки;
	
	ТекДок.Очистить();
	Попытка
		ТекДок.Прочитать(АдресФайла);
		сч = 1;
		
		ВерсияВФайле = СтрЗаменить(Сокрлп(ТекДок.ПолучитьСтроку(сч)), "F", "");	
		сч = сч + 1;
		
		ВерсияЗдесь  = СтрЗаменить(Сокрлп(Метаданные.Версия), "F", "");
		Если НЕ ВерсияВФайле = ВерсияЗдесь Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия файла:") + " " + ВерсияВФайле + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не совпадает с версией конфигурации:" + ВерсияЗдесь);
			Сообщение.Сообщить();	
			
			возврат;
		КонецЕсли;
		
		МассиваКонстант = Новый Массив;
		Для Каждого Константа Из метаданные.Константы Цикл
			МассиваКонстант.Добавить(Константа.Имя);
		КонецЦикла;
		
		Для Каждого КонстантаИмя Из МассиваКонстант Цикл
			
			РеквизитЭлементаТип = ВыяснитьТип(типзнч(Константы[КонстантаИмя].Получить()));
			к = Константы[КонстантаИмя].Получить();
			ЗагрузитьРеквизит(к, РеквизитЭлементаТип, сч, ложь, "Константа");
			
			если не КонстантаИмя = "ВерсияПрограммы" 
				и не КонстантаИмя = "ИспользоватьНаборыТоваров"
				и не КонстантаИмя = "ДатаНачалаПериодаДляВыгрузкиРуководителю"
				и не КонстантаИмя = "ДатаНачалаПериодаПодтвержденнаяРуководителем"
				и не КонстантаИмя = "ЗаконченаПервоначальнаяНастройка"
				и не КонстантаИмя = "ДатаОкончанияПериодаДляВыгрузкиРуководителю"
				и не КонстантаИмя = "ДатаОкончанияПериодаПодтвержденнаяРуководителем" тогда
				
				Константы[КонстантаИмя].Установить(к);   	
			КонецЕсли;
			
		КонецЦикла;	
		
		Константы.ЗаконченаПервоначальнаяНастройка.Установить(Истина) ;
		ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
		ОбновитьПовторноИспользуемыеЗначения();
		
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка 
		///		УстановитьМонопольныйРежим(Ложь);
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДеньгиТоваровИВзаиморасчетов(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите имя архива для экспорта (выгрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла; //АДРЕС
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		
		ТекстОжидания = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет выгрузка данных об остатках. Ждите..");
		Состояние(ТекстОжидания, 50);
		
		Если ВыгрузитьДеньгиТоваровИВзаиморасчетовНаСервере() Тогда
			Состояние(ТекстОжидания, 75);
			ИмяФайлаTxt = "/data_now_out.tmp";
			
			если ВыгрузитьДанныеВФайл(ИмяФайлаTxt) тогда
				Состояние(ТекстОжидания, 90); 				
				САрхивировать(АдресФайла, ИмяФайлаTxt);	
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил данные об остатках в файл:") + " " + АдресФайла, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ВыгрузитьДеньгиТоваровИВзаиморасчетовНаСервере()
	
	Отказ = Ложь;
	
	ПодготовитьСпискиОтбора();
	
	ЧтоВыгружено.Очистить();
	
	ТекДок.Очистить();
	ТекДок.ДобавитьСтроку(Сокрлп(Метаданные.Версия));
	ТекДок.ДобавитьСтроку(формат(конецдня(объект.ДатаОкончания), "ДФ=ггггММддЧЧммсс"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ДеньгиОстатки.Валюта, ДеньгиОстатки.ФормаОплаты,
	|	ДеньгиОстатки.СуммаОстаток, ДеньгиОстатки.СуммаВВалютеОстаток,
	|	ДеньгиОстатки.ХранилищеДенег
	|ИЗ РегистрНакопления.Деньги.Остатки(&ДатаОкончания, ) КАК ДеньгиОстатки";
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ТекДок.ДобавитьСтроку("ДЕНЬГИ");
			
			ЗначениеТут = Выб.Валюта;		
			РеквизитЭлементаТип = "СправочникСсылка.Валюты";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.ФормаОплаты;		
			РеквизитЭлементаТип = "ПеречислениеСсылка.ФормыОплаты";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.ХранилищеДенег;		
			РеквизитЭлементаТип = "СправочникСсылка.ХранилищаДенег";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаВВалютеОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла; 		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.Клиент, РасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОкончания, ) КАК РасчетыОстатки
	|ГДЕ РасчетыОстатки.СуммаОстаток <> 0 %%1 "   ;
	
	Если ВестиУчетРегионов
		и НЕ Объект.ОтборПоРегионам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ЕстьNull(РасчетыОстатки.Клиент.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.УстановитьПараметр("Регионы", СписокРегионов);
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ТекДок.ДобавитьСтроку("РАСЧЕТЫ");
			ЗначениеТут = Выб.Клиент;		
			РеквизитЭлементаТип = "СправочникСсылка.Клиенты";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСПоставщикамиОстатки.Поставщик
	|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОкончания, ) КАК РасчетыСПоставщикамиОстатки
	|ГДЕ РасчетыСПоставщикамиОстатки.СуммаОстаток <> 0 %%1 ";
	
	Если ВестиУчетРегионов
		и НЕ Объект.ОтборПоРегионам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ЕстьNull(РасчетыСПоставщикамиОстатки.Поставщик.Регион, &ПустойРегион) В (&Регионы) ");
		Запрос.УстановитьПараметр("Регионы", СписокРегионов);
		Запрос.УстановитьПараметр("ПустойРегион", Справочники.Регионы.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ТекДок.ДобавитьСтроку("РАСЧЕТЫСПОСТАВЩИКАМИ");
			ЗначениеТут = Выб.Поставщик;		
			РеквизитЭлементаТип = "СправочникСсылка.Поставщики";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстатки.Сотрудник,
	|	ЗарплатаОстатки.ВидНачисления, ЗарплатаОстатки.СуммаОстаток,
	|	ЗарплатаОстатки.СуммаВВалютеОстаток
	|ИЗ РегистрНакопления.Зарплата.Остатки(&ДатаОкончания, ) КАК ЗарплатаОстатки" ;
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ТекДок.ДобавитьСтроку("ЗАРПЛАТА");
			ЗначениеТут = Выб.Сотрудник;		
			РеквизитЭлементаТип = "СправочникСсылка.Сотрудники";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.ВидНачисления;		
			РеквизитЭлементаТип = "ПеречислениеСсылка.ВидыНачислений";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаВВалютеОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла; 		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура,
	|	ТоварыОстатки.СерияНоменклатуры,
	|	ТоварыОстатки.Склад,
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОкончания, ) КАК ТоварыОстатки
	|ГДЕ ТоварыОстатки.СуммаОстаток <> 0 %%1 %%2 %%3 " ;
	
	Если ВестиУчетПроизводителейНоменклатуры
		и НЕ Объект.ОтборПоПроизводителям.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И ЕСТЬNULL(ТоварыОстатки.Номенклатура.Производитель, &ПустойПроизводитель) В(&СписокПроизводителей) ");		
		Запрос.УстановитьПараметр("СписокПроизводителей", СписокПроизводителей);
		Запрос.УстановитьПараметр("ПустойПроизводитель", Справочники.Производители.ПустаяСсылка()) ;
		
	КонецЕсли;
	
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		и НЕ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", " И ЕСТЬNULL(ТоварыОстатки.Номенклатура.НоменклатурнаяГруппа, &ПустаяНоменклатурнаяГруппа) В(&СписокНоменклатурныхГрупп) ");		
		Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
		Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка()) ;
		
	КонецЕсли;
	
	Если ВестиУчетПоСкладам
		и НЕ Объект.ОтборПоСкладам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ТоварыОстатки.Склад В(&Склады) ");		
		Запрос.УстановитьПараметр("Склады", СписокСкладов);
		
	КонецЕсли;
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%3", "");
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ТекДок.ДобавитьСтроку("ТОВАРЫ");
			ЗначениеТут = Выб.Номенклатура;		
			РеквизитЭлементаТип = "СправочникСсылка.Номенклатура";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СерияНоменклатуры;		
			РеквизитЭлементаТип = "СправочникСсылка.СерииНоменклатуры";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.Склад;		
			РеквизитЭлементаТип = "СправочникСсылка.Склады";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.КоличествоОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СуммаОстаток;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			если ИспользоватьСложныйМеханизмЦен Тогда
				ВыгрузитьЦены(Выб.Номенклатура);         	
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат не Отказ;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьЦены(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ЦеныСрезПоследних.ВидЦен, ЦеныСрезПоследних.Цена, ЦеныСрезПоследних.Комментарий
	|ИЗ РегистрСведений.Цены.СрезПоследних(&ДатаОкончания, Номенклатура = &Номенклатура) КАК ЦеныСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб= РезультатЗапроса.Выбрать();
		
		Пока Выб.Следующий() Цикл
			
			ТекДок.ДобавитьСтроку("ЦЕНЫ");
			РеквизитЭлементаТип = "СправочникСсылка.Номенклатура";
			ВыгрузитьРеквизит(Номенклатура, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.ВидЦен;
			РеквизитЭлементаТип = "СправочникСсылка.ВидыЦен";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.Цена;		
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.Комментарий;		
			РеквизитЭлементаТип = "Строка";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеОбОстатках(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();	
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архив") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл архива для импорта(загрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка остатков.. ..Ждите!"));
		ЗагрузитьДанныеОбОстаткахНаСервере(АдресФайла);
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил остатки из файла:") + " " + АдресФайла, 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеОбОстаткахНаСервере(АдресФайла)
	
	параметрыСеанса.НеВыводитьСообщений = Истина;
	
	Каталог 	= КаталогВременныхФайлов();
	
	ИмяФайлаTxt = "/data_now_out.tmp";
	ИмяВременногоФайла = Каталог + ИмяФайлаTxt;
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	
	ФайлАрхива = Новый ЧтениеZIPФайла(АдресФайла); 
	ФайлАрхива.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();     
	
	Объект.СозданныеДокументы.Очистить();
	ПодготовитьСпискиОтбора();
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	
	ТекДок.Очистить();
	ТекДок.Прочитать(Каталог + ИмяФайлаTxt);
	
	КоличествоСтрок = ТекДок.КоличествоСтрок();
	сч = 1;
	ВерсияВФайле = СтрЗаменить(Сокрлп(ТекДок.ПолучитьСтроку(сч)), "F", "");	
	сч = сч + 1;
	
	ВерсияЗдесь  = СтрЗаменить(Сокрлп(Метаданные.Версия), "F", "");
	
	Если НЕ ВерсияВФайле = ВерсияЗдесь Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия файла:") + " " + ВерсияВФайле + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не совпадает с версией конфигурации:" + ВерсияЗдесь);
		Сообщение.Сообщить();	
		
		возврат;
	КонецЕсли;
	
	ДокКорр = документы.КорректировкиИРегистрацияОстатков.СоздатьДокумент();
	ДокКорр.Дата = Дата(ТекДок.ПолучитьСтроку(сч));	
	ДокКорр.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По данным из файла:") + " " + АдресФайла;
	сч = сч + 1;
	
	ОсновнаяВалюта = Справочники.Валюты.ОсновнаяВалюта ;
	
	пока сч < КоличествоСтрок Цикл
		
		пропустить = Ложь;
		
		ТипТаблицы = ТекДок.ПолучитьСтроку(сч);
		сч = сч + 1;
		
		СтрокаТаблицы = ДокКорр[ТипТаблицы].Добавить();
		Если ТипТаблицы = "ДЕНЬГИ" Тогда
			ЗагрузитьРеквизит(СтрокаТаблицы.Валюта, "СправочникСсылка.Валюты", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.ФормаОплаты, "ПеречислениеСсылка.ФормыОплаты", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.ХранилищеДенег, "СправочникСсылка.ХранилищаДенег", сч, Пропустить, ТипТаблицы);
			сч = сч + 1;//пропускаем просто сумму
			ЗагрузитьРеквизит(СтрокаТаблицы.ОстатокДенег, "Число", сч, Пропустить, ТипТаблицы); 
			
		ИначеЕсли ТипТаблицы = "РАСЧЕТЫ" Тогда
			ЗагрузитьРеквизит(СтрокаТаблицы.Клиент, "СправочникСсылка.Клиенты", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Сумма, "Число", сч, Пропустить, ТипТаблицы); 
			
		ИначеЕсли ТипТаблицы = "РАСЧЕТЫСПОСТАВЩИКАМИ" Тогда
			ЗагрузитьРеквизит(СтрокаТаблицы.Поставщик, "СправочникСсылка.Поставщики", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Сумма, "Число", сч, Пропустить, ТипТаблицы); 
			
		ИначеЕсли ТипТаблицы = "ЗАРПЛАТА" Тогда
			
			ЗагрузитьРеквизит(СтрокаТаблицы.Сотрудник, "СправочникСсылка.Сотрудники", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.ВидНачисления, "ПеречислениеСсылка.ВидыНачислений", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Сумма, "Число", сч, Пропустить, ТипТаблицы); 
			сч = сч + 1;//пропускаем сумму в валюте
			СтрокаТаблицы.Валюта = ОсновнаяВалюта;
			
		ИначеЕсли ТипТаблицы = "ТОВАРЫ" Тогда
			
			ЗагрузитьРеквизит(СтрокаТаблицы.Номенклатура, "СправочникСсылка.Номенклатура", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.СерияНоменклатуры, "СправочникСсылка.СерииНоменклатуры", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Склад, "СправочникСсылка.Склады", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Количество, "Число", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Сумма, "Число", сч, Пропустить, ТипТаблицы); 
			Если не СтрокаТаблицы.Количество = 0 Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
			КонецЕсли;
			
		ИначеЕсли ТипТаблицы = "ЦЕНЫ" Тогда
			ЗагрузитьРеквизит(СтрокаТаблицы.Номенклатура, "СправочникСсылка.Номенклатура", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.ВидЦен, "СправочникСсылка.ВидыЦен", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.Цена, "Число", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СтрокаТаблицы.ОСтроке, "Строка", сч, Пропустить, ТипТаблицы); 
			
		КонецЕсли;
		
	КонецЦикла;
	
	параметрыСеанса.НеВыводитьСообщений = Ложь;
	
	Попытка 
		ДокКорр.Записать(РежимЗаписиДокумента.Проведение);
		СозданныеДокументыСтрока 			= объект.СозданныеДокументы.Добавить();
		СозданныеДокументыСтрока.Документ 	= ДокКорр.Ссылка;
		
	Исключение 	
		Попытка 
			ДокКорр.Записать(РежимЗаписиДокумента.Запись);
			СозданныеДокументыСтрока 			= объект.СозданныеДокументы.Добавить();
			СозданныеДокументыСтрока.Документ 	= ДокКорр.Ссылка;
			
		Исключение 	
			
		КонецПопытки;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении документа:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКартотекуНоменклатуры(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архива") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите имя архива для экспорта (выгрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		
		ТекстОжидания = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет выгрузка картотеки номенклатуры..");
		Состояние(ТекстОжидания, 50, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		
		Если ВыгрузитьКартотекуНоменклатурыНаСервере() Тогда
			Состояние(ТекстОжидания, 75, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
			ИмяФайлаTxt = "/data_nom_out.tmp";
			
			если ВыгрузитьДанныеВФайл(ИмяФайлаTxt) тогда
				Состояние(ТекстОжидания, 90, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));	
				САрхивировать(АдресФайла, ИмяФайлаTxt);	
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил картотеку номенклатуры в файл:") + " " + АдресФайла, 2);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьКартотекуНоменклатурыНаСервере()
	
	Отказ = Ложь;
	
	ПодготовитьСпискиОтбора();
	
	ЧтоВыгружено.Очистить();
	
	ТекДок.Очистить();
	ТекДок.ДобавитьСтроку(Сокрлп(Метаданные.Версия));
	ТекДок.ДобавитьСтроку(формат(конецдня(объект.ДатаОкончания), "ДФ=ггггММддЧЧммсс"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.Номенклатура.ПометкаУдаления = ЛОЖЬ  %%1 %%2 " ;
	
	Если ВестиУчетПроизводителейНоменклатуры
		и НЕ Объект.ОтборПоПроизводителям.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ЕСТЬNULL(ШтрихКоды.Номенклатура.Производитель, &ПустойПроизводитель) В(&СписокПроизводителей) ");		
		Запрос.УстановитьПараметр("СписокПроизводителей", СписокПроизводителей);
		Запрос.УстановитьПараметр("ПустойПроизводитель", Справочники.Производители.ПустаяСсылка()) ;
		
	КонецЕсли;
	
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		и НЕ Объект.ОтборПоНоменклатурнымГруппам.Количество() = 0 Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И ЕСТЬNULL(ШтрихКоды.Номенклатура.НоменклатурнаяГруппа, &ПустаяНоменклатурнаяГруппа) В(&СписокНоменклатурныхГрупп) ");		
		Запрос.УстановитьПараметр("СписокНоменклатурныхГрупп", СписокНоменклатурныхГрупп);
		Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка()) ;
		
	КонецЕсли;
	
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
	Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		
		Выб = РезультатЗапроса.Выбрать();
		СчетчикСтрок = 0;
		
		Пока Выб.Следующий() Цикл		
			СчетчикСтрок = СчетчикСтрок + 1;
			
			ЗначениеТут = Выб.ШтрихКод;
			РеквизитЭлементаТип = "Строка";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.Номенклатура;		
			РеквизитЭлементаТип = "СправочникСсылка.Номенклатура";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			ЗначениеТут = Выб.СерияНоменклатуры;		
			РеквизитЭлементаТип = "СправочникСсылка.СерииНоменклатуры";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
			Если ЗначениеЗаполнено(ВидЦенДляКартотеки) Тогда
				ЗначениеТут = ОбщийМодульСервер.ПолучитьСложнуюЦену(Выб.Номенклатура, ВидЦенДляКартотеки, Объект.ДатаОкончания);
			Иначе
				ЗначениеТут = Выб.Номенклатура.Цена;
			КонецЕсли;
			РеквизитЭлементаТип = "Число";
			ВыгрузитьРеквизит(ЗначениеТут, РеквизитЭлементаТип);
			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКартотекуНоменклатуры(Команда)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();	
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архив") + " (*.zip)|*.zip";
	ДиалогРасширение = "zip";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл архива для импорта(загрузки):");
	ДиалогВыбФайла.ПолноеИмяФайла			= АдресФайла;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка картотеки номенклатуры.. ..Ждите!"));
		ЗагрузитьКартотекуНоменклатурыНаСервере(АдресФайла);
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузил картотеку номенклатуры из файла:") + " " + АдресФайла, 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКартотекуНоменклатурыНаСервере(АдресФайла)
	
	параметрыСеанса.НеВыводитьСообщений = Истина;
	
	Каталог 	= КаталогВременныхФайлов();
	
	ИмяФайлаTxt = "/data_nom_out.tmp";
	ИмяВременногоФайла = Каталог + ИмяФайлаTxt;
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 	
	КонецПопытки;
	
	ФайлАрхива = Новый ЧтениеZIPФайла(АдресФайла); 
	ФайлАрхива.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();     
	
	Объект.СозданныеДокументы.Очистить();
	ПодготовитьСпискиОтбора();
	Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Установить(АдресФайла);
	
	ТекДок.Очистить();
	ТекДок.Прочитать(Каталог + ИмяФайлаTxt);
	
	КоличествоСтрок = ТекДок.КоличествоСтрок();
	сч = 1;
	ВерсияВФайле = СтрЗаменить(Сокрлп(ТекДок.ПолучитьСтроку(сч)), "F", "");	
	сч = сч + 1;
	
	ВерсияЗдесь  = СтрЗаменить(Сокрлп(Метаданные.Версия), "F", "");
	
	Если НЕ ВерсияВФайле = ВерсияЗдесь Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия файла:") + " " + ВерсияВФайле + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не совпадает с версией конфигурации:" + ВерсияЗдесь);
		Сообщение.Сообщить();	
		
		возврат;
	КонецЕсли;
	
	ДокКорр = документы.КорректировкиИРегистрацияОстатков.СоздатьДокумент();
	ДокКорр.Дата = Дата(ТекДок.ПолучитьСтроку(сч));	
	ДокКорр.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По данным из файла:") + " " + АдресФайла;
	сч = сч + 1;
	
	ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	
	ТипТаблицы = "Цены";
	СерияНоменклатурыПустая = Справочники.СерииНоменклатуры.СоздатьЭлемент();
	ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды";
	
	ТаблицаШК = Запрос.Выполнить().Выгрузить();
	
	пока сч < КоличествоСтрок Цикл
		
		пропустить = Ложь;
		
		СтрокаТаблицы = ДокКорр.Цены.Добавить();
		
		ШтрихКод = "";
		ЗагрузитьРеквизит(ШтрихКод, "Строка", сч, Пропустить, ТипТаблицы); 
		
		СтрокаТакая = ТаблицаШК.Найти(ШтрихКод, "ШтрихКод");
		Если СтрокаТакая = Неопределено тогда
			ЗагрузитьРеквизит(СтрокаТаблицы.Номенклатура, "СправочникСсылка.Номенклатура", сч, Пропустить, ТипТаблицы); 
			ЗагрузитьРеквизит(СерияНоменклатурыПустая, "СправочникСсылка.СерииНоменклатуры", сч, Пропустить, ТипТаблицы); 
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				
				ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
				ШК.Активность   = Истина;
				ШК.Номенклатура = СтрокаТаблицы.Номенклатура;
				ШК.ТипШтрихКода = ТипШтрихКода;
				ШК.ШтрихКод 	= ШтрихКод;
				ШК.СерияНоменклатуры = СерияНоменклатурыПустая;
				
				Попытка 
					ШК.Записать(Истина);
				Исключение 
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			ЗагрузитьРеквизит(СтрокаТаблицы.Номенклатура, "СправочникСсылка.Номенклатура", сч, Пропустить, ТипТаблицы, СтрокаТакая.Номенклатура); 			
			ЗагрузитьРеквизит(СерияНоменклатурыПустая, "СправочникСсылка.СерииНоменклатуры", сч, Пропустить, ТипТаблицы, СтрокаТакая.СерияНоменклатуры); 
		КонецЕсли;			
		
		ЗагрузитьРеквизит(СтрокаТаблицы.Цена, "Число", сч, Пропустить, ТипТаблицы); 
	КонецЦикла;
	
	параметрыСеанса.НеВыводитьСообщений = Ложь;
	
	Попытка 
		ДокКорр.Записать(РежимЗаписиДокумента.Проведение);
		СозданныеДокументыСтрока 			= объект.СозданныеДокументы.Добавить();
		СозданныеДокументыСтрока.Документ 	= ДокКорр.Ссылка;
		
	Исключение 	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении документа:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Попытка 
			ДокКорр.Записать(РежимЗаписиДокумента.Запись);
			СозданныеДокументыСтрока 			= объект.СозданныеДокументы.Добавить();
			СозданныеДокументыСтрока.Документ 	= ДокКорр.Ссылка;
			
		Исключение 	
		КонецПопытки;
		
	КонецПопытки;
	
КонецПроцедуры
