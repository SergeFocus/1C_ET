// sza140228-1432
// sza111108-2112 :
// sza111028-1322
// sza110825-1853 sz:
// sza110422-1724
// sza110422-1420
// sza110219-2237
// sza110216-1100 нумератор
// sza110127-0150
// sza110126-1606
// sza110126-0100
// sza110121-1347

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПериодДляДокументов = Новый СтандартныйПериод;
	ПериодДляДокументов.ДатаНачала = Объект.ДатаНачала;
	ПериодДляДокументов.ДатаОкончания = Объект.ДатаОкончания;
	ПериодДляДокументовДиалог = Новый ДиалогРедактированияСтандартногоПериода;
	ПериодДляДокументовДиалог.Период = ПериодДляДокументов;
	ПериодДляДокументовДиалог.Показать(Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтаФорма, Новый Структура("ПериодДляДокументовДиалог", ПериодДляДокументовДиалог)));

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	ПериодДляДокументовДиалог = ДополнительныеПараметры.ПериодДляДокументовДиалог;
	Объект.ДатаНачала = ПериодДляДокументовДиалог.Период.ДатаНачала;
	Объект.ДатаОкончания = ПериодДляДокументовДиалог.Период.ДатаОкончания;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВосстановлениеНумерацииКодаСправочника(Команда)

	СтрокаПароля = "";

	Если ЗначениеЗаполнено(Объект.ВидСправочника) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьВосстановлениеНумерацииКодаСправочникаЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить перенумерацию?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВосстановлениеНумерацииКодаСправочникаЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" Тогда

		ВыполнитьВосстановлениеНумерацииКодаСправочникаС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВосстановлениеНумерацииКодаСправочникаЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьВосстановлениеНумерацииКодаСправочникаЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьВосстановлениеНумерацииКодаСправочникаС() // Экспорт

	МассивДля = Новый массив(1);
	ИмяОбъекта = СокрЛП(Объект.ВидСправочника.Метаданные().Имя);

	ЗапросДляСправочника = Новый Запрос;
	ЗапросДляСправочника.Текст = "ВЫБРАТЬ
	|	" + ИмяОбъекта + ".Ссылка
	|ИЗ
	|	Справочник." + ИмяОбъекта + " КАК " + ИмяОбъекта + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + ИмяОбъекта + ".ПометкаУдаления,
	|	" + ИмяОбъекта + ".Код";
	кво = 0;

	Вз = ЗапросДляСправочника.Выполнить();

	Если НЕ Вз.Пустой() Тогда
		Рез = Вз.Выбрать();
		Пока Рез.Следующий() Цикл
			МассивДля.Добавить(Рез.ссылка);
			кво = кво + 1;

		КонецЦикла;
	Иначе
	КонецЕсли;

	длинакода = метаданные.Справочники[ИмяОбъекта].ДлинаКода;
	нулей = "";
	сч = 1;
	пока сч < длинакода цикл
		нулей = нулей + "0";
		сч = сч + 1;

	КонецЦикла;

	нкод = нулей + "1";
	страда = стрдлина(нулей) + 1;
	НПК1 = Новый(тип("СправочникМенеджер." + ИмяОбъекта));
	для М = 1 по кво цикл
		ММ = МассивДля[М];

		Если НЕ ММ.предопределенный Тогда
			найден = ЛОЖЬ;
			пока ИСТИНА цикл
				нпк = нпк1.НайтиПоКоду(нкод);

				Если нпк.Пустая() Тогда
					найден = ИСТИНА;
					прервать;
				Иначе
					эточисло = число(нкод);
					эточисло = эточисло + 1;
					нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
				КонецЕсли;

			КонецЦикла;

			ммм = мм.ПолучитьОбъект();
			ммм.код = нкод;
			попытка
				Попытка // ммм.ОбменДанными.Загрузка=ИСТИНА;
				Исключение
				КонецПопытки;
				ммм.записать();
			исключение
				ПРЕРВАТЬ;
			КонецПопытки;
			эточисло = число(нкод);
			эточисло = эточисло + 1;
			нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВыполнитьВосстановлениеНумерацииКодаСправочника

&НаКлиенте
Процедура ВыполнитьПеренумерациюВсехДокументовВида(Команда)

	СтрокаПароля = "";

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПеренумерациюВсехДокументовВидаЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить перенумерацию все документов этого вида?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеренумерациюВсехДокументовВидаЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" Тогда

		ВыполнитьПеренумерациюВсехДокументовВидаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеренумерациюВсехДокументовВидаЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьПеренумерациюВсехДокументовВидаЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПеренумерациюВсехДокументовВидаСервер()

	ОбъектВидДокумента = Объект.ВидДокумента.Метаданные().Имя;
	ДлинаНомера = Объект.ВидДокумента.Метаданные().ДлинаНомера;
	Сч = 1;
	номер = "";
	номерД = 1;

	Пока Сч < ДлинаНомера Цикл
		номер = номер + "0";
		сч =сч + 1;
	КонецЦикла;

	номер = номер + "1";

	ЗапДоки = Новый Запрос;
	ЗапДоки.Текст = "ВЫБРАТЬ
	|	" + ОбъектВидДокумента + ".Ссылка,
	|	" + ОбъектВидДокумента + ".проведен
	|ИЗ Документ." + ОбъектВидДокумента + " КАК " + ОбъектВидДокумента + " ";

	ВзДоки = ЗапДоки.Выполнить();

	Если НЕ ВзДоки.Пустой() Тогда
		РезДоки = ВзДоки.Выбрать();
		СчДоки = 0;
		Пока РезДоки.Следующий() Цикл
			РезСсылка = РезДоки.Ссылка.ПолучитьОбъект();
			РезСсылка.Номер = Номер;
			Попытка
				Если РезДоки.Проведен Тогда

					РезСсылка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					РезСсылка.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;

				НомерД = НомерД + 1;
				Номер = лев(номер, ДлинаНомера - стрдлина(стрзаменить(СокрЛП(НомерД),символы.НПП,"")));
				Номер = Номер + стрзаменить(СокрЛП(НомерД),символы.НПП,"");
			Исключение
			КонецПопытки;  // записи  РезСсылка
			СчДоки = СчДоки + 1;

		КонецЦикла;	// по результатам запроса Доки

		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего перенумеровано") + ": " + ОбъектВидДокумента + " - " + СчДоки);
	Иначе 	// запрос пуст!
	КонецЕсли; // запрос Доки

КонецПроцедуры // ВыполнитьПеренумерациюВсехДокументовВидаСервер

&НаКлиенте
Процедура ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВида(Команда)

	СтрокаПароля = "";

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить пометку на удаление непроведенных?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" ТОгда

		ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаС() // Экспорт

	ОбъектВидДокумента = Объект.ВидДокумента.Метаданные().Имя;

	ЗапДоки = Новый Запрос;
	ЗапДоки.Текст = "ВЫБРАТЬ
	|	" + ОбъектВидДокумента + ".Ссылка,
	|	" + ОбъектВидДокумента + ".проведен
	|ИЗ Документ." + ОбъектВидДокумента + " КАК " + ОбъектВидДокумента + " ГДЕ " + ОбъектВидДокумента + ".проведен = ЛОЖЬ ";

	ВзДоки = ЗапДоки.Выполнить();

	Если НЕ ВзДоки.Пустой() Тогда
		РезДоки = ВзДоки.Выбрать();
		СчДоки = 0;
		Пока РезДоки.Следующий() Цикл
			РезСсылка = РезДоки.Ссылка.ПолучитьОбъект();
			Попытка
				РезСсылка.ПометкаУдаления = ИСТИНА;
				РезСсылка.УстановитьПометкуУдаления(ИСТИНА);
			Исключение
			КонецПопытки;  // записи  РезСсылка
			СчДоки = СчДоки + 1;

		КонецЦикла;	// по результатам запроса Доки

		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего помечено:") + " " + ОбъектВидДокумента + " - " + СчДоки);
	Иначе 	// запрос пуст!
	КонецЕсли; // запрос Доки

КонецПроцедуры // ВыполнитьПометкуНаУдалениеВсехНепроведенныхДокументовДанногоВидаС

&НаКлиенте
Процедура ВыполнитьРаспроведениеВсехДокументов(Команда)

	СтрокаПароля = "";
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьРаспроведениеВсехДокументовЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить распроведение всех документов за указанный период?"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспроведениеВсехДокументовЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" ТОгда

		РаспровестиДокументыЗаПериод();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспроведениеВсехДокументовЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьРаспроведениеВсехДокументовЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументов(Команда)

	СтрокаПароля = "";
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить смену реквизита табличной части всех документов за указанный период?"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" ТОгда

		ИмяТаблицы = "Запасы";
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершениеЗавершение", ЭтаФорма, Новый Структура("ИмяТаблицы", ИмяТаблицы)), ИмяТаблицы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите имя таблицы реквизита без пробелов:"), 80);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершениеЗавершение(Строка1, ДополнительныеПараметры1) Экспорт

	ИмяТаблицы = ?(Строка1 = Неопределено, ДополнительныеПараметры1.ИмяТаблицы, Строка1);

	Если (Строка1 <> Неопределено) Тогда
		РеквизитТаблицы = "СтавкаНДС";
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершениеЗавершениеЗавершение", ЭтаФорма, Новый Структура("ИмяТаблицы, РеквизитТаблицы", ИмяТаблицы, РеквизитТаблицы)), РеквизитТаблицы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите имя реквизита без пробелов:"), 80);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСменуРеквизитаТабличнойЧастиДляВсехДокументовЗавершениеЗавершениеЗавершение(Строка, ДополнительныеПараметры) Экспорт

	ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
	РеквизитТаблицы = ?(Строка = Неопределено, ДополнительныеПараметры.РеквизитТаблицы, Строка);
	Если (Строка <> Неопределено) Тогда
		СменаРеквизитаТаблицыДокументовЗаПериод(ИмяТаблицы, РеквизитТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУстановкуРеквизитовЭтойГруппеКонтрагентовИСоздатьДоговораПоУмолчанию(Команда)

	ВыполнитьУстановкуРеквизитовЭтойГруппеКонтрагентовИСоздатьДоговораПоУмолчаниюС();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуРеквизитовЭтойГруппеКонтрагентовИСоздатьДоговораПоУмолчаниюС() // Экспорт

	ЗапросН = Новый Запрос;
	ЗапросН.Текст = "ВЫБРАТЬ Клиенты.Ссылка
	|ИЗ Справочник.Клиенты КАК Клиенты
	|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
	|	И Клиенты.ПометкаУдаления = ЛОЖЬ
	|	И Клиенты.Ссылка В ИЕРАРХИИ(&ГруппаК)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Поставщики.Ссылка
	|ИЗ Справочник.Поставщики КАК Поставщики
	|ГДЕ Поставщики.ЭтоГруппа = ЛОЖЬ
	|	И Поставщики.ПометкаУдаления = ЛОЖЬ
	|	И Поставщики.Ссылка В ИЕРАРХИИ(&ГруппаК)";
	ЗапросН.УстановитьПараметр("ГруппаК", Объект.ГруппаКонтрагентов);

	ВыборН = ЗапросН.Выполнить();
	ЗаписаноОбъектов = 0;
	Если НЕ ВыборН.Пустой() Тогда
		РезН = ВыборН.Выбрать();

		Пока РезН.Следующий() Цикл
			ЧтотоМенялось = ЛОЖЬ;
			ОбъектКонтрагент = РезН.Ссылка.ПолучитьОбъект();
			Если НЕ ОбъектКонтрагент.ПравовойСтатус = Объект.ПравовойСтатус Тогда
				ОбъектКонтрагент.ПравовойСтатус = Объект.ПравовойСтатус;
				ЧтотоМенялось = ИСТИНА;
			КонецЕсли;

			// Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ДоговорПоУмолчанию) Тогда
			// 	НовыйДоговор = Справочники.Договора.СоздатьЭлемент();
			//
			// 	// sza110729-1153
			// 	НовыйДоговорНаименование = SZДополнительныеРазработки.ПолучитьЗначениеНастройкиДополнительныхРазработок("АвтоНаименованиеОсновногоДоговораКонтрагента");
			// 	НовыйДоговор.Наименование = ?(НовыйДоговорНаименование = "", "Основной договор", НовыйДоговорНаименование);
			//
			// 	НовыйДоговор.ВалютаРасчетов = Справочники.Валюты.НациональнаяВалюта;
			// 	НовыйДоговор.Организация = Справочники.Организации.ОсновнаяОрганизация;
			// 	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
			// 	НовыйДоговор.ВидЦен = Справочники.ВидыЦен.Оптовая;
			// 	НовыйДоговор.Владелец = ОбъектКонтрагент.Ссылка;
			// 	НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
			// 	НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
			// 	НовыйДоговор.Записать();
			//
			// 	ОбъектКонтрагент.ДоговорПоУмолчанию = НовыйДоговор.Ссылка;
			// 	ЧтотоМенялось = ИСТИНА;
			// КонецЕсли;

			//
			Если ЧтотоМенялось Тогда

				Попытка // Записи ОбъектКонтрагент
					ОбъектКонтрагент.Записать();
					ЗаписаноОбъектов = ЗаписаноОбъектов + 1;
				Исключение // Записи ОбъектКонтрагент
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи справочника") + ": " + ОбъектКонтрагент + " - " + ТекстОписаниеОшибки);
				КонецПопытки; // Записи ОбъектКонтрагент
			КонецЕсли;

		КонецЦикла;	// по результатам запроса Н
	КонецЕсли; // запрос Н

	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записано Объектов:") + " " + ЗаписаноОбъектов);

КонецПроцедуры // ВыполнитьУстановкуРеквизитовЭтойГруппеКонтрагентовИСоздатьДоговораПоУмолчаниюС

&НаКлиенте
Процедура ВыполнитьУстановкуЭтихРеквизитовДляГруппыНоменклатуры(Команда)

	ВыполнитьУстановкуЭтихРеквизитовДляГруппыНоменклатурыС();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуЭтихРеквизитовДляГруппыНоменклатурыС() // Экспорт

	ЗапросН = Новый Запрос;
	ЗапросН.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Группаноменклатуры)";
	ЗапросН.УстановитьПараметр("Группаноменклатуры", Объект.ГруппаНоменклатуры);

	ВыборН = ЗапросН.Выполнить();
	ЗаписаноОбъектов = 0;
	Если НЕ ВыборН.Пустой() Тогда
		РезН = ВыборН.Выбрать();

		Пока РезН.Следующий() Цикл
			ЧтотоМенялось = ЛОЖЬ;
			ОбъектНоменклатура = РезН.Ссылка.ПолучитьОбъект();
			Если НЕ ОбъектНоменклатура.СчетУчетаЗапасов = Объект.СчетУчетаЗапасов Тогда
				ОбъектНоменклатура.СчетУчетаЗапасов = Объект.СчетУчетаЗапасов;
				ЧтотоМенялось = ИСТИНА;
			КонецЕсли;

			Если НЕ ОбъектНоменклатура.СчетУчетаЗатрат = Объект.СчетУчетаЗатрат Тогда
				ОбъектНоменклатура.СчетУчетаЗатрат = Объект.СчетУчетаЗатрат;
				ЧтотоМенялось = ИСТИНА;
			КонецЕсли;

			Если НЕ ОбъектНоменклатура.ТипНоменклатуры = Объект.ТипНоменклатуры Тогда
				ОбъектНоменклатура.ТипНоменклатуры = Объект.ТипНоменклатуры;
				ЧтотоМенялось = ИСТИНА;
			КонецЕсли;

			Если ЧтотоМенялось Тогда
				Попытка // Записи ОбъектНоменклатура
					ОбъектНоменклатура.Записать();
					ЗаписаноОбъектов = ЗаписаноОбъектов + 1;
				Исключение // Записи ОбъектНоменклатура
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи справочника:") + " " + ОбъектНоменклатура + " - " + ТекстОписаниеОшибки);
				КонецПопытки; // Записи ОбъектНоменклатура
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записано Объектов:") + " " + ЗаписаноОбъектов);

КонецПроцедуры // ВыполнитьУстановкуЭтихРеквизитовДляГруппыНоменклатурыС

&НаКлиенте
Процедура ОпределитьЭлементыСоставСпецификацийКакСборкаИлиМатериалПоНаличиюУНегоСпецификации(Команда)

	ОпределитьЭлементыСоставСпецификацийКакСборкаИлиМатериалПоНаличиюУНегоСпецификацииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОпределитьЭлементыСоставСпецификацийКакСборкаИлиМатериалПоНаличиюУНегоСпецификацииНаСервере() // Экспорт

КонецПроцедуры // ОпределитьЭлементыСоставСпецификацийКакСборкаИлиМатериалПоНаличиюУНегоСпецификацииНаСервере

&НаКлиенте
Процедура ОчиститьРекурсивныеССылкиВСпецификациях(Команда)

	ОчиститьРекурсивныеССылкиВСпецификацияхНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОчиститьРекурсивныеССылкиВСпецификацияхНаСервере() // Экспорт

КонецПроцедуры // ОчиститьРекурсивныеССылкиВСпецификацияхНаСервере

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура РаспровестиДокументыЗаПериод() // Экспорт

	Для Каждого Документ Из метаданные.Документы Цикл
		Если Документ.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ДокументИмя = Документ.Имя;

			ЗапДокумент = Новый Запрос;
			ЗапДокумент.Текст = "ВЫБРАТЬ
			|	" + ДокументИмя + ".Ссылка
			|ИЗ
			|	Документ." + ДокументИмя + " КАК " + ДокументИмя + "
			|ГДЕ
			|	" + ДокументИмя + ".Проведен = ИСТИНА ";

			Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				ЗапДокумент.Текст = ЗапДокумент.Текст+ "	И " + ДокументИмя + ".Дата >= &ДатаНачала ";
				// ЗапДокумент.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ДатаНачала));
				ЗапДокумент.УстановитьПараметр("ДатаНачала", (Объект.ДатаНачала));
			КонецЕсли;

			Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
				ЗапДокумент.Текст = ЗапДокумент.Текст+ "	И " + ДокументИмя + ".Дата <= &ДатаОкончания ";
				// ЗапДокумент.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
				ЗапДокумент.УстановитьПараметр("ДатаОкончания", (Объект.ДатаОкончания));
			КонецЕсли;

			Попытка

				ВзДокумент = ЗапДокумент.Выполнить();
				Если НЕ ВзДокумент.Пустой() Тогда
					РезДокумент = ВзДокумент.Выбрать();
					СчДокумент = 0;

					Пока РезДокумент.Следующий() Цикл
						РезСсылка = РезДокумент.Ссылка.ПолучитьОбъект();
						Попытка
							РезСсылка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Исключение
							ТекстОписаниеОшибки = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке отмены проведения документа:") + " " + РезСсылка + " " + ТекстОписаниеОшибки);
						КонецПопытки;  // записи  РезСсылка
						СчДокумент = СчДокумент + 1;

					КонецЦикла;	// по результатам запроса Документ

					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего распроведено:") + " " + ДокументИмя + " - " + СчДокумент);
				Иначе 	// запрос пуст!
				КонецЕсли;

			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // РаспровестиДокументыЗаПериод

&НаСервере
Процедура СменаРеквизитаТаблицыДокументовЗаПериод(ИмяТаблицы, РеквизитТаблицы);

	Для Каждого Документ Из метаданные.Документы Цикл
		Если Документ.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ДокументИмя = Документ.Имя;

			ЗапДокумент = Новый Запрос;
			ЗапДокумент.Текст = "ВЫБРАТЬ " + ДокументИмя + ".Ссылка Из Документ." + ДокументИмя + " КАК " + ДокументИмя + " ГДЕ " + ДокументИмя + ".Проведен = ИСТИНА ";
			Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
				ЗапДокумент.Текст = ЗапДокумент.Текст+ "	И " + ДокументИмя + ".Дата >= &ДатаНачала ";
				// ЗапДокумент.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ДатаНачала));
				ЗапДокумент.УстановитьПараметр("ДатаНачала", (Объект.ДатаНачала));
			КонецЕсли;

			Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
				ЗапДокумент.Текст = ЗапДокумент.Текст+ "	И " + ДокументИмя + ".Дата <= &ДатаОкончания ";
				// ЗапДокумент.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
				ЗапДокумент.УстановитьПараметр("ДатаОкончания", (Объект.ДатаОкончания));
			КонецЕсли;

			Попытка

				ВзДокумент = ЗапДокумент.Выполнить();
				Если НЕ ВзДокумент.Пустой() Тогда
					РезДокумент = ВзДокумент.Выбрать();
					СчДокумент = 0;

					Пока РезДокумент.Следующий() Цикл
						РезСсылка = РезДокумент.Ссылка.ПолучитьОбъект();
						Попытка
							Для Каждого СтрокаТаблицы Из РезСсылка[ИмяТаблицы] Цикл
								СтрокаТаблицы[РеквизитТаблицы] = Объект.УстановитьРеквизит;

							КонецЦикла;

							попытка
								Если РезСсылка.Проведен Тогда

									РезСсылка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								Иначе
									РезСсылка.Записать(РежимЗаписиДокумента.Запись);
								КонецЕсли;

							Исключение
								ТекстОписаниеОшибки = ОписаниеОшибки();
								ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке отмены проведения документа:") + " " + РезСсылка + " - " + ТекстОписаниеОшибки);
							КонецПопытки;  // записи  РезСсылка
						исключение
							прервать;
						КонецПопытки;
						СчДокумент = СчДокумент +1;

					КонецЦикла;	// по результатам запроса Документ

					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего распроведено:") + " " + ДокументИмя + " - " + СчДокумент);
				Иначе 	// запрос пуст!
				КонецЕсли;

			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СменаРеквизитаТаблицыДокументовЗаПериод

&НаСервере
Процедура СменаРеквизитаТаблицыСправочников(РеквизитСправочника);

	СправочникИмя = СокрЛП(Объект.ВидСправочника.Метаданные().Имя);

	ЗапСправочник = Новый Запрос;
	ЗапСправочник.Текст = "ВЫБРАТЬ " + СправочникИмя + ".Ссылка Из Справочник." + СправочникИмя + " КАК " + СправочникИмя + " ГДЕ " + СправочникИмя + ".ЭтоГруппа = ЛОЖЬ ";
	Попытка

		ВзСправочник = ЗапСправочник.Выполнить();

		Если НЕ ВзСправочник.Пустой() Тогда
			РезСправочник = ВзСправочник.Выбрать();
			СчСправочник = 0;

			Пока РезСправочник.Следующий() Цикл
				РезСсылка = РезСправочник.Ссылка.ПолучитьОбъект();
				Попытка
					РезСсылка[РеквизитСправочника] = Объект.УстановитьРеквизит;
					попытка
						РезСсылка.Записать();
					Исключение
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи:") + " " + РезСсылка + " - " + ТекстОписаниеОшибки);
					КонецПопытки;  // записи  РезСсылка
				Исключение
					Прервать;
				КонецПопытки;
				СчСправочник = СчСправочник +1;

			КонецЦикла;	// по результатам запроса Справочник

			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего обработано:") + " " + СправочникИмя + " - " + СчСправочник);
		Иначе 	// запрос пуст!
		КонецЕсли;

	Исключение
	КонецПопытки;

КонецПроцедуры //

&НаКлиенте
Процедура УдалитьИзСоставаСпецификацийВладельцевСпецификаций(Команда)
	УдалитьИзСоставаСпецификацийВладельцевСпецификацийНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьИзСоставаСпецификацийВладельцевСпецификацийНаСервере() // Экспорт

КонецПроцедуры // УдалитьИзСоставаСпецификацийВладельцевСпецификацийНаСервере

&НаСервере
Процедура УдалитьКакСОбменоДаннымиС() // Экспорт

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ОбъектУ = Объект.ВидДокумента.ПолучитьОбъект();
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидСправочника) Тогда
		ОбъектУ = Объект.ВидСправчоника.ПолучитьОбъект();
	Иначе

		Возврат;
	КонецЕсли;

	ОбъектУ.ОбменДанными.Загрузка = ИСТИНА;
	ОбъектУ.Удалить();

КонецПроцедуры // УдалитьКакСОбменоДаннымиС

&НаКлиенте
Процедура УдалитьКакСОбменомДанными(Команда)

	СтрокаПароля = "";

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьКакСОбменомДаннымиЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить удаление в режиме ОбменДанными?"), РежимДиалогаВопрос.ДаНет);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКакСОбменомДаннымиЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" ТОгда

		УдалитьКакСОбменоДаннымиС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКакСОбменомДаннымиЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УдалитьКакСОбменомДаннымиЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляНоменклатурыОсновнуюСпецификациюПоЕдинственнойСпецификации(Команда)
	УстановитьДляНоменклатурыОсновнуюСпецификациюПоЕдинственнойСпецификацииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьДляНоменклатурыОсновнуюСпецификациюПоЕдинственнойСпецификацииНаСервере() // Экспорт

КонецПроцедуры // УстановитьДляНоменклатурыОсновнуюСпецификациюПоЕдинственнойСпецификацииНаСервере

&НаКлиенте
Процедура УстановитьРеквизитДляВсехЭлементовСправочника(Команда)

	СтрокаПароля = "";
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьРеквизитДляВсехЭлементовСправочникаЗавершение1", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить смену значений реквизита всех элементов справочника?"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитДляВсехЭлементовСправочникаЗавершение(Строка, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПароля, Строка);

	Если (Строка <> Неопределено)
		И СтрокаПароля = "25.02.1980" ТОгда

		РеквизитТаблицы = "СтавкаНДС";
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УстановитьРеквизитДляВсехЭлементовСправочникаЗавершениеЗавершение", ЭтаФорма, Новый Структура("РеквизитТаблицы", РеквизитТаблицы)), РеквизитТаблицы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите имя реквизита без пробелов") + ": ", 80);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитДляВсехЭлементовСправочникаЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

	СтрокаПароля = ДополнительныеПараметры.СтрокаПароля;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВводСтроки(Новый ОписаниеОповещения("УстановитьРеквизитДляВсехЭлементовСправочникаЗавершение", ЭтаФорма, Новый Структура("СтрокаПароля", СтрокаПароля)), СтрокаПароля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите пароль для данной операции") + ": ", 14);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитДляВсехЭлементовСправочникаЗавершениеЗавершение(Строка1, ДополнительныеПараметры1) Экспорт

	РеквизитТаблицы = ?(Строка1 = Неопределено, ДополнительныеПараметры1.РеквизитТаблицы, Строка1);

	Если (Строка1 <> Неопределено) Тогда
		СменаРеквизитаТаблицыСправочников(РеквизитТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСотрудникамЭтиОбязательныеРеквизиты(Команда)
	УстановитьСотрудникамЭтиОбязательныеРеквизитыС();
КонецПроцедуры

&НаСервере
Процедура УстановитьСотрудникамЭтиОбязательныеРеквизитыС() // Экспорт

КонецПроцедуры // УстановитьСотрудникамЭтиОбязательныеРеквизитыС

&НаКлиенте
Процедура УстановитьСтандартныеОбязательныеРеквизитыВсейНоменклатуре(Команда)
	УстановитьСтандартныеОбязательныеРеквизитыВсейНоменклатуреС();
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеОбязательныеРеквизитыВсейНоменклатуреС() // Экспорт

	ЗапросН = Новый Запрос;
	ЗапросН.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";

	ВыборН = ЗапросН.Выполнить();
	ЗаписаноОбъектов = 0;
	Если НЕ ВыборН.Пустой() Тогда
		РезН = ВыборН.Выбрать();

		Пока РезН.Следующий() Цикл
			ЧтотоМенялось = ЛОЖЬ;
			ОбъектНоменклатура = РезН.Ссылка.ПолучитьОбъект();
			Если ЧтотоМенялось Тогда
				Попытка // Записи ОбъектНоменклатура
					ОбъектНоменклатура.Записать();
					ЗаписаноОбъектов = ЗаписаноОбъектов + 1;
				Исключение
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи справочника:") + " " + ОбъектНоменклатура + " - " + ТекстОписаниеОшибки);
				КонецПопытки; // Записи ОбъектНоменклатура
			КонецЕсли;

		КонецЦикла;	// по результатам запроса Н
	КонецЕсли; // запрос Н

	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записано Объектов:") + " " + ЗаписаноОбъектов);

КонецПроцедуры //

&НаКлиенте
Процедура УстановитьСтандартныеобязательныеРеквизитыВсемКонтрагентам(Команда)
	УстановитьСтандартныеобязательныеРеквизитыВсемКонтрагентамС();
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеобязательныеРеквизитыВсемКонтрагентамС() // Экспорт

КонецПроцедуры // УстановитьСтандартныеобязательныеРеквизитыВсемКонтрагентамС
