// sza140326-1603  
// sza131003-1845 : 
перем 	укр, рус, анг, рум, бел, кит, бол, каз, пол, нем, тай;	


Процедура КнопкаВыполнитьНажатие(Кнопка)
	ВыгрузитьВсеТекстыНаРусскомДляПеревода();
КонецПроцедуры

Процедура ВыгрузитьВсеТекстыНаРусскомДляПеревода()
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для выгрузки текстов для перевода:");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; // АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Выгрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ВыгрузитьТекстыДляПеревода(АдресФайла);
	КонецЕсли; // когда файл АдресФайла выбран
	
КонецПроцедуры

Процедура ВыгрузитьТекстыДляПеревода(АдресФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТекстыНаДругихЯзыках.ТекстНаРусском
	|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
	|ГДЕ ТекстыНаДругихЯзыках.ТекстНаЯзыке = &ТекстНаЯзыке";
	
	Запрос.УстановитьПараметр("ТекстНаЯзыке", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		записьвфайл = Новый ЗаписьТекста(АдресФайла);
		записьвфайл1 = Новый ЗаписьТекста(АдресФайла + "ONBASE");
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			записьвфайл.ЗаписатьСтроку(ВыборкаДетальныеЗаписи.ТекстНаРусском);
			записьвфайл1.ЗаписатьСтроку(ВыборкаДетальныеЗаписи.ТекстНаРусском);
		КонецЦикла;
		записьвфайл.Закрыть();
		записьвфайл1.Закрыть();
	КонецЕсли;
	
	сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переведите файл:") + " " + АдресФайла);
	
конецпроцедуры

функция   ПолучитьОтносительныйАдресНаСервере();
	
	попытка
		Возврат Константы.ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов.Получить();
	исключение
		Возврат "";
	конецпопытки;
	
КонецФункции

Процедура ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатие(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы все очистить?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РСНЗ = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьНаборЗаписей();
		РСНЗ.Записать(ИСТИНА);
		
		РСНЗ = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
		РСНЗ.Записать(ИСТИНА);
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

Процедура ЗагрузитьПереводВсехСообщенийИзФайловНажатие(Элемент)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр = "*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл перевода:");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; // АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = ИСТИНА;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Загрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗагрузитьТекстыПеревода(АдресФайла);
	КонецЕсли; // когда файл АдресФайла выбран
	
КонецПроцедуры

Процедура ЗагрузитьТекстыПеревода(АдресФайла)
	
	язык = справочники.Языки.ПустаяСсылка();
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗагрузитьТекстыПереводаЗавершение", ЭтаФорма, Новый Структура("АдресФайла, язык", АдресФайла, язык)), язык, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите язык загрузки:"), тип("СправочникСсылка.Языки"));
	
конецпроцедуры

Процедура ЗагрузитьТекстыПереводаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	АдресФайла = ДополнительныеПараметры.АдресФайла;
	язык = ?(Значение = Неопределено, ДополнительныеПараметры.язык, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЧтениеФайла = Новый ЧтениеТекста(АдресФайла, КодировкаТекста.UTF8 );
		ЧтениеФайлаРус = Новый ЧтениеТекста(АдресФайла + "ONBASE", КодировкаТекста.UTF8 );
		
		Строкафайла = ЧтениеФайла.ПрочитатьСтроку();
		пока НЕ строкафайла= Неопределено цикл
			
			Рус = ЧтениеФайлаРус.ПрочитатьСтроку();
			Если НЕ ПустаяСтрока(Рус)тогда
				ОбщийМодульТекстСервер.СоздатьЗаписьОТексте(Рус , язык, СтрокаФайла, ИСТИНА);
			КонецЕсли;
			
			Строкафайла = ЧтениеФайла.ПрочитатьСтроку();
		КонецЦикла ;
		чтениефайла.Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьЯвноЛишниеЗаписиТекстовНажатие(Элемент)
	
	рся = регистрысведений.ТекстыНаДругихЯзыках.Выбрать();
	пока рся.Следующий() Цикл
		
		Если рся.ТекстНаРусском = рся.ТекстНаЯзыке
			ИЛИ Лишнее(рся.ТекстНаЯзыке, рся.язык) 
			ИЛИ лишнее(рся.ТекстНаРусском, рус)  Тогда
			
			мз = рся.ПолучитьМенеджерЗаписи();
			мз.Удалить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

функция   Лишнее(ТекстНаЯзыке, язык)
	
	результат = ЛОЖЬ;
	
	ТекстНаЯзыкеВрег = врег(ТекстНаЯзыке);
	
	Если НЕ найти(ТекстНаЯзыкеВрег, "ЧЦ =") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "СправочникСсылка.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "СправочникОбъект.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "Справочники.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "Справочник.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "Перечисление.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "Отчет.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "ОбщийМакет.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "Документ.") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "; БИ=") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "ru='") = 0 
		ИЛИ не найти(ТекстНаЯзыке, "естьNull(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ЧЦ=") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ЧГ =") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ЧГ=") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ФОРМАТ(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ФОРМАТ (") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "СТРОКА (") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "СТРОКА(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "НСТР(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "?(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "? (") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, ");") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "СокрЛП") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "РЯДОК(") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, " + ") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ADDIN.") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "RU = '") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ДФ =") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ДФ=") = 0 
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ЧН=") = 0
		ИЛИ не найти(ТекстНаЯзыкеВрег, "ЧН =") = 0 тогда
		
		результат = ИСТИНА;
		
	Иначеесли не язык = кит тогда
		
		Если Язык = укр 
			ИЛИ язык = рус 
			ИЛИ язык = бел 
			ИЛИ язык = бол 
			ИЛИ язык = каз тогда
			
			Если неткириллицы(ТекстНаЯзыке) Тогда
				результат = ИСТИНА;
			КонецЕсли;
			
		Иначеесли не язык = тай 
			И НЕ язык = кит тогда
			// если Язык = анг , рум, нем, пол
			Если нетлатиницы(ТекстНаЯзыке) Тогда
				результат = ИСТИНА;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	возврат результат;
	
КонецФункции	

функция   неткириллицы(текст)
	
	текст1 = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(	текст, ЛОЖЬ, ЛОЖЬ, ЛОЖЬ);
	Если текст = текст1 тогда
		возврат ИСТИНА;
	Иначе
		возврат ЛОЖЬ;
	КонецЕсли;
	
конецфункции

функция   нетлатиницы(текст)
	
	текст1 = ПодсистемаИЭ.ПривестиКСимволамНаРусском(	текст, ЛОЖЬ);
	Если текст = текст1 тогда
		возврат ИСТИНА;
	Иначе
		возврат ЛОЖЬ;
	КонецЕсли;
	
конецфункции

Процедура ОценитьФайлПереводаВыброситьЛишнееИРазбитьПо500СтрокНажатие(Элемент)
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр = "*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл перевода:");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла; // АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = ИСТИНА;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Каталог = ДиалогВыбФайла.Каталог;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет оценка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗагрузитьпроверитьТекстыПеревода(АдресФайла, Каталог);
	КонецЕсли; // когда файл АдресФайла выбран
	
КонецПроцедуры

Процедура ЗагрузитьпроверитьТекстыПеревода(АдресФайла, Каталог)
	
	сч = 0;
	счетфайлов = 100;
	файлПо500 = Новый ЗаписьТекста(Каталог + "/_for_translate" + счетфайлов + ".txt");
	файлПо500ONBASE = Новый ЗаписьТекста(Каталог + "/_for_translate" + счетфайлов + ".txtONBASE");
	язык = справочники.Языки.ПустаяСсылка();
	массивтекстов = Новый массив;
	языкбыл = рус;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗагрузитьпроверитьТекстыПереводаЗавершение1", ЭтаФорма, Новый Структура("АдресФайла, Каталог, массивтекстов, файлПо500, файлПо500ONBASE, языкбыл, язык", АдресФайла, Каталог, массивтекстов, файлПо500, файлПо500ONBASE, языкбыл, язык)), язык, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите язык будущей загрузки:"), тип("СправочникСсылка.Языки"));
	
конецпроцедуры

Процедура ЗагрузитьпроверитьТекстыПереводаЗавершение1(Значение, ДополнительныеПараметры) Экспорт
	
	АдресФайла = ДополнительныеПараметры.АдресФайла;
	Каталог = ДополнительныеПараметры.Каталог;
	массивтекстов = ДополнительныеПараметры.массивтекстов;
	файлПо500 = ДополнительныеПараметры.файлПо500;
	файлПо500ONBASE = ДополнительныеПараметры.файлПо500ONBASE;
	языкбыл = ДополнительныеПараметры.языкбыл;
	язык = ?(Значение = Неопределено, ДополнительныеПараметры.язык, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗагрузитьпроверитьТекстыПереводаЗавершение", ЭтаФорма, Новый Структура("АдресФайла, Каталог, массивтекстов, файлПо500, файлПо500ONBASE, язык, языкбыл", АдресФайла, Каталог, массивтекстов, файлПо500, файлПо500ONBASE, язык, языкбыл)), языкбыл, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите язык источник перевода:"), тип("СправочникСсылка.Языки"));
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьпроверитьТекстыПереводаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	АдресФайла = ДополнительныеПараметры.АдресФайла;
	Каталог = ДополнительныеПараметры.Каталог;
	массивтекстов = ДополнительныеПараметры.массивтекстов;
	файлПо500 = ДополнительныеПараметры.файлПо500;
	файлПо500ONBASE = ДополнительныеПараметры.файлПо500ONBASE;
	язык = ДополнительныеПараметры.язык;
	языкбыл = ?(Значение = Неопределено, ДополнительныеПараметры.языкбыл, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		
		ЧтениеФайла = Новый ЧтениеТекста(АдресФайла, КодировкаТекста.UTF8 );
		ЧтениеФайлаРус = Новый ЧтениеТекста(АдресФайла + "ONBASE", КодировкаТекста.UTF8 );
		
		Строкафайла = ЧтениеФайла.ПрочитатьСтроку();
		пока НЕ строкафайла= Неопределено цикл
			
			Рустрока = ЧтениеФайлаРус.ПрочитатьСтроку();
			Если НЕ Рустрока = ""
				И НЕ Лишнее(Рустрока, языкбыл) Тогда
				// 					И НЕ Лишнее(Строкафайла, язык) 
				// 	ОбщийМодульТекстСервер.СоздатьЗаписьОТексте(Рус , язык, СтрокаФайла, ИСТИНА);
				СтрокаОтвета = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Рустрока, язык);
				Если СтрокаОтвета = Рустрока 
					И массивтекстов.Найти(Строкафайла) = Неопределено тогда
					
					массивтекстов.Добавить(Строкафайла);
					файлПо500.ЗаписатьСтроку(Строкафайла);
					файлПо500ONBASE.ЗаписатьСтроку(Рустрока);
					
					сч =сч+1;
					Если сч = 500 тогда
						сч = 0;
						файлПо500.Закрыть();
						файлПо500ONBASE.Закрыть();
						счетфайлов = счетфайлов + 1;
						файлПо500 = Новый ЗаписьТекста(Каталог + "/_for_translate" + счетфайлов + ".txt");
						файлПо500ONBASE = Новый ЗаписьТекста(Каталог + "/_for_translate" + счетфайлов + ".txtONBASE");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Строкафайла = ЧтениеФайла.ПрочитатьСтроку();
		КонецЦикла ;
		чтениефайла.Закрыть();
		
		файлПо500.Закрыть();
		файлПо500ONBASE.Закрыть();
	КонецЕсли;

КонецПроцедуры

укр = справочники.Языки.Украинский;
рус = справочники.Языки.Русский;
анг = справочники.Языки.English;
рум = справочники.Языки.Румынский;
бел = справочники.Языки.Белорусский;
кит = справочники.Языки.Китайский;

каз = Справочники.Языки.Казахский ;
нем = Справочники.Языки.Немецкий ;
пол = Справочники.Языки.Польский ;
бол = Справочники.Языки.Болгарский ;

тай = Справочники.Языки.Тайский ;