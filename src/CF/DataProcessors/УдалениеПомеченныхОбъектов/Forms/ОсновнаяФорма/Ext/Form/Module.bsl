//sza140831-0513 
//sza140627-1613  
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РежимУдаления = "Полный";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РежимУдаленияПриИзменении(Элемент)
	
	ДоступностьКнопок();
	
КонецПроцедуры

// Обработчик события "при изменнии" поля "Пометка"
// Вызывает рекурсивную функцию, устанавливающую зависимые флажки пометок
// в родительских и дочерних элементах
//
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, ИСТИНА);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Список помеченных на удаление"

// Обработчик события "выбор" строки дерева СписокПомеченныхНаУдаление
// Пытается открыть выбранное значение
//
&НаКлиенте
Процедура СписокПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		ОткрытьЗначение(Элемент.ТекущиеДанные.Значение);	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Дерево оставшихся объектов"

// Обработчик события "выбор" строки дерева ДеревоОставшихсяОбъектов
// Пытается открыть выбранное значение
//
&НаКлиенте
Процедура ДеревоОставшихсяОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		ОткрытьЗначение(Элемент.ТекущиеДанные.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОставшихсяОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = ИСТИНА;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Обработчик нажания на кнопку "установить все" командной панели списка
// дерева СписокПомеченныхНаУдаление.
// Устанавливает пометку всем найденым объектам
//
&НаКлиенте
Процедура КомандаСписокПомеченныхУстановитьВсе()
	
	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, ИСТИНА, ИСТИНА);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажания на кнопку "снять все" командной панели списка
// дерева СписокПомеченныхНаУдаление.
// Снимает пометку у всех найденых объектов
//
&НаКлиенте
Процедура КомандаСписокПомеченныхСнятьВсе()
	
	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, ЛОЖЬ, ИСТИНА);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ПроверитьРодителя(Элемент)
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Далее" командной панели формы
// 
&НаКлиенте
Процедура ВыполнитьДалее()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ВыборРежимаУдаления Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется поиск помеченных на удаление объектов"));
		
		ЗаполнениеДереваПомеченныхНаУдаление();
		
		Если КоличествоУровнейПомеченныхНаУдаление = 1 Тогда
			Для Каждого Элемент Из СписокПомеченныхНаУдаление.ПолучитьЭлементы() Цикл
				Идентификатор = Элемент.ПолучитьИдентификатор();
				Элементы.СписокПомеченныхНаУдаление.Развернуть(Идентификатор, ЛОЖЬ);
			КонецЦикла;
		КонецЕсли;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПомеченныеНаУдаление;
		ДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Назад" командной панели формы
//
&НаКлиенте
Процедура ВыполнитьНазад()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.ПомеченныеНаУдаление Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;
		ДоступностьКнопок();
	ИначеЕсли ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления Тогда
		Если РежимУдаления = "Полный" Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;
		Иначе
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПомеченныеНаУдаление;
		КонецЕсли;
		ДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Удалить" командной панели формы
//
&НаКлиенте
Процедура ВыполнитьУдаление()
	
	Перем ТипыУдаленныхОбъектов;
	
	Если РежимУдаления = "Полный" Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется поиск и удаление помеченных объектов"));
	Иначе
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется удаление выбранных объектов"));
	КонецЕсли;
	
	Результат = УдалениеВыбранныхНаСервере(ТипыУдаленныхОбъектов);
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		//ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, ИСТИНА);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ДлительнаяОперация; 
	Иначе
		ОбновитьСодержание(Результат.РезультатУдаления, Результат.СообщениеОбОшибке,
			Результат.РезультатУдаления.ТипыУдаленныхОбъектов);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьСодержание(Результат, СообщениеОбОшибке, ТипыУдаленныхОбъектов)
	
	Если Результат.Статус Тогда
		Для Каждого ТипУдаленногоОбъекта Из ТипыУдаленныхОбъектов Цикл
			ОповеститьОбИзменении(ТипУдаленногоОбъекта);
		КонецЦикла;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;
		Предупреждение(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПомеченных = ИСТИНА;
	Если КоличествоНеУдаленныхОбъектов = 0 Тогда
		Если УдаленныхОбъектов = 0 Тогда
			Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не помечено на удаление ни одного объекта. Удаление объектов не выполнялось");
			ОбновитьДеревоПомеченных = ЛОЖЬ;
		Иначе
			Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удаление помеченных объектов успешно завершено.") + Символы.ПС + 
			                        ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалено объектов") + ": " + УдаленныхОбъектов;
		КонецЕсли;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыборРежимаУдаления;			 
		Предупреждение(Текст);
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления;
		Для Каждого Элемент Из ДеревоОставшихсяОбъектов.ПолучитьЭлементы() Цикл
			Идентификатор = Элемент.ПолучитьИдентификатор();
			Элементы.ДеревоОставшихсяОбъектов.Развернуть(Идентификатор, ЛОЖЬ);
		КонецЦикла;
		ДоступностьКнопок();
		Предупреждение(СтрокаРезультатов);
	КонецЕсли;
	
	Если ОбновитьДеревоПомеченных Тогда
		ЗаполнениеДереваПомеченныхНаУдаление();
		
		Если КоличествоУровнейПомеченныхНаУдаление = 1 Тогда 
			Для Каждого Элемент Из СписокПомеченныхНаУдаление.ПолучитьЭлементы() Цикл
				Идентификатор = Элемент.ПолучитьИдентификатор();
				Элементы.СписокПомеченныхНаУдаление.Развернуть(Идентификатор, ЛОЖЬ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	

// Изменяет доступность кнопок на форме в зависимости от
// текущей страницы и состояния реквизитов формы
//
&НаКлиенте
Процедура ДоступностьКнопок()
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ВыборРежимаУдаления Тогда
		Элементы.КомандаНазад.Доступность   = ЛОЖЬ;
		Если РежимУдаления = "Полный" Тогда
			Элементы.КомандаДалее.Доступность   = ЛОЖЬ;
			Элементы.КомандаУдалить.Доступность = ИСТИНА;
		ИначеЕсли РежимУдаления = "Выборочный" Тогда
			Элементы.КомандаДалее.Доступность 	= ИСТИНА;
			Элементы.КомандаУдалить.Доступность = ЛОЖЬ;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ПомеченныеНаУдаление Тогда
		Элементы.КомандаНазад.Доступность   = ИСТИНА;
		Элементы.КомандаДалее.Доступность   = ЛОЖЬ;
		Элементы.КомандаУдалить.Доступность = ИСТИНА;
	ИначеЕсли ТекущаяСтраница = Элементы.ПричиныНевозможностиУдаления Тогда
		Элементы.КомандаНазад.Доступность   = ИСТИНА;
		Элементы.КомандаДалее.Доступность   = ЛОЖЬ;
		Элементы.КомандаУдалить.Доступность = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает веть дерева в ветви СтрокиДерева по значениею Значние
// Если ветвь не найдена - создается новая
//
&НаСервере
Функция НайтиИлиДобавитьВетвьДерева(СтрокиДерева, Значение, Представление, Пометка)
	
	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", ЛОЖЬ);
	
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.Пометка       = Пометка;
	КонецЕсли;
	
	Возврат Ветвь;
	
КонецФункции

&НаСервере
Функция НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокиДерева, Значение, Представление, НомерКартинки)
	
	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", ЛОЖЬ);
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.НомерКартинки = НомерКартинки;
	КонецЕсли;

	Возврат Ветвь;
	
КонецФункции

// Заполняет дерево объектов помеченных на удаление
//
&НаСервере
Процедура ЗаполнениеДереваПомеченныхНаУдаление()
	
	// Заполнение дерева помеченных на удаление
	ДеревоПомеченных = РеквизитФормыВЗначение("СписокПомеченныхНаУдаление");
	
	ДеревоПомеченных.Строки.Очистить();
	
	// обработка помеченных
	МассивПомеченных = ПолучитьПомеченныеНаУдаление();
	
	Для Каждого МассивПомеченныхЭлемент Из МассивПомеченных Цикл
		ОбъектМетаданныхЗначение = МассивПомеченныхЭлемент.Метаданные().ПолноеИмя();
		ОбъектМетаданныхПредставление = МассивПомеченныхЭлемент.Метаданные().Представление();
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДерева(ДеревоПомеченных.Строки, ОбъектМетаданныхЗначение, ОбъектМетаданныхПредставление, ИСТИНА);
		НайтиИлиДобавитьВетвьДерева(СтрокаОбъектаМетаданных.Строки, МассивПомеченныхЭлемент, Строка(МассивПомеченныхЭлемент) + " - " + ОбъектМетаданныхПредставление, ИСТИНА);
	КонецЦикла;
	
	ДеревоПомеченных.Строки.Сортировать("Значение", ИСТИНА);
	
	Для Каждого СтрокаОбъектаМетаданных Из ДеревоПомеченных.Строки Цикл
		// создать представление для строк, отображающих ветвь объекта метаданных
		СтрокаОбъектаМетаданных.Представление = СтрокаОбъектаМетаданных.Представление + " (" + СтрокаОбъектаМетаданных.Строки.Количество() + ")";
	КонецЦикла;
	
	КоличествоУровнейПомеченныхНаУдаление = ДеревоПомеченных.Строки.Количество();
	
	ЗначениеВРеквизитФормы(ДеревоПомеченных, "СписокПомеченныхНаУдаление");
	
КонецПроцедуры

// Рекурсивная функция, снимающая / устанавливающая пометки
// для зависимых родительских и дочерних элементов
//
&НаКлиенте
Процедура УстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Пометка = Пометка;
		УстановитьПометкуВСписке(Элемент, Пометка, ЛОЖЬ);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если проверятьРодителя И Родитель <> Неопределено Тогда 
		ПроверитьРодителя(Родитель);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРодителя(Родитель)
	
	ПометкаРодителя = ИСТИНА;
		ЭлементыСтроки = Родитель.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыСтроки Цикл
			Если НЕ Элемент.Пометка Тогда
				ПометкаРодителя = ЛОЖЬ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Родитель.Пометка = ПометкаРодителя;
	
КонецПроцедуры

// Производит попытку удаления выбранных объектов
// Объекты, которые не были удалены показываются в отдельной таблице
//
&НаСервере
Функция УдалениеВыбранныхНаСервере(ТипыУдаленныхОбъектов)
	
	ПараметрыУдаления = Новый Структура("СписокПомеченныхНаУдаление, РежимУдаления, ТипыУдаленныхОбъектов, ", 
		СписокПомеченныхНаУдаление, РежимУдаления, ТипыУдаленныхОбъектов);
											
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	УдалитьПомеченныеОбъекты(ПараметрыУдаления, АдресХранилища);
	Результат = Новый Структура("ЗаданиеВыполнено", ИСТИНА);		
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат = ЗаполнитьРезультаты(АдресХранилища, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРезультаты(АдресХранилища, Результат)
	
	РезультатУдаления = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если НЕ РезультатУдаления.Статус Тогда 
		Результат.Вставить("РезультатУдаления", РезультатУдаления);
		Результат.Вставить("СообщениеОбОшибке", РезультатУдаления.Значение);
		Возврат Результат;
	КонецЕсли;
	
	Дерево = ЗаполнитьДеревоОставшихсяОбъектов(РезультатУдаления);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОставшихсяОбъектов");
	
	КоличествоУдаляемых 			= РезультатУдаления.КоличествоУдаляемых;
	КоличествоНеУдаленныхОбъектов 	= РезультатУдаления.КоличествоНеУдаленныхОбъектов;
	ЗаполнитьСтрокуРезультатов(КоличествоУдаляемых);
	
	Если ТипЗнч(РезультатУдаления.Значение) = Тип("Структура") Тогда
		РезультатУдаления.Удалить("Значение");
	КонецЕсли;	
	
	Результат.Вставить("РезультатУдаления", РезультатУдаления);
	Результат.Вставить("СообщениеОбОшибке", "");
    Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ДлительнаяОперация Тогда
			Если ИСТИНА тогда //ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Результат = ЗаполнитьРезультаты(АдресХранилища, Новый Структура);
				ТипыУдаленныхОбъектов = Неопределено;
				ОбновитьСодержание(Результат.РезультатУдаления, Результат.РезультатУдаления.Значение, Результат.РезультатУдаления.ТипыУдаленныхОбъектов);
			Иначе
				//ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					ИСТИНА);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьДеревоОставшихсяОбъектов(Результат)
	
	Найденные   = Результат.Значение.Найденные;
	НеУдаленные = Результат.Значение.НеУдаленные;
	
	КоличествоНеУдаленныхОбъектов = НеУдаленные.Количество();
	
	// Создадим таблицу оставшихся (не удаленных) объектов
	ДеревоОставшихсяОбъектов.ПолучитьЭлементы().Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоОставшихсяОбъектов");
	
	Для Каждого Найденный Из Найденные Цикл
		НеУдаленный = Найденный[0];
		Ссылающийся = Найденный[1];
		ОбъектМетаданныхСсылающегося = Найденный[2].Представление();
		ОбъектМетаданныхНеУдаленногоЗначение = НеУдаленный.Метаданные().ПолноеИмя();
		ОбъектМетаданныхНеУдаленногоПредставление = НеУдаленный.Метаданные().Представление();
		//ветвь метаданного
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДереваСКартинкой(Дерево.Строки, ОбъектМетаданныхНеУдаленногоЗначение, ОбъектМетаданныхНеУдаленногоПредставление, 0);
		//ветвь не удаленного объекта
		СтрокаСсылкиНаНеУдаленныйОбъектБД = НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаОбъектаМетаданных.Строки, НеУдаленный, Строка(НеУдаленный), 2);
		//ветвь ссылки на не удаленный объект
		НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаСсылкиНаНеУдаленныйОбъектБД.Строки, Ссылающийся, Строка(Ссылающийся) + " - " + ОбъектМетаданныхСсылающегося, 1);
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Значение", ИСТИНА);
	
	Возврат Дерево;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуРезультатов(КоличествоУдаляемых)
	
	УдаленныхОбъектов = КоличествоУдаляемых - КоличествоНеУдаленныхОбъектов;
	
	Если УдаленныхОбъектов = 0 Тогда
		СтрокаРезультатов = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удален ни один из объектов, так как в информационной базе существуют ссылки на удаляемые объекты");
	Иначе
		СтрокаРезультатов = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удаление помеченных объектов завершено.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалено объектов") + ": " + Строка(УдаленныхОбъектов);
	КонецЕсли;
	
	Если КоличествоНеУдаленныхОбъектов > 0 Тогда
		СтрокаРезультатов = СтрокаРезультатов + Символы.ПС +
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалено объектов") + ": " + Строка(КоличествоНеУдаленныхОбъектов) + "." + Символы.ПС +
							ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объекты не удалены для сохранения целостности информационной базы, т.к. на них еще имеются ссылки.") + 
							ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нажмите ОК для просмотра списка оставшихся (не удаленных) объектов.");				
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьПомеченныеОбъекты(ПараметрыУдаления, АдресХранилища) 
	
	// Извлекаем параметры
	СписокПомеченныхНаУдал	= ПараметрыУдаления.СписокПомеченныхНаУдаление;
	РежимУдаления				= ПараметрыУдаления.РежимУдаления;
	ТипыУдаленныхОбъектов		= ПараметрыУдаления.ТипыУдаленныхОбъектов;
	
	Удаляемые = ПолучитьМассивПомеченныхОбъектовНаУдаление(СписокПомеченныхНаУдал, РежимУдаления);
	КоличествоУдаляемых = Удаляемые.Количество();
	
	// Выполняем удаление
	Результат = ВыполнитьУдалениеДок(Удаляемые, ТипыУдаленныхОбъектов);
	
	// Добавляем параметры 
	Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда 
		КоличествоНеУдаленныхОбъектов = Результат.Значение.НеУдаленные.Количество();
	Иначе	
		КоличествоНеУдаленныхОбъектов = 0;
	КонецЕсли;	
	Результат.Вставить("КоличествоНеУдаленныхОбъектов", КоличествоНеУдаленныхОбъектов);
	Результат.Вставить("КоличествоУдаляемых",			КоличествоУдаляемых);
	Результат.Вставить("ТипыУдаленныхОбъектов",			ТипыУдаленныхОбъектов);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПомеченныхОбъектовНаУдаление(СписокПомеченныхНаУдаление, РежимУдаления)
	
	Удаляемые = Новый Массив;
	
	Если РежимУдаления = "Полный" Тогда
		// При полном удалении получаем весь список помеченных на удаление
		Удаляемые = ПолучитьПомеченныеНаУдаление();
	Иначе
		// Заполняем массив ссылками на выбранные элементы, помеченные на удаление
		КоллекцияСтрокМетаданных = СписокПомеченныхНаУдаление.ПолучитьЭлементы();
		Для Каждого СтрокаОбъектаМетаданных Из КоллекцияСтрокМетаданных Цикл
			КоллекцияСтрокСсылок = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
			Для Каждого СтрокаСсылки Из КоллекцияСтрокСсылок Цикл
				Если СтрокаСсылки.Пометка Тогда
					Удаляемые.Добавить(СтрокаСсылки.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Удаляемые;

КонецФункции	
&НаСервере
Процедура УдалитьОбъектыНМ(УдаляемыеОбъекты, РежимНМ, ПрепятствуюшиеУдалению)
	Если РежимНМ = ИСТИНА  Тогда
		ВсеСсылки = НайтиПоСсылкам(УдаляемыеОбъекты); //ПрепятствуюшиеУдалению
		ПрепятствуюшиеУдалению.Колонки.Добавить("УдаляемыйСсылка");
		ПрепятствуюшиеУдалению.Колонки.Добавить("ОбнаруженныйСсылка");
        ПрепятствуюшиеУдалению.Колонки.Добавить("ОбнаруженныйМетаданные");
 
		Для Каждого ССылка из ВсеСсылки Цикл
            УдаляемыйСсылка =ССылка[0];
			ССылкаНаобъект = ССылка[1];
            ОбъектМетаданных=ССылка[2];
			Если УдаляемыйСсылка = ССылкаНаобъект Тогда
				Продолжить;   // ссылается сам на себя
			Иначе
				Мешает=ПрепятствуюшиеУдалению.Добавить();
				Мешает.УдаляемыйСсылка=УдаляемыйСсылка;   
				Мешает.ОбнаруженныйСсылка=ССылкаНаобъект;
				Мешает.ОбнаруженныйМетаданные=ОбъектМетаданных;
			КонецЕсли;
		КонецЦикла;
		Иначе
		УдалитьОбъекты(УдаляемыеОбъекты, РежимНМ);//безусловное удаление
	КонецЕсли;	
КонецПроцедуры	
&НаСервере
Функция ВыполнитьУдалениеДок(Знач Удаляемые, ТипыУдаленныхОбъектовМассив) 
	РезультатУдаления = Новый Структура("Статус, Значение", ЛОЖЬ, "");
	
	ТипыУдаленныхОбъектов = Новый ТаблицаЗначений;
	ТипыУдаленныхОбъектов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	Для Каждого УдаляемыйОбъект Из Удаляемые Цикл
		НовыйТип = ТипыУдаленныхОбъектов.Добавить();
		НовыйТип.Тип = ТипЗнч(УдаляемыйОбъект);
	КонецЦикла;
	ТипыУдаленныхОбъектов.Свернуть("Тип");
	
	НеУдаленные = Новый Массив;
	
	Найденные = Новый ТаблицаЗначений;
	Найденные.Колонки.Добавить("УдаляемыйСсылка");
	Найденные.Колонки.Добавить("ОбнаруженныйСсылка");
	Найденные.Колонки.Добавить("ОбнаруженныйМетаданные");
	
	УдаляемыеОбъекты = Новый Массив;
	Для Каждого СсылкаНаОбъект Из Удаляемые Цикл
		УдаляемыеОбъекты.Добавить(СсылкаНаОбъект);
	КонецЦикла;
	
	МетаданныеРегистрыСведений = Метаданные.РегистрыСведений;
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	МетаданныеРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	
	//ИсключенияПоискаСсылок = ОбщегоНазначения.ПолучитьОбщийСписокИсключенийПоискаСсылок();
	
	ИсключающиеПравилаОбъектаМетаданных = Новый Соответствие;
	
	Пока УдаляемыеОбъекты.Количество() > 0 Цикл
		ПрепятствуюшиеУдалению = Новый ТаблицаЗначений;
		
		// Попытка удалить с контролем ссылочной целостности.
		Попытка
			УстановитьПривилегированныйРежим(ИСТИНА);
			УдалитьОбъектыНМ(УдаляемыеОбъекты, ИСТИНА, ПрепятствуюшиеУдалению);
			УстановитьПривилегированныйРежим(ЛОЖЬ);
		Исключение
//			ОбщегоНазначения.РазблокироватьИБ();
			РезультатУдаления.Значение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат РезультатУдаления;
		КонецПопытки;
		
		КоличествоУдаляемыхОбъектов = УдаляемыеОбъекты.Количество();
		
		// Назначение имен колонок для таблицы конфликтов, возникших при удалении.
		ПрепятствуюшиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		ПрепятствуюшиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		ПрепятствуюшиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
		
		// Перемещение удаляемых объектов в список не удаленных
		// и добавление в список найденных зависимых объектов
		// с учетом исключения поиска ссылок.
		Для Каждого СтрокаТаблицы Из ПрепятствуюшиеУдалению Цикл
			//ИсключениеПоиска = ИсключенияПоискаСсылок[СтрокаТаблицы.ОбнаруженныйМетаданные];
			
			ИсключениеПоиска = "*";
			//Если ИсключениеПоиска = "*" Тогда
			//	Продолжить; // Можно удалять (обнаруженный объект метаданных не мешает).
			//КонецЕсли;
			
			// Определение исключащего правила для объекта метаданных, препятствующего удалению:
			// Для регистров (т.н. "необъектных таблиц") - массива реквизитов для поиска в записи регистра.
			// Для ссылочных типов (т.н. "объектных таблиц") - готового запроса для поиска в реквизитах.
			ИменаРеквизитовИлиЗапрос = ИсключающиеПравилаОбъектаМетаданных[СтрокаТаблицы.ОбнаруженныйМетаданные];
			Если ИменаРеквизитовИлиЗапрос = Неопределено Тогда
				
				// Формирование исключащего правила.
				ЭтоРегистрСведений = МетаданныеРегистрыСведений.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные);
				Если ЭтоРегистрСведений
					ИЛИ МетаданныеРегистрыБухгалтерии.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) // ЭтоРегистрБухгалтерии
					ИЛИ МетаданныеРегистрыНакопления.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) Тогда // ЭтоРегистрНакопления
					
					ИменаРеквизитовИлиЗапрос = Новый Массив;
					Если ЭтоРегистрСведений Тогда
						Для Каждого Измерение Из СтрокаТаблицы.ОбнаруженныйМетаданные.Измерения Цикл
							Если Измерение.Ведущее Тогда
								ИменаРеквизитовИлиЗапрос.Добавить(Измерение.Имя);
							КонецЕсли;
						КонецЦикла;
					Иначе
						Для Каждого Измерение Из СтрокаТаблицы.ОбнаруженныйМетаданные.Измерения Цикл
							ИменаРеквизитовИлиЗапрос.Добавить(Измерение.Имя);
						КонецЦикла;
					КонецЕсли;
					
					Если ТипЗнч(ИсключениеПоиска) = Тип("Массив") Тогда
						Для Каждого ИмяРеквизита Из ИсключениеПоиска Цикл
							Если ИменаРеквизитовИлиЗапрос.Найти(ИмяРеквизита) = Неопределено Тогда
								ИменаРеквизитовИлиЗапрос.Добавить(ИмяРеквизита);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ИсключениеПоиска) = Тип("Массив") Тогда
					
					ТекстыЗапросов = Новый Соответствие;
					ИмяКорневойТаблицы = СтрокаТаблицы.ОбнаруженныйМетаданные.ПолноеИмя();
					
					Для Каждого ПутьКРеквизиту Из ИсключениеПоиска Цикл
						ПозицияТочки = Найти(ПутьКРеквизиту, ".");
						Если ПозицияТочки = 0 Тогда
							ПолноеИмяТаблицы = ИмяКорневойТаблицы;
							ИмяРеквизита = ПутьКРеквизиту;
						Иначе
							ПолноеИмяТаблицы = ИмяКорневойТаблицы + "." + Лев(ПутьКРеквизиту, ПозицияТочки - 1);
							ИмяРеквизита = Сред(ПутьКРеквизиту, ПозицияТочки + 1);
						КонецЕсли;
						
						ТекстВложенногоЗапроса = ТекстыЗапросов.Получить(ПолноеИмяТаблицы);
						Если ТекстВложенногоЗапроса = Неопределено Тогда
							ТекстВложенногоЗапроса = 
							"ВЫБРАТЬ ПЕРВЫЕ 1
							|	1
							|ИЗ
							|	"+ ПолноеИмяТаблицы +" КАК Таблица
							|ГДЕ
							|	Таблица.Ссылка = &ОбнаруженныйСсылка
							|	И (";
						Иначе
							ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ ";
						КонецЕсли;
						ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "Таблица." + ИмяРеквизита + " = &УдаляемыйСсылка";
						
						ТекстыЗапросов.Вставить(ПолноеИмяТаблицы, ТекстВложенногоЗапроса);
					КонецЦикла;
					
					ТекстЗапроса = "";
					Для Каждого КлючИЗначение Из ТекстыЗапросов Цикл
						Если ТекстЗапроса <> "" Тогда
							ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
						КонецЕсли;
						ТекстЗапроса = ТекстЗапроса + КлючИЗначение.Значение + ")";
					КонецЦикла;
					
					ИменаРеквизитовИлиЗапрос = Новый Запрос;
					ИменаРеквизитовИлиЗапрос.Текст = ТекстЗапроса;
					
				Иначе
					
					ИменаРеквизитовИлиЗапрос = "";
					
				КонецЕсли;
				
				ИсключающиеПравилаОбъектаМетаданных.Вставить(СтрокаТаблицы.ОбнаруженныйМетаданные, ИменаРеквизитовИлиЗапрос);
				
			КонецЕсли;
			
			// Проверка исключащего правила.
			Если ТипЗнч(ИменаРеквизитовИлиЗапрос) = Тип("Массив") Тогда
				УдаляемаяСсылкаВИсключаемомРеквизите = ЛОЖЬ;
				
				Для Каждого ИмяРеквизита Из ИменаРеквизитовИлиЗапрос Цикл
					Если СтрокаТаблицы.ОбнаруженныйСсылка[ИмяРеквизита] = СтрокаТаблицы.УдаляемыйСсылка Тогда
						УдаляемаяСсылкаВИсключаемомРеквизите = ИСТИНА;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если УдаляемаяСсылкаВИсключаемомРеквизите Тогда
					Продолжить; // Можно удалять (обнаруженная запись регистра не мешает).
				КонецЕсли;
			ИначеЕсли ТипЗнч(ИменаРеквизитовИлиЗапрос) = Тип("Запрос") Тогда
				ИменаРеквизитовИлиЗапрос.УстановитьПараметр("УдаляемыйСсылка", СтрокаТаблицы.УдаляемыйСсылка);
				ИменаРеквизитовИлиЗапрос.УстановитьПараметр("ОбнаруженныйСсылка", СтрокаТаблицы.ОбнаруженныйСсылка);
				Если НЕ ИменаРеквизитовИлиЗапрос.Выполнить().Пустой() Тогда
					Продолжить; // Можно удалять (обнаруженная ссылка не мешает).
				КонецЕсли;
			КонецЕсли;
			
			// Все исключающие правила пройдены.
			// Невозможно удалить объект (мешает обнаруженная ссылка или запись регистра).
			// Сокращение удаляемых объектов.
			Индекс = УдаляемыеОбъекты.Найти(СтрокаТаблицы.УдаляемыйСсылка);
			Если Индекс <> Неопределено Тогда
				УдаляемыеОбъекты.Удалить(Индекс);
			КонецЕсли;
			
			// Добавление не удаленных объектов.
			Если НеУдаленные.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
				НеУдаленные.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
			КонецЕсли;
			
			// Добавление найденных зависимых объектов.
			НоваяСтрока = Найденные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
		// Удаление без контроля, если состав удаляемых объектов не был изменён на этом шаге цикла.
		Если КоличествоУдаляемыхОбъектов = УдаляемыеОбъекты.Количество() Тогда
			Попытка
				// Удаление без контроля ссылочной целостности.
				УстановитьПривилегированныйРежим(ИСТИНА);
				УдалитьОбъекты(УдаляемыеОбъекты, ЛОЖЬ);
				УстановитьПривилегированныйРежим(ЛОЖЬ);
			Исключение
//				ОбщегоНазначения.РазблокироватьИБ();
				РезультатУдаления.Значение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат РезультатУдаления;
			КонецПопытки;
			
			// Удаление всего, что возможно, завершено - выход из цикла.
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НеУдаленныйОбъект Из НеУдаленные Цикл
		НайденныеСтроки = ТипыУдаленныхОбъектов.НайтиСтроки(Новый Структура("Тип", ТипЗнч(НеУдаленныйОбъект)));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТипыУдаленныхОбъектов.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТипыУдаленныхОбъектовМассив = ТипыУдаленныхОбъектов.ВыгрузитьКолонку("Тип");
	
//	ОбщегоНазначения.РазблокироватьИБ();
	
	Найденные.Колонки.УдаляемыйСсылка.Имя        = "Ссылка";
	Найденные.Колонки.ОбнаруженныйСсылка.Имя     = "Данные";
	Найденные.Колонки.ОбнаруженныйМетаданные.Имя = "Метаданные";
	
	РезультатУдаления.Статус = ИСТИНА;
	РезультатУдаления.Значение = Новый Структура("Найденные, НеУдаленные", Найденные, НеУдаленные);
	
	Возврат РезультатУдаления;
КонецФункции

&НаСервере
Функция ПолучитьПомеченныеНаУдаление() 
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	МассивПомеченные = НайтиПомеченныеНаУдаление();
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	
	Результат = Новый Массив;
	Для Каждого ЭлементПомеченный Из МассивПомеченные Цикл
		Если ПравоДоступа("ИнтерактивноеУдалениеПомеченных", ЭлементПомеченный.Метаданные()) Тогда
			Результат.Добавить(ЭлементПомеченный);
		КонецЕсли
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры
