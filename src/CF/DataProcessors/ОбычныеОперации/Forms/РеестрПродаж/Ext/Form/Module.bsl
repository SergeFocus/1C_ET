// sza160325-0316
// sza160325-0151

&НаКлиенте
Перем ТекСтр;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001800", ЭтаФорма, Отказ, Объект);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ИспользоватьПодключаемоеОборудование =ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");

		Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
			ВидЦен = Параметры.ВидЦен;
		ИначеЕсли НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		КонецЕсли;

		Если ЗначениеЗаполнено(ВидЦен) Тогда
			ВалютаЦены = ВидЦен.ВалютаЦены;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВалютаЦены = ОсновнаяВалюта;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Организация = Параметры.Организация;
		ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.ХранилищеДенег) Тогда
			ХранилищеДенег = Параметры.ХранилищеДенег;
		ИначеЕсли НЕ ЗначениеЗаполнено(ХранилищеДенег) Тогда
			ХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
		КонецЕсли;

		Валюта = ХранилищеДенег.Валюта;
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Валюта = ОсновнаяВалюта;
		КонецЕсли;

		Если ЗначениеЗаполнено(Параметры.Склад) Тогда
			Склад = Параметры.Склад;
		Иначе
			Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
			КонецЕсли;
		КонецЕсли;

		Элементы.ТоварыКлиентПоставщик.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		Элементы.ДанныеОплаты.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
		Элементы.ГруппаХранилищДенег.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;

		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");

		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Если ЕстьСегодняТакиеРасходные() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("Прочитатьдокументызасегодня", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прочитать документы за") + " " + Формат(ОбщийМодульКлиент.ПользователяТекущаяДата(), "ДФ=dd.MM.yy") + " ?", РежимДиалогаВопрос.ДаНет, , , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка данных"));
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСегодняТакиеРасходные()

	Результат = ЛОЖЬ;
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыТовара.Ссылка
	|ИЗ Документ.РасходыТовара КАК РасходыТовара
	|ГДЕ РасходыТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходыТовара.Проведен = ИСТИНА";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка.Товары.Количество() = 1 Тогда
			Результат = ИСТИНА;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура Прочитатьдокументызасегодня(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДокументыЗаПериод(ИСТИНА);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументыЗаПериод(Знач ЗаСегодня = ЛОЖЬ, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено)

	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Если ЗаСегодня Тогда
		ДатаНачала = НачалоДня(Дата);
		ДатаОкончания = КонецДня(Дата);
	Иначе
		Если ДатаНачала = Неопределено Тогда
			ДатаНачала = НачалоДня(Дата);
		КонецЕсли;
		Если ДатаОкончания = Неопределено Тогда
			ДатаОкончания = КонецДня(Дата);
		КонецЕсли;
	КонецЕсли;

	ДатаНачала = НачалоДня(ДатаНачала);
	ДатаОкончания = КонецДня(ДатаОкончания);

	Объект.Товары.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходыТовара.Ссылка
	|ИЗ Документ.РасходыТовара КАК РасходыТовара
	|ГДЕ РасходыТовара.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходыТовара.Проведен = ИСТИНА";

	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);

	ПериодОтбора.ДатаНачала = ДатаНачала;
	ПериодОтбора.ДатаОкончания = ДатаОкончания;

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка.Товары.Количество() = 1 Тогда

			СтрокаТовара = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаДетальныеЗаписи.Ссылка.Товары[0]);
			ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаДетальныеЗаписи.Ссылка);
			СтрокаТовара.Разница = ОбщийМодульСервер.ПоКурсу(СтрокаТовара.Сумма, , ВалютаЦены, СтрокаТовара.Дата) - ОбщийМодульСервер.ПоКурсу(СтрокаТовара.ПоступилоДенег, , СтрокаТовара.Валюта, СтрокаТовара.Дата);
			СтрокаТовара.ДокументРеализации = ВыборкаДетальныеЗаписи.Ссылка;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()

	Элементы.ТоварыИтогРазница.Видимость = НЕ Объект.Товары.Итог("Разница") = 0;
	Элементы.ТоварыИтогПоступилоДенег.Видимость = НЕ Объект.Товары.Итог("ПоступилоДенег") = 0;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Если ЗначениеЗаполнено(Организация) Тогда
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Склад) Тогда

			Склад = Организация.Склад;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(ТекущиеДанные = Неопределено)

	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Если ТекущиеДанные.Количество <= 0 Тогда
			ТекущиеДанные.Количество = 1;
		КонецЕсли;
		ТекущиеДанные.Цена  = ОбщийМодульСервер.ПолучитьЦенуНаСервере(ТекущиеДанные.Номенклатура, ВидЦен, ТекущиеДанные.Дата, ЛОЖЬ, ТекущиеДанные.Количество, ТекущиеДанные.Договор);
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
		ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);
	КонецЕсли;

	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	глВремяПоследнегоСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные.Количество <= 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные.Количество <= 0 Тогда
		ТекущиеДанные.Количество = 1;
	КонецЕсли;
	ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
		ИначеЕсли ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Параметр);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РезультатСтруктура = ОбработатьПолученныйШтрихкодНаСервере(ТекКод, , ТекущиеДанные.КлиентПоставщик, ТекущиеДанные.Договор, ТекущиеДанные.Дата);

	Если РезультатСтруктура.Результат = 2 Тогда

		ОписаниеНоменклатуры = РезультатСтруктура.ОписаниеНоменклатуры;
		ТекущиеДанные.Номенклатура 	= ОписаниеНоменклатуры.Номенклатура;
		ТекущиеДанные.Цена 			= ОписаниеНоменклатуры.Цена;
		ТекущиеДанные.Количество 	= ОписаниеНоменклатуры.Количество;
		ТекущиеДанные.Сумма 		= ОписаниеНоменклатуры.Сумма;
		ТекущиеДанные.Разница 		= ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

	ИначеЕсли РезультатСтруктура.Результат = 2 Тогда

	ИначеЕсли РезультатСтруктура.Результат = 3 Тогда

	КонецЕсли;

	Если НЕ РезультатСтруктура.Результат = Неопределено Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод, Количество = 1, КлиентПоставщик, Знач Договор, Знач Дата)

	РезультатСтруктура = Новый Структура("Результат", Неопределено);

	РезультатОбработки = ОбщийМодульТоварСервер.НайтиНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, , Дата);
	Если ЗначениеЗаполнено(РезультатОбработки.Номенклатура) Тогда
		РезультатСтруктура.Вставить("ОписаниеНоменклатуры", ДобавитьПозициюНоменклатуры(РезультатОбработки, ИСТИНА, , Договор, Дата));
		// СтрокаДисплеяПокупателя = СокрЛП(РезультатОбработки.Номенклатура);
		РезультатСтруктура.Результат = 1;
	Иначе
		ОстановитьПоиск = ЛОЖЬ;

		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда

			РезультатОбработки = ОбщийМодульСервер.НайтиКонтрагентаПоШтрихКоду(ТекКод);

			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				КлиентПоставщик = РезультатОбработки;
				ОстановитьПоиск = ИСТИНА;
				РезультатСтруктура.Результат = 2;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ОстановитьПоиск
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда

			РезультатОбработки = ОбщийМодульСервер.НайтиКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);

			Если ЗначениеЗаполнено(РезультатОбработки) Тогда
				Организация = РезультатОбработки;
				ОрганизацияПриИзмененииНаСервере();
				ОстановитьПоиск = ИСТИНА;
				РезультатСтруктура.Результат = 3;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ОстановитьПоиск Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден") + " (" + ТекКод + ").");
			РезультатСтруктура.Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатСтруктура;

КонецФункции

&НаСервере
Функция   ДобавитьПозициюНоменклатуры(Знач НоменклатураСтруктура, Знач НеСтановитсяНаЭтуСтроку = ЛОЖЬ, Знач МножительКоличества = 1, Знач Договор, Знач Дата)

	ОписаниеНоменклатуры = Новый Структура;

	СерияНоменклатуры = Неопределено;
	Если ТипЗнч(НоменклатураСтруктура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = НоменклатураСтруктура;
		Количество 	 = МножительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура);
		Цена 		 = 0;
		ЦенаЕсть 	 = ЛОЖЬ;
	Иначе
		Номенклатура = НоменклатураСтруктура.Номенклатура;
		Количество 	 = НоменклатураСтруктура.Количество * МножительКоличества * ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(НоменклатураСтруктура.Номенклатура);
		Цена 		 = 0;
		ЦенаЕсть 	 = НоменклатураСтруктура.Свойство("Цена", Цена);
	КонецЕсли;

	ОписаниеНоменклатуры.Вставить("Номенклатура", Номенклатура);

	Если НЕ ЦенаЕсть Тогда
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ЛОЖЬ, Количество, Договор);
	КонецЕсли;

	Сумма = Количество * Цена;

	ОписаниеНоменклатуры.Вставить("Количество", Количество);
	ОписаниеНоменклатуры.Вставить("Цена", Цена);
	ОписаниеНоменклатуры.Вставить("Сумма", Сумма);

	Возврат ОписаниеНоменклатуры;

КонецФункции

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)

	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;

	КлиентПоставщик = ПолучитьКлиентаНаСервере(МКод);
	Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.КлиентПоставщик = КлиентПоставщик;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ПолучитьКлиентаНаСервере(Знач МКод)

	Результат = Неопределено;

	ОпределенныйКлиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
	Если НЕ ОпределенныйКлиент = Неопределено Тогда
		Результат = ОпределенныйКлиент;
	Иначе
		Результат = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден") + ": " + МКод);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОтправитьНаПродажу(Знач НеПроводить = ЛОЖЬ, СрокаПродажи)

	ДокументНеПроводить = НеПроводить;

	Если Не ЗначениеЗаполнено(СрокаПродажи.Номенклатура) Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана номенклатура реализации!"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание"));
	Иначе

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И СрокаПродажи.ПоступилоДенег = 0
			И НЕ СрокаПродажи.Сумма = 0 Тогда

			ПоказатьВопрос(Новый ОписаниеОповещения("ПродатьЗавершение", ЭтотОбъект), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент оплатил") + ": " + Формат(СрокаПродажи.Сумма, "ЧЦ=15; ЧДЦ=2") + " " + СокрЛП(ВалютаЦены) + " ?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;

		ПродатьФрагмент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекСтр.ПоступилоДенег = ТекСтр.Сумма;
		ТекСтр.Валюта = ВалютаЦены;
	КонецЕсли;

	ПродатьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПродатьФрагмент()

	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ПродатьНаСервере(ТекущаяСтрока);
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаСервере
Процедура ПродатьНаСервере(Знач ТекущаяСтрока)

	СрокаПродажи = Объект.Товары[ТекущаяСтрока];

	ВидДокумента = "";

	Если ЗначениеЗаполнено(СрокаПродажи.ДокументРеализации) Тогда
		ДокументРеализации = СрокаПродажи.ДокументРеализации.ПолучитьОбъект();
	Иначе
		ДокументРеализации = Документы.РасходыТовара.СоздатьДокумент();
	КонецЕсли;

	Если ЗначениеЗаполнено(СрокаПродажи.КлиентПоставщик) Тогда
		Если НЕ СрокаПродажи.ПоступилоДенег = 0 Тогда
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализация");
		Иначе
			ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
		КонецЕсли;
	Иначе
		ВидДокумента = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Списание");
	КонецЕсли;

	//	ДокументРеализации.Адрес
	ДокументРеализации.Валюта = СрокаПродажи.Валюта;
	//ДокументРеализации.ВаучерНакопления
	//ДокументРеализации.ВаучерСкидки
	//ДокументРеализации.Ваучеры
	ДокументРеализации.ВидДокумента = ВидДокумента;
	ДокументРеализации.ВидЦен = ВидЦен;
	ДокументРеализации.Дата = СрокаПродажи.Дата;
	//ДокументРеализации.ДатаОповещения
	//ДокументРеализации.ДатаОтправки
	//ДокументРеализации.ДатаОтсрочки
	//ДокументРеализации.ДатаОтчетаПоКомиссии
	//ДокументРеализации.ДатаСчета
	ДокументРеализации.Договор = СрокаПродажи.Договор;
	//ДокументРеализации.ДокументСторно
	//ДокументРеализации.ЗаказДатаПлана
	//ДокументРеализации.ЗаказДатаФакта
	ДокументРеализации.ЗаказКлиента = СрокаПродажи.ЗаказКлиента;
	//ДокументРеализации.ЗаказНомерПриРегистрации
	//ДокументРеализации.ЗаказОплачен
	//ДокументРеализации.ЗаказСогласован
	//ДокументРеализации.КлиентОповещен
	ДокументРеализации.КлиентПоставщик = СрокаПродажи.КлиентПоставщик;
	ДокументРеализации.Комментарий = СрокаПродажи.ОСтроке;
	ДокументРеализации.Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(СрокаПродажи.Валюта, СрокаПродажи.Дата);
	//ДокументРеализации.НалогообложениеНДС
	//ДокументРеализации.НаправлениеДеятельности
	//ДокументРеализации.НеПроводить
	//ДокументРеализации.Номер
	//ДокументРеализации.НомерСчета
	//ДокументРеализации.ОбменДанными
	ДокументРеализации.Оплаты.Очистить();
	ДокументРеализации.Организация = Организация;
	//ДокументРеализации.ОтветственныйЗаДоставку
	//ДокументРеализации.ПартияПриобретения
	//ДокументРеализации.ПередачаДляКомиссионнойТорговли
	//ДокументРеализации.ПКОНапечатан
	//ДокументРеализации.ПланОплаты
	ДокументРеализации.ПоступилоДенег = СрокаПродажи.ПоступилоДенег;
	//ДокументРеализации.ПредметСделки
	//ДокументРеализации.ПроТовары
	ДокументРеализации.Склад = Склад;
	//ДокументРеализации.Сотрудник
	//ДокументРеализации.СпособДоставки
	//ДокументРеализации.Статус
	//ДокументРеализации.Сторный
	//ДокументРеализации.ТалонТрек
	ДокументРеализации.Телефон = СрокаПродажи.Телефон;
	//ДокументРеализации.ТовараВКоличестве
	//ДокументРеализации.ТовараНаСумму
	//ДокументРеализации.ТовараНаСуммуВВалюте
	//ДокументРеализации.ТоварОтправлен
	ДокументРеализации.Товары.Очистить();
	СтрокаТовара = ДокументРеализации.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовара, СрокаПродажи);

	Если ЗначениеЗаполнено(ХранилищеДенег)
		И ХранилищеДенег.Валюта = СрокаПродажи.Валюта Тогда

		ДокументРеализации.ХранилищеДенег = ХранилищеДенег;
	ИначеЕсли ЗначениеЗаполнено(ХранилищеДенегВВалюте)
		И ХранилищеДенегВВалюте.Валюта = СрокаПродажи.Валюта Тогда

		ДокументРеализации.ХранилищеДенег = ХранилищеДенегВВалюте;
	Иначе
		ДокументРеализации.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(СрокаПродажи.Валюта, , , ИСТИНА);
	КонецЕсли;

	ДокументРеализации.ЭтоЗаказ = ЛОЖЬ;
	ДокументРеализации.ПодготовкаКПроведению(ЛОЖЬ);

	Попытка
		Если ДокументНеПроводить Тогда
			ДокументРеализации.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументРеализации.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;

		СрокаПродажи.ДокументРеализации = ДокументРеализации.Ссылка;

	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка проведения продажи") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;

	ДокументНеПроводить = ЛОЖЬ;

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)

	ШтрихКод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводШтрихКодаЗавершение", ЭтотОбъект, Новый Структура("ШтрихКод", ШтрихКод)), ШтрихКод, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод"));

КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКодаЗавершение(Значение, ДополнительныеПараметры) Экспорт

	ШтрихКод = ?(Значение = Неопределено, ДополнительныеПараметры.ШтрихКод, Значение);

	Если (Значение <> Неопределено) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			ОбработатьПолученныйШтрихкодНаКлиенте(ШтрихКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	ОбщийМодульКлиент.ПоискОшибкиПриВводеТекстаПользователем("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, ТекСтр.КлиентПоставщик);

	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры(ТекСтр) 	;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ТекСтр = Неопределено Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;

	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыФормы = Новый Структура;

	Если ЗначениеЗаполнено(ВидЦен) Тогда
		ПараметрыФормы.Вставить("ВидЦен", ВидЦен);
	КонецЕсли;

	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Склад) Тогда

		ПараметрыФормы.Вставить("ОтборПоСкладу", Склад);
	КонецЕсли;

	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ИСТИНА);
	ПараметрыФормы.Вставить("КлиентПоставщик", ТекСтр.КлиентПоставщик);
	ПараметрыФормы.Вставить("ОтборПоДате", ТекСтр.Дата);
	СтрокаТовара = ТекСтр;

	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", СтрокаТовара.Номенклатура);
	КонецЕсли;

	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	Номенклатура = ФормаВыбора.ОткрытьМодально();

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекСтр.Номенклатура = Номенклатура;
		ПриИзмененииНоменклатуры(ТекСтр);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличество;
	Иначе
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ИСТИНА);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = НЕ РаботаетВыборЧастогоСпроса;
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	ТекСтр = Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегВВалютеПриИзменении(Элемент)
	Валюта = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(ХранилищеДенегВВалюте, "Валюта");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ТекСтр = Элементы.Товары.ТекущиеДанные;
		ТекСтр.Дата = ОбщийМодульКлиент.ПользователяТекущаяДата();
		ТекСтр.КлиентПоставщик = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию");
		Если ЗначениеЗаполнено(ТекСтр.КлиентПоставщик) Тогда
			ТекСтр.Телефон = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(ТекСтр.КлиентПоставщик, "Телефон");
		КонецЕсли;
		ТекСтр.Количество = 1;

		ЭтаФорма.ТекущийЭлемент = Элементы.ТоварыКлиентПоставщик;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКлиентПоставщикПриИзменении(Элемент)

	ТекСтр = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтр.КлиентПоставщик) Тогда
		ТекСтр.Телефон = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(ТекСтр.КлиентПоставщик, "Телефон");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоступилоДенегОткрытие(Элемент, СтандартнаяОбработка)

	ТекСтр = Элементы.Товары.ТекущиеДанные;
	ТекСтр.ПоступилоДенег = ТекСтр.Сумма;
	ТекСтр.Валюта = ВалютаЦены;
	ТекСтр.Разница = 0;
	СтандартнаяОбработка = ЛОЖЬ;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекСтр = Элементы.Товары.ТекущиеДанные;
	ОтправитьНаПродажу(, ТекСтр);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоступилоДенегПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Разница = ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.Сумма, , ВалютаЦены, ТекущиеДанные.Дата) - ОбщийМодульСервер.ПоКурсу(ТекущиеДанные.ПоступилоДенег, , ТекущиеДанные.Валюта, ТекущиеДанные.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ПериодОтбораПриИзменении(Элемент)
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтбораДатаНачалаПриИзменении(Элемент)
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтбораДатаОкончанияПриИзменении(Элемент)
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ДеньНазад(Команда)

	ПериодОтбора.ДатаНачала = НачалоДня(ПериодОтбора.ДатаНачала - 3600);
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);

КонецПроцедуры

&НаКлиенте
Процедура ДеньВперед(Команда)

	ПериодОтбора.ДатаОкончания = КонецДня(КонецДня(ПериодОтбора.ДатаОкончания) + 3600);
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);

КонецПроцедуры

&НаКлиенте
Процедура ЗаСегодня(Команда)

	ПериодОтбора.ДатаНачала = НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ПериодОтбора.ДатаОкончания = КонецДня(ПериодОтбора.ДатаНачала);
	ЗагрузитьДокументыЗаПериод(, ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыТелефонПриИзменении(Элемент)

	ТекСтр = Элементы.Товары.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекСтр.КлиентПоставщик)
		И НЕ ПустаяСтрока(ТекСтр.Телефон) Тогда

		ОбщийМодульСервер.ЗаписатьЗначениеРеквизитаОбъектаБазыДанных(ТекСтр.КлиентПоставщик, "Телефон", ТекСтр.Телефон);
	КонецЕсли;

КонецПроцедуры

ТекСтр = Неопределено;
