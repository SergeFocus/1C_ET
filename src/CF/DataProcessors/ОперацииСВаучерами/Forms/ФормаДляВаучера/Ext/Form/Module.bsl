// sza150603-0303 
// sza150528-1326 

&НаКлиенте
Процедура ВыдатьВаучерКлиенту(Команда)
	
	Если ПроверитьВаучер() Тогда
		ВыдатьВаучерКлиентуНаСервере();
		Закрыть(ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьВаучерКлиентуНаСервере()
	
	Сумма = ОбщийМодульСервер.ПолучитьЦенуСписания(Объект.Номенклатура, 1, Объект.ДатаОперации, , , Объект.Склад);
	
	Если ВозвратВаучера Тогда
		
		Если НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры Тогда
			ДокументПоступления = Документы.ПоступленияТовара.СоздатьДокумент();
			ДокументПоступления.Валюта		 = Объект.ВалютаОплаты;
			ДокументПоступления.ВидДокумента = Перечисления.ВидыДокументаПриходаТовара.ВозвратОтПокупателя;
			ДокументПоступления.ВидЦен  	 = Справочники.ВидыЦен.ГлавныйВидЦен;
			Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
				ДокументПоступления.ВыбылоДенег	 = Объект.Сумма;					
			КонецЕсли;
			ДокументПоступления.Дата			  = Объект.ДатаОперации;
			ДокументПоступления.КлиентПоставщик	  = Объект.Контрагент;
			ДокументПоступления.Комментарий		  = Объект.Комментарий;
			ДокументПоступления.Курс			  = Объект.Курс;
			ДокументПоступления.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
			ДокументПоступления.Организация       = Объект.Организация;
			ДокументПоступления.Склад			  = Объект.Склад;
			ДокументПоступления.ТовараВКоличестве = 1;
			ДокументПоступления.ТовараНаСумму	  = Объект.Сумма;
			ДокументПоступления.ХранилищеДенег	  = Объект.ХранилищеДенег;
			
			СтрокаТовары = ДокументПоступления.Товары.Добавить();
			СтрокаТовары.Количество 	= 1;
			СтрокаТовары.Номенклатура 	= Объект.Номенклатура;
			СтрокаТовары.ОСтроке 		= Объект.Комментарий;
			СтрокаТовары.Сумма 			= Сумма;
			СтрокаТовары.Цена 			= Сумма;
			
			ДокументПоступления.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
			СтрокаДокумент.ЭлементИлиДокумент = ДокументПоступления.Ссылка;
		КонецЕсли;
		
		Если НЕ ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода
			И НЕ Объект.Сумма = 0 Тогда
			
			ДокументРасходаДенег = Документы.ДвиженияДенег.СоздатьДокумент();
			ДокументРасходаДенег.Валюта			 = Объект.ВалютаВаучера;
			ДокументРасходаДенег.ВидДокумента	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
			ДокументРасходаДенег.Дата			 = Объект.ДатаОперации;
			ДокументРасходаДенег.ЕстьРасход		 = ИСТИНА;
			ДокументРасходаДенег.КлиентПоставщик = Объект.Контрагент;
			ДокументРасходаДенег.Комментарий	 = Объект.Комментарий;
			ДокументРасходаДенег.Курс			 = Объект.Курс;
			ДокументРасходаДенег.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
			ДокументРасходаДенег.Организация	 = Объект.Организация;
			ДокументРасходаДенег.Статья			 = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации; //сторно
			ДокументРасходаДенег.Сумма			 = Объект.Сумма;
			ДокументРасходаДенег.СуммаРасход	 = Объект.Сумма;
			ДокументРасходаДенег.ФормаОплаты	 = Объект.ФормаОплаты;
			ДокументРасходаДенег.ХранилищеДенег  = Объект.ХранилищеДенег;
			
			ДокументРасходаДенег.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			
			СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
			СтрокаДокумент.ЭлементИлиДокумент = ДокументРасходаДенег.Ссылка;
		КонецЕсли;
		
		ОбъектВаучер = Объект.Ваучер.ПолучитьОбъект();
		Если ОбъектВаучер.ДатаРегистрации = '00010101' Тогда
			ОбъектВаучер.ДатаРегистрации = ТекущаяДата();
		КонецЕсли;
		
		ОбъектВаучер.Контрагент = Справочники.Клиенты.ПустаяСсылка();
		ОбъектВаучер.Записать();
		СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
		СтрокаДокумент.ЭлементИлиДокумент = ОбъектВаучер.Ссылка;
		Объект.Ваучер = ОбъектВаучер.Ссылка;
		
		ПринадлежностьВаучеров = РегистрыСведений.ПринадлежностьВаучеров.СоздатьМенеджерЗаписи();
		ПринадлежностьВаучеров.Активность 	= Истина;
		ПринадлежностьВаучеров.Ваучер  		= Объект.Ваучер;
		ПринадлежностьВаучеров.Контрагент	= Справочники.Клиенты.ПустаяСсылка();
		ПринадлежностьВаучеров.Период 		= Объект.ДатаОперации;
		ПринадлежностьВаучеров.Сумма 		= Объект.Ваучер.НоминалПроцент;
		
		Попытка 
			ПринадлежностьВаучеров.Записать(Истина);		
		Исключение 
			Сообщение = Новый СообщениеПользователю;
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений") + ": " + ПринадлежностьВаучеров + " " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки; 	
		
	Иначе //реализация или выдача	
		Если НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры Тогда		
			ДокументРасхода = Документы.РасходыТовара.СоздатьДокумент();
			ДокументРасхода.Дата 	= Объект.ДатаОперации;
			ДокументРасхода.ВидЦен  = Справочники.ВидыЦен.ГлавныйВидЦен;
			
			Если Реализация Тогда
				ДокументРасхода.КлиентПоставщик = Объект.Контрагент;
				
				Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
					ДокументРасхода.ПоступилоДенег = объект.Сумма;
				КонецЕсли;
			КонецЕсли;
			ДокументРасхода.Валюта 			= Объект.ВалютаОплаты;
			ДокументРасхода.Комментарий 	= СокрЛП(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Передача ваучера клиенту") + " " + Объект.Контрагент);
			ДокументРасхода.Организация 	= Объект.Организация;
			ДокументРасхода.Склад 			= Объект.Склад;
			ДокументРасхода.ТовараВКоличестве = 1;
			ДокументРасхода.ТовараНаСумму 	= Сумма;
			ДокументРасхода.ВидДокумента 	= ?(Реализация, перечисления.ВидыДокументаРасходаТовара.Реализация, перечисления.ВидыДокументаРасходаТовара.Списание);
			
			СтрокаТовары = ДокументРасхода.Товары.Добавить();
			СтрокаТовары.Количество 	= 1;
			СтрокаТовары.Номенклатура 	= Объект.Номенклатура;
			СтрокаТовары.ОСтроке 		= Объект.Комментарий;
			СтрокаТовары.Сумма 			= Сумма;
			СтрокаТовары.СуммаБезСкидки = Сумма;
			СтрокаТовары.Цена 			= Сумма;
			
			ДокументРасхода.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
			СтрокаДокумент.ЭлементИлиДокумент = ДокументРасхода.Ссылка;			
		КонецЕсли;
		
		Если Реализация
			И (НеОтслеживатьВаучерыВКачествеНоменклатуры ИЛИ НЕ ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода)
			И НЕ Объект.Сумма = 0 Тогда
			
			ДокументПоступленияДенег = Документы.ДвиженияДенег.СоздатьДокумент();
			ДокументПоступленияДенег.Валюта 		 = Объект.ВалютаОплаты;
			ДокументПоступленияДенег.ВидДокумента 	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приход");
			ДокументПоступленияДенег.Дата			 = Объект.ДатаОперации;
			ДокументПоступленияДенег.ЕстьПриход		 = ИСТИНА;
			ДокументПоступленияДенег.КлиентПоставщик = Объект.Контрагент;
			ДокументПоступленияДенег.Комментарий	 = Объект.Комментарий;
			ДокументПоступленияДенег.Курс			 = Объект.Курс;
			ДокументПоступленияДенег.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
			ДокументПоступленияДенег.Организация	 = Объект.Организация;
			ДокументПоступленияДенег.ПриходДенег	 = ИСТИНА;
			ДокументПоступленияДенег.Статья			 = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации");
			ДокументПоступленияДенег.Сумма			 = Объект.Сумма;
			ДокументПоступленияДенег.СуммаПриход	 = Объект.Сумма;
			ДокументПоступленияДенег.ФормаОплаты	 = Объект.ФормаОплаты;
			ДокументПоступленияДенег.ХранилищеДенег  = Объект.ХранилищеДенег;
			
			ДокументПоступленияДенег.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			
			СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
			СтрокаДокумент.ЭлементИлиДокумент = ДокументПоступленияДенег.Ссылка;
		КонецЕсли;
		
		ОбъектВаучер = Объект.Ваучер.ПолучитьОбъект();
		Если ОбъектВаучер.ДатаРегистрации = '00010101' Тогда
			ОбъектВаучер.ДатаРегистрации = ТекущаяДата();
		КонецЕсли;
		
		ОбъектВаучер.Контрагент = Объект.Контрагент;
		ОбъектВаучер.Записать();
		СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
		СтрокаДокумент.ЭлементИлиДокумент = ОбъектВаучер.Ссылка;
		Объект.Ваучер = ОбъектВаучер.Ссылка;
		
		ПринадлежностьВаучеров = РегистрыСведений.ПринадлежностьВаучеров.СоздатьМенеджерЗаписи();
		ПринадлежностьВаучеров.Активность 	= Истина;
		ПринадлежностьВаучеров.Ваучер  		= Объект.Ваучер;
		ПринадлежностьВаучеров.Контрагент	= Объект.Контрагент;
		ПринадлежностьВаучеров.Период 		= Объект.ДатаОперации;
		ПринадлежностьВаучеров.Сумма 		= Объект.Ваучер.НоминалПроцент;
		
		Попытка 
			ПринадлежностьВаучеров.Записать(Истина);		
		Исключение 
			Сообщение = Новый СообщениеПользователю;
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений") + ": " + ПринадлежностьВаучеров + " " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки; 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000610", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;	
		
		Реализация = Параметры.Реализация;		
		Если Реализация Тогда
			Элементы.ФормаВыдатьВаучерКлиенту.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реализовать ваучер клиенту");
		КонецЕсли;
		
		ВозвратВаучера = Параметры.ВозвратВаучера; 
		Если ВозвратВаучера Тогда
			Элементы.ФормаВыдатьВаучерКлиенту.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принять ваучер от клиента");
			Элементы.ОплаченоПоставщику.Заголовок 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выдано клиенту денег");
			Элементы.Комментарий.Заголовок 				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Причина возврата");
		КонецЕсли;
		
		ВестиУчетПоНаправлениямДеятельности = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ВестиУчетПоСкладам 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		НеОтслеживатьВаучерыВКачествеНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");		
		ВестиУчетДенегВНесколькихХранилищах 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		НеОтслеживатьВаучерыВКачествеНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");	
		ИспользоватьПодключаемоеОборудование 	  = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		
		ОсновнаяВалюта 		= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ОсновнаяВалютаНаименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОсновнаяВалюта);
		ВестиУчетВалют 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		Объект.Валюта 		= ОсновнаяВалюта;
		Объект.ВалютаОплаты = ОсновнаяВалюта;
		Объект.Курс 		= 1;		
		Объект.Склад 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = справочники.Склады.ОсновнойСклад;
		КонецЕсли;
		
		Объект.ФормаОплаты  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
		Объект.Организация  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
		КонецЕсли;
		Объект.НаправлениеДеятельности = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеНаправлениеДеятельности");
		
		Объект.ДатаОперации = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		Объект.Организация  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
		КонецЕсли;
		
		Объект.Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Справочники.Склады.ОсновнойСклад;
		КонецЕсли;
		
		Элементы.УсловияРеализации.Видимость = Реализация;
		Элементы.Склад.Видимость = НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры;
		Элементы.ВаучерНоменклатура.Видимость = НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры;
		
		Объект.ДатаОперации = ОбщийМодульСервисСервер.ПользователяТекущаяДата();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	// ПодключаемоеОборудование	
	Если ОбщийМодульКлиент.ИспользоватьПодключаемоеОборудование() Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Функция   ПроверитьВаучер()
	
	Результат = ЗначениеЗаполнено(объект.Ваучер);
	
	Если Результат Тогда
		Если НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Номенклатура) Тогда
				
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В ваучере не указана номенклатура!"));
				Результат = ЛОЖЬ;	
			КонецЕсли;
			
			Если ВестиУчетПоСкладам
				И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад не указан!"));
				Результат = ЛОЖЬ;	
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.Ваучер, "ТипВаучера") = ПредопределенноеЗначение("Перечисление.ТипыВаучера.ПодарочнаяКарта") Тогда
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочную карту нельзя передать безвозмездно!"));
			Результат = ЛОЖЬ;
		КонецЕсли;		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер не указан!"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПроверитьВаучер

&НаКлиенте
Процедура ВаучерПриИзменении(Элемент)
	ВаучерПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВаучерПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ваучер) Тогда
		Объект.Номенклатура = Объект.Ваучер.Номенклатура;
		Объект.ТипВаучера 	= Объект.Ваучер.ТипВаучера;
		Объект.Контрагент	= Объект.Ваучер.Контрагент;
		
		Элементы.Накоплено.Видимость 			= ЛОЖЬ;
		Элементы.УсловияРеализации.Видимость 	= ИСТИНА;
		Элементы.ВаучерНоминалПроцент.Видимость = ИСТИНА;		
		Элементы.ВаучерДатаНачала.Видимость 	= ЗначениеЗаполнено(Объект.Ваучер.ДатаНачала);
		Элементы.ВаучерДатаОкончания.Видимость 	= ЗначениеЗаполнено(Объект.Ваучер.ДатаОкончания);
		
		Если Объект.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта
			ИЛИ Объект.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаСумма Тогда
			
			Объект.Сумма  	= Объект.Ваучер.НоминалПроцент;
			Объект.Валюта 	= Объект.Ваучер.Валюта;
			Объект.ВалютаОплаты = Объект.Ваучер.Валюта;
			Объект.Курс 	= ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.ВалютаОплаты, Объект.ДатаОперации, ЛОЖЬ);
			
		ИначеЕсли Объект.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
			Объект.Сумма = 0;
			Элементы.УсловияРеализации.Видимость 	= ЛОЖЬ;
			Элементы.ВаучерНоминалПроцент.Видимость = ЛОЖЬ;
			
		ИначеЕсли Объект.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта Тогда
			Объект.Сумма = 0;
			Накоплено 	 = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Объект.Ваучер, Объект.ДатаОперации);
			Элементы.Накоплено.Видимость 		 = ИСТИНА;
			Элементы.УсловияРеализации.Видимость = ЛОЖЬ;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОплатыПриИзменении(Элемент)
	Объект.Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.ВалютаОплаты, Объект.ДатаОперации, ЛОЖЬ);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Знач ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер не найден!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(Знач ТекКод)
	
	Результат = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Результат = ИСТИНА;
	
	СтруктураПараметров = Новый Структура("Ваучер");
	Объект.Ваучер = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ваучер) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер по Штрих-Коду не найден") + " (" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
