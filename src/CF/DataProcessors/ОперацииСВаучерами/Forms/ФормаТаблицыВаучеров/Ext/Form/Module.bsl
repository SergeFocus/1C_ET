// sza150605-0236 
// sza150525-1626 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000610", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ВестиУчетПоСкладам			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетПоПоставщикам 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");		
		ВаучерыСкидочнымиКартами 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыСкидочнымиКартами");
		ВаучерыНакопительнымиКартами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыНакопительнымиКартами");
		ВаучерыПодарочнымиКартами 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыПодарочнымиКартами");
		ВаучерыИдентификаторами		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыИдентификаторами");
		ВестиУчетОтдельныхДоговоровСКонтрагентами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами");
		ВестиУчетПоНаправлениямДеятельности 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности");
		ВестиУчетДенегВНесколькихХранилищах 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		НеОтслеживатьВаучерыВКачествеНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");	
		ИспользоватьПодключаемоеОборудование 	  = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода");
		
		Объект.ВалютаВаучера = справочники.Валюты.ОсновнаяВалюта;
		
		ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ОсновнаяВалютаНаименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОсновнаяВалюта);
		
		ВестиУчетВалют = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		Объект.Валюта = ОсновнаяВалюта;
		Объект.ВалютаОплаты = ОсновнаяВалюта;
		Объект.Курс = 1;
		
		Объект.Склад 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = справочники.Склады.ОсновнойСклад;
		КонецЕсли;
		
		Объект.ФормаОплаты  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию");
		Объект.Организация  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
		КонецЕсли;
		Объект.НаправлениеДеятельности = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеНаправлениеДеятельности");
		
		Если ВаучерыСкидочнымиКартами
			И НЕ ВаучерыПодарочнымиКартами
			И НЕ ВаучерыНакопительнымиКартами
			И НЕ ВаучерыИдентификаторами Тогда
			
			Объект.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент;
			
		ИначеЕсли НЕ ВаучерыСкидочнымиКартами
			И ВаучерыПодарочнымиКартами
			И НЕ ВаучерыНакопительнымиКартами
			И НЕ ВаучерыИдентификаторами Тогда
			
			Объект.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта;
			Элементы.ТипВаучера.Видимость = ЛОЖЬ;
			
		ИначеЕсли НЕ ВаучерыСкидочнымиКартами
			И НЕ ВаучерыПодарочнымиКартами
			И ВаучерыНакопительнымиКартами
			И НЕ ВаучерыИдентификаторами Тогда
			
			Объект.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта;
			Элементы.ТипВаучера.Видимость = ЛОЖЬ;
			
		ИначеЕсли НЕ ВаучерыСкидочнымиКартами
			И НЕ ВаучерыПодарочнымиКартами
			И НЕ ВаучерыНакопительнымиКартами
			И ВаучерыИдентификаторами Тогда
			
			Объект.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор;
			Элементы.ТипВаучера.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		Если Параметры.ОперацияСВаучерами = 1 Тогда // приходование ваучеров
			ОперацияОписание = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приходование ваучеров");
			
			Элементы.УсловияПриобретения.Видимость 	  = НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры;
			Элементы.ПараметрыНовыхВаучеров.Видимость = ИСТИНА;
			Элементы.Поставщик.Видимость 		= ВестиУчетПоПоставщикам;
			Элементы.Договор.Видимость   		= ВестиУчетПоПоставщикам И ВестиУчетОтдельныхДоговоровСКонтрагентами;
			Элементы.Ваучеры.Видимость	 		= ИСТИНА;
			
			Элементы.ОсновнаяВалютаНаименование.Видимость 	= НЕ ВестиУчетВалют;
			Элементы.ОсновнаяВалютаНаименование1.Видимость 	= НЕ ВестиУчетВалют И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
			Элементы.Валюта.Видимость 			= ВестиУчетВалют;
			Элементы.ВалютаОплаты.Видимость 	= ВестиУчетВалют И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
			Элементы.Курс.Видимость				= ВестиУчетВалют;
			Элементы.ВаучерыСформироватьКодыВаучера.Видимость = ИСТИНА;
			Элементы.ОплаченоПоставщику.Видимость = ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода;
			
			Элементы.ФормаОплаты.Видимость		= НЕ ВестиУчетДенегВНесколькихХранилищах;
			Элементы.ХранилищеДенег.Видимость 	= ВестиУчетДенегВНесколькихХранилищах;
			Элементы.ФормаЗарегистрироватьПоступлениеВаучеров.Видимость = ИСТИНА;
			
		КонецЕсли;
		
		Объект.ДатаОперации = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		Объект.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сейчас(Команда)
	Объект.ДатаОперации = ОбщийМодульКлиент.ПользователяТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	СменаТипаВаучеров();
	
	Если ПустаяСтрока(Объект.Комментарий) Тогда
		Объект.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приобретение ваучеров");
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	// ПодключаемоеОборудование	
	Если ОбщийМодульКлиент.ИспользоватьПодключаемоеОборудование() Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.Курс = ОбщийМодульСервер.ПолучитьТекущийКурс(Объект.Валюта, Объект.ДатаОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПересчетОплаты()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаОплаты) Тогда
		Объект.ВалютаОплаты = Объект.Валюта;
		ВалютаОплатыПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.Сумма = ОбщийМодульСервер.ПоКурсу(Объект.СтоимостьПартииВаучеров, Объект.ВалютаОплаты, Объект.Валюта, Объект.ДатаОперации, Объект.Курс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПоСтоимости(Команда)
	ПересчетОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ВестиУчетДенегВНесколькихХранилищах)Тогда
		Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
		Если НЕ Объект.ХранилищеДенег.Валюта = Объект.ВалютаОплаты Тогда
			Объект.ВалютаОплаты = Объект.ХранилищеДенег.Валюта;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОплатыПриИзменении(Элемент)
	
	Если ВестиУчетДенегВНесколькихХранилищах Тогда
		ВалютаОплатыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаОплатыПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег)
		И НЕ  ОбщийМодульСервер.ПолучитьЗначениеРеквизита(Объект.ХранилищеДенег, "Валюта") = Объект.Валюта Тогда
		
		Объект.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоПараметрам(Объект.Валюта, Объект.ФормаОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКодыВаучера(Команда)
	
	ПараметрыФормы = Новый Структура("ДляВаучера", ИСТИНА);
	ПараметрыФормы.Вставить("ТипВаучера", Объект.ТипВаучера);
	ПараметрыФормы.Вставить("НоминалПроцент", ОбщийНоминалПроцент);
	ФормаАвтоФормированияСерий = ПолучитьФорму("Обработка.ОперацииССериямиНоменклатуры.Форма.ФормированиеСерийСНумерацией", ПараметрыФормы);
	
	СтруктураВозврат = ФормаАвтоФормированияСерий.ОткрытьМодально();
	
	Если НЕ СтруктураВозврат = Неопределено Тогда
		
		ПрефиксАвтоНумерации 	= СтруктураВозврат.ПрефиксАвтоНумерации;
		НачальныйНомерСерии  	= СтруктураВозврат.НачальныйНомерСерии;
		КонечныйНомерСерии 	 	= СтруктураВозврат.КонечныйНомерСерии;
		ПостфиксАвтоНомурации 	= СтруктураВозврат.ПостфиксАвтоНомурации;
		ДобавлятьЛидирующиеНули = СтруктураВозврат.ДобавлятьЛидирующиеНули;
		ДлинаКонечногоНомера  	= СтрДлина(формат(КонечныйНомерСерии, "ЧДЦ=; ЧРГ=' '; ЧГ=0"));
		ОбщийНоминалПроцент		= СтруктураВозврат.НоминалПроцент;
		
		Если ЗначениеЗаполнено(СтруктураВозврат.НоменклатураДляДобавленияСерий) Тогда
			Объект.ТипВаучера = СтруктураВозврат.НоменклатураДляДобавленияСерий;
		КонецЕсли;
		
		сч = НачальныйНомерСерии;
		Пока сч < КонечныйНомерСерии Цикл
			СтрокаСерий = Объект.Ваучеры.Добавить();	
			
			ЛидирующиеНули = "";
			Если ДобавлятьЛидирующиеНули Тогда
				счлн = 0;
				Пока счлн < (ДлинаКонечногоНомера - СтрДлина(СокрЛП(сч))) Цикл
					счлн = счлн + 1;
					ЛидирующиеНули = ЛидирующиеНули + "0";
				КонецЦикла;
			КонецЕсли;
			
			СтрокаСерий.НомерВаучера   = ПрефиксАвтоНумерации + ЛидирующиеНули + формат(сч, "ЧДЦ=; ЧРГ=' '; ЧГ=0") + ПостфиксАвтоНомурации;
			СтрокаСерий.НоминалПроцент = ОбщийНоминалПроцент;
			сч = сч + 1;			
		КонецЦикла;
		
		Объект.СтоимостьПартииВаучеров = Объект.Цена * Объект.Ваучеры.Количество();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьШтрихКодыСНомеровВаучеровНаСервере()
	
	Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
		СтрокаВаучера.ШтрихКод = СтрокаВаучера.НомерВаучера;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШтрихКодыСНомеровВаучеров(Команда)
	СкопироватьШтрихКодыСНомеровВаучеровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТипВаучераПриИзменении(Элемент)
	СменаТипаВаучеров();
КонецПроцедуры

&НаКлиенте
Процедура СменаТипаВаучеров()
	
	ТипВаучераСкидочнаяКартаПроцент = Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаПроцент");
	ТипВаучераСкидочнаяКартаСумма	= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаСумма");
	ТипВаучераПодарочнаяКарта 		= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.ПодарочнаяКарта");
	ТипВаучераНакопительнаяКарта 	= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.НакопительнаяКарта");
	ТипВаучераИдентификатор			= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.Идентификатор");
	
	Если (НЕ (ТипВаучераСкидочнаяКартаПроцент ИЛИ ТипВаучераСкидочнаяКартаСумма)
		И (ВаучерыСкидочнымиКартами
		И НЕ ВаучерыПодарочнымиКартами
		И НЕ ВаучерыНакопительнымиКартами
		И НЕ ВаучерыИдентификаторами))
		ИЛИ
		(НЕ ТипВаучераПодарочнаяКарта
		И (НЕ ВаучерыСкидочнымиКартами
		И ВаучерыПодарочнымиКартами
		И НЕ ВаучерыНакопительнымиКартами
		И НЕ ВаучерыИдентификаторами))
		ИЛИ
		(НЕ ТипВаучераНакопительнаяКарта
		И (НЕ ВаучерыСкидочнымиКартами
		И НЕ ВаучерыПодарочнымиКартами
		И ВаучерыНакопительнымиКартами
		И НЕ ВаучерыИдентификаторами))
		ИЛИ
		(НЕ ТипВаучераИдентификатор
		И (ВаучерыИдентификаторами
		И НЕ ВаучерыСкидочнымиКартами
		И НЕ ВаучерыПодарочнымиКартами
		И НЕ ВаучерыНакопительнымиКартами)) Тогда
		
		Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.ВаучерыНоминалПроцент.Видимость = ИСТИНА;
	Элементы.ВаучерыУстановитьНоминалПроцент.Видимость = ИСТИНА;
	
	Если ТипВаучераСкидочнаяКартаПроцент Тогда
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Процент скидки");
		Элементы.ВаучерыУстановитьНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить процент скидки для всех");
		Элементы.ОбщийНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий процент скидки");
		Элементы.ВалютаВаучера.Видимость = ЛОЖЬ;
		НоминалПроцентНужен = ИСТИНА;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты = "";
		
	ИначеЕсли ТипВаучераСкидочнаяКартаСумма Тогда
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма скидки");
		Элементы.ВаучерыУстановитьНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить сумму скидки для всех");
		Элементы.ОбщийНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общая сумма скидки");
		Элементы.ВалютаВаучера.Видимость = ИСТИНА;
		НоминалПроцентНужен = ИСТИНА;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты =  " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Объект.ВалютаВаучера);
		
	ИначеЕсли ТипВаучераПодарочнаяКарта Тогда
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номинал");
		Элементы.ВаучерыУстановитьНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить номинал для всех");
		Элементы.ОбщийНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий номинал");
		Элементы.ВалютаВаучера.Видимость = ИСТИНА;
		НоминалПроцентНужен = ИСТИНА;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты =  " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Объект.ВалютаВаучера);
		
	ИначеЕсли ТипВаучераНакопительнаяКарта Тогда
		ОбщийНоминалПроцент = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Коэффициент накопления");
		Элементы.ОбщийНоминалПроцент.Заголовок = ОбщийНоминалПроцент;
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийНоминалПроцент;
		Элементы.ВаучерыУстановитьНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить коэффициент для всех");
		Элементы.ВаучерыНоминалПроцент.Видимость = ИСТИНА;
		Элементы.ВаучерыУстановитьНоминалПроцент.Видимость = ИСТИНА;
		Элементы.ВалютаВаучера.Видимость = ЛОЖЬ;
		НоминалПроцентНужен = ИСТИНА;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты = "";		
		
	ИначеЕсли ТипВаучераИдентификатор Тогда
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идентификатор");
		Элементы.ВаучерыНоминалПроцент.Видимость = ЛОЖЬ;
		Элементы.ВаучерыУстановитьНоминалПроцент.Видимость = ЛОЖЬ;
		Элементы.ВалютаВаучера.Видимость = ЛОЖЬ;
		НоминалПроцентНужен = ЛОЖЬ;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты = "";		
		
	Иначе
		Элементы.ВаучерыНоминалПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номинал или процент");
		Элементы.ВаучерыНоминалПроцент.Видимость = ЛОЖЬ;
		Элементы.ВаучерыУстановитьНоминалПроцент.Видимость = ЛОЖЬ;
		Элементы.ВалютаВаучера.Видимость = ЛОЖЬ;
		НоминалПроцентНужен = ЛОЖЬ;
		Элементы.ОсновнаяВалютаНаименование2.Видимость = ЛОЖЬ;
		ТекстВалюты = "";
	КонецЕсли;
	
	Элементы.ОграниченияВаучеров.Видимость = НЕ ТипВаучераИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	Объект.Ваучеры.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНоминалПроцент(Команда)
	
	ТипВаучераСкидочнаяКартаПроцент = Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаПроцент");
	ТипВаучераСкидочнаяКартаСумма	= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаСумма");
	ТипВаучераПодарочнаяКарта 		= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.ПодарочнаяКарта");
	ТипВаучераНакопительнаяКарта 	= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.НакопительнаяКарта");
	ТипВаучераИдентификатор			= Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.Идентификатор");
	
	ТекстПодсказки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номинал или процент не предусмотрены!");
	
	Если ТипВаучераСкидочнаяКартаПроцент Тогда
		ТекстПодсказки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Процент скидки");
	ИначеЕсли ТипВаучераСкидочнаяКартаСумма Тогда
		ТекстПодсказки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма скидки");
	ИначеЕсли ТипВаучераПодарочнаяКарта Тогда
		ТекстПодсказки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номинал");
	КонецЕсли;
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("УстановитьНоминалПроцентЗавершение", ЭтаФорма, Новый Структура("ОбщийНоминалПроцент", ОбщийНоминалПроцент)), ОбщийНоминалПроцент, ТекстПодсказки, 15, 6);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНоминалПроцентЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	ОбщийНоминалПроцент = ?(Число = Неопределено, ДополнительныеПараметры.ОбщийНоминалПроцент, Число);
	
	Если (Число <> Неопределено) Тогда
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			СтрокаВаучера.НоминалПроцент = ОбщийНоминалПроцент;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВаучерыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока 
		И НЕ ОбщийНоминалПроцент = 0 Тогда
		
		СтрокаВаучера = Элементы.Работы.ТекущиеДанные;
		СтрокаВаучера.НоминалПроцент = ОбщийНоминалПроцент;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		Элементы.ФормаЗарегистрироватьПоступлениеВаучеров.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарегистрировать приобретение ваучеров");
	Иначе
		Элементы.ФормаЗарегистрироватьПоступлениеВаучеров.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарегистрировать поступление ваучеров");
		Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
	КонецЕсли;
	
	Если ВестиУчетПоНаправлениямДеятельности
		И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		
		ОбновитьЗначениеНаправленияДеятельности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				Если НЕ Объект.Договор.Организация = Объект.Организация Тогда		
					Объект.Договор = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Договор)
				И ЗначениеЗаполнено(Объект.Поставщик) Тогда
				
				Объект.Договор = ОбщийМодульСервер.ПодобратьДоговор(Объект.Организация, Объект.Поставщик, Объект.ДатаОперации);
			КонецЕсли;	
		КонецЕсли;
		
		Если ВестиУчетПоСкладам
			И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Склад = Объект.Организация.Склад;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначениеНаправленияДеятельности()				
	Объект.НаправлениеДеятельности = ОбщийМодульСервер.ОпределитьНаправлениеДеятельности(Объект.КлиентПоставщик, Объект.Договор, Объект.Организация, , Объект.Склад, Объект.Сотрудник);	
КонецПроцедуры

&Наклиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор.Организация) Тогда
			Объект.Организация = Объект.Договор.Организация;											
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор.КлиентПоставщик) Тогда
			Объект.Поставщик = Объект.Договор.КлиентПоставщик;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор.ВидЦен) Тогда
			Объект.Валюта = Объект.Договор.ВидЦен.ВалютаЦены;
		КонецЕсли;
		
		Если ВестиУчетПоНаправлениямДеятельности
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			
			ОбновитьЗначениеНаправленияДеятельности();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПоступлениеВаучеровНаСервере()
	
	Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
		
		Если НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры
			И НЕ ЗначениеЗаполнено(СтрокаВаучера.Номенклатура) Тогда
			
			СтрокаВаучера.Номенклатура = НайтиСоздатьНоменклатуру(СтрокаВаучера.Ваучер, СтрокаВаучера.ШтрихКод, СтрокаВаучера.НоминалПроцент, СтрокаВаучера.ОСтроке);
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(СтрокаВаучера.Ваучер) Тогда
			СтрокаВаучера.Ваучер = НайтиСоздатьВаучер(СтрокаВаучера.НомерВаучера, СтрокаВаучера.ШтрихКод, СтрокаВаучера.НоминалПроцент, СтрокаВаучера.ОСтроке, , СтрокаВаучера.Номенклатура);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаВаучера.ШтрихКод) Тогда
			ОбщийМодульТоварСервер.ЗарегистрироватьШтрихКод(СтрокаВаучера.ШтрихКод, СтрокаВаучера.Номенклатура);
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ НеОтслеживатьВаучерыВКачествеНоменклатуры Тогда
		
		ПриходныйДокумент = Документы.ПоступленияТовара.СоздатьДокумент();
		ПриходныйДокумент.Валюта			= Объект.ВалютаОплаты;
		ПриходныйДокумент.ВидДокумента		= ?(ЗначениеЗаполнено(Объект.Поставщик), Перечисления.ВидыДокументаПриходаТовара.Приобретение, Перечисления.ВидыДокументаПриходаТовара.Оприходование);
		ПриходныйДокумент.ВидЦен			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(ПриходныйДокумент.ВидЦен) Тогда
			ПриходныйДокумент.ВидЦен = справочники.ВидыЦен.ГлавныйВидЦен;
		КонецЕсли;
		
		Если ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
			ПриходныйДокумент.ВыбылоДенег		= Объект.Сумма;	
		КонецЕсли;
		ПриходныйДокумент.Дата				= Объект.ДатаОперации;
		ПриходныйДокумент.Договор			= объект.Договор;
		ПриходныйДокумент.КлиентПоставщик	= Объект.Поставщик;
		ПриходныйДокумент.Комментарий		= Объект.Комментарий;
		ПриходныйДокумент.Курс				= Объект.Курс;
		ПриходныйДокумент.Организация		= Объект.Организация;
		ПриходныйДокумент.Склад				= объект.Склад;		
		ПриходныйДокумент.ТовараВКоличестве = Объект.Ваучеры.Количество();
		ПриходныйДокумент.ТовараНаСумму		= Объект.СтоимостьПартииВаучеров * Объект.Курс;
		ПриходныйДокумент.ХранилищеДенег	= Объект.ХранилищеДенег;
		
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			СтрокаТовара = ПриходныйДокумент.Товары.Добавить();
			СтрокаТовара.Количество 	= 1;
			СтрокаТовара.Номенклатура 	= СтрокаВаучера.Номенклатура;
			СтрокаТовара.ОСтроке 		= СтрокаВаучера.ОСтроке;
			СтрокаТовара.Сумма 			= Объект.Цена;
			СтрокаТовара.Цена 			= Объект.Цена;
		КонецЦикла;
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			ПриходныйДокумент.Сотрудник		= ПараметрыСеанса.ТекущийПользователь.Сотрудник;
		КонецЕсли;
		ПриходныйДокумент.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ПриходныйДокумент.НеРегистрироватьЦеныЗаСчетЭтогоДокумента = ИСТИНА;
		
		ПриходныйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
		СтрокаДокумент.ЭлементИлиДокумент = ПриходныйДокумент.Ссылка;
	КонецЕсли;
	
	Если НеОтслеживатьВаучерыВКачествеНоменклатуры
		ИЛИ НЕ ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
		
		ДокументОплаты = Документы.ДвиженияДенег.СоздатьДокумент();
		ДокументОплаты.Валюта 		 = Объект.ВалютаОплаты;
		ДокументОплаты.ВидДокумента	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расход");
		ДокументОплаты.Дата			 = Объект.ДатаОперации;
		ДокументОплаты.ЕстьРасход	 = ИСТИНА;
		ДокументОплаты.КлиентПоставщик = Объект.Поставщик;
		ДокументОплаты.Комментарий	 = Объект.Комментарий;
		ДокументОплаты.Курс			 = Объект.Курс;
		ДокументОплаты.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ДокументОплаты.Организация	 = Объект.Организация;
		ДокументОплаты.ПриходДенег	 = ЛОЖЬ;
		ДокументОплаты.Статья		 = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров");
		ДокументОплаты.Сумма		 = Объект.Сумма;
		ДокументОплаты.СуммаРасход	 = Объект.Сумма;
		ДокументОплаты.ФормаОплаты	 = Объект.ФормаОплаты;
		ДокументОплаты.ХранилищеДенег= Объект.ХранилищеДенег;
		
		ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
		
		СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
		СтрокаДокумент.ЭлементИлиДокумент = ДокументОплаты.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   НайтиСоздатьНоменклатуру(Знач Ваучер, Знач ШтрихКод = "", Знач НоминалПроцент = 0, Знач ОСтроке = "")
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		ТипВаучера = Ваучер.ТипВаучера;
	Иначе
		ТипВаучера = Объект.ТипВаучера;
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ШтрихКод, ЛОЖЬ, , Объект.ДатаОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.ТипВаучера = &ТипВаучера
		|	И Номенклатура.НоминалПроцент = &НоминалПроцент И Номенклатура.ЭтоВаучер = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НоминалПроцент", НоминалПроцент);
		Запрос.УстановитьПараметр("ТипВаучера", ТипВаучера);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();	
			Результат = ВыборкаДетальныеЗаписи.ссылка;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ГруппаВаучеры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ГруппаНоменклатурыДляУчетаВаучеров");
			Если НЕ ЗначениеЗаполнено(ГруппаВаучеры) Тогда
				
				ИмяГруппы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры");
				ГруппаВаучеры = Справочники.Номенклатура.НайтиПоНаименованию(ИмяГруппы);
				
				Если НЕ ЗначениеЗаполнено(ГруппаВаучеры)
					ИЛИ НЕ ОбщийМодульПовтор.ЭтоГруппа(ГруппаВаучеры) Тогда
					
					ГруппаВаучерыОбъект = Справочники.Номенклатура.СоздатьГруппу();
					ГруппаВаучерыОбъект.Наименование = ИмяГруппы;
					ГруппаВаучерыОбъект.Записать();
					ГруппаВаучеры = ГруппаВаучерыОбъект.Ссылка;	
				КонецЕсли;
			КонецЕсли;
			
			НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
			НоваяНоменклатура.Родитель 				= ГруппаВаучеры;
			НоваяНоменклатура.Комментарий 			= ОСтроке;
			
			Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ТипВаучера));
			
			Если НЕ ТипВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
				Наименование = Наименование + " " + Формат(НоминалПроцент, "ЧРГ=' '; ЧГ=0") + ТекстВалюты;
			КонецЕсли;			
			
			НоваяНоменклатура.Наименование 			= Наименование;
			НоваяНоменклатура.НаименованиеДляПечати = Наименование;
			НоваяНоменклатура.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
			НоваяНоменклатура.НоменклатурнаяГруппа 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры"));
			
			Если НЕ ЗначениеЗаполнено(НоваяНоменклатура.НоменклатурнаяГруппа)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры") Тогда
				
				НоменклатурнаяГруппаОбъект = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
				НоменклатурнаяГруппаОбъект.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры");
				НоменклатурнаяГруппаОбъект.Записать();
				
				НоваяНоменклатура.НоменклатурнаяГруппа 	= НоменклатурнаяГруппаОбъект;
			КонецЕсли;
			НоваяНоменклатура.НоминалПроцент 		= НоминалПроцент;
			НоваяНоменклатура.ОсновнойШтрихКод 		= ШтрихКод;
			Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
				НоваяНоменклатура.Производитель = Объект.Поставщик.Производитель;
			КонецЕсли;
			НоваяНоменклатура.ТипВаучера = ТипВаучера;
			НоваяНоменклатура.ЭтоВаучер	 = ИСТИНА;
			НоваяНоменклатура.Цена 		 = Объект.Цена;
			
			НоваяНоменклатура.Записать();
			
			СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
			СтрокаДокумент.ЭлементИлиДокумент = НоваяНоменклатура.Ссылка;
			Результат = НоваяНоменклатура.Ссылка;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   НайтиСоздатьВаучер(Знач НомерВаучера, Знач ШтрихКод = "", Знач НоминалПроцент = 0, Знач ОСтроке = "", Знач ДляТипаВаучера = Неопределено, Знач Номенклатура = Неопределено)
	
	Результат = Неопределено;
	
	Если ДляТипаВаучера = Неопределено Тогда
		ДляТипаВаучера = Объект.ТипВаучера;
	КонецЕсли;
	
	ЭтоИдентификатор = ДляТипаВаучера = Перечисления.ТипыВаучера.Идентификатор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ваучеры.Ссылка
	|ИЗ Справочник.Ваучеры КАК Ваучеры
	|ГДЕ Ваучеры.ШтрихКод = &ШтрихКод
	|	И Ваучеры.Наименование = &Наименование
	|	И Ваучеры.ТипВаучера = &ТипВаучера ";
	
	Если НЕ ЭтоИдентификатор Тогда
		Запрос.Текст = Запрос.Текст + " И Ваучеры.НоминалПроцент = &НоминалПроцент И Ваучеры.Валюта = &Валюта ";
		Запрос.УстановитьПараметр("НоминалПроцент", НоминалПроцент);
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаВаучера);
	КонецЕсли;
	
	Если НЕ Номенклатура = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И Ваучеры.Номенклатура = &Номенклатура ";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Запрос.Текст = Запрос.Текст + " И Ваучеры.Организация = &Организация ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "УПОРЯДОЧИТЬ ПО Ваучеры.ПометкаУдаления, Ваучеры.Отключен";
	
	Запрос.УстановитьПараметр("Наименование", НомерВаучера);
	Запрос.УстановитьПараметр("ТипВаучера", ДляТипаВаучера);
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		НовыйВаучер = справочники.Ваучеры.СоздатьЭлемент();
		
		ТекстТипаВаучера = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ДляТипаВаучера));
		Если НЕ ЭтоИдентификатор Тогда
			ТекстТипаВаучера = ТекстТипаВаучера + " " + Формат(НоминалПроцент, "ЧРГ=' '; ЧГ=0") + ТекстВалюты;
		КонецЕсли;
		
		РодительВаучеров = Справочники.Ваучеры.НайтиПоНаименованию(ТекстТипаВаучера);
		Если НЕ ЗначениеЗаполнено(РодительВаучеров)
			ИЛИ НЕ ОбщийМодульПовтор.ЭтоГруппа(РодительВаучеров) Тогда
			
			РодительВаучеровОбъект = Справочники.Ваучеры.СоздатьГруппу();
			РодительВаучеровОбъект.Наименование = ТекстТипаВаучера;
			РодительВаучеровОбъект.Записать();
			РодительВаучеров = РодительВаучеровОбъект.Ссылка;
		КонецЕсли;
		
		НовыйВаучер.Родитель 		= РодительВаучеров;
		НовыйВаучер.ДатаРегистрации = Объект.ДатаОперации;
		НовыйВаучер.ДатаНачала 		= Объект.ДатаНачала;
		НовыйВаучер.ДатаОкончания   = Объект.ДатаОкончания;
		НовыйВаучер.Комментарий		= ОСтроке;
		НовыйВаучер.Наименование	= НомерВаучера;
		Если НЕ ЭтоИдентификатор Тогда
			НовыйВаучер.НоминалПроцент  = НоминалПроцент;
			НовыйВаучер.Валюта			= Объект.ВалютаВаучера;	
		КонецЕсли;
		НовыйВаучер.Организация		= Объект.Организация;
		НовыйВаучер.Отключен		= ЛОЖЬ;
		НовыйВаучер.ТипВаучера		= ДляТипаВаучера;
		НовыйВаучер.ШтрихКод		= ШтрихКод;
		НовыйВаучер.Эмитент			= Объект.Поставщик;
		НовыйВаучер.Номенклатура	= Номенклатура;
		НовыйВаучер.СкладРегистрации= Объект.Склад;
		
		Если НЕ ДляТипаВаучера = Перечисления.ТипыВаучера.Идентификатор Тогда
			НовыйВаучер.ДляНоменклатурныхГрупп.Загрузить(Объект.ДляНоменклатурныхГрупп.Выгрузить());
			НовыйВаучер.ДляНоменклатурыИЕеГрупп.Загрузить(Объект.ДляНоменклатурыИЕеГрупп.Выгрузить());
			НовыйВаучер.ДляСкладов.Загрузить(Объект.ДляСкладов.Выгрузить());	
		КонецЕсли;
		
		НовыйВаучер.Записать();
		
		СтрокаДокумент = Объект.СозданныеОбъекты.Добавить();
		СтрокаДокумент.ЭлементИлиДокумент = НовыйВаучер.Ссылка;
		Результат = НовыйВаучер.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьПоступлениеВаучеров(Команда)
	
	Если ПроверитьТаблицуНовыхВаучеров() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьПоступлениеВаучеровЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы зарегистрировать поступление ваучеров?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПоступлениеВаучеровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗарегистрироватьПоступлениеВаучеровНаСервере();	
		ЭтаФорма.Закрыть(ИСТИНА);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция   ПроверитьТаблицуНовыхВаучеров()
	
	Результат = ИСТИНА;
	
	Если Объект.Ваучеры.Количество() = 0 Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучеры не указаны!"));
		Результат = ЛОЖЬ;
		
	Иначе
		ЧислоОшибок = 0;
		ЗапретитьНоменклатуруБезШтрихКода = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода");
		МассивНомеров = Новый Массив;
		МассивШК 	  = Новый Массив;
		
		Для Каждого СтрокаВаучера Из Объект.Ваучеры Цикл
			
			НомерВаучера = СтрокаВаучера.НомерВаучера;
			
			Если ПустаяСтрока(НомерВаучера) Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаВаучера.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указан номер ваучера!"));
				ЧислоОшибок = ЧислоОшибок + 1;
			ИначеЕсли НЕ МассивНомеров.Найти(НомерВаучера) = Неопределено Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаВаучера.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется номер ваучера") + ": " + НомерВаучера);
				ЧислоОшибок = ЧислоОшибок + 1;
			Иначе
				МассивНомеров.Добавить(НомерВаучера);
			КонецЕсли;
			
			Если НоминалПроцентНужен
				И СтрокаВаучера.НоминалПроцент = 0 Тогда
				
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаВаучера.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указан номинал или процент!"));
				ЧислоОшибок = ЧислоОшибок + 1;
			КонецЕсли;
			
			ШтрихКод = СтрокаВаучера.ШтрихКод;
			Если ПустаяСтрока(ШтрихКод) Тогда
				Если ЗапретитьНоменклатуруБезШтрихКода Тогда
					Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаВаучера.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не указан обязательный штрих-код") + ": " + ШтрихКод);
					ЧислоОшибок = ЧислоОшибок + 1;
				КонецЕсли;
				
			Иначе
				Если НЕ МассивШК.Найти(ШтрихКод) = Неопределено Тогда
					
					Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке") + " №" + СтрокаВаучера.НомерСтроки + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("повторяется штрих-код") + ": " + ШтрихКод);
					ЧислоОшибок = ЧислоОшибок + 1;
				Иначе
					МассивШК.Добавить(ШтрихКод);	
				КонецЕсли;	
			КонецЕсли;
			
			Если ЧислоОшибок > 30 Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Показаны только 30 первых ошибок."));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Результат = ЧислоОшибок = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПроверитьТаблицуНовыхВаучеров

&НаКлиенте
Процедура ПериодДействияПриИзменении(Элемент)
	
	Объект.ДатаНачала 	 = ПериодДействия.ДатаНачала;
	Объект.ДатаОкончания = ПериодДействия.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ПериодДействия.ДатаНачала = Объект.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ПериодДействия.ДатаОкончания = Объект.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	Объект.СтоимостьПартииВаучеров = Объект.Цена * Объект.Ваучеры.Количество();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВаучераПриИзменении(Элемент)
	ТекстВалюты =  " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Объект.ВалютаВаучера);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Знач ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер не найден!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(Знач ТекКод)
	
	Результат = ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента = Неопределено Тогда
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Результат = ИСТИНА;
	
	СтруктураПараметров = Новый Структура("Ваучер");
	Ваучер = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		
		ДобавитьПозицию(Ваучер);
		
	Иначе		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваучер по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПозицию(Знач Ваучер)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ваучер", Ваучер);
	
	СтрокаВаучера = Объект.Ваучеры.НайтиСтроки(ПараметрыОтбора);
	Если СтрокаВаучера.Количество() = 0 Тогда
		
		СтрокаВаучера = Объект.Ваучеры.Добавить();				
		СтрокаВаучера.Ваучер = Ваучер;
		
	Иначе
		СтрокаВаучера = СтрокаВаучера[0]; 
	КонецЕсли;
	
	СтрокаВаучера.Номенклатура 	 = Ваучер.Номенклатура;
	СтрокаВаучера.НомерВаучера 	 = Ваучер.Наименование;
	СтрокаВаучера.ШтрихКод 		 = Ваучер.ШтрихКод;
	СтрокаВаучера.НоминалПроцент = Ваучер.НоминалПроцент;
	
	Элементы.Ваучеры.ТекущаяСтрока  = СтрокаВаучера.ПолучитьИдентификатор();
	Элементы.Ваучеры.ТекущийЭлемент = Элементы.ТоварыКоличество;		
	
КонецПроцедуры
