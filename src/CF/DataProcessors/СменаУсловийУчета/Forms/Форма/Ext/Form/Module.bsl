// sza141111-1427
// sza140420-1803  
// sza130919-2358 : 
&НаКлиенте
Процедура ЗаполнитьУказанныйВидЦенИзДаннымиИзКарточкиНоменклатуры(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет заполнение цен.."), 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнение.."));
		ЗаполнитьУказанныйВидЦенИзДаннымиИзКарточкиНоменклатурыНаСервере();
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнил вид") + " " + Объект.ВидЦен + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" цен по данным карточек номенклатуры"), 2);
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен не указан!"), СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУказанныйВидЦенИзДаннымиИзКарточкиНоменклатурыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Цена
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата 	= Объект.Дата;
	ВидЦен 	= Объект.ВидЦен;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Цена = ВыборкаДетальныеЗаписи.Цена;
		
		ЦеныНоменклатуры = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
		ЦеныНоменклатуры.Активность 	= ИСТИНА;
		ЦеныНоменклатуры.ВидЦен 		= ВидЦен  ;
		ЦеныНоменклатуры.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("из карточки номенклатуры");
		ЦеныНоменклатуры.Номенклатура 	= Номенклатура;
		ЦеныНоменклатуры.Период 		= Дата;
		ЦеныНоменклатуры.Вручную 		= ЛОЖЬ;
		ЦеныНоменклатуры.Цена 			= Цена;
		
		Попытка 
			ЦеныНоменклатуры.Записать(ИСТИНА);
			
			СтрокаТовара = Новый Структура;
			СтрокаТовара.Вставить("Номенклатура", Номенклатура);
			СтрокаТовара.Вставить("Цена", Цена);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , ЛОЖЬ);
			
		Исключение 
			ТекстОписаниеОшибки = ТекстОписаниеОшибки;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи цены") + ": " + ЦеныНоменклатуры + " - " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();			
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВКарточкахНоменклатурыПоДаннымУказанногоВидаЦен(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет заполнение цен.."), 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнение.."));
		ЗаполнитьЦеныВКарточкахНоменклатурыПоДаннымУказанногоВидаЦенНаСервере();
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнил цены карточек по виду цен") + " " + Объект.ВидЦен, 2);
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен не указан!"), СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныВКарточкахНоменклатурыПоДаннымУказанногоВидаЦенНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.Номенклатура
	|ИЗ
	|	РегистрСведений.Цены.СрезПоследних(&Дата, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ВидЦен", Объект.ВидЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоменклатураОбъект = ВыборкаДетальныеЗаписи.Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.Цена = ВыборкаДетальныеЗаписи.Цена;
		
		Попытка
			НоменклатураОбъект.Записать();
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи цены") + ": " + НоменклатураОбъект + " - " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепроведениеВсехРасходныхНакладныхИИнвентаризацийВЦеляхУстановкиПоказателейВаловойПрибыли(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет перепроведение документов.."), 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепроведенеие.."));
	ПерепроведениеВсехРасходныхНакладныхИИнвентаризацийВЦеляхУстановкиПоказателейВаловойПрибылиНаСервере();
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ЭтаФорма.ИмяФормы, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепровел инвентаризации и расходные накладные"), 2);
	
КонецПроцедуры

&НаСервере
Процедура ПерепроведениеВсехРасходныхНакладныхИИнвентаризацийВЦеляхУстановкиПоказателейВаловойПрибылиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инвентаризации.Ссылка
	|ИЗ
	|	Документ.Инвентаризации КАК Инвентаризации
	|ГДЕ
	|	Инвентаризации.Проведен = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДОК = ВыборкаДетальныеЗаписи.ССылка.ПолучитьОбъект();
			Попытка 
				Док.записать(РежимЗаписиДокумента.Проведение);
				
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении") + ": " + ТекстОписаниеОшибки;
				Сообщение.Сообщить();				
			КонецПопытки;		
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыТовара.Ссылка
	|ИЗ
	|	Документ.РасходыТовара КАК РасходыТовара
	|ГДЕ
	|	РасходыТовара.Проведен = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДОК = ВыборкаДетальныеЗаписи.ССылка.ПолучитьОбъект();
			Попытка 
				Док.записать(РежимЗаписиДокумента.Проведение);
				
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при проведении") + ": " + ТекстОписаниеОшибки;
				Сообщение.Сообщить();				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетВсехЗависимыхЦенНаДату(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет перерасчет всех зависимых цен.."), 0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перерасчет.."));
	ПерерасчетВсехЗависимыхЦенНаДатуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПерерасчетВсехЗависимыхЦенНаДатуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ВидыЦен.ОсновнойВидЦен
	               |ИЗ Справочник.ВидыЦен КАК ВидыЦен
	               |ГДЕ ВидыЦен.Зависимая = ИСТИНА
	               |	И ВидыЦен.ПометкаУдаления = ЛОЖЬ
	               |ОБЪЕДИНИТЬ ВСЕ
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен
	               |ИЗ Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп
	               |ГДЕ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.Зависимая = ИСТИНА
	               |	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |ОБЪЕДИНИТЬ ВСЕ
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ВидыЦенТаблицаЗависимости.ОсновнойВидЦен
	               |ИЗ Справочник.ВидыЦен.ТаблицаЗависимости КАК ВидыЦенТаблицаЗависимости
	               |ГДЕ ВидыЦенТаблицаЗависимости.Ссылка.Зависимая = ИСТИНА
	               |	И ВидыЦенТаблицаЗависимости.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
			
			Номенклатура = Справочники.Номенклатура.Выбрать();
			пока номенклатура.Следующий() Цикл
				
				Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура.Ссылка, ВыборкаДетальныеЗаписи.ОсновнойВидЦен, Объект.Дата, ЛОЖЬ, , , , , Объект.Ссылка);
				
				Если НЕ Цена = 0 Тогда
					СтрокаТовара = Новый Структура;
					СтрокаТовара.Вставить("Номенклатура", Номенклатура.Ссылка);
					СтрокаТовара.Вставить("Цена", Цена);
					
					ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВыборкаДетальныеЗаписи.ОсновнойВидЦен, СтрокаТовара, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("автоматический перерасчет"), Объект.Дата, ИСТИНА);	
				КонецЕсли;
				
				Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
					
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.Выбрать(, Номенклатура);
					пока ЕдиницаИзмерения.Следующий() Цикл
						
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(номенклатура.Ссылка, ВыборкаДетальныеЗаписи.ОсновнойВидЦен, Объект.Дата, ЛОЖЬ, , , , , Объект.Ссылка, , ЕдиницаИзмерения.Ссылка);
						
						Если НЕ цена = 0 тогда
							СтрокаТовара = Новый Структура;
							СтрокаТовара.Вставить("Номенклатура", Номенклатура.Ссылка);
							СтрокаТовара.Вставить("Цена", Цена);
							СтрокаТовара.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения.Ссылка);
							
							ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВыборкаДетальныеЗаписи.ОсновнойВидЦен, СтрокаТовара, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("автоматический перерасчет"), Объект.Дата, ИСТИНА, , , , , ЕдиницаИзмерения.Ссылка);	
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000100", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Если параметрысеанса.НеМожетМенятьЦены  тогда
			отказ = ИСТИНА;			
		КонецЕсли;
		
		Объект.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		КонецЕсли;
		Объект.Дата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата())- 1;	
	КонецЕсли;
	
КонецПроцедуры
