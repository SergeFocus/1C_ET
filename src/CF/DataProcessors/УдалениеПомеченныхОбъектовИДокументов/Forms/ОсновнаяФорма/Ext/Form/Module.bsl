// sza151116-2206
// sza151004-0005

&НаКлиенте
Процедура ВыполнитьДалее()

	Если РежимУдаления = "Брутальный" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьДалееЗавершение", ЭтотОбъект), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Режим брутальный. Вы уверены? Ответственность на Вас!"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьДалееФрагмент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДалееЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьДалееФрагмент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДалееФрагмент()

	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;

	Если ТекущаяСтраница = Элементы.ВыборРежимаУдаления Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется поиск помеченных на удаление объектов"));
		ЗаполнениеДереваПомеченныхНаУдаление();
		Элементы.КомандаДалее.Видимость           = Ложь;
		Элементы.КомандаУдалить.Видимость         = ИСТИНА;
		Элементы.КомандаУдалить.КнопкаПоУмолчанию = ИСТИНА;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПомеченныеНаУдаление;
	ИначеЕсли ТекущаяСтраница = Элементы.РезультатыУдаления Тогда
		Элементы.КомандаДалее.Видимость    = Ложь;
		Элементы.КомандаУдалить.Видимость  = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию = ИСТИНА;
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ПричиныНеудаления;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУдаление()

	Если РежимУдаления = "Полный" Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется поиск и удаление помеченных объектов"));
	Иначе
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполняется удаление выбранных объектов"));
	КонецЕсли;

	УдалениеВыбранныхНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНеудаленныхОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДеревоНеудаленныхОбъектов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		// это строка отображает объект, из-за которого не удалось удалить помеченный и выбранный
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение( ,ТекущиеДанные.Значение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДереваПомеченныхНаУдаление()

	// Заполнение дерева помеченных на удаление
	ДеревоПомеченных = РеквизитФормыВЗначение("СписокПомеченныхНаУдаление");
	// обработка помеченных
	МассивПомеченных = НайтиПомеченныеНаУдаление();

	Для каждого МассивПомеченныхЭлемент Из МассивПомеченных Цикл
		ОбъектМетаданныхЗначение = МассивПомеченныхЭлемент.Метаданные().ПолноеИмя();
		ОбъектМетаданныхПредставление = МассивПомеченныхЭлемент.Метаданные().Представление();
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДерева(ДеревоПомеченных.Строки, ОбъектМетаданныхЗначение, ОбъектМетаданныхПредставление, ИСТИНА);
		НайтиИлиДобавитьВетвьДерева(СтрокаОбъектаМетаданных.Строки, МассивПомеченныхЭлемент, Строка(МассивПомеченныхЭлемент) + " - " + ОбъектМетаданныхПредставление, ИСТИНА);

	КонецЦикла;

	ДеревоПомеченных.Строки.Сортировать("Значение", ИСТИНА);
	Для каждого СтрокаОбъектаМетаданных Из ДеревоПомеченных.Строки Цикл
		// создать представление для строк, отображающих ветвь объекта метаданных
		СтрокаОбъектаМетаданных.Представление = СтрокаОбъектаМетаданных.Представление + " (" + СтрокаОбъектаМетаданных.Строки.Количество() + ")";

	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоПомеченных, "СписокПомеченныхНаУдаление");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокПомеченныхСнятьВсе()

	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();

	Для каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, Ложь, ИСТИНА);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокПомеченныхУстановитьВсе()

	ЭлементыСписка = СписокПомеченныхНаУдаление.ПолучитьЭлементы();

	Для каждого Элемент Из ЭлементыСписка Цикл
		УстановитьПометкуВСписке(Элемент, ИСТИНА, ИСТИНА);
	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры
&НаСервере
Функция НайтиИлиДобавитьВетвьДерева(СтрокиДерева, Значение, Представление, Пометка)

	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", Ложь);
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.Пометка       = Пометка;
	КонецЕсли;

	Возврат Ветвь;

КонецФункции

&НаСервере
Функция НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокиДерева, Значение, Представление, НомерКартинки)

	// Попытка найти существующую ветвь в СтрокиДерева без вложенных
	Ветвь = СтрокиДерева.Найти(Значение, "Значение", Ложь);
	Если Ветвь = Неопределено Тогда
		// Такой ветки нет, создадим новую
		Ветвь = СтрокиДерева.Добавить();
		Ветвь.Значение      = Значение;
		Ветвь.Представление = Представление;
		Ветвь.НомерКартинки = НомерКартинки;
	КонецЕсли;

	Возврат Ветвь;

КонецФункции

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
	КонецЕсли;

	РежимУдаления = "Полный";
	Элементы.КомандаДалее.Видимость = Ложь;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РежимУдаленияПриИзменении(Элемент)

	Если РежимУдаления = "Полный" Тогда
		Элементы.КомандаДалее.Видимость   = Ложь;
		Элементы.КомандаУдалить.Видимость = ИСТИНА;
		Элементы.КомандаУдалить.КнопкаПоУмолчанию = ИСТИНА;
	ИначеЕсли РежимУдаления = "Выборочный" Тогда
		Элементы.КомандаДалее.Видимость = ИСТИНА;
		Элементы.КомандаУдалить.Видимость = Ложь;
		Элементы.КомандаДалее.КнопкаПоУмолчанию = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// Вставить содержимое обработчика.
	ТекущиеДанные = Элементы.СписокПомеченныхНаУдаление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		// это строка отображает помеченный на удаление объект
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение( ,ТекущиеДанные.Значение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалениеВыбранныхНаСервере()

	Удаляемые = Новый Массив;

	Если РежимУдаления = "Полный"
		ИЛИ РежимУдаления = "Брутальный" Тогда

		// При полном удалении получаем весь список помеченных на удаление
		Удаляемые = НайтиПомеченныеНаУдаление();
	Иначе
		// Заполняем массив ссылками на выбранные элементы, помеченные на удаление
		КоллекцияСтрокМетаданных = СписокПомеченныхНаУдаление.ПолучитьЭлементы();

		Для каждого СтрокаОбъектаМетаданных Из КоллекцияСтрокМетаданных Цикл
			КоллекцияСтрокСсылок = СтрокаОбъектаМетаданных.ПолучитьЭлементы();
			Для каждого СтрокаСсылки Из КоллекцияСтрокСсылок Цикл
				Если СтрокаСсылки.Пометка Тогда
					Удаляемые.Добавить(СтрокаСсылки.Значение);
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

	ИсходнаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.РезультатыУдаления;
	// Выполняем удаление
	Найденные = Новый ТаблицаЗначений;
	Попытка
		МонопольныйДоступ = МонопольныйРежим();

		Если НЕ МонопольныйДоступ Тогда
			УстановитьМонопольныйРежим(ИСТИНА);
		КонецЕсли;

		УдалитьОбъекты(Удаляемые, ИСТИНА, Найденные);

		Если РежимУдаления = "Брутальный"
			И НЕ Найденные.Количество() = 0 Тогда

			Удаляемые = Новый Массив;

			Для Каждого Найденный Из Найденные Цикл
				Попытка
					Ссылка = Найденный[1].Ссылка;
					Если ЗначениеЗаполнено(Ссылка) Тогда
						Удаляемые.Добавить(Ссылка);
					КонецЕсли;

				Исключение
					Ссылка = Найденный[1].Ссылка;
					Если ЗначениеЗаполнено(Ссылка) Тогда
						Удаляемые.Добавить(Ссылка);
					КонецЕсли;

				КонецПопытки;

			КонецЦикла;

			Найденные2 = Новый ТаблицаЗначений;
			УдалитьОбъекты(Удаляемые, ИСТИНА, Найденные2);
			Если НЕ Найденные.Количество() = 0 Тогда
				Удаляемые = Новый Массив;

				Для Каждого Найденный Из Найденные Цикл
					Попытка
						Ссылка = Найденный[1].Ссылка;
						Если ЗначениеЗаполнено(Ссылка) Тогда
							Удаляемые.Добавить(Ссылка);
						КонецЕсли;

					Исключение
					КонецПопытки;
				КонецЦикла;

				УдалитьОбъекты(Удаляемые, ИСТИНА, Найденные);
			КонецЕсли;
		КонецЕсли;

		Если НЕ МонопольныйДоступ Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;

	Исключение
		Элементы.СтраницыФормы.ТекущаяСтраница = ИсходнаяСтраница;
		ВызватьИсключение;
	КонецПопытки;
	// Создадим таблицу неудаленных объектов
	ДеревоНеудаленныхОбъектов.ПолучитьЭлементы().Очистить();
	Дерево = РеквизитФормыВЗначение("ДеревоНеудаленныхОбъектов");

	Для каждого Найденный Из Найденные Цикл
		Неудаленный = Найденный[0];
		Ссылающийся = Найденный[1];
		ОбъектМетаданныхСсылающегося = Найденный[2].Представление();
		ОбъектМетаданныхНеудаленногоЗначение = Неудаленный.Метаданные().ПолноеИмя();
		ОбъектМетаданныхНеудаленногоПредставление = Неудаленный.Метаданные().Представление();
		//ветвь метаданного
		СтрокаОбъектаМетаданных = НайтиИлиДобавитьВетвьДереваСКартинкой(Дерево.Строки, ОбъектМетаданныхНеудаленногоЗначение, ОбъектМетаданныхНеудаленногоПредставление, 0);
		//ветвь не удаленного объекта
		СтрокаСсылкиНаНеудаленныйОбъектБД = НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаОбъектаМетаданных.Строки, Неудаленный, Строка(Неудаленный), 2);
		//ветвь ссылки на не удаленный объект
		НайтиИлиДобавитьВетвьДереваСКартинкой(СтрокаСсылкиНаНеудаленныйОбъектБД.Строки, Ссылающийся, Строка(Ссылающийся) + " - " + ОбъектМетаданныхСсылающегося, 1);

	КонецЦикла;

	Дерево.Строки.Сортировать("Значение", ИСТИНА);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоНеудаленныхОбъектов");
	// Проверяем завершенность операции удаления
	// Посчитаем количество неудаленных, для этого подсистем в дереве ветви
	// второго уровня, где они и присутствуют
	НеудаленныхОбъектов = 0;

	Для каждого СтрокаОбъектаМетаданных Из Дерево.Строки Цикл
		НеудаленныхОбъектов = НеудаленныхОбъектов + СтрокаОбъектаМетаданных.Строки.Количество();
	КонецЦикла;

	УдаленныхОбъектов   = Удаляемые.Количество() - НеудаленныхОбъектов;

	СтрокаРезультатов = Строка(УдаленныхОбъектов) + " " +
	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("объектов удалено!");
	Если НеудаленныхОбъектов > 0 Тогда
		СтрокаРезультатов = СтрокаРезультатов + Символы.ПС + Символы.ПС +
		"" + НеудаленныхОбъектов + " " +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("объектов удалить невозможно - в информационной базе") +
		Символы.ПС + " " +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На них ссылаются другие объекты.");
	КонецЕсли;

	Если ДеревоНеудаленныхОбъектов.ПолучитьЭлементы().Количество() = 0 Тогда
		// если удалилось все, на этом завершаем, даем посмотреть на результат и оставляем разрешенным только Закрыть
		Элементы.КомандаДалее.Видимость         = Ложь;
		Элементы.КомандаУдалить.Видимость       = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию	    = ИСТИНА;
	Иначе
		// имеются неудаленные, разрешим переход на страницу причин неудаления
		Элементы.КомандаДалее.Видимость         = ИСТИНА;
		Элементы.КомандаУдалить.Видимость       = Ложь;
		Элементы.КомандаДалее.КнопкаПоУмолчанию	= ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)

	Данные.Пометка = Пометка;
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	Для каждого Элемент Из ЭлементыСтроки Цикл
		УстановитьПометкуВСписке(Элемент, Пометка, Ложь);

	КонецЦикла;

	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	Если проверятьРодителя И Родитель <> Неопределено Тогда
		ПометкаРодителя = ИСТИНА;
		ЭлементыСтроки = Родитель.ПолучитьЭлементы();

		Для каждого Элемент Из ЭлементыСтроки Цикл
			Если НЕ Элемент.Пометка Тогда
				ПометкаРодителя = Ложь;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если ПометкаРодителя <> Родитель.Пометка Тогда
			Родитель.Пометка = ПометкаРодителя;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
