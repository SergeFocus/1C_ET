//sza140613-0051 Хозяин: 
//sza130909-0305 : 

&НаКлиенте
Процедура ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормулыДляШтрихКода(Команда)	
	НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры = установитьПримерФормулыДляШтрихКода();	
КонецПроцедуры

&НаСервере
Функция   УстановитьПримерФормулыДляШтрихКода() 
	
	ПримерФормулы 		= " СокрЛП(Номенклатура.НоменклатурнаяГруппа.Код) + Номенклатура.Производитель.Код + ""x"" + Сокрлп(Формат(Цена, ""ЧЦ=9; ЧДЦ=0"")) ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-код") + " = " + ПримерФормулы;
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент() ;
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыШтрихКодаНоменклатуры") ;
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	
	Константы.ОсновнаяФормулаШтрихКодаНоменклатуры.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции 

&НаКлиенте
Процедура ТекстЗаголовкаОкнаПрограммыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НаборКонстант.ТекстЗаголовкаОкнаПрограммы) Тогда
		ТекстЗаголовкаОкнаПрограммы = НаборКонстант.ТекстЗаголовкаОкнаПрограммы;
		попытка
			Выполнить(" УстановитьЗаголовокКлиентскогоПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		исключение //8.2!
			попытка
				Выполнить(" УстановитьЗаголовокПриложения(ТекстЗаголовкаОкнаПрограммы); ");
			исключение
			конецпопытки;
		конецпопытки;
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поменял заголовок приложения"), 2);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодключаемоеОборудованиеПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормулыПреобразованияЦен(Команда) 	
	НаборКонстант.ОсновнаяФормулаПреобразованияЦен = ПримерФормулыПреобразованияЦенНаСервере();	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыПреобразованияЦенНаСервере()
	
	ПримерФормулы 		= " Цел(Цел(Цена + 1) * 2.5) ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена реализации") + " = (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Целое число от Цены закупки") + " + 1) * 2.5 ";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент() ;
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыПреобразованияЦен");
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	Константы.ОсновнаяФормулаПреобразованияЦен.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппы(Команда)	
	НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию = ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппыНаСервере();	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппыНаСервере()
	
	ПримерФормулы 		= " Номенклатура.НоменклатурнаяГруппа.Наименование + "" "" + Номенклатура.Производитель.Код + ""x"" + Формат(Цена, ""ЧЦ=9; ЧДЦ=0"") ";
	НаименованиеПример 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование") + " = " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная Группа") + ", пробел,  Код Производителя, символ X, Цена";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент() ;
		НаименованиеПримерОбъект.Родитель 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыАвтоНаименованияНоменклатурыДляНоменклатурнойГруппы") ;
		НаименованиеПримерОбъект.Наименование = НаименованиеПример;
		НаименованиеПримерОбъект.Формула 	  = ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
	КонецЕсли;
	Константы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьШтрихКодыПриИзменении(Элемент)
	
	Если не НаборКонстант.ИспользоватьШтрихКоды Тогда
		НаборКонстант.ЗапретитьНоменклатуруБезШтрихКода = ложь;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	НаборКонстантИспользоватьШтрихКоды = НаборКонстант.ИспользоватьШтрихКоды;
	
	элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстантИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
	Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость 						= НаборКонстантИспользоватьШтрихКоды И НаборКонстант.ВестиУчетСерийНоменклатуры;
	Элементы.ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре.Видимость 	= НаборКонстантИспользоватьШтрихКоды ;
	Элементы.УстанавливатьШтрихКодИзКарточкиНоменклатуры.Видимость 						= НаборКонстантИспользоватьШтрихКоды ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормулыТекстаЭтикетки(Команда)
	НаборКонстант.ОсновнаяФормулаТекстаЭтикетки = ПримерФормулыТекстаЭтикеткиНаСервере();	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыТекстаЭтикеткиНаСервере()
	
	ПримерФормулы 		= " Номенклатура.Наименование + "" "" + Лев(Номенклатура.НоменклатурнаяГруппа.Код, 2) + Лев(Номенклатура.Производитель.Код, 2) + ""x"" + Формат(Цена, ""ЧЦ=12; ЧДЦ=2"") ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текст") + " = " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование") + ", пробел,  Код НГ, Код Произв., символ X, Цена";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент() ;
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыТекстаЭтикетки") ;
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	Константы.ОсновнаяФормулаТекстаЭтикетки.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФормулуФормированияЦены(Команда)
	ПроверитьФормулуФормированияЦеныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуФормированияЦеныНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаПреобразованияЦен) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаПреобразованияЦен.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуШтрихКода(Команда)
	ПроверитьФормулуШтрихКодаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуШтрихКодаНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуТекстаЭтикетки(Команда)
	ПроверитьФормулуТекстаЭтикеткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуТекстаЭтикеткиНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуАвтоНаименованияНоменклатуры(Команда)
	
	ПроверитьФормулуАвтоНаименованияНоменклатурыНаСервере();
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуАвтоНаименованияНоменклатурыНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоКлиентамПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазмерСкидкиНаДатаРождения.Видимость 							= НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	
	Если НЕ НаборКонстант.ВестиУчетПоКлиентам
		И НЕ НаборКонстант.ВестиУчетПоПоставщикам Тогда
		
		НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСкладамПриИзменении(Элемент)
	
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОСменеФункциональнойОпции(Знач ЭлементЗдесь = "")
	
	Элементы.УчетПартийРуководителем.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен и ПлатнаяВерсия;
	Если Не ЭлементЗдесь = "" Тогда
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ЭлементЗдесь, 2);	
	КонецЕсли;
	
	Попытка 
		ЭтаФорма.Записать();
		Элементы.СобственныеЮридическиеЛица.Видимость = НаборКонстант.ВестиУчетСобственныхЮридическихЛиц;
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	ОбновитьИнтерфейс();
	
КонецПроцедуры //СообщитьОСменеФункциональнойОпции

&НаКлиенте
Процедура ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодомПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	
	элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость 	= НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ОсновнаяФормулаПреобразованияЦен.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ОбновитьШтрикоды.Видимость 				= НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсистемаИЭИмпортЭкспортПриИзменении(Элемент)
	
	Если не НаборКонстант.ПодсистемаИЭИмпортЭкспорт Тогда
		НаборКонстант.ПодсистемаИЭДемонстрироватьКомандыИмпортаИЭкспортаВСправочникахИДокументах = Ложь;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетРегионовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп Тогда
		НаборКонстант.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры = Ложь;
		Если НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп Тогда		
			НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьДополнтельныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость = НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ФормулаИКнопкаПримера.Видимость = НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
	
	обновитьвидимостьэлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПроизводителейНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДвиженияДенегПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетДвиженияДенег Тогда
		НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода 	= ложь;
		НаборКонстант.ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы 				= Ложь;
		НаборКонстант.ВестиУчетВалют 						= ложь;
		НаборКонстант.ВестиУчетДенегВНесколькихХранилищах 	= ложь;
		НаборКонстант.ВестиУчетПлановДоходоВИРасходов		= Ложь;
		Элементы.УчетПлановДоходовИРасходов.Видимость		= Ложь;
		
	ИначеЕсли ПлатнаяВерсия Тогда
		Элементы.УчетПлановДоходовИРасходов.Видимость		= Истина;
		
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСложныйМеханизмЦенПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьСложныйМеханизмЦен
		И НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп Тогда
		
		НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаФормулыПреобразованияЦены.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	обновитьвидимостьэлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000150", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
			или НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
			
			Элементы.ФормулыШК.Видимость = Ложь;
		КонецЕсли;
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Версия 				= Метаданные.Версия;
		ПлатнаяВерсия 		= ОбщийМодульПовтор.ПлатнаяВерсия();
		
		Если НЕ ПлатнаяВерсия Тогда
			ОПлатнойВерсии.Очистить();
			МакетОПлатной = ПолучитьОбщийМакет("ОПлатнойВерсии");
			ОбластьМакета = МакетОПлатной.ПолучитьОбласть("Ш");
			ОПлатнойВерсии.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Элементы.ВерсияПрограммы.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия") + ": " + Версия;	
		Элементы.ОписаниеПрограммыЭлементарнаяТорговля.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Описание программы") + " v " + Метаданные.Версия;
		
		НаименованиеОсновнойВалюты 	= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;	
		НаименованиеНашегоРегиона 	= ПредопределенноеЗначение("Справочник.Регионы.НашРегион").Наименование ;
		
		ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже");
		элементы.МеханизмЛьготнойЦены.Видимость 			= ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже;
		Элементы.ФормулаИКнопкаПримера.Видимость 			= НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
		элементы.СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены.Видимость = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") и ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар");
		элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость 				= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") и НаборКонстант.ВестиУчетПоКлиентам;
		элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость 	= НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
		элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
		
		ВерсияПриИнсталляции = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");
		Попытка
			ЧислоВерсияПриИнсталляции = Число(Лев(ВерсияПриИнсталляции, 6));
		Исключение
			ЧислоВерсияПриИнсталляции = 0;
		КонецПопытки;
		элементы.ЧтоНового.Видимость = ложь;
		
		РегистрационныйКод 							= ОбщийМодульСервисСервер.РегистрационныйКод();
		ЯзыкПользователяЗаданВКонфигураторе 		= ОбщийМодульТекстСервер.ЯзыкПользователяЗаданВКонфигураторе();
		Элементы.ТекущийЯзыкИнтерфейса.Доступность 	= НЕ ЯзыкПользователяЗаданВКонфигураторе;
		Элементы.ЯзыкТекущегоПользователяЗаданВКонфигураторе.Видимость = ЯзыкПользователяЗаданВКонфигураторе;
		
		Если не ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			элементы.ДекорацияЛого.Видимость   = Ложь;
			элементы.ДекорацияЛогоET.Видимость = Истина;
		КонецЕсли;
		
		РабочаяДата = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РабочаяДата");
		элементы.ОПлатнойВерсии.Видимость 				= Ложь;  	
		элементы.ЭТО_БЕСПЛАТНАЯ_ВЕРСИЯ.Видимость 		= Ложь;		
		Элементы.СтраницыНастроекПечати.Видимость 		= НаборКонстант.ЕстьПринтер;
		Элементы.ГруппаУправлениеДоступом.Видимость 	= НаборКонстант.ИспользоватьСистемуУправленияДоступом;
		Элементы.СобственныеЮридическиеЛица.Видимость 	= НаборКонстант.ВестиУчетСобственныхЮридическихЛиц;
		Элементы.РазмерСкидкиНаДатаРождения.Видимость 	= НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
		Элементы.УчетПлановДоходовИРасходов.Видимость	= ПлатнаяВерсия И НаборКонстант.ВестиУчетДвиженияДенег;
		Элементы.ГруппаФормулыПреобразованияЦены.Видимость 	  = НаборКонстант.ИспользоватьСложныйМеханизмЦен и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
		Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
		Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
		Элементы.ЧислоЗнаковПослеЗапятойДляКоличества.Видимость = НаборКонстант.КоличествоНоменклатурыМожетБытьДробным;
		Элементы.СтрогоеИмяНефискальногоПринтераЧеков.Видимость = НаборКонстант.ПечататьЧек;
		Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость 			= НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ВестиУчетСерийНоменклатуры;
		Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = НаборКонстант.ВестиУчетПоКлиентам И НаборКонстант.ИспользоватьСкидки;		
		Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НаборКонстант.ВестиУчетВалют;
		
		НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;	
		ОсновноеПредприятие = Справочники.Организации.ОсновноеПредприятие ;
		НашеОКПО 			= ОсновноеПредприятие.ОКПО;
		НашЮридическийАдрес = ОсновноеПредприятие.Адрес;		
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РазмерПланкиКоличестваТовараДляЛьготнойЦены, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РазмерПланкиКоличестваТовараДляЛьготнойЦены1, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.МинимальныйОбъемОказанияУслуг, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, Истина);			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоПоставщикамПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	Если НЕ НаборКонстант.ВестиУчетПоКлиентам
		И НЕ НаборКонстант.ВестиУчетПоПоставщикам Тогда
		
		НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	
	Если НаборКонстант.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
		НаборКонстант.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара = '00010101000000' ;
	Иначе
		НаборКонстант.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоведениеПрограммыПриРасходеТоваровБезОстаткаПриИзменении(Элемент)
	
	ПроверитьДатуОграничения();
	ПоведениеПрограммыИзмена();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуОграничения() 
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) 
		и не НаборКонстант.ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
		
		НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры //ПроверитьДатуОграничения()

&НаКлиенте
Процедура СменаУсловийУчетаНоменклатуры(Команда)
	
	Форма = ПолучитьФорму("Обработка.СменаУсловийУчета.Форма");
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧтоНового()
	
	МакетЧтоНового = ПолучитьОбщийМакет("ЧтоНового");
	
	МассивНеобходимыхОбластей = Новый ТаблицаЗначений;
	МассивНеобходимыхОбластей.Колонки.Добавить("ИмяОбласти");
	
	Для Каждого Область Из МакетЧтоНового.Области Цикл
		
		ИмяОбласти = СтрЗаменить(Область.Имя, "Ш", "");
		Если НЕ ИмяОбласти = "" Тогда
			
			Попытка
				НомерОбласти = Число(ИмяОбласти);
				Если НомерОбласти > ЧислоВерсияПриИнсталляции Тогда
					СтрокаТаблицы = МассивНеобходимыхОбластей.Добавить();
					СтрокаТаблицы.ИмяОбласти = Область.Имя;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МассивНеобходимыхОбластей.Количество() = 0 Тогда
		
		Ш = МакетЧтоНового.ПолучитьОбласть("Ш");	
		ЧтоНового.Вывести(Ш);
		Если НЕ ПлатнаяВерсия Тогда
			ШП = МакетЧтоНового.ПолучитьОбласть("ШП");	
			ЧтоНового.Вывести(ШП);
		КонецЕсли;
		
		МассивНеобходимыхОбластей.Сортировать("ИмяОбласти УБЫВ");
		Для Каждого ОбластьМассива Из МассивНеобходимыхОбластей Цикл
			Ш = МакетЧтоНового.ПолучитьОбласть(ОбластьМассива.ИмяОбласти);	
			ЧтоНового.Вывести(Ш);                   	               	
		КонецЦикла;
		
		элементы.ЧтоНового.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                    // ПРИ ОТКРЫТИИ 
	
	Если Не Отказ Тогда
		Если не ПлатнаяВерсия Тогда
			элементы.УчетСеритификатов.Видимость  	 = Ложь;
			элементы.ЗаказыИПланыПродаж.Видимость 	 = Ложь;
			элементы.ГруппаИзображения.Видимость 	 = Ложь;
			элементы.ГруппаДопРеквизиты.Видимость 	 = Ложь;
			элементы.ЭТО_БЕСПЛАТНАЯ_ВЕРСИЯ.Видимость = Истина;
			элементы.СПодключаемоеОборудование.Видимость 	 = Ложь;
			элементы.РеализаторНеМожетМенятьЦены1.Видимость  = Ложь;
			Элементы.ГруппаУчетаСредствПредприятия.Видимость = Ложь;
			элементы.ВестиУчетСерийНоменклатуры.Видимость 	 = Ложь;
			элементы.РеализаторНеМожетМенятьЦены.Видимость 	 = Ложь;
			элементы.ВключитьМеханизмПодбораНоменклатуры.Видимость 	 = Ложь;				
			элементы.НастройкиEMAILДляОтправкиКонтрагентам.Видимость = Ложь;
			Элементы.ВестиДополнительнуюИнформациюДляКомплектаций.Видимость 	  	  = Ложь;
			Элементы.ИспользоватьШтрихКодыДляИдентификацииКонтрагентов.Видимость 	  = Ложь;
			элементы.ИспользоватьДополнтельныеРеквизитыНоменклатурныхГрупп.Видимость  = Ложь;
			элементы.ПредставлятьСерииНоменклатурыВДокументахОтдельнымОкном.Видимость = Ложь;
			элементы.ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами.Видимость = Ложь;
			элементы.МеханизмОтсрочкиНеРекомендуетсяВключатьИлиВыключатьБезПолногоПерепроведенияВсехДокументовПоВзаиморасчетам.Видимость = Ложь;
		КонецЕсли;
		
		ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
		#Если НЕ ВебКлиент тогда
			элементы.ОПлатнойВерсии.Видимость = НЕ ПлатнаяВерсия;
			ЗаполнитьЧтоНового();
		#КонецЕсли
		ЗапретитьИзмененияВПрошломПериоде();
		ПоведениеПрограммыИзмена();
		
		элементы.Декорация3.Видимость = ОбщийМодульКлиент.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Видимость = НаборКонстант.ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию;
		Элементы.УчетПартийРуководителем.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен и ПлатнаяВерсия;
		
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			Попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Элементы.ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре.Видимость = НаборКонстант.ИспользоватьШтрихКоды ;
		Элементы.УстанавливатьШтрихКодИзКарточкиНоменклатуры.Видимость = НаборКонстант.ИспользоватьШтрихКоды ;
		Элементы.ОбновитьШтрикоды.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;	
		Элементы.ГруппаНастроекОператораКассы.Видимость = НаборКонстант.ИспользоватьИнструментРабочееМестоОператораКассы;
		
		СменитьВидОкнаНастроекНаСервере();
		обновитьвидимостьэлементов();  	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументов(Команда)
	
	ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере();
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Попытка
		Помеченные = НайтиПомеченныеНаУдаление();		
		
		ПомеченныеКоличество = Помеченные.Количество();
		если НЕ ПомеченныеКоличество = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка,
			|	ЗаметкиИНапоминания.Причина
			|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
			|ГДЕ ЗаметкиИНапоминания.СвязаноС = &Причина
			|	И ЗаметкиИНапоминания.Причина = &Причина";
			
			Для Каждого Помеченный Из Помеченные Цикл
				
				ПомеченныйСсылка = Помеченный.Ссылка;
				
				Отбор = Новый Структура;
				Отбор.Вставить("СсылкаНаОбъект", ПомеченныйСсылка);
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.Выбрать(,,Отбор);
				Пока ЖурналСобытий.Следующий() Цикл
					менз = ЖурналСобытий.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектВладелец", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ДополнительныйРеквизит", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Запрос.УстановитьПараметр("Причина", ПомеченныйСсылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				если не РезультатЗапроса.Пустой() тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						ОбъектЗаметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						если ВыборкаДетальныеЗаписи.причина = ПомеченныйСсылка тогда
							ОбъектЗаметка.Причина = Неопределено;
						иначе
							ОбъектЗаметка.СвязаноС = Неопределено;
						КонецЕсли;
						ОбъектЗаметка.Записать();
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Найденные = 0;
			УдалитьОбъекты(Помеченные, Истина, Найденные);
			МассивСообщенных = Новый Массив;
			объектовбольше = Ложь;
			
			Для каждого Ссылка из Найденные Цикл
				Если МассивСообщенных.Найти(Ссылка[0]) = Неопределено Тогда
					МассивСообщенных.Добавить(Ссылка[0]);
					СтрСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект не удален:") + " " + СокрЛП(Ссылка[0]);
					СтрСсылка = ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("используется в") + " " + СокрЛП(Ссылка[1]);
					Сообщить (СтрСообщения + СтрСсылка);	
					
				Иначе
					объектовбольше = истина;
				КонецЕсли;
			КонецЦикла;
			
			Если объектовбольше Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ссылок на объекты больше. Указана только первая ссылка для каждого из них."));
			КонецЕсли;
			
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистил помеченные на удаление"), 2);
			Сообщить(?(Найденные.Количество() = 0, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остальные")) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" помеченные на удаление объекты удалены. Всего:") + " " + ПомеченныеКоличество);
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помеченных на удаление объектов нет. "));
		КонецЕсли;
		
	Исключение
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось удалить помеченные на удаление объекты.") + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	попытка
		установитьМонопольныйРежим(ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЖурналированиеСобытийПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ИспользоватьЖурналированиеСобытий", НаборКонстант.ИспользоватьЖурналированиеСобытий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЖурналДоУказаннойДаты(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить журнал") + " " + ?(ЗначениеЗаполнено(ДатаГраницыОчисткиЖурнала), "до " + Формат(ДатаГраницыОчисткиЖурнала, "ДФ=dd.MM.yyyy"), "за весь период") + "?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет очистка журнала.."));
		ОчиститьЖурналДоУказаннойДатыНаСервере(ДатаГраницыОчисткиЖурнала);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьЖурналДоУказаннойДатыНаСервере(ДатаГраницыОчисткиЖурналаБК)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистил журнал событий") + ?(ЗначениеЗаполнено(ДатаГраницыОчисткиЖурналаБК), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" по") + " " + ДатаГраницыОчисткиЖурналаБК, ""), 2);
	
	Выборка = РегистрыСведений.ЖурналСобытий.Выбрать('00010101000000', ?(ЗначениеЗаполнено(ДатаГраницыОчисткиЖурналаБК), ДатаГраницыОчисткиЖурналаБК, КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата())));
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПлановыхПоказателейПродажПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиЗаписьВЖурналВсехОбычныхДействийПользователейПриИзменении(Элемент)
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ВестиЗаписьВЖурналВсехОбычныхДействий", НаборКонстант.ВестиЗаписьВЖурналВсехОбычныхДействийПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   		
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранение настроек.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);			
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживатьИныеЯзыкиКромеРусскогоПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ПоддерживатьИныеЯзыкиКромеРусского тогда
		
		НаборКонстант.ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского = Ложь;
		
		если ЗначениеЗаполнено(НаборКонстант.ТекущийЯзыкИнтерфейса) Тогда
			
			НаборКонстант.ТекущийЯзыкИнтерфейса = ПредопределенноеЗначение("Справочник.Языки.Русский");
			ОбновитьТекущийЯзыкИнтерфейса(НаборКонстант.ТекущийЯзыкИнтерфейса);	
		КонецЕсли;
		
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийЯзыкИнтерфейсаПриИзменении(Элемент)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавление текстов перевода.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбновитьТекущийЯзыкИнтерфейса(НаборКонстант.ТекущийЯзыкИнтерфейса);
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТекущийЯзыкИнтерфейса(Знач ТекущийЯзыкИнтерфейса)
	
	ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ТекущийЯзыкИнтерфейса;
	
	если ЗначениеЗаполнено(ТекущийЯзыкИнтерфейса)
		И НЕ ТекущийЯзыкИнтерфейса = справочники.Языки.Русский тогда
		
		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ТекущийЯзыкИнтерфейса.Код, ТекущийЯзыкИнтерфейса);
		
	конецесли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВестиУчетВалютПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетВалют Тогда
		НаборКонстант.ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы = Ложь;
		НаборКонстант.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = Ложь;
	КонецЕсли;
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ВестиУчетВалютВСеансе", НаборКонстант.ВестиУчетВалют);
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НаборКонстант.ВестиУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыПоУмолчанию(Команда)
	
	//	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы установить первоначальные настройки?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	ФормаВизарда = Получитьформу("ОбщаяФорма.УстановкаПервоначальныхНастроек");
	ФормаВизарда.Открыть();
	//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетЗарплатыСотрудниковПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетЗарплатыСотрудников Тогда
		НаборКонстант.ВестиУчетПродажПоСотрудникам = Ложь;
	КонецЕсли;
	УчетЗарплатыСотрудниковПриИзменениинаСервере(НаборКонстант.ВестиУчетЗарплатыСотрудников);
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
процедура УчетЗарплатыСотрудниковПриИзменениинаСервере(Знач ВестиУчетЗарплатыСотрудников)
	
	Если ВестиУчетЗарплатыСотрудников Тогда
		СвязаннаяПапкаКлиентов = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
		
		Если НЕ ЗначениеЗаполнено(СвязаннаяПапкаКлиентов)
			или НЕ СвязаннаяПапкаКлиентов.ЭтоГруппа Тогда
			
			СвязаннаяПапкаКлиентов = Справочники.Клиенты.СоздатьГруппу();
			СвязаннаяПапкаКлиентов.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники");
			СвязаннаяПапкаКлиентов.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
			СвязаннаяПапкаКлиентов.Записать();
		КонецЕсли;
		СвязаннаяПапкапоставщиков = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
		
		Если НЕ ЗначениеЗаполнено(СвязаннаяПапкапоставщиков)
			или НЕ СвязаннаяПапкапоставщиков.ЭтоГруппа Тогда
			
			СвязаннаяПапкапоставщиков = Справочники.Клиенты.СоздатьГруппу();
			СвязаннаяПапкапоставщиков.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники");
			СвязаннаяПапкапоставщиков.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
			СвязаннаяПапкапоставщиков.Записать();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНачисленияИВыдачиЗаработнойПлаты(Команда)
	
	ФормаНовогоДокумента = Неопределено;
	Выполнить("ФормаНовогоДокумента = ПолучитьФорму(""Документ.ДвиженияДенег.Форма.СписокДокументовРасчетаЗаработнойПлаты"");");
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИзмененияВПрошломПериодеПриИзменении(Элемент)
	
	ЗапретитьИзмененияВПрошломПериоде();
	ЗапретитьИзмененияВПрошломПериодеП = НаборКонстант.ЗапретитьИзмененияВПрошломПериоде;
	ЗапретитьИзмененияВПрошломПериодеП = (ЗапретитьИзмененияВПрошломПериодеП = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты")) ИЛИ (ЗапретитьИзмененияВПрошломПериодеП = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока"));
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ДействуетЗапретИзмененийПрошлого", ЗапретитьИзмененияВПрошломПериодеП);
	
КонецПроцедуры

&НаКлиенте
процедура ЗапретитьИзмененияВПрошломПериоде()
	
	Если НаборКонстант.ЗапретитьИзмененияВПрошломПериоде = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока") Тогда
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = Ложь;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = Истина;
	ИначеЕсли НаборКонстант.ЗапретитьИзмененияВПрошломПериоде = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты") Тогда
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = Истина;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = Ложь;
	Иначе		
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = Ложь;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенРасходованияПоУмолчаниюПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ВидЦенРасходованияПоУмолчанию) Тогда
		НаборКонстант.РеализаторНеМожетМенятьЦены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОсновнойВалютыПриИзменении(Элемент)	
	НаименованиеОсновнойВалютыПриИзмененииНаСервере(НаименованиеОсновнойВалюты);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеОсновнойВалютыПриИзмененииНаСервере(Знач НаименованиеОсновнойВалюты)
	
	основнаявалюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект() ;
	основнаявалюта.Наименование = НаименованиеОсновнойВалюты;
	основнаявалюта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстаткаПриИзменении(Элемент)
	ПоведениеПрограммыИзмена();
КонецПроцедуры

&НаСервере
Процедура ПоведениеПрограммыИзмена()
	
	Поведение 			= НаборКонстант.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка;
	видимостьЭлементов 	= ЗначениеЗаполнено(Поведение) И НЕ Поведение = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать ;
	
	элементы.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара.Видимость = видимостьЭлементов;
	элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = видимостьЭлементов;
	
	Поведение = НаборКонстант.ПоведениеПрограммыПриРасходеТоваровБезОстатка;
	видимостьЭлементов = ЗначениеЗаполнено(Поведение) И НЕ Поведение = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать ;
	элементы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Видимость = видимостьЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНашегоРегионПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	НаименованиеНашегоРегионПриИзмененииНаСервере(НаименованиеНашегоРегиона);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеНашегоРегионПриИзмененииНаСервере(Знач НаименованиеНашегоРегиона)
	
	НашРегион = Справочники.Регионы.НашРегион.ПолучитьОбъект() ;
	НашРегион.Наименование = НаименованиеНашегоРегиона;
	НашРегион.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользоватьНаборыТоваровПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродажеПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	элементы.МеханизмЛьготнойЦены.Видимость = НаборКонстант.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетВаловойПрибыли Тогда
		НаборКонстант.СообщатьОНеактуальностиПоказателейВаловойПрибылиИПредлагатьПерепроведениеДокументовПриВыходеИзПрограммыПоследнегоПользователя = Ложь;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТоварПриИзменении(Элемент)
	элементы.СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены.Видимость = НаборКонстант.ИспользоватьСкидки и НаборКонстант.ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
	элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = ПараметрыСеанса.ИспользоватьСкидкиПС и НаборКонстант.ВестиУчетПоКлиентам;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТест(Команда)
	
	попытка
		Выполнить("УстановитьКраткийЗаголовокПриложения(""SZA"")");
	исключение
	конецпопытки;
	
	ОбщийМодульКлиент.ВыдатьСигнал("000");
	тест();
	
КонецПроцедуры

&НаСервере
процедура тест()
	
	константы.ВерсияПрограммы.Установить("");
	константы.ВерсияПриИнсталляции.Установить("131101");
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ЗНК();
	Сообщение.Сообщить();
	
конецпроцедуры

&НаСервереБезКонтекста
Функция   ЗНК()
	
	Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
	
КонецФункции

&НаКлиенте
Процедура ПисьмоАвторуОбОшибкеИлиСПожеланием(Команда)
	
	формаписьма = ПолучитьФорму("ОбщаяФорма.ПисьмоАвтору");
	формаписьма.открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкидкиПриИзменении(Элемент)
	
	Если не НаборКонстант.ИспользоватьСкидки Тогда
		НаборКонстант.РазмерСкидкиНаДатаРождения = 0;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов = ложь;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры = Ложь;
		НаборКонстант.СуммироватьПроцентСкидкиКлиентаИНоменклатуры = Ложь;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазмерСкидкиНаДатаРождения.Видимость = НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьНоменклатуруБезШтрихКодаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстаткамиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиковПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСворачиватьТоварыПоКоличествуПриПриходованииТовараПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваровПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьПечатьДокументовИСправочниковСразуНаПринтерПриИзменении(Элемент)
	
	Если НаборКонстант.ОтправлятьПечатьДокументовИСправочниковСразуНаПринтер
		И НЕ Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что принтер будет все время включен и готов к печати?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		НаборКонстант.ОтправлятьПечатьДокументовИСправочниковСразуНаПринтер = Ложь;
	Иначе
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовараПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстВШапкеДокументовПриПечатиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстВПодвалеДокументовПриПечатиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ФорматЭтикетки1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеТекстаСШтрихКодомНаЭтикетке1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПринтераШтрихКодов1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОбновленияКонфигурацииНажатие(Элемент)
	ЗапуститьПриложение("http://www.ELTR.od.ua");
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПартийПоступленияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЗадублированнойНоменклатуры(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры.. Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры.. Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры.. Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПодготовкаКУдалению()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("БылЗапрет", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде"));
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ЗапретитьНоменклатуруБезШтрихКода", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"));
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(ложь);
	
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры"));
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеДенегБезОстатка", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровБезОстатка", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков"));
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара"));
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(ИСТИНА);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуВоВсехДокументах", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах"));
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(ИСТИНА) ;
	
	СтруктураНастроек.Вставить("НеПроверятьУникальностьШтрихКода", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода"));
	Константы.НеПроверятьУникальностьШтрихКода.Установить(истина) ;	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	возврат СтруктураНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалениеЗадублированнойНоменклатурыНаСервере(Знач ПоШтрихКоду = Ложь)
	
	ИспользоватьШтрихКоды = ПоШтрихКоду И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	
	ИзмененияВДокументах = Новый ТаблицаЗначений;
	ИзмененияВДокументах.Колонки.Добавить("СсылкаНаДокумент");
	ИзмененияВДокументах.Колонки.Добавить("ДатаДокумента");
	ИзмененияВДокументах.Колонки.Добавить("ТаблицаИзменений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.ОсновнойШтрихКод,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) КАК Остаток,
	|	Номенклатура.Предопределенный КАК Предопределенный,
	|	Номенклатура.ЭтоГруппа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК НоменклатураОст,
	|		ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Товары.Остатки КАК ТоварыОстатки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Ссылка = ВложенныйЗапрос.НоменклатураОст)
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Предопределенный УБЫВ,
	|	Остаток УБЫВ,
	|	Номенклатура.ПометкаУдаления";
	
	ВсеИменаИКоды = Новый ТаблицаЗначений;
	ВсеИменаИКоды.Колонки.Добавить("НоменклатураСсылка");
	ВсеИменаИКоды.Колонки.Добавить("НаименованиеВРЕГ");
	ВсеИменаИКоды.Колонки.Добавить("ШтрихКодВРЕГ");
	
	Запросц = Новый Запрос;
	Запросц.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ПометкаУдаления УБЫВ";
	
	РезультатЗапросац = Запросц.Выполнить();
	если не РезультатЗапросац.Пустой() тогда 
		ВыборкаДетальныеЗаписиц = РезультатЗапросац.Выбрать();
		
		Пока ВыборкаДетальныеЗаписиц.Следующий() Цикл
			СтрокаТовара = ВсеИменаИКоды.Добавить();
			СтрокаТовара.НоменклатураСсылка = ВыборкаДетальныеЗаписиц.ссылка;
			СтрокаТовара.ШтрихКодВРЕГ 		= сокрлп(ВРег(ВыборкаДетальныеЗаписиц.ОсновнойШтрихКод));
			СтрокаТовара.НаименованиеВРЕГ 	= сокрлп(ВРег(ВыборкаДетальныеЗаписиц.Наименование));
		КонецЦикла;                         	
	КонецЕсли;
	
	Запрос3 = Новый Запрос;
	Запрос3.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор,
	|	Закупки.Период КАК Период
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор,
	|	Продажи.Период
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Регистратор,
	|	Товары.Период
	|ИЗ
	|	РегистрНакопления.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВаловаяПрибыль.Регистратор,
	|	ВаловаяПрибыль.Период
	|ИЗ
	|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
	|ГДЕ
	|	ВаловаяПрибыль.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентов.Регистратор,
	|	ЗаказыКлиентов.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.Регистратор,
	|	ЗаказыПоставщикам.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";       		
	
	Запрос4 = Новый Запрос;
	Запрос4.Текст = "ВЫБРАТЬ
	|	Цены.Период,
	|	Цены.Номенклатура,
	|	Цены.ВидЦен,
	|	Цены.Цена,
	|	Цены.ДокументРегистрации,
	|	Цены.Комментарий,
	|	Цены.Вручную,
	|	Цены.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Номенклатура = &Номенклатура";     		
	
	Запрос5 = Новый Запрос;
	Запрос5.Текст =	"ВЫБРАТЬ
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения,
	|	ШтрихКоды.СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Номенклатура = &Номенклатура"; 		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса.Пустой() тогда
		
		ОбнаруженоДублей = 0;
		ПройденнаяНоменклатура = Новый массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 			
			
			Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
			если ПройденнаяНоменклатура.Найти(Номенклатура) = Неопределено тогда
				ПройденнаяНоменклатура.Добавить(Номенклатура);
				
				дУБЛИ 		= нОВЫЙ мАССИВ;
				дУБЛИПоКОду = нОВЫЙ мАССИВ;
				Отбор 		= Новый Структура();
				Отбор.Вставить("НаименованиеВРЕГ", "");
				ОтборПоКоду	= Новый Структура();
				ОтборПоКоду.Вставить("ШтрихКодВРЕГ", "");
				
				если не ПоШтрихКоду тогда
					Отбор.НаименованиеВРЕГ = сокрлп(ВРег(ВыборкаДетальныеЗаписи.Наименование));				
					Дубли = ВсеИменаИКоды.НайтиСтроки(Отбор);	
				КонецЕсли;
				
				Если ИспользоватьШтрихКоды тогда
					
					ОтборПоКоду.ШтрихКодВРЕГ = сокрлп(Врег(ВыборкаДетальныеЗаписи.ОсновнойШтрихКод));
					Если НЕ ОтборПоКоду.ШтрихКодВРЕГ = "" Тогда
						ДублиПоКОду = ВсеИменаИКоды.НайтиСтроки(ОтборПоКоду);
						для каждого дпк из ДублиПоКОду цикл
							дубли.Добавить(дпк);	
						КонецЦикла;	
					КонецЕсли;
					
				КонецЕсли;
				
				если дубли.Количество() > 1 тогда				
					
					СтрокаДубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
					
					Для каждого ВыборкаДетальныеЗаписи2 из дубли цикл
						
						если не ВыборкаДетальныеЗаписи2.НоменклатураСсылка = Номенклатура тогда
							
							ОбнаруженоДублей  = ОбнаруженоДублей + 1;
							
							НоменклатураДубль = ВыборкаДетальныеЗаписи2.НоменклатураСсылка;
							Запрос3.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса3 = Запрос3.Выполнить();
							если не РезультатЗапроса3.Пустой() тогда
								ВыборкаДетальныеЗаписи3 = РезультатЗапроса3.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи3.Следующий() Цикл
									
									СсылкаНаДокумент = ВыборкаДетальныеЗаписи3.Регистратор;
									СтрокаДок 		 = ИзмененияВДокументах.Найти(СсылкаНаДокумент, "СсылкаНаДокумент");
									
									если СтрокаДок = Неопределено Тогда
										СтрокаДок = ИзмененияВДокументах.Добавить();
										СтрокаДок.СсылкаНаДокумент = СсылкаНаДокумент;
										СтрокаДок.ДатаДокумента = ВыборкаДетальныеЗаписи3.Период;
										
										ТаблицаИзменений = Новый ТаблицаЗначений;
										ТаблицаИзменений.Колонки.Добавить("ИмяТаблицы");
										ТаблицаИзменений.Колонки.Добавить("НомерСтрокиТаблицы");
										ТаблицаИзменений.Колонки.Добавить("Номенклатура");
										ТаблицаИзменений.Колонки.Добавить("НоменклатураДубль");
										
									иначе
										ТаблицаИзменений = СтрокаДок.ТаблицаИзменений;										
									КонецЕсли;									
									
									СтрокаДокумента = СсылкаНаДокумент.Товары.Найти(НоменклатураДубль, "Номенклатура");
									Если НЕ СтрокаДокумента = Неопределено Тогда
										СтрокаИзменений = ТаблицаИзменений.Добавить();
										СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
										СтрокаИзменений.ИмяТаблицы 			= "Товары";
										СтрокаИзменений.Номенклатура 		= Номенклатура;
										СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
									КонецЕсли;	
									
									Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков") Тогда
										СтрокаДокумента = СсылкаНаДокумент.Цены.Найти(НоменклатураДубль, "Номенклатура");
										Если НЕ СтрокаДокумента = Неопределено Тогда
											СтрокаИзменений = ТаблицаИзменений.Добавить();
											СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
											СтрокаИзменений.ИмяТаблицы 			= "Цены";
											СтрокаИзменений.Номенклатура 		= Номенклатура;
											СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
										КонецЕсли;	
									КонецЕсли;
									
									СтрокаДок.ТаблицаИзменений = ТаблицаИзменений;
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос4.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса4 = Запрос4.Выполнить();
							если не РезультатЗапроса4.Пустой() тогда
								ВыборкаДетальныеЗаписи4 = РезультатЗапроса4.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи4.Следующий() Цикл
									
									Цена = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									Цена.Период 				= ВыборкаДетальныеЗаписи4.Период;
									Цена.ВидЦен 				= ВыборкаДетальныеЗаписи4.ВидЦен;
									Цена.Цена 					= ВыборкаДетальныеЗаписи4.Цена;
									Цена.ДокументРегистрации 	= ВыборкаДетальныеЗаписи4.ДокументРегистрации;
									Цена.Комментарий  			= ВыборкаДетальныеЗаписи4.Комментарий;
									Цена.Вручную  				= ВыборкаДетальныеЗаписи4.Вручную;
									Цена.ЕдиницаИзмерения		= ВыборкаДетальныеЗаписи4.ЕдиницаИзмерения;
									
									Цена.Номенклатура 			=  Номенклатура;
									
									Попытка 
										Цена.Записать(Истина);
									Исключение 
										Сообщение = Новый СообщениеПользователю;
										Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений цены:") + " " + Цена + " " + ОписаниеОшибки();
										Сообщение.Сообщить();
									КонецПопытки; 
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос5.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса5 = Запрос5.Выполнить();
							если не РезультатЗапроса5.Пустой() тогда
								ВыборкаДетальныеЗаписи5 = РезультатЗапроса5.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи5.Следующий() Цикл
									
									РСМЗ = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
									РСМЗ.ШтрихКод 		= ВыборкаДетальныеЗаписи5.ШтрихКод;
									РСМЗ.ТипШтрихКода 	= ВыборкаДетальныеЗаписи5.ТипШтрихКода;
									РСМЗ.ЕдиницаИзмерения	= ВыборкаДетальныеЗаписи5.ЕдиницаИзмерения;
									РСМЗ.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи5.СерияНоменклатуры;
									
									РСМЗ.Номенклатура 	= Номенклатура;
									
									Попытка 
										РСМЗ.Записать(Истина);
									Исключение 
									КонецПопытки;
									
									ШК = регистрысведений.ШтрихКоды.СоздатьНаборЗаписей();
									ШК.Отбор.Номенклатура.Установить(НоменклатураДубль);
									ШК.Прочитать();
									
									Для Каждого ЗаписьШК из ШК Цикл
										Если ЗаписьШК.ШтрихКод = ВыборкаДетальныеЗаписи5.ШтрихКод Тогда
											ШК.Удалить(ЗаписьШК);
											Прервать;
										КонецЕсли;   	
									КонецЦикла;
									ШК.Записать(Истина);
									
								КонецЦикла;      	
							КонецЕсли;
							
							НомОбъект = НоменклатураДубль.ПолучитьОбъект();
							
							Если Найти(НомОбъект.Наименование, СтрокаДубль) = 0 Тогда
								НомОбъект.Наименование 	= СтрокаДубль + " " + НомОбъект.наименование;	
							КонецЕсли;
							НомОбъект.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесен на товар с кодом:") + " " + Номенклатура.Код;
							НомОбъект.ОбменДанными.Загрузка = Истина;
							
							попытка
								НомОбъект.Записать();
								НомОбъект = НомОбъект.ссылка.ПолучитьОбъект();
								Попытка
									НомОбъект.УстановитьПометкуУдаления(Истина);
								исключение
								конецпопытки;   				
								
							исключение
							конецпопытки;
							
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;      		
		
		Если НЕ ОбнаруженоДублей = 0 тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено Дублей Номенклатуры:") + ОбнаруженоДублей + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Попробуйте их удалить.");
			Сообщение.Сообщить();
			
			ИзмененияВДокументах.Сортировать("ДатаДокумента");
			
			Для каждого ДокСтрока Из ИзмененияВДокументах Цикл
				ДокументДляИзменения = ДокСтрока.СсылкаНаДокумент.получитьобъект();
				Для Каждого изменениевтаблице из ДокСтрока.ТаблицаИзменений цикл
					СтрокаТаблицыДокумента = ДокументДляИзменения[изменениевтаблице.ИмяТаблицы].Получить(изменениевтаблице.НомерСтрокиТаблицы - 1);
					СтрокаТаблицыДокумента.Номенклатура = изменениевтаблице.Номенклатура;
				КонецЦикла;
				
				ДокументДляИзменения.записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;					
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документов перезаписано:") + " " + ИзмененияВДокументах.Количество();
			Сообщение.Сообщить();
			
		Иначе			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дублей Номенклатуры не обнаружено!");
			Сообщение.Сообщить();
		КонецЕсли;		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытиеУдаления(Знач СтруктураНастроек)
	
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(СтруктураНастроек.БылЗапрет);
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(СтруктураНастроек.ЗапретитьНоменклатуруБезШтрихКода);
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(СтруктураНастроек.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры);
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеДенегБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка); 
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(СтруктураНастроек.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков);
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара);
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуВоВсехДокументах) ;
	Константы.НеПроверятьУникальностьШтрихКода.Установить(СтруктураНастроек.НеПроверятьУникальностьШтрихКода) ;	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Попытка
		установитьМонопольныйРежим(Ложь);
	Исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всю номенклатуру без остатков и продаж за последний месяц в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Номенклатура.Архив ;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -1);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, , Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажЗаПериод(Номенклатура, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				НомОбъект.ОбменДанными.Загрузка = Истина;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций:") + " " + сч;
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГод(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Клиентов без долга и продаж за последний год в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Клиентов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка
	|ИЗ Справочник.Клиенты КАК Клиенты
	|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
	|	И Клиенты.Предопределенный = ЛОЖЬ
	|	И Клиенты.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Клиенты.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -12);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Клиент = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Клиент, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажКлиентаЗаПериод(Клиент, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Клиент.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Клиентов:") + сч;
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехПоставщиковБезЗадолженностиИПоступленийЗаПоследниеПолГода(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Поставщиков без задолженности и поступлений за последние полгода в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Поставщиков.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехПоставщиков();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехПоставщиков()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Поставщики.Ссылка
	|ИЗ
	|	Справочник.Поставщики КАК Поставщики
	|ГДЕ
	|	Поставщики.ЭтоГруппа = ЛОЖЬ
	|	И Поставщики.Предопределенный = ЛОЖЬ
	|	И Поставщики.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Поставщики.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -6);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Поставщик = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Поставщик, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Поставщик, ДатаНачала, Дата);
			
			Если КоличествоЗаПериод = 0 Тогда
				НомОбъект = Поставщик.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Поставщиков:") + сч;
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры //ПеренестиВПапкуАРХИВВсехПоставщиков

&НаКлиенте
Процедура ДемонстрироватьИнформационнуюКолонкуОстатокТовараСУчетомДокументаВНепроведенныхДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулуПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеквизитАртикулНоменклатурыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура НеСворачиватьТоварыПоКоличествуВоВсехДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуСайтаПрограммы(Команда)
	ЗапуститьПриложение("https://sites.google.com/site/elementarytrade/platnaa-versia-programmy");
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапускеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеНовойВерсииКонфигурации(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет связь с сервером конфигурации.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверка наличия обновления"));
	Сообщение = Новый СообщениеПользователю; 	
	Сообщение.Текст = ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере();
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере()
	
	ВопросКСерверу = ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы(Истина);
	Если ВопросКСерверу = Неопределено Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет связи с сервером конфигурации.");
		
	ИначеЕсли НЕ ВопросКСерверу = "" Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " http://www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации:") + " " + ВопросКСерверу;
		
	Иначе
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваша версия конфигурации актуальная.");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВестиУчетСобственныхЮридическихЛицПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОтдельныхДоговоровСКонтрагентамиПриИзменении(Элемент)
	
	Если не НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами Тогда
		НаборКонстант.ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию = Ложь;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАРХИВВсеДоговораСКонтрагентамиБезЗадолженностиИЗаконченнымСроком(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все Договора без задолженности и с законченным сроком в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Договоров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсеДоговора();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсеДоговора()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.Ссылка
	|ИЗ
	|	Справочник.Договора КАК Договора
	|ГДЕ
	|	Договора.ЭтоГруппа = ЛОЖЬ
	|	И Договора.Предопределенный = ЛОЖЬ
	|	И Договора.ДатаОкончания < &Дата";
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Договора.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Договор = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгДоговора(Договор, Дата);
		
		Если Остаток = 0 Тогда
			
			НомОбъект = Договор.ПолучитьОбъект();
			НомОбъект.Родитель = Архив;
			Попытка 
				НомОбъект.Записать();
				сч = сч + 1;
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
				
			КонецПопытки;                          	
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Договоров:") + сч;
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры //ПеренестиВПапкуАРХИВВсехПоставщиков()

&НаКлиенте
Процедура БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчаниюПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Видимость = НаборКонстант.ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию;
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) Тогда
		НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСКоторойТребуетсяОбязательноеУказаниеДоговораПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыВДняхДляДоговоровПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИспользоватьОдинаковыеКодыИННПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяДата1ПриИзменении(Элемент)
	
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("РабочаяДата", РабочаяДата);
	
	если ЗначениеЗаполнено(РабочаяДата) Тогда
		Выполнить(" УстановитьКраткийЗаголовокПриложения(Формат(РабочаяДата, ""ДФ='dd.MM.yy ЧЧ:мм'"")); ");		
	Иначе
		Выполнить(" УстановитьКраткийЗаголовокПриложения(""""); ");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСкидкиНаДатаРожденияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмЗаметокИНапоминанийПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомандыИзмененийИЗаполненияДляТаблицыТоварыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВсехЗаметок(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы собираетесь Удалить Все заметки и напоминания?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалениеВсехЗаметокНаСервере();
		глПроверятьСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеВсехЗаметокНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			Заметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
			заметка.Удалить();
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка очистки регистра сведений:") + " " +  + " " + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзменении(Элемент)
	
	ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзмененииНаСервере(НаборКонстант.ВидЦенДляОтпускаТоваровСобственнымСотрудникам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзмененииНаСервере(Знач ВидЦенДляОтпускаТоваровСобственнымСотрудникам)
	
	СвязаннаяПапкаКлиентов = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
	
	Если ЗначениеЗаполнено(СвязаннаяПапкаКлиентов)
		и СвязаннаяПапкаКлиентов.ЭтоГруппа Тогда
		
		СвязаннаяПапкаКлиентов = СвязаннаяПапкаКлиентов.ПолучитьОбъект();
		СвязаннаяПапкаКлиентов.ВидЦен = ВидЦенДляОтпускаТоваровСобственнымСотрудникам;
		СвязаннаяПапкаКлиентов.Записать();
	КонецЕсли;
	
	СвязаннаяПапкаПоставщиков = Справочники.Поставщики.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
	
	Если ЗначениеЗаполнено(СвязаннаяПапкаПоставщиков)
		и СвязаннаяПапкаПоставщиков.ЭтоГруппа Тогда
		
		СвязаннаяПапкаПоставщиков = СвязаннаяПапкаПоставщиков.ПолучитьОбъект();
		СвязаннаяПапкаПоставщиков.ВидЦен = ВидЦенДляОтпускаТоваровСобственнымСотрудникам;
		СвязаннаяПапкаПоставщиков.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновленииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроверитьПодключениеОбработчикаОжидания();	
	ПроверитьВключитьВыключитьНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСерийНоменклатурыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ВестиУчетСерийНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодомМожетВыступатьСерияИлиКодПродуктаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПриходаПриИзменении(Элемент)
	
	Если не НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
		НаборКонстант.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = Ложь;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НаборКонстант.ВестиУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура БлокироватьКарточкуНоменклатурыПослеУказанияЕеВдокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВНесколькихХранилищахПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЛичныеНастройкиПользователей(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить все личные настройки пользователей?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьВсеЛичныеНастройкиПользователейНаСервере();
		глПроверятьСообщения = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВсеЛичныеНастройкиПользователейНаСервере()
	
	рснз = регистрысведений.НастройкиПользователей.СоздатьНаборЗаписей();
	рснз.Прочитать();
	рснз.Очистить();
	рснз.Записать(Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеХранилищеДенег1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовКлиентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовПоставщикамПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОплатПоОтдельнымЗаказамПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПравовойСтатусПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДублейНоменклатурыПоШтрихКоду(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли по штрих-коду займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере(Истина);
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьСообщенийПриИзменении(Элемент)
	НеВыводитьСообщенийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеВыводитьСообщенийПриИзмененииНаСервере()
	ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
КонецПроцедуры

&НаКлиенте
Процедура ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанныхПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрограммныйКод1С(Команда)
	
	ВыполнитьПрограммныйКод1СНаСервере();
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПрограммныйКод1СНаСервере()
	Попытка 
		выполнить ("" + ПрограммныйКод1С + ";");
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
		Сообщение.Поле = "ПрограммныйКод1С";
		Сообщение.Сообщить();
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуруПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименования(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите перенести всю номенклатуру?") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обратно вернуть ее автоматически будет невоможно!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере();	
		глПроверятьСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	сч = 0;
	
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(ВыборкаДетальныеЗаписи.наименование);
			Если не ГруппаПоПервомуСлову = Неопределено
				и не ГруппаПоПервомуСлову = ВыборкаДетальныеЗаписи.Родитель Тогда
				
				НомОбъект = ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
				НомОбъект.Родитель = ГруппаПоПервомуСлову;
				НомОбъект.записать();
				
				сч = сч + 1;
				
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	Если сч =0 Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры для такого переноса");
		Сообщение.Сообщить();
		
	иначе     		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций:") + " " + сч;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПроверятьУникальностьШтрихКодаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьНоменклатуруИзображениями1ПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПечатьЭтикетокПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения() ;	
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьДоговораИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьЗаметкиИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьКлиентовИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьПроизводителейИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьСотрудниковИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьДокументыИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьОрганизацииИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьПоставщиковИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПодсистемаИЭДемонстрироватьКомандыИмпортаИЭкспортаВСправочникахИДокументахПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживатьНаименованияНаДругихЯзыкахКромеРусскогоПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЭТО_БЕСПЛАТНАЯ_ВЕРСИЯНажатие(Элемент)
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОПлатнойВерсии;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыСправочниковИДокументовПриИзменении(Элемент)
	
	ИспользоватьДополнтельныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НашЮридическийАдресПриИзменении(Элемент)
	НашЮридическийАдресПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НашЮридическийАдресПриИзмененииНаСервере()
	
	ОсновнаяОрганизация = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект() ;
	ОсновнаяОрганизация.Адрес = НашЮридическийАдрес;
	ОсновнаяОрганизация.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НашеОКПОПриИзменении(Элемент)
	НашеОКПОПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НашеОКПОПриИзмененииНаСервере()
	
	ОсновнаяОрганизация = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект() ;
	ОсновнаяОрганизация.ОКПО = НашеОКПО;
	ОсновнаяОрганизация.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПоказыватьКомандуДобавленияНоменклатурыСКоличествомПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛичныеНастройкиПользователейПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходовПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	обновитьвидимостьэлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипШтрихКодовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйТекстВШапкеПечатнойФормыЗаказаКлиентаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСкладаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВПриходномДокументеНеЗаполнятьЗакупочнуюЦенуПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПродажПоСотрудникамПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникРеализацииПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатурыПриИзменении(Элемент)
	
	Если не НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры тогда
		НаборКонстант.СуммироватьПроцентСкидкиКлиентаИНоменклатуры = Ложь;
	КонецЕсли;
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли(Команда)
	
	Если ЗначениеЗаполнено(НаборКонстант.ДатаАктуальностиПоказателейВаловойПрибыли) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепроведение документов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.GrayGIf);
		ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере();
		НаборКонстант.ДатаАктуальностиПоказателейВаловойПрибыли = '00010101000000';
		
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепровел документы для восстановления показателей валовой прибыли"), 2);
		глПроверятьСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере()
	ОбщийМодульСервер.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура СообщатьОНеактуальностиПоказателейВаловойПрибылиИПредлагатьПерепроведениеДокументовПриВыходеИзПрограммыПоследнегоПользователяПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлятьСправочникНоменклатурыБезБлокаГруппПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковокПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПриСтартеСписокКлиентовУКоторыхСгодняЗавтраПослезавтраДеньРожденияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМеханизмПодбораНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлятьСерииНоменклатурыВДокументахОтдельнымОкномПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСредствПредприятияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НеРегистрироватьЦеныЗаСчетДокументовПоступленияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСообщатьОПополненииТовараИлиДенегПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПользовательПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаАдресСервераPOP3ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПортPOP3ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаАдресСервераSMTPПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПортSMTPПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПарольПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПарольSMTPПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаИмяОтправителяПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПодписьПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаКопироватьВТекстПисьмаСодержаниеДокументаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтправитьПисьмо(Команда)
	
	СообщитьОСменеФункциональнойОпции();
	ТекстСопровождения = "";
	получатель = "";
	ВвестиСтроку(получатель, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите электронный адрес получателя:"), 100, Ложь);
	ВвестиСтроку(ТекстСопровождения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите текст сопровождающий сообщение:"), 1020, Истина);
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправил письмо для проверки настроек."), 2);	
	ОправитьПоEMAILКонтрагентуНаСервере(ТекстСопровождения, получатель);
	
КонецПроцедуры

&НаСервере
Процедура ОправитьПоEMAILКонтрагентуНаСервере(Знач ТекстСопровождения, Знач получатель)	
	ОбщийМодульСервисСервер.ПисьмоКонтрагенту(, , ТекстСопровождения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо для проверки настроек почты в базе данных конфигурации Элементарная Торговля"), ?(НЕ ЗначениеЗаполнено(получатель), НаборКонстант.ЭлектроннаяПочтаОтправитель, получатель));
КонецПроцедуры

Процедура обновитьвидимостьэлементов()	
	
	элементы.ВидЦенДляРегистрацииФактическойЦеныПриобретения.Видимость = НаборКонстант.РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов;	
	
	ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = ПлатнаяВерсия И НаборКонстант.ИспользоватьСложныйМеханизмЦен И НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
	Элементы.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп.Видимость  = ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп;
	Элементы.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп1.Видимость = ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп;
	
КонецПроцедуры //обновитьвидимостьэлементов

&НаКлиенте
Процедура ВидЦенДляРегистрацииФактическойЦеныПриобретенияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СообщатьОНеактуальностиПоказателейВаловойПрибылиИПредлагатьПерепроведениеДокументовПриВыходеИзПрограммыПоследнегоПользователя1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПредлагатьВосстанавливатьПоказателиВаловойПрибылиСразуПриПроведенииПриходногоДокументаЗаднимЧисломПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПланированиеВДокументеВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДокументыВыполненияРаботПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьПеремещениеТовараЧерезСкладТоварВПутиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраиныПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СкладДляОбъектовКлиентаПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьРегламентированныйДокументРасходнойНакладнойПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОказанияУслугЗаВремяПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТекущиеИтоги(Команда)
	
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет итогов регистров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ПересчитатьТекущиеИтогиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТекущиеИтогиНаСервере()
	
	Для каждого Рег из Метаданные.РегистрыНакопления Цикл
		
		Если Рег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			РегистрыНакопления[Рег.Имя].ПересчитатьТекущиеИтоги();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСертификатовНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДляДокументовДемонстрироватьСамыеСвежиеСертификатыНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДляДокументовДемонстрироватьСамыеСвежиеСертификатыНоменклатуры1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяСуммаОказанияУслугПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура МинимальныйОбъемОказанияУслугПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОбъектовКлиентовПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетРазмеровИВесаТоваровПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнтельныеРеквизитыНоменклатурныхГруппПриИзменении(Элемент)
	
	ИспользоватьДополнтельныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьДополнтельныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере()
	
	Если НаборКонстант.ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		Если НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов Тогда
			
			НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов = Истина;	
		КонецЕсли;
		Если НЕ НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп Тогда
			
			НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = Истина;	
		КонецЕсли;
		
	ИначеЕсли НЕ НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		ИЛИ НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов Тогда
		
		НаборКонстант.ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерамиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомандуПечатиПочтовогоБланкаДляКонтрагентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкТекстОценкаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкТекстОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкИндексОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкАдресОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкА5ПовернутыйПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГруппПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЕстьПринтерПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.СтраницыНастроекПечати.Видимость = НаборКонстант.ЕстьПринтер;
	
КонецПроцедуры

&НаКлиенте
Процедура СменаОсновнойВалютыУчета(Команда)
	ОткрытьФорму("Обработка.СменаУсловийУчета.Форма.ФормаСменыОсновнойВалютыУчета");
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПравовойСтатусПоставщикаПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыДляИдентификацииКонтрагентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНоменклатурыМожетБытьДробнымПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.ЧислоЗнаковПослеЗапятойДляКоличества.Видимость = НаборКонстант.КоличествоНоменклатурыМожетБытьДробным;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЕдиницыИзмеренияНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрикоды(Команда)
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры)
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить обновление всех штрих-кодов?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда				
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление штрих-кодов номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Записать();
		ОбновитьШтрихКодыНаСервере();	
		
		глПроверятьСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодыНаСервере()
	
	Счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
			НоменклатураОбъект.Записать();
			Счетчик = Счетчик + 1;
		КонецЦикла;                                                                                      	
	КонецЕсли;
	
	Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего обновлено:") + " " + СокрЛП(Счетчик));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистр(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все основные штрихкоды номенклатуры в регистр?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копирование штрихкодов.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере();
		глПроверятьСообщения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере()
	
	ТипШтрихКодов = ?(ЗначениеЗаполнено(НаборКонстант.ТипШтрихКодов), НаборКонстант.ТипШтрихКодов, ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОсновнойШтрихКод = ВыборкаДетальныеЗаписи.ОсновнойШтрихКод;
			Если не ОсновнойШтрихКод = "" Тогда
				
				ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
				ШК.Активность = Истина;
				ШК.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
				//ШК.СерияНоменклатуры = 
				ШК.ТипШтрихКода = ТипШтрихКодов;
				ШК.ШтрихКод = ОсновнойШтрихКод;
				
				Попытка //Записи в регистр сведений 
					ШК.Записать(Истина);
					
				Исключение //Записи в регистр сведений 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений:") + " " + ШК + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки; //Записи в регистр сведений
				
			КонецЕсли;
		КонецЦикла;                        	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиПересчетВсехЗависимыхЦен(Команда)
	
	Дата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы произвести пересчет всех зависимых цен?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
		и ВвестиДату(Дата, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите дату переустановки цен"), ЧастиДаты.ДатаВремя) Тогда
		
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет зависимых цен.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Дата);
		глПроверятьСообщения = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Знач Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.ВидЦен
	|ИЗ РегистрСведений.Цены.СрезПоследних(&Дата, ) КАК ЦеныСрезПоследних
	|ГДЕ ЦеныСрезПоследних.ВидЦен.Зависимая = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТовара = Новый Структура("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВыборкаДетальныеЗаписи.ВидЦен, СтрокаТовара, , , Дата, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы пометить на удаление всю неиспользованную номенклатуру?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Чистка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	сч = 0;
	Если НЕ РезультатЗапроса.Пустой() тогда
		ПустаяНоменклатурнаяГруппа = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			Движения = ОбщийМодульСервер.ПолучитьДвиженияТовара(Номенклатура);
			
			Если Движения = 0 Тогда
				
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.НоменклатурнаяГруппа = ПустаяНоменклатурнаяГруппа;
				НомОбъект.пометкаудаления = Истина;
				
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено номенклатуры:") + " " + Сокрлп(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиНаУдаление(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы снять все отметки на удаление с номенклатуры?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Восстановление Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СнятьВсеОтметкиНаУдалениеНаСервере();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиНаУдалениеНаСервере()
	
	ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.ЭтоГруппа,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
				И не ВыборкаДетальныеЗаписи.ЭтоГруппа
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.родитель)
				и НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа) Тогда
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование);
			КонецЕсли;
			
			ОбъектНоменклатура.ПометкаУдаления = Ложь;
			Попытка 
				
				ОбъектНоменклатура.Записать();
			Исключение 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры:") + " " + ОбъектНоменклатура + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки; //Записи ЗначениеЗаполнено()
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСОдноименнойНоменклатурнойГруппой(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы связать номенклатуру с одноименной номенклатурной группой?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СвязатьСОдноименнойНоменклатурнойГруппойНаСервере();
		глПроверятьСообщения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвязатьСОдноименнойНоменклатурнойГруппойНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование, Истина);
			
			если ЗначениеЗаполнено(НоменклатурнаяГруппа)
				и не НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа Тогда 
				
				ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;	
				ОбъектНоменклатура.ПометкаУдаления = Ложь;
				Попытка 
					
					ОбъектНоменклатура.Записать();
				Исключение 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры:") + " " + ОбъектНоменклатура + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки; //Записи ЗначениеЗаполнено()
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьТекстДубльИзНаименований(Команда)
	УбратьТекстДубльИзНаименованийНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УбратьТекстДубльИзНаименованийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса.Пустой() тогда
		Дубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
		ДубльБ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДУБЛЬ");
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НаименованиеВРег = ВРег(ВыборкаДетальныеЗаписи.Наименование);
			если Не Найти(НаименованиеВРег, ДубльБ) = 0 Тогда
				НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НоменклатураОбъект.Наименование = СокрЛП(СтрЗаменить(ВыборкаДетальныеЗаписи.Наименование, Дубль, ""));
				НоменклатураОбъект.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОсновнойЕдиницыИзмеренияПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура Штука(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штука"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Литр(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("л.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Литр"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Услуга(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Услуга"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Метр(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("м.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Метр"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Упаковка(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уп.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Упаковка"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомплектациюПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокументаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеШтрихКодыВДополнительные(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос штрих-кодов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	СкопироватьВсеШтрихКодыВДополнительныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеШтрихКодыВДополнительныеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДШК = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьМенеджерЗаписи();
			ДШК.Активность 			= Истина;
			ДШК.ЕдиницаИзмерения 	= ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			ДШК.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
			ДШК.СерияНоменклатуры	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
			ДШК.ТипШтрихКода		= ВыборкаДетальныеЗаписи.ТипШтрихКода;
			ДШК.ШтрихКод			= ВыборкаДетальныеЗаписи.ШтрихКод;
			
			Попытка //Записи в регистр сведений 
				ДШК.Записать(Истина);
				
			Исключение //Записи в регистр сведений 
			КонецПопытки; //Записи в регистр сведений
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеШтрихКоды(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ВЫ УВЕРЕНЫ, что готовы удалить все штрих-коды?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все штрих-коды будут удалены?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ОчиститьВсеШтрихКодыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеШтрихКодыНаСервере()
	
	РСНЗ = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
	РСНЗ.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШтрихКодЦена(Команда)
	Адрес = "";
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для выгрузки:");
	ДиалогВыбФайла.ПолноеИмяФайла			=	Адрес; //АДРЕС
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		=	Ложь;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ОсновнойВидЦен");
		Если ВвестиЗначение(ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите вид цен"), тип("СправочникСсылка.ВидыЦен")) ТОгда
			
			Адрес = ДиалогВыбФайла.ПолноеИмяФайла;
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгружается документ"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
			ВыгрузитьШтрихКодЦенаСервер(Адрес, ВидЦен);	
		КонецЕсли;
	КонецЕсли; //когда файл Адрес выбран
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьШтрихКодЦенаСервер(Знач Адрес, Знач ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеШтрихКоды.ШтрихКод,
	|	ДополнительныеШтрихКоды.Номенклатура,
	|	ДополнительныеШтрихКоды.СерияНоменклатуры,
	|	ДополнительныеШтрихКоды.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура";
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда	
		
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстДок.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ШтрихКод);
			Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(ВыборкаДетальныеЗаписи.Номенклатура, ВидЦен, Дата, Ложь, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			ТекстДок.ДобавитьСтроку(Формат(Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0"));
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстДок.Записать(Адрес);
	ТекстДок = Неопределено;
	
КонецПроцедуры //ВыгрузитьШтрихКодКОличество(Адрес)

&НаКлиенте
Процедура ИспользоватьОтдельныеПоляАдресаИТелефонаВЗаказахКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСуммуРасходногоДокументаТакжеВВалютеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СкладПроизводстваПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОбводитьРамкамиТекстовыеПоляВФормахПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Если НЕ НаборКонстант.ОбводитьРамкамиТекстовыеПоляВФормах
		И НаборКонстант.РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда
		
		НаборКонстант.РамкиТекстовыхПолейВФормахРазличногоЦвета = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСистемуУправленияДоступомПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.ГруппаУправлениеДоступом.Видимость = НаборКонстант.ИспользоватьСистемуУправленияДоступом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтказеВДоступеВыводитьСообщениеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЗнаковПослеЗапятойДляКоличестваПриИзменении(Элемент)
	
	Если НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества < 0 Тогда
		НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества = 0;
	ИначеЕсли НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества > 6 Тогда
		НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества = 6;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмАналоговДляНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РамкиТекстовыхПолейВФормахРазличногоЦветаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияИСжатиеСправочника(Команда)
	
	Если СписокСправочников.Количество() = 0 Тогда
		ПолучитьСписокСправочников();
	КонецЕсли;
	
	ИмяСправочника = СписокСправочников.ВыбратьЭлемент(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите справочник для перенумерации"));
	
	Если НЕ ИмяСправочника = Неопределено Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенумерация справочника..") + ИмяСправочника.Значение, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПеренумерацияИСжатиеСправочникаНаСервере(ИмяСправочника.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумерацияИСжатиеСправочникаНаСервере(Знач ИмяСправочника)
	
	Мася = новый массив(1);
	ЗапКоличествоИмяСправочника = Новый Запрос;
	ЗапКоличествоИмяСправочника.Текст = "ВЫБРАТЬ " + ИмяСправочника + ".Ссылка
	|ИЗ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
	|УПОРЯДОЧИТЬ ПО " + ИмяСправочника + ".ПометкаУдаления,
	|	" + ИмяСправочника + ".Код";
	
	кво = 0;
	
	ВзКоличествоИмяСправочника = ЗапКоличествоИмяСправочника.Выполнить();
	Если Не ВзКоличествоИмяСправочника.Пустой() Тогда
		РезКоличествоИмяСправочника = ВзКоличествоИмяСправочника.Выбрать();
		Пока РезКоличествоИмяСправочника.Следующий() Цикл
			Мася.Добавить(РезКоличествоИмяСправочника.Ссылка);
			кво = кво + 1;
		КонецЦикла;	
		
		длинакода =	метаданные.Справочники[ИмяСправочника].ДлинаКода;
		нулей = "";
		сч = 1;
		пока сч < длинакода цикл
			нулей = нулей + "0";
			сч = сч + 1;
		КонецЦикла;
		
		нкод = нулей + "1";
		страда = стрдлина(нулей)+1;
		НПК1 = новый(тип("СправочникМенеджер."+ ИмяСправочника));
		
		для М = 1 по кво цикл
			
			ММ = Мася[М];
			если не ММ.предопределенный тогда
				найден = ложь;
				пока истина цикл
					нпк = нпк1.НайтиПоКоду(нкод);
					если нпк.Пустая() тогда
						найден = истина;
						прервать;
						
					иначе
						эточисло = число(нкод);
						эточисло = эточисло + 1;
						нкод = прав(нулей + стрзаменить(сокрлп(эточисло), символы.НПП, ""), страда);
					конецесли;
				КонецЦикла;
				
				ммм = мм.получитьобъект();
				ммм.код = нкод;
				попытка
					Попытка ммм.ОбменДанными.Загрузка=истина;
					Исключение
					КонецПопытки;
					ммм.записать();
				исключение Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать") + " " + ммм + " " + описаниеошибки());
					ПРЕРВАТЬ;
				конецпопытки;
				
				эточисло = число(нкод);
				эточисло = эточисло + 1;
				нкод = прав(нулей + стрзаменить(сокрлп(эточисло), символы.НПП, ""), страда);
			конецесли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСправочников()
	
	Для Каждого ИмяСправочника ИЗ Метаданные.Справочники Цикл
		СписокСправочников.Добавить(ИмяСправочника.Имя);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмыПечатиФормыТОРГ12ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкойПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПодразделенийПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализацииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСуммуРасходногоДокументаТакжеВВалюте1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкнаНастроек(Команда)
	
	ВидГоризонтальный = НЕ ВидГоризонтальный;
	СменитьВидОкнаНастроекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОкнаНастроекНаСервере()
	
	Если ВидГоризонтальный Тогда
		Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанныхПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьЧекПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.СтрогоеИмяНефискальногоПринтераЧеков.Видимость = НаборКонстант.ПечататьЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрогоеИмяНефискальногоПринтераЧековПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляПоступленияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляРасходаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляПеремещенияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляУстановкиЦенПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляДвиженияДенегПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляИнвентаризацииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляОказанияУслугЗаВремяПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляКомплектацийПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИнформациюОДоставкеВДокументахРасходаПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьИнформациюОДоставкеВДокументахПоступленияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПлановДоходоВИРасходовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмОтсрочкиПлатежаПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейОтсрочкиКлиентамПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСпрашиватьПодтверждениеПриВыходеИзПрограммыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнструментРабочееМестоОператораКассыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ГруппаНастроекОператораКассы.Видимость = НаборКонстант.ИспользоватьИнструментРабочееМестоОператораКассы;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенДляРеализацииНаРабочемМестеОператораКассыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегДляРабочегоМестаОператораКассыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговлиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерыОтчитываютсяПоОтдельнымДокументамПередачиНаКоммиссиюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваровПоУмолчаниюВДняхПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионераПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРазукомплектациюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры
