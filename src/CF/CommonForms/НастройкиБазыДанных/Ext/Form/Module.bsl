// sza160219-0215 
// sza160209-0143
// sza160108-0406 
// sza151223-1534 
// sza151107-0441 
// sza151025-0325 
// sza150912-0205 
// sza150727-1732 
// sza150714-0331 
// sza150619-0054 
// sza150609-0154 
// sza150523-0053 
// sza150514-0024 
// sza150324-0306 языки
// sza150306-1313 
// sza150211-1627
// sza150113-1730
// sza150112-1950 имя принтера
// sza150108-0341
// sza141228-1419
// sza141223-2050 
// sza141214-0211 
// sza141126-0254 
// sza141120-1535 
// sza141118-1803 
// sza141116-1944 
// sza141112-0208 
// sza141030-2012 
// sza141016-2351  
// sza141015-1354 ключи учета
// sza141011-2021 
// sza141009-0053 
// sza140922-2200
// sza140917-1430
// sza140903-1215 : 
// sza140831-0549
// sza140827-0032
// sza140717-0054  
// sza140710-1114  локация
// sza140703-1506  видимость
// sza140627-1654  
// sza140619-1708  
// sza130909-0305 :
//

&НаКлиенте
Процедура БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах), 2);
КонецПроцедуры

&НаКлиенте
Процедура БлокироватьКарточкуНоменклатурыПослеУказанияЕеВДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура БлокироватьПроведенныеДокументыПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.БлокироватьПроведенныеДокументы), 2);
	
	Если НЕ НаборКонстант.БлокироватьПроведенныеДокументы 
		И НаборКонстант.ИспользоватьСторнированиеДокументов Тогда
		
		НаборКонстант.ИспользоватьСторнированиеДокументов = ЛОЖЬ;
		СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыНакопительнымиКартамиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВаучерыНакопительнымиКартами), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыПодарочнымиКартамиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВаучерыПодарочнымиКартами), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВаучерыСкидочнымиКартамиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВаучерыСкидочнымиКартами), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиГлубокийУчетДляФизическихЛицПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляДвиженияДенегПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляИнвентаризацииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляКомплектацийПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляОказанияУслугЗаВремяПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляПеремещенияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляПоступленияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляРасходаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиДополнительнуюИнформациюДляУстановкиЦенПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиЗаписьВЖурналВсехОбычныхДействийПользователейПриИзменении(Элемент)
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ВестиЗаписьВЖурналВсехОбычныхДействий", НаборКонстант.ВестиЗаписьВЖурналВсехОбычныхДействийПользователей);
КонецПроцедуры

&НаКлиенте
Процедура ВестиПриобретениеИРеализациюПоСериямНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВестиПриобретениеИРеализациюПоСериямНоменклатуры), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатурыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	Если НЕ ОбщийМодульСервисСервер.ДатаПервогоДокумента(ИСТИНА) = '19800225044500' Тогда
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для расчета валовой прибыли необходимо перепровести документы.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Воспользуйтесь соответствующей обработкой."));	
	КонецЕсли;
	
	ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатурыПриИзмененииНаСервере()
	Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(ОбщийМодульСервисСервер.ДатаПервогоДокумента(ИСТИНА));
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВестиУчетВаловойПрибыли Тогда
		НаборКонстант.СообщатьОНеактуальностиВаловойИПредлагатьПерепроведениеПриВыходеПоследнего = ЛОЖЬ;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры.Видимость = НаборКонстант.ВестиУчетСерийНоменклатуры И НаборКонстант.ВестиУчетВаловойПрибыли;
	Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры1.Видимость = НаборКонстант.ВестиУчетСерийНоменклатуры И НаборКонстант.ВестиУчетВаловойПрибыли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВалютПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВестиУчетВалют Тогда
		НаборКонстант.ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы = ЛОЖЬ;
		НаборКонстант.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ЛОЖЬ;
	КонецЕсли;
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ВестиУчетВалютВСеансе", НаборКонстант.ВестиУчетВалют);
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = НаборКонстант.ВестиУчетДвиженияДенег И НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НаборКонстант.ВестиУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВидовДеятельностиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВнутреннихЗаказовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДвиженияДенегПриИзменении(Элемент)
	
	ВестиУчетДвиженияДенегПриИзмененииП();		
	Элементы.ПриВеденииУчетаВРазныхВалютахРекомендуетсяВключитьУчетВРазныхХранилищах.Видимость = НаборКонстант.ВестиУчетДвиженияДенег;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДвиженияДенегПриИзмененииП() 
	
	Если НЕ НаборКонстант.ВестиУчетДвиженияДенег Тогда
		НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода 	= ЛОЖЬ;
		НаборКонстант.ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы 				= ЛОЖЬ;
		НаборКонстант.ВестиУчетВалют 						= ЛОЖЬ;
		НаборКонстант.ВестиУчетДенегВНесколькихХранилищах 	= ЛОЖЬ;
		НаборКонстант.ВестиУчетПлановДоходовИРасходов		= ЛОЖЬ;
		Элементы.УчетПлановДоходовИРасходов.Видимость		= ЛОЖЬ;
		
	ИначеЕсли ПолнаяВерсия Тогда
		Элементы.УчетПлановДоходовИРасходов.Видимость		= ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВНесколькихХранилищахПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовКлиентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовПоставщикамПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетИнформацииОДоставкеВДокументахПоступленияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетИнформацииОДоставкеВДокументахРасходаПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ОтветственныйЗаДоставкуПоУмолчанию.Видимость = НаборКонстант.ВестиУчетЗарплатыСотрудников И НаборКонстант.ВестиУчетИнформацииОДоставкеВДокументахРасхода;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЛокацииКонтрагентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп Тогда
		НаборКонстант.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры = ЛОЖЬ;
		Если НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп Тогда		
			НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = ЛОЖЬ;	
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость = НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ФормулаИКнопкаПримера.Видимость = НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОбъектовКлиентовПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость  = НаборКонстант.ИспользоватьДокументыВыполненияРабот И НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОказанияУслугЗаВремяПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерамиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОплатПоОтдельнымЗаказамПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОтдельныхДоговоровСКонтрагентамиПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами Тогда
		НаборКонстант.ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию = ЛОЖЬ;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПартийПоступленияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПлановДоходовИРасходовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПлановыхПоказателейПродажПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПодразделенийПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоКлиентамПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазмерСкидкиНаДатаРождения.Видимость 							= НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	Элементы.ДокументыВыполненияРаботПозволяютЗарегистрироватьВсеОперацииСопутствующиеВыполнениюРаботДляКлиентаВОдномМесте.Видимость = НаборКонстант.ВестиУчетПоКлиентам;	
	
	Если НЕ НаборКонстант.ВестиУчетПоКлиентам
		И НЕ НаборКонстант.ВестиУчетПоПоставщикам Тогда
		
		НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоНаправлениямДеятельностиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоПоставщикамПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	Элементы.ВестиУчетЦенПоставщиков.Видимость = НаборКонстант.ВестиУчетПоПоставщикам И НаборКонстант.ИспользоватьСложныйМеханизмЦен;
	
	Если НЕ НаборКонстант.ВестиУчетПоКлиентам
		И НЕ НаборКонстант.ВестиУчетПоПоставщикам Тогда
		
		НаборКонстант.ВестиУчетОтдельныхДоговоровСКонтрагентами = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСкладамПриИзменении(Элемент)
	
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПродажПоСотрудникамПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ГруппаУсловийРеализацииСотрудника.Видимость = НаборКонстант.ВестиУчетПродажПоСотрудникам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПроизводителейНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетРазмеровИВесаТоваровПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетРегионовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСерийНоменклатурыПриИзменении(Элемент)
	
	Если НаборКонстант.ВестиУчетСерийНоменклатуры Тогда
		НаборКонстант.ВестиУчетСерийНоменклатурыТолькоПриПоступлении = ЛОЖЬ;
	Иначе
		НаборКонстант.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры = ЛОЖЬ;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ВестиУчетСерийНоменклатуры;
	Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры.Видимость = НаборКонстант.ВестиУчетСерийНоменклатуры И НаборКонстант.ВестиУчетВаловойПрибыли;
	Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры1.Видимость = НаборКонстант.ВестиУчетСерийНоменклатуры И НаборКонстант.ВестиУчетВаловойПрибыли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСерийНоменклатурыТолькоПриПоступленииПриИзменении(Элемент)
	
	Если НаборКонстант.ВестиУчетСерийНоменклатурыТолькоПриПоступлении Тогда
		НаборКонстант.ВестиУчетСерийНоменклатуры = ЛОЖЬ;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСертификатовНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСобственныхЮридическихЛицПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСобытийПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСредствПредприятияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговлиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЦенПоставщиковПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ВидЦенПоставщиков.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен И НаборКонстант.ВестиУчетЦенПоставщиков;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСобытийПоУмолчанию1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВидСобытийПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзменении(Элемент)
	
	ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзмененииНаСервере(НаборКонстант.ВидЦенДляОтпускаТоваровСобственнымСотрудникам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидЦенДляОтпускаТоваровСобственнымСотрудникаПриИзмененииНаСервере(Знач ВидЦенДляОтпускаТоваровСобственнымСотрудникам)
	
	СвязаннаяПапкаКлиентов = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
	
	Если ЗначениеЗаполнено(СвязаннаяПапкаКлиентов)
		И ОбщийМодульПовтор.ЭтоГруппа(СвязаннаяПапкаКлиентов) Тогда
		
		СвязаннаяПапкаКлиентов = СвязаннаяПапкаКлиентов.ПолучитьОбъект();
		СвязаннаяПапкаКлиентов.ВидЦен = ВидЦенДляОтпускаТоваровСобственнымСотрудникам;
		СвязаннаяПапкаКлиентов.Записать();
	КонецЕсли;
	
	СвязаннаяПапкаПоставщиков = Справочники.Поставщики.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
	
	Если ЗначениеЗаполнено(СвязаннаяПапкаПоставщиков)
		И ОбщийМодульПовтор.ЭтоГруппа(СвязаннаяПапкаПоставщиков) Тогда
		
		СвязаннаяПапкаПоставщиков = СвязаннаяПапкаПоставщиков.ПолучитьОбъект();
		СвязаннаяПапкаПоставщиков.ВидЦен = ВидЦенДляОтпускаТоваровСобственнымСотрудникам;
		СвязаннаяПапкаПоставщиков.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенДляРеализацииНаРабочемМестеОператораКассыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенДляРегистрацииФактическойЦеныПриобретенияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенКлиентуПользователюДляОтчетаПоОстаткамПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВидЦенКлиентуПользователюДляОтчетаПоОстаткам), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПоставщиковПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВидЦенПоставщиков), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенРасходованияПоУмолчаниюПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ВидЦенРасходованияПоУмолчанию) Тогда
		НаборКонстант.РеализаторНеМожетМенятьЦены = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенРеализатораПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВидЦенРеализатораПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатурыПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры Тогда
		НаборКонстант.СуммироватьПроцентСкидкиКлиентаИНоменклатуры = ЛОЖЬ;
	КонецЕсли;
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатурыПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры), 2);
	
	Если НаборКонстант.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры
		И НЕ ЗначениеЗаполнено(НаборКонстант.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка) Тогда
		
		НаборКонстант.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ПредопределенноеЗначение("Перечисление.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить");
		ПоведениеПрограммыИзмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВозможностьУказыватьСкидкуДляВсегоРасходногоДокументаПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользоватьНаборыТоваровПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродажеПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.МеханизмЛьготнойЦены.Видимость = НаборКонстант.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьМеханизмПодбораНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПерсонифицированныйУчетВаловойПрибылиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВключитьПерсонифицированныйУчетВаловойПрибыли), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийВид(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкиВнешнегоВида");
КонецПроцедуры

&НаКлиенте
Процедура ВПриходномДокументеНеЗаполнятьЗакупочнуюЦенуПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВторойВидЦенДляЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВторойВидЦенДляЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДополнительнуюСтрокуЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВывестиДополнительнуюСтрокуЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьАртикулОтдельнойКолонкойПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьАртикулОтдельнойКолонкой), 2);	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВПечатиПеремещенияАртикулыИСуммыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьВПечатиПеремещенияАртикулыИСуммы), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятуюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкойПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВРасходномДокументеЧислоМестПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьВРасходномДокументеЧислоМест), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДляНаборовНоменклатурыПоказыватьМаксимальныйОстатокПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьДляНаборовНоменклатурыПоказыватьМаксимальныйОстаток), 2);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьКнопкуБыстройБлокировкиВоВсеФормыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьСуммуПоВторомуВидуЦенВДокументеПоступленияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВыводитьСуммуПоВторомуВидуЦенВДокументеПоступления), 2);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатурыДляУчетаВаучеровПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ГруппаНоменклатурыДляУчетаВаучеров), 2);
КонецПроцедуры

&НаКлиенте
Процедура ДатаСКоторойТребуетсяОбязательноеУказаниеДоговораПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстаткамиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстатками), 2);
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьОтчетРуководителюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДляДокументовДемонстрироватьСамыеСвежиеСертификатыНоменклатуры1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДляДокументовДемонстрироватьСамыеСвежиеСертификатыНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанныхПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФункцииПриемаИВыдачиОбъектаРаботДокументуВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчаниюПриИзменении(Элемент)	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяСтрокаЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ДополнительнаяСтрокаЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЕстьПринтерПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.СтраницыНастроекПечати.Видимость = НаборКонстант.ЕстьПринтер;
	
	Если НаборКонстант.ЕстьПринтер Тогда
		ОбновитьИменаПринтеров();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГородаСтраныПоКлассификатору(Команда)
	
	СписокДоступныхСтран = ПолучитьСписокДоступныхСтранДляЗагрузкиГородовИзКлассификатора();
	ВыбраннаяСтрана = Неопределено;
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ЗаполнитьГородаСтраныПоКлассификаторуЗавершение", ЭтаФорма), СписокДоступныхСтран);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГородаСтраныПоКлассификаторуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтрана = ВыбранныйЭлемент;
	Если НЕ ВыбраннаяСтрана = Неопределено Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнение справочника Локаций.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ЗаполнитьГородаСтраныПоКлассификаторуНаСервере(ВыбраннаяСтрана.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГородаСтраныПоКлассификаторуНаСервере(Знач ВыбраннаяСтрана)
	ОбщийМодульТекстСервер.ЗагрузитьГородаСтраныИзМакета(ВыбраннаяСтрана);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСправочникРегионовПоКлассификаторуСтран(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнение справочника Регионов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЗаполнитьСправочникРегионовПоКлассификаторуСтранНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСправочникРегионовПоКлассификаторуСтранНаСервере()	
	ОбщийМодульТекстСервер.ЗагрузитьСтраныИзМакета();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧтоНового(Знач ТолькоВПоследнейВерсии = ЛОЖЬ, ОпределенныйРезультат = Неопределено)
	
	МакетЧтоНового = ПолучитьОбщийМакет("ЧтоНового");
	
	МассивНеобходимыхОбластей = Новый ТаблицаЗначений;
	МассивНеобходимыхОбластей.Колонки.Добавить("ИмяОбласти");
	
	Для Каждого Область Из МакетЧтоНового.Области Цикл
		
		ИмяОбласти = СтрЗаменить(Область.Имя, "Ш", "");
		Если НЕ ПустаяСтрока(ИмяОбласти) Тогда
			
			Попытка
				НомерОбласти = Число(ИмяОбласти);
				Если НомерОбласти > ЧислоВерсияПриИнсталляции Тогда
					СтрокаТаблицы = МассивНеобходимыхОбластей.Добавить();
					СтрокаТаблицы.ИмяОбласти = Область.Имя;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МассивНеобходимыхОбластей.Количество() = 0 Тогда
		
		Шапка = МакетЧтоНового.ПолучитьОбласть("Ш");	
		Если ОпределенныйРезультат = Неопределено Тогда
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ЧтоНового.Вывести(Шапка);
		Иначе
			ОпределенныйРезультат.Вывести(Шапка);
		КонецЕсли;
		
		Если НЕ ПолнаяВерсия Тогда
			ШапкаНеполной = МакетЧтоНового.ПолучитьОбласть("ШП");
			Если ОпределенныйРезультат = Неопределено Тогда
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаНеполной);
				ЧтоНового.Вывести(ШапкаНеполной);
			Иначе
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаНеполной);
				ОпределенныйРезультат.Вывести(ШапкаНеполной);
			КонецЕсли;
		КонецЕсли;
		
		МассивНеобходимыхОбластей.Сортировать("ИмяОбласти УБЫВ");
		Для Каждого ОбластьМассива Из МассивНеобходимыхОбластей Цикл
			Шапка = МакетЧтоНового.ПолучитьОбласть(ОбластьМассива.ИмяОбласти);	
			Если ОпределенныйРезультат = Неопределено Тогда
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ЧтоНового.Вывести(Шапка);
			Иначе
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ОпределенныйРезультат.Вывести(Шапка);
			КонецЕсли;
			Если ТолькоВПоследнейВерсии Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОпределенныйРезультат = Неопределено Тогда
			Элементы.ЧтоНового.Видимость = ИСТИНА;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьВозможностьРегистрироватьДополнительныеРасходыПриПриходованииТоваровПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИзмененияВПрошломПериоде()
	
	Если НаборКонстант.ЗапретитьИзмененияВПрошломПериоде = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока") Тогда
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = ЛОЖЬ;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = ИСТИНА;
	ИначеЕсли НаборКонстант.ЗапретитьИзмененияВПрошломПериоде = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты") Тогда
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = ИСТИНА;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = ЛОЖЬ;
	Иначе		
		Элементы.ДатаЗапретаИзмененияДанных.Видимость = ЛОЖЬ;
		Элементы.СрокЗапретаДанныхВЧасах.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИзмененияВПрошломПериодеПриИзменении(Элемент)
	
	ЗапретитьИзмененияВПрошломПериоде();
	ЗапретитьИзмененияВПрошломПериодеП = НаборКонстант.ЗапретитьИзмененияВПрошломПериоде;
	ЗапретитьИзмененияВПрошломПериодеП = (ЗапретитьИзмененияВПрошломПериодеП = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты")) ИЛИ (ЗапретитьИзмененияВПрошломПериодеП = ПредопределенноеЗначение("Перечисление.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока"));
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ДействуетЗапретИзмененийПрошлого", ЗапретитьИзмененияВПрошломПериодеП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИспользоватьОдинаковыеКодыИННПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьНоменклатуруБезШтрихКодаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьОдинаковыеНомераТелефоновУКлиентовИПоставщиковПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЗапретитьОдинаковыеНомераТелефоновУКлиентовИПоставщиков), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьРазукомплектациюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьУстановкуКурсаЗаднимЧисломПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ВидЦенРеализатораПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗачислятьТоварПереданныйКомиссионерамВКачествеПроданногоПриОтчетеКомиссионераПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры
Процедура ИмяЛокаций()
	
	Если НаборКонстант.ИспользоватьРегионыДляУчетаСтранАЛокацииГородов Тогда
		Элементы.СправочникРегионыОткрытьСписок1.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Стран");
		Элементы.СправочникЛокацииОткрытьСписок.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Городов");
	Иначе
		Элементы.СправочникРегионыОткрытьСписок1.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Регионов");
		Элементы.СправочникЛокацииОткрытьСписок.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Локаций");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйТекстВШапкеПечатнойФормыЗаказаКлиентаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовараПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьWebcamПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьWebcam), 2);
	Элементы.УстановитьКомпонентуWebCam.Видимость = НаборКонстант.ИспользоватьWebcam;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВаучерыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВерсионированиеПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДокументыВыполненияРаботПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость  = НаборКонстант.ИспользоватьДокументыВыполненияРабот И НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанныхПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеКодыСерийПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьДополнительныеКодыСерий), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыСправочникаКлиентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыСправочниковИДокументовПриИзменении(Элемент)
	
	ИспользоватьДополнительныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыНоменклатурныхГруппПриИзменении(Элемент)
	
	ИспользоватьДополнительныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьДополнительныеРеквизитыНоменклатурныхГруппПриИзмененииНаСервере()
	
	Если НаборКонстант.ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		Если НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов Тогда
			
			НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов = ИСТИНА;	
		КонецЕсли;
		Если НЕ НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп Тогда
			
			НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ИСТИНА;	
		КонецЕсли;
		
	ИначеЕсли НЕ НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		ИЛИ НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыСправочниковИДокументов Тогда
		
		НаборКонстант.ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЕдиницыИзмеренияНоменклатурыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ГруппаОсновнойЕдиницы.Видимость = НаборКонстант.ИспользоватьЕдиницыИзмеренияНоменклатуры;
	Элементы.ГруппаОтменыЕдиницИзмерения.Видимость = НЕ НаборКонстант.ИспользоватьЕдиницыИзмеренияНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЖурналированиеСобытийПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("ИспользоватьЖурналированиеСобытий", НаборКонстант.ИспользоватьЖурналированиеСобытий);
	Элементы.ВРежимеСИспользованиемМеханизмаСторнирования.Видимость = НаборКонстант.ИспользоватьСторнированиеДокументов И Не НаборКонстант.ИспользоватьЖурналированиеСобытий;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнструментРабочееМестоОператораКассыПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьИнструментРабочееМестоОператораКассы Тогда
		НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = ИСТИНА;
		Если НаборКонстант.ВестиУчетВалют Тогда
			НаборКонстант.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ГруппаНастроекОператораКассы.Видимость = НаборКонстант.ИспользоватьИнструментРабочееМестоОператораКассы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКатегорииКонтрагентов1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьКатегорииКонтрагентов), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКатегорииКонтрагентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьКатегорииКонтрагентов), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСпискиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоличественныйУчетПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьКоличественныйУчет Тогда
		НаборКонстант.ВестиУчетПоСкладам = ЛОЖЬ;
		НаборКонстант.НеПоказыватьКомандуДобавленияНоменклатурыСКоличеством = ИСТИНА;
		НаборКонстант.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже = ЛОЖЬ;
		НаборКонстант.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ЛОЖЬ;
		НаборКонстант.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ПредопределенноеЗначение("Перечисление.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить");
		ПоведениеПрограммыИзмена();
	КонецЕсли;
	
	Элементы.МеханизмЛьготнойЦены.Видимость = НаборКонстант.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже;
	Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость = НаборКонстант.ВестиУчетПоСкладам И НЕ НаборКонстант.ВестиУчетОбъектовКлиентов;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменено также число опций") + ": 5!");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомандуПечатиПочтовогоБланкаДляКонтрагентовПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомандыИзмененийИЗаполненияДляТаблицыТоварыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомплектациюПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛичныеНастройкиПользователейПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмАналоговДляНоменклатурыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмЗаметокИНапоминанийПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмОтсрочкиПлатежаПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмПечатиПКОРФПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмПодписокНаСобытияПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраиныПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмыПечатиСчетаФактурыДляРФПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьМеханизмыПечатиСчетаФактурыДляРФ), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМеханизмыПечатиФормыТОРГ12ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтдельныеПоляАдресаИТелефонаВЗаказахКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПечатьЭтикетокПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ПриУказанииНаименованияПринтераШтрихКодовПечатьБудетИдтиСразуБезВыбораПринтера.Видимость = НаборКонстант.ИспользоватьПечатьЭтикеток;
	Элементы.ГруппаДополнительнойСтрокиЭтикетки.Видимость = НаборКонстант.ИспользоватьПечатьЭтикеток;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПодключаемоеОборудованиеПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПредставлениеТоваровКонтрагентамиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизвольныеПечатныеФормыПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегионыДляУчетаСтранАЛокацииГородовПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	ИмяЛокаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПриходаПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода Тогда
		НаборКонстант.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах = ЛОЖЬ;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = НаборКонстант.ВестиУчетДвиженияДенег И НаборКонстант.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода И НаборКонстант.ВестиУчетВалют;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРеквизитАртикулНоменклатурыПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
	Элементы.ГруппаФормированияАртикула.Видимость = НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСистемуВнутреннихСообщенийПользователейПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСистемуУправленияДоступомПриИзменении(Элемент)	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкидкиПериодаПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьСкидкиПериода), 2);
	Элементы.РегистрСведенийСкидкиПериодаОткрытьСписок.Видимость = НаборКонстант.ИспользоватьСкидкиПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкидкиПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьСкидки Тогда
		НаборКонстант.РазмерСкидкиНаДатаРождения = 0;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов = ЛОЖЬ;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры = ЛОЖЬ;
		НаборКонстант.СуммироватьПроцентСкидкиКлиентаИНоменклатуры = ЛОЖЬ;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.РазмерСкидкиНаДатаРождения.Видимость = НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость  = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов1.Видимость = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСложныйМеханизмЦенПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьСложныйМеханизмЦен
		И НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп Тогда
		
		НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ГруппаФормулыПреобразованияЦены.Видимость = НЕ НаборКонстант.ИспользоватьСложныйМеханизмЦен и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСторнированиеДокументовПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьСторнированиеДокументов Тогда
		НаборКонстант.БлокироватьПроведенныеДокументы = ИСТИНА;
		Элементы.БлокироватьПроведенныеДокументы.Доступность = ЛОЖЬ;
	Иначе
		Элементы.БлокироватьПроведенныеДокументы.Доступность = ИСТИНА;
	КонецЕсли;
	
	Элементы.ВРежимеСИспользованиемМеханизмаСторнирования.Видимость = НаборКонстант.ИспользоватьСторнированиеДокументов И Не НаборКонстант.ИспользоватьЖурналированиеСобытий;
	Элементы.НеСнимайтеЭтотФлагЗапрета.Видимость = НаборКонстант.ИспользоватьСторнированиеДокументов;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТекстовоеПолеПредметСделкиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьТекстовоеПолеПредметСделки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФИОКонтрагентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ИспользоватьФИОКонтрагентов), 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодомПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	
	Элементы.ГруппаПараметровФормул.Видимость = НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость 	= НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ОсновнаяФормулаПреобразованияЦен.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	Элементы.ОбновитьШтрихкоды.Видимость 				= НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЦеныИСуммыПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьЦеныИСуммы Тогда
		НаборКонстант.ВестиУчетВаловойПрибыли = ЛОЖЬ;
		НаборКонстант.СообщатьОНеактуальностиВаловойИПредлагатьПерепроведениеПриВыходеПоследнего = ЛОЖЬ;
		НаборКонстант.ИспользоватьСложныйМеханизмЦен = ЛОЖЬ;
		НаборКонстант.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = ЛОЖЬ;
		НаборКонстант.ИспользоватьСкидки = ЛОЖЬ;
		НаборКонстант.РазмерСкидкиНаДатаРождения = 0;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов = ЛОЖЬ;
		НаборКонстант.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры = ЛОЖЬ;
		НаборКонстант.СуммироватьПроцентСкидкиКлиентаИНоменклатуры = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.РазмерСкидкиНаДатаРождения.Видимость = НаборКонстант.ИспользоватьСкидки и НаборКонстант.ВестиУчетПоКлиентам;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость  = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов1.Видимость = НаборКонстант.ВестиУчетПоКлиентам и НаборКонстант.ИспользоватьСкидки;
	
	Элементы.ГруппаФормулыПреобразованияЦены.Видимость = НЕ НаборКонстант.ИспользоватьСложныйМеханизмЦен и НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменено также число опций") + ": 9!");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыДляИдентификацииКонтрагентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьШтрихКоды Тогда
		НаборКонстант.ЗапретитьНоменклатуруБезШтрихКода = ЛОЖЬ;
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	НаборКонстантИспользоватьШтрихКоды = НаборКонстант.ИспользоватьШтрихКоды;
	
	Элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = НаборКонстантИспользоватьШтрихКоды И НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьРеквизитАртикулНоменклатуры;
	Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость 						= НаборКонстантИспользоватьШтрихКоды И НаборКонстант.ВестиУчетСерийНоменклатуры;
	Элементы.ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре.Видимость 	= НаборКонстантИспользоватьШтрихКоды ;
	Элементы.УстанавливатьШтрихКодИзКарточкиНоменклатуры.Видимость 						= НаборКонстантИспользоватьШтрихКоды ;
	
КонецПроцедуры

&НаКлиенте
Процедура Килограмм(Команда)	
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("кг.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Килограмм"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючиУчетаНоменклатуры(Команда)
	ОткрытьФорму("Справочник.ДополнительныеРеквизиты.Форма.КлючиУчетаНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура КодПроизводителяЧетыреЧислаШтрихКодаПоEAN13ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.КодПроизводителяЧетыреЧислаШтрихКодаПоEAN13), 2);
КонецПроцедуры

&НаКлиенте
Процедура КодСтраныПервыеТриЧислаШтрихКодаПоEAN13ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.КодСтраныПервыеТриЧислаШтрихКодаПоEAN13), 2);
КонецПроцедуры

&НаКлиенте
Процедура КодыСерийУникальныИТакжеУказываютНаСериюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.КодыСерийУникальныИТакжеУказываютНаСерию), 2);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНоменклатурыМожетБытьДробнымПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.ЧислоЗнаковПослеЗапятойДляКоличества.Видимость = НаборКонстант.КоличествоНоменклатурыМожетБытьДробным;
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерыОтчитываютсяПоОтдельнымДокументамПередачиНаКомиссиюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентНакопленияНаВаучерПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.КоэффициентНакопленияНаВаучер), 2);
КонецПроцедуры

&НаКлиенте
Процедура Литр(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("л.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Литр"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабМакетаЧекаВПроцентахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НаборКонстант.МасштабМакетаЧекаВПроцентах = 100;
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.МасштабМакетаЧекаВПроцентах), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабМакетаЧекаВПроцентахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.МасштабМакетаЧекаВПроцентах), 2);
КонецПроцедуры

&НаКлиенте
Процедура Метр(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("м.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Метр"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнаяСуммаОказанияУслугПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура МинимальныйОбъемОказанияУслугПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГруппПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЕдиницыМестаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НаименованиеЕдиницыМеста), 2);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНашегоРегионПриИзменении(Элемент)
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	НаименованиеНашегоРегионПриИзмененииНаСервере(НаименованиеНашегоРегиона);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеНашегоРегионПриИзмененииНаСервере(Знач НаименованиеНашегоРегиона)
	
	НашРегион = Справочники.Регионы.НашРегион.ПолучитьОбъект();
	НашРегион.Наименование = НаименованиеНашегоРегиона;
	НашРегион.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОсновнойВалютыПриИзменении(Элемент)	
	НаименованиеОсновнойВалютыПриИзмененииНаСервере(НаименованиеОсновнойВалюты);	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеОсновнойВалютыПриИзмененииНаСервере(Знач НаименованиеОсновнойВалюты)
	
	ОсновнаяВалюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	ОсновнаяВалюта.Наименование = НаименованиеОсновнойВалюты;
	ОсновнаяВалюта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОсновнойЕдиницыИзмеренияПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПринтераШтрихКодов1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НашеОКПОПриИзменении(Элемент)
	НашеОКПОПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НашеОКПОПриИзмененииНаСервере()
	
	ОсновнаяОрганизация = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект();
	ОсновнаяОрганизация.ОКПО = НашеОКПО;
	ОсновнаяОрганизация.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НашЮридическийАдресПриИзменении(Элемент)
	НашЮридическийАдресПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НашЮридическийАдресПриИзмененииНаСервере()
	
	ОсновнаяОрганизация = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект();
	ОсновнаяОрганизация.Адрес = НашЮридическийАдрес;
	ОсновнаяОрганизация.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокумента1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьНаПечатьДанныеОСкидкеПриПечатиРасходногоДокументаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьПеремещениеТовараЧерезСкладТоварВПутиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновленииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеОтслеживатьВаучерыВКачествеНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НеОтслеживатьВаучерыВКачествеНоменклатуры), 2);
КонецПроцедуры

&НаКлиенте
Процедура НеПредупреждатьЕслиКлиентНеДоплатилИлиПереплатилПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НеПредупреждатьЕслиКлиентНеДоплатилИлиПереплатил), 2);
КонецПроцедуры

&НаКлиенте
Процедура НеПроверятьУникальностьШтрихКодаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеРегистрироватьЦеныЗаСчетДокументовПоступленияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСворачиватьТоварыПоКоличествуВоВсехДокументахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСворачиватьТоварыПоКоличествуПриПриходованииТовараПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСообщатьОПополненииТовараИлиДенегПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура НеСпрашиватьОПересчетеЦенПриСменеКурсаВалютПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НеСпрашиватьОПересчетеЦенПриСменеКурсаВалют), 2);
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьДолгиПоЗаработнойПлатеПриФормированииНовыхДокументовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НеУчитыватьДолгиПоЗаработнойПлатеПриФормированииНовыхДокументов), 2);
КонецПроцедуры

&НаКлиенте
Процедура НоминалВаучераПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.НоминалВаучераПоУмолчанию), 2);
КонецПроцедуры
Процедура ОбновитьВидимостьЭлементов()	
	
	Элементы.ВидЦенДляРегистрацииФактическойЦеныПриобретения.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен;//НаборКонстант.РегистрироватьВКачествеЗакупочнойСтрогоЦенуПоставщикаНезависимоОтНаличияДополнительныхРасходов;	
	
	ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп = ПолнаяВерсия И НаборКонстант.ИспользоватьСложныйМеханизмЦен И НаборКонстант.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп;
	Элементы.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп.Видимость  = ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп;
	Элементы.НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп1.Видимость = ДоступноНазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп;
	
КонецПроцедуры // ОбновитьВидимостьЭлементов

&НаКлиенте
Процедура ОбновитьИменаПринтеров()
	
	Элементы.СтрогоеИмяНефискальногоПринтераЧеков.СписокВыбора.Очистить();
	Элементы.НаименованиеПринтераШтрихКодов1.СписокВыбора.Очистить();
	Элементы.НаименованиеПринтераШтрихКодов.СписокВыбора.Очистить();
	
	ИмяПринтера = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принтер по-умолчанию");
	Элементы.СтрогоеИмяНефискальногоПринтераЧеков.СписокВыбора.Добавить("ПринтерПоУмолчанию", ИмяПринтера);
	Элементы.НаименованиеПринтераШтрихКодов1.СписокВыбора.Добавить("ПринтерПоУмолчанию", ИмяПринтера);
	Элементы.НаименованиеПринтераШтрихКодов.СписокВыбора.Добавить("ПринтерПоУмолчанию", ИмяПринтера);
	
	#Если Клиент Тогда 
		Попытка
			КОМОбъект =  Новый COMОбъект ("WScript.Network");
			Принтеры =  КОМОбъект.EnumPrinterConnections();
			ПараметрОписанияПринтера = 0;
			Пока ПараметрОписанияПринтера < Принтеры.Count()-1 Цикл
				ИмяПринтера = СокрЛП(Принтеры.Item(ПараметрОписанияПринтера+1));
				Элементы.СтрогоеИмяНефискальногоПринтераЧеков.СписокВыбора.Добавить(ИмяПринтера, ИмяПринтера);
				Элементы.НаименованиеПринтераШтрихКодов1.СписокВыбора.Добавить(ИмяПринтера, ИмяПринтера);
				Элементы.НаименованиеПринтераШтрихКодов.СписокВыбора.Добавить(ИмяПринтера, ИмяПринтера);
				ПараметрОписанияПринтера = ПараметрОписанияПринтера + 2;
			КонецЦикла;
			КОМОбъект = Неопределено;
		Исключение
			// вэб клиент       ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационныеНадписи(Знач ТолькоПереименование = ЛОЖЬ)
	
	Если НЕ ТолькоПереименование Тогда
		Элементы.Декорация13.Видимость = ЛОЖЬ;
		Элементы.Декорация15.Видимость = ЛОЖЬ;
		Элементы.ПользователейИИхРолиСледуетНазначатьИзКонфигуратора.Видимость = ЛОЖЬ;
		Элементы.ОПолнойВерсии.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы.Видимость = ЛОЖЬ;
		Элементы.ОписаниеСерийногоУчета.Видимость = ЛОЖЬ;
		Элементы.ОписаниеУчетаПоСкладам.Видимость = ЛОЖЬ;
		Элементы.НоменклатурыеГруппыЗадаютПравила.Видимость = ЛОЖЬ;
		Элементы.ДляНоменклатурыПредусмотренныДополнительныеРеквизитыНоменклатурныхГрупп1.Видимость = ЛОЖЬ;
		Элементы.ОписаниеСложногоУчетаЦен.Видимость = ЛОЖЬ;
		Элементы.ОписаниеУчетаДополнительныхЕдиниц.Видимость = ЛОЖЬ;
		Элементы.ОбязательноПроведитеОчисткуЕдиницИзмеренияЕслиОтказываетесьОтЭтогоМеханизма.Видимость = ЛОЖЬ;
		Элементы.ОписаниеКомплектации.Видимость = ЛОЖЬ;
		Элементы.ОписаниеКлючейУчета.Видимость = ЛОЖЬ;
		Элементы.ОписаниеАналогов.Видимость = ЛОЖЬ;
		Элементы.ОписаниеСертификатов.Видимость = ЛОЖЬ;
		Элементы.ОписаниеВаловойПрибыли.Видимость = ЛОЖЬ;
		Элементы.ПриВключенииИлиОтключенииПерсонифицированногоУчетаВаловойПрибылиСледуетПерепровестиВсеДокументы.Видимость = ЛОЖЬ;
		Элементы.Декорация12.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы1.Видимость = ЛОЖЬ;
		Элементы.ПриВеденииУчетаВРазныхВалютахРекомендуетсяВключитьУчетВРазныхХранилищах.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы2.Видимость = ЛОЖЬ;
		Элементы.ОписаниеВаучеров.Видимость = ЛОЖЬ;
		Элементы.ДолженБытьВключенМеханизмСкидокДляУчетаТакихВаучеров.Видимость = ЛОЖЬ;
		Элементы.ОписаниеДопРеквизитовКлиентов.Видимость = ЛОЖЬ;
		Элементы.ОписаниеМеханизмаОтсрочки.Видимость = ЛОЖЬ;
		Элементы.МеханизмОтсрочкиНеРекомендуетсяВключатьИлиВыключатьБезПолногоПерепроведенияВсехДокументовПоВзаиморасчетам.Видимость = ЛОЖЬ;
		Элементы.НеобходимоВключитьДляПодготовкиРегламентированныхДокументов.Видимость = ЛОЖЬ;
		Элементы.ОписаниеДоговоров.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы3.Видимость = ЛОЖЬ;
		Элементы.ДокументыВыполненияРаботПозволяютЗарегистрироватьВсеОперацииСопутствующиеВыполнениюРаботДляКлиентаВОдномМесте.Видимость = ЛОЖЬ;
		Элементы.ГруппаОказанияУслугЗаВремя.Видимость = ЛОЖЬ;
		Элементы.ОписаниеПодразделений.Видимость = ЛОЖЬ;
		Элементы.ОписаниеСредств.Видимость = ЛОЖЬ;
		Элементы.ОписаниеНаправлений.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы4.Видимость = ЛОЖЬ;
		Элементы.НеСнимайтеЭтотФлагЗапрета.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы6.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы8.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы9.Видимость = ЛОЖЬ;
		Элементы.ВРежимеСИспользованиемМеханизмаСторнирования.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы12.Видимость = ЛОЖЬ;
		Элементы.ПриУказанииНаименованияПринтераШтрихКодовПечатьБудетИдтиСразуБезВыбораПринтера.Видимость = ЛОЖЬ;
		Элементы.ЗаголовокСтраницы11.Видимость = ЛОЖЬ;
		Элементы.РабочаяДатаПозвоялетВместоТекущейДатыИспользоватьВездеОпределеннуюДату1.Видимость = ЛОЖЬ;
		Элементы.МеханизмТакжеИспользуетсяДляЗадачиАвторезервирования.Видимость = ЛОЖЬ;
		Элементы.ОбщиеДополниительныеРеквизитыСлужатДляВсехЭлементовСправочникаИлиДокументов.Видимость = ЛОЖЬ;
		Элементы.ДляНоменклатурыПредусмотренныДополнительныеРеквизитыНоменклатурныхГрупп.Видимость = ЛОЖЬ;
		Элементы.ДляКлиентовПредусмотренныСобственныеДополнительныеРеквизиты.Видимость = ЛОЖЬ;	
	КонецЕсли;
	
	Элементы.ОписаниеПрограммыЭлементарнаяТорговля.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Описание");
	Элементы.УчетНоменклатуры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура");
	Элементы.УчетДенежныхСредств.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Деньги");
	Элементы.УчетВзаиморасчетовСтраница.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчеты");
	Элементы.ЭлементыУчета.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прочее");
	Элементы.ЗаказыИПланыПродаж.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планы");
	Элементы.ПоведениеПрограммы.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поведение");
	Элементы.ШтрихКодирование.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-коды");
	Элементы.ОграниченияИЗапреты.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ограничения");
	Элементы.НастройкиПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печать");
	Элементы.ДругиеНастройки.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Другие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРегионУчета()
	
	Если НаборКонстант.РегионРегламентированногоУчета = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Украина") Тогда
		Элементы.СобственныеЮридическиеЛицаОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЕДРПОУ");
		Элементы.ЗапретитьИспользоватьОдинаковыеКодыИНН.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запретить одинаковые ИНН, ЕДРПОУ в рамках одного справочника");
		Элементы.ИспользоватьМеханизмыПечатиФормыТОРГ12.Видимость = ЛОЖЬ;
		НаборКонстант.ИспользоватьМеханизмыПечатиФормыТОРГ12 = ЛОЖЬ;
		Элементы.ИспользоватьМеханизмыПечатиСчетаФактурыДляРФ.Видимость = ЛОЖЬ;
		НаборКонстант.ИспользоватьМеханизмыПечатиСчетаФактурыДляРФ = ЛОЖЬ;
		Элементы.ИспользоватьМеханизмПечатиПКОРФ.Видимость = ЛОЖЬ;
		НаборКонстант.ИспользоватьМеханизмПечатиПКОРФ = ЛОЖЬ;
		Элементы.НашеОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наше ЕДРПОУ");
		
	ИначеЕсли НаборКонстант.РегионРегламентированногоУчета = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Россия") Тогда
		Элементы.СобственныеЮридическиеЛицаОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ОКПО");
		Элементы.ЗапретитьИспользоватьОдинаковыеКодыИНН.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запретить одинаковые ИНН, ОКПО в рамках одного справочника");
		Элементы.НашеОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наше ОКПО");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихкоды(Команда)
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьШтрихкодыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить обновление всех штрих-кодов?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихкодыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда				
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление штрих-кодов номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Записать();
		ОбновитьШтрихКодыНаСервере();	
		
		глПроверятьСообщения = ИСТИНА;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодыНаСервере()
	
	Счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			БылиИзменения = ЛОЖЬ;
			
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии Тогда 
				Если ПустаяСтрока(НоменклатураОбъект.ОсновнойШтрихКод) Тогда
					НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
					БылиИзменения = ИСТИНА;
				КонецЕсли;
			Иначе
				НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
				БылиИзменения = ИСТИНА;
			КонецЕсли;
			
			Если БылиИзменения Тогда
				НоменклатураОбъект.Записать();	
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;                                                                                      	
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего обновлено") + ": " + СокрЛП(Счетчик));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийПроцентВаучераПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОбщийПроцентВаучераПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ОдинДокументПриходаИлиРасходаТовараМожетБытьОформленДляНесколькихЗаказовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФормулаТекстаЭтикетки1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяФормулаТекстаЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеНаправлениеДеятельностиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОсновноеНаправлениеДеятельности), 2);
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеХранилищеДенег1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаДоставкуПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОтветственныйЗаДоставкуПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПланированиеВДокументеВыполненияРаботПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПолнуюИсториюИзмененийВКонфигурации(Команда)
	
	ПараметрыФормы = Новый Структура;
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	ЗаполнитьЧтоНового(ЛОЖЬ, ФормаПечати.Результат);
	
	ФормаПечати.Результат.ОтображатьСетку = ЛОЖЬ;
	ФормаПечати.Результат.Защита = ИСТИНА;
	ФормаПечати.Результат.ТолькоПросмотр = ИСТИНА;
	ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
	ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("История изменений в конфигурации");
	ФормаПечати.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуСайтаПрограммы(Команда)
	
	Если глВерсияПлатформы < 806010000 Тогда 
		Выполнить(" ЗапуститьПриложение(""https:// sites.google.com/site/elementarytrade/platnaa-versia-programmy""); ");
	Иначе
		Выполнить(" НачатьЗапускПриложения(Неопределено, ""https:// sites.google.com/site/elementarytrade/platnaa-versia-programmy""); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьПечатьДокументовИСправочниковСразуНаПринтерПриИзменении(Элемент)
	
	Если НаборКонстант.ОтправлятьПечатьДокументовИСправочниковСразуНаПринтер Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправлятьПечатьДокументовИСправочниковСразуНаПринтерПриИзмененииЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что принтер будет все время включен и готов к печати?"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьПечатьДокументовИСправочниковСразуНаПринтерПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		НаборКонстант.ОтправлятьПечатьДокументовИСправочниковСразуНаПринтер = ЛОЖЬ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТоварПриИзменении(Элемент)
	Элементы.СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены.Видимость = НаборКонстант.ИспользоватьСкидки и НаборКонстант.ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУпоминаниеОбЕдиницахИзмерения(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьУпоминаниеОбЕдиницахИзмеренияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы хотите очистить все упоминания об единицах измерения?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУпоминаниеОбЕдиницахИзмеренияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбщийМодульСервер.ОчиститьУпоминаниеОбЕдиницахИзмерения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаСИзображениямиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог");
	ДиалогРасширение = "*";
	ДиалогДляВыбораФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогДляВыбораФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог изображений") + ":";
	ДиалогДляВыбораФайла.Каталог					=	НаборКонстант.ПапкаСИзображениями;
	ДиалогДляВыбораФайла.Фильтр					=	ДиалогФильтр;
	ДиалогДляВыбораФайла.Расширение				=	ДиалогРасширение;
	ДиалогДляВыбораФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогДляВыбораФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогДляВыбораФайла.ИндексФильтра			=	0;
	ДиалогДляВыбораФайла.ПроверятьСуществованиеФайла	=	ИСТИНА;
	ДиалогДляВыбораФайла.Показать(Новый ОписаниеОповещения("ПапкаСИзображениямиНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла, Элемент", ДиалогДляВыбораФайла, Элемент)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаСИзображениямиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;
	Элемент = ДополнительныеПараметры.Элемент;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		НаборКонстант.ПапкаСИзображениями = ДиалогДляВыбораФайла.Каталог;
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	КонецЕсли; // когда файл п выбран
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаСИзображениямиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначенийДополнительныхРеквизитовДатыПредставлятьВГодахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПараметрыЗначенийДополнительныхРеквизитовДатыПредставлятьВГодах), 2);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли(Команда)
	
	Если ЗначениеЗаполнено(НаборКонстант.ДатаАктуальностиПоказателейВаловойПрибыли) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепроведение документов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.АнимацияСерая);
		ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере();
		НаборКонстант.ДатаАктуальностиПоказателейВаловойПрибыли = '00010101000000';
		
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепровел документы для восстановления показателей валовой прибыли"), 2);
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере()
	ОбщийМодульСервер.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии), 2);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьРегламентированныйДокументРасходнойНакладнойПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьЧекПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	Элементы.СтрогоеИмяНефискальногоПринтераЧеков.Видимость = НаборКонстант.ПечататьЧек;
	Если НаборКонстант.ПечататьЧек
		И НаборКонстант.МасштабМакетаЧекаВПроцентах = 0 Тогда
		
		НаборКонстант.МасштабМакетаЧекаВПроцентах = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмоАвторуОбОшибкеИлиСПожеланием(Команда)
	ОткрытьФорму("ОбщаяФорма.ПисьмоАвтору");
КонецПроцедуры

&НаСервере
Процедура ПоведениеПрограммыИзмена()
	
	Поведение 			= НаборКонстант.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка;
	видимостьЭлементов 	= ЗначениеЗаполнено(Поведение) И НЕ Поведение = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать ;
	
	Элементы.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара.Видимость = видимостьЭлементов;
	Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = видимостьЭлементов;
	
	Поведение = НаборКонстант.ПоведениеПрограммыПриРасходеТоваровБезОстатка;
	видимостьЭлементов = ЗначениеЗаполнено(Поведение) И НЕ Поведение = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать ;
	Элементы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Видимость = видимостьЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоведениеПрограммыПриРасходеТоваровБезОстаткаПриИзменении(Элемент)
	
	ПроверитьДатуОграничения();
	ПоведениеПрограммыИзмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстаткаПриИзменении(Элемент)
	ПоведениеПрограммыИзмена();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе), 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПриСтартеСписокКлиентовУКоторыхСегодняЗавтраПослезавтраДеньРожденияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСуммуРасходногоДокументаТакжеВВалюте1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаСервере
Функция   ПолучитьСписокДоступныхСтранДляЗагрузкиГородовИзКлассификатора()
	
	Результат = Новый СписокЗначений;
	
	Макет 	= ПолучитьОбщийМакет("МакетДоступныхРегионовДляЗагрузкиГородовВКлассификатореПоЯзыкам");
	КоличествоСтрок = 99999;
	СчетчикСтрок = 1;
	ЧислоПустыхСтрок 	= 0;
	
	ТекущийЯзыкИнтерфейсаПрограммы = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	Если НЕ ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;
	ТекущийЯзык = НРег(ТекущийЯзыкИнтерфейсаПрограммы.код);
	
	Пока КоличествоСтрок > СчетчикСтрок Цикл
		
		R = СокрЛП(формат(СчетчикСтрок, "ЧГ=0"));
		ЯзыкСтроки = НРег(СокрЛП(Макет.Область("R" + R + "C1").Текст));
		Если ЗначениеЗаполнено(ЯзыкСтроки) Тогда
			
			Если ЯзыкСтроки = ТекущийЯзык Тогда				
				Результат.Добавить(СокрЛП(Макет.Область("R" + R + "C2").Текст));				
			КонецЕсли;
			
		Иначе 
			ЧислоПустыхСтрок = ЧислоПустыхСтрок + 1;
		КонецЕсли;
		
		Если ЧислоПустыхСтрок = 10 Тогда
			Прервать;
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПользователейНесколькоПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ПользователейНесколько Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПользователейНесколькоПриИзмененииЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), "Вы готовы отключить поддержку одновременной работы нескольких пользователей?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПользователейНесколькоПриИзмененииФрагмент(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПользователейНесколькоПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;	
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		НаборКонстант.ПользователейНесколько = ИСТИНА;	
	КонецЕсли;
	
	ПользователейНесколькоПриИзмененииФрагмент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователейНесколькоПриИзмененииФрагмент(Знач Элемент)
	
	Если НЕ НаборКонстант.ПользователейНесколько Тогда
		
		НаборКонстант.РеализаторНеМожетМенятьЦены 				= ЛОЖЬ;
		НаборКонстант.ВыводитьКнопкуБыстройБлокировкиВоВсеФормы = ЛОЖЬ;
		НаборКонстант.ДобавлятьИмяПользователяВЗаголовокОкна 	= ЛОЖЬ;
		НаборКонстант.ИспользоватьЖурналированиеСобытий 		= ЛОЖЬ;
		НаборКонстант.ИспользоватьЛичныеНастройкиПользователей 	= ЛОЖЬ;
		НаборКонстант.ИспользоватьСистемуУправленияДоступом 	= ЛОЖЬ;
		НаборКонстант.ИспользоватьСистемуВнутреннихСообщенийПользователей = ЛОЖЬ;
		
	КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	Элементы.ГруппаУправлениеДоступом.Видимость = НаборКонстант.ПользователейНесколько;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователямДоставлятьСообщенияНемедленноПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПользователямДоставлятьСообщенияНемедленно), 2);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроверитьПодключениеОбработчикаОжидания();	
	ПроверитьВключитьВыключитьНапоминания();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкА5ПовернутыйПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкАдресОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкИндексОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкТекстОтправительПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйБланкТекстОценкаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПравовойСтатусПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПредлагатьВосстанавливатьВаловуюПриПроведенииПриходаЗаднимПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                           // ПРИ ЗАКРЫТИИ   		
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Закрытиие окна настроек.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);			
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
	Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = ПараметрыСеанса.ИспользоватьСкидкиПС и НаборКонстант.ВестиУчетПоКлиентам;
	Если НаборКонстант.ИспользоватьСторнированиеДокументов Тогда
		НаборКонстант.БлокироватьПроведенныеДокументы = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулуПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппы(Команда)	
	НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию = ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппыНаСервере();	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыДляАвтоНаименованиНоменклатурыНоменклатурнойГруппыНаСервере()
	
	ПримерФормулы 		= " Номенклатура.НоменклатурнаяГруппа.Наименование + "" "" + Номенклатура.Производитель.Код + ""x"" + Формат(Цена, ""ЧЦ=9; ЧДЦ=0"") ";
	НаименованиеПример 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование") + " = " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная Группа") + ", пробел,  Код Производителя, символ X, Цена";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент();
		НаименованиеПримерОбъект.Родитель 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыАвтоНаименованияНоменклатурыДляНоменклатурнойГруппы");
		НаименованиеПримерОбъект.Наименование = НаименованиеПример;
		НаименованиеПримерОбъект.Формула 	  = ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
	КонецЕсли;
	Константы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ПримерФормулыДляШтрихКода(Команда)	
	НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры = установитьПримерФормулыДляШтрихКода();	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФормулыПреобразованияЦен(Команда) 	
	НаборКонстант.ОсновнаяФормулаПреобразованияЦен = ПримерФормулыПреобразованияЦенНаСервере();	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыПреобразованияЦенНаСервере()
	
	ПримерФормулы 		= " Цел(Цел(Цена + 1) * 2.5) ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена реализации") + " = (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Целое число от Цены закупки") + " + 1) * 2.5 ";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент();
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыПреобразованияЦен");
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	Константы.ОсновнаяФормулаПреобразованияЦен.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ПримерФормулыТекстаЭтикетки(Команда)
	
	НаборКонстант.ОсновнаяФормулаТекстаЭтикетки = ПримерФормулыТекстаЭтикеткиНаСервере();	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("основную форуму заголовка этикетки") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки), 2);
	
КонецПроцедуры

&НаСервере
Функция   ПримерФормулыТекстаЭтикеткиНаСервере()
	
	ПримерФормулы 		= " Номенклатура.Наименование + "" "" + Лев(Номенклатура.НоменклатурнаяГруппа.Код, 2) + Лев(Номенклатура.Производитель.Код, 2) + ""x"" + Формат(Цена, ""ЧЦ=12; ЧДЦ=2"") ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текст") + " = " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование") + ", пробел,  Код НГ, Код Произв., символ X, Цена";
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент();
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыТекстаЭтикетки");
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	Константы.ОсновнаяФормулаТекстаЭтикетки.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции

&НаКлиенте
Процедура ПриОтказеВДоступеВыводитьСообщениеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                    // ПРИ ОТКРЫТИИ 
	
	Если НЕ Отказ Тогда
		
		Если НЕ ПолнаяВерсия Тогда
			Элементы.УчетСертификатов.Видимость  	 = ЛОЖЬ;
			Элементы.ЗаказыИПланыПродаж.Видимость 	 = ЛОЖЬ;
			Элементы.ГруппаИзображения.Видимость 	 = ЛОЖЬ;
			Элементы.ГруппаДопРеквизиты.Видимость 	 = ЛОЖЬ;
			Элементы.УчетСредств.Видимость 			 = ЛОЖЬ;
			Элементы.РеализаторНеМожетМенятьЦены1.Видимость  = ЛОЖЬ;
			Элементы.ВестиУчетСерийНоменклатуры.Видимость 	 = ЛОЖЬ;
			Элементы.РеализаторНеМожетМенятьЦены.Видимость 	 = ЛОЖЬ;
			Элементы.ВключитьМеханизмПодбораНоменклатуры.Видимость 	 = ЛОЖЬ;				
			Элементы.ВестиДополнительнуюИнформациюДляКомплектаций.Видимость 	  	  = ЛОЖЬ;
			Элементы.ИспользоватьШтрихКодыДляИдентификацииКонтрагентов.Видимость 	  = ЛОЖЬ;
			Элементы.ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп.Видимость  = ЛОЖЬ;
			Элементы.ПредставлятьСерииНоменклатурыВДокументахОтдельнымОкном.Видимость = ЛОЖЬ;
			Элементы.НеобходимоВключитьДляПодготовкиРегламентированныхДокументов.Видимость  = ЛОЖЬ;
			Элементы.ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами.Видимость = ЛОЖЬ;
			Элементы.ОбязательноПроведитеОчисткуЕдиницИзмеренияЕслиОтказываетесьОтЭтогоМеханизма.Видимость = ЛОЖЬ;
			Элементы.МеханизмОтсрочкиНеРекомендуетсяВключатьИлиВыключатьБезПолногоПерепроведенияВсехДокументовПоВзаиморасчетам.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
		#Если НЕ ВебКлиент Тогда
			Элементы.ОПолнойВерсии.Видимость = НЕ ПолнаяВерсия;
			ЗаполнитьЧтоНового(ИСТИНА);
		#КонецЕсли
		ЗапретитьИзмененияВПрошломПериоде();
		ПоведениеПрограммыИзмена();
		
		// 		Элементы.Декорация3.Видимость = ОбщийМодульКлиент.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.УчетПартийРуководителем.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен и ПолнаяВерсия;
		
		Если ЗначениеЗаполнено(СтраницаПанели) Тогда
			
			Попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Элементы.ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре.Видимость = НаборКонстант.ИспользоватьШтрихКоды ;
		Элементы.УстанавливатьШтрихКодИзКарточкиНоменклатуры.Видимость = НаборКонстант.ИспользоватьШтрихКоды ;
		Элементы.ОбновитьШтрихкоды.Видимость = НаборКонстант.ИспользоватьШтрихКоды И НаборКонстант.ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом;	
		Элементы.ГруппаНастроекОператораКассы.Видимость = НаборКонстант.ИспользоватьИнструментРабочееМестоОператораКассы;
		
		СменитьВидОкнаНастроекНаСервере();
		ОбновитьВидимостьЭлементов();
		
		ВестиУчетДвиженияДенегПриИзмененииП();
		
		Если НаборКонстант.ЕстьПринтер Тогда
			ОбновитьИменаПринтеров();
		КонецЕсли;
		
		ОбновитьРегионУчета();
		Если ВидГоризонтальный Тогда
			ОбновитьИнформационныеНадписи(ИСТИНА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦеныПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПриРаспределенииДопРасходовУчестьСначалаРанееЗарегистрированныеПолныеЦены), 2);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)     // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000150", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
			
			Элементы.ФормулыШК.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Версия 				= Метаданные.Версия;
		ПолнаяВерсия 		= ОбщийМодульПовтор.ПолнаяВерсия();
		
		Если НЕ ПолнаяВерсия Тогда
			ОПолнойВерсии.Очистить();
			МакетОПлатной = ПолучитьОбщийМакет("ОПолнойВерсии");
			ОбластьМакета = МакетОПлатной.ПолучитьОбласть("Ш");
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьМакета);
			ОПолнойВерсии.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Элементы.ВерсияПрограммы.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия") + ": " + Версия;	
		Элементы.ОписаниеПрограммыЭлементарнаяТорговля.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Описание программы") + " v " + Метаданные.Версия;
		
		НаименованиеОсновнойВалюты 	= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;	
		НаименованиеНашегоРегиона 	= ПредопределенноеЗначение("Справочник.Регионы.НашРегион").Наименование ;
		
		ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже");
		
		Элементы.ВидЦенПоставщиков.Видимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЦенПоставщиков");
		
		Элементы.МеханизмЛьготнойЦены.Видимость 		= ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже;
		Элементы.ФормулаИКнопкаПримера.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		Элементы.ГруппаОсновнойЕдиницы.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		Элементы.ГруппаПараметровФормул.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		Элементы.ВестиУчетЦенПоставщиков.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		
		Элементы.ГруппаУправлениеДоступом.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПользователейНесколько");
		Элементы.ГруппаФормированияАртикула.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		Элементы.УстановитьКомпонентуWebCam.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьWebcam");
		Элементы.ГруппаУсловийРеализацииСотрудника.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам");
		Элементы.РегистрСведенийСкидкиПериодаОткрытьСписок.Видимость 			  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидкиПериода");
		
		Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры.Видимость   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		
		Элементы.ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры1.Видимость  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
		
		Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость   = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		
		Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов1.Видимость  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		
		Элементы.СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены.Видимость 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
		И ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар");
		
		Элементы.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Видимость 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		Элементы.ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
		
		Элементы.ДокументыВыполненияРаботПозволяютЗарегистрироватьВсеОперацииСопутствующиеВыполнениюРаботДляКлиентаВОдномМесте.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		
		ВерсияПриИнсталляции = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");
		Попытка
			ЧислоВерсияПриИнсталляции = Число(Лев(ВерсияПриИнсталляции, 6));
		Исключение
			ЧислоВерсияПриИнсталляции = 0;
		КонецПопытки;
		Элементы.ЧтоНового.Видимость = ЛОЖЬ;
		
		РегистрационныйКод = ОбщийМодульСервисСервер.РегистрационныйКод();
		
		Элементы.ОтветственныйЗаДоставкуПоУмолчанию.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетИнформацииОДоставкеВДокументахРасхода");
		
		Если НЕ ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			Если НЕ ПолнаяВерсия Тогда
				Элементы.ДекорацияЛого.Видимость   		= ЛОЖЬ;
				Элементы.ДекорацияЛогоET.Видимость 		= ЛОЖЬ;
				Элементы.ДекорацияЛогоETFree.Видимость 	= ИСТИНА;
				Элементы.ДекорацияЛогоФри.Видимость 	= ЛОЖЬ;
			Иначе
				Элементы.ДекорацияЛого.Видимость   		= ЛОЖЬ;
				Элементы.ДекорацияЛогоET.Видимость 		= ИСТИНА;
				Элементы.ДекорацияЛогоETFree.Видимость 	= ЛОЖЬ;
				Элементы.ДекорацияЛогоФри.Видимость 	= ЛОЖЬ;
			КонецЕсли;
			
		Иначе
			Если НЕ ПолнаяВерсия Тогда
				Элементы.ДекорацияЛого.Видимость   		= ЛОЖЬ;
				Элементы.ДекорацияЛогоET.Видимость 		= ЛОЖЬ;
				Элементы.ДекорацияЛогоETFree.Видимость 	= ЛОЖЬ;
				Элементы.ДекорацияЛогоФри.Видимость 	= ИСТИНА;
			Иначе
				Элементы.ДекорацияЛого.Видимость   		= ИСТИНА;
				Элементы.ДекорацияЛогоET.Видимость 		= ЛОЖЬ;
				Элементы.ДекорацияЛогоETFree.Видимость 	= ЛОЖЬ;
				Элементы.ДекорацияЛогоФри.Видимость 	= ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
		
		РабочаяДата = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РабочаяДата");
		Элементы.ОПолнойВерсии.Видимость 				= ЛОЖЬ;  	
		Элементы.ЗаголовокСтраницы4.Видимость 			= ПолнаяВерсия;
		Элементы.ЭТО_БЕСПЛАТНАЯ_ВЕРСИЯ.Видимость 		= НЕ ПолнаяВерсия;
		Элементы.СтраницыНастроекПечати.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЕстьПринтер");		
		Элементы.СобственныеЮридическиеЛица.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц");
		
		Элементы.РазмерСкидкиНаДатаРождения.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		
		Элементы.УчетПлановДоходовИРасходов.Видимость	= ПолнаяВерсия
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		
		Элементы.НеСнимайтеЭтотФлагЗапрета.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
		Элементы.ГруппаОтменыЕдиницИзмерения.Видимость  = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		Элементы.ГруппаДополнительнойСтрокиЭтикетки.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПечатьЭтикеток");
		
		Элементы.ГруппаФормулыПреобразованияЦены.Видимость 	  	= НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		Элементы.СкладДляОбъектовКлиентаПоУмолчанию.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов");
		
		Элементы.ЧислоЗнаковПослеЗапятойДляКоличества.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
		Элементы.СтрогоеИмяНефискальногоПринтераЧеков.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьЧек");
		
		Элементы.ШтрихКодомМожетВыступатьСерияИлиКодПродукта.Видимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
		
		Элементы.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
		
		Элементы.ИспользованиеДополнительныхРеквизитовСправочникаКлиентов.Видимость 	= ПолнаяВерсия;
		Элементы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		
		Элементы.ДляКлиентовПредусмотренныСобственныеДополнительныеРеквизиты.Видимость 	= ПолнаяВерсия
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		
		Элементы.ДляНоменклатурыПредусмотренныДополнительныеРеквизитыНоменклатурныхГрупп1.Видимость 	= ПолнаяВерсия
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		
		Элементы.ДляНоменклатурыПредусмотренныДополнительныеРеквизитыНоменклатурныхГрупп.Видимость 	= ПолнаяВерсия
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		
		Элементы.ПриВеденииУчетаВРазныхВалютахРекомендуетсяВключитьУчетВРазныхХранилищах.Видимость  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
		Элементы.ПриУказанииНаименованияПринтераШтрихКодовПечатьБудетИдтиСразуБезВыбораПринтера.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПечатьЭтикеток");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов") Тогда
			Элементы.БлокироватьПроведенныеДокументы.Доступность = ЛОЖЬ;
		КонецЕсли;
		
		НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;	
		ОсновноеПредприятие = Справочники.Организации.ОсновноеПредприятие ;
		НашеОКПО 			= ОсновноеПредприятие.ОКПО;
		НашЮридическийАдрес = ОсновноеПредприятие.Адрес;		
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РазмерПланкиКоличестваТовараДляЛьготнойЦены, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.МинимальныйОбъемОказанияУслуг, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, ИСТИНА);			
		
		ИмяЛокаций();
		ВсегоЭтикеток = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоВертикали") * ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоГоризонтали");
		Элементы.ВРежимеСИспользованиемМеханизмаСторнирования.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЖурналированиеСобытий");
		
		Элементы.ОписаниеСерийногоУчета.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Учет номенклатуры по сериям, когда каждый экземпляр (единица) обладает своим уникальным серийным номером, штрих-кодом.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Простой учет по сериям, когда достаточно только регистририровать серии при поступлении, чтобы отслеживать их историю.");
		
		Элементы.ОписаниеУчетаПоСкладам.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Разделение на склады позволяет учесть товары в разных локациях с разными условиями хранения и учета.");
		
		Элементы.ОписаниеСложногоУчетаЦен.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сложный учет, это возможность задавать различные виды цен реализации, задавать условия их зависимости друг от друга.");
		
		Элементы.ОписаниеУчетаДополнительныхЕдиниц.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительные единицы измерения нужны только для случаев, когда товар учитывается сразу в двух и более различных единицах.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Например, когда поступает в ящиках, но реализуется в штуках. И есть прямой коэффициент для рассчета их зависимости.");
		
		Элементы.ОписаниеКомплектации.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектация - процесс, при котором списываются материалы и приходуются результаты (продукты комплектации).") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Можно использовать спецификации для типовых продуктов.");
		
		Элементы.ОписаниеКлючейУчета.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ключи учета позволяют связать номенклатуру: один к многим и многие к одному.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Например, когда товар связан подходит для некоторых категорий применения (детали - машинам, виды услуг - категорим граждан и т.п.).");
		
		Элементы.ОписаниеСертификатов.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сертификаты сопровождают товар или услуги.");
		
		Элементы.ОписаниеАналогов.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Механизм аналогов позволяет при выборе (подборе) товара увидеть, какие есть аналоги и при необходимости выбрать их.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для этого такую номенклатуру нужно связать в общие группы аналогов.");
		
		Элементы.ОписаниеВаловойПрибыли.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валовая прибыль - разница между себестоимостью и суммой реализации товар и услуг предприятием.");
		
		Элементы.ОписаниеВаучеров.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идентификаторы клиентов и сотрудников.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Накопительные карты клиентов.") + " " +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подарочные карты с номиналом.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидочные карты клиентов (проценты или на сумму).");
		
		Элементы.ОписаниеДопРеквизитовКлиентов.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для учета реквизитов, не предусмотренных конфигурацией.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всё что угодно, в зависимости от производственной необходимости: от размера одежды, до имени домашнего животного.");
		
		Элементы.ОписаниеМеханизмаОтсрочки.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отсрочка позволяет разделить долги клиентов и долги перед поставщиками на такие, которые уже просрочены и такие, по которым оплата ещё только ожидается.");
		
		Элементы.ОписаниеДоговоров.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Договора указывают на уникальные условия на взаиморасчеты с клиентами и постащиками.");
		
		Элементы.ОписаниеУслугЗаВремя.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Примеры услуг, оказываемых клиентам за время: аренда, охрана, обучение и т.п.");
		
		Элементы.ОписаниеПодразделений.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подразделения, - это временные или постоянные объединения сотрудников для выполнения одной задачи или по производственным признакам.");
		
		Элементы.ОписаниеСредств.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оборудование, недвижимость, земля, транспорт и т.д.");
		
		Элементы.ОписаниеНаправлений.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Направления (виды бизнеса) позволяют разделить в учете все события (реализацию). А затем провести аналитику в сравнении.");
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.РеализаторНеМожетМенятьЦены.ВидФлажка = ВидФлажка.Флажок; ");	
			КонецЕсли;
			Элементы.РеализаторНеМожетМенятьЦены.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пользователи с ролью реализатор не могут менять цены");
			Элементы.РеализаторНеМожетМенятьЦены.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходоватьИзлишкиИнвентаризацииВсегдаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ПриходоватьИзлишкиИнвентаризацииВсегда), 2);
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуОграничения() 
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) 
		И НЕ НаборКонстант.ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
		
		НаборКонстант.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДатуОграничения()

&НаКлиенте
Процедура ПроверитьНаличиеНовойВерсииКонфигурации(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет связь с сервером конфигурации.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверка наличия обновления"));
	ОбщегоНазначения.СообщитьПользователю(ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере()
	
	ВопросКСерверу = ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы(ИСТИНА);
	Если ВопросКСерверу = Неопределено Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет связи с сервером автора конфигурации.");
		
	ИначеЕсли НЕ ПустаяСтрока(ВопросКСерверу.ВерсияНаСайте) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " http://www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации") + ": " + ВопросКСерверу.ВерсияНаСайте + ?(ЗначениеЗаполнено(ВопросКСерверу.ПолныйТекстВерсии), Символы.ПС + ВопросКСерверу.ПолныйТекстВерсии, "");
		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		
	Иначе
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваша версия конфигурации актуальная.");
		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьФормулуАвтоНаименованияНоменклатуры(Команда)
	
	ПроверитьФормулуАвтоНаименованияНоменклатурыНаСервере();
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуАвтоНаименованияНоменклатурыНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуТекстаЭтикетки(Команда)
	ПроверитьФормулуТекстаЭтикеткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуТекстаЭтикеткиНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаТекстаЭтикетки.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуФормированияЦены(Команда)
	ПроверитьФормулуФормированияЦеныНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуФормированияЦеныНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаПреобразованияЦен) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаПреобразованияЦен.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуШтрихКода(Команда)
	ПроверитьФормулуШтрихКодаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуШтрихКодаНаСервере()
	
	Если ЗначениеЗаполнено(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(НаборКонстант.ОсновнаяФормулаШтрихКодаНоменклатуры.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапускеПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяДата1ПриИзменении(Элемент)
	
	ОбщийМодульКлиент.УстановитьЗначениеПараметраСеанса("РабочаяДата", РабочаяДата);
	
	Если ЗначениеЗаполнено(РабочаяДата) Тогда
		Выполнить(" УстановитьКраткийЗаголовокПриложения(Формат(РабочаяДата, ""ДФ='dd.MM.yy ЧЧ:мм'"")); ");		
	Иначе
		Выполнить(" УстановитьКраткийЗаголовокПриложения(""""); ");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСкидкиДляДокументаРеализацииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РазмерСкидкиДляДокументаРеализации), 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмерСкидкиНаДатаРожденияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмерШрифтаДополнительнойСтрокиЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РазмерШрифтаДополнительнойСтрокиЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмерШрифтаЗаголовкаЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеДополнительнойСтрокиЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РазмещениеДополнительнойСтрокиЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеТекстаСШтрихКодомНаЭтикетке1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютахПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьМеханизмРегистрацииРеализацииЗаСчетПериодическойИнвентаризацииСкладаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РаспределятьДополнительныеРасходыПропорциональноКоличествуПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноКоличеству), 2);
	Если НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноКоличеству Тогда
		НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимостиПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости), 2);
	Если НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноНаЕдиницуНезависимоОтСтоимости Тогда
		НаборКонстант.РаспределятьДополнительныеРасходыПропорциональноКоличеству = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределятьДополнительныеРасходыПриПоступленииВручнуюПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РегионРегламентированногоУчетаПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РегионРегламентированногоУчета), 2);
	ОбновитьРегионУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВидЦенПриПоступленииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РегистрироватьВидЦенПриПоступлении), 2);
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьВсеИзмененияВТаблицахОбъектовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.РегистрироватьВсеИзмененияВТаблицахОбъектов), 2);
КонецПроцедуры

&НаКлиенте
Процедура РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковокПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАдресИТелефонКлиентаПрямоВДокументахРеализацииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	
	Если НаборКонстант.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
		НаборКонстант.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара = '00010101000000' ;
	Иначе
		НаборКонстант.ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара = ОбщийМодульКлиент.ПользователяТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладДляИзъятияВаучеровПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СкладДляИзъятияВаучеров), 2);
КонецПроцедуры

&НаКлиенте
Процедура СкладДляОбъектовКлиентаПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СкладПроизводстваПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсеИнформационныеНадписи(Команда)
	
	СкрытьВсеИнформационныеНадписи = ИСТИНА;
	ОбновитьИнформационныеНадписи();
	Элементы.СкрытьВсеИнформационныеНадписи.Видимость = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкнаНастроек(Команда)
	
	ВидГоризонтальный = НЕ ВидГоризонтальный;
	СменитьВидОкнаНастроекНаСервере();	
	ОбновитьИнформационныеНадписи(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура СменитьВидОкнаНастроекНаСервере()
	
	Если ВидГоризонтальный
		И НЕ Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху Тогда
		
		Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницУчетаНоменклатуры.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницУчетаПоВзаиморасчетам.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницыУчетаДенег.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницыЭлементов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницЗаказов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницыПоведения.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницШтрихКода.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницОграничений.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницыНастроекПечати.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ГруппаСтраницДругихНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
	ИначеЕсли НЕ Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально Тогда
		Элементы.ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницУчетаНоменклатуры.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницУчетаПоВзаиморасчетам.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницыУчетаДенег.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.СтраницыЭлементов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницЗаказов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.СтраницыПоведения.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницШтрихКода.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницОграничений.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.СтраницыНастроекПечати.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
		Элементы.ГруппаСтраницДругихНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов), 2);
КонецПроцедуры

&НаКлиенте
Процедура СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов), 2);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьГруппыНоменклатурыПоПервомуСловуИОтноситьКНимПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументНачисленияИВыдачиЗаработнойПлаты(Команда)
	Выполнить(" ОткрытьФорму(""Документ.ДвиженияДенег.Форма.СписокДокументовРасчетаЗаработнойПлаты"");");
КонецПроцедуры

&НаКлиенте
Процедура СократитьЗакладкиДоКартинок(Команда)
	
	СократитьЗакладкиДоКартинокНаСервере();
	Элементы.ФормаСократитьЗакладкиДоКартинок.Видимость = ЛОЖЬ;
	ЭтаФорма.Заголовок = "";
	
КонецПроцедуры

&НаСервере
Процедура СократитьЗакладкиДоКартинокНаСервере()
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Попытка
			Если ЭлементФормы.Вид = ВидГруппыФормы.Страница
				И ЗначениеЗаполнено(ЭлементФормы.Картинка) Тогда
				
				ЭлементФормы.Заголовок = "";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ТекстДоп = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доп.");
	Элементы.ГруппаПоведениеДляДенег.Заголовок = ТекстДоп;
	Элементы.ПрочееПоЗаказам.Заголовок = ТекстДоп;
	Элементы.РедакцияЗаднимЧислом.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сторно");
	Элементы.ГруппаУправлениеДоступом.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОСменеФункциональнойОпции(Знач ЭлементЗдесь = "")
	
	Элементы.УчетПартийРуководителем.Видимость = НаборКонстант.ИспользоватьСложныйМеханизмЦен и ПолнаяВерсия;
	Если НЕ ПустаяСтрока(ЭлементЗдесь) Тогда
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ЭлементЗдесь, 2);	
	КонецЕсли;
	
	Попытка 
		ЭтаФорма.Записать();
		Элементы.СобственныеЮридическиеЛица.Видимость = НаборКонстант.ВестиУчетСобственныхЮридическихЛиц;
		
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры // СообщитьОСменеФункциональнойОпции

&НаКлиенте
Процедура СообщатьОНеактуальностиВаловойИПредлагатьПерепроведениеПриВыходеПоследнего1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СообщатьОНеактуальностиВаловойИПредлагатьПерепроведениеПриВыходеПоследнегоПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьДоговораИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьДокументыИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьЗаметкиИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьКлиентовИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьНоменклатуруИзображениями1ПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьОрганизацииИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьПоставщиковИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьПроизводителейИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СопровождатьСотрудниковИзображениямиПриИзменении(Элемент)
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьНоменклатуруПоНоменклатурнойГруппеИНаименованиюПриЗаписиДокументовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СортироватьНоменклатуруПоНоменклатурнойГруппеИНаименованиюПриЗаписиДокументов), 2);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументов), 2);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникРеализацииПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СохранятьИсториюСообщенийПользователейПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СохранятьИсториюСообщенийПользователей), 2);	
КонецПроцедуры

&НаКлиенте
Процедура СправочникПользователей(Команда)
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыВДняхДляДоговоровПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваровПоУмолчаниюВДняхПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОбновленияКонфигурацииНажатие(Элемент)
	
	Если глВерсияПлатформы < 806010000 Тогда 
		Выполнить(" ЗапуститьПриложение(""http://www.ELTR.od.ua""); ");
	Иначе
		Выполнить(" НачатьЗапускПриложения(Неопределено, ""http://www.ELTR.od.ua""); ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрогоеИмяНефискальногоПринтераЧековОчистка(Элемент, СтандартнаяОбработка)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.СтрогоеИмяНефискальногоПринтераЧеков), 2);	
КонецПроцедуры

&НаКлиенте
Процедура СтрогоеИмяНефискальногоПринтераЧековПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстВПодвалеДокументовПриПечатиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстВШапкеДокументовПриПечатиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗаголовкаСчетаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТекстУсловииПродажиРегламентированногоДокументаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ТекстУсловииПродажиРегламентированногоДокумента), 2);
КонецПроцедуры

&НаКлиенте
Процедура ТипРаботПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ТипРаботПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ТипШтрихКодовПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ТретийВидЦенДляФормулПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ТретийВидЦенДляФормул), 2);
КонецПроцедуры

&НаКлиенте
Процедура УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиковПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура Упаковка(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уп.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Упаковка"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Услуга(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Услуга"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаЗаВремяПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.УслугаЗаВремяПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуWebCam(Команда)
	ОбщийМодульКлиент.УстановитьКомпонентуWebCam();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыПоУмолчанию(Команда)
	ОткрытьФорму("ОбщаяФорма.УстановкаПервоначальныхНастроек");
КонецПроцедуры

&НаСервере
Функция   УстановитьПримерФормулыДляШтрихКода() 
	
	ПримерФормулы 		= " СокрЛП(Номенклатура.НоменклатурнаяГруппа.Код) + Номенклатура.Производитель.Код + ""x"" + СокрЛП(Формат(Цена, ""ЧЦ=9; ЧДЦ=0"")) ";
	НаименованиеПример  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих-код") + " = " + ПримерФормулы;
	СсылкаНаПример 		= Справочники.ФормулыОписания.НайтиПоНаименованию(НаименованиеПример);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПример) Тогда
		
		НаименованиеПримерОбъект = Справочники.ФормулыОписания.СоздатьЭлемент();
		НаименованиеПримерОбъект.Родитель 		= ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыШтрихКодаНоменклатуры");
		НаименованиеПримерОбъект.Наименование 	= НаименованиеПример;
		НаименованиеПримерОбъект.Формула 		= ПримерФормулы;
		НаименованиеПримерОбъект.Записать();
		СсылкаНаПример = НаименованиеПримерОбъект.Ссылка;
		
	КонецЕсли;
	
	Константы.ОсновнаяФормулаШтрихКодаНоменклатуры.Установить(СсылкаНаПример);
	
	Возврат СсылкаНаПример;
	
КонецФункции 

&НаКлиенте
Процедура УчетЗарплатыСотрудниковПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ВестиУчетЗарплатыСотрудников Тогда
		НаборКонстант.ВестиУчетПродажПоСотрудникам = ЛОЖЬ;
	КонецЕсли;
	УчетЗарплатыСотрудниковПриИзмененииНаСервере(НаборКонстант.ВестиУчетЗарплатыСотрудников);
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УчетЗарплатыСотрудниковПриИзмененииНаСервере(Знач ВестиУчетЗарплатыСотрудников)
	
	Если ВестиУчетЗарплатыСотрудников Тогда
		СвязаннаяПапкаКлиентов = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
		
		Если НЕ ЗначениеЗаполнено(СвязаннаяПапкаКлиентов)
			ИЛИ НЕ ОбщийМодульПовтор.ЭтоГруппа(СвязаннаяПапкаКлиентов) Тогда
			
			СвязаннаяПапкаКлиентов = Справочники.Клиенты.СоздатьГруппу();
			СвязаннаяПапкаКлиентов.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники");
			СвязаннаяПапкаКлиентов.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
			СвязаннаяПапкаКлиентов.Записать();
		КонецЕсли;
		СвязаннаяПапкаПоставщиков = Справочники.Клиенты.НайтиПоНаименованию(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники"));
		
		Если НЕ ЗначениеЗаполнено(СвязаннаяПапкаПоставщиков)
			ИЛИ НЕ ОбщийМодульПовтор.ЭтоГруппа(СвязаннаяПапкаПоставщиков) Тогда
			
			СвязаннаяПапкаПоставщиков = Справочники.Клиенты.СоздатьГруппу();
			СвязаннаяПапкаПоставщиков.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Собственные Сотрудники");
			СвязаннаяПапкаПоставщиков.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
			СвязаннаяПапкаПоставщиков.Записать();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЭтикетки1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствииПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии), 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьШтрихКодБезФормулыПоФорматуCode128ПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуCode128), 2);
	Если НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуCode128 Тогда
		НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуEAN13 = ЛОЖЬ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьШтрихКодБезФормулыПоФорматуEAN13ПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуEAN13), 2);
	Если НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуEAN13 Тогда
		НаборКонстант.ФормироватьШтрихКодБезФормулыПоФорматуCode128 = ЛОЖЬ;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаГенерацииСерийПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормулаГенерацииСерий), 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормулаДополнительнойСтрокиЭтикеткиПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормулаДополнительнойСтрокиЭтикетки), 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормулаНаименованияФайлаИзображенияПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормулаНаименованияФайлаИзображения), 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормулаФормированияАртикулаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормулаФормированияАртикула), 2);
КонецПроцедуры

&НаКлиенте
Процедура ФормулаФормированияПолногоНаименованияНоменклатурыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ФормулаФормированияПолногоНаименованияНоменклатуры), 2);
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегДляРабочегоМестаОператораКассыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЦенаТоваровСодержитНДСПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЦенаТоваровСодержитНДС), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейДействительностиСчетаФактурыДляОплатыПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоДнейДействительностиСчетаФактурыДляОплаты), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейОтсрочкиКлиентамПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоДнейОтсрочкиКлиентамПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчаниюПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоДнейОтсрочкиПередПоставщикамиПоУмолчанию), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЗнаковПослеЗапятойДляКоличестваПриИзменении(Элемент)
	
	Если НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества < 0 Тогда
		НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества = 0;
	ИначеЕсли НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества > 6 Тогда
		НаборКонстант.ЧислоЗнаковПослеЗапятойДляКоличества = 6;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоКолонокАссортиментаВАРМКассираПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоКолонокАссортиментаВАРМКассира), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСтраницАссортиментаВАРМКассираПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоСтраницАссортиментаВАРМКассира), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСтрокАссортиментаВАРМКассираПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоСтрокАссортиментаВАРМКассира), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЭтикетокНаЛистеПоВертикалиПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоЭтикетокНаЛистеПоВертикали), 2);
	ВсегоЭтикеток = НаборКонстант.ЧислоЭтикетокНаЛистеПоВертикали * НаборКонстант.ЧислоЭтикетокНаЛистеПоГоризонтали;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЭтикетокНаЛистеПоГоризонталиПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЧислоЭтикетокНаЛистеПоГоризонтали), 2);
	ВсегоЭтикеток = НаборКонстант.ЧислоЭтикетокНаЛистеПоВертикали * НаборКонстант.ЧислоЭтикетокНаЛистеПоГоризонтали;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодомМожетВыступатьСерияИлиКодПродуктаПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
КонецПроцедуры

&НаКлиенте
Процедура Штука(Команда)
	
	НаборКонстант.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.");
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил основную единицу измерения") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штука"), 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТО_БЕСПЛАТНАЯ_ВЕРСИЯНажатие(Элемент)
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ОПолнойВерсии;
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПечатныхФорм1ПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЯзыкПечатныхФорм), 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьВсеСообщенияПользователюОтСистемыВЖурналСобытийПриИзменении(Элемент)
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " " + СокрЛП(НаборКонстант.ЗаписыватьВсеСообщенияПользователюОтСистемыВЖурналСобытий), 2);
КонецПроцедуры
