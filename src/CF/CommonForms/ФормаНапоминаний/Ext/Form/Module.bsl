// sza140604-1741
// sza131121-1617  

&НаКлиенте
Процедура ВыключитьНапоминание(Команда)
	
	Код = СтрЗаменить(Команда.Имя, "КнопкаВыключить", "");
	ВыключитьнапоминаниеПоКоду(Код);
	
	ГруппаНапоминания = Элементы.Найти("ГруппаЭтогоНапоминания" + Код);
	Если НЕ группаНапоминания = Неопределено Тогда
		ГруппаНапоминания.Видимость = ЛОЖЬ;
		ЧислоНапоминаний = ЧислоНапоминаний - 1;
	КонецЕсли;
	
	Если ЧислоНапоминаний = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыключитьнапоминаниеПоКоду(Знач Код)
	
	Напоминание = Справочники.ЗаметкиИНапоминания.НайтиПоКоду(код);
	Если ЗначениеЗаполнено(Напоминание) Тогда
		Напоминание = Напоминание.ПолучитьОбъект();
		Напоминание.Актуально = ЛОЖЬ;
		Напоминание.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействия() // процедура используется в программно генерируемых элементах
	
	ДействиеОткрытьСсылкуИзНапоминания = Новый Действие("ОткрытьСсылкуИзНапоминания");
	
	Для Каждого ЭлементЭтойФормы Из Элементы Цикл
		Если НЕ Найти(ЭлементЭтойФормы.Имя, "ЭлементПричина") = 0 
			ИЛИ НЕ Найти(ЭлементЭтойФормы.Имя, "ЭлементСвязаноС") = 0 Тогда
			
			ЭлементЭтойФормы.УстановитьДействие("ПриОткрытии", ДействиеОткрытьСсылкуИзНапоминания);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   НайтиНапоминаниеПоКоду(Знач Код)	
	Возврат Справочники.ЗаметкиИНапоминания.НайтиПоКоду(код);	
КонецФункции // НайтиНапоминаниеПоКоду

&НаСервере
Процедура ОбновитьПереченьНапоминаний()
	
	ГруппаНапоминания = Элементы.Найти("ГруппаНапоминания");
	
// 	ЛюбаяСсылка = Новый ОписаниеТипов("Строка");
	ЛюбаяСсылка = Справочники.ТипВсеССылки();
// 	ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, Перечисления.ТипВсеССылки().Типы());
	ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, Документы.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, ПланыВидовХарактеристик.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, ПланыСчетов.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, ПланыВидовРасчета.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, ПланыОбмена.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, БизнесПроцессы.ТипВсеССылки().Типы());
	// ЛюбаяСсылка = Новый ОписаниеТипов(ЛюбаяСсылка, Задачи.ТипВсеССылки().Типы());
	
	Дата = ТекущаяДата();
	
	Для Каждого Напоминание Из МассивНапоминаний Цикл
		
		СтруктураНапоминания = ОбщийМодульСервисСервер.ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект(Напоминание.Значение, "Справочники", "ЗаметкиИНапоминания");
		Код 			= СтруктураНапоминания.код;
		Наименование 	= СтруктураНапоминания.Наименование;
		Причина 		= СтруктураНапоминания.причина;
		ТекстЗаметки 	= СтруктураНапоминания.ТекстЗаметки;
		СвязаноС		= СтруктураНапоминания.СвязаноС;
		
		ГруппаЭтогоНапоминания = Элементы.Найти("ГруппаЭтогоНапоминания" + Код);
		Если ГруппаЭтогоНапоминания = Неопределено Тогда
			
			ЧислоНапоминаний = ЧислоНапоминаний + 1;
			
			ГруппаЭтогоНапоминания = Элементы.Добавить("ГруппаЭтогоНапоминания" + Код, тип("ГруппаФормы"), ГруппаНапоминания);				
			ГруппаЭтогоНапоминания.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭтогоНапоминания.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭтогоНапоминания.Отображение 	= ОтображениеОбычнойГруппы.Нет;
			ГруппаЭтогоНапоминания.Заголовок 	= "";
			ГруппаЭтогоНапоминания.отображатьЗаголовок 			= ЛОЖЬ;
			ГруппаЭтогоНапоминания.РастягиватьПоГоризонтали 	= ЛОЖЬ;
			ГруппаЭтогоНапоминания.ШиринаПодчиненныхЭлементов 	= ШиринаПодчиненныхЭлементовФормы.Авто;     
			
		КонецЕсли;
		
		ВремяНапоминания = Элементы.Найти("ВремяНапоминания" + Код);
		Если ВремяНапоминания = Неопределено Тогда
			ВремяНапоминания = Элементы.Добавить("ВремяНапоминания" + Код, тип("ДекорацияФормы"), ГруппаЭтогоНапоминания);						
		КонецЕсли;
		ВремяНапоминания.Заголовок = "" + Дата;
		
		ТекстНапоминания = Элементы.Найти("ТекстНапоминания" + Код);
		Если ТекстНапоминания = Неопределено Тогда
			ТекстНапоминания = Элементы.Добавить("ТекстНапоминания" + Код, тип("ДекорацияФормы"), ГруппаЭтогоНапоминания);
		КонецЕсли;
		ТекстНапоминания.Заголовок = ?(ЗначениеЗаполнено(ТекстЗаметки), ТекстЗаметки, Наименование);
		
		Если ЗначениеЗаполнено(причина) Тогда
			ЭлементПричина = Элементы.Найти("ЭлементПричина" + Код);
			Если ЭлементПричина = Неопределено Тогда
				
				Реквизит = Новый РеквизитФормы("РеквизитПричина" + Код, ЛюбаяСсылка, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Причина"), ЛОЖЬ);
				ДобавляемыеРеквизиты = Новый массив;
				ДобавляемыеРеквизиты.Добавить(Реквизит);
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);           	
				
				ЭлементПричина = Элементы.Добавить("ЭлементПричина" + Код, Тип("ПолеФормы"), ГруппаЭтогоНапоминания);
				ЭлементПричина.ТолькоПросмотр 	= ИСТИНА;
				ЭлементПричина.Вид 				= ВидПоляФормы.ПолеВвода;
				ЭлементПричина.КнопкаОткрытия 	= ИСТИНА;
				ЭлементПричина.ПутьКДанным 		= "РеквизитПричина" + Код;
			КонецЕсли;
			ЭлементПричина.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Причина");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвязаноС) Тогда
			ЭлементСвязаноС = Элементы.Найти("ЭлементСвязаноС" + Код);
			Если ЭлементСвязаноС = Неопределено Тогда				
				
				Реквизит = Новый РеквизитФормы("ЭлементСвязаноС" + Код, ЛюбаяСсылка, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Связано с"), ЛОЖЬ);
				ДобавляемыеРеквизиты = Новый массив;
				ДобавляемыеРеквизиты.Добавить(Реквизит);
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);           	
				
				ЭлементСвязаноС = Элементы.Добавить("ЭлементСвязаноС" + Код, тип("ПолеФормы"), ГруппаЭтогоНапоминания);
				ЭлементСвязаноС.ТолькоПросмотр 	= ИСТИНА;
				ЭлементСвязаноС.Вид 			= ВидПоляФормы.ПолеВвода;
				ЭлементСвязаноС.КнопкаОткрытия 	= ИСТИНА;
				ЭлементСвязаноС.ПутьКДанным 	= "ЭлементСвязаноС" + Код;
			КонецЕсли;
			ЭлементСвязаноС.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Связано с");
			
		КонецЕсли;
		
		ГруппаКнопокЭтогоНапоминания = Элементы.Найти("ГруппаКнопокЭтогоНапоминания" + Код);
		Если ГруппаКнопокЭтогоНапоминания = Неопределено Тогда
			
			ГруппаКнопокЭтогоНапоминания = Элементы.Добавить("ГруппаКнопокЭтогоНапоминания" + Код, тип("ГруппаФормы"), ГруппаЭтогоНапоминания);
			ГруппаКнопокЭтогоНапоминания.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаКнопокЭтогоНапоминания.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаКнопокЭтогоНапоминания.Отображение 	= ОтображениеОбычнойГруппы.Нет;
			ГруппаКнопокЭтогоНапоминания.Заголовок 		= "";
			ГруппаКнопокЭтогоНапоминания.отображатьЗаголовок 		= ЛОЖЬ;
			ГруппаКнопокЭтогоНапоминания.РастягиватьПоГоризонтали 	= ЛОЖЬ;
			ГруппаКнопокЭтогоНапоминания.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;     
			
		КонецЕсли;
		
		КнопкаОткрытия = Элементы.Найти("КнопкаОткрыть" + Код);
		Если КнопкаОткрытия = Неопределено Тогда
			
			НоваяКоманда = Команды.Добавить("КнопкаОткрыть" + Код);
        	НоваяКоманда.Действие  = "ОткрытьНапоминание";
			
			КнопкаОткрытия = Элементы.Добавить("КнопкаОткрыть" + Код, тип("КнопкаФормы"), группаКнопокЭтогоНапоминания);		
			КнопкаОткрытия.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Открыть") + " " + Наименование;
			КнопкаОткрытия.ИмяКоманды = "КнопкаОткрыть" + Код;		
		КонецЕсли;                                       	
		
		КнопкаВыключить = Элементы.Найти("КнопкаВыключить" + Код);
		Если КнопкаВыключить = Неопределено Тогда
			
			НоваяКоманда = Команды.Добавить("КнопкаВыключить" + Код);
        	НоваяКоманда.Действие  = "ВыключитьНапоминание";
			
			КнопкаВыключить = Элементы.Добавить("КнопкаВыключить" + Код, тип("КнопкаФормы"), группаКнопокЭтогоНапоминания);		
			КнопкаВыключить.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выключить");
			КнопкаВыключить.ИмяКоманды = "КнопкаВыключить" + Код;		
		КонецЕсли;                                       	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязиСсылок()
	
	Для Каждого Напоминание Из МассивНапоминаний Цикл
		
		СтруктураНапоминания = ОбщийМодульСервисСервер.ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект(Напоминание.Значение, "Справочники", "ЗаметкиИНапоминания");
		Код 	 = СтруктураНапоминания.код;
		Причина  = СтруктураНапоминания.причина;
		СвязаноС = СтруктураНапоминания.СвязаноС;
		ГруппаЭтогоНапоминания = Элементы.Найти("ГруппаЭтогоНапоминания" + Код);
		
		Если НЕ ГруппаЭтогоНапоминания = Неопределено Тогда
			Если ЗначениеЗаполнено(причина) Тогда
				ЭлементПричина = Элементы.Найти("ЭлементПричина" + Код);
				Если НЕ ЭлементПричина = Неопределено Тогда
					Выполнить(" ЭтаФорма.РеквизитПричина" + Код + " = Причина;");	
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвязаноС) Тогда
				ЭлементСвязаноС = Элементы.Найти("ЭлементСвязаноС" + Код);
				Если НЕ ЭлементСвязаноС = Неопределено Тогда				
					Выполнить(" ЭтаФорма.ЭлементСвязаноС" + Код + " = СвязаноС;");	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФормуНапоминаний" Тогда 
		ОбновитьПереченьНапоминаний();
		ЭтаФорма.ОбновитьОтображениеДанных(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНапоминание(Команда)
	
	Код = СтрЗаменить(Команда.Имя, "КнопкаОткрыть", "");
	Напоминание = НайтиНапоминаниеПоКоду(Код);
	ПоказатьЗначение(Неопределено, Напоминание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуИзНапоминания()
	
	Ссылка = ЭтаФорма.ТекущийЭлемент.ПутьКДанным;
	ПоказатьЗначение(Неопределено, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьПереченьНапоминаний();
	ОбновитьСвязиСсылок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьПереченьНапоминаний();
	ОбновитьСвязиСсылок();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли; 		
КонецПроцедуры
