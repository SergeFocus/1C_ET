//sza141204-1634 фикс
//sza141129-2251 ПК
//sza141017-1246 : ключи учета
//sza140619-0306  
//sza131014-1519
&НаКлиенте
Процедура АртикулОткрытие(Элемент, СтандартнаяОбработка)
	
	АртикулПриИзмененииНаСервере();
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	АртикулПриИзмененииНаСервере();
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаСервере
Процедура АртикулПриИзмененииНаСервере()
	
	Если НЕ ПустаяСтрока(артикул) Тогда
		
		НоменклатураПоАртикулу = ОбщийМодульТоварСервер.НайтиНоменклатуруПоАртикулу(Артикул, ИСТИНА);
		
		Если НЕ ЗначениеЗаполнено(НоменклатураПоАртикулу)
			И ЗначениеЗаполнено(КлиентПоставщик) Тогда
			
			НоменклатураПоАртикулу = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), артикул);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураПоАртикулу) Тогда
			ДобавитьПозициюНоменклатуры(НоменклатураПоАртикулу);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Артикулу не найден") + " (" + Артикул + ").");	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(номенклатура) Тогда 		
		ПересчетЦены();
		
		Если НЕ цена = 0 Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Количество;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", Номенклатура);
	СтруктураПараметров.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Если НЕ БлокВидаЦенИЦены Тогда
		СтруктураПараметров.Вставить("Цена", Цена);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Количество", Количество);	
	СтруктураПараметров.Вставить("ВидЦен", ВидЦен);
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура не указана");
		Сообщение.Поле 	= "Номенклатура";
		Сообщение.Сообщить();
		
	ИначеЕсли ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура)
		И НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Серия номенклатуры не указана");
		Сообщение.Поле 	= "СерияНоменклатуры";
		Сообщение.Сообщить();
		
	Иначе
		Закрыть(СтруктураПараметров);
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаНоменклатурыПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач РезультатОбработки)
	
	Если ТипЗнч(РезультатОбработки) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура 	  = РезультатОбработки;
	Иначе
		Номенклатура 	  = РезультатОбработки.Номенклатура;
		СерияНоменклатуры = РезультатОбработки.СерияНоменклатуры;
	КонецЕсли;
	
	Артикул	= Номенклатура.Артикул;
	ПересчетЦены();	
	ОбновитьДанныеПоОстаткам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	НоменклатураВыбрана();	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ОстатокПосле = ОстатокНаСкладе - Количество;	
	Сумма 		 = Цена * Количество;
	
	Если НЕ Количество = 0
		И НЕ цена = 0 
		И ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.Готово;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураВыбранаНаКлиенте()
	НоменклатураВыбрана();
КонецПроцедуры

&НаСервере
Процедура НоменклатураВыбрана(Знач НеОбновлять = ЛОЖЬ)
	
	Если НЕ НеОбновлять Тогда
		ОбновитьТекстЗапросаНаСервере();	
	КонецЕсли;
	
	Элементы.НоменклатураДляВыбораНоменклатураРодитель.Видимость = НЕ ЗначениеЗаполнено(ГруппаНоменклатуры);
	Элементы.НоменклатураДляВыбораНоменклатураНоменклатурнаяГруппа.Видимость = НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда		
		
		ОбновитьДанныеПоОстаткам();
		ПересчетЦены();
		
		Если НЕ Цена = 0 Тогда
			
			Если БезКоличества тогда
				ЭтаФорма.ТекущийЭлемент = Элементы.Готово;				
			Иначе
				ЭтаФорма.ТекущийЭлемент = Элементы.Количество;	
			КонецЕсли;
			
		Иначе
			ЭтаФорма.ТекущийЭлемент = Элементы.Цена;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДляВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	
	Номенклатура = Элементы.НоменклатураДляВыбора.ТекущиеДанные.Ссылка;
	НоменклатураВыбрана(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= ЛОЖЬ;    	
	ПараметрыФормы 			= Новый Структура;
	
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", ВидЦен);
	КонецЕсли;	
	
	Если УчетПоСкладам
		И ЗначениеЗаполнено(Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Склад);
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ОтборПоДате", Дата);
	ПараметрыФормы.Вставить("ОтборПоДате", Дата);
	ПараметрыФормы.Вставить("ИзПеремещения", ИзПеремещения);
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ВызовИзРасходаТовара);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Номенклатура);	
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	НоменклатураОтвет = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(НоменклатураОтвет) Тогда
		Номенклатура = НоменклатураОтвет;	
		
		НоменклатураВыбрана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, Номенклатура);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		НоменклатураВыбрана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	НоменклатураВыбрана();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатурнаяГруппаПриИзмененииНаСервере();
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатурнаяГруппаПриИзмененииНаСервере(Знач ПриОткрытии = ЛОЖЬ)
	
	Элементы.ГруппаНоменклатуры.ТолькоПросмотр 	 = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		
		Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда		
			ГруппаНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);
			Элементы.ГруппаНоменклатуры.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОстаткам()
	
	Артикул  = Номенклатура.артикул;
	ШтрихКод = Номенклатура.ОсновнойШтрихКод;
	Наименование	= Номенклатура.Наименование;
	Комментарий		= Номенклатура.Комментарий;
	Производитель	= Номенклатура.Производитель;
	ГруппаНоменклатуры	= Номенклатура.Родитель;
	НоменклатурнаяГруппа= Номенклатура.НоменклатурнаяГруппа;
	
	Если НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
		ШтрихКод = Номенклатура.ОсновнойШтрихКод;
	КонецЕсли;	
	
	Если УчетПоСкладам 
		И ЗначениеЗаполнено(склад)
		И ЗначениеЗаполнено(номенклатура) Тогда
		
		ОстатокНаСкладе = ОбщийМодульСервер.ПолучитьОстатокТовара(номенклатура, Склад, Дата, ИСТИНА);  		
		ОстатокПосле 	= ОстатокНаСкладе - Количество;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Знач НоваяНоменклатурнаяГруппа = ЛОЖЬ)
	
	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Счетчик = 1;
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(НоменклатурнаяГруппа);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Если счетчик <= 10 Тогда
						НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДопРеквизит.ДополнительныйРеквизит);
						
						Выполнить(" ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");
						
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");
						
						ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
						Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ");");
						
						Если НоваяНоменклатурнаяГруппа 
							И НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = типзнч(ДопРеквизит.ЗначениеПоУмолчанию)  Тогда
							
							Выполнить(" РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = ДопРеквизит.ЗначениеПоУмолчанию;");
						КонецЕсли;	
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
				КонецЦикла;	
			КонецЕсли;
			
			Пока счетчик <= 10 Цикл
				Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ЛОЖЬ;");
				
				Если НоваяНоменклатурнаяГруппа Тогда
					Выполнить(" РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = Неопределено;");
				КонецЕсли;
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстЗапроса()
	
	ОбновитьТекстЗапросаНаСервере();
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗапросаНаСервере()
	
	Если ИспользоватьПредставлениеТоваровКонтрагентами
		И (НЕ ПустаяСтрока(Наименование) ИЛИ НЕ ПустаяСтрока(Артикул)) ТОгда
		
		ИспользуетсяПредставлениеКонтрагентов = ИСТИНА;
	Иначе
		ИспользуетсяПредставлениеКонтрагентов = ЛОЖЬ;
	КонецЕсли;
	
	ИспользоватьКлючиУчета = ЛОЖЬ;
	Если ЕстьКлючиУчета Тогда
		
		УсловияПоКлючамУчета = Новый ТаблицаЗначений;
		УсловияПоКлючамУчета.Колонки.Добавить("КлючУчета");
		УсловияПоКлючамУчета.Колонки.Добавить("ЗначениеКлючаУчета");
		УсловияПоКлючамУчета.Колонки.Добавить("ЗначениеСтрока");
		УсловияПоКлючамУчета.Колонки.Добавить("ЗначениеЧисло");
		УсловияПоКлючамУчета.Колонки.Добавить("ЗначениеДата");
		УсловияПоКлючамУчета.Колонки.Добавить("ЗначениеБулево");
		
		НомерКлюча = 1;
		Для Каждого СтрокаКлюча Из КлючиУчета Цикл
			ЕстьКлюч = ЛОЖЬ;
			
			Выполнить(" ЕстьКлюч = ЗначениеЗаполнено(ЗначениеКлючаУчета" + НомерКлюча + ");");
			
			Если СтрокаКлюча.Значение.ИспользуютсяДополнительныеПараметрыЗначений Тогда
				Выполнить(" ЕстьКлюч = ЕстьКлюч ИЛИ ЗначениеЗаполнено(ЗначениеПараметраКлючаУчетаСтрока" + НомерКлюча + ");");
				Выполнить(" ЕстьКлюч = ЕстьКлюч ИЛИ ЗначениеЗаполнено(ЗначениеПараметраКлючаУчетаДата" + НомерКлюча + ");");
				Выполнить(" ЕстьКлюч = ЕстьКлюч ИЛИ ЗначениеЗаполнено(ЗначениеПараметраКлючаУчетаЧисло" + НомерКлюча + ");");
				Выполнить(" ЕстьКлюч = ЕстьКлюч ИЛИ ЗначениеПараметраКлючаУчетаБулево" + НомерКлюча + ";");	
			КонецЕсли;
			
			Если ЕстьКлюч Тогда
				ИспользоватьКлючиУчета = ИСТИНА;
				СтрокаУсловий = УсловияПоКлючамУчета.Добавить();
				СтрокаУсловий.КлючУчета = СтрокаКлюча.Значение;
				Выполнить(" СтрокаУсловий.ЗначениеКлючаУчета = ЗначениеКлючаУчета" + НомерКлюча + ";");
				
				Если СтрокаКлюча.Значение.ИспользуютсяДополнительныеПараметрыЗначений Тогда
					Выполнить(" СтрокаУсловий.ЗначениеСтрока = ЗначениеПараметраКлючаУчетаСтрока" + НомерКлюча + ";");
					Выполнить(" СтрокаУсловий.ЗначениеДата = ЗначениеПараметраКлючаУчетаДата" + НомерКлюча + ";");
					Выполнить(" СтрокаУсловий.ЗначениеЧисло = ЗначениеПараметраКлючаУчетаЧисло" + НомерКлюча + ";");
					Выполнить(" СтрокаУсловий.ЗначениеБулево = ЗначениеПараметраКлючаУчетаБулево" + НомерКлюча + ";");	
				КонецЕсли;
			КонецЕсли;
			
			НомерКлюча = НомерКлюча + 1;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапросаПоПредставлениямКонтрагентов = "";
	
	ДобавкаКЗапросу = "";
	ДобавкаКЗапросуПК = "";
	Если ИспользоватьКлючиУчета Тогда
		ДобавкаКЗапросу = " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеКлючиУчетаНоменклатуры КАК СвязанныеКлючиУчетаНоменклатуры
		| ПО СправочникНоменклатура.Ссылка = СвязанныеКлючиУчетаНоменклатуры.Номенклатура ";
		
		ДобавкаКЗапросуПК = " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеКлючиУчетаНоменклатуры КАК СвязанныеКлючиУчетаНоменклатуры
		| ПО ПредставлениеТоваровКонтрагентами.Номенклатура = СвязанныеКлючиУчетаНоменклатуры.Номенклатура ";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(Первые = 0, "", " ПЕРВЫЕ " + СокрЛП(Первые)) + " 
	|	СправочникНоменклатура.Ссылка,
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.НоменклатурнаяГруппа,
	|	" + ?(СОстатками, " ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) ", "0") + " КАК КоличествоОстаток 
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|	" + ?(СОстатками, "	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|			ТоварыОстатки.Номенклатура КАК Номенклатура
	|		ИЗ
	|			РегистрНакопления.Товары.Остатки(
	|					&Дата,
	|					&НетСклад
	|						ИЛИ Склад = &Склад) КАК ТоварыОстатки) КАК ВложенныйЗапрос
	|		ПО СправочникНоменклатура.Ссылка = ВложенныйЗапрос.Номенклатура ", " ") + ДобавкаКЗапросу + "
	|ГДЕ НЕ СправочникНоменклатура.ЭтоГруппа И
	|	((&НетАртикул
	|			ИЛИ СправочникНоменклатура.Артикул = &Артикул)
	|	И (&НетГруппы
	|			ИЛИ СправочникНоменклатура.Ссылка В ИЕРАРХИИ (&ТутГруппа))
	|	И (&НетПроизводитель
	|			ИЛИ СправочникНоменклатура.Производитель = &Производитель)
	|	И (&НетНаименование
	|			ИЛИ СправочникНоменклатура.Наименование ПОДОБНО &Наименование)
	|	И (&НетКомментарий
	|			ИЛИ СправочникНоменклатура.Комментарий ПОДОБНО &Комментарий)
	|	И (&НетНаименование
	|			ИЛИ СправочникНоменклатура.НаименованиеДляПечати ПОДОБНО &Наименование)
	| " + ?(ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп, " И (&НетНоменклатурнаяГруппа
	|			ИЛИ СправочникНоменклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа) ", "") + "
	|	И (&НетОсновнойШтрихКод
	|			ИЛИ СправочникНоменклатура.ОсновнойШтрихКод ПОДОБНО &ОсновнойШтрихКод) ";
	
	
	Если ИспользуетсяПредставлениеКонтрагентов Тогда
		
		ТекстЗапросаПоПредставлениямКонтрагентов = "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(Первые = 0, "", " ПЕРВЫЕ " + СокрЛП(Первые)) + "
		|	ПредставлениеТоваровКонтрагентами.Номенклатура,
		|	ПредставлениеТоваровКонтрагентами.Номенклатура.Родитель,
		|	ПредставлениеТоваровКонтрагентами.Номенклатура.НоменклатурнаяГруппа,
		|	" + ?(СОстатками, " ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) ", "0") + "
		|ИЗ
		|	РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
		|	" + ?(СОстатками, "	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|			ТоварыОстатки.Номенклатура КАК Номенклатура
		|		ИЗ
		|			РегистрНакопления.Товары.Остатки(
		|					&Дата,
		|					&НетСклад
		|						ИЛИ Склад = &Склад) КАК ТоварыОстатки) КАК ВложенныйЗапрос
		|		ПО ПредставлениеТоваровКонтрагентами.Номенклатура = ВложенныйЗапрос.Номенклатура ", " ") + ДобавкаКЗапросуПК + "
		|ГДЕ  НЕ ПредставлениеТоваровКонтрагентами.Номенклатура.ЭтоГруппа И
		|	((ПредставлениеТоваровКонтрагентами.ЗначениеПредставления ПОДОБНО &Наименование ИЛИ ПредставлениеТоваровКонтрагентами.ЗначениеПредставления = &Артикул)
		|	И (ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик
		|			ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель
		|			ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель2
		|			ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель3)
		|	И ((&НетГруппы
		|			ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура В ИЕРАРХИИ (&ТутГруппа))
		|	И (&НетПроизводитель
		|			ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.Производитель = &Производитель)
		|	И (&НетКомментарий
		|			ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.Комментарий ПОДОБНО &Комментарий)
		| " + ?(ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп, " И (&НетНоменклатурнаяГруппа
		|			ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа) ", "") + "
		|	И (&НетОсновнойШтрихКод
		|			ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.ОсновнойШтрихКод ПОДОБНО &ОсновнойШтрихКод)
		|	И (ПредставлениеТоваровКонтрагентами.Поле = &ПолеНаименование
		|	ИЛИ ПредставлениеТоваровКонтрагентами.Поле = &ПолеНаименованиеДляПечати
		|    ИЛИ ПредставлениеТоваровКонтрагентами.Поле = &ПолеАртикул)) ";	
	КонецЕсли;
	
	НаименованияДополнительныхРеквизитов = Неопределено;
	
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		И ЗначениеЗаполнено(НоменклатурнаяГруппа)
		И ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		
		НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(НоменклатурнаяГруппа);
		Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
			Счетчик = 1;
			Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
				
				Если счетчик <= 10 Тогда					
					СокрЛПсч = СокрЛП(счетчик);
					
					ЭтоСтрока = ЛОЖЬ;
					Выполнить(" ЭтоСтрока = ТипЗнч(РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") = Тип(""Строка"");");					
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И (&НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + " ИЛИ СправочникНоменклатура.РеквизитНоменклатурнойГруппы" + СокрЛПсч + ?(ЭтоСтрока, " ПОДОБНО ", " = ") + "&РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") ";
					
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + Символы.ПС + " И (&НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + " ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.РеквизитНоменклатурнойГруппы" + СокрЛПсч + ?(ЭтоСтрока, " ПОДОБНО ", " = ") + "&РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") ";
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			Пока счетчик <= 10 Цикл
				СокрЛПсч = СокрЛП(счетчик);
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И (&НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + " ИЛИ СправочникНоменклатура.РеквизитНоменклатурнойГруппы" + СокрЛПсч + " = " + "&РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") ";
				
				ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + Символы.ПС + " И (&НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + " ИЛИ ПредставлениеТоваровКонтрагентами.Номенклатура.РеквизитНоменклатурнойГруппы" + СокрЛПсч + " = " + "&РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") ";
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;       	
	КонецЕсли;
	
	Если ИспользоватьКлючиУчета Тогда
		
		НомерУсловия = 1;
		Для Каждого УсловиеПоКлючам Из УсловияПоКлючамУчета Цикл
			
			ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.КлючУчета = &КлючУчета" + НомерУсловия;
			
			Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеКлючаУчета) Тогда
				Если УсловиеПоКлючам.КлючУчета.ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета ПОДОБНО (&ЗначениеКлючаУчета" + НомерУсловия + ") ";
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета ПОДОБНО (&ЗначениеКлючаУчета" + НомерУсловия + ") ";
				Иначе
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета = &ЗначениеКлючаУчета" + НомерУсловия + " ";
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета = &ЗначениеКлючаУчета" + НомерУсловия + " ";
				КонецЕсли;	
			КонецЕсли;
			
			Если УсловиеПоКлючам.КлючУчета.ИспользуютсяДополнительныеПараметрыЗначений Тогда
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеСтрока) Тогда
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрСтрока ПОДОБНО (&ЗначениеПараметраСтрока" + НомерУсловия + ") ";	
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрСтрока ПОДОБНО (&ЗначениеПараметраСтрока" + НомерУсловия + ") ";
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеЧисло) Тогда
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрЧисло = &ЗначениеПараметраЧисло" + НомерУсловия + " ";	
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрЧисло = &ЗначениеПараметраЧисло" + НомерУсловия + " ";	
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеДата) Тогда
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаНачала <= &ЗначениеПараметраДата"  + НомерУсловия + " ";	
					ТекстЗапроса = ТекстЗапроса + "	И ВЫБОР КОГДА НЕ СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаОкончания = &ПустаяДата Тогда СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаОкончания >= &ЗначениеПараметраДата"  + НомерУсловия + " ИНАЧЕ ИСТИНА КОНЕЦ ";
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + " И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаНачала <= &ЗначениеПараметраДата"  + НомерУсловия + " ";	
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И ВЫБОР КОГДА НЕ СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаОкончания = &ПустаяДата Тогда СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрДатаОкончания >= &ЗначениеПараметраДата"  + НомерУсловия + " ИНАЧЕ ИСТИНА КОНЕЦ ";
				КонецЕсли;
				Если СтрокаУсловий.ЗначениеБулево Тогда
					ТекстЗапроса = ТекстЗапроса + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрБулево ";
					ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + "	И СвязанныеКлючиУчетаНоменклатуры.ЗначениеКлючаУчета.ПараметрБулево ";
				КонецЕсли;
			КонецЕсли;
			
			НомерУсловия = НомерУсловия + 1;
		КонецЦикла;	
	КонецЕсли;
	
	Если ТолькоСОстатками Тогда
		ТекстЗапроса = ТекстЗапроса + ") И (&НетКоличество ИЛИ ВложенныйЗапрос.КоличествоОстаток > 0)";
		ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + ") И (&НетКоличество ИЛИ ВложенныйЗапрос.КоличествоОстаток > 0) ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ")";
		ТекстЗапросаПоПредставлениямКонтрагентов = ТекстЗапросаПоПредставлениямКонтрагентов + ")";
	КонецЕсли;
	
	Если ИспользуетсяПредставлениеКонтрагентов Тогда		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоПредставлениямКонтрагентов;
	КонецЕсли;		
	
	ЗапросНоменклатураДляВыбора = Новый Запрос;
	ЗапросНоменклатураДляВыбора.Текст = ТекстЗапроса;
		
	Если ИспользуетсяПредставлениеКонтрагентов Тогда		
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("ПолеНаименование", ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование"));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("ПолеНаименованиеДляПечати", ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати"));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("ПолеАртикул", ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("КлиентПоставщикРодитель", КлиентПоставщик.Родитель);
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("КлиентПоставщикРодитель2", КлиентПоставщик.Родитель.Родитель);
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("КлиентПоставщикРодитель3", КлиентПоставщик.Родитель.Родитель.Родитель);
	КонецЕсли;		
	
	Если ТолькоСОстатками Тогда
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетКоличество", НЕ ТолькоСОстатками);	
	КонецЕсли;
	
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		И ЗначениеЗаполнено(НоменклатурнаяГруппа)
		И ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		
		Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
			Счетчик = 1;
			Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
				
				Если счетчик <= 10 Тогда					
					СокрЛПсч = СокрЛП(счетчик);
					
					ЭтоСтрока = ЛОЖЬ;
					Выполнить(" ЭтоСтрока = ТипЗнч(РеквизитНоменклатурнойГруппы" + СокрЛПсч + ") = Тип(""Строка"");");					
					Выполнить(" ЗапросНоменклатураДляВыбора.УстановитьПараметр(""НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + """, НЕ ЗначениеЗаполнено(РеквизитНоменклатурнойГруппы" + СокрЛПсч + "));");
					Выполнить(" ЗапросНоменклатураДляВыбора.УстановитьПараметр(""РеквизитНоменклатурнойГруппы" + СокрЛПсч + """, ""%"" + РеквизитНоменклатурнойГруппы" + СокрЛПсч + " + ""%"");");			
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			Пока счетчик <= 10 Цикл
				СокрЛПсч = СокрЛП(счетчик);
				
				Выполнить(" ЗапросНоменклатураДляВыбора.УстановитьПараметр(""НетРеквизитНоменклатурнойГруппы" + СокрЛПсч + """, ИСТИНА);");
				Выполнить(" ЗапросНоменклатураДляВыбора.УстановитьПараметр(""РеквизитНоменклатурнойГруппы" + СокрЛПсч + """, ЛОЖЬ);");			
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;       	
	КонецЕсли;
	
	Если ИспользоватьКлючиУчета Тогда
		НомерУсловия = 1;
		Для Каждого УсловиеПоКлючам Из УсловияПоКлючамУчета Цикл			
			
			ЗапросНоменклатураДляВыбора.УстановитьПараметр("КлючУчета" + НомерУсловия, УсловиеПоКлючам.КлючУчета);	
			
			Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеКлючаУчета) Тогда				
				ЗапросНоменклатураДляВыбора.УстановитьПараметр("ЗначениеКлючаУчета" + НомерУсловия, УсловиеПоКлючам.ЗначениеКлючаУчета);	
			КонецЕсли;
			
			Если УсловиеПоКлючам.КлючУчета.ИспользуютсяДополнительныеПараметрыЗначений Тогда
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеСтрока) Тогда
					ЗапросНоменклатураДляВыбора.УстановитьПараметр("ЗначениеПараметраСтрока" + НомерУсловия, СтрокаУсловий.ЗначениеСтрока);	
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеЧисло) Тогда
					ЗапросНоменклатураДляВыбора.УстановитьПараметр("ЗначениеПараметраЧисло" + НомерУсловия, СтрокаУсловий.ЗначениеЧисло);	
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаУсловий.ЗначениеДата) Тогда
					ЗапросНоменклатураДляВыбора.УстановитьПараметр("ЗначениеПараметраДата" + НомерУсловия, СтрокаУсловий.ЗначениеДата);	
					ЗапросНоменклатураДляВыбора.УстановитьПараметр("ПустаяДата", '00010101');
				КонецЕсли;
			КонецЕсли;
			
			НомерУсловия = НомерУсловия + 1;
		КонецЦикла;	
	КонецЕсли;
	
	Если СОстатками Тогда
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("Дата", 		?(ЗначениеЗаполнено(Дата), Дата, ОбщийМодульСервисСервер.ПользователяТекущаяДата()));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетСклад", 	НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ИЛИ НЕ ЗначениеЗаполнено(Склад));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("Склад", 	Склад);	
	КонецЕсли;
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетАртикул", 		НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") ИЛИ ПустаяСтрока(Артикул));
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("Артикул", 			"%" + Артикул + "%");
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетНаименование", 	ПустаяСтрока(Наименование));
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("Наименование", 		"%" + Наименование + "%");
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетГруппы", 		НЕ ЗначениеЗаполнено(ГруппаНоменклатуры));
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("ТутГруппа", 		ГруппаНоменклатуры);
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетПроизводитель",  НЕ ЗначениеЗаполнено(Производитель));
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("Производитель", 	Производитель);	
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетКомментарий", 	ПустаяСтрока(Комментарий));
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("Комментарий", 		"%" + Комментарий + "%");
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("ОсновнойШтрихКод", 	"%" + ШтрихКод + "%");
	ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетОсновнойШтрихКод", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") ИЛИ НЕ ЗначениеЗаполнено(ШтрихКод));
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп Тогда
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("НетНоменклатурнаяГруппа", НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа));
		ЗапросНоменклатураДляВыбора.УстановитьПараметр("НоменклатурнаяГруппа", 	  НоменклатурнаяГруппа);
	КонецЕсли;
	
	Элементы.НоменклатураДляВыбораКоличествоОстаток.Видимость = СОстатками;
	НоменклатураДляВыбора.Загрузить(ЗапросНоменклатураДляВыбора.Выполнить().Выгрузить());
	
КонецПроцедурЫ

&НаСервере
Процедура ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Если НЕ ПустаяСтрока(ТекКод) тогда
		
		РезультатОбработки = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА);
		
		Если ЗначениеЗаполнено(РезультатОбработки) Тогда
			ДобавитьПозициюНоменклатуры(РезультатОбработки);			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		КонецЕсли;               	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ШтрихКод = Параметр[ 0 ];
			Иначе
				ШтрихКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаСервере(ШтрихКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПересчетЦены()
	
	Цена 	   = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ИСТИНА, Количество, , , Цена, , , ЕдиницаИзмерения);
	Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
	Сумма 	   = Цена * Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                          // ПРИ ЗАКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                     // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьШтрихКоды тогда 		
		ЭтаФорма.ТекущийЭлемент = Элементы.ШтрихКод;
		
		Если ИспользоватьПодключаемоеОборудование И 
			МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			
			ОписаниеОшибки = "" ;
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
			
			Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки ;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Номенклатура;
	КонецЕсли;
	
	Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)Тогда
		
		НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
		НоменклатурнаяГруппаПриИзмененииНаСервере(ИСТИНА);
	КонецЕсли;
	
	Элементы.ВидЦен.ТолькоПросмотр = ИспользоватьСложныйМеханизмЦен И БлокВидаЦенИЦены;
	Элементы.Цена.ТолькоПросмотр   = БлокВидаЦенИЦены;
	Элементы.Сумма.ТолькоПросмотр  = БлокВидаЦенИЦены;
	
	Если Первые = 0 Тогда
		Первые = 24;
	КонецЕсли;
	
	ЗадатьЗначенияКлючейУчета();
	ОбновитьДанныеПоОстаткам();
	
	ОбновитьТекстЗапросаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)      // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда	
		
		ИспользоватьПодключаемоеОборудование = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьШтрихКоды 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
		ВызовИзРасходаТовара 				 = Параметры.ВызовИзРасходаТовара;
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		КлиентПоставщик 					 = Параметры.КлиентПоставщик;
		ИспользоватьПредставлениеТоваровКонтрагентами = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") И ЗначениеЗаполнено(КлиентПоставщик);
		ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		
		Элементы.КлиентПоставщик.Видимость = ИспользоватьПредставлениеТоваровКонтрагентами;
		Элементы.ПоискПоНаименованиюИАртикулуУчитываетПредставлениеНоменклатурыКонтрагентами.Видимость = ИспользоватьПредставлениеТоваровКонтрагентами;
		
		ВидЦен = Параметры.ВидЦен;      			
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");	
		КонецЕсли;
		
		Дата = Параметры.Дата;
		Если Дата = '00010101000000' Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		БлокВидаЦенИЦены = Параметры.БлокВидаЦенИЦены ИЛИ ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены");
		Количество 		 = 1;	
		УчетПоСкладам 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");		
		
		Если НЕ параметры.БезКоличества Тогда
			Если ЗначениеЗаполнено(Параметры.Склад) Тогда
				Склад = Параметры.Склад;
			Иначе
				Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию");
			КонецЕсли;
			
		Иначе
			Элементы.Склад.Видимость = ЛОЖЬ;
		КонецЕсли;	
		
		БезКоличества = параметры.БезКоличества;
		
		Если параметры.БезКоличества Тогда			
			Элементы.Количество.Видимость 	= ЛОЖЬ;
			Элементы.Склад.Видимость 		= ЛОЖЬ;
			Элементы.ОстатокПосле.Видимость = ЛОЖЬ;
			
		ИначеЕсли параметры.ЭтоДобавка Тогда
			Элементы.ОстатокПосле.Видимость = ЛОЖЬ;			
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Количество, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстатокНаСкладе, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстатокПосле, , ИСТИНА);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НоменклатураДляВыбораКоличествоОстаток, , ИСТИНА);
		
		ОбновитьПоляКлючейУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляКлючейУчета()
	
	ЕстьКлючиУчета = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСписки") Тогда
		
		КлючиУчета.Очистить();
		
		ТаблицаКлючей = Новый ТаблицаЗначений;
		ТаблицаКлючей.Колонки.Добавить("НомерКлюча");
		ТаблицаКлючей.Колонки.Добавить("Наименование");
		ТаблицаКлючей.Колонки.Добавить("ТипДополнительногоРеквизита");
		ТаблицаКлючей.Колонки.Добавить("КлючУчета");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ДополнительныеРеквизиты.Ссылка,
		|	ДополнительныеРеквизиты.ТипДополнительногоРеквизита КАК ТипДополнительногоРеквизита
		|ИЗ Справочник.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ ДополнительныеРеквизиты.ЭтоКлючУчетаНоменклатуры = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			НомерКлюча = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаТаблицыКлючей = ТаблицаКлючей.Добавить();
				СтрокаТаблицыКлючей.НомерКлюча = НомерКлюча;
				НомерКлюча = НомерКлюча + 1;
				СтрокаТаблицыКлючей.Наименование = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаДетальныеЗаписи.Ссылка);
				СтрокаТаблицыКлючей.ТипДополнительногоРеквизита = ВыборкаДетальныеЗаписи.ТипДополнительногоРеквизита;
				СтрокаТаблицыКлючей.КлючУчета = ВыборкаДетальныеЗаписи.Ссылка;
				КлючиУчета.Добавить(ВыборкаДетальныеЗаписи.ссылка);
			КонецЦикла;
			
			ГруппаПодбораПоКлючамУчета = Элементы.ГруппаПодбораПоКлючамУчета;
			
			Для Каждого СтрокаТаблицыКлючей Из ТаблицаКлючей Цикл
				
				ГруппаКлюча = Элементы.Найти("ГрупаКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
				
				Если ГруппаКлюча = Неопределено Тогда					
					
					ГруппаКлюча = Элементы.Добавить("ГрупаКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ГруппаФормы"), ГруппаПодбораПоКлючамУчета);
					ГруппаКлюча.Заголовок = СтрокаТаблицыКлючей.Наименование;
					ГруппаКлюча.Вид = видгруппыформы.ОбычнаяГруппа;
					ГруппаКлюча.Поведение   = ПоведениеОбычнойГруппы.Свертываемая;
					ГруппаКлюча.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаКлюча.Отображение = ОтображениеОбычнойГруппы.Нет;					
					
					ЗначениеКлючаУчета = Неопределено;					
					ТипДополнительногоРеквизита = СтрокаТаблицыКлючей.ТипДополнительногоРеквизита;
					
					Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Булево Тогда
						ОписаниеТипаКлюча = Новый ОписаниеТипов("Булево");
						ЗначениеКлючаУчета = СтрокаТаблицыКлючей.КлючУчета.ЗначениеПоУмолчанию;
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
						КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
						ОписаниеТипаКлюча = Новый ОписаниеТипов("Дата", , , , , КвалификаторыДаты);
						ЗначениеКлючаУчета = '00010101';
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
						ОписаниеТипаКлюча = Новый ОписаниеТипов("СправочникСсылка.НаборЗначенийДополнительныхРеквизитов");
						ЗначениеКлючаУчета = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаДокумент Тогда
						ОписаниеТипаКлюча = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника Тогда
						ОписаниеТипаКлюча = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
						КвалификаторыСтроки = Новый КвалификаторыСтроки(150);
						ЗначениеКлючаУчета = "";
						ОписаниеТипаКлюча = Новый ОписаниеТипов("Строка", , , , КвалификаторыСтроки);
					ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным") Тогда
							КвалификаторыЧисла = Новый КвалификаторыЧисла(15, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"), ДопустимыйЗнак.Любой);
						Иначе
							КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
						КонецЕсли;						
						ОписаниеТипаКлюча = Новый ОписаниеТипов("Число", , , КвалификаторыЧисла);
						ЗначениеКлючаУчета = 0;
					КонецЕсли;
					
					НовыйРеквизит 	 = Новый РеквизитФормы("ЗначениеКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюча, "", СтрокаТаблицыКлючей.Наименование);
					МассивРеквизитов = Новый Массив;
					МассивРеквизитов.Добавить(НовыйРеквизит);
					ИзменитьРеквизиты(МассивРеквизитов);
					
					НовыйЭлемент = Элементы.Добавить("ПолеКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ГруппаКлюча);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
					НовыйЭлемент.ПутьКДанным 	= "ЗначениеКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча;
					НовыйЭлемент.ВыбиратьТип 	= ЛОЖЬ;
					НовыйЭлемент.КнопкаОчистки 	= ИСТИНА;
					НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					НовыйЭлемент.Заголовок = СтрокаТаблицыКлючей.Наименование;
					НовыйЭлемент.Подсказка = СтрокаТаблицыКлючей.Наименование;
					НовыйЭлемент.УстановитьДействие("ПриИзменении", "НоменклатураВыбранаНаКлиенте");
					НовыйЭлемент.УстановитьДействие("Очистка", "НоменклатураВыбранаНаКлиенте");
					
					Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
						
						ОписаниеТипаКлюч = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеРеквизиты");
						НовыйРеквизит 	 = Новый РеквизитФормы("КлючУчета" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюч, "", СтрокаТаблицыКлючей.Наименование);
						МассивРеквизитов = Новый Массив;						
						МассивРеквизитов.Добавить(НовыйРеквизит);
						ИзменитьРеквизиты(МассивРеквизитов);
						
						НоваяСвязь  = Новый СвязьПараметраВыбора("Отбор.Владелец", "КлючУчета" + СтрокаТаблицыКлючей.НомерКлюча);
						НовыйМассив = Новый Массив();
						НовыйМассив.Добавить(НоваяСвязь);
						НовыеСвязи  = Новый ФиксированныйМассив(НовыйМассив);
						НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
						
						Если СтрокаТаблицыКлючей.КлючУчета.ИспользуютсяДополнительныеПараметрыЗначений Тогда
							
							КвалификаторыСтроки = Новый КвалификаторыСтроки(150);
							ОписаниеТипаКлюча = Новый ОписаниеТипов("Строка", , , , КвалификаторыСтроки);
							НовыйРеквизит 	 = Новый РеквизитФормы("ЗначениеПараметраКлючаУчетаСтрока" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюча, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Значение описания"));
							МассивРеквизитов = Новый Массив;
							МассивРеквизитов.Добавить(НовыйРеквизит);
							ИзменитьРеквизиты(МассивРеквизитов);
							
							НовыйЭлемент = Элементы.Добавить("ПараметрСтрокаКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ГруппаКлюча);
							НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
							НовыйЭлемент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Описание");
							НовыйЭлемент.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Параметр Строка");
							НовыйЭлемент.ВыбиратьТип 	= ЛОЖЬ;
							НовыйЭлемент.КнопкаОчистки 	= ИСТИНА;
							НовыйЭлемент.ПутьКДанным 	= "ЗначениеПараметраКлючаУчетаСтрока" + СтрокаТаблицыКлючей.НомерКлюча;
							НовыйЭлемент.УстановитьДействие("ПриИзменении", "НоменклатураВыбранаНаКлиенте");
							НовыйЭлемент.УстановитьДействие("Очистка", "НоменклатураВыбранаНаКлиенте");	
							
							//	ГруппаИнтервала = Элементы.Добавить("ГрупаИнтервалаПараметровКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ГруппаФормы"), ГруппаКлюча);
							//ГруппаИнтервала.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Интервал");
							//ГруппаИнтервала.Вид = видгруппыформы.ОбычнаяГруппа;
							//ГруппаИнтервала.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
							//ГруппаИнтервала.ОтображатьЗаголовок = ЛОЖЬ;
							//
							КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
							ОписаниеТипаКлюча = Новый ОписаниеТипов("Дата", , , , , КвалификаторыДаты);
							НовыйРеквизит 	 = Новый РеквизитФормы("ЗначениеПараметраКлючаУчетаДата" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюча, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата"));
							МассивРеквизитов = Новый Массив;
							МассивРеквизитов.Добавить(НовыйРеквизит);
							ИзменитьРеквизиты(МассивРеквизитов);
							
							НовыйЭлемент = Элементы.Добавить("ПараметрДатаКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ГруппаКлюча);//Интервала);
							НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
							НовыйЭлемент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата");
							НовыйЭлемент.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата");
							Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПараметрыЗначенийДополнительныхРеквизитовДатыПредставлятьВГодах") Тогда
								НовыйЭлемент.ФорматРедактирования = "ДФ=гггг";	
							Иначе
								НовыйЭлемент.ФорматРедактирования = "ДФ='dd.MM.yy ЧЧ:мм'";	
							КонецЕсли;
							НовыйЭлемент.ВыбиратьТип 	= ЛОЖЬ;
							НовыйЭлемент.КнопкаОчистки 	= ИСТИНА;
							НовыйЭлемент.ПутьКДанным 	= "ЗначениеПараметраКлючаУчетаДата" + СтрокаТаблицыКлючей.НомерКлюча;
							НовыйЭлемент.УстановитьДействие("ПриИзменении", "НоменклатураВыбранаНаКлиенте");
							НовыйЭлемент.УстановитьДействие("Очистка", "НоменклатураВыбранаНаКлиенте");	
							
							Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным") Тогда
								КвалификаторыЧисла = Новый КвалификаторыЧисла(15, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"), ДопустимыйЗнак.Любой);
							Иначе
								КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
							КонецЕсли;						
							ОписаниеТипаКлюча = Новый ОписаниеТипов("Число", , , КвалификаторыЧисла);
							НовыйРеквизит 	 = Новый РеквизитФормы("ЗначениеПараметраКлючаУчетаЧисло" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюча, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число"));
							МассивРеквизитов = Новый Массив;
							МассивРеквизитов.Добавить(НовыйРеквизит);
							ИзменитьРеквизиты(МассивРеквизитов);
							
							НовыйЭлемент = Элементы.Добавить("ПараметрЧислоКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ГруппаКлюча);
							НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
							НовыйЭлемент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число");
							НовыйЭлемент.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Параметр Число");
							НовыйЭлемент.ВыбиратьТип 	= ЛОЖЬ;
							НовыйЭлемент.КнопкаОчистки 	= ИСТИНА;
							НовыйЭлемент.ПутьКДанным 	= "ЗначениеПараметраКлючаУчетаЧисло" + СтрокаТаблицыКлючей.НомерКлюча;
							НовыйЭлемент.УстановитьДействие("ПриИзменении", "НоменклатураВыбранаНаКлиенте");
							НовыйЭлемент.УстановитьДействие("Очистка", "НоменклатураВыбранаНаКлиенте");	
							
							ОписаниеТипаКлюча = Новый ОписаниеТипов("Булево");
							НовыйРеквизит 	 = Новый РеквизитФормы("ЗначениеПараметраКлючаУчетаБулево" + СтрокаТаблицыКлючей.НомерКлюча, ОписаниеТипаКлюча, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да / Нет"));
							МассивРеквизитов = Новый Массив;
							МассивРеквизитов.Добавить(НовыйРеквизит);
							ИзменитьРеквизиты(МассивРеквизитов);
							
							НовыйЭлемент = Элементы.Добавить("ПараметрБулевоКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ГруппаКлюча);
							НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
							НовыйЭлемент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да / Нет");
							НовыйЭлемент.Подсказка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Параметр Булево");
							НовыйЭлемент.ПутьКДанным = "ЗначениеПараметраКлючаУчетаБулево" + СтрокаТаблицыКлючей.НомерКлюча;
							НовыйЭлемент.УстановитьДействие("ПриИзменении", "НоменклатураВыбранаНаКлиенте");
							
						КонецЕсли;						
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;	
			
			ЕстьКлючиУчета = ИСТИНА;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначенияКлючейУчета()
	
	Если ЕстьКлючиУчета Тогда
		НомерКлюча = 1;
		Для Каждого СтрокаТаблицыКлючей Из КлючиУчета Цикл
			КлючУчета = СтрокаТаблицыКлючей.Значение;
			
			ЗначениеКлючаУчета = Неопределено;					
			ТипДополнительногоРеквизита = КлючУчета.ТипДополнительногоРеквизита;
			
			Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Булево Тогда
				ЗначениеКлючаУчета = СтрокаТаблицыКлючей.КлючУчета.ЗначениеПоУмолчанию;
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
				ЗначениеКлючаУчета = '00010101';
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
				ЗначениеКлючаУчета = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
				Выполнить(" КлючУчета" + НомерКлюча + " = КлючУчета;");
				
				Если КлючУчета.ИспользуютсяДополнительныеПараметрыЗначений Тогда
					Выполнить(" ЗначениеПараметраКлючаУчетаСтрока" + НомерКлюча + " = """";");
					Выполнить(" ЗначениеПараметраКлючаУчетаДата" + НомерКлюча + " = '00010101';");					
					Выполнить(" ЗначениеПараметраКлючаУчетаЧисло" + НомерКлюча + " = 0;");
					Выполнить(" ЗначениеПараметраКлючаУчетаБулево" + НомерКлюча + " = ЛОЖЬ;");
				КонецЕсли;
				
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаДокумент Тогда
				
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника Тогда
				
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
				ЗначениеКлючаУчета = "";						
			ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
				ЗначениеКлючаУчета = 0;
			КонецЕсли;
			
			Выполнить(" ЗначениеКлючаУчета" + НомерКлюча + " = ЗначениеКлючаУчета;");
			
			НомерКлюча = НомерКлюча + 1;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы10ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");	
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы1ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы2ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы3ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы4ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы5ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы6ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы7ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы8ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");	
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы9ПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	Если НЕ Количество = 0 тогда
		Цена = Сумма / Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОстаткамиПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	Сумма = Цена * Количество;
	
	Если БезКоличества Тогда
		этаформа.ТекущийЭлемент = Элементы.готово;	
	Иначе
		этаформа.ТекущийЭлемент = Элементы.Количество;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработатьПолученныйШКНаСервере(ШтрихКод);
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ОбработатьПолученныйШКНаСервере(ШтрихКод);
	НоменклатураВыбрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервыеПриИзменении(Элемент)
	
	Если Первые > 999 Тогда
		Первые = 0;
	КонецЕсли;
	
	ОбновитьТекстЗапросаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СОстаткамиПриИзменении(Элемент)
	ОбновитьТекстЗапросаНаСервере();
КонецПроцедуры
