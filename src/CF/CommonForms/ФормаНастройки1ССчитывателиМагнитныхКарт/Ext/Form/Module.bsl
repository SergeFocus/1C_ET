// sza131003-0328 : 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
// Процедура представляет обработчик события "Нажатие" кнопки
// "ОК" командной панели "ОсновныеДействияФормы".
// 
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ОК").
// 
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	НастроеноДорожек = 0;
	ДорожкаСПустымСуффиксом = ЛОЖЬ;
	времПараметрыДорожек = Новый Массив();

	Для Индекс = 1 По 3 Цикл
		Если ПараметрыДорожек[3 - Индекс].Использовать = ИСТИНА Тогда
			ДорожкаСПустымСуффиксом =
			    ДорожкаСПустымСуффиксом ИЛИ (ПараметрыДорожек[3 - Индекс].Суффикс = 0);
			НастроеноДорожек = НастроеноДорожек + 1;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ДорожкаСПустымСуффиксом Тогда
		Для Индекс = 1 По 3 Цикл
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("НомерДорожки", ПараметрыДорожек[Индекс - 1].НомерДорожки);
			НоваяСтрока.Вставить("Использовать", ПараметрыДорожек[Индекс - 1].Использовать);
			НоваяСтрока.Вставить("Префикс"     , ПараметрыДорожек[Индекс - 1].Префикс);
			НоваяСтрока.Вставить("Суффикс"     , ПараметрыДорожек[Индекс - 1].Суффикс);
			времПараметрыДорожек.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;

	Если НастроеноДорожек > 0 И Не ДорожкаСПустымСуффиксом Тогда
		Параметры.ПараметрыНастройки.Добавить(Порт,             "Порт");
		Параметры.ПараметрыНастройки.Добавить(Скорость,         "Скорость");
		Параметры.ПараметрыНастройки.Добавить(БитДанных,        "БитДанных");
		Параметры.ПараметрыНастройки.Добавить(СтопБит,          "СтопБит");
		Параметры.ПараметрыНастройки.Добавить(времПараметрыДорожек, "ПараметрыДорожек");
		Параметры.ПараметрыНастройки.Добавить(Модель,           "Модель");

		ОчиститьСообщения();
		Закрыть(КодВозвратаДиалога.ОК);
	ИначеЕсли НастроеноДорожек = 0 Тогда
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Необходимо указать использование хотя бы одной дорожки для считывателя");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли ДорожкаСПустымСуффиксом Тогда
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для каждой используемой дорожки должен быть указан суффикс, отличный от 0");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("ПараметрыДорожек", Новый Массив());
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьВерсиюДрайвера",
	                                                               ВходныеПараметры,
	                                                               ВыходныеПараметры,
	                                                               Идентификатор,
	                                                               времПараметрыУстройства) Тогда
		Драйвер        = ВыходныеПараметры[0];
		Версия         = ВыходныеПараметры[1];
		ВерсияИзБПО    = ВыходныеПараметры[2];
		ВерсияСтр      = ВыходныеПараметры[3];
		ВерсияИзБПОСтр = ВыходныеПараметры[4];
	Иначе
		Драйвер        = ВыходныеПараметры[2];
		Версия         = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не определена");
		ВерсияСтр      = 8000000;
		ВерсияИзБПОСтр = 8000000;
	КонецЕсли;

	Элементы.Драйвер.ЦветТекста = ?(Драйвер = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = ?(Версия  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не определена"), ЦветОшибки, ЦветТекста);
	
	Элементы.УстановитьДрайвер.Доступность = Не (Драйвер = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));

	// Проверка на соответствие номера версии драйвера в БПО и номера, который сообщает сам драйвер
	Если ВерсияИзБПОСтр > ВерсияСтр И ВерсияСтр > 8000000 Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установленная на компьютере версия драйвера устарела! Рекомендуется обновление до версии") + ":" + Символы.НПП + ВерсияИзБПО);
	КонецЕсли;
	
	// Начиная с версии 8.0.12.2 изменены названия некоторых свойств в объекте драйвера, а также добавлены новые
	Если ВерсияСтр < 8001202 Тогда
		НовыйИнтерфейс = ЛОЖЬ;
	Иначе
		НовыйИнтерфейс = ИСТИНА;
		Элементы.Порт.СписокВыбора.Добавить(0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клавиатура"));
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДорожекПриАктивизацииЯчейки(Элемент)

	Если (Элемент.ТекущийЭлемент.Имя = "Префикс"
	 Или Элемент.ТекущийЭлемент.Имя = "Суффикс")
	   И Элемент.ТекущийЭлемент.СписокВыбора.Количество() = 0 Тогда
		СпПараметрыДорожек = Элемент.ТекущийЭлемент.СписокВыбора;

		Для КодЭлемента = 0 По 127 Цикл
			СимволДорожки = "";
			Если КодЭлемента > 32 Тогда
				СимволДорожки = " ( " + Символ(КодЭлемента) + " )";
			ИначеЕсли КодЭлемента = 8 Тогда
				СимволДорожки = " (BACKSPACE)";
			ИначеЕсли КодЭлемента = 9 Тогда
				СимволДорожки = " (TAB)";
			ИначеЕсли КодЭлемента = 10 Тогда
				СимволДорожки = " (LF)";
			ИначеЕсли КодЭлемента = 13 Тогда
				СимволДорожки = " (CR)";
			ИначеЕсли КодЭлемента = 16 Тогда
				СимволДорожки = " (SHIFT)";
			ИначеЕсли КодЭлемента = 17 Тогда
				СимволДорожки = " (CONTROL)";
			ИначеЕсли КодЭлемента = 18 Тогда
				СимволДорожки = " (ALT)";
			ИначеЕсли КодЭлемента = 27 Тогда
				СимволДорожки = " (ESCAPE)";
			ИначеЕсли КодЭлемента = 32 Тогда
				СимволДорожки = " (SPACE)";
			КонецЕсли;
			СпПараметрыДорожек.Добавить(КодЭлемента, Строка(КодЭлемента) + СимволДорожки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
&НаКлиенте
Процедура ПортПриИзменении()

	Элементы.Скорость.Доступность   = Порт;
	Элементы.БитДанных.Доступность  = Порт;
	Элементы.СтопБит.Доступность    = Порт;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

// Процедура - обработчик события "Перед открытием" формы.
// 
// Параметры:
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение ИСТИНА, открытие формы выполнено не будет.
//                         Значение по умолчанию: ЛОЖЬ 
// 
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение ЛОЖЬ, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: ИСТИНА 
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьИнформациюОДрайвере();

	ПортПриИзменении();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("Идентификатор", Идентификатор);
	Заголовок = "СМК" + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;

	СпПорт = Элементы.Порт.СписокВыбора;
	
	Для Индекс = 1 По 32 Цикл
		СпПорт.Добавить(Индекс, "COM" + СокрЛП(Индекс));
	КонецЦикла;

	СпСкорость = Элементы.Скорость.СписокВыбора;
	СпСкорость.Добавить(110,    "110");
	СпСкорость.Добавить(300,    "300");
	СпСкорость.Добавить(600,    "600");
	СпСкорость.Добавить(1200,   "1200");
	СпСкорость.Добавить(2400,   "2400");
	СпСкорость.Добавить(4800,   "4800");
	СпСкорость.Добавить(9600,   "9600");
	СпСкорость.Добавить(14400,  "14400");
	СпСкорость.Добавить(19200,  "19200");
	СпСкорость.Добавить(38400,  "38400");
	СпСкорость.Добавить(56000,  "56000");
	СпСкорость.Добавить(57600,  "57600");
	СпСкорость.Добавить(115200, "115200");
	СпСкорость.Добавить(128000, "128000");
	СпСкорость.Добавить(256000, "256000");

	СпБитДанных = Элементы.БитДанных.СписокВыбора;
	Для Индекс = 1 По 8 Цикл
		СпБитДанных.Добавить(Индекс, СокрЛП(Индекс));
	КонецЦикла;

	СпСтопБит = Элементы.СтопБит.СписокВыбора;
	СпСтопБит.Добавить(0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("1 стоп-бит"));
	СпСтопБит.Добавить(1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("1.5 стоп-бита"));
	СпСтопБит.Добавить(2, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("2 стоп-бита"));

	времПорт      = Неопределено;
	времСкорость  = Неопределено;
	времБитДанных = Неопределено;
	времСтопБит   = Неопределено;
	времМодель    = Неопределено;

	Параметры.Свойство("Порт",      времПорт);
	Параметры.Свойство("Скорость",  времСкорость);
	Параметры.Свойство("БитДанных", времБитДанных);
	Параметры.Свойство("СтопБит",   времСтопБит);
	Параметры.Свойство("Модель",    времМодель);

	Порт        = ?(времПорт      = Неопределено,         1, времПорт);
	Скорость    = ?(времСкорость  = Неопределено,      9600, времСкорость);
	БитДанных   = ?(времБитДанных = Неопределено,         8, времБитДанных);
	СтопБит     = ?(времСтопБит   = Неопределено,         0, времСтопБит);
	Модель      = ?(времМодель    = Неопределено, Элементы.Модель.СписокВыбора[0], времМодель);

	времПараметрыДорожек = Неопределено;
	Если НЕ Параметры.Свойство("ПараметрыДорожек", времПараметрыДорожек) Тогда
		времПараметрыДорожек = Новый Массив();
		Для Индекс = 1 По 3 Цикл
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("НомерДорожки", Индекс);
			НоваяСтрока.Вставить("Префикс"     , 0);
			НоваяСтрока.Вставить("Суффикс"     , ?(Индекс = 2, 13, 0));
			НоваяСтрока.Вставить("Использовать", ?(Индекс = 2, ИСТИНА, ЛОЖЬ));

			времПараметрыДорожек.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаДорожки Из времПараметрыДорожек Цикл
		НоваяСтрока = ПараметрыДорожек.Добавить();
		НоваяСтрока.НомерДорожки = СтрокаДорожки.НомерДорожки;
		НоваяСтрока.Префикс      = СтрокаДорожки.Префикс;
		НоваяСтрока.Суффикс      = СтрокаДорожки.Суффикс;
		НоваяСтрока.Использовать = СтрокаДорожки.Использовать;
	КонецЦикла;

	Элементы.ТестУстройства.Видимость          = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость       = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);

КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("ПараметрыДорожек", Новый Массив());
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                          ВходныеПараметры,
	                                                          ВыходныеПараметры,
	                                                          Идентификатор,
	                                                          времПараметрыУстройства);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)

	МенеджерОборудованияКлиент.УстановитьДрайвер(Идентификатор);

	ОбновитьИнформациюОДрайвере();

КонецПроцедуры



