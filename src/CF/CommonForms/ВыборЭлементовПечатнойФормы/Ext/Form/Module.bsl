// sza150629-0106 НеСохранятьВыборДокументов
// sza150615-1608
// sza150414-0250 СФРФ
// sza141228-1432
// sza140524-2351
// sza140210-0224

&НаСервере
Процедура ЗаписатьНомерНН()

	Если ПечататьОригинал Тогда
		Попытка
			ОрганизацияОбъект = Организация.ПолучитьОбъект();
			ОрганизацияОбъект.ПоследнийНомерНалоговойНакладной = ПоследнийНомерНалоговойНакладной;
			ОрганизацияОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭтиКоманды(Команда)

	СтруктураОтвета = Новый Структура;

	Если НалоговаяНакладная
		ИЛИ НалоговаяИГарантийный Тогда

		СтруктураОтвета.Вставить("ПечатьСчета", ПечатьСчета);
		СтруктураОтвета.Вставить("ПечататьКопию", ПечататьКопию);
		СтруктураОтвета.Вставить("ПечататьТОРГ12", ПечататьТОРГ12);
		СтруктураОтвета.Вставить("ПечататьОригинал", ПечататьОригинал);
		СтруктураОтвета.Вставить("СчетВДваЭкземпляра", СчетВДваЭкземпляра);
		СтруктураОтвета.Вставить("ПечататьСчетФактуру", ПечататьСчетФактуру);
		СтруктураОтвета.Вставить("ТОРГ12ВДваЭкземпляра", ТОРГ12ВДваЭкземпляра);
		СтруктураОтвета.Вставить("РасходнаяВДваЭкземпляра", РасходнаяВДваЭкземпляра);
		СтруктураОтвета.Вставить("СчетФактураВДваЭкземпляра", СчетФактуруВДваЭкземпляра);
		СтруктураОтвета.Вставить("ПечататьСвоюПечатнуюФорму", ПечататьСвоюПечатнуюФорму);
		СтруктураОтвета.Вставить("ЗаголовокРасходнойНакладной", ЗаголовокРасходнойНакладной);
		СтруктураОтвета.Вставить("ПечататьАктВыполненныхРабот", ПечататьАктВыполненныхРабот);
		СтруктураОтвета.Вставить("СвояПроизвольнаяПечатнаяФорма", СвояПроизвольнаяПечатнаяФорма);
		СтруктураОтвета.Вставить("ПечататьТакжеРасходнуюНакладную", ПечататьТакжеРасходнуюНакладную);
		СтруктураОтвета.Вставить("ПоследнийНомерНалоговойНакладной", ПоследнийНомерНалоговойНакладной);
		ЗаписатьНомерНН();
	КонецЕсли;

	Если НЕ НалоговаяНакладная
		ИЛИ НалоговаяИГарантийный Тогда

		СтруктураОтвета.Вставить("ПечататьКвитанцию", ПечататьКвитанцию);
		СтруктураОтвета.Вставить("ПечататьЗаказНаряд", ПечататьЗаказНаряд);
		СтруктураОтвета.Вставить("ПечататьГарантийныйТалон", ПечататьГарантийныйТалон);
		СтруктураОтвета.Вставить("ПечататьПоложениеОРемонте", ПечататьПоложениеОРемонте);
		СтруктураОтвета.Вставить("ПечататьСписокРаботИсполнителя", ПечататьСписокРаботИсполнителя);
		СтруктураОтвета.Вставить("ПечататьПодвалРаботИсполнителя", ПечататьПодвалРаботИсполнителя);
		СтруктураОтвета.Вставить("ПечататьБлокТалонаОтИсполнителя", ПечататьБлокТалонаОтИсполнителя);
		СтруктураОтвета.Вставить("ПечататьГарантийныйТалонККвитанции", ПечататьГарантийныйТалонККвитанции);
		СтруктураОтвета.Вставить("ПечататьТехнологическуюКартуРемонта", ПечататьТехнологическуюКартуРемонта);

		СтруктураОтвета.Вставить("ЕстьПечатьПрочихСервисныхДокументов", ПечататьБлокТалонаОтИсполнителя ИЛИ ПечататьСписокРаботИсполнителя
		ИЛИ ПечататьПодвалРаботИсполнителя ИЛИ ПечататьКвитанцию ИЛИ ПечататьГарантийныйТалонККвитанции ИЛИ ПечататьПоложениеОРемонте
		ИЛИ ПечататьЗаказНаряд ИЛИ ПечататьТехнологическуюКартуРемонта);

	Иначе
		СтруктураОтвета.Вставить("ПечататьКвитанцию", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьЗаказНаряд", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьГарантийныйТалон", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьПоложениеОРемонте", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьСписокРаботИсполнителя", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьПодвалРаботИсполнителя", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьБлокТалонаОтИсполнителя", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьГарантийныйТалонККвитанции", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьТехнологическуюКартуРемонта", ЛОЖЬ);
		СтруктураОтвета.Вставить("ЕстьПечатьПрочихСервисныхДокументов", ЛОЖЬ);
		СтруктураОтвета.Вставить("ПечататьСвоюПечатнуюФорму", ПечататьСвоюПечатнуюФорму);
		СтруктураОтвета.Вставить("СвояПроизвольнаяПечатнаяФорма", СвояПроизвольнаяПечатнаяФорма);
	КонецЕсли;

	Закрыть(СтруктураОтвета);

КонецПроцедуры

&НаКлиенте
Процедура ОтменаПечати(Команда)
	Закрыть(неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если НЕ ЗначениеЗаполнено(ЗаголовокРасходнойНакладной) Тогда
		ЗаголовокРасходнойНакладной = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИндивидуальныйТекстВШапкеПечатнойФормыРасходаТовара");
	КонецЕсли;

	Если НеСохранятьВыборДокументов Тогда
		ПечатьСчета		= ЛОЖЬ;
		ПечататьКопию	= ЛОЖЬ;
		ПечататьТОРГ12	= ЛОЖЬ;
		ПечататьОригинал= ЛОЖЬ;
		ПечататьКвитанцию	= ЛОЖЬ;
		СчетВДваЭкземпляра	= ЛОЖЬ;
		ПечататьЗаказНаряд	= ЛОЖЬ;
		ПечататьСчетФактуру	= ЛОЖЬ;
		ТОРГ12ВДваЭкземпляра= ЛОЖЬ;
		РасходнаяВДваЭкземпляра	= ЛОЖЬ;
		ПечататьГарантийныйТалон= ЛОЖЬ;
		ПечататьПоложениеОРемонте	= ЛОЖЬ;
		СчетФактуруВДваЭкземпляра	= ЛОЖЬ;
		ПечататьАктВыполненныхРабот	= ЛОЖЬ;
		ПечататьСписокРаботИсполнителя	= ЛОЖЬ;
		ПечататьПодвалРаботИсполнителя	= ЛОЖЬ;
		ПечататьБлокТалонаОтИсполнителя	= ЛОЖЬ;
		ПечататьТакжеРасходнуюНакладную	= ЛОЖЬ;
		ПечататьГарантийныйТалонККвитанции	= ЛОЖЬ;
		ПечататьТехнологическуюКартуРемонта	= ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002100", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		НалоговаяНакладная 	  = Параметры.НалоговаяНакладная;
		НалоговаяИГарантийный = Параметры.НалоговаяИГарантийный;
		РегионРегламентированногоУчета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета");

		Если ЗначениеЗаполнено(РегионРегламентированногоУчета)
			И НЕ РегионРегламентированногоУчета = Перечисления.РегионыРегламентированногоУчета.Украина Тогда

			Элементы.ОсновныеПараметрыПечатиНалоговойНакладной.Видимость = ЛОЖЬ;
		КонецЕсли;

		Если Параметры.НалоговаяНакладная
			ИЛИ Параметры.НалоговаяИГарантийный Тогда

			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраины") Тогда
				Элементы.ОсновныеПараметрыПечатиНалоговойНакладной.Видимость = ЛОЖЬ;
				ПечататьОригинал = ЛОЖЬ;
				ПечататьКопию 	 = ЛОЖЬ;
			Иначе
				Элементы.ЭлементыПечатиДокументаГарантийногоОбязательства.Видимость = Параметры.НалоговаяИГарантийный;
				Элементы.ЭлементыПечатиНалоговойНакладнойДляУкраины.Видимость 		= ИСТИНА;
				Организация = Параметры.Организация;

				Если НЕ ЗначениеЗаполнено(Организация) Тогда
					Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
				КонецЕсли;

				ПоследнийНомерНалоговойНакладной = Организация.ПоследнийНомерНалоговойНакладной;
				ПоследнийНомерНалоговойНакладной = ПоследнийНомерНалоговойНакладной + 1;
			КонецЕсли;

			ИспользоватьМеханизмыПечатиФормыТОРГ12 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиФормыТОРГ12");
			Элементы.ПечататьТОРГ12.Видимость 		= ИспользоватьМеханизмыПечатиФормыТОРГ12;
			Элементы.ТОРГ12ВДваЭкземпляра.Видимость = ИспользоватьМеханизмыПечатиФормыТОРГ12;
			Элементы.ПечататьЗаказНаряд.Видимость 	= Параметры.ЭтоВыполнениеРабот;
			Элементы.ГруппаСчетаФактуры.Видимость	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмыПечатиСчетаФактурыДляРФ");
			Элементы.ПечататьТехнологическуюКартуРемонта.Видимость = Параметры.ЭтоВыполнениеРабот;
		КонецЕсли;

		Если НЕ Параметры.НалоговаяНакладная
			ИЛИ Параметры.НалоговаяИГарантийный Тогда

			Элементы.ЭлементыПечатиДокументаГарантийногоОбязательства.Видимость = ИСТИНА;
			Элементы.ЭлементыПечатиНалоговойНакладнойДляУкраины.Видимость 		= Параметры.НалоговаяИГарантийный;
			Элементы.ГруппаСчетаФактуры.Видимость = Параметры.НалоговаяИГарантийный;
		КонецЕсли;
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры
