// sza151115-0223
// sza151013-0557 тексты программ
// sza151003-0422 браузер
// sza150619-0716 
// sza150529-1744 
// sza150506-1247 
// sza150416-0158 
// sza150212-1354
// sza150114-0112
// sza141229-1355 
// sza141216-0350
// sza141129-2309 

&НаКлиенте
Процедура БраузерДомой(Команда)
	ОтправитьБраузерДомой();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВсемПредопределеннымОбъектамРусскоеНаименование(Команда)
	ОбщийМодульСервер.ЗадатьНаименованияОбъектамНаДругомЯзыке(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеФункциональныеОпции(Команда)
	
	ВключитьВсеФункциональныеОпцииНаСервере();
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьВсеФункциональныеОпцииНаСервере()
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Константы[ФункциональнаяОпция.Хранение.Имя].Установить(ИСТИНА);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановлениеПредопределенныхЭлементов(Команда)
	ВосстановлениеПредопределенныхЭлементовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВосстановлениеПредопределенныхЭлементовНаСервере()
	
	// ekaruk http://infostart.ru/public/305892/
	ДополнительныеПараметры = Новый Структура("СтрокаОшибок, НайденыПредопределенныеДанные", "", ЛОЖЬ);
	
	Для Каждого ЭлементКонфигурации Из Метаданные.Справочники Цикл
		ПроверитьПредопределенныеДанныеОбъекта(ЭлементКонфигурации, ДополнительныеПараметры);
	КонецЦикла;
	Для Каждого ЭлементКонфигурации Из Метаданные.ПланыСчетов Цикл
		ПроверитьПредопределенныеДанныеОбъекта(ЭлементКонфигурации, ДополнительныеПараметры);
	КонецЦикла;
	Для Каждого ЭлементКонфигурации Из Метаданные.ПланыВидовХарактеристик Цикл
		ПроверитьПредопределенныеДанныеОбъекта(ЭлементКонфигурации, ДополнительныеПараметры);
	КонецЦикла;
	Для Каждого ЭлементКонфигурации Из Метаданные.ПланыВидовРасчета Цикл
		ПроверитьПредопределенныеДанныеОбъекта(ЭлементКонфигурации, ДополнительныеПараметры);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.СтрокаОшибок) Тогда;
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Восстановлены предопределённые элементы, не сопоставленные") + ": " + Символы.ПС + ДополнительныеПараметры.СтрокаОшибок);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все предопределённые данные сопоставлены"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВС(Знач КОД, ЗНАЧЕНИЕ = Неопределено) // для использования в коде на клиенте
	
	Попытка 
		Выполнить ("" + КОД + ";");
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы1(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьТекстПрограммы1Завершение", ЭтаФорма, Новый Структура("ТекстПрограммыИзСправочника", ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы1Завершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы2(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьТекстПрограммы2Завершение", ЭтаФорма, Новый Структура("ТекстПрограммыИзСправочника", ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы2Завершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника, "1");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы3(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьТекстПрограммы3Завершение", ЭтаФорма, Новый Структура("ТекстПрограммыИзСправочника", ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы3Завершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника, "2");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы4(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьТекстПрограммы4Завершение", ЭтаФорма, Новый Структура("ТекстПрограммыИзСправочника", ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы4Завершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника, "3");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы5(Команда)
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыбратьТекстПрограммы5Завершение", ЭтаФорма, Новый Структура("ТекстПрограммыИзСправочника", ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекстПрограммы5Завершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника, "4");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодВФайл(Команда)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.txt*)|*.txt*";
	ДиалогРасширение = "*";
	ДиалогДляВыбораФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогДляВыбораФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для записи кода") + ":";
	ДиалогДляВыбораФайла.ПолноеИмяФайла			=	АдресФайла; //АДРЕС
	ДиалогДляВыбораФайла.Фильтр					=	ДиалогФильтр;
	ДиалогДляВыбораФайла.Расширение				=	ДиалогРасширение;
	ДиалогДляВыбораФайла.МножественныйВыбор		=	Ложь;
	ДиалогДляВыбораФайла.ПредварительныйПросмотр	=	Ложь;
	ДиалогДляВыбораФайла.ИндексФильтра			=	0;
	
	ДиалогДляВыбораФайла.Показать(Новый ОписаниеОповещения("ВыгрузитьКодВФайлЗавершение", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла", ДиалогДляВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		АдресФайла = ДиалогДляВыбораФайла.ПолноеИмяФайла;
		
		ТекстДок.Очистить();
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Программный код для выполнения в базе данных конфигурации Элементарная торговля") + " www.ELTR.od.ua");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиент);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сервер") + " 1");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1С);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент окончание") + " 1");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиентОкончание);
		ТекстДок.ДобавитьСтроку("//<> 2");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиент1);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сервер") + " 2");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1С1);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент окончание") + " 2");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиентОкончание1);
		ТекстДок.ДобавитьСтроку("//<> 3");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиент2);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сервер") + " 3");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1С2);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент окончание") + " 3");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиентОкончание2);
		ТекстДок.ДобавитьСтроку("//<> 4");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиент3);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сервер") + " 4");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1С3);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент окончание") + " 4");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиентОкончание3);
		ТекстДок.ДобавитьСтроку("//<> 5");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиент4);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сервер") + " 5");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1С4);
		ТекстДок.ДобавитьСтроку("//<> " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент окончание") + " 5");
		ТекстДок.ДобавитьСтроку(ПрограммныйКод1СКлиентОкончание4);
		
		ТекстДок.Записать(АдресФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШтрихКодЦена(Команда)
	
	Адрес = "";
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогДляВыбораФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогДляВыбораФайла.Заголовок		  =	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для выгрузки") + ": ";
	ДиалогДляВыбораФайла.ПолноеИмяФайла	  =	Адрес; // АДРЕС
	ДиалогДляВыбораФайла.Фильтр			  =	ДиалогФильтр;
	ДиалогДляВыбораФайла.Расширение		  =	ДиалогРасширение;
	ДиалогДляВыбораФайла.МножественныйВыбор =	ЛОЖЬ;
	ДиалогДляВыбораФайла.ИндексФильтра	  =	0;
	ДиалогДляВыбораФайла.Показать(Новый ОписаниеОповещения("ВыгрузитьШтрихКодЦенаЗавершение1", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла", ДиалогДляВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШтрихКодЦенаЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;
	ВидЦен = ?(Значение = Неопределено, ДополнительныеПараметры.ВидЦен, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		
		Адрес = ДиалогДляВыбораФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгружается документ"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ВыгрузитьШтрихКодЦенаСервер(Адрес, ВидЦен);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШтрихКодЦенаЗавершение1(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ВыгрузитьШтрихКодЦенаЗавершение", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла, ВидЦен", ДиалогДляВыбораФайла, ВидЦен)), ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид цен"), тип("СправочникСсылка.ВидыЦен"));
	КонецЕсли; // когда файл Адрес выбран
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьШтрихКодЦенаСервер(Знач Адрес, Знач ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ДополнительныеШтрихКоды.ШтрихКод,
	|	ДополнительныеШтрихКоды.Номенклатура,
	|	ДополнительныеШтрихКоды.СерияНоменклатуры,
	|	ДополнительныеШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ Справочник.Номенклатура КАК Номенклатура";
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстДок.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ШтрихКод);
			Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(ВыборкаДетальныеЗаписи.Номенклатура, ВидЦен, Дата, ЛОЖЬ, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			ТекстДок.ДобавитьСтроку(Формат(Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0"));
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстДок.Записать(Адрес);
	ТекстДок = Неопределено;
	
КонецПроцедуры // ВыгрузитьШтрихКодКОличество(Адрес)

&НаКлиенте
Процедура ВыключитьВсеФункциональныеОпции(Команда)
	ВыключитьВсеФункциональныеОпцииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыключитьВсеФункциональныеОпцииНаСервере()
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Константы[ФункциональнаяОпция.Хранение.Имя].Установить(ЛОЖЬ);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрограммныйКод1С(Команда)
	
	Если ТекущаяЗадача = "1"
		ИЛИ ТекущаяЗадача = "" Тогда
		
		ВыполнитьПрограммныйКод1СПоНомеру(ПрограммныйКод1С, ПрограммныйКод1СКлиент, ПрограммныйКод1СКлиентОкончание);
	ИначеЕсли ТекущаяЗадача = "2" Тогда
		ВыполнитьПрограммныйКод1СПоНомеру(ПрограммныйКод1С1, ПрограммныйКод1СКлиент1, ПрограммныйКод1СКлиентОкончание1);
	ИначеЕсли ТекущаяЗадача = "3" Тогда
		ВыполнитьПрограммныйКод1СПоНомеру(ПрограммныйКод1С2, ПрограммныйКод1СКлиент2, ПрограммныйКод1СКлиентОкончание2);
	ИначеЕсли ТекущаяЗадача = "4" Тогда
		ВыполнитьПрограммныйКод1СПоНомеру(ПрограммныйКод1С3, ПрограммныйКод1СКлиент3, ПрограммныйКод1СКлиентОкончание3);
	ИначеЕсли ТекущаяЗадача = "5" Тогда
		ВыполнитьПрограммныйКод1СПоНомеру(ПрограммныйКод1С4, ПрограммныйКод1СКлиент4, ПрограммныйКод1СКлиентОкончание4);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрограммныйКод1СНаКлиенте(Знач ПрограммныйКод1СДляВыполнения, ПереданноеЗначение = Неопределено)
	
	Попытка 
		Выполнить ("" + ПрограммныйКод1СДляВыполнения + ";");
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПрограммныйКод1СНаСервере(Знач ПрограммныйКод1СДляВыполнения, ПереданноеЗначение = Неопределено)
	
	Попытка 
		Выполнить ("" + ПрограммныйКод1СДляВыполнения + ";");
	Исключение 	
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрограммныйКод1СПоНомеру(Знач ПрограммныйКод1СНаСервере, Знач ПрограммныйКод1СНаКлиентеСначала, Знач ПрограммныйКод1СНаКлиентеОкончание)
	
	Если СокрЛП(ПрограммныйКод1СНаСервере) = "1"
		ИЛИ СокрЛП(ПрограммныйКод1СНаКлиентеСначала) = "1"
		ИЛИ СокрЛП(ПрограммныйКод1СНаКлиентеОкончание) = "1" Тогда
		
		Элементы.Админка.Видимость = ИСТИНА;
		
	ИначеЕсли СокрЛП(ПрограммныйКод1СНаСервере) = "2"
		ИЛИ СокрЛП(ПрограммныйКод1СНаКлиентеСначала) = "2"
		ИЛИ СокрЛП(ПрограммныйКод1СНаКлиентеОкончание) = "2" Тогда
		
		ОткрытьФорму("ОбщаяФорма.ФормаКонстантСписком");
		
	Иначе		
		ДатаСтарта = ОбщийМодульКлиент.ПользователяТекущаяДата();
		
		ВыполнитьПрограммныйКод1СНаКлиенте(ПрограммныйКод1СНаКлиентеСначала);
		ВыполнитьПрограммныйКод1СНаСервере(ПрограммныйКод1СНаСервере);
		ВыполнитьПрограммныйКод1СНаКлиенте(ПрограммныйКод1СНаКлиентеОкончание);
		
		глПроверятьСообщения = ИСТИНА;
		
		Элементы.КодВыполнен.Видимость = ИСТИНА;
		
		ДатаОкончания = ОбщийМодульКлиент.ПользователяТекущаяДата();
		ПериодИсполнения = ДатаОкончания - ДатаСтарта;
		Элементы.КодВыполнен.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код выполнялся с") + " " + Формат(ДатаСтарта, "ДФ=ЧЧ:мм:сс") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по") + " " + Формат(ДатаОкончания, "ДФ=ЧЧ:мм:сс") + ". " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За") + " " + СокрЛП(ПериодИсполнения) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("секунд.");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодИзФайла(Команда)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогДляВыбораФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогДляВыбораФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для импорта программного кода") + ":";
	ДиалогДляВыбораФайла.ПолноеИмяФайла			=	АдресФайла; //АДРЕС
	ДиалогДляВыбораФайла.Фильтр					=	ДиалогФильтр;
	ДиалогДляВыбораФайла.Расширение				=	ДиалогРасширение;
	ДиалогДляВыбораФайла.МножественныйВыбор		=	Ложь;
	ДиалогДляВыбораФайла.ПредварительныйПросмотр	=	Ложь;
	ДиалогДляВыбораФайла.ИндексФильтра			=	0;
	ДиалогДляВыбораФайла.ПроверятьСуществованиеФайла	=	ИСТИНА;
	
	ДиалогДляВыбораФайла.Показать(Новый ОписаниеОповещения("ЗагрузитьКодИзФайлаЗавершение", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла", ДиалогДляВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		АдресФайла = ДиалогДляВыбораФайла.ПолноеИмяФайла;
		ЗначениеЧисло = 2;
		ТекстДок.Прочитать(АдресФайла);
		
		ПрограммныйКод1СКлиент = ЗагрузитьУчасток();
		ПрограммныйКод1С = ЗагрузитьУчасток();
		ПрограммныйКод1СКлиентОкончание = ЗагрузитьУчасток();
		
		ПрограммныйКод1СКлиент1 = ЗагрузитьУчасток();
		ПрограммныйКод1С1 = ЗагрузитьУчасток();
		ПрограммныйКод1СКлиентОкончание1 = ЗагрузитьУчасток();
		
		ПрограммныйКод1СКлиент2 = ЗагрузитьУчасток();
		ПрограммныйКод1С2 = ЗагрузитьУчасток();
		ПрограммныйКод1СКлиентОкончание2 = ЗагрузитьУчасток();
		
		ПрограммныйКод1СКлиент3 = ЗагрузитьУчасток();
		ПрограммныйКод1С3 = ЗагрузитьУчасток();
		ПрограммныйКод1СКлиентОкончание3 = ЗагрузитьУчасток();
		
		ПрограммныйКод1СКлиент4 = ЗагрузитьУчасток();
		ПрограммныйКод1С4 = ЗагрузитьУчасток();
		ПрограммныйКод1СКлиентОкончание4 = ЗагрузитьУчасток();
		
	КонецЕсли; //когда файл АдресФайла выбран
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекстИзСправочника(Знач ТекстЭлементСправочника, Знач НомерПрограммы = "")
	
	Если ЗначениеЗаполнено(ТекстЭлементСправочника) Тогда
		Выполнить(" ПрограммныйКод1СКлиент" + НомерПрограммы + " = ТекстЭлементСправочника.ТекстПрограммы; ");
		Выполнить(" ПрограммныйКод1С" + НомерПрограммы + " = ТекстЭлементСправочника.ТекстПрограммы2; ");
		Выполнить(" ПрограммныйКод1СКлиентОкончание" + НомерПрограммы + "	= ТекстЭлементСправочника.ТекстПрограммы3; ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ЗагрузитьУчасток()
	
	УчастокКода = "";
	СтрокаФайла = ТекстДок.ПолучитьСтроку(ЗначениеЧисло);
	Пока ЗначениеЧисло <= ТекстДок.КоличествоСтрок() Цикл
		Если Лев(СокрЛП(СтрокаФайла), 4) = "//<>" Тогда
			Прервать;
		КонецЕсли;
		УчастокКода = УчастокКода + СтрокаФайла + Символы.ПС;
		ЗначениеЧисло = ЗначениеЧисло + 1;
		СтрокаФайла = ТекстДок.ПолучитьСтроку(ЗначениеЧисло);
	КонецЦикла;
	
	ЗначениеЧисло = ЗначениеЧисло + 1;
	Возврат УчастокКода;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗакрытиеУдаления(Знач СтруктураНастроек)
	
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(СтруктураНастроек.БылЗапрет);
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(СтруктураНастроек.ЗапретитьНоменклатуруБезШтрихКода);
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(СтруктураНастроек.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры);
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеДенегБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка); 
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(СтруктураНастроек.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков);
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара);
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуВоВсехДокументах);
	Константы.НеПроверятьУникальностьШтрихКода.Установить(СтруктураНастроек.НеПроверятьУникальностьШтрихКода);	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстПрограммы1(Команда)
	
	ПараметрыФормы = Новый Структура("ЗагрузкаИзОбработок", ИСТИНА);
	ПараметрыФормы.Вставить("Текст1", ПрограммныйКод1СКлиент);
	ПараметрыФормы.Вставить("Текст2", ПрограммныйКод1С);
	ПараметрыФормы.Вставить("Текст3", ПрограммныйКод1СКлиентОкончание);
	
	ОткрытьФорму("Справочник.ТекстыПрограмм.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстПрограммы2(Команда)
	
	ПараметрыФормы = Новый Структура("ЗагрузкаИзОбработок", ИСТИНА);
	ПараметрыФормы.Вставить("Текст1", ПрограммныйКод1СКлиент1);
	ПараметрыФормы.Вставить("Текст2", ПрограммныйКод1С1);
	ПараметрыФормы.Вставить("Текст3", ПрограммныйКод1СКлиентОкончание1);
	
	ОткрытьФорму("Справочник.ТекстыПрограмм.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстПрограммы3(Команда)
	
	ПараметрыФормы = Новый Структура("ЗагрузкаИзОбработок", ИСТИНА);
	ПараметрыФормы.Вставить("Текст1", ПрограммныйКод1СКлиент2);
	ПараметрыФормы.Вставить("Текст2", ПрограммныйКод1С2);
	ПараметрыФормы.Вставить("Текст3", ПрограммныйКод1СКлиентОкончание2);
	
	ОткрытьФорму("Справочник.ТекстыПрограмм.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстПрограммы4(Команда)
	
	ПараметрыФормы = Новый Структура("ЗагрузкаИзОбработок", ИСТИНА);
	ПараметрыФормы.Вставить("Текст1", ПрограммныйКод1СКлиент3);
	ПараметрыФормы.Вставить("Текст2", ПрограммныйКод1С3);
	ПараметрыФормы.Вставить("Текст3", ПрограммныйКод1СКлиентОкончание3);
	
	ОткрытьФорму("Справочник.ТекстыПрограмм.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекстПрограммы5(Команда)
	
	ПараметрыФормы = Новый Структура("ЗагрузкаИзОбработок", ИСТИНА);
	ПараметрыФормы.Вставить("Текст1", ПрограммныйКод1СКлиент4);
	ПараметрыФормы.Вставить("Текст2", ПрограммныйКод1С4);
	ПараметрыФормы.Вставить("Текст3", ПрограммныйКод1СКлиентОкончание);
	
	ОткрытьФорму("Справочник.ТекстыПрограмм.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЭкспортПакетноеИсполнение(Команда)
	ОткрытьФорму("Обработка.ИмпортЭкспортПакетноеИсполнение.Форма.ФормаСпискаЗадач");
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьСообщенийПриИзменении(Элемент)
	НеВыводитьСообщенийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеВыводитьСообщенийПриИзмененииНаСервере()
	ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПовторноИспользуемыеЗначенияКоманда(Команда)
	ОбновитьПовторноИспользуемыеЗначенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПовторноИспользуемыеЗначенияНаСервере()
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихкоды(Команда)
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры")) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьШтрихкодыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить обновление всех штрих-кодов?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихкодыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда				
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление штрих-кодов номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ОбновитьШтрихКодыНаСервере();	
		
		глПроверятьСообщения = ИСТИНА;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодыНаСервере()
	
	Счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			БылиИзменения = ЛОЖЬ;
			
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии Тогда 
				Если ПустаяСтрока(НоменклатураОбъект.ОсновнойШтрихКод) Тогда
					НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
					БылиИзменения = ИСТИНА;
				КонецЕсли;
			Иначе
				НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
				БылиИзменения = ИСТИНА;
			КонецЕсли;
			
			Если БылиИзменения Тогда
				НоменклатураОбъект.Записать();	
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;                                                                                      	
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего обновлено") + ": " + СокрЛП(Счетчик));
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорВыполнитьПрограммныйКод1СНаСервере(Команда)	
	ПрограммныйКод1СКлиент = ПрограммныйКод1СКлиент + Символы.ПС + Символы.Таб + "	ВыполнитьПрограммныйКод1СНаСервере(ПрограммныйКод1СДляВыполнения, ПереданноеЗначение); ";
КонецПроцедуры

&НаКлиенте
Процедура ОператорЗапрос(Команда)
	
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.ПС + Символы.Таб + "	
	|ЗапросКДанным = Новый Запрос;
	|ЗапросКДанным.Текст = """";
	|
	|//Если  Тогда
	|// ЗапросКДанным.Текст = ЗапросКДанным.Текст + "" И  "";
	|//	ЗапросКДанным.УстановитьПараметр("""", );
	|//КонецЕсли;
	|
	|ВыборросКДанным = ЗапросКДанным.Выполнить();
	|Если Не ВыборросКДанным.Пустой() Тогда
	|	РезросКДанным = ВыборросКДанным.Выбрать();
	|	СчросКДанным = 0;
	|	Пока РезросКДанным.Следующий() Цикл
	|		
	|		РезультатЗапроса = РезросКДанным.;
	|		СчросКДанным = СчросКДанным + 1;
	|		//ОбработкаПрерыванияПользователя();
	|	КонецЦикла;	//по результатам запроса росКДанным
	|	// ОбщегоНазначения.СообщитьПользователю(""Всего: "" + СчросКДанным);
	|Иначе 	//запрос пуст!
	|КонецЕсли; " + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорПолучитьЗначениеНастройкиИлиКонстанты(Команда)
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.Таб + "= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("""");" + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ОператорПопытка(Команда)
	
	ТекстОписаниеОшибки = ОписаниеОшибки();
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.ПС + Символы.Таб + "Попытка 
	|
	|Исключение 	
	|ОбщегоНазначения.СообщитьПользователю(""Произошла ошибка: "" + ТекстОписаниеОшибки, СтатусСообщения.ВажнаяИнформация);
	|КонецПопытки; " + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорСообщить(Команда)
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.Таб + "ОбщегоНазначения.СообщитьПользователю("""");" + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ОператорСообщитьКлиент(Команда)
	ПрограммныйКод1СКлиент = ПрограммныйКод1СКлиент + Символы.Таб + "ОбщегоНазначения.СообщитьПользователю("""");" + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ОператорСообщитьКлиентПосле(Команда)
	ПрограммныйКод1СКлиентОкончание = ПрограммныйКод1СКлиентОкончание + Символы.Таб + "ОбщегоНазначения.СообщитьПользователю("""");" + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ОператорУсловие(Команда)
	
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.ПС + Символы.Таб + "Если  Тогда
	|
	|Иначе 	
	|КонецЕсли; " + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорЦикл(Команда)
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.Таб + "Для Каждого ЭлементЦикла Из  Цикл" + Символы.ПС;
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.Таб + Символы.Таб + "// = ЭлементЦикла;" + Символы.ПС;
	ПрограммныйКод1С = ПрограммныйКод1С + Символы.Таб + "КонецЦикла;" + Символы.ПС;
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВаучер(Команда)
	
	Если НЕ ОсвободитьВаучерНаСервере() Тогда
		ПараметрыФормыОтчета = Новый Структура("Ваучер", Ваучер);
		Выполнить(" ОткрытьФорму(""Отчет.ИсторияВаучера.Форма"", ПараметрыФормыОтчета); ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОсвободитьВаучерНаСервере()
	
	Результат = ИСТИНА;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		История = РегистрыСведений.ПринадлежностьВаучеров.СоздатьНаборЗаписей();
		История.Отбор.Ваучер.Значение = Ваучер;
		История.Записать(ИСТИНА);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НакоплениеНаВаучеры.Регистратор
		|ИЗ РегистрНакопления.НакоплениеНаВаучеры КАК НакоплениеНаВаучеры
		|ГДЕ НакоплениеНаВаучеры.Ваучер = &Ваучер";
		
		Запрос.УстановитьПараметр("Ваучер", Ваучер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Результат = РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьБраузерДомой(Знач НЕОбновитьИнтерфейс = ЛОЖЬ)
	
	ИнструкцииВКартинках = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инструкции в картинках на сайте конфигурации");
	ФорумКонфигурации = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Форум по конфигурации");
	
	Гугл = "<!DOCTYPE html PUBLIC ""-// W3C// DTD XHTML 1.0 Transitional// EN"" 
	|""http:// www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<HTML style=""font-family:arial; font-size:11px;"">
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/><font size = +3>
	|<a href= ""http://www.eltr.od.ua"">Elementary Trade main page</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""https://sites.google.com/site/elementarytrade/instrukcii-v-kartinkah""> " + ИнструкцииВКартинках + "</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""https://groups.google.com/d/forum/elemental-trade-forum""> " + ФорумКонфигурации + "</a><br><br>
	|<a href= ""http://www.google.com"">Google</a><br>		
	|&nbsp&nbsp&nbsp&nbsp<a href= ""http://translate.google.com/?hl=ru&tab=oT"">Google translate</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""https://drive.google.com/?tab=mo&authuser=0"">Google drive</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""https://drive.google.com/keep/u/0/"">Google keep</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""https://www.google.com/calendar/render?tab=mc"">Google calendar</a><br>
	|<a href= ""http://www.yandex.ru"">Yandex</a><br>
	|<a href= ""https://www.facebook.com/"">FaceBook</a><br>
	|<a href= ""https://www.youtube.com/?tab=m1"">YouTube</a><br>
	|<a href= ""http://www.ukr.net"">UKR Net</a><br>
	|<a href= ""http://www.pravda.com.ua/news/"">Pravda.com.UA</a><br><br>
	|<a href= ""http://www.speedtest.net/ru/"">Speed test</a><br>
	|<a href= ""http://whatismyip.org/"">What is my IP?</a><br><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""http://www.sza.od.ua"">sza.od.ua</a><br>
	|&nbsp&nbsp&nbsp&nbsp<a href= ""http://v8.1c.ru/"">1C 8</a><br>
	|</font><br><br><br><hr><font size = -3>sza'2015</font></HTML>";
	
	Если НЕ НЕОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЗаписиОТекстахНаВсехЯзыках(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы все очистить?"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершениеНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВсеЗаписиОТекстахНаВсехЯзыкахНажатиеЗавершениеНаСервере() Экспорт
	
	РСНЗ = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьНаборЗаписей();
	РСНЗ.Записать(ИСТИНА);
	
	РСНЗ = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
	РСНЗ.Записать(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЛичныеНастройкиПользователей(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеЛичныеНастройкиПользователейЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить все личные настройки пользователей?"), РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЛичныеНастройкиПользователейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьВсеЛичныеНастройкиПользователейНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВсеЛичныеНастройкиПользователейНаСервере()
	
	рснз = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	рснз.Прочитать();
	рснз.Очистить();
	рснз.Записать(ИСТИНА);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеШтрихКоды(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеШтрихКодыЗавершение1", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ВЫ УВЕРЕНЫ, что готовы удалить все штрих-коды?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеШтрихКодыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		ОчиститьВсеШтрихКодыНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеШтрихКодыЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеШтрихКодыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все штрих-коды будут удалены?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеШтрихКодыНаСервере()
	
	РСНЗ = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
	РСНЗ.Записать(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЖурналДоУказаннойДаты(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЖурналДоУказаннойДатыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистить журнал") + " " + ?(ЗначениеЗаполнено(ДатаГраницыОчисткиЖурнала), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("до") + " " + Формат(ДатаГраницыОчисткиЖурнала, "ДФ=dd.MM.yyyy"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("за весь период")) + "?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЖурналДоУказаннойДатыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет очистка журнала.."));
		ОчиститьЖурналДоУказаннойДатыНаСервере(ДатаГраницыОчисткиЖурнала);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьЖурналДоУказаннойДатыНаСервере(Знач ДатаГраницыОчисткиЖурналаБК = Неопределено)
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистил журнал событий") + " " + ?(ЗначениеЗаполнено(ДатаГраницыОчисткиЖурналаБК), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по") + " " + ДатаГраницыОчисткиЖурналаБК, ""), 2);
	
	Если ДатаГраницыОчисткиЖурналаБК = Неопределено
		ИЛИ ДатаГраницыОчисткиЖурналаБК = '00010101000000' Тогда
		
		ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьНаборЗаписей();
		ЖурналСобытий.Записать(ИСТИНА);
		
	Иначе
		Выборка = РегистрыСведений.ЖурналСобытий.Выбрать('00010101000000', ДатаГраницыОчисткиЖурналаБК);
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНулевыеЦеныЗаПериод(Команда)
	ОчиститьНулевыеЦеныЗаПериодНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНулевыеЦеныЗаПериодНаСервере()
	
	ЗаписиЦены = РегистрыСведений.Цены.Выбрать(ДатаНачала, ДатаОкончания);
	Пока ЗаписиЦены.Следующий() Цикл
		Если ЗаписиЦены.Цена = 0 Тогда
			МенеджерЗаписиЦены = ЗаписиЦены.ПолучитьМенеджерЗаписи();
			МенеджерЗаписиЦены.Удалить();	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПрограммныйКод(Команда)
	
	Если ТекущаяЗадача = "1" Тогда
		ПрограммныйКод1С = "";
		ПрограммныйКод1СКлиент = "";
		ПрограммныйКод1СКлиентОкончание = "";
		
	ИначеЕсли ТекущаяЗадача = "2" Тогда
		ПрограммныйКод1С1 = "";
		ПрограммныйКод1СКлиент1 = "";
		ПрограммныйКод1СКлиентОкончание1 = "";
		
	ИначеЕсли ТекущаяЗадача = "3" Тогда
		ПрограммныйКод1С2 = "";
		ПрограммныйКод1СКлиент2 = "";
		ПрограммныйКод1СКлиентОкончание2 = "";
		
	ИначеЕсли ТекущаяЗадача = "4" Тогда
		ПрограммныйКод1С3 = "";
		ПрограммныйКод1СКлиент3 = "";
		ПрограммныйКод1СКлиентОкончание3 = "";
		
	ИначеЕсли ТекущаяЗадача = "5" Тогда
		ПрограммныйКод1С4 = "";
		ПрограммныйКод1СКлиент4 = "";
		ПрограммныйКод1СКлиентОкончание4 = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСообщенияПользователей(Команда)
	ОчиститьСообщенияПользователейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьСообщенияПользователейНаСервере()
	
	рсмз = РегистрыСведений.СообщенияПользователюОтСистемы.СоздатьНаборЗаписей();
	рсмз.Очистить();
	рсмз.Записать(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦеныЗаПериод(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЦеныЗаПериодЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы произвести очистку цен номенклатуры в указанном периоде?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦеныЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистка цен за период.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ОчиститьЦеныЗаПериодНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЦеныЗаПериодНаСервере()
	
	ЗаписиЦены = РегистрыСведений.Цены.Выбрать(ДатаНачала, ДатаОкончания);
	Пока ЗаписиЦены.Следующий() Цикл
		МенеджерЗаписиЦены = ЗаписиЦены.ПолучитьМенеджерЗаписи();
		МенеджерЗаписиЦены.Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиткаРегистраВерсионирования(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиткаРегистраВерсионированияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы хотите удалить все записи Из регистра версионирования?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиткаРегистраВерсионированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиткаРегистраВерсионированияНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиткаРегистраВерсионированияНаСервере()
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("003000");
	Если НЕ Отказ Тогда
		
		НаборРегистра = РегистрыСведений.ВерсииОбъектовБазыДанных.СоздатьНаборЗаписей();
		НаборРегистра.Записать(ИСТИНА);
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У Вас недостаточно прав для этого!"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницЗаголовка.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницЗаголовка.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.СтраницыЗадач.ТекущаяСтраница;
	СтраницыПанели  = Элементы.СтраницыЗадач.ПодчиненныеЭлементы;
	СтраницаЗадачи  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.ГруппаСтраницОбработок.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницОбработок.ПодчиненныеЭлементы;
	ЗакладкаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.ГруппаСтраницСправочников.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницСправочников.ПодчиненныеЭлементы;
	ЗакладкаПанели2  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСтрокеБраузера(Команда)
	ПоСтрокеБраузера();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАРХИВВсеДоговораСКонтрагентамиБезЗадолженностиИЗаконченнымСроком(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиВАРХИВВсеДоговораСКонтрагентамиБезЗадолженностиИЗаконченнымСрокомЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все Договора без задолженности и с законченным сроком в папку Архив?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАРХИВВсеДоговораСКонтрагентамиБезЗадолженностиИЗаконченнымСрокомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Договоров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсеДоговора();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсеДоговора()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.Ссылка
	|ИЗ
	|	Справочник.Договора КАК Договора
	|ГДЕ
	|	Договора.ЭтоГруппа = ЛОЖЬ
	|	И Договора.Предопределенный = ЛОЖЬ
	|	И Договора.ДатаОкончания < &Дата";
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Договора.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Договор = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгДоговора(Договор, Дата);
		
		Если Остаток = 0 Тогда
			
			НомОбъект = Договор.ПолучитьОбъект();
			НомОбъект.Родитель = Архив;
			Попытка 
				НомОбъект.Записать();
				сч = сч + 1;
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
			КонецПопытки;                          	
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Договоров") + " " + СокрЛП(сч));
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПеренестиВПапкуАРХИВВсехПоставщиков()

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГод(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Клиентов без долга и продаж за последний год в папку Архив?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Клиентов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка
	|ИЗ Справочник.Клиенты КАК Клиенты
	|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
	|	И Клиенты.Предопределенный = ЛОЖЬ
	|	И Клиенты.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Клиенты.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -12);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Клиент = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Клиент, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажКлиентаЗаПериод(Клиент, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Клиент.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Клиентов") + ": " + СокрЛП(сч));
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехПоставщиков()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Поставщики.Ссылка
	|ИЗ
	|	Справочник.Поставщики КАК Поставщики
	|ГДЕ
	|	Поставщики.ЭтоГруппа = ЛОЖЬ
	|	И Поставщики.Предопределенный = ЛОЖЬ
	|	И Поставщики.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Поставщики.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -6);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Поставщик = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Поставщик, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Поставщик, ДатаНачала, Дата);
			
			Если КоличествоЗаПериод = 0 Тогда
				НомОбъект = Поставщик.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Поставщиков") + ": " + СокрЛП(сч));
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПеренестиВПапкуАРХИВВсехПоставщиков

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехПоставщиковБезЗадолженностиИПоступленийЗаПоследниеПолГода(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиВПапкуАРХИВВсехПоставщиковБезЗадолженностиИПоступленийЗаПоследниеПолГодаЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Поставщиков без задолженности и поступлений за последние полгода в папку Архив?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехПоставщиковБезЗадолженностиИПоступленийЗаПоследниеПолГодаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Поставщиков.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехПоставщиков();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всю номенклатуру без остатков и продаж за последний месяц в папку Архив?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Номенклатура.Архив ;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -1);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, , Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажЗаПериод(Номенклатура, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				НомОбъект.ОбменДанными.Загрузка = ИСТИНА;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций") + ": " + СокрЛП(сч));
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименования(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите перенести всю номенклатуру?") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обратно вернуть ее автоматически будет невозможно!"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере();	
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	сч = 0;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(ВыборкаДетальныеЗаписи.наименование);
			Если НЕ ГруппаПоПервомуСлову = Неопределено
				И НЕ ГруппаПоПервомуСлову = ВыборкаДетальныеЗаписи.Родитель Тогда
				
				НомОбъект = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
				НомОбъект.Родитель = ГруппаПоПервомуСлову;
				НомОбъект.записать();
				
				сч = сч + 1;
				
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	Если сч =0 Тогда		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры для такого переноса"));
	Иначе     		
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций") + ": " + СокрЛП(сч));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияИСжатиеСправочника(Команда)
	
	Если СписокСправочников.Количество() = 0 Тогда
		ПолучитьСписокСправочников();
	КонецЕсли;
	
	ИмяСправочника = Неопределено;
	
	СписокСправочников.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПеренумерацияИСжатиеСправочникаЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите справочник для перенумерации"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияИСжатиеСправочникаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ИмяСправочника = ВыбранныйЭлемент;
	
	Если НЕ ИмяСправочника = Неопределено Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенумерация справочника..") + ИмяСправочника.Значение, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПеренумерацияИСжатиеСправочникаНаСервере(ИмяСправочника.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумерацияИСжатиеСправочникаНаСервере(Знач ИмяСправочника)
	
	Мася = Новый массив(1);
	ЗапКоличествоИмяСправочника = Новый Запрос;
	ЗапКоличествоИмяСправочника.Текст = "ВЫБРАТЬ " + ИмяСправочника + ".Ссылка
	|ИЗ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
	|УПОРЯДОЧИТЬ ПО " + ИмяСправочника + ".ПометкаУдаления,
	|	" + ИмяСправочника + ".Код";
	
	кво = 0;
	
	ВзКоличествоИмяСправочника = ЗапКоличествоИмяСправочника.Выполнить();
	Если НЕ ВзКоличествоИмяСправочника.Пустой() Тогда
		РезКоличествоИмяСправочника = ВзКоличествоИмяСправочника.Выбрать();
		Пока РезКоличествоИмяСправочника.Следующий() Цикл
			Мася.Добавить(РезКоличествоИмяСправочника.Ссылка);
			кво = кво + 1;
		КонецЦикла;	
		
		длинакода =	метаданные.Справочники[ИмяСправочника].ДлинаКода;
		нулей = "";
		сч = 1;
		пока сч < длинакода цикл
			нулей = нулей + "0";
			сч = сч + 1;
		КонецЦикла;
		
		нкод = нулей + "1";
		страда = стрдлина(нулей)+1;
		НПК1 = Новый(тип("СправочникМенеджер."+ ИмяСправочника));
		
		для М = 1 по кво цикл
			
			ММ = Мася[М];
			Если НЕ ММ.предопределенный Тогда
				найден = ЛОЖЬ;
				пока ИСТИНА цикл
					нпк = нпк1.НайтиПоКоду(нкод);
					Если нпк.Пустая() Тогда
						найден = ИСТИНА;
						прервать;
						
					Иначе
						эточисло = число(нкод);
						эточисло = эточисло + 1;
						нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
					КонецЕсли;
				КонецЦикла;
				
				ммм = мм.ПолучитьОбъект();
				ммм.код = нкод;
				попытка
					Попытка ммм.ОбменДанными.Загрузка=ИСТИНА;
					Исключение
					КонецПопытки;
					ммм.записать();
					
				Исключение 
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать") + " " + ммм + " " + ТекстОписаниеОшибки);
					
					Прервать;
				КонецПопытки;
				
				эточисло = число(нкод);
				эточисло = эточисло + 1;
				нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиВсеДокументыЗаУказанныйПериод(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПерепровестиВсеДокументыЗаУказанныйПериодЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить перепроведение?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиВсеДокументыЗаУказанныйПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проведение документов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПерепровестиВсеДокументыЗаУказанныйПериодНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиВсеДокументыЗаУказанныйПериодНаСервере()
	ОбщийМодульСерверПривилегия.ПерепровестиВсеДокументыВБазеДанных(ДатаНачала, ДатаОкончания, НЕ ВыводитьСообщенияПриПроведении, НеОстанавливатьсяПриОшибкеПроведения);
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли(Команда)
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаАктуальностиПоказателейВаловойПрибыли")) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепроведение документов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.АнимацияСерая);
		ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере();
		
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепровел документы для восстановления показателей валовой прибыли"), 2);
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере()
	
	Если ОбщийМодульСервер.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Тогда
		Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить('00010101000000');
		ДатаАктуальностиПоказателейВаловойПрибыли = '00010101000000';	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТекущиеИтоги(Команда)
	
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет итогов регистров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ПересчитатьТекущиеИтогиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТекущиеИтогиНаСервере()
	
	Для Каждого Рег Из Метаданные.РегистрыНакопления Цикл
		
		Если Рег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			РегистрыНакопления[Рег.Имя].ПересчитатьТекущиеИтоги();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьАртикулыНоменклатуры(Команда)
	ПереформироватьАртикулыНоменклатурыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПереформироватьАртикулыНоменклатурыНаСервере()
	
	ФормулаФормированияАртикула = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияАртикула");
	Если ЗначениеЗаполнено(ФормулаФормированияАртикула) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
		|	Номенклатура.Артикул
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Счетчик = 0;
			Артикул = "";
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ВыборкаДетальныеЗаписи.Ссылка, "Артикул", ИСТИНА, Артикул);
				
				Если НЕ ВыборкаДетальныеЗаписи.Артикул = Артикул Тогда
					НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					НоменклатураОбъект.Артикул = Артикул;
					НоменклатураОбъект.Записать();
					Счетчик = Счетчик + 1;
				КонецЕсли;
				
			КонецЦикла; 	
			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внесены изменения") + ": " + Счетчик);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формула артикула не задана"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмоАвторуОбОшибкеИлиСПожеланием(Команда)
	ОткрытьФорму("ОбщаяФорма.ПисьмоАвтору");
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПодготовкаКУдалению()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("БылЗапрет", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде"));
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ЗапретитьНоменклатуруБезШтрихКода", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"));
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры"));
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеДенегБезОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровБезОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков"));
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара"));
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(ИСТИНА);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуВоВсехДокументах", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах"));
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(ИСТИНА);
	
	СтруктураНастроек.Вставить("НеПроверятьУникальностьШтрихКода", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода"));
	Константы.НеПроверятьУникальностьШтрихКода.Установить(ИСТИНА);	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументов(Команда)
	
	ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере();
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Попытка
		Помеченные = НайтиПомеченныеНаУдаление();		
		
		ПомеченныеКоличество = Помеченные.Количество();
		Если НЕ ПомеченныеКоличество = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка,
			|	ЗаметкиИНапоминания.Причина
			|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
			|ГДЕ ЗаметкиИНапоминания.СвязаноС = &Причина
			|	ИЛИ ЗаметкиИНапоминания.Причина = &Причина";
			
			Для Каждого Помеченный Из Помеченные Цикл
				
				ПомеченныйСсылка = Помеченный.Ссылка;
				
				Отбор = Новый Структура;
				Отбор.Вставить("СсылкаНаОбъект", ПомеченныйСсылка);
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.Выбрать(,,Отбор);
				Пока ЖурналСобытий.Следующий() Цикл
					менз = ЖурналСобытий.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектВладелец", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ДополнительныйРеквизит", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Запрос.УстановитьПараметр("Причина", ПомеченныйСсылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						ОбъектЗаметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						Если ВыборкаДетальныеЗаписи.причина = ПомеченныйСсылка Тогда
							ОбъектЗаметка.Причина = Неопределено;
						Иначе
							ОбъектЗаметка.СвязаноС = Неопределено;
						КонецЕсли;
						ОбъектЗаметка.Записать();
					КонецЦикла;
					
				КонецЕсли;				
			КонецЦикла;
			
			Найденные = 0;
			УдалитьОбъекты(Помеченные, ИСТИНА, Найденные);
			МассивСообщенных = Новый Массив;
			объектовбольше = ЛОЖЬ;
			
			Для Каждого Ссылка Из Найденные Цикл
				Если МассивСообщенных.Найти(Ссылка[0]) = Неопределено Тогда
					МассивСообщенных.Добавить(Ссылка[0]);
					СтрСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект не удален") + ": " + СокрЛП(Ссылка[0]);
					СтрСсылка = ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("используется в") + " " + СокрЛП(Ссылка[1]) + " " + ТипЗнч(Ссылка[1]);
					Сообщить (СтрСообщения + СтрСсылка);	
					
				Иначе
					объектовбольше = ИСТИНА;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектовБольше Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ссылок на объекты больше. Указана только первая ссылка для каждого Из них."));
			КонецЕсли;
			
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистил помеченные на удаление"), 2);
			ОбщегоНазначения.СообщитьПользователю(?(Найденные.Количество() = 0, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остальные")) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("помеченные на удаление объекты удалены. Всего") + ": " + ПомеченныеКоличество);
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помеченных на удаление объектов нет."));
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось удалить помеченные на удаление объекты.") + Символы.ПС + ТекстОписаниеОшибки, СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискСерииНоменклатуры(Команда)
	Выполнить(" ОткрытьФорму(ИмяНеобходимойФормы); ");
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСправочников()
	
	Для Каждого ИмяСправочника Из Метаданные.Справочники Цикл
		СписокСправочников.Добавить(ИмяСправочника.Имя);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Пользователи(Команда)
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы пометить на удаление всю неиспользованную номенклатуру?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Чистка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	сч = 0;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПустаяНоменклатурнаяГруппа = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			Движения = ОбщийМодульСервер.ПолучитьДвиженияТовара(Номенклатура);
			
			Если Движения = 0 Тогда
				
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.НоменклатурнаяГруппа = ПустаяНоменклатурнаяГруппа;
				НомОбъект.пометкаудаления = ИСТИНА;
				
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
				КонецПопытки;                          	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено номенклатуры") + ": " + СокрЛП(сч));
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаКлиенте
Процедура ПоСтрокеБраузера()
	
	ТекстПерейти = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перейти на") + " http://" + СтрокаБраузера;
	
	Гугл = "<!DOCTYPE html PUBLIC ""-// W3C// DTD XHTML 1.0 Transitional// EN"" 
	|""http:// www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
	|<HTML style=""font-family:arial; font-size:11px;"">
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/><font size = +3>
	|<a href= ""http://" + СтрокаБраузера + """>" + ТекстПерейти + "</a>
	|</font><br><br><br><hr><font size = -3>sza'2015</font></HTML>";
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочников(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистка пробелов сначала и в конце текстовых полей всех элементов справочников"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочниковНаСервере()
	
	Запрос = Новый Запрос;
	СчетчикИзмененных = 0;
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	КонецПопытки;
	
	Для Каждого СправочникБазыДанных Из Метаданные.Справочники Цикл
		
		МассивИменСтроковыхРеквизитов = Новый Массив;
		Для Каждого РеквизитСправочника Из СправочникБазыДанных.Реквизиты Цикл
			Если РеквизитСправочника.Тип.СодержитТип(Тип("Строка")) Тогда
				МассивИменСтроковыхРеквизитов.Добавить(РеквизитСправочника.Имя);
			КонецЕсли;			
		КонецЦикла;                                                                         
		
		Если Не МассивИменСтроковыхРеквизитов.Количество() = 0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ С.Ссылка Из Справочник." + СправочникБазыДанных.Имя + " КАК С " + ?(СправочникБазыДанных.Иерархический И СправочникБазыДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, " ГДЕ НЕ С.ЭтоГруппа ", "");
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					БылиИзменения = ЛОЖЬ;
					ЭлементСправочника = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого РеквизитИзМассива Из МассивИменСтроковыхРеквизитов Цикл
						Попытка // реквизит группы
							ЗначениеСтроки = ЭлементСправочника[РеквизитИзМассива];
							Если НЕ ЗначениеСтроки = СокрЛП(ЗначениеСтроки) Тогда
								ЭлементСправочника[РеквизитИзМассива] = СокрЛП(ЗначениеСтроки);
								БылиИзменения = ИСТИНА;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					Если БылиИзменения Тогда
						Попытка 
							ЭлементСправочника.Записать();
							СчетчикИзмененных = СчетчикИзмененных + 1;
						Исключение 	
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменено объектов") + ": " + СчетчикИзмененных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзмененииНаСервере()
	Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ);
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Попытка
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда		
			СтраницыПанели  = Элементы.ГруппаСтраницЗаголовка.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			Элементы.ГруппаСтраницЗаголовка.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтраницаЗадачи)Тогда		
			СтраницыПанели  = Элементы.СтраницыЗадач.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаЗадачи);
			Элементы.СтраницыЗадач.ТекущаяСтраница = ТекущаяСтраница;
			
			ТекущаяЗадача = Прав(Элементы.СтраницыЗадач.ТекущаяСтраница.Имя, 1);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЗакладкаПанели)Тогда		
			СтраницыПанели  = Элементы.ГруппаСтраницОбработок.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(ЗакладкаПанели);
			Элементы.ГруппаСтраницОбработок.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЗакладкаПанели2)Тогда		
			СтраницыПанели  = Элементы.ГруппаСтраницСправочников.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(ЗакладкаПанели2);
			Элементы.ГруппаСтраницСправочников.ТекущаяСтраница = ТекущаяСтраница;
		КонецЕсли;	
		
	Исключение
	КонецПопытки;
	
	ЧислоОбъектов = глЧислоОбъектов;
	ВерсияПлатформы = глВерсияПлатформы;
	
	ОтправитьБраузерДомой(ИСТИНА);
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000150", ЭтаФорма, Отказ, );	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОтказКОбработкам = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("003100");
		Элементы.СтраницаДополнительныхОтчетовИОбработок.Видимость = НЕ ОтказКОбработкам;
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ДополнительныеОтчетыИОбработки, , "Справочник.ДополнительныеОтчетыИОбработки");		
		
		ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();	
		ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ВыполнитьПрограммныйКод1СНаСервере(КодНаЯзыке1С, ПрограммныйКод1СДляВыполнения, ПереданноеЗначение)";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("процедура для выполнения кода на сервере (из клиента)");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ВС(КОД,ЗНАЧЕНИЕ)";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("то же");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеСтрока";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступное значение типа Строка");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеДата";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступное значение типа Дата");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеЧисло";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступное значение типа Число");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеБулево";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступное значение типа Булево");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ДокументДляПечати";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступный Табличный документ");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ТакстДок";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступный Текстовый документ");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "СписЗнач";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступный Список значений");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеСсылка";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступная любая ссылка");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ЗначениеПроизвольное";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступное произвольное значение");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ПрограммныйКод1СНаСервере";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код 1С, который будет выполен на сервере");
		
		СтрокаСправкиККоду = СправкаККоду.Добавить();
		СтрокаСправкиККоду.ИмяПрограммное 		= "ПрограммныйКод1СНаКлиентеОкончание";
		СтрокаСправкиККоду.ОписаниеПрименения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код 1С, который будет после выполнен на клиенте");
		
		Элементы.ДляЦенНоменклатуры.Видимость 	= ПараметрыСеанса.ИспользоватьЦеныИСуммыВСеансе;
		Элементы.СправочникиУчетаЦен.Видимость 	= ПараметрыСеанса.ИспользоватьЦеныИСуммыВСеансе;
		
		Элементы.УстановитьКомпонентуWebCam.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьWebcam");
		
		ТекущийПользователь      = ПараметрыСеанса.ТекущийПользователь;
		РегистрационныйКод 		 = ОбщийМодульСервисСервер.РегистрационныйКод();
		ДатаПоследнегоОбновления = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаПоследнегоОбновления");
		ДатаПервогоЗапуска 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаПервогоЗапуска");
		КонфигурацияВРаботе 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КонфигурацияВРаботе");
		ВерсияПрограммы 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПрограммы");
		ВерсияПриИнсталляции 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");		
		МассоваяЗагрузка 	     = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка");
		ДатаВремяПоследнегоЗапросаКНовойВерсии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаВремяПоследнегоЗапросаКНовойВерсии");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеНовойВерсииКонфигурации(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет связь с сервером конфигурации.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверка наличия обновления"));
	ОбщегоНазначения.СообщитьПользователю(ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПроверитьНаличиеНовойВерсииКонфигурацииНаСервере()
	
	ВопросКСерверу = ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы(ИСТИНА);
	Если ВопросКСерверу = Неопределено Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет связи с сервером автора конфигурации.");
		
	ИначеЕсли НЕ ПустаяСтрока(ВопросКСерверу.ВерсияНаСайте) Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " http://www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации") + ": " + ВопросКСерверу.ВерсияНаСайте + ?(ЗначениеЗаполнено(ВопросКСерверу.ПолныйТекстВерсии), Символы.ПС + ВопросКСерверу.ПолныйТекстВерсии, "");
		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		
	Иначе
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ваша версия конфигурации актуальная.");
		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьПредопределенныеДанныеОбъекта(ОбъекМетаданных, ДополнительныеПараметры)
	
	МассивПредопределенныхИмен = ОбъекМетаданных.ПолучитьИменаПредопределенных();
	Если МассивПредопределенныхИмен.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ИмяПредопределенныхДанных
		|ИЗ " + ОбъекМетаданных.ПолноеИмя() + " КАК ИмяОбъекта ";
		
		ТаблицаПредопределнныхИБ = Запрос.Выполнить().Выгрузить();
		Для каждого ПредопределенноеИмя Из МассивПредопределенныхИмен Цикл
			Если ТаблицаПредопределнныхИБ.Найти(ПредопределенноеИмя, "ИмяПредопределенныхДанных") = Неопределено Тогда
				ДополнительныеПараметры.СтрокаОшибок = ДополнительныеПараметры.СтрокаОшибок + ОбъекМетаданных.ПолноеИмя() + "." + ПредопределенноеИмя + Символы.ПС;
				
				
				ИмяБлока = ОбъекМетаданных.ПолноеИмя();
				Если Лев(ИмяБлока, 10) = "Справочник" Тогда
					ИмяБлока = "Справочники" + Сред(ИмяБлока, 11);
				ИначеЕсли Лев(ИмяБлока, 10) = "ПланСчетов" Тогда
					ИмяБлока = "ПланыСчетов" + Сред(ИмяБлока, 11);
				ИначеЕсли Лев(ИмяБлока, 22) = "ПланВидовХарактеристик" Тогда
					ИмяБлока = "ПланыВидовХарактеристик" + Сред(ИмяБлока, 23);
				ИначеЕсли Лев(ИмяБлока, 16) = "ПланВидовРасчета" Тогда
					ИмяБлока = "ПланыВидовРасчета" + Сред(ИмяБлока, 17);
				КонецЕсли;
				
				НовыйОбъект = Неопределено;
				Выполнить (" НовыйОбъект = " + ИмяБлока + ".СоздатьЭлемент();");
				Если НЕ НовыйОбъект = Неопределено Тогда
					НовыйОбъект.ИмяПредопределенныхДанных = ПредопределенноеИмя;
					НовыйОбъект.Наименование = ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ПредопределенноеИмя);
					НовыйОбъект.Записать();
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьПредопределенныеДанныеОбъекта()

&НаКлиенте
Процедура ПроизвестиПересчетВсехЗависимыхЦен(Команда)
	
	Дата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПроизвестиПересчетВсехЗависимыхЦенЗавершение1", ЭтаФорма, Новый Структура("Дата", Дата)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы произвести пересчет всех зависимых цен?"), РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиПересчетВсехЗависимыхЦенЗавершение(Дата1, ДополнительныеПараметры) Экспорт
	
	Дата = ?(Дата1 = Неопределено, ДополнительныеПараметры.Дата, Дата1);	
	
	Если (Дата1 <> Неопределено) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Дата);
		глПроверятьСообщения = ИСТИНА;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиПересчетВсехЗависимыхЦенЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Дата = ДополнительныеПараметры.Дата;	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		ПоказатьВводДаты(Новый ОписаниеОповещения("ПроизвестиПересчетВсехЗависимыхЦенЗавершение", ЭтаФорма, Новый Структура("Дата", Дата)), Дата, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите дату переустановки цен"), ЧастиДаты.ДатаВремя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Знач Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.ВидЦен,
	|	ЦеныСрезПоследних.ЕдиницаИзмерения
	|ИЗ РегистрСведений.Цены.СрезПоследних(&Дата, ) КАК ЦеныСрезПоследних
	|ГДЕ ЦеныСрезПоследних.ВидЦен.Зависимая = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТовара = Новый Структура("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВыборкаДетальныеЗаписи.ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения, , ИСТИНА, ИСТИНА);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяПечатьТаблицы(Команда)
	ОткрытьФорму("Обработка.ПроизвольнаяПечатьТаблицыТоваров.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСОдноименнойНоменклатурнойГруппой(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СвязатьСОдноименнойНоменклатурнойГруппойЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы связать номенклатуру с одноименной номенклатурной группой?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСОдноименнойНоменклатурнойГруппойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СвязатьСОдноименнойНоменклатурнойГруппойНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвязатьСОдноименнойНоменклатурнойГруппойНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование, ИСТИНА);
			
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа)
				И НЕ НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа Тогда 
				
				ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;	
				ОбъектНоменклатура.ПометкаУдаления = ЛОЖЬ;
				Попытка 
					
					ОбъектНоменклатура.Записать();
				Исключение 
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры") + ": " + ОбъектНоменклатура + " - " + ТекстОписаниеОшибки);
				КонецПопытки; // Записи ЗначениеЗаполнено()
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистр(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьВсеОсновныеШтрихкодыВРегистрЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все основные штрихкоды номенклатуры в регистр?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копирование штрих-кодов.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере()
	
	ТипШтрихКодов = ?(ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов")), ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов"), ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОсновнойШтрихКод = ВыборкаДетальныеЗаписи.ОсновнойШтрихКод;
			Если НЕ ПустаяСтрока(ОсновнойШтрихКод) Тогда
				
				ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
				ШК.Активность = ИСТИНА;
				ШК.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
				// ШК.СерияНоменклатуры = 
				ШК.ТипШтрихКода = ТипШтрихКодов;
				ШК.ШтрихКод = ОсновнойШтрихКод;
				
				Попытка // Записи в регистр сведений 
					ШК.Записать(ИСТИНА);
					
				Исключение // Записи в регистр сведений 
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений") + ": " + ШК + " - " + ТекстОписаниеОшибки);
				КонецПопытки; // Записи в регистр сведений
				
			КонецЕсли;
		КонецЦикла;                        	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеШтрихКодыВДополнительные(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос штрих-кодов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	СкопироватьВсеШтрихКодыВДополнительныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеШтрихКодыВДополнительныеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДШК = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьМенеджерЗаписи();
			ДШК.Активность 			= ИСТИНА;
			ДШК.ЕдиницаИзмерения 	= ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			ДШК.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
			ДШК.СерияНоменклатуры	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
			ДШК.ТипШтрихКода		= ВыборкаДетальныеЗаписи.ТипШтрихКода;
			ДШК.ШтрихКод			= ВыборкаДетальныеЗаписи.ШтрихКод;
			
			Попытка // Записи в регистр сведений 
				ДШК.Записать(ИСТИНА);
				
			Исключение // Записи в регистр сведений 
			КонецПопытки; // Записи в регистр сведений
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменаОсновнойВалютыУчета(Команда)
	ОткрытьФорму("Обработка.СменаОсновнойВалютыУчета.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СменаУсловийУчетаНоменклатуры(Команда)
	ОткрытьФорму("Обработка.СменаУсловийУчета.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиНаУдаление(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СнятьВсеОтметкиНаУдалениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы снять все отметки на удаление с номенклатуры?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиНаУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Восстановление Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СнятьВсеОтметкиНаУдалениеНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиНаУдалениеНаСервере()
	
	ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.ЭтоГруппа,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
				И НЕ ВыборкаДетальныеЗаписи.ЭтоГруппа
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.родитель)
				И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа) Тогда
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование);
			КонецЕсли;
			
			ОбъектНоменклатура.ПометкаУдаления = ЛОЖЬ;
			Попытка 
				
				ОбъектНоменклатура.Записать();
			Исключение 
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры") + ": " + ОбъектНоменклатура + " - " + ТекстОписаниеОшибки);
			КонецПопытки; // Записи ЗначениеЗаполнено()
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЗадачПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	ТекущаяЗадача = Прав(Элементы.СтраницыЗадач.ТекущаяСтраница.Имя, 1);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаБраузераПриИзменении(Элемент)	
	ПоСтрокеБраузера();
КонецПроцедуры

&НаКлиенте
Процедура УбратьТекстДубльИзНаименований(Команда)
	УбратьТекстДубльИзНаименованийНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УбратьТекстДубльИзНаименованийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Дубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
		ДубльБ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДУБЛЬ");
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НаименованиеВРег = ВРег(ВыборкаДетальныеЗаписи.Наименование);
			Если НЕ Найти(НаименованиеВРег, ДубльБ) = 0 Тогда
				НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НоменклатураОбъект.Наименование = СокрЛП(СтрЗаменить(ВыборкаДетальныеЗаписи.Наименование, Дубль, ""));
				НоменклатураОбъект.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВсехЗаметок(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалениеВсехЗаметокЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы собираетесь Удалить Все заметки и напоминания?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВсехЗаметокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалениеВсехЗаметокНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеВсехЗаметокНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			Заметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
			заметка.Удалить();
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка очистки регистра сведений") + ": " +  + " " + ТекстОписаниеОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДублейНоменклатурыПоШтрихКоду(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалениеДублейНоменклатурыПоШтрихКодуЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли по штрих-коду займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДублейНоменклатурыПоШтрихКодуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере(ИСТИНА);
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЗадублированнойНоменклатуры(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалениеЗадублированнойНоменклатурыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЗадублированнойНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеЗадублированнойНоменклатурыНаСервере(Знач ПоШтрихКоду = ЛОЖЬ)
	
	ИспользоватьШтрихКоды = ПоШтрихКоду И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	
	ИзмененияВДокументах = Новый ТаблицаЗначений;
	ИзмененияВДокументах.Колонки.Добавить("СсылкаНаДокумент");
	ИзмененияВДокументах.Колонки.Добавить("ДатаДокумента");
	ИзмененияВДокументах.Колонки.Добавить("ТаблицаИзменений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.ОсновнойШтрихКод,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) КАК Остаток,
	|	Номенклатура.Предопределенный КАК Предопределенный,
	|	Номенклатура.ЭтоГруппа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК НоменклатураОст,
	|		ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Товары.Остатки КАК ТоварыОстатки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Ссылка = ВложенныйЗапрос.НоменклатураОст)
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Предопределенный УБЫВ,
	|	Остаток УБЫВ,
	|	Номенклатура.ПометкаУдаления";
	
	ВсеИменаИКоды = Новый ТаблицаЗначений;
	ВсеИменаИКоды.Колонки.Добавить("НоменклатураСсылка");
	ВсеИменаИКоды.Колонки.Добавить("НаименованиеВРЕГ");
	ВсеИменаИКоды.Колонки.Добавить("ШтрихКодВРЕГ");
	
	Запросц = Новый Запрос;
	Запросц.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ПометкаУдаления УБЫВ";
	
	РезультатЗапросац = Запросц.Выполнить();
	Если НЕ РезультатЗапросац.Пустой() Тогда 
		ВыборкаДетальныеЗаписиц = РезультатЗапросац.Выбрать();
		
		Пока ВыборкаДетальныеЗаписиц.Следующий() Цикл
			СтрокаТовара = ВсеИменаИКоды.Добавить();
			СтрокаТовара.НоменклатураСсылка = ВыборкаДетальныеЗаписиц.ссылка;
			СтрокаТовара.ШтрихКодВРЕГ 		= СокрЛП(ВРег(ВыборкаДетальныеЗаписиц.ОсновнойШтрихКод));
			СтрокаТовара.НаименованиеВРЕГ 	= СокрЛП(ВРег(ВыборкаДетальныеЗаписиц.Наименование));
		КонецЦикла;                         	
	КонецЕсли;
	
	Запрос3 = Новый Запрос;
	Запрос3.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор,
	|	Закупки.Период КАК Период
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор,
	|	Продажи.Период
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Регистратор,
	|	Товары.Период
	|ИЗ
	|	РегистрНакопления.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВаловаяПрибыль.Регистратор,
	|	ВаловаяПрибыль.Период
	|ИЗ
	|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
	|ГДЕ
	|	ВаловаяПрибыль.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентов.Регистратор,
	|	ЗаказыКлиентов.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.Регистратор,
	|	ЗаказыПоставщикам.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПереданныеНаКомиссию.Регистратор,
	|	ТоварыПереданныеНаКомиссию.Период
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
	|ГДЕ
	|	ТоварыПереданныеНаКомиссию.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";       		
	
	Запрос4 = Новый Запрос;
	Запрос4.Текст = "ВЫБРАТЬ
	|	Цены.Период,
	|	Цены.Номенклатура,
	|	Цены.ВидЦен,
	|	Цены.Цена,
	|	Цены.ДокументРегистрации,
	|	ВЫРАЗИТЬ(Цены.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	Цены.Вручную,
	|	Цены.ЕдиницаИзмерения
	|ИЗ РегистрСведений.Цены КАК Цены
	|ГДЕ Цены.Номенклатура = &Номенклатура";     		
	
	Запрос5 = Новый Запрос;
	Запрос5.Текст =	"ВЫБРАТЬ
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения,
	|	ШтрихКоды.СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Номенклатура = &Номенклатура"; 		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОбнаруженоДублей = 0;
		ПройденнаяНоменклатура = Новый массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 			
			
			Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			Если ПройденнаяНоменклатура.Найти(Номенклатура) = Неопределено Тогда
				ПройденнаяНоменклатура.Добавить(Номенклатура);
				
				Дубли 		= Новый Массив;
				ДублиПоКоду = Новый Массив;
				Отбор 		= Новый Структура();
				Отбор.Вставить("НаименованиеВРЕГ", "");
				ОтборПоКоду	= Новый Структура();
				ОтборПоКоду.Вставить("ШтрихКодВРЕГ", "");
				
				Если НЕ ПоШтрихКоду Тогда
					Отбор.НаименованиеВРЕГ = СокрЛП(ВРег(ВыборкаДетальныеЗаписи.Наименование));				
					Дубли = ВсеИменаИКоды.НайтиСтроки(Отбор);	
				КонецЕсли;
				
				Если ИспользоватьШтрихКоды Тогда
					
					ОтборПоКоду.ШтрихКодВРЕГ = СокрЛП(ВРег(ВыборкаДетальныеЗаписи.ОсновнойШтрихКод));
					Если НЕ ПустаяСтрока(ОтборПоКоду.ШтрихКодВРЕГ) Тогда
						ДублиПоКОду = ВсеИменаИКоды.НайтиСтроки(ОтборПоКоду);
						Для Каждого дпк Из ДублиПоКОду цикл
							дубли.Добавить(дпк);	
						КонецЦикла;	
					КонецЕсли;
					
				КонецЕсли;
				
				Если Дубли.Количество() > 1 Тогда				
					
					СтрокаДубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
					
					Для Каждого ВыборкаДетальныеЗаписи2 Из дубли цикл
						
						Если НЕ ВыборкаДетальныеЗаписи2.НоменклатураСсылка = Номенклатура Тогда
							
							ОбнаруженоДублей  = ОбнаруженоДублей + 1;
							
							НоменклатураДубль = ВыборкаДетальныеЗаписи2.НоменклатураСсылка;
							Запрос3.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса3 = Запрос3.Выполнить();
							Если НЕ РезультатЗапроса3.Пустой() Тогда
								ВыборкаДетальныеЗаписи3 = РезультатЗапроса3.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи3.Следующий() Цикл
									
									СсылкаНаДокумент = ВыборкаДетальныеЗаписи3.Регистратор;
									СтрокаДок 		 = ИзмененияВДокументах.Найти(СсылкаНаДокумент, "СсылкаНаДокумент");
									
									Если СтрокаДок = Неопределено Тогда
										СтрокаДок = ИзмененияВДокументах.Добавить();
										СтрокаДок.СсылкаНаДокумент = СсылкаНаДокумент;
										СтрокаДок.ДатаДокумента = ВыборкаДетальныеЗаписи3.Период;
										
										ТаблицаИзменений = Новый ТаблицаЗначений;
										ТаблицаИзменений.Колонки.Добавить("ИмяТаблицы");
										ТаблицаИзменений.Колонки.Добавить("НомерСтрокиТаблицы");
										ТаблицаИзменений.Колонки.Добавить("Номенклатура");
										ТаблицаИзменений.Колонки.Добавить("НоменклатураДубль");
										
									Иначе
										ТаблицаИзменений = СтрокаДок.ТаблицаИзменений;										
									КонецЕсли;									
									
									СтрокаДокумента = СсылкаНаДокумент.Товары.Найти(НоменклатураДубль, "Номенклатура");
									Если НЕ СтрокаДокумента = Неопределено Тогда
										СтрокаИзменений = ТаблицаИзменений.Добавить();
										СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
										СтрокаИзменений.ИмяТаблицы 			= "Товары";
										СтрокаИзменений.Номенклатура 		= Номенклатура;
										СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
									КонецЕсли;	
									
									Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков") Тогда
										СтрокаДокумента = СсылкаНаДокумент.Цены.Найти(НоменклатураДубль, "Номенклатура");
										Если НЕ СтрокаДокумента = Неопределено Тогда
											СтрокаИзменений = ТаблицаИзменений.Добавить();
											СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
											СтрокаИзменений.ИмяТаблицы 			= "Цены";
											СтрокаИзменений.Номенклатура 		= Номенклатура;
											СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
										КонецЕсли;	
									КонецЕсли;
									
									СтрокаДок.ТаблицаИзменений = ТаблицаИзменений;
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос4.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса4 = Запрос4.Выполнить();
							Если НЕ РезультатЗапроса4.Пустой() Тогда
								ВыборкаДетальныеЗаписи4 = РезультатЗапроса4.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи4.Следующий() Цикл
									
									Цена = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									Цена.Период 				= ВыборкаДетальныеЗаписи4.Период;
									Цена.ВидЦен 				= ВыборкаДетальныеЗаписи4.ВидЦен;
									Цена.Цена 					= ВыборкаДетальныеЗаписи4.Цена;
									Цена.ДокументРегистрации 	= ВыборкаДетальныеЗаписи4.ДокументРегистрации;
									Цена.Комментарий  			= ВыборкаДетальныеЗаписи4.Комментарий;
									Цена.Вручную  				= ВыборкаДетальныеЗаписи4.Вручную;
									Цена.ЕдиницаИзмерения		= ВыборкаДетальныеЗаписи4.ЕдиницаИзмерения;
									
									Цена.Номенклатура 			=  Номенклатура;
									
									Попытка 
										Цена.Записать(ИСТИНА);
									Исключение 
										ТекстОписаниеОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений цены") + ": " + Цена + " - " + ТекстОписаниеОшибки);
									КонецПопытки; 
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос5.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса5 = Запрос5.Выполнить();
							Если НЕ РезультатЗапроса5.Пустой() Тогда
								ВыборкаДетальныеЗаписи5 = РезультатЗапроса5.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи5.Следующий() Цикл
									
									МенеджерШтрихКода = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
									МенеджерШтрихКода.ШтрихКод 		= ВыборкаДетальныеЗаписи5.ШтрихКод;
									МенеджерШтрихКода.ТипШтрихКода 	= ВыборкаДетальныеЗаписи5.ТипШтрихКода;
									МенеджерШтрихКода.ЕдиницаИзмерения	= ВыборкаДетальныеЗаписи5.ЕдиницаИзмерения;
									МенеджерШтрихКода.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи5.СерияНоменклатуры;
									
									МенеджерШтрихКода.Номенклатура 	= Номенклатура;
									
									Попытка 
										МенеджерШтрихКода.Записать(ИСТИНА);
									Исключение 
									КонецПопытки;
									
									НаборЗаписейШтрихкода = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
									НаборЗаписейШтрихкода.Отбор.Номенклатура.Установить(НоменклатураДубль);
									НаборЗаписейШтрихкода.Прочитать();
									
									Для Каждого ЗаписьШтрихкода Из НаборЗаписейШтрихкода Цикл
										Если ЗаписьШтрихкода.ШтрихКод = ВыборкаДетальныеЗаписи5.ШтрихКод Тогда
											НаборЗаписейШтрихкода.Удалить(ЗаписьШтрихкода);
											Прервать;
										КонецЕсли;   	
									КонецЦикла;
									НаборЗаписейШтрихкода.Записать(ИСТИНА);
									
								КонецЦикла;      	
							КонецЕсли;
							
							НоменклатураОбъект = НоменклатураДубль.ПолучитьОбъект();
							
							Если Найти(НоменклатураОбъект.Наименование, СтрокаДубль) = 0 Тогда
								НоменклатураОбъект.Наименование 	= СтрокаДубль + " " + НоменклатураОбъект.наименование;	
							КонецЕсли;
							НоменклатураОбъект.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесен на товар с кодом") + ": " + Номенклатура.Код;
							НоменклатураОбъект.ОбменДанными.Загрузка = ИСТИНА;
							
							Попытка
								НоменклатураОбъект.Записать();
								НоменклатураОбъект = НоменклатураОбъект.ссылка.ПолучитьОбъект();
								Попытка
									НоменклатураОбъект.УстановитьПометкуУдаления(ИСТИНА);
								Исключение
								КонецПопытки;								
							Исключение
							КонецПопытки;
							
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;      		
		
		Если НЕ ОбнаруженоДублей = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено Дублей Номенклатуры") + ": " + СокрЛП(ОбнаруженоДублей) + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Попробуйте их удалить."));
			
			ИзмененияВДокументах.Сортировать("ДатаДокумента");
			
			Для Каждого ДокСтрока Из ИзмененияВДокументах Цикл
				ДокументДляИзменения = ДокСтрока.СсылкаНаДокумент.ПолучитьОбъект();
				Для Каждого ИзменениеВТаблицеОбъекта Из ДокСтрока.ТаблицаИзменений цикл
					СтрокаТаблицыДокумента = ДокументДляИзменения[ИзменениеВТаблицеОбъекта.ИмяТаблицы].Получить(ИзменениеВТаблицеОбъекта.НомерСтрокиТаблицы - 1);
					СтрокаТаблицыДокумента.Номенклатура = ИзменениеВТаблицеОбъекта.Номенклатура;
				КонецЦикла;
				
				ДокументДляИзменения.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;					
			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документов перезаписано") + ": " + СокрЛП(ИзмененияВДокументах.Количество()));
			
		Иначе			
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дублей Номенклатуры не обнаружено!"));
		КонецЕсли;		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИсториюРаботыПользователя(Команда)
	
	ИсторияРаботыПользователя.ОчиститьВсе();
	ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("История очищена!"));
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыОбмена(Команда)
	ИмяНеобходимойФормы = "ПланОбмена.ОбменССайтом.ФормаСписка";
	ОткрытьФорму(ИмяНеобходимойФормы, , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуWebCam(Команда)
	ОбщийМодульКлиент.УстановитьКомпонентуWebCam();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованияВсехПредопределенныхЭлементовПоТекущемуЯзыкуИнтерфейса(Команда)
	ОбщийМодульСервер.ЗадатьНаименованияОбъектамНаДругомЯзыке();
КонецПроцедуры
