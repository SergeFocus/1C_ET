//sza150114-0112
//sza141229-1355 
//sza141216-0350
//sza141129-2309 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументов(Команда)
	
	ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере();
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПоискИУдалениеПомеченныхЭлементовИДокументовНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Попытка
		Помеченные = НайтиПомеченныеНаУдаление();		
		
		ПомеченныеКоличество = Помеченные.Количество();
		Если НЕ ПомеченныеКоличество = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка,
			|	ЗаметкиИНапоминания.Причина
			|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
			|ГДЕ ЗаметкиИНапоминания.СвязаноС = &Причина
			|	И ЗаметкиИНапоминания.Причина = &Причина";
			
			Для Каждого Помеченный Из Помеченные Цикл
				
				ПомеченныйСсылка = Помеченный.Ссылка;
				
				Отбор = Новый Структура;
				Отбор.Вставить("СсылкаНаОбъект", ПомеченныйСсылка);
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.Выбрать(,,Отбор);
				Пока ЖурналСобытий.Следующий() Цикл
					менз = ЖурналСобытий.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ОбъектВладелец", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ДополнительныйРеквизит", ПомеченныйСсылка);
				
				ДопРеквизиты = РегистрыСведений.ЗначенияДополнительныхРеквизитов.Выбрать(,,Отбор);
				Пока ДопРеквизиты.Следующий() Цикл
					менз = ДопРеквизиты.ПолучитьМенеджерЗаписи();
					менз.Удалить();	
				КонецЦикла;
				
				Запрос.УстановитьПараметр("Причина", ПомеченныйСсылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						ОбъектЗаметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						Если ВыборкаДетальныеЗаписи.причина = ПомеченныйСсылка тогда
							ОбъектЗаметка.Причина = Неопределено;
						Иначе
							ОбъектЗаметка.СвязаноС = Неопределено;
						КонецЕсли;
						ОбъектЗаметка.Записать();
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Найденные = 0;
			УдалитьОбъекты(Помеченные, ИСТИНА, Найденные);
			МассивСообщенных = Новый Массив;
			объектовбольше = ЛОЖЬ;
			
			Для Каждого Ссылка из Найденные Цикл
				Если МассивСообщенных.Найти(Ссылка[0]) = Неопределено Тогда
					МассивСообщенных.Добавить(Ссылка[0]);
					СтрСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект не удален") + ": " + СокрЛП(Ссылка[0]);
					СтрСсылка = ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("используется в") + " " + СокрЛП(Ссылка[1]);
					Сообщить (СтрСообщения + СтрСсылка);	
					
				Иначе
					объектовбольше = ИСТИНА;
				КонецЕсли;
			КонецЦикла;
			
			Если объектовбольше Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ссылок на объекты больше. Указана только первая ссылка для каждого из них."));
			КонецЕсли;
			
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистил помеченные на удаление"), 2);
			Сообщить(?(Найденные.Количество() = 0, "", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остальные")) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" помеченные на удаление объекты удалены. Всего") + ": " + ПомеченныеКоличество);
			
		Иначе
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помеченных на удаление объектов нет. "));
		КонецЕсли;
		
	Исключение
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось удалить помеченные на удаление объекты.") + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеВсехЗаметок(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы собираетесь Удалить Все заметки и напоминания?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалениеВсехЗаметокНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеВсехЗаметокНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Ссылка
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			Заметка = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
			заметка.Удалить();
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка очистки регистра сведений") + ": " +  + " " + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЛичныеНастройкиПользователей(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить все личные настройки пользователей?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьВсеЛичныеНастройкиПользователейНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВсеЛичныеНастройкиПользователейНаСервере()
	
	рснз = регистрысведений.НастройкиПользователей.СоздатьНаборЗаписей();
	рснз.Прочитать();
	рснз.Очистить();
	рснз.Записать(ИСТИНА);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТекущиеИтоги(Команда)
	
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет итогов регистров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ПересчитатьТекущиеИтогиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТекущиеИтогиНаСервере()
	
	Для Каждого Рег из Метаданные.РегистрыНакопления Цикл
		
		Если Рег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			РегистрыНакопления[Рег.Имя].ПересчитатьТекущиеИтоги();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СменаОсновнойВалютыУчета(Команда)
	ОткрытьФорму("Обработка.СменаУсловийУчета.Форма.ФормаСменыОсновнойВалютыУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияИСжатиеСправочника(Команда)
	
	Если СписокСправочников.Количество() = 0 Тогда
		ПолучитьСписокСправочников();
	КонецЕсли;
	
	ИмяСправочника = СписокСправочников.ВыбратьЭлемент(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите справочник для перенумерации"));
	
	Если НЕ ИмяСправочника = Неопределено Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенумерация справочника..") + ИмяСправочника.Значение, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПеренумерацияИСжатиеСправочникаНаСервере(ИмяСправочника.Значение);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумерацияИСжатиеСправочникаНаСервере(Знач ИмяСправочника)
	
	Мася = Новый массив(1);
	ЗапКоличествоИмяСправочника = Новый Запрос;
	ЗапКоличествоИмяСправочника.Текст = "ВЫБРАТЬ " + ИмяСправочника + ".Ссылка
	|ИЗ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
	|УПОРЯДОЧИТЬ ПО " + ИмяСправочника + ".ПометкаУдаления,
	|	" + ИмяСправочника + ".Код";
	
	кво = 0;
	
	ВзКоличествоИмяСправочника = ЗапКоличествоИмяСправочника.Выполнить();
	Если НЕ ВзКоличествоИмяСправочника.Пустой() Тогда
		РезКоличествоИмяСправочника = ВзКоличествоИмяСправочника.Выбрать();
		Пока РезКоличествоИмяСправочника.Следующий() Цикл
			Мася.Добавить(РезКоличествоИмяСправочника.Ссылка);
			кво = кво + 1;
		КонецЦикла;	
		
		длинакода =	метаданные.Справочники[ИмяСправочника].ДлинаКода;
		нулей = "";
		сч = 1;
		пока сч < длинакода цикл
			нулей = нулей + "0";
			сч = сч + 1;
		КонецЦикла;
		
		нкод = нулей + "1";
		страда = стрдлина(нулей)+1;
		НПК1 = Новый(тип("СправочникМенеджер."+ ИмяСправочника));
		
		для М = 1 по кво цикл
			
			ММ = Мася[М];
			Если НЕ ММ.предопределенный тогда
				найден = ЛОЖЬ;
				пока ИСТИНА цикл
					нпк = нпк1.НайтиПоКоду(нкод);
					Если нпк.Пустая() Тогда
						найден = ИСТИНА;
						прервать;
						
					Иначе
						эточисло = число(нкод);
						эточисло = эточисло + 1;
						нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
					КонецЕсли;
				КонецЦикла;
				
				ммм = мм.получитьобъект();
				ммм.код = нкод;
				попытка
					Попытка ммм.ОбменДанными.Загрузка=ИСТИНА;
					Исключение
					КонецПопытки;
					ммм.записать();
				исключение Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать") + " " + ммм + " " + описаниеошибки());
					ПРЕРВАТЬ;
				конецпопытки;
				
				эточисло = число(нкод);
				эточисло = эточисло + 1;
				нкод = прав(нулей + стрзаменить(СокрЛП(эточисло), символы.НПП, ""), страда);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСправочников()
	
	Для Каждого ИмяСправочника ИЗ Метаданные.Справочники Цикл
		СписокСправочников.Добавить(ИмяСправочника.Имя);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЗадублированнойНоменклатуры(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеЗадублированнойНоменклатурыНаСервере(Знач ПоШтрихКоду = ЛОЖЬ)
	
	ИспользоватьШтрихКоды = ПоШтрихКоду И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	
	ИзмененияВДокументах = Новый ТаблицаЗначений;
	ИзмененияВДокументах.Колонки.Добавить("СсылкаНаДокумент");
	ИзмененияВДокументах.Колонки.Добавить("ДатаДокумента");
	ИзмененияВДокументах.Колонки.Добавить("ТаблицаИзменений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.ОсновнойШтрихКод,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) КАК Остаток,
	|	Номенклатура.Предопределенный КАК Предопределенный,
	|	Номенклатура.ЭтоГруппа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК НоменклатураОст,
	|		ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Товары.Остатки КАК ТоварыОстатки) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Ссылка = ВложенныйЗапрос.НоменклатураОст)
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Предопределенный УБЫВ,
	|	Остаток УБЫВ,
	|	Номенклатура.ПометкаУдаления";
	
	ВсеИменаИКоды = Новый ТаблицаЗначений;
	ВсеИменаИКоды.Колонки.Добавить("НоменклатураСсылка");
	ВсеИменаИКоды.Колонки.Добавить("НаименованиеВРЕГ");
	ВсеИменаИКоды.Колонки.Добавить("ШтрихКодВРЕГ");
	
	Запросц = Новый Запрос;
	Запросц.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ПометкаУдаления УБЫВ";
	
	РезультатЗапросац = Запросц.Выполнить();
	Если НЕ РезультатЗапросац.Пустой() Тогда 
		ВыборкаДетальныеЗаписиц = РезультатЗапросац.Выбрать();
		
		Пока ВыборкаДетальныеЗаписиц.Следующий() Цикл
			СтрокаТовара = ВсеИменаИКоды.Добавить();
			СтрокаТовара.НоменклатураСсылка = ВыборкаДетальныеЗаписиц.ссылка;
			СтрокаТовара.ШтрихКодВРЕГ 		= СокрЛП(ВРег(ВыборкаДетальныеЗаписиц.ОсновнойШтрихКод));
			СтрокаТовара.НаименованиеВРЕГ 	= СокрЛП(ВРег(ВыборкаДетальныеЗаписиц.Наименование));
		КонецЦикла;                         	
	КонецЕсли;
	
	Запрос3 = Новый Запрос;
	Запрос3.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Закупки.Регистратор,
	|	Закупки.Период КАК Период
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор,
	|	Продажи.Период
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Регистратор,
	|	Товары.Период
	|ИЗ
	|	РегистрНакопления.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВаловаяПрибыль.Регистратор,
	|	ВаловаяПрибыль.Период
	|ИЗ
	|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
	|ГДЕ
	|	ВаловаяПрибыль.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентов.Регистратор,
	|	ЗаказыКлиентов.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПоставщикам.Регистратор,
	|	ЗаказыПоставщикам.Период
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыПереданныеНаКомиссию.Регистратор,
	|	ТоварыПереданныеНаКомиссию.Период
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
	|ГДЕ
	|	ТоварыПереданныеНаКомиссию.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";       		
	
	Запрос4 = Новый Запрос;
	Запрос4.Текст = "ВЫБРАТЬ
	|	Цены.Период,
	|	Цены.Номенклатура,
	|	Цены.ВидЦен,
	|	Цены.Цена,
	|	Цены.ДокументРегистрации,
	|	Цены.Комментарий,
	|	Цены.Вручную,
	|	Цены.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Номенклатура = &Номенклатура";     		
	
	Запрос5 = Новый Запрос;
	Запрос5.Текст =	"ВЫБРАТЬ
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения,
	|	ШтрихКоды.СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ
	|	ШтрихКоды.Номенклатура = &Номенклатура"; 		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОбнаруженоДублей = 0;
		ПройденнаяНоменклатура = Новый массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 			
			
			Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
			Если ПройденнаяНоменклатура.Найти(Номенклатура) = Неопределено тогда
				ПройденнаяНоменклатура.Добавить(Номенклатура);
				
				дУБЛИ 		= Новый мАССИВ;
				дУБЛИПоКОду = Новый мАССИВ;
				Отбор 		= Новый Структура();
				Отбор.Вставить("НаименованиеВРЕГ", "");
				ОтборПоКоду	= Новый Структура();
				ОтборПоКоду.Вставить("ШтрихКодВРЕГ", "");
				
				Если НЕ ПоШтрихКоду тогда
					Отбор.НаименованиеВРЕГ = СокрЛП(ВРег(ВыборкаДетальныеЗаписи.Наименование));				
					Дубли = ВсеИменаИКоды.НайтиСтроки(Отбор);	
				КонецЕсли;
				
				Если ИспользоватьШтрихКоды тогда
					
					ОтборПоКоду.ШтрихКодВРЕГ = СокрЛП(Врег(ВыборкаДетальныеЗаписи.ОсновнойШтрихКод));
					Если НЕ ПустаяСтрока(ОтборПоКоду.ШтрихКодВРЕГ) Тогда
						ДублиПоКОду = ВсеИменаИКоды.НайтиСтроки(ОтборПоКоду);
						Для Каждого дпк из ДублиПоКОду цикл
							дубли.Добавить(дпк);	
						КонецЦикла;	
					КонецЕсли;
					
				КонецЕсли;
				
				Если дубли.Количество() > 1 тогда				
					
					СтрокаДубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
					
					Для Каждого ВыборкаДетальныеЗаписи2 из дубли цикл
						
						Если НЕ ВыборкаДетальныеЗаписи2.НоменклатураСсылка = Номенклатура тогда
							
							ОбнаруженоДублей  = ОбнаруженоДублей + 1;
							
							НоменклатураДубль = ВыборкаДетальныеЗаписи2.НоменклатураСсылка;
							Запрос3.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса3 = Запрос3.Выполнить();
							Если НЕ РезультатЗапроса3.Пустой() Тогда
								ВыборкаДетальныеЗаписи3 = РезультатЗапроса3.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи3.Следующий() Цикл
									
									СсылкаНаДокумент = ВыборкаДетальныеЗаписи3.Регистратор;
									СтрокаДок 		 = ИзмененияВДокументах.Найти(СсылкаНаДокумент, "СсылкаНаДокумент");
									
									Если СтрокаДок = Неопределено Тогда
										СтрокаДок = ИзмененияВДокументах.Добавить();
										СтрокаДок.СсылкаНаДокумент = СсылкаНаДокумент;
										СтрокаДок.ДатаДокумента = ВыборкаДетальныеЗаписи3.Период;
										
										ТаблицаИзменений = Новый ТаблицаЗначений;
										ТаблицаИзменений.Колонки.Добавить("ИмяТаблицы");
										ТаблицаИзменений.Колонки.Добавить("НомерСтрокиТаблицы");
										ТаблицаИзменений.Колонки.Добавить("Номенклатура");
										ТаблицаИзменений.Колонки.Добавить("НоменклатураДубль");
										
									Иначе
										ТаблицаИзменений = СтрокаДок.ТаблицаИзменений;										
									КонецЕсли;									
									
									СтрокаДокумента = СсылкаНаДокумент.Товары.Найти(НоменклатураДубль, "Номенклатура");
									Если НЕ СтрокаДокумента = Неопределено Тогда
										СтрокаИзменений = ТаблицаИзменений.Добавить();
										СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
										СтрокаИзменений.ИмяТаблицы 			= "Товары";
										СтрокаИзменений.Номенклатура 		= Номенклатура;
										СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
									КонецЕсли;	
									
									Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков") Тогда
										СтрокаДокумента = СсылкаНаДокумент.Цены.Найти(НоменклатураДубль, "Номенклатура");
										Если НЕ СтрокаДокумента = Неопределено Тогда
											СтрокаИзменений = ТаблицаИзменений.Добавить();
											СтрокаИзменений.НомерСтрокиТаблицы 	= СтрокаДокумента.НомерСтроки;
											СтрокаИзменений.ИмяТаблицы 			= "Цены";
											СтрокаИзменений.Номенклатура 		= Номенклатура;
											СтрокаИзменений.НоменклатураДубль 	= НоменклатураДубль;
										КонецЕсли;	
									КонецЕсли;
									
									СтрокаДок.ТаблицаИзменений = ТаблицаИзменений;
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос4.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса4 = Запрос4.Выполнить();
							Если НЕ РезультатЗапроса4.Пустой() Тогда
								ВыборкаДетальныеЗаписи4 = РезультатЗапроса4.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи4.Следующий() Цикл
									
									Цена = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
									Цена.Период 				= ВыборкаДетальныеЗаписи4.Период;
									Цена.ВидЦен 				= ВыборкаДетальныеЗаписи4.ВидЦен;
									Цена.Цена 					= ВыборкаДетальныеЗаписи4.Цена;
									Цена.ДокументРегистрации 	= ВыборкаДетальныеЗаписи4.ДокументРегистрации;
									Цена.Комментарий  			= ВыборкаДетальныеЗаписи4.Комментарий;
									Цена.Вручную  				= ВыборкаДетальныеЗаписи4.Вручную;
									Цена.ЕдиницаИзмерения		= ВыборкаДетальныеЗаписи4.ЕдиницаИзмерения;
									
									Цена.Номенклатура 			=  Номенклатура;
									
									Попытка 
										Цена.Записать(ИСТИНА);
									Исключение 
										Сообщение = Новый СообщениеПользователю;
										Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений цены") + ": " + Цена + " " + ОписаниеОшибки();
										Сообщение.Сообщить();
									КонецПопытки; 
									
								КонецЦикла;      	
							КонецЕсли;
							
							Запрос5.УстановитьПараметр("Номенклатура", НоменклатураДубль);
							
							РезультатЗапроса5 = Запрос5.Выполнить();
							Если НЕ РезультатЗапроса5.Пустой() Тогда
								ВыборкаДетальныеЗаписи5 = РезультатЗапроса5.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи5.Следующий() Цикл
									
									РСМЗ = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
									РСМЗ.ШтрихКод 		= ВыборкаДетальныеЗаписи5.ШтрихКод;
									РСМЗ.ТипШтрихКода 	= ВыборкаДетальныеЗаписи5.ТипШтрихКода;
									РСМЗ.ЕдиницаИзмерения	= ВыборкаДетальныеЗаписи5.ЕдиницаИзмерения;
									РСМЗ.СерияНоменклатуры 	= ВыборкаДетальныеЗаписи5.СерияНоменклатуры;
									
									РСМЗ.Номенклатура 	= Номенклатура;
									
									Попытка 
										РСМЗ.Записать(ИСТИНА);
									Исключение 
									КонецПопытки;
									
									ШК = регистрысведений.ШтрихКоды.СоздатьНаборЗаписей();
									ШК.Отбор.Номенклатура.Установить(НоменклатураДубль);
									ШК.Прочитать();
									
									Для Каждого ЗаписьШК из ШК Цикл
										Если ЗаписьШК.ШтрихКод = ВыборкаДетальныеЗаписи5.ШтрихКод Тогда
											ШК.Удалить(ЗаписьШК);
											Прервать;
										КонецЕсли;   	
									КонецЦикла;
									ШК.Записать(ИСТИНА);
									
								КонецЦикла;      	
							КонецЕсли;
							
							НомОбъект = НоменклатураДубль.ПолучитьОбъект();
							
							Если Найти(НомОбъект.Наименование, СтрокаДубль) = 0 Тогда
								НомОбъект.Наименование 	= СтрокаДубль + " " + НомОбъект.наименование;	
							КонецЕсли;
							НомОбъект.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесен на товар с кодом") + ": " + Номенклатура.Код;
							НомОбъект.ОбменДанными.Загрузка = ИСТИНА;
							
							попытка
								НомОбъект.Записать();
								НомОбъект = НомОбъект.ссылка.ПолучитьОбъект();
								Попытка
									НомОбъект.УстановитьПометкуУдаления(ИСТИНА);
								исключение
								конецпопытки;   				
								
							исключение
							конецпопытки;
							
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;      		
		
		Если НЕ ОбнаруженоДублей = 0 тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено Дублей Номенклатуры") + ": " + СокрЛП(ОбнаруженоДублей) + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Попробуйте их удалить.");
			Сообщение.Сообщить();
			
			ИзмененияВДокументах.Сортировать("ДатаДокумента");
			
			Для Каждого ДокСтрока Из ИзмененияВДокументах Цикл
				ДокументДляИзменения = ДокСтрока.СсылкаНаДокумент.получитьобъект();
				Для Каждого изменениевтаблице из ДокСтрока.ТаблицаИзменений цикл
					СтрокаТаблицыДокумента = ДокументДляИзменения[изменениевтаблице.ИмяТаблицы].Получить(изменениевтаблице.НомерСтрокиТаблицы - 1);
					СтрокаТаблицыДокумента.Номенклатура = изменениевтаблице.Номенклатура;
				КонецЦикла;
				
				ДокументДляИзменения.записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;					
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документов перезаписано") + ": " + СокрЛП(ИзмененияВДокументах.Количество());
			Сообщение.Сообщить();
			
		Иначе			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дублей Номенклатуры не обнаружено!");
			Сообщение.Сообщить();
		КонецЕсли;		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДублейНоменклатурыПоШтрихКоду(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок на дубли по штрих-коду займет время! Продолжить?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СтруктураНастроек = ПодготовкаКУдалению();
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос ссылок для дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 10);
		УдалениеЗадублированнойНоменклатурыНаСервере(ИСТИНА);
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершение поиска дублей номенклатуры по штрих-коду.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), 90);
		ЗакрытиеУдаления(СтруктураНастроек);
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы пометить на удаление всю неиспользованную номенклатуру?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Чистка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	сч = 0;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПустаяНоменклатурнаяГруппа = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			Движения = ОбщийМодульСервер.ПолучитьДвиженияТовара(Номенклатура);
			
			Если Движения = 0 Тогда
				
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.НоменклатурнаяГруппа = ПустаяНоменклатурнаяГруппа;
				НомОбъект.пометкаудаления = ИСТИНА;
				
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Помечено номенклатуры") + ": " + СокрЛП(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПодготовкаКУдалению()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("БылЗапрет", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде"));
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ЗапретитьНоменклатуруБезШтрихКода", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"));
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры"));
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеДенегБезОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровБезОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровБезОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка"));
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать); 
	
	СтруктураНастроек.Вставить("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков"));
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(ЛОЖЬ);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуПриПриходованииТовара"));
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(ИСТИНА);
	
	СтруктураНастроек.Вставить("НеСворачиватьТоварыПоКоличествуВоВсехДокументах", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеСворачиватьТоварыПоКоличествуВоВсехДокументах"));
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(ИСТИНА);
	
	СтруктураНастроек.Вставить("НеПроверятьУникальностьШтрихКода", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода"));
	Константы.НеПроверятьУникальностьШтрихКода.Установить(ИСТИНА);	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	возврат СтруктураНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗакрытиеУдаления(Знач СтруктураНастроек)
	
	Константы.ЗапретитьИзмененияВПрошломПериоде.Установить(СтруктураНастроек.БылЗапрет);
	Константы.ЗапретитьНоменклатуруБезШтрихКода.Установить(СтруктураНастроек.ЗапретитьНоменклатуруБезШтрихКода);
	Константы.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры.Установить(СтруктураНастроек.НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры);
	Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеДенегБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровБезОстатка); 
	Константы.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка.Установить(СтруктураНастроек.ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка); 
	Константы.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков.Установить(СтруктураНастроек.УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков);
	Константы.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуПриПриходованииТовара);
	Константы.НеСворачиватьТоварыПоКоличествуВоВсехДокументах.Установить(СтруктураНастроек.НеСворачиватьТоварыПоКоличествуВоВсехДокументах);
	Константы.НеПроверятьУникальностьШтрихКода.Установить(СтруктураНастроек.НеПроверятьУникальностьШтрихКода);	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиНаУдаление(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы снять все отметки на удаление с номенклатуры?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Восстановление Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СнятьВсеОтметкиНаУдалениеНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиНаУдалениеНаСервере()
	
	ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.ЭтоГруппа,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
				И НЕ ВыборкаДетальныеЗаписи.ЭтоГруппа
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.родитель)
				И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа) Тогда
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование);
			КонецЕсли;
			
			ОбъектНоменклатура.ПометкаУдаления = ЛОЖЬ;
			Попытка 
				
				ОбъектНоменклатура.Записать();
			Исключение 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры") + ": " + ОбъектНоменклатура + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки; //Записи ЗначениеЗаполнено()
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьТекстДубльИзНаименований(Команда)
	УбратьТекстДубльИзНаименованийНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УбратьТекстДубльИзНаименованийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Дубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль");
		ДубльБ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДУБЛЬ");
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НаименованиеВРег = ВРег(ВыборкаДетальныеЗаписи.Наименование);
			Если НЕ Найти(НаименованиеВРег, ДубльБ) = 0 Тогда
				НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НоменклатураОбъект.Наименование = СокрЛП(СтрЗаменить(ВыборкаДетальныеЗаписи.Наименование, Дубль, ""));
				НоменклатураОбъект.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменаУсловийУчетаНоменклатуры(Команда)
	
	Форма = ПолучитьФорму("Обработка.СменаУсловийУчета.Форма");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименования(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что хотите перенести всю номенклатуру?") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обратно вернуть ее автоматически будет невоможно!"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере();	
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиНоменклатуруПоПапкамПоПервомуСловуНаименованияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	сч = 0;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(ВыборкаДетальныеЗаписи.наименование);
			Если НЕ ГруппаПоПервомуСлову = Неопределено
				И НЕ ГруппаПоПервомуСлову = ВыборкаДетальныеЗаписи.Родитель Тогда
				
				НомОбъект = ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
				НомОбъект.Родитель = ГруппаПоПервомуСлову;
				НомОбъект.записать();
				
				сч = сч + 1;
				
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	Если сч =0 Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры для такого переноса");
		Сообщение.Сообщить();
		
	Иначе     		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций") + ": " + СокрЛП(сч);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСОдноименнойНоменклатурнойГруппой(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы связать номенклатуру с одноименной номенклатурной группой?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка Номенклатуры.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		СвязатьСОдноименнойНоменклатурнойГруппойНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СвязатьСОдноименнойНоменклатурнойГруппойНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.Наименование,
	|	Номенклатура.НоменклатурнаяГруппа
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоменклатурнаяГруппа = ОбщийМодульПовторВТеченииСервера.НайтиПоНаименованиюНоменклатурнуюГруппу(СокрЛП(ВыборкаДетальныеЗаписи.родитель), ВыборкаДетальныеЗаписи.Наименование, ИСТИНА);
			
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа)
				И НЕ НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа Тогда 
				
				ОбъектНоменклатура = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				ОбъектНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;	
				ОбъектНоменклатура.ПометкаУдаления = ЛОЖЬ;
				Попытка 
					
					ОбъектНоменклатура.Записать();
				Исключение 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры") + ": " + ОбъектНоменклатура + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки; //Записи ЗначениеЗаполнено()
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиПересчетВсехЗависимыхЦен(Команда)
	
	Дата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы произвести пересчет всех зависимых цен?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
		И ВвестиДату(Дата, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите дату переустановки цен"), ЧастиДаты.ДатаВремя) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пересчет зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Дата);
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроизвестиПересчетВсехЗависимыхЦенНаСервере(Знач Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Номенклатура,
	|	ЦеныСрезПоследних.Цена,
	|	ЦеныСрезПоследних.ВидЦен,
	|	ЦеныСрезПоследних.ЕдиницаИзмерения
	|ИЗ РегистрСведений.Цены.СрезПоследних(&Дата, ) КАК ЦеныСрезПоследних
	|ГДЕ ЦеныСрезПоследних.ВидЦен.Зависимая = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТовара = Новый Структура("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
			
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВыборкаДетальныеЗаписи.ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШтрихКодЦена(Команда)
	
	Адрес = "";
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл текста") + " (*.*)|*.*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок		  =	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для выгрузки") + ": ";
	ДиалогВыбФайла.ПолноеИмяФайла	  =	Адрес; //АДРЕС
	ДиалогВыбФайла.Фильтр			  =	ДиалогФильтр;
	ДиалогВыбФайла.Расширение		  =	ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор =	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра	  =	0;
	Если ДиалогВыбФайла.Выбрать() Тогда
		
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		Если ВвестиЗначение(ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите вид цен"), тип("СправочникСсылка.ВидыЦен")) Тогда
			
			Адрес = ДиалогВыбФайла.ПолноеИмяФайла;
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгружается документ"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
			ВыгрузитьШтрихКодЦенаСервер(Адрес, ВидЦен);	
		КонецЕсли;
	КонецЕсли; //когда файл Адрес выбран
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьШтрихКодЦенаСервер(Знач Адрес, Знач ВидЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ДополнительныеШтрихКоды.ШтрихКод,
	|	ДополнительныеШтрихКоды.Номенклатура,
	|	ДополнительныеШтрихКоды.СерияНоменклатуры,
	|	ДополнительныеШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ Номенклатура.ОсновнойШтрихКод,
	|	Номенклатура.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ Справочник.Номенклатура КАК Номенклатура";
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстДок.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ШтрихКод);
			Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(ВыборкаДетальныеЗаписи.Номенклатура, ВидЦен, Дата, ЛОЖЬ, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			ТекстДок.ДобавитьСтроку(Формат(Цена, "ЧЦ=15; ЧДЦ=3; ЧРД=.; ЧРГ=; ЧГ=0"));
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстДок.Записать(Адрес);
	ТекстДок = Неопределено;
	
КонецПроцедуры //ВыгрузитьШтрихКодКОличество(Адрес)

&НаКлиенте
Процедура ОчиститьВсеШтрихКоды(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ВЫ УВЕРЕНЫ, что готовы удалить все штрих-коды?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все штрих-коды будут удалены?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ОчиститьВсеШтрихКодыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеШтрихКодыНаСервере()
	
	РСНЗ = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
	РСНЗ.Записать(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрикоды(Команда)
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры"))
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить обновление всех штрих-кодов?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда				
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление штрих-кодов номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		ОбновитьШтрихКодыНаСервере();	
		
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодыНаСервере()
	
	Счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			БылИзм = ЛОЖЬ;
			
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии Тогда 
				Если ПустаяСтрока(НоменклатураОбъект.ОсновнойШтрихКод) Тогда
					НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
					БылИзм = ИСТИНА;
				КонецЕсли;
			Иначе
				НоменклатураОбъект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(НоменклатураОбъект);
				БылИзм = ИСТИНА;
			КонецЕсли;
			
			Если БылИзм Тогда
				НоменклатураОбъект.Записать();	
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;                                                                                      	
	КонецЕсли;
	
	Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего обновлено") + ": " + СокрЛП(Счетчик));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеШтрихКодыВДополнительные(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенос штрих-кодов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	СкопироватьВсеШтрихКодыВДополнительныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеШтрихКодыВДополнительныеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ШтрихКоды.Номенклатура,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.ЕдиницаИзмерения
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДШК = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьМенеджерЗаписи();
			ДШК.Активность 			= ИСТИНА;
			ДШК.ЕдиницаИзмерения 	= ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			ДШК.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
			ДШК.СерияНоменклатуры	= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
			ДШК.ТипШтрихКода		= ВыборкаДетальныеЗаписи.ТипШтрихКода;
			ДШК.ШтрихКод			= ВыборкаДетальныеЗаписи.ШтрихКод;
			
			Попытка //Записи в регистр сведений 
				ДШК.Записать(ИСТИНА);
				
			Исключение //Записи в регистр сведений 
			КонецПопытки; //Записи в регистр сведений
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистр(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все основные штрихкоды номенклатуры в регистр?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копирование штрихкодов.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере();
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьВсеОсновныеШтрихкодыВРегистрНаСервере()
	
	ТипШтрихКодов = ?(ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов")), ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов"), ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
	|	Номенклатура.ОсновнойШтрихКод
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОсновнойШтрихКод = ВыборкаДетальныеЗаписи.ОсновнойШтрихКод;
			Если НЕ ПустаяСтрока(ОсновнойШтрихКод) Тогда
				
				ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
				ШК.Активность = ИСТИНА;
				ШК.Номенклатура = ВыборкаДетальныеЗаписи.ссылка;
				//ШК.СерияНоменклатуры = 
				ШК.ТипШтрихКода = ТипШтрихКодов;
				ШК.ШтрихКод = ОсновнойШтрихКод;
				
				Попытка //Записи в регистр сведений 
					ШК.Записать(ИСТИНА);
					
				Исключение //Записи в регистр сведений 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений") + ": " + ШК + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки; //Записи в регистр сведений
				
			КонецЕсли;
		КонецЦикла;                        	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремя(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всю номенклатуру без остатков и продаж за последний месяц в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Номенклатуры.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсюНоменклатуруБезОстатковНаТекущееВремяНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Номенклатура.Архив ;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -1);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(Номенклатура, , Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажЗаПериод(Номенклатура, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Номенклатура.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				НомОбъект.ОбменДанными.Загрузка = ИСТИНА;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено позиций") + ": " + СокрЛП(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГод(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Клиентов без долга и продаж за последний год в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Клиентов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехКлиентовБезДолгаИПродажЗаПоследнийГодНаСервере()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка
	|ИЗ Справочник.Клиенты КАК Клиенты
	|ГДЕ Клиенты.ЭтоГруппа = ЛОЖЬ
	|	И Клиенты.Предопределенный = ЛОЖЬ
	|	И Клиенты.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Клиенты.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -12);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Клиент = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Клиент, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоПродажЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоПродажКлиентаЗаПериод(Клиент, ДатаНачала, Дата);
			
			Если КоличествоПродажЗаПериод = 0 Тогда
				НомОбъект = Клиент.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Клиентов") + ": " + СокрЛП(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсехПоставщиков()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Поставщики.Ссылка
	|ИЗ
	|	Справочник.Поставщики КАК Поставщики
	|ГДЕ
	|	Поставщики.ЭтоГруппа = ЛОЖЬ
	|	И Поставщики.Предопределенный = ЛОЖЬ
	|	И Поставщики.ЭтоСотрудник = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Поставщики.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ДатаНачала = ДобавитьМесяц(Дата, -6);
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Поставщик = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщика(Поставщик, Дата);
		
		Если Остаток = 0 Тогда
			
			КоличествоЗаПериод = ОбщийМодульСервер.ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Поставщик, ДатаНачала, Дата);
			
			Если КоличествоЗаПериод = 0 Тогда
				НомОбъект = Поставщик.ПолучитьОбъект();
				НомОбъект.Родитель = Архив;
				Попытка 
					НомОбъект.Записать();
					сч = сч + 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;                          	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Поставщиков") + ": " + СокрЛП(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры //ПеренестиВПапкуАРХИВВсехПоставщиков

&НаКлиенте
Процедура ПеренестиВПапкуАРХИВВсехПоставщиковБезЗадолженностиИПоступленийЗаПоследниеПолГода(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести всех Поставщиков без задолженности и поступлений за последние полгода в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Поставщиков.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсехПоставщиков();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАРХИВВсеДоговораСКонтрагентамиБезЗадолженностиИЗаконченнымСроком(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы перенести все Договора без задолженности и с законченным сроком в папку Архив?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Архивация Договоров.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));		
		ПеренестиВПапкуАРХИВВсеДоговора();
		глПроверятьСообщения = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиВПапкуАРХИВВсеДоговора()
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.Ссылка
	|ИЗ
	|	Справочник.Договора КАК Договора
	|ГДЕ
	|	Договора.ЭтоГруппа = ЛОЖЬ
	|	И Договора.Предопределенный = ЛОЖЬ
	|	И Договора.ДатаОкончания < &Дата";
	
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Архив = Справочники.Договора.Архив;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Договор = ВыборкаДетальныеЗаписи.Ссылка;
		Остаток = ОбщийМодульСервер.ПолучитьДолгДоговора(Договор, Дата);
		
		Если Остаток = 0 Тогда
			
			НомОбъект = Договор.ПолучитьОбъект();
			НомОбъект.Родитель = Архив;
			Попытка 
				НомОбъект.Записать();
				сч = сч + 1;
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
				Сообщение.Сообщить();
				
			КонецПопытки;                          	
		КонецЕсли;
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перенесено Договоров") + " " + СокрЛП(сч);
	Сообщение.Сообщить();
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
КонецПроцедуры //ПеренестиВПапкуАРХИВВсехПоставщиков()

&НаКлиенте
Процедура ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзменении(Элемент)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + Элемент.Имя, 2);
	ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказПриИзмененииНаСервере()
	Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ);
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура НеВыводитьСообщенийПриИзменении(Элемент)
	НеВыводитьСообщенийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НеВыводитьСообщенийПриИзмененииНаСервере()
	ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПовторноИспользуемыеЗначенияКоманда(Команда)
	ОбновитьПовторноИспользуемыеЗначенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000150", ЭтаФорма, Отказ, );	
	Если НЕ Отказ Тогда
		ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();	
		ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПрограммныйКод(Команда)
	ПрограммныйКод1С = "";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрограммныйКод1С(Команда)
	
	ВыполнитьПрограммныйКод1СНаСервере();
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПрограммныйКод1СНаСервере()
	
	Если СокрЛП(ПрограммныйКод1С) = "1" Тогда
		ПрограммныйКод1С = "";
		Элементы.Админка.Видимость = ИСТИНА;
	Иначе
		
		Попытка 
			выполнить ("" + ПрограммныйКод1С + ";");
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
			Сообщение.Поле = "ПрограммныйКод1С";
			Сообщение.Сообщить();
			
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиВсеДокументыЗаУказанныйПериод(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить перепроведение?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ПерепровестиВсеДокументыЗаУказанныйПериодНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиВсеДокументыЗаУказанныйПериодНаСервере()
	ОбщийМодульСерверПривилегия.ПерепровестиВсеДокументыВБазеДанных(ДатаНачала, ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли(Команда)
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаАктуальностиПоказателейВаловойПрибыли")) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепроведение документов.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.GrayGIf);
		ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере();
		
		ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перепровел документы для восстановления показателей валовой прибыли"), 2);
		глПроверятьСообщения = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибылиНаСервере()
	
	ОбщийМодульСервер.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
	Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить('00010101000000');
	ДатаАктуальностиПоказателейВаловойПрибыли = '00010101000000';
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПовторноИспользуемыеЗначенияНаСервере()
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЭкспортПакетноеИсполнение(Команда)
	
	ФормаОбработки = ПолучитьФорму("Обработка.ИмпортЭкспортПакетноеИсполнение.Форма.ФормаСпискаЗадач");
	ФормаОбработки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Пользователи(Команда)
	
	ФормаСписка = ПолучитьФорму("Справочник.Поставщики.ФормаСписка");
	ФормаСписка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЦеныЗаПериод(Команда)
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы произвести очистку цен номенклатуры в указанном периоде?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьЦеныЗаПериодНаСервере();	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЦеныЗаПериодНаСервере()
	
	ЗаписиЦены = РегистрыСведений.Цены.Выбрать(ДатаНачала, ДатаОкончания);
	Пока ЗаписиЦены.Следующий() Цикл
			МенеджерЗаписиЦены = ЗаписиЦены.ПолучитьМенеджерЗаписи();
			МенеджерЗаписиЦены.Удалить();
		КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочников(Команда)
	
	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Очистка пробелов сначала и в конце текстовых полей всех элементов справочников"), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПочиститьПробелыСНачалаИВКонцеТекстовыхПолейДляВсехЭлементовСправочниковНаСервере()
	
	Запрос = Новый Запрос;
	СчетчикИзмененных = 0;
	
	попытка
		установитьМонопольныйРежим(ИСТИНА);
	исключение
	конецпопытки;
	
	Для Каждого СправочникБазыДанных Из Метаданные.Справочники Цикл
		
		МассивИменСтроковыхРеквизитов = Новый Массив;
		Для Каждого РеквизитСправочника Из СправочникБазыДанных.Реквизиты Цикл
			Если РеквизитСправочника.Тип.СодержитТип(Тип("Строка")) Тогда
				МассивИменСтроковыхРеквизитов.Добавить(РеквизитСправочника.Имя);
			КонецЕсли;			
		КонецЦикла;                                                                         
		
		Если Не МассивИменСтроковыхРеквизитов.Количество() = 0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ С.Ссылка ИЗ Справочник." + СправочникБазыДанных.Имя + " КАК С " + ?(СправочникБазыДанных.Иерархический И СправочникБазыДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов, " ГДЕ НЕ С.ЭтоГруппа ", "");
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Былизм = ЛОЖЬ;
					ЭлементСправочника = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого РеквизитИзМассива Из МассивИменСтроковыхРеквизитов Цикл
						Попытка //реквизит группы
							ЗначениеСтроки = ЭлементСправочника[РеквизитИзМассива];
							Если НЕ ЗначениеСтроки = СокрЛП(ЗначениеСтроки) Тогда
								ЭлементСправочника[РеквизитИзМассива] = СокрЛП(ЗначениеСтроки);
								Былизм = ИСТИНА;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
					
					Если Былизм Тогда
						Попытка 
							ЭлементСправочника.Записать();
							СчетчикИзмененных = СчетчикИзмененных + 1;
						Исключение 	
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	исключение
	конецпопытки;
	
	Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменено объектов") + ": " + СчетчикИзмененных);
			
КонецПроцедуры

&НаКлиенте
Процедура УзлыОбмена(Команда)
	ИмяНеобходимойФормы = "ПланОбмена.ОбменССайтом.ФормаСписка";
	ОткрытьФорму(ИмяНеобходимойФормы, , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеФункциональныеОпции(Команда)
	
	ВключитьВсеФункциональныеОпцииНаСервере();
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьВсеФункциональныеОпцииНаСервере()
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Константы[ФункциональнаяОпция.Хранение.Имя].Установить(ИСТИНА);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьВсеФункциональныеОпции(Команда)
	ВыключитьВсеФункциональныеОпцииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыключитьВсеФункциональныеОпцииНаСервере()
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Константы[ФункциональнаяОпция.Хранение.Имя].Установить(ЛОЖЬ);		
	КонецЦикла;
	
КонецПроцедуры
