// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
// Процедура представляет обработчик события "Нажатие" кнопки
// "ОК" командной панели "ОсновныеДействияФормы".
// 
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ОК").
// 
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	Параметры.ПараметрыНастройки.Добавить(Порт           , "Порт");
	Параметры.ПараметрыНастройки.Добавить(Скорость       , "Скорость");
	Параметры.ПараметрыНастройки.Добавить(Таймаут        , "Таймаут");
	Параметры.ПараметрыНастройки.Добавить(Четность       , "Четность");
	Параметры.ПараметрыНастройки.Добавить(БитыДанных     , "БитыДанных");
	Параметры.ПараметрыНастройки.Добавить(СтопБиты       , "СтопБиты");
	Параметры.ПараметрыНастройки.Добавить(ТаблицаВыгрузки, "ТаблицаВыгрузки");
	Параметры.ПараметрыНастройки.Добавить(ТаблицаЗагрузки, "ТаблицаЗагрузки");
	Параметры.ПараметрыНастройки.Добавить(Модель         , "Модель");

	времФорматВыгрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматВыгрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматВыгрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	Параметры.ПараметрыНастройки.Добавить(времФорматВыгрузки, "ФорматВыгрузки");

	времФорматЗагрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматЗагрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматЗагрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	Параметры.ПараметрыНастройки.Добавить(времФорматЗагрузки, "ФорматЗагрузки");

	ОчиститьСообщения();
	Закрыть(КодВозвратаДиалога.ОК);

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"           , Порт);
	времПараметрыУстройства.Вставить("Скорость"       , Скорость);
	времПараметрыУстройства.Вставить("Таймаут"        , Таймаут);
	времПараметрыУстройства.Вставить("Четность"       , Четность);
	времПараметрыУстройства.Вставить("БитыДанных"     , БитыДанных);
	времПараметрыУстройства.Вставить("СтопБиты"       , СтопБиты);
	времПараметрыУстройства.Вставить("ТаблицаВыгрузки", ТаблицаВыгрузки);
	времПараметрыУстройства.Вставить("ТаблицаЗагрузки", ТаблицаЗагрузки);
	времПараметрыУстройства.Вставить("Модель"         , Модель);

	времФорматВыгрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматВыгрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматВыгрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	времПараметрыУстройства.Вставить("ФорматВыгрузки", времФорматВыгрузки);

	времФорматЗагрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматЗагрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматЗагрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	времПараметрыУстройства.Вставить("ФорматЗагрузки", времФорматЗагрузки);

	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьВерсиюДрайвера",
	                                                               ВходныеПараметры,
	                                                               ВыходныеПараметры,
	                                                               Идентификатор,
	                                                               времПараметрыУстройства) Тогда
		Драйвер = ВыходныеПараметры[0];
		Версия  = ВыходныеПараметры[1];
	Иначе
		Драйвер = ВыходныеПараметры[2];
		Версия  = НСтр("ru='Не определена'");
	КонецЕсли;

	Элементы.Драйвер.ЦветТекста = ?(Драйвер = НСтр("ru='Не установлен'"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = ?(Версия  = НСтр("ru='Не определена'"), ЦветОшибки, ЦветТекста);

	Элементы.УстановитьДрайвер.Доступность = Не (Драйвер = НСтр("ru='Установлен'"));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьИнформациюОДрайвере();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("Идентификатор", Идентификатор);
	Заголовок = НСтр("ru='ТСД'") + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;

	СпМодель = Элементы.Модель.СписокВыбора;
	СпМодель.Добавить("Opticon DWT");
	СпМодель.Добавить("Opticon OPL");
	СпМодель.Добавить("Opticon PHL");
	СпМодель.Добавить("Zebex PDx10");
	СпМодель.Добавить("Zebex PDx20");

	СпПорт = Элементы.Порт.СписокВыбора;
	Индекс = Неопределено;
	Для Индекс = 1 По 32 Цикл
		СпПорт.Добавить(Индекс, "COM" + СокрЛП(Индекс));
	КонецЦикла;

	СпСкорость = Элементы.Скорость.СписокВыбора;
	СпСкорость.Добавить(1,     "300 бод");
	СпСкорость.Добавить(3,    "1200 бод");
	СпСкорость.Добавить(4,    "2400 бод");
	СпСкорость.Добавить(5,    "4800 бод");
	СпСкорость.Добавить(7,    "9600 бод");
	СпСкорость.Добавить(10,  "19200 бод");
	СпСкорость.Добавить(11,  "38400 бод");
	СпСкорость.Добавить(13,  "57600 бод");
	СпСкорость.Добавить(14, "115200 бод");

	СпЧетность = Элементы.Четность.СписокВыбора;
	СпЧетность.Добавить(0, "Нет");
	СпЧетность.Добавить(1, "Нечетность");
	СпЧетность.Добавить(2, "Четность");
	СпЧетность.Добавить(3, "Установлен");
	СпЧетность.Добавить(4, "Сброшен");

	СпБитыДанных = Элементы.БитыДанных.СписокВыбора;
	СпБитыДанных.Добавить(3, "7 бит");
	СпБитыДанных.Добавить(4, "8 бит");

	СпСтопБиты = Элементы.СтопБиты.СписокВыбора;
	СпСтопБиты.Добавить(0, "1 бит");
	СпСтопБиты.Добавить(2, "2 бита");

	времПорт            = Неопределено;
	времСкорость        = Неопределено;
	времТаймаут         = Неопределено;
	времЧетность        = Неопределено;
	времБитыДанных      = Неопределено;
	времСтопБиты        = Неопределено;
	времТаблицаВыгрузки = Неопределено;
	времТаблицаЗагрузки = Неопределено;
	времРазделитель     = Неопределено;
	времФорматВыгрузки  = Неопределено;
	времФорматЗагрузки  = Неопределено;
	времМодель          = Неопределено;

	Параметры.Свойство("Порт"           , времПорт);
	Параметры.Свойство("Скорость"       , времСкорость);
	Параметры.Свойство("Таймаут"        , времТаймаут);
	Параметры.Свойство("Четность"       , времЧетность);
	Параметры.Свойство("БитыДанных"     , времБитыДанных);
	Параметры.Свойство("СтопБиты"       , времСтопБиты);
	Параметры.Свойство("ТаблицаВыгрузки", времТаблицаВыгрузки);
	Параметры.Свойство("ТаблицаЗагрузки", времТаблицаЗагрузки);
	Параметры.Свойство("ФорматВыгрузки" , времФорматВыгрузки);
	Параметры.Свойство("ФорматЗагрузки" , времФорматЗагрузки);
	Параметры.Свойство("Модель"         , времМодель);

	Порт            = ?(времПорт            = Неопределено,    1, времПорт);
	Скорость        = ?(времСкорость        = Неопределено,    7, времСкорость);
	Таймаут         = ?(времТаймаут         = Неопределено, 3200, времТаймаут);
	Четность        = ?(времЧетность        = Неопределено,    0, времЧетность);
	БитыДанных      = ?(времБитыДанных      = Неопределено,    4, времБитыДанных);
	СтопБиты        = ?(времСтопБиты        = Неопределено,    0, времСтопБиты);
	ТаблицаВыгрузки = ?(времТаблицаВыгрузки = Неопределено,    1, времТаблицаВыгрузки);
	ТаблицаЗагрузки = ?(времТаблицаЗагрузки = Неопределено,    1, времТаблицаЗагрузки);

	Если времФорматВыгрузки <> Неопределено Тогда
		Для Каждого СтрокаБазы Из времФорматВыгрузки Цикл
			СтрокаТаблицы = ФорматВыгрузки.Добавить();
			СтрокаТаблицы.НомерПоля    = СтрокаБазы.НомерПоля;
			СтрокаТаблицы.Наименование = СтрокаБазы.Наименование;
		КонецЦикла;
	КонецЕсли;

	Если времФорматЗагрузки <> Неопределено Тогда
		Для Каждого СтрокаДокумента Из времФорматЗагрузки Цикл
			СтрокаТаблицы = ФорматЗагрузки.Добавить();
			СтрокаТаблицы.НомерПоля    = СтрокаДокумента.НомерПоля;
			СтрокаТаблицы.Наименование = СтрокаДокумента.Наименование;
		КонецЦикла;
	КонецЕсли;

	Модель = ?(времМодель = Неопределено, Элементы.Модель.СписокВыбора[0].Значение, времМодель);

	Элементы.ТестУстройства.Видимость    = (ПараметрыСеанса.РабочееМестоКлиента
	                                        = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость = (ПараметрыСеанса.РабочееМестоКлиента
	                                        = Идентификатор.РабочееМесто);

КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)

	РезультатТеста = Неопределено;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"           , Порт);
	времПараметрыУстройства.Вставить("Скорость"       , Скорость);
	времПараметрыУстройства.Вставить("Таймаут"        , Таймаут);
	времПараметрыУстройства.Вставить("Четность"       , Четность);
	времПараметрыУстройства.Вставить("БитыДанных"     , БитыДанных);
	времПараметрыУстройства.Вставить("СтопБиты"       , СтопБиты);
	времПараметрыУстройства.Вставить("ТаблицаВыгрузки", ТаблицаВыгрузки);
	времПараметрыУстройства.Вставить("ТаблицаЗагрузки", ТаблицаЗагрузки);
	времПараметрыУстройства.Вставить("Модель"         , Модель);

	времФорматВыгрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматВыгрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматВыгрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	времПараметрыУстройства.Вставить("ФорматВыгрузки", времФорматВыгрузки);

	времФорматЗагрузки = Новый Массив();
	Для Каждого СтрокаТаблицы Из ФорматЗагрузки Цикл
		НоваяСтрока = Новый Структура("НомерПоля, Наименование",
		                              СтрокаТаблицы.НомерПоля,
		                              СтрокаТаблицы.Наименование);
		времФорматЗагрузки.Добавить(НоваяСтрока);
	КонецЦикла;
	времПараметрыУстройства.Вставить("ФорматЗагрузки", времФорматЗагрузки);

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                                      ВходныеПараметры,
	                                                                      ВыходныеПараметры,
	                                                                      Идентификатор,
	                                                                      времПараметрыУстройства);

	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Тест успешно выполнен.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		ДополнительноеОписание = ?(ТипЗнч(ВыходныеПараметры) = Тип("Массив")
		                           И ВыходныеПараметры.Количество() >= 2,
		                           НСтр("ru = 'Дополнительное описание:'") + " " + ВыходныеПараметры[1],
		                           "");


		ТекстСообщения = НСтр("ru = 'Тест не пройден.%ПереводСтроки%%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПереводСтроки%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                  "",
		                                                                  Символы.ПС));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ?(ПустаяСтрока(ДополнительноеОписание),
		                                                                           "",
		                                                                           ДополнительноеОписание));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)

	МенеджерОборудованияКлиент.УстановитьДрайвер(Идентификатор);

	ОбновитьИнформациюОДрайвере();

КонецПроцедуры



