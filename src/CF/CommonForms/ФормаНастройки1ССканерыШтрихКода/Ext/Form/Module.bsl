// sza140423-0104  
// sza131003-0328 : 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
// Процедура представляет обработчик события "Нажатие" кнопки
// "ОК" командной панели "ОсновныеДействияФормы".
// 
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ОК").
// 
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	Параметры.ПараметрыНастройки.Добавить(Порт,              "Порт");
	Параметры.ПараметрыНастройки.Добавить(Скорость,          "Скорость");
	Параметры.ПараметрыНастройки.Добавить(БитДанных,         "БитДанных");
	Параметры.ПараметрыНастройки.Добавить(СтопБит,           "СтопБит");
	Параметры.ПараметрыНастройки.Добавить(Префикс,           "Префикс");
	Параметры.ПараметрыНастройки.Добавить(Суффикс,           "Суффикс");
	Параметры.ПараметрыНастройки.Добавить(Таймаут,           "Таймаут");
	Параметры.ПараметрыНастройки.Добавить(Модель,            "Модель");

	ОчиститьСообщения();
	Закрыть(КодВозвратаДиалога.ОК);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора(ЭлементУправления, Реквизит)
	СписокВыбора = ЭлементУправления.СписокВыбора;
	СписокВыбора.Очистить();
    РеквизитВСписке = ЛОЖЬ;
	Для КодЭлемента = 0 По 127 Цикл
		Символ = "";
		Если КодЭлемента > 32 Тогда
			Символ = " ( " + Символ(КодЭлемента) + " )";
		ИначеЕсли КодЭлемента = 8 Тогда
			Символ = " (BACKSPACE)";
		ИначеЕсли КодЭлемента = 9 Тогда
			Символ = " (TAB)";
		ИначеЕсли КодЭлемента = 10 Тогда
			Символ = " (LF)";
		ИначеЕсли КодЭлемента = 13 Тогда
			Символ = " (CR)";
		ИначеЕсли КодЭлемента = 16 Тогда
			Символ = " (SHIFT)";
		ИначеЕсли КодЭлемента = 17 Тогда
			Символ = " (CONTROL)";
		ИначеЕсли КодЭлемента = 18 Тогда
			Символ = " (ALT)";
		ИначеЕсли КодЭлемента = 27 Тогда
			Символ = " (ESCAPE)";
		ИначеЕсли КодЭлемента = 32 Тогда
			Символ = " (SPACE)";
		КонецЕсли;
		СписокВыбора.Добавить("#" + СокрЛП(КодЭлемента), "#" + СокрЛП(КодЭлемента) + Символ);
		Если Реквизит = "#" + СокрЛП(КодЭлемента) Тогда
			РеквизитВСписке = ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	Если НЕ РеквизитВСписке Тогда
		СписокВыбора.Добавить(Реквизит);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСуффиксов()
	Элементы.Суффикс.СписокВыбора.Очистить();
	Элементы.Суффикс.СписокВыбора.Добавить("8", "(8) BS");
	Элементы.Суффикс.СписокВыбора.Добавить("9", "(9) TAB");
	Элементы.Суффикс.СписокВыбора.Добавить("10","(10) LF");
	Элементы.Суффикс.СписокВыбора.Добавить("13","(13) CR");
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура НастроитьЭлементыУправления()
	 // настроить элементы управления согласно версии драйвера
	Если Порт = 0 Тогда
		Элементы.Скорость.Доступность  = ЛОЖЬ;
		Элементы.БитДанных.Доступность = ЛОЖЬ;
		Элементы.СтопБит.Доступность   = ЛОЖЬ;
		
		Если  НовыйИнтерфейс И Порт = 0 Тогда
			Элементы.Таймаут.Доступность   = ИСТИНА;
			Элементы.Префикс.Доступность   = ИСТИНА;
			Элементы.Префикс.КнопкаОчистки = ИСТИНА;
			Префикс = СПВНомер(Префикс);
			ЗаполнитьСписокВыбора(Элементы.Префикс, Префикс);
			Элементы.Суффикс.КнопкаОчистки = ИСТИНА;
			Суффикс = СПВНомер(Суффикс);
			ЗаполнитьСписокВыбора(Элементы.Суффикс, Суффикс);
		Иначе	
			Элементы.Таймаут.Доступность   = ЛОЖЬ;
		    Элементы.Префикс.КнопкаОчистки = ЛОЖЬ;
			Элементы.Префикс.Доступность = ЛОЖЬ;
			Элементы.Суффикс.КнопкаОчистки = ЛОЖЬ;
			Суффикс = СПВТекст(Суффикс);
			ЗаполнитьСписокСуффиксов();
		КонецЕсли;
	Иначе
		Элементы.Скорость.Доступность  = ИСТИНА;
		Элементы.БитДанных.Доступность = ИСТИНА;
		Элементы.СтопБит.Доступность   = ИСТИНА;
		
		Элементы.Таймаут.Доступность   = ЛОЖЬ;
		Элементы.Таймаут.Доступность   = ЛОЖЬ;
	    Элементы.Префикс.КнопкаОчистки = ЛОЖЬ;
		Элементы.Префикс.Доступность   = ЛОЖЬ;
		Элементы.Суффикс.КнопкаОчистки = ЛОЖЬ;
		Суффикс = СПВТекст(Суффикс);
		ЗаполнитьСписокСуффиксов();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("Префикс"  , Префикс);
	времПараметрыУстройства.Вставить("Суффикс"  , Суффикс);
	времПараметрыУстройства.Вставить("Таймаут"  , Таймаут);
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьВерсиюДрайвера",
	                                                               ВходныеПараметры,
	                                                               ВыходныеПараметры,
	                                                               Идентификатор,
	                                                               времПараметрыУстройства) Тогда
		Драйвер        = ВыходныеПараметры[0];
		Версия         = ВыходныеПараметры[1];
		ВерсияИзБПО    = ВыходныеПараметры[2];
		ВерсияСтр      = ВыходныеПараметры[3];
		ВерсияИзБПОСтр = ВыходныеПараметры[4];
                           
	Иначе
		Драйвер        = ВыходныеПараметры[2];
		Версия         = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не определена");
		ВерсияСтр      = 8000000;
		ВерсияИзБПОСтр = 8000000;
	КонецЕсли;

	Элементы.Драйвер.ЦветТекста = ?(Драйвер = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = ?(Версия  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не определена"), ЦветОшибки, ЦветТекста);
	
	Элементы.УстановитьДрайвер.Доступность = Не (Драйвер = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));

	// Проверка на соответствие номера версии драйвера в БПО и номера, который сообщает сам драйвер
	Если ВерсияИзБПОСтр > ВерсияСтр И ВерсияСтр > 8000000 Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установленная на компьютере версия драйвера устарела! Рекомендуется обновление до версии") + ":" + Символы.НПП + ВерсияИзБПО);
	КонецЕсли;
	
	// Начиная с версии 8.0.12.2 изменены названия некоторых свойств в объекте драйвера, а также добавлены новые
	Если ВерсияСтр < 8001202 Тогда
		НовыйИнтерфейс = ЛОЖЬ;
	Иначе
		НовыйИнтерфейс = ИСТИНА;
		Элементы.Порт.СписокВыбора.Добавить(0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клавиатура"));
	КонецЕсли;
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
&НаКлиенте
Процедура ПортПриИзменении()
	НастроитьЭлементыУправления();
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НовыйИнтерфейс И Порт=0 Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		Если ВыбранноеЗначение <> Неопределено Тогда
			Элемент.СписокВыбора.Добавить(Префикс + ВыбранноеЗначение);
			Префикс = Префикс + ВыбранноеЗначение;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = ИСТИНА;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

// Процедура - обработчик события "Перед открытием" формы.
// 
// Параметры:
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение ИСТИНА, открытие формы выполнено не будет.
//                         Значение по умолчанию: ЛОЖЬ 
// 
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение ЛОЖЬ, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: ИСТИНА 
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	ОбновитьИнформациюОДрайвере();
	
	НастроитьЭлементыУправления();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("Идентификатор", Идентификатор);
	Заголовок = "СШК" + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;

	СпПорт = Элементы.Порт.СписокВыбора;
	
	Для Индекс = 1 По 32 Цикл
		СпПорт.Добавить(Индекс, "COM" + СокрЛП(Индекс));
	КонецЦикла;

	СпСкорость = Элементы.Скорость.СписокВыбора;
	СпСкорость.Добавить(110,    "110");
	СпСкорость.Добавить(300,    "300");
	СпСкорость.Добавить(600,    "600");
	СпСкорость.Добавить(1200,   "1200");
	СпСкорость.Добавить(2400,   "2400");
	СпСкорость.Добавить(4800,   "4800");
	СпСкорость.Добавить(9600,   "9600");
	СпСкорость.Добавить(14400,  "14400");
	СпСкорость.Добавить(19200,  "19200");
	СпСкорость.Добавить(38400,  "38400");
	СпСкорость.Добавить(56000,  "56000");
	СпСкорость.Добавить(57600,  "57600");
	СпСкорость.Добавить(115200, "115200");
	СпСкорость.Добавить(128000, "128000");
	СпСкорость.Добавить(256000, "256000");

	СпБитДанных = Элементы.БитДанных.СписокВыбора;
	Для Индекс = 1 По 8 Цикл
		СпБитДанных.Добавить(Индекс, СокрЛП(Индекс));
	КонецЦикла;

	СпСтопБит = Элементы.СтопБит.СписокВыбора;
	СпСтопБит.Добавить(0, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("1 стоп-бит"));
	СпСтопБит.Добавить(1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("1.5 стоп-бита"));
	СпСтопБит.Добавить(2, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("2 стоп-бита"));

	времПорт      = Неопределено;
	времСкорость  = Неопределено;
	времБитДанных = Неопределено;
	времСтопБит   = Неопределено;
	времПрефикс   = Неопределено;
	времСуффикс   = Неопределено;
	времМодель    = Неопределено;
	времТаймаут   = Неопределено;

	Параметры.Свойство("Порт",      времПорт);
	Параметры.Свойство("Скорость",  времСкорость);
	Параметры.Свойство("БитДанных", времБитДанных);
	Параметры.Свойство("СтопБит",   времСтопБит);
	Параметры.Свойство("Префикс",   времПрефикс);
	Параметры.Свойство("Суффикс",   времСуффикс);
	Параметры.Свойство("Таймаут",   времТаймаут);
	Параметры.Свойство("Модель",    времМодель);
	
	Порт        = ?(времПорт      = Неопределено,         1, времПорт);
	Скорость    = ?(времСкорость  = Неопределено,      9600, времСкорость);
	БитДанных   = ?(времБитДанных = Неопределено,         8, времБитДанных);
	СтопБит     = ?(времСтопБит   = Неопределено,         0, времСтопБит);
	Префикс	    = ?(времПрефикс   = Неопределено,         "", времПрефикс);
	Суффикс     = ?(времСуффикс   = Неопределено,        "#13", времСуффикс);
	Таймаут     = ?(времТаймаут   = Неопределено,        75, времТаймаут);

	Модель      = ?(времМодель    = Неопределено, Элементы.Модель.СписокВыбора[0], времМодель);

	Элементы.ТестУстройства.Видимость          = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость       = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);

КонецПроцедуры

// функция преобразует единичный суффикс/префикс из формата "9" в формат "#9"
// для преобразования значений из старых конфигураций, и оставляет, как есть,
// для новых конфигураций (многосимвольные суффиксы/префиксы)
&НаКлиенте
Функция СПВНомер(КодСимвола) 
	Результат=КодСимвола;	
	Если КодСимвола = "8" Тогда
		Результат = "#8";
	ИначеЕсли КодСимвола = "9" Тогда
		Результат = "#9";
	ИначеЕсли КодСимвола = "10" Тогда
		Результат = "#10";
	ИначеЕсли КодСимвола = "13" Тогда
		Результат = "#13";
	КонецЕсли;
	Возврат Результат;
КонецФункции

// функция преобразует суффикс/префикс из нового формата #13#10 в старый формат #10
// старый формат передается без изменений
&НаКлиенте
Функция СПВТекст(Номер) 
	Результат = Номер;	
	ПервоеВхождение = Найти(Результат, "#");
	Если ПервоеВхождение = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Врем = Сред(Результат, ПервоеВхождение+1);
	ВтороеВхождение = Найти(Врем, "#") + ПервоеВхождение;
	
	Если ВтороеВхождение > ПервоеВхождение Тогда
		Результат = Сред(Результат, ВтороеВхождение);
	КонецЕсли;
	
	Если Результат = "#8" Тогда
		Результат = "8";
	ИначеЕсли Результат = "#9" Тогда
		Результат = "9";
	ИначеЕсли Результат = "#10" Тогда
		Результат = "10";
	ИначеЕсли Результат = "#13" Тогда
		Результат = "13";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СуффиксОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если НовыйИнтерфейс И Порт=0  Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		Если ВыбранноеЗначение <> Неопределено Тогда
			Элемент.СписокВыбора.Добавить(Суффикс + ВыбранноеЗначение);
			Суффикс = Суффикс + ВыбранноеЗначение;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = ИСТИНА;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("Префикс"  , Префикс);
	времПараметрыУстройства.Вставить("Суффикс"  , Суффикс);
	времПараметрыУстройства.Вставить("Таймаут"  , Таймаут);
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                                      ВходныеПараметры,
	                                                                      ВыходныеПараметры,
	                                                                      Идентификатор,
	                                                                      времПараметрыУстройства);
	  
	Если НовыйИнтерфейс Тогда
		 времПараметрыУстройства.Свойство("Таймаут", Таймаут);
	КонецЕсли;
	 
	Если НЕ Результат Тогда
		ОбщегоНазначения.СообщитьПользователю("""" + Модель + """: " + ВыходныеПараметры[1] + "(код ошибки " + ВыходныеПараметры[0] + ")");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)

	МенеджерОборудованияКлиент.УстановитьДрайвер(Идентификатор);

	ОбновитьИнформациюОДрайвере();

КонецПроцедуры



