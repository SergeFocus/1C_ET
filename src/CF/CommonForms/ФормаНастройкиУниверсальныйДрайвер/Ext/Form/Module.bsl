// sza131003-0329 : 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ          
&НаКлиенте
Процедура ДополнительноеДействие(Команда)
	
	ОчиститьСообщения();
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры  = Новый Массив();
	ВходныеПараметры.Добавить(Сред(Команда.Имя, 3)); 
	
	
	
	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("DoAdditionalAction", 
																			ВходныеПараметры, 
																			ВыходныеПараметры, 
																			Идентификатор, 
																			ПолучитьНастройки());
		
	ТекстСообщения = ?(Результат,  НСтр("ru = 'Операция выполнена успешно.'"),
	                               НСтр("ru = 'Ошибка выполнения операции.'") + Символы.НПП + ВыходныеПараметры[1]);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Закрыть(ПолучитьНастройки()); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ПараметрыУстройства = Неопределено;
	
	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьОписаниеДрайвера",
																   ВходныеПараметры,
																   ВыходныеПараметры,
																   Идентификатор,
																   ПараметрыУстройства) Тогда
		ДрайверУстановлен         = ВыходныеПараметры[0];
		ВерсияДрайвера            = ВыходныеПараметры[1];
		
		НаименованиеДрайвера      = ВыходныеПараметры[2];
		ОписаниеДрайвера          = ВыходныеПараметры[3];
		ТипОборудования           = ВыходныеПараметры[4];
		РевизияИнтерфейса         = ВыходныеПараметры[5];
		ИнтеграционнаяБиблиотека  = ВыходныеПараметры[6];
		ОсновнойДрайверУстановлен = ВыходныеПараметры[7];
		АдресЗагрузкиДрайвера     = ВыходныеПараметры[8];
		ПараметрыДрайвера         = ВыходныеПараметры[9];
		ДополнительныеДействия    = ВыходныеПараметры[10];
		
		Если (ИнтеграционнаяБиблиотека И ОсновнойДрайверУстановлен) ИЛИ (НЕ ИнтеграционнаяБиблиотека) Тогда
			Если НЕ ПустаяСтрока(ПараметрыДрайвера) Тогда
				ОбновитьНастраиваемыйИнтерфейс(ПараметрыДрайвера, ДополнительныеДействия);
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграционнаяБиблиотека И НЕ ОсновнойДрайверУстановлен Тогда
			ДрайверУстановлен = НСтр("ru='Установлена интеграционная библиотека'");
			ВерсияДрайвера = НСтр("ru='Не определена'");
			Элементы.УстановитьДрайвер.Заголовок = НСтр("ru='Установить основную поставку драйвера'");		
		КонецЕсли
		
	Иначе
		ДрайверУстановлен = ВыходныеПараметры[2];
		ВерсияДрайвера  = НСтр("ru='Не определена'");
	КонецЕсли;
	
	Элементы.Драйвер.ЦветТекста = ?(ВерсияДрайвера = НСтр("ru='Не определена'"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = Элементы.Драйвер.ЦветТекста ;
	Элементы.НаименованиеДрайвера.ЦветТекста = ?(НаименованиеДрайвера = НСтр("ru='Не определено'"), ЦветОшибки, ЦветТекста);
	Элементы.ОписаниеДрайвера.ЦветТекста     = ?(ОписаниеДрайвера     = НСтр("ru='Не определено'"), ЦветОшибки, ЦветТекста);
	Элементы.ОписаниеДрайвера.Видимость = НЕ ПустаяСтрока(ОписаниеДрайвера);
	
	Элементы.УстановитьДрайвер.Доступность = Не (ДрайверУстановлен = НСтр("ru='Установлен'"));
	Элементы.ТестУстройства.Доступность = (НЕ ДрайверУстановлен = НСтр("ru='Не установлен'")) 
	                                      И (НЕ ИнтеграционнаяБиблиотека ИЛИ (ИнтеграционнаяБиблиотека И ОсновнойДрайверУстановлен))
   
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастраиваемыйИнтерфейс(ОписаниеИнтерфейса, ДополнительныеДействия)
	
	БазоваяГруппа = Неопределено;
	Элемент = Неопределено;
	ИндексГруппы = 0;
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ОписаниеИнтерфейса);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Settings" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			
			Если ЧтениеXML.Имя = "Parameter" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				ПараметрДоступность = ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "TRUE", ИСТИНА, ЛОЖЬ) 
										ИЛИ ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "ИСТИНА", ИСТИНА, ЛОЖЬ);
				Если ПараметрДоступность = ИСТИНА Тогда
					ПараметрИмя = "R_" + ЧтениеXML.ЗначениеАтрибута("Name");
				Иначе
					ПараметрИмя = "P_" + ЧтениеXML.ЗначениеАтрибута("Name");
				КонецЕсли;
				ПараметрЗаголовок   = ЧтениеXML.ЗначениеАтрибута("Caption");
				ПараметрТип         = ВРег(ЧтениеXML.ЗначениеАтрибута("TypeValue"));
				ПараметрТип         = ?(НЕ ПустаяСтрока(ПараметрТип), ПараметрТип, "STRING");
				ПараметрЗначение    = ЧтениеXML.ЗначениеАтрибута("DefaultValue");
				ПараметрОписание    = ЧтениеXML.ЗначениеАтрибута("Description");
				
				// Добавляем новый реквизит в форму
				ДобавляемыеРеквизиты = Новый Массив;
				
				Если ПараметрТип = "NUMBER" Тогда 
					Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Число"), , ПараметрЗаголовок, ИСТИНА);
				ИначеЕсли ПараметрТип = "BOOLEAN" Тогда 
					Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Булево"), , ПараметрЗаголовок, ИСТИНА);
				Иначе
					Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Строка"), , ПараметрЗаголовок, ИСТИНА);
				КонецЕсли;
				ДобавляемыеРеквизиты.Добавить(Реквизит);
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				Если Элементы.Найти(ПараметрИмя) = Неопределено Тогда
					// Если не было создано не одной группы
					Если БазоваяГруппа = Неопределено Тогда
						БазоваяГруппа = Элементы.Добавить("БазоваяГруппа", Тип("ГруппаФормы"), ЭтаФорма.Элементы.Параметры);
						БазоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						// БазоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
						БазоваяГруппа.РастягиватьПоГоризонтали = ИСТИНА;
						БазоваяГруппа.Заголовок = НСтр("ru = 'Параметры'");
					КонецЕсли;
					// Добавляем новое поле ввода на форму
					Элемент = Элементы.Добавить(ПараметрИмя, Тип("ПолеФормы"), БазоваяГруппа);
					Если ПараметрТип = "BOOLEAN" Тогда 
						Элемент.Вид = ВидПоляФормы.ПолеФлажка
					Иначе
						Элемент.Вид = ВидПоляФормы.ПолеВвода;
						Элемент.РастягиватьПоГоризонтали = ИСТИНА;
					КонецЕсли;
					Элемент.ПутьКДанным = ПараметрИмя;
					Элемент.Подсказка = ПараметрОписание;
					Элемент.ТолькоПросмотр = ПараметрДоступность; 
					
				КонецЕсли;
				
				ХранимоеЗначение = Неопределено;
				Если ЗначениеПараметров.Свойство(ПараметрИмя, ХранимоеЗначение) Тогда
					ПараметрЗначение = ХранимоеЗначение
				Иначе
					Если НЕ ПустаяСтрока(ПараметрЗначение) Тогда
						Если ПараметрТип = "BOOLEAN" Тогда
							ПараметрЗначение = ?(ВРег(ПараметрЗначение) = "TRUE", ИСТИНА, ЛОЖЬ) ИЛИ  ?(ВРег(ПараметрЗначение) = "ИСТИНА", ИСТИНА, ЛОЖЬ);
						ИначеЕсли ПараметрТип = "STRING" Тогда
							ПараметрЗначение = Строка(ПараметрЗначение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЭтаФорма[ПараметрИмя] = ПараметрЗначение;
				
				МастерПараметр         = ЧтениеXML.ЗначениеАтрибута("MasterParameterName");
				МастерПараметрЗначение = ЧтениеXML.ЗначениеАтрибута("MasterParameterValue");
				МастерПараметрОперация = ЧтениеXML.ЗначениеАтрибута("MasterParameterOperation");
				
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "ChoiceList" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				
				Если НЕ (Элемент = Неопределено) и НЕ (Элемент.Вид = ВидПоляФормы.ПолеФлажка) Тогда   
					Элемент.РежимВыбораИзСписка  = ИСТИНА; 
					Элемент.РедактированиеТекста = ЛОЖЬ; 
				КонецЕсли;
				
				Пока ЧтениеXML.Прочитать() и не (ЧтениеXML.Имя = "ChoiceList") Цикл   
					
					Если ЧтениеXML.Имя = "Item" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
						ЗначениеАтрибута = ЧтениеXML.ЗначениеАтрибута("Value"); 
						Если ЧтениеXML.Прочитать() Тогда
							ПредставлениеАтрибута = ЧтениеXML.Значение;
						КонецЕсли;
						Если ПустаяСтрока(ЗначениеАтрибута) Тогда
							ЗначениеАтрибута = ПредставлениеАтрибута;
						КонецЕсли;
						
						Если ПараметрТип = "NUMBER" Тогда 
							Элемент.СписокВыбора.Добавить(Число(ЗначениеАтрибута), ПредставлениеАтрибута)
						Иначе	
							Элемент.СписокВыбора.Добавить(ЗначениеАтрибута, ПредставлениеАтрибута)
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла; 
				
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "Group" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				ЗаголовокГруппы = ЧтениеXML.ЗначениеАтрибута("Caption");
				Если ПустаяСтрока(ЗаголовокГруппы) Тогда
					ЗаголовокГруппы = НСтр("ru = 'Параметры'");
				КонецЕсли;
				
				БазоваяГруппа = Элементы.Добавить("Группа" + ИндексГруппы, Тип("ГруппаФормы"), ЭтаФорма.Элементы.Параметры);
				БазоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
// 				БазоваяГруппа.Отображение = ОтображениеОбычнойГруппы.РамкаГруппы;
				БазоваяГруппа.Заголовок = ЗаголовокГруппы;
				БазоваяГруппа.РастягиватьПоГоризонтали = ИСТИНА;
				ИндексГруппы = ИндексГруппы + 1;
				
			КонецЕсли;
			
		КонецЦикла;  
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныеДействия) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДополнительныеДействия);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Actions" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Action" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					ДействиеИмя       = "M_"  + ЧтениеXML.ЗначениеАтрибута("Name");
					ДействиеЗаголовок = ЧтениеXML.ЗначениеАтрибута("Caption");
					
					Команда = ЭтаФорма.Команды.Добавить("A_" + ЧтениеXML.ЗначениеАтрибута("Name"));
					Команда.Заголовок = ДействиеЗаголовок;
					Команда.Действие = "ДополнительноеДействие";
					
					ПунктМеню = ЭтаФорма.Элементы.Добавить(ДействиеИмя, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ДополнительныеДействия);
					ПунктМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					ПунктМеню.Заголовок = ДействиеЗаголовок;
					ПунктМеню.ИмяКоманды = "A_" + ЧтениеXML.ЗначениеАтрибута("Name");
					 
				КонецЕсли;
			КонецЦикла;  
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры                   

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаСервере
Функция ПолучитьНастройки()
	            
	ПараметрыДрайвера = ПолучитьРеквизиты();

	ЗначениеПараметров = Новый Структура;
	Для Каждого Параметр из ПараметрыДрайвера Цикл
		Если Лев(Параметр.Имя, 2) = "P_" Тогда
			ЗначениеПараметров.Вставить(Параметр.Имя, ЭтаФорма[Параметр.Имя]);
		КонецЕсли;
	КонецЦикла;

	Возврат ЗначениеПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);	
КонецПроцедуры

// Процедура - обработчик события "Перед открытием" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьИнформациюОДрайвере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметров  = Параметры.ПараметрыОбработки;
	
	Параметры.Свойство("Идентификатор", Идентификатор);
	Заголовок = НСтр("ru='ДП'") + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	Элементы.ТестУстройства.Видимость    = (ПараметрыСеанса.РабочееМестоКлиента = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость = (ПараметрыСеанса.РабочееМестоКлиента = Идентификатор.РабочееМесто);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)
	
	ОчиститьСообщения();
	РезультатТеста = Неопределено;
	ДемонстрационныйРежим = "";
	Элементы.ГруппаДемонстрационныйРежим.Видимость = ЛОЖЬ;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ПараметрыУстройства = Неопределено;

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth", 
																			ВходныеПараметры, 
																			ВыходныеПараметры, 
																			Идентификатор, 
																			ПолучитьНастройки());
	
	ДополнительноеОписание = "";
	Если ТипЗнч(ВыходныеПараметры) = Тип("Массив") Тогда
		
		Если  ВыходныеПараметры.Количество() >= 2 Тогда
			ДополнительноеОписание = ВыходныеПараметры[1];
		КонецЕсли;
		
		Если  ВыходныеПараметры.Количество() >= 3 И НЕ ПустаяСтрока(ВыходныеПараметры[2])  Тогда
			ДемонстрационныйРежим = ВыходныеПараметры[2];
			// ДополнительноеОписание = ДополнительноеОписание + Символы.ПС + НСтр("ru = 'Ограничение:'") + " " + ВыходныеПараметры[2];
			Элементы.ГруппаДемонстрационныйРежим.Видимость = ИСТИНА;
		КонецЕсли;
		
	КонецЕсли;
		
	ТекстСообщения = ?(Результат,  НСтр("ru = 'Тест успешно выполнен. %ДополнительноеОписание%'"),
	                               НСтр("ru = 'Тест не пройден. %ДополнительноеОписание%'"));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ?(ПустаяСтрока(ДополнительноеОписание), "", ДополнительноеОписание));
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)
	
	Если ИнтеграционнаяБиблиотека Тогда
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для установки драйвера необходимо подключение к Интернету. Продолжить выполнение операции?");
    	Ответ = Неопределено;

    	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьДрайверЗавершение", ЭтаФорма), Текст, РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
	Иначе
		МенеджерОборудованияКлиент.УстановитьДрайвер(Идентификатор);
	КонецЕсли;
	
	УстановитьДрайверФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайверЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение(АдресЗагрузкиДрайвера, , ИСТИНА);
	КонецЕсли;
	
	УстановитьДрайверФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайверФрагмент()
	
	ОбновитьИнформациюОДрайвере();
	
КонецПроцедуры




