// sza131003-0329 : 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
// Процедура представляет обработчик события "Нажатие" кнопки
// "ОК" командной панели "ОсновныеДействияФормы".
// 
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ОК").
// 
&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	Параметры.ПараметрыНастройки.Добавить(Порт,              "Порт");
	Параметры.ПараметрыНастройки.Добавить(Скорость,          "Скорость");
	Параметры.ПараметрыНастройки.Добавить(БитДанных,         "БитДанных");
	Параметры.ПараметрыНастройки.Добавить(СтопБит,           "СтопБит");
	Параметры.ПараметрыНастройки.Добавить(КодПрефикса,       "Префикс");
	Параметры.ПараметрыНастройки.Добавить(Суффикс,           "Суффикс");
	Параметры.ПараметрыНастройки.Добавить(Модель,            "Модель");

	ОчиститьСообщения();
	Закрыть(КодВозвратаДиалога.ОК);

КонецПроцедуры

&НаКлиенте
Процедура КодПрефиксаПриИзменении()

	Префикс = Символ(КодПрефикса);

КонецПроцедуры

&НаКлиенте
Процедура КодПрефиксаПриИзменении1(Элемент)

	КодПрефиксаПриИзменении();

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
&НаКлиенте
Процедура ОбновитьИнформациюОДрайвере()

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("Префикс"  , КодПрефикса);
	времПараметрыУстройства.Вставить("Суффикс"  , Суффикс);
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьВерсиюДрайвера",
	                                                               ВходныеПараметры,
	                                                               ВыходныеПараметры,
	                                                               Идентификатор,
	                                                               времПараметрыУстройства) Тогда
		Драйвер = ВыходныеПараметры[0];
		Версия  = ВыходныеПараметры[1];
	Иначе
		Драйвер = ВыходныеПараметры[2];
		Версия  = НСтр("ru='Не определена'");
	КонецЕсли;

	Элементы.Драйвер.ЦветТекста = ?(Драйвер = НСтр("ru='Не установлен'"), ЦветОшибки, ЦветТекста);
	Элементы.Версия.ЦветТекста  = ?(Версия  = НСтр("ru='Не определена'"), ЦветОшибки, ЦветТекста);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЖурналирования(Команда)

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("Префикс"  , КодПрефикса);
	времПараметрыУстройства.Вставить("Суффикс"  , Суффикс);
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПараметрыЖурналирования",
	                                                          ВходныеПараметры,
	                                                          ВыходныеПараметры,
	                                                          Идентификатор,
	                                                          времПараметрыУстройства);

КонецПроцедуры

&НаКлиенте
Процедура ПортПриИзменении()

	Элементы.Скорость.Доступность  = (Порт <> 101);
	Элементы.БитДанных.Доступность = (Порт <> 101);
	Элементы.СтопБит.Доступность   = (Порт <> 101);

КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении()

	КодПрефикса = КодСимвола(Префикс);

КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
&НаКлиенте
Процедура ПрефиксПриИзменении1(Элемент)

	ПрефиксПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);	
КонецПроцедуры

// Процедура - обработчик события "Перед открытием" формы.
// 
// Параметры:
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение ИСТИНА, открытие формы выполнено не будет.
//                         Значение по умолчанию: ЛОЖЬ 
// 
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение ЛОЖЬ, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: ИСТИНА 
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьИнформациюОДрайвере();

	КодПрефиксаПриИзменении();

	ПортПриИзменении();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест"
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Параметры.Свойство("Идентификатор", Идентификатор);
	Заголовок = НСтр("ru='СШК'") + " """ + Строка(Идентификатор) + """";

	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветОшибки = ЦветаСтиля.ЦветОтрицательногоЧисла;

	СпПорт = Элементы.Порт.СписокВыбора;
	Для Индекс = 1 По 32 Цикл
		СпПорт.Добавить(Индекс, "COM" + СокрЛП(Индекс));
	КонецЦикла;

	СпСкорость = Элементы.Скорость.СписокВыбора;
	СпСкорость.Добавить(110,    "110");
	СпСкорость.Добавить(300,    "300");
	СпСкорость.Добавить(600,    "600");
	СпСкорость.Добавить(1200,   "1200");
	СпСкорость.Добавить(2400,   "2400");
	СпСкорость.Добавить(4800,   "4800");
	СпСкорость.Добавить(9600,   "9600");
	СпСкорость.Добавить(14400,  "14400");
	СпСкорость.Добавить(19200,  "19200");
	СпСкорость.Добавить(38400,  "38400");
	СпСкорость.Добавить(56000,  "56000");
	СпСкорость.Добавить(57600,  "57600");
	СпСкорость.Добавить(115200, "115200");
	СпСкорость.Добавить(128000, "128000");
	СпСкорость.Добавить(256000, "256000");

	СпБитДанных = Элементы.БитДанных.СписокВыбора;
	Для Индекс = 1 По 8 Цикл
		СпБитДанных.Добавить(Индекс, СокрЛП(Индекс));
	КонецЦикла;

	СпСтопБит = Элементы.СтопБит.СписокВыбора;
	СпСтопБит.Добавить(0, НСтр("ru='1 стоп-бит'"));
	СпСтопБит.Добавить(1, НСтр("ru='1.5 стоп-бита'"));
	СпСтопБит.Добавить(2, НСтр("ru='2 стоп-бита'"));

	СпСуффикс = Элементы.Суффикс.СписокВыбора;
	СпСуффикс.Добавить(8,  "(8) BS");
	СпСуффикс.Добавить(9,  "(9) TAB");
	СпСуффикс.Добавить(10, "(10) LF");
	СпСуффикс.Добавить(13, "(13) CR");

	времПорт      = Неопределено;
	времСкорость  = Неопределено;
	времБитДанных = Неопределено;
	времСтопБит   = Неопределено;
	времПрефикс   = Неопределено;
	времСуффикс   = Неопределено;
	времМодель    = Неопределено;

	Параметры.Свойство("Порт",      времПорт);
	Параметры.Свойство("Скорость",  времСкорость);
	Параметры.Свойство("БитДанных", времБитДанных);
	Параметры.Свойство("СтопБит",   времСтопБит);
	Параметры.Свойство("Префикс",   времПрефикс);
	Параметры.Свойство("Суффикс",   времСуффикс);
	Параметры.Свойство("Модель",    времМодель);

	Порт        = ?(времПорт      = Неопределено,         1, времПорт);
	Скорость    = ?(времСкорость  = Неопределено,      9600, времСкорость);
	БитДанных   = ?(времБитДанных = Неопределено,         8, времБитДанных);
	СтопБит     = ?(времСтопБит   = Неопределено,         0, времСтопБит);
	КодПрефикса = ?(времПрефикс   = Неопределено,         0, времПрефикс);
	Суффикс     = ?(времСуффикс   = Неопределено,        13, времСуффикс);

	Модель      = ?(времМодель    = Неопределено, Элементы.Модель.СписокВыбора[0], времМодель);

	Элементы.ТестУстройства.Видимость          = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);
	Элементы.ПараметрыЖурналирования.Видимость = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);
	Элементы.УстановитьДрайвер.Видимость       = (ПараметрыСеанса.РабочееМестоКлиента
	                                              = Идентификатор.РабочееМесто);

КонецПроцедуры

&НаКлиенте
Процедура ТестУстройства(Команда)

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	времПараметрыУстройства = Новый Структура();
	времПараметрыУстройства.Вставить("Порт"     , Порт);
	времПараметрыУстройства.Вставить("Скорость" , Скорость);
	времПараметрыУстройства.Вставить("БитДанных", БитДанных);
	времПараметрыУстройства.Вставить("СтопБит"  , СтопБит);
	времПараметрыУстройства.Вставить("Префикс"  , КодПрефикса);
	времПараметрыУстройства.Вставить("Суффикс"  , Суффикс);
	времПараметрыУстройства.Вставить("Модель"   , Модель);

	Результат = МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("CheckHealth",
	                                                                      ВходныеПараметры,
	                                                                      ВыходныеПараметры,
	                                                                      Идентификатор,
	                                                                      времПараметрыУстройства);
	Если НЕ Результат Тогда
		ОбщегоНазначения.СообщитьПользователю("""" + Модель + """: " + ВыходныеПараметры[1] + "(код ошибки " + ВыходныеПараметры[0] + ")");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер(Команда)

	МенеджерОборудованияКлиент.УстановитьДрайвер(Идентификатор);

	ОбновитьИнформациюОДрайвере();

КонецПроцедуры



