//sza150113-0444 
//sza150109-0330 нч
//sza141214-0231 
//sza141117-0258 
//sza141112-1521
//sza141111-1410
//sza141016-0111
//sza140707-1901  
//sza140612-1645 : 
//sza131008-1335  
&НаКлиенте
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзменении(Элемент)
	ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере()
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Если ВашЯзыкРусскийНоВыРаботаетеНаУкраине Тогда
		Валюта.Наименование = "грн.";
		Валюта.Код = "980";
		
	Иначе
		Валюта.Наименование = "руб.";
		Валюта.Код = "643";
		
	КонецЕсли;
	Валюта.Записать();
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСКлиентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСПоставщикамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхВалютахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхХранилищахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовКлиентовПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовПоставщикамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗарплатыСотрудниковПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНесколькихВидовЦенПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОтдельныхДоговоровСКонтрагентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСобственныхЮридическихЛиц1ПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНесколькимСкладамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНоменклатурнымГруппамПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыберитеВашЯзыкПриИзменении(Элемент)
	
	Русский = ЗначениеЗаполнено(ВыберитеВашЯзык) И ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	Если НЕ Русский Тогда
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите, Локализация.. / Wait for localiZation.."));		
	КонецЕсли;
	
	ОбновитьТекущийЯзыкИнтерфейса(ВыберитеВашЯзык);
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетДенег Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаНастроекУчетаНоменклатуры;
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаНастроекУчетаНоменклатуры Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетаВзаиморасчетов;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ДругиеНастройкиПрограммы;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеКонстанты()
	
	Константы.ВестиУчетДенегВНесколькихХранилищах.Установить(ВестиУчетДенегВРазныхХранилищах);
	Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Установить(ВестиУчетДенег И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода);
	Константы.ВестиУчетСобственныхЮридическихЛиц.Установить(ВестиУчетСобственныхЮридическихЛиц);
	Константы.ВестиУчетОтдельныхДоговоровСКонтрагентами.Установить(ВестиУчетОтдельныхДоговоровСКонтрагентами);
	константы.ВестиУчетВаловойПрибыли.Установить(ВестиУчетВаловойПрибыли);
	константы.ВестиУчетДвиженияДенег.Установить(ВестиУчетДенег);
	константы.ВестиУчетОказанияУслугЗаВремя.Установить(ВестиУчетОказанияУслугЗаВремя);
	константы.ВестиУчетЗарплатыСотрудников.Установить(ВестиУчетЗарплатыСотрудников);
	константы.ВестиУчетВалют.Установить(ВестиУчетДенегВРазныхВалютах);
	константы.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп.Установить(ВестиУчетТовараПоНоменклатурнымГруппам);
	константы.ВестиУчетПоСкладам.Установить(ВестиУчетТовараПоНесколькимСкладам);
	константы.ВестиУчетЗаказовКлиентов.Установить(ВестиУчетЗаказовКлиентов);
	константы.ВестиУчетЗаказовПоставщикам.Установить(ВестиУчетЗаказовПоставщикам);
	константы.ИспользоватьДокументыВыполненияРабот.Установить(ИспользоватьВидДокументовВыполненияРабот);
	константы.ИспользоватьКомплектацию.Установить(ИспользоватьКомплектацию);
	
	Если НЕ ВестиУчетТовараПоНесколькимСкладам
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию")) Тогда
		
		Константы.СкладПоУмолчанию.Установить(Справочники.Склады.ОсновнойСклад);
	КонецЕсли;
	
	константы.ИспользоватьСложныйМеханизмЦен.Установить(ВестиУчетНесколькихВидовЦен);
	
	константы.ИспользоватьШтрихКоды.Установить(ИспользоватьШтрихКодыНоменклатуры);
	константы.ВестиУчетПоКлиентам.Установить(ВестиУчетВзаиморасчетовСКлиентами);
	Если НЕ ВестиУчетВзаиморасчетовСКлиентами
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию")) Тогда
		
		Константы.КлиентПоУмолчанию.Установить(Справочники.Клиенты.ФизическоеЛицо);
	КонецЕсли;
	
	константы.ВестиУчетПоПоставщикам.Установить(ВестиУчетВзаиморасчетовСПоставщиками);
	Если НЕ ВестиУчетВзаиморасчетовСПоставщиками
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию")) Тогда
		
		Константы.ПоставщикПоУмолчанию.Установить(Справочники.Поставщики.ФизическоеЛицо);
	КонецЕсли;
	ПараметрыСеанса.ВестиУчетВалютВСеансе = ВестиУчетДенегВРазныхВалютах;
	ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзык;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомплектациюПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПриходаПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыНоменклатурыПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляРезервированияБазыДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог для автоматического резервирования") + ": ";
	ДиалогВыбФайла.МножественныйВыбор		= ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	= ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.Каталог					= КаталогДляРезервированияБазыДанных;
	Если ДиалогВыбФайла.Выбрать() Тогда 
		КаталогДляРезервированияБазыДанных = ДиалогВыбФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБазовогоВидаЦенПриИзменении(Элемент)
	НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(НаименованиеБазовогоВидаЦен);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(НаименованиеБазовогоВидаЦенБК)
	
	ОсновнойВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен").ПолучитьОбъект();
	ОсновнойВидЦен.Наименование = НаименованиеБазовогоВидаЦенБК;
	ОсновнойВидЦен.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВашегоОсновногоСкладаПриИзменении(Элемент)
	НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(НаименованиеВашегоОсновногоСклада);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(НаименованиеВашегоОсновногоСкладаБК)
	
	Склад = Справочники.Склады.ОсновнойСклад.ПолучитьОбъект();
	Склад.Наименование = НаименованиеВашегоОсновногоСкладаБК;
	Склад.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВашейОсновнойВалютыПриИзменении(Элемент)
	НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(НаименованиеВашейОсновнойВалюты);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(НаименованиеВашейОсновнойВалютыБК)
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Валюта.Наименование = НаименованиеВашейОсновнойВалютыБК;
	Валюта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПрочегоПоставщикаПриИзменении(Элемент)
	НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(НаименованиеДляПрочегоПоставщика);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(НаименованиеДляПрочегоПоставщикаБК)
	
	ЧастныйПоставщик = Справочники.Поставщики.ФизическоеЛицо.ПолучитьОбъект();
	ЧастныйПоставщик.Наименование = НаименованиеДляПрочегоПоставщикаБК;
	ЧастныйПоставщик.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляЧастногоПокупателяПриИзменении(Элемент)
	НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(НаименованиеДляЧастногоПокупателя);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(НаименованиеДляЧастногоПокупателяБК)
	
	ЧастныйКлиент = Справочники.Клиенты.ФизическоеЛицо.ПолучитьОбъект();
	ЧастныйКлиент.Наименование = НаименованиеДляЧастногоПокупателяБК;
	ЧастныйКлиент.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПредприятияПриИзменении(Элемент)
	НаименованиеПредприятияПриИзмененииНаСервере(НаименованиеПредприятия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеПредприятияПриИзмененииНаСервере(Знач НаименованиеПредприятия)
	
	Константы.ТекстВШапкеДокументовПриПечати.Установить(НаименованиеПредприятия); 
	
	НашеЮрЛицо = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие").ПолучитьОбъект();
	НашеЮрЛицо.Наименование = НаименованиеПредприятия;
	НашеЮрЛицо.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзменении(Элемент)
	НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(НеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(Знач ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске)
	Константы.НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении.Установить(ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	Элементы.ДобавьтеВсеНеобходимыеВалютыИУкажитеИхКурсы.Видимость = ВестиУчетДенегВРазныхВалютах;
	Элементы.ВестиУчетДенегВРазныхВалютах.Видимость = ВестиУчетДенег;
	Элементы.ГруппаГоризонтВалют.Видимость 			= ВестиУчетДенегВРазныхВалютах;
	Элементы.ГруппаХранилищаДенег.Видимость 		= ВестиУчетДенег;
	Элементы.ГруппаВыполненияРабот.Видимость 		= ВестиУчетВзаиморасчетовСКлиентами;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТекущийЯзыкИнтерфейса(Знач ВыберитеВашЯзыкБК = Неопределено)
	
	РусскийЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	Русский = ЗначениеЗаполнено(ВыберитеВашЯзыкБК) И ВыберитеВашЯзыкБК = РусскийЯзык;
	
	Если НЕ Русский Тогда
		
		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ВыберитеВашЯзыкБК.Код, ВыберитеВашЯзыкБК);
		
		Если ВыберитеВашЯзыкБК = справочники.Языки.Український Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "грн.";
			Валюта.Код = "980";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		ИначеЕсли ВыберитеВашЯзыкБК = справочники.Языки.English 
			ИЛИ ВыберитеВашЯзыкБК = справочники.Языки.Китайский 
			ИЛИ ВыберитеВашЯзыкБК = справочники.Языки.Тайский Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "usd";
			Валюта.Код = "840";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		ИначеЕсли ВыберитеВашЯзыкБК = справочники.Языки.Болгарский
			ИЛИ ВыберитеВашЯзыкБК = справочники.Языки.Болгарский 
			ИЛИ ВыберитеВашЯзыкБК = справочники.Языки.Немецкий
			ИЛИ ВыберитеВашЯзыкБК = справочники.Языки.Польский Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "eur";
			Валюта.Код = "978";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		КонецЕсли;
		
		Константы.ТекущийЯзыкИнтерфейса.Установить(ВыберитеВашЯзыкБК);
		Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ИСТИНА);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзыкБК;	
		
	Иначе
		Константы.ТекущийЯзыкИнтерфейса.Установить(РусскийЯзык);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = РусскийЯзык;	
		
	КонецЕсли;      	
	
	ОбщийМодульСервер.ЗадатьНаименованияОбъектамНаДругомЯзыке(); //и в случае русского тоже
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбнулитьНастройки(Команда)
	ОбновитьТекущийЯзыкИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекУчетаПрограммы(Команда)
	
	закрыть();
	форманастроек = ПолучитьФорму("ОбщаяФорма.НастройкиБазыДанных");
	форманастроек.открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте
		И ПустаяСтрока(КаталогДляРезервированияБазыДанных) Тогда
		
		Отказ = ИСТИНА;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог для резервирования не указан!");
		Сообщение.Поле  = "КаталогДляРезервированияБазыДанных";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии() 										// ПРИ ЗАКРЫТИИ
	
	ПриЗакрытииНаСервере();
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ИспользоватьСторнированиеДокументов Тогда
		Константы.ИспользоватьСторнированиеДокументов.Установить(ИСТИНА);
		Константы.БлокироватьПроведенныеДокументы.Установить(ИСТИНА);
 	КонецЕсли;
	
	Константы.ИспользоватьСкидки.Установить(ИспользоватьСкидки);
	Константы.ИспользоватьДокументыВыполненияРабот.Установить(ИспользоватьВидДокументовВыполненияРабот);
	Константы.ЗаконченаПервоначальнаяНастройка.Установить(ИСТИНА);
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
	
	Если ЗначениеЗаполнено(КаталогДляРезервированияБазыДанных) Тогда
		
		Резервирование = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект();
		Если Резервирование.ВыполняемыеЗадачи.Количество() = 0 тогда
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи.Добавить();
		Иначе
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи[0];			
		КонецЕсли;
		СтрокаЗадачи.ТипЗадачи   = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанных;
		СтрокаЗадачи.Адрес 		 = КаталогДляРезервированияБазыДанных;
		Резервирование.Дата		 = КонецДня(ТекущаяДата()) + 3600 * 7;
		Резервирование.ПовторятьКаждыеЧислоЧасов = 24;
		Резервирование.Актуально = ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте;
		
		Резервирование.Записать();		
	КонецЕсли;
	
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ПоддерживатьИныеЯзыкиКромеРусского);
	
	Если ЗначениеЗаполнено(ОтКого)
		И НЕ ЗначениеЗаполнено(Константы.ЭлектроннаяПочтаОтправитель.Получить()) Тогда
		
		Константы.ЭлектроннаяПочтаОтправитель.Установить(ОтКого);
	КонецЕсли;
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") Тогда
		
		СтруктураПисьма = Новый Структура;
		СтруктураПисьма.Вставить("ОтКого", "FirstRun: " + ОтКого);
		СтруктураПисьма.Вставить("ТемаСообщения", "new");
		СтруктураПисьма.Вставить("ТекстСообщения", "Первоначальная настройка");
		СтруктураПисьма.Вставить("РегистрационныйКод", ОбщийМодульПовтор.РегистрационныйКод());
		
		ОбщийМодульСервисСервер.письмоавтору(СтруктураПисьма);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                    // ПРИ ОТКРЫТИИ
	
	Если НЕ глКонфигурацияВРаботе  Тогда
		Элементы.Группа3арплата.Видимость = ЛОЖЬ;
		Элементы.ВестиУчетЗаказовКлиентов.Видимость = ЛОЖЬ;
		Элементы.ГруппаПЛ.Видимость  = ЛОЖЬ;
		Элементы.ГруппаПП2.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьКомплектацию.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьВидимостьЭлементов();
	ОбновитьИнтерфейс();
	Русский = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = Русский;
	Элементы.ОбнулитьНастройки.Видимость = НЕ ЗначениеЗаполнено(ВыберитеВашЯзык);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)     // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ВыберитеВашЯзык = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	
	ЗаконченаПервоначальнаяНастройка = Константы.ЗаконченаПервоначальнаяНастройка.Получить();
	Попытка	
		ЯзыкА = Справочники.Языки.English.ПолучитьОбъект();
		ЯзыкА.Комментарий 	= "English language EN";
		ЯзыкА.Наименование 	= "English - Английский (EN)";
		ЯзыкА.Записать();
	Исключение
		сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Убедитесь, что установлена версия платформы 1С не ниже 8.2.19 !"));
	КонецПопытки;
	
	ЯзыкУ = Справочники.Языки.Український.ПолучитьОбъект();
	ЯзыкУ.Комментарий 	= "Українська мова UA";
	ЯзыкУ.Наименование 	= "Українська - Ukrainian (UK)";
	ЯзыкУ.Записать();
	
	ЯзыкР = Справочники.Языки.Русский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Русский язык RU";
	ЯзыкР.Наименование 	= "Русский - Russian (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Румынский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Român RO";
	ЯзыкР.Наименование 	= "Român - Румынский (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Белорусский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Беларускі BL";
	ЯзыкР.Наименование 	= "Беларускі - Белорусский (BL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Китайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "中国的 ZH";
	ЯзыкР.Наименование 	= "中国的 - Китайский (ZH)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Болгарский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Български BG";
	ЯзыкР.Наименование 	= "Български - Болгарский (BG)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Казахский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Қазақ KK";
	ЯзыкР.Наименование 	= "Қазақ - Казахский (KK)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Немецкий.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Deutsch DE";
	ЯзыкР.Наименование 	= "Deutsch - Немецкий (DE)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Польский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Polski PL";
	ЯзыкР.Наименование 	= "Polski - Польский (PL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Тайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "ภาษาไทย  TH";
	ЯзыкР.Наименование 	= "ภาษาไทย - Тайский (TH)";
	ЯзыкР.Записать();
	
	ТекущийКодЛокализации = Врег(ТекущийКодЛокализации());
	ПоддерживатьИныеЯзыкиКромеРусского = Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить();
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ИСТИНА);
	
	Если НЕ ЗаконченаПервоначальнаяНастройка Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").ПолучитьОбъект();
		
		Если НЕ Найти(ТекущийКодЛокализации, "EN") = 0 Тогда
			ВыберитеВашЯзык = ЯзыкА;
			Валюта.Наименование = "usd";
			Валюта.Код 			= "840";
			
		ИначеЕсли НЕ Найти(ТекущийКодЛокализации, "UK") = 0 Тогда
			ВыберитеВашЯзык = ЯзыкУ;
			Валюта.Наименование = "грн.";
			Валюта.Код 			= "980";
			
		ИначеЕсли не Валюта.Наименование = "грн." тогда //уже в Украине
			ВыберитеВашЯзык = ЯзыкР;
			Валюта.Наименование = "руб.";
			Валюта.Код 			= "643";
			
		Иначе
			ВашЯзыкРусскийНоВыРаботаетеНаУкраине = ИСТИНА;
			
		КонецЕсли;
		Валюта.Записать();	
		
		Константы.ИспользоватьСкидки.Установить(ИСТИНА);	
		Константы.ВестиУчетДвиженияДенег.Установить(ИСТИНА);
		Константы.ВестиУчетВаловойПрибыли.Установить(ИСТИНА);
		Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Установить(ИСТИНА);	
		Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(ИСТИНА);		
		Константы.ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске.Установить(ИСТИНА);		
	КонецЕсли;
	
	ИспользоватьСкидки = Константы.ИспользоватьСкидки.Получить();
	ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = Константы.ВестиУчетДвиженияДенег.Получить() И Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Получить();
	
	ВыберитеВашЯзыкТут = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	Если ЗначениеЗаполнено(ВыберитеВашЯзыкТут) Тогда
		ВыберитеВашЯзык = ВыберитеВашЯзыкТут;
	КонецЕсли;	
	
	Курс1 = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	Курс1.Активность= ИСТИНА;
	Курс1.Валюта 	= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Ссылка;
	Курс1.Курс 		= 1;
	Курс1.Период 	= дата(1980, 2, 25, 4, 30, 0);
	Курс1.Записать(ИСТИНА);
	
	НаименованиеВашейОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование;
	
	услуга = ПредопределенноеЗначение("Справочник.Номенклатура.УслугиНаСумму").ПолучитьОбъект();
	услуга.НеОтслеживатьОстаток = ИСТИНА;
	услуга.Записать();
	
	услуга = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму").ПолучитьОбъект();
	услуга.НеОтслеживатьОстаток = ИСТИНА;
	услуга.Записать();
	
	ИспользоватьВидДокументовВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот");
	ВестиУчетТовараПоНоменклатурнымГруппам 	 = ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС ;
	ВестиУчетДенег 							 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	ВестиУчетДенегВРазныхВалютах 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");	
	НаименованиеВашегоОсновногоСклада 		 = Справочники.Склады.ОсновнойСклад.Наименование ;
	ВестиУчетТовараПоНесколькимСкладам 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	ВестиУчетНесколькихВидовЦен 			 = ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
	ВестиУчетЗаказовКлиентов				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	ВестиУчетЗаказовПоставщикам				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
	ИспользоватьКомплектацию				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию");
	ИспользоватьСторнированиеДокументов		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию")) Тогда
		Константы.ВидЦенПриходованияТовараПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен"));
	КонецЕсли;
	
	НаименованиеБазовогоВидаЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен").Наименование ;
	
	ВестиУчетВаловойПрибыли 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
	ИспользоватьШтрихКодыНоменклатуры 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	ВестиУчетВзаиморасчетовСКлиентами 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	ВестиУчетОказанияУслугЗаВремя			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
	НаименованиеДляЧастногоПокупателя 		= ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо").Наименование ;
	ВестиУчетВзаиморасчетовСПоставщиками 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	НаименованиеДляПрочегоПоставщика 		= ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо").Наименование ;
	ВестиУчетСобственныхЮридическихЛиц		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц");
	ВестиУчетДенегВРазныхХранилищах 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
	ВестиУчетОтдельныхДоговоровСКонтрагентами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами");
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ВнутреннееПеремещениеДенег").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДополнительныеРасходыПриПриобретенииТоваров").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОбменВалют").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.СменаФормыОплаты").ПолучитьОбъект();
	СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
	СтатьяДвиженияДенег.Записать();
	
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ДубльЛишнийДокумент").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ОшибкаУказанияДатыДокумента").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ОшибочноУказанКонтрагент").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	Если СокрЛП(Константы.ТекстЗаголовкаСчета.Получить()) = "" Тогда
		Константы.ТекстЗаголовкаСчета.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию.Получить()) Тогда
		Константы.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт."));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) Тогда
		Константы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Установить(ТекущаяДата());
		Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	НашеЮрЛицо = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	Если НЕ ЗначениеЗаполнено(НашеЮрЛицо.ВидЦен) Тогда
		НашеЮрЛицоОбъект = НашеЮрЛицо.ПолучитьОбъект();
		НашеЮрЛицоОбъект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		НашеЮрЛицоОбъект.Записать();                                 	
	КонецЕсли;     	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка")) Тогда
		Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию")) 
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию")) Тогда
		
		Константы.СтатьяПоступленияДенегПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации"));
		Константы.СтатьяРасходаДенегПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров"));
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Безналичные);
	КонецЕсли;	
	
	ВестиУчетЗарплатыСотрудников = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию"));		
	Иначе
		Константы.ФормаОплатыПоУмолчанию.Установить(Перечисления.ФормыОплаты.Наличные);
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Наличные);		
	КонецЕсли;                  	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах") = 0 Тогда
		Константы.СрокЗапретаДанныхВЧасах.Установить(24);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных")) Тогда
		Константы.ДатаЗапретаИзмененияДанных.Установить(ТекущаяДата());
	КонецЕсли;
	
	Если ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию = 0 Тогда
		Константы.ПроцентРасчетаЛьготнойЦеныПоУмолчанию.Установить(100);
	КонецЕсли;
	
	ОсновнаяКассаВОсновнойВалюте = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте").ПолучитьОбъект();
	ОсновнаяКассаВОсновнойВалюте.Валюта 	 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	ОсновнаяКассаВОсновнойВалюте.ФормаОплаты = перечисления.ФормыОплаты.Наличные;
	ОсновнаяКассаВОсновнойВалюте.Записать();
	
	ОсновноеХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
	Если НЕ ЗначениеЗаполнено(ОсновноеХранилищеДенег) Тогда
		Константы.ОсновноеХранилищеДенег.Установить(ОсновнаяКассаВОсновнойВалюте.Ссылка);
	КонецЕсли;
	
	НаименованиеПредприятия = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати");
	Если НаименованиеПредприятия = "" Тогда
		НаименованиеПредприятия = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие").НаименованиеДляПечати;
	КонецЕсли;
	
	ЭлектроннаяПочтаАдресСервераPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3");
	Если ЭлектроннаяПочтаАдресСервераPOP3 = "" Тогда
		Константы.ЭлектроннаяПочтаАдресСервераPOP3.Установить("pop.mail.ru");
		Константы.ЭлектроннаяПочтаАдресСервераSMTP.Установить("smtp.mail.ru");
		Константы.ЭлектроннаяПочтаОтправитель.Установить(" @mail.ru");
		Константы.ЭлектроннаяПочтаПользовательSMTP.Установить(" @mail.ru");
		Константы.ЭлектроннаяПочтаПортPOP3.Установить(995);
		Константы.ЭлектроннаяПочтаПортSMTP.Установить(465);
	КонецЕсли;
	
	ОрганизацияПоУмолчанию = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Константы.ОрганизацияПоУмолчанию.Установить(НашеЮрЛицоОбъект);
	КонецЕсли;
	
	Константы.ВключитьПерсонифицированныйУчетВаловойПрибыли.Установить(ИСТИНА);
	Константы.ЕстьПринтер.Установить(ИСТИНА);
	Константы.ОбводитьРамкамиТекстовыеПоляВФормах.Установить(ИСТИНА);
	Константы.ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии.Установить(ИСТИНА);
	
	Если Константы.ЧислоДнейДействительностиСчетаФактурыДляОплаты.Получить() = 0 Тогда
		Константы.ЧислоДнейДействительностиСчетаФактурыДляОплаты.Установить(3);
	КонецЕсли;
	
	Резервирование = ПредопределенноеЗначение("Справочник.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных").ПолучитьОбъект();
	Резервирование.ТипЗаметки  = Перечисления.ТипыЗаметок.Задача;
	Резервирование.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("автоматически");
	Резервирование.Дата 	   = ТекущаяДата();
	Резервирование.ПовторятьКаждыеЧислоЧасов = 24;
	Если НЕ Резервирование.ВыполняемыеЗадачи.Количество() = 0 Тогда
		КаталогДляРезервированияБазыДанных = Резервирование.ВыполняемыеЗадачи[0].Адрес;
	КонецЕсли;	
	Резервирование.Записать();
	
	ОтКого = Константы.ЭлектроннаяПочтаОтправитель.Получить();
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБД = НЕ Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 0;
	Элементы.ГруппаРезервирования.Видимость = ФайловаяБД;
	ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте = ФайловаяБД;	
	
	ДополнительныйРеквизитСправочникаКлиентов = Неопределено;
	Для Счетчик = 1 по 10 Цикл 
		Выполнить(" ДополнительныйРеквизитСправочникаКлиентов = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
		ДополнительныйРеквизитСправочникаКлиентов.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный реквизит справочника Клиентов") + " №" + СокрЛП(Счетчик);
		ДополнительныйРеквизитСправочникаКлиентов.НаименованиеОбъектаВладельца = ДополнительныйРеквизитСправочникаКлиентов.Комментарий;
		ДополнительныйРеквизитСправочникаКлиентов.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляКарточкиСправочникаКлиенты;
		ДополнительныйРеквизитСправочникаКлиентов.Записать();	
	КонецЦикла;
	
	Если НЕ Константы.КонфигурацияВРаботе.Получить() Тогда
		Константы.ИспользоватьЕдиницыИзмеренияНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетЗарплатыСотрудников.Установить(ЛОЖЬ);
		Константы.ВестиУчетПлановыхПоказателейПродаж.Установить(ЛОЖЬ);
		Константы.ВестиУчетСерийНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетСертификатовНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетСобственныхЮридическихЛиц.Установить(ЛОЖЬ);
		Константы.ВестиУчетСредствПредприятия.Установить(ЛОЖЬ);
		Константы.ИспользоватьКомплектацию.Установить(ЛОЖЬ);
		Константы.ИспользоватьПодключаемоеОборудование.Установить(ЛОЖЬ);
		Константы.КоличествоНоменклатурыМожетБытьДробным.Установить(ЛОЖЬ);
		Константы.ПечататьРегламентированныйДокументРасходнойНакладной.Установить(ЛОЖЬ);
		Константы.РеализаторНеМожетМенятьЦены.Установить(ЛОЖЬ);
		Константы.СопровождатьДокументыИзображениями.Установить(ЛОЖЬ);
		Константы.СопровождатьНоменклатуруИзображениями.Установить(ЛОЖЬ);
		Константы.ИспользоватьСистемуУправленияДоступом.Установить(ЛОЖЬ);
		Константы.ИспользоватьМеханизмыПечатиФормыТОРГ12.Установить(ЛОЖЬ);
		Константы.ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраины.Установить(ЛОЖЬ);
		Константы.ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой.Установить(ЛОЖЬ);		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОСменеФункциональнойОпции(ЭлементИмя)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ЭлементИмя, 2);
	ОбновитьИнтерфейс();
	
КонецПроцедуры //СообщитьОСменеФункциональнойОпции

&НаКлиенте
Процедура УчетОказанияУслугЗаВремяПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры
