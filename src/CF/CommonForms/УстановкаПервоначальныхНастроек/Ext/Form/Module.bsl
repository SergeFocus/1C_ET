//sza140124-1605 
//sza131008-1335  

&НаКлиенте
Процедура ПриЗакрытии() 	// ПРИ ЗАКРЫТИИ
	
	ПриЗакрытииНаСервере();
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") тогда
		
		СтруктураПисьма = новый Структура;
		СтруктураПисьма.Вставить("ОтКого", "FirstRun: " + ОтКого);
		СтруктураПисьма.Вставить("ТемаСообщения", "new");
		СтруктураПисьма.Вставить("ТекстСообщения", "Первоначальная настройка");
		СтруктураПисьма.Вставить("РегистрационныйКод", ОбщийМодульПовтор.РегистрационныйКод());
		
		ОбщийМодульСервисСервер.письмоавтору(СтруктураПисьма);		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения() ;	
	Константы.ЗаконченаПервоначальнаяНастройка.Установить(Истина) ;
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
	
	Если ЗначениеЗаполнено(КаталогДляРезервированияБазыДанных) Тогда
		
		Резервирование = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект();
		Если Резервирование.ВыполняемыеЗадачи.Количество() = 0 тогда
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи.Добавить();
		Иначе
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи[0];			
		КонецЕсли;
		СтрокаЗадачи.Адрес 		 = КаталогДляРезервированияБазыДанных;
		Резервирование.Актуально = ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте;
		
		Резервирование.Записать();
		
	КонецЕсли;
	
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ПоддерживатьИныеЯзыкиКромеРусского);
	
	Если ЗначениеЗаполнено(ОтКого)
		и не ЗначениеЗаполнено(Константы.ЭлектроннаяПочтаОтправитель.Получить()) Тогда
		
		Константы.ЭлектроннаяПочтаОтправитель.Установить(ОтКого) ;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ
	
	Если не глКонфигурацияВРаботе  Тогда
		Элементы.Группа3арплата.Видимость = Ложь;
		Элементы.ВестиУчетЗаказовКлиентов.Видимость = Ложь;
		Элементы.ГруппаПЛ.Видимость = Ложь;
		Элементы.ГруппаПП2.Видимость = Ложь;
	КонецЕсли;
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьВидимостьЭлементов();
	ОбновитьИнтерфейс();
	Русский = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = Русский;
	Элементы.ОбнулитьНастройки.Видимость = НЕ ЗначениеЗаполнено(ВыберитеВашЯзык);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ЯзыкА = Справочники.Языки.English.ПолучитьОбъект();
	ЯзыкА.Комментарий 	= "English language EN";
	ЯзыкА.Наименование 	= "English - Английский (EN)";
	ЯзыкА.Записать();
	
	ЯзыкУ = Справочники.Языки.Український.ПолучитьОбъект();
	ЯзыкУ.Комментарий 	= "Українська мова UA";
	ЯзыкУ.Наименование 	= "Українська - Ukrainian (UK)";
	ЯзыкУ.Записать();
	
	ЯзыкР = Справочники.Языки.Русский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Русский язык RU";
	ЯзыкР.Наименование 	= "Русский - Russian (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Румынский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Român RO";
	ЯзыкР.Наименование 	= "Român - Румынский (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Белорусский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Беларускі BL";
	ЯзыкР.Наименование 	= "Беларускі - Белорусский (BL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Китайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "中国的 ZH";
	ЯзыкР.Наименование 	= "中国的 - Китайский (ZH)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Болгарский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Български BG";
	ЯзыкР.Наименование 	= "Български - Болгарский (BG)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Казахский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Қазақ BL";
	ЯзыкР.Наименование 	= "Қазақ - Казахский (KK)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Немецкий.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Deutsch DE";
	ЯзыкР.Наименование 	= "Deutsch - Немецкий (DE)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Польский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Polski PL";
	ЯзыкР.Наименование 	= "Polski - Польский (PL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Тайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "ภาษาไทย  TH";
	ЯзыкР.Наименование 	= "ภาษาไทย - Тайский (TH)";
	ЯзыкР.Записать();
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	ТекущийКодЛокализации = Врег(ТекущийКодЛокализации());
	ПоддерживатьИныеЯзыкиКромеРусского = Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить();
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(Истина) ;
	
	Если НЕ Найти(ТекущийКодЛокализации, "EN") = 0 Тогда
		ВыберитеВашЯзык = ЯзыкА;
		Валюта.Наименование = "usd";
		Валюта.Код 			= "840";
		
	ИначеЕсли НЕ Найти(ТекущийКодЛокализации, "UK") = 0 Тогда
		ВыберитеВашЯзык = ЯзыкУ;
		Валюта.Наименование = "грн.";
		Валюта.Код 			= "980";
		
	ИначеЕсли не Валюта.Наименование = "грн." тогда //уже на Украине
		ВыберитеВашЯзык = ЯзыкР;
		Валюта.Наименование = "руб.";
		Валюта.Код 			= "643";
		
	Иначе
		ВашЯзыкРусскийНоВыРаботаетеНаУкраине = Истина;
		
	КонецЕсли;
	Валюта.Записать();
	ВыберитеВашЯзыкТут = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса") ;
	Если ЗначениеЗаполнено(ВыберитеВашЯзыкТут) Тогда
		ВыберитеВашЯзык = ВыберитеВашЯзыкТут;
	КонецЕсли;	
	
	Константы.ИспользоватьСкидки.Установить(истина);
	
	Курс1 			= РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	Курс1.Активность = Истина;
	Курс1.Валюта 	= Валюта.Ссылка;
	Курс1.Курс 		= 1;
	Курс1.Период 	= НачалоГода(ТекущаяДата());
	Курс1.Записать(Истина);
	
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
	услуга = Справочники.Номенклатура.УслугиНаСумму.ПолучитьОбъект() ;
	услуга.НеОтслеживатьОстаток = истина;
	услуга.Записать();
	
	услуга = Справочники.Номенклатура.ТоварНаСумму.ПолучитьОбъект() ;
	услуга.НеОтслеживатьОстаток = истина;
	услуга.Записать();
	
	ВестиУчетДенег 						= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") ;
	ВестиУчетДенегВРазныхВалютах 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ;
	ВестиУчетТовараПоНоменклатурнымГруппам 	= ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС ;
	НаименованиеВашегоОсновногоСклада 	= Справочники.Склады.ОсновнойСклад.Наименование ;
	ВестиУчетТовараПоНесколькимСкладам 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ;
	ВестиУчетНесколькихВидовЦен 		= ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
	ВестиУчетЗаказовКлиентов			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов") ;
	ВестиУчетЗаказовПоставщикам			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") ;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию")) Тогда
		Константы.ВидЦенПриходованияТовараПоУмолчанию.Установить(Справочники.ВидыЦен.ОсновнойВидЦен);
	КонецЕсли;
	
	НаименованиеБазовогоВидаЦен = Справочники.ВидыЦен.ОсновнойВидЦен.Наименование ;
	
	ВестиУчетВаловойПрибыли 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
	ИспользоватьШтрихКодыНоменклатуры 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") ;
	ВестиУчетВзаиморасчетовСКлиентами 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") ;
	НаименованиеДляЧастногоПокупателя 		= Справочники.Клиенты.ФизическоеЛицо.Наименование ;
	ВестиУчетВзаиморасчетовСПоставщиками 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") ;
	НаименованиеДляПрочегоПоставщика 		= Справочники.Поставщики.ФизическоеЛицо.Наименование ;
	ВестиУчетСобственныхЮридическихЛиц		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") ;
	ВестиУчетОтдельныхДоговоровСИКонтрагентами = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСИКонтрагентами") ;
	ВестиУчетДенегВРазныхХранилищах 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчитыватьДеньгиВНесколькихХранилищах") ;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) Тогда
		Константы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Установить(ТекущаяДата());
		Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	НашеЮрЛицо = Справочники.Организации.ОсновноеПредприятие;
	если не ЗначениеЗаполнено(НашеЮрЛицо.ВидЦен) Тогда
		НашеЮрЛицо = НашеЮрЛицо.ПолучитьОбъект() ;
		НашеЮрЛицо.ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен;
		НашеЮрЛицо.Записать();                                 	
	КонецЕсли;     	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка")) Тогда
		Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию")) 
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию")) Тогда
		
		Константы.СтатьяПоступленияДенегПоУмолчанию.Установить(Справочники.СтатьиДвиженияДенег.ДоходОтРеализации);
		Константы.СтатьяРасходаДенегПоУмолчанию.Установить(Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Безналичные);
	КонецЕсли;	
	
	ВестиУчетЗарплатыСотрудников = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию"));
		
	Иначе
		Константы.ФормаОплатыПоУмолчанию.Установить(Перечисления.ФормыОплаты.Наличные);
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Наличные);
		
	КонецЕсли;                  	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах") = 0 Тогда
		Константы.СрокЗапретаДанныхВЧасах.Установить(24);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных")) Тогда
		Константы.ДатаЗапретаИзмененияДанных.Установить(ТекущаяДата());
	КонецЕсли;
	
	Если ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию = 0 Тогда
		Константы.ПроцентРасчетаЛьготнойЦеныПоУмолчанию.Установить(100);
	КонецЕсли;
	
	ОсновнаяКассаВОсновнойВалюте = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте.ПолучитьОбъект();
	ОсновнаяКассаВОсновнойВалюте.Валюта 		= Справочники.Валюты.ОсновнаяВалюта;
	ОсновнаяКассаВОсновнойВалюте.ФормаОплаты 	= перечисления.ФормыОплаты.Наличные;
	ОсновнаяКассаВОсновнойВалюте.Записать();
	
	ОсновноеХранилищеДенег = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
	Если НЕ ЗначениеЗаполнено(ОсновноеХранилищеДенег) Тогда
		Константы.ОсновноеХранилищеДенег.Установить(ОсновнаяКассаВОсновнойВалюте.Ссылка);
	КонецЕсли;
		
	НаименованиеПредприятия = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати") ;
	
	ЭлектроннаяПочтаАдресСервераPOP3 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3") ;
	Если ЭлектроннаяПочтаАдресСервераPOP3 = "" Тогда
		Константы.ЭлектроннаяПочтаАдресСервераPOP3.Установить("pop.mail.ru");
		Константы.ЭлектроннаяПочтаАдресСервераSMTP.Установить("smtp.mail.ru");
		Константы.ЭлектроннаяПочтаОтправитель.Установить(" @mail.ru");
		Константы.ЭлектроннаяПочтаПользовательSMTP.Установить(" @mail.ru");
		Константы.ЭлектроннаяПочтаПортPOP3.Установить(110);
		Константы.ЭлектроннаяПочтаПортSMTP.Установить(25);
	КонецЕсли;
	
	ОрганизацияПоУмолчанию = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Константы.ОрганизацияПоУмолчанию.Установить(Справочники.Организации.ОсновноеПредприятие) ;
	КонецЕсли;
		
	Резервирование = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект() ;
	Резервирование.ТипЗаметки 	= Перечисления.ТипыЗаметок.Задача;
	Резервирование.Комментарий 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("автоматически");
	Резервирование.Дата 		= ТекущаяДата();
	Резервирование.ПовторятьКаждыеЧислоЧасов = 24;
	Если НЕ Резервирование.ВыполняемыеЗадачи.Количество() = 0 Тогда
		КаталогДляРезервированияБазыДанных = Резервирование.ВыполняемыеЗадачи[0].Адрес;
	КонецЕсли;	
	Резервирование.Записать();
	
	Константы.ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода.Установить(Истина);
	ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода = Истина;
	
	Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(Истина) ;
	
	ОтКого = Константы.ЭлектроннаяПочтаОтправитель.Получить();
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБД = НЕ Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 0;
	Элементы.ГруппаРезервирования.Видимость = ФайловаяБД;
	ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте = ФайловаяБД;
	
	Константы.ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске.Установить(Истина) ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыберитеВашЯзыкПриИзменении(Элемент)
	
	состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ОбновитьТекущийЯзыкИнтерфейса(ВыберитеВашЯзык);
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	//Если НЕ ОбщийМодульКлиент.получитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") Тогда
	//	ОткрытьСправку();
	//КонецЕсли;
	
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТекущийЯзыкИнтерфейса(ВыберитеВашЯзыкБК = Неопределено)
	
	Русский = ЗначениеЗаполнено(ВыберитеВашЯзыкБК) И ВыберитеВашЯзыкБК = Справочники.Языки.Русский;
	
	Если НЕ Русский Тогда
		
		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ВыберитеВашЯзыкБК.Код, ВыберитеВашЯзыкБК);
		
		если ВыберитеВашЯзыкБК = справочники.Языки.Український тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "грн.";
			Валюта.Код = "980";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		ИначеЕсли ВыберитеВашЯзыкБК = справочники.Языки.English 
			или ВыберитеВашЯзыкБК = справочники.Языки.Румынский тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "usd";
			Валюта.Код = "840";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		конецесли;
		
		Константы.ТекущийЯзыкИнтерфейса.Установить(ВыберитеВашЯзыкБК);
		Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить( Истина);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзыкБК;	
		
		ЭлементСправочника = Справочники.Организации.ОсновноеПредприятие;
		Если ЭлементСправочника.Наименование = "Основное предприятие" Тогда
			ЭлементСправочника = ЭлементСправочника.ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
			ЭлементСправочника.Записать();                                     	
		КонецЕсли;
		
		ЭлементСправочника = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ВидыЦен.ОсновнойВидЦен.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Клиенты.ФизическоеЛицо.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Клиенты.Архив.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Клиентов") ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Договора.Архив.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Договоров") ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Поставщики.ФизическоеЛицо.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Поставщики.Архив.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Поставщиков") ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Склады.ОсновнойСклад.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ДоходОтРеализации.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ОбменВалют.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ПрочееВыбытиеДенег.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ПрочееПоступлениеДенег.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.СтатьиДвиженияДенег.ДополнительныеРасходыПриПриобретенииТоваров.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ФормулыОписания.ФормулыАвтоНаименованияНоменклатурыДляНоменклатурнойГруппы.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ФормулыОписания.ФормулыПреобразованияЦен.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ФормулыОписания.ФормулыТекстаЭтикетки.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ФормулыОписания.ФормулыШтрихКодаНоменклатуры.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Регионы.НашРегион.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Номенклатура.Архив.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальной Номенклатуры");
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Номенклатура.ТоварНаСумму.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.Номенклатура.УслугиНаСумму.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
		ЭлементСправочника.Записать();		
		
		ВидХарактеристик = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
		Пока ВидХарактеристик.Следующий() Цикл
			ОбъектХарактеристика = ВидХарактеристик.ПолучитьОбъект();
			ОбъектХарактеристика.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидХарактеристик.Наименование) ;
			ОбъектХарактеристика.Записать();
		конеццикла;
		
	Иначе
		Константы.ТекущийЯзыкИнтерфейса.Установить(Справочники.Языки.Русский);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Русский;	
		
	КонецЕсли;      	
	
КонецПроцедуры 

&НаКлиенте
Процедура СообщитьОСменеФункциональнойОпции(ЭлементИмя)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ЭлементИмя, 2);
	ОбновитьИнтерфейс();
	
КонецПроцедуры //СообщитьОСменеФункциональнойОпции

&НаКлиенте
Процедура НаименованиеВашейОсновнойВалютыПриИзменении(Элемент)
	НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(НаименованиеВашейОсновнойВалюты);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(НаименованиеВашейОсновнойВалютыБК)
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект() ;
	Валюта.Наименование = НаименованиеВашейОсновнойВалютыБК;
	Валюта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетДенег Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаНастроекУчетаНоменклатуры;
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаНастроекУчетаНоменклатуры Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетаВзаиморасчетов;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ДругиеНастройкиПрограммы;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеКонстанты()
	
	Константы.УчитыватьДеньгиВНесколькихХранилищах.Установить(ВестиУчетДенегВРазныхХранилищах);
	Константы.ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода.Установить(ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода);
	Константы.ВестиУчетСобственныхЮридическихЛиц.Установить(ВестиУчетСобственныхЮридическихЛиц) ;
	Константы.ВестиУчетОтдельныхДоговоровСИКонтрагентами.Установить(ВестиУчетОтдельныхДоговоровСИКонтрагентами);
	константы.ВестиУчетВаловойПрибыли.Установить(ВестиУчетВаловойПрибыли);
	константы.ВестиУчетДвиженияДенег.Установить(ВестиУчетДенег);
	константы.ВестиУчетЗарплатыСотрудников.Установить(ВестиУчетЗарплатыСотрудников);
	константы.ВестиУчетВалют.Установить(ВестиУчетДенегВРазныхВалютах);
	константы.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп.Установить(ВестиУчетТовараПоНоменклатурнымГруппам);
	константы.ВестиУчетПоСкладам.Установить(ВестиУчетТовараПоНесколькимСкладам);
	константы.ВестиУчетЗаказовКлиентов.Установить(ВестиУчетЗаказовКлиентов);
	константы.ВестиУчетЗаказовКлиентов.Установить(ВестиУчетЗаказовПоставщикам);
	
	Если НЕ ВестиУчетТовараПоНесколькимСкладам
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию")) Тогда
		
		Константы.СкладПоУмолчанию.Установить(Справочники.Склады.ОсновнойСклад) ;
	КонецЕсли;
	
	константы.ИспользоватьСложныйМеханизмЦен.Установить(ВестиУчетНесколькихВидовЦен);
	
	константы.ИспользоватьШтрихКоды.Установить(ИспользоватьШтрихКодыНоменклатуры);
	константы.ВестиУчетПоКлиентам.Установить(ВестиУчетВзаиморасчетовСКлиентами);
	Если НЕ ВестиУчетВзаиморасчетовСКлиентами
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию")) Тогда
		
		Константы.КлиентПоУмолчанию.Установить(Справочники.Клиенты.ФизическоеЛицо) ;
	КонецЕсли;
	
	константы.ВестиУчетПоПоставщикам.Установить(ВестиУчетВзаиморасчетовСПоставщиками);
	Если НЕ ВестиУчетВзаиморасчетовСПоставщиками
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию")) Тогда
		
		Константы.ПоставщикПоУмолчанию.Установить(Справочники.Поставщики.ФизическоеЛицо) ;
	КонецЕсли;
	ПараметрыСеанса.ВестиУчетВалютВСеансе = ВестиУчетДенегВРазныхВалютах;
	ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзык;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	Элементы.ДобавьтеВсеНеобходимыеВалютыИУкажитеИхКурсы.Видимость = ВестиУчетДенегВРазныхВалютах;
	Элементы.ВестиУчетДенегВРазныхВалютах.Видимость = ВестиУчетДенег;
	Элементы.ГруппаГоризонтВалют.Видимость 			= ВестиУчетДенегВРазныхВалютах;
	Элементы.ГруппаХранилищаДенег.Видимость 		= ВестиУчетДенег;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхВалютахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНоменклатурнымГруппамПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВашегоОсновногоСкладаПриИзменении(Элемент)
	НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(НаименованиеВашегоОсновногоСклада);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(НаименованиеВашегоОсновногоСкладаБК)
	
	Склад = Справочники.Склады.ОсновнойСклад.ПолучитьОбъект() ;
	Склад.Наименование = НаименованиеВашегоОсновногоСкладаБК;
	Склад.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНесколькимСкладамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНесколькихВидовЦенПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБазовогоВидаЦенПриИзменении(Элемент)
	НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(НаименованиеБазовогоВидаЦен);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(НаименованиеБазовогоВидаЦенБК)
	
	ОсновнойВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен.ПолучитьОбъект() ;
	ОсновнойВидЦен.Наименование = НаименованиеБазовогоВидаЦенБК;
	ОсновнойВидЦен.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыНоменклатурыПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСКлиентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляЧастногоПокупателяПриИзменении(Элемент)
	НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(НаименованиеДляЧастногоПокупателя);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(НаименованиеДляЧастногоПокупателяБК)
	
	ЧастныйКлиент = Справочники.Клиенты.ФизическоеЛицо.ПолучитьОбъект() ;
	ЧастныйКлиент.Наименование = НаименованиеДляЧастногоПокупателяБК;
	ЧастныйКлиент.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПрочегоПоставщикаПриИзменении(Элемент)
	НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(НаименованиеДляПрочегоПоставщика);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(НаименованиеДляПрочегоПоставщикаБК)
	
	ЧастныйПоставщик = Справочники.Поставщики.ФизическоеЛицо.ПолучитьОбъект() ;
	ЧастныйПоставщик.Наименование = НаименованиеДляПрочегоПоставщикаБК;
	ЧастныйПоставщик.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСПоставщикамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзменении(Элемент)
	ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере()
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Если ВашЯзыкРусскийНоВыРаботаетеНаУкраине Тогда
		Валюта.Наименование = "грн.";
		Валюта.Код = "980";
		
	Иначе
		Валюта.Наименование = "руб.";
		Валюта.Код = "643";
		
	КонецЕсли;
	Валюта.Записать();
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗарплатыСотрудниковПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекУчетаПрограммы(Команда)
	
	закрыть();
	форманастроек = ПолучитьФорму("ОбщаяФорма.НастройкиБазыДанных");
	форманастроек.открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПредприятияПриИзменении(Элемент)
	НаименованиеПредприятияПриИзмененииНаСервере(НаименованиеПредприятия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеПредприятияПриИзмененииНаСервере(НаименованиеПредприятияБК)
	
	Константы.ТекстВШапкеДокументовПриПечати.Установить(НаименованиеПредприятияБК); 
	
	НашеЮрЛицо = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект() ;
	НашеЮрЛицо.Наименование = НаименованиеПредприятияБК;
	НашеЮрЛицо.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСобственныхЮридическихЛиц1ПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОтдельныхДоговоровСИКонтрагентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзменении(Элемент)
	НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(НеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске)
	Константы.НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении.Установить(ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляРезервированияБазыДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог для автоматического резервирования:");
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.Каталог					= КаталогДляРезервированияБазыДанных;
	Если ДиалогВыбФайла.Выбрать() Тогда 
		КаталогДляРезервированияБазыДанных = ДиалогВыбФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПриходаПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхХранилищахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьНастройки(Команда)
	ОбновитьТекущийЯзыкИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовКлиентовПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовПоставщикамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте
		И КаталогДляРезервированияБазыДанных = "" Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог для резервирования не указан!");
		Сообщение.Поле  = "КаталогДляРезервированияБазыДанных";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры
