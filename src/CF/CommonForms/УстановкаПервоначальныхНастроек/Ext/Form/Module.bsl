// sza151119-2008
// sza151014-0445 
// sza150609-0154 
// sza150523-0106 
// sza150515-1747 ваучеры
// sza150427-0010 иврит
// sza150113-0444 
// sza150109-0330 нч
// sza141214-0231 
// sza141117-0258 
// sza141112-1521
// sza141111-1410
// sza141016-0111
// sza140707-1901  
// sza140612-1645 : 
// sza131008-1335

&НаКлиенте
Процедура Англичанин(Команда)
	ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.English");
	ВыбралиЯзык();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаEUR(Команда)
	ВалютаУчетаEURНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютаУчетаEURНаСервере()
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Если ВашЯзыкРусскийНоВыРаботаетеНаУкраине Тогда
		Валюта.Наименование = "eur";
	Иначе
		Валюта.Наименование = "€";
	КонецЕсли;
	Валюта.Код = "978";
	Валюта.МеждународныйКод = "EUR";
	Валюта.Записать();
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаДоллар(Команда)
	ВалютаУчетаДолларНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВалютаУчетаДолларНаСервере()
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Если ВашЯзыкРусскийНоВыРаботаетеНаУкраине Тогда
		Валюта.Наименование = "usd";
	Иначе
		Валюта.Наименование = "$";
	КонецЕсли;
	Валюта.Код = "840";
	Валюта.МеждународныйКод = "USD";
	Валюта.Записать();
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзменении(Элемент)
	ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВашЯзыкРусскийНоВыРаботаетеНаУкраинеПриИзмененииНаСервере()
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Если НЕ ВашЯзыкРусскийНоВыРаботаетеНаУкраине Тогда
		Валюта.Наименование = "руб.";
		Валюта.Код = "643";
		Валюта.МеждународныйКод = "RUB";
		
	Иначе
		Валюта.Наименование = "грн.";
		Валюта.Код = "980";
		Валюта.МеждународныйКод = "UAH";
		
	КонецЕсли;
	Валюта.Записать();
	НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВаловойПрибылиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСКлиентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетВзаиморасчетовСПоставщикамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхВалютахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегВРазныхХранилищахПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетДенегПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовКлиентовПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗаказовПоставщикамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетЗарплатыСотрудниковПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетНесколькихВидовЦенПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОтдельныхДоговоровСКонтрагентамиПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСобственныхЮридическихЛиц1ПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНесколькимСкладамПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТовараПоНоменклатурнымГруппамПриИзменении(Элемент)
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыберитеВашЯзыкПриИзменении(Элемент)
	ВыбралиЯзык();
КонецПроцедуры	

&НаКлиенте
Процедура ВыбралиЯзык()
	
	Русский = ЗначениеЗаполнено(ВыберитеВашЯзык) И ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	Если НЕ Русский Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите, Локализация.. / Wait for localiZation.."));		
	КонецЕсли;
	
	ОбновитьТекущийЯзыкИнтерфейса(ВыберитеВашЯзык);
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	СообщитьОСменеФункциональнойОпции(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Язык интерфейса по-умолчанию"));	
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетДенег Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетаВзаиморасчетов;
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаНастроекУчетаНоменклатуры Тогда
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаУчетДенег;
	Иначе
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ДругиеНастройкиПрограммы;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеКонстанты()
	
	Константы.ВестиУчетДенегВНесколькихХранилищах.Установить(ВестиУчетДенегВРазныхХранилищах);
	Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Установить(ВестиУчетДенег И ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода);
	Константы.ИспользоватьВаучеры.Установить(ИспользоватьВаучеры);
	Константы.ВестиУчетСобственныхЮридическихЛиц.Установить(ВестиУчетСобственныхЮридическихЛиц);
	Константы.ВестиУчетОтдельныхДоговоровСКонтрагентами.Установить(ВестиУчетОтдельныхДоговоровСКонтрагентами);
	Константы.ВестиУчетВаловойПрибыли.Установить(ВестиУчетВаловойПрибыли);
	Константы.ВестиУчетДвиженияДенег.Установить(ВестиУчетДенег);
	Константы.ВестиУчетОказанияУслугЗаВремя.Установить(ВестиУчетОказанияУслугЗаВремя);
	Константы.ВестиУчетЗарплатыСотрудников.Установить(ВестиУчетЗарплатыСотрудников);
	Константы.ВестиУчетВалют.Установить(ВестиУчетДенегВРазныхВалютах);
	Константы.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп.Установить(ВестиУчетТовараПоНоменклатурнымГруппам);
	Константы.ВестиУчетПоСкладам.Установить(ВестиУчетТовараПоНесколькимСкладам);
	Константы.ВестиУчетЗаказовКлиентов.Установить(ВестиУчетЗаказовКлиентов);
	Константы.ВестиУчетЗаказовПоставщикам.Установить(ВестиУчетЗаказовПоставщикам);
	Константы.ИспользоватьДокументыВыполненияРабот.Установить(ИспользоватьВидДокументовВыполненияРабот);
	Константы.ИспользоватьКомплектацию.Установить(ИспользоватьКомплектацию);
	
	Если НЕ ВестиУчетТовараПоНесколькимСкладам
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладПоУмолчанию")) Тогда
		
		Константы.СкладПоУмолчанию.Установить(Справочники.Склады.ОсновнойСклад);
	КонецЕсли;
	
	Константы.ИспользоватьСложныйМеханизмЦен.Установить(ВестиУчетНесколькихВидовЦен);
	
	Константы.ИспользоватьШтрихКоды.Установить(ИспользоватьШтрихКодыНоменклатуры);
	Константы.ВестиУчетПоКлиентам.Установить(ВестиУчетВзаиморасчетовСКлиентами);
	Если НЕ ВестиУчетВзаиморасчетовСКлиентами
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КлиентПоУмолчанию")) Тогда
		
		Константы.КлиентПоУмолчанию.Установить(Справочники.Клиенты.ФизическоеЛицо);
	КонецЕсли;
	
	Константы.ВестиУчетПоПоставщикам.Установить(ВестиУчетВзаиморасчетовСПоставщиками);
	Если НЕ ВестиУчетВзаиморасчетовСПоставщиками
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию")) Тогда
		
		Константы.ПоставщикПоУмолчанию.Установить(Справочники.Поставщики.ФизическоеЛицо);
	КонецЕсли;
	ПараметрыСеанса.ВестиУчетВалютВСеансе = ВестиУчетДенегВРазныхВалютах;
	ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзык;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВаучерыПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомплектациюПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПриходаПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихКодыНоменклатурыПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляРезервированияБазыДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДиалогДляВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогДляВыбораФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите каталог для автоматического резервирования") + ": ";
	ДиалогДляВыбораФайла.МножественныйВыбор		= ЛОЖЬ;
	ДиалогДляВыбораФайла.ПредварительныйПросмотр	= ЛОЖЬ;
	ДиалогДляВыбораФайла.ИндексФильтра			= 0;
	ДиалогДляВыбораФайла.Каталог					= КаталогДляРезервированияБазыДанных;
	ДиалогДляВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогДляРезервированияБазыДанныхОткрытиеЗавершение", ЭтаФорма, Новый Структура("ДиалогДляВыбораФайла", ДиалогДляВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДляРезервированияБазыДанныхОткрытиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогДляВыбораФайла = ДополнительныеПараметры.ДиалогДляВыбораФайла;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда 
		КаталогДляРезервированияБазыДанных = ДиалогДляВыбораФайла.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБазовогоВидаЦенПриИзменении(Элемент)
	НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(НаименованиеБазовогоВидаЦен);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеБазовогоВидаЦенПриИзмененииНаСервере(Знач НаименованиеБазовогоВидаЦенБК)
	
	ОсновнойВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен").ПолучитьОбъект();
	ОсновнойВидЦен.Наименование = НаименованиеБазовогоВидаЦенБК;
	ОсновнойВидЦен.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВашегоОсновногоСкладаПриИзменении(Элемент)
	НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(НаименованиеВашегоОсновногоСклада);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашегоОсновногоСкладаПриИзмененииНаСервере(Знач НаименованиеВашегоОсновногоСкладаБК)
	
	Склад = Справочники.Склады.ОсновнойСклад.ПолучитьОбъект();
	Склад.Наименование = НаименованиеВашегоОсновногоСкладаБК;
	Склад.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеВашейОсновнойВалютыПриИзменении(Элемент)
	НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(НаименованиеВашейОсновнойВалюты);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеВашейОсновнойВалютыПриИзмененииНаСервере(Знач НаименованиеВашейОсновнойВалютыБК)
	
	Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	Валюта.Наименование = НаименованиеВашейОсновнойВалютыБК;
	Валюта.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПрочегоПоставщикаПриИзменении(Элемент)
	НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(НаименованиеДляПрочегоПоставщика);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляПрочегоПоставщикаПриИзмененииНаСервере(Знач НаименованиеДляПрочегоПоставщикаБК)
	
	ЧастныйПоставщик = Справочники.Поставщики.ФизическоеЛицо.ПолучитьОбъект();
	ЧастныйПоставщик.Наименование = НаименованиеДляПрочегоПоставщикаБК;
	ЧастныйПоставщик.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляЧастногоПокупателяПриИзменении(Элемент)
	НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(НаименованиеДляЧастногоПокупателя);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеДляЧастногоПокупателяПриИзмененииНаСервере(Знач НаименованиеДляЧастногоПокупателяБК)
	
	ЧастныйКлиент = Справочники.Клиенты.ФизическоеЛицо.ПолучитьОбъект();
	ЧастныйКлиент.Наименование = НаименованиеДляЧастногоПокупателяБК;
	ЧастныйКлиент.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПредприятияПриИзменении(Элемент)
	НаименованиеПредприятияПриИзмененииНаСервере(НаименованиеПредприятия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаименованиеПредприятияПриИзмененииНаСервере(Знач НаименованиеПредприятия)
	
	Константы.ТекстВШапкеДокументовПриПечати.Установить(НаименованиеПредприятия); 
	
	НашеЮрЛицо = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие").ПолучитьОбъект();
	НашеЮрЛицо.Наименование = НаименованиеПредприятия;
	НашеЮрЛицо.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзменении(Элемент)
	НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(НеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НеОтправлятьАвторуСтатистикуПриПервомЗапускеПриИзмененииНаСервере(Знач ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске)
	Константы.НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении.Установить(ФлагНеОтправлятьАвторуСтатистикуПриПервомЗапуске);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	
	Элементы.ДобавьтеВсеНеобходимыеВалютыИУкажитеИхКурсы.Видимость = ВестиУчетДенегВРазныхВалютах;
	Элементы.ВестиУчетДенегВРазныхВалютах.Видимость = ВестиУчетДенег;
	Элементы.ГруппаГоризонтВалют.Видимость 			= ВестиУчетДенегВРазныхВалютах;
	Элементы.ГруппаХранилищаДенег.Видимость 		= ВестиУчетДенег;
	Элементы.ГруппаВыполненияРабот.Видимость 		= ВестиУчетВзаиморасчетовСКлиентами;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТекущийЯзыкИнтерфейса(Знач ВыберитеВашЯзыкБК = Неопределено)
	
	РусскийЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	Русский = ЗначениеЗаполнено(ВыберитеВашЯзыкБК) И ВыберитеВашЯзыкБК = РусскийЯзык;
	
	Если НЕ Русский Тогда
		
		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ВыберитеВашЯзыкБК.Код, ВыберитеВашЯзыкБК, , , , ИСТИНА);
		
		Если ВыберитеВашЯзыкБК = Справочники.Языки.Украинский Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "грн.";
			Валюта.Код = "980";
			Валюта.МеждународныйКод = "UAH";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		ИначеЕсли ВыберитеВашЯзыкБК = Справочники.Языки.English 
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Китайский 
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Иврит
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Тайский Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "usd";
			Валюта.Код = "840";
			Валюта.МеждународныйКод = "USD";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		ИначеЕсли ВыберитеВашЯзыкБК = Справочники.Языки.Болгарский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Болгарский 
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Немецкий
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Венгерский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Итальянский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Латышский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Литовский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Французский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Чешский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Эстонский
			ИЛИ ВыберитеВашЯзыкБК = Справочники.Языки.Польский Тогда
			
			Валюта = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
			Валюта.Наименование = "eur";
			Валюта.Код = "978";
			Валюта.МеждународныйКод = "EUR";
			Валюта.Записать();
			НаименованиеВашейОсновнойВалюты = Валюта.Наименование;
			
		КонецЕсли;
		
		Константы.ТекущийЯзыкИнтерфейса.Установить(ВыберитеВашЯзыкБК);
		Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ИСТИНА);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ВыберитеВашЯзыкБК;	
		
	Иначе
		Константы.ТекущийЯзыкИнтерфейса.Установить(РусскийЯзык);
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = РусскийЯзык;	
		
	КонецЕсли;      	
	
	ОбщийМодульСервер.ЗадатьНаименованияОбъектамНаДругомЯзыке(); // и в случае русского тоже
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбнулитьНастройки(Команда)
	ОбновитьТекущийЯзыкИнтерфейса();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекУчетаПрограммы(Команда)
	
	Закрыть();
	ОткрытьФорму("ОбщаяФорма.НастройкиБазыДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте Тогда
		Если ПустаяСтрока(КаталогДляРезервированияБазыДанных) Тогда
			
			Отказ = ИСТИНА;
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог для резервирования не указан!"), , "КаталогДляРезервированияБазыДанных");
			
		Иначе
			ПроверитьСуществованиеКаталога(Неопределено, КаталогДляРезервированияБазыДанных, ИСТИНА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии() 										// ПРИ ЗАКРЫТИИ
	
	ПриЗакрытииНаСервере();
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ИспользоватьСторнированиеДокументов Тогда
		Константы.ИспользоватьСторнированиеДокументов.Установить(ИСТИНА);
		Константы.БлокироватьПроведенныеДокументы.Установить(ИСТИНА);
	КонецЕсли;
	
	Константы.ПользователейНесколько.Установить(НесколькоПользователей);
	Если НесколькоПользователей Тогда
		Константы.ИспользоватьЖурналированиеСобытий.Установить(ИСТИНА);
		Константы.ВестиЗаписьВЖурналВсехОбычныхДействийПользователей.Установить(ИСТИНА);
	КонецЕсли;
	
	Константы.ВестиУчетСобытий.Установить(ВестиУчетСобытий);
	Константы.РегионРегламентированногоУчета.Установить(РегионРегламентированногоУчета);
	Константы.ИспользоватьСкидки.Установить(ИспользоватьСкидки);
	Константы.ИспользоватьДокументыВыполненияРабот.Установить(ИспользоватьВидДокументовВыполненияРабот);
	Константы.ЗаконченаПервоначальнаяНастройка.Установить(ИСТИНА);
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
	
	Если ЗначениеЗаполнено(КаталогДляРезервированияБазыДанных) Тогда
		
		Резервирование = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект();
		Если Резервирование.ВыполняемыеЗадачи.Количество() = 0 Тогда
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи.Добавить();
		Иначе
			СтрокаЗадачи = Резервирование.ВыполняемыеЗадачи[0];			
		КонецЕсли;
		СтрокаЗадачи.ТипЗадачи   = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанных;
		СтрокаЗадачи.Адрес 		 = КаталогДляРезервированияБазыДанных;
		Резервирование.Дата		 = КонецДня(ТекущаяДата()) + 3600 * 7;
		Резервирование.Актуально = ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте;
		Резервирование.ПовторятьКаждыеЧислоЧасов = 24;
		
		Резервирование.Записать();		
	КонецЕсли;
	
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ПоддерживатьИныеЯзыкиКромеРусского);
	
	Если НЕ ПустаяСтрока(ОтКого) Тогда		
		Константы.ЭлектроннаяПочтаОтправитель.Установить(ОтКого);
	КонецЕсли;
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") Тогда
		
		СтруктураПисьма = Новый Структура;
		СтруктураПисьма.Вставить("ОтКого", "FirstRun: " + ОтКого);
		СтруктураПисьма.Вставить("ТемаСообщения", "new");
		СтруктураПисьма.Вставить("ТекстСообщения", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Первоначальная настройка"));
		СтруктураПисьма.Вставить("РегистрационныйКод", ОбщийМодульПовтор.РегистрационныйКод());
		
		ОбщийМодульСервисСервер.ПисьмоАвтору(СтруктураПисьма);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                    // ПРИ ОТКРЫТИИ
	
	Если НЕ глКонфигурацияВРаботе  Тогда
		Элементы.ГруппаЗаработнойПлаты.Видимость = ЛОЖЬ;
		Элементы.ВестиУчетЗаказовКлиентов.Видимость = ЛОЖЬ;
		Элементы.ГруппаПЛ.Видимость  = ЛОЖЬ;
		Элементы.ГруппаПП2.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьКомплектацию.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ОбновитьВидимостьЭлементов();
	ОбновитьИнтерфейс();
	Русский = ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Видимость = Русский;
	Элементы.ОбнулитьНастройки.Видимость = НЕ ЗначениеЗаполнено(ВыберитеВашЯзык);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)     // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ДатаПервогоЗапуска = Константы.ДатаПервогоЗапуска.Получить();
	Если ДатаПервогоЗапуска = '00010101000000' Тогда
		Константы.ДатаПервогоЗапуска.Установить(ТекущаяДата());
	КонецЕсли;
	
	Константы.ИспользоватьЦеныИСуммы.Установить(ИСТИНА);
	Константы.ИспользоватьКоличественныйУчет.Установить(ИСТИНА);
	Константы.ФормироватьОписаниеТаблицОбъектовДляИхСписков.Установить(ИСТИНА);
	
// sza151206-0012 	
//	ТекРегКод = Константы.РегистрационныйНомер.Получить();
//	Если ПустаяСтрока(ТекРегКод) Тогда
		ТекРегКод = ОбщийМодульСервисСервер.РегистрационныйКод();
		Константы.РегистрационныйНомер.Установить(ТекРегКод);
//	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
		ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
	КонецЕсли;
	
	ВыберитеВашЯзык = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	
	ЗаконченаПервоначальнаяНастройка = Константы.ЗаконченаПервоначальнаяНастройка.Получить();
	Попытка	
		ЯзыкА = Справочники.Языки.English.ПолучитьОбъект();
		ЯзыкА.Комментарий 	= "English language EN";
		ЯзыкА.Наименование 	= "English - Английский (EN)";
		ЯзыкА.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Убедитесь, что установлена версия платформы 1С не ниже 8.2.19 !"));
	КонецПопытки;
	
	ЯзыкУ = Справочники.Языки.Украинский.ПолучитьОбъект();
	ЯзыкУ.Комментарий 	= "Українська мова UA";
	ЯзыкУ.Наименование 	= "Українська - Ukrainian (UK)";
	ЯзыкУ.Записать();
	
	ЯзыкР = Справочники.Языки.Русский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Русский язык RU";
	ЯзыкР.Наименование 	= "Русский - Russian (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Румынский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Român RO";
	ЯзыкР.Наименование 	= "Român - Румынский (RU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Белорусский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Беларускі BL";
	ЯзыкР.Наименование 	= "Беларускі - Белорусский (BL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Китайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "中国的 ZH";
	ЯзыкР.Наименование 	= "中国的 - Китайский (ZH)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Болгарский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Български BG";
	ЯзыкР.Наименование 	= "Български - Болгарский (BG)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Казахский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Қазақ KK";
	ЯзыкР.Наименование 	= "Қазақ - Казахский (KK)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Немецкий.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Deutsch DE";
	ЯзыкР.Наименование 	= "Deutsch - Немецкий (DE)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Польский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Polski PL";
	ЯзыкР.Наименование 	= "Polski - Польский (PL)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Тайский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "ภาษาไทย  TH";
	ЯзыкР.Наименование 	= "ภาษาไทย - Тайский (TH)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Азербайджанский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Azərbaycan AZ";
	ЯзыкР.Наименование 	= "Azərbaycan - Азербайджанский (AZ)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Арабский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "العربية AR";
	ЯзыкР.Наименование 	= "العربية - Арабский (AR)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Армянский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "հայերեն AM";
	ЯзыкР.Наименование 	= "հայերեն - Армянский (AM)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Чешский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "čeština CS";
	ЯзыкР.Наименование 	= "čeština - Чешский (CS)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Венгерский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "magyar HU";
	ЯзыкР.Наименование 	= "magyar - Венгерский (HU)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Вьетнамский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "tiếng Việt VI";
	ЯзыкР.Наименование 	= "tiếng Việt - Вьетнамский (VI)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Грузинский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "ქართული KA";
	ЯзыкР.Наименование 	= "ქართული - Грузинский (KA)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Итальянский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "italiano IT";
	ЯзыкР.Наименование 	= "italiano - Итальянский (IT)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Корейский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "한국의 KO";
	ЯзыкР.Наименование 	= "한국의 - Корейский (KO)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Латышский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Latvijas LT";
	ЯзыкР.Наименование 	= "Latvijas - Латышский (LT)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Литовский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Lietuvos LV";
	ЯзыкР.Наименование 	= "Lietuvos - Литовский (LV)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Таджикский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "ทาจิกิสถาน YG";
	ЯзыкР.Наименование 	= "ทาจิกิสถาน - Таджикский (YG)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Турецкий.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Türk TR";
	ЯзыкР.Наименование 	= "Türk - Турецкий (TR)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Узбекский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "O'zbekiston UZ";
	ЯзыкР.Наименование 	= "O'zbekiston - Узбекский (UZ)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Французский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "français FR";
	ЯзыкР.Наименование 	= "français - Французский (FR)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Иврит.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "עִבְרִית HE";
	ЯзыкР.Наименование 	= "עִבְרִית - Иврит (HE)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Хинди.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "हिंदी HI";
	ЯзыкР.Наименование 	= "हिंदी - Хинди (HI)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Эстонский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "eesti ET";
	ЯзыкР.Наименование 	= "eesti - Эстонский (ET)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Японский.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "日本人 JA";
	ЯзыкР.Наименование 	= "日本人 - Японский (JA)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Словацкий.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Slovenčina SK";
	ЯзыкР.Наименование 	= "Slovenčina - Словацкий (SK)";
	ЯзыкР.Записать();
	
	ЯзыкР = Справочники.Языки.Другой.ПолучитьОбъект();
	ЯзыкР.Комментарий 	= "Another ZZ";
	ЯзыкР.Наименование 	= "Another - Другой (ZZ)";
	ЯзыкР.Записать();
	
	ТекущийКодЛокализации = ВРег(ТекущийКодЛокализации());
	ПоддерживатьИныеЯзыкиКромеРусского = Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить();
	Константы.ПоддерживатьИныеЯзыкиКромеРусского.Установить(ИСТИНА);
	
	Если НЕ ЗаконченаПервоначальнаяНастройка Тогда
		
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").ПолучитьОбъект();
		
		Если НЕ Найти(ТекущийКодЛокализации, "EN") = 0 Тогда
			ВыберитеВашЯзык = ЯзыкА;
			Валюта.Наименование = "usd";
			Валюта.Код 			= "840";
			Валюта.МеждународныйКод = "USD";
			
		ИначеЕсли НЕ Найти(ТекущийКодЛокализации, "UK") = 0 Тогда
			ВыберитеВашЯзык = ЯзыкУ;
			Валюта.Наименование = "грн.";
			Валюта.Код 			= "980";
			Валюта.МеждународныйКод = "UAH";
			
		ИначеЕсли НЕ ВРег(Лев(Валюта.Наименование, 2)) = "ГР" Тогда // уже не в Украине
			ВыберитеВашЯзык = ЯзыкР;
			Валюта.Наименование = "руб.";
			Валюта.Код 			= "643";
			Валюта.МеждународныйКод = "RUB";
			
		Иначе
			ВашЯзыкРусскийНоВыРаботаетеНаУкраине = ИСТИНА;			
		КонецЕсли;
		
		Попытка
			Валюта.Записать();	
		Исключение
			ТекстОписанияОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка записи валюты") + ": " + ТекстОписанияОшибки);
		КонецПопытки;
		
		Константы.ИспользоватьСкидки.Установить(ИСТИНА);	
		Константы.ВестиУчетДвиженияДенег.Установить(ИСТИНА);
		Константы.ВестиУчетВаловойПрибыли.Установить(ИСТИНА);
		Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Установить(ИСТИНА);	
		Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(ИСТИНА);		
		Константы.ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске.Установить(ИСТИНА);
		
		Константы.ПользователейНесколько.Установить(ОбщийМодульПовтор.ПолнаяВерсия());
		Константы.ВестиУчетПоКлиентам.Установить(ИСТИНА);
		
		Константы.ВместоТумблеровПоказыватьГалочки.Установить(ПараметрыСеанса.ВерсияПриложения < 803040000) ;
		
	КонецЕсли;
	
	ИспользоватьСкидки = Константы.ИспользоватьСкидки.Получить();
	ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода = Константы.ВестиУчетДвиженияДенег.Получить() И Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Получить();
	
	ВыберитеВашЯзыкТут = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	Если ЗначениеЗаполнено(ВыберитеВашЯзыкТут) Тогда
		ВыберитеВашЯзык = ВыберитеВашЯзыкТут;
	КонецЕсли;	
	
	Курс1 = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	Курс1.Активность= ИСТИНА;
	Курс1.Валюта 	= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Ссылка;
	Курс1.Курс 		= 1;
	Курс1.Период 	= Дата(1980, 2, 25, 4, 30, 0);
	Курс1.Записать(ИСТИНА);
	
	НаименованиеВашейОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование;
	
	Услуга = ПредопределенноеЗначение("Справочник.Номенклатура.УслугиНаСумму").ПолучитьОбъект();
	Услуга.НеОтслеживатьОстаток = ИСТИНА;
	Услуга.Записать();
	
	Услуга = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму").ПолучитьОбъект();
	Услуга.НеОтслеживатьОстаток = ИСТИНА;
	Услуга.Записать();
	
	ИспользоватьВидДокументовВыполненияРабот = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот");
	ВестиУчетТовараПоНоменклатурнымГруппам 	 = ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС ;
	ВестиУчетДенег 							 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег");
	ВестиУчетДенегВРазныхВалютах 			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");	
	НаименованиеВашегоОсновногоСклада 		 = Справочники.Склады.ОсновнойСклад.Наименование ;
	ВестиУчетТовараПоНесколькимСкладам 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	ВестиУчетНесколькихВидовЦен 			 = ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
	ВестиУчетЗаказовКлиентов				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
	ВестиУчетЗаказовПоставщикам				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам");
	ИспользоватьКомплектацию				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию");
	ИспользоватьСторнированиеДокументов		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов");
	ИспользоватьВаучеры						 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
	РегионРегламентированногоУчета			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета");
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию")) Тогда
		Константы.ВидЦенПриходованияТовараПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен"));
	КонецЕсли;
	
	НаименованиеБазовогоВидаЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен").Наименование ;
	НесколькоПользователей		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПользователейНесколько");
	
	ВестиУчетВаловойПрибыли 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли");
	ИспользоватьШтрихКодыНоменклатуры 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	ВестиУчетВзаиморасчетовСКлиентами 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	ВестиУчетОказанияУслугЗаВремя			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
	НаименованиеДляЧастногоПокупателя 		= ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо").Наименование ;
	ВестиУчетВзаиморасчетовСПоставщиками 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	НаименованиеДляПрочегоПоставщика 		= ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо").Наименование ;
	ВестиУчетСобственныхЮридическихЛиц		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц");
	ВестиУчетДенегВРазныхХранилищах 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
	ВестиУчетОтдельныхДоговоровСКонтрагентами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами");
	ВестиУчетСобытий						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий");
	
	СкладВПути = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути").ПолучитьОбъект();
	СкладВПути.Виртуальный = ИСТИНА;
	СкладВПути.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ВнутреннееПеремещениеДенег").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Внутренняя");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДополнительныеРасходыПриПриобретенииТоваров").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОбменВалют").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Внутренняя");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.СменаФормыОплаты").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Внутренняя");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ЗаработнаяПлатаСотрудников").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОплатаКомиссионногоВознаграждения").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ПрочееВыбытиеДенег").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ПрочееПоступлениеДенег").ПолучитьОбъект();
	СтатьяДвиженияДенег.ВидСтатьи = ПредопределенноеЗначение("Перечисление.ВидыСтатейДвиженияДенег.Операционная");
	СтатьяДвиженияДенег.Записать();
	
	Если СокрЛП(Константы.ТекстЗаголовкаСчета.Получить()) = "" Тогда
		Константы.ТекстЗаголовкаСчета.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию.Получить()) Тогда
		Константы.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт."));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара) Тогда
		Константы.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара.Установить(ТекущаяДата());
		Константы.ПоведениеПрограммыПриРасходеТоваровБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	НашеЮрЛицо = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	Если НЕ ЗначениеЗаполнено(НашеЮрЛицо.ВидЦен) Тогда
		НашеЮрЛицоОбъект = НашеЮрЛицо.ПолучитьОбъект();
		НашеЮрЛицоОбъект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		НашеЮрЛицоОбъект.Записать();                                 	
	КонецЕсли;     	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка")) Тогда
		Константы.ПоведениеПрограммыПриРасходеДенегБезОстатка.Установить(Перечисления.ИгнорироватьРазрешитьЗапретить.РазрешитьНоПредупредить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяПоступленияДенегПоУмолчанию")) 
		И НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтатьяРасходаДенегПоУмолчанию")) Тогда
		
		Константы.СтатьяПоступленияДенегПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации"));
		Константы.СтатьяРасходаДенегПоУмолчанию.Установить(ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров"));
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Безналичные);
	КонецЕсли;	
	
	ВестиУчетЗарплатыСотрудников = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");
	
	Если ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию")) Тогда
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормаОплатыПоУмолчанию"));		
	Иначе
		Константы.ФормаОплатыПоУмолчанию.Установить(Перечисления.ФормыОплаты.Наличные);
		Константы.ФормаОплатыДляДенегВДокументахРасходаИПриходаТоваров.Установить(Перечисления.ФормыОплаты.Наличные);		
	КонецЕсли;                  	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах") = 0 Тогда
		Константы.СрокЗапретаДанныхВЧасах.Установить(24);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных")) Тогда
		Константы.ДатаЗапретаИзмененияДанных.Установить(ТекущаяДата());
	КонецЕсли;
	
	Если ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию = 0 Тогда
		Константы.ПроцентРасчетаЛьготнойЦеныПоУмолчанию.Установить(100);
	КонецЕсли;
	
	ОсновнаяКассаВОсновнойВалюте = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте").ПолучитьОбъект();
	ОсновнаяКассаВОсновнойВалюте.Валюта 	 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	ОсновнаяКассаВОсновнойВалюте.ФормаОплаты = перечисления.ФормыОплаты.Наличные;
	ОсновнаяКассаВОсновнойВалюте.Записать();
	
	ОсновноеХранилищеДенег = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеХранилищеДенег");
	Если НЕ ЗначениеЗаполнено(ОсновноеХранилищеДенег) Тогда
		Константы.ОсновноеХранилищеДенег.Установить(ОсновнаяКассаВОсновнойВалюте.Ссылка);
	КонецЕсли;
	
	НаименованиеПредприятия = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати");
	Если НаименованиеПредприятия = "" Тогда
		НаименованиеПредприятия = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие").НаименованиеДляПечати;
	КонецЕсли;
	
	ЭлектроннаяПочтаАдресСервераPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3");
	Если ЭлектроннаяПочтаАдресСервераPOP3 = "" Тогда
		
		Константы.ЭлектроннаяПочтаАдресСервераPOP3.Установить("pop.gmail.com");
		Константы.ЭлектроннаяПочтаАдресСервераSMTP.Установить("smtp.gmail.com");
		Константы.ЭлектроннаяПочтаОтправитель.Установить(" @gmail.com");
		Константы.ЭлектроннаяПочтаПользовательSMTP.Установить(" @gmail.com");
		Константы.ЭлектроннаяПочтаПортPOP3.Установить(995);
		Константы.ЭлектроннаяПочтаПортSMTP.Установить(465);
		
	КонецЕсли;
	
	ОрганизацияПоУмолчанию = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОрганизацияПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Константы.ОрганизацияПоУмолчанию.Установить(НашеЮрЛицоОбъект);
	КонецЕсли;
	
	Константы.ВключитьПерсонифицированныйУчетВаловойПрибыли.Установить(ИСТИНА);
	Константы.ЕстьПринтер.Установить(ИСТИНА);
	Константы.ОбводитьРамкамиТекстовыеПоляВФормах.Установить(ИСТИНА);
	Константы.ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии.Установить(ИСТИНА);
	
	Если Константы.ЧислоДнейДействительностиСчетаФактурыДляОплаты.Получить() = 0 Тогда
		Константы.ЧислоДнейДействительностиСчетаФактурыДляОплаты.Установить(3);
	КонецЕсли;
	
	Резервирование = ПредопределенноеЗначение("Справочник.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных").ПолучитьОбъект();
	Резервирование.ТипЗаметки  = Перечисления.ТипыЗаметок.Задача;
	Резервирование.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("автоматически");
	Резервирование.Дата 	   = ТекущаяДата();
	Резервирование.ПовторятьКаждыеЧислоЧасов = 24;
	Если НЕ Резервирование.ВыполняемыеЗадачи.Количество() = 0 Тогда
		КаталогДляРезервированияБазыДанных = Резервирование.ВыполняемыеЗадачи[0].Адрес;
	КонецЕсли;	
	Резервирование.Записать();
	
	Если ПустаяСтрока(КаталогДляРезервированияБазыДанных) Тогда
		КаталогДляРезервированияБазыДанных = "C:\BackUP_ET";
	КонецЕсли;
	
	ОтКого = Константы.ЭлектроннаяПочтаОтправитель.Получить();
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ФайловаяБД = НЕ Найти(ВРег(СтрокаСоединенияСБД), "FILE=") = 0;
	Элементы.ГруппаРезервирования.Видимость = ФайловаяБД;
	ПроизводитьЕжедневноеРезервированиеДанныхНаСтарте = ФайловаяБД;	
	
	ДополнительныйРеквизитСправочникаКлиентов = Неопределено;
	Для Счетчик = 1 по 10 Цикл 
		Выполнить(" ДополнительныйРеквизитСправочникаКлиентов = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
		ДополнительныйРеквизитСправочникаКлиентов.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный реквизит справочника Клиентов") + " №" + СокрЛП(Счетчик);
		ДополнительныйРеквизитСправочникаКлиентов.НаименованиеОбъектаВладельца = ДополнительныйРеквизитСправочникаКлиентов.Комментарий;
		ДополнительныйРеквизитСправочникаКлиентов.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляКарточкиСправочникаКлиенты;
		ДополнительныйРеквизитСправочникаКлиентов.Записать();	
	КонецЦикла;
	
	Если Константы.ЧислоСтраницАссортиментаВАРМКассира.Получить() = 0 Тогда
		Константы.ЧислоСтраницАссортиментаВАРМКассира.Установить(5);
		Константы.ЧислоКолонокАссортиментаВАРМКассира.Установить(2);
		Константы.ЧислоСтрокАссортиментаВАРМКассира.Установить(10);	
	КонецЕсли;
	
	Константы.ИспользоватьЦеныИСуммы.Установить(ИСТИНА);
	
	Если НЕ Константы.КонфигурацияВРаботе.Получить() Тогда
		
		Константы.ИспользоватьЕдиницыИзмеренияНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетЗарплатыСотрудников.Установить(ЛОЖЬ);
		Константы.ВестиУчетПлановыхПоказателейПродаж.Установить(ЛОЖЬ);
		Константы.ВестиУчетСерийНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетСертификатовНоменклатуры.Установить(ЛОЖЬ);
		Константы.ВестиУчетСобственныхЮридическихЛиц.Установить(ЛОЖЬ);
		Константы.ВестиУчетСредствПредприятия.Установить(ЛОЖЬ);
		Константы.ИспользоватьКомплектацию.Установить(ЛОЖЬ);
		Константы.ИспользоватьПодключаемоеОборудование.Установить(ЛОЖЬ);
		Константы.КоличествоНоменклатурыМожетБытьДробным.Установить(ЛОЖЬ);
		Константы.ПечататьРегламентированныйДокументРасходнойНакладной.Установить(ЛОЖЬ);
		Константы.РеализаторНеМожетМенятьЦены.Установить(ЛОЖЬ);
		Константы.СопровождатьДокументыИзображениями.Установить(ЛОЖЬ);
		Константы.СопровождатьНоменклатуруИзображениями.Установить(ЛОЖЬ);
		Константы.ИспользоватьСистемуУправленияДоступом.Установить(ЛОЖЬ);
		Константы.ИспользоватьМеханизмыПечатиФормыТОРГ12.Установить(ЛОЖЬ);
		Константы.ИспользоватьМеханизмыПечатиНалоговойНакладнойДляУкраины.Установить(ЛОЖЬ);
		Константы.ВыводитьВРасходномДокументеЕдиницуИзмеренияОтдельнойКолонкой.Установить(ЛОЖЬ);
		
	КонецЕсли;		
	
	ОбщийМодульСерверПривилегия.СоздатьПредопределенныеПрограммистомЭлементы("ВидыСобытий");
	
	Если ПараметрыСеанса.ВерсияПриложения < 803050000 
		ИЛИ Константы.ВместоТумблеровПоказыватьГалочки.Получить() Тогда
		
		Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
			Выполнить(" Элементы.ВестиУчетТовараПоНесколькимСкладам.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ИспользоватьСкидки.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетНесколькихВидовЦен.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетТовараПоНоменклатурнымГруппам.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетВаловойПрибыли.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ИспользоватьКомплектацию.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ИспользоватьШтрихКодыНоменклатуры.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетДенег.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетДенегВРазныхВалютах.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетДенегВРазныхХранилищах.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетЗарплатыСотрудников.ВидФлажка = ВидФлажка.Флажок;				
			|Элементы.ВестиУчетВзаиморасчетовСКлиентами.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ИспользоватьВидДокументовВыполненияРабот.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.УчетОказанияУслугЗаВремя.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ИспользоватьВаучеры.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетВзаиморасчетовСПоставщиками.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетОтдельныхДоговоровСКонтрагентами.ВидФлажка = ВидФлажка.Флажок;
			|Элементы.ВестиУчетСобственныхЮридическихЛиц1.ВидФлажка = ВидФлажка.Флажок;				
			|Элементы.НесколькоПользователей.ВидФлажка = ВидФлажка.Флажок; ");	
		КонецЕсли;
		
		Элементы.ВестиУчетТовараПоНесколькимСкладам.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести учет товара по нескольким складам");
		Элементы.ВестиУчетТовараПоНесколькимСкладам.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;				
		
		Элементы.ИспользоватьСкидки.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Использовать скидки");
		Элементы.ИспользоватьСкидки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Элементы.ВестиУчетНесколькихВидовЦен.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести учет по различным видам цен");
		Элементы.ВестиУчетНесколькихВидовЦен.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Элементы.ВестиУчетТовараПоНоменклатурнымГруппам.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести учет по номенклатурным группам");
		Элементы.ВестиУчетТовараПоНоменклатурнымГруппам.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элементы.ВестиУчетДенег.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести учет денег");
		Элементы.ВестиУчетДенег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;				
		Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Язык русский, но работа в Украине и валюта гривна");
		Элементы.ВашЯзыкРусскийНоВыРаботаетеНаУкраине.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		
	КонецЕсли;
	
	Элементы.Например.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Например") + ": C:\BackUP\ - " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("каталог в котором каждый день будет создаваться копия базы данных.");
	
	Если ПустаяСтрока(Константы.ВерсияПрограммы.Получить()) Тогда
		Константы.ВерсияПрограммы.Установить(Лев(ВРег(СокрЛП(Метаданные.Версия)), 6));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСуществованиеКаталога(Знач Оповещение, Знач ИмяКаталога, Знач СоздаватьЕслиНеНайден = ЛОЖЬ) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		ВыполнитьОбработкуОповещения(Оповещение, ИСТИНА);
		Возврат;
		
	ИначеЕсли СоздаватьЕслиНеНайден Тогда
		СоздатьКаталог(ИмяКаталога);
		ВыполнитьОбработкуОповещения(Оповещение, ИСТИНА);
		Возврат;
		
	Иначе		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьСуществованиеКаталогаЗавершение", ЭтаФорма, Новый Структура("ИмяКаталога, Оповещение", ИмяКаталога, Оповещение)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог не существует. Создать?"), 
		РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСуществованиеКаталогаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяКаталога = ДополнительныеПараметры.ИмяКаталога;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СоздатьКаталог(ИмяКаталога);
		ВыполнитьОбработкуОповещения(Оповещение, ИСТИНА);
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Русский(Команда)
	ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Русский");
	ВыбралиЯзык();
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОСменеФункциональнойОпции(ЭлементИмя)
	
	ОбщийМодульКлиент.ДобавитьСобытиеЖурнала(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сменил") + " " + ЭлементИмя, 2);
	ОбновитьИнтерфейс();
	
КонецПроцедуры // СообщитьОСменеФункциональнойОпции

&НаКлиенте
Процедура Украинец(Команда)
	ВыберитеВашЯзык = ПредопределенноеЗначение("Справочник.Языки.Украинский");
	ВыбралиЯзык();
КонецПроцедуры

&НаКлиенте
Процедура УчетОказанияУслугЗаВремяПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты();
	СообщитьОСменеФункциональнойОпции(Элемент.Имя);
	ОбновитьВидимостьЭлементов();
	
КонецПроцедуры
