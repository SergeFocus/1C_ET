// sza151211-0113 
// sza151002-0253 pdf
// sza150713-1804 
// sza150711-0140 общая
Процедура ЗаданиеПараметровИКомпоновкаОтчета()
	
	Если ВремяПоследнегоФормирования = ТекущаяДата() Тогда
		Возврат; // Только что формировали
	КонецЕсли;
	
	Если ЕстьПериод Тогда
		Если НЕ ИмяОтчета = "Прайс"
			И НЕ ИмяОтчета = "ПрайсВПредставленииКонтрагентов" Тогда
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", ПериодДляОтчета.ДатаНачала);	
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ПериодДляОтчета.ДатаОкончания);	
	КонецЕсли;
	
	Если ИмяОтчета = "БалансДвиженияДенег"
		ИЛИ ИмяОтчета = "ДеньгиОстаткиИОбороты"
		ИЛИ ИмяОтчета = "ДеньгиОстаткиИОборотыВВалюте" Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоФормеОплаты", ЗначениеЗаполнено(ОтборПоФормеОплаты));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФормаОплаты", ОтборПоФормеОплаты);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоХранилищуДенег", ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);	
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКлиентами" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСПоставщиками" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("отборпопоставщику", ЗначениеЗаполнено(отборпопоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Поставщик", отборпопоставщику);
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКонтрагентами" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКонтрагенту", ЗначениеЗаполнено(ОтборПоКонтрагенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контрагент", ОтборПоКонтрагенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипПоставщик", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипКлиент", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент"));	
		
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюДенег"
		ИЛИ ИмяОтчета = "ВедомостьПоДвижениюДенегВВалюте " Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоФормеОплаты", ЗначениеЗаполнено(ОтборПоФормеОплаты));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФормаОплаты", ОтборПоФормеОплаты);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСтатье", ЗначениеЗаполнено(ОтборПоСтатье));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Статья", ОтборПоСтатье);			
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюТоваров" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));		
	ИначеЕсли ИмяОтчета = "ЖурналСобытий" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоОтветственному", ЗначениеЗаполнено(ОтборПоОтветственному));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ответственный", ОтборПоОтветственному);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ЕстьОтборПоСодержаниюСобытия", ЗначениеЗаполнено(ОтборПоСодержаниюСобытия));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСодержаниюСобытия", ОтборПоСодержаниюСобытия);
	ИначеЕсли ИмяОтчета = "ИзмененияОбъектаКонфигурации" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоОбъектБазыДанных", ЗначениеЗаполнено(ОбъектБазыДанных));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектБазыДанных", ОбъектБазыДанных);
	ИначеЕсли ИмяОтчета = "ИсторияЦенНоменклатуры" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);
		
	ИначеЕсли ИмяОтчета = "ОстаткиВВидахЦен"
		ИЛИ ИмяОтчета = "ОстаткиВВидахЦенСНулевыми" Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);		
	ИначеЕсли ИмяОтчета = "ОстаткиИОбороты" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		
	ИначеЕсли ИмяОтчета = "ОтчетПоВаловойПрибыли"
		ИЛИ ИмяОтчета = "ОтчетПоВаловойПрибылиОтносительноПродаж" Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);		
	ИначеЕсли ИмяОтчета = "ОтчетПоЗакупкам" Тогда	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоПоставщику", ЗначениеЗаполнено(ОтборПоПоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Поставщик", ОтборПоПоставщику);
	ИначеЕсли ИмяОтчета = "ОтчетПоНаборам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
	ИначеЕсли ИмяОтчета = "ОтчетПоПредставлениюКонтрагентов" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКонтрагенту", ЗначениеЗаполнено(ОтборПоКонтрагенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлиентПоставщик", ОтборПоКонтрагенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);		
	ИначеЕсли ИмяОтчета = "ОтчетПоПродажам" Тогда		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
	ИначеЕсли ИмяОтчета = "ОтчетПоЦенам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);
		
	ИначеЕсли ИмяОтчета = "Прайс"
		ИЛИ ИмяОтчета = "ПрайсВПредставленииКонтрагентов"Тогда
		
		Если ВедетсяУчетПоВидамЦен Тогда
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);		
		Иначе
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЛОЖЬ);
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЦЕНА"));		
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатурнойГруппе", ЗначениеЗаполнено(ОтборПоНоменклатурнойГруппе));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОтборПоНоменклатурнойГруппе);		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтборПоСкладу);		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НетОтбораПоНаличию", НЕ ТолькоВНаличии);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ЗначениеЗаполнено(ОтборПоСкладу)); // НЕ ТолькоВНаличии ИЛИ НЕ ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		
		Если ИмяОтчета = "ПрайсВПредставленииКонтрагентов" Тогда
			Если НЕ ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент не указан!"));
				Возврат;
			КонецЕсли;
			
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлиентПоставщик", ОтборПоКонтрагенту);		
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Язык", Язык);
			Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПолеАртикул", ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"));		
		КонецЕсли;
	ИначеЕсли ИмяОтчета = "ПриобретениеИРеализацияКонтрагентам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКонтрагенту", ЗначениеЗаполнено(ОтборПоКонтрагенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контрагент", ОтборПоКонтрагенту);	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
	ИначеЕсли ИмяОтчета = "РасчетыСКлиентами" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);	
	ИначеЕсли ИмяОтчета = "РасчетыСПоставщиками" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоПоставщику", ЗначениеЗаполнено(ОтборПоПоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Поставщик", ОтборПоПоставщику);
	ИначеЕсли ИмяОтчета = "ТоварыОстаткиИОбороты" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатурнойГруппе", ЗначениеЗаполнено(ОтборПоНоменклатурнойГруппе));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОтборПоНоменклатурнойГруппе);
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКлиентамиСОтсрочкой" Тогда // ПЛАТНЫЕ
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСПоставщикамиСОтсрочкой" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("отборпопоставщику", ЗначениеЗаполнено(отборпопоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Поставщик", отборпопоставщику);
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКонтрагентамиСОтсрочкой" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКонтрагенту", ЗначениеЗаполнено(ОтборПоКонтрагенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контрагент", ОтборПоКонтрагенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипПоставщик", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипКлиент", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент"));	
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюТоваровУКомиссионеров" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКомиссионеру", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Комиссионер", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаНачало", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на начало"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОстатокНаКонец", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток на конец"));
	ИначеЕсли ИмяОтчета = "ДиаграммаПродаж" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		
	ИначеЕсли ИмяОтчета = "ЗарплатаНачисленияИВыплаты"
		ИЛИ ИмяОтчета = "ЗарплатаОстаткиИОбороты" Тогда
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСотруднику", ЗначениеЗаполнено(ОтборПоСотруднику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник", ОтборПоСотруднику);
	ИначеЕсли ИмяОтчета = "ИсторияВаучера" Тогда
		Если НЕ ЗначениеЗаполнено(Ваучер) Тогда
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Ваучер!"));
			Возврат;
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ваучер", Ваучер);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", Ваучер.Номенклатура);
	ИначеЕсли ИмяОтчета = "КассоваяКнига" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоФормеОплаты", ЗначениеЗаполнено(ОтборПоФормеОплаты));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФормаОплаты", ОтборПоФормеОплаты);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСтатье", ЗначениеЗаполнено(ОтборПоСтатье));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Статья", ОтборПоСтатье);	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоХранилищуДенег", ЗначениеЗаполнено(ОтборПоХранилищуДенег));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ХранилищеДенег", ОтборПоХранилищуДенег);
	ИначеЕсли ИмяОтчета = "ОказаниеУслугПоПозициямНомерам" Тогда	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Клиент", ОтборПоКлиенту);		
	ИначеЕсли ИмяОтчета = "ОстаткиСУчетомЗаказовПоставщикам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);
	ИначеЕсли ИмяОтчета = "ОтчетПоВыполненнымСотрудникамиРаботам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСотруднику", ЗначениеЗаполнено(ОтборПоСотруднику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник", ОтборПоСотруднику);
	ИначеЕсли ИмяОтчета = "ОтчетПоЗадействованнымСредствамПредприятия" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСредству", ЗначениеЗаполнено(ОтборПоСредству));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Средство", ОтборПоСредству);
	ИначеЕсли ИмяОтчета = "ОтчетПоКомплектации" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
	ИначеЕсли ИмяОтчета = "ОтчетПоПозиции" Тогда
		Если НЕ ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана номенклатура!"));
			Возврат;		
		КонецЕсли;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);	
	ИначеЕсли ИмяОтчета = "ПоЗаказамКлиентов" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НеОтборПоКлиенту", НЕ ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиенту", ОтборПоКлиенту);
	ИначеЕсли ИмяОтчета = "ПоЗаказамПоставщикам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НеОтборПоПоставщику", НЕ ЗначениеЗаполнено(ОтборПоПоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоПоставщику", ОтборПоПоставщику);
	ИначеЕсли ИмяОтчета = "ПоПродажамСотрудников" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСотруднику", ЗначениеЗаполнено(ОтборПоСотруднику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник", ОтборПоСотруднику);
	ИначеЕсли ИмяОтчета = "ТоварыУКомиссионеровОстаткиИОбороты" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоКлиентуКомиссионеру", ЗначениеЗаполнено(ОтборПоКлиенту));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Комиссионер", ОтборПоКлиенту);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатурнойГруппе", ЗначениеЗаполнено(ОтборПоНоменклатурнойГруппе));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОтборПоНоменклатурнойГруппе);	
	ИначеЕсли ИмяОтчета = "ОтчетПоЦенамПоставщиков" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоНоменклатуре", ЗначениеЗаполнено(ОтборПоНоменклатуре));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура", ОтборПоНоменклатуре);	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуЦен", ЗначениеЗаполнено(ОтборПоВидуЦен));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидЦен", ОтборПоВидуЦен);
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НеОтборПоПоставщику", НЕ ЗначениеЗаполнено(ОтборПоПоставщику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоПоставщику", ОтборПоПоставщику);		
	ИначеЕсли ИмяОтчета = "ОтчетПоСобытиям" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоВидуСобытия", ЗначениеЗаполнено(ОтборПоВидуСобытия));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидСобытия", ОтборПоВидуСобытия);
	ИначеЕсли ИмяОтчета = "ОтчетПоВнутреннимЗаказам" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСкладу", ЗначениеЗаполнено(ОтборПоСкладу));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);		
	ИначеЕсли ИмяОтчета = "ПоЗакреплениюСотрудников" Тогда
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПоСотруднику", ЗначениеЗаполнено(ОтборПоСотруднику));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сотрудник", ОтборПоСотруднику);
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстКлиенты", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиенты"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстОбъектыКлиентов", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объекты клиентов"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстПоставщики", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщики"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстСклады", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склады"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстХранилищаДенег", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилища денег"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстСотрудники", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сотрудники"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстНаправленияДеятельности", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Направления деятельности"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстПозицииДляОказанияУслугЗаВремя", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиции оказания услуг за время"));
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекстСредстваПредприятия", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Средства предприятия"));
	КонецЕсли;
	
	Если ЕстьКоличество Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным") Тогда
			ФорматКоличества = "ЧЦ=12; ЧДЦ=" + СокрЛП(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"));
		Иначе
			ФорматКоличества = "ЧЦ=12";
		КонецЕсли;
		
		Попытка
			НастрокаФорматаКоличества = Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0].Оформление.Элементы[12];
			НастрокаФорматаКоличества.Значение = ФорматКоличества;
			НастрокаФорматаКоличества.Использование = ИСТИНА;
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	ВремяПоследнегоФормирования = ТекущаяДата();
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных") Тогда
		Попытка 
			#Если Клиент Тогда
				Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формируется Отчет.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."), БиблиотекаКартинок.АнимацияОжиданиеСиниеСтрелки);
			#КонецЕсли
			ЭтаФорма.СкомпоноватьРезультат();
			Выполнить(" Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
			ПроверитьНеобходимостьДобавитьДату();
			
		Исключение 	
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();		
		КонецПопытки;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()          // ПРИ ЗАКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ПодключатьСканер Тогда
		
		// ПодключаемоеОборудование	
		Если ОбщийМодульКлиент.ИспользоватьПодключаемоеОборудование() Тогда 
			ПоддерживаемыеТипыВО = Новый Массив ();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		КонецЕсли;
		// Конец ПодключаемоеОборудование
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)     // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	УстановитьПереданныеПараметры();
	ПроисходитОткрытие = ЛОЖЬ;
	
	Если ЕстьПериод Тогда
		Если НЕ ЗначениеЗаполнено(ПериодДляОтчета) Тогда
			
			Если ИмяОтчета = "БалансДвиженияДенег"
				ИЛИ ИмяОтчета = "ДеньгиОстаткиИОборотыВВалюте"
				ИЛИ ИмяОтчета = "ВедомостьПоДвижениюДенег"
				ИЛИ ИмяОтчета = "ВедомостьПоДвижениюДенегВВалюте"
				ИЛИ ИмяОтчета = "ВедомостьПоДвижениюТоваров"
				ИЛИ ИмяОтчета = "ОстаткиВВидахЦен"
				ИЛИ ИмяОтчета = "ОстаткиВВидахЦенСНулевыми"
				ИЛИ ИмяОтчета = "КассоваяКнига" Тогда
				
				ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.Вчера;
				
			ИначеЕсли ИмяОтчета = "ИзмененияОбъектаКонфигурации"
				ИЛИ ИмяОтчета = "ИсторияЦенНоменклатуры"
				ИЛИ ИмяОтчета = "ОтчетПоНаборам"
				ИЛИ ИмяОтчета = "ИсторияВаучера"
				ИЛИ ИмяОтчета = "ОтчетПоПозиции" Тогда
				
				ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.ЭтотГод;
				
			ИначеЕсли ИмяОтчета = "Прайс"
				ИЛИ ИмяОтчета = "ПрайсВПредставленииКонтрагентов" Тогда
				
				ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.Сегодня;
			Иначе
				ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
			КонецЕсли;
			
			ДатаНачала 	  = ПериодДляОтчета.ДатаНачала;
			ДатаОкончания = ПериодДляОтчета.ДатаОкончания;		
		КонецЕсли;	
	КонецЕсли;
	
	Если ВестиУчетДенегВНесколькихХранилищах Тогда
		ОтборПоФормеОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 5 Тогда
		Элементы.ФормаГруппаНеДляВебКлиента.Видимость = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ ИмяОтчета = "ВедомостьПоДвижениюТоваров" Тогда
		ЗаданиеПараметровИКомпоновкаОтчета();	
	КонецЕсли;
	
	Если ЕстьПериод Тогда
		ПериодДляОтчета.ДатаНачала 	  = ДатаНачала;
		ПериодДляОтчета.ДатаОкончания = ДатаОкончания;	
	КонецЕсли;
	
	Если ПодключатьСканер Тогда
		// ПодключаемоеОборудование
		Если ОбщийМодульКлиент.ИспользоватьПодключаемоеОборудование() И 
			МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ОписаниеОшибки = "" ;
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
			Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки ;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		// Конец ПодключаемоеОборудование		
	КонецЕсли;
	
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаСервере
Процедура УстановитьПереданныеПараметры()
	
	Если ЗначениеЗаполнено(УстановленОтветственный) Тогда
		ОтборПоОтветственному = УстановленОтветственный;
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленВаучер) Тогда
		Ваучер = УстановленВаучер;	
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленОбъектБазыДанных) Тогда
		ОбъектБазыДанных = УстановленОбъектБазыДанных;	
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленОтборПоВидуЦен) Тогда
		ОтборПоВидуЦен = УстановленОтборПоВидуЦен;
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленОтборПоНоменклатуре) Тогда
		ОтборПоНоменклатуре = УстановленОтборПоНоменклатуре;	
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленОтборПоКлиенту) Тогда
		ОтборПоКлиенту = УстановленОтборПоКлиенту;	
	КонецЕсли;
	Если ЗначениеЗаполнено(УстановленОтборПоСотруднику) Тогда
		ОтборПоСотруднику = УстановленОтборПоСотруднику;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КодДоступа  = "";
	ЭтотОтчет   = РеквизитФормыВЗначение("Отчет");
	ИмяОтчета   = ЭтотОтчет.Метаданные().Имя;
	ЭтотОтчет   = Неопределено;
	ЕстьПериод  = ИСТИНА;
	КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("отчет");
	ПодключатьСканер = ЛОЖЬ;
	ИспользоватьШтрихКодыДляИдентификацииКонтрагентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов");
	ПроисходитОткрытие = ИСТИНА;
	
	Если ИмяОтчета = "БалансДвиженияДенег" Тогда
		КодДоступа 	= "000895";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Баланс");
		Элементы.ОтборПоФормеОплаты.Видимость = ИСТИНА;
		Элементы.ОтборПоХранилищуДенег.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКлиентами" Тогда
		КодДоступа 	= "000605";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСПоставщиками" Тогда
		КодДоступа 	= "000656";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКонтрагентами" Тогда
		Отказ 		= ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000605", ЭтаФорма, Отказ, );	 // дополнительно
		КодДоступа 	= "000656";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоКонтрагенту.Видимость = ИСТИНА;
		
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюДенег"
		ИЛИ ИмяОтчета = "ВедомостьПоДвижениюДенегВВалюте" Тогда
		
		КодДоступа 	= "000895";
		Элементы.ОтборПоФормеОплаты.Видимость = ИСТИНА;
		Элементы.ОтборПоСтатье.Видимость = ИСТИНА;
		
	ИначеЕсли ИмяОтчета = "ДеньгиОстаткиИОбороты"
		ИЛИ ИмяОтчета = "ДеньгиОстаткиИОборотыВВалюте" Тогда
		
		КодДоступа 	= "000895";
		Элементы.ОтборПоФормеОплаты.Видимость = ИСТИНА;
		Элементы.ОтборПоХранилищуДенег.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюТоваров" Тогда
		КодДоступа 	= "000305";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		ПодключатьСканер = ИСТИНА;
		ЕстьКоличество 	 = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ЖурналСобытий" Тогда
		КодДоступа 	= "000100";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("журнал");
		Элементы.ОтборПоОтветственному.Видимость = ИСТИНА;
		Элементы.ОтборПоСодержаниюСобытия.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ИзмененияОбъектаКонфигурации" Тогда
		КодДоступа 	= "003010";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("журнал");
		Элементы.ОбъектБазыДанных.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ИсторияЦенНоменклатуры" Тогда
		КодДоступа 	= "000305";
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("журнал");
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
		
	ИначеЕсли ИмяОтчета = "ОстаткиВВидахЦен"
		ИЛИ ИмяОтчета = "ОстаткиВВидахЦенСНулевыми" Тогда
		
		КодДоступа 	= "000305";
		ЕстьКоличество   = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОстаткиИОбороты" Тогда		
		КодДоступа 	= "000305";
		ЕстьКоличество   = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетОЧистойПрибыли" Тогда
		КодДоступа 	= "002600";
	ИначеЕсли ИмяОтчета = "ОтчетПоВаловойПрибыли"
		ИЛИ ИмяОтчета = "ОтчетПоВаловойПрибылиОтносительноПродаж" Тогда
		
		КодДоступа 	= "002600";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоВыполнениюРабот" Тогда
		КодДоступа 	= "000690";
	ИначеЕсли ИмяОтчета = "ОтчетПоЗакупкам" Тогда
		КодДоступа 	= "000656";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоНаборам" Тогда
		КодДоступа 	= "000305";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоПредставлениюКонтрагентов" Тогда
		ЕстьПериод  = ЛОЖЬ;
		КодДоступа 	= "00065B";
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоКонтрагенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоПродажам" Тогда
		КодДоступа 	= "000605";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоСторнированнымДокументам" Тогда
		КодДоступа 	= "002470";
	ИначеЕсли ИмяОтчета = "ОтчетПоТаблицамДанных" Тогда
		ЕстьПериод  = ЛОЖЬ;
	ИначеЕсли ИмяОтчета = "ОтчетПоЦенам" Тогда
		КодДоступа 	= "000200";
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПереченьКлиентов" Тогда
		КодДоступа 	= "000500";
		ЕстьПериод  = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("перечень");
	ИначеЕсли ИмяОтчета = "ПереченьНоменклатуры" Тогда
		КодДоступа 	= "000200";
		ЕстьПериод  = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("перечень");
	ИначеЕсли ИмяОтчета = "ПереченьПоставщиков" Тогда
		КодДоступа 	= "000650";
		ЕстьПериод  = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("перечень");
	ИначеЕсли ИмяОтчета = "Прайс" Тогда
		КодДоступа 	= "000200";
		Элементы.ПериодДляОтчета.Видимость = ЛОЖЬ;
		Элементы.ДатаНачала.Видимость = ЛОЖЬ;
		Элементы.ДатаОкончания.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата прайса");
		Элементы.Год.Видимость = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("прайс");
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатурнойГруппе.Видимость = ИСТИНА;
		Элементы.ОтборПоСкладуНаличияТоваров.Видимость = ИСТИНА;
		Элементы.ТолькоВНаличии.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПрайсВПредставленииКонтрагентов" Тогда		
		КодДоступа 	= "000200";
		Элементы.ПериодДляОтчета.Видимость = ЛОЖЬ;
		Элементы.ДатаНачала.Видимость = ЛОЖЬ;
		Элементы.ДатаОкончания.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата прайса");
		Элементы.Год.Видимость = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("прайс");
		Элементы.ПрайсВПредставленииКонтрагентов.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПриобретениеИРеализацияКонтрагентам" Тогда
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000605", ЭтаФорма, Отказ, );	
		КодДоступа 	= "000656";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоКонтрагенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "РасчетыСКлиентами" Тогда
		КодДоступа 	= "000605";
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "РасчетыСПоставщиками" Тогда
		КодДоступа 	= "000656";		
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ТоварыОстаткиИОбороты" Тогда
		КодДоступа 	= "000305";
		ЕстьКоличество	 = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатурнойГруппе.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКлиентамиСОтсрочкой" Тогда // ПЛАТНЫЕ
		КодДоступа 	= "000605";
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСПоставщикамиСОтсрочкой" Тогда
		КодДоступа 	= "000656";
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоВзаиморасчетамСКонтрагентамиСОтсрочкой" Тогда
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000605", ЭтаФорма, Отказ, );	
		КодДоступа 	= "000656";
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		Элементы.ОтборПоКонтрагенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ВедомостьПоДвижениюТоваровУКомиссионеров" Тогда
		КодДоступа 	= "000380";
		ПодключатьСканер = ИСТИНА;
		ЕстьКоличество = ИСТИНА;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ведомость");
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ДиаграммаПродаж" Тогда
		КодДоступа 	= "000380";
		ПодключатьСканер = ИСТИНА;
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		
	ИначеЕсли ИмяОтчета = "ЗарплатаНачисленияИВыплаты" 
		ИЛИ ИмяОтчета = "ЗарплатаОстаткиИОбороты" Тогда
		
		КодДоступа = "001450";
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоСотруднику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ИсторияВаучера" Тогда
		КодДоступа = "002600";
		ПодключатьСканер = ИСТИНА;
		Элементы.Ваучер.Видимость = ИСТИНА;
		Элементы.ЖурналДокументовДокументыДвиженийВаучеровОткрытьСписок.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "КассоваяКнига" Тогда
		КодДоступа = "000895";
		Элементы.ОтборПоФормеОплаты.Видимость = ИСТИНА;
		Элементы.ОтборПоХранилищуДенег.Видимость = ИСТИНА;
		Элементы.ОтборПоСтатье.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОбОтветственностиЗаСредства" Тогда
		КодДоступа = "001600";
	ИначеЕсли ИмяОтчета = "ОказаниеУслугПоПозициямНомерам" Тогда
		КодДоступа = "001290";
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОстаткиСУчетомЗаказовПоставщикам" Тогда
		КодДоступа = "000305";
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоВыполненнымСотрудникамиРаботам" Тогда
		КодДоступа = "001400";
		Элементы.ОтборПоСотруднику.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По виду работ");
	ИначеЕсли ИмяОтчета = "ОтчетПоЗадействованнымСредствамПредприятия" Тогда
		КодДоступа = "001600";
		Элементы.ОтборПоСредству.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоКомплектации" Тогда
		КодДоступа = "001560";
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По продукту");
	ИначеЕсли ИмяОтчета = "ОтчетПоПозиции" Тогда
		КодДоступа = "000305";
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоУсловиямДоступа" Тогда
		КодДоступа = "000100";
		ЕстьПериод = ЛОЖЬ;
	ИначеЕсли ИмяОтчета = "ПереченьСотрудников" Тогда
		КодДоступа = "001400";
		ЕстьПериод = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("перечень");
	ИначеЕсли ИмяОтчета = "ПереченьСредств" Тогда
		КодДоступа = "001600";
		ЕстьПериод = ЛОЖЬ;
		КороткоеИмя = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("перечень");
	ИначеЕсли ИмяОтчета = "ПоЗаказамКлиентов" Тогда
		КодДоступа = "001850";
		ЕстьКоличество = ИСТИНА;
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПоЗаказамПоставщикам" Тогда
		КодДоступа = "001750";
		ЕстьКоличество = ИСТИНА;
		ПодключатьСканер = ИспользоватьШтрихКодыДляИдентификацииКонтрагентов;
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПоПродажамСотрудников" Тогда
		КодДоступа = "001450";
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоСотруднику.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ТоварыУКомиссионеровОстаткиИОбороты" Тогда
		КодДоступа = "000380";
		ЕстьКоличество = ИСТИНА;
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоКлиенту.Видимость = ИСТИНА;
		Элементы.ОтборПоКлиенту.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По комиссионеру");
		Элементы.ОтборПоНоменклатурнойГруппе.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ЦеныПоставщиков" Тогда
		КодДоступа = "000380";
		ПодключатьСканер = ИСТИНА;
		Элементы.ОтборПоНоменклатуре.Видимость = ИСТИНА;
		Элементы.ОтборПоПоставщику.Видимость = ИСТИНА;
		Элементы.ОтборПоВидуЦен.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ОтчетПоСобытиям" Тогда
		КодДоступа = "000971";
		Элементы.ОтборПоВидуСобытия.Видимость = ИСТИНА;		
	ИначеЕсли ИмяОтчета = "ОтчетПоВнутреннимЗаказам" Тогда
		КодДоступа = "000320";
		ЕстьКоличество = ИСТИНА;
		Элементы.ОтборПоСкладу.Видимость = ИСТИНА;
	ИначеЕсли ИмяОтчета = "ПоЗакреплениюСотрудников" Тогда
		КодДоступа = "001450";
		ЕстьПериод = ЛОЖЬ;
		Элементы.ОтборПоСотруднику.Видимость = ИСТИНА;
	КонецЕсли;
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа(КодДоступа, ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		
		Элементы.ФормаСформировать.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сформировать") + " " + КороткоеИмя;
		НаименованиеОтчета 				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Метаданные.Отчеты[ИмяОтчета].Синоним);
		ЭтаФорма.Заголовок 				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет") + " " + НаименованиеОтчета;
		Элементы.ПериодОтчета.Видимость = ЕстьПериод;
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ВедетсяУчетПоВидамЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		ИспользоватьВаучеры   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Пользователь) Тогда
			УстановленОтветственный = Параметры.Пользователь;
		КонецЕсли;		
		Если ЗначениеЗаполнено(Параметры.Ваучер) Тогда
			УстановленВаучер = Параметры.Ваучер;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ОбъектБазыДанных) Тогда
			УстановленОбъектБазыДанных = Параметры.ОбъектБазыДанных;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ОтборПоВидуЦен) Тогда
			УстановленОтборПоВидуЦен = Параметры.ОтборПоВидуЦен;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			УстановленОтборПоНоменклатуре = Параметры.Номенклатура;	
		КонецЕсли;		
		Если ЗначениеЗаполнено(Параметры.ОтборПоКлиенту) Тогда
			УстановленОтборПоКлиенту = Параметры.ОтборПоКлиенту;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ОтборПоСотруднику) Тогда
			УстановленОтборПоСотруднику = Параметры.ОтборПоСотруднику;
		КонецЕсли;
		
		ВестиУчетДенегВНесколькихХранилищах   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		Элементы.ОтборПоФормеОплаты.Видимость = Элементы.ОтборПоФормеОплаты.Видимость И НЕ ВестиУчетДенегВНесколькихХранилищах;
		
		Элементы.РезультатОтправитьРуководителю.Видимость = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь", ИСТИНА) = "";
		
		ОбщийМодульСервисСервер.ПроверитьДоступКНастройкамОтчета(ЭтаФорма, ИмяОтчета, Отказ, ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДобавитьДату()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьТекущуюДатуИВремяВоВсеПечатныеФормы") Тогда
		МакетДатыВремени 			= ПолучитьОбщийМакет("МакетДатыВремени");
		ТаблицаТекущейДатыВремени 	= МакетДатыВремени.ПолучитьОбласть("Ш");
		ТаблицаТекущейДатыВремени.Параметры.ТекущаяДатаИВремя = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТаблицаТекущейДатыВремени);
		Результат.Вывести(ТаблицаТекущейДатыВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыПоЯчейкам(Знач ТабДок)
	
	СтруктураРасчетаСуммыЯчеек = ОбщийМодульКлиент.РасчетСуммыПоЯчейкам(ТабДок, Результат);	
	СуммаЯчеек 		= СтруктураРасчетаСуммыЯчеек.СуммаЯчеек;
	ВыделеноЯчеек 	= СтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек;
	КоличествоЧисел = СтруктураРасчетаСуммыЯчеек.КоличествоЧисел;              
	СреднееЗначение = СтруктураРасчетаСуммыЯчеек.СреднееЗначение;
	
КонецПроцедуры	

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	РасчетСуммыПоЯчейкам(Результат);
	Элементы.ГруппаСуммВыделеныхЯчеек.Видимость = НЕ КоличествоЧисел = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	ДатаНачала 		= НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ДатаОкончания 	= Конецдня(ДатаНачала);
	ПериодДляОтчета.ДатаНачала 		= ДатаНачала;
	ПериодДляОтчета.ДатаОкончания 	= ДатаОкончания;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотГод(Команда)
	
	ДатаНачала 		= НачалоГода(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ДатаОкончания 	= КонецГода(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ПериодДляОтчета.ДатаНачала 		= ДатаНачала;
	ПериодДляОтчета.ДатаОкончания 	= ДатаОкончания;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня1(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 1; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня2(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 2; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня3(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 3; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня4(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 4; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня5(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 5; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня6(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 6; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГруппыУровня0(Команда)
	
	Выполнить(" УровеньГруппировки" + ИмяОтчета + " = 0; 
	|Результат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки" + ИмяОтчета + "); ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКлиентуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, ОтборПоКлиенту);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКлиентуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщикуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, ОтборПоПоставщику);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПоставщикуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, ОтборПоКонтрагенту);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатьеПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатьеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("СтатьиДвиженияДенег", ДанныеВыбора, Текст, ОтборПоСтатье);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ОтборПоНоменклатуре);
	Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		ЗаданиеПараметровИКомпоновкаОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Склады", ДанныеВыбора, Текст, ОтборПоСкладу);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	Если НЕ ПустаяСтрока(ТекКод) тогда
		
		езультат = ИСТИНА;		
		ОтборПоНоменклатуре = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ, ИСТИНА, ДатаОкончания);
		
		Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
			Если НЕ ОтборПоНоменклатуре.ЭтоГруппа Тогда
				ОтборПоНоменклатурнойГруппе = ОтборПоНоменклатуре.НоменклатурнаяГруппа;
			КонецЕсли;
			
		Иначе			
			ОстановитьПоиск = ЛОЖЬ;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда
				
				ОтборПоСотруднику = ОбщийМодульСервер.ПолучитьСотрудникаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(ОтборПоСотруднику) Тогда
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов") Тогда
				
				РезультатКонтрагент = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод);
				Если ЗначениеЗаполнено(РезультатКонтрагент) Тогда					
					ОстановитьПоиск = ИСТИНА;
					ОтборПоКонтрагенту = РезультатКонтрагент;
					Если ТипЗнч(Результат) = Тип("СправочникСсылка.Клиенты") Тогда
						ОтборПоКлиенту = РезультатКонтрагент;
					Иначе
						ОтборПоПоставщику = РезультатКонтрагент;
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
				
				ОтборПоОрганизации = ОбщийМодульСервер.ПолучитьКонтрагентаПоШтрихКоду(ТекКод, , , ИСТИНА);				
				Если ЗначениеЗаполнено(ОтборПоОрганизации) Тогда
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск
				И ИспользоватьВаучеры Тогда
				
				Ваучер = ОбщийМодульТоварСервер.ПолучитьВаучерПоШтрихКоду(ТекКод);
				
				Если ЗначениеЗаполнено(Ваучер) Тогда
					ОстановитьПоиск = ИСТИНА;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ОстановитьПоиск Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект по штрих-коду не найден") + " (" + ТекКод + ").");
				Результат = ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ПодключатьСканер Тогда
		// ПодключаемоеОборудование
		Если Источник = "ПодключаемоеОборудование"
			И ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" Тогда
				Если Параметр[ 1 ] = Неопределено Тогда
					ШтрихКод = Параметр[ 0 ];
				Иначе
					ШтрихКод = Параметр[ 1 ][ 1 ];
				КонецЕсли;
				Если ОбработатьПолученныйШКНаСервере(ШтрихКод) Тогда
					ЗаданиеПараметровИКомпоновкаОтчета();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Конец ПодключаемоеОборудование
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПериодДляОтчета) Тогда
		ПериодДляОтчета.Вариант = ВариантСтандартногоПериода.Вчера;
		ДатаНачала 	  = ПериодДляОтчета.ДатаНачала;
		ДатаОкончания = КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ПериодДляОтчета.ДатаОкончания = ДатаОкончания;
	КонецЕсли;	
	
	Если НЕ ПроисходитОткрытие
		И ЗначениеЗаполнено(ДатаОкончания) Тогда // В некоторых версиях 1С это событие происходит и при открытии, в некоторых - нет
		
		ЗаданиеПараметровИКомпоновкаОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вчера(Команда)
	
	ДатаНачала 		= НачалоДня(НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата()) - 3600);
	ДатаОкончания 	= Конецдня(ДатаНачала);
	ПериодДляОтчета.ДатаНачала 		= ДатаНачала;
	ПериодДляОтчета.ДатаОкончания 	= ДатаОкончания;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодДляОтчета.ДатаНачала = ДатаНачала;
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаОкончания = ДатаНачала;
		ПериодДляОтчета.ДатаОкончания = КонецДня(ДатаОкончания);
	КонецЕсли;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодДляОтчета.ДатаОкончания = ДатаОкончания;
	Если ДатаОкончания < ДатаНачала Тогда
		ДатаНачала = ДатаОкончания;
		ПериодДляОтчета.ДатаНачала = НачалоДня(ДатаНачала);
	КонецЕсли;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Мес(Команда)
	
	ДатаНачала 		= НачалоМесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ДатаОкончания 	= КонецМесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
	ПериодДляОтчета.ДатаНачала 		= ДатаНачала;
	ПериодДляОтчета.ДатаОкончания 	= ДатаОкончания;
	
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоФормеОплатыПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоХранилищуДенегПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРуководителю(Команда)
	ОбщийМодульКлиент.ОтправитьПоEMAIL(Результат, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет") + " " + НаименованиеОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ПериодДляОтчетаПриИзменении(Элемент)
	
	ДатаНачала 		= ПериодДляОтчета.ДатаНачала;
	ДатаОкончания 	= ПериодДляОтчета.ДатаОкончания;
	ЗаданиеПараметровИКомпоновкаОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОтветственномуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Пользователи", ДанныеВыбора, Текст, ОтборПоОтветственному);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОтветственномуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСодержаниюСобытияПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектБазыДанныхПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЦенОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("ВидыЦен", ДанныеВыбора, Текст, ОтборПоВидуЦен);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЦенПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатурнойГруппеПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуНаличияТоваровПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСотрудникуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Сотрудники", ДанныеВыбора, Текст, ОтборПоСотруднику);
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ВаучерПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСредствуПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуСобытияПриИзменении(Элемент)
	ЗаданиеПараметровИКомпоновкаОтчета();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлФорматаExcel(Команда)
	
	#Если ВебКлиент Тогда 

            Если Не ПодключитьРасширениеРаботыСФайлами() Тогда 
                
                УстановитьРасширениеРаботыСФайлами();
                
				Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
					ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка. Ваш браузер не поддерживает работу с файлами.");
					КонеЦесли;
                
            КонецЕсли;
        #КонецЕсли	
	
АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл Excel") + " (*.xls)|*.xls";
	ДиалогРасширение = "xls";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите имя файла Excel");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла;
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.ПолноеИмяФайла			=   "" + ЭтаФорма.Заголовок + ".xls";
	ДиалогВыбФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Выгрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		
		ВыгрузитьНаСервере(АдресФайла);
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил данные в файл") + ": " + АдресФайла, 2);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере(Знач АдресФайла, Знач ФорматПДФ = ЛОЖЬ)
	
	Если ФорматПДФ Тогда
		Результат.Записать(АдресФайла, ТипФайлаТабличногоДокумента.PDF);	
	Иначе
		Результат.Записать(АдресФайла, ТипФайлаТабличногоДокумента.XLS97);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлPDF(Команда)
	
#Если ВебКлиент Тогда 

            Если Не ПодключитьРасширениеРаботыСФайлами() Тогда 
                
                УстановитьРасширениеРаботыСФайлами();
                
				Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
					ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка. Ваш браузер не поддерживает работу с файлами.");
					КонеЦесли;
                
            КонецЕсли;
        #КонецЕсли	
	
	АдресФайла = ПолучитьОтносительныйАдресНаСервере();
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл PDF") + " (*.pdf)|*.pdf";
	ДиалогРасширение = "pdf";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбФайла.Заголовок				=	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите имя файла PDF");
	ДиалогВыбФайла.ПолноеИмяФайла			=	АдресФайла;
	ДиалогВыбФайла.Фильтр					=	ДиалогФильтр;
	ДиалогВыбФайла.Расширение				=	ДиалогРасширение;
	ДиалогВыбФайла.ПолноеИмяФайла			=   "" + ЭтаФорма.Заголовок + ".pdf";
	ДиалогВыбФайла.МножественныйВыбор		=	ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	=	ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			=	0;
	
	ДиалогВыбФайла.Показать(Новый ОписаниеОповещения("СохранитьВФайлPDFЗавершение", ЭтаФорма, Новый Структура("ДиалогВыбФайла", ДиалогВыбФайла))); 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлPDFЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбФайла = ДополнительныеПараметры.ДиалогВыбФайла;	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет Выгрузка данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		
		ВыгрузитьНаСервере(АдресФайла, ИСТИНА);
		
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузил данные в файл") + ": " + АдресФайла, 2);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
функция   ПолучитьОтносительныйАдресНаСервере();	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов");	
КонецФункции
