//sza140509-0125 SZA: 
//sza131005-0242 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ ОТказ ТОгда
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Если Параметры.Свойство("Номенклатура") Тогда
			отборНаСервере(Список.Отбор, "Номенклатура", Параметры.Номенклатура);
		КонецЕсли;	
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы
//
&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			Если Не ОбработатьПолученныйШК(ТекКод) Тогда
				ДобавитьЗаписьНаКлиенте(ТекКод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция производит поиск записи в регистре сведений по измерению ШтрихКод
// и позиционируется на ней в списке.
// Результат - структура с ключами "Номенклатура", "ШтрихКод", "ТипШтрихКода".
// Если ключ "Номенклатура" отсутствует, то запись не найдена.
//
&НаСервере
Функция ОбработатьПолученныйШК(ТекКод)
	
	ВозвращаемоеЗначение = Истина;
	
	Результат = ПодключаемоеОборудованиеДСервер.ПоискПоРегиструСведенийШтрихКоды(ТекКод);
	Если Результат.Свойство("Номенклатура") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Результат.Номенклатура);
		Отбор.Вставить("ШтрихКод", ТекКод);
		Отбор.Вставить("ТипШтрихКода", Результат.ТипШтрихКода);
		КлючЗаписи = РегистрыСведений.ШтрихКоды.СоздатьКлючЗаписи(Отбор);
		Элементы.Список.СтрокаТовара = КлючЗаписи;
		
	Иначе
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура организует диалог с пользователем о добавлении новой записи в регистр
//
&НаКлиенте
Процедура ДобавитьЗаписьНаКлиенте(ТекКод)
	
	ТекстВопроса = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ШтрихКод %ШКод% не зарегистрирован. Создать новую запись?");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ШКод%", ТекКод);
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 50);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Форма = ПолучитьФорму("РегистрСведений.ШтрихКоды.ФормаЗаписи");
		Форма.Запись.ШтрихКод = ТекКод;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// отборНаСервере
// Параметры:
// {НаименованиеПараметра} - % (тип параметра) - % (описание параметра)
Процедура отборНаСервере(ЭлементДляОтбора, ПолеОтбора, ЗначениеОтбора) //Экспорт	
	
	Элемент = ЭлементДляОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
	Элемент.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	
	Элемент.ПравоеЗначение = ЗначениеОтбора;
	Элемент.Использование  = Истина;
	
КонецПроцедуры //отборНаСервере