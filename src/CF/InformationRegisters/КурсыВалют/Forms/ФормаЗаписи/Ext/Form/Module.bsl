//sza150115-0101 Админ: фикс
//sza150112-0357
//sza141111-1346 
//sza140826-2341
//sza140428-2144  
//sza131007-1634  
&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ВыяснитьТекущийКурс();
КонецПроцедуры

&НаСервере
Процедура ВыяснитьТекущийКурс()
	
	Элементы.На1Валюту.Заголовок = СокрЛП(НаименованиеБазововйВалюты) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на") + " 1 " + запись.Валюта;
	
	Если ЗначениеЗаполнено(Запись.Валюта) Тогда
		Если Запись.Валюта.Предопределенный Тогда
			ТекущийКурс = 1;
			Запись.Курс = 1;
			Элементы.Курс.Доступность = ЛОЖЬ;
		Иначе
			ТекущийКурс = ОбщийМодульПовтор.ПолучитьТекущийКурс(Запись.Валюта);
			Элементы.Курс.ТолькоПросмотр = ЛОЖЬ;
		КонецЕсли;
		
		Элементы.ТекущийКурс.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Курс на") + " " + Формат(ОбщийМодульСервисСервер.ПользователяТекущаяДата(), "ДФ=dd.MM.yyyy") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" от") + " " + Справочники.Валюты.ОсновнаяВалюта.Наименование;
	КонецЕсли;	
	ОбратныйПересчетКурса();
	
КонецПроцедуры

&НаСервере
Функция   ЕстьЗависимыеЦены(Знач Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.ТаблицаЗависимости.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ВалютаЦены = &ВалютаЦены
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Справочник.ВидыЦен.ТаблицаЗависимости КАК ВидыЦенТаблицаЗависимости
	|ГДЕ
	|	ВидыЦенТаблицаЗависимости.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|	И ВидыЦенТаблицаЗависимости.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп
	|ГДЕ
	|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены";
	
	Запрос.УстановитьПараметр("ВалютаЦены", Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	ОбратныйПересчетКурса();
КонецПроцедуры

&НаКлиенте
Процедура НаНачалоМесяца(Команда)
	запись.Период = НачалоМесяца(ОбщийМодульКлиент.ПользователяТекущаяДата());
КонецПроцедуры

&НаСервере
Процедура ОбратныйПересчетКурса()
	
	Если ЗначениеЗаполнено(запись.Валюта) 
		И НЕ запись.Курс = 0 Тогда
		
		Запись.ОбратныйПересчет = 1 / запись.Курс;
		Элементы.ДекорацияОбратногоПересчета.Заголовок = "" + СокрЛП(Запись.Валюта) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("за") + " 1 " + НаименованиеБазововйВалюты;
		
	Иначе
		Запись.ОбратныйПересчет = 0;
		Элементы.ДекорацияОбратногоПересчета.Заголовок = "";
	КонецЕсли;  	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350");	
	
	Если НЕ ОТказ 
		И ЕстьЗависимыеЦены(Запись.Валюта) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Существуют зависимые цены!") + символы.пс + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рассчитать все зависимые цены по этому курсу валют (если он изменился)?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет всех существующих зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		РассчитатьВсеЗависимыеЦены(Запись.Валюта, Запись.Период);
		
	КонецЕсли;
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВыяснитьТекущийКурс();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Запись.Ответственный, ИСТИНА);
	ОбработатьБлокировку(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000170", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		Если ЗначениеЗаполнено(Параметры.Валюта) Тогда
			Запись.Валюта = Параметры.Валюта;
		КонецЕсли;
		
		НаименованиеБазововйВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ВыяснитьТекущийКурс();
		
		ЗапретитьУстановкуКурсаЗаднимЧислом = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьУстановкуКурсаЗаднимЧислом");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьВсеЗависимыеЦены(Знач Валюта, Знач Период)	
	ОбщийМодульСервер.РассчитатьВсеЗависимыеЦеныПриСменеКурса(Валюта, НачалоДня(Период));
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьВсеЗависимыеЦены(Команда)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350");	
	
	Если НЕ ОТказ 
		И ЕстьЗависимыеЦены(Запись.Валюта) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Есть Зависимые цены!") + символы.пс + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рассчитать все зависимые цены по этой валюте?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет всех зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		РассчитатьВсеЗависимыеЦены(Запись.Валюта, Запись.Период);
		
	КонецЕсли;
	
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбратныйПересчетПриИзменении(Элемент)
	
	Запись.Курс = ?(Запись.ОбратныйПересчет = 0, 0, 1 / Запись.ОбратныйПересчет);
	ОбратныйПересчетКурса();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПользователяТекущаяДата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если НЕ НачалоДня(Запись.Период) = ПользователяТекущаяДата
		И ЗапретитьУстановкуКурсаЗаднимЧислом Тогда
		
		Запись.Период = ПользователяТекущаяДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПериодПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ПользователяТекущаяДата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если НЕ НачалоДня(Запись.Период) = ПользователяТекущаяДата
		И ЗапретитьУстановкуКурсаЗаднимЧислом Тогда
		
		Запись.Период = ПользователяТекущаяДата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьБлокировку(Знач ПриСозданииФормы = ЛОЖЬ)
	
	Если ЗапретитьУстановкуКурсаЗаднимЧислом
		И Запись.Период < НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) Тогда
		
		ЭтаФорма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЗАБЛОКИРОВАН") + " " + ЭтаФорма.Заголовок;
		
		ЭтаФорма.ТолькоПросмотр = ИСТИНА;
		Элементы.НаНачалоМесяца.Видимость = ЛОЖЬ;
		
		ЭтаФорма.ДокументЗаблокирован = ИСТИНА;
		
	КонецЕсли;               		
	
КонецПроцедуры
