//sza141206-0015  на начало дня
//sza141114-1818 : 
//sza141112-1033
//sza140304-2246 
//sza140114-0231 : 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПользователяТекущаяДата = НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если НЕ НачалоДня(Дата) = ПользователяТекущаяДата
		И ЗапретитьУстановкуКурсаЗаднимЧислом Тогда
			
		Дата = ПользователяТекущаяДата;
	КонецЕсли;
	
	КурсыВалют.Очистить();
	Валюты = Справочники.Валюты.Выбрать();
	Пока валюты.Следующий() Цикл
		
		Если НЕ Валюты.Предопределенный Тогда
			
			ИнформацияОКурсе = ОбщийМодульСервер.ПолучитьТекущийКурс(Валюты.Ссылка, Дата, ИСТИНА);
			
			СтрокаКурса = КурсыВалют.Добавить();
			СтрокаКурса.Валюта      = Валюты.Ссылка;
			СтрокаКурса.ТекущийКурс = ИнформацияОКурсе.Курс;
			СтрокаКурса.НовыйКурс   = СтрокаКурса.ТекущийКурс;
			СтрокаКурса.Комментарий = "";	
			СтрокаКурса.ТекущийОбратныйПересчет  = ?(СтрокаКурса.ТекущийКурс = 0, 0, 1 / СтрокаКурса.ТекущийКурс);
			СтрокаКурса.ОбратныйПересчет 		 = СтрокаКурса.ТекущийОбратныйПересчет;
			СтрокаКурса.ТекущийКурсБылУстановлен = Формат(ИнформацияОКурсе.Период, "ДФ=dd.MM.yy");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсыНеИзменились(Команда)
	
	УстановитьКурсыНаСервере(ИСТИНА);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000170", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		ЗапретитьУстановкуКурсаЗаднимЧислом = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьУстановкуКурсаЗаднимЧислом");
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКурсы(Команда)
	
	СписокИзмененныхВалют = УстановитьКурсыНаСервере();
	РасчитатьВсеЗависимыеЦены(СписокИзмененныхВалют);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеЗависимыеЦеныНаСервере(Знач Валюта)	
	ОбщийМодульСервер.РассчитатьВсеЗависимыеЦеныПриСменеКурса(Валюта, НачалоДня(Дата));	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьВсеЗависимыеЦены(Знач СписокИзмененныхВалют)
	
	Если НЕ СписокИзмененныхВалют.Количество() = 0 Тогда
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350");	
		
		Если НЕ Отказ Тогда
			
			Для Каждого ЭлементСпискаВалют Из СписокИзмененныхВалют Цикл
				Если ЕстьЗависимыеЦены(ЭлементСпискаВалют.Значение)
					И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Есть Зависимые цены по валюте") + " " + СокрЛП(ЭлементСпискаВалют.Значение) + символы.пс + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рассчитать все зависимые цены по этой валюте?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					
					Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет всех зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
					ПересчитатьВсеЗависимыеЦеныНаСервере(ЭлементСпискаВалют.Значение);	
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		глПроверятьСообщения = ИСТИНА;             	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   УстановитьКурсыНаСервере(НеИзменять = ЛОЖЬ)
	
	СписокИзмененныхВалют = Новый СписокЗначений;
	
	Для Каждого строкакурса из КурсыВалют Цикл
		
		Если НеИзменять
			ИЛИ не строкакурса.ТекущийКурс = строкакурса.НовыйКурс Тогда
			
			СписокИзмененныхВалют.Добавить(СтрокаКурса.Валюта);
			
			Курс = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			Курс.Активность = ИСТИНА;
			Курс.Валюта = строкакурса.валюта;
			Курс.Курс   = ?(НеИзменять, строкакурса.ТекущийКурс, строкакурса.НовыйКурс);
			Курс.ОбратныйПересчет = ?(Курс.Курс = 0, 0, 1 / Курс.Курс);
			курс.Период = дата;
			курс.Комментарий = строкакурса.Комментарий;
			
			Попытка 
				Курс.Записать(ИСТИНА);
				
			Исключение 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи курса") + ": " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки; 
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СписокИзмененныхВалют;
	
КонецФункции

&НаСервере
Функция   ЕстьЗависимыеЦены(Знач Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Цены.Цена
	|ИЗ
	|	РегистрСведений.Цены КАК Цены
	|ГДЕ
	|	Цены.Цена <> 0
	|	И Цены.ВидЦен.Зависимая = ИСТИНА
	|	И Цены.ВидЦен.ТаблицаЗависимости.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены";
	
	Запрос.УстановитьПараметр("ВалютаЦены", Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура КурсыВалютНовыйКурсПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
	ТекущиеДанные.ОбратныйПересчет = ?(ТекущиеДанные.НовыйКурс = 0, 0, 1 / ТекущиеДанные.НовыйКурс);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютОбратныйПересчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КурсыВалют.ТекущиеДанные;
	ТекущиеДанные.НовыйКурс = ?(ТекущиеДанные.ОбратныйПересчет = 0, 0, 1 / ТекущиеДанные.ОбратныйПересчет);
	ТекущиеДанные.ОбратныйПересчет = ?(ТекущиеДанные.НовыйКурс = 0, 0, 1 / ТекущиеДанные.НовыйКурс); //обязательно назад	
	
КонецПроцедуры
