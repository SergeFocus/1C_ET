// sza140522-0212
// sza130913-1532 :

&НаСервере
Процедура ДобавитьНовыйРеквизит(Знач НовыйРеквизит)

	НОвыйРеквизитСтрока = Объект.РеквизитыНоменклатуры.Добавить();
	НОвыйРеквизитСтрока.ДополнительныйРеквизит  = НовыйРеквизит;
	НОвыйРеквизитСтрока.ЗначениеПоУмолчанию 	= ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(НовыйРеквизит, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьВсюНоменклатуруЭтойГруппы(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда

		ПоказатьВопрос(Новый ОписаниеОповещения("ПереименоватьВсюНоменклатуруЭтойГруппыЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить переименование всей номенклатуры данной номенклатурной группы?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьВсюНоменклатуруЭтойГруппыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переименование номенклатуры группы.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Записать();
		ПереименоватьВсюНоменклатуруЭтойГруппыНаСервере();
		Элементы.Номенклатура.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереименоватьВсюНоменклатуруЭтойГруппыНаСервере()

	Счетчик = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НоменклатураОбъект.Записать();
			Счетчик = Счетчик + 1;

		КонецЦикла;
	КонецЕсли;

	ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего переименовано") + ": " + СокрЛП(Счетчик));

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если ПоддержкаДругихЯзыков Тогда
		Если НаименованиеИзменяли Тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;

		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);
			КонецЦикла;

			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
	КонецЕсли;

	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)

	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000350", ЭтаФорма, Отказ, Объект);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ОбъектСсылка = Объект.Ссылка;
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			Элементы.Номенклатура.Видимость = ЛОЖЬ;

			Если НЕ ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда
				Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию");
			КонецЕсли;
		КонецЕсли;

		Элементы.ФормулаФормированияАртикула.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		Номенклатура.Параметры.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОбъектСсылка);
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);

		Если ПоддержкаДругихЯзыков
			И ЗначениеЗаполненоОбъектСсылка Тогда

			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		Иначе
			Наименование = Объект.Наименование;
		КонецЕсли;

		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
		КонецЕсли;

		Элементы.НеВноситеИзмененияВСоставДополнительныхРеквизитовЕслиУжеИспользуетеНоменклатуруДаннойНоменклатурнойГруппы.Видимость = ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп;
		Элементы.ФормулаФормированияПолногоНаименованияНоменклатуры.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЕстьПринтер");
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Номенклатура);
		Элементы.КоэффициентНакопленияНаВаучер.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыНакопительнымиКартами");

		Если ПараметрыСеанса.ВерсияПриложения < 803050000
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда

			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.СвязатьОдноименнуюГруппуНоменклатуры.ВидФлажка = ВидФлажка.Флажок;
				|Элементы.НоменклатураЭтойГруппыССерийнымУчетом.ВидФлажка = ВидФлажка.Флажок; ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуАвтоНаименования(Команда)
	ПроверитьФормулуАвтоНаименованияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуАвтоНаименованияНаСервере()

	Если ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.Формула);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыДополнительныйРеквизитПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РеквизитыНоменклатуры.ТекущиеДанные;
	СтрокаТаблицы.ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(СтрокаТаблицы.ДополнительныйРеквизит, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.РеквизитыНоменклатуры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;

		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ТипРеквизита = Неопределено;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораЗавершение1", ЭтаФорма, Новый Структура("ТекущиеДанные, ТипДополнительногоРеквизита", ТекущиеДанные, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));

            Возврат;
		КонецЕсли;

		РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(ТекущиеДанные);
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));

            Возврат;
		КонецЕсли;

		РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Документ." + ТипРеквизита.Значение + ".ПустаяСсылка");
	КонецЕсли;

	РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник." + ТипРеквизита.Значение + ".ПустаяСсылка");
	КонецЕсли;

	РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент(Знач ТекущиеДанные)

	ПоказатьВводЗначения(Неопределено, ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(Знач ТекущиеДанные)
	ПоказатьВводЗначения(Неопределено, ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.РеквизитыНоменклатуры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");

	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда

		СтандартнаяОбработка = ЛОЖЬ;
		ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Объект.РеквизитыНоменклатуры.Количество() > 9;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИДобавитьРеквизитНоменклатуры(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектВладелец", Объект.Ссылка);
		ФормаРеквизитаНоменклатурнойГруппы = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.Форма.ФормаЭлемента", ПараметрыФормы);
		ФормаРеквизитаНоменклатурнойГруппы.ОткрытьМодально();
		НовыйРеквизит = ФормаРеквизитаНоменклатурнойГруппы.Объект.ссылка;

		Если ЗначениеЗаполнено(НовыйРеквизит) Тогда
			ДобавитьНовыйРеквизит(НовыйРеквизит);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНоменклатурыПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры
