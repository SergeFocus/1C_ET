//sza140522-0212  
//sza130913-1532 : 
&НаСервере
Процедура ДобавитьНовыйРеквизит(Знач НовыйРеквизит) 	
	
	НОвыйРеквизитСтрока = Объект.РеквитыНоменклатуры.Добавить();
	НОвыйРеквизитСтрока.ДополнительныйРеквизит  = НовыйРеквизит;
	НОвыйРеквизитСтрока.ЗначениеПоУмолчанию 	= ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(НовыйРеквизит, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьВсюНоменклатуруЭтойГруппы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы)
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы запустить переименование всей номенклатуры данной номенклатурной группы?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда				
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переименование номенклатуры группы.."), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Записать();
		ПереименоватьВсюНоменклатуруЭтойГруппыНаСервере();
		
		Элементы.Номенклатура.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереименоватьВсюНоменклатуруЭтойГруппыНаСервере()
	
	Счетчик = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			НоменклатураОбъект.Записать();
			Счетчик = Счетчик + 1;
		КонецЦикла;                                                                                      	
	КонецЕсли;
	
	Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего переименовано") + ": " + СокрЛП(Счетчик));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000350", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		
		ОбъектСсылка = Объект.Ссылка; 
		
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			
			Элементы.Номенклатура.Видимость = ЛОЖЬ;
			Если НЕ ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда
				Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию");
			КонецЕсли;		
			
		КонецЕсли;
		
		Номенклатура.Параметры.УстановитьЗначениеПараметра("НоменклатурнаяГруппа", ОбъектСсылка);
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;
			
		КонецЕсли;	
		
		Элементы.НеВноситеИзмененияВСоставДополнительныхРеквизитовЕслиУжеИспользуетеНоменклатуруДаннойНоменклатурнойГруппы.Видимость = ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп;
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуАвтоНаименования(Команда)
	ПроверитьФормулуАвтоНаименованияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуАвтоНаименованияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквитыНоменклатурыДополнительныйРеквизитПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РеквитыНоменклатуры.ТекущиеДанные;
	СтрокаТаблицы.ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(СтрокаТаблицы.ДополнительныйРеквизит, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквитыНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Объект.РеквитыНоменклатуры.Количество() > 9;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИДобавитьРеквизитНоменклатуры(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("ОбъектВладелец", Объект.Ссылка);	
		ФормаРеквизитаНоменклатурнойГруппы = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.Форма.ФормаЭлемента", ПараметрыФормы);
		ФормаРеквизитаНоменклатурнойГруппы.ОткрытьМодально();
		НовыйРеквизит = ФормаРеквизитаНоменклатурнойГруппы.Объект.ссылка;
		Если ЗначениеЗаполнено(НовыйРеквизит) Тогда
			ДобавитьНовыйРеквизит(НовыйРеквизит);
		КонецЕсли;	    
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквитыНоменклатурыЗначениеПоУмлчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РеквитыНоменклатуры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ТипРеквизита = ВыбратьИзСписка(ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));
			Если НЕ ТипРеквизита = Неопределено Тогда
				ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник." + ТипРеквизита.Значение + ".ПустаяСсылка");	
			КонецЕсли;
		КонецЕсли;
		ВвестиЗначение(ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");
		
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ТипРеквизита = ВыбратьИзСписка(ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));
			Если НЕ ТипРеквизита = Неопределено Тогда
				ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Документ." + ТипРеквизита.Значение + ".ПустаяСсылка");	
			КонецЕсли;
		КонецЕсли;
		ВвестиЗначение(ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквитыНоменклатурыЗначениеПоУмлчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РеквитыНоменклатуры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры
