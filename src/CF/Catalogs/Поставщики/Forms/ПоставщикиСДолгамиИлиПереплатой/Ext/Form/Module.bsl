// sza160305-0309 в валюте
// sza150112-2241
// sza140710-1745  локац
// sza140619-1019
// sza130905-1654 :

&НаКлиенте
Процедура ВыводНадписиПоФормуле()

	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтруктураФормулы = ОбщийМодульПовтор.НайтиФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;

			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение
				КонецПопытки;
			КонецЕсли;

			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;

КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)

	Результат = "";
	Попытка
		Выполнить(" Результат = " + Формула + ";");
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаСервереБезКонтекста
Функция   ОбновитьВсегоДолгПоставщиков()

	СтруктураРезультата = Новый Структура("ВсегоДолг, ВсегоОтсроченныйДолг", 0, 0);
	ДатаЗапроса = КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());

	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ СУММА(РасчетыСПоставщиками.СуммаОстаток) КАК СуммаОстаток
	|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаЗапроса, ) КАК РасчетыСПоставщиками";

	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураРезультата.ВсегоДолг = СтруктураРезультата.ВсегоДолг + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа") Тогда

		Запрос.Текст = "ВЫБРАТЬ СУММА(РасчетыСПоставщикамиСОтсрочкой.СуммаОстаток) КАК СуммаОстаток
		|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой.Остатки(&ДатаЗапроса, ) КАК РасчетыСПоставщикамиСОтсрочкой";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтруктураРезультата.ВсегоОтсроченныйДолг = СтруктураРезультата.ВсегоОтсроченныйДолг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)

	ВыводНадписиПоФормуле();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказательДолга(Команда)

	СтруктураДолга = ОбновитьВсегоДолгПоставщиков();
	ВсегоДолгПоставщиков = СтруктураДолга.ВсегоДолг;
	ВсегоПросрочено	  	 = СтруктураДолга.ВсегоОтсроченныйДолг;

	УстановитьЗначениеПараметраНаСервере();
	Элементы.ВсегоДолгПоставщиков.Видимость 	  = НЕ ВсегоДолгПоставщиков = 0;
	Элементы.ВсегоПросрочено.Видимость 			  = НЕ ВсегоПросрочено = 0;
	Элементы.НаименованиеОсновнойВалюты.Видимость = (НЕ ВсегоДолгПоставщиков = 0) ИЛИ (НЕ ВсегоПросрочено = 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНаСервере()
	Список.Параметры.УстановитьЗначениеПараметра("Дата", КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()));
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000650", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		СтруктураДолга = ОбновитьВсегоДолгПоставщиков();
		ВсегоДолгПоставщиков = СтруктураДолга.ВсегоДолг;
		ВсегоПросрочено	  	 = СтруктураДолга.ВсегоОтсроченныйДолг;

		Элементы.ВсегоДолгПоставщиков.Видимость 		= НЕ ВсегоДолгПоставщиков = 0;
		Элементы.ВсегоПросрочено.Видимость 				= НЕ ВсегоПросрочено = 0;
		Элементы.НаименованиеОсновнойВалюты.Видимость 	= (НЕ ВсегоДолгПоставщиков = 0) ИЛИ (НЕ ВсегоПросрочено = 0);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
		Список.Параметры.УстановитьЗначениеПараметра("Дата", КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()));

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегионыДляУчетаСтранАЛокацииГородов") Тогда
			Элементы.Регион.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Страна");
			Элементы.Локация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Город");
		КонецЕсли;

		Элементы.Просрочено.Видимость = ИспользоватьМеханизмОтсрочкиПлатежа;
		Элементы.РасчетыВВалюте.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры
