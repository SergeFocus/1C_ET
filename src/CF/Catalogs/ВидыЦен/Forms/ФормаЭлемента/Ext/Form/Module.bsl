//sza140522-0309 SZA: 
//sza130921-0313 : 

&НаКлиенте
Процедура ОсновнойВидЦенПриИзменении(Элемент)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОсновнойВидЦенПриИзмененииНаСервере()
	
	Элементы.ГруппаПроверкаФормулы.Видимость = ЗначениеЗаполнено(Объект.ОсновнойВидЦен);
	
	Если объект.Зависимая
		и не ВведитеЧислоДляПроверкиФормулыРасчетаЦены = 0
		и ЗначениеЗаполнено(Объект.ОсновнойВидЦен) Тогда
		
		Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
			
			ЦенаРезультат = 0;
			Цена = ОбщийМодульСервер.ПоКурсу(ВведитеЧислоДляПроверкиФормулыРасчетаЦены, Объект.ВалютаЦены, Объект.ОсновнойВидЦен.ВалютаЦены, ОбщийМодульСервисСервер.ПользователяТекущаяДата()) ;
			
			Попытка 
				Выполнить(" ЦенаРезультат = " + Объект.ФормулаРасчетаОтБазовогоВидаЦены.Формула + ";");
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка расчета цены:") + " " + ОписаниеОшибки();
				Сообщение.Поле = "ФормулаРасчетаОтБазовогоВидаЦены";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		иначеЕсли ЗначениеЗаполнено(Объект.ПроцентОтБазовойЦены) Тогда
			ЦенаРезультат = ОбщийМодульСервер.ПоКурсу(ВведитеЧислоДляПроверкиФормулыРасчетаЦены / 100 * Объект.ПроцентОтБазовойЦены, Объект.ВалютаЦены, Объект.ОсновнойВидЦен.ВалютаЦены, ОбщийМодульСервисСервер.ПользователяТекущаяДата()) ;
			
		иначе
			ЦенаРезультат = ВведитеЧислоДляПроверкиФормулыРасчетаЦены;
			
		КонецЕсли;
		
		Если объект.ЦенаВЦелыхЕдиницах
			или объект.ЦенаВДесятых Тогда
			
			Если объект.ЦенаВДесятых Тогда
				ЦенаРезультат = ЦенаРезультат * 10;
			КонецЕсли;
			
			Если объект.ОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(ЦенаРезультат);
				если не ЦенаЦел = ЦенаРезультат тогда
					ЦенаРезультат = ЦенаЦел + 1;
				КонецЕсли;
				
			иначеесли не ЦенаРезультат = 0 тогда
				ЦенаРезультат = окр(ЦенаРезультат);
				Если ЦенаРезультат = 0 Тогда
					ЦенаРезультат = 1;
				КонецЕсли;
				
			КонецЕсли;		
			
			Если объект.ЦенаВДесятых Тогда
				ЦенаРезультат = ЦенаРезультат / 10;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтБазовойЦеныПриИзменении(Элемент)
	
	Если не объект.ПроцентОтБазовойЦены = 100
		и не объект.ПроцентОтБазовойЦены = 0 Тогда
		
		объект.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
	КонецЕсли;
	
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаРасчетаОтБазовогоВидаЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		объект.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
	ОсновнойВидЦенПриИзмененииНаСервере();
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВведитеЧислоДляПроверкиФормулыРасчетаЦеныПриИзменении(Элемент)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВЦелыхЕдиницахПриИзменении(Элемент)
	
	Если объект.ЦенаВЦелыхЕдиницах Тогда
		Объект.ЦенаВДесятых = Ложь;
	КонецЕсли;
	изменитьвидимостьэлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуФормированияЦены(Команда)
	
	ПроверитьФормулуФормированияЦеныНаСервере();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуФормированияЦеныНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаРасчетаОтБазовогоВидаЦены.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000400", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ
		И параметрысеанса.НеМожетМенятьЦены Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ ТОгда
		Элементы.ДекорацияПроВалюты.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") ;
		
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(Объект.Ссылка);
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			если не ЗначениеЗаполнено(Объект.ОсновнойВидЦен) тогда
				Объект.ОсновнойВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен ;	
			КонецЕсли;
			
			если не ЗначениеЗаполнено(Объект.ВалютаЦены) тогда
				Объект.ВалютаЦены = Справочники.Валюты.ОсновнаяВалюта ;	
			КонецЕсли;
			
			если объект.ПроцентСкидкиДляРасчетаЛьготнойЦены = 0 тогда
				объект.ПроцентСкидкиДляРасчетаЛьготнойЦены = ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию;	
			КонецЕсли;
			
		Иначе
			Если объект.Предопределенный Тогда
				Элементы.ВалютаЦены.Доступность = Ложь;	
				Если не Объект.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
					Объект.ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьФормулы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		изменитьвидимостьэлементов();
		СпособРасчетаПроцент = НЕ ИспользоватьФормулы ИЛИ НЕ ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены);
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(Объект.Ссылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", Истина);
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(объект.Ссылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		иначе
			Наименование = объект.Наименование;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ИзменитьВидимостьЭлементов()
	
	элементы.ОкруглятьТолькоВБольшуюСторону.Видимость = объект.ЦенаВЦелыхЕдиницах или Объект.ЦенаВДесятых;
	ОбновитьВидимостьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимаяПриИзменении(Элемент)
	ОбновитьВидимостьЗависимости();
КонецПроцедуры

Процедура ОбновитьВидимостьЗависимости()
	
	ОбъектЗависимая = Объект.Зависимая;
	Элементы.ФорматЗависимостиОтДругойЦены.Видимость = ОбъектЗависимая;
	Элементы.ГруппаОсновногоВидаЦен.Видимость 	= ОбъектЗависимая;
	Элементы.ДекорацияПроВалюты.Видимость 		= ОбъектЗависимая;
	Элементы.ДляНоменклатурныхГрупп.Видимость 	= ОбъектЗависимая И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	ОбновитьВидимость();
	ПроцентИлиФормула();
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	ИначеЕсли ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.Зависимая
		и естьноменклатура()
		и ЗначениеЗаполнено(Объект.ОсновнойВидЦен)
		и Вопрос("Это зависимый Вид Цен. " + Символы.ПС + "Произвести автоматические расчет и установку цен на всю номенклатуру?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		состояние("Идет пересчет зависимых цен..");
		ПроизвестиПересчетВсехЦен();
		
	КонецЕсли;
	
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ЕстьНоменклатура()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой() ;
	
КонецФункции //естьноменклатура

&НаСервере
Процедура ПроизвестиПересчетВсехЦен() 
	ОбщийМодульСервер.ПроизвестиПересчетВсехЦен(Объект.Ссылка);		
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроверку(Команда)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	
	Если ЗначениеЗаполнено(объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		элементы.ПроцентОтБазовойЦены.Видимость = ложь;
	Иначе
		элементы.ПроцентОтБазовойЦены.Видимость = истина;
	КонецЕсли;
	
КонецПроцедуры //ОбновитьВидимость

&НаКлиенте
Процедура ПроцентОтБазовойЦеныОчистка(Элемент, СтандартнаяОбработка)
	Объект.ПроцентОтБазовойЦены = 100;
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПроцентПриИзменении(Элемент)	
	ПроцентИлиФормула();	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентИлиФормула()
	
	Элементы.ГруппаФормулы.Видимость 		= НЕ СпособРасчетаПроцент;
	Элементы.ПроцентОтБазовойЦены.Видимость = СпособРасчетаПроцент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Зависимая
		и не ЗначениеЗаполнено(Объект.ОсновнойВидЦен) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не Указан Вид Цен (источник расчета)!");
		Сообщение.Поле 		= "ОсновнойВидЦен";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	объект.Наименование = Наименование;
	НаименованиеИзменяли = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков тогда
		если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппПроцентОтБазовойЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если не СтрокаЗависимости.ПроцентОтБазовойЦены = 100
		и не СтрокаЗависимости.ПроцентОтБазовойЦены = 0 Тогда
		
		СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппФормулаРасчетаОтБазовогоВидаЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		СтрокаЗависимости.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппЦенаВЦелыхЕдиницахПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВЦелыхЕдиницах Тогда
		ТекущаяСтрока.ЦенаВДесятых = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппЦенаВДесятыхПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВДесятых Тогда
		ТекущаяСтрока.ЦенаВЦелыхЕдиницах = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВДесятыхПриИзменении(Элемент)
	
	Если Объект.ЦенаВДесятых Тогда
		Объект.ЦенаВЦелыхЕдиницах = Ложь;
	КонецЕсли;
	изменитьвидимостьэлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьТолькоВБольшуюСторонуПриИзменении(Элемент)
	
	изменитьвидимостьэлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если не отказ
		и НЕ Объект.Зависимая Тогда
		
		Если НЕ Объект.ПроцентОтБазовойЦены = 0 Тогда
			ТекущийОбъект.ПроцентОтБазовойЦены = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ОсновнойВидЦен) Тогда
			ТекущийОбъект.ОсновнойВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
			ТекущийОбъект.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры
