// sza141128-0137 фикс
// sza141110-0231 много источников
// sza140522-0309  
// sza130921-0313 : 

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)	
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВведитеЧислоДляПроверкиФормулыРасчетаЦеныПриИзменении(Элемент)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ЕстьНоменклатура()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.НеОтслеживатьОстаток = ЛОЖЬ
	|	И Номенклатура.ЭтоНабор = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();
	
КонецФункции // естьноменклатура

&НаКлиенте
Процедура ЗависимаяПриИзменении(Элемент)
	
	МенялиЧтотоВажноеДляПерерасчетаЦен = ИСТИНА;
	ОбновитьВидимостьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВидЦенИЗакрыть(Команда)
	
	Записать();
	
	Если Объект.Зависимая
		И ЕстьНоменклатура()
		И ЗначениеЗаполнено(Объект.ОсновнойВидЦен)
		И МенялиЧтотоВажноеДляПерерасчетаЦен Тогда
		
		СписокВариантовОтвета = Новый СписокЗначений;
		СписокВариантовОтвета.Добавить(КодВозвратаДиалога.Да, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, по всей номенклатуре"));
		СписокВариантовОтвета.Добавить(КодВозвратаДиалога.Повторить, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, где были установлены ранее"));
		СписокВариантовОтвета.Добавить(КодВозвратаДиалога.ОК, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Да, только не установленные"));
		СписокВариантовОтвета.Добавить(КодВозвратаДиалога.Нет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет"));
		
		ОтветПользователя = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Это зависимый Вид цен.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произвести расчет и установку цен на всю номенклатуру?"), СписокВариантовОтвета);	
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьЭлементов()
	
	Элементы.ОкруглятьТолькоВБольшуюСторону.Видимость = Объект.ЦенаВЦелыхЕдиницах или Объект.ЦенаВДесятых;
	ОбновитьВидимостьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточниковЗависимостиМожетБытьНесколькоПриИзменении(Элемент)
	ОбновитьВидимостьЗависимости();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	
	Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		Элементы.ПроцентОтБазовойЦены.Видимость = ЛОЖЬ;
	Иначе
		Элементы.ПроцентОтБазовойЦены.Видимость = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВидимость

Процедура ОбновитьВидимостьЗависимости()
	
	ОбъектЗависимыйВидЦен = Объект.Зависимая;
	Элементы.ДекорацияПроВалюты.Видимость 		= ОбъектЗависимыйВидЦен;
	Элементы.ДляНоменклатурныхГрупп.Видимость 	= ОбъектЗависимыйВидЦен И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп");
	Элементы.ГруппаОсновногоВидаЦен.Видимость 	= Объект.Зависимая И НЕ Объект.ИсточниковЗависимостиМожетБытьНесколько;
	Элементы.ТаблицаЗависимости.Видимость 		= ОбъектЗависимыйВидЦен И Объект.ИсточниковЗависимостиМожетБытьНесколько;
	Элементы.ГруппаПроИсточник1.Видимость		= ОбъектЗависимыйВидЦен И НЕ Объект.ИсточниковЗависимостиМожетБытьНесколько;
	Элементы.ИсточниковЗависимостиМожетБытьНесколько.Видимость = ОбъектЗависимыйВидЦен;	
	Элементы.ФорматЗависимостиОтДругойЦены.Видимость = ОбъектЗависимыйВидЦен И НЕ Объект.ИсточниковЗависимостиМожетБытьНесколько;
	Элементы.СпособыФормированияЦеныДляНоменклатурныхГруппОсновнойВидЦен.Видимость = ОбъектЗависимыйВидЦен И Объект.ИсточниковЗависимостиМожетБытьНесколько;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроверку(Команда)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьТолькоВБольшуюСторонуПриИзменении(Элемент)
	
	ИзменитьВидимостьЭлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидЦенПриИзменении(Элемент)
	ОсновнойВидЦенПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОсновнойВидЦенПриИзмененииНаСервере()
	
	МенялиЧтотоВажноеДляПерерасчетаЦен = ИСТИНА;
	Элементы.ГруппаПроверкаФормулы.Видимость = ЗначениеЗаполнено(Объект.ОсновнойВидЦен);
	
	Если Объект.Зависимая
		И НЕ ВведитеЧислоДляПроверкиФормулыРасчетаЦены = 0
		И ЗначениеЗаполнено(Объект.ОсновнойВидЦен) Тогда
		
		Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
			
			ЦенаРезультат = 0;
			Цена = ОбщийМодульСервер.ПоКурсу(ВведитеЧислоДляПроверкиФормулыРасчетаЦены, Объект.ВалютаЦены, Объект.ОсновнойВидЦен.ВалютаЦены, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
			
			Попытка 
				Выполнить(" ЦенаРезультат = " + Объект.ФормулаРасчетаОтБазовогоВидаЦены.Формула + ";");
			Исключение 	
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка расчета цены") + ": " + ТекстОписаниеОшибки, Объект, "ФормулаРасчетаОтБазовогоВидаЦены");
			КонецПопытки;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПроцентОтБазовойЦены) Тогда
			ЦенаРезультат = ОбщийМодульСервер.ПоКурсу(ВведитеЧислоДляПроверкиФормулыРасчетаЦены / 100 * Объект.ПроцентОтБазовойЦены, Объект.ВалютаЦены, Объект.ОсновнойВидЦен.ВалютаЦены, ОбщийМодульСервисСервер.ПользователяТекущаяДата());			
		Иначе
			ЦенаРезультат = ВведитеЧислоДляПроверкиФормулыРасчетаЦены;			
		КонецЕсли;
		
		Если Объект.ЦенаВЦелыхЕдиницах
			ИЛИ Объект.ЦенаВДесятых Тогда
			
			Если Объект.ЦенаВДесятых Тогда
				ЦенаРезультат = ЦенаРезультат * 10;
			КонецЕсли;
			
			Если Объект.ОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(ЦенаРезультат);
				Если НЕ ЦенаЦел = ЦенаРезультат Тогда
					ЦенаРезультат = ЦенаЦел + 1;
				КонецЕсли;
				
			ИначеЕсли не ЦенаРезультат = 0 Тогда
				ЦенаРезультат = окр(ЦенаРезультат);
				Если ЦенаРезультат = 0 Тогда
					ЦенаРезультат = 1;
				КонецЕсли;
				
			КонецЕсли;		
			
			Если Объект.ЦенаВДесятых Тогда
				ЦенаРезультат = ЦенаРезультат / 10;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Зависимая
		И Объект.ПроцентОтБазовойЦены = 0 Тогда
		
		Объект.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		Если НЕ ТекущийОбъект.Зависимая Тогда
			
			Если НЕ ТекущийОбъект.ПроцентОтБазовойЦены = 0 Тогда
				ТекущийОбъект.ПроцентОтБазовойЦены = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойВидЦен) Тогда
				ТекущийОбъект.ОсновнойВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущийОбъект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
				ТекущийОбъект.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
			КонецЕсли;
			ТекущийОбъект.ЦенаВЦелыхЕдиницах = ЛОЖЬ;
			ТекущийОбъект.ЦенаВДесятых		 = ЛОЖЬ;
			
		Иначе
			Для Каждого СтрокаЗависимости Из ТекущийОбъект.СпособыФормированияЦеныДляНоменклатурныхГрупп Цикл
				Если ТекущийОбъект.ИсточниковЗависимостиМожетБытьНесколько Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаЗависимости.ОсновнойВидЦен) Тогда
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана цена источник для номенклатурной группы!"));
						Отказ = ИСТИНА;
					КонецЕсли;
				Иначе
					СтрокаЗависимости.ОсновнойВидЦен = Объект.ОсновнойВидЦен;
				КонецЕсли;				
			КонецЦикла;
			
			Для Каждого СтрокаЗависимости Из ТекущийОбъект.ТаблицаЗависимости Цикл
				Если ТекущийОбъект.ИсточниковЗависимостиМожетБытьНесколько Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаЗависимости.ОсновнойВидЦен) Тогда
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана цена источник для номенклатурной группы!"));
						Отказ = ИСТИНА;
					КонецЕсли;
				Иначе
					СтрокаЗависимости.ОсновнойВидЦен = Объект.ОсновнойВидЦен;
				КонецЕсли;				
			КонецЦикла;
			
			Если ТекущийОбъект.Зависимая 
				И ТекущийОбъект.ИсточниковЗависимостиМожетБытьНесколько 
				И ТекущийОбъект.ТаблицаЗависимости.Количество() = 0 Тогда
				
				Отказ = ИСТИНА;
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнена таблица зависимости!"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветПользователя = РезультатВопроса;
	
	Если НЕ ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет пересчет зависимых цен.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
			ОтветПользователяНомер = 1;
		ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Повторить Тогда
			ОтветПользователяНомер = 2;
		Иначе
			ОтветПользователяНомер = 3;
		КонецЕсли;
		
		ПроизвестиПересчетВсехЦен(ОтветПользователяНомер);		
	КонецЕсли;
	
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков Тогда
		Если НаименованиеИзменяли Тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	ОбновитьВидимость();
	ПроцентИлиФормула();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	ИначеЕсли ЗначениеЗаполнено(СтраницаПанели)Тогда
		
		попытка
			СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000400", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ
		И ПараметрыСеанса.НеМожетМенятьЦены Тогда
		
		Отказ = ИСТИНА;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Элементы.ДекорацияПроВалюты.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(Объект.Ссылка);
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ОсновнойВидЦен) Тогда
				Объект.ОсновнойВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
				Объект.ВалютаЦены = ОсновнаяВалюта;
			КонецЕсли;
			
			Если Объект.ПроцентСкидкиДляРасчетаЛьготнойЦены = 0 Тогда
				Объект.ПроцентСкидкиДляРасчетаЛьготнойЦены = ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию;	
			КонецЕсли;
			
		Иначе
			Если Объект.Предопределенный Тогда
				Элементы.ВалютаЦены.Доступность = ЛОЖЬ;	
				Если НЕ Объект.ВалютаЦены = ОсновнаяВалюта Тогда
					Объект.ВалютаЦены = ОсновнаяВалюта;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьФормулы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		ИзменитьВидимостьЭлементов();
		СпособРасчетаПроцент = НЕ ИспользоватьФормулы ИЛИ НЕ ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены);
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(Объект.Ссылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка Тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Объект.Ссылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;			
		КонецЕсли;
		
		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
		КонецЕсли;
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.Зависимая.ВидФлажка = ВидФлажка.Флажок;
				|Элементы.СпособРасчетаПроцент.ВидФлажка = ВидФлажка.Флажок; ");	
			КонецЕсли;
			Элементы.СпособРасчетаПроцент.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зависимая Цена данного вида цен рассчитывается по Формуле от Цены источника");
			Элементы.СпособРасчетаПроцент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуФормированияЦены(Команда)
	
	ПроверитьФормулуФормированияЦеныНаСервере();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуФормированияЦеныНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаРасчетаОтБазовогоВидаЦены.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиПересчетВсехЦен(Знач ОтветПользователяНомер = 1) 
	ОбщийМодульСервер.ПроизвестиПересчетВсехЦен(Объект.Ссылка, НачалоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) , ОтветПользователяНомер);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентИлиФормула()
	
	Элементы.ГруппаФормулы.Видимость 		= НЕ СпособРасчетаПроцент;
	Элементы.ПроцентОтБазовойЦены.Видимость = СпособРасчетаПроцент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтБазовойЦеныОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ПроцентОтБазовойЦены = 100;
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОтБазовойЦеныПриИзменении(Элемент)
	
	Если НЕ Объект.ПроцентОтБазовойЦены = 100
		И НЕ Объект.ПроцентОтБазовойЦены = 0 Тогда
		
		Объект.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
	КонецЕсли;
	
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаПроцентПриИзменении(Элемент)	
	
	МенялиЧтотоВажноеДляПерерасчетаЦен = ИСТИНА;
	ПроцентИлиФормула();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппПриИзменении(Элемент)
	МенялиЧтотоВажноеДляПерерасчетаЦен = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппПроцентОтБазовойЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если НЕ СтрокаЗависимости.ПроцентОтБазовойЦены = 100
		И НЕ СтрокаЗависимости.ПроцентОтБазовойЦены = 0 Тогда
		
		СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппФормулаРасчетаОтБазовогоВидаЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		СтрокаЗависимости.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппЦенаВДесятыхПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВДесятых Тогда
		ТекущаяСтрока.ЦенаВЦелыхЕдиницах = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыФормированияЦеныДляНоменклатурныхГруппЦенаВЦелыхЕдиницахПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СпособыФормированияЦеныДляНоменклатурныхГрупп.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВЦелыхЕдиницах Тогда
		ТекущаяСтрока.ЦенаВДесятых = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗависимостиПриИзменении(Элемент)
	МенялиЧтотоВажноеДляПерерасчетаЦен = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗависимостиПроцентОтБазовойЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.ТаблицаЗависимости.ТекущиеДанные;
	Если НЕ СтрокаЗависимости.ПроцентОтБазовойЦены = 100
		И НЕ СтрокаЗависимости.ПроцентОтБазовойЦены = 0 Тогда
		
		СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены = ПредопределенноеЗначение("Справочник.ФормулыОписания.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗависимостиФормулаРасчетаОтБазовогоВидаЦеныПриИзменении(Элемент)
	
	СтрокаЗависимости = Элементы.ТаблицаЗависимости.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		СтрокаЗависимости.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗависимостиЦенаВДесятыхПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаЗависимости.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВДесятых Тогда
		ТекущаяСтрока.ЦенаВЦелыхЕдиницах = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗависимостиЦенаВЦелыхЕдиницахПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаЗависимости.ТекущиеДанные;
	Если ТекущаяСтрока.ЦенаВЦелыхЕдиницах Тогда
		ТекущаяСтрока.ЦенаВДесятых = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаРасчетаОтБазовогоВидаЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
		Объект.ПроцентОтБазовойЦены = 100;
	КонецЕсли;
	
	ОсновнойВидЦенПриИзмененииНаСервере();
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВДесятыхПриИзменении(Элемент)
	
	Если Объект.ЦенаВДесятых Тогда
		Объект.ЦенаВЦелыхЕдиницах = ЛОЖЬ;
	КонецЕсли;
	ИзменитьВидимостьЭлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВЦелыхЕдиницахПриИзменении(Элемент)
	
	Если Объект.ЦенаВЦелыхЕдиницах Тогда
		Объект.ЦенаВДесятых = ЛОЖЬ;
	КонецЕсли;
	ИзменитьВидимостьЭлементов();
	ОсновнойВидЦенПриИзмененииНаСервере();
	
КонецПроцедуры
