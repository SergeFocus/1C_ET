// sza151101-2102 
// sza150303-1656 фио
// sza140429-2052 : 
// sza131009-2224 : 
&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	ОбновитьВозраст();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Записать();	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаСервере
Функция   ЕстьНачисленияпоскладу()
	
	ЕстьНачисленияДляСклада = ЛОЖЬ;
	
	Для Каждого СтрокаНачисления из Объект.РасчетЗарплаты цикл
		
		Если СтрокаНачисления.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтПрибыли
			ИЛИ СтрокаНачисления.ВидНачисления = Перечисления.ВидыНачислений.ПроцентОтСуммыРеализации Тогда
			
			ЕстьНачисленияДляСклада = ИСТИНА;		
			прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНачисленияДляСклада;
	
КонецФункции // естьНачисленияпоскладу

&НаКлиенте
Процедура ИзображенияПриАктивизацииСтроки(Элемент)
	
	ТекущийЭлементСписка = Элементы.Изображения.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ТекущийЭлементСписка);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Элементы.СсылкаНаИзображение.Видимость    = НЕ СтруктураИзображения.ИзображениеВБазеДанных;
		Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
		
		Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
		КонецЕсли; 		 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	ОбработатьФИО();
	
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВозраст()
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		Возраст = Цел((ОбщийМодульСервисСервер.ПользователяТекущаяДата() - Объект.ДатаРождения) / 31556925.9936);
	Иначе
		Возраст = 0;
	КонецЕсли;
	Элементы.Возраст.Видимость = Не Возраст = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьПолученныйШКНаклиентеЗавершение", ЭтаФорма, Новый Структура("ТекКод", ТекКод)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код для этого сотрудника?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекКод = ДополнительныеПараметры.ТекКод;	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да тогда		
		Объект.ОсновнойШтрихКод = ТекКод;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СвязанныеСобытия.Параметры.УстановитьЗначениеПараметра("Сотрудник", Объект.Ссылка);	
	Элементы.События.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий");
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			Попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			КонецПопытки;	
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
	Если ИспользоватьФИОКонтрагентов Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Фамилия;
	КонецЕсли;
	
	ОбновитьВозраст();
	ОбновитьВидимостьТелефонов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001400", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ЕстьНачисленияДляСклада 			 = ЕстьНачисленияпоскладу();
		Элементы.СкладыНаКоторыхРаботаетСотрудник.Видимость = ЕстьНачисленияДляСклада;
		Элементы.Изображения.Видимость 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьСотрудниковИзображениями");
		ИспользоватьФИОКонтрагентов 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФИОКонтрагентов");
		Элементы.ГруппаФИО.Видимость 		 = ИспользоватьФИОКонтрагентов;
		
		ВестиУчетПродажПоСотрудникам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам");
		СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов = ВестиУчетПродажПоСотрудникам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетРегионов") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов");
		Элементы.Регионы.Видимость 	 = СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов;
		СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов = ВестиУчетПродажПоСотрудникам И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКатегорииКонтрагентов") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов");
		Элементы.Категории.Видимость = СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов;
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			Элементы.События.Видимость = ЛОЖЬ;
		Иначе
			Элементы.События.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий");
		КонецЕсли;
			
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка Тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;			
		КонецЕсли;
		
		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
			
			Элементы.ЯзыкОбщения.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.ЯзыкОбщения.СписокВыбора, , , ИСТИНА);
		КонецЕсли;
		
		Изображения.Параметры.УстановитьЗначениеПараметра("Владелец", ОбъектСсылка);   	
		СвязанныеСобытия.Параметры.УстановитьЗначениеПараметра("Сотрудник", ОбъектСсылка);	
		
		ВестиУчетПодразделений = ЗначениеЗаполнено(ОбъектСсылка) И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПодразделений");
		Если ВестиУчетПодразделений Тогда
			ЧислитсяВПодразделении = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(ОбъектСсылка);
			Элементы.ЧислитсяВПодразделении.Видимость = ИСТИНА;
		Иначе
			Элементы.ЧислитсяВПодразделении.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		СоставитьКлиентыСотрудника();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоставитьКлиентыСотрудника()
	
	Если СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов
		ИЛИ СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов Тогда
		
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000600", ЭтаФорма);
		
		Если НЕ Отказ Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Локации.Ссылка КАК Локация
			|ИЗ Справочник.Локации КАК Локации
			|ГДЕ Локации.Владелец = &Владелец";
			
			Регионы = Новый СписокЗначений;
			Локации = Новый СписокЗначений;
			Для Каждого СтрокаРегиона Из Объект.Регионы Цикл
				Регионы.Добавить(СтрокаРегиона.Регион);
				Если ЗначениеЗаполнено(СтрокаРегиона.Локация) Тогда
					Локации.Добавить(СтрокаРегиона.Локация);
				Иначе
					
					Запрос.УстановитьПараметр("Владелец", СтрокаРегиона.Регион);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Локации.Добавить(ВыборкаДетальныеЗаписи.Локация);
					КонецЦикла;
					
				КонецЕсли;	
			КонецЦикла;
			
			Категории = Новый СписокЗначений;
			Категории.ЗагрузитьЗначения(Объект.Категории.Выгрузить(, "Категория"));
			
			Клиенты = ОбщийМодульСервер.ПолучитьКлиентовСотрудника(Регионы, Локации, Категории);
			
			Если Клиенты.Количество() = 0 Тогда
				Элементы.КлиентыСотрудника.Видимость = ЛОЖЬ;
			Иначе
				КлиентыСотрудника.Очистить();
				Для Каждого Клиент Из Клиенты Цикл
					СтрокаСотруника = КлиентыСотрудника.Добавить();
					СтрокаСотруника.Клиент = Клиент.Значение;
				КонецЦикла;
				Элементы.КлиентыСотрудника.Видимость = ИСТИНА;
			КонецЕсли;
			
		Иначе
			Элементы.КлиентыСотрудника.Видимость = ЛОЖЬ;		
		КонецЕсли; 	
	Иначе
		Элементы.КлиентыСотрудника.Видимость = ЛОЖЬ;		
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗарплатыВидНачисленияПриИзменении(Элемент)
	
	ЕстьНачисленияДляСклада = естьНачисленияпоскладу();
	Элементы.СкладыНаКоторыхРаботаетСотрудник.Видимость = ЕстьНачисленияДляСклада;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура Телефон2ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура Телефон3ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура Телефон4ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьТелефонов()
	
	Элементы.Телефон2.Видимость = ЗначениеЗаполнено(Объект.Телефон) ИЛИ ЗначениеЗаполнено(Объект.Телефон2);
	Элементы.Телефон3.Видимость = ЗначениеЗаполнено(Объект.Телефон2) ИЛИ ЗначениеЗаполнено(Объект.Телефон3);
	Элементы.Телефон4.Видимость = ЗначениеЗаполнено(Объект.Телефон3) ИЛИ ЗначениеЗаполнено(Объект.Телефон4);
	Элементы.Телефон5.Видимость = ЗначениеЗаполнено(Объект.Телефон4) ИЛИ ЗначениеЗаполнено(Объект.Телефон5);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФИО()
	
	КонецФамилии = Найти(Наименование, " ");
	Если КонецФамилии > 1 Тогда
		Объект.фамилия = Лев(Наименование, КонецФамилии - 1);
		
		ИмяОтчетство = Прав(Наименование, СтрДлина(Наименование) - КонецФамилии);
		
		КонецИмени = Найти(ИмяОтчетство, " ");
		Если КонецИмени > 1 Тогда
			Объект.Имя = СокрЛП(Лев(ИмяОтчетство, КонецИмени - 1));
			Если Прав(Объект.Имя, 1) = "." Тогда
				Объект.Имя = ВРег(Лев(Объект.Имя, 1));
			КонецЕсли;
			Объект.Отчество = СокрЛП(Прав(ИмяОтчетство, СтрДлина(ИмяОтчетство) - КонецИмени));
			Если Прав(Объект.Отчество, 1) = "." Тогда
				Объект.Отчество = ВРег(Лев(Объект.Отчество, 1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	НаименованиеНовое = Объект.Фамилия + " ";
	
	Имя = СокрЛП(Объект.Имя);
	Если СтрДлина(Имя) = 1 Тогда
		НаименованиеНовое = НаименованиеНовое + ВРег(Имя) + ".";
	Иначе
		НаименованиеНовое = НаименованиеНовое + Имя;
	КонецЕсли;
	
	НаименованиеНовое = НаименованиеНовое + " ";
	
	Отчество = СокрЛП(Объект.Отчество);
	Если СтрДлина(Отчество) = 1 Тогда
		НаименованиеНовое = НаименованиеНовое + ВРег(Отчество) + ".";
	Иначе
		НаименованиеНовое = НаименованиеНовое + Отчество;
	КонецЕсли;
	
	НаименованиеНовое = СокрЛП(НаименованиеНовое);
	
	Если НЕ НаименованиеНовое = Наименование Тогда
		Наименование = НаименованиеНовое;
		Объект.Наименование = Наименование;
		НаименованиеИзменяли = ИСТИНА;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытие(Команда)
	
	ПараметрыФормы = Новый Структура("Сотрудник", Объект.Ссылка);
	ОткрытьФорму("Документ.События.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеСобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАнглийскийНаСервере()
	
	СтрокаЯзыка = Объект.ВладениеЯзыками.Добавить();
	СтрокаЯзыка.Язык = Справочники.Языки.English;
	СтрокаЯзыка.Речь = 8;
	СтрокаЯзыка.Чтение = 9;
	СтрокаЯзыка.Разговорный = 6;
	СтрокаЯзыка.Письмо = 7;
	СтрокаЯзыка.Переводчик = 3;
	СтрокаЯзыка.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Средние знания");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАнглийский(Команда)
	ДобавитьАнглийскийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьУкраинскийНаСервере()
	
	СтрокаЯзыка = Объект.ВладениеЯзыками.Добавить();
	СтрокаЯзыка.Язык = Справочники.Языки.Украинский;
	СтрокаЯзыка.Речь = 9;
	СтрокаЯзыка.Чтение = 9;
	СтрокаЯзыка.Разговорный = 8;
	СтрокаЯзыка.Письмо = 8;
	СтрокаЯзыка.Переводчик = 6;
	СтрокаЯзыка.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хорошие знания");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУкраинский(Команда)
	ДобавитьУкраинскийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьРусскийНаСервере()
	
	СтрокаЯзыка = Объект.ВладениеЯзыками.Добавить();
	СтрокаЯзыка.Язык = Справочники.Языки.Русский;
	СтрокаЯзыка.Речь = 10;
	СтрокаЯзыка.Чтение = 10;
	СтрокаЯзыка.Разговорный = 10;
	СтрокаЯзыка.Письмо = 9;
	СтрокаЯзыка.Переводчик = 8;
	СтрокаЯзыка.ОСтроке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отличные знания");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРусский(Команда)
	ДобавитьРусскийНаСервере();
КонецПроцедуры
