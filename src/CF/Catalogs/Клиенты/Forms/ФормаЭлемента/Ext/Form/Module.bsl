// sza160303-0200 долг в валюте
// sza160220-0142
// sza151218-0218
// sza141217-1819
// sza140916-0127 допрекв
// sza140710-1226  локация
// sza140614-2134
// sza130905-1706 :

&НаКлиенте
Процедура АдресСтрокаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;

	Если ПустаяСтрока(Объект.Адрес)
		И НЕ ПустаяСтрока(Объект.ЮридическийАдрес) Тогда

		Объект.Адрес = Объект.ЮридическийАдрес;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблицСправа()
	Элементы.ГруппаСправа.Видимость = НЕ НеПоказыватьТаблицыСправа;
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()

	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтруктураФормулы = ОбщийМодульПовтор.НайтиФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;

			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение
				КонецПопытки;
			КонецЕсли;

			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;

КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)

	Результат = "";
	Попытка
		Выполнить(" Результат = " + Формула + ";");
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)

	ПроверитьДеньРождения();
	ОбновитьВозраст();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытие(Команда)

	ПараметрыФормы = Новый Структура("Клиент", Объект.Ссылка);
	ОткрытьФорму("Документ.События.ФормаОбъекта", ПараметрыФормы, , , , , Новый ОписаниеОповещения("ПослеВводаСобытия", ЭтотОбъект, Неопределено));

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКлиентаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Регистратор) Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОповещение", 0.2, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ЛокацияПриИзменении(Элемент)
	ЛокацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЛокацияПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ПочтовыйИндекс)
		И ЗначениеЗаполнено(Объект.Локация)
		И ЗначениеЗаполнено(Объект.Локация.ПочтовыйИндекс) Тогда

		Объект.ПочтовыйИндекс = Объект.Локация.ПочтовыйИндекс;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)
	Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)

	Объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = ИСТИНА;
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(НаименованиеДляПечати, НаименованияДляПечатиНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	ОбработатьФИО();
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьТелефонов()

	Элементы.Телефон2.Видимость = ЗначениеЗаполнено(Объект.Телефон) ИЛИ ЗначениеЗаполнено(Объект.Телефон2);
	Элементы.Контакт2.Видимость = Элементы.Телефон2.Видимость;
	Элементы.Телефон3.Видимость = ЗначениеЗаполнено(Объект.Телефон2) ИЛИ ЗначениеЗаполнено(Объект.Телефон3);
	Элементы.Контакт3.Видимость = Элементы.Телефон3.Видимость;
	Элементы.Телефон4.Видимость = ЗначениеЗаполнено(Объект.Телефон3) ИЛИ ЗначениеЗаполнено(Объект.Телефон4);
	Элементы.Контакт4.Видимость = Элементы.Телефон4.Видимость;
	Элементы.Телефон5.Видимость = ЗначениеЗаполнено(Объект.Телефон4) ИЛИ ЗначениеЗаполнено(Объект.Телефон5);
	Элементы.Контакт5.Видимость = Элементы.Телефон5.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВозраст()

	Возраст = ОбщийМодульКлиент.ВычислитьВозраст(Объект.ДатаРождения, ИСТИНА);
	Элементы.Возраст.Видимость = НЕ Возраст = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОДолге(Команда)

	ОбновитьДанныеОДолгеНаСервере();
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОДолгеНаСервере()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаПриход, 0) КАК Продано,
		|	ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаРасход, 0) КАК Оплачено,
		|	ЕСТЬNULL(РасчетыОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК ТекущийДолг
		|ИЗ РегистрНакопления.Расчеты.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Клиент = &Клиент) КАК РасчетыОстаткиИОбороты";
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		Запрос.УстановитьПараметр("ДатаНачала", '00010101000000');
		Запрос.УстановитьПараметр("ДатаОкончания", Дата);
		Запрос.УстановитьПараметр("Клиент", Объект.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();
		ТекущийДолг = 0;
		Продано 	= 0;
		Оплачено 	= 0;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Продано 	= Продано + ВыборкаДетальныеЗаписи.Продано;
			Оплачено 	= Оплачено + ВыборкаДетальныеЗаписи.Оплачено;
			ТекущийДолг = ТекущийДолг + ВыборкаДетальныеЗаписи.ТекущийДолг;

		КонецЦикла;

		Если ВестиУчетВалют Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(РасчетыВВалютеОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК ТекущийДолгВВалюте
			|ИЗ РегистрНакопления.РасчетыВВалюте.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , КлиентПоставщик = &Клиент) КАК РасчетыВВалютеОстаткиИОбороты";
			Запрос.УстановитьПараметр("ДатаНачала", '00010101000000');
			Запрос.УстановитьПараметр("ДатаОкончания", Дата);
			Запрос.УстановитьПараметр("Клиент", Объект.Ссылка);

			РезультатЗапроса = Запрос.Выполнить();
			ТекущийДолгВВалюте = 0;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТекущийДолгВВалюте = ТекущийДолгВВалюте + ВыборкаДетальныеЗаписи.ТекущийДолгВВалюте;
			КонецЦикла;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
			ПросроченныйДолг = ОбщийМодульСервер.ПолучитьДолгКлиентаПоставщикаСОтсрочкой(Объект.Ссылка, Дата);
			Элементы.ПросроченныйДолг.Видимость = НЕ ПросроченныйДолг = 0;
		КонецЕсли;

		Элементы.ТекущийДолг.Видимость 			= НЕ ТекущийДолг = 0;
		Элементы.ТекущийДолгВВалюте.Видимость 	= НЕ ТекущийДолгВВалюте = 0 И ВестиУчетВалют;
		Элементы.НаименованиеОсновнойВалюты.Видимость = НЕ ТекущийДолг = 0;
		Элементы.Продано.Видимость 				= НЕ Продано = 0;
		Элементы.Оплачено.Видимость 			= НЕ Оплачено = 0;
		Элементы.ОбновитьДанныеОДолге.Видимость = НЕ (ТекущийДолг = 0 И Оплачено = 0 И Продано = 0);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыКлиента(Знач НеВноситьИзменения = ЛОЖЬ)

	Если ИспользоватьДополнительныеРеквизитыКлиента Тогда
		Счетчик = 1;
		НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыКлиентов();
		Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
			Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
				Если Счетчик <= 15 Тогда
					ДополнительныйРеквизит = ДопРеквизит.ДополнительныйРеквизит;
					НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДополнительныйРеквизит);
					Выполнить(" ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");

					Если ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
						ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
						ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда

						Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".КнопкаВыбора  = ИСТИНА;");
						Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".КнопкаОчистки = ИСТИНА;");
					КонецЕсли;

					ТипЗначенияРеквизит = Неопределено;

					Если НЕ НеВноситьИзменения
						И НЕ ТипЗначенияРеквизит = ТипЗнч(ДополнительныйРеквизит.ЗначениеПоУмолчанию)  Тогда

						Выполнить(" Объект.РеквизитКлиента" + СокрЛП(Счетчик) + " = ДополнительныйРеквизит.ЗначениеПоУмолчанию;");
					КонецЕсли;

					Выполнить(" ТипЗначенияРеквизит = ТипЗнч(Объект.РеквизитКлиента" + СокрЛП(Счетчик) + ");");

					Если ТипЗначенияРеквизит = Тип("Дата")
						ИЛИ ТипЗначенияРеквизит = Тип("Булево")
						ИЛИ ТипЗначенияРеквизит = Тип("Число") Тогда

						Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".РастягиватьПоГоризонтали = ЛОЖЬ;");
					КонецЕсли;
				КонецЕсли;

				Счетчик = Счетчик + 1;

			КонецЦикла;
		КонецЕсли;

		Пока Счетчик <= 15 Цикл
			Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Видимость = ЛОЖЬ;");
			Если НЕ НеВноситьИзменения Тогда
				Выполнить(" Объект.РеквизитКлиента" + СокрЛП(Счетчик) + " = Неопределено;");
			КонецЕсли;

			счетчик = счетчик + 1;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)

	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.ПолучитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		РеквизитКлиента = Неопределено;
		Выполнить(" РеквизитКлиента = Объект.РеквизитКлиента" + НомерДопРеквизита + ";");

		Если РеквизитКлиента = Неопределено Тогда
			ТипРеквизита = Неопределено;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборДопРеквизитаНГЗавершение1", ЭтаФорма, Новый Структура("НомерДопРеквизита, ТипДополнительногоРеквизита", НомерДопРеквизита, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));

			Возврат;
		КонецЕсли;

		ОбработатьВыборДопРеквизитаНГФрагмент1(НомерДопРеквизита);

	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		РеквизитКлиента = Неопределено;
		Выполнить(" РеквизитКлиента = Объект.РеквизитКлиента" + НомерДопРеквизита + ";");

		Если РеквизитКлиента = Неопределено Тогда
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборДопРеквизитаНГЗавершение", ЭтаФорма, Новый Структура("НомерДопРеквизита, ТипДополнительногоРеквизита", НомерДопРеквизита, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));

			Возврат;
		КонецЕсли;

		ОбработатьВыборДопРеквизитаНГФрагмент(НомерДопРеквизита);
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
		И Объект["РеквизитКлиента" + НомерДопРеквизита] = Неопределено Тогда

		СтандартнаяОбработка = ЛОЖЬ;
		Объект["РеквизитКлиента" + НомерДопРеквизита] = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
		ПараметрыФормы = Новый Структура;
		Выполнить(" ПараметрыФормы.Вставить(""Владелец"", ДопРеквизитНГ" + НомерДопРеквизита + ");");
		ФормаВыбора = ПолучитьФорму("Справочник.НаборЗначенийДополнительныхРеквизитов.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		ФормаВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ":";
		Объект["РеквизитКлиента" + НомерДопРеквизита] = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	НомерДопРеквизита = ДополнительныеПараметры.НомерДопРеквизита;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;
	ТипРеквизита = ВыбранныйЭлемент;

	Если НЕ ТипРеквизита = Неопределено Тогда
		Выполнить(" Объект.РеквизитКлиента" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Документ."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");
	КонецЕсли;

	ОбработатьВыборДопРеквизитаНГФрагмент(НомерДопРеквизита);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	НомерДопРеквизита = ДополнительныеПараметры.НомерДопРеквизита;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		Выполнить(" Объект.РеквизитКлиента" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Справочник."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");
	КонецЕсли;

	ОбработатьВыборДопРеквизитаНГФрагмент1(НомерДопРеквизита);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГФрагмент(Знач НомерДопРеквизита)

	Выполнить(" ВвестиЗначение(Объект.РеквизитКлиента" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГФрагмент1(Знач НомерДопРеквизита)

	Выполнить(" ВвестиЗначение(Объект.РеквизитКлиента" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчисткуДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)

	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.ПолучитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");

	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда

		СтандартнаяОбработка = ЛОЖЬ;
		Выполнить(" Объект.РеквизитКлиента" + НомерДопРеквизита + " = Неопределено;");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФИО()

	КонецФамилии = Найти(Наименование, " ");

	Если КонецФамилии > 1 Тогда
		Объект.фамилия = Лев(Наименование, КонецФамилии - 1);
		ИмяОтчество = Прав(Наименование, СтрДлина(Наименование) - КонецФамилии);
		КонецИмени = Найти(ИмяОтчество, " ");

		Если КонецИмени > 1 Тогда
			Объект.Имя = СокрЛП(Лев(ИмяОтчество, КонецИмени - 1));
			Если Прав(Объект.Имя, 1) = "." Тогда
				Объект.Имя = ВРег(Лев(Объект.Имя, 1));
			КонецЕсли;

			Объект.Отчество = СокрЛП(Прав(ИмяОтчество, СтрДлина(ИмяОтчество) - КонецИмени));

			Если Прав(Объект.Отчество, 1) = "." Тогда
				Объект.Отчество = ВРег(Лев(Объект.Отчество, 1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИспользоватьМагнитныеКартыКлиентов
		И Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "TracksData" Тогда
			Если Параметр[1][3] <> Неопределено Тогда
				Объект.НомерКарты = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
			Иначе
				Объект.НомерКарты = Параметр[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов") Тогда

		Если НЕ Объект.НомерКарты = ""
			И НЕ ПодключаемоеОборудованиеДСервер.ПроверитьУникальностьМагнитногоКода(ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Клиенты"))) Тогда

			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карта с данным номером уже зарегистрирована в системе");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НомерКарты");
			Отказ = ИСТИНА;
		КонецЕсли;

		АдресЭП = Объект.ЭлектроннаяПочта;

		Если НЕ ПодключаемоеОборудованиеДСервер.ПроверитьКорректностьЗаписиАдресаЭлектроннойПочты(АдресЭП) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Указан некорректный адрес электронной почты");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Элементы.ЭлектроннаяПочта");
			Отказ = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьСотрудникиКлиента()

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001400", ЭтаФорма);

	Если НЕ Отказ Тогда

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПродажПоСотрудникам") Тогда

			Сотрудники = ОбщийМодульСервер.ПолучитьСотрудниковКлиента(Объект.Регион, Объект.Локация, Объект.Категория);

			Если Сотрудники.Количество() = 0 Тогда
				Элементы.СотрудникиКлиента.Видимость = ЛОЖЬ;
			Иначе
				СотрудникиКлиента.Очистить();

				Для Каждого Сотрудник Из Сотрудники Цикл
					СтрокаСотрудника = СотрудникиКлиента.Добавить();
					СтрокаСотрудника.Сотрудник = Сотрудник.Значение;
				КонецЦикла;

				Элементы.СотрудникиКлиента.Видимость = ИСТИНА;
			КонецЕсли;
		Иначе
			Элементы.СотрудникиКлиента.Видимость = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродажиКлиентамКлиенту(Команда)

	ПараметрыОтчета = Новый Структура("ОтборПоКлиенту", Объект.Ссылка);
	ОткрытьФорму("Отчет.ПродажиКлиентам.Форма", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ТекущаяСтраница = Элементы.ГруппаСтраницСправа.ТекущаяСтраница;
	Если НЕ ТекущаяСтраница = Неопределено Тогда
		СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
		СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	КонецЕсли;

	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	Если НЕ ТекущаяСтраница = Неопределено Тогда
		СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
		СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда

		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Родитель)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьЗаписьКлиентовБезУказанияГруппы") Тогда

		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана группа, а она обязательно должна быть указана!"), Объект.Ссылка, "Родитель", , Отказ, , СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСобытия(Результат, Параметр) Экспорт
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере1(ТекущийОбъект, ПараметрыЗаписи)

	СвязанныеСобытия.Параметры.УстановитьЗначениеПараметра("Клиент", Объект.Ссылка);
	Элементы.События.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий");
	Элементы.СоздатьНовыйДоговор.Видимость 	 = ПараметрыСеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.СтраницаЗаказыКлиента.Видимость = ОбщийМодульСервер.УКонтрагентаЕстьРасчетыИлиЗаказы(Объект.Ссылка, "ЗаказыКлиента");

	Если ПоддержкаДругихЯзыков Тогда
		Если НаименованиеИзменяли Тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;

		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);
			КонецЦикла;

			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравовойСтатусПриИзменении(Элемент)

	Элементы.ГруппаДанныхФизическогоЛица.Видимость = НЕ Объект.ПравовойСтатус = ПредопределенноеЗначение("Перечисление.ПравовойСтатус.ЮрЛицо")
	И НЕ Объект.ПравовойСтатус = ПредопределенноеЗначение("Перечисление.ПравовойСтатус.ЮрЛицоНеРезидент");

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)

	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                             // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование
		И ИспользоватьМагнитныеКартыКлиентов Тогда

		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор,ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                        // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование
		И ИспользоватьМагнитныеКартыКлиентов
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента () Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			Если НЕ ТекущаяСтраница = Неопределено Тогда
				Элементы.ГруппаСтраницСправа.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
			СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
			Если НЕ ТекущаяСтраница = Неопределено Тогда
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;
	КонецЕсли;

	ВидимостьТаблицСправа();
	ОбновитьВозраст();
	ОбновитьВидимостьТелефонов();
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета") = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Украина") Тогда
		Элементы.ОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЕДРПОУ");
		Элементы.МФО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО / SWIFT");
		Элементы.КПП.Видимость = ЛОЖЬ;
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета") = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Россия") Тогда
		Элементы.МФО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("БИК / SWIFT");
	КонецЕсли;

	ВыводНадписиПоФормуле();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)         // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000600", ЭтаФорма, Отказ, Объект, ЛОЖЬ);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ЧислоОпцийДляКонтрагентов = ОбщийМодульПовтор.ЧислоОпцийДляКонтрагентов();

		Если ЧислоОпцийДляКонтрагентов < 6 Тогда
			Элементы.Переместить(Элементы.ДополнительныеПараметрыКонтрагента, Элементы.Расчеты);
		КонецЕсли;

		ОбъектСсылка = Объект.Ссылка;
		ВестиУчетОтдельныхДоговоровСКонтрагентамиПС = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС");
		ВестиУчетВалют = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		ИспользоватьДополнительныеРеквизитыКлиента = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыСправочникаКлиентов");
		Элементы.ГруппаФИО.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФИОКонтрагентов");

		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ПравовойСтатус) Тогда
				Объект.ПравовойСтатус = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПравовойСтатусПоУмолчанию");
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.Регион) Тогда
				Объект.Регион = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионПоУмолчанию");
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
				Объект.СпособДоставки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СпособДоставкиПоУмолчанию");
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКатегорииКонтрагентов") Тогда
				Объект.Категория = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КатегорияКонтрагентаПоУмолчанию");
			КонецЕсли;

			Если ИспользоватьМеханизмОтсрочкиПлатежа
				И НЕ ЗначениеЗаполнено(Объект.СрокОплатыВДняхПоУмолчанию) Тогда

				Объект.СрокОплатыВДняхПоУмолчанию = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию");
			КонецЕсли;

			ЭтаФорма.Элементы.ГруппаВзаиморасчеты.Видимость = ЛОЖЬ;
			ЭтаФорма.Элементы.ДокументыКлиента.Видимость 	= ЛОЖЬ;
			Элементы.События.Видимость = ЛОЖЬ;
			УКонтрагентаЕстьРасчеты = ЛОЖЬ;
			Элементы.ГруппаДолгаВВалюте.Видимость = ЛОЖЬ;
			Элементы.ФормаВзаиморасчеты.Видимость = ЛОЖЬ;
			Элементы.ФормаВзаиморасчетыВВалюте.Видимость = ЛОЖЬ;

		Иначе
			УКонтрагентаЕстьРасчеты = ОбщийМодульСервер.УКонтрагентаЕстьРасчетыИлиЗаказы(ОбъектСсылка);
			Элементы.ДокументыКлиента.Видимость = УКонтрагентаЕстьРасчеты;
			ПроверитьДеньРождения();

			Если НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый клиент")) = 0 Тогда
				Объект.Наименование = "";
				Наименование = "";
				ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;
			КонецЕсли;

			КарточкаПоставщика = ОбщийМодульСервер.НайтиКонтрагентаПоОКПО(Объект.ОКПО, , ИСТИНА);
			Элементы.События.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий");

			ВалютныйУчет = ВестиУчетВалют
			И ЗначениеЗаполнено(Объект.ОсновнаяВалюта)
			И НЕ Объект.ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

			Элементы.ГруппаДолгаВВалюте.Видимость = ВалютныйУчет;
			Элементы.ФормаВзаиморасчетыВВалюте.Видимость = ВалютныйУчет;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.Родитель)
			И НЕ ЗначениеЗаполненоОбъектСсылка Тогда

			ГруппаНовыхКлиентовПоУмолчанию = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ГруппаНовыхКлиентовПоУмолчанию");

			Если ЗначениеЗаполнено(ГруппаНовыхКлиентовПоУмолчанию)
				И ГруппаНовыхКлиентовПоУмолчанию.ЭтоГруппа Тогда

				Объект.Родитель = ГруппаНовыхКлиентовПоУмолчанию;
			ИначеЕсли ЗначениеЗаполнено(Параметры.Родитель) Тогда
				Объект.Родитель = Параметры.Родитель;
			КонецЕсли;
		КонецЕсли;

		ОбъектРодитель = Объект.Родитель;

		Если ЗначениеЗаполнено(ОбъектРодитель) Тогда
			Если ЗначениеЗаполнено(ОбъектРодитель.ВидЦен) Тогда
				Элементы.ВидЦен.ТолькоПросмотр = ИСТИНА;
				Элементы.ВидЦен.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен группы клиентов");

				Если НЕ Объект.ВидЦен = ОбъектРодитель.ВидЦен Тогда
					Объект.ВидЦен = ОбъектРодитель.ВидЦен;
				КонецЕсли;
			КонецЕсли;

			Если ИспользоватьМеханизмОтсрочкиПлатежа
				И ЗначениеЗаполнено(ОбъектРодитель.СрокОплатыВДняхПоУмолчанию)
				И Объект.СрокОплатыВДняхПоУмолчанию = 0 Тогда

				Объект.СрокОплатыВДняхПоУмолчанию = ОбъектРодитель.СрокОплатыВДняхПоУмолчанию;
			КонецЕсли;
		КонецЕсли;

		Элементы.КарточкаПоставщика.Видимость = ЗначениеЗаполнено(КарточкаПоставщика);
		ОбновитьДополнительныеРеквизитыКлиента(ЗначениеЗаполненоОбъектСсылка);
		ДокументыКлиента.Параметры.УстановитьЗначениеПараметра("Клиент", ОбъектСсылка);
		ДокументыКлиента.Параметры.УстановитьЗначениеПараметра("Видприход", ВидДвиженияНакопления.Приход);
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("КлиентПоставщик", ОбъектСсылка);
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Изображения.Параметры.УстановитьЗначениеПараметра("Владелец", ОбъектСсылка);
		ДоговораКлиента.Параметры.УстановитьЗначениеПараметра("КлиентПоставщик", ОбъектСсылка);
		СвязанныеСобытия.Параметры.УстановитьЗначениеПараметра("Клиент", ОбъектСсылка);
		Элементы.СтраницаЗаказыКлиента.Видимость= ОбщийМодульСервер.УКонтрагентаЕстьРасчетыИлиЗаказы(ОбъектСсылка, "ЗаказыКлиента");
		Элементы.ДоговораКлиента.Видимость 		= ВестиУчетОтдельныхДоговоровСКонтрагентамиПС И НЕ ОбщийМодульСервер.ЧислоДоговоровСКонтрагентом(ОбъектСсылка) = 0;
		Элементы.ЗаказыКлиента.Видимость 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовКлиентов");
		Элементы.СоздатьНовыйДоговор.Видимость  = ВестиУчетОтдельныхДоговоровСКонтрагентамиПС И ЗначениеЗаполненоОбъектСсылка;
		Элементы.ОсновнойШтрихКод.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов");

		Элементы.СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КомиссионерыОтчитываютсяПоОтдельнымДокументамПередачиНаКомиссию");

		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ИспользоватьМагнитныеКартыКлиентов 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов");
		ЭтаФорма.Элементы.НомерКарты.видимость 	= ИспользоватьМагнитныеКартыКлиентов ;
		Элементы.ГруппаПроцент.Видимость 		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");
		Элементы.Изображения.Видимость 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями");

		Если ПараметрыСеанса.НеМожетМенятьЦены Тогда
			Элементы.ВидЦен.Доступность 		= ЛОЖЬ;
			Элементы.ПроцентСкидки.Доступность 	= ЛОЖЬ;
			Элементы.Процент15.Видимость 		= ЛОЖЬ;
			Элементы.Процент5.Видимость 		= ЛОЖЬ;
		КонецЕсли;

		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ОбновитьДанныеОДолгеНаСервере();
		РодительПриИзмененииНаСервере();
		Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского");

		Если ПоддержкаДругихЯзыков
			И ЗначениеЗаполненоОбъектСсылка Тогда

			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		Иначе
			Наименование = Объект.Наименование;
			НаименованиеДляПечати = Объект.НаименованиеДляПечати;
		КонецЕсли;

		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
			Элементы.НаименованияДляПечатиНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияДляПечатиНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
			Элементы.ЯзыкОбщения.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.ЯзыкОбщения.СписокВыбора, , , ИСТИНА);
			Элементы.ЯзыкДокументов.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.ЯзыкДокументов.СписокВыбора, , ИСТИНА);
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегионыДляУчетаСтранАЛокацииГородов") Тогда
			Элементы.Регион.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Страна");
			Элементы.Локация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Город");
		КонецЕсли;

		Элементы.ГруппаДанныхФизическогоЛица.Видимость = НЕ Объект.ПравовойСтатус = ПредопределенноеЗначение("Перечисление.ПравовойСтатус.ЮрЛицо")
		И НЕ Объект.ПравовойСтатус = ПредопределенноеЗначение("Перечисление.ПравовойСтатус.ЮрЛицоНеРезидент");

		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ДокументыКлиента);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ЗаказыКлиента);
		ОпределитьСотрудникиКлиента();

		Если ПараметрыСеанса.ВерсияПриложения < 803050000
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда

			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.ЭтоСотрудник.ВидФлажка = ВидФлажка.Флажок;	");
			КонецЕсли;
		КонецЕсли;

		Элементы.ОсновнаяВалюта.ТолькоПросмотр = ЗначениеЗаполненоОбъектСсылка И УКонтрагентаЕстьРасчеты;
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПроверитьДеньРождения()

	Если ЗначениеЗаполнено(Объект.ДатаРождения)
		И месяц(Объект.ДатаРождения) = Месяц(ОбщийМодульСервисСервер.ПользователяТекущаяДата())
		И День(Объект.ДатаРождения) = День(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) Тогда

		Элементы.ДатаРожденияТорт.Видимость = ИСТИНА;
	Иначе
		Элементы.ДатаРожденияТорт.Видимость = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуТекстаЭтикетки(Команда)
	ПроверитьФормулуТекстаЭтикеткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуТекстаЭтикеткиНаСервере()

	Если ЗначениеЗаполнено(Объект.ФормулаТекстаЭтикетки) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаТекстаЭтикетки.Формула);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Процент15(Команда)

	Объект.ПроцентСкидки = 15;

КонецПроцедуры

&НаКлиенте
Процедура Процент5(Команда)

	Объект.ПроцентСкидки = 5;

КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении(Элемент)

	РегионПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура РегионПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ЯзыкДокументов)
		И ЗначениеЗаполнено(Объект.Регион)
		И ЗначениеЗаполнено(Объект.Регион.ЯзыкДокументов) Тогда

		Объект.ЯзыкДокументов = Объект.Регион.ЯзыкДокументов;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ЯзыкОбщения)
		И ЗначениеЗаполнено(Объект.Регион)
		И ЗначениеЗаполнено(Объект.Регион.ЯзыкОбщения) Тогда

		Объект.ЯзыкОбщения = Объект.Регион.ЯзыкОбщения;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента10НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("10", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента10Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("10", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента11НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("11", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента11Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("11", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента12НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("12", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента12Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("12", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента13НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("13", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента13Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("13", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента14НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("14", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента14Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("14", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента15НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("15", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента15Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("15", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("1", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента1Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("1", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("2", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента2Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("2", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("3", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента3Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("3", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("4", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента4Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("4", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("5", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента5Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("5", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("6", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента6Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("6", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента7НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("7", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента7Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("7", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента8НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("8", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента8Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("8", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента9НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьВыборДопРеквизитаНГ("9", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитКлиента9Очистка(Элемент, СтандартнаяОбработка)

	ОбработатьОчисткуДопРеквизитаНГ("9", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()

	Элементы.ПроцентСкидки.ТолькоПросмотр 	= ЛОЖЬ;
	Элементы.Процент5.Видимость 			= ИСТИНА;
	Элементы.Процент15.Видимость 			= ИСТИНА;
	Элементы.ВидЦен.ТолькоПросмотр 			= ЛОЖЬ;
	Родитель = Объект.Родитель;

	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ЗначениеЗаполнено(Родитель.ВидЦен) Тогда
			Элементы.ВидЦен.ТолькоПросмотр = ИСТИНА;
			Элементы.ВидЦен.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен группы клиентов");

			Если НЕ Объект.ВидЦен = Родитель.ВидЦен Тогда
				Объект.ВидЦен = Родитель.ВидЦен;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Объект.Родитель.ПроцентСкидки = 0 Тогда
			Элементы.ПроцентСкидки.ТолькоПросмотр 	= ИСТИНА;
			Элементы.Процент5.Видимость 			= ЛОЖЬ;
			Элементы.Процент15.Видимость 			= ЛОЖЬ;

			Если НЕ Объект.ПроцентСкидки = Родитель.ПроцентСкидки Тогда
				Объект.ПроцентСкидки = Родитель.ПроцентСкидки;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Объект.Родитель.СрокОплатыВДняхПоУмолчанию)
			И Объект.СрокОплатыВДняхПоУмолчанию = 0 Тогда

			Объект.СрокОплатыВДняхПоУмолчанию = Объект.Родитель.СрокОплатыВДняхПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеСобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИмяПолучателя(Команда)
	Объект.ИмяПолучателя = Наименование;
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)

	НеПоказыватьТаблицыСправа = НЕ НеПоказыватьТаблицыСправа;
	ВидимостьТаблицСправа();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДоговор(Команда)

	ПараметрыДляФормы = Новый Структура("КлиентПоставщик", Объект.Ссылка);
	ОткрытьФорму("Справочник.Договора.ФормаОбъекта", ПараметрыДляФормы);
	СоздатьНовыйДоговорНаСервере();

КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДоговорНаСервере()
	Элементы.ДоговораКлиента.Видимость = ПараметрыСеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС И НЕ ОбщийМодульСервер.ЧислоДоговоровСКонтрагентом(Объект.Ссылка) = 0;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗаказ(Команда)

	ПараметрыДляФормы = Новый Структура("КлиентПоставщик", Объект.Ссылка);
	ОткрытьФорму("Документ.РасходыТовара.ФормаОбъекта", ПараметрыДляФормы);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОповещение()

	ТекущийЭлементСписка = Элементы.Изображения.ТекущаяСтрока;

	Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ТекущийЭлементСписка);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		Элементы.СсылкаНаИзображение.Видимость    = НЕ СтруктураИзображения.ИзображениеВБазеДанных;
		Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;

		Если СтруктураИзображения.РазмерПриОтображении = 1 Тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
		ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 2 Тогда

			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
		ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 3 Тогда

			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
		ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 4 Тогда

			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
		ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 5 Тогда

			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьАдресМестонахождения(Команда)

	Если ПустаяСтрока(Объект.Адрес) Тогда
		СформироватьАдресЗавершениеФрагмент();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьАдресЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы хотите сформировать адрес заново?"), РежимДиалогаВопрос.ДаНет, , , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формирование адреса"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьАдресЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьАдресЗавершениеФрагмент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьАдресЗавершениеФрагмент()
	Объект.Адрес = ОбщийМодульКлиент.СформироватьАдресМестонахождения(Объект.Регион, Объект.Локация, Объект.ПочтовыйИндекс, Объект.ЯзыкДокументов);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСложноеПолноеНаименование(Команда)

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета") = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Украина") Тогда
		ТекстМФО = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("МФО");
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета") = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Россия") Тогда
		ТекстМФО = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("БИК");
	КонецЕсли;

	Объект.НаименованиеДляПечати = "" + Объект.Наименование +
	?(ЗначениеЗаполнено(Объект.ИНН), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИНН") + " " + СокрЛП(Объект.ИНН), "") +
	?(ЗначениеЗаполнено(Объект.КПП), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КПП") + " " + СокрЛП(Объект.КПП), "") +
	?(ЗначениеЗаполнено(Объект.Адрес), ", " + СокрЛП(Объект.Адрес), "") +
	?(ЗначениеЗаполнено(Объект.НомерСчета), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("р/с") + " " + СокрЛП(Объект.НомерСчета), "") +
	?(ЗначениеЗаполнено(Объект.НаименованиеБанка), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в банке") + " " + СокрЛП(Объект.НаименованиеБанка), "") +
	?(ЗначениеЗаполнено(Объект.МФО), ", " + ТекстМФО + " " + СокрЛП(Объект.МФО), "") +
	?(ЗначениеЗаполнено(Объект.КорреспондентскийСчет), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("к/с") + " " + СокрЛП(Объект.КорреспондентскийСчет), "");
	НаименованиеДляПечати = Объект.НаименованиеДляПечати;

КонецПроцедуры

&НаКлиенте
Процедура Телефон2ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура Телефон3ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура Телефон4ПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	ОбновитьВидимостьТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)

	Объект.Фамилия = ТРег(Объект.Фамилия);
	Объект.Имя = ТРег(Объект.Имя);
	Объект.Отчество = ТРег(Объект.Отчество);
	НаименованиеНовое = Объект.Фамилия + " ";
	Имя = СокрЛП(Объект.Имя);

	Если СтрДлина(Имя) = 1 Тогда
		НаименованиеНовое = НаименованиеНовое + ВРег(Имя) + ".";
	Иначе
		НаименованиеНовое = НаименованиеНовое + Имя;
	КонецЕсли;

	НаименованиеНовое = НаименованиеНовое + " ";
	Отчество = СокрЛП(Объект.Отчество);
	Если СтрДлина(Отчество) = 1 Тогда
		НаименованиеНовое = НаименованиеНовое + ВРег(Отчество) + ".";
	Иначе
		НаименованиеНовое = НаименованиеНовое + Отчество;

		Если Прав(ВРег(СокрЛП(Отчество)), 2) = "НА" Тогда
			Объект.Пол = ПредопределенноеЗначение("Перечисление.Пол.Женский");
		ИначеЕсли Прав(ВРег(СокрЛП(Отчество)), 2) = "ИЧ"
			ИЛИ Прав(ВРег(СокрЛП(Отчество)), 2) = "ІЧ" Тогда

			Объект.Пол = ПредопределенноеЗначение("Перечисление.Пол.Мужской");
		КонецЕсли;
	КонецЕсли;

	НаименованиеНовое = СокрЛП(НаименованиеНовое);

	Если НЕ НаименованиеНовое = Наименование Тогда
		Наименование = НаименованиеНовое;
		Объект.Наименование = Наименование;
		НаименованиеИзменяли = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	Объект.ЭлектроннаяПочта = СокрЛП(Объект.ЭлектроннаяПочта);
КонецПроцедуры

&НаКлиенте
Процедура ЭтоСотрудникПриИзменении(Элемент)
	ЭтоСотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЭтоСотрудникПриИзмененииНаСервере()

	ВидЦенСотрудников = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");

	Если ЗначениеЗаполнено(ВидЦенСотрудников)
		И Объект.ЭтоСотрудник Тогда

		Объект.ВидЦен = ВидЦенСотрудников;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;

	Если НЕ ПустаяСтрока(Объект.Адрес)
		И ПустаяСтрока(Объект.ЮридическийАдрес) Тогда

		Объект.ЮридическийАдрес = Объект.Адрес;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЯзыкДокументовПриИзменении(Элемент)

	Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка макета текстов перевода.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	ЯзыкДокументовПриИзмененииНаСервере(Объект.ЯзыкДокументов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЯзыкДокументовПриИзмененииНаСервере(Знач ОбъектЯзыкДокументов)
	ОбщийМодульТекстСервер.ЗагрузитьТекстыОпределенногоЯзыкаИзМакета(ОбъектЯзыкДокументов, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;
	Объект.ДатаРождения  = ОбщийМодульКлиент.СпроситьУПользователяДату(Объект.ДатаРождения, , Объект.Наименование, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура Взаиморасчеты(Команда)

	ПараметрыОтчета = Новый Структура("ОтборПоКлиенту", Объект.Ссылка);
	ОткрытьФорму("Отчет.ВедомостьПоВзаиморасчетамСКлиентами.ФормаОбъекта", ПараметрыОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ВзаиморасчетыВВалюте(Команда)

	ПараметрыОтчета = Новый Структура("ОтборПоКонтрагенту", Объект.Ссылка);
	ОткрытьФорму("Отчет.ВедомостьПоВзаиморасчетамВВалюте.ФормаОбъекта", ПараметрыОтчета);

КонецПроцедуры
