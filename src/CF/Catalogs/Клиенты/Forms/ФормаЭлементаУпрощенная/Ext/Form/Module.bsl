//sza140602-1646 : 
//sza130905-1706 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000600", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда 		
		
		ОбъектСсылка = Объект.Ссылка;
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		ИспользоватьМеханизмОтсрочкиПлатежа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		
		ОбъектРодитель = Объект.Родитель;
		Если ЗначениеЗаполнено(ОбъектРодитель) Тогда
			Если ЗначениеЗаполнено(ОбъектРодитель.ВидЦен) Тогда
				
				Элементы.ВидЦен.ТолькоПросмотр = Истина;
				Элементы.ВидЦен.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен Группы Клиентов:");
				
				Если не Объект.ВидЦен = ОбъектРодитель.ВидЦен Тогда
					Объект.ВидЦен = ОбъектРодитель.ВидЦен;
				КонецЕсли;				
			КонецЕсли;
			
			Если ИспользоватьМеханизмОтсрочкиПлатежа
				И ЗначениеЗаполнено(ОбъектРодитель.СрокОплатыВДняхПоУмолчанию)
				И Объект.СрокОплатыВДняхПоУмолчанию = 0 Тогда
				
				Объект.СрокОплатыВДняхПоУмолчанию = ОбъектРодитель.СрокОплатыВДняхПоУмолчанию;
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ПравовойСтатус) Тогда
				Объект.ПравовойСтатус = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПравовойСтатусПоУмолчанию");
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(Объект.Регион) Тогда
				Объект.Регион = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегионПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособДоставки) Тогда
				Объект.СпособДоставки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СпособДоставкиПоУмолчанию");
			КонецЕсли;
			
			ЭтаФорма.Элементы.ГруппаВзаиморасчеты.видимость = ложь;
			ЭтаФорма.Элементы.ДокументыКлиента.Видимость 	= ложь;
			
			Если ИспользоватьМеханизмОтсрочкиПлатежа
				И НЕ ЗначениеЗаполнено(Объект.СрокОплатыВДняхПоУмолчанию) ТОгда
				
				Объект.СрокОплатыВДняхПоУмолчанию = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЧислоДнейОтсрочкиКлиентамПоУмолчанию");				
			КонецЕсли;
			
		Иначе
			ПроверитьДеньРождения();
			
		КонецЕсли;
		
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		ИспользоватьМагнитныеКартыКлиентов 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов");
		ЭтаФорма.Элементы.НомерКарты.видимость 	= ИспользоватьМагнитныеКартыКлиентов ;
		
		элементы.ГруппаПроцент.Видимость 		= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");
		
		Если параметрысеанса.НеМожетМенятьЦены Тогда
			Элементы.ВидЦен.Доступность 		= Ложь;
			Элементы.ПроцентСкидки.Доступность 	= Ложь;
			Элементы.Процент15.Видимость 		= Ложь;
			Элементы.Процент5.Видимость 		= Ложь;
		КонецЕсли;
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		
		РодительПриИзмененииНаСервере();
		Элементы.ПроцентСкидки.Видимость 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");
		Элементы.ОсновнойШтрихКод.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов");
		Элементы.СрокОтчетаКомиссионераПоОтдельномуДокументуПередачиТоваров.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КомиссионерыОтчитываютсяПоОтдельнымДокументамПередачиНаКоммиссию");
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") ;
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		иначе
			Наименование = объект.Наименование;
			НаименованиеДляПечати = Объект.НаименованиеДляПечати;
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	
	Если ИспользоватьПодключаемоеОборудование 
		И ИспользоватьМагнитныеКартыКлиентов
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента () Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	если ЗначениеЗаполнено(объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;				
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование 
		и ИспользоватьМагнитныеКартыКлиентов Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор,ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИспользоватьМагнитныеКартыКлиентов
		и Источник = "ПодключаемоеОборудование" 
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "TracksData" Тогда
			Если Параметр[1][3] <> Неопределено Тогда
				Объект.НомерКарты = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
			Иначе
				Объект.НомерКарты = Параметр[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов") тогда
		
		Если не объект.НомерКарты = ""
			и НЕ ПодключаемоеОборудованиеДСервер.ПроверитьУникальностьМагнитногоКода(ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.Клиенты"))) Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карта с данным номером уже зарегистрирована в системе");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "НомерКарты");
			Отказ = Истина;
		КонецЕсли;
		
		АдресЭП = Объект.ЭлектроннаяПочта;
		Если НЕ ПодключаемоеОборудованиеДСервер.ПроверитьКорректностьЗаписиАдресаЭлектроннойПочты(АдресЭП) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Указан некорректный адрес электронной почты");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Элементы.ЭлектроннаяПочта");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)	
	Объект.ЭлектроннаяПочта = СокрЛП(Объект.ЭлектроннаяПочта);	
КонецПроцедуры

&НаКлиенте
Процедура Процент5(Команда)
	Объект.ПроцентСкидки = 5;
КонецПроцедуры

&НаКлиенте
Процедура Процент15(Команда)
	Объект.ПроцентСкидки = 15;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулуТекстаЭтикетки(Команда)
	ПроверитьФормулуТекстаЭтикеткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормулуТекстаЭтикеткиНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ФормулаТекстаЭтикетки) Тогда
		ОбщийМодульСервер.ПроверитьФормулу(Объект.ФормулаТекстаЭтикетки.Формула);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	элементы.ПроцентСкидки.ТолькоПросмотр 	= ложь;
	элементы.Процент5.Видимость 			= истина;
	элементы.Процент15.Видимость 			= истина;
	элементы.ВидЦен.ТолькоПросмотр 			= ложь;
	
	Родитель = Объект.Родитель;
	
	Если ЗначениеЗаполнено(Родитель) тогда
		
		если ЗначениеЗаполнено(Родитель.ВидЦен) Тогда
			
			элементы.ВидЦен.ТолькоПросмотр 	= истина;
			если не Объект.ВидЦен = Родитель.ВидЦен тогда
				Объект.ВидЦен = Родитель.ВидЦен;				
			КонецЕсли;
		КонецЕсли;	
		
		Если не объект.Родитель.ПроцентСкидки = 0 Тогда
			
			элементы.ПроцентСкидки.ТолькоПросмотр 	= истина;
			элементы.Процент5.Видимость 			= ложь;
			элементы.Процент15.Видимость 			= ложь;
			
			если не объект.ПроцентСкидки = Родитель.ПроцентСкидки тогда
				объект.ПроцентСкидки = Родитель.ПроцентСкидки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Родитель.СрокОплатыВДняхПоУмолчанию)
			И Объект.СрокОплатыВДняхПоУмолчанию = 0 Тогда
			
			Объект.СрокОплатыВДняхПоУмолчанию = Объект.Родитель.СрокОплатыВДняхПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоСотрудникПриИзменении(Элемент)
	ЭтоСотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЭтоСотрудникПриИзмененииНаСервере()
	
	ВидЦенСотрудников = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
	
	Если ЗначениеЗаполнено(ВидЦенСотрудников)
		И Объект.ЭтоСотрудник Тогда
		
		объект.ВидЦен = ВидЦенСотрудников;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) 
		и ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда
		
		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере1(ТекущийОбъект, ПараметрыЗаписи)
	
	если ПоддержкаДругихЯзыков тогда
		если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);	
			КонецЦикла;
		КонецЕсли;
		
	конецесли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	ПроверитьДеньРождения();
КонецПроцедуры

&НаСервере
Процедура ПроверитьДеньРождения()
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения)
		и месяц(Объект.ДатаРождения) = Месяц(ОбщийМодульСервисСервер.ПользователяТекущаяДата())
		и День(Объект.ДатаРождения) = День(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) Тогда
		
		Элементы.ДатаРожденияТорт.Видимость = Истина;
	Иначе
		Элементы.ДатаРожденияТорт.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗаказ(Команда)
	
	ПараметрыДляФормы = Новый Структура("КлиентПоставщик", Объект.Ссылка);
	ПараметрыДляФормы.Вставить("ЭтоЗаказ", Истина);
	ФормаЗаказа = ПолучитьФорму("Документ.РасходыТовара.ФормаОбъекта", ПараметрыДляФормы);
	ФормаЗаказа.отКрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)
	Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	объект.Наименование = Наименование;
	НаименованиеИзменяли = Истина;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИмяПолучателя(Команда)
	Объект.ИмяПолучателя = Наименование;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСложноеПолноеНаименование(Команда)
	
	Объект.НаименованиеДляПечати = "" + Объект.Наименование + 
	?(ЗначениеЗаполнено(Объект.ИНН), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИНН") + " " + СокрЛП(Объект.ИНН), "") +
	?(ЗначениеЗаполнено(Объект.Адрес), ", " + СокрЛП(Объект.Адрес), "") +
	?(ЗначениеЗаполнено(Объект.НомерСчета), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("р/с") + " " + СокрЛП(Объект.НомерСчета), "") +
	?(ЗначениеЗаполнено(Объект.НаименованиеБанка), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в банке") + " " + СокрЛП(Объект.НаименованиеБанка), "") +
	?(ЗначениеЗаполнено(Объект.МФО), ", " + СокрЛП(Объект.МФО), "") +
	?(ЗначениеЗаполнено(Объект.КорреспондентскийСчет), ", " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("к/с") + " " + СокрЛП(Объект.КорреспондентскийСчет), "");
	
	НаименованиеДляПечати = Объект.НаименованиеДляПечати;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры
