// sza140619-1018
// sza130905-1654 : 

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаСервереБезКонтекста
Функция  ОбновитьВсегоДолгКлиентов(Знач ПолучитьОтсроченныеОстатки = ЛОЖЬ)
	
	ВсегоДолгКлиентов = 0;
	
	Запрос = Новый Запрос;
	Если НЕ ПолучитьОтсроченныеОстатки Тогда
		Запрос.Текст = "ВЫБРАТЬ СУММА(Расчеты.СуммаОстаток) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Расчеты.Остатки(&ТекущаяДата, ) КАК Расчеты";	
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ СУММА(Расчеты.СуммаОстаток) КАК СуммаОстаток
		|ИЗ РегистрНакопления.РасчетыСОтсрочкой.Остатки(&ТекущаяДата, ) КАК Расчеты";	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВсегоДолгКлиентов = ВсегоДолгКлиентов + ВыборкаДетальныеЗаписи.суммаОстаток;
		КонецЦикла;                        	
	КонецЕсли;
	
	Возврат ВсегоДолгКлиентов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказательДолга(Команда)
	
	ВсегоДолгКлиентов = ОбновитьВсегоДолгКлиентов();
	ВсегоПросрочено	  = ОбновитьВсегоДолгКлиентов(ИСТИНА);
	Элементы.Список.Обновить();
	Элементы.ВсегоДолгКлиентов.Видимость 			= не ВсегоДолгКлиентов = 0;
	Элементы.ВсегоПросрочено.Видимость 				= не ВсегоПросрочено = 0;
	Элементы.НаименованиеОсновнойВалюты.Видимость 	= (не ВсегоДолгКлиентов = 0) или (не ВсегоПросрочено = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИспользоватьМагнитныеКартыКлиентов
		И Источник = "ПодключаемоеОборудование"
		И ВводДоступен ()
		И ИмяСобытия = "TracksData" Тогда
		
		ПолученКодИзСМК(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Параметр)
	
	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;
	
	ПолучитьКлиента(МКод);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлиента(Знач МКод);
	
	Клиент = ПолучитьКлиентаНаСервере(МКод);	
	
	Если ЗначениеЗаполнено(клиент) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", Клиент);
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаЭлемента", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьКлиентаНаСервере(Знач МКод)
	
	Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);
	Если Клиент <> Неопределено Тогда
		Возврат Клиент;
		
	Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карта не найдена.");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование 
		И ИспользоватьМагнитныеКартыКлиентов Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И ИспользоватьМагнитныеКартыКлиентов
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СчитывательМагнитныхКарт");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");
	
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000500", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ИспользоватьМагнитныеКартыКлиентов 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		НаименованиеОсновнойВалюты 			 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		ИспользоватьМеханизмОтсрочкиПлатежа	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа");
		
		ВсегоДолгКлиентов = ОбновитьВсегоДолгКлиентов();
		ВсегоПросрочено	  = ОбновитьВсегоДолгКлиентов(ИСТИНА);
		
		Список.Параметры.УстановитьЗначениеПараметра("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		
		Элементы.ВсегоДолгКлиентов.Видимость 			= не ВсегоДолгКлиентов = 0;
		Элементы.ВсегоПросрочено.Видимость 				= не ВсегоПросрочено = 0;
		Элементы.НаименованиеОсновнойВалюты.Видимость 	= (не ВсегоДолгКлиентов = 0) или (не ВсегоПросрочено = 0);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегионыДляУчетаСтранАЛокацииГородов") Тогда
			Элементы.Регион.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Страна");
			Элементы.Локация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Город");
		КонецЕсли;
		
		Попытка
		Элементы.Просрочен.Видимость = ИспользоватьМеханизмОтсрочкиПлатежа;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
