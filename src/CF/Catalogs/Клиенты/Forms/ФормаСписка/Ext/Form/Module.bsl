// sza151215-0106
// sza140916-0104 допрекв
// sza140509-0145
// sza130905-1654 :

&НаКлиенте
Перем СтруктураГруппыПолей;

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()

	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;

	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Телефон",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"ОКПО",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"ИНН",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Адрес",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"ЭлектроннаяПочта",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"all",
	"",
	ВидСравненияКомпоновкиДанных.Равно,	,
	ЛОЖЬ, , ИСТИНА, СтруктураГруппыПолей
	);

	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА, , ?(ПолеПоиска = "all", ИСТИНА, ЛОЖЬ), СтруктураГруппыПолей
		);

		Если ДинамическийСписокПуст()
			И НЕ ПолеПоиска = "Телефон"
			И НЕ ПолеПоиска = "ИНН"
			И НЕ ПолеПоиска = "ОКПО" Тогда

			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ИСТИНА, , ?(ПолеПоиска = "all", ИСТИНА, ЛОЖЬ), СтруктураГруппыПолей
			);
			Элементы.Список.Обновить();

			Если ДинамическийСписокПуст() Тогда
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ИСТИНА, , ?(ПолеПоиска = "all", ИСТИНА, ЛОЖЬ), СтруктураГруппыПолей
				);
				Элементы.Список.Обновить();

				Если НЕ ДинамическийСписокПуст() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ВыводитьСписокКлиентовСОтдельнымОкномГрупп Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуКлиентов(Команда)

	ТекущиеДанные = Элементы.ИерархияКлиентов.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппа = ТекущиеДанные.Ссылка;
	Иначе
		ТекущаяГруппа = Неопределено;
	КонецЕсли;

	ПараметрыНовогоКлиента = Новый Структура("Родитель", ТекущаяГруппа);
	ОткрытьФорму("Справочник.Клиенты.ФормаГруппы", ПараметрыНовогоКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлиента(Команда)

	ТекущиеДанные = Элементы.ИерархияКлиентов.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяГруппа = ТекущиеДанные.Ссылка;
	Иначе
		ТекущаяГруппа = Неопределено;
	КонецЕсли;

	ПараметрыНовогоКлиента = Новый Структура("Родитель", ТекущаяГруппа);
	ОткрытьФорму("Справочник.Клиенты.ФормаОбъекта", ПараметрыНовогоКлиента);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияКлиентовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииКлиентов", 0.2, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Функция   ДинамическийСписокПуст()

	Возврат Элементы.Список.ТекущиеДанные = Неопределено;

КонецФункции // НетНичего

&НаКлиенте
Функция   ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)

	Результат = ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
	Если КодЭлемента <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаЭлемента", ПараметрыОткрытия);
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод)

	КодЭлемента = ОбщийМодульСервер.НайтиКонтрагентаПоШтрихКоду(ТекКод, ИСТИНА);

	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИспользоватьМагнитныеКартыКлиентов
		И Источник = "ПодключаемоеОборудование"
		И ВводДоступен () Тогда

		Если ИмяСобытия = "TracksData" Тогда
			ПолученКодИзСМК(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтаФорма, Новый Структура("ИмяСобытия, Источник, Параметр", ИмяСобытия, Источник, Параметр)), Параметр);

            Возврат;
		КонецЕсли;
	КонецЕсли;

	ОбработкаОповещенияФрагмент(ИмяСобытия, Источник, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	Источник = ДополнительныеПараметры.Источник;
	Параметр = ДополнительныеПараметры.Параметр;
	ОбработкаОповещенияФрагмент(ИмяСобытия, Источник, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Источник, Знач Параметр)

	Перем ТекКод;

	Если ИспользоватьШтрихКодыДляИдентификацииКонтрагентов
		И Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			Если НЕ ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМК(Знач Оповещение, Параметр)

	Если Параметр[1][3] <> Неопределено Тогда
		МКод = Параметр[1][3][0].ДанныеДорожек[0].ЗначениеПоля;
	Иначе
		МКод = Параметр[0];
	КонецЕсли;

	ПолучитьКлиента(Новый ОписаниеОповещения("ПолученКодИзСМКЗавершение", ЭтаФорма, Новый Структура("Оповещение", Оповещение)), МКод);

КонецПроцедуры

&НаКлиенте
Процедура ПолученКодИзСМКЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Оповещение = ДополнительныеПараметры.Оповещение;
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлиента(Знач Оповещение, Знач МКод)

	Клиент = ПолучитьКлиентаНаСервере(МКод);

	Если Клиент <> Неопределено Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения("ПолучитьКлиентаЗавершение", ЭтаФорма, Новый Структура("Оповещение", Оповещение)), Клиент);

        Возврат;
	КонецЕсли;

	ПолучитьКлиентаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлиентаЗавершение(ДополнительныеПараметры) Экспорт

	Оповещение = ДополнительныеПараметры.Оповещение;
	ПолучитьКлиентаФрагмент(Оповещение);

КонецПроцедуры

&НаСервере
Функция   ПолучитьКлиентаНаСервере(Знач МКод)

	Клиент = ПодключаемоеОборудованиеДСервер.НайтиКлиентаПоМК(МКод);

	Если Клиент <> Неопределено Тогда
		Возврат Клиент;
	Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карта не найдена.") + " " + МКод;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПолучитьКлиентаФрагмент(Знач Оповещение)
	ВыполнитьОбработкуОповещения(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю

	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;

	Если ВыводитьСписокКлиентовСОтдельнымОкномГрупп Тогда
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		"ЭтоГруппа",
		ЛОЖЬ,
		ВидСравненияКомпоновкиДанных.Равно,
		, ИСТИНА
		);
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                        // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

	Если ИспользоватьПодключаемоеОборудование
		И (ИспользоватьМагнитныеКартыКлиентов или ИспользоватьШтрихКодыДляИдентификацииКонтрагентов) Тогда

		ПоддерживаемыеТипыВО = Новый Массив ();

		Если ИспользоватьМагнитныеКартыКлиентов Тогда
			ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		КонецЕсли;

		Если ИспользоватьШтрихКодыДляИдентификацииКонтрагентов Тогда
			ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		КонецЕсли;

		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                   // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если ИспользоватьПодключаемоеОборудование
		И (ИспользоватьМагнитныеКартыКлиентов ИЛИ ИспользоватьШтрихКодыДляИдентификацииКонтрагентов)
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		Если ИспользоватьМагнитныеКартыКлиентов Тогда
			ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		КонецЕсли;

		Если ИспользоватьШтрихКодыДляИдентификацииКонтрагентов Тогда
			ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		КонецЕсли;

		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов");

	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьКлиентовИзображениями")
		И ИспользуютсяИзображения Тогда

		ИспользуютсяИзображения = ЛОЖЬ;
	КонецЕсли;

	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегионРегламентированногоУчета") = ПредопределенноеЗначение("Перечисление.РегионыРегламентированногоУчета.Украина") Тогда
		Элементы.ОКПО.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЕДРПОУ");
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)    // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000500", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Телефон", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Телефону"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("ЭлектроннаяПочта", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По email"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Адрес", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Адресу"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("ОКПО", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По ОКПО"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("ИНН", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По ИНН"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("all", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование, телефон, email"));
		ФормироватьОписаниеТаблицОбъектовДляИхСписков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков");

		Элементы.ПроВидыДеятельности.Видимость = ФормироватьОписаниеТаблицОбъектовДляИхСписков
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВидовДеятельности");

		Элементы.ПроЗакрепленныеСотрудники.Видимость = ФормироватьОписаниеТаблицОбъектовДляИхСписков
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников");

		ИспользоватьШтрихКодыДляИдентификацииКонтрагентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКодыДляИдентификацииКонтрагентов");
		ИспользоватьМагнитныеКартыКлиентов 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМагнитныеКартыКлиентов");
		ИспользоватьПодключаемоеОборудование 	= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Элементы.ДолгОтображаетсяНаТекущийМомент.Видимость = ТекущаяДата() > ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегионыДляУчетаСтранАЛокацииГородов") Тогда
			Элементы.Регион.Заголовок  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Страна");
			Элементы.Локация.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Город");
		КонецЕсли;

		ВыводитьСписокКлиентовСОтдельнымОкномГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьСписокКлиентовСОтдельнымОкномГрупп");
		Элементы.ИерархияКлиентов.Видимость = ВыводитьСписокКлиентовСОтдельнымОкномГрупп;
		Элементы.Группа.Видимость = ВыводитьСписокКлиентовСОтдельнымОкномГрупп;
		Если ВыводитьСписокКлиентовСОтдельнымОкномГрупп Тогда
			Элементы.Список.Отображение = ОтображениеТаблицы.Список;
			Элементы.Группа.Видимость = ИСТИНА;
			Элементы.ФормаСоздать.Видимость = ЛОЖЬ;
			Элементы.ФормаДобавитьКлиента.Видимость = ИСТИНА;
			Элементы.ФормаДобавитьКлиента.КнопкаПоУмолчанию = ИСТИНА;
			Элементы.ФормаСоздатьГруппу.Видимость = ЛОЖЬ;
			Элементы.ФормаДобавитьГруппуКлиентов.Видимость = ИСТИНА;
		КонецЕсли;

		ИспользоватьДополнительныеРеквизиты = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыСправочникаКлиентов");

		Если ИспользоватьДополнительныеРеквизиты Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыКлиентов();
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;

				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитКлиента" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");

					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Элементы.РасчетыВВалюте.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Знач ТекКод)

	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент не найден!") + " " + ТекКод;
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по штрихкоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОповещение", 0.2, ИСТИНА);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОповещение()

	Если ИспользуютсяИзображения Тогда
		ПодСсылку = "";
		ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
			ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);

			Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда
				СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
				ПодСсылку = СтруктураИзображения.ПодСсылку;
				Элементы.СсылкаНаИзображение.Видимость 	  = НЕ СтруктураИзображения.ИзображениеВБазеДанных;
				Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;

				Если СтруктураИзображения.РазмерПриОтображении = 1 Тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
				ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 2 Тогда

					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
				ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 3 Тогда

					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
				ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 4 Тогда

					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
				ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 5 Тогда

					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПодобратьЗначениеПоВведенномуТексту(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииКлиентов()

	ТекущиеДанные = Элементы.ИерархияКлиентов.ТекущиеДанные;

	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанныеНавигации = ТекущиеДанные.Ссылка;
		Элементы.Группа.Видимость = ЛОЖЬ;
	Иначе
		ТекущиеДанныеНавигации = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
		Элементы.Группа.Видимость = ИСТИНА;
	КонецЕсли;

	Если НЕ ТекущийРодитель = ТекущиеДанныеНавигации Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		ТекущийРодитель = ТекущиеДанныеНавигации;
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		"Родитель",
		ТекущиеДанныеНавигации,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		, ЗначениеЗаполнено(ТекущийРодитель)
		);

		Если ТекущиеДанныеНавигации <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанныеНавигации) Тогда
				Элементы.Наименование.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
			Иначе
				Элементы.Наименование.Заголовок = СокрЛП(ТекущиеДанныеНавигации);
			КонецЕсли;
		Иначе
			Элементы.Наименование.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

СтруктураГруппыПолей = Новый Структура;
СтруктураГруппыПолей.Вставить("ТипГруппы", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
ЭлементыГруппы = Новый Массив;
ЭлементыГруппы.Добавить("Наименование");
ЭлементыГруппы.Добавить("Телефон");
ЭлементыГруппы.Добавить("ЭлектроннаяПочта");
СтруктураГруппыПолей.Вставить("ЭлементыГруппы", ЭлементыГруппы);
