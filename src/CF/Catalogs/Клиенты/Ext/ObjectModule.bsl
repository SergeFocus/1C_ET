//sza141121-1752 
//sza140924-1156
//sza140411-1653 : 
//sza130915-1735 : 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Поставщики") Тогда
		// Заполнение шапки
		Адрес 				= ?(ПустаяСтрока(ДанныеЗаполнения.ЮридическийАдрес), ДанныеЗаполнения.Адрес, ДанныеЗаполнения.ЮридическийАдрес);
		ВидЦен 				= ДанныеЗаполнения.ВидЦен;
		Комментарий 		= ДанныеЗаполнения.Комментарий;
		МФО 				= ДанныеЗаполнения.МФО;
		Наименование 		= ДанныеЗаполнения.Наименование;
		НаименованиеБанка 	= ДанныеЗаполнения.НаименованиеБанка;
		НаименованиеДляПечати = ДанныеЗаполнения.НаименованиеДляПечати;
		НомерСчета 			= ДанныеЗаполнения.НомерСчета;
		ОКПО 				= ДанныеЗаполнения.ОКПО;
		ОсновнаяВалюта 		= ДанныеЗаполнения.ОсновнаяВалюта;
		ПравовойСтатус 		= ДанныеЗаполнения.ПравовойСтатус;
		Регион 				= ДанныеЗаполнения.Регион;
		Склад 				= ДанныеЗаполнения.Склад;
		Телефон 			= ДанныеЗаполнения.Телефон;
		Телефон2 			= ДанныеЗаполнения.Телефон2;
		Телефон3 			= ДанныеЗаполнения.Телефон3;
		Телефон4 			= ДанныеЗаполнения.Телефон4;
		Телефон5 			= ДанныеЗаполнения.Телефон5;
		ХранилищеДенег 		= ДанныеЗаполнения.ХранилищеДенег;
		ЭлектроннаяПочта 	= ДанныеЗаполнения.ЭлектроннаяПочта;
		ЭтоСотрудник 		= ДанныеЗаполнения.ЭтоСотрудник; 
		ЯзыкОбщения			= ДанныеЗаполнения.ЯзыкОбщения; 
		ЯзыкДокументов   	= ДанныеЗаполнения.ЯзыкДокументов; 
		Локация   			= ДанныеЗаполнения.Локация; 
		СпособДоставки   	= ДанныеЗаполнения.СпособДоставки; 
		КорреспондентскийСчет = ДанныеЗаполнения.КорреспондентскийСчет; 
		ИНН					= ДанныеЗаполнения.ИНН; 
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		// Заполнение шапки
		Адрес 				= ?(ПустаяСтрока(ДанныеЗаполнения.ЮридическийАдрес), ДанныеЗаполнения.Адрес, ДанныеЗаполнения.ЮридическийАдрес);
		ДатаРождения 		= ДанныеЗаполнения.ДатаРождения;
		Комментарий 		= ДанныеЗаполнения.Комментарий;
		Наименование 		= ДанныеЗаполнения.Наименование;
		ОКПО 				= ДанныеЗаполнения.ОКПО;
		Телефон 			= ДанныеЗаполнения.Телефон;
		Телефон2 			= ДанныеЗаполнения.Телефон2;
		Телефон3 			= ДанныеЗаполнения.Телефон3;
		Телефон4 			= ДанныеЗаполнения.Телефон4;
		Телефон5 			= ДанныеЗаполнения.Телефон5;
		ХранилищеДенег 		= ДанныеЗаполнения.ХранилищеДенег;
		ЭлектроннаяПочта 	= ДанныеЗаполнения.ЭлектроннаяПочта;
		ЭтоСотрудник 		= ИСТИНА;
		ИНН					= ДанныеЗаполнения.ИНН;
		ВидЦен 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенДляОтпускаТоваровСобственнымСотрудникам");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ Отказ 
		И НЕ ПометкаУдаления Тогда
		
		Модифицированность = Модифицированность();
		
		Если НЕ ЭтоГруппа 
			И Модифицированность ТОгда
			
			Если НЕ ЗначениеЗаполнено(НаименованиеДляПечати) Тогда
				НаименованиеДляПечати = Наименование;	
			КонецЕсли;
			Если ЗначениеЗаполнено(Родитель) Тогда 
				Если ЗначениеЗаполнено(Родитель.ВидЦен) Тогда
					
					ВидЦен = Родитель.ВидЦен;	
				КонецЕсли;
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
					И НЕ родитель.ПроцентСкидки = 0 тогда
					
					ПроцентСкидки = родитель.ПроцентСкидки;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПравовойСтатус) Тогда
				ПравовойСтатус = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПравовойСтатусПоУмолчанию");
			КонецЕсли;
			
			Отказ = ОбщийМодульСервер.ПроверитьУникальностьОКПО(Отказ, "Клиенты", ОКПО, Ссылка);
			
			Отказ = ОбщийМодульСервер.ПроверитьУникальностьНаименование(Отказ, "Клиенты", Наименование, Ссылка);
			
			Отказ = ОбщийМодульСервер.ПроверитьУникальностьНомераТелефона(Отказ, "Клиенты", Телефон, Ссылка);
			Если НЕ Телефон2 = "" Тогда
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьНомераТелефона(Отказ, "Клиенты", Телефон2, Ссылка);
			КонецЕсли;			
			Если НЕ Телефон3 = "" Тогда
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьНомераТелефона(Отказ, "Клиенты", Телефон3, Ссылка);
			КонецЕсли;			
			Если НЕ Телефон4 = "" Тогда
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьНомераТелефона(Отказ, "Клиенты", Телефон4, Ссылка);
			КонецЕсли;			
			Если НЕ Телефон5 = "" Тогда
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьНомераТелефона(Отказ, "Клиенты", Телефон5, Ссылка);
			КонецЕсли;			
			
		Иначеесли Модифицированность  тогда
			
			Если НЕ Отказ Тогда
				ПроцентСкидкиУстановлен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС"); //и 0! и не ПроцентСкидки = 0;
				
				ЗначениеЗаполненовидцен = ЗначениеЗаполнено(видцен);
				
				Если ЗначениеЗаполнено(Ссылка)
					И (ЗначениеЗаполненоВидЦен
					ИЛИ ПроцентСкидкиУстановлен) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка
					|ИЗ Справочник.Клиенты КАК Клиенты
					|ГДЕ Клиенты.Родитель = &Родитель
					|	И (Клиенты.ВидЦен <> &ВидЦен
					|			ИЛИ &ПроцентСкидкиУстановлен
					|				И Клиенты.ПроцентСкидки <> &ПроцентСкидки)
					|	И Клиенты.ЭтоГруппа = ЛОЖЬ";
					
					Запрос.УстановитьПараметр("Родитель", Ссылка);
					Запрос.УстановитьПараметр("ВидЦен", ВидЦен);  			
					Запрос.УстановитьПараметр("ПроцентСкидки", ПроцентСкидки);	
					
					Запрос.УстановитьПараметр("ПроцентСкидкиУстановлен", ПроцентСкидкиУстановлен);	
					
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						Счетчик  = 0;
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							КлиентОбъект = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
							Если ЗначениеЗаполненовидцен Тогда
								КлиентОбъект.ВидЦен = ВидЦен;
							КонецЕсли;
							
							Если ПроцентСкидкиУстановлен тогда
								КлиентОбъект.ПроцентСкидки = ПроцентСкидки;	
							КонецЕсли;
							КлиентОбъект.Записать();
							Счетчик  = Счетчик  + 1;
						КонецЦикла;
						
						Если НЕ Счетчик =0 Тогда
							
							Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								
								//Сообщение = Новый СообщениеПользователю;
								Если ЗначениеЗаполнено(ВидЦен) Тогда
									Если ПроцентСкидкиУстановлен Тогда
										текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен и Процент скидки назначены для ");
									Иначе
										текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен назначен для ");
									КонецЕсли;				
								Иначе
									текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Процент скидки назначен для ");
								КонецЕсли;
								//Сообщение.Текст = текст + Счетчик + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Клиентов этой группы.");
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(текст + Счетчик + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиентов этой группы."), , Ссылка);
								//Сообщение.Сообщить();	
							КонецЕсли;
							
						КонецЕсли; 	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ отказ
			И ЗначениеЗаполнено(Ссылка)
			И Модифицированность() Тогда
			
			ОбновитьПовторноИспользуемыеЗначения(); //ненаименования на языках, прочее
			
			ОбщийМодульСервер.ПроверитьСменуНаименованияНаТекущемЯзыке(Наименование, Ссылка, , Отказ);
			ОбщийМодульСервер.ПроверитьСменуНаименованияНаТекущемЯзыке(НаименованиеДляПечати, Ссылка, "НаименованиеДляПечати", Отказ);					
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
	НаименованиеДляПечати = "";
КонецПроцедуры
