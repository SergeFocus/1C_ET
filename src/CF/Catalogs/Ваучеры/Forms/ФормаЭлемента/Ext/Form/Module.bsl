// sza150608-0234 
// sza150517-0444 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если НЕ ВаучерУжеИспользован Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьПолученныйШКНаклиентеЗавершение", ЭтаФорма, Новый Структура("ТекКод", ТекКод)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код для этого ваучера?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекКод = ДополнительныеПараметры.ТекКод;	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Объект.ШтрихКод = ТекКод;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	ОбновитьВидимостьВаучера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000610", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ВаучерыСкидочнымиКартами 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыСкидочнымиКартами");
		ВаучерыНакопительнымиКартами = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыНакопительнымиКартами");
		ВаучерыПодарочнымиКартами 	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыПодарочнымиКартами");
		ВаучерыИдентификаторами		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыИдентификаторами");
		НаименованиеОсновнойВалюты   = Справочники.Валюты.ОсновнаяВалюта.Наименование;
		ВестиУчетВалют 				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		Если ВестиУчетВалют Тогда
			Элементы.НаименованиеОсновнойВалюты2.Видимость = ЛОЖЬ;
			Элементы.НаименованиеОсновнойВалюты.Видимость  = ЛОЖЬ;
			Элементы.Валюта.Видимость  = ИСТИНА;
			Элементы.Валюта1.Видимость = ИСТИНА;
		Иначе
			Элементы.НаименованиеОсновнойВалюты2.Видимость = ИСТИНА;
			Элементы.НаименованиеОсновнойВалюты.Видимость  = ИСТИНА;
			Элементы.Валюта.Видимость  = ЛОЖЬ;
			Элементы.Валюта1.Видимость = ЛОЖЬ;
		КонецЕсли;
		
		ВаучерУжеИспользован = ЛОЖЬ;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			КонецЕсли;
			
			Если ВаучерыСкидочнымиКартами Тогда
				Объект.НоминалПроцент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОбщийПроцентВаучераПоУмолчанию");		
			КонецЕсли;
			Если ВаучерыПодарочнымиКартами Тогда
				Объект.НоминалПроцент = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоминалВаучераПоУмолчанию");
			КонецЕсли;
			
			Если ВаучерыСкидочнымиКартами
				И НЕ ВаучерыПодарочнымиКартами
				И НЕ ВаучерыНакопительнымиКартами
				И НЕ ВаучерыИдентификаторами Тогда
				
				Объект.ТипВаучера = Перечисления.ТипыВаучера.СкидочнаяКартаПроцент;
				
			ИначеЕсли НЕ ВаучерыСкидочнымиКартами
				И ВаучерыПодарочнымиКартами
				И НЕ ВаучерыНакопительнымиКартами
				И НЕ ВаучерыИдентификаторами Тогда
				
				Объект.ТипВаучера = Перечисления.ТипыВаучера.ПодарочнаяКарта;
				Элементы.ТипВаучера.Видимость = ЛОЖЬ;
				
			ИначеЕсли НЕ ВаучерыСкидочнымиКартами
				И НЕ ВаучерыПодарочнымиКартами
				И ВаучерыНакопительнымиКартами
				И НЕ ВаучерыИдентификаторами Тогда
				
				Объект.ТипВаучера = Перечисления.ТипыВаучера.НакопительнаяКарта;
				Элементы.ТипВаучера.Видимость = ЛОЖЬ;
			ИначеЕсли ВаучерыИдентификаторами
				И НЕ ВаучерыСкидочнымиКартами
				И НЕ ВаучерыНакопительнымиКартами
				И НЕ ВаучерыПодарочнымиКартами Тогда
				
				Объект.ТипВаучера = Перечисления.ТипыВаучера.Идентификатор;
				Элементы.ТипВаучера.Видимость = ЛОЖЬ;
			КонецЕсли;
			
			Элементы.ИсторияНаколений.Видимость = ЛОЖЬ;
			
		Иначе
			ВаучерУжеИспользован = ОбщийМодульТоварСервер.ПроверитьЧтоВаучерУжеИспользован(Объект.Ссылка);
			Накоплено = ОбщийМодульТоварСервер.ПолучитьОстатокНакопленияНаВаучер(Объект.Ссылка);
		КонецЕсли;
		
		Элементы.Номенклатура.Видимость = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");		
		
		Элементы.ТипВаучера.Доступность 	 	= НЕ ВаучерУжеИспользован;
		Элементы.СкидочнаяКарта.Доступность 	= НЕ ВаучерУжеИспользован;
		Элементы.ОбщаяСуммаСкидки1.Доступность 	= НЕ ВаучерУжеИспользован;
		Элементы.Накоплено.Доступность 		 	= НЕ ВаучерУжеИспользован;
		Элементы.Номинал.Доступность 		 	= НЕ ВаучерУжеИспользован;
		Элементы.Валюта1.Доступность 		 	= НЕ ВаучерУжеИспользован;
		Элементы.ДатаРегистрации.Доступность 	= НЕ ВаучерУжеИспользован;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ИсторияНаколений.Видимость = ИСТИНА;
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВаучераПриИзменении(Элемент)
	ОбновитьВидимостьВаучера();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьВаучера()
	
	Элементы.СкидочнаяКарта.Видимость 	  = ВаучерыСкидочнымиКартами
	И ЗначениеЗаполнено(Объект.ТипВаучера) 
	И (Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаСумма")
	ИЛИ Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаПроцент"));
	
	Элементы.НакопительнаяКарта.Видимость = ВаучерыНакопительнымиКартами
	И ЗначениеЗаполнено(Объект.ТипВаучера) 
	И Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.НакопительнаяКарта");
	
	Элементы.ПодарочнаяКарта.Видимость 	  = ВаучерыПодарочнымиКартами
	И ЗначениеЗаполнено(Объект.ТипВаучера) 
	И Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.ПодарочнаяКарта");
	
	Элементы.ОбщаяСуммаСкидки1.Видимость  = ЗначениеЗаполнено(Объект.ТипВаучера) 
	И Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаСумма");
	
	Элементы.ОбщийПроцентСкидки.Видимость = ЗначениеЗаполнено(Объект.ТипВаучера) 
	И Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.СкидочнаяКартаПроцент");
	
	Элементы.УсловияВаучера.Видимость	  = ЗначениеЗаполнено(Объект.ТипВаучера) 
	И НЕ Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.Идентификатор");
	
	Элементы.СтраницыУсловий.Видимость	  = ЗначениеЗаполнено(Объект.ТипВаучера) 
	И НЕ Объект.ТипВаучера = ПредопределенноеЗначение("Перечисление.ТипыВаучера.Идентификатор");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаколений(Команда)
	
	ПараметрыФормыНаколений = Новый Структура("Ваучер", Объект.Ссылка);
	ОткрытьФорму("РегистрНакопления.НакоплениеНаВаучеры.ФормаСписка", ПараметрыФормыНаколений);
	
КонецПроцедуры
