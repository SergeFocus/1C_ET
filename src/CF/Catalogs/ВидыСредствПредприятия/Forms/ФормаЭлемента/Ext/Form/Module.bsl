// sza150714-0006 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001600", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИДобавитьРеквизитНоменклатуры(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("ОбъектВладелец", Объект.Ссылка);	
		ФормаРеквизитаНоменклатурнойГруппы = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.Форма.ФормаЭлемента", ПараметрыФормы);
		ФормаРеквизитаНоменклатурнойГруппы.ОткрытьМодально();
		НовыйРеквизит = ФормаРеквизитаНоменклатурнойГруппы.Объект.ссылка;
		Если ЗначениеЗаполнено(НовыйРеквизит) Тогда
			ДобавитьНовыйРеквизит(НовыйРеквизит);
		КонецЕсли;	    
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыйРеквизит(Знач НовыйРеквизит) 	
	
	НОвыйРеквизитСтрока = Объект.ДополнительныеРеквизиты.Добавить();
	НОвыйРеквизитСтрока.ДополнительныйРеквизит  = НовыйРеквизит;
	НОвыйРеквизитСтрока.ЗначениеПоУмолчанию 	= ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(НовыйРеквизит, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыДополнительныйРеквизитПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	СтрокаТаблицы.ЗначениеПоУмолчанию = ОбщийМодульПовтор.ПолучитьПустоеЗначениеДополнительногоРеквизита(СтрокаТаблицы.ДополнительныйРеквизит, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Объект.ДополнительныеРеквизиты.Количество() > 9;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ТипРеквизита = Неопределено;

			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораЗавершение1", ЭтаФорма, Новый Структура("ТекущиеДанные, ТипДополнительногоРеквизита", ТекущиеДанные, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));
            Возврат;
		КонецЕсли;
		ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(ТекущиеДанные);
		
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		Если ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено Тогда
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));
            Возврат;
		КонецЕсли;
		ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;	
	
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник." + ТипРеквизита.Значение + ".ПустаяСсылка");	
	КонецЕсли;
	
	ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент1(Знач ТекущиеДанные)
	
	ПоказатьВводЗначения(Неопределено, ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;	
	
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = ПредопределенноеЗначение("Документ." + ТипРеквизита.Значение + ".ПустаяСсылка");	
	КонецЕсли;
	
	ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюНачалоВыбораФрагмент(Знач ТекущиеДанные)
	
	ПоказатьВводЗначения(Неопределено, ТекущиеДанные.ЗначениеПоУмолчанию, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ": ");

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РеквизитыНоменклатуры.ТекущиеДанные;
	ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ТекущиеДанные.ДополнительныйРеквизит, "ТипДополнительногоРеквизита");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		ТекущиеДанные.ЗначениеПоУмолчанию = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры
