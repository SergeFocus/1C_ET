// sza140805-1920 
// sza140723-2353 автонаименование
// sza140615-1407  
// sza140409-1201  
&НаКлиенте
Процедура ВерсияСпецификацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВерсияСпецификации) 
		И Найти(Объект.Наименование, Объект.ВерсияСпецификации) = 0 Тогда
		
		Объект.Наименование = Объект.Наименование + Объект.ВерсияСпецификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйКоэффициентКСебестоимостиОчистка(Элемент, СтандартнаяОбработка)
	Объект.ДополнительныйКоэффициентКСебестоимости = 1;
КонецПроцедуры

&НаСервере
Функция   ЕстьДокументыСУчетомЭтойСпецификации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектацияТовары.Ссылка
	|ИЗ Документ.Комплектация.Товары КАК КомплектацияТовары
	|ГДЕ КомплектацияТовары.Спецификация = &Спецификация
	|	И КомплектацияТовары.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Спецификация", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ЕстьДокументыСУчетомЭтойСпецификации();

&НаКлиенте
Процедура ЗадействованныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ЗадействованныеСредства.ТекущиеДанные;
		ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(ТекущиеДанные.Номенклатура, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСпецификацияПриИзменении(Элемент)
	МатериалыСпецификацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура МатериалыСпецификацияПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Материалы[Элементы.Материалы.ТекущаяСтрока];
	Спецификация  = ТекущиеДанные.Спецификация;
	Номенклатура  = ТекущиеДанные.Номенклатура;
	Если ЗначениеЗаполнено(Спецификация) Тогда
		
		СписокПродуктов = Спецификация.Товары.ВыгрузитьКолонку("Номенклатура");
		Если НЕ СписокПродуктов.количество() = 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				ТекущиеДанные.Номенклатура = СписокПродуктов[0];
			ИначеЕСли СписокПродуктов.Найти(Номенклатура) = Неопределено тогда
				сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В указанной спецификации комплектация") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не предусмотрено!"));
				ТекущиеДанные.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(Номенклатура, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
			КонецЕсли;
		КонецЕсли; 		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	ОбработатьПолученныйШКНаСервере(ТекКод);	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	НоменклатураСтруктура = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА, ИСТИНА, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
	Если НЕ НоменклатураСтруктура = Неопределено Тогда
		Номенклатура = НоменклатураСтруктура.Номенклатура;
		Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
			СтрокаТовара = Объект.Работы.Добавить();
			СтрокаТовара.Количество   = НоменклатураСтруктура.Количество;
		Иначе
			СтрокаТовара = Объект.Материалы.Добавить();
			СтрокаТовара.Номенклатура = Номенклатура;
			СтрокаТовара.Спецификация = ОбщийМодульТоварСервер.ОбнаружитьСпецификациюНоменклатуры(Номенклатура, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, Неопределено));
		КонецЕсли;		
		СтрокаТовара.Номенклатура = Номенклатура;			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаТовары;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001550", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Элементы.ЕслиИзменитьДаннуюСпецификациюПриПерепроведенииДокументовКомплектацииРезультатИзменится.Видимость = ЗначениеЗаполнено(ОбъектСсылка) И ЕстьДокументыСУчетомЭтойСпецификации();
		
		ЗапретитьРазукомплектацию = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьРазукомплектацию");
		Элементы.РаботыТолькоПриРазукомплектации.Видимость = НЕ ЗапретитьРазукомплектацию;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.МатериалыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ТоварыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.МатериалыИтогКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РаботыИтогКоличество, , ИСТИНА);
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка)
			И ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			
			СтрокаТовара = Объект.Товары.Добавить();
			СтрокаТовара.Номенклатура 	= Параметры.Номенклатура;
			СтрокаТовара.Количество 	= 1;
			
			Объект.ВерсияСпецификации 	= "1";
			Объект.Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Параметры.Номенклатура) + " 1";
			Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;	
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда			
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.НеАктуальна.ВидФлажка = ВидФлажка.Флажок; ");	
			КонецЕсли;
			Элементы.НеАктуальна.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ Актуальна");
			Элементы.НеАктуальна.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяВыполненияПриИзменении(Элемент)
	РаботыВремяВыполненияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаботыВремяВыполненияПриИзмененииНаСервере()
	
	ВремяВыполнения = 0;
	Для Каждого Работа Из Объект.Работы Цикл
		ВремяВыполнения = ВремяВыполнения + Работа.ВремяВыполнения;	
	КонецЦикла;
	
	Объект.ОбщееВремя = ВремяВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыТолькоПриКомплектацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные.ТолькоПриКомплектации Тогда
		ТекущиеДанные.ТолькоПриРазуКомплектации = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыТолькоПриРазукомплектацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные.ТолькоПриРазуКомплектации Тогда
		ТекущиеДанные.ТолькоПриКомплектации = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	Объект.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура АвтоНаименованиеПоПеречнюПродуктов(Команда)
	АвтоНаименованиеПоПеречнюПродуктовНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвтоНаименованиеПоПеречнюПродуктовНаСервере()
	
	Наименование = "";
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Наименование = Наименование + ?(Наименование = "", "", ", ") + ?(СтрокаТовара.Количество = 1, "", СокрЛП(СтрокаТовара.Количество) + "х ") + СокрЛП(СтрокаТовара.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения), " " + СокрЛП(СтрокаТовара.ЕдиницаИзмерения), "");
	КонецЦикла;
	Объект.Наименование = Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныМатериаловНаСервере()
	
	Для Каждого СтрокаМатериала Из Объект.Материалы Цикл
		СтрокаМатериала.Цена = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаМатериала.Номенклатура, СтрокаМатериала.Количество, Объект.Дата);
		СтрокаМатериала.Сумма = СтрокаМатериала.Количество * СтрокаМатериала.Цена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныМатериалов(Команда)
	ОбновитьЦеныМатериаловНаСервере();
КонецПроцедуры
