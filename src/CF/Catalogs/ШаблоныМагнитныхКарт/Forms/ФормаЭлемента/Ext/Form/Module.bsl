// sza131120-0052 
// Добавить поле
&НаКлиенте
Процедура ВзятьПоле1(Команда)
	
	Перем НСтр, НКол, КСтр, ККол;
	
	Если СтрДлина(Элементы.Дорожка1.ВыделенныйТекст) = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
		
		Возврат;
	КонецЕсли;
	Элементы.Дорожка1.ПолучитьГраницыВыделения(НСтр, НКол, КСтр, ККол);
	Результат = ОпределитьКоординатыПоля(Дорожка1, Объект.Префикс1, Объект.Суффикс1, Объект.РазделительБлоков1, НКол, ККол);
	Если Результат = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделенный участок кода не должен пересекаться с суффиксом, префиксом или разделителем блоков."));
		Возврат;
	КонецЕсли;
	Элементы.ПоляДорожки1.ДобавитьСтроку();
	НовоеПоле = Элементы.ПоляДорожки1.ТекущиеДанные;
	НовоеПоле.НомерБлока 				= Результат.НомерБлока;
	НовоеПоле.НомерПервогоСимволаПоля 	= Результат.НомерПервогоСимволаПоля;
	НовоеПоле.ДлинаПоля 				= Результат.ДлинаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПоле2(Команда)
	
	Перем НСтр, НКол, КСтр, ККол;
	
	Если СтрДлина(Элементы.Дорожка2.ВыделенныйТекст) = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
		Возврат;
	КонецЕсли;
	Элементы.Дорожка2.ПолучитьГраницыВыделения(НСтр, НКол, КСтр, ККол);
	Результат = ОпределитьКоординатыПоля(Дорожка2, Объект.Префикс2, Объект.Суффикс2, Объект.РазделительБлоков2, НКол, ККол);
	Если Результат = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделенный участок кода не должен пересекаться с суффиксом, префиксом или разделителем блоков."));
		Возврат;
	КонецЕсли;
	Элементы.ПоляДорожки2.ДобавитьСтроку();
	НовоеПоле = Элементы.ПоляДорожки2.ТекущиеДанные;
	НовоеПоле.НомерБлока 				= Результат.НомерБлока;
	НовоеПоле.НомерПервогоСимволаПоля 	= Результат.НомерПервогоСимволаПоля;
	НовоеПоле.ДлинаПоля 				= Результат.ДлинаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПоле3(Команда)
	
	Перем НСтр, НКол, КСтр, ККол;
	
	Если СтрДлина(Элементы.Дорожка3.ВыделенныйТекст) = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
		Возврат;
	КонецЕсли;
	Элементы.Дорожка3.ПолучитьГраницыВыделения(НСтр, НКол, КСтр, ККол);
	Результат = ОпределитьКоординатыПоля(Дорожка3, Объект.Префикс3, Объект.Суффикс3, Объект.РазделительБлоков3, НКол, ККол);
	Если Результат = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделенный участок кода не должен пересекаться с суффиксом, префиксом или разделителем блоков."));
		Возврат;
	КонецЕсли;
	Элементы.ПоляДорожки3.ДобавитьСтроку();
	НовоеПоле = Элементы.ПоляДорожки3.ТекущиеДанные;
	НовоеПоле.НомерБлока 				= Результат.НомерБлока;
	НовоеПоле.НомерПервогоСимволаПоля 	= Результат.НомерПервогоСимволаПоля;
	НовоеПоле.ДлинаПоля 				= Результат.ДлинаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПрефикс1(Команда)
	
	Если СтрДлина(Элементы.Дорожка1.ВыделенныйТекст) > 0 Тогда
		Объект.Префикс1 = Элементы.Дорожка1.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПрефикс2(Команда)
	
	Если СтрДлина(Элементы.Дорожка2.ВыделенныйТекст) > 0 Тогда
		Объект.Префикс2 = Элементы.Дорожка2.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПрефикс3(Команда)
	
	Если СтрДлина(Элементы.Дорожка3.ВыделенныйТекст) > 0 Тогда
		Объект.Префикс3 = Элементы.Дорожка3.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьРазделитель1(Команда)
	
	Если СтрДлина(Элементы.Дорожка1.ВыделенныйТекст) > 0 Тогда
		Объект.РазделительБлоков1 = Элементы.Дорожка1.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьРазделитель2(Команда)
	
	Если СтрДлина(Элементы.Дорожка2.ВыделенныйТекст) > 0 Тогда
		Объект.РазделительБлоков2 = Элементы.Дорожка2.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьРазделитель3(Команда)
	
	Если СтрДлина(Элементы.Дорожка3.ВыделенныйТекст) > 0 Тогда
		Объект.РазделительБлоков3 = Элементы.Дорожка3.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуффикс1(Команда)
	
	Если СтрДлина(Элементы.Дорожка1.ВыделенныйТекст) > 0 Тогда
		Объект.Суффикс1 = Элементы.Дорожка1.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуффикс2(Команда)
	
	Если СтрДлина(Элементы.Дорожка2.ВыделенныйТекст) > 0 Тогда
		Объект.Суффикс2 = Элементы.Дорожка2.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьСуффикс3(Команда)
	
	Если СтрДлина(Элементы.Дорожка3.ВыделенныйТекст) > 0 Тогда
		Объект.Суффикс3 = Элементы.Дорожка3.ВыделенныйТекст;
	Иначе
		ОчиститьСообщения();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выделите мышкой участок кода."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьДорожки1ПриИзменении(Элемент)	
	УстановитьДоступностьДорожек();	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьДорожки2ПриИзменении(Элемент)	
	УстановитьДоступностьДорожек();	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьДорожки3ПриИзменении(Элемент)	
	УстановитьДоступностьДорожек();               	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольУникальностиПолей(Отказ)
	
	СписокДублей = Новый Массив;
	Для й = 1 По 3 Цикл
		Если Объект["ДоступностьДорожки"+Строка(й)] Тогда
			Для Каждого текСтрока Из Объект["ПоляДорожки"+Строка(й)] Цикл
				КонтрольУникальностиПоля(СписокДублей, текСтрока.Поле, текСтрока.НомерСтроки, "ПоляДорожки"+Строка(й), Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольУникальностиПоля(СписокДублей, Поле, НомерТекущейСтроки, ИмяТаблицы, Отказ)
	
	Если ЗначениеЗаполнено(Поле) Тогда
		Если СписокДублей.Найти(Поле) = Неопределено Тогда
			СчетчикДублей = 0;
			Для ж = 1 По 3 Цикл
				Если НЕ Объект["ДоступностьДорожки"+Строка(ж)] Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого текПоле Из Объект["ПоляДорожки"+Строка(ж)] Цикл
					Если текПоле.Поле = Поле Тогда
						СчетчикДублей = СчетчикДублей + 1;
						
						Если СчетчикДублей > 1 Тогда
							СтрСообщение = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дорожка") + " " + Прав("ПоляДорожки"+Строка(ж),1) + "," + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" строка") + " " + Строка(текПоле.НомерСтроки) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(": Поле должно быть уникальным!");
							ОбщегоНазначения.СообщитьПользователю(СтрСообщение
							, ,"Объект."+"ПоляДорожки"+Строка(ж)+"["+Строка(текПоле.НомерСтроки-1)+"].Поле", , Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если СчетчикДублей > 1 Тогда
				СписокДублей.Добавить(Поле);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрСообщение = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дорожка") + " " + Прав(ИмяТаблицы,1) + "," + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" строка") + " " + Строка(НомерТекущейСтроки) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(": Поле не может быть пустым!");
		ОбщегоНазначения.СообщитьПользователю(СтрСообщение
		, ,"Объект."+ИмяТаблицы+"["+Строка(НомерТекущейСтроки-1)+"].Поле", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)	
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "TracksData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ДанныеДорожек = Параметр[0];
			Иначе
				ДанныеДорожек = Параметр[1][1];
			КонецЕсли;
			
			Дорожка1 = ДанныеДорожек[0];
			Дорожка2 = ДанныеДорожек[1];
			Дорожка3 = ДанныеДорожек[2];
			Объект.ДлинаКода1 = СтрДлина(Дорожка1);
			Объект.ДлинаКода2 = СтрДлина(Дорожка2);
			Объект.ДлинаКода3 = СтрДлина(Дорожка3);
			Объект.ДоступностьДорожки1 = НЕ (СтрДлина(Дорожка1) = 0);
			Объект.ДоступностьДорожки2 = НЕ (СтрДлина(Дорожка2) = 0);
			Объект.ДоступностьДорожки3 = НЕ (СтрДлина(Дорожка3) = 0);
			УстановитьДоступностьДорожек();
			
			Модифицированность = ИСТИНА;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ОпределитьКоординатыПоля(ДанныеДорожки, Префикс, Суффикс, Разделитель, НКол, ККол)
	
	ДанныеСтрока = ДанныеДорожки;
	Если НЕ ПустаяСтрока(Префикс)
		И Префикс = Лев(ДанныеСтрока, СтрДлина(Префикс)) Тогда
		
		ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Префикс)); // отсекаем префикс если есть
		НКол = НКол - СтрДлина(Префикс);
		ККол = ККол - СтрДлина(Префикс);
		Если НКол < 1 Тогда
			Возврат Неопределено; // выделенный текст залезает на префикс
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Суффикс)
		И Суффикс = Прав(ДанныеСтрока, СтрДлина(Суффикс)) Тогда
		
		ДанныеСтрока = Лев(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Суффикс)); // отсекаем суффикс если есть
		Если ККол-1 > СтрДлина(ДанныеСтрока) Тогда
			Возврат Неопределено; // выделенный текст залезает на суффикс
		КонецЕсли;
	КонецЕсли;
	
	НайденРазделитель = Найти(Сред(ДанныеСтрока, НКол, ККол-НКол), Разделитель);
	Если НЕ ПустаяСтрока(Разделитель) И НайденРазделитель > 0 Тогда
		Возврат Неопределено; // выделенный текст пересекается с разделителем
	КонецЕсли;
	
	НомерБлока = 1;
	НомерПервогоСимволаПоля = 1;
	ДлинаПоля = 1;
	
	Пока СтрДлина(ДанныеСтрока) > 0 Цикл
		ПозицияРазделителя = Найти(ДанныеСтрока, Разделитель);
		Если ПозицияРазделителя > НКол Тогда
			НомерПервогоСимволаПоля = НКол;
			ДлинаПоля = ?(ККол > ПозицияРазделителя, ПозицияРазделителя - НКол, ККол - НКол);
			Прервать;
		КонецЕсли;
		
		Если ПозицияРазделителя = 0 ИЛИ ПустаяСтрока(Разделитель) Тогда
			НомерПервогоСимволаПоля = НКол;
			ДлинаПоля = ККол - НКол;
			Прервать;
			
		ИначеЕсли ПозицияРазделителя = 1 Тогда
			Возврат Неопределено; // выделенный текст пересекается с разделителем
		Иначе
			ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-ПозицияРазделителя);
			НКол = НКол - ПозицияРазделителя;
			ККол = ККол - ПозицияРазделителя;
		КонецЕсли;
		НомерБлока = НомерБлока + 1;
	КонецЦикла;
	
	Если ККол = СтрДлина(ДанныеСтрока)+1
		ИЛИ Сред(ДанныеСтрока, ККол, 1) = Разделитель Тогда
		
		Ответ = Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Длина выбранного поля фиксированная или ограничивается разделителем/концом строки?") + " " + Символы.пс +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДА - длина поля фиксированная") + " " + Символы.пс +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет - длина поля ограничивается разделителем или концом строки"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Длина поля в символах"));
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ДлинаПоля = 0;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("НомерБлока, НомерПервогоСимволаПоля, ДлинаПоля", НомерБлока, НомерПервогоСимволаПоля, ДлинаПоля);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	СчетчикПолей = 0;
	Если Объект.ДоступностьДорожки1 Тогда
		СчетчикПолей = СчетчикПолей + Объект.ПоляДорожки1.Количество();
	КонецЕсли;
	Если Объект.ДоступностьДорожки2 Тогда
		СчетчикПолей = СчетчикПолей + Объект.ПоляДорожки2.Количество();
	КонецЕсли;
	Если Объект.ДоступностьДорожки3 Тогда
		СчетчикПолей = СчетчикПолей + Объект.ПоляДорожки3.Количество();
	КонецЕсли;
	Если СчетчикПолей = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не добавлено ни одного поля ни в одной из доступных дорожек."), , , , Отказ);
	КонецЕсли;
	
	КонтрольУникальностиПолей(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";
		
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьДорожек();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		Объект.РазделительБлоков1 = "^";
		Объект.РазделительБлоков2 = "=";
		Объект.РазделительБлоков3 = "=";
		
		Объект.ДлинаКода1 = 79;
		Объект.ДлинаКода2 = 40;
		Объект.ДлинаКода3 = 107;
		
		Объект.Префикс1 = "%";
		Объект.Префикс2 = ";";
		Объект.Префикс3 = ";";
		
		Объект.Суффикс1 = "?";
		Объект.Суффикс2 = "?";
		Объект.Суффикс3 = "?";
		
		Объект.ДоступностьДорожки1 = ИСТИНА;
		Объект.ДоступностьДорожки2 = ИСТИНА;
		Объект.ДоступностьДорожки3 = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШаблон(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		ТекстВопроса = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Шаблон был изменен, записать изменения?");
		ОтветНаВопрос = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьШаблонЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;
	КонецЕсли;
	
	ПроверитьШаблонФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШаблонЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Если НЕ ЭтаФорма.Записать() Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать шаблон!"));
			Возврат;
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ПроверитьШаблонФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШаблонФрагмент()
	
	Перем ДанныеШаблона;
	
	ДанныеШаблона = Новый Структура(
	"ДоступностьДорожки1, ДоступностьДорожки2, ДоступностьДорожки3, "
	+"Префикс1, Префикс2, Префикс3, "
	+"ДлинаКода1, ДлинаКода2, ДлинаКода3, "
	+"Суффикс1, Суффикс2, Суффикс3, "
	+"РазделительБлоков1, РазделительБлоков2, РазделительБлоков3, "
	+"Ссылка",
	Объект.ДоступностьДорожки1, Объект.ДоступностьДорожки2, Объект.ДоступностьДорожки3
	,Объект.Префикс1, Объект.Префикс2, Объект.Префикс3
	,Объект.ДлинаКода1, Объект.ДлинаКода2, Объект.ДлинаКода3
	,Объект.Суффикс1, Объект.Суффикс2, Объект.Суффикс3
	,Объект.РазделительБлоков1, Объект.РазделительБлоков2, Объект.РазделительБлоков3
	,Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ШаблоныМагнитныхКарт.Форма.ФормаПроверкиШаблона"
	, Новый Структура("ДанныеШаблона", ДанныеШаблона), ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДорожек()
	
	Для й = 1 По 3 Цикл
		ДоступностьДорожки = Объект["ДоступностьДорожки"+Строка(й)];
		Элементы["Префикс"+Строка(й)].Доступность 			= ДоступностьДорожки;
		Элементы["ДлинаКода"+Строка(й)].Доступность 		= ДоступностьДорожки;
		Элементы["Суффикс"+Строка(й)].Доступность 			= ДоступностьДорожки;
		Элементы["РазделительБлоков"+Строка(й)].Доступность = ДоступностьДорожки;
		Элементы["ПоляДорожки"+Строка(й)].Доступность 		= ДоступностьДорожки;
	КонецЦикла;
	
КонецПроцедуры



