// sza140615-0323  
// sza131115-1755
&НаКлиенте
Процедура АвтоНаменованиеДоговора(Команда)
	АвтоНаменованиеДоговораНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвтоНаменованиеДоговораНаСервере() 
	
	НаименованиеС = "" + 	?(ЗначениеЗаполнено(Объект.Организация), "" + Объект.Организация + ?(ЗначениеЗаполнено(Объект.КлиентПоставщик), " - ", ""), "") + 
	?(ЗначениеЗаполнено(Объект.КлиентПоставщик), Объект.КлиентПоставщик, "") + 
	?(ЗначениеЗаполнено(Объект.НомерДоговора), " №" + Объект.НомерДоговора + " ", "") + 
	?(ЗначениеЗаполнено(Объект.ДатаЗаключения), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " " + Формат(Объект.ДатаЗаключения, "ДФ=dd.MM.yyyy"), "");
	Если ЗначениеЗаполнено(Объект.ОграничиваетСуммуЗадолженности) Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на сумму") + " " + Объект.ОграничиваетСуммуЗадолженности;
	ИначеЕсли ЗначениеЗаполнено(Объект.ОграничиваетСуммуТоваров) Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на сумму товаров") + " " + Объект.ОграничиваетСуммуТоваров;
	ИначеЕсли ЗначениеЗаполнено(Объект.ОграничиваетКоличествоТоваров) Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на количество товаров") + " " + Объект.ОграничиваетКоличествоТоваров;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" про % комиссионного вознаграждения") + " " + СокрЛП(Объект.ПроцентКомиссионногоВознаграждения);
	ИначеЕсли Объект.ПредусматриваетСтрогиеЦены Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" о Ценах");
	ИначеЕсли ЗначениеЗаполнено(Объект.УстанавливаетСрокОплатыВДнях) Тогда
		НаименованиеС = НаименованиеС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" о сроке оплат в") + " " + Объект.УстанавливаетСрокОплатыВДнях + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" дней");
	КонецЕсли;
	
	Объект.Наименование = НаименованиеС;
	Наименование = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблицСправа()
	Элементы.ГруппаСтраницСправа.Видимость = НЕ НеПоказыватьТаблицыСправа;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	ПериодДоговора.ДатаНачала 		= Объект.ДатаНачала;
	ПериодДоговора.ДатаОкончания 	= Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;
	ПериодДоговора.ДатаНачала 		= Объект.ДатаНачала;
	ПериодДоговора.ДатаОкончания 	= Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Записать();	
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	Перем ПараметрыФормы, формаИзображения;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦен(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
	Иначе
		ВидЦен = Объект.ВидЦен;
	КонецЕсли;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьПоВидуЦенЗавершение", ЭтаФорма, Новый Структура("ВидЦен", ВидЦен)), ВидЦен, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Вид Цен") + ": ", тип("СправочникСсылка.ВидыЦен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦенЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ВидЦен = ?(Значение = Неопределено, ДополнительныеПараметры.ВидЦен, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ЗаполнитьПоВидуЦенНаСервере(ВидЦен);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВидуЦенНаСервере(ВидЦен)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Дата = Объект.ДатаНачала;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаЗаключения) Тогда
		Дата = Объект.ДатаЗаключения;
	Иначе
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ИСТИНА, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзображенияПриАктивизацииСтроки(Элемент)
	
	ТекущийЭлементСписка = Элементы.Изображения.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ТекущийЭлементСписка);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Элементы.СсылкаНаИзображение.Видимость    = не СтруктураИзображения.ИзображениеВБазеДанных;
		Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
		
		Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
		КонецЕсли; 		 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Поставщики", ДанныеВыбора, Текст, Объект.КлиентПоставщик);	
	Иначе
		ОбщийМодульКлиент.ПоискОшибкиКодировки("Клиенты", ДанныеВыбора, Текст, Объект.КлиентПоставщик);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПоставщикПриИзменении(Элемент)
	КлиентПоставщикПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КлиентПоставщикПриИзмененииНаСервере()
	
	ЗначениеЗаполненоКлиентПоставщик = ЗначениеЗаполнено(Объект.КлиентПоставщик);
	
	Если ЗначениеЗаполненоКлиентПоставщик Тогда
		
		Если ТипЗнч(Объект.КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			ВидЦенПоставщика = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПоставщиков");
			Если ЗначениеЗаполнено(ВидЦенПоставщика) Тогда
				Объект.ВидЦен = ВидЦенПоставщика;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) 
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.ВидЦен) Тогда
			
			Объект.ВидЦен = Объект.КлиентПоставщик.ВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности)
			И ЗначениеЗаполнено(Объект.КлиентПоставщик.НаправлениеДеятельности) Тогда
			
			Объект.НаправлениеДеятельности = Объект.КлиентПоставщик.НаправлениеДеятельности;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНаследованиеСрока();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаследованиеСрока()
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа")
		И ЗначениеЗаполнено(Объект.КлиентПоставщик)
		И ЗначениеЗаполнено(Объект.КлиентПоставщик.Родитель)
		И НЕ Объект.КлиентПоставщик.Родитель.СрокОплатыВДняхПоУмолчанию = 0
		И НЕ Объект.КлиентПоставщик.Родитель.СрокОплатыВДняхПоУмолчанию = Объект.УстанавливаетСрокОплатыВДнях Тогда
		
		Объект.УстанавливаетСрокОплатыВДнях = Объект.КлиентПоставщик.Родитель.СрокОплатыВДняхПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидЦен)
			И ЗначениеЗаполнено(Объект.Организация.ВидЦен )Тогда
			
			Объект.ВидЦен = Объект.Организация.ВидЦен;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ХранилищеДенег)
			И ЗначениеЗаполнено(Объект.Организация.ХранилищеДенег) Тогда
			
			Объект.ХранилищеДенег = Объект.Организация.ХранилищеДенег;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности)
			И ЗначениеЗаполнено(Объект.Организация.НаправлениеДеятельности) Тогда
			
			Объект.НаправлениеДеятельности = Объект.Организация.НаправлениеДеятельности;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницСправа.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		АвтоНаменованиеДоговораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДоговораОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДатаНачала 		= '00010101000000' ;	
	Объект.ДатаОкончания 	= '00010101000000' ;
	ПериодДоговора.ДатаНачала 		= Объект.ДатаНачала;
	ПериодДоговора.ДатаОкончания 	= Объект.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДоговораПриИзменении(Элемент)
	
	Объект.ДатаНачала 		= ПериодДоговора.ДатаНачала;
	Объект.ДатаОкончания 	= ПериодДоговора.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	Элементы.ДокументыДоговора.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПредусматриваетСтрогиеЦеныПриИзменении(Элемент)
	Элементы.ЦеныДоговора.Видимость = Объект.ПредусматриваетСтрогиеЦены;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(СтраницаПанели)Тогда
		
		попытка
			СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
			Элементы.ГруппаСтраницСправа.ТекущаяСтраница = ТекущаяСтраница;
		исключение
		конецпопытки;
	КонецЕсли;	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000665", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		Элементы.ЦеныДоговора.Видимость = Объект.ПредусматриваетСтрогиеЦены;
		УчетПоставщиков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
		УчетКлиентов	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
		УчетЮрлиц		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц");
		БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах");
		
		Элементы.Изображения.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьДоговораИзображениями");
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.КлиентПоставщик) Тогда
				
				Если ЗначениеЗаполнено(параметры.КлиентПоставщик) Тогда  				
					Объект.КлиентПоставщик  = параметры.КлиентПоставщик;
				Иначе
					Если НЕ УчетПоставщиков Тогда
						Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");
					ИначеЕсли не УчетКлиентов Тогда
						Объект.КлиентПоставщик = ПредопределенноеЗначение("Справочник.Поставщики.ПустаяСсылка");
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				Если ЗначениеЗаполнено(Параметры.ЮрЛицо) Тогда
					Объект.Организация = Параметры.ЮрЛицо;	
				Иначе
					Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");	
				КонецЕсли;			
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидЦен) Тогда
				Объект.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			КонецЕсли;
			ДоговорНеИспользовался = ИСТИНА;
			
			СрокОплатыВДняхДляДоговоровПоУмолчанию 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокОплатыВДняхДляДоговоровПоУмолчанию");
			Если НЕ СрокОплатыВДняхДляДоговоровПоУмолчанию 	= 0 тогда
				Объект.УстанавливаетСрокОплатыВДнях 		= СрокОплатыВДняхДляДоговоровПоУмолчанию;	
			КонецЕсли;
			ОбновитьНаследованиеСрока();
			
			Элементы.ГруппаСтраницСправа.Видимость = ЛОЖЬ;
			
		Иначе
			Если БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах Тогда
				
				ДоговорНеИспользовался = ОбщийМодульСервер.ПроверитьЧтоДоговорНеИспользовался(ОбъектСсылка);
				Если НЕ ДоговорНеИспользовался Тогда
					Элементы.ВидЦен.Доступность 			= ЛОЖЬ;
					Элементы.ДатаНачала.Доступность 		= ЛОЖЬ;
					Элементы.ПериодДоговора.Доступность 	= ЛОЖЬ;
					Элементы.ДатаОкончания.Доступность 		= ЛОЖЬ;
					Элементы.КлиентПоставщик.Доступность 	= ЛОЖЬ;
					Элементы.ОбработкаТаблицы.Доступность 	= ЛОЖЬ;
					Элементы.ОграничиваетКоличествоТоваров 	= ЛОЖЬ;
					Элементы.ОграничиваетСуммуЗадолженности = ЛОЖЬ;
					Элементы.ОграничиваетСуммуТоваров 		= ЛОЖЬ;
					Элементы.Организация 					= ЛОЖЬ;
					Элементы.Товары.Доступность 			= ЛОЖЬ;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ДокументыДоговора.Параметры.УстановитьЗначениеПараметра("Договор", ОбъектСсылка);
		Изображения.Параметры.УстановитьЗначениеПараметра("Владелец", ОбъектСсылка);
		Элементы.ДокументыДоговора.Видимость = ЗначениеЗаполнено(ОбъектСсылка);
		
		Элементы.ДоговорУжеИспользовалсяИПоэтомуЗаблокированДляИзменений.Видимость 					= БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах и НЕ ДоговорНеИспользовался;
		Элементы.ПослеТогоКакДоговорБудетУказанВДокументахЕгоУсловияНельзяБудетИзменить.Видимость 	= БлокироватьИзмененияУсловийДоговораЕслиОнУжеУказанВДокументах и ДоговорНеИспользовался;
		
		Если НЕ УчетЮрлиц Тогда
			Элементы.УчастникиДоговора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Договор с");
		КонецЕсли;
		
		Элементы.Товары.ТолькоПросмотр 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены");
		ПериодДоговора.ДатаНачала 		= Объект.ДатаНачала;
		ПериодДоговора.ДатаОкончания 	= Объект.ДатаОкончания;	
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(объектСсылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;			
		КонецЕсли;	
		
		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
			
			Элементы.ЯзыкДокументов.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.ЯзыкДокументов.СписокВыбора, , ИСТИНА);
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОграничиваетКоличествоТоваров, ИСТИНА);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	НеПоказыватьТаблицыСправа = НЕ НеПоказыватьТаблицыСправа;
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, , , , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ДатаЗаключения) Тогда
		ПараметрыФормы.Вставить("ОтборПоДате", Объект.ДатаЗаключения);
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Товары.ТекущиеДанные.Номенклатура);	
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;	
		
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;
		СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, , , ЛОЖЬ, , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
		
		Элементы.Товары.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыЦена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТовара = Элементы.Товары.ТекущиеДанные;
	СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, , , , , , , , Объект.Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключенияПриИзменении(Элемент)
	
	Если НЕ Объект.ДатаЗаключения = '00010101'
		И Объект.ДатаНачала = '00010101' Тогда
		
		Объект.ДатаНачала = Объект.ДатаЗаключения;
		Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
			Объект.ДатаОкончания = Объект.ДатаНачала;
		КонецЕсли;
		ПериодДоговора.ДатаНачала 		= Объект.ДатаНачала;
		ПериодДоговора.ДатаОкончания 	= Объект.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры
