//sza140613-1447 : 
//sza130902-0029 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000300", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		
		ОбъектСсылка = Объект.Ссылка; 

		НоменклатураНеИспользовалась 	= Истина;
		ЗначениеЗаполненообъектСсылка 	= ЗначениеЗаполнено(ОбъектСсылка);
		
		ВестиУчетПоСкладам 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетОказанияУслугЗаВремя   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
		СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру");
		ИспользоватьСложныйМеханизмЦен 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		УчетПоСериям 			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры") ;
		Дата 					= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ПоддержкаДругихЯзыков 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", Истина);
		
		Элементы.ЦеныДобавитьЦену.Видимость = ИспользоватьСложныйМеханизмЦен и ЗначениеЗаполненообъектСсылка;
		ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Истина; //для алгоритма
		РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп") ;
		ИспользоватьЕдиницыИзмеренияНоменклатуры				 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьШтрихКоды = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
		
		элементы.ОбновитьШтрихКодПоФормуле.Видимость 	= ИспользоватьШтрихКоды И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость = ИспользоватьЕдиницыИзмеренияНоменклатуры;
		Элементы.Изображения.Видимость 					= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		
		Элементы.ШтрихКоды.Видимость 		= ИспользоватьШтрихКоды И ЗначениеЗаполненообъектСсылка;
		Элементы.ГруппаГарантии.Видимость 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе");
		
		Если НЕ ЗначениеЗаполненообъектСсылка Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаИзмерения) Тогда
				Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию");	
			КонецЕсли;
			
			Объект.СерийныйУчет = параметры.СерийныйУчет;
			
			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
				Объект.НоменклатурнаяГруппа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
				Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
					И ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения) Тогда
					
					Объект.ОсновнаяЕдиницаИзмерения = Объект.НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Производитель) Тогда
				Объект.Производитель = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПроизводительПоУмолчанию");
			КонецЕсли;
			
			Если Объект.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмерПланкиКоличестваТовараДляЛьготнойЦены") ;
			КонецЕсли;		
			
			Элементы.Цены.Видимость = Ложь;
			
			объектРодитель = объект.Родитель;
			Если ЗначениеЗаполнено(ОбъектРодитель) Тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
					|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
					|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = Истина
					|	И НоменклатурныеГруппы.Наименование = &Наименование";
					
					Запрос.УстановитьПараметр("Наименование", ОбъектРодитель.Наименование);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.КолонкаСправа.Видимость 			= ложь;
			Элементы.ОстаткиБезСклада.Видимость 		= ложь;
			Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ложь;
			Элементы.СредняяЦенаПриобретения.Видимость 	= ложь;
			Элементы.ТоварИлиУслуга.Видимость 			= истина;
			Элементы.Аналоги.Видимость 					= Ложь;
			
			заполнитьценыНовойНоменклатуры();
			элементы.ГруппаЦеныДляновойНоменклатуры.Видимость 			= ИспользоватьСложныйМеханизмЦен 
			И НЕ ЦеныДляНовойНоменклатуры.Количество() = 0;
			
			элементы.ЗависимыеЦеныБудутРасчитаныАвтоматически.Видимость = ИспользоватьСложныйМеханизмЦен 
			И ОбщийМодульСервер.СуществуютЗависимыеВидыЦен();
			
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Истина);
			
			Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость = Ложь;
			
		ИначеЕсли НЕ Отказ Тогда //существующая		
			УслугаНЕТовар = Объект.НеОтслеживатьОстаток;
			
			элементы.ГруппаЦеныДляновойНоменклатуры.Видимость = ложь;
			НоменклатураНеИспользовалась 					  = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
			
			Если Объект.Предопределенный 
				или объект.НеОтслеживатьОстаток Тогда //Товар на сумму
				
				Элементы.Родитель.Видимость 		= Ложь;
				Элементы.ГруппаНабора.Видимость 	= ложь;
				Элементы.ОстаткиБезСклада.Видимость = ложь;
				Элементы.ТоварИлиУслуга.Видимость 	= ложь;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ложь;
				элементы.СредняяЦенаПриобретения.Видимость 	= ложь;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ложь;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ложь;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = Ложь;
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Ложь;
				
			ИначеЕсли объект.ЭтоНабор = ИСТИНА 
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьНаборыТоваровПС") Тогда
				
				ДоступностьСостава = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
				Если ДоступностьСостава Тогда
					элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора");
				иначе
					элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора нельзя изменить после указания в документах. Создавайте новые наборы для иного состава.");
				КонецЕсли;
				
				элементы.ЭтоНабор.ТолькоПросмотр 			= НЕ ДоступностьСостава;
				элементы.Состав.ТолькоПросмотр 				= НЕ ДоступностьСостава;
				Элементы.ОстаткиБезСклада.Видимость 		= ложь;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ложь;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ложь;
				Элементы.СредняяЦенаПриобретения.Видимость 	= ложь;
				Элементы.ТоварИлиУслуга.Видимость 			= ложь;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = Ложь;
				
			иначе			
				Элементы.ТоварИлиУслуга.Видимость 	= ложь;
				Элементы.ГруппаНабора.Видимость 	= НоменклатураНеИспользовалась;
				элементы.ОстатокНеОтслеживается.Видимость	= НЕ НоменклатураНеИспользовалась;
				элементы.НеОтслеживатьОстаток.Видимость		= НоменклатураНеИспользовалась;
				элементы.СериныйУчет.Видимость				= НЕ НоменклатураНеИспользовалась;
				
				Если НЕ НоменклатураНеИспользовалась 
					И Объект.ЗапретитьУказаниеБезСерии Тогда
					
					элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");
				КонецЕсли;
				Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
				
				Элементы.ОстаткиНоменклатурыСклад.Видимость = ВестиУчетПоСкладам;
				ОбновитьДанныеОбОстаткеНаСервере();
				
				Элементы.ОстаткиБезСклада.Видимость 		= НЕ ВестиУчетПоСкладам;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ВестиУчетПоСкладам;			
				
			КонецЕсли;
			Элементы.Цены.Видимость = ИспользоватьСложныйМеханизмЦен;				
			
			Если НЕ НоменклатураНеИспользовалась
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("БлокироватьКарточкуНоменклатурыПослеУказанияЕеВдокументах") Тогда
				
				Элементы.Наименование.ТолькоПросмотр 	= Истина;
				Элементы.ВерхСлева.ТолькоПросмотр 		= Истина;
				Элементы.Дополнительно.ТолькоПросмотр 	= Истина;
			КонецЕсли;
			
			Если (объект.СерийныйУчет
				и НЕ Найти(объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый серийный товар")) = 0)
				или НЕ Найти(объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия товара с ценами")) = 0 Тогда
				
				Объект.Наименование = "";
				ЭтаФорма.ТекущийЭлемент = Элементы.НаименованиеНоменклатуры;
			КонецЕсли;
			
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы();
			
			Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
				ЕдиницыИзмеренияНоменклатуры.Отбор.Элементы[0].ПравоеЗначение = ОбъектСсылка;
			КонецЕсли;
			
			Штрихкоды.Отбор.Элементы[0].ПравоеЗначение = ОбъектСсылка;
			ДополнительныеШтрихКоды.Отбор.Элементы[0].ПравоеЗначение = ОбъектСсылка;
		КонецЕсли;
		
		если ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры тогда
			ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
			
			Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать 
				или НЕ ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка) Тогда
				
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Ложь;
			иначе
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
			КонецЕсли;	                                                                        	
		КонецЕсли;
		
		Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);	
		
		Спецификации.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);	
		Элементы.Спецификации.Видимость = ЗначениеЗаполнено(ОбъектСсылка);
		
		НоменклатурнаяГруппаПриИзмененииНаСервере(Истина);
		
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		УстанавливатьШтрихКодИзКарточкиНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УстанавливатьШтрихКодИзКарточкиНоменклатуры");
		
		ОстаткиНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		ОстаткиНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", Дата);
		
		Цены.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Цены.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", Дата);
		СерииВНаличии.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Изображения.Параметры.УстановитьЗначениеПараметра("Владелец", ОбъектСсылка);
		
		Элементы.Цена.Видимость = не ИспользоватьСложныйМеханизмЦен;
		
		Если НЕ Отказ
			И Объект.SKU = 0 Тогда
			
			Объект.SKU = ПодключаемоеОборудованиеДСервер.ПолучитьМаксимальныйКодSKU();
		КонецЕсли;	
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		элементы.НаименованиеОсновнойВалюты.Видимость 	= не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.КоличествоПоУмолчанию.Видимость 		= не объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
		
		Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
		
		ВидимостьСоставаНабора();
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = Ложь;
			элементы.ПроцентСкидки.Доступность 	= Ложь;
			элементы.Цены.ТолькоПросмотр 		= Истина;
			Элементы.ЦеныДобавитьЦену.Видимость = ложь;
			элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = истина;
			
		КонецЕсли;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
	
		обновитьвидимостьуслуги();
		РодительПриИзмененииНаСервере();
		
		элементы.НоменклатурнаяГруппа.ОтметкаНезаполненного = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
		И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры");		
		
		если НЕ Отказ
			И ПоддержкаДругихЯзыков 
			и ЗначениеЗаполненообъектСсылка тогда
			
			ПредставлениеНаименования = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
						
					ИначеЕсли ВыборкаДетальныеЗаписи.Поле = "НаименованиеДляПечати" Тогда
						СтрокаЯзыка = НаименованияДляПечатиНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		иначе
			ПредставлениеНаименования 	= объект.Наименование;
			НаименованиеДляПечати 		= Объект.НаименованиеДляПечати;
			
		КонецЕсли;	
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланкаКоличестваДляЛьготнойЦены, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиНоменклатурыОстаток, , Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СоставКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ЕдиницыИзмеренияНоменклатурыКоличество, , Истина);
		
		Элементы.ДопШтрихКоды.Видимость = ИспользоватьШтрихКоды И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры") ;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Знач НоваяНоменклатурнаяГруппа = Ложь)
	
	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп 
		и ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		
		НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Объект.НоменклатурнаяГруппа);
		Если не НаименованияДополнительныхРеквизитов = Неопределено Тогда
			Счетчик = 1;
			Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
				
				НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДопРеквизит.ДополнительныйРеквизит);
				
				Выполнить("ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");
				
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");
				
				ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
				Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ");");
				
				если НоваяНоменклатурнаяГруппа 
					И НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = типзнч(ДопРеквизит.ЗначениеПоУмолчанию)  Тогда
					
					Выполнить("Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = ДопРеквизит.ЗначениеПоУмолчанию;");
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			Пока счетчик <= 10 Цикл
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Ложь;");
				
				Если НоваяНоменклатурнаяГруппа Тогда
					Выполнить("Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = Неопределено;");
				КонецЕсли;
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатурнаяГруппаПриИзмененииНаСервере(Знач ПриОткрытии = Ложь)
	
	Если НЕ ПриОткрытии Тогда
		ОбщийМодульТоварСервер.УстановитьНаименованиеНоменклатурыПоФормуле(Объект);	
	КонецЕсли;
	
	Элементы.Родитель.ТолькоПросмотр 	 = Ложь;
	Элементы.СерийныйУчет.ТолькоПросмотр = Ложь;
	
	НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		
		Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда		
			
			Родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование) ;			
			Если НЕ объект.Родитель = Родитель Тогда
				объект.Родитель = Родитель;				
			КонецЕсли;
			
			Элементы.Родитель.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		Если НоменклатурнаяГруппа.НоменклатураЭтойГруппыССерийнымУчетом тогда
			
			если не Объект.СерийныйУчет Тогда					
				Объект.СерийныйУчет = Истина;	
			КонецЕсли;
			Элементы.СерийныйУчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры
			И Объект.ОсновнаяЕдиницаИзмерения = ""
			И НЕ НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения = "" Тогда
			
			Объект.ОсновнаяЕдиницаИзмерения = НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихКодПоФормуле(Команда)
	ОбновитьШтрихКодПоФормулеНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодПоФормулеНаСервере(Знач Принудительно)
	
	Если Принудительно 
		или Объект.ОсновнойШтрихКод = "" Тогда
		
		Объект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(Объект);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			Попытка
				СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				элементы.ГруппаСтраницСправа.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;				
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.ПредставлениеНаименования;	
	КонецЕсли;
	
	ОбновитьРазмеры();
	СерийныйУчетПриИзмененииК();
	ВидимостьТаблицСправа();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	Если УстанавливатьШтрихКодИзКарточкиНоменклатуры
		или	Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код основным для этой номенклатуры?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		
		Объект.ОсновнойШтрихКод = ТекКод;
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦену(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФормаНовойЦены = ПолучитьФорму("РегистрСведений.Цены.ФормаЗаписи"); 
		ФормаНовойЦены.Запись.Номенклатура 	= Объект.Ссылка;		
		ФормаНовойЦены.Запись.Период 		= НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
		ФормаНовойЦены.Открыть(); 
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не записан элемент номенклатура."), СтатусСообщения.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбОстатке(Команда)
	ОбновитьДанныеОбОстаткеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбОстаткеНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 		
		дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоПриход, 0) КАК КоличествоПриход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаПриход, 0) КАК СуммаПриход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаРасход, 0) КАК СуммаРасход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК КоличествоКонечныйОстаток,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток
		|ИЗ РегистрНакопления.Товары.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Номенклатура = &Номенклатура) КАК ТоварыОстаткиИОбороты";
		
		Запрос.УстановитьПараметр("ДатаНачала", '00010101000000');
		Запрос.УстановитьПараметр("ДатаОкончания", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Остаток = 0;
		НаСумму = 0;
		КоличествоПриход = 0;
		КоличествоРасход = 0;
		СуммаПриход = 0;
		СуммаРасход = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Остаток 			= Остаток + ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток;
			НаСумму 			= НаСумму + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
			КоличествоПриход 	= КоличествоПриход + ВыборкаДетальныеЗаписи.КоличествоПриход;
			КоличествоРасход	= КоличествоРасход + ВыборкаДетальныеЗаписи.КоличествоРасход;
			СуммаПриход 		= СуммаПриход + ВыборкаДетальныеЗаписи.СуммаПриход;
			СуммаРасход 		= СуммаРасход + ВыборкаДетальныеЗаписи.СуммаРасход;
		КонецЦикла;
		
		Элементы.Остаток.Видимость 			= (не КоличествоПриход = 0) или (не Остаток = 0);
		Элементы.НаСумму.Видимость 			= не НаСумму = 0;
		Элементы.НаименованиеОсновнойВалюты1.Видимость = не НаСумму = 0;
		Элементы.КоличествоПриход.Видимость = не КоличествоПриход = 0;
		Элементы.СуммаПриход.Видимость 		= не СуммаПриход = 0;
		Элементы.КоличествоРасход.Видимость = не КоличествоРасход = 0;
		Элементы.СуммаРасход.Видимость 		= не СуммаРасход = 0;
		
		СредняяЦенаПриобретения = ОбщийМодульСервер.ПолучитьЦенуСписания(объект.Ссылка, 1, Дата);
		элементы.СредняяЦенаПриобретения.Видимость 	= ИспользоватьСложныйМеханизмЦен и не СредняяЦенаПриобретения = 0;		
		
		Если НЕ КоличествоПриход = 0
			и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Ссылка.КлиентПоставщик КАК Поставщик,
			|	ПоступленияТовараТовары.Ссылка.Дата КАК Дата
			|ИЗ Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
			|ГДЕ ПоступленияТовараТовары.Номенклатура = &Номенклатура
			|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				ПоследнийПоставщик = ВыборкаДетальныеЗаписи.Поставщик;
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНаборПриИзменении(Элемент)
	ВидимостьСоставаНабора();
КонецПроцедуры

процедура ВидимостьСоставаНабора()
	
	элементы.ГруппаСоставИСуммы.Видимость 						= объект.ЭтоНабор = ИСТИНА ;	
	элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость 	= Не (объект.ЭтоНабор = ИСТИНА ) И ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры;	
	элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = не ИспользоватьСложныйМеханизмЦен и объект.ЭтоНабор = ИСТИНА ;	
	элементы.КоличествоНаборовКотороеМожноСобратьНаТекущийМомент.Видимость = ЗначениеЗаполнено(объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава(Команда)
	ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере()
	
	объект.Цена = 0;
	для каждого СтрокаСоставаНабора из объект.Состав цикл
		Если ЗначениеЗаполнено(СтрокаСоставаНабора.номенклатура) Тогда
			объект.Цена = объект.Цена + СтрокаСоставаНабора.количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), Истина, СтрокаСоставаНабора.количество, , , , Объект.Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМомент(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(ТабДок);
	
	ТабДок.ОтображатьСетку 	= Ложь;
	ТабДок.Защита 			= Ложь;
	ТабДок.ТолькоПросмотр 	= Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("компонока Наборов ")+ объект.Наименование);
	
КонецПроцедуры

&НаСервере
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(Знач ТабДок)
	
	Макет 	= Справочники.Номенклатура.ПолучитьМакет("МакетНабора");
	Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	ТаблОписанияНабора = новый ТаблицаЗначений;
	ТаблОписанияНабора.Колонки.Добавить("Номенклатура");
	ТаблОписанияНабора.Колонки.Добавить("Количество");
	
	добавитьвмассивспецификаций(объект.Состав, ТаблОписанияНабора, 1);	
	
	ТаблОписанияНабора.Свернуть("Номенклатура", "Количество");
	ТаблОписанияНабора.Колонки.Добавить("Цена");
	ТаблОписанияНабора.Колонки.Добавить("Остаток");
	МинимальныйДелегат  = -1;
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		если не ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(СтрокаСоставаНабора.номенклатура) тогда
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаСоставаНабора.номенклатура, СтрокаСоставаНабора.количество, Дата);
			СтрокаСоставаНабора.остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(СтрокаСоставаНабора.номенклатура, , Дата);
			
			МожноПроизвести = цел(СтрокаСоставаНабора.остаток / СтрокаСоставаНабора.количество);
			Если МинимальныйДелегат  = -1
				или МожноПроизвести < МинимальныйДелегат  Тогда
				
				МинимальныйДелегат = МожноПроизвести;
			КонецЕсли;	
		иначе
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , Дата, Истина, , , , , Объект.Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения);
			СтрокаСоставаНабора.остаток = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблОписанияНабора.Колонки.Добавить("Использовано");
	ТаблОписанияНабора.Колонки.Добавить("НаСумму");
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		СтрокаСоставаНабора.Использовано = МинимальныйДелегат * СтрокаСоставаНабора.Количество;
		СтрокаСоставаНабора.НаСумму 		= СтрокаСоставаНабора.Использовано * СтрокаСоставаНабора.цена;
	КонецЦикла;
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОбластьЗаголовок.Параметры.Номенклатура = ?(ЗначениеЗаполнено(Объект.НаименованиеДляПечати), Объект.НаименованиеДляПечати, объект.Наименование);
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрокаСоставаНабора);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ОбластьПодвал.параметры.ИтогоНаборов = МинимальныйДелегат;
	НаСумму = ТаблОписанияНабора.Итог("НаСумму");
	ОбластьПодвал.параметры.НаСумму = НаСумму;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(объект.Ссылка, ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию"), дата, истина, МинимальныйДелегат, , , , Объект.Ссылка) ;
	Иначе
		цена = объект.Цена;
	КонецЕсли;
	
	ОбластьПодвал.параметры.цена 			= цена;
	ОбластьПодвал.параметры.НаборНаСумму 	= цена * МинимальныйДелегат;
	ОбластьПодвал.параметры.Выручка 		= (цена * МинимальныйДелегат) - НаСумму;
	
	ТабДок.Вывести(ОбластьПодвал);
	
КонецПроцедуры

&НаСервере
Процедура добавитьвмассивспецификаций(Знач состав, ТаблОписанияНабора, Знач Кво)
	
	для каждого строкасоставанабора из состав цикл
		
		Если строкасоставанабора.номенклатура.этонабор  = ИСТИНА Тогда
			добавитьвмассивспецификаций(строкасоставанабора.номенклатура.состав, ТаблОписанияНабора, строкасоставанабора.количество * Кво);	
			
		иначе
			СтрокаСпециф = ТаблОписанияНабора.добавить();
			СтрокаСпециф.Номенклатура 	= строкасоставанабора.номенклатура;
			СтрокаСпециф.количество 	= строкасоставанабора.количество * кво;
			
			Если СтрокаСпециф.количество = 0 Тогда
				СтрокаСпециф.количество = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //добавитьвмассивспецификаций

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

&НаКлиенте
Процедура НеОтслеживатьОстатокПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

процедура обновитьвидимостьуслуги()
	
	элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = не УслугаНЕТовар и ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры и не объект.НеОтслеживатьОстаток ;
	элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась И не УслугаНЕТовар и объект.РекомендуемыйМинимальныйОстатокТовара = 0;
	элементы.Артикул.Видимость 					= не УслугаНЕТовар;
	элементы.Производитель.Видимость 			= не УслугаНЕТовар;
	элементы.СредняяЦенаПриобретения.Видимость 	= не УслугаНЕТовар и не СредняяЦенаПриобретения = 0 и не объект.НеОтслеживатьОстаток;
	Элементы.ГруппаСерийногоУчета.Доступность	= НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Видимость		= НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	Элементы.ПериодОказанияУслугиЗаВремя.Видимость = УслугаНЕТовар И ВестиУчетОказанияУслугЗаВремя;
	
	Если (УслугаНЕТовар ИЛИ Объект.НеОтслеживатьОстаток)
		и объект.СерийныйУчет Тогда
		
		объект.СерийныйУчет = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	элементы.ПланкаКоличестваДляЛьготнойЦены.Доступность 		= Истина;
	элементы.РекомендуемыйМинимальныйОстатокТовара.Доступность 	= Истина;
	Элементы.ОстатокНеОтслеживается.Видимость	= Объект.НеОтслеживатьОстаток И НЕ НоменклатураНеИспользовалась;
	элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась;
	элементы.СериныйУчет.Видимость 				= УчетПоСериям И Объект.СерийныйУчет И НЕ НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Видимость		= НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	
	Родитель = Объект.Родитель;
	Если ЗначениеЗаполнено(Родитель) тогда
		
		Если НЕ родитель.КоличествоПоУмолчанию = 0 Тогда
			элементы.КоличествоПоУмолчанию.Доступность = Ложь;
			Если Не объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию Тогда
				
				объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию = ИстинА;	
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям
			И Родитель.СерийныйУчет Тогда
			
			если НоменклатураНеИспользовалась 
				И не Объект.СерийныйУчет тогда				
				
				Объект.СерийныйУчет = Истина;    	
			КонецЕсли;
			
			Если Объект.СерийныйУчет ТОгда
				элементы.СериныйУчет.Видимость 			  = Истина;
				Элементы.ГруппаСерийногоУчета.Доступность = ЛОЖЬ;
			КонецЕсли;
			
			Если Родитель.ЗапретитьУказаниеБезСерии Тогда
				
				если НоменклатураНеИспользовалась 
					И НЕ Объект.ЗапретитьУказаниеБезСерии тогда				
					
					Объект.ЗапретитьУказаниеБезСерии = Истина;		
				КонецЕсли;			
				
				Если Объект.ЗапретитьУказаниеБезСерии Тогда
					Элементы.ЗапретитьУказаниеБезСерии.ТолькоПросмотр = Истина;
					элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");					
					Элементы.ГруппаСерийногоУчета.Видимость	= Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		если Родитель.НеОтслеживатьОстаток Тогда
			
			если НоменклатураНеИспользовалась
				И не Объект.НеОтслеживатьОстаток тогда
				
				Объект.НеОтслеживатьОстаток = истина;				
			КонецЕсли;
			
			Если Объект.НеОтслеживатьОстаток Тогда
				Элементы.ОстатокНеОтслеживается.Видимость	= Истина;
				элементы.НеОтслеживатьОстаток.Видимость 	= Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если не Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
			элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = Истина;
			
			если не объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены тогда
				объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Если не Родитель.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
			элементы.РекомендуемыйМинимальныйОстатокТовара.ТолькоПросмотр = Истина;
			
			если не объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара тогда
				объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВидимостьСоставаНабора();
	если ЗначениеЗаполнено(объект.Ссылка) тогда
		
		строкатовара = Новый Структура;
		строкатовара.Вставить("Номенклатура", Объект.Ссылка);
		строкатовара.Вставить("Цена", 0);		
		
		для каждого строкаЦен из ЦеныДляНовойНоменклатуры цикл
			Если не строкацен.цена = 0 Тогда
				строкатовара.цена = строкацен.цена;
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(строкацен.видцен, строкатовара, , строкацен.остроке, строкацен.датацены);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	если ПоддержкаДругихЯзыков тогда
		если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, ПредставлениеНаименования);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			
			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);	
			КонецЦикла;
		КонецЕсли;
		
	конецесли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварИлиУслугаПриИзменении(Элемент)
	
	объект.НеОтслеживатьОстаток = УслугаНЕТовар;
	Если УслугаНЕТовар Тогда
		объект.ПланкаКоличестваДляЛьготнойЦены = 0;
	КонецЕсли;
	
	обновитьвидимостьуслуги();
	
КонецПроцедуры

&НаСервере
процедура заполнитьценыНовойНоменклатуры()
	
	ЦеныДляНовойНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = ЛОЖЬ
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.Предопределенный УБЫВ,
	|	ВидыЦен.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДатаЗапретаИзмененияДанных = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных");
		Если ДатаЗапретаИзмененияДанных = '00010101000000' Тогда
			
			СрокЗапретаДанныхВЧасах = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах");
			Если СрокЗапретаДанныхВЧасах = 0 Тогда
				дата = НачалоМесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
			иначе
				дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата() - СрокЗапретаДанныхВЧасах * 3600 + 600;
			КонецЕсли;
			
		иначе
			дата = КонецДня(ДатаЗапретаИзмененияДанных + 3600);
			
		КонецЕсли;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаЦен = ЦеныДляНовойНоменклатуры.Добавить();
			СтрокаЦен.ДатаЦены 	= дата;
			СтрокаЦен.ВидЦен 	= ВыборкаДетальныеЗаписи.ссылка;
			СтрокаЦен.Цена 		= 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	если не отказ
		и не ЗначениеЗаполнено(Объект.Наименование)
		и ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда
		
		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;
	
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеВидыЦен(Команда)
	ДобавитьВсеВидыЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеВидыЦенНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.ПометкаУдаления = ЛОЖЬ
	|	И ВидыЦен.Зависимая = ЛОЖЬ
	| И НЕ ВидыЦен.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",ЦеныДляНовойНоменклатуры.Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяЦена = ЦеныДляНовойНоменклатуры.Добавить();
		НоваяЦена.ДатаЦены 	= Дата;
		НоваяЦена.ВидЦен 	= ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойШтрихКодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	если не Объект.ОсновнойШтрихКод = "" тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.ОсновнойШтрихКод);
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	если не Объект.Артикул = "" тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.Артикул + Элемент.имя);
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	НеПоказыватьТаблицыСправа = НЕ НеПоказыватьТаблицыСправа;
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблицСправа()
	
	КолонкаСправаВидимость = ЗначениеЗаполнено(Объект.Ссылка) И НЕ НеПоказыватьТаблицыСправа;
	Элементы.КолонкаСправа.Видимость = КолонкаСправаВидимость;
	Элементы.Цены.Видимость = ИспользоватьСложныйМеханизмЦен И КолонкаСправаВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзменении(Элемент)
	СерийныйУчетПриИзмененииК();
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзмененииК()
	
	Элементы.ЗапретитьУказаниеБезСерии.Видимость = НоменклатураНеИспользовалась И УчетПоСериям И Объект.СерийныйУчет;
	Элементы.СерииВНаличии.Видимость 			 = УчетПоСериям И Объект.СерийныйУчет и ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.НеОтслеживатьОстаток.Видимость 	 = НоменклатураНеИспользовалась И НЕ Объект.СерийныйУчет;
	Элементы.ОсновнойШтрихКод.Заголовок			 = ?(Объект.СерийныйУчет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий для серий Штрих код"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Основной Штрих код"));
	Элементы.КоличествоПоУмолчанию.Видимость     = не объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
	
	Если Объект.СерийныйУчет
		и Объект.НеОтслеживатьОстаток Тогда
		
		Объект.НеОтслеживатьОстаток = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(Объект.Ссылка);
	элементы.ШтрихКоды.Видимость = ИспользоватьШтрихКоды И ЗначениеЗаполненоСсылка;
	элементы.ШтрихКоды.Видимость = ИспользоватьШтрихКоды И ЗначениеЗаполненоСсылка и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");
	
	СерийныйУчетПриИзмененииК();
	ВидимостьТаблицСправа();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
	
	Штрихкоды.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	ДополнительныеШтрихКоды.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	Спецификации.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);	
	Элементы.Спецификации.Видимость = ЗначениеЗаполненоСсылка;
	Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);	
	Элементы.Аналоги.Видимость = ЗначениеЗаполненоСсылка;
	элементы.ГруппаЦеныДляновойНоменклатуры.Видимость = НЕ ЗначениеЗаполненоСсылка;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ЕдиницыИзмеренияНоменклатуры.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
		Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость = Истина;
	КонецЕсли;	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(Объект.Наименование, Истина);
	Если не ГруппаПоПервомуСлову = Неопределено
		и не ГруппаПоПервомуСлову = Объект.Родитель Тогда
		
		Объект.Родитель = ГруппаПоПервомуСлову;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаименованияПриИзменении(Элемент)
	
	объект.Наименование = ПредставлениеНаименования;
	НаименованиеИзменяли = Истина;
	
	если СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру тогда
		НаименованиеПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)
	Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Изображения1ПриАктивизацииСтроки(Элемент)
	
	ТекущийЭлементСписка = Элементы.Изображения.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ТекущийЭлементСписка);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		элементы.СсылкаНаИзображение.Видимость    = не СтруктураИзображения.ИзображениеВБазеДанных;
		элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
		
		если СтруктураИзображения.РазмерПриОтображении = 1 тогда
			элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
		иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
			элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
		иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
			элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
		иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
			элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
		иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
			элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
		конецесли; 		 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницСправа.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = элементы.Состав.ТекущиеДанные;
	если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(ТекущиеДанные.Номенклатура);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ДокументОбъект.ПодготовкаКПроведению(Отказ);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРазмеры()
	
	Если ЗначениеЗаполнено(Объект.Высота) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем") + " " + (Объект.Ширина * Объект.Длина * Объект.Высота);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ширина) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Площадь") + " " + (Объект.Ширина * Объект.Длина);
	Иначе
		Размеры = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШтрихКод(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ФормаШтрихКода = ПолучитьФОрму("РегистрСведений.ШтрихКоды.ФормаЗаписи", ПараметрыФормы);
	ФормаШтрихКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопШтрихКод(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ФормаШтрихКода = ПолучитьФОрму("РегистрСведений.ДополнительныеШтрихКоды.ФормаЗаписи", ПараметрыФормы);
	ФормаШтрихКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСпецификацию(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ФормаСпецификации = ПолучитьФорму("Справочник.Спецификации.Форма.ФормаЭлемента", ПараметрыФормы);
	ФормаСпецификации.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВГруппуАналогов(Команда)
	
	ГруппаАналогов = ПредопределенноеЗначение("Справочник.ГруппыАналогов.ПустаяСсылка");
	
	Если ВвестиЗначение(ГруппаАналогов, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите группу аналогов этой номенклатуры:"), тип("СправочникСсылка.ГруппыАналогов")) Тогда
		ВключитьВГруппуАналоговНаСервере(ГруппаАналогов);	
		Элементы.Аналоги1.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВГруппуАналоговНаСервере(Знач ГруппаАналогов)
	
	ГруппаАналоговОбъект = ГруппаАналогов.ПолучитьОбъект();
	СтрокаТовара = ГруппаАналоговОбъект.Товары.Добавить();
	СтрокаТовара.Номенклатура = Объект.Ссылка;
	СтрокаТовара.количество   = ?(Объект.КоличествоПоУмолчанию = 0, 1, Объект.КоличествоПоУмолчанию);
	ГруппаАналоговОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Аналоги1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги1.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.ГруппаАналогов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаГод(Команда)
	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 354.37;
КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаМесяц(Команда)
	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 30.43685;
КонецПроцедуры
