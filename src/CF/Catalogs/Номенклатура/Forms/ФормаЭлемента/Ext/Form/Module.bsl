//sza141226-0003 
//sza141016-0226
//sza141015-1738 ключи учета
//sza140913-0237
//sza140831-0011
//sza140829-2328
//sza140619-0327  
//sza130902-0029 : 
&НаКлиенте
Процедура Аналоги1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги1.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Если НЕ ПустаяСтрока(Объект.Артикул) Тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.Артикул + Элемент.имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьСоставаНабора()
	
	Элементы.ГруппаСоставИСуммы.Видимость 						= Объект.ЭтоНабор = ИСТИНА ;	
	Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость 	= Не (Объект.ЭтоНабор = ИСТИНА ) И ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры;	
	Элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = не ИспользоватьСложныйМеханизмЦен и Объект.ЭтоНабор = ИСТИНА ;	
	Элементы.КоличествоНаборовКотороеМожноСобратьНаТекущийМомент.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблицСправа()
	
	КолонкаСправаВидимость = ЗначениеЗаполнено(Объект.Ссылка) И НЕ НеПоказыватьТаблицыСправа;
	Элементы.КолонкаСправа.Видимость = КолонкаСправаВидимость;
	Элементы.Цены.Видимость = ИспользоватьСложныйМеханизмЦен И КолонкаСправаВидимость;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВГруппуАналогов(Команда)
	
	ГруппаАналогов = ПредопределенноеЗначение("Справочник.ГруппыАналогов.ПустаяСсылка");
	
	Если ВвестиЗначение(ГруппаАналогов, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите группу аналогов этой номенклатуры") + ": ", тип("СправочникСсылка.ГруппыАналогов")) Тогда
		ВключитьВГруппуАналоговНаСервере(ГруппаАналогов);	
		Элементы.Аналоги1.Обновить();
		Элементы.ГруппыАналогов.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВГруппуАналоговНаСервере(Знач ГруппаАналогов)
	
	ГруппаАналоговОбъект = ГруппаАналогов.ПолучитьОбъект();
	СтрокаТовара = ГруппаАналоговОбъект.Товары.Добавить();
	СтрокаТовара.Номенклатура = Объект.Ссылка;
	СтрокаТовара.количество   = ?(Объект.КоличествоПоУмолчанию = 0, 1, Объект.КоличествоПоУмолчанию);
	ГруппаАналоговОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВМассивСпецификаций(Знач состав, ТаблОписанияНабора, Знач Кво)
	
	Для Каждого строкасоставанабора из состав цикл
		
		Если строкасоставанабора.номенклатура.этонабор  = ИСТИНА Тогда
			добавитьвмассивспецификаций(строкасоставанабора.номенклатура.состав, ТаблОписанияНабора, строкасоставанабора.количество * Кво);	
			
		Иначе
			СтрокаСпециф = ТаблОписанияНабора.добавить();
			СтрокаСпециф.Номенклатура 	= строкасоставанабора.номенклатура;
			СтрокаСпециф.количество 	= строкасоставанабора.количество * кво;
			
			Если СтрокаСпециф.количество = 0 Тогда
				СтрокаСпециф.количество = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //добавитьвмассивспецификаций

&НаКлиенте
Процедура ДобавитьВсеВидыЦен(Команда)
	ДобавитьВсеВидыЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсеВидыЦенНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.ПометкаУдаления = ЛОЖЬ
	|	И ВидыЦен.Зависимая = ЛОЖЬ
	| И НЕ ВидыЦен.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ЦеныДляНовойНоменклатуры.Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяЦена = ЦеныДляНовойНоменклатуры.Добавить();
			НоваяЦена.ДатаЦены = Дата;
			НоваяЦена.ВидЦен   = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопШтрихКод(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ФормаШтрихКода = ПолучитьФОрму("РегистрСведений.ДополнительныеШтрихКоды.ФормаЗаписи", ПараметрыФормы);
	ФормаШтрихКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСпецификацию(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ИмяНеобходимойФормы = "Справочник.Спецификации.Форма.ФормаЭлемента";
	ФормаСпецификации = ПолучитьФорму(ИмяФормы, ПараметрыФормы);
	ФормаСпецификации.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦену(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФормаНовойЦены = ПолучитьФорму("РегистрСведений.Цены.ФормаЗаписи"); 
		ФормаНовойЦены.Запись.Номенклатура 	= Объект.Ссылка;		
		ФормаНовойЦены.Запись.Период 		= НачалоДня(ОбщийМодульКлиент.ПользователяТекущаяДата());
		ФормаНовойЦены.Открыть(); 
		
	Иначе
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не записан элемент номенклатура."), СтатусСообщения.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШтрихКод(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ФормаШтрихКода = ПолучитьФОрму("РегистрСведений.ШтрихКоды.ФормаЗаписи", ПараметрыФормы);
	ФормаШтрихКода.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНовойНоменклатуры()
	
	ЦеныДляНовойНоменклатуры.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = ЛОЖЬ
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.Предопределенный УБЫВ,
	|	ВидыЦен.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДатаЗапретаИзмененияДанных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных");
		Если ДатаЗапретаИзмененияДанных = '00010101000000' Тогда
			
			СрокЗапретаДанныхВЧасах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах");
			Если СрокЗапретаДанныхВЧасах = 0 Тогда
				дата = НачалоМесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
			Иначе
				дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата() - СрокЗапретаДанныхВЧасах * 3600 + 600;
			КонецЕсли;
			
		Иначе
			дата = КонецДня(ДатаЗапретаИзмененияДанных + 3600);
			
		КонецЕсли;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаЦен = ЦеныДляНовойНоменклатуры.Добавить();
			СтрокаЦен.ДатаЦены 	= дата;
			СтрокаЦен.ВидЦен 	= ВыборкаДетальныеЗаписи.ссылка;
			СтрокаЦен.Цена 		= 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Изображения1ПриАктивизацииСтроки(Элемент)
	
	ТекущийЭлементСписка = Элементы.Изображения.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
		СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ТекущийЭлементСписка);
		ПодСсылку = СтруктураИзображения.ПодСсылку;
		
		Элементы.СсылкаНаИзображение.Видимость    = не СтруктураИзображения.ИзображениеВБазеДанных;
		Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
		
		Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
		Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
			Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
		КонецЕсли; 		 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМомент(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОТЧЕТРУК";
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(ТабДок);
	
	ТабДок.ОтображатьСетку 	= ЛОЖЬ;
	ТабДок.Защита 			= ЛОЖЬ;
	ТабДок.ТолькоПросмотр 	= ЛОЖЬ;
	ТабДок.ОтображатьЗаголовки = ЛОЖЬ;
	ТабДок.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("компонока Наборов ")+ Объект.Наименование);
	
КонецПроцедуры

&НаСервере
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(Знач ТабДок)
	
	Макет 	= Справочники.Номенклатура.ПолучитьМакет("МакетНабора");
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
	
	Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	ТаблОписанияНабора = Новый ТаблицаЗначений;
	ТаблОписанияНабора.Колонки.Добавить("Номенклатура");
	ТаблОписанияНабора.Колонки.Добавить("Количество");
	
	добавитьвмассивспецификаций(Объект.Состав, ТаблОписанияНабора, 1);	
	
	ТаблОписанияНабора.Свернуть("Номенклатура", "Количество");
	ТаблОписанияНабора.Колонки.Добавить("Цена");
	ТаблОписанияНабора.Колонки.Добавить("Остаток");
	МинимальныйДелегат  = -1;
	
	Для Каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(СтрокаСоставаНабора.номенклатура) Тогда
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаСоставаНабора.номенклатура, СтрокаСоставаНабора.количество, Дата);
			СтрокаСоставаНабора.остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(СтрокаСоставаНабора.номенклатура, , Дата);
			
			МожноПроизвести = цел(СтрокаСоставаНабора.остаток / СтрокаСоставаНабора.количество);
			Если МинимальныйДелегат  = -1
				ИЛИ МожноПроизвести < МинимальныйДелегат  Тогда
				
				МинимальныйДелегат = МожноПроизвести;
			КонецЕсли;	
		Иначе
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , Дата, ИСТИНА, , , , , Объект.Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения);
			СтрокаСоставаНабора.остаток = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблОписанияНабора.Колонки.Добавить("Использовано");
	ТаблОписанияНабора.Колонки.Добавить("НаСумму");
	
	Для Каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		СтрокаСоставаНабора.Использовано = МинимальныйДелегат * СтрокаСоставаНабора.Количество;
		СтрокаСоставаНабора.НаСумму 		= СтрокаСоставаНабора.Использовано * СтрокаСоставаНабора.цена;
	КонецЦикла;
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОбластьЗаголовок.Параметры.Номенклатура = ?(ЗначениеЗаполнено(Объект.НаименованиеДляПечати), Объект.НаименованиеДляПечати, Объект.Наименование);
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Для Каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрокаСоставаНабора);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ОбластьПодвал.параметры.ИтогоНаборов = МинимальныйДелегат;
	НаСумму = ТаблОписанияНабора.Итог("НаСумму");
	ОбластьПодвал.параметры.НаСумму = НаСумму;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Ссылка, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию"), дата, ИСТИНА, МинимальныйДелегат, , , , Объект.Ссылка);
	Иначе
		цена = Объект.Цена;
	КонецЕсли;
	
	ОбластьПодвал.параметры.цена 			= цена;
	ОбластьПодвал.параметры.НаборНаСумму 	= цена * МинимальныйДелегат;
	ОбластьПодвал.параметры.Выручка 		= (цена * МинимальныйДелегат) - НаСумму;
	
	ТабДок.Вывести(ОбластьПодвал);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)
	Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованияДляПечатиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	Объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(Объект.Наименование, ИСТИНА);
	Если НЕ ГруппаПоПервомуСлову = Неопределено
		И ГруппаПоПервомуСлову.ЭтоГруппа
		И НЕ ГруппаПоПервомуСлову = Объект.Родитель Тогда
		
		Объект.Родитель = ГруппаПоПервомуСлову;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияДляПечатиНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НеОтслеживатьОстатокПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатурнаяГруппаПриИзмененииНаСервере(Знач ПриОткрытии = ЛОЖЬ)
	
	Если НЕ ПриОткрытии Тогда
		ОбщийМодульТоварСервер.УстановитьНаименованиеНоменклатурыПоФормуле(Объект);	
	КонецЕсли;
	
	Элементы.Родитель.ТолькоПросмотр 	 = ЛОЖЬ;
	Элементы.СерийныйУчет.ТолькоПросмотр = ЛОЖЬ;
	
	НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		
		Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда		
			
			Родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);			
			Если НЕ Объект.Родитель = Родитель
				И Родитель.ЭтоГруппа Тогда
				
				Объект.Родитель = Родитель;				
			КонецЕсли;
			
			Элементы.Родитель.ТолькоПросмотр = ИСТИНА;			
		КонецЕсли;
		
		Если НоменклатурнаяГруппа.НоменклатураЭтойГруппыССерийнымУчетом тогда
			
			Если НЕ Объект.СерийныйУчет Тогда					
				Объект.СерийныйУчет = ИСТИНА;	
			КонецЕсли;
			Элементы.СерийныйУчет.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры
			И Объект.ОсновнаяЕдиницаИзмерения = ""
			И НЕ ПустаяСтрока(НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения) Тогда
			
			Объект.ОсновнаяЕдиницаИзмерения = НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПриОткрытии Тогда
		ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(ИСТИНА);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидимостьУслуги()
	
	Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = не УслугаНЕТовар и ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры и не Объект.НеОтслеживатьОстаток ;
	Элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась И не УслугаНЕТовар и Объект.РекомендуемыйМинимальныйОстатокТовара = 0;
	Элементы.Артикул.Видимость 					= не УслугаНЕТовар;
	Элементы.Производитель.Видимость 			= не УслугаНЕТовар;
	Элементы.СредняяЦенаПриобретения.Видимость 	= не УслугаНЕТовар и не СредняяЦенаПриобретения = 0 и не Объект.НеОтслеживатьОстаток;
	Элементы.ГруппаСерийногоУчета.Доступность	= НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Видимость		= НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	Элементы.ПериодОказанияУслугиЗаВремя.Видимость = УслугаНЕТовар И ВестиУчетОказанияУслугЗаВремя;
	
	Если (УслугаНЕТовар ИЛИ Объект.НеОтслеживатьОстаток)
		И Объект.СерийныйУчет Тогда
		
		Объект.СерийныйУчет = ЛОЖЬ;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбОстатке(Команда)
	ОбновитьДанныеОбОстаткеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбОстаткеНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 		
		дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоПриход, 0) КАК КоличествоПриход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоРасход, 0) КАК КоличествоРасход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаПриход, 0) КАК СуммаПриход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаРасход, 0) КАК СуммаРасход,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК КоличествоКонечныйОстаток,
		|	ЕСТЬNULL(ТоварыОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток
		|ИЗ РегистрНакопления.Товары.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , Номенклатура = &Номенклатура) КАК ТоварыОстаткиИОбороты";
		
		Запрос.УстановитьПараметр("ДатаНачала", '00010101000000');
		Запрос.УстановитьПараметр("ДатаОкончания", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Остаток = 0;
		НаСумму = 0;
		КоличествоПриход = 0;
		КоличествоРасход = 0;
		СуммаПриход = 0;
		СуммаРасход = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Остаток 			= Остаток + ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток;
			НаСумму 			= НаСумму + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
			КоличествоПриход 	= КоличествоПриход + ВыборкаДетальныеЗаписи.КоличествоПриход;
			КоличествоРасход	= КоличествоРасход + ВыборкаДетальныеЗаписи.КоличествоРасход;
			СуммаПриход 		= СуммаПриход + ВыборкаДетальныеЗаписи.СуммаПриход;
			СуммаРасход 		= СуммаРасход + ВыборкаДетальныеЗаписи.СуммаРасход;
		КонецЦикла;
		
		Элементы.Остаток.Видимость 			= (не КоличествоПриход = 0) или (не Остаток = 0);
		Элементы.НаСумму.Видимость 			= не НаСумму = 0;
		Элементы.НаименованиеОсновнойВалюты1.Видимость = не НаСумму = 0;
		Элементы.КоличествоПриход.Видимость = не КоличествоПриход = 0;
		Элементы.СуммаПриход.Видимость 		= не СуммаПриход = 0;
		Элементы.КоличествоРасход.Видимость = не КоличествоРасход = 0;
		Элементы.СуммаРасход.Видимость 		= не СуммаРасход = 0;
		
		СредняяЦенаПриобретения = ОбщийМодульСервер.ПолучитьЦенуСписания(Объект.Ссылка, 1, Дата);
		Элементы.СредняяЦенаПриобретения.Видимость 	= ИспользоватьСложныйМеханизмЦен и не СредняяЦенаПриобретения = 0;		
		
		Если НЕ КоличествоПриход = 0
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Ссылка.КлиентПоставщик КАК Поставщик,
			|	ПоступленияТовараТовары.Ссылка.Дата КАК Дата
			|ИЗ Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
			|ГДЕ ПоступленияТовараТовары.Номенклатура = &Номенклатура
			|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				ПоследнийПоставщик = ВыборкаДетальныеЗаписи.Поставщик;
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Знач НоваяНоменклатурнаяГруппа = ЛОЖЬ)
	
	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		
		Счетчик = 1;
		Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
			
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Объект.НоменклатурнаяГруппа);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Если Счетчик <= 10 Тогда
						
						ДополнительныйРеквизит = ДопРеквизит.ДополнительныйРеквизит;
						НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДополнительныйРеквизит);
						
						Выполнить(" ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");
						
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");
						
						Если ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
							ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
							ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
							
							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".КнопкаВыбора  = ИСТИНА;");
							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".КнопкаОчистки = ИСТИНА;");
						КонецЕсли;
						
						ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
						Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ");");
						
						Если ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Дата")
							ИЛИ ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Булево")
							ИЛИ ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Число") Тогда
							
							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".РастягиватьПоГоризонтали = ЛОЖЬ;");
						КонецЕсли;
						
						Если НоваяНоменклатурнаяГруппа 
							И НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = типзнч(ДопРеквизит.ЗначениеПоУмолчанию)  Тогда
							            
							Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = ДопРеквизит.ЗначениеПоУмолчанию;");
						КонецЕсли;	
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
				КонецЦикла;	
			КонецЕсли;
			
			Пока счетчик <= 10 Цикл
				Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ЛОЖЬ;");
				
				Если НоваяНоменклатурнаяГруппа Тогда
					Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = Неопределено;");
				КонецЕсли;
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазмеры()
	
	Если ЗначениеЗаполнено(Объект.Высота) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем") + " " + (Объект.Ширина * Объект.Длина * Объект.Высота);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ширина) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Площадь") + " " + (Объект.Ширина * Объект.Длина);
	Иначе
		Размеры = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихКодПоФормуле(Команда)
	ОбновитьШтрихКодПоФормулеНаСервере(ИСТИНА);
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодПоФормулеНаСервере(Знач Принудительно)
	
	Если Принудительно 
		ИЛИ ПустаяСтрока(Объект.ОсновнойШтрихКод) Тогда
		
		Объект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(Объект);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Если УстанавливатьШтрихКодИзКарточкиНоменклатуры
		или	Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код основным для этой номенклатуры?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		
		Объект.ОсновнойШтрихКод = ТекКод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойШтрихКодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Если НЕ ПустаяСтрока(Объект.ОсновнойШтрихКод) тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.ОсновнойШтрихКод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраницСправа.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
	СтраницаПанели  = СтраницыПанели.Индекс(ТекущаяСтраница);
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ отказ
		И НЕ ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда
		
		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;
	
	глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава(Команда)
	ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере()
	
	Объект.Цена = 0;
	Для Каждого СтрокаСоставаНабора из Объект.Состав цикл
		Если ЗначениеЗаполнено(СтрокаСоставаНабора.номенклатура) Тогда
			Объект.Цена = Объект.Цена + СтрокаСоставаНабора.количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), ИСТИНА, СтрокаСоставаНабора.количество, , , , Объект.Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ШтрихКоды.Видимость = ИспользоватьШтрихКоды И ЗначениеЗаполненоСсылка;
	Элементы.ШтрихКоды.Видимость = ИспользоватьШтрихКоды И ЗначениеЗаполненоСсылка и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");
	
	СерийныйУчетПриИзмененииК();
	ВидимостьТаблицСправа();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбъектСсылка = Объект.Ссылка;
	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(объектСсылка);
	
 	Элементы.КлючиУчетаБудутДоступныПослеЗаписиНоменклатуры.Видимость = ЛОЖЬ;
			 
	ВидимостьСоставаНабора();
	Если ЗначениеЗаполненоСсылка тогда
		
		ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры();
		
		строкатовара = Новый Структура;
		строкатовара.Вставить("Номенклатура", ОбъектСсылка);
		строкатовара.Вставить("Цена", 0);		
		
		Для Каждого строкаЦен из ЦеныДляНовойНоменклатуры цикл
			Если НЕ строкацен.цена = 0 Тогда
				строкатовара.цена = строкацен.цена;
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(строкацен.видцен, строкатовара, , строкацен.остроке, строкацен.датацены);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(ОбъектСсылка, ПредставлениеНаименования);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(ОбъектСсылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(ОбъектСсылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			
			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(ОбъектСсылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);	
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация);
	КонецЕсли;
	
	ПредставлениеНаименования 	 = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
	НаименованиеДляПечати 		 = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");
	
	Попытка
		Штрихкоды.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		ДополнительныеШтрихКоды.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
	Исключение
	КонецПопытки;
	Спецификации.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);	
	Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
	ГруппыАналогов.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
	ПредставленияКонтрагентов.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
	
	Элементы.ПредставленияКонтрагентов.Видимость = ИспользоватьПредставлениеТоваровКонтрагентами И ЗначениеЗаполненоСсылка;
	Элементы.Спецификации.Видимость = ИспользоватьКомплектацию И ЗначениеЗаполненоСсылка;
	Элементы.Аналоги.Видимость = ИспользоватьМеханизмАналоговДляНоменклатуры И ЗначениеЗаполненоСсылка;
	Элементы.ГруппыАналогов.Видимость = ИспользоватьМеханизмАналоговДляНоменклатуры И ЗначениеЗаполненоСсылка;
	Элементы.ГруппаЦеныДляновойНоменклатуры.Видимость = НЕ ЗначениеЗаполненоСсылка;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ЕдиницыИзмеренияНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость = ИСТИНА;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаименованияПриИзменении(Элемент)
	
	Объект.Наименование = ПредставлениеНаименования;
	НаименованиеИзменяли = ИСТИНА;
	
	Если СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру тогда
		НаименованиеПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаПанели)Тогда
			
			Попытка
				СтраницыПанели  = Элементы.ГруппаСтраницСправа.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаПанели);
				Элементы.ГруппаСтраницСправа.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;				
		КонецЕсли;
		
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.ПредставлениеНаименования;	
	КонецЕсли;
	
	ОбновитьРазмеры();
	СерийныйУчетПриИзмененииК();
	ВидимостьТаблицСправа();
	
	Если ЕстьКлючиУчета Тогда
		СменитьСтраницуКлючейУчетаНаСервере("1");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000300", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		
		ОбъектСсылка = Объект.Ссылка; 
		
		НоменклатураНеИспользовалась 	= ИСТИНА;
		ЗначениеЗаполненоСсылка 	= ЗначениеЗаполнено(ОбъектСсылка);
		
		ВестиУчетПоСкладам 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетОказанияУслугЗаВремя   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
		СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру");
		ИспользоватьСложныйМеханизмЦен 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
			 Элементы.СтраницаОстаткиИДанные.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остатки");
		КонецЕсли;
		УчетПоСериям 			= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		Дата 					= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ПоддержкаДругихЯзыков 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Элементы.ЦеныДобавитьЦену.Видимость = ИспользоватьСложныйМеханизмЦен И ЗначениеЗаполненоСсылка;
		ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ИСТИНА; //для алгоритма
		РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		ИспользоватьЕдиницыИзмеренияНоменклатуры				 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьШтрихКоды 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
		ИспользоватьКомплектацию 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию");
		ИспользоватьМеханизмАналоговДляНоменклатуры 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры");
		ИспользоватьПредставлениеТоваровКонтрагентами 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами");
		
		Элементы.ОбновитьШтрихКодПоФормуле.Видимость 	= ИспользоватьШтрихКоды И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость = ИспользоватьЕдиницыИзмеренияНоменклатуры;
		Элементы.Изображения.Видимость 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями");
		
		Элементы.ШтрихКоды.Видимость 		= ИспользоватьШтрихКоды И ЗначениеЗаполненоСсылка;
		Элементы.ГруппаГарантии.Видимость 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТаблонаВРасходномДокументе");
		
		Если НЕ ЗначениеЗаполненоСсылка Тогда
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСписки") Тогда
				 Элементы.КлючиУчетаБудутДоступныПослеЗаписиНоменклатуры.Видимость = ИСТИНА;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Родитель)
				И Параметры.Родитель.ЭтоГруппа
				И ЗначениеЗаполнено(Параметры.Родитель) Тогда
				
				Объект.Родитель = Параметры.Родитель;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаИзмерения) Тогда
				Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию");	
			КонецЕсли;
			
			Объект.СерийныйУчет = параметры.СерийныйУчет;
			
			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
				Объект.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
				Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
					И ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения) Тогда
					
					Объект.ОсновнаяЕдиницаИзмерения = Объект.НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Производитель) Тогда
				Объект.Производитель = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроизводительПоУмолчанию");
			КонецЕсли;
			
			Если Объект.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерПланкиКоличестваТовараДляЛьготнойЦены");
			КонецЕсли;		
			
			Элементы.Цены.Видимость = ЛОЖЬ;
			
			объектРодитель = Объект.Родитель;
			Если ЗначениеЗаполнено(ОбъектРодитель) 
				И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
					
				Если ЗначениеЗаполнено(Объект.Родитель.НоменклатурнаяГруппа) Тогда
					Объект.НоменклатурнаяГруппа = Объект.Родитель.НоменклатурнаяГруппа;
				Иначе
				
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
					|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
					|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
					|	И НоменклатурныеГруппы.Наименование = &Наименование";
					
					Запрос.УстановитьПараметр("Наименование", ОбъектРодитель.Наименование);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.КолонкаСправа.Видимость 			= ЛОЖЬ;
			Элементы.ОстаткиБезСклада.Видимость 		= ЛОЖЬ;
			Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ЛОЖЬ;
			Элементы.СредняяЦенаПриобретения.Видимость 	= ЛОЖЬ;
			Элементы.ТоварИлиУслуга.Видимость 			= ИСТИНА;
			Элементы.Аналоги.Видимость 					= ЛОЖЬ;
			Элементы.ГруппыАналогов.Видимость 			= ЛОЖЬ;
			
			заполнитьценыНовойНоменклатуры();
			Элементы.ГруппаЦеныДляновойНоменклатуры.Видимость = ИспользоватьСложныйМеханизмЦен 
			И НЕ ЦеныДляНовойНоменклатуры.Количество() = 0;
			
			Элементы.ЗависимыеЦеныБудутРасчитаныАвтоматически.Видимость = ИспользоватьСложныйМеханизмЦен 
			И ОбщийМодульСервер.СуществуютЗависимыеВидыЦен();
			
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(ИСТИНА);
			
			Элементы.ЕдиницыИзмеренияНоменклатуры.Видимость   = ЛОЖЬ;
			
		ИначеЕсли НЕ Отказ Тогда //существующая		
			УслугаНЕТовар = Объект.НеОтслеживатьОстаток;
			
			Элементы.ГруппаЦеныДляновойНоменклатуры.Видимость = ЛОЖЬ;
			НоменклатураНеИспользовалась = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
			
			Если Объект.Предопределенный 
				ИЛИ Объект.НеОтслеживатьОстаток Тогда //Товар на сумму
				
				Элементы.Родитель.Видимость 		= ЛОЖЬ;
				Элементы.ГруппаНабора.Видимость 	= ЛОЖЬ;
				Элементы.ОстаткиБезСклада.Видимость = ЛОЖЬ;
				Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ЛОЖЬ;
				Элементы.СредняяЦенаПриобретения.Видимость 	= ЛОЖЬ;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ЛОЖЬ;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ЛОЖЬ;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = ЛОЖЬ;
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ЛОЖЬ;
				
			ИначеЕсли Объект.ЭтоНабор = ИСТИНА 
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьНаборыТоваровПС") Тогда
				
				ДоступностьСостава = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
				Если ДоступностьСостава Тогда
					Элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора");
				Иначе
					Элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора нельзя изменить после указания в документах. Создавайте новые наборы для иного состава.");
				КонецЕсли;
				
				Элементы.ЭтоНабор.ТолькоПросмотр 			= НЕ ДоступностьСостава;
				Элементы.Состав.ТолькоПросмотр 				= НЕ ДоступностьСостава;
				Элементы.ОстаткиБезСклада.Видимость 		= ЛОЖЬ;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ЛОЖЬ;
				Элементы.ГруппаКвоИСуммаГоризонт.Видимость 	= ЛОЖЬ;
				Элементы.СредняяЦенаПриобретения.Видимость 	= ЛОЖЬ;
				Элементы.ТоварИлиУслуга.Видимость 			= ЛОЖЬ;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = ЛОЖЬ;
				
			Иначе			
				Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
				Элементы.ГруппаНабора.Видимость 	= НоменклатураНеИспользовалась;
				Элементы.ОстатокНеОтслеживается.Видимость	= НЕ НоменклатураНеИспользовалась;
				Элементы.НеОтслеживатьОстаток.Видимость		= НоменклатураНеИспользовалась;
				Элементы.СериныйУчет.Видимость				= НЕ НоменклатураНеИспользовалась;
				
				Если НЕ НоменклатураНеИспользовалась 
					И Объект.ЗапретитьУказаниеБезСерии Тогда
					
					Элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");
				КонецЕсли;
				Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
				
				Элементы.ОстаткиНоменклатурыСклад.Видимость = ВестиУчетПоСкладам;
				ОбновитьДанныеОбОстаткеНаСервере();
				
				Элементы.ОстаткиБезСклада.Видимость 		= НЕ ВестиУчетПоСкладам;
				Элементы.ОстаткиНоменклатуры.Видимость 		= ВестиУчетПоСкладам;			
				
			КонецЕсли;
			Элементы.Цены.Видимость = ИспользоватьСложныйМеханизмЦен;				
			
			Если НЕ НоменклатураНеИспользовалась
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("БлокироватьКарточкуНоменклатурыПослеУказанияЕеВдокументах") Тогда
				
				Элементы.Наименование.ТолькоПросмотр 	= ИСТИНА;
				Элементы.ВерхСлева.ТолькоПросмотр 		= ИСТИНА;
				Элементы.Дополнительно.ТолькоПросмотр 	= ИСТИНА;
			КонецЕсли;
			
			Если (Объект.СерийныйУчет
				И НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый серийный товар")) = 0)
				ИЛИ НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия товара с ценами")) = 0
				ИЛИ НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый товар")) = 0 Тогда
				
				Объект.Наименование = "";
				ЭтаФорма.ТекущийЭлемент = Элементы.ПредставлениеНаименования;
			КонецЕсли;
			
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы();
			
			Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
				ЕдиницыИзмеренияНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
			Иначе
				ЕдиницыИзмеренияНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
			КонецЕсли;
			
			Штрихкоды.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
			ДополнительныеШтрихКоды.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
			
		КонецЕсли;
		
		Если ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры Тогда
			ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
			
			Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать 
				ИЛИ НЕ ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка) Тогда
				
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ЛОЖЬ;
			Иначе
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
			КонецЕсли;	                                                                        	
		КонецЕсли;
		
		Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		ГруппыАналогов.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Элементы.Аналоги.Видимость = ИспользоватьМеханизмАналоговДляНоменклатуры;
		Элементы.ГруппыАналогов.Видимость = ИспользоватьМеханизмАналоговДляНоменклатуры;
		
		Спецификации.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);	
		Элементы.Спецификации.Видимость = ИспользоватьКомплектацию И ЗначениеЗаполненоСсылка;
		
		НоменклатурнаяГруппаПриИзмененииНаСервере(ИСТИНА);
		
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		УстанавливатьШтрихКодИзКарточкиНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УстанавливатьШтрихКодИзКарточкиНоменклатуры");
		
		ОстаткиНоменклатуры.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		ОстаткиНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", Дата);
		ПредставленияКонтрагентов.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		
		Элементы.ПредставленияКонтрагентов.Видимость = ИспользоватьПредставлениеТоваровКонтрагентами И ЗначениеЗаполненоСсылка;
		
		Цены.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Цены.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", Дата);
		СерииВНаличии.Параметры.УстановитьЗначениеПараметра("Номенклатура", ОбъектСсылка);
		Изображения.Параметры.УстановитьЗначениеПараметра("Владелец", ОбъектСсылка);
		
		Элементы.Цена.Видимость = НЕ ИспользоватьСложныйМеханизмЦен;
		
		Если НЕ Отказ
			И Объект.SKU = 0 Тогда
			
			Объект.SKU = ПодключаемоеОборудованиеДСервер.ПолучитьМаксимальныйКодSKU();
		КонецЕсли;	
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		Элементы.НаименованиеОсновнойВалюты.Видимость = не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.КоличествоПоУмолчанию.Видимость 	  = не Объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
		
		Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
		
		ВидимостьСоставаНабора();
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			Элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = ЛОЖЬ;
			Элементы.ПроцентСкидки.Доступность 	= ЛОЖЬ;
			Элементы.Цены.ТолькоПросмотр 		= ИСТИНА;
			Элементы.ЦеныДобавитьЦену.Видимость = ЛОЖЬ;
			Элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = ИСТИНА;			
		КонецЕсли;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		обновитьвидимостьуслуги();
		РодительПриИзмененииНаСервере();
		
		Элементы.НоменклатурнаяГруппа.ОтметкаНезаполненного = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
		И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры");		
		
		Если НЕ Отказ
			И ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоСсылка Тогда
			
			ПредставлениеНаименования = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати 	  = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
						
					ИначеЕсли ВыборкаДетальныеЗаписи.Поле = "НаименованиеДляПечати" Тогда
						СтрокаЯзыка = НаименованияДляПечатиНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			ПредставлениеНаименования 	= Объект.Наименование;
			НаименованиеДляПечати 		= Объект.НаименованиеДляПечати;
			
		КонецЕсли;	
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланкаКоличестваДляЛьготнойЦены, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиНоменклатурыОстаток, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СоставКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ЕдиницыИзмеренияНоменклатурыКоличество, , ИСТИНА);
		
		Элементы.ДопШтрихКоды.Видимость = ИспользоватьШтрихКоды И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");	
		
		Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
			ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры();
		КонецЕсли;
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Цены, , "РегистрСведений.Цены");
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ШтрихКоды);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Спецификации);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Аналоги);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ОстаткиНоменклатуры, , "РегистрНакопления.Товары");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры()
	
	ЕстьКлючиУчета = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСписки") Тогда
		
		КлючиУчета.Очистить();
		СвязанныеКлючиУчета.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		
		ТаблицаКлючей = Новый ТаблицаЗначений;
		ТаблицаКлючей.Колонки.Добавить("НомерКлюча");
		ТаблицаКлючей.Колонки.Добавить("Наименование");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ДополнительныеРеквизиты.Ссылка
		|ИЗ Справочник.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ ДополнительныеРеквизиты.ЭтоКлючУчетаНоменклатуры = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			НомерКлюча = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаТаблицыКлючей = ТаблицаКлючей.Добавить();
				СтрокаТаблицыКлючей.НомерКлюча = НомерКлюча;
				НомерКлюча = НомерКлюча + 1;
				СтрокаТаблицыКлючей.Наименование = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаДетальныеЗаписи.Ссылка);
				ТекущийКлючУчета = ВыборкаДетальныеЗаписи.ссылка;
				КлючиУчета.Добавить(ВыборкаДетальныеЗаписи.ссылка);
			КонецЦикла;
			
			СтраницыКлючей = Элементы.ГруппаСтраницКлючейУчета;
			
			Для Каждого СтрокаТаблицыКлючей Из ТаблицаКлючей Цикл
				СтраницаКлюча = Элементы.Найти("СтраницаКлюча" + СтрокаТаблицыКлючей.НомерКлюча);
				Если СтраницаКлюча = Неопределено Тогда
					СтраницаКлюча = Элементы.Добавить("СтраницаКлюча" + СтрокаТаблицыКлючей.НомерКлюча, тип("ГруппаФормы"), СтраницыКлючей);
				СтраницаКлюча.Вид = ВидГруппыформы.Страница;
				СтраницаКлюча.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				СтраницаКлюча.Заголовок = СтрокаТаблицыКлючей.Наименование;
				
				НоваяКоманда = Команды.Найти("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
				Если НоваяКоманда = Неопределено Тогда
					НоваяКоманда = Команды.Добавить("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
				КонецЕсли;				
				НоваяКоманда.Действие  = "ОткрытьКнопкуКоманды";
				
				НоваяКоманда = Элементы.Найти("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
				Если НоваяКоманда = Неопределено Тогда
					НоваяКоманда = Элементы.Добавить("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, тип("КнопкаФормы"), СтраницаКлюча);
				КонецЕсли;				
				НоваяКоманда.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавить") + " " + СтрокаТаблицыКлючей.Наименование;
				НоваяКоманда.ИмяКоманды = "КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча;
				НоваяКоманда.КнопкаПоУмолчанию = ЛОЖЬ;
				
				ТаблицаКлюча = Элементы.Найти("ТаблицаКлюча" + СтрокаТаблицыКлючей.НомерКлюча);
				Если ТаблицаКлюча = Неопределено Тогда
					ТаблицаКлюча = Элементы.Добавить("ТаблицаКлюча" + СтрокаТаблицыКлючей.НомерКлюча, тип("ТаблицаФормы"), СтраницаКлюча);
					ТаблицаКлюча.ПутьКДанным = "СвязанныеКлючиУчета";
				КонецЕсли;				
				
				ТаблицаКлюча.КоманднаяПанель.Видимость = ЛОЖЬ;
				ТаблицаКлюча.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
				ТаблицаКлюча.ЧередованиеЦветовСтрок = ИСТИНА;
				
				НоваяКолонка = Элементы.Найти("Значение" + СтрокаТаблицыКлючей.НомерКлюча); 
				Если НоваяКолонка = Неопределено Тогда
					НоваяКолонка = Элементы.Добавить("Значение" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ТаблицаКлюча); 
				КонецЕсли;				
				
				НоваяКолонка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Значения") + " " + СтрокаТаблицыКлючей.Наименование; 
				НоваяКолонка.ПутьКДанным = "СвязанныеКлючиУчета.ЗначениеКлючаУчета"; 
				НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
				НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				
				НоваяКолонка = Элементы.Найти("Комментарий" + СтрокаТаблицыКлючей.НомерКлюча); 
				Если НоваяКолонка = Неопределено Тогда
					НоваяКолонка = Элементы.Добавить("Комментарий" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ТаблицаКлюча); 
				КонецЕсли;				
				
				НоваяКолонка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий"); 
				НоваяКолонка.ПутьКДанным = "СвязанныеКлючиУчета.Комментарий"; 
				НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
				НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				НоваяКолонка.Высота = 1;
				КонецЕсли;				
				
			КонецЦикла;	
			
			ЕстьКлючиУчета = ИСТИНА;
			СменитьСтраницуКлючейУчетаНаСервере("1");	
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры

&НаКлиенте
Процедура ОткрытьКнопкуКоманды(Команда)
	
	НомерКлючаУчета = Число(СтрЗаменить(Команда.Имя, "КнопкаНовогоЗначенияКлючаУчета", ""));
	ПараметрыФормы = Новый Структура("КлючУчета, Номенклатура", КлючиУчета[НомерКлючаУчета - 1].Значение, Объект.Ссылка);
	ФормаНовойСвязи = ПолучитьФорму("РегистрСведений.СвязанныеКлючиУчетаНоменклатуры.ФормаЗаписи", ПараметрыФормы);
	ФормаНовойСвязи.Открыть();
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ЛОЖЬ;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ДокументОбъект.ПодготовкаКПроведению(Отказ);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	Элементы.ПланкаКоличестваДляЛьготнойЦены.Доступность 		= ИСТИНА;
	Элементы.РекомендуемыйМинимальныйОстатокТовара.Доступность 	= ИСТИНА;
	Элементы.ОстатокНеОтслеживается.Видимость	= Объект.НеОтслеживатьОстаток И НЕ НоменклатураНеИспользовалась;
	Элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась;
	Элементы.СериныйУчет.Видимость 				= УчетПоСериям И Объект.СерийныйУчет И НЕ НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Видимость		= НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	
	Родитель = Объект.Родитель;
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") ТОгда
			
			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) 
				И ЗначениеЗаполнено(Родитель.НоменклатурнаяГруппа) Тогда
				
				Объект.НоменклатурнаяГруппа = Родитель.НоменклатурнаяГруппа;
				НоменклатурнаяГруппаПриИзмененииНаСервере();
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
				|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
				|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
				|	И НоменклатурныеГруппы.Наименование = &Наименование";
				
				Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ родитель.КоличествоПоУмолчанию = 0 Тогда
			Элементы.КоличествоПоУмолчанию.Доступность = ЛОЖЬ;
			Если НЕ Объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию Тогда
				
				Объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию = ИСТИНА;	
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям
			И Родитель.СерийныйУчет Тогда
			
			Если НоменклатураНеИспользовалась 
				И НЕ Объект.СерийныйУчет тогда				
				
				Объект.СерийныйУчет = ИСТИНА;    	
			КонецЕсли;
			
			Если Объект.СерийныйУчет ТОгда
				Элементы.СериныйУчет.Видимость 			  = ИСТИНА;
				Элементы.ГруппаСерийногоУчета.Доступность = ЛОЖЬ;
			КонецЕсли;
			
			Если Родитель.ЗапретитьУказаниеБезСерии Тогда
				
				Если НоменклатураНеИспользовалась 
					И НЕ Объект.ЗапретитьУказаниеБезСерии тогда				
					
					Объект.ЗапретитьУказаниеБезСерии = ИСТИНА;		
				КонецЕсли;			
				
				Если Объект.ЗапретитьУказаниеБезСерии Тогда
					Элементы.ЗапретитьУказаниеБезСерии.ТолькоПросмотр = ИСТИНА;
					Элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");					
					Элементы.ГруппаСерийногоУчета.Видимость	= ИСТИНА;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Родитель.НеОтслеживатьОстаток Тогда
			
			Если НоменклатураНеИспользовалась
				И НЕ Объект.НеОтслеживатьОстаток тогда
				
				Объект.НеОтслеживатьОстаток = ИСТИНА;				
			КонецЕсли;
			
			Если Объект.НеОтслеживатьОстаток Тогда
				Элементы.ОстатокНеОтслеживается.Видимость	= ИСТИНА;
				Элементы.НеОтслеживатьОстаток.Видимость 	= ЛОЖЬ;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
			Элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = ИСТИНА;
			
			Если НЕ Объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Родитель.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
			Элементы.РекомендуемыйМинимальныйОстатокТовара.ТолькоПросмотр = ИСТИНА;
			
			Если НЕ Объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара тогда
				Объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзменении(Элемент)
	СерийныйУчетПриИзмененииК();
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзмененииК()
	
	ОбъектСерийныйУчет = Объект.СерийныйУчет;
	
	Элементы.ЗапретитьУказаниеБезСерии.Видимость = НоменклатураНеИспользовалась И УчетПоСериям И ОбъектСерийныйУчет;
	Элементы.СерииВНаличии.Видимость 			 = УчетПоСериям И ОбъектСерийныйУчет и ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.НеОтслеживатьОстаток.Видимость 	 = НоменклатураНеИспользовалась И НЕ ОбъектСерийныйУчет;
	Элементы.ОсновнойШтрихКод.Заголовок			 = ?(ОбъектСерийныйУчет, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Общий для серий Штрих код"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Основной Штрих код"));
	Элементы.КоличествоПоУмолчанию.Видимость     = НЕ ОбъектСерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
	
	Если ОбъектСерийныйУчет
		И Объект.НеОтслеживатьОстаток Тогда
		
		Объект.НеОтслеживатьОстаток = ЛОЖЬ;
	КонецЕсли;	
	
	Элементы.ДопШтрихКодыСерияНоменклатуры.Видимость = УчетПоСериям И ИспользоватьШтрихКоды И ОбъектСерийныйУчет;
	Элементы.ШтрихКодыСерияНоменклатуры.Видимость	 = УчетПоСериям И ИспользоватьШтрихКоды И ОбъектСерийныйУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	НеПоказыватьТаблицыСправа = НЕ НеПоказыватьТаблицыСправа;
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(ТекущиеДанные.Номенклатура);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Спецификации.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварИлиУслугаПриИзменении(Элемент)
	
	Объект.НеОтслеживатьОстаток = УслугаНЕТовар;
	Если УслугаНЕТовар Тогда
		Объект.ПланкаКоличестваДляЛьготнойЦены = 0;
	КонецЕсли;
	
	обновитьвидимостьуслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаГод(Команда)
	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 354.37;
КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаМесяц(Команда)
	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 30.43685;
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНаборПриИзменении(Элемент)
	ВидимостьСоставаНабора();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	ОбработатьВыборДопРеквизитаНГ("1", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)	
	
	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		РеквизитНоменклатурнойГруппы = Неопределено;
		Выполнить(" РеквизитНоменклатурнойГруппы = Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ";");
		Если РеквизитНоменклатурнойГруппы = Неопределено Тогда
			ТипРеквизита = ВыбратьИзСписка(ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));
			Если НЕ ТипРеквизита = Неопределено Тогда
				Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Справочник."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");	
			КонецЕсли;
		КонецЕсли;
		Выполнить(" ВвестиЗначение(Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");
		
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		РеквизитНоменклатурнойГруппы = Неопределено;
		Выполнить(" РеквизитНоменклатурнойГруппы = Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ";");
		Если РеквизитНоменклатурнойГруппы = Неопределено Тогда
			ТипРеквизита = ВыбратьИзСписка(ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));
			Если НЕ ТипРеквизита = Неопределено Тогда
				Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Документ."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");	
			КонецЕсли;
		КонецЕсли;
		Выполнить(" ВвестиЗначение(Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");
		
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
		И Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = Неопределено Тогда
		
		СтандартнаяОбработка = ЛОЖЬ;
		
		Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
		ПараметрыФормы = Новый Структура;
		Выполнить(" ПараметрыФормы.Вставить(""Владелец"", ДопРеквизитНГ" + НомерДопРеквизита + ");");
		ФормаВыбора = ПолучитьФорму("Справочник.НаборЗначенийДополнительныхРеквизитов.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		ФормаВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ":";
		Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы1Очистка(Элемент, СтандартнаяОбработка)	
	ОбработатьОчисткуДопРеквизитаНГ("1", СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьОчисткуДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)	
	
	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");
	
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		
		Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = Неопределено;");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы2Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("2", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы3Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("3", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы4Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("4", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы5Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("5", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы6Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("6", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы7Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("7", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы8Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("8", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы9Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("9", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы10Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("10", СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("2", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("3", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("4", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("5", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("6", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы7НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("7", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы8НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("8", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы9НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("9", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы10НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("10", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницКлючейУчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	СменитьСтраницуКлючейУчетаНаСервере(ТекущаяСтраница.Имя);
КонецПроцедуры

&НаСервере
Процедура СменитьСтраницуКлючейУчетаНаСервере(Знач ИмяТекущейСтраницы)
	
	ПолучитьНомерКлюча = Число(СтрЗаменить(ИмяТекущейСтраницы, "СтраницаКлюча", ""));	
	СвязанныеКлючиУчета.Параметры.УстановитьЗначениеПараметра("КлючУчета", КлючиУчета[ПолучитьНомерКлюча - 1].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтрагентов(Команда)
	
	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ПредставлениеТоваровКонтрагентами.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредставлениеКонтрагента(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		формаИзображения = ПолучитьФорму("РегистрСведений.ПредставлениеТоваровКонтрагентами.ФормаЗаписи", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыАналоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ГруппыАналогов.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.ГруппаАналогов);
	КонецЕсли;
	
КонецПроцедуры
