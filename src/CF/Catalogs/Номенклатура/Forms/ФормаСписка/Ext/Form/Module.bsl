//sza131119-1852 SZA: 
//sza130918-1600 : 

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка:") + " " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	Элементы.СписокСложнаяЦенаРекомендуемыйМинимальныйОстатокТовара.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	СтрокаПоиска,
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	,
	ЗначениеЗаполнено(СтрокаПоиска)
	);
	Элементы.Список.Обновить();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			"Наименование",
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				"Наименование",
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				если не НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции //НетНичего

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если Не ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") ;
	ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
	Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
	
	ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
		
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ОсновнойВидЦен");
		КонецЕсли;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
	
	ИзменитьВидЦен();
	
	НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере();
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
	если ОбщийМодульСерверПривилегия.ЕстьПользователи() 
		и не РольДоступна("ПолныеПрава") тогда
		
		Элементы.ГруппаПодвал.Видимость = ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныйШКНаСервере(ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Ложь);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат = Истина;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	Предупреждение(ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ИзменитьВидЦен();
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеОбОбщемКоличестве(Команда)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере();
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьДанныеОбОбщемКоличествеНаСервере()
	
	СтруктураОтвета = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.Товары.Остатки(&Дата, ) КАК ТоварыОстатки";
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	ОбщееКоличество = 0;
	НаСумму 		= 0;
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбщееКоличество = ОбщееКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			НаСумму = НаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;                            	
	КонецЕсли;
	
	СтруктураОтвета.Вставить("НаСумму", наСумму);
	СтруктураОтвета.Вставить("ОбщееКоличество", ОбщееКоличество);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ОбщееКоличествоНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере();
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура НаСумму1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере();
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)
	
	ТекущийОбъект = элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		если не СкопированныйОбъект = Неопределено тогда
			ОткрытьЗначение(СкопированныйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
