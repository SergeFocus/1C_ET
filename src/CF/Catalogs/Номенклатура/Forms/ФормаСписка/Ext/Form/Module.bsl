// sza151223-1636
// sza151108-1545
// sza151020-0447 СложныйНабор
// sza140819-1345
// sza140623-2328
// sza130918-1600 :

&НаКлиенте
Перем ПропуститьИнициализацию;

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт

	Результат = ЛОЖЬ;

	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод");
	КонецЕсли;

	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)

	ТекКод = "";

	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШтрихкодНаСервере(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)

	ИзменитьВидЦен();
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()

	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтруктураФормулы = ОбщийМодульПовтор.НайтиФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;

			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение
				КонецПопытки;
			КонецЕсли;

			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;

КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)

	Результат = "";
	Попытка
		Выполнить(" Результат = " + Формула + ";");
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()

	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;

	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Код",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);

	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);

		Если ДинамическийСписокПуст() Тогда
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ИСТИНА
			);
			Элементы.Список.Обновить();

			Если ДинамическийСписокПуст() Тогда
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ИСТИНА
				);
				Элементы.Список.Обновить();

				Если НЕ ДинамическийСписокПуст() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен(Знач ИзОткрытия = ЛОЖЬ)

	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
	ВалютаВидаЦен = ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ВидЦен, "ВалютаЦены");
	Элементы.ДобавочнаяСтоимость.Видимость = НЕ ЗначениеЗаполнено(ВидЦен) ИЛИ ВалютаВидаЦен = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

	Если НЕ ИзОткрытия Тогда
		СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
		НаСумму 		= СтруктураОтвета.НаСумму;
		ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)

	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)

	ТекущийОбъект = Элементы.Список.ТекущаяСтрока;

	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		Если НЕ СкопированныйОбъект = Неопределено Тогда
			ПоказатьЗначение(Неопределено, СкопированныйОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)

	ВыполнитьПоискНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура НаСумму1Нажатие(Элемент, СтандартнаяОбработка)

	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;

КонецПроцедуры

&НаКлиенте
Функция   ДинамическийСписокПуст()

	Возврат Элементы.Список.ТекущиеДанные = Неопределено;

КонецФункции // НетНичего

&НаКлиенте
Процедура ОбновитьДанныеОбОбщемКоличестве(Команда)

	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	ОбновитьДатуОстатка();

КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьДанныеОбОбщемКоличествеНаСервере(Знач ИспользоватьСложныйМеханизмЦен, Знач ВидЦен, Знач ОтобратьОстаткиПоСкладу, Знач ВестиУчетПоСкладам)

	Возврат ОбщийМодульТоварСервер.ПолучитьСтруктуруОстаткаТоваров(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);

КонецФункции

&НаСервере
Процедура ОбновитьДатуОстатка()

	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)

	Результат = ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
	Если КодЭлемента <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод)

	КодЭлемента = ОбщийМодульТоварСервер.НайтиНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);

	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			Если НЕ ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоНажатие(Элемент, СтандартнаяОбработка)

	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьОстаткиПоСкладуПриИзменении(Элемент)

	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;

КонецПроцедуры

&НаСервере
Процедура ОтобратьОстаткиПоСкладуПриИзмененииНаСервере()

	НетОтбораПоСкладу = НЕ ВестиУчетПоСкладам ИЛИ НЕ ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
	// Элементы.Список.Обновить();

	Если НетОтбораПоСкладу Тогда
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток");
	Иначе
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На складе") + ": " + ОтобратьОстаткиПоСкладу;
	КонецЕсли;

	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискСерииНоменклатуры(Команда)

	ФормаПоискаСерии = Неопределено;
	ИмяНеобходимойФормы = "ОбщаяФорма.ФормаПоискаСерии";
	Выполнить(" ФормаПоискаСерии = ПолучитьФорму(ИмяНеобходимойФормы); ");
	ФормаПоискаСерии.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	Элементы.СписокСложнаяЦенаРекомендуемыйМинимальныйОстатокТовара.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу, ВестиУчетПоСкладам);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;

	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");

			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ИзменитьВидЦен(ИСТИНА);
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));
		КонецЕсли;

		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Коду"));
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьРеквизитАртикулНоменклатуры  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
		ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		ВестиУчетПоСкладам 						 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		СложныйНабор							 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьДляНаборовНоменклатурыПоказыватьМаксимальныйОстаток");
		ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры");

		Если СложныйНабор Тогда // с остатками по набору
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			               |	СправочникНоменклатура.Ссылка,
			               |	СправочникНоменклатура.Код,
			               |	СправочникНоменклатура.Наименование,
			               |	СправочникНоменклатура.НоменклатурнаяГруппа,
			               |	СправочникНоменклатура.Производитель,
			               |	ВЫРАЗИТЬ(СправочникНоменклатура.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
			               |	ВЫБОР
			               |		КОГДА НЕ &ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры
			               |				ИЛИ ВЫБОР
			               |					КОГДА НЕ СправочникНоменклатура.ЭтоНабор
			               |						ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			               |					ИНАЧЕ ЕСТЬNULL(ЗапросНабора.Остаток, 0)
			               |				КОНЕЦ > 0
			               |			ТОГДА ВЫБОР
			               |					КОГДА НЕ СправочникНоменклатура.ЭтоНабор
			               |						ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			               |					ИНАЧЕ ЕСТЬNULL(ЗапросНабора.Остаток, 0)
			               |				КОНЕЦ
			               |		ИНАЧЕ 0
			               |	КОНЕЦ КАК Остаток,
			               |	СправочникНоменклатура.Артикул,
			               |	СправочникНоменклатура.ПроцентСкидки,
			               |	СправочникНоменклатура.РекомендуемыйМинимальныйОстатокТовара,
			               |	ВЫБОР
			               |		КОГДА &ИспользоватьСложныйМеханизмЦен
			               |			ТОГДА ЕСТЬNULL(ЗапросКЦене.Цена, 0)
			               |		ИНАЧЕ СправочникНоменклатура.Цена
			               |	КОНЕЦ КАК Цена,
			               |	ВЫБОР
			               |		КОГДА &ИспользоватьСложныйМеханизмЦен
			               |			ТОГДА ЕСТЬNULL(ЗапросКЦене.Цена, 0)
			               |		ИНАЧЕ СправочникНоменклатура.Цена
			               |	КОНЕЦ * ВЫБОР
			               |		КОГДА НЕ СправочникНоменклатура.ЭтоНабор
			               |			ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			               |		ИНАЧЕ ЕСТЬNULL(ЗапросНабора.Остаток, 0)
			               |	КОНЕЦ КАК НаСумму,
			               |	СправочникНоменклатура.Ответственный,
			               |	СправочникНоменклатура.ДатаСоздания,
			               |	СправочникНоменклатура.ДатаРедакции,
			               |	СправочникНоменклатура.ЭтоНабор,
			               |	СправочникНоменклатура.НеОтслеживатьОстаток,
			               |	СправочникНоменклатура.СерийныйУчет,
			               |	СправочникНоменклатура.КоличествоПоУмолчанию,
			               |	СправочникНоменклатура.Вес,
			               |	СправочникНоменклатура.Ширина,
			               |	СправочникНоменклатура.Длина,
			               |	СправочникНоменклатура.Высота,
			               |	СправочникНоменклатура.ПроСостав,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы1,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы2,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы3,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы4,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы5,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы6,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы7,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы8,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы9,
			               |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы10,
			               |	ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
			               |	ВЫБОР
			               |		КОГДА &ИспользоватьСложныйМеханизмЦен
			               |			ТОГДА ЕСТЬNULL(ЗапросКЦене.Цена, 0)
			               |		ИНАЧЕ СправочникНоменклатура.Цена
			               |	КОНЕЦ * ВЫБОР
			               |		КОГДА НЕ &ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры
			               |				ИЛИ ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) > 0
			               |			ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			               |		ИНАЧЕ 0
			               |	КОНЕЦ - ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК ДобавочнаяСтоимость,
			               |	СправочникНоменклатура.ЭтоГруппа,
			               |	СправочникНоменклатура.ЗапретитьАвтоматическийПересчетЦен
			               |ИЗ
			               |	Справочник.Номенклатура КАК СправочникНоменклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |			СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			               |			СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			               |			ТоварыОстатки.Номенклатура КАК НоменклатураОстатка
			               |		ИЗ
			               |			РегистрНакопления.Товары.Остатки(
			               |					&Дата,
			               |					&НЕтОтбораПоСкладу
			               |						ИЛИ Склад = &ОтборПоСкладу) КАК ТоварыОстатки
			               |
			               |		СГРУППИРОВАТЬ ПО
			               |			ТоварыОстатки.Номенклатура) КАК ТоварыОстатки
			               |		ПО (ТоварыОстатки.НоменклатураОстатка = СправочникНоменклатура.Ссылка)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |			ЦеныСрезПоследних.Цена КАК Цена,
			               |			ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
			               |			ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			               |		ИЗ
			               |			РегистрСведений.Цены.СрезПоследних(
			               |					&Дата,
			               |					ВидЦен = &ВидЦен
			               |						И ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения) КАК ЦеныСрезПоследних) КАК ЗапросКЦене
			               |		ПО (ЗапросКЦене.Номенклатура = СправочникНоменклатура.Ссылка)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			МИНИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЗапросКОстаткамЭлементовНабора.КоличествоОстаток, 0) / ВЫБОР
			               |						КОГДА НоменклатураСостав.Количество <= 0
			               |							ТОГДА 0
			               |						ИНАЧЕ НоменклатураСостав.Количество
			               |					КОНЕЦ КАК ЧИСЛО(10, 0))) КАК Остаток,
			               |			НоменклатураСостав.Ссылка КАК НоменклатураНабора
			               |		ИЗ
			               |			Справочник.Номенклатура.Состав КАК НоменклатураСостав
			               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |					СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			               |					ТоварыОстатки.Номенклатура КАК НоменклатураОстатка
			               |				ИЗ
			               |					РегистрНакопления.Товары.Остатки(
			               |							&Дата,
			               |							&НетОтбораПоСкладу
			               |								ИЛИ Склад = &ОтборПоСкладу) КАК ТоварыОстатки
			               |
			               |				СГРУППИРОВАТЬ ПО
			               |					ТоварыОстатки.Номенклатура) КАК ЗапросКОстаткамЭлементовНабора
			               |				ПО НоменклатураСостав.Номенклатура = ЗапросКОстаткамЭлементовНабора.НоменклатураОстатка
			               |
			               |		СГРУППИРОВАТЬ ПО
			               |			НоменклатураСостав.Ссылка) КАК ЗапросНабора
			               |		ПО (ЗапросНабора.НоменклатураНабора = СправочникНоменклатура.Ссылка)";

		Иначе
			   ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                  |	СправочникНоменклатура.Ссылка,
			                  |	СправочникНоменклатура.Код,
			                  |	СправочникНоменклатура.Наименование,
			                  |	СправочникНоменклатура.НоменклатурнаяГруппа,
			                  |	СправочникНоменклатура.Производитель,
			                  |	ВЫРАЗИТЬ(СправочникНоменклатура.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
			                  |	ВЫБОР
			                  |		КОГДА НЕ &ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры
			                  |				ИЛИ ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) > 0
			                  |			ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			                  |		ИНАЧЕ 0
			                  |	КОНЕЦ КАК Остаток,
			                  |	СправочникНоменклатура.Артикул,
			                  |	СправочникНоменклатура.ПроцентСкидки,
			                  |	СправочникНоменклатура.РекомендуемыйМинимальныйОстатокТовара,
			                  |	ВЫБОР
			                  |		КОГДА &ИспользоватьСложныйМеханизмЦен
			                  |			ТОГДА ЕСТЬNULL(ЗапросКЦенам.Цена, 0)
			                  |		ИНАЧЕ СправочникНоменклатура.Цена
			                  |	КОНЕЦ КАК Цена,
			                  |	ВЫБОР
			                  |		КОГДА &ИспользоватьСложныйМеханизмЦен
			                  |			ТОГДА ЕСТЬNULL(ЗапросКЦенам.Цена, 0)
			                  |		ИНАЧЕ СправочникНоменклатура.Цена
			                  |	КОНЕЦ * ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) КАК НаСумму,
			                  |	СправочникНоменклатура.Ответственный,
			                  |	СправочникНоменклатура.ДатаСоздания,
			                  |	СправочникНоменклатура.ДатаРедакции,
			                  |	СправочникНоменклатура.ЭтоНабор,
			                  |	СправочникНоменклатура.НеОтслеживатьОстаток,
			                  |	СправочникНоменклатура.СерийныйУчет,
			                  |	СправочникНоменклатура.КоличествоПоУмолчанию,
			                  |	СправочникНоменклатура.Вес,
			                  |	СправочникНоменклатура.Ширина,
			                  |	СправочникНоменклатура.Длина,
			                  |	СправочникНоменклатура.Высота,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы1,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы2,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы3,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы4,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы5,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы6,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы7,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы8,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы9,
			                  |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы10,
			                  |	ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
			                  |	ВЫБОР
			                  |		КОГДА &ИспользоватьСложныйМеханизмЦен
			                  |			ТОГДА ЕСТЬNULL(ЗапросКЦенам.Цена, 0)
			                  |		ИНАЧЕ СправочникНоменклатура.Цена
			                  |	КОНЕЦ * ВЫБОР
			                  |		КОГДА НЕ &ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры
			                  |				ИЛИ ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) > 0
			                  |			ТОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			                  |		ИНАЧЕ 0
			                  |	КОНЕЦ - ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК ДобавочнаяСтоимость,
			                  |	СправочникНоменклатура.ЭтоГруппа,
			                  |	СправочникНоменклатура.ЗапретитьАвтоматическийПересчетЦен,
			                  |	СправочникНоменклатура.ПроСостав
			                  |ИЗ
			                  |	Справочник.Номенклатура КАК СправочникНоменклатура
			                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			                  |			СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			                  |			СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			                  |			ТоварыОстатки.Номенклатура КАК Номенклатура
			                  |		ИЗ
			                  |			РегистрНакопления.Товары.Остатки(
			                  |					&Дата,
			                  |					&НЕтОтбораПоСкладу
			                  |						ИЛИ Склад = &ОтборПоСкладу) КАК ТоварыОстатки
			                  |
			                  |		СГРУППИРОВАТЬ ПО
			                  |			ТоварыОстатки.Номенклатура) КАК ТоварыОстатки
			                  |		ПО (ТоварыОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
			                  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			                  |			ЦеныСрезПоследних.Цена КАК Цена,
			                  |			ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
			                  |			ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			                  |		ИЗ
			                  |			РегистрСведений.Цены.СрезПоследних(
			                  |					&Дата,
			                  |					ВидЦен = &ВидЦен
			                  |						И ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения) КАК ЦеныСрезПоследних) КАК ЗапросКЦенам
			                  |		ПО (ЗапросКЦенам.Номенклатура = СправочникНоменклатура.Ссылка)"
		КонецЕсли;

		Список.ТекстЗапроса = ТекстЗапроса;

		Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры", ПоказыватьНольЕслиОстаткиОтрицательныеВСпискеНоменклатуры);
		Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");

		Элементы.ПроСостав.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков");

		Список.Параметры.УстановитьЗначениеПараметра("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Список.Параметры.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;

		Если ОбщийМодульСерверПривилегия.ЕстьПользователи()
			И НЕ РольДоступна("ПолныеПрава") Тогда

			Элементы.ГруппаПодвал.Видимость = ЛОЖЬ;
		КонецЕсли;

		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");

		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;

				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Счетчик = Счетчик + 1;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокСложнаяЦенаОстаток, , ИСТИНА);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Знач ТекКод)

	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по штрихкоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОповещение", 0.2, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиОповещение()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если НЕ ПропуститьИнициализацию
		И НЕ ТекущиеДанные = Неопределено ТОгда

		Попытка
			Номенклатура = ТекущиеДанные.Ссылка;
			Если ТекущаяНоменклатура = Номенклатура Тогда
				Возврат;
			Иначе
				ТекущаяНоменклатура = Номенклатура;
			КонецЕсли;

		Исключение // спрятал колонку ссылка
		КонецПопытки;
		Если ИспользуютсяИзображения Тогда
			ПодСсылку = "";
			ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;

			Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
				ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);
				Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда
					СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
					ПодСсылку = СтруктураИзображения.ПодСсылку;
					Элементы.СсылкаНаИзображение.Видимость    = НЕ СтруктураИзображения.ИзображениеВБазеДанных;
					Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;

					Если СтруктураИзображения.РазмерПриОтображении = 1 Тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
					ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 2 Тогда

						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
					ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 3 Тогда

						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
					ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 4 Тогда

						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
					ИначеЕсли СтруктураИзображения.РазмерПриОтображении = 5 Тогда

						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено ТОгда
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);

				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
					//	Элементы.ОстаткиВЕдиницахИзмерения.Обновить();
					Если НЕ Элементы.ОстаткиВЕдиницахИзмерения.Видимость Тогда
						Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;
					КонецЕсли;
				ИначеЕсли Элементы.ОстаткиВЕдиницахИзмерения.Видимость Тогда
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
					ПропуститьИнициализацию = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПропуститьИнициализацию = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ОбщийМодульКлиент.ПодобратьЗначениеПоВведенномуТексту(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

ПропуститьИнициализацию = ЛОЖЬ;
