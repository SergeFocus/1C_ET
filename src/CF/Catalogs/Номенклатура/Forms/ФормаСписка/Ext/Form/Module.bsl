//sza140421-2101 SZA: 
//sza130918-1600 : 

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	Элементы.СписокСложнаяЦенаРекомендуемыйМинимальныйОстатокТовара.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	СтрокаПоиска,
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	,
	ЗначениеЗаполнено(СтрокаПоиска)
	);
	Элементы.Список.Обновить();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			"Наименование",
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				"Наименование",
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				если не НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции //НетНичего

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если Не ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );
	
	Если НЕ ОТказ Тогда
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") ;
		ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") ;
		ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		
		ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
			
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ОсновнойВидЦен");
			КонецЕсли;
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		ИзменитьВидЦен();
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		//СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
		//НаСумму 		= СтруктураОтвета.НаСумму;
		//ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
		
		если ОбщийМодульСерверПривилегия.ЕстьПользователи() 
			и не РольДоступна("ПолныеПрава") тогда
			
			Элементы.ГруппаПодвал.Видимость = ложь;		
		КонецЕсли;
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп") ;
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, Истина);
			Если не НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокСложнаяЦенаОстаток, , Истина);	
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Ложь);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат = Истина;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	Предупреждение(ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ИзменитьВидЦен();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()	
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеОбОбщемКоличестве(Команда)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	ОбновитьДатуОстатка();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОстатка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьДанныеОбОбщемКоличествеНаСервере(Знач ИспользоватьСложныйМеханизмЦен, Знач ВидЦен, Знач ОтобратьОстаткиПоСкладу)
	
	СтруктураОтвета = Новый Структура;
	
	Запрос = Новый Запрос;
	Если ИспользоватьСложныйМеханизмЦен Тогда
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки";
	иначе
		
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.КоличествоОстаток * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныСрезПоследних.Цена КАК Цена,
		|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены
		|		ИЗ
		|			РегистрСведений.Цены.СрезПоследних КАК ЦеныСрезПоследних
		|		ГДЕ
		|			ЦеныСрезПоследних.ВидЦен = &ВидЦен) КАК ВложенныйЗапрос
		|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
		
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу)
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " Склад = &ОтобратьОстаткиПоСкладу ");
		Запрос.УстановитьПараметр("ОтобратьОстаткиПоСкладу", ОтобратьОстаткиПоСкладу);
		
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	ОбщееКоличество  = 0;
	НаСумму 		 = 0;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбщееКоличество = ОбщееКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			НаСумму = НаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;                            	
	КонецЕсли;
	
	СтруктураОтвета.Вставить("НаСумму", НаСумму);
	СтруктураОтвета.Вставить("ОбщееКоличество", ОбщееКоличество);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ОбщееКоличествоНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура НаСумму1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)
	
	ТекущийОбъект = элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		если не СкопированныйОбъект = Неопределено тогда
			ОткрытьЗначение(СкопированныйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьОстаткиПоСкладуПриИзменении(Элемент)
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьОстаткиПоСкладуПриИзмененииНаСервере()
	
	НетОтбораПоСкладу = НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ИЛИ НЕ ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
	Элементы.Список.Обновить();
	
	Если НетОтбораПоСкладу Тогда
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток");
	Иначе
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На складе:") + " " + ОтобратьОстаткиПоСкладу;
	КонецЕсли;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если Не ТекущиеДанные = Неопределено ТОгда
			Номенклатура = ТекущиеДанные.Ссылка;
			УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
			если УНоменклатурыЕстьЕдиницыИзмерения тогда
				
				ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
				Элементы.ОстаткиВЕдиницахИзмерения.Обновить();			
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Истина;
			иначе
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры
