// sza140509-0150
// sza140313-0113  

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите штрихкод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШтрихкодНаСервере(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Код",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);
		
		Если ДинамическийСписокПуст() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если ДинамическийСписокПуст() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				Если НЕ ДинамическийСписокПуст() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)
	
	ТекущийОбъект = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		Если НЕ СкопированныйОбъект = Неопределено Тогда
			ПоказатьЗначение(Неопределено, СкопированныйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Функция   ДинамическийСписокПуст()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции // НетНичего

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Функция ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод)
	
	Результат = ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШтрихкодНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
		
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьПолученныйШтрихкодНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПоискСерииНоменклатуры(Команда)
	Выполнить(" ОткрытьФорму(""ИмяНеобходимойФормы); ");
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	Элементы.СписокСложнаяЦенаРекомендуемыйМинимальныйОстатокТовара.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));	
		КонецЕсли;
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Коду"));
		
		ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьРеквизитАртикулНоменклатуры  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
		ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		Элементы.СписокСложнаяЦенаЦена.Видимость = НЕ ИспользоватьСложныйМеханизмЦен;
		Элементы.ПроСостав.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков");
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		
		Если ОбщийМодульСерверПривилегия.ЕстьПользователи() 
			И НЕ РольДоступна("ПолныеПрава") Тогда
			
			Элементы.ГруппаПодвал.Видимость = ЛОЖЬ;		
		КонецЕсли;	
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, , ИСТИНА);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по штрихкоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры
