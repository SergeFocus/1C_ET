//sza140924-1152
//sza140902-1702 
//sza140826-2116 ТекущийРодитель
//sza140707-1339 баг
//sza140428-0330  
//sza130918-1600 : 
&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Результат = ОбработатьПолученныйШКНаСервере(ТекКод);
		Если Результат = Неопределено тогда
			ОбщийМодульКлиент.ВыдатьСигнал(текКод);
		Иначе
			открытьзначение(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ИзменитьВидЦен();
//	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);
		
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				Если НЕ НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	//ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	//Если НЕ ТекущиеДанныеНавигации = ТекущиеДанные Тогда
	//Если НЕ ТекущиеДанные = Неопределено Тогда
	//	ТекущиеДанныеНавигации = ТекущиеДанные.Ссылка;
	//	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоНоменклатуре", ЛОЖЬ);
	//	Список.Параметры.УстановитьЗначениеПараметра("ГруппаНоменклатуры", ТекущиеДанныеНавигации);

	//Иначе
	//	ТекущиеДанныеНавигации = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	//	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоНоменклатуре", ИСТИНА);
	//КонецЕсли;	
	//		  КонецЕсли;
	
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания", 0.2, ИСТИНА);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)
	
	ТекущийОбъект = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		Если НЕ СкопированныйОбъект = Неопределено тогда
			ОткрытьЗначение(СкопированныйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НаСумму1ПриИзменении(Элемент)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции //НетНичего

&НаКлиенте
Процедура ОбновитьДанныеОбОбщемКоличестве(Команда)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	ОбновитьДатуОстатка();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьДанныеОбОбщемКоличествеНаСервере(Знач ИспользоватьСложныйМеханизмЦен, Знач ВидЦен = Неопределено, ОтобратьОстаткиПоСкладу)
	
	СтруктураОтвета = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Если ВидЦен = Неопределено 
		ИЛИ НЕ ИспользоватьСложныйМеханизмЦен Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки";
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.КоличествоОстаток * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЦеныСрезПоследних.Цена КАК Цена,
		|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены
		|		ИЗ
		|			РегистрСведений.Цены.СрезПоследних КАК ЦеныСрезПоследних
		|		ГДЕ
		|			ЦеныСрезПоследних.ВидЦен = &ВидЦен) КАК ВложенныйЗапрос
		|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	Если ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " Склад = &ОтобратьОстаткиПоСкладу ");
		Запрос.УстановитьПараметр("ОтобратьОстаткиПоСкладу", ОтобратьОстаткиПоСкладу);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;
	
	ОбщееКоличество = 0;
	НаСумму 		= 0;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
				ОбщееКоличество = ОбщееКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				НаСумму = НаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
			Исключение
			Конецпопытки;
		КонецЦикла;                            	
	КонецЕсли;
	
	СтруктураОтвета.Вставить("НаСумму", наСумму);
	СтруктураОтвета.Вставить("ОбщееКоличество", ОбщееКоличество);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Процедура ОбновитьДатуОстатка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат 	= ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьОстаткиПоСкладуПриИзменении(Элемент)
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьОстаткиПоСкладуПриИзмененииНаСервере()
	
	НетОтбораПоСкладу = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ИЛИ НЕ ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
	Элементы.Список.Обновить();
	
	Если НетОтбораПоСкладу Тогда
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток");
	Иначе
		Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На складе") + ": " + ОтобратьОстаткиПоСкладу;
	КонецЕсли;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями")
		И ИспользуютсяИзображения тогда
		
		ИспользуютсяИзображения = ЛОЖЬ;	
	КонецЕсли;
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));	
		КонецЕсли;
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьРеквизитАртикулНоменклатуры  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
		ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		
		Если ИспользоватьСложныйМеханизмЦен ТОгда
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");	
		КонецЕсли;
		
		ИзменитьВидЦен();
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Список.Параметры.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоНоменклатуре", ИСТИНА);
		Список.Параметры.УстановитьЗначениеПараметра("ГруппаНоменклатуры", Неопределено);
		
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокСложнаяЦенаОстаток, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, , ИСТИНА);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиВЕдиницахИзмеренияКоличество, , ИСТИНА);	
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	Предупреждение(ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ИспользуютсяИзображения Тогда
		ПодСсылку = "";
		
		ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
			
			ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);
			
			Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
				
				СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
				ПодСсылку = СтруктураИзображения.ПодСсылку;
				
				Элементы.СсылкаНаИзображение.Видимость    = не СтруктураИзображения.ИзображениеВБазеДанных;
				Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
				
				Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
				КонецЕсли; 		 
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если НЕ ТекущиеДанные = Неопределено ТОгда
			Номенклатура = ТекущиеДанные.Ссылка;
			УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульПовтор.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
			Если УНоменклатурыЕстьЕдиницыИзмерения тогда
				
				ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
				Элементы.ОстаткиВЕдиницахИзмерения.Обновить();			
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;
			Иначе
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанныеНавигации = ТекущиеДанные.Ссылка;
	Иначе
		ТекущиеДанныеНавигации = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если НЕ ТекущийРодитель = ТекущиеДанныеНавигации Тогда
		
		ТекущийРодитель = ТекущиеДанныеНавигации;
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		"Родитель",
		ТекущиеДанныеНавигации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ИСТИНА
		);
		
		Если ТекущиеДанныеНавигации <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанныеНавигации) Тогда
				Элементы.Ссылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
			Иначе
				Элементы.Ссылка.Заголовок = СокрЛП(ТекущиеДанныеНавигации);
			КонецЕсли;
			
		Иначе
			Элементы.Ссылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
		КонецЕсли;	
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры
