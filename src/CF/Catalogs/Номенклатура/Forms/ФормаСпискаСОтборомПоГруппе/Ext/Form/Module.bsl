// sza151108-1548 
// sza140924-1152
// sza140902-1702 
// sza140826-2116 ТекущийРодитель
// sza140707-1339 баг
// sza140428-0330  
// sza130918-1600 : 
&НаКлиенте
Перем ПропуститьИнициализацию;

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Результат = ОбработатьПолученныйШКНаСервере(ТекКод);
		Если Результат = Неопределено тогда
			ОбщийМодульКлиент.ВыдатьСигнал(текКод);
		Иначе
			ПоказатьЗначение(Неопределено, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	ИзменитьВидЦен();
	// 	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);
		
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				Если НЕ НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания", 0.2, ИСТИНА);
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСЦеной(Команда)
	
	ТекущийОбъект = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		СкопированныйОбъект = ОбщийМодульТоварСервер.ПолучитьССылкуНаСкопированныйОбъект(ТекущийОбъект);
		Если НЕ СкопированныйОбъект = Неопределено тогда
			ПоказатьЗначение(Неопределено, СкопированныйОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НаСумму1ПриИзменении(Элемент)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции // НетНичего

&НаКлиенте
Процедура ОбновитьДанныеОбОбщемКоличестве(Команда)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	ОбновитьДатуОстатка();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьДанныеОбОбщемКоличествеНаСервере(Знач ИспользоватьСложныйМеханизмЦен, Знач ВидЦен = Неопределено, Знач ОтобратьОстаткиПоСкладу)
	Возврат ОбщийМодульТоварСервер.ПолучитьСтруктураОстаткаТоваров(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);	
КонецФункции

&НаСервере
Процедура ОбновитьДатуОстатка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат 	= ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если КодЭлемента <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", КодЭлемента);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыОткрытия);
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Если НЕ ОбработатьПолученныйШКНаКлиенте(ТекКод) Тогда
				СообщитьОбОшибке(ТекКод)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееКоличествоНажатие(Элемент, СтандартнаяОбработка)
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьОстаткиПоСкладуПриИзменении(Элемент)
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьОстаткиПоСкладуПриИзмененииНаСервере()
	
	НетОтбораПоСкладу = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") ИЛИ НЕ ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
	Элементы.Список.Обновить();
	
	Попытка
		Если НетОтбораПоСкладу Тогда
			Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Остаток");
		Иначе
			Элементы.СписокСложнаяЦенаОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На складе") + ": " + ОтобратьОстаткиПоСкладу;
		КонецЕсли;
	Исключение // нет прав
	КонецПопытки;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НетОтбораПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтобратьОстаткиПоСкладу);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСложнаяЦенаПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями")
		И ИспользуютсяИзображения тогда
		
		ИспользуютсяИзображения = ЛОЖЬ;	
	КонецЕсли;
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
	
	ОтобратьОстаткиПоСкладуПриИзмененииНаСервере();
	СтруктураОтвета = ОбновитьДанныеОбОбщемКоличествеНаСервере(ИспользоватьСложныйМеханизмЦен, ВидЦен, ОтобратьОстаткиПоСкладу);
	НаСумму 		= СтруктураОтвета.НаСумму;
	ОбщееКоличество = СтруктураОтвета.ОбщееКоличество;
	
	Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		Если ИспользоватьСложныйМеханизмЦен ТОгда
			ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");	
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьВидЦен();
	ВыводНадписиПоФормуле();
	ПодключитьОбработчикОжидания("ПослеИзображенияОкнаФормы", 0.3, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзображенияОкнаФормы() // Когда окно уже нарисовано пользователю
	ЭтаФорма.Элементы.ФормаЗакрыть.Видимость = НЕ ЭтаФорма.Окно = Неопределено;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );
	
	Если НЕ Отказ Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));	
		КонецЕсли;
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Код", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Коду"));
		
		ИспользоватьЕдиницыИзмеренияНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьСложныйМеханизмЦен 			 = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьРеквизитАртикулНоменклатуры  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
		ИспользоватьПодключаемоеОборудование 	 = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		СложныйНабор							 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьДляНаборовНоменклатурыПоказыватьМаксимальныйОстаток");
		Если СложныйНабор тогда
			Список.ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                      |	СправочникНоменклатура.Ссылка,
			                      |	СправочникНоменклатура.Код,
			                      |	СправочникНоменклатура.Наименование,
			                      |	СправочникНоменклатура.НоменклатурнаяГруппа,
			                      |	СправочникНоменклатура.Производитель,
			                      |	СправочникНоменклатура.Комментарий,
			                      |	ВЫБОР
			                      |		КОГДА НЕ СправочникНоменклатура.ЭтоНабор
			                      |			ТОГДА ВЫБОР
			                      |					КОГДА СправочникНоменклатура.Предопределенный
			                      |							ИЛИ СправочникНоменклатура.ЭтоНабор
			                      |							ИЛИ СправочникНоменклатура.НеОтслеживатьОстаток
			                      |						ТОГДА ""-""
			                      |					ИНАЧЕ ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			                      |				КОНЕЦ
			                      |		ИНАЧЕ ЕСТЬNULL(ЗапросНабора.Остаток, 0)
			                      |	КОНЕЦ КАК Остаток,
			                      |	СправочникНоменклатура.Артикул,
			                      |	СправочникНоменклатура.ПроцентСкидки,
			                      |	СправочникНоменклатура.РекомендуемыйМинимальныйОстатокТовара,
			                      |	ВЫБОР
			                      |		КОГДА НЕ СправочникНоменклатура.ЭтоНабор
			                      |			ТОГДА ВЫБОР
			                      |					КОГДА СправочникНоменклатура.Предопределенный
			                      |							ИЛИ СправочникНоменклатура.ЭтоНабор
			                      |							ИЛИ СправочникНоменклатура.НеОтслеживатьОстаток
			                      |						ТОГДА ""X""
			                      |					ИНАЧЕ ВЫБОР
			                      |							КОГДА &ИспользоватьСложныйМеханизмЦен
			                      |								ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Цена, 0)
			                      |							ИНАЧЕ СправочникНоменклатура.Цена
			                      |						КОНЕЦ * ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0)
			                      |				КОНЕЦ
			                      |		ИНАЧЕ ВЫБОР
			                      |				КОГДА &ИспользоватьСложныйМеханизмЦен
			                      |					ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Цена, 0)
			                      |				ИНАЧЕ СправочникНоменклатура.Цена
			                      |			КОНЕЦ * ЕСТЬNULL(ЗапросНабора.Остаток, 0)
			                      |	КОНЕЦ КАК НаСумму,
			                      |	СправочникНоменклатура.Ответственный,
			                      |	СправочникНоменклатура.ДатаСоздания,
			                      |	СправочникНоменклатура.ДатаРедакции,
			                      |	СправочникНоменклатура.ЭтоНабор,
			                      |	СправочникНоменклатура.НеОтслеживатьОстаток,
			                      |	СправочникНоменклатура.НаименованиеДляПечати,
			                      |	СправочникНоменклатура.СерийныйУчет,
			                      |	СправочникНоменклатура.ЗапретитьУказаниеБезСерии,
			                      |	СправочникНоменклатура.КоличествоПоУмолчанию,
			                      |	ВЫБОР
			                      |		КОГДА &ИспользоватьСложныйМеханизмЦен
			                      |			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Цена, 0)
			                      |		ИНАЧЕ СправочникНоменклатура.Цена
			                      |	КОНЕЦ КАК Цена,
			                      |	СправочникНоменклатура.Вес,
			                      |	СправочникНоменклатура.Длина,
			                      |	СправочникНоменклатура.Ширина,
			                      |	СправочникНоменклатура.Высота,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы1,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы2,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы3,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы4,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы5,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы6,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы7,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы8,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы9,
			                      |	СправочникНоменклатура.РеквизитНоменклатурнойГруппы10,
			                      |	ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
			                      |	ВЫБОР
			                      |		КОГДА СправочникНоменклатура.Предопределенный
			                      |				ИЛИ СправочникНоменклатура.ЭтоНабор
			                      |				ИЛИ СправочникНоменклатура.НеОтслеживатьОстаток
			                      |			ТОГДА ""X""
			                      |		ИНАЧЕ ВЫБОР
			                      |				КОГДА &ИспользоватьСложныйМеханизмЦен
			                      |					ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Цена, 0)
			                      |				ИНАЧЕ СправочникНоменклатура.Цена
			                      |			КОНЕЦ * ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0)
			                      |	КОНЕЦ КАК ДобавочнаяСтоимость,
			                      |	СправочникНоменклатура.Родитель,
			                      |	СправочникНоменклатура.ЗапретитьАвтоматическийПересчетЦен
			                      |ИЗ
			                      |	Справочник.Номенклатура КАК СправочникНоменклатура
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |			ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток,
			                      |			ТоварыОстатки.СуммаОстаток КАК СуммаОстаток,
			                      |			ТоварыОстатки.Номенклатура КАК Номенклатура
			                      |		ИЗ
			                      |			РегистрНакопления.Товары.Остатки(
			                      |					&ДатаОстатка,
			                      |					&НетОтбораПоСкладу
			                      |						ИЛИ Склад = &ОтборПоСкладу) КАК ТоварыОстатки) КАК ТоварыОстатки
			                      |		ПО (ТоварыОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |			ЦеныСрезПоследних.Цена КАК Цена,
			                      |			ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
			                      |			ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			                      |		ИЗ
			                      |			РегистрСведений.Цены.СрезПоследних(
			                      |					&ДатаОстатка,
			                      |					ВидЦен = &ВидЦен
			                      |						И ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения) КАК ЦеныСрезПоследних) КАК ВложенныйЗапрос
			                      |		ПО (ВложенныйЗапрос.Номенклатура = СправочникНоменклатура.Ссылка)
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			                      |			МИНИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЗапросКОстаткамЭлементовНабора.КоличествоОстаток, 0) / ВЫБОР
			                      |						КОГДА НоменклатураСостав.Количество = 0
			                      |							ТОГДА 0
			                      |						ИНАЧЕ НоменклатураСостав.Количество
			                      |					КОНЕЦ КАК ЧИСЛО(10, 0))) КАК Остаток,
			                      |			НоменклатураСостав.Ссылка КАК НоменклатураНабора
			                      |		ИЗ
			                      |			Справочник.Номенклатура.Состав КАК НоменклатураСостав
			                      |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			                      |					ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток,
			                      |					ТоварыОстатки.Номенклатура КАК НоменклатураОстатка
			                      |				ИЗ
			                      |					РегистрНакопления.Товары.Остатки(
			                      |							&ДатаОстатка,
			                      |							&НетОтбораПоСкладу
			                      |								ИЛИ Склад = &ОтборПоСкладу) КАК ТоварыОстатки) КАК ЗапросКОстаткамЭлементовНабора
			                      |				ПО НоменклатураСостав.Номенклатура = ЗапросКОстаткамЭлементовНабора.НоменклатураОстатка
			                      |		
			                      |		СГРУППИРОВАТЬ ПО
			                      |			НоменклатураСостав.Ссылка) КАК ЗапросНабора
			                      |		ПО (ЗапросНабора.НоменклатураНабора = СправочникНоменклатура.Ссылка)
			                      |ГДЕ
			                      |	(НЕ СправочникНоменклатура.ЭтоГруппа
			                      |				И &НетОтбораПоНоменклатуре
			                      |			ИЛИ СправочникНоменклатура.Родитель = &ГруппаНоменклатуры)";	
		КонецЕсли;
		Элементы.КоличествоПоУмолчанию.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		Элементы.ПроСостав.Видимость = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков");
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		Список.Параметры.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		Список.Параметры.УстановитьЗначениеПараметра("НетОтбораПоНоменклатуре", ИСТИНА);
		Список.Параметры.УстановитьЗначениеПараметра("ГруппаНоменклатуры", Неопределено);
		
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокСложнаяЦенаОстаток, , ИСТИНА);
			
		Исключение // нет прав
		КонецПопытки;
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, , ИСТИНА);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиВЕдиницахИзмеренияКоличество, , ИСТИНА);	
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(ТекКод)
	
	ТекстПредупреждения 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиция номенклатуры не найдена!");
	ЗаголовокПредупреждения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поиск по ШтрихКоду");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 10, ЗаголовокПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ПропуститьИнициализацию
		И НЕ ТекущиеДанные = Неопределено ТОгда
		
		Попытка
		Номенклатура = ТекущиеДанные.Ссылка;
		Если ТекущаяНоменклатура = Номенклатура Тогда
			Возврат;
		Иначе
			ТекущаяНоменклатура = Номенклатура;
		КонецЕсли;
		Исключение // спрятал колонку ссылка
		КонецПопытки;
		
		Если ИспользуютсяИзображения Тогда
			ПодСсылку = "";
			
			ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;
			Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
				
				ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);
				
				Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
					
					СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
					ПодСсылку = СтруктураИзображения.ПодСсылку;
					
					Элементы.СсылкаНаИзображение.Видимость    = НЕ СтруктураИзображения.ИзображениеВБазеДанных;
					Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
					
					Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
					Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
					Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
					Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
					Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
						Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
					КонецЕсли; 		 
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено ТОгда
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульПовтор.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
					//Элементы.ОстаткиВЕдиницахИзмерения.Обновить();			
					Если НЕ Элементы.ОстаткиВЕдиницахИзмерения.Видимость Тогда
						Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;	
					КонецЕсли;
				ИначеЕсли Элементы.ОстаткиВЕдиницахИзмерения.Видимость Тогда
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
					ПропуститьИнициализацию = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	Иначе
		ПропуститьИнициализацию = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ИерархияНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанныеНавигации = ТекущиеДанные.Ссылка;
	Иначе
		ТекущиеДанныеНавигации = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	Если НЕ ТекущийРодитель = ТекущиеДанныеНавигации Тогда
		
		ТекущийРодитель = ТекущиеДанныеНавигации;
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		"Родитель",
		ТекущиеДанныеНавигации,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ИСТИНА
		);
		
		Если ТекущиеДанныеНавигации <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанныеНавигации) Тогда
				Элементы.Ссылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
			Иначе
				Элементы.Ссылка.Заголовок = СокрЛП(ТекущиеДанныеНавигации);
			КонецЕсли;
			
		Иначе
			Элементы.Ссылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
		КонецЕсли;	
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПоискСерииНоменклатуры(Команда)
	
	ФормаПоискаСерии = Неопределено;
	ИмяНеобходимойФормы = "ОбщаяФорма.ФормаПоискаСерии";
	Выполнить(" ФормаПоискаСерии = ПолучитьФорму(ИмяНеобходимойФормы); ");
	ФормаПоискаСерии.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)
	ВыводНадписиПоФормуле();
КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()
	
	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		СтруктураФормулы = ОбщийМодульПовтор.ОпределитьНужнуюФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда
			
			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;
			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка 
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение 	
				КонецПопытки;	
			КонецЕсли;
			
			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;
	
КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)
	
	Результат = "";
	Попытка 
		Выполнить(" Результат = " + Формула + ";");
	Исключение 	
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции //ВыводНадписиПоФормулеНаСервере

ПропуститьИнициализацию = ЛОЖЬ;
