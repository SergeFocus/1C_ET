//sza140610-0130 SZA: 
//sza140119-2331 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		ИспользоватьМеханизмАналоговДляНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры");
		ИспользоватьЕдиницыИзмеренияНоменклатуры 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") ;
		ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();	
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
		УчетпоСкладам     = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		УчетПоСериям 	  = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		НеМожетМенятьЦены = ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены");
		ЗначениеЗаполненоСклад = ЗначениеЗаполнено(Склад);
		
		Документ 	= Параметры.Документ;
		ВидЦен   	= Параметры.ВидЦен;
		Склад 	 	= Параметры.Склад;
		Дата	 	= Параметры.Дата;
		Договор  	= Параметры.Договор;
		Добавление 	= Параметры.Добавление;
		
		Количество = 1;
		
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			Попытка 
				видцен = Документ.ВидЦен;
			Исключение 	
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполненоСклад Тогда
			Попытка 
				Склад = Документ.Склад;
			Исключение 	
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			Попытка 
				Договор = Документ.Договор;
			Исключение 	
			КонецПопытки;
		КонецЕсли;
		
		ЗначениеЗаполненоДокумент   = ЗначениеЗаполнено(Документ);
		Элементы.Документ.Видимость = ЗначениеЗаполненоДокумент;
		Элементы.Дата.Видимость 	= НЕ ЗначениеЗаполненоДокумент; 
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		Элементы.СписокНоменклатуры.Видимость = НЕ ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных;
		Элементы.СписокНоменклатурыУпрощенный.Видимость = ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных;
		Элементы.СписокНоменклатурыУпрощенныйЦена.Видимость = НЕ ИспользоватьСложныйМеханизмЦен;
		
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("датаОстатка", Дата);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ УчетпоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ УчетпоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", Склад);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Неопределено);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Дата", Дата);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ УчетпоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
		
		Если не параметры.Товары = Неопределено Тогда
			ВыбранныеТовары.Загрузить(параметры.Товары.Выгрузить());
		КонецЕсли;
		ПересчетКоличестваИСуммы();
		Если ВестиУчетСерийНоменклатуры Тогда
			Для Каждого СтрокаТовара Из ВыбранныеТовары Цикл
				ЕстьСерииВВыбранных = ОбщийМодульПовтор.ТоварВедетсяПоСериям(СтрокаТовара.Номенклатура);
				Если ЕстьСерииВВыбранных Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ВыборТоваровСерияНоменклатуры.Видимость = ЕстьСерииВВыбранных;
		Элементы.СписокНоменклатурыЦена1.ТолькоПросмотр  = НеМожетМенятьЦены;
		Элементы.ВыборТоваровЦена.ТолькоПросмотр         = НеМожетМенятьЦены;
		Элементы.СписокНоменклатурыУпрощенныйЦена.ТолькоПросмотр = НеМожетМенятьЦены;
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп") ;
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, Истина);
			Если не НаименованияДополнительныхРеквизитов = Неопределено Тогда
				
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					если не ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных тогда
						Выполнить("Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
						Выполнить("Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						Выполнить("Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						
					иначе
						Выполнить("Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
						Выполнить("Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						Выполнить("Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");	
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ВыборТоваровКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Количество, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ВсегоКоличество, , Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокНоменклатурыОстаток, , Истина);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиВЕдиницахИзмеренияКоличество, , Истина);
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокНоменклатуры);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокНоменклатурыУпрощенный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбраннаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура НомВыбор(ВыбраннаяСтрока, Знач ИзЕдиницыИзмерения = Ложь, Знач ИзКоличества = Ложь, Знач ИзАналога = Ложь)
	
	Если ИзЕдиницыИзмерения Тогда
		ЕдиницаИзмерения = ВыбраннаяСтрока;
		Номенклатура = ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ЕдиницаИзмерения, "Владелец");
	Иначе
		Номенклатура = ВыбраннаяСтрока;
		ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если НЕ ИзКоличества Тогда
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура, ИзАналога);
		Количество   = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);		
	КонецЕсли;
	
	ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	Цена         = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, Ложь, Количество, Договор);
	НаСумму      = цена * Количество;
	
	Если НЕ ВестиУчетПоСериям ТОгда
		ПоискНоменклатуры = Новый Структура("Номенклатура", Номенклатура);
		//ПоискНоменклатуры.Вставить("СерияНоменклатуры", Неопределено);
		
		МассивСтрок = ВыбранныеТовары.НайтиСтроки(ПоискНоменклатуры);
		
		Если ЗапрашиватьКоличество Тогда
			ВвестиЧисло(Количество, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите количество") + " ", 12, 0);
		КонецЕсли;
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			Строка = ВыбранныеТовары.Добавить();
			Строка.Номенклатура      = Номенклатура;
			Строка.ЕдиницаИзмерения  = ЕдиницаИзмерения;
			Строка.СерияНоменклатуры = Неопределено;
			Строка.Количество        = Количество;
			Строка.Цена  = Цена;
			строка.сумма = насумму;
			
		Иначе
			МассивСтрок[0].Количество = МассивСтрок[0].Количество + Количество;
			
		КонецЕсли;			
		ПересчетКоличестваИСуммы();
		
	ИначеЕсли УчетПоСериям Тогда
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
	КонецЕсли;
	
	Если не ЕстьСерииВВыбранных
			и ВестиУчетПоСериям Тогда
			
			ЕстьСерииВВыбранных = Истина;
			Элементы.ВыборТоваровСерияНоменклатуры.Видимость = Истина;
		КонецЕсли;
	
	Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦентральнуюКолонкуПриИзменении(Элемент)
	
	Элементы.СкрытьЦентральнуюКолонку.Видимость = СкрытьЦентральнуюКолонку;
	Элементы.ГруппаСлева.Видимость = Не СкрытьЦентральнуюКолонку;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СкрытьЦентральнуюКолонку.Видимость = СкрытьЦентральнуюКолонку;
	Элементы.ГруппаСлева.Видимость = Не СкрытьЦентральнуюКолонку;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания()
	
	СменуПроизвелилева = истина;
	ТекущиеДанныеНавигации = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	
	ЗначениеОтбора = ?(ТекущиеДанныеНавигации <> Неопределено, ТекущиеДанныеНавигации.Ссылка, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	если не ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		СписокНоменклатуры.Отбор,
		"Родитель",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина
		);
		
		Если ТекущиеДанныеНавигации <> Неопределено Тогда
			Элементы.СписокНоменклатурыСсылка.Заголовок = значениеотбора;
		Иначе
			Элементы.СписокНоменклатурыСсылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
		КонецЕсли;	
		
	иначе
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		СписокНоменклатурыУпрощенный.Отбор,
		"Родитель",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина
		);
		
		Если ТекущиеДанныеНавигации <> Неопределено Тогда
			Элементы.СписокНоменклатурыУпрощенныйСсылка.Заголовок = значениеотбора;
		Иначе
			Элементы.СписокНоменклатурыУпрощенныйСсылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СерияНоменклатуры = ВыбраннаяСтрока;
	Количество   = 1;
	
	ПоискНоменклатуры = Новый Структура("Номенклатура", Номенклатура);
	ПоискНоменклатуры.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	
	Цена       = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, Ложь, Количество, Договор);
	НаСумму    = цена * Количество;	
	
	МассивСтрок = ВыбранныеТовары.НайтиСтроки(ПоискНоменклатуры);
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Строка = ВыбранныеТовары.Добавить();
		Строка.Номенклатура      = Номенклатура;
		Строка.СерияНоменклатуры = СерияНоменклатуры;
		Строка.Количество        = Количество;		
		Строка.Цена  = Цена;
		строка.сумма = насумму;
		
		ПересчетКоличестваИСуммы();
		
	КонецЕсли;			
	
КонецПроцедуры

&НаСервере
Процедура ПересчетКоличестваИСуммы()
	
	ВсегоКоличество = ВыбранныеТовары.Итог("Количество");
	ВсегоНаСумму    = ВыбранныеТовары.Итог("Сумма");
	
КонецПроцедуры //ПересчетКоличестваИСуммы

&НаКлиенте
Процедура Выбрать(Команда)	
	ОповеститьОВыборе(ВыбранныеТовары);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элементы.СписокНоменклатуры.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(Номенклатура) 
		И НЕ Номенклатура = НоменклатураБыла Тогда
		
		НоменклатураБыла = Номенклатура;
		
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		Количество = ?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
		ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
		Цена       = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, Ложь, Количество, Договор);
		НаСумму    = цена * Количество;
		
		Если ВестиУчетПоСериям ТОгда
			СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
		КонецЕсли;
		
		Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			Если ЗначениеЗаполнено(Номенклатура) Тогда				
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Истина;
				Иначе
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		
		Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
			
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = Истина;
			Иначе
				Элементы.Аналоги.Видимость = Ложь;	
			КонецЕсли;
				УстановитьАналогиНаСервере(Номенклатура);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАналогиНаСервере(Знач Номенклатура)
					Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
	КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе
		ПересчитатьСтроку();
	конецесли; 
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1)
	
	Результат = Истина;
	
	РезультатОбработки 	= ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Истина);
	Номенклатура 		= РезультатОбработки.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки);
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден(") + ТекКод + ").");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(НоменклатураВх)
	
	СерияНоменклатуры 	= неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура 	= НоменклатураВх;
		Количество 		= 1;	
		
	Иначе
		Номенклатура	= НоменклатураВх.Номенклатура;
		Количество 		= НоменклатураВх.Количество;
		НоменклатураВх.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	если УчетПоСериям Тогда		
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);		
	КонецЕсли;
	
	СтрокаТовара = ВыбранныеТовары.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокаТовара.Количество() = 0 Тогда
		
		СтрокаТовара 		= ВыбранныеТовары.Добавить();	
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, Истина, Количество, Договор);
		
	иначе
		СтрокаТовара 		= СтрокаТовара[0];
	КонецЕсли;
	
	Если УчетПоСериям
		И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		
		СтрокаТовара.СерияНоменклатуры = СерияНоменклатуры;
		СтрокаТовара.Количество = 1;
	Иначе
		СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
	КонецЕсли;						
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.количество, ВидЦен); //акция ном
		если не процентскидки = 0 
			и не СтрокаТовара.Цена = 0 тогда
			
			СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;	
	
	Элементы.ВыборТоваров.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
	Элементы.ВыборТоваров.ТекущийЭлемент = элементы.ВыборТоваровКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровЦенаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку(ИзКоличества = Ложь, ИзСуммы = Ложь)
	
	СтрокаТовара = Элементы.ВыборТоваров.ТекущиеДанные;
	Если не СтрокаТовара = Неопределено тогда
		
		Если ИзКоличества
			и УчетПоСериям
			и СтрокаТовара.Количество > 0
			и значениезаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
			
			СтрокаТовара.КоличествоПоФакту = 1;
		КонецЕсли;
		
		если ИзСуммы тогда
			СтрокаТовара.Количество = окр(СтрокаТовара.Сумма / СтрокаТовара.Цена);
		КонецЕсли;
		
		СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровСуммаПриИзменении(Элемент)
	
	ПересчитатьСтроку(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	НаСумму = Количество * Цена;
	Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
		ВыбраннаяСтрока = элементы.СписокНоменклатурыУпрощенный.ТекущаяСтрока;
	Иначе
		ВыбраннаяСтрока = элементы.СписокНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		НомВыбор(ВыбраннаяСтрока, , Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаСуммуПриИзменении(Элемент)
	
	количество = окр(НаСумму / цена);
	НаСумму = количество * цена;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаТабличнойЧасти = Неопределено;
	ЗначенияПеретаскивания 	= ПараметрыПеретаскивания.Значение;	
	
	Для Каждого Значение Из ЗначенияПеретаскивания Цикл
		Номенклатура 			= Неопределено;
		СерияНоменклатуры 		= Неопределено;
		ЕдиницаИзмерения 		= Неопределено;
		
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = Значение;
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("Номенклатура", Номенклатура));
			
			ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Значение);
			Количество   = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
			ЭтоСерия = Ложь;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			ЕдиницаИзмерения = Значение;
			Номенклатура = ОбщийМодульСервер.получитьЗначениеРеквизита(ЕдиницаИзмерения, "Владелец");
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("ЕдиницаИзмерения", ЕдиницаИзмерения));
			
			ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Значение);
			Количество   = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
			ЭтоСерия = Ложь;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			
			СерияНоменклатуры = Значение;
			Номенклатура = ОбщийМодульСервер.получитьЗначениеРеквизита(СерияНоменклатуры, "Владелец");
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("СерияНоменклатуры", СерияНоменклатуры));
			
			Количество   = 1;
			ЭтоСерия = Истина;
		КонецЕсли;
		
		
		Если НЕ ЭтоСерия
			И ЗапрашиватьКоличество Тогда
			
			ВвестиЧисло(Количество, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите количество для:") + " " + Значение, 12, 0);
		КонецЕсли;
		
		Если НЕ СтрокиТабличнойЧасти.Количество() = 0 Тогда
			если этосерия тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти = СтрокиТабличнойЧасти[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
		Иначе
			
			Если Строка = Неопределено Тогда
				СтрокаТабличнойЧасти = ВыбранныеТовары.Добавить();
			Иначе
				СтрокаТабличнойЧасти = ВыбранныеТовары.Вставить(ВыбранныеТовары.Индекс(Строка));
			КонецЕсли;
			СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
			СтрокаТабличнойЧасти.СерияНоменклатуры = СерияНоменклатуры;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Количество   = Количество;
			СтрокаТабличнойЧасти.Цена		  = Цена;
			СтрокаТабличнойЧасти.Сумма		  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			
		КонецЕсли;	
	КонецЦикла;
	
	Если не СтрокаТабличнойЧасти = Неопределено Тогда
		Элементы.ВыборТоваров.ТекущаяСтрока = СтрокаТабличнойЧасти;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
	"Наименование",
	СтрокаПоиска,
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	,
	ЗначениеЗаполнено(СтрокаПоиска)
	);
	
	Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
		Элементы.СписокНоменклатурыУпрощенный.Обновить();
	Иначе
		Элементы.СписокНоменклатуры.Обновить();
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
			"Наименование",
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
				Элементы.СписокНоменклатурыУпрощенный.Обновить();
			Иначе
				Элементы.СписокНоменклатуры.Обновить();
			КонецЕсли;
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
				"Наименование",
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
					Элементы.СписокНоменклатурыУпрощенный.Обновить();
				Иначе
					Элементы.СписокНоменклатуры.Обновить();
				КонецЕсли;
				
				если не НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат ?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, Элементы.СписокНоменклатурыУпрощенный.ТекущиеДанные = Неопределено, Элементы.СписокНоменклатуры.ТекущиеДанные = Неопределено);	
КонецФункции //НетНичего

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбраннаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элементы.СписокНоменклатурыУпрощенный.ТекущаяСтрока;
	Если ЗначениеЗаполнено(Номенклатура) 
		И НЕ Номенклатура = НоменклатураБыла Тогда
		
		НоменклатураБыла = Номенклатура;
		
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		Количество = ?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
		ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
		Цена       = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, Ложь, Количество, Договор);
		НаСумму    = цена * Количество;
		
		Если ВестиУчетПоСериям ТОгда
			СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
		КонецЕсли;
		
		Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Истина;
				Иначе
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
			
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = Истина;
			Иначе
				Элементы.Аналоги.Видимость = Ложь;	
			КонецЕсли;
				УстановитьАналогиНаСервере(Номенклатура);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбраннаяСтрока, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомВыбор(ВыбранноеЗначение, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура АналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
	СтандартнаяОбработка = Ложь;
	НомВыбор(ТекущиеДанные.Номенклатура, , , Истина);		
															КонецЕсли;
	
КонецПроцедуры
