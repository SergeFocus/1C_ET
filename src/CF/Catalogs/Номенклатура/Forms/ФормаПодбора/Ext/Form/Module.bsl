//sza141129-2303 пк
//sza141124-1216 фикс
//sza141114-2240 АльтернативнаяФормаПредставления
//sza140924-2250 Хозяин: !
//sza140903-1900
//sza140902-1703
//sza140805-1407 запросы при штрихкоде
//sza140731-1702 
//sza140721-1107 склад
//sza140718-1453 
//sza140708-1452
//sza140610-0130  
//sza140119-2331 
&НаКлиенте
Процедура АналогиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		НомВыбор(ТекущиеДанные.Номенклатура, , , ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШКНаклиенте(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровКоличествоПриИзменении(Элемент)
	ПересчитатьСтроку(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтрокаТабличнойЧасти = Неопределено;
	ЗначенияПеретаскивания 	= ПараметрыПеретаскивания.Значение;	
	
	Для Каждого Значение Из ЗначенияПеретаскивания Цикл
		Номенклатура 	  = Неопределено;
		СерияНоменклатуры = Неопределено;
		ЕдиницаИзмерения  = Неопределено;
		
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = Значение;
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("Номенклатура", Номенклатура));
			
			ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Значение);
			Количество = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
			ЭтоСерия = ЛОЖЬ;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			ЕдиницаИзмерения = Значение;
			Номенклатура = ОбщийМодульСервер.получитьЗначениеРеквизита(ЕдиницаИзмерения, "Владелец");
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("ЕдиницаИзмерения", ЕдиницаИзмерения));
			
			ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Значение);
			Количество = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
			ЭтоСерия = ЛОЖЬ;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			
			СерияНоменклатуры = Значение;
			Номенклатура = ОбщийМодульСервер.получитьЗначениеРеквизита(СерияНоменклатуры, "Владелец");
			СтрокиТабличнойЧасти = ВыбранныеТовары.НайтиСтроки(новый Структура("СерияНоменклатуры", СерияНоменклатуры));
			
			Количество = 1;
			ЭтоСерия = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ЭтоСерия
			И ЗапрашиватьКоличество Тогда
			
			ВвестиЧисло(Количество, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Количество для") + ": " + Значение, 15, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"));
		КонецЕсли;
		
		Если НЕ НеМожетМенятьЦены
			И ЗапрашиватьЦену Тогда
			
			ВвестиЧисло(Цена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Цену для") + ": " + Значение, 12, 2);
		КонецЕсли;
		
		Если НЕ СтрокиТабличнойЧасти.Количество() = 0 Тогда
			Если этосерия тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти = СтрокиТабличнойЧасти[0];
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
		Иначе
			
			Если Строка = Неопределено Тогда
				СтрокаТабличнойЧасти = ВыбранныеТовары.Добавить();
			Иначе
				СтрокаТабличнойЧасти = ВыбранныеТовары.Вставить(ВыбранныеТовары.Индекс(Строка));
			КонецЕсли;
			СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
			СтрокаТабличнойЧасти.СерияНоменклатуры = СерияНоменклатуры;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Количество   = Количество;
			СтрокаТабличнойЧасти.Цена		  = Цена;
			СтрокаТабличнойЧасти.Сумма		  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		Элементы.ВыборТоваров.ТекущаяСтрока = СтрокаТабличнойЧасти;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровСуммаПриИзменении(Элемент)
	
	ПересчитатьСтроку(, ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровЦенаПриИзменении(Элемент)
	ПересчитатьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)	
	ОповеститьОВыборе(ВыбранныеТовары);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);
		
		Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
			Элементы.СписокНоменклатурыУпрощенный.Обновить();
		Иначе
			Элементы.СписокНоменклатуры.Обновить();
		КонецЕсли;	
		
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			, ИСТИНА
			);
			
			Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
				Элементы.СписокНоменклатурыУпрощенный.Обновить();
			Иначе
				Элементы.СписокНоменклатуры.Обновить();
			КонецЕсли;	
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, СписокНоменклатурыУпрощенный.Отбор, СписокНоменклатуры.Отбор),
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				, ИСТИНА
				);
				
				Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
					Элементы.СписокНоменклатурыУпрощенный.Обновить();
				Иначе
					Элементы.СписокНоменклатуры.Обновить();
				КонецЕсли;	
				
				Если НЕ НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания", 0.2, ИСТИНА);
	//	ТекущиеДанныеНавигацииВыбран = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	//	
	//	Если НЕ ТекущиеДанныеНавигацииВыбран = Неопределено
	//		И НЕ ТекущиеДанныеНавигации = ТекущиеДанныеНавигацииВыбран Тогда
	//		
	//		ТекущиеДанныеНавигации = ТекущиеДанныеНавигацииВыбран.ссылка;
	//		СменаРодителя(?(ТекущиеДанныеНавигацииВыбран <> Неопределено, ТекущиеДанныеНавигацииВыбран.ссылка, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));	
	//	КонецЕсли;
	//	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПозициюНоменклатуры(Знач НоменклатураВх, Знач Количество = 1, Знач Цена = 0)
	
	СерияНоменклатуры = Неопределено;
	
	Если ТипЗнч(НоменклатураВх) = Тип("СправочникСсылка.Номенклатура") Тогда  		
		Номенклатура  = НоменклатураВх;
		Количество 	  = Количество;	
		
	Иначе
		Номенклатура  = НоменклатураВх.Номенклатура;
		Количество 	  = ?(Количество = 1, НоменклатураВх.Количество, Количество);
		НоменклатураВх.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		
	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	Если УчетПоСериям Тогда		
		ПараметрыОтбора.Вставить("СерияНоменклатуры", СерияНоменклатуры);		
	КонецЕсли;
	
	СтрокаТовара = ВыбранныеТовары.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокаТовара.Количество() = 0 Тогда
		
		СтрокаТовара 	  = ВыбранныеТовары.Добавить();	
		СтрокаТовара.Номенклатура = Номенклатура;
		СтрокаТовара.Цена = ?(Цена = 0, ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ВидЦен, Дата, ИСТИНА, Количество, Договор), Цена);
		
	Иначе
		СтрокаТовара 	  = СтрокаТовара[0];
	КонецЕсли;
	
	Если УчетПоСериям
		И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		
		СтрокаТовара.СерияНоменклатуры = СерияНоменклатуры;
		СтрокаТовара.Количество = 1;
	Иначе
		СтрокаТовара.Количество = СтрокаТовара.Количество + Количество;
	КонецЕсли;						
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, строкатовара.количество, ВидЦен); //акция ном
		Если НЕ процентскидки = 0 
			И НЕ СтрокаТовара.Цена = 0 тогда
			
			СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);	
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;	
	
	Элементы.ВыборТоваров.ТекущаяСтрока  = СтрокаТовара.ПолучитьИдентификатор();
	Элементы.ВыборТоваров.ТекущийЭлемент = Элементы.ВыборТоваровКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	НаСумму = Количество * Цена;
	Если ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
		ВыбраннаяСтрока = Элементы.СписокНоменклатурыУпрощенный.ТекущаяСтрока;
	Иначе
		ВыбраннаяСтрока = Элементы.СписокНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		НомВыбор(ВыбраннаяСтрока, , ИСТИНА);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НаСуммуПриИзменении(Элемент)
	
	количество = окр(НаСумму / ?(цена = 0, 1, цена));
	НаСумму = количество * цена;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат ?(ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных, Элементы.СписокНоменклатурыУпрощенный.ТекущиеДанные = Неопределено, Элементы.СписокНоменклатуры.ТекущиеДанные = Неопределено);	
КонецФункции //НетНичего

&НаКлиенте
Процедура НомВыбор(ВыбраннаяСтрока, Знач ИзЕдиницыИзмерения = ЛОЖЬ, Знач ИзКоличества = ЛОЖЬ, Знач ИзАналога = ЛОЖЬ)
	
	Если ИзЕдиницыИзмерения Тогда
		ЕдиницаИзмерения = ВыбраннаяСтрока;
		Номенклатура = ОбщийМодульСервер.ПолучитьЗначениеРеквизита(ЕдиницаИзмерения, "Владелец");
	Иначе
		Номенклатура = ВыбраннаяСтрока;
		ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если НЕ ИзКоличества Тогда
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура, ИзАналога);
		Количество   = ПолучитьКоличествоПоУмолчанию;//?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);		
	КонецЕсли;
	
	ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
	
	Цена         = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ЛОЖЬ, Количество, Договор);
	
	Если НЕ ВестиУчетПоСериям ТОгда
		
		Если ЗапрашиватьКоличество Тогда			
			ВвестиЧисло(Количество, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Количество для") + ": " + Номенклатура, 15, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"));
		КонецЕсли;
		
		Если НЕ НеМожетМенятьЦены
			И ЗапрашиватьЦену Тогда
			
			ВвестиЧисло(Цена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Цену для") + ": " + Номенклатура, 12, 2);
		КонецЕсли;
		
		НаСумму      = цена * Количество;
		ПоискНоменклатуры = Новый Структура("Номенклатура", Номенклатура);
		//ПоискНоменклатуры.Вставить("СерияНоменклатуры", Неопределено);
		
		МассивСтрок = ВыбранныеТовары.НайтиСтроки(ПоискНоменклатуры);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			Строка = ВыбранныеТовары.Добавить();
			Строка.Номенклатура      = Номенклатура;
			Строка.ЕдиницаИзмерения  = ЕдиницаИзмерения;
			Строка.СерияНоменклатуры = Неопределено;
			Строка.Количество        = Количество;
			Строка.Цена  = Цена;
			строка.сумма = насумму;
			
		Иначе
			МассивСтрок[0].Количество = МассивСтрок[0].Количество + Количество;
			
		КонецЕсли;			
		ПересчетКоличестваИСуммы();
		
	ИначеЕсли УчетПоСериям Тогда
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
	КонецЕсли;
	
	Если НЕ ЕстьСерииВВыбранных
		И ВестиУчетПоСериям Тогда
		
		ЕстьСерииВВыбранных = ИСТИНА;
		Элементы.ВыборТоваровСерияНоменклатуры.Видимость = ИСТИНА;
	КонецЕсли;
	
	Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
	
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаклиенте(Знач ТекКод)
	
	Результат = ОбработатьПолученныйШКНаСервере(ТекКод);
	
	Если НЕ Результат тогда
		
		СканерЗаблокирован = ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		Элементы.разблокироватьсканер.видимость = СканерЗаблокирован;
		
	Иначе		
		СтрокаТовара = Элементы.ВыборТоваров.ТекущиеДанные;
		
		Если ЗапрашиватьКоличество Тогда			
			ВвестиЧисло(СтрокаТовара.Количество, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Количество для") + ": " + Номенклатура, 15, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества"));
		КонецЕсли;
		
		Если НЕ НеМожетМенятьЦены
			И ЗапрашиватьЦену Тогда
			
			ВвестиЧисло(СтрокаТовара.Цена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Цену для") + ": " + Номенклатура, 12, 2);
		КонецЕсли;
		
		ПересчитатьСтроку();
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод, Знач Количество = 1, Знач Цена = 0)
	
	Результат = ИСТИНА;
	
	РезультатОбработки 	= ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ИСТИНА);
	Номенклатура 		= РезультатОбработки.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДобавитьПозициюНоменклатуры(РезультатОбработки, Количество, Цена);
		
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товар по Штрих-Коду не найден") + "(" + ТекКод + ").");
		Результат = ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если НЕ СканерЗаблокирован
			И ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбраннаяСтрока, ИСТИНА);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВЕдиницахИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбранноеЗначение, ИСТИНА);	
	
КонецПроцедуры

&НаСервере
Процедура ПересчетКоличестваИСуммы()
	
	ВсегоКоличество = ВыбранныеТовары.Итог("Количество");
	ВсегоНаСумму    = ВыбранныеТовары.Итог("Сумма");
	
КонецПроцедуры //ПересчетКоличестваИСуммы

&НаКлиенте
Процедура ПересчитатьСтроку(ИзКоличества = ЛОЖЬ, ИзСуммы = ЛОЖЬ)
	
	СтрокаТовара = Элементы.ВыборТоваров.ТекущиеДанные;
	Если НЕ СтрокаТовара = Неопределено тогда
		
		Если ИзКоличества
			И УчетПоСериям
			И СтрокаТовара.Количество > 0
			И значениезаполнено(СтрокаТовара.СерияНоменклатуры) Тогда
			
			СтрокаТовара.КоличествоПоФакту = 1;
		КонецЕсли;
		
		Если ИзСуммы тогда
			СтрокаТовара.Количество = окр(СтрокаТовара.Сумма / СтрокаТовара.Цена);
		КонецЕсли;
		
		СтрокаТовара.Сумма 	= СтрокаТовара.Количество * СтрокаТовара.Цена;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАналогиНаСервере(Знач Номенклатура)
	Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СкрытьЦентральнуюКолонку.Видимость = СкрытьЦентральнуюКолонку;
	Элементы.ГруппаСлева.Видимость = Не СкрытьЦентральнуюКолонку;
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке( "При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаВидаОтображенияДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));	
		КонецЕсли;
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		
		ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных");
		ИспользоватьМеханизмАналоговДляНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры");
		ИспользоватьЕдиницыИзмеренияНоменклатуры 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();	
		ИспользоватьСложныйМеханизмЦен 		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
		ВестиУчетСерийНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры");
		ВестиУчетПоСкладам     = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		УчетПоСериям 	  = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		НеМожетМенятьЦены = ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены");
		
		Документ 	= Параметры.Документ;
		ВидЦен   	= Параметры.ВидЦен;
		Склад 	 	= Параметры.Склад;
		Дата	 	= Параметры.Дата;
		Договор  	= Параметры.Договор;
		Добавление 	= Параметры.Добавление;
		
		ЗначениеЗаполненоСклад = ЗначениеЗаполнено(Склад);
		Количество = 1;
		
		Если ЗначениеЗаполнено(Документ) Тогда
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				Попытка 
					видцен = Документ.ВидЦен;
				Исключение 	
				КонецПопытки;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполненоСклад Тогда
				Попытка 
					Склад = Документ.Склад;
				Исключение 	
				КонецПопытки;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Договор) Тогда
				Попытка 
					Договор = Документ.Договор;
				Исключение 	
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
		
		ЗначениеЗаполненоДокумент   = ЗначениеЗаполнено(Документ);
		Элементы.Документ.Видимость = ЗначениеЗаполненоДокумент;
		Элементы.Дата.Видимость 	= НЕ ЗначениеЗаполненоДокумент; 
		Если НЕ ЗначениеЗаполнено(Дата) Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		Элементы.СписокНоменклатуры.Видимость = НЕ ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных;
		Элементы.СписокНоменклатурыУпрощенный.Видимость = ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных;
		Элементы.СписокНоменклатурыУпрощенныйЦена.Видимость = НЕ ИспользоватьСложныйМеханизмЦен;
		
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", Дата);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ВестиУчетПоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ВестиУчетПоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", Склад);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Неопределено);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Дата", Дата);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ВестиУчетПоСкладам ИЛИ не ЗначениеЗаполненоСклад);
		СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
		
		Если НЕ параметры.Товары = Неопределено Тогда
			ВыбранныеТовары.Загрузить(параметры.Товары.Выгрузить());
		КонецЕсли;
		
		ПересчетКоличестваИСуммы();
		
		Если ВестиУчетСерийНоменклатуры Тогда
			Для Каждого СтрокаТовара Из ВыбранныеТовары Цикл
				ЕстьСерииВВыбранных = ОбщийМодульПовтор.ТоварВедетсяПоСериям(СтрокаТовара.Номенклатура);
				Если ЕстьСерииВВыбранных Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ВыборТоваровСерияНоменклатуры.Видимость = ЕстьСерииВВыбранных;
		Элементы.СписокНоменклатурыЦена1.ТолькоПросмотр  = НеМожетМенятьЦены;
		Элементы.ВыборТоваровЦена.ТолькоПросмотр         = НеМожетМенятьЦены;
		Элементы.ЗапрашиватьЦену.Видимость 				 = НЕ НеМожетМенятьЦены;
		Элементы.ЗапрашиватьЦену1.Видимость 			 = НЕ НеМожетМенятьЦены;
		Элементы.КлиентПоставщик.Видимость				 = ЗначениеЗаполнено(КлиентПоставщик);
		Элементы.Документ1.Видимость					 = ЗначениеЗаполнено(Документ);
		Элементы.СписокНоменклатурыУпрощенныйЦена.ТолькоПросмотр = НеМожетМенятьЦены;
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Если НЕ ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
						Выполнить(" Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
						Выполнить(" Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						Выполнить(" Элементы.СписокНоменклатурыРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						
					Иначе
						Выполнить(" Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
						Выполнить(" Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
						Выполнить(" Элементы.СписокНоменклатурыУпрощенныйРеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");	
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ВыборТоваровКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Количество, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Количество1, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ВсегоКоличество, , ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СписокНоменклатурыОстаток, , ИСТИНА);	
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ОстаткиВЕдиницахИзмеренияКоличество, , ИСТИНА);
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокНоменклатуры);
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(СписокНоменклатурыУпрощенный);
		ОформитьЗапрос();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЗапрос(Знач ПолеОтбора = "", Знач ЗначениеОтбора = Неопределено)
	
	СписокНоменклатуры.ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	СправочникНоменклатура.ПометкаУдаления,
	|	СправочникНоменклатура.НоменклатурнаяГруппа,
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.ЭтоНабор,
	|	СправочникНоменклатура.НеОтслеживатьОстаток, " + ?(ВестиУчетСерийНоменклатуры, " 
	|	СправочникНоменклатура.СерийныйУчет, 
	|	СправочникНоменклатура.ЗапретитьУказаниеБезСерии, ", "") + " 
	|	СправочникНоменклатура.КоличествоПоУмолчанию,
	|	СправочникНоменклатура.Ответственный,
	|	СправочникНоменклатура.ДатаСоздания,
	|	СправочникНоменклатура.ДатаРедакции, 
	|   ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) КАК Остаток, " + ?(ИспользоватьСложныйМеханизмЦен, " 
	|	ЕСТЬNULL(Цены.Цена, 0) КАК Цена, 	
	|	ЕСТЬNULL(Цены.Цена, 0) * ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) КАК НаСумму", "СправочникНоменклатура.Цена, СправочникНоменклатура.Цена
	|	* ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) КАК НаСумму ") + ",
	|	СправочникНоменклатура.Вес,
	|	СправочникНоменклатура.Длина,
	|	СправочникНоменклатура.Ширина,
	|	СправочникНоменклатура.Высота " + ?(ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп, ",
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы1,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы2,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы3,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы4,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы5,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы6,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы7,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы8,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы9,
	|	СправочникНоменклатура.РеквизитНоменклатурнойГруппы10 ", "") + " 
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Товары.Остатки(
	|				&ДатаОстатка,
	|				&НетОтбораПоСкладу
	|					ИЛИ Склад = &Склад) КАК ТоварыОстатки
	|		ПО СправочникНоменклатура.Ссылка = ТоварыОстатки.Номенклатура " + ?(ИспользоватьСложныйМеханизмЦен, " 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&ДатаОстатка, ВидЦен = &ВидЦен) КАК Цены
	|		ПО СправочникНоменклатура.Ссылка = Цены.Номенклатура ", "") + " 
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ";
	
	//!!!!!!!
	Если НЕ Добавление
		И НЕ ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстатками") Тогда
		
		СписокНоменклатуры.ТекстЗапроса = СписокНоменклатуры.ТекстЗапроса + " И (СправочникНоменклатура.НеОтслеживатьОстаток ИЛИ ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) > 0) ";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПолеОтбора)
		И ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		СписокНоменклатуры.ТекстЗапроса = СписокНоменклатуры.ТекстЗапроса + " И СправочникНоменклатура." + ПолеОтбора + " = &ЗначениеОтбора";
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ЗначениеОтбора", ЗначениеОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ЕстьСерииВВыбранных  = ИСТИНА;
	Элементы.ВыборТоваровСерияНоменклатуры.Видимость = ИСТИНА;
	
	СерияНоменклатуры = ВыбраннаяСтрока;
	Количество  	  = 1;
	
	ПоискНоменклатуры = Новый Структура("Номенклатура", Номенклатура);
	ПоискНоменклатуры.Вставить("СерияНоменклатуры", СерияНоменклатуры);
	
	Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ЛОЖЬ, Количество, Договор);
	
	Если НЕ НеМожетМенятьЦены
		И ЗапрашиватьЦену Тогда
		
		ВвестиЧисло(Цена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите Цену для") + ": " + Номенклатура, 12, 2);
	КонецЕсли;
	
	НаСумму     = цена * Количество;	
	МассивСтрок = ВыбранныеТовары.НайтиСтроки(ПоискНоменклатуры);
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Строка = ВыбранныеТовары.Добавить();
		Строка.Номенклатура      = Номенклатура;
		Строка.СерияНоменклатуры = СерияНоменклатуры;
		Строка.Количество        = Количество;		
		Строка.Цена  = Цена;
		строка.сумма = насумму;
		
		ПересчетКоличестваИСуммы();
		
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
	ЕстьСерииВВыбранных = ИСТИНА;
	Элементы.ВыборТоваровСерияНоменклатуры.Видимость = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦентральнуюКолонкуПриИзменении(Элемент)
	
	Элементы.СкрытьЦентральнуюКолонку.Видимость = СкрытьЦентральнуюКолонку;
	Элементы.ГруппаСлева.Видимость = Не СкрытьЦентральнуюКолонку;
	Если СкрытьЦентральнуюКолонку Тогда
		ПрименитьОтборПоРодителю(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), , ЛОЖЬ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбраннаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элементы.СписокНоменклатуры.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(Номенклатура) 
		И НЕ Номенклатура = НоменклатураБыла Тогда
		
		НоменклатураБыла = Номенклатура;
		
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		Количество = ?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
		ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
		Цена       = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ЛОЖЬ, Количество, Договор);
		НаСумму    = цена * Количество;
		
		Если ВестиУчетПоСериям ТОгда
			СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
		КонецЕсли;
		
		Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			Если ЗначениеЗаполнено(Номенклатура) Тогда				
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;
				Иначе
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
		
		Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
			
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = ИСТИНА;
			Иначе
				Элементы.Аналоги.Видимость = ЛОЖЬ;	
			КонецЕсли;
			УстановитьАналогиНаСервере(Номенклатура);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбраннаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование; 
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	НомВыбор(ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыУпрощенныйПриАктивизацииСтроки(Элемент)
	
	Номенклатура = Элементы.СписокНоменклатурыУпрощенный.ТекущаяСтрока;
	Если ЗначениеЗаполнено(Номенклатура) 
		И НЕ Номенклатура = НоменклатураБыла Тогда
		
		НоменклатураБыла = Номенклатура;
		
		ПолучитьКоличествоПоУмолчанию = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		Количество = ?(ПолучитьКоличествоПоУмолчанию = 1, Количество, ПолучитьКоличествоПоУмолчанию);
		ВестиУчетПоСериям = УчетПоСериям И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
		Цена       = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ЛОЖЬ, Количество, Договор);
		НаСумму    = цена * Количество;
		
		Если ВестиУчетПоСериям ТОгда
			СерииНоменклатуры.Параметры.УстановитьЗначениеПараметра("Владелец", Номенклатура);
		КонецЕсли;
		
		Элементы.СерииНоменклатуры.Видимость = ВестиУчетПоСериям;
		
		Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
				Если УНоменклатурыЕстьЕдиницыИзмерения Тогда
					ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;
				Иначе
					Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
			
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = ИСТИНА;
			Иначе
				Элементы.Аналоги.Видимость = ЛОЖЬ;	
			КонецЕсли;
			УстановитьАналогиНаСервере(Номенклатура);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатурыОбработчикОжидания()
	
	ТекущиеДанныеНавигацииВыбран = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанныеНавигацииВыбран = Неопределено Тогда
		
		ЗначениеОтбора = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ПрименитьОтборПоРодителю(ЗначениеОтбора, ИСТИНА);
		
	Иначе
		ТекущиеДанныеНавигацииВыбран = Элементы.ГруппыНоменклатуры.ТекущиеДанные.Ссылка;
		Если НЕ ТекущиеДанныеНавигации = ТекущиеДанныеНавигацииВыбран Тогда
			ПрименитьОтборПоРодителю(ТекущиеДанныеНавигацииВыбран, ЛОЖЬ);
		КонецЕсли;   	
		
	КонецЕсли;
	ТекущиеДанныеНавигации = ТекущиеДанныеНавигацииВыбран;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборПоРодителю(Знач ЗначениеОтбора, Знач ТекущиеДанныеНавигацииНеопределено = ИСТИНА, Знач ВключитьОтбор = ИСТИНА)
	
	Если НЕ ДляУскоренияРаботыСБазойДанныхНеВыводитьДополнительныхДанных Тогда
		
		ПрименитьОтборПоРодителюНаСервере(ЗначениеОтбора);
		
		//ОбщийМодульКлиент.УстановитьЭлементОтбора(
		//СписокНоменклатуры.Отбор,
		//"Родитель",
		//ЗначениеОтбора,
		//ВидСравненияКомпоновкиДанных.Равно,
		//,
		//ИСТИНА
		//);
		
		Если НЕ ТекущиеДанныеНавигацииНеопределено Тогда
			Элементы.СписокНоменклатурыСсылка.Заголовок = СокрЛП(Значениеотбора);
		Иначе
			Элементы.СписокНоменклатурыСсылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура");
		КонецЕсли;	
		
	Иначе
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		СписокНоменклатурыУпрощенный.Отбор,
		"Родитель",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ВключитьОтбор
		);
		
		Если НЕ ТекущиеДанныеНавигацииНеопределено Тогда
			Элементы.СписокНоменклатурыУпрощенныйСсылка.Заголовок = СокрЛП(значениеотбора);
		Иначе
			Элементы.СписокНоменклатурыУпрощенныйСсылка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборПоРодителюНаСервере(ЗначениеОтбора)
	
	ОформитьЗапрос("Родитель", ЗначениеОтбора);
	Элементы.СписокНоменклатуры.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ТекущиеДанные = Элементы.ГруппыНоменклатуры.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Родитель", ТекущиеДанные);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура СменитьВидОтображенияДокумента()
	АльтернативнаяФормаПредставления = не АльтернативнаяФормаПредставления;
КонецПроцедуры

&НаСервере
Процедура ПроверкаВидаОтображенияДокумента() 
	
	Элементы.ГруппаСлева.видимость 				 = НЕ СкрытьЦентральнуюКолонку И НЕ АльтернативнаяФормаПредставления;
	Элементы.СкрытьЦентральнуюКолонку.видимость  = СкрытьЦентральнуюКолонку И НЕ АльтернативнаяФормаПредставления;
	Элементы.ГруппаЗаголовкаПриПодвале.видимость = АльтернативнаяФормаПредставления;
	Элементы.ГруппаПодвала.видимость 			 = АльтернативнаяФормаПредставления;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	СменитьВидОтображенияДокумента();
	ПроверкаВидаОтображенияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(Знач ИзКоличества = ЛОЖЬ, Знач НеМенятьЦену = ЛОЖЬ) 
	
	СтрокаТовара = Элементы.ВыборТоваров.ТекущиеДанные;	
	Номенклатура = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда  		
		
		Если ЗначениеЗаполнено(СтрокаТовара.ЕдиницаИзмерения)
			И НЕ ОбщийМодульКлиент.ЕдиницаПринадлежитНоменклатуре(СтрокаТовара.Номенклатура, СтрокаТовара.ЕдиницаИзмерения) Тогда
			
			СтрокаТовара.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		КонецЕсли;
		
		Если СтрокаТовара.Количество = 0 тогда
			СтрокаТовара.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(Номенклатура);
		КонецЕсли;
		
		Если УчетПоСериям 
			И (НЕ СерииНоменклатурыВидны ИЛИ СтрокаТовара.Количество <> 1) Тогда
			
			ТоварВедетсяПоСериям = ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура);
			
			Если ТоварВедетсяПоСериям Тогда
				СтрокаТовара.Количество = 1;
				//СерииНоменклатурыВидны  = ИСТИНА;		
				//Элементы.ТоварыСерияНоменклатуры.Видимость = ИСТИНА;	
			КонецЕсли;             	
		КонецЕсли;
		
		Если НЕ НеМенятьЦену
			И НЕ изколичества тогда
			
			СтрокаТовара.Цена = ПолучитьЦенуНаСервере(Номенклатура, СтрокаТовара.Количество, СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		
		СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
		
	Иначе
		СтрокаТовара.Цена  = 0;
		СтрокаТовара.Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровНоменклатураПриИзменении(Элемент)
	ПриИзмененииНоменклатуры();
КонецПроцедуры

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач Количество = 0, Знач ЕдиницаИзмерения)
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(Номенклатура, Количество, ВидЦен, КлиентПоставщик);
	Иначе
		ПроцентСкидки = 0;	
	КонецЕсли;
	Цена = 0;
	
	Если Добавление
		И ЗначениеЗаполнено(КлиентПоставщик) 
		И ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда		
		
		Цена = ОпределитьЦенуПоследнейПродажи(Номенклатура);
	КонецЕсли;	
	
	Если Цена = 0 Тогда		
		Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата - 1, ЛОЖЬ, Количество, Договор, , , Документ, , ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НЕ ПроцентСкидки = 0 
		И НЕ Цена = 0 тогда
		
		Возврат Цена - (Цена / 100 * ПроцентСкидки);
		
	ИначеЕсли НЕ Цена = 0 Тогда
		
		Возврат Цена;	
		
	Иначе
		Возврат Номенклатура.Цена;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ОпределитьЦенуПоследнейПродажи(Знач Номенклатура)
	Возврат ОбщийМодульСервер.ПолучитьПОследнююЦенуРеализации(Номенклатура, КлиентПоставщик, Договор, Дата);	
КонецФункции //ОпределитьЦенуПоследнейПродажи

&НаКлиенте
Процедура ВыборТоваровНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтр = Элементы.ВыборТоваров.ТекущиеДанные;	
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПараметрыФормы = Новый Структура;
	Если ИспользоватьСложныйМеханизмЦен
		И ЗначениеЗаполнено(ВидЦен) Тогда
		
		ПараметрыФормы.Вставить("ВидЦен", ВидЦен);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("КлиентПоставщик", КлиентПоставщик);
	
	Если ВестиУчетПоСкладам
		И ЗначениеЗаполнено(Склад) Тогда
		
		ПараметрыФормы.Вставить("ОтборПоСкладу", Склад);
	КонецЕсли;
	ПараметрыФормы.Вставить("ВызовИзРасходаТовара", ЛОЖЬ);
	ПараметрыФормы.Вставить("ОтборПоДате", Дата);
	Если ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения() = 1 Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекСтр.Номенклатура);	
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы);
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда		
		ТекСтр.Номенклатура = Номенклатура;		
		ПриИзмененииНоменклатуры();
		Элементы.ВыборТоваров.ЗакончитьРедактированиеСтроки(ЛОЖЬ);
		Элементы.ВыборТоваров.ТекущийЭлемент = Элементы.ВыборТоваровКоличество;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТоваровНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекСтр = Элементы.ВыборТоваров.ТекущиеДанные;	
	
	ОбщийМодульКлиент.ПоискОшибкиКодировки("Номенклатура", ДанныеВыбора, Текст, ТекСтр.Номенклатура, КлиентПоставщик);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ПриИзмененииНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры
