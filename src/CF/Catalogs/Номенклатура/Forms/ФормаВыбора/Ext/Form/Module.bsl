//sza140425-1911 SZA: 
//sza130918-1611 : 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		ИспользоватьМеханизмАналоговДляНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры");
		ИспользоватьЕдиницыИзмеренияНоменклатуры 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") ;
		ИспользоватьСложныйМеханизмЦен 				= ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			
			Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
				ВидЦен = Параметры.ВидЦен;
			Иначе
				ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
					
					Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
						ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен ;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьВидЦен();			
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		ИспользуетсяОтборПоСкладу 	= ЗначениеЗаполнено(Параметры.ОтборПоСкладу) и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");	
		ОтборПоСкладу 				= Параметры.ОтборПоСкладу;
		ВызовИзРасходаТовара 		= Параметры.ВызовИзРасходаТовара;          	
		
		Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ИспользуетсяОтборПоСкладу);
		Список.Параметры.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Список.Параметры.УстановитьЗначениеПараметра("СкладПополнения", ?(ИспользуетсяОтборПоСкладу и ВызовИзРасходаТовара, ОтборПоСкладу.СкладПополнения, Справочники.Склады.ПустаяСсылка()));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ИспользуетсяОтборПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтборПоСкладу);
		
		Если ИспользуетсяОтборПоСкладу
			и ВызовИзРасходаТовара
			и ЗначениеЗаполнено(ОтборПоСкладу.СкладПополнения) Тогда
			
			Элементы.ОтборПоСкладу.Видимость 		= ложь;
			Элементы.ОтборПоСкладуСкладПополнения.Видимость = ложь;
			Элементы.отборПоскладуТекст.видимость 	= истина;
			Элементы.отборПоскладуТекст.заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отбор на складах:") + " " + сокрлп(ОтборПоСкладу) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" и") + " " + сокрлп(ОтборПоСкладу.СкладПополнения) ;
			
		иначе
			Элементы.отборПоскладуТекст.видимость 	= ложь;
			Элементы.ОтборПоСкладу.Видимость 		= ИспользуетсяОтборПоСкладу;
			Элементы.ОтборПоСкладуСкладПополнения.Видимость = ИспользуетсяОтборПоСкладу;
			
		КонецЕсли;
		
		попытка
			Если (ВызовИзРасходаТовара или параметры.ИзПеремещения)
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстатками") Тогда
				
				Список.Отбор.Элементы[0].Использование = истина;
			иначе
				Список.Отбор.Элементы[0].Использование = ложь;
				
			КонецЕсли;
		исключение
		КонецПопытки;
		
		ИспользуетсяОтборПоДате = ЗначениеЗаполнено(параметры.ОтборПоДате);
		ОтборПоДате = Параметры.ОтборПоДате;
		
		Список.Параметры.УстановитьЗначениеПараметра("Дата", ?(ИспользуетсяОтборПоДате, ОтборПоДате, ОбщийМодульСервисСервер.ПользователяТекущаяДата()));	
		
		Элементы.ПроцентСкидки.Видимость 	= ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры;
		элементы.ОтборПоДате.Видимость 		= ИспользуетсяОтборПоДате;
		
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп") ;
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, Истина);
			Если не НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Остаток, , Истина);	
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	если не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями")
		и ИспользуютсяИзображения тогда
		
		ИспользуютсяИзображения = Ложь;	
	КонецЕсли;
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Номенклатура = ОбработатьПолученныйШКНаКлиенте(ТекКод);
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Закрыть(Номенклатура);
			КонецЕсли; 			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, Ложь);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат 	= Истина;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	Если КодЭлемента <> Неопределено Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ИзменитьВидЦен();	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	Элементы.Список.Обновить();
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		если не ОбработатьПолученныйШКНаСервере(ТекКод) тогда
			ОбщийМодульКлиент.ВыдатьСигнал();
		конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(ШтрихКод, ТекстЗаголовка = "") Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите ШтрихКод");
	КонецЕсли;
	
	ШтрихКод = "";
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Неопределено;
	
	Если ИспользуютсяИзображения Тогда
		ПодСсылку = "";
		
		ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
			
			ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);
			
			Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
				
				СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
				ПодСсылку = СтруктураИзображения.ПодСсылку;
				
				элементы.СсылкаНаИзображение.Видимость = не СтруктураИзображения.ИзображениеВБазеДанных;
				элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
				
				если СтруктураИзображения.РазмерПриОтображении = 1 тогда
					элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
				иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
					элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
				иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
					элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
				иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
					элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
				иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
					элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
				конецесли; 		 
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено ТОгда
			Номенклатура = ТекущиеДанные.Ссылка;
			УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
			если УНоменклатурыЕстьЕдиницыИзмерения тогда
				
				ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Истина;
			иначе
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		КонецЕсли;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			Номенклатура = ТекущиеДанные.ссылка;
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = Истина;
				Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
			Иначе
				Элементы.Аналоги.Видимость = Ложь;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
	Если не ТекущиеДанные = Неопределено Тогда
		Закрыть(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
КонецПроцедуры
