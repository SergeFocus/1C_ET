//sza140425-1911  
//sza130918-1611 : 
&НаКлиенте
Процедура АналогиВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Аналоги.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Закрыть(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	ИзменитьВидЦен();	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЦен()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);	
	Элементы.Список.Обновить();
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		Элементы.ОстаткиВЕдиницахИзмерения.Обновить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяИзображенияПриИзменении(Элемент)
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
КонецПроцедуры

&НаКлиенте
Функция   ОбработатьПолученныйШКНаКлиенте(ТекКод)
	
	Результат 	= ИСТИНА;
	КодЭлемента = ОбработатьПолученныйШКНаСервере(ТекКод);
	Если КодЭлемента <> Неопределено Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ОбработатьПолученныйШКНаСервере(Знач ТекКод)
	
	КодЭлемента = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ТекКод, ЛОЖЬ);
	Если ЗначениеЗаполнено(КодЭлемента) Тогда
		Результат = КодЭлемента;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Номенклатура = ОбработатьПолученныйШКНаКлиенте(ТекКод);
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Закрыть(Номенклатура);
			КонецЕсли; 			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
	
	Если ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихКода" );
		
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СопровождатьНоменклатуруИзображениями")
		И ИспользуютсяИзображения тогда
		
		ИспользуютсяИзображения = ЛОЖЬ;	
	КонецЕсли;
	Элементы.ГруппаИзображения.Видимость = ИспользуютсяИзображения;
	
	Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("для") + " " + КлиентПоставщик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000200", ЭтаФорма, Отказ, );	
	
	Если НЕ Отказ Тогда
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Наименование", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Наименованию"));
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
			Элементы.ПолеПоиска.СписокВыбора.Добавить("Артикул", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Артикулу"));	
		КонецЕсли;
		Элементы.ПолеПоиска.СписокВыбора.Добавить("Комментарий", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По Комментарию"));
		
		ИспользоватьМеханизмАналоговДляНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры");
		ИспользоватьЕдиницыИзмеренияНоменклатуры 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры");
		ИспользоватьСложныйМеханизмЦен 				= ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС ;
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		
		КлиентПоставщик = Параметры.КлиентПоставщик;
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			
			Если ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
				ВидЦен = Параметры.ВидЦен;
			Иначе
				ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
					
					Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
						ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьВидЦен();			
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		Список.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
		
		ИспользуетсяОтборПоСкладу = ЗначениеЗаполнено(Параметры.ОтборПоСкладу) и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");	
		ОтборПоСкладу 			  = Параметры.ОтборПоСкладу;
		ВызовИзРасходаТовара 	  = Параметры.ВызовИзРасходаТовара;          	
		
		Список.Параметры.УстановитьЗначениеПараметра("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Список.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ИспользуетсяОтборПоСкладу);
		Список.Параметры.УстановитьЗначениеПараметра("Склад", ОтборПоСкладу);
		Список.Параметры.УстановитьЗначениеПараметра("СкладПополнения", ?(ИспользуетсяОтборПоСкладу и ВызовИзРасходаТовара, ОтборПоСкладу.СкладПополнения, ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка")));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ИспользоватьСложныйМеханизмЦен", ИспользоватьСложныйМеханизмЦен);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ДатаОстатка", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("НетОтбораПоСкладу", НЕ ИспользуетсяОтборПоСкладу);
		ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("ОтборПоСкладу", ОтборПоСкладу);
		
		Если ИспользуетсяОтборПоСкладу
			И ВызовИзРасходаТовара
			И ЗначениеЗаполнено(ОтборПоСкладу.СкладПополнения) Тогда
			
			Элементы.ОтборПоСкладу.Видимость 	  = ЛОЖЬ;
			Элементы.ОтборПоСкладуСкладПополнения.Видимость = ЛОЖЬ;
			Элементы.отборПоскладуТекст.видимость = ИСТИНА;
			Элементы.отборПоскладуТекст.заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отбор на складах") + ": " + СокрЛП(ОтборПоСкладу) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("и") + " " + СокрЛП(ОтборПоСкладу.СкладПополнения);
			
		Иначе
			Элементы.отборПоскладуТекст.видимость = ЛОЖЬ;
			Элементы.ОтборПоСкладу.Видимость 	  = ИспользуетсяОтборПоСкладу;
			Элементы.ОтборПоСкладуСкладПополнения.Видимость = ИспользуетсяОтборПоСкладу;
			
		КонецЕсли;
		
		Попытка
			Если (ВызовИзРасходаТовара или параметры.ИзПеремещения)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДемонстрироватьПриВыбореНоменклатурыПриРасходованииИПеремещенииТолькоСОстатками") Тогда
				
				Список.Параметры.УстановитьЗначениеПараметра("НеОтбиратьТолькоСОстатком", ЛОЖЬ);
			Иначе
				Список.Параметры.УстановитьЗначениеПараметра("НеОтбиратьТолькоСОстатком", ИСТИНА);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ИспользуетсяОтборПоДате = ЗначениеЗаполнено(параметры.ОтборПоДате);
		ОтборПоДате = Параметры.ОтборПоДате;
		
		Список.Параметры.УстановитьЗначениеПараметра("Дата", ?(ИспользуетсяОтборПоДате, ОтборПоДате, ОбщийМодульСервисСервер.ПользователяТекущаяДата()));	
		
		Элементы.ПроцентСкидки.Видимость = ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры;
		Элементы.ОтборПоДате.Видимость 	 = ИспользуетсяОтборПоДате;		
		
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(, ИСТИНА);
			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + ДопРеквизит.ИмяДопРеквизита + """;");
					
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.Остаток, , ИСТИНА);	
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(Список);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Неопределено;
	
	Если ИспользуютсяИзображения Тогда
		ПодСсылку = "";
		
		ТекущийЭлементСписка = Элементы.Список.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийЭлементСписка) Тогда
			
			ОсновноеИзображениеОбъекта = ОбщийМодульПовтор.ПолучитьОсновноеИзображениеОбъекта(ТекущийЭлементСписка);
			
			Если ЗначениеЗаполнено(ОсновноеИзображениеОбъекта) Тогда				
				
				СтруктураИзображения = ОбщийМодульСервер.ПолучитьСтруктуруИзображения(ОсновноеИзображениеОбъекта);
				ПодСсылку = СтруктураИзображения.ПодСсылку;
				
				Элементы.СсылкаНаИзображение.Видимость = не СтруктураИзображения.ИзображениеВБазеДанных;
				Элементы.ИзображениеВБазеДанных.Видимость = СтруктураИзображения.ИзображениеВБазеДанных;
				
				Если СтруктураИзображения.РазмерПриОтображении = 1 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.АвтоРазмер
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 2 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Пропорционально
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 3 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Растянуть
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 4 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.РеальныйРазмер
				Иначеесли СтруктураИзображения.РазмерПриОтображении = 5 тогда
					Элементы.ИзображениеВБазеДанных.РазмерКартинки = РазмерКартинки.Черепица
				КонецЕсли; 		 
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьЕдиницыИзмеренияНоменклатуры Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено ТОгда
			Номенклатура = ТекущиеДанные.Ссылка;
			УНоменклатурыЕстьЕдиницыИзмерения = ОбщийМодульКлиент.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
			Если УНоменклатурыЕстьЕдиницыИзмерения тогда
				
				ОстаткиВЕдиницахИзмерения.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);		
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ИСТИНА;
			Иначе
				Элементы.ОстаткиВЕдиницахИзмерения.Видимость = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИспользоватьМеханизмАналоговДляНоменклатуры Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Номенклатура = ТекущиеДанные.ссылка;
			АналогиЕсть = ОбщийМодульКлиент.УНоменклатурыЕстьАналоги(Номенклатура);	
			Если АналогиЕсть Тогда
				Элементы.Аналоги.Видимость = ИСТИНА;
				Аналоги.Параметры.УстановитьЗначениеПараметра("Номенклатура", Номенклатура);
			Иначе
				Элементы.Аналоги.Видимость = ЛОЖЬ;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ВвестиШтрихКод(Знач ШтрихКод, Знач ТекстЗаголовка = "") Экспорт
	
	Результат = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Введите Штрих-код");
	КонецЕсли;
	
	Если ВвестиЗначение(ШтрихКод, ТекстЗаголовка) Тогда
		Если НЕ ПустаяСтрока(ШтрихКод) Тогда
			Результат = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихКода(Команда)
	
	ТекКод = "";
	Если ВвестиШтрихКод(ТекКод) Тогда
		Если НЕ ОбработатьПолученныйШКНаСервере(ТекКод) Тогда
			ОбщийМодульКлиент.ВыдатьСигнал(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)	
	ОбщийМодульКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	ВыполнитьПоискНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНаКлиенте()
	
	Если ПустаяСтрока(ПолеПоиска) Тогда
		ПолеПоиска = "Наименование";
	КонецЕсли;
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Наименование",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Артикул",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	Список.Отбор,
	"Комментарий",
	"",
	?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
	, ЛОЖЬ
	);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		ОбщийМодульКлиент.УстановитьЭлементОтбора(
		Список.Отбор,
		ПолеПоиска,
		СтрокаПоиска,
		?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
		, ИСТИНА
		);
		
		Если НетНичего() Тогда
			
			СтрокаПоискаРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 0);  
			
			ОбщийМодульКлиент.УстановитьЭлементОтбора(
			Список.Отбор,
			ПолеПоиска,
			СтрокаПоискаРус,
			?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
			,
			ЗначениеЗаполнено(СтрокаПоиска)
			);
			Элементы.Список.Обновить();
			
			Если НетНичего() Тогда
				
				СтрокаПоискаАнгл = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(СтрокаПоиска, 1);  
				
				ОбщийМодульКлиент.УстановитьЭлементОтбора(
				Список.Отбор,
				ПолеПоиска,
				СтрокаПоискаАнгл,
				?(НайтиПоТочномуСоответствию, ВидСравненияКомпоновкиДанных.равно, ВидСравненияКомпоновкиДанных.Содержит),
				,
				ЗначениеЗаполнено(СтрокаПоиска)
				);
				Элементы.Список.Обновить();
				
				Если НЕ НетНичего() Тогда
					СтрокаПоиска = СтрокаПоискаАнгл;
				КонецЕсли;
				
			Иначе
				СтрокаПоиска = СтрокаПоискаРус;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   НетНичего()	
	Возврат Элементы.Список.ТекущиеДанные = Неопределено;	
КонецФункции //НетНичего
