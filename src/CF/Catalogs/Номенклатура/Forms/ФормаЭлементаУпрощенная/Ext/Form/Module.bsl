// sza141226-0233
// sza141017-0059 : ключи учета
// sza140913-0237
// sza140831-0217
// sza140619-0323
// sza130902-0029 :

&НаКлиенте
Процедура АртикулОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;

	Если НЕ ПустаяСтрока(Объект.Артикул) Тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.Артикул + "%20" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Элемент.имя));
	КонецЕсли;

КонецПроцедуры

Процедура ВидимостьСоставаНабора()

	Элементы.ГруппаСоставИСуммыНабора.Видимость = Объект.ЭтоНабор;

	Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = НЕ Объект.ЭтоНабор
	И ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры;

	Элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = НЕ ИспользоватьСложныйМеханизмЦен
	И Объект.ЭтоНабор = ИСТИНА;

	Элементы.КоличествоНаборовКотороеМожноСобратьНаТекущийМомент.Видимость = ЗначениеЗаполнено(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ВыводНадписиПоФормуле()

	ПроизвольнаяНадписьФормыВидно = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтруктураФормулы = ОбщийМодульПовтор.НайтиФормулуДляНадписиНаФорме(ЭтаФорма.ИмяФормы);
		Если НЕ СтруктураФормулы = Неопределено Тогда

			Элементы.ОбновитьЗначениеПоФормулеНадписиФормы.Видимость = СтруктураФормулы.ВыводитьКнопкуОбновленияНадписи;

			Если СтруктураФормулы.ВыполнитьНаСервереСОбъектом Тогда
				Элементы.ПроизвольнаяНадписьФормы.Заголовок = ВыводНадписиПоФормулеНаСервере(СтруктураФормулы.Формула);
			Иначе
				Попытка
					Выполнить(" Элементы.ПроизвольнаяНадписьФормы.Заголовок = " + СтруктураФормулы.Формула + ";");
				Исключение
				КонецПопытки;
			КонецЕсли;

			ПроизвольнаяНадписьФормыВидно = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Элементы.ПроизвольнаяНадписьФормы.Видимость = ПроизвольнаяНадписьФормыВидно;

КонецПроцедуры

&НаСервере
Функция   ВыводНадписиПоФормулеНаСервере(Знач Формула)

	Результат = "";
	Попытка
		Выполнить(" Результат = " + Формула + ";");
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции //ВыводНадписиПоФормулеНаСервере

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницКлючейУчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	СменитьСтраницуКлючейУчетаНаСервере(ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаСервере
Процедура ДобавитьВМассивСпецификаций(Знач состав, ТаблОписанияНабора, Знач Кво)

	Для Каждого СтрокаСоставаНабора Из состав цикл
		Если СтрокаСоставаНабора.номенклатура.ЭтоНабор  = ИСТИНА Тогда
			ДобавитьВМассивСпецификаций(СтрокаСоставаНабора.номенклатура.состав, ТаблОписанияНабора, СтрокаСоставаНабора.количество * Кво);
		Иначе
			СтрокаСпециф = ТаблОписанияНабора.добавить();
			СтрокаСпециф.Номенклатура 	= СтрокаСоставаНабора.номенклатура;
			СтрокаСпециф.количество 	= СтрокаСоставаНабора.количество * кво;

			Если СтрокаСпециф.количество = 0 Тогда
				СтрокаСпециф.количество = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДобавитьВМассивСпецификаций

&НаКлиенте
Процедура ДобавитьИзображение(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;

	ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформация1ВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмерения(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Владелец", Объект.Ссылка);
		ОткрытьФорму("Справочник.ЕдиницыИзмерения.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМомент(Команда)

	ДокументДляПечати = Новый ТабличныйДокумент;
	ДокументДляПечати.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КН";
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(ДокументДляПечати);
	ДокументДляПечати.ОтображатьСетку 	= ЛОЖЬ;
	ДокументДляПечати.Защита 			= ЛОЖЬ;
	ДокументДляПечати.ТолькоПросмотр 	= ЛОЖЬ;
	ДокументДляПечати.ОтображатьЗаголовки = ЛОЖЬ;
	ДокументДляПечати.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("компоновка Наборов") + " " + Объект.Наименование);

КонецПроцедуры

&НаСервере
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(Знач ДокументДляПечати)

	Макет 	= Справочники.Номенклатура.ПолучитьМакет("МакетНабора");
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
	Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ТаблОписанияНабора = Новый ТаблицаЗначений;
	ТаблОписанияНабора.Колонки.Добавить("Номенклатура");
	ТаблОписанияНабора.Колонки.Добавить("Количество");
	ДобавитьВМассивСпецификаций(Объект.Состав, ТаблОписанияНабора, 1);
	ТаблОписанияНабора.Свернуть("Номенклатура", "Количество");
	ТаблОписанияНабора.Колонки.Добавить("Цена");
	ТаблОписанияНабора.Колонки.Добавить("Остаток");
	МинимальныйДелегат  = -1;

	Для Каждого СтрокаСоставаНабора Из ТаблОписанияНабора Цикл
		Если НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(СтрокаСоставаНабора.номенклатура) Тогда
			СтрокаСоставаНабора.Цена = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаСоставаНабора.номенклатура, СтрокаСоставаНабора.количество, Дата);
			СтрокаСоставаНабора.остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(СтрокаСоставаНабора.номенклатура, , Дата);
			МожноПроизвести = цел(СтрокаСоставаНабора.остаток / СтрокаСоставаНабора.количество);

			Если МинимальныйДелегат  = -1
				ИЛИ МожноПроизвести < МинимальныйДелегат  Тогда

				МинимальныйДелегат = МожноПроизвести;
			КонецЕсли;
		Иначе
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , Дата, ИСТИНА, , , , , Объект.Ссылка);
			СтрокаСоставаНабора.остаток = 0;
		КонецЕсли;

	КонецЦикла;

	ТаблОписанияНабора.Колонки.Добавить("Использовано");
	ТаблОписанияНабора.Колонки.Добавить("НаСумму");
	Для Каждого СтрокаСоставаНабора Из ТаблОписанияНабора Цикл
		СтрокаСоставаНабора.Использовано = МинимальныйДелегат * СтрокаСоставаНабора.Количество;
		СтрокаСоставаНабора.НаСумму 		= СтрокаСоставаНабора.Использовано * СтрокаСоставаНабора.цена;

	КонецЦикла;

	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ДокументДляПечати.ИмяПараметровПечати  = "КоличествоНаборов" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	ДокументДляПечати.Очистить();
	ОбластьЗаголовок.Параметры.дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОбластьЗаголовок.Параметры.Номенклатура = ?(ЗначениеЗаполнено(Объект.НаименованиеДляПечати), Объект.НаименованиеДляПечати, Объект.Наименование);
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЗаголовок);
	ДокументДляПечати.Вывести(ОбластьЗаголовок);

	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьШапкаТаблицы);
	ДокументДляПечати.Вывести(ОбластьШапкаТаблицы);
	ДокументДляПечати.НачатьАвтогруппировкуСтрок();
	Для Каждого СтрокаСоставаНабора Из ТаблОписанияНабора Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрокаСоставаНабора);
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаСоставаНабора);
		ДокументДляПечати.Вывести(ОбластьДетальныхЗаписей);

	КонецЦикла;

	ДокументДляПечати.ЗакончитьАвтогруппировкуСтрок();
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПодвалТаблицы);
	ДокументДляПечати.Вывести(ОбластьПодвалТаблицы);
	ОбластьПодвал.параметры.ИтогоНаборов = МинимальныйДелегат;
	НаСумму = ТаблОписанияНабора.Итог("НаСумму");
	ОбластьПодвал.параметры.НаСумму = НаСумму;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Объект.Ссылка, ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию"), дата, ИСТИНА, МинимальныйДелегат, , , , Объект.Ссылка);
	Иначе
		цена = Объект.Цена;
	КонецЕсли;

	ОбластьПодвал.параметры.цена 			= цена;
	ОбластьПодвал.параметры.НаборНаСумму 	= цена * МинимальныйДелегат;
	ОбластьПодвал.параметры.Выручка 		= (цена * МинимальныйДелегат) - НаСумму;
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПодвал);
	ДокументДляПечати.Вывести(ОбластьПодвал);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)

	Элементы.НаименованиеДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованиеДляПечатиНаДругихЯзыках.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)

	Объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = ИСТИНА;
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(НаименованиеДляПечати, НаименованияДляПечатиНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Объект.Наименование  = ПредставлениеНаименования;
	НаименованиеИзменяли = ИСТИНА;
	Если СоздаватьГруппыНоменклатурыПоПервомуСловуИОтноситьКНим Тогда
		ОбъектРодитель = НаименованиеПриИзмененииНаСервере(ПредставлениеНаименования, Объект.Родитель);

		Если НЕ ОбъектРодитель = Неопределено Тогда
			Объект.Родитель = ОбъектРодитель;
		КонецЕсли;
	КонецЕсли;

	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(ПредставлениеНаименования, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция   НаименованиеПриИзмененииНаСервере(Знач ОбъектНаименование, Знач ОбъектРодитель)

	ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.ПолучитьНаименованиеГруппыПоПервомуСлову(ОбъектНаименование, ИСТИНА);

	Если НЕ ГруппаПоПервомуСлову = Неопределено
		И ГруппаПоПервомуСлову.ЭтоГруппа
		И НЕ ГруппаПоПервомуСлову = ОбъектРодитель Тогда

		Возврат ГруппаПоПервомуСлову;
	Иначе

		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура НаименованияНаДругихЯзыках1НаЯзыкеПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыках1ПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)

	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;

КонецПроцедуры

&НаКлиенте
Процедура НеОтслеживатьОстатокПриИзменении(Элемент)

	ОбновитьВидимостьУслуги();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)

	НоменклатурнаяГруппаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура НоменклатурнаяГруппаПриИзмененииНаСервере(Знач ПриОткрытии = ЛОЖЬ)

	Если НЕ ПриОткрытии Тогда
		ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(Объект);
	КонецЕсли;

	Элементы.Родитель.ТолькоПросмотр 	 = ЛОЖЬ;
	Элементы.СерийныйУчет.ТолькоПросмотр = ЛОЖЬ;
	НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
			Родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);

			Если НЕ Объект.Родитель = Родитель
				И Родитель.ЭтоГруппа Тогда

				Объект.Родитель = Родитель;
			КонецЕсли;

			Элементы.Родитель.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;

		Если НоменклатурнаяГруппа.НоменклатураЭтойГруппыССерийнымУчетом Тогда
			Если НЕ Объект.СерийныйУчет Тогда
				Объект.СерийныйУчет = ИСТИНА;
			КонецЕсли;

			Элементы.СерийныйУчет.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
			И Объект.ОсновнаяЕдиницаИзмерения = ""
			И НЕ ПустаяСтрока(НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения) Тогда

			Объект.ОсновнаяЕдиницаИзмерения = НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
		КонецЕсли;

		Если ЗначениеЗаполнено(НоменклатурнаяГруппа.НаправлениеДеятельности) Тогда
			Объект.НаправлениеДеятельности = НоменклатурнаяГруппа.НаправлениеДеятельности;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ПриОткрытии Тогда
		ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(ИСТИНА);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАртикулПоФормуле(Команда)

	ОбновитьАртикулПоФормулеНаСервере(ИСТИНА);

КонецПроцедуры

&НаСервере
Процедура ОбновитьАртикулПоФормулеНаСервере(Знач Принудительно = ЛОЖЬ)

	Если Принудительно
		ИЛИ ПустаяСтрока(Объект.Артикул) Тогда

		Объект.Артикул = ОбщийМодульТоварСервер.УстановитьАртикулНоменклатурыПоФормуле(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьВидимостьУслуги()

	Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = НЕ УслугаНЕТовар И ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры и не Объект.НеОтслеживатьОстаток ;
	Элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась И НЕ УслугаНЕТовар и Объект.РекомендуемыйМинимальныйОстатокТовара = 0;
	Элементы.Артикул.Видимость 					= НЕ УслугаНЕТовар;
	Элементы.Производитель.Видимость 			= НЕ УслугаНЕТовар;
	Элементы.ГруппаСерийногоУчета.Доступность	= НоменклатураНеИспользовалась И НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	Элементы.ГруппаГарантии.Видимость 			= НЕ УслугаНЕТовар И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе");
	Элементы.ПериодОказанияУслугиЗаВремя.Видимость = УслугаНЕТовар И ВестиУчетОказанияУслугЗаВремя;

	Если (УслугаНЕТовар ИЛИ Объект.НеОтслеживатьОстаток)
		И Объект.СерийныйУчет Тогда

		Объект.СерийныйУчет = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДляВаучеров()

	Элементы.ГруппаДляВаучера.Видимость = Объект.ЭтоВаучер;
	Элементы.КоэффициентНакопленияНаВаучер.Видимость = НЕ Объект.ЭтоВаучер;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Знач НоваяНоменклатурнаяГруппа = ЛОЖЬ)

	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		Счетчик = 1;
		Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
			НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Объект.НоменклатурнаяГруппа);

			Если НЕ НаименованияДополнительныхРеквизитов = Неопределено Тогда
				Счетчик = 1;
				Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
					Если счетчик <= 10 Тогда
						ДополнительныйРеквизит   = ДопРеквизит.ДополнительныйРеквизит;
						НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДополнительныйРеквизит);
						Выполнить(" ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");

						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ИСТИНА;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
						Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");

						Если ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
							ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
							ИЛИ ДополнительныйРеквизит.ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда

							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".КнопкаВыбора  = ИСТИНА;");
							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".КнопкаОчистки = ИСТИНА;");
						КонецЕсли;

						ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
						Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ");");

						Если ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Дата")
							ИЛИ ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Булево")
							ИЛИ ТипЗначенияРеквизитНоменклатурнойГруппы = Тип("Число") Тогда

							Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".РастягиватьПоГоризонтали = ЛОЖЬ;");
						КонецЕсли;

						Если НоваяНоменклатурнаяГруппа
							И НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(ДопРеквизит.ЗначениеПоУмолчанию)  Тогда

							Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = ДопРеквизит.ЗначениеПоУмолчанию;");
						КонецЕсли;
					КонецЕсли;

					Счетчик = Счетчик + 1;

				КонецЦикла;
			КонецЕсли;

			Пока счетчик <= 10 Цикл
				Выполнить(" Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = ЛОЖЬ;");
				Если НоваяНоменклатурнаяГруппа Тогда
					Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = Неопределено;");
				КонецЕсли;

				счетчик = счетчик + 1;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначениеПоФормулеНадписиФормы(Команда)

	ВыводНадписиПоФормуле();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазмеры()

	Если ЗначениеЗаполнено(Объект.Высота) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем") + " " + (Объект.Ширина * Объект.Длина * Объект.Высота);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ширина) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Площадь") + " " + (Объект.Ширина * Объект.Длина);
	Иначе
		Размеры = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры()

	ЕстьКлючиУчета = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСписки") Тогда
		КлючиУчета.Очистить();
		СвязанныеКлючиУчета.Параметры.УстановитьЗначениеПараметра("Номенклатура", Объект.Ссылка);
		ТаблицаКлючей = Новый ТаблицаЗначений;
		ТаблицаКлючей.Колонки.Добавить("НомерКлюча");
		ТаблицаКлючей.Колонки.Добавить("Наименование");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ДополнительныеРеквизиты.Ссылка
		|ИЗ Справочник.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ ДополнительныеРеквизиты.ЭтоКлючУчетаНоменклатуры = ИСТИНА";

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			НомерКлюча = 1;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаТаблицыКлючей = ТаблицаКлючей.Добавить();
				СтрокаТаблицыКлючей.НомерКлюча = НомерКлюча;
				НомерКлюча = НомерКлюча + 1;
				СтрокаТаблицыКлючей.Наименование = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаДетальныеЗаписи.Ссылка);
				ТекущийКлючУчета = ВыборкаДетальныеЗаписи.ссылка;
				КлючиУчета.Добавить(ВыборкаДетальныеЗаписи.ссылка);

			КонецЦикла;

			СтраницыКлючей = Элементы.ГруппаСтраницКлючейУчета;
			Для Каждого СтрокаТаблицыКлючей Из ТаблицаКлючей Цикл
				СтраницаКлюча = Элементы.Найти("СтраницаКлюча" + СтрокаТаблицыКлючей.НомерКлюча);
				Если СтраницаКлюча = Неопределено Тогда
					СтраницаКлюча 				= Элементы.Добавить("СтраницаКлюча" + СтрокаТаблицыКлючей.НомерКлюча, тип("ГруппаФормы"), СтраницыКлючей);
					СтраницаКлюча.Вид 			= ВидГруппыФормы.Страница;
					СтраницаКлюча.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					СтраницаКлюча.Заголовок 	= СтрокаТаблицыКлючей.Наименование;
					НоваяКоманда = Команды.Найти("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);

					Если НоваяКоманда = Неопределено Тогда
						НоваяКоманда = Команды.Добавить("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
					КонецЕсли;

					НоваяКоманда.Действие  	= "ОткрытьКнопкуКоманды";
					НоваяКоманда = Элементы.Найти("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча);
					Если НоваяКоманда = Неопределено Тогда
						НоваяКоманда = Элементы.Добавить("КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча, тип("КнопкаФормы"), СтраницаКлюча);
					КонецЕсли;

					НоваяКоманда.Заголовок 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Добавить") + " " + СтрокаТаблицыКлючей.Наименование;
					НоваяКоманда.ИмяКоманды = "КнопкаНовогоЗначенияКлючаУчета" + СтрокаТаблицыКлючей.НомерКлюча;
					НоваяКоманда.КнопкаПоУмолчанию = ЛОЖЬ;

					ТаблицаКлюча = Элементы.Найти("ТаблицаКлюча" + СтрокаТаблицыКлючей.НомерКлюча);

					Если ТаблицаКлюча = Неопределено Тогда
						ТаблицаКлюча = Элементы.Добавить("ТаблицаКлюча" + СтрокаТаблицыКлючей.НомерКлюча, тип("ТаблицаФормы"), СтраницаКлюча);
						ТаблицаКлюча.ПутьКДанным = "СвязанныеКлючиУчета";
					КонецЕсли;

					ТаблицаКлюча.КоманднаяПанель.Видимость 	= ЛОЖЬ;
					ТаблицаКлюча.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
					ТаблицаКлюча.ЧередованиеЦветовСтрок 	= ИСТИНА;
					НоваяКолонка = Элементы.Найти("Значение" + СтрокаТаблицыКлючей.НомерКлюча);

					Если НоваяКолонка = Неопределено Тогда
						НоваяКолонка = Элементы.Добавить("Значение" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ТаблицаКлюча);
					КонецЕсли;

					НоваяКолонка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Значения") + " " + СтрокаТаблицыКлючей.Наименование;
					НоваяКолонка.ПутьКДанным = "СвязанныеКлючиУчета.ЗначениеКлючаУчета";
					НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
					НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					НоваяКолонка = Элементы.Найти("Комментарий" + СтрокаТаблицыКлючей.НомерКлюча);

					Если НоваяКолонка = Неопределено Тогда
						НоваяКолонка = Элементы.Добавить("Комментарий" + СтрокаТаблицыКлючей.НомерКлюча, Тип("ПолеФормы"), ТаблицаКлюча);
					КонецЕсли;

					НоваяКолонка.Заголовок 			 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий");
					НоваяКолонка.ПутьКДанным 		 = "СвязанныеКлючиУчета.Комментарий";
					НоваяКолонка.Вид 				 = ВидПоляФормы.ПолеВвода;
					НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					НоваяКолонка.Высота = 1;
				КонецЕсли;

			КонецЦикла;

			ЕстьКлючиУчета = ИСТИНА;
			СменитьСтраницуКлючейУчетаНаСервере("1");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры

&НаКлиенте
Процедура ОбновитьШтрихКодПоФормуле(Команда)
	
	ОбновитьШтрихКодПоФормулеНаСервере(ИСТИНА);
	Элементы.ОбновитьШтрихКодПоФормуле.Видимость = ИспользоватьШтрихКоды И ПустаяСтрока(Объект.ОсновнойШтрихКод);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодПоФормулеНаСервере(Знач Принудительно)

	Если Принудительно
		ИЛИ ПустаяСтрока(Объект.ОсновнойШтрихКод) Тогда

		Объект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)

	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");
	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		РеквизитНоменклатурнойГруппы = Неопределено;
		Выполнить(" РеквизитНоменклатурнойГруппы = Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ";");

		Если РеквизитНоменклатурнойГруппы = Неопределено Тогда
			ТипРеквизита = Неопределено;
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборДопРеквизитаНГЗавершение1", ЭтаФорма, Новый Структура("НомерДопРеквизита, ТипДополнительногоРеквизита", НомерДопРеквизита, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ИСТИНА));

			Возврат;
		КонецЕсли;

		ОбработатьВыборДопРеквизитаНГФрагмент1(НомерДопРеквизита);
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		РеквизитНоменклатурнойГруппы = Неопределено;
		Выполнить(" РеквизитНоменклатурнойГруппы = Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ";");

		Если РеквизитНоменклатурнойГруппы = Неопределено Тогда
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборДопРеквизитаНГЗавершение", ЭтаФорма, Новый Структура("НомерДопРеквизита, ТипДополнительногоРеквизита", НомерДопРеквизита, ТипДополнительногоРеквизита)), ОбщийМодульКлиент.ПолучитьСписокИзМетаданных(ЛОЖЬ));

			Возврат;
		КонецЕсли;

		ОбработатьВыборДопРеквизитаНГФрагмент(НомерДопРеквизита);
	ИначеЕсли ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника")
		И Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = Неопределено Тогда

		СтандартнаяОбработка = ЛОЖЬ;
		Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
		ПараметрыФормы = Новый Структура;
		Выполнить(" ПараметрыФормы.Вставить(""Владелец"", ДопРеквизитНГ" + НомерДопРеквизита + ");");
		ФормаВыбора = ПолучитьФорму("Справочник.НаборЗначенийДополнительныхРеквизитов.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		ФормаВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите значение") + ":";
		Объект["РеквизитНоменклатурнойГруппы" + НомерДопРеквизита] = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	НомерДопРеквизита = ДополнительныеПараметры.НомерДопРеквизита;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Документ."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");
	КонецЕсли;

	ОбработатьВыборДопРеквизитаНГФрагмент(НомерДопРеквизита);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГЗавершение1(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	НомерДопРеквизита = ДополнительныеПараметры.НомерДопРеквизита;
	ТипДополнительногоРеквизита = ДополнительныеПараметры.ТипДополнительногоРеквизита;
	ТипРеквизита = ВыбранныйЭлемент;
	Если НЕ ТипРеквизита = Неопределено Тогда
		Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = ПредопределенноеЗначение(""Справочник."" + ТипРеквизита.Значение + "".ПустаяСсылка"");");
	КонецЕсли;

	ОбработатьВыборДопРеквизитаНГФрагмент1(НомерДопРеквизита);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГФрагмент(Знач НомерДопРеквизита)

	Выполнить(" ВвестиЗначение(Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДопРеквизитаНГФрагмент1(Знач НомерДопРеквизита)

	Выполнить(" ВвестиЗначение(Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(""Укажите значение"") + "":"");");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчисткуДопРеквизитаНГ(Знач НомерДопРеквизита = "1", СтандартнаяОбработка)

	ТипДополнительногоРеквизита = Неопределено;
	Выполнить(" ТипДополнительногоРеквизита = ОбщийМодульКлиент.получитьЗначениеРеквизита(ДопРеквизитНГ" + НомерДопРеквизита + ", ""ТипДополнительногоРеквизита"");");

	Если ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника")
		ИЛИ ТипДополнительногоРеквизита = ПредопределенноеЗначение("Перечисление.ТипыДополнительныхРеквизитов.СсылкаНаДокумент") Тогда

		СтандартнаяОбработка = ЛОЖЬ;
		Выполнить(" Объект.РеквизитНоменклатурнойГруппы" + НомерДопРеквизита + " = Неопределено;");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиенте(Знач ТекКод)

	Если УстанавливатьШтрихКодИзКарточкиНоменклатуры Тогда
		Объект.ОсновнойШтрихКод = ТекКод;
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьПолученныйШтрихкодНаКлиентеЗавершение", ЭтаФорма, Новый Структура("ТекКод", ТекКод)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код основным для этой номенклатуры?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкодНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ТекКод = ДополнительныеПараметры.ТекКод;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОсновнойШтрихКод = ТекКод;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда

		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекКод = Параметр[0];
			Иначе
				ТекКод = Параметр[1][1];
			КонецЕсли;

			ЭтаФорма.ТекущийЭлемент = Элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШтрихкодНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойШтрихКодОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;

	Если НЕ ПустаяСтрока(Объект.ОсновнойШтрихКод) Тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.ОсновнойШтрихКод);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКнопкуКоманды(Команда)

	НомерКлючаУчета = Число(СтрЗаменить(Команда.Имя, "КнопкаНовогоЗначенияКлючаУчета", ""));
	ПараметрыФормы  = Новый Структура("КлючУчета, Номенклатура", КлючиУчета[НомерКлючаУчета - 1].Значение, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СвязанныеКлючиУчетаНоменклатуры.ФормаЗаписи", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	Если НЕ ТекущаяСтраница = Неопределено Тогда
		СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
		СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если НЕ ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда

		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Родитель)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьЗаписьНоменклатурыБезУказанияГруппы") Тогда

		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана группа, а она обязательно должна быть указана!"), Объект.Ссылка, "Родитель", , Отказ, , СтатусСообщения.Важное);
	КонецЕсли;

	глПроверятьСообщения = ИСТИНА;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ Отказ Тогда
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава(Команда)

	ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере()

	Объект.Цена = 0;

	Для Каждого СтрокаСоставаНабора Из Объект.Состав цикл
		Если ЗначениеЗаполнено(СтрокаСоставаНабора.номенклатура) Тогда
			Объект.Цена = Объект.Цена + СтрокаСоставаНабора.количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), ИСТИНА, СтрокаСоставаНабора.количество, , , , Объект.Ссылка);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	СерийныйУчетПриИзмененииК();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Элементы.КлючиУчетаБудутДоступныПослеЗаписиНоменклатуры.Видимость = ЛОЖЬ;
	ВидимостьСоставаНабора();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры();
	КонецЕсли;

	Если ПоддержкаДругихЯзыков Тогда
		Если НаименованиеИзменяли Тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, ПредставлениеНаименования);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;

		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);
			КонецЦикла;

			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтрагентов(Команда)

	ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ПредставлениеТоваровКонтрагентами.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)

	Элементы.НаименованияНаДругихЯзыках.Видимость = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование Тогда
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ

	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);

	Если ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно) Тогда
			СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
			ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
			Если НЕ ТекущаяСтраница = Неопределено Тогда
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;
	КонецЕсли;

	ОбновитьРазмеры();
	СерийныйУчетПриИзмененииК();
	ОбновитьДляВаучеров();
	Если ЕстьКлючиУчета Тогда
		СменитьСтраницуКлючейУчетаНаСервере("1");
	КонецЕсли;

	ВыводНадписиПоФормуле();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000300", ЭтаФорма, Отказ, Объект);

	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);
		КонецЕсли;

		ОбъектСсылка = Объект.Ссылка;
		ЗначениеЗаполненоОбъектСсылка 	= ЗначениеЗаполнено(ОбъектСсылка);
		ВестиУчетПоСкладам 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетОказанияУслугЗаВремя   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
		СоздаватьГруппыНоменклатурыПоПервомуСловуИОтноситьКНим = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуИОтноситьКНим");
		ИспользоватьСложныйМеханизмЦен 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		ИспользоватьШтрихКоды 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
		ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
		
		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении");
		
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп");
		ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ИСТИНА; // для алгоритма
		Элементы.ОбновитьШтрихКодПоФормуле.Видимость = ИспользоватьШтрихКоды И ПустаяСтрока(Объект.ОсновнойШтрихКод);

		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКлючиУчетаНоменклатурыИИхСвязанныеСписки") Тогда
				Элементы.КлючиУчетаБудутДоступныПослеЗаписиНоменклатуры.Видимость = ИСТИНА;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.Родитель)
				И Параметры.Родитель.ЭтоГруппа
				И ЗначениеЗаполнено(Параметры.Родитель) Тогда

				Объект.Родитель = Параметры.Родитель;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаИзмерения) Тогда
				Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию");
			КонецЕсли;

			Объект.СерийныйУчет = Параметры.СерийныйУчет;

			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
				Объект.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Объект.Производитель) Тогда
				Объект.Производитель = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроизводительПоУмолчанию");
			КонецЕсли;

			Если Объект.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерПланкиКоличестваТовараДляЛьготнойЦены");
			КонецЕсли;

			ОбъектРодитель = Объект.Родитель;

			Если ЗначениеЗаполнено(ОбъектРодитель) Тогда
				Если ОбъектРодитель.НеОтслеживатьОстаток Тогда
					Элементы.ТоварИлиУслуга.Видимость = ЛОЖЬ;
					Объект.НеОтслеживатьОстаток = ИСТИНА;
					УслугаНЕТовар = ИСТИНА;
					Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
					Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = ЛОЖЬ;
					ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ЛОЖЬ;
				Иначе
					Элементы.ТоварИлиУслуга.Видимость = ИСТИНА;
				КонецЕсли;

				Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
					И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда

					Если ЗначениеЗаполнено(ОбъектРодитель.НоменклатурнаяГруппа) Тогда
						Объект.НоменклатурнаяГруппа = ОбъектРодитель.НоменклатурнаяГруппа;
					Иначе

						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
						|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
						|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
						|	И НоменклатурныеГруппы.Наименование = &Наименование";
						Запрос.УстановитьПараметр("Наименование", ОбъектРодитель.Наименование);

						РезультатЗапроса = Запрос.Выполнить();

						Если НЕ РезультатЗапроса.Пустой() Тогда
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;

							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(ИСТИНА);
		Иначе // существующая
			НоменклатураНеИспользовалась = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
			УслугаНЕТовар = Объект.НеОтслеживатьОстаток;

			Если Объект.Предопределенный
				ИЛИ Объект.НеОтслеживатьОстаток Тогда // Товар на сумму

				Элементы.Родитель.Видимость 		= ЛОЖЬ;
				Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = ЛОЖЬ;
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ЛОЖЬ;
			ИначеЕсли Объект.ЭтоНабор = ИСТИНА
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьНаборыТоваровПС") Тогда

				Если НоменклатураНеИспользовалась Тогда
					Элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора");
				Иначе
					Элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора нельзя изменить после указания в документах. Создавайте новые наборы для иного состава.");
				КонецЕсли;

				Элементы.ЭтоНабор.ТолькоПросмотр 	= НЕ НоменклатураНеИспользовалась;
				Элементы.Состав.ТолькоПросмотр 		= НЕ НоменклатураНеИспользовалась;
				Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = ЛОЖЬ;
			Иначе
				Элементы.ТоварИлиУслуга.Видимость 	= ЛОЖЬ;
				Элементы.ОстатокНеОтслеживается.Видимость	= НЕ НоменклатураНеИспользовалась;
				Элементы.НеОтслеживатьОстаток.Видимость		= НоменклатураНеИспользовалась;
				Элементы.СерийныйУчет.Доступность			= НоменклатураНеИспользовалась;
				Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
			КонецЕсли;

			Если НЕ НоменклатураНеИспользовалась
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("БлокироватьКарточкуНоменклатурыПослеУказанияЕеВДокументах") Тогда

				Элементы.ПредставлениеНаименования.ТолькоПросмотр 	= ИСТИНА;
				Элементы.ГруппаСтраниц.ТолькоПросмотр 		= ИСТИНА;
			КонецЕсли;

			Если (Объект.СерийныйУчет
				И НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый серийный товар")) = 0)
				ИЛИ НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия товара с ценами")) = 0
				ИЛИ НЕ Найти(Объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый товар")) = 0 Тогда

				Объект.Наименование 	= "";
				ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;
			КонецЕсли;

			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы();
		КонецЕсли;

		Если ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры Тогда
			ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
			ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
		КонецЕсли;

		НоменклатурнаяГруппаПриИзмененииНаСервере(ИСТИНА);
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		УстанавливатьШтрихКодИзКарточкиНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УстанавливатьШтрихКодИзКарточкиНоменклатуры");
		Элементы.Цена.Видимость = не ИспользоватьСложныйМеханизмЦен;

		Если Объект.SKU = 0 Тогда
			Объект.SKU = ПодключаемоеОборудованиеДСервер.ПолучитьМаксимальныйКодSKU();
		КонецЕсли;

		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		Элементы.НаименованиеОсновнойВалюты.Видимость = не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
		Элементы.КоличествоПоУмолчанию.Видимость = не Объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
		ОбщийМодульПовтор.ЗаполнитьСписокВыбораЕдиницИзмерения(Элементы.ОсновнаяЕдиницаИзмерения.СписокВыбора);
		ВидимостьСоставаНабора();

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			Элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = ЛОЖЬ;
			Элементы.ПроцентСкидки.Доступность 	= ЛОЖЬ;
			Элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = ИСТИНА;
		КонецЕсли;

		Элементы.ОбновитьАртикулПоФормуле.Видимость = НЕ Объект.НеОтслеживатьОстаток И ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияАртикула"));
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка);
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		ОбновитьВидимостьУслуги();
		РодительПриИзмененииНаСервере();
		Элементы.ГруппаГарантии.Видимость = НЕ УслугаНЕТовар И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьКнопкуПечатиГарантийногоТалонаВРасходномДокументе");
		Элементы.ПериодОказанияУслугиЗаВремя.Видимость = УслугаНЕТовар И ВестиУчетОказанияУслугЗаВремя;
		Элементы.НоменклатурнаяГруппа.ОтметкаНезаполненного = ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
		И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры");

		Если ПоддержкаДругихЯзыков
			И ЗначениеЗаполненоОбъектСсылка Тогда

			ПредставлениеНаименования = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
					ИначеЕсли ВыборкаДетальныеЗаписи.Поле = "НаименованиеДляПечати" Тогда
						СтрокаЯзыка = НаименованияДляПечатиНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		Иначе
			ПредставлениеНаименования = Объект.Наименование;
			НаименованиеДляПечати = Объект.НаименованиеДляПечати;
		КонецЕсли;

		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
			Элементы.НаименованияДляПечатиНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияДляПечатиНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
		КонецЕсли;

		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланкаКоличестваДляЛьготнойЦены, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, ИСТИНА);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СоставКоличество);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.НаОдноМесто, ИСТИНА);

		Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
			ОбновитьСвязанныеКлючиУчетаДляФормыНоменклатуры();
		КонецЕсли;

		ГруппаВаучера = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтслеживатьВаучерыВКачествеНоменклатуры");
		Элементы.ГруппаВаучера.Видимость = ГруппаВаучера;
		Элементы.КоэффициентНакопленияНаВаучер.Видимость = ГруппаВаучера И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыНакопительнымиКартами");
		Элементы.РегистрСведенийСебестоимостьТоваровБезКоличественногоУчетаИУслугОткрытьСписок.Видимость = ЗначениеЗаполненоОбъектСсылка И Объект.НеОтслеживатьОстаток;

		Если ПараметрыСеанса.ВерсияПриложения < 803050000
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда

			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.ТоварИлиУслуга.ВидФлажка = ВидФлажка.Флажок;
				|Элементы.НеОтслеживатьОстаток.ВидФлажка = ВидФлажка.Флажок; ");
			КонецЕсли;

			Элементы.ТоварИлиУслуга.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тип новой номенклатуры: Услуга");
			Элементы.ТоварИлиУслуга.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			Элементы.НеОтслеживатьОстаток.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не отслеживать количество для позиции (услуги)");
			Элементы.НеОтслеживатьОстаток.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;

	ОбщийМодульСервисСервер.ОбработатьНовуюФорму(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы) Экспорт // Для реакции на события для запрограммированных элементов
	ОбщийМодульКлиент.РеакцияНаПрочиеСобытияФормы(КомандаСобытияФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()

	отказ = ЛОЖЬ;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПодготовкаКПроведению(Отказ);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

	Возврат Отказ;

КонецФункции

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	// НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы10НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("10", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы10Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("10", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("1", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы1Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("1", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("2", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы2Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("2", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("3", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы3Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("3", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("4", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы4Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("4", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("5", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы5Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("5", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы6НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("6", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы6Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("6", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы7НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("7", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы7Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("7", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы8НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("8", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы8Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("8", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы9НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьВыборДопРеквизитаНГ("9", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитНоменклатурнойГруппы9Очистка(Элемент, СтандартнаяОбработка)
	ОбработатьОчисткуДопРеквизитаНГ("9", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	ОбновитьВидимостьУслуги();
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()

	Элементы.ПланкаКоличестваДляЛьготнойЦены.Доступность 		= ИСТИНА;
	Элементы.РекомендуемыйМинимальныйОстатокТовара.Доступность 	= ИСТИНА;
	Элементы.ОстатокНеОтслеживается.Видимость	= Объект.НеОтслеживатьОстаток И НЕ НоменклатураНеИспользовалась;
	Элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась;
	Элементы.СерийныйУчет.Видимость 			= УчетПоСериям И Объект.СерийныйУчет И НЕ НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Доступность 	= НоменклатураНеИспользовалась;
	Родитель = Объект.Родитель;

	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп ТОгда

			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
				И ЗначениеЗаполнено(Родитель.НоменклатурнаяГруппа) Тогда

				Объект.НоменклатурнаяГруппа = Родитель.НоменклатурнаяГруппа;
				НоменклатурнаяГруппаПриИзмененииНаСервере();
			Иначе

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
				|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
				|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
				|	И НоменклатурныеГруппы.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;

					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ родитель.КоличествоПоУмолчанию = 0 Тогда
			Элементы.КоличествоПоУмолчанию.Доступность = ЛОЖЬ;
			Если НЕ Объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию Тогда
				Объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

		Если УчетПоСериям
			И Родитель.СерийныйУчет Тогда

			Если НоменклатураНеИспользовалась
				И НЕ Объект.СерийныйУчет Тогда

				Объект.СерийныйУчет = ИСТИНА;
			КонецЕсли;

			Если Объект.СерийныйУчет Тогда
				Элементы.СерийныйУчет.Видимость 		  = ИСТИНА;
				Элементы.ГруппаСерийногоУчета.Доступность = ЛОЖЬ;
			КонецЕсли;

			Если Родитель.ЗапретитьУказаниеБезСерии Тогда

				Если НоменклатураНеИспользовалась
					И НЕ Объект.ЗапретитьУказаниеБезСерии Тогда

					Объект.ЗапретитьУказаниеБезСерии = ИСТИНА;
				КонецЕсли;

				Если Объект.ЗапретитьУказаниеБезСерии Тогда
					Элементы.ЗапретитьУказаниеБезСерии.ТолькоПросмотр = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Родитель.НеОтслеживатьОстаток Тогда

			Если НоменклатураНеИспользовалась
				И НЕ Объект.НеОтслеживатьОстаток Тогда

				Объект.НеОтслеживатьОстаток = ИСТИНА;
			КонецЕсли;

			Если Объект.НеОтслеживатьОстаток Тогда
				Элементы.ОстатокНеОтслеживается.Видимость = ИСТИНА;
				Элементы.НеОтслеживатьОстаток.Видимость   = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
			Элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = ИСТИНА;
			Если НЕ Объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены Тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Родитель.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
			Элементы.РекомендуемыйМинимальныйОстатокТовара.ТолькоПросмотр = ИСТИНА;
			Если НЕ Объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара Тогда
				Объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СвязанныеИзображенияЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;

	СвязанныеИзображенияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображенияФрагмент()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзменении(Элемент)
	СерийныйУчетПриИзмененииК();
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзмененииК()

	Элементы.ЗапретитьУказаниеБезСерии.Видимость = НоменклатураНеИспользовалась И УчетПоСериям И Объект.СерийныйУчет;
	Элементы.НеОтслеживатьОстаток.Видимость 	 = НоменклатураНеИспользовалась И НЕ Объект.СерийныйУчет;
	Элементы.КоличествоПоУмолчанию.Видимость     = НЕ Объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;

	Если Объект.СерийныйУчет
		И Объект.НеОтслеживатьОстаток Тогда

		Объект.НеОтслеживатьОстаток = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СменитьСтраницуКлючейУчетаНаСервере(Знач ИмяТекущейСтраницы)

	ПолучитьНомерКлюча = Число(СтрЗаменить(ИмяТекущейСтраницы, "СтраницаКлюча", ""));
	СвязанныеКлючиУчета.Параметры.УстановитьЗначениеПараметра("КлючУчета", КлючиУчета[ПолучитьНомерКлюча - 1].Значение);

КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;

	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(ТекущиеДанные.Номенклатура);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварИлиУслугаПриИзменении(Элемент)

	Объект.НеОтслеживатьОстаток = УслугаНЕТовар;

	Если УслугаНЕТовар Тогда
		Объект.ПланкаКоличестваДляЛьготнойЦены = 0;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл.");
		КонецЕсли;
	ИначеЕсли Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл.") Тогда
		Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.");
	КонецЕсли;

	ОбновитьВидимостьУслуги();

КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаГод(Команда)

	Если Объект.ГарантийныйСрокПроизводителя = 0 Тогда
		Объект.ГарантийныйСрокПроизводителя = 1;
	КонецЕсли;

	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 365.259636;

КонецПроцедуры

&НаКлиенте
Процедура УмножитьНаМесяц(Команда)

	Если Объект.ГарантийныйСрокПроизводителя = 0 Тогда
		Объект.ГарантийныйСрокПроизводителя = 1;
	КонецЕсли;

	Объект.ГарантийныйСрокПроизводителя = Объект.ГарантийныйСрокПроизводителя * 30.43685;

КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ЭтоВаучерПриИзменении(Элемент)
	ОбновитьДляВаучеров();
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНаборПриИзменении(Элемент)
	ВидимостьСоставаНабора();
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	глВремяПоследнегоСобытия = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойШтрихКодПриИзменении(Элемент)
	Элементы.ОбновитьШтрихКодПоФормуле.Видимость = ИспользоватьШтрихКоды И ПустаяСтрока(Объект.ОсновнойШтрихКод);
КонецПроцедуры
