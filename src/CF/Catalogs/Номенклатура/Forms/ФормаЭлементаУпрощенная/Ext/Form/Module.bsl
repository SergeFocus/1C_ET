//sza140428-1127 SZA: 
//sza130902-0029 : 

&НаКлиенте
Процедура НаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)	
	Объект.Наименование = Текст;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000300", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		
		ОбъектСсылка = Объект.Ссылка; 

		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(ОбъектСсылка);
		ВестиУчетПоСкладам 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		ВестиУчетОказанияУслугЗаВремя   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя");
		СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру");
		ИспользоватьСложныйМеханизмЦен 	= ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		УчетПоСериям = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры");
		дата 		 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", Истина);
		РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок");
		ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп   = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп") ;
		
		ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Истина; //для алгоритма
		
		элементы.ОбновитьШтрихКодПоФормуле.Видимость = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом");
		
		Если НЕ ЗначениеЗаполненоОбъектСсылка Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ОсновнаяЕдиницаИзмерения) Тогда
				Объект.ОсновнаяЕдиницаИзмерения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию");	
			КонецЕсли;
			
			Объект.СерийныйУчет = параметры.СерийныйУчет;
			
			Если НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
				Объект.НоменклатурнаяГруппа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Производитель) Тогда
				Объект.Производитель = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПроизводительПоУмолчанию");
			КонецЕсли;
			
			Если Объект.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
				Объект.ПланкаКоличестваДляЛьготнойЦены = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмерПланкиКоличестваТовараДляЛьготнойЦены") ;
			КонецЕсли;		
			
			//Элементы.Цены.Видимость = Ложь;
			
			Если ЗначениеЗаполнено(Объект.Родитель) 
				и НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
				|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
				|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = Истина
				|	И НоменклатурныеГруппы.Наименование = &Наименование";
				
				Запрос.УстановитьПараметр("Наименование", Объект.Родитель.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Объект.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.ссылка;
					КонецЦикла;	
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.ТоварИлиУслуга.Видимость 		= истина;		
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Истина);
			
		Иначе //существующая		
			НоменклатураНеИспользовалась = ОбщийМодульСервер.ПроверитьЧтоНоменклатураНеИспользовалась(ОбъектСсылка);
			
			Если Объект.Предопределенный 
				или объект.НеОтслеживатьОстаток Тогда //Товар на сумму
				
				Элементы.Родитель.Видимость 		= Ложь;
				Элементы.ГруппаНабора.Видимость 	= ложь;
				Элементы.ТоварИлиУслуга.Видимость 	= ложь;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = Ложь;
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Ложь;
				
			ИначеЕсли объект.ЭтоНабор = ИСТИНА 
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьНаборыТоваровПС") Тогда
				
				Если НоменклатураНеИспользовалась Тогда
					элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора");
				иначе
					элементы.Состав.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Состав набора нельзя изменить после указания в документах. Создавайте новые наборы для иного состава.");
				КонецЕсли;
				
				элементы.ЭтоНабор.ТолькоПросмотр 	= НЕ НоменклатураНеИспользовалась;
				элементы.Состав.ТолькоПросмотр 		= НЕ НоменклатураНеИспользовалась;
				Элементы.ТоварИлиУслуга.Видимость 	= ложь;
				Элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = Ложь;
				
			иначе			
				Элементы.ТоварИлиУслуга.Видимость 	= ложь;
				Элементы.ГруппаНабора.Видимость 	= НоменклатураНеИспользовалась;
				элементы.ОстатокНеОтслеживается.Видимость	= НЕ НоменклатураНеИспользовалась;
				элементы.НеОтслеживатьОстаток.Видимость		= НоменклатураНеИспользовалась;
				элементы.СериныйУчет.Видимость				= НЕ НоменклатураНеИспользовалась;
				
				Если НЕ НоменклатураНеИспользовалась 
					И Объект.ЗапретитьУказаниеБезСерии Тогда
					
					элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");
				КонецЕсли;
				Элементы.ГруппаСерийногоУчета.Видимость 	= НоменклатураНеИспользовалась;
				
			КонецЕсли;
			
			Если НЕ НоменклатураНеИспользовалась
				И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("БлокироватьКарточкуНоменклатурыПослеУказанияЕеВдокументах") Тогда
				
				Элементы.Наименование.ТолькоПросмотр 	= Истина;
				Элементы.ВерхСлева.ТолькоПросмотр 		= Истина;
				Элементы.Дополнительно.ТолькоПросмотр 	= Истина;
			КонецЕсли;
			
			Если объект.СерийныйУчет
				и НЕ Найти(объект.Наименование, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый серийный товар")) = 0 Тогда
				
				Объект.Наименование = "";
			КонецЕсли;
			
			ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы();
		КонецЕсли;
		
		если ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры тогда
			ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка");
			
			Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать 
				или НЕ ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка) Тогда
				
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = Ложь;
			иначе
				ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
			КонецЕсли;	                                                                        	
		КонецЕсли;
		
		НоменклатурнаяГруппаПриИзмененииНаСервере();
		
		ИспользоватьПодключаемоеОборудование 		= ПодключаемоеОборудованиеДСервер.ИспользоватьПодключаемоеОборудование();
		УстанавливатьШтрихКодИзКарточкиНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УстанавливатьШтрихКодИзКарточкиНоменклатуры");
		
		Элементы.Цена.Видимость = не ИспользоватьСложныйМеханизмЦен;
		
		Если Объект.SKU = 0 Тогда
			Объект.SKU = ПодключаемоеОборудованиеДСервер.ПолучитьМаксимальныйКодSKU();
		КонецЕсли;	
		
		НаименованиеОсновнойВалюты = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").Наименование ;
		элементы.НаименованиеОсновнойВалюты.Видимость = не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
		
		Элементы.ПроцентСкидки.Видимость = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") 
		и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры");
		Элементы.КоличествоПоУмолчанию.Видимость = не объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
		
		ВидимостьСоставаНабора();
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("НеМожетМенятьЦены") Тогда
			
			элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = ложь;
			элементы.ПроцентСкидки.Доступность 	= Ложь;
			//		элементы.Цены.ТолькоПросмотр 		= Истина;
			//		Элементы.ЦеныДобавитьЦену.Видимость = ложь;
			элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = истина;
			
		КонецЕсли;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 		
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);			
		
		обновитьвидимостьуслуги();
		РодительПриИзмененииНаСервере();	
		
		элементы.НоменклатурнаяГруппа.ОтметкаНезаполненного = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
		И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа)
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры");		
		
		если ПоддержкаДругихЯзыков 
			и ЗначениеЗаполненоОбъектСсылка тогда
			
			ПредставлениеНаименования = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			НаименованиеДляПечати = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка, "НаименованиеДляПечати");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
						
					ИначеЕсли ВыборкаДетальныеЗаписи.Поле = "НаименованиеДляПечати" Тогда
						СтрокаЯзыка = НаименованияДляПечатиНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		иначе
			ПредставлениеНаименования = объект.Наименование;
			НаименованиеДляПечати = Объект.НаименованиеДляПечати;
			
		КонецЕсли;	
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПланкаКоличестваДляЛьготнойЦены, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.РекомендуемыйМинимальныйОстатокТовара, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.КоличествоПоУмолчанию, Истина);
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.СоставКоличество); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Знач НоваяНоменклатурнаяГруппа = Ложь)
	
	Если ИспользоватьДополнительныеРеквизитыНоменклатурныхГрупп Тогда
		НаименованияДополнительныхРеквизитов = ОбщийМодульПовтор.ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Объект.НоменклатурнаяГруппа);
		Если не НаименованияДополнительныхРеквизитов = Неопределено Тогда
			Счетчик = 1;
			Для Каждого ДопРеквизит Из НаименованияДополнительныхРеквизитов Цикл
				
				НаименованиеДопРеквизита = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ДопРеквизит.ДополнительныйРеквизит);
				
				Выполнить("ДопРеквизитНГ" + СокрЛП(Счетчик) + " = ДопРеквизит.ДополнительныйРеквизит;");
				
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Истина;");
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Заголовок = """ + НаименованиеДопРеквизита + """;");
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Подсказка = """ + НаименованиеДопРеквизита + """;");
				
				ТипЗначенияРеквизитНоменклатурнойГруппы = Неопределено;
				Выполнить(" ТипЗначенияРеквизитНоменклатурнойГруппы = ТипЗнч(Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ");");
				
				если НоваяНоменклатурнаяГруппа 
					И НЕ ТипЗначенияРеквизитНоменклатурнойГруппы = типзнч(ДопРеквизит.ЗначениеПоУмолчанию)  Тогда
					
					Выполнить("Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = ДопРеквизит.ЗначениеПоУмолчанию;");
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
			Пока счетчик <= 10 Цикл
				Выполнить("Элементы.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + ".Видимость = Ложь;");
				
				Если НоваяНоменклатурнаяГруппа Тогда
					Выполнить("Объект.РеквизитНоменклатурнойГруппы" + СокрЛП(Счетчик) + " = Неопределено;");
				КонецЕсли;
				
				счетчик = счетчик + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НоменклатурнаяГруппаПриИзмененииНаСервере()
	
	ОбщийМодульТоварСервер.УстановитьНаименованиеНоменклатурыПоФормуле(Объект);
	Элементы.Родитель.ТолькоПросмотр 		= Ложь;
	Элементы.СерийныйУчет.ТолькоПросмотр 	= Ложь;
	
	НоменклатурнаяГруппа = Объект.НоменклатурнаяГруппа;
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		
		Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда		
			
			Родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование) ;			
			Если НЕ объект.Родитель = Родитель Тогда
				объект.Родитель = Родитель;				
			КонецЕсли;
			
			Элементы.Родитель.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		Если НоменклатурнаяГруппа.НоменклатураЭтойГруппыССерийнымУчетом тогда
			
			если не Объект.СерийныйУчет Тогда					
				Объект.СерийныйУчет = Истина;	
			КонецЕсли;
			Элементы.СерийныйУчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
			И Объект.ОсновнаяЕдиницаИзмерения = ""
			И НЕ НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения = "" Тогда
			
			Объект.ОсновнаяЕдиницаИзмерения = НоменклатурнаяГруппа.ОбщееНаименованиеЕдиницыИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДополнительныеРеквизитыНоменклатурнойГруппы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	НоменклатурнаяГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьШтрихКодПоФормуле(Команда)
	ОбновитьШтрихКодПоФормулеНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьШтрихКодПоФормулеНаСервере(Знач Принудительно)
	
	Если Принудительно 
		или Объект.ОсновнойШтрихКод = "" Тогда
		
		Объект.ОсновнойШтрихКод = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(Объект);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, истина);
	
	Если ИспользоватьПодключаемоеОборудование И 
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ": " + ОписаниеОшибки + ".";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	если ЗначениеЗаполнено(объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(СтраницаОсновноеДополнительно)Тогда
			
			попытка
				СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
				ТекущаяСтраница = СтраницыПанели.получить(СтраницаОсновноеДополнительно);
				Элементы.ГруппаСтраниц.ТекущаяСтраница = ТекущаяСтраница;
			Исключение
			конецпопытки;				
		КонецЕсли;
		
	Иначе 
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
	ОбновитьРазмеры();
	СерийныйУчетПриИзмененииК();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                                  // ПРИ ЗАКРЫТИИ   	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ПоддерживаемыеТипыВО = Новый Массив ();
		ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихКода");
		ПоддерживаемыеТипыВО.Добавить("ДисплейПокупателя");
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			
			Этаформа.ТекущийЭлемент = элементы.ОсновнойШтрихКод;
			ОбработатьПолученныйШКНаКлиенте(ТекКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШКНаклиенте(ТекКод)
	
	Если УстанавливатьШтрихКодИзКарточкиНоменклатуры
		или	Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установить Штрих-Код основным для этой номенклатуры?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
		
		Объект.ОсновнойШтрихКод = ТекКод;
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНаборПриИзменении(Элемент)
	ВидимостьСоставаНабора();
КонецПроцедуры

процедура ВидимостьСоставаНабора()
	
	элементы.ГруппаСоставИСуммы.Видимость 						= объект.ЭтоНабор = ИСТИНА ;	
	элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость 	= Не (объект.ЭтоНабор = ИСТИНА ) И ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры;	
	элементы.ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава.Видимость = не ИспользоватьСложныйМеханизмЦен и объект.ЭтоНабор = ИСТИНА ;	
	элементы.КоличествоНаборовКотороеМожноСобратьНаТекущийМомент.Видимость = ЗначениеЗаполнено(объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСостава(Команда)
	ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуНабораПоСуммеЦенВсехЭлементовСоставаНаСервере()
	
	объект.Цена = 0;
	для каждого СтрокаСоставаНабора из объект.Состав цикл
		Если ЗначениеЗаполнено(СтрокаСоставаНабора.номенклатура) Тогда
			объект.Цена = объект.Цена + СтрокаСоставаНабора.количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), Истина, СтрокаСоставаНабора.количество, , , , Объект.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМомент(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(ТабДок);
	
	ТабДок.ОтображатьСетку 	= Ложь;
	ТабДок.Защита 			= Ложь;
	ТабДок.ТолькоПросмотр 	= Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("компоновка Наборов ")+ объект.Наименование);
	
КонецПроцедуры

&НаСервере
Процедура КоличествоНаборовКотороеМожноСобратьНаТекущийМоментНаСервере(Знач ТабДок)
	
	Макет 	= Справочники.Номенклатура.ПолучитьМакет("МакетНабора");
	Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	
	ТаблОписанияНабора = новый ТаблицаЗначений;
	ТаблОписанияНабора.Колонки.Добавить("Номенклатура");
	ТаблОписанияНабора.Колонки.Добавить("Количество");
	
	добавитьвмассивспецификаций(объект.Состав, ТаблОписанияНабора, 1);	
	
	ТаблОписанияНабора.Свернуть("Номенклатура", "Количество");
	ТаблОписанияНабора.Колонки.Добавить("Цена");
	ТаблОписанияНабора.Колонки.Добавить("Остаток");
	МинимальныйДелегат  = -1;
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		если не ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(СтрокаСоставаНабора.номенклатура) тогда
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуСписания(СтрокаСоставаНабора.номенклатура, СтрокаСоставаНабора.количество, Дата);
			СтрокаСоставаНабора.остаток = ОбщийМодульСервер.ПолучитьОстатокТовара(СтрокаСоставаНабора.номенклатура, , Дата);
			
			МожноПроизвести = цел(СтрокаСоставаНабора.остаток / СтрокаСоставаНабора.количество);
			Если МинимальныйДелегат  = -1
				или МожноПроизвести < МинимальныйДелегат  Тогда
				
				МинимальныйДелегат = МожноПроизвести;
			КонецЕсли;	
		иначе
			СтрокаСоставаНабора.цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.номенклатура, , Дата, Истина, , , , , Объект.Ссылка);
			СтрокаСоставаНабора.остаток = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблОписанияНабора.Колонки.Добавить("Использовано");
	ТаблОписанияНабора.Колонки.Добавить("НаСумму");
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		СтрокаСоставаНабора.Использовано = МинимальныйДелегат * СтрокаСоставаНабора.Количество;
		СтрокаСоставаНабора.НаСумму 		= СтрокаСоставаНабора.Использовано * СтрокаСоставаНабора.цена;
	КонецЦикла;
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал 			= Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ОбластьЗаголовок.Параметры.Номенклатура = ?(ЗначениеЗаполнено(Объект.НаименованиеДляПечати), Объект.НаименованиеДляПечати, объект.Наименование);
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	для каждого СтрокаСоставаНабора из ТаблОписанияНабора Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(СтрокаСоставаНабора);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ОбластьПодвал.параметры.ИтогоНаборов = МинимальныйДелегат;
	НаСумму = ТаблОписанияНабора.Итог("НаСумму");
	ОбластьПодвал.параметры.НаСумму = НаСумму;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(объект.Ссылка, ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию"), дата, истина, МинимальныйДелегат, , , , Объект.Ссылка) ;
	Иначе
		цена = объект.Цена;
	КонецЕсли;
	
	ОбластьПодвал.параметры.цена 			= цена;
	ОбластьПодвал.параметры.НаборНаСумму 	= цена * МинимальныйДелегат;
	ОбластьПодвал.параметры.Выручка 		= (цена * МинимальныйДелегат) - НаСумму;
	
	ТабДок.Вывести(ОбластьПодвал);
	
КонецПроцедуры

&НаСервере
Процедура добавитьвмассивспецификаций(Знач состав, ТаблОписанияНабора, Знач Кво)
	
	для каждого строкасоставанабора из состав цикл
		
		Если строкасоставанабора.номенклатура.этонабор  = ИСТИНА Тогда
			добавитьвмассивспецификаций(строкасоставанабора.номенклатура.состав, ТаблОписанияНабора, строкасоставанабора.количество * Кво);	
			
		иначе
			СтрокаСпециф = ТаблОписанияНабора.добавить();
			СтрокаСпециф.Номенклатура 	= строкасоставанабора.номенклатура;
			СтрокаСпециф.количество 	= строкасоставанабора.количество * кво;
			
			Если СтрокаСпециф.количество = 0 Тогда
				СтрокаСпециф.количество = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //добавитьвмассивспецификаций

&НаКлиенте
Процедура РекомендуемыйМинимальныйОстатокТовараПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

&НаКлиенте
Процедура НеОтслеживатьОстатокПриИзменении(Элемент)
	обновитьвидимостьуслуги();
КонецПроцедуры

процедура обновитьвидимостьуслуги()
	
	элементы.РекомендуемыйМинимальныйОстатокТовара.Видимость = не УслугаНЕТовар и ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры и не объект.НеОтслеживатьОстаток ;
	элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась И не УслугаНЕТовар и объект.РекомендуемыйМинимальныйОстатокТовара = 0;
	элементы.Артикул.Видимость 					= не УслугаНЕТовар;
	элементы.Производитель.Видимость 			= не УслугаНЕТовар;
	Элементы.ГруппаСерийногоУчета.Видимость		= НоменклатураНеИспользовалась И НЕ УслугаНЕТовар И НЕ Объект.НеОтслеживатьОстаток;
	Элементы.ПериодОказанияУслугиЗаВремя.Видимость = УслугаНЕТовар И ВестиУчетОказанияУслугЗаВремя;
	
	Если (УслугаНЕТовар ИЛИ Объект.НеОтслеживатьОстаток)
		и объект.СерийныйУчет Тогда
		
		объект.СерийныйУчет = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	РодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	элементы.ПланкаКоличестваДляЛьготнойЦены.Доступность 		= Истина;
	элементы.РекомендуемыйМинимальныйОстатокТовара.Доступность 	= Истина;
	Элементы.ОстатокНеОтслеживается.Видимость	= Объект.НеОтслеживатьОстаток И НЕ НоменклатураНеИспользовалась;
	элементы.НеОтслеживатьОстаток.Видимость 	= НоменклатураНеИспользовалась;
	элементы.СериныйУчет.Видимость 				= УчетПоСериям И Объект.СерийныйУчет И НЕ НоменклатураНеИспользовалась;
	Элементы.ГруппаСерийногоУчета.Видимость 	= НоменклатураНеИспользовалась;
	
	Родитель = Объект.Родитель;
	Если ЗначениеЗаполнено(Родитель) тогда
		
		Если НЕ родитель.КоличествоПоУмолчанию = 0 Тогда
			элементы.КоличествоПоУмолчанию.Доступность = Ложь;
			Если Не объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию Тогда
				
				объект.КоличествоПоУмолчанию = родитель.КоличествоПоУмолчанию = ИстинА;	
			КонецЕсли;
		КонецЕсли;
		
		Если УчетПоСериям
			И Родитель.СерийныйУчет Тогда
			
			если НоменклатураНеИспользовалась 
				И не Объект.СерийныйУчет тогда				
				
				Объект.СерийныйУчет = Истина;    	
			КонецЕсли;
			
			Если Объект.СерийныйУчет ТОгда
				элементы.СериныйУчет.Видимость 			= Истина;
				Элементы.ГруппаСерийногоУчета.Видимость = ЛОЖЬ;	
			КонецЕсли;
			
			Если Родитель.ЗапретитьУказаниеБезСерии Тогда
				
				если НоменклатураНеИспользовалась 
					И НЕ Объект.ЗапретитьУказаниеБезСерии тогда				
					
					Объект.ЗапретитьУказаниеБезСерии = Истина;		
				КонецЕсли;			
				
				Если Объект.ЗапретитьУказаниеБезСерии Тогда
					Элементы.ЗапретитьУказаниеБезСерии.ТолькоПросмотр = Истина;
					элементы.СериныйУчет.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обязательно сопровождается серией");					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		если Родитель.НеОтслеживатьОстаток Тогда
			
			если НоменклатураНеИспользовалась
				И не Объект.НеОтслеживатьОстаток тогда
				
				Объект.НеОтслеживатьОстаток = истина;				
			КонецЕсли;
			
			Если Объект.НеОтслеживатьОстаток Тогда
				Элементы.ОстатокНеОтслеживается.Видимость	= Истина;
				элементы.НеОтслеживатьОстаток.Видимость 	= Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если не Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
			элементы.ПланкаКоличестваДляЛьготнойЦены.ТолькоПросмотр = Истина;
			
			если не объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены тогда
				объект.ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Если не Родитель.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
			элементы.РекомендуемыйМинимальныйОстатокТовара.ТолькоПросмотр = Истина;
			
			если не объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара тогда
				объект.РекомендуемыйМинимальныйОстатокТовара = Родитель.РекомендуемыйМинимальныйОстатокТовара;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВидимостьСоставаНабора();
	
	если ПоддержкаДругихЯзыков тогда
		если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, ПредставлениеНаименования);
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, НаименованиеДляПечати, "НаименованиеДляПечати");
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			Для Каждого СтрокаЯзыка Из НаименованияДляПечатиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "НаименованиеДляПечати", СтрокаЯзыка.Язык);	
			КонецЦикла;
		КонецЕсли;
		
	конецесли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварИлиУслугаПриИзменении(Элемент)
	
	объект.НеОтслеживатьОстаток = УслугаНЕТовар;
	Если УслугаНЕТовар Тогда
		объект.ПланкаКоличестваДляЛьготнойЦены = 0;
	КонецЕсли;
	
	обновитьвидимостьуслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	если не ЗначениеЗаполнено(Объект.Наименование)
		и ЗначениеЗаполнено(Объект.НаименованиеДляПечати) Тогда
		
		Объект.Наименование = Объект.НаименованиеДляПечати;
	КонецЕсли;
	
	глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойШтрихКодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	если не Объект.ОсновнойШтрихКод = "" тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.ОсновнойШтрихКод);
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	если не Объект.Артикул = "" тогда
		ЗапуститьПриложение("http://www.google.com.ua/search?q=" + Объект.Артикул + Элемент.имя);
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзменении(Элемент)
	СерийныйУчетПриИзмененииК();
КонецПроцедуры

&НаКлиенте
Процедура СерийныйУчетПриИзмененииК()
	
	Элементы.ЗапретитьУказаниеБезСерии.Видимость = НоменклатураНеИспользовалась И УчетПоСериям И Объект.СерийныйУчет;
	Элементы.НеОтслеживатьОстаток.Видимость 	 = НоменклатураНеИспользовалась И НЕ Объект.СерийныйУчет;
	Элементы.КоличествоПоУмолчанию.Видимость     = не объект.СерийныйУчет И РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок;
	
	Если Объект.СерийныйУчет
		и Объект.НеОтслеживатьОстаток Тогда
		
		Объект.НеОтслеживатьОстаток = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СерийныйУчетПриИзмененииК();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	объект.Наименование  = ПредставлениеНаименования;
	НаименованиеИзменяли = Истина;
	
	если СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру тогда
		НаименованиеПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	
	ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(Объект.Наименование, Истина);
	Если не ГруппаПоПервомуСлову = Неопределено
		и не ГруппаПоПервомуСлову = Объект.Родитель Тогда
		
		Объект.Родитель = ГруппаПоПервомуСлову;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	элементы.НаименованияНаДругихЯзыках.Видимость = НЕ элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНаДругихЯзыках(Команда)
	Элементы.НаименованиеДляПечатиНаДругихЯзыках.Видимость = НЕ Элементы.НаименованиеДляПечатиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыках1НаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыках1ПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	объект.НаименованиеДляПечати = НаименованиеДляПечати;
	НаименованиеИзменяли = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеИзображения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", Объект.Ссылка);
		ОткрытьФорму("Справочник.Изображения.ФормаСписка", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(объект.Ссылка) 
		и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сначала следует записать этот элемент. Записать?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Записать();			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("СвязанныйОбъект", объект.Ссылка);
		формаИзображения = ПолучитьФорму("Справочник.Изображения.ФормаОбъекта", ПараметрыФормы);	
		формаИзображения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		Отказ = ПроверитьНаОтказ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьНаОтказ()
	
	отказ = ложь;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ДокументОбъект.ПодготовкаКПроведению(Отказ);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = элементы.Состав.ТекущиеДанные;
	если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Количество = ОбщийМодульСервер.ПолучитьКоличествоПоУмолчанию(ТекущиеДанные.Номенклатура);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекущаяСтраница = Элементы.ГруппаСтраниц.ТекущаяСтраница;
	СтраницыПанели  = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы;
	СтраницаОсновноеДополнительно = СтраницыПанели.Индекс(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	ОбновитьРазмеры();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазмеры()
	
	Если ЗначениеЗаполнено(Объект.Высота) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объем") + " " + (Объект.Ширина * Объект.Длина * Объект.Высота);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ширина) Тогда
		Размеры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Площадь") + " " + (Объект.Ширина * Объект.Длина);
	Иначе
		Размеры = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницыИзмерения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Владелец", Объект.Ссылка);
		ФормаЕдиниц = ПолучитьФорму("Справочник.ЕдиницыИзмерения.ФормаСписка", ПараметрыФормы, ЭтаФорма);
		ФормаЕдиниц.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформация1ВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры
