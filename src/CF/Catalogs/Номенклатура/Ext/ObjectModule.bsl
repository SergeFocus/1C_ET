//sza140119-1541 
//sza130901-2212 : 

&НаСервере
Процедура ПередЗаписью(Отказ)
	
	если не ОбменДанными.Загрузка Тогда
		Если не ЭтоГруппа тогда
			
			если Модифицированность() Тогда
				
				ПодготовкаКПроведению(Отказ);
				
			КонецЕсли;
			
			Если Не Отказ 
				и не Предопределенный ТОгда //может наступить и без модификации
				
				ОбщийМодульТоварСервер.УстановитьНаименованиеНоменклатурыПоФормуле(ЭтотОбъект);  		
				Если НЕ ЗначениеЗаполнено(ОсновнойШтрихКод) Тогда
					ОсновнойШтрихКод1 = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(ЭтотОбъект);
					Если ЗначениеЗаполнено(ОсновнойШтрихКод1)
						и не ЭтотОбъект.ОсновнойШтрихКод = ОсновнойШтрихКод1 Тогда
						
						ОсновнойШтрихКод = ОсновнойШтрихКод1;
					КонецЕсли;
					
				КонецЕсли;		
				
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьНаименование(Отказ, "Номенклатура", ЭтотОбъект.Наименование, ЭтотОбъект.Ссылка);
				
			КонецЕсли;		
			
			Если не отказ
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуНаименованияИАвтоматическиОтноситьКНимНоменклатуру") Тогда
				
				ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(Наименование);
				Если не ГруппаПоПервомуСлову = Неопределено
					и не ГруппаПоПервомуСлову = Родитель Тогда
					
					Родитель = ГруппаПоПервомуСлову;
				КонецЕсли;
			КонецЕсли;
			
		Иначеесли Модифицированность() тогда  //для группы
			
			Если НеОтслеживатьОстаток
				или не ПланкаКоличестваДляЛьготнойЦены = 0
				или не РекомендуемыйМинимальныйОстатокТовара = 0
				и ЗначениеЗаполнено(ссылка) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ (&РекомендуемыйМинимальныйОстатокТовараУстановлен
				|				И НЕ Номенклатура.РекомендуемыйМинимальныйОстатокТовара = &РекомендуемыйМинимальныйОстатокТовара
				|			ИЛИ &ПланкаКоличестваДляЛьготнойЦеныУстановлена
				|				И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = &ПланкаКоличестваДляЛьготнойЦены
				|			ИЛИ &КоличествоПоУмолчаниюУстановлено
				|				И НЕ Номенклатура.КоличествоПоУмолчанию = &КоличествоПоУмолчанию
				|			ИЛИ &НеОтслеживатьОстаток
				|				И НЕ Номенклатура.НеОтслеживатьОстаток)
				|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
				|	И Номенклатура.Родитель = &Родитель
				|	И Номенклатура.Предопределенный = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("НеОтслеживатьОстаток", НеОтслеживатьОстаток);
				Запрос.УстановитьПараметр("КоличествоПоУмолчаниюУстановлено", не КоличествоПоУмолчанию = 0);
				Запрос.УстановитьПараметр("КоличествоПоУмолчанию", КоличествоПоУмолчанию);
				Запрос.УстановитьПараметр("ПланкаКоличестваДляЛьготнойЦеныУстановлена", не ПланкаКоличестваДляЛьготнойЦены = 0);
				Запрос.УстановитьПараметр("ПланкаКоличестваДляЛьготнойЦены", ПланкаКоличестваДляЛьготнойЦены);
				Запрос.УстановитьПараметр("РекомендуемыйМинимальныйОстатокТовара", РекомендуемыйМинимальныйОстатокТовара);
				Запрос.УстановитьПараметр("РекомендуемыйМинимальныйОстатокТовараУстановлен", не РекомендуемыйМинимальныйОстатокТовара = 0);
				Запрос.УстановитьПараметр("Родитель", ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда					
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Счетчик  = 0;
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						СледуетЗаписывать = Ложь;
						
						НоменклатураОбъект = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						если не ПланкаКоличестваДляЛьготнойЦены = 0 
							и не НоменклатураОбъект.ПланкаКоличестваДляЛьготнойЦены = ПланкаКоличестваДляЛьготнойЦены тогда
							
							НоменклатураОбъект.ПланкаКоличестваДляЛьготнойЦены = ПланкаКоличестваДляЛьготнойЦены;	
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						если не КоличествоПоУмолчанию = 0 
							и не НоменклатураОбъект.КоличествоПоУмолчанию = КоличествоПоУмолчанию тогда
							
							НоменклатураОбъект.КоличествоПоУмолчанию = КоличествоПоУмолчанию;	
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						если не РекомендуемыйМинимальныйОстатокТовара = 0 
							и не НоменклатураОбъект.РекомендуемыйМинимальныйОстатокТовара = РекомендуемыйМинимальныйОстатокТовара тогда
							
							НоменклатураОбъект.РекомендуемыйМинимальныйОстатокТовара = РекомендуемыйМинимальныйОстатокТовара;     	
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						Если НеОтслеживатьОстаток 
							и не НоменклатураОбъект.НеОтслеживатьОстаток Тогда
							
							НоменклатураОбъект.НеОтслеживатьОстаток = истина;
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						Если ЗапретитьУказаниеБезСерии
							и не НоменклатураОбъект.ЗапретитьУказаниеБезСерии Тогда
							
							НоменклатураОбъект.ЗапретитьУказаниеБезСерии = истина;
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						
						Если СерийныйУчет
							и не НоменклатураОбъект.СерийныйУчет Тогда
							
							НоменклатураОбъект.СерийныйУчет = истина;
							СледуетЗаписывать = Истина;
						КонецЕсли;
						
						Если СледуетЗаписывать Тогда
							НоменклатураОбъект.Записать();
							Счетчик  = Счетчик  + 1;    	
						КонецЕсли;				
						
					КонецЦикла;
					
					Если не Счетчик = 0 Тогда
						
						если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновлены параметры для номенклатуры в группе:") + " " + Счетчик, , Ссылка);
							//Сообщение = Новый СообщениеПользователю;
							//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновлены параметры для номенклатуры в группе:") + " " + Счетчик;
							//Сообщение.Сообщить();	
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		если не отказ
			и ЗначениеЗаполнено(Ссылка)
			и Модифицированность() Тогда
			
			ОбновитьПовторноИспользуемыеЗначения() ; //цены, группы, енаименования на языках, прочее
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если КоличествоПоУмолчанию = 0 Тогда
		КоличествоПоУмолчанию = 1;
	КонецЕсли;
	
	Если не отказ
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") тогда
		
		если не Предопределенный 
			и НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)
			и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры") Тогда
			
			Отказ = истина;
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!");
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		Иначеесли ЗначениеЗаполнено(НоменклатурнаяГруппа) 
			и НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ Номенклатура.ЭтоГруппа = ИСТИНА
			|	И Номенклатура.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("Наименование", НоменклатурнаяГруппа.Наименование);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				Родитель = ВыборкаДетальныеЗаписи.ссылка;
				
			иначе
				новыйродитель = Справочники.Номенклатура.СоздатьГруппу() ;
				новыйродитель.Наименование = НоменклатурнаяГруппа.Наименование;
				попытка
					новыйродитель.Записать();
					родитель = новыйродитель.Ссылка;
				исключение				 
				конецпопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если не отказ
		и не сокрлп(ОсновнойШтрихКод) = "" 
		и не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка,
		|	Номенклатура.Наименование
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод %%2
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ШтрихКоды.Номенклатура.Ссылка,
		|	ШтрихКоды.Номенклатура.Наименование
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.ШтрихКод = &ОсновнойШтрихКод %%1 ";
		
		Если ЗначениеЗаполнено(ссылка) Тогда
			
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И Номенклатура.Ссылка <> &Ссылка");	
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ШтрихКоды.Номенклатура.Ссылка <> &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
			
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", ОсновнойШтрихКод);	
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			
			Отказ = Истина;
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 						
				ВыборкаДетальныеЗаписи.Следующий();
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Такой Штрих-код найден у номенклатуры:") + " " + ВыборкаДетальныеЗаписи.Наименование, , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Такой Штрих-код найден у номенклатуры:") + " " + ВыборкаДетальныеЗаписи.Наименование;
				//Сообщение.Сообщить();                 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если не отказ
		и ЭтоНабор тогда
		
		массивпустыхстрок = новый массив;
		для каждого СтрокаСоставаНабора из Состав цикл
			Если НЕ ЗначениеЗаполнено(СтрокаСоставаНабора.Номенклатура)
				или СтрокаСоставаНабора.Количество = 0 Тогда
				
				массивпустыхстрок.Добавить(СтрокаСоставаНабора);
			КонецЕсли;                                    	
		КонецЦикла;
		
		для каждого СтрокаСоставаНабора из массивпустыхстрок цикл
			Состав.Удалить(СтрокаСоставаНабора);	
		КонецЦикла;
		
		если ЗначениеЗаполнено(Ссылка) Тогда
			
			//проверить цикличность сылок наборов
			отказ = ЭтотОбъект.проверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(ложь, Ссылка, Ссылка, Истина);
			Если отказ Тогда
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В составе Набора обнаружены цикл ссылок!"), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В составе Набора обнаружены цикл ссылок!");
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		если не отказ 
			и цена = 0
			и не Состав.Количество() = 0
			и не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда				
			
			Для каждого СтрокаСоставаНабора Из состав Цикл
				цена = цена + СтрокаСоставаНабора.Количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.Номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), истина, СтрокаСоставаНабора.Количество, , , , Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	если не отказ
		и ЗначениеЗаполнено(Родитель) тогда
		
		если не Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 тогда
			ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;
			
		КонецЕсли;
		если не родитель.РекомендуемыйМинимальныйОстатокТовара = 0 тогда
			РекомендуемыйМинимальныйОстатокТовара = родитель.РекомендуемыйМинимальныйОстатокТовара;	
		КонецЕсли;
		Если родитель.НеОтслеживатьОстаток Тогда
			НеОтслеживатьОстаток = истина;
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не отказ 
		и не ОбменДанными.Загрузка тогда
		
		если сокрлп(ОсновнойШтрихКод) = "" тогда
			
			Если не НеОтслеживатьОстаток
				и не Предопределенный
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода") Тогда
				
				отказ = истина;
				//если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				//	Сообщение = Новый СообщениеПользователю;
				//	Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В программе запрещена номенклатура без Штрих-кода");
				//	Сообщение.Поле  = "ОсновнойШтрихКод";
				//	Сообщение.УстановитьДанные(ЭтотОбъект);
				//	Сообщение.Сообщить();	
				//иначе
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В программе запрещена номенклатура без Штрих-кода"), , Ссылка);
				//КонецЕсли;
				
			КонецЕсли;
			
		иначе			
			ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
			ШК.Активность 	= Истина;
			ШК.Номенклатура = Ссылка  ;
			
			ТипШтрихКодов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов") ;
			Если НЕ ЗначениеЗаполнено(ТипШтрихКодов) Тогда
				ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;	
			КонецЕсли;
			
			ШК.ТипШтрихКода = ТипШтрихКодов;
			ШК.ШтрихКод 	= ОсновнойШтрихКод;
			
			Попытка 
				ШК.Записать(Истина);
				
			Исключение 
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи штрих-кода:") + " " + ШК + " " + ОписаниеОшибки(), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи штрих-кода:") + " " + ШК + " " + ОписаниеОшибки();
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   проверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(тутотказ, номенклатура, ссылкапроверки, ПервыйУровеньПроверки) Экспорт
	
	если тутотказ 
		или (НЕ ПервыйУровеньПроверки И номенклатура = ссылкапроверки) тогда
		
		возврат истина; //отказ;
		
	иначе		
		
		для каждого СтрокаСоставаНабора из Номенклатура.Состав цикл
			Если не тутотказ
				и ЗначениеЗаполнено(СтрокаСоставаНабора.Номенклатура) Тогда
				
				тутотказ = ЭтотОбъект.проверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(тутотказ, СтрокаСоставаНабора.Номенклатура, СсылкаПроверки, Ложь);
			КонецЕсли;	
		КонецЦикла;
		
		Возврат тутотказ;
		
	КонецЕсли;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.комментарий = "";
КонецПроцедуры
