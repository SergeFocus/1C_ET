#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// sza150619-0057 поля печати
// sza150506-1446 артикула
// sza141226-0230
// sza140928-1545
// sza140329-2252  
// sza130901-2212 : 

&НаСервере
Процедура ПередЗаписью(Отказ)
	
	Если НЕ Отказ
		И НЕ ОбменДанными.Загрузка 
		И НЕ ПометкаУдаления
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		
		Если НЕ ЭтоГруппа Тогда
			
			Если Модифицированность() Тогда				
				ПодготовкаКПроведению(Отказ);				
			КонецЕсли;
			
			Если НЕ Отказ 
				И НЕ Предопределенный ТОгда // может наступить и без модификации
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
					Попытка // ЭтотОбъект
						ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ЭтотОбъект);
					Исключение
					КонецПопытки;
					
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
						Попытка 
							ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ЭтотОбъект, "Артикул");
						Исключение 	
						КонецПопытки;	
					КонецЕсли;
					
					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЕстьПринтер") Тогда
						Попытка 
							ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ЭтотОбъект, "НаименованиеДляПечати");
						Исключение 	
						КонецПопытки;	
					КонецЕсли;
					
					ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии");
					
					Если НЕ ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии
						ИЛИ ПустаяСтрока(ОсновнойШтрихКод) Тогда
						
						ОсновнойШтрихКодССервера = ОбщийМодульТоварСервер.УстановитьШтрихКодНоменклатурыПоФормуле(ЭтотОбъект);
						Если ЗначениеЗаполнено(ОсновнойШтрихКодССервера)
							И НЕ ОсновнойШтрихКод = ОсновнойШтрихКодССервера Тогда
							
							ОсновнойШтрихКод = ОсновнойШтрихКодССервера;
						КонецЕсли;					
					КонецЕсли;	
				КонецЕсли;		
				
				Отказ = ОбщийМодульСервер.ПроверитьУникальностьЗначенияРеквизита(Отказ, "Номенклатура", Наименование, Ссылка);
				
				Если НЕ Отказ 
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры")
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
					И ЗначениеЗаполнено(НоменклатурнаяГруппа)
					И НоменклатурнаяГруппа.АртикулДолженБытьУникальным Тогда
					
					Отказ = ОбщийМодульСервер.ПроверитьУникальностьЗначенияРеквизита(Отказ, "Номенклатура", Артикул, Ссылка, , , "Артикул", ИСТИНА);
				КонецЕсли;
				
			КонецЕсли;		
			
			Если НЕ Отказ
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СоздаватьГруппыНоменклатурыПоПервомуСловуИОтноситьКНим") Тогда
				
				ГруппаПоПервомуСлову = ОбщийМодульТоварСервер.НаименованиеГруппыПоПервомуСлову(Наименование);
				Если НЕ ГруппаПоПервомуСлову = Неопределено
					И НЕ ГруппаПоПервомуСлову = Родитель Тогда
					
					Родитель = ГруппаПоПервомуСлову;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Модифицированность() Тогда // для группы
			
			Если (НеОтслеживатьОстаток
				ИЛИ НЕ ПланкаКоличестваДляЛьготнойЦены = 0
				ИЛИ НЕ РекомендуемыйМинимальныйОстатокТовара = 0)
				И ЗначениеЗаполнено(Ссылка) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ (&РекомендуемыйМинимальныйОстатокТовараУстановлен
				|				И НЕ Номенклатура.РекомендуемыйМинимальныйОстатокТовара = &РекомендуемыйМинимальныйОстатокТовара
				|			ИЛИ &ПланкаКоличестваДляЛьготнойЦеныУстановлена
				|				И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = &ПланкаКоличестваДляЛьготнойЦены
				|			ИЛИ &КоличествоПоУмолчаниюУстановлено
				|				И НЕ Номенклатура.КоличествоПоУмолчанию = &КоличествоПоУмолчанию
				|			ИЛИ &НоменклатурнаяГруппаНеТребуется
				|				И НЕ Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
				|			ИЛИ &КоэффициентНеУстановлен
				|				И НЕ Номенклатура.КоэффициентНакопленияНаВаучер = &КоэффициентНакопленияНаВаучер
				|			ИЛИ &НеОтслеживатьОстаток
				|				И НЕ Номенклатура.НеОтслеживатьОстаток)
				|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
				|	И Номенклатура.Родитель = &Родитель
				|	И Номенклатура.Предопределенный = ЛОЖЬ";
				
				КоэффициентНеУстановлен = НЕ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВаучерыНакопительнымиКартами"))
				ИЛИ КоэффициентНакопленияНаВаучер = 0;
				
				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") Тогда
					НоменклатурнаяГруппаНеТребуется = ИСТИНА;
				ИначеЕсли НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры") ТОгда
					НоменклатурнаяГруппаНеТребуется = ИСТИНА;
				ИначеЕсли НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
					НоменклатурнаяГруппаНеТребуется = ИСТИНА;
				Иначе
					НоменклатурнаяГруппаНеТребуется = ЛОЖЬ;	
				КонецЕсли;
				
				Запрос.УстановитьПараметр("КоэффициентНеУстановлен", КоэффициентНеУстановлен);
				Запрос.УстановитьПараметр("КоэффициентНакопленияНаВаучер", КоэффициентНакопленияНаВаучер);				
				Запрос.УстановитьПараметр("НоменклатурнаяГруппаНеТребуется", НоменклатурнаяГруппаНеТребуется);
				Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
				Запрос.УстановитьПараметр("НеОтслеживатьОстаток", НеОтслеживатьОстаток);
				Запрос.УстановитьПараметр("КоличествоПоУмолчаниюУстановлено", не КоличествоПоУмолчанию = 0);
				Запрос.УстановитьПараметр("КоличествоПоУмолчанию", КоличествоПоУмолчанию);
				Запрос.УстановитьПараметр("ПланкаКоличестваДляЛьготнойЦеныУстановлена", не ПланкаКоличестваДляЛьготнойЦены = 0);
				Запрос.УстановитьПараметр("ПланкаКоличестваДляЛьготнойЦены", ПланкаКоличестваДляЛьготнойЦены);
				Запрос.УстановитьПараметр("РекомендуемыйМинимальныйОстатокТовара", РекомендуемыйМинимальныйОстатокТовара);
				Запрос.УстановитьПараметр("РекомендуемыйМинимальныйОстатокТовараУстановлен", не РекомендуемыйМинимальныйОстатокТовара = 0);
				Запрос.УстановитьПараметр("Родитель", Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда					
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Счетчик  = 0;
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						СледуетЗаписывать = ЛОЖЬ;
						
						НоменклатураОбъект = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
						Если НЕ ПланкаКоличестваДляЛьготнойЦены = 0 
							И НЕ НоменклатураОбъект.ПланкаКоличестваДляЛьготнойЦены = ПланкаКоличестваДляЛьготнойЦены Тогда
							
							НоменклатураОбъект.ПланкаКоличестваДляЛьготнойЦены = ПланкаКоличестваДляЛьготнойЦены;	
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если НЕ КоэффициентНеУстановлен
							И НЕ КоэффициентНакопленияНаВаучер = 0 
							И НЕ НоменклатураОбъект.КоэффициентНакопленияНаВаучер = КоэффициентНакопленияНаВаучер Тогда
							
							НоменклатураОбъект.КоэффициентНакопленияНаВаучер = КоэффициентНакопленияНаВаучер;	
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если НЕ КоличествоПоУмолчанию = 0 
							И НЕ НоменклатураОбъект.КоличествоПоУмолчанию = КоличествоПоУмолчанию Тогда
							
							НоменклатураОбъект.КоличествоПоУмолчанию = КоличествоПоУмолчанию;	
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если НЕ РекомендуемыйМинимальныйОстатокТовара = 0 
							И НЕ НоменклатураОбъект.РекомендуемыйМинимальныйОстатокТовара = РекомендуемыйМинимальныйОстатокТовара Тогда
							
							НоменклатураОбъект.РекомендуемыйМинимальныйОстатокТовара = РекомендуемыйМинимальныйОстатокТовара;     	
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если НЕ НоменклатурнаяГруппаНеТребуется 
							И НЕ ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа) Тогда // необязательное
							
							НоменклатураОбъект.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если НеОтслеживатьОстаток 
							И НЕ НоменклатураОбъект.НеОтслеживатьОстаток Тогда
							
							НоменклатураОбъект.НеОтслеживатьОстаток = ИСТИНА;
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если ЗапретитьУказаниеБезСерии
							И НЕ НоменклатураОбъект.ЗапретитьУказаниеБезСерии Тогда
							
							НоменклатураОбъект.ЗапретитьУказаниеБезСерии = ИСТИНА;
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;						
						
						Если СерийныйУчет
							И НЕ НоменклатураОбъект.СерийныйУчет Тогда
							
							НоменклатураОбъект.СерийныйУчет = ИСТИНА;
							СледуетЗаписывать = ИСТИНА;
						КонецЕсли;
						
						Если СледуетЗаписывать Тогда
							НоменклатураОбъект.Записать();
							Счетчик  = Счетчик  + 1;    	
						КонецЕсли;				
						
					КонецЦикла;
					
					Если НЕ Счетчик = 0 Тогда
						
						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновлены параметры для номенклатуры в группе") + ": " + Счетчик, , Ссылка);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Отказ
			И ЗначениеЗаполнено(Ссылка)
			И Модифицированность() Тогда
			
			ОбновитьПовторноИспользуемыеЗначения(); // цены, группы, наименования на языках, набор, прочее
			
			ОбщийМодульСервер.ПроверитьСменуНаименованияНаТекущемЯзыке(Наименование, Ссылка, , Отказ);
			ОбщийМодульСервер.ПроверитьСменуНаименованияНаТекущемЯзыке(НаименованиеДляПечати, Ссылка, "НаименованиеДляПечати", Отказ);
			
			Если НЕ ЭтоГруппа
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьОписаниеТаблицОбъектовДляИхСписков") Тогда
				
				ОбщийМодульСервер.ОформитьОписаниеТаблицы(ЭтотОбъект, "Состав", , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("-"));	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовкаКПроведению(Отказ) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		Если КоличествоПоУмолчанию = 0 Тогда
			КоличествоПоУмолчанию = 1;
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
			
			Если НЕ Предопределенный 
				И НЕ ПометкаУдаления 
				И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры") Тогда
				
				Отказ = ИСТИНА;
				
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"));
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(НоменклатурнаяГруппа) 
				И НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
				
				БылРодитель = Родитель;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ Номенклатура.ЭтоГруппа = ИСТИНА
				|	И Номенклатура.Наименование = &Наименование";
				
				Запрос.УстановитьПараметр("Наименование", НоменклатурнаяГруппа.Наименование);
				
				РезультатЗапроса = Запрос.Выполнить();
				НовРодитель = Неопределено;
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					ВыборкаДетальныеЗаписи.Следующий();
					НовРодитель = ВыборкаДетальныеЗаписи.ссылка;
					
				Иначе
					НовыйРодитель = Справочники.Номенклатура.СоздатьГруппу();
					НовыйРодитель.Наименование = НоменклатурнаяГруппа.Наименование;
					Попытка
						НовыйРодитель.Записать();
						НовРодитель = НовыйРодитель.Ссылка;
					Исключение				 
					КонецПопытки;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовРодитель)
					И НЕ НовРодитель = Родитель Тогда
					
					Родитель = НовРодитель;
				КонецЕсли;
				
				Если НЕ БылРодитель = Родитель 
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("По этой номенклатурной группе установлена группа") + ": " + СокрЛП(Родитель), , Ссылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
			И НЕ ПустаяСтрока(ОсновнойШтрихКод)
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка, Номенклатура.Наименование
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод %%2
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ШтрихКоды.Номенклатура.Ссылка,
			|	ШтрихКоды.Номенклатура.Наименование
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ ШтрихКоды.ШтрихКод = &ОсновнойШтрихКод %%1 ";
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", " И Номенклатура.Ссылка <> &Ссылка");	
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И ШтрихКоды.Номенклатура.Ссылка <> &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", Ссылка);
				
			Иначе
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%2", "");
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");			
			КонецЕсли;		
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", ОсновнойШтрихКод);	
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Отказ = ИСТИНА;
				
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 						
					ВыборкаДетальныеЗаписи.Следующий();
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Такой Штрих-код найден у номенклатуры") + ": " + ВыборкаДетальныеЗаписи.Наименование, , Ссылка);
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Такой Штрих-код найден у номенклатуры") + ": " + ВыборкаДетальныеЗаписи.Наименование);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ Отказ
			И ЭтоНабор Тогда
			
			МассивПустыхСтрок = Новый массив;
			Для Каждого СтрокаСоставаНабора Из Состав Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаСоставаНабора.Номенклатура)
					ИЛИ СтрокаСоставаНабора.Количество = 0 Тогда
					
					МассивПустыхСтрок.Добавить(СтрокаСоставаНабора);
				КонецЕсли;                                    	
			КонецЦикла;
			
			Для Каждого СтрокаСоставаНабора Из МассивПустыхСтрок Цикл
				Состав.Удалить(СтрокаСоставаНабора);	
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				
				// проверить цикличность сылок наборов
				Отказ = проверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(ЛОЖЬ, Ссылка, Ссылка, ИСТИНА);
				Если Отказ Тогда
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В составе Набора обнаружены цикл ссылок!"), , Ссылка);
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В составе Набора обнаружены цикл ссылок!"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Отказ 
				И Цена = 0
				И НЕ Состав.Количество() = 0
				И НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда				
				
				Для Каждого СтрокаСоставаНабора Из состав Цикл
					Цена = Цена + СтрокаСоставаНабора.Количество * ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаСоставаНабора.Номенклатура, , ОбщийМодульСервисСервер.ПользователяТекущаяДата(), ИСТИНА, СтрокаСоставаНабора.Количество, , , , Ссылка, , СтрокаСоставаНабора.ЕдиницаИзмерения);
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
		
		Если НЕ Отказ
			И ЗначениеЗаполнено(Родитель) Тогда
			
			Если НЕ Родитель.ПланкаКоличестваДляЛьготнойЦены = 0 Тогда
				ПланкаКоличестваДляЛьготнойЦены = Родитель.ПланкаКоличестваДляЛьготнойЦены;			
			КонецЕсли;
			
			Если НЕ Родитель.РекомендуемыйМинимальныйОстатокТовара = 0 Тогда
				РекомендуемыйМинимальныйОстатокТовара = родитель.РекомендуемыйМинимальныйОстатокТовара;	
			КонецЕсли;
			
			Если Родитель.НеОтслеживатьОстаток Тогда
				НеОтслеживатьОстаток = ИСТИНА;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры
Процедура ПриЗаписи(Отказ)
	
	Если НЕ Отказ
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА)
		И НЕ ОбменДанными.Загрузка Тогда
		
		Если ПустаяСтрока(ОсновнойШтрихКод) Тогда
			
			Если НЕ НеОтслеживатьОстаток
				И НЕ Предопределенный
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода") Тогда
				
				Отказ = ИСТИНА;
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В программе запрещена номенклатура без Штрих-кода"), , Ссылка);
			КонецЕсли;
			
		Иначе			
			ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
			ШК.Активность 	= ИСТИНА;
			ШК.Номенклатура = Ссылка  ;
			
			ТипШтрихКодов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипШтрихКодов");
			Если НЕ ЗначениеЗаполнено(ТипШтрихКодов) Тогда
				ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;	
			КонецЕсли;
			
			ШК.ТипШтрихКода = ТипШтрихКодов;
			ШК.ШтрихКод 	= ОсновнойШтрихКод;
			
			Попытка 
				ШК.Записать(ИСТИНА);
				
			Исключение 
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи штрих-кода") + ": " + ШК + " " + ТекстОписаниеОшибки, , Ссылка);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ПриКопировании(ОбъектКопирования)
	Комментарий = "";
КонецПроцедуры

&НаСервере
Функция   ПроверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(ТутОтказ, Знач Номенклатура, Знач СсылкаПроверки, Знач ПервыйУровеньПроверки) Экспорт
	
	Если ТутОтказ 
		ИЛИ (НЕ ПервыйУровеньПроверки И Номенклатура = СсылкаПроверки) Тогда
		
		Возврат ИСТИНА;
	Иначе		
		
		Для Каждого СтрокаСоставаНабора Из Номенклатура.Состав Цикл
			Если НЕ тутОтказ
				И ЗначениеЗаполнено(СтрокаСоставаНабора.Номенклатура) Тогда
				
				ТутОтказ = проверитьСсылкуНоменклатурыИлиЕеСоставаНаРавенство(тутОтказ, СтрокаСоставаНабора.Номенклатура, СсылкаПроверки, ЛОЖЬ);
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ТутОтказ;		
	КонецЕсли;
	
КонецФункции

#КонецЕсли