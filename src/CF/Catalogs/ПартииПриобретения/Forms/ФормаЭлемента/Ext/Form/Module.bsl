// sza140420-0440  
// sza131110-1929 : 
&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)	
	Объект.Курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(Объект.Курс, Объект.Дата);	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблицСправа()
	Элементы.ГруппаСправа.Видимость = НЕ НеПоказыватьТаблицыСправа;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВидИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВладельца", ДопИнфоТипВладельца);
	ФормаВыбораВидаИнформации = ПолучитьФорму("Справочник.ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	ВидИнформации = ФормаВыбораВидаИнформации.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВидИнформации) Тогда
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.ВидИнформации = ВидИнформации;
		Элементы.ДополнительнаяИнформация.ТекущиеДанные.Информация = ОбщийМодульКлиент.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияПриИзменении(Элемент)
	ДопИнформацияИзменена = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	ТекущиеДанные.курс = ОбщийМодульПовтор.ПолучитьТекущийКурс(ТекущиеДанные.валюта, Объект.Дата);	
	ДополнительныеРасходыПриИзмененииНаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	
	ДополнительныеРасходыПриИзмененииНаКлиент();
	пересчитатьСтоимостьпартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриИзмененииНаКлиент()
	
	СуммаДопРасходов = 0;
	Для Каждого Расход Из Объект.ДополнительныеРасходы Цикл
		СуммаДопРасходов = СуммаДопРасходов + Расход.Сумма * ?(Расход.Курс = 0, 1, Расход.Курс);
	КонецЦикла;
	
	Объект.СуммаДопРасходов = СуммаДопРасходов;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДополнительныеРасходыСуммаПриИзменении(Элемент)	
	ДополнительныеРасходыПриИзмененииНаКлиент();	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	
	Если ПереводитьНаименованияАвтоматически Тогда
		ОбщийМодульКлиент.ПеревестиНаименованияАвтоматически(Наименование, НаименованияНаДругихЯзыках);
		БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличество(Команда)
	ОбщееКоличествоВДокументах = ОбновитьКоличествоНаСервере(Объект.Ссылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ОбновитьКоличествоНаСервере(Ссылка)
	
	ОбщееКоличествоВДокументах = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступленияТовараТовары.Количество
	|ИЗ
	|	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
	|ГДЕ
	|	ПоступленияТовараТовары.Ссылка.ПартияПриобретения = &ПартияПриобретения
	|	И ПоступленияТовараТовары.Ссылка.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	-РасходыТовараТовары.Количество
	|ИЗ
	|	Документ.РасходыТовара.Товары КАК РасходыТовараТовары
	|ГДЕ
	|	РасходыТовараТовары.Ссылка.ПартияПриобретения = &ПартияПриобретения
	|	И РасходыТовараТовары.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ПартияПриобретения", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбщееКоличествоВДокументах = ОбщееКоличествоВДокументах + ВыборкаДетальныеЗаписи.Количество;
		КонецЦикла;                        	
	КонецЕсли;
	
	Возврат ОбщееКоличествоВДокументах;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ПоступлениеПеренестиНаДатуПартии
		И НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата партии не указана!");
		Сообщение.Поле 	= "Дата";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Отказ = ИСТИНА;
		
	ИначеЕсли Объект.ОбщаяСтоимостьПартии = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Стоимость партии не указана!");
		Сообщение.Поле 	= "ОбщаяСтоимостьПартии";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Отказ = ИСТИНА;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Идет переопределение поступления товаров партии.."), 50, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура пересчитатьСтоимостьпартии()	
	Объект.ОбщаяСтоимостьПартии = Объект.СуммаДопРасходов + Объект.СтоимостьТовара;		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопИнформацияИзменена Тогда
		ОбщийМодульСервисСервер.ЗаписатьДополнительнуюИнформацию(Объект.Ссылка, ДополнительнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001250", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		ОбщийМодульСервисСервер.ЗаполнитьДополнительнуюИнформацию(ОбъектСсылка, ДополнительнаяИнформация, ДопИнфоТипВладельца);
		
		ОбщееКоличествоВДокументах 	= 0;
		ОсновнаяВалюта 				= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		
		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Элементы.ОбщееКоличествоВДокументах.Видимость 	= ЛОЖЬ;
			Элементы.ПриходныеДокументы.Видимость 			= ЛОЖЬ;
			Элементы.ОбновитьКоличество.Видимость 			= ЛОЖЬ;
			Объект.Дата 			= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			Объект.ПроцентНаценки 	= 100;
			Объект.Валюта 			= ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			Объект.Курс				= 1;
			Объект.Поставщик 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоставщикПоУмолчанию");
			
		Иначе
			ОбщееКоличествоВДокументах = ОбновитьКоличествоНаСервере(ОбъектСсылка);
			
		КонецЕсли;
		
		Элементы.ОсновнаяВалюта.Видимость = НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют");
		ПриходныеДокументы.Параметры.УстановитьЗначениеПараметра("ПартияПриобретения", ОбъектСсылка);
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского");
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(ОбъектСсылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ОбъектСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;			
		КонецЕсли;	
		
		Если ПоддержкаДругихЯзыков Тогда
			ПереводитьНаименованияАвтоматически = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрТекстовНаДругихЯзыкахДляАвтоматическогоПереводаНаименований");
			Элементы.НаименованияНаДругихЯзыкахЯзык.РежимВыбораИзСписка = ИСТИНА;
			ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(Элементы.НаименованияНаДругихЯзыкахЯзык.СписокВыбора, ИСТИНА);
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ОформитьФорматКоличества(Элементы.ПриходныеДокументыТовараВКоличестве, , ИСТИНА);	
		
		ОбщийМодульСервер.ОбеспечитьСписокОтборов(ПриходныеДокументы);
		
		Если ПараметрыСеанса.ВерсияПриложения < 803050000 
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВместоТумблеровПоказыватьГалочки") Тогда			
			
			Если НЕ ПараметрыСеанса.ВерсияПриложения < 803050000 Тогда
				Выполнить(" Элементы.ПоступлениеПеренестиНаДатуПартии.ВидФлажка = ВидФлажка.Флажок;	");	
			КонецЕсли;
			Элементы.ПоступлениеПеренестиНаДатуПартии.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Все поступления следует перенести на дату партии");
			Элементы.ПоступлениеПеренестиНаДатуПартии.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.ПриходныеДокументы.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СменитьВидОкна(Команда)
	
	НеПоказыватьТаблицыСправа = НЕ НеПоказыватьТаблицыСправа;
	ВидимостьТаблицСправа();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБезПересчета(Команда)
	СохранитьБезПересчетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьБезПересчетаНаСервере()
	ПараметрыСеанса.МногоФункциональныйФлаг = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьТовараПриИзменении(Элемент)
	пересчитатьСтоимостьпартии();
КонецПроцедуры



