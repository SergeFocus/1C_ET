// sza151010-2204

&НаСервере
Процедура ВариантыДополнительногоОтчетаЗаполнить()
	
	ВариантыДополнительногоОтчета.Очистить();
	
	ВнешнийОбъект = ОбщийМодульСервисСервер.ПолучитьОбъектВнешнейОбработки(Объект.Ссылка);
	ОтчетМетаданные = ВнешнийОбъект.Метаданные();
	СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
	Если СхемаКДМетаданные <> Неопределено Тогда
		СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
		Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
			ВариантСсылка = Неопределено;
			КлючВарианта = ВариантНастроекКД.Имя;
			
			Если ВариантСсылка <> Неопределено Тогда
				Вариант = ВариантыДополнительногоОтчета.Добавить();
				Вариант.КлючВарианта = КлючВарианта;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Пользовательский = Ложь;
				Вариант.ИндексКартинки = 5;
				Вариант.Ссылка = ВариантСсылка;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ВариантСсылка = Неопределено;
		КлючВарианта = "";
		
		Если ВариантСсылка <> Неопределено Тогда
			Вариант = ВариантыДополнительногоОтчета.Добавить();
			Вариант.КлючВарианта = КлючВарианта;
			Вариант.Наименование = ОтчетМетаданные.Представление();
			Вариант.Пользовательский = Ложь;
			Вариант.ИндексКартинки = 5;
			Вариант.Ссылка = ВариантСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользуетХранилищеВариантов Тогда
		Хранилище = ХранилищаНастроек["ХранилищеВариантовОтчетов"];
		КлючОбъекта = Объект.Ссылка;
	Иначе
		Хранилище = ХранилищеВариантовОтчетов;
		КлючОбъекта = "ВнешнийОтчет." + Объект.ИмяОбъекта;
	КонецЕсли;
	
	СписокНастроек = Хранилище.ПолучитьСписок(КлючОбъекта);
	
	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		Вариант = ВариантыДополнительногоОтчета.Добавить();
		Вариант.КлючВарианта = ЭлементСписка.Значение;
		Вариант.Наименование = ЭлементСписка.Представление;
		Вариант.Пользовательский = ИСТИНА;
		Вариант.ИндексКартинки = 3;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаОткрыть(Команда)
	
	Вариант = ЭтаФорма.Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите вариант отчета."));
		Возврат;
	КонецЕсли;
	
	// ОткрытьВариантДополнительногоОтчета(Объект.Ссылка, Вариант.КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломИзменения(Элемент, Отказ)
	Отказ = ИСТИНА;
	ОткрытьВариант();
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередУдалением(Элемент, Отказ)
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Отказ = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	Если НЕ Вариант.Пользовательский Тогда
		Отказ = ИСТИНА;
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пометка на удаление предопределенного варианта отчета запрещена."));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пометить") + " " + Вариант.Наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на удаление?");
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	УдалитьВариантДополнительногоОтчета("ВнешнийОтчет." + Объект.ИмяОбъекта, Вариант.КлючВарианта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлОбработкиОтчета(Команда)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДанныхОбработки) Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет данных для обработки."));
		Возврат;
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
		ДиалогСохраненияФайла.Фильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние отчеты и обработки") + " (*.epf, *.erf)|*.epf;*.erf|" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние отчеты") + " (*.epf)|*.erf|" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние обработки") + " (*.epf)|*.erf";
		ДиалогСохраненияФайла.ИндексФильтра = ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2);
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите файл");
		
		Если ДиалогСохраненияФайла.Выбрать() Тогда
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресДанныхОбработки));
			ПолученныеФайлы = Новый Массив;
			ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);
		КонецЕсли;
		
	Иначе		
		ПолучитьФайл(АдресДанныхОбработки, Объект.ИмяФайла, ИСТИНА);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуИлиОтчет(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщийМодульКлиент.ВыполнитьОбработкуПоПараметрам(Объект.Ссылка, Объект.ЗапускатьМодально);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлОбработкиОтчета(Команда)	
	ОткрытьДиалогДляЗагрузкиФайлаОбработкиОтчета(Ложь);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоманды(КомандыСохраненные = Неопределено)
	
	КомандыОбработки.Очистить();
	
	Для Каждого ЭлементКоманда Из Объект.Команды Цикл
		
		НоваяКоманда = КомандыОбработки.Добавить();
		
		НоваяКоманда.Представление = ЭлементКоманда.Представление;
		НоваяКоманда.Идентификатор = ЭлементКоманда.Идентификатор;
		
		Если Объект.Вид <> ВидДополнительнаяОбработка
			ИЛИ ЭлементКоманда.ВариантЗапуска <> Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода Тогда
			
			НоваяКоманда.РасписаниеПредставление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не применимо - команда используется только на клиенте");
			НоваяКоманда.Использование = Ложь;
			НоваяКоманда.Разрешено     = Ложь;
			
		ИначеЕсли НЕ ПравоДобавления Тогда
			
			НоваяКоманда.Разрешено = Ложь;
			НоваяКоманда.РасписаниеПредставление = ЭлементКоманда.РегламентноеЗаданиеПредставление;
			НоваяКоманда.Использование = (ЗначениеЗаполнено(ЭлементКоманда.РегламентноеЗаданиеПредставление)
			И ЭлементКоманда.РегламентноеЗаданиеПредставление <> ПредставлениеПустогоРасписания());
			
		Иначе
			
			НоваяКоманда.Разрешено     = ИСТИНА;
			НоваяКоманда.Использование = Ложь;
			
			Если КомандыСохраненные = Неопределено Тогда
				РегламентноеЗаданиеGUID = ЭлементКоманда.РегламентноеЗаданиеGUID;
			Иначе
				
				НайденнаяСтрока = КомандыСохраненные.Найти(ЭлементКоманда.Идентификатор, "Идентификатор");
				
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					РегламентноеЗаданиеGUID = НайденнаяСтрока.РегламентноеЗаданиеGUID;
					КомандыСохраненные.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
				
				//РегламентноеЗадание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(РегламентноеЗаданиеGUID, ИСТИНА);
				//
				//Если РегламентноеЗадание <> Неопределено Тогда
				//	
				//	ЭлементКоманда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
				//	
				//	НоваяКоманда.РасписаниеПредставление = Строка(РегламентноеЗадание.Расписание);
				//	НоваяКоманда.Использование = РегламентноеЗадание.Использование;
				//	НоваяКоманда.Расписание.Добавить(РегламентноеЗадание.Расписание);
				//	
				//КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ НоваяКоманда.Использование Тогда
				НоваяКоманда.РасписаниеПредставление = ПредставлениеОтключенногоРасписания();
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ЗарегистрироватьОбработку(ПараметрыРегистрации)
	
	Если ПараметрыРегистрации.ОтключатьКонфликтующие = ИСТИНА Тогда
		Для Каждого ЭлементСписка Из ПараметрыРегистрации.Конфликтующие Цикл
			КонфликтующийОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			КонфликтующийОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки;
			КонфликтующийОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяОбъекта, СтароеИмяОбъекта, Успешно, ИмяОбъектаЗанято, Конфликтующие, КраткоеПредставлениеОшибки");
	Результат.ИмяОбъектаЗанято = Ложь;
	Результат.Успешно = Ложь;
	Результат.СтароеИмяОбъекта = ?(Не ЗначениеЗаполнено(Объект.Ссылка), Объект.ИмяОбъекта, Объект.Ссылка.ИмяОбъекта);
	
	// Подключение и получение имени, под которым объект будет подключаться
	Менеджер = ?(ПараметрыРегистрации.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
	Результат.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресДанныхОбработки, , ИСТИНА));
	
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе
	Если Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		// Проверка имени
		ТекстЗапроса = "ВЫБРАТЬ ДОиО.Ссылка,
		|	ДОиО.Представление
		|ИЗ Справочник.ДополнительныеОтчетыИОбработки КАК ДОиО
		|ГДЕ ДОиО.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ДОиО.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ДОиО.ПометкаУдаления = ЛОЖЬ
		|	И ДОиО.Ссылка <> &Ссылка";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(ВидДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(ВидОтчет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбъекта",     Результат.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "ДОиО.Вид В (&ВидыДопОтчетов)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "НЕ ДОиО.Вид В (&ВидыДопОтчетов)");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(ИСТИНА);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Результат.ИмяОбъектаЗанято = ИСТИНА;
			Результат.Конфликтующие = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из Конфликтующие Цикл
				Результат.Конфликтующие.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Представление);
			КонецЦикла; 
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Получение сведений о внешней обработке
	ВнешнийОбъект = Менеджер.Создать(Результат.ИмяОбъекта);
	
	Попытка
		РегистрационныеДанные = ВнешнийОбъект.СведенияОВнешнейОбработке();
	Исключение
		Префикс = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В файле нет сведений о внешней обработке") + ": СведенияОВнешнейОбработке()";
		Результат.КраткоеПредставлениеОшибки = Префикс;
		
		РегистрационныеДанные = Новый Структура("Вид", "ДополнительнаяОбработка"); 
		РегистрационныеДанные.Вставить("Наименование", "");
		РегистрационныеДанные.Вставить("Версия", "");
		РегистрационныеДанные.Вставить("БезопасныйРежим", Объект.БезопасныйРежим);
		РегистрационныеДанные.Вставить("Информация", "");
		РегистрационныеДанные.Вставить("ЗапускатьМодально", Объект.ЗапускатьМодально);
		
		КомандаОткрытия = Новый Структура("Идентификатор, Представление, Модификатор, ПоказыватьОповещение, Использование", , , , , "ОткрытиеФормы");
		МассивКоманд = Новый Массив;
		МассивКоманд.Добавить(КомандаОткрытия);
		РегистрационныеДанные.Вставить("Команды", МассивКоманд);
		
		// я разрешаю
		//Возврат Результат;
	КонецПопытки;
	
	Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И Вид <> Объект.Вид Тогда
		
		Результат.КраткоеПредставлениеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно сменить вид существующего дополнительного отчета или обработки.");
		Возврат Результат;
		
	ИначеЕсли ПараметрыРегистрации.ЭтоОтчет <> (Вид = ВидДополнительныйОтчет ИЛИ Вид = ВидОтчет) Тогда
		Результат.КраткоеПредставлениеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид обработки, указанный в сведениях о внешней обработке, не соответствует её расширению.");
		Возврат Результат;
	КонецЕсли;
	
	Если ПустаяСтрока(РегистрационныеДанные.Наименование) Тогда
		
		Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
			РегистрационныеДанные.Наименование = Объект.Наименование;
		Иначе
			Если ПараметрыРегистрации.ЭтоОтчет Тогда
				РегистрационныеДанные.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет");
			Иначе
				РегистрационныеДанные.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработка");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация сведений об обработке
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Наименование    = РегистрационныеДанные.Наименование;
	ТекущийОбъект.Версия          = РегистрационныеДанные.Версия;
	ТекущийОбъект.БезопасныйРежим = РегистрационныеДанные.БезопасныйРежим;
	ТекущийОбъект.Информация      = РегистрационныеДанные.Информация;
	ТекущийОбъект.ИмяФайла        = ПараметрыРегистрации.ИмяФайла;
	ТекущийОбъект.ИмяОбъекта      = Результат.ИмяОбъекта;
	
	Если РегистрационныеДанные.Свойство("ЗапускатьМодально") Тогда
		ТекущийОбъект.ЗапускатьМодально = РегистрационныеДанные.ЗапускатьМодально;		
	КонецЕсли;	
	
	ТекущийОбъект.ИспользуетХранилищеВариантов = Ложь;
	Если Вид = ВидДополнительныйОтчет Тогда
		Если Метаданные.ХранилищеВариантовОтчетов <> Неопределено 
			И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов" Тогда
			
			ТекущийОбъект.ИспользуетХранилищеВариантов = ИСТИНА;
		Иначе
			ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
			Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено
				И ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя = "ХранилищеВариантовОтчетов" Тогда
				
				ТекущийОбъект.ИспользуетХранилищеВариантов = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		ИЛИ ТекущийОбъект.ИмяОбъекта <> Результат.ИмяОбъекта 
		ИЛИ ТекущийОбъект.Вид <> Вид Тогда
		
		ТекущийОбъект.Назначение.Очистить();
		ТекущийОбъект.Вид = Вид;
	КонецЕсли;
	
	Если ТекущийОбъект.Назначение.Количество() = 0
		И Вид <> ВидДополнительныйОтчет
		И Вид <> ВидДополнительнаяОбработка Тогда
		
		ТекущийОбъект.ИспользоватьДляФормыОбъекта = ИСТИНА;
		ТекущийОбъект.ИспользоватьДляФормыСписка  = ИСТИНА;
		
		ПолноеНазначениеЗначение = ОбщийМодульСервисСервер.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ТекущийОбъект.Вид);
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			
			Для Каждого ЭлементЗаданноеНазначение Из РегистрационныеДанные.Назначение Цикл
				
				РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементЗаданноеНазначение, ".");
				
				Если РазделеннаяСтрока[1] = "*" Тогда
					
					НайденныеНазначения = ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("Класс", РазделеннаяСтрока[0]));
					
					Для Каждого ЭлементНайденноеНазначение Из НайденныеНазначения Цикл
						НоваяСтрока = ТекущийОбъект.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементНайденноеНазначение.ПолноеИмяОбъектаМетаданных;
					КонецЦикла;
					
				Иначе
					
					Если ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементЗаданноеНазначение)).Количество() > 0 Тогда
						НоваяСтрока = ТекущийОбъект.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементЗаданноеНазначение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ТекущийОбъект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");		
		ЗначениеВРеквизитФормы(ПолноеНазначениеЗначение, "ПолноеНазначение");
		
	КонецЕсли;
	
	КомандыСохраненные = ТекущийОбъект.Команды.Выгрузить();
	
	ТекущийОбъект.Команды.Очистить();
	
	// Инициализация команд	
	Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
		
		НоваяСтрока = ТекущийОбъект.Команды.Добавить();
		НоваяСтрока.Идентификатор        = ЭлементОписаниеКоманды.Идентификатор;
		НоваяСтрока.Представление        = ЭлементОписаниеКоманды.Представление;
		НоваяСтрока.Модификатор          = ЭлементОписаниеКоманды.Модификатор;
		НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
		
		Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для команды") + " " +ЭлементОписаниеКоманды.Представление + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не определен способ запуска.");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	УстановитьЭлементыФормы(ИСТИНА);	
	ЗаполнитьКоманды(КомандыСохраненные);
	
	Результат.Успешно = ИСТИНА;
	РегистрацияОбработки = ИСТИНА;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КомандыОбработкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяТекущегоЭлемента = "КомандыИспользование" ИЛИ ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
		
		Если НЕ ТекущиеДанные.Разрешено Тогда
			
			Отказ = ИСТИНА;
			ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команда используется только на клиенте.") + Символы.ПС +
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Регламентное задание можно настраивать только для команд исполняемых в серверном контексте."));
			Возврат;
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
			Отказ = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.Использование ИЛИ ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
			УстановитьРасписание(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоЭлемента = "БыстрыйДоступПредставление" Тогда
		
		НастроитьБыстрыйДоступОбщийОбработчик(Элемент.ТекущиеДанные);
		Отказ = ИСТИНА;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйДоступККоманде(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные)
	
	Идентификатор = ТекущиеДанные.Идентификатор;
	
	ТекущиеДанныеЭлементКоллекции = КомандыОбработки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	Результат = ОткрытьФормуМодально("Справочник.ДополнительныеОтчетыИОбработки.Форма.БыстрыйДоступКДополнительнымОтчетамИОбработкам",
	Новый Структура("ПользователиСБыстрымДоступом, ПредставлениеКоманды", 
	ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа,
	ТекущиеДанные.Представление));
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Очистить();
		Для Каждого ЭлементПользователь Из Результат Цикл
			ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Добавить(ЭлементПользователь.Значение);
		КонецЦикла;
		Модифицированность = ИСТИНА;
	КонецЕсли;
	
	ТекущиеДанныеЭлементКоллекции.БыстрыйДоступПредставление = ПредставлениеБыстрогоДоступаПользователей(ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеКоманды(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Разрешено Тогда
		УстановитьРасписание(ТекущиеДанные);
	Иначе
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команда используется только на клиенте.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Регламентное задание можно настраивать только для команд исполняемых в серверном контексте."));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		Объект.Назначение.Очистить();
		
		Для Каждого ЭлементПараметр Из Параметр Цикл
			
			НайденныеСтроки = ПолноеНазначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементПараметр.Значение));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НовоеНазначение = Объект.Назначение.Добавить();
				НовоеНазначение.ПолноеИмяОбъектаМетаданных = ЭлементПараметр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ (Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет) Тогда
		
		Если НЕ Объект.ИспользоватьДляФормыОбъекта И НЕ Объект.ИспользоватьДляФормыСписка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Необходимо указать использование обработки, как минимум для одной формы"), , , "Объект.ИспользоватьДляФормыОбъекта", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариант()
	
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Вариант.Ссылка) Тогда
		ПоказатьПредупреждение(Неопределено, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вариант отчета") + " " + Вариант.Наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не зарегистрирован."));
	Иначе
		ПоказатьЗначение(Неопределено, Вариант.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   ОткрытьДиалогДляЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации = Неопределено)
	
	Если ПараметрыРегистрации = Неопределено Тогда
		
		ПараметрыРегистрации = Новый Структура("ИмяФайла, ЭтоОтчет, ОтключатьКонфликтующие, Конфликтующие");
		ПараметрыРегистрации.ИмяФайла = "";
		ПараметрыРегистрации.ЭтоОтчет = Неопределено;
		ПараметрыРегистрации.ОтключатьКонфликтующие = Ложь;
		ПараметрыРегистрации.Конфликтующие = Новый СписокЗначений;
		
		ВыбранноеИмяФайла = "";
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогОткрытияФайла.ПолноеИмяФайла = "*.*";//Объект.ИмяФайла;
			ДиалогОткрытияФайла.Фильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние отчеты и обработки") + " (*.epf, *.erf)|*.epf;*.erf|" +
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние отчеты") + " (*.epf)|*.erf|" +
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внешние обработки") + " (*.epf)|*.erf";
			
			ДиалогОткрытияФайла.ИндексФильтра = ?(Объект.Ссылка.Пустая(), 0, ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2));
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите дополнительный отчет или обработку");
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещенныеФайлы = Новый Массив;
			
			Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ДиалогОткрытияФайла, ИСТИНА, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			АдресДанныхОбработки = ПомещенныеФайлы[0].Хранение;
			ВыбранноеИмяФайла = ПомещенныеФайлы[0].Имя;
			
		Иначе
			
			Если НЕ ПоместитьФайл(АдресДанныхОбработки, , ВыбранноеИмяФайла, ИСТИНА, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
		ПараметрыРегистрации.ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
		РасширениеФайла = ВРег(Прав(ПараметрыРегистрации.ИмяФайла, 3));
		
		Если РасширениеФайла = "ERF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = ИСТИНА;
		ИначеЕсли РасширениеФайла = "EPF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Ложь;
		Иначе
			Предупреждение(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF)."));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов сервера
	РезультатРегистрации = ЗарегистрироватьОбработку(ПараметрыРегистрации);
	
	// Обработка результата работы сервера
	Если РезультатРегистрации.Успешно = ИСТИНА Тогда
		
		Модифицированность = ИСТИНА;
		ПоказатьОповещениеПользователя(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл обработки успешно загружен"), 
		?(Не ЗначениеЗаполнено(Объект.Ссылка), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)), 
		ПараметрыРегистрации.ИмяФайла
		);
		Возврат ИСТИНА;
		
	КонецЕсли;
	
	// Разбор причины отказа загрузки обработки и отображение информации пользователю
	Если РезультатРегистрации.ИмяОбъектаЗанято = Ложь Тогда
		
		// Причина отказа в КраткоеПредставлениеОшибки
		Предупреждение(РезультатРегистрации.КраткоеПредставлениеОшибки);
		Возврат Ложь;
		
	Иначе		
		ЗаголовокВопроса = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Имя объекта занято");
		
		// Представление занявших объектов
		КоличествоКонфликтующих = РезультатРегистрации.Конфликтующие.Количество();
		ПредставлениеЗанявших = "";
		
		Для Каждого ЭлементСписка Из РезультатРегистрации.Конфликтующие Цикл
			
			ПредставлениеЗанявших = ПредставлениеЗанявших 
			+ ?(ПредставлениеЗанявших = "", "", ", ")
			+ СокрЛП(ЭлементСписка.Представление);
			Если СтрДлина(ПредставлениеЗанявших) > 80 Тогда
				ПредставлениеЗанявших = Лев(ПредставлениеЗанявших, 70) 
				+ "... ("
				+ Формат(КоличествоКонфликтующих, "ЧН=0; ЧГ=")
				+ " "
				+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт") 
				+ ")";
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		ТекстВопроса = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Имя") + " " + РезультатРегистрации.ИмяОбъекта +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже занято другими дополнительными отчетами (обработками)") + ": " + Символы.ПС + 		
		ПредставлениеЗанявших + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступные действия") + ": " + Символы.ПС +
		"1. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продолжить загрузку, отключив Публикацию текущего отчета (обработки).") + Символы.ПС +
		"2. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отключить конфликтующие - продолжить загрузку, отключив Публикацию отчетов (обработок), конфликтующих с загружаемой по имени.") + Символы.ПС +
		"3. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Показать конфликтующие - отменить загрузку и показать список отчетов (обработок), конфликтующих с загружаемой по имени.") + Символы.ПС +
		"4. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отменить загрузку.");
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(1, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продолжить"));
		КнопкиВопроса.Добавить(2, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отключить конфликтующие"));
		КнопкиВопроса.Добавить(3, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Показать конфликтующие"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, КнопкиВопроса, , 1, ЗаголовокВопроса);
		Если Ответ = 1 Тогда
			
			// Продолжить
			Объект.Публикация = ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки");
			
			// Повторный вызов сервера (публикация в режиме отладки) и обработка результата
			Возврат ОткрытьДиалогДляЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
		ИначеЕсли Ответ = 2 Тогда
			
			// Отключить конфликтующие
			ПараметрыРегистрации.ОтключатьКонфликтующие = ИСТИНА;
			ПараметрыРегистрации.Конфликтующие = РезультатРегистрации.Конфликтующие;
			
			// Повторный вызов сервера (с переводом конфликтующих в режим отладки) и обработка результата
			РезультатВторогоЗахода = ОткрытьДиалогДляЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
			// Отключается несколько объектов, потому динамические списки надо обновить
			ОповеститьОбИзменении(Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			
			// Возврат результата вызывающему коду
			Возврат РезультатВторогоЗахода;
			
		ИначеЕсли Ответ = 3 Тогда
			
			// Показать конфлиткующие (отмена далее)
			Если КоличествоКонфликтующих = 1
				И (
				Не ЗначениеЗаполнено(Объект.Ссылка) 
				ИЛИ РезультатРегистрации.СтароеИмяОбъекта <> РезультатРегистрации.ИмяОбъекта
				) Тогда
				
				ПоказатьЗначение(Неопределено, РезультатРегистрации.Конфликтующие[0].Значение);
				
			Иначе
				
				// Форма списка с отбором по конфликтующим
				ПараметрыСписка = Новый Структура("Отбор, Заголовок, Отображение");
				ПараметрыСписка.Отбор = Новый Структура("ИмяОбъекта, ЭтоГруппа", РезультатРегистрации.ИмяОбъекта, Ложь);
				ПараметрыСписка.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительные отчеты и обработки с именем объекта") + " " + РезультатРегистрации.ИмяОбъекта;
				ПараметрыСписка.Отображение = "Список";
				ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка", ПараметрыСписка, , ИСТИНА);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Отменить загрузку
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияОбработки Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДанныхОбработки);
		ТекущийОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки , Новый СжатиеДанных(9));
		РегистрацияОбработки = Ложь;
	КонецЕсли;
	
	Если ТекущийОбъект.Вид = ВидДополнительнаяОбработка 
		ИЛИ ТекущийОбъект.Вид = ВидДополнительныйОтчет Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КомандыОбработки", РеквизитФормыВЗначение("КомандыОбработки"));		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьФильтрПоОбъектамМетаданных(Знач ВидОбработки)
	
	ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
	
	//	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
	////		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	//	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
	////		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	////	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
	////		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	//	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
	////		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	//	КонецЕсли;
	//	
	//	Для Каждого ТипПараметраКоманды Из ОбщаяКоманда.ТипПараметраКоманды.Типы() Цикл
	//		ФильтрПоОбъектамМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипПараметраКоманды).ПолноеИмя());
	//	КонецЦикла;
	
	Возврат ФильтрПоОбъектамМетаданных;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ФормаВыполнить.Видимость = ИСТИНА;
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьЭлементыФормы();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция   ПредставлениеБыстрогоДоступаПользователей(Знач КоличествоПользователей)
	
	Если КоличествоПользователей = 0 Тогда
		Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команды нет в быстром доступе");
	КонецЕсли;
	
	ПоследняяЦифра = КоличествоПользователей - 10 * Цел(КоличествоПользователей / 10);
	
	Если ПоследняяЦифра = 1 Тогда
		БыстрыйДоступПредставление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("пользователь");
	ИначеЕсли ПоследняяЦифра = 2 Или ПоследняяЦифра = 3 Или ПоследняяЦифра = 4 Тогда
		БыстрыйДоступПредставление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("пользователя");
	Иначе
		БыстрыйДоступПредставление = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("пользователей");
	КонецЕсли;
	
	БыстрыйДоступПредставление = "" + Формат(КоличествоПользователей, "ЧГ=0") + БыстрыйДоступПредставление;
	
	Возврат БыстрыйДоступПредставление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция   ПредставлениеОтключенногоРасписания()	
	Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расписание не задано");	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция   ПредставлениеПустогоРасписания()	
	Возврат Строка(Новый РасписаниеРегламентногоЗадания);	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ОткрытьДиалогДляЗагрузкиФайлаОбработкиОтчета(ИСТИНА) Тогда
			Отказ = ИСТИНА;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Элементы.ФормаВыполнить.Видимость = ЗначениеЗаполнено(Объект.Ссылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("001150", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Элементы.ПредупреждениеОбработкиОНебезопасномРежиме.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание! Обработка требует разрешить использование в небезопасном режиме.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Более подробно о небезопасном режиме см. информацию в справке к форме.");
		
		Элементы.ВариантыИнформационнаяНадпись.Заголовок =
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для просмотра и изменения вариантов") + Символы.ПС + 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("необходимо записать дополнительный отчет,") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("указав в поле публикация используется.");
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
			Возврат;
		КонецЕсли;
		
		ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
		ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
		
		РегистрацияОбработки = Ложь;
		
		ЗаполнитьКоманды();		
		УстановитьЭлементыФормы(); 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	АдресДанныхОбработки = ПоместитьВоВременноеХранилище(ТекущийОбъект.ХранилищеОбработки.Получить(), УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВРазделах(Команда)
	
	МассивВариантов = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ВариантыДополнительногоОтчета.ВыделенныеСтроки Цикл
		Вариант = ВариантыДополнительногоОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Вариант.Ссылка) Тогда
			МассивВариантов.Добавить(Вариант.Ссылка);
		КонецЕсли;
	КонецЦикла;
	//СтандартныеПодсистемыКлиентПереопределяемый.ОткрытьДиалогРазмещенияВариантовДополнительныхОтчетовВРазделах(МассивВариантов);
	
КонецПроцедуры

&НаКлиенте
Функция   РедактированиеРасписанияРегламентногоЗадания(Знач Расписание)
	
	Если Расписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Если Диалог.ОткрытьМодально() Тогда
		Расписание = Диалог.Расписание;
	КонецЕсли;
	
	Возврат Расписание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВариантДополнительногоОтчета(КлючОбъекта, КлючВарианта)
	ХранилищаНастроек["ХранилищеВариантовОтчетов"].Удалить(КлючОбъекта, КлючВарианта, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УказатьНазначениеОбработки(Команда)
	
	ФильтрПоОбъектамМетаданных = ПолучитьФильтрПоОбъектамМетаданных(Объект.Вид);
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	
	Для Каждого ЭлементНазначение Из Объект.Назначение Цикл
		ВыбранныеОбъектыМетаданных.Добавить(ЭлементНазначение.ПолноеИмяОбъектаМетаданных);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", ФильтрПоОбъектамМетаданных);
	ПараметрыФормы.Вставить("ВыбранныеОбъектыМетаданных", ВыбранныеОбъектыМетаданных);
	ПараметрыФормы.Вставить("Заголовок", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Назначение дополнительной обработки"));
	
	//	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьРазделыКомандногоИнтерфейса(Команда)
	
	Разделы = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Объект.Разделы Цикл
		Разделы.Добавить(СтрокаТаблицы.Раздел);
	КонецЦикла;
	
	СписокРазделов = Неопределено;
	
	ОткрытьФорму(
	"Справочник.ДополнительныеОтчетыИОбработки.Форма.ПодборРазделов",
	Новый Структура("Разделы,ВидОбработки", Разделы, Объект.Вид)
	,,,,, Новый ОписаниеОповещения("УказатьРазделыКомандногоИнтерфейсаЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьРазделыКомандногоИнтерфейсаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СписокРазделов = Результат;
	
	Если ТипЗнч(СписокРазделов) = Тип("СписокЗначений") Тогда
		Объект.Разделы.Очистить();
		Для Каждого ЭлементСписка Из СписокРазделов Цикл
			НоваяСтрока = Объект.Разделы.Добавить();
			НоваяСтрока.Раздел = ЭлементСписка.Значение;
		КонецЦикла;
		Модифицированность = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписание(ТекущиеДанные)
	
	Если ТекущиеДанные.Расписание.Количество() > 0 Тогда
		Расписание = ТекущиеДанные.Расписание.Получить(0).Значение;
	Иначе
		Расписание = Неопределено;
	КонецЕсли;
	
	Расписание = РедактированиеРасписанияРегламентногоЗадания(Расписание);
	
	ТекущиеДанные.Расписание.Очистить();
	ТекущиеДанные.Расписание.Добавить(Расписание);
	
	ТекущиеДанные.РасписаниеПредставление = Строка(Расписание);
	
	Если ТекущиеДанные.РасписаниеПредставление = ПредставлениеПустогоРасписания() Тогда
		ТекущиеДанные.РасписаниеПредставление = ПредставлениеОтключенногоРасписания();
		ТекущиеДанные.Использование = Ложь;
		Модифицированность = ИСТИНА;
	Иначе
		ТекущиеДанные.Использование = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормы(Знач Регистрация = Ложь)
	
	Если НЕ Регистрация 
		И ЗначениеЗаполнено(Объект.Ссылка) 
		И (Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет) Тогда
		
		ВариантыДополнительногоОтчетаЗаполнить();
	Иначе
		ВариантыДополнительногоОтчета.Очистить();
	КонецЕсли;
	
	Если Объект.Вид = ВидДополнительныйОтчет И Объект.ИспользуетХранилищеВариантов Тогда
		
		Элементы.СтраницыВариантыКоманды.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницыВариантыКоманды.ТекущаяСтраница    = Элементы.СтраницаВарианты;
		
		КоличествоВариантов = ВариантыДополнительногоОтчета.Количество();
		Если Регистрация ИЛИ КоличествоВариантов = 0 Тогда
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыСкрытьДоЗаписи;
			Элементы.СтраницаВарианты.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Варианты отчета");
		Иначе
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыПоказать;
			Элементы.СтраницаВарианты.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Варианты отчета") + " (" + Формат(КоличествоВариантов, "ЧГ=") + ")";
		КонецЕсли;
		
		КоличествоКоманд = Объект.Команды.Количество();
		Если КоличествоКоманд = 0 Тогда
			Элементы.СтраницаКоманды.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команды");
		Иначе
			Элементы.СтраницаКоманды.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команды") + " (" + Формат(КоличествоКоманд, "ЧГ=") + ")";
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыВариантыКоманды.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницыВариантыКоманды.ТекущаяСтраница    = Элементы.СтраницаКоманды;
	КонецЕсли;
	
	
	Если Регистрация 
		ИЛИ ЗначениеЗаполнено(Объект.Ссылка)Тогда
		
		Если Объект.Вид = ВидДополнительнаяОбработка 
			ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
			
			Элементы.КомандыРасписание.Видимость = ИСТИНА ИЛИ ПравоДобавления;
			Элементы.КомандыИспользование.Видимость = ИСТИНА ИЛИ ПравоДобавления;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница = Элементы.СтраницаРазделы;
			
		ИначеЕсли НЕ (Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
			ИЛИ Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет) Тогда
			
			Элементы.КомандыРасписание.Видимость = Ложь;
			Элементы.КомандыИспользование.Видимость = Ложь;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница = Элементы.СтраницаНазначение;
			
			Элементы.КомандыОбработкиНастроитьБыстрыйДоступККоманде.Видимость = Ложь;
			Элементы.КомандыОбработкиНастроитьРасписаниеКоманды.Видимость = Ложь;
			
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.БыстрыйДоступПредставление.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.БезопасныйРежим Тогда
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаИнформацияОтчета;
			Иначе
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаИнформацияОбработки;
			КонецЕсли;
		Иначе
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаПредупреждениеОтчета;
			Иначе
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаПредупреждениеОбработки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный отчет (создание)");
			Иначе
				Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительная обработка (создание)");
			КонецЕсли;
		Иначе
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Заголовок = Объект.Наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("(Дополнительный отчет)");
			Иначе
				Заголовок = Объект.Наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("(Дополнительная обработка)");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
