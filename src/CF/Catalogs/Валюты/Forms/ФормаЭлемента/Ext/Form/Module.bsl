//sza141215-0051 ПараметрыСуммыПрописью
//sza141111-1337
//sza140428-2156  
//sza131007-1623  
&НаКлиенте
Процедура КурсыЭтойВалютыПриИзменении(Элемент)
	
	ПроверитьЗаписанныйОбъект();
	ПроверитьЗаписанныйОбъектНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование  = Наименование;
	НаименованиеИзменяли = ИСТИНА;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаСервереБезКонтекста
Функция   НетКурсов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КурсыВалютСрезПоследних.Курс
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Ссылка) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроверитьЗаписанныйОбъектНаКлиенте();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
	
	Если НЕ Объект.Предопределенный
		И НетКурсов(Объект.Ссылка) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание. Не следует использовать данную валюту, пока у нее нет курса!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьЗаписанныйОбъект();
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			Для Каждого СтрокаЯзыка Из ПараметрыСуммыПрописиНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "ПараметрыСуммыПрописью", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПримераПрописи.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	ПроверитьЗаписанныйОбъектНаКлиенте();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
	ПересчитатьСуммуПрописью();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000950", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(Объект.Ссылка);
		
		Элементы.КурсыЭтойВалюты.Видимость = НЕ Объект.Предопределенный ;
		Элементы.ТекущийКурс.Видимость = НЕ Объект.Предопределенный ;
		
		ПроверитьЗаписанныйОбъект();
		
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполненоОбъектСсылка тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Объект.Ссылка);
			ПараметрыСуммыПрописью = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Объект.Ссылка, "ПараметрыСуммыПрописью");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Поле = "ПараметрыСуммыПрописью" Тогда
						СтрокаЯзыка = ПараметрыСуммыПрописиНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;			
		КонецЕсли;
		
		Элементы.ГруппаПримераПрописи.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаписанныйОбъект()
	
	ЗначениеЗаполненоОбъектСсылка 		= НЕ Объект.Предопределенный И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.КурсыЭтойВалюты.Видимость 	= ЗначениеЗаполненоОбъектСсылка;
	Элементы.ТекущийКурс.Видимость 		= ЗначениеЗаполненоОбъектСсылка;
	
	ТекущийКурс = ОбщийМодульПовтор.ПолучитьТекущийКурс(Объект.Ссылка);
	
КонецПроцедуры //ПроверитьЗаписанныйОбъект

&НаКлиенте
Процедура ПроверитьЗаписанныйОбъектНаКлиенте()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));		
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	КурсыЭтойВалюты.Отбор,
	"Валюта",
	ЗначениеОтбора,
	ВидСравненияКомпоновкиДанных.Равно,
	,
	ИСТИНА
	);
	Элементы.КурсыЭтойВалюты.Обновить();	
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеЗависимыеЦеныНаСервере()
	ОбщийМодульСервер.РассчитатьВсеЗависимыеЦеныПриСменеКурса(Объект.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьВсеЗависимыеЦены(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350");	
		
		Если НЕ ОТказ 
			И ЕстьЗависимыеЦены(Объект.Ссылка)
			И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Есть Зависимые цены по этой валюте.") + символы.пс + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рассчитать все зависимые цены по этой валюте?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет всех зависимых цен.."));
			ПересчитатьВсеЗависимыеЦеныНаСервере();
			
		КонецЕсли;
		
		глПроверятьСообщения = ИСТИНА;             	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйКурсНаДату(Команда)
	
	ПараметрыФормы = Новый Структура("Валюта", Объект.Ссылка);
	ФормаКурса = получитьформу("РегистрСведений.КурсыВалют.ФормаЗаписи", ПараметрыФормы);
	ФормаКурса.открыть();
	
КонецПроцедуры

&НаСервере
Функция   ЕстьЗависимыеЦены(Знач Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	Цены.Цена
	               |ИЗ
	               |	РегистрСведений.Цены КАК Цены
	               |ГДЕ
	               |	Цены.Цена <> 0
	               |	И Цены.ВидЦен.Зависимая = ИСТИНА
	               |	И Цены.ВидЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	Цены.Цена
	               |ИЗ
	               |	РегистрСведений.Цены КАК Цены
	               |ГДЕ
	               |	Цены.Цена <> 0
	               |	И Цены.ВидЦен.Зависимая = ИСТИНА
	               |	И Цены.ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	Цены.Цена
	               |ИЗ
	               |	РегистрСведений.Цены КАК Цены
	               |ГДЕ
	               |	Цены.Цена <> 0
	               |	И Цены.ВидЦен.Зависимая = ИСТИНА
	               |	И Цены.ВидЦен.ТаблицаЗависимости.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены";

	Запрос.УстановитьПараметр("ВалютаЦены", Валюта);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПараметрыСуммыПрописьюПриИзменении(Элемент)
	
	Объект.ПараметрыСуммыПрописью = ПараметрыСуммыПрописью;
	НаименованиеИзменяли = ИСТИНА;
	ПересчитатьСуммуПрописью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСуммыПрописиНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСуммыПрописиНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСуммыПрописиНаДругихЯзыках(Команда)
	Элементы.ПараметрыСуммыПрописиНаДругихЯзыках.Видимость  = НЕ Элементы.ПараметрыСуммыПрописиНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСуммыПрописьюОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыСуммыПрописьюОткрытиеНаСервере();
	ПересчитатьСуммуПрописью();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыСуммыПрописьюОткрытиеНаСервере()
	
	ПараметрыСуммыПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(1, Объект.Ссылка, , ИСТИНА);
	Объект.ПараметрыСуммыПрописью = ПараметрыСуммыПрописью;
	НаименованиеИзменяли = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСуммыПрописьюОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ПараметрыСуммыПрописью = "";
	Объект.ПараметрыСуммыПрописью = "";
	НаименованиеИзменяли = ИСТИНА;	
	ПересчитатьСуммуПрописью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерСуммыПрописьюПриИзменении(Элемент)
	ПересчитатьСуммуПрописью();
КонецПроцедуры

&НаКлиенте
Процедура ПримерСуммыПрописьюОчистка(Элемент, СтандартнаяОбработка)
	ПересчитатьСуммуПрописью();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПрописью()
	ТекстСуммыПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(ПримерСуммыПрописью, Объект.Ссылка, , , ПараметрыСуммыПрописью);
КонецПроцедуры
