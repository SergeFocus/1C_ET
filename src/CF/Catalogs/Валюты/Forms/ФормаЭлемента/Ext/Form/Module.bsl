//sza140428-2156 SZA: 
//sza131007-1623  

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                         // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, Истина);
	ПроверитьЗаписанныйОбъектНаКлиенте();
	если не ЗначениеЗаполнено(объект.Ссылка) Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.Наименование;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
процедура ПроверитьЗаписанныйОбъектНаКлиенте()
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));		
	
	ОбщийМодульКлиент.УстановитьЭлементОтбора(
	КурсыЭтойВалюты.Отбор,
	"Валюта",
	ЗначениеОтбора,
	ВидСравненияКомпоновкиДанных.Равно,
	,
	Истина
	);
	Элементы.КурсыЭтойВалюты.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()                                              // ПРИ ЗАКРЫТИИ
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("000950", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
	ЗначениеЗаполненоОбъектСсылка = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.КурсыЭтойВалюты.Видимость = НЕ Объект.Предопределенный ;
	Элементы.ТекущийКурс.Видимость = НЕ Объект.Предопределенный ;
	
	ПроверитьЗаписанныйОбъект();
	
	ПоддержкаДругихЯзыков = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", Истина);
	
	если ПоддержкаДругихЯзыков 
		и ЗначениеЗаполненоОбъектСсылка тогда
		
		Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(объект.Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЗначенияНаДругихЯзыках.Язык,
		|	ЗначенияНаДругихЯзыках.НаЯзыке,
		|	ЗначенияНаДругихЯзыках.Поле
		|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
		|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
		
		Запрос.УстановитьПараметр("ОбъектБазыДанных", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
					СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
					СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
					СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	иначе
		Наименование = объект.Наименование;
		
	КонецЕсли;		
				КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьЗаписанныйОбъект();
	
	если ПоддержкаДругихЯзыков тогда
		если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсыЭтойВалютыПриИзменении(Элемент)
	
	ПроверитьЗаписанныйОбъект();
	ПроверитьЗаписанныйОбъектНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаписанныйОбъект()
	
	ЗначениеЗаполненоОбъектСсылка 		= НЕ Объект.Предопределенный И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.КурсыЭтойВалюты.Видимость 	= ЗначениеЗаполненоОбъектСсылка;
	Элементы.ТекущийКурс.Видимость 		= ЗначениеЗаполненоОбъектСсылка;
	
	ТекущийКурс = ОбщийМодульПовтор.ПолучитьТекущийКурс(Объект.Ссылка);
	
КонецПроцедуры //ПроверитьЗаписанныйОбъект

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПроверитьЗаписанныйОбъектНаКлиенте();
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = Истина;
	
	Если не объект.Предопределенный
		и НетКурсов(Объект.Ссылка) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внимание. Не следует использовать данную валюту, пока у нее нет курса!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   НетКурсов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КурсыВалютСрезПоследних.Курс
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Ссылка) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	объект.Наименование  = Наименование;
	НаименованиеИзменяли = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйКурсНаДату(Команда)
	
	ПараметрыФормы = Новый Структура("Валюта", Объект.Ссылка);
	ФормаКурса = получитьформу("РегистрСведений.КурсыВалют.ФормаЗаписи", ПараметрыФормы);
	ФормаКурса.открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьВсеЗависимыеЦены(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002350");	
		
		Если НЕ ОТказ 
			И ЕстьЗависимыеЦены(Объект.Ссылка) 
			и Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Есть Зависимые цены!") + символы.пс + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Рассчитать все зависимые цены по этой валюте?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расчет всех зависимых цен.."));
			РассчитатьВсеЗависимыеЦены();
			
		КонецЕсли;
		
		глПроверятьСообщения = Истина;             	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВсеЗависимыеЦены()	
	ОбщийМодульСервер.РассчитатьВсеЗависимыеЦеныПриСменеКурса(Объект.Ссылка);	
КонецПроцедуры

&НаСервере
Функция   ЕстьЗависимыеЦены(Знач Валюта) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Цена
		|ИЗ РегистрСведений.Цены КАК Цены
		|ГДЕ Цены.Цена <> 0
		|	И Цены.ВидЦен.Зависимая = Истина
		|	И Цены.ВидЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены";

	Запрос.УстановитьПараметр("ВалютаЦены", Валюта);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции
