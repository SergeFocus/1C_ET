// sza150518-0236 
// sza150420-0053 
// sza150403-0239 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002455", ЭтаФорма, Отказ, Объект);
	
	Если НЕ Отказ Тогда
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
			ОбщийМодульСервер.ПеревестиРеквизитыФормы(ЭтаФорма);	
		КонецЕсли;
		
		ОбъектСсылка = Объект.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПечатнаяФорма)
			И ЗначениеЗаполнено(Параметры.ПечатнаяФорма) Тогда
			
			Объект.ПечатнаяФорма = Параметры.ПечатнаяФорма;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ШиринаКолонокЗаданаМакетом = ИСТИНА;
		КонецЕсли;
		
		Элементы.ПрограммируемыеПараметры.Видимость = Объект.ИспользоватьПрограммируемыеПараметры;	
		Элементы.СтраницаПрограммы.Видимость 		= Объект.ИспользоватьПрограммируемыеПараметры;
		
		Рекомендации = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Необходимо строго соблюдать установленые программные имена областей и параметров.");
		Рекомендации = Рекомендации + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Некоторые параметры являются ссылками на объекты базы данных.");
		Рекомендации = Рекомендации + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для них можно обратиться к реквизитам через точку.");
		
		Элементы.Рекомендации.Заголовок    = Рекомендации;
		Элементы.ЗадатьДляПечати.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
		
		Элементы.ДвусторонняяПечать.СписокВыбора.Добавить("Нет", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет"));
		Элементы.ДвусторонняяПечать.СписокВыбора.Добавить("ПереворотВверх", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переворот вверх"));
		Элементы.ДвусторонняяПечать.СписокВыбора.Добавить("ПереворотВлево", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переворот влево"));
		
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеЧисло";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число (по умолчанию = 0)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеЧисло2";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число (по умолчанию = 0)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеЧисло3";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число (по умолчанию = 0)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеСтрока";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строка");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеДата";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата (по умолчанию пустая)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеСсылка";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Любая ссылка");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеБулево";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Булево");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеМассив";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Массив данных");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеТаблицаЗначений";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таблица значений");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеСписок";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список значений");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "СтрокаТаблицыОбъекта";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строка таблицы объекта");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ВПП.Ссылка";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект печати");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеЧисло4";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число (по умолчанию = 0)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеЧисло5";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число (по умолчанию = 0)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеСтрока2";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строка");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеДата2";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата (по умолчанию пустая)");
		СтрокаОписанияПеременнойДляПрограмм = ПеременныеДляПрограмм.Добавить();
		СтрокаОписанияПеременнойДляПрограмм.ПеременнаяПрограммы = "ЗначениеСсылка2";
		СтрокаОписанияПеременнойДляПрограмм.ОписаниеПеременной = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Любая ссылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	ОбновитьОписание();
	ОбновитьВидимостьЭлементовХранилища();
	
	Если Объект.ИспользоватьОтступыМасштабИПринтер Тогда
		ОбновитьИменаПринтеров();
		ЗаполнитьРазмерыСтраницы();
	КонецЕсли;
	
	ВсегоЭтикетокНаЛисте = Объект.ЧислоЭтикетокНаЛистеПоВертикали * Объект.ЧислоЭтикетокНаЛистеПоГоризонтали;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Объект.ФормаВБазеДанных
		И ПустаяСтрока(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы) Тогда
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печатная форма не загружена, ссылка на неё не указана!"), , Объект.Ссылка);
		
		Объект.НеАктуально = ИСТИНА;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовХранилища()
	
	Элементы.ГруппаФайлВБазе.Видимость 	   = Объект.ФормаВБазеДанных;
	Элементы.ГруппаВнешняяСсылка.Видимость = НЕ Объект.ФормаВБазеДанных;
	Элементы.ОткрытьПрочитатьФайлПечатнойФормы.Видимость = НЕ Объект.ФормаВБазеДанных;
	Элементы.СтраницыОписанияОтступа.Видимость = Объект.ИспользоватьОтступыМасштабИПринтер;
	Элементы.ОбратитеВниманиеВашаПечатнаяФорма.Видимость = НЕ Объект.ФормаВБазеДанных И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПользователейНесколько");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаФайлПроизвольнойПечатнойФормыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ОткрытьПрочитатьМакет(Неопределено);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьПрочитатьМакет(Знач Оповещение)
	
	ДиалогФильтр	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл таблицы") + " (*.mxl*)|*.mxl*";
	ДиалогРасширение = "*";
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл печатной формы") + ":";
	ДиалогВыбФайла.ПолноеИмяФайла			= Объект.СсылкаНаФайлПроизвольнойПечатнойФормы;
	ДиалогВыбФайла.Фильтр					= ДиалогФильтр;
	ДиалогВыбФайла.Расширение				= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор		= ЛОЖЬ;
	ДиалогВыбФайла.ПредварительныйПросмотр	= ЛОЖЬ;
	ДиалогВыбФайла.ИндексФильтра			= 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = ИСТИНА;
	Если ДиалогВыбФайла.Выбрать() Тогда
		Объект.СсылкаНаФайлПроизвольнойПечатнойФормы = ДиалогВыбФайла.ПолноеИмяФайла;
		Объект.НеАктуально = ЛОЖЬ;
		
		ПроверитьПрочитатьНастройкиИзФайла(Новый ОписаниеОповещения("ОткрытьПрочитатьМакетЗавершение", ЭтаФорма, Новый Структура("Оповещение", Оповещение)), ИСТИНА);
        Возврат;
	КонецЕсли;
	
	ОткрытьПрочитатьМакетФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрочитатьМакетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОткрытьПрочитатьМакетФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрочитатьМакетФрагмент(Знач Оповещение)
	
	Элементы.ПрограммируемыеПараметры.Видимость = Объект.ИспользоватьПрограммируемыеПараметры;	
	Элементы.СтраницаПрограммы.Видимость 		= Объект.ИспользоватьПрограммируемыеПараметры;
	
	ОбновитьВидимостьЭлементовХранилища();	
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизвольнуюФормуВБазуДанных(Команда)
	
	Если ЗначениеЗаполнено(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьПроизвольнуюФормуВБазуДанныхЗавершение", ЭтаФорма), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы загрузить этот файл печатной формы в базу данных?"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизвольнуюФормуВБазуДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		АдресЛокально = "";
		ВыбранноеИмяФайла = "";
		Среда = ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения();
		
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗагрузитьПроизвольнуюФормуВБазуДанныхЗавершениеЗавершение", ЭтаФорма, Новый Структура("АдресЛокально", АдресЛокально)), АдресЛокально, Объект.СсылкаНаФайлПроизвольнойПечатнойФормы, ?(Среда = 5, ИСТИНА, ЛОЖЬ), УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПроизвольнуюФормуВБазуДанныхЗавершениеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры1) Экспорт
	
	АдресЛокально = ДополнительныеПараметры1.АдресЛокально;	
	
	Если Результат Тогда
		Если ЗагрузитьПроизвольнуюПечатнуюФорму(АдресЛокально) Тогда
			
			Объект.ФормаВБазеДанных = ИСТИНА;
			Объект.СсылкаНаФайлПроизвольнойПечатнойФормы = "";
			Объект.НеАктуально = ЛОЖЬ;
			
			ОбновитьВидимостьЭлементовХранилища();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьХранилищеВБазеДанных(Команда)
	
	ОчиститьХранилищеВБазеДанныхНаСервере();
	ОбновитьВидимостьЭлементовХранилища()
	
КонецПроцедуры

&НаСервере
функция   ЗагрузитьПроизвольнуюПечатнуюФорму(Знач АдресЛокально)
	
	ОбъектО = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресЛокально);
	ОбъектО.ХранилищеПечатнойФормы = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());	
	
	ОбъектО.Записать();
	Модифицированность = ЛОЖЬ;
	ЗначениеВРеквизитФормы(ОбъектО, "Объект");
	УдалитьИзВременногоХранилища(АдресЛокально);
	
	Возврат ИСТИНА;
	
КонецФункции

&НаСервере
Процедура ОчиститьХранилищеВБазеДанныхНаСервере()
	
	ОбъектО = РеквизитФормыВЗначение("Объект");
	ОбъектО.ФормаВБазеДанных = ЛОЖЬ;
	ОбъектО.ХранилищеПечатнойФормы = Новый ХранилищеЗначения(Неопределено);;
	ОбъектО.Записать();
	
	Модифицированность = ЛОЖЬ;
	ЗначениеВРеквизитФормы(ОбъектО, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатнаяФормаПриИзменении(Элемент)
	ОбновитьОписание();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписание()
	
	Если ЗначениеЗаполнено(Объект.ПечатнаяФорма) Тогда
		ОбновитьОписаниеНаСервере();
		Если ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = СокрЛП(Объект.ПечатнаяФорма);
		КонецЕсли;
		
	Иначе
		ОбластиПечати.Очистить();
		ПараметрыОбластейПечати.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеНаСервере()
	
	ОбластиПечати.Очистить();
	ПараметрыОбластейПечати.Очистить();
	
	ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(ОбластиПечати, Объект.ПечатнаяФорма, , , , , ИСТИНА);
	ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(ПараметрыОбластейПечати, Объект.ПечатнаяФорма, ИСТИНА, , , , ИСТИНА);
	
	Элементы.ПрограммыОбластьПечати.СписокВыбора.Очистить();
	Элементы.ПрограммыОбластьПечати.СписокВыбора.Добавить("-", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для всего макета"));
	Для Каждого ОбластьПечати ИЗ ОбластиПечати Цикл
		Элементы.ПрограммыОбластьПечати.СписокВыбора.Добавить(ОбластьПечати.ИмяПрограммное, ОбластьПечати.Описание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрограммируемыеПараметрыПриИзменении(Элемент)
	
	Элементы.ПрограммируемыеПараметры.Видимость = Объект.ИспользоватьПрограммируемыеПараметры;	
	Элементы.СтраницаПрограммы.Видимость 		= Объект.ИспользоватьПрограммируемыеПараметры;
	
КонецПроцедуры

&НаСервере
Функция   ПрочитатьМакетНаСервере(Знач ИмяФайлаМакета)
	
	Макет = Новый ТабличныйДокумент;
	Макет.Прочитать(ИмяФайлаМакета);
	Возврат Макет;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПрочитатьНастройкиИзФайла(Знач Оповещение, Знач ПриВыбореФайла = ЛОЖЬ)
	
	Если НЕ ПустаяСтрока(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы) Тогда
		
		ИмяФайлаМакета = """%USERPROFILE%\Local Settings\Temp""";
		#Если НЕ ВебКлиент Тогда
			ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
		#КонецЕсли
		
		Попытка
			КопироватьФайл(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы, ИмяФайлаМакета);			
			Макет = ПрочитатьМакетНаСервере(ИмяФайлаМакета);
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка копирования файла внешнего макета!") + " " + ТекстОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
		КонецПопытки;
		
		ОбластьНастроек = Макет.Области.Найти("Настройки");
		
		Если НЕ ОбластьНастроек = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьПрочитатьНастройкиИзФайлаЗавершение", ЭтаФорма, Новый Структура("Макет, ОбластьНастроек, Оповещение, ПриВыбореФайла", Макет, ОбластьНастроек, Оповещение, ПриВыбореФайла)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузить настройки из файла?"), РежимДиалогаВопрос.ДаНет);
            Возврат;	
																								  КонецЕсли;
	КонецЕсли;
	
	ПроверитьПрочитатьНастройкиИзФайлаФрагмент(Оповещение);
	
Конецпроцедуры

&НаКлиенте
Процедура ПроверитьПрочитатьНастройкиИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Макет = ДополнительныеПараметры.Макет;
	ОбластьНастроек = ДополнительныеПараметры.ОбластьНастроек;
	Оповещение = ДополнительныеПараметры.Оповещение;
	ПриВыбореФайла = ДополнительныеПараметры.ПриВыбореФайла;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		//Объект.ПрограммируемыеПараметры.Очистить();
		//Объект.Программы.Очистить();
		
		КоличествоСтрок = ОбластьНастроек.Низ - ОбластьНастроек.Верх + 1;
		Счетчик = 1;
		Пусто 	= 0;
		
		ИдетБлокОписанияПрограммируемогоПараметра = ЛОЖЬ;
		ИдетБлокПрограмм = ЛОЖЬ;
		
		Попытка
			Пока КоличествоСтрок >= Счетчик цикл
				
				R = СокрЛП(формат(Счетчик + ОбластьНастроек.Верх - 1, "ЧГ=0"));
				ИмяУчастка = СокрЛП(Макет.Область("R" + R + "C1").Текст);
				
				Если Значениезаполнено(ИмяУчастка) Тогда // далее программируемые параметры
					Если НЕ Найти(ВРег(ИмяУчастка), "ПРОГРАММИРУЕМЫЕ") = 0 Тогда // ПрограммируемыеПараметры
						ИдетБлокОписанияПрограммируемогоПараметра = ИСТИНА;
						Объект.ИспользоватьПрограммируемыеПараметры = ИСТИНА;
						ИдетБлокПрограмм = ЛОЖЬ;	
					Иначе // программы
						ИдетБлокПрограмм = ИСТИНА;	
						ИдетБлокОписанияПрограммируемогоПараметра = ЛОЖЬ;
					КонецЕсли;
				КонецЕсли;
				
				ОбластьПараметр = СокрЛП(ВРег(Макет.Область("R" + R + "C2").Текст));
				Если ПустаяСтрока(ОбластьПараметр)
					ИЛИ ОбластьПараметр = Неопределено Тогда
					
					Прервать;
				КонецЕсли;
				
				ОбластьЗначение = СокрЛП(Макет.Область("R" + R + "C3").Текст);
				Если НЕ ПустаяСтрока(ОбластьЗначение) ТОгда
					
					Если ИдетБлокПрограмм Тогда
						Если ОбластьПараметр = "ОБЛАСТЬПЕЧАТИ" Тогда
							
							НовыйпрограммируемыйПараметр = Объект.Программы.Добавить();
							НовыйпрограммируемыйПараметр.ОБЛАСТЬПЕЧАТИ = ОбластьЗначение;	
							
						ИначеЕсли ОбластьПараметр = "МОМЕНТВРЕМЕНИ" Тогда
							
							Если ОбластьЗначение = "До" Тогда
								НовыйпрограммируемыйПараметр.МоментВремени = ПредопределенноеЗначение("Перечисление.МоментыВремени.До");
							ИначеЕсли ОбластьЗначение = "После" Тогда
								НовыйпрограммируемыйПараметр.МоментВремени = ПредопределенноеЗначение("Перечисление.МоментыВремени.После");
							Иначе
								НовыйпрограммируемыйПараметр.МоментВремени = ПредопределенноеЗначение("Перечисление.МоментыВремени.ВоВремя");
							КонецЕсли;
							
						Иначе
							НовыйпрограммируемыйПараметр[ОбластьПараметр] = ОбластьЗначение;
						КонецЕсли;
						
					ИначеЕсли ИдетБлокОписанияПрограммируемогоПараметра Тогда
						Если ОбластьПараметр = "ИМЯПРОГРАММНОЕ" Тогда
							
							НовыйпрограммируемыйПараметр = Объект.ПрограммируемыеПараметры.Добавить();
							НовыйпрограммируемыйПараметр.ИмяПрограммное = ОбластьЗначение;	
						Иначе
							НовыйпрограммируемыйПараметр[ОбластьПараметр] = ОбластьЗначение;
						КонецЕсли;
						
					Иначе // основные реквизиты
						Если ОбластьПараметр = "ПЕЧАТНАЯФОРМА" Тогда
							Попытка
								Объект.ПечатнаяФорма = ПолучитьВидПечатнойФормы(ОбластьЗначение);
							Исключение
								Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неверно задано значение вида печатной формы") + ": " + ОбластьЗначение);
							КонецПопытки;
						ИначеЕсли ОбластьПараметр = "НАИМЕНОВАНИЕ" Тогда
							Объект.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОбластьЗначение);
						ИначеЕсли ОбластьПараметр = "ДАТАНАЧАЛА"
							ИЛИ ОбластьПараметр = "ДАТАОКОНЧАНИЯ" Тогда
							
							ЗначениеРеквизита = '00010101';
							Попытка 
								ЗначениеРеквизита = Дата(ОбластьЗначение);
							Исключение 	
							КонецПопытки;
							
							Объект[ОбластьПараметр] = ЗначениеРеквизита;
							
						ИначеЕсли ОбластьПараметр = "ПОРЯДОКВСПИСКЕВЫБОРА" 
							ИЛИ ОбластьПараметр = "КОЛИЧЕСТВОЭКЗЕМПЛЯРОВ" 
							ИЛИ ОбластьПараметр = "РАЗМЕРКОЛОНТИТУЛАСВЕРХУ"
							ИЛИ ОбластьПараметр = "РАЗМЕРКОЛОНТИТУЛАСНИЗУ"
							ИЛИ ОбластьПараметр = "ВЫСОТАСТРАНИЦЫ"
							ИЛИ ОбластьПараметр = "ШИРИНАСТРАНИЦЫ"
							ИЛИ ОбластьПараметр = "ПОЛЕСВЕРХУ"
							ИЛИ ОбластьПараметр = "ПОЛЕСЛЕВА"
							ИЛИ ОбластьПараметр = "ПОЛЕСНИЗУ"
							ИЛИ ОбластьПараметр = "ПОЛЕСПРАВА" Тогда
							
							ЗначениеРеквизита = 0;						
							Попытка 
								ЗначениеРеквизита = Число(ОбластьЗначение);
							Исключение 	
							КонецПопытки;
							
							Объект[ОбластьПараметр] = ЗначениеРеквизита;
							
						ИначеЕсли ОбластьПараметр = "ИСПОЛЬЗОВАТЬПРОГРАММИРУЕМЫЕПАРАМЕТРЫ"
							ИЛИ ОбластьПараметр = "ИСПОЛЬЗОВАТЬОТСТУПЫМАСШТАБИПРИНТЕР"
							ИЛИ ОбластьПараметр = "ДВУСТОРОННЯЯПЕЧАТЬ"
							ИЛИ ОбластьПараметр = "ОРИЕНТАЦИЯСТРАНИЦЫЛАНДШАФТ"
							ИЛИ ОбластьПараметр = "ЗАЩИТА"
							ИЛИ ОбластьПараметр = "АВТОМАСШТАБ" Тогда
							
							Если ПустаяСтрока(ОбластьЗначение)
								ИЛИ ВРег(Лев(ОбластьЗначение, 1)) = "Н"
								ИЛИ ВРег(Лев(ОбластьЗначение, 1)) = "Л"
								ИЛИ ВРег(Лев(ОбластьЗначение, 1)) = "N"
								ИЛИ Лев(ОбластьЗначение, 1) = "0"
								ИЛИ Лев(ОбластьЗначение, 1) = "-" Тогда
								
								ЗначениеРеквизита = ЛОЖЬ;
							Иначе
								ЗначениеРеквизита = ИСТИНА;
							КонецЕсли;
							
							Объект[ОбластьПараметр] = ЗначениеРеквизита;
							
						Иначе // комментарий, имя принтера, размер страницы
							
							Попытка 
								Объект[ОбластьПараметр] = ОбластьЗначение;
							Исключение 	
							КонецПопытки;						
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
			КонецЦикла;
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка задания параметров") + ": " + ТекстОписаниеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	ПроверитьВППНаСервере(НЕ ПриВыбореФайла);
	
	ОбновитьОписание();
	Элементы.ПрограммируемыеПараметры.Видимость = Объект.ИспользоватьПрограммируемыеПараметры;	
	
	ПроверитьПрочитатьНастройкиИзФайлаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрочитатьНастройкиИзФайлаФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Процедура ПроверитьВППНаСервере(Знач ВыдаватьВсеХорошо = ЛОЖЬ)
	
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	Попытка
		КопироватьФайл(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы, ИмяФайлаМакета);			
		Макет = ПрочитатьМакетНаСервере(ИмяФайлаМакета);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка копирования файла внешнего макета!") + " " + ТекстОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Объект.ПечатнаяФорма) Тогда
		ПереченьЗаявленныхОбластей = Новый Массив;
		Для Каждого ЗаявленнаяОбласть Из Макет.Области Цикл
			ПереченьЗаявленныхОбластей.Добавить(ВРег(ЗаявленнаяОбласть.Имя));
		КонецЦикла;
		
		ПереченьОбластейМакета  = ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(, Объект.ПечатнаяФорма);
		СчетчикЗаданныхОбластей = 0;
		
		Для Каждого ОбластьМакета Из ПереченьОбластейМакета Цикл
			
			Если НЕ ПереченьЗаявленныхОбластей.Найти(ВРег(ОбластьМакета.ИмяПрограммное)) = Неопределено Тогда
				ОбластьПечати = Макет.ПолучитьОбласть(ОбластьМакета.ИмяПрограммное);	
				СчетчикЗаданныхОбластей = СчетчикЗаданныхОбластей + 1;
			КонецЕсли;	
		КонецЦикла;
		
		Если СчетчикЗаданныхОбластей = 0 Тогда
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В указанном макете нет областей с нужными наименованиями!"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыдаватьВсеХорошо Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибок в макете не найдено!"));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьВидПечатнойФОрмы(Знач ОбластьЗначение)
	Возврат Перечисления.ВидыПечатныхФорм[ОбластьЗначение];
КонецФункции

&НаКлиенте
Процедура Проверить(Команда)
	ПроверитьВППНаСервере(ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтступыМасштабИПринтерПриИзменении(Элемент)
	
	Если Объект.ИспользоватьОтступыМасштабИПринтер Тогда
		ОбновитьИменаПринтеров();
		ЗаполнитьРазмерыСтраницы();
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовХранилища();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИменаПринтеров()
	
	Если Объект.ИспользоватьОтступыМасштабИПринтер Тогда
		Элементы.ИмяПринтера.СписокВыбора.Очистить();
		
		ИмяПринтера = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Принтер по-умолчанию");
		Элементы.ИмяПринтера.СписокВыбора.Добавить("ПринтерПоУмолчанию", ИмяПринтера);
		
		#Если Клиент Тогда 
			Попытка
				КОМОбъект =  Новый COMОбъект ("WScript.Network");
				Принтеры =  КОМОбъект.EnumPrinterConnections();
				шшш = 0;
				Пока шшш < Принтеры.Count()-1 Цикл
					ИмяПринтера = СокрЛП(Принтеры.Item(шшш+1));
					Элементы.ИмяПринтера.СписокВыбора.Добавить(ИмяПринтера, ИмяПринтера);
					шшш = шшш + 2;
				КонецЦикла;
				КОМОбъект = Неопределено;
			Исключение
				// вэб клиент       Сообщить(ОписаниеОшибки());
			КонецПопытки;
		#КонецЕсли
		
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура МасштабОткрытие(Элемент, СтандартнаяОбработка)
	
	Объект.Масштаб = 100;
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.ЗадатьДляПечати.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Функция   ЗадатьДляПечатиНаСервере()
	
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.ПечатнаяФорма)
		И НЕ Объект.НеАктуально Тогда
		
		ЗаданиеППФ = РегистрыСведений.ЗаданныеПроизвольныеПечатныеФормы.СоздатьМенеджерЗаписи();
		ЗаданиеППФ.Активность = Истина;
		ЗаданиеППФ.ВидПечатнойФормы = Объект.ПечатнаяФорма;
		ЗаданиеППФ.ПроизвольнаяПечатнаяФорма = Объект.Ссылка;
		
		Попытка //Записи в регистр сведений 
			ЗаданиеППФ.Записать(Истина);
			Результат = ИСТИНА;
		Исключение //Записи в регистр сведений 
		КонецПопытки; //Записи в регистр сведений
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьДляПечати(Команда)
	
	Если ЗадатьДляПечатиНаСервере() Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печатная форма задана."));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Масштаб = 0 Тогда
		ТекущийОбъект.Масштаб = 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
процедура СсылкаНаФайлПроизвольнойПечатнойФормыРегулированиеНС(ТабДок)
	ТабДок.прочитать(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьМакет(Команда)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ТабДок = Новый ТабличныйДокумент;
	СсылкаНаФайлПроизвольнойПечатнойФормыРегулированиеНС(ТабДок);
	ТабДок.Показать(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произвольная печатная форма") + ": " + Объект.Наименование, Объект.СсылкаНаФайлПроизвольнойПечатнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазмерыСтраницы()
	
	МассивРазмеров = Новый Массив;
	МассивРазмеров.Добавить("Custom");
	МассивРазмеров.Добавить("Letter");
	МассивРазмеров.Добавить("Letter Small");
	МассивРазмеров.Добавить("Tabloid");
	МассивРазмеров.Добавить("Ledger");
	МассивРазмеров.Добавить("Legal");
	МассивРазмеров.Добавить("Statement");
	МассивРазмеров.Добавить("Executive");
	МассивРазмеров.Добавить("A3");
	МассивРазмеров.Добавить("A4");
	МассивРазмеров.Добавить("A4 Small");
	МассивРазмеров.Добавить("A5");
	МассивРазмеров.Добавить("B4");
	МассивРазмеров.Добавить("B5");
	МассивРазмеров.Добавить("Folio");
	МассивРазмеров.Добавить("Quarto");
	МассивРазмеров.Добавить("10x14");
	МассивРазмеров.Добавить("11x17");
	МассивРазмеров.Добавить("Note");
	МассивРазмеров.Добавить("Envelope #9");
	МассивРазмеров.Добавить("Envelope #10");
	МассивРазмеров.Добавить("Envelope #11");
	МассивРазмеров.Добавить("Envelope #12");
	МассивРазмеров.Добавить("Envelope #14");
	МассивРазмеров.Добавить("C size sheet");
	МассивРазмеров.Добавить("D size sheet");
	МассивРазмеров.Добавить("E size sheet");
	МассивРазмеров.Добавить("Envelope DL");
	МассивРазмеров.Добавить("Envelope C5");
	МассивРазмеров.Добавить("Envelope C3");
	МассивРазмеров.Добавить("Envelope C4");
	МассивРазмеров.Добавить("Envelope C6");
	МассивРазмеров.Добавить("Envelope C65");
	МассивРазмеров.Добавить("Envelope B4");
	МассивРазмеров.Добавить("Envelope B5");
	МассивРазмеров.Добавить("Envelope B6");
	МассивРазмеров.Добавить("Envelope");
	МассивРазмеров.Добавить("Envelope Monarch");
	МассивРазмеров.Добавить("6 3/4 Envelope");
	МассивРазмеров.Добавить("US Std Fanfold");
	МассивРазмеров.Добавить("German Std Fanfold");
	МассивРазмеров.Добавить("German Legal Fanfold");
	МассивРазмеров.Добавить("B4 (ISO)");
	МассивРазмеров.Добавить("Japanese Postcard");
	МассивРазмеров.Добавить("9x11");
	МассивРазмеров.Добавить("10x11");
	МассивРазмеров.Добавить("15x11");
	МассивРазмеров.Добавить("Envelope Invite");
	МассивРазмеров.Добавить("Letter Extra");
	МассивРазмеров.Добавить("Legal Extra");
	МассивРазмеров.Добавить("Tabloid Extra");
	МассивРазмеров.Добавить("A4 Extra");
	МассивРазмеров.Добавить("Letter Transverse");
	МассивРазмеров.Добавить("A4 Transverse");
	МассивРазмеров.Добавить("Letter Extra Transverse");
	МассивРазмеров.Добавить("Super A");
	МассивРазмеров.Добавить("Super B");
	МассивРазмеров.Добавить("Letter Plus");
	МассивРазмеров.Добавить("A4 Plus");
	МассивРазмеров.Добавить("A5 Transverse");
	МассивРазмеров.Добавить("B5 (JIS) Transverse");
	МассивРазмеров.Добавить("A3 Extra");
	МассивРазмеров.Добавить("A5 Extra");
	МассивРазмеров.Добавить("B5 (ISO) Extra");
	МассивРазмеров.Добавить("A2");
	МассивРазмеров.Добавить("A3 Transverse");
	МассивРазмеров.Добавить("A3 Extra Transverse");
	МассивРазмеров.Добавить("Japanese Double Postcard");
	МассивРазмеров.Добавить("A6");
	МассивРазмеров.Добавить("Japanese Envelope Kaku #2");
	МассивРазмеров.Добавить("Japanese Envelope Kaku #3");
	МассивРазмеров.Добавить("Japanese Envelope Chou #3");
	МассивРазмеров.Добавить("Japanese Envelope Chou #4");
	МассивРазмеров.Добавить("Letter Rotated");
	МассивРазмеров.Добавить("A3 Rotated");
	МассивРазмеров.Добавить("A4 Rotated");
	МассивРазмеров.Добавить("A5 Rotated");
	МассивРазмеров.Добавить("B4 (JIS) Rotated");
	МассивРазмеров.Добавить("B5 (JIS) Rotated");
	МассивРазмеров.Добавить("Japanese Postcard Rotated");
	МассивРазмеров.Добавить("Double Japanese Postcard Rotated");
	МассивРазмеров.Добавить("A6 Rotated");
	МассивРазмеров.Добавить("Japanese Envelope Kaku #2 Rotated");
	МассивРазмеров.Добавить("Japanese Envelope Kaku #3 Rotated");
	МассивРазмеров.Добавить("Japanese Envelope Chou #3 Rotated");
	МассивРазмеров.Добавить("Japanese Envelope Chou #4 Rotated");
	МассивРазмеров.Добавить("B6 (JIS)");
	МассивРазмеров.Добавить("B6 (JIS) Rotated");
	МассивРазмеров.Добавить("12x11");
	МассивРазмеров.Добавить("Japanese Envelope You #4");
	МассивРазмеров.Добавить("Japanese Envelope You #4 Rotated");
	МассивРазмеров.Добавить("P 16k");
	МассивРазмеров.Добавить("P 32k");
	МассивРазмеров.Добавить("P 32k(Big)");
	МассивРазмеров.Добавить("PRC Envelope #1");
	МассивРазмеров.Добавить("PRC Envelope #2");
	МассивРазмеров.Добавить("PRC Envelope #3");
	МассивРазмеров.Добавить("PRC Envelope #4");
	МассивРазмеров.Добавить("PRC Envelope #5");
	МассивРазмеров.Добавить("PRC Envelope #6");
	МассивРазмеров.Добавить("PRC Envelope #7");
	МассивРазмеров.Добавить("PRC Envelope #8");
	МассивРазмеров.Добавить("PRC Envelope #9");
	МассивРазмеров.Добавить("PRC Envelope #10");
	МассивРазмеров.Добавить("P 16k Rotated");
	МассивРазмеров.Добавить("P 32k Rotated");
	МассивРазмеров.Добавить("P 32kbig Rotated");
	МассивРазмеров.Добавить("PRC Envelope #1 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #2 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #3 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #4 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #5 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #6 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #7 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #8 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #9 Rotated");
	МассивРазмеров.Добавить("PRC Envelope #10 Rotated");
	
	Элементы.РазмерСтраницы.СписокВыбора.Очистить();
	
	Для Каждого ЭлементМассиваРазмеров Из МассивРазмеров Цикл
		Элементы.РазмерСтраницы.СписокВыбора.Добавить(ЭлементМассиваРазмеров, ЭлементМассиваРазмеров);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЭкземпляровОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	Объект.КоличествоЭкземпляров = 1;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВМакетНастройкиНаСервере(ТабДок)
	
	ГруппаНастроек = Новый ТабличныйДокумент;
	
	МакетЭкспорта = Справочники.ПроизвольныеПечатныеФормы.ПолучитьМакет("МакетЭкспорта");
	
	Шапка = МакетЭкспорта.ПолучитьОбласть("НеиспользуетсяШапка");
	ПустаяСтрокаОбласть = МакетЭкспорта.ПолучитьОбласть("НеиспользуетсяПустаяСтрока");
	Шапка.Параметры.ПечатнаяФорма = Объект.ПечатнаяФорма;
	Шапка.Параметры.ДатаВремя = ТекущаяДата();
	ТабДок.Вывести(Шапка, 0, "");
	ТабДок.Вывести(ПустаяСтрокаОбласть);
	
	// до лучших времен, пока не научусь выводить с параметрами и шаблонами
	
	//Область = ТабДок.Область(1, 1);
	//Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	//Область.Параметр = "Параметр_1";
	//Область.Расшифровка = Объект.Ссылка;
	//
	//СуществующийМакет = Неопределено;
	//
	//ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	//Если Объект.ФормаВБазеДанных Тогда
	//	Если ТипЗнч(Объект.ХранилищеПечатнойФормы) <> Тип("ДвоичныеДанные") Тогда
	//		ДвоичныеДанные = Объект.ХранилищеПечатнойФормы.Получить();
	//	Иначе
	//		ДвоичныеДанные = Объект.ХранилищеПечатнойФормы;
	//	КонецЕсли; 
	//	ДвоичныеДанные.Записать(ИмяФайлаМакета);
	//	
	//	СуществующийМакет = НОвый ТабличныйДокумент;
	//	
	//ИначеЕсли НЕ ПустаяСтрока(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы) Тогда		
	//	Попытка
	//		КопироватьФайл(Объект.СсылкаНаФайлПроизвольнойПечатнойФормы, ИмяФайлаМакета);
	//		
	//		СуществующийМакет = НОвый ТабличныйДокумент;
	//		СуществующийМакет.Прочитать(ИмяФайлаМакета);
	//		
	//	Исключение
	//		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка копирования файла внешнего макета!") + " " + ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Если НЕ СуществующийМакет = Неопределено Тогда
	//	
	//	СуществующийМакет.Прочитать(ИмяФайлаМакета);
	//	Для Каждого ОбластьМакета Из СуществующийМакет.Области Цикл
	//		ИмяОбласти = Врег(ОбластьМакета.Имя);
	//		Если НЕ ИмяОбласти = "НАСТРОЙКИ" Тогда
	//			СуществующаяОбласть = СуществующийМакет.ПолучитьОбласть(ИмяОбласти);
	//			ТабДок.Вывести(СуществующаяОбласть, 0, ИмяОбласти);	
	//		КонецЕсли;	
	//	КонецЦикла;
	//	
	//	Попытка 
	//		УдалитьФайлы(ИмяФайлаМакета);
	//	Исключение 	
	//	КонецПопытки;
	//КонецЕсли;
	
	ТабДок.Вывести(ПустаяСтрокаОбласть);
	Шапка = МакетЭкспорта.ПолучитьОбласть("ШапкаНастроек");
	ТабДок.Вывести(Шапка);
	НастройкиППФ = МакетЭкспорта.ПолучитьОбласть("НеиспользуетсяНастройки");
	
	Если ЗначениеЗаполнено(Объект.ПечатнаяФорма) Тогда
		НастройкиППФ.Параметры.ИмяРеквизитаОбъекта = "ПечатнаяФорма";
		НастройкиППФ.Параметры.ЗначениеРеквизитаОбъекта = ОбщийМодульПовтор.ПолучитьЗначениеИмениПеречисления(Объект.ПечатнаяФорма);
		НастройкиППФ.Параметры.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("значение перечисления, указывающее на вид печатной формы");
		ГруппаНастроек.Вывести(НастройкиППФ);
	КонецЕсли;
	
	НастройкиППФ.Параметры.ИмяРеквизитаОбъекта = "Наименование";
	НастройкиППФ.Параметры.ЗначениеРеквизитаОбъекта = Объект.Наименование;
	НастройкиППФ.Параметры.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("наименование элемента справочника произвольных печатных форм");
	ГруппаНастроек.Вывести(НастройкиППФ);	
	
	Для Каждого РеквизитППФ Из Метаданные.Справочники.ПроизвольныеПечатныеФормы.Реквизиты Цикл
		ИмяРекв = РеквизитППФ.Имя;
		
		Если НЕ ИмяРекв = "ХранилищеПечатнойФормы" 
			И НЕ ИмяРекв = "ПечатнаяФорма"
			И НЕ ИмяРекв = "ФормаВБазеДанных"
			И НЕ ИмяРекв = "СсылкаНаФайлПроизвольнойПечатнойФормы" Тогда
			
			НастройкиППФ.Параметры.ИмяРеквизитаОбъекта = ИмяРекв;
			НастройкиППФ.Параметры.ЗначениеРеквизитаОбъекта = Объект[ИмяРекв];
			НастройкиППФ.Параметры.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитППФ.Синоним);
			ГруппаНастроек.Вывести(НастройкиППФ);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ИспользоватьПрограммируемыеПараметры
		И НЕ Объект.ПрограммируемыеПараметры.Количество() = 0 Тогда
		
		НастройкиППФ = МакетЭкспорта.ПолучитьОбласть("НастройкиПрограммируемые");
		Для Каждого ПРограммируемыйПареметр Из Объект.ПрограммируемыеПараметры Цикл
			НастройкиППФ.Параметры.ИмяПрограммное 		= ПРограммируемыйПареметр.ИмяПрограммное;
			НастройкиППФ.Параметры.ИмяТаблицы 			= ПРограммируемыйПареметр.ИмяТаблицы;
			НастройкиППФ.Параметры.ПрограммаПараметра 	= ПРограммируемыйПареметр.ПрограммаПараметра;
			НастройкиППФ.Параметры.ОСтроке 				= ПРограммируемыйПареметр.ОСтроке;
			ГруппаНастроек.Вывести(НастройкиППФ);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Объект.Программы.Количество() = 0 Тогда
		НастройкиППФ = МакетЭкспорта.ПолучитьОбласть("НастройкиПрограммы");
		Для Каждого Программа Из Объект.Программы Цикл
			НастройкиППФ.Параметры.ОБластьПечати 	 = Программа.ОБластьПечати;
			НастройкиППФ.Параметры.МоментВремени 	 = Программа.МоментВремени;
			НастройкиППФ.Параметры.УсловиеВыполнения = Программа.УсловиеВыполнения;
			НастройкиППФ.Параметры.Программа 		 = Программа.Программа;
			НастройкиППФ.Параметры.ОСтроке 			 = Программа.ОСтроке;
			ГруппаНастроек.Вывести(НастройкиППФ);
		КонецЦикла;
	КонецЕсли;
	
	ТабДок.Вывести(ГруппаНастроек, 0, "Настройки");
	
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	ТабДок.Записать(ИмяФайлаМакета);
	ТекстовыйФайлМакета = Новый ЧтениеТекста(ИмяФайлаМакета, КодировкаТекста.UTF8);
	
	Сч = 0;
	СтрокаФайла = "";
	ОпределеннаяСтрока = ТекстовыйФайлМакета.ПрочитатьСтроку();
	Пока ОпределеннаяСтрока <> Неопределено Цикл // строки читаются до символа перевода строки
		Сч = Сч + 1;
		Если Сч > 8 И Сч < 18 Тогда
			ОпределеннаяСтрока = СтрЗаменить(ОпределеннаяСтрока, "{0,0},0", "{0,0},1");
		КонецЕсли;
		СтрокаФайла = СтрокаФайла + ОпределеннаяСтрока;
		ОпределеннаяСтрока = ТекстовыйФайлМакета.ПрочитатьСтроку();
	КонецЦикла;
	
	Попытка 
		УдалитьФайлы(ИмяФайлаМакета);
	Исключение 	
	КонецПопытки;
	
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	
	НовыйФайлМакета = Новый ЗаписьТекста(ИмяФайлаМакета, КодировкаТекста.ANSI);
	НовыйФайлМакета.Закрыть();
	НовыйФайлМакета = Новый ЗаписьТекста(ИмяФайлаМакета,,, Истина);
	НовыйФайлМакета.Записать(СтрокаФайла);
	НовыйФайлМакета.Закрыть();
	
	ТабДок.Прочитать(ИмяФайлаМакета);
	Попытка 
		УдалитьФайлы(ИмяФайлаМакета);
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВМакетНастройки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если глВерсияПлатформы < 803040000 Тогда ЗаписатьНаСервере(); Иначе Выполнить(" Записать(); "); КонецЕсли;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ВыгрузитьВМакетНастройкиНаСервере(ТабДок);
	ТабДок.ОтображатьЗаголовки = ИСТИНА;
	ТабДок.ОтображатьСетку = ИСТИНА;
	ТабДок.Защита = ЛОЖЬ;
	ТабДок.ТолькоПросмотр = ЛОЖЬ;
	
	ТабДок.Показать(ОБъект.Наименование, Объект.СсылкаНаФайлПроизвольнойПечатнойФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ЭтотОбъект1 = ДанныеФормыВзначение(Объект, Тип("СправочникОбъект.ПроизвольныеПечатныеФормы"));
	ЭтотОбъект1.Записать();
	ЗначениеВданныеФормы(ЭтотОбъект1 ,Объект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрочитатьФайлПечатнойФормы(Команда)
	ОткрытьПрочитатьМакет(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПрограммыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.Программы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		КодПрограммы = ТекСтрока.Программа;
		Элементы.КодПрограммы.Доступность = ИСТИНА;
	Иначе
		Элементы.КодПрограммы.Доступность = ЛОЖЬ;
		КодПрограммы = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПрограммыПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Программы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		ТекСтрока.Программа = КодПрограммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммыПрограммаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Программы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		КодПрограммы = ТекСтрока.Программа;
		Элементы.КодПрограммы.Доступность = ИСТИНА;
	Иначе
		Элементы.КодПрограммы.Доступность = ЛОЖЬ;	
		КодПрограммы = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременныеДляПрограммВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Программы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		КодПрограммы = КодПрограммы + Элементы.ПеременныеДляПрограмм.ТекущиеДанные.ПеременнаяПрограммы;
		ТекСтрока.Программа = КодПрограммы;
		Элементы.КодПрограммы.Доступность = ИСТИНА;
	Иначе
		Элементы.КодПрограммы.Доступность = ЛОЖЬ;	
		КодПрограммы = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЭтикетокНаЛистеПоГоризонталиПриИзменении(Элемент)
	ВсегоЭтикетокНаЛисте = Объект.ЧислоЭтикетокНаЛистеПоВертикали * Объект.ЧислоЭтикетокНаЛистеПоГоризонтали;
КонецПроцедуры

&НаКлиенте
Процедура ЧислоЭтикетокНаЛистеПоВертикалиПриИзменении(Элемент)
	ВсегоЭтикетокНаЛисте = Объект.ЧислоЭтикетокНаЛистеПоВертикали * Объект.ЧислоЭтикетокНаЛистеПоГоризонтали;
КонецПроцедуры

&НаКлиенте
Процедура ПрограммируемыеПараметрыПрограммаПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ТекущиеДанные = Элементы.ПрограммируемыеПараметры.ТекущиеДанные;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПрограммируемыеПараметрыПрограммаПараметраНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные, ТекстПрограммыИзСправочника", ТекущиеДанные, ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммируемыеПараметрыПрограммаПараметраНачалоВыбораЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ТекущиеДанные.ПрограммируемыеПараметры = ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьТекстИзСправочника(Знач ТекстЭлементСправочника)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ТекстЭлементСправочника) Тогда
		Результат = ТекстЭлементСправочника.ТекстПрограммы + Символы.ПС + 
		ТекстЭлементСправочника.ТекстПрограммы2 + Символы.ПС +
		ТекстЭлементСправочника.ТекстПрограммы3;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПрограммыПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	ТекущиеДанные = Элементы.Программы.ТекущиеДанные;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПрограммыПрограммаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные, ТекстПрограммыИзСправочника", ТекущиеДанные, ТекстПрограммыИзСправочника)), ТекстПрограммыИзСправочника, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите текст программы.."));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммыПрограммаНачалоВыбораЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТекстПрограммыИзСправочника = ?(Значение = Неопределено, ДополнительныеПараметры.ТекстПрограммыИзСправочника, Значение);	
	
	Если (Значение <> Неопределено) Тогда
		ТекущиеДанные.Программа = ЗагрузитьТекстИзСправочника(ТекстПрограммыИзСправочника);
	КонецЕсли;
	
КонецПроцедуры

