//sza131119-2321 
//sza110204-1141
//sza110131-0109       
//sza110128-1517      
//sza101110-1754       
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	//ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предопределенный");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Ложь;
	
	Если Параметры.ИспользоватьОтбор = "Э" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьТолькоДляИмпорта");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ИспользоватьТолькоДляИмпорта;
	ИначеЕсли Параметры.ИспользоватьОтбор = "И" Тогда	
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьТолькоДляЭкспорта");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ИспользоватьТолькоДляЭкспорта;
	КонецЕсли;
	
	Если Параметры.ИспользоватьОтборПоВиду = "С" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляСпискаЭлементовСправочникаИлиДокументов);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "К" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляКарточкиСправочникаИлиШапкиДокумента);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "Б" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "З" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляТаблицыТовары);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
	КонецЕсли;
	
	Попытка 
		Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборДляКлиента");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование = Истина;
			ОбъектУсловия = Новый списокзначений;
			ОбъектУсловия.Добавить(Справочники.Клиенты.ПустаяСсылка());
			ОбъектУсловия.Добавить(Параметры.Клиент);
			ЭлементОтбора.ПравоеЗначение = ОбъектУсловия;
		иначе
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборДляКлиента");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.Использование = Истина;
			ОбъектУсловия = Новый списокзначений;
			ОбъектУсловия.Добавить(Справочники.Клиенты.ПустаяСсылка());
			ЭлементОтбора.ПравоеЗначение = ОбъектУсловия;
		КонецЕсли;
		
	Исключение 	
	КонецПопытки;
	
	//Попытка 
	//	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
	//		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборДляОрганизации");
	//		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		ЭлементОтбора.Использование = Истина;
	//		ОбъектУсловия = Новый списокзначений;
	//		ОбъектУсловия.Добавить(Справочники.Организации.ПустаяСсылка());
	//		ОбъектУсловия.Добавить(Параметры.Организация);
	//		ЭлементОтбора.ПравоеЗначение = ОбъектУсловия;
	//		
	//	иначе
	//		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборДляОрганизации");
	//		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//		ЭлементОтбора.Использование = Истина;
	//		ОбъектУсловия = Новый списокзначений;
	//		ОбъектУсловия.Добавить(Справочники.Организации.ПустаяСсылка());
	//		ЭлементОтбора.ПравоеЗначение = ОбъектУсловия;
	//	КонецЕсли;
	//	
	//Исключение 	
	//КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры
