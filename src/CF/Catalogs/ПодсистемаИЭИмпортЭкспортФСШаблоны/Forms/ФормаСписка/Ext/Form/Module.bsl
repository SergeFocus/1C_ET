//sza140115-1150 : 
//sza131227-1839 SZA: 
//sza131119-2322 
//sza110426-2358 ПризнакДебетаОтрицательнаяСумма
//sza110302-0002 СуммироватьТолькоЕслиПлатежкиСОднимНомером
//sza110224-1842 
//sza110217-1136 СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка
//sza110216-1635 файл архив
//sza110214-1435 ПодсистемаИЭИмпортЭкспортФС.КонстантыОтносительныйАдресФайловПолучить()
//sza110213-0113 ИскатьВПодкаталогах
//sza110211-1208 загрузка папки
//sza110209-1214 удалять файл
//sza110207-1738 ВставлятьМеждуТекстамиНазначенияСледующийТекст
//sza110202-1753      
//sza110128-0225      
//sza110126-1820      
//sza110126-0009       
//sza110120-0213      
//sza110119-1544      
//sza110118-1722      
//sza110114-1724      
//sza110112-1607      
//sza110111-0045       
//sza110110-1612      
//sza110110-0305       
//sza110109-2232       
//sza110108-0122       
//sza110107-1157       
//sza110106-1823       
//sza101227-2349       
//sza101222-2035       
//sza101222-1312       
//sza101222-0131       
//sza101216-0153       
//sza101210-0254       
//sza101207-1617      
//sza101206-1602      
//sza101206-1330      
//sza101205-2155      
//sza101204-0120    
//sza101203-0151    
//sza101201-1315
//sza101116-1358
//sza101115-1808
//sza101114-0223
//sza101110-1747
//sza101109-1703
//sza101109-0032
//sza101105-1627
//sza101103
//sza101025
//
&НаКлиенте
Процедура СохранитьШаблоныВФайл(Команда)
	
	ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФильтр   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл") + " (ieUNFSH0.DBf)|ieUNFSH0.DBf";
	ДиалогРасширение = "DBf";
	ДиалогВыбФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для экспорта шаблонов:");
	ДиалогВыбФайла.ПолноеИмяФайла 	= "ieUNFSH0.DBf";
	ДиалогВыбФайла.Фильтр 			= ДиалогФильтр;
	ДиалогВыбФайла.Расширение 		= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор 		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр 	= Истина;
	ДиалогВыбФайла.ИндексФильтра 	= 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		ПодсистемаИЭИмпортЭкспортФС.ВыполнитьВыгрузкуШаблоновНаСервере(АдресФайла);
	КонецЕсли; //когда файл АдресФайла выбран
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуШаблоновНаСервере(АдресФайла) //Экспорт
	
	БазаДБФБазаШаблонов = Новый XBase;
	БазаДБФБазаШаблонов.ОткрытьФайл(АдресФайла);
	
	КоличествоЗаписейДБФБазаШаблонов = БазаДБФБазаШаблонов.КоличествоЗаписей();
	
	Если БазаДБФБазаШаблонов.Первая() Тогда
		ЗапШаблонСТакимИменем = Новый Запрос;
		ЗапШаблонСТакимИменем.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШаблонФайла.Ссылка
		|ИЗ Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны КАК ШаблонФайла
		|ГДЕ ШаблонФайла.Наименование = &Наименование И ШаблонФайла.ПометкаУдаления = Ложь"; //ВЫБРАТЬ ПЕРВЫЕ 1
		
		Пока Истина Цикл
			ИмяТекущегоШаблона = сокрлп(БазаДБФБазаШаблонов.NAIMENSH);
			ЗапШаблонСТакимИменем.УстановитьПараметр("Наименование", ИмяТекущегоШаблона);
			ВзШаблонСТакимИменем = ЗапШаблонСТакимИменем.Выполнить();
			Если ВзШаблонСТакимИменем.Пустой() Тогда
				
				ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.СоздатьЭлемент() ;
			Иначе
				ВШаблонСТакимИменем = ВзШаблонСТакимИменем.Выбрать();
				ВШаблонСТакимИменем.Следующий() ;
				ШаблонФайла = ВШаблонСТакимИменем.Ссылка.ПолучитьОбъект();
				
			КонецЕсли;				
			ШаблонФайла.КодировкаDOS 	 = ?(БазаДБФБазаШаблонов.CODE_DOS = 1, Истина, Ложь);
			ШаблонФайла.Комментарий 	 = сокрлп(БазаДБФБазаШаблонов.COMMENTR);
			ШаблонФайла.Наименование 	 = сокрлп(БазаДБФБазаШаблонов.NAIMENSH);
			ШаблонФайла.РазделительПолей = сокрлп(БазаДБФБазаШаблонов.RAZDELIT);
			ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей = ?(БазаДБФБазаШаблонов.FORMPERS = 1, Истина, Ложь);
			ШаблонФайла.ИспользоватьСтрокуЗаголовок = сокрлп(БазаДБФБазаШаблонов.STROZAGO);
			ШаблонФайла.РазделительЧисел = сокрлп(БазаДБФБазаШаблонов.RAZDELCH);
			ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ?(БазаДБФБазаШаблонов.SOZDELNM = 1, Истина, Ложь);
			ШаблонФайла.ФорматПолейДаты  = сокрлп(БазаДБФБазаШаблонов.FORMDATA);
			ШаблонФайла.НеПропускатьНепроведенныеДокументы = ?(БазаДБФБазаШаблонов.NEPRNPRV = 1, Истина, Ложь);
			ШаблонФайла.НеПропускатьОбъектыПомеченныеНаУдаление = ?(БазаДБФБазаШаблонов.NEPRUDAL = 1, Истина, Ложь);
			ШаблонФайла.НомерПоляКотороеВсегдаЗаполнено = БазаДБФБазаШаблонов.NOMPOLVZ;
			ШаблонФайла.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = БазаДБФБазаШаблонов.PROPSTRK;
			ШаблонФайла.АдресФайла = сокрлп(БазаДБФБазаШаблонов.ADRSFILE) ;
			ШаблонФайла.ВыдаватьЗапросДляИнтервалаДокументов = ?(БазаДБФБазаШаблонов.ZAPRINDO = 1, Истина, Ложь);
			
			БазаДБФПоляШаблонов = Новый XBase;
			БазаДБФПоляШаблонов.ОткрытьФайл(лев(АдресФайла, стрдлина(АдресФайла)-5)+"1.DBf");
			КоличествоЗаписейДБФПоляШаблонов = БазаДБФПоляШаблонов.КоличествоЗаписей();
			ШаблонФайла.ПоследовательностьПолейВЗаголовкеБлокаДанных.Очистить();
			ШаблонФайла.ПоследовательностьПолейВФайле.Очистить();
			Если БазаДБФПоляШаблонов.Первая() Тогда
				Пока Истина Цикл
					Если БазаДБФПоляШаблонов.COD = БазаДБФБазаШаблонов.COD Тогда
						Попытка 
							Если БазаДБФПоляШаблонов.ZBD = 1 Тогда
								полеНовогоШаблона = ШаблонФайла.ПоследовательностьПолейВЗаголовкеБлокаДанных.Добавить();
							Иначе
								полеНовогоШаблона = ШаблонФайла.ПоследовательностьПолейВФайле.Добавить();
							КонецЕсли;				
						Исключение 	//устарел
							полеНовогоШаблона = ШаблонФайла.ПоследовательностьПолейВФайле.Добавить();
						КонецПопытки;				
						
						Если НЕ сокрлп(БазаДБФПоляШаблонов.POLETABL) = "" Тогда
							полеНовогоШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоКоду(БазаДБФПоляШаблонов.POLETABL) ;
						ИНАЧЕ
							полеНовогоШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(сокрлп(БазаДБФПоляШаблонов.POLNTABL), Истина) ;
							Если НЕ ЗначениеЗаполнено(полеНовогоШаблона.ПолеТаблицы) Тогда
								
								НовоеПолеВСистеме = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьЭлемент() ;
								НовоеПолеВСистеме.ДлинаТут 		= БазаДБФПоляШаблонов.D;
								НовоеПолеВСистеме.Комментарий 	= сокрлп(БазаДБФПоляШаблонов.C);
								НовоеПолеВСистеме.Наименование  = сокрлп(БазаДБФПоляШаблонов.POLNTABL);
								НовоеПолеВСистеме.ТипТут		= БазаДБФПоляШаблонов.T;
								НовоеПолеВСистеме.ТочностьТут   = БазаДБФПоляШаблонов.TO;
								НовоеПолеВСистеме.ПолеПринадлежитОбъектуТаблицы = ?(БазаДБФПоляШаблонов.PPO = 1, Истина, Ложь);
								НовоеПолеВСистеме.ОпределенноеЗначение 		= БазаДБФПоляШаблонов.OZ;
								НовоеПолеВСистеме.ЗаголовокПоляПоУмолчанию  = сокрлп(БазаДБФПоляШаблонов.ZPU);
								Попытка 
									НовоеПолеВСистеме.Коэффициент = БазаДБФПоляШаблонов.K;
								Исключение 	
								КонецПопытки;
								НовоеПолеВСистеме.Записать();
								
								полеНовогоШаблона.ПолеТаблицы = НовоеПолеВСистеме.Ссылка;
							КонецЕсли;
						КонецЕсли;
						
						полеНовогоШаблона.КомментарийПоля = сокрлп(БазаДБФПоляШаблонов.COMMENTR);
						полеНовогоШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = ?(БазаДБФПоляШаблонов.KEY_POLE = 1, Истина, Ложь);
						полеНовогоШаблона.ИмяПоляВФайле = сокрлп(БазаДБФПоляШаблонов.NAMEINFL);
						
						Попытка полеНовогоШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ?(БазаДБФПоляШаблонов.ENZTPS = 1, Истина, Ложь);
						Исключение 
						КонецПопытки;
						
					КонецЕсли;
					
					Если НЕ БазаДБФПоляШаблонов.Следующая() Тогда 
						Прервать;
					Конецесли;
					
				КонецЦикла; //обхода ДБФ ПоляШаблонов
			Конецесли;
			БазаДБФПоляШаблонов.ЗакрытьФайл();
			
			Попытка 
				Если БазаДБФБазаШаблонов.VIDSHABL = 1 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляКарточкиСправочникаИлиШапкиДокумента;
				иначеесли БазаДБФБазаШаблонов.VIDSHABL = 2 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляСпискаЭлементовСправочникаИлиДокументов;
				иначеесли БазаДБФБазаШаблонов.VIDSHABL = 3 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляТаблицыТовары;
				иначеесли БазаДБФБазаШаблонов.VIDSHABL = 4 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком;
				иначеесли БазаДБФБазаШаблонов.VIDSHABL = 5 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса;
				иначеесли БазаДБФБазаШаблонов.VIDSHABL = 6 Тогда
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляРегистровСведений;
				иначе //0
					ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант;
				КонецЕсли;
				
				Если БазаДБФБазаШаблонов.FILE_VER = 1 Тогда
					ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF ;
				ИначеЕсли БазаДБФБазаШаблонов.FILE_VER = 2 ТОгда
					ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS ;
				ИначеЕсли БазаДБФБазаШаблонов.FILE_VER = 3 ТОгда
					//пока нет XML
//					ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XML ;
				иначе //txt
					//БазаДБФБазаШаблонов.FILE_XLS = 0;
					ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.IT = 1 ТОгда
					ШаблонФайла.ИспользоватьТолькоДляИмпорта = Истина;
				иначеесли БазаДБФБазаШаблонов.IT = 2 ТОгда
					ШаблонФайла.ИспользоватьТолькоДляЭкспорта = Истина;
				иначе
					ШаблонФайла.ИспользоватьТолькоДляЭкспорта = Ложь;
					ШаблонФайла.ИспользоватьТолькоДляИмпорта = Ложь;
				КонецЕсли;
				ШаблонФайла.КодировкаФайла = сокрлп(БазаДБФБазаШаблонов.KODIROV);
				Если НЕ ЗначениеЗаполнено(ШаблонФайла.КодировкаФайла) Тогда
					ШаблонФайла.КодировкаФайла = "ANSI";
				КонецЕсли;
				ШаблонФайла.РазделительДаты = сокрлп(БазаДБФБазаШаблонов.RAZDELDA);
				ШаблонФайла.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла = БазаДБФБазаШаблонов.DOPUSTRO;
				Если БазаДБФБазаШаблонов.USTTDDEN = 1 Тогда
					ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = Истина;
				Иначе
					ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = Ложь;
				КонецЕсли;
				ШаблонФайла.МаскаФайла = сокрлп(БазаДБФБазаШаблонов.MASKFILE);
				ШаблонФайла.ИмяТаблицыШаблонаФайла = сокрлп(БазаДБФБазаШаблонов.ITAB);
				
				Если БазаДБФБазаШаблонов.SHOWOBMN = 1 Тогда
					ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена = Истина;
				Иначе
					ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.RASROKOB = 1 ТОгда
					ШаблонФайла.РасчитыватьСрокОкончанияОбмена = Истина;
				иначе
					ШаблонФайла.РасчитыватьСрокОкончанияОбмена = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.SHOWOBJS = 1 Тогда
					ШаблонФайла.ПоказыватьОбъектыОбмена = Истина;
				Иначе
					ШаблонФайла.ПоказыватьОбъектыОбмена = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.NOTCLOSE = 1 Тогда
					ШаблонФайла.НеЗакрыватьОкноПеречняОбъектовОбмена = Истина;
				Иначе
					ШаблонФайла.НеЗакрыватьОкноПеречняОбъектовОбмена = Ложь;
				КонецЕсли;
				
				БазаДБФПоляШаблонов = Новый XBase;
				БазаДБФПоляШаблонов.ОткрытьФайл(лев(АдресФайла, стрдлина(АдресФайла)-5)+"2.DBf");
				КоличествоЗаписейДБФПоляШаблонов = БазаДБФПоляШаблонов.КоличествоЗаписей();
				ШаблонФайла.УсловияФильтра.Очистить();
				Если БазаДБФПоляШаблонов.Первая() Тогда
					Пока Истина Цикл
						Если БазаДБФПоляШаблонов.COD = БазаДБФБазаШаблонов.COD Тогда
							полеНовогоШаблона = ШаблонФайла.УсловияФильтра.Добавить();
							полеНовогоШаблона.НомерПоля 		= БазаДБФБазаШаблонов.NP ;
							полеНовогоШаблона.Комментарий 		= сокрлп(БазаДБФПоляШаблонов.COMMENTR);
							полеНовогоШаблона.УсловиеРавенства 	= сокрлп(БазаДБФПоляШаблонов.UR);
							полеНовогоШаблона.ЗначениеПоля 		= сокрлп(БазаДБФПоляШаблонов.ZN);;
							полеНовогоШаблона.ИмяПоляВФайле 	= сокрлп(БазаДБФПоляШаблонов.NAMEINFL);
							Поведение = БазаДБФПоляШаблонов.P;
							Если Поведение = 1 Тогда
								полеНовогоШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.Пропустить ;
							ИначеЕсли Поведение = 2 Тогда
								полеНовогоШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриИмпорте ;
							ИначеЕсли Поведение = 3 Тогда
								полеНовогоШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриЭкспорте ;
							ИначеЕсли Поведение = 4 Тогда
								полеНовогоШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПринятьПустоеЗначение ;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ БазаДБФПоляШаблонов.Следующая() Тогда Прервать;
						Конецесли;
					КонецЦикла; //обхода ДБФ ПоляШаблонов
				Конецесли;
				БазаДБФПоляШаблонов.ЗакрытьФайл();
				
				ЕдиницаИзмерения = СокрЛП(БазаДБФБазаШаблонов.EINN);
				//Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				//	ШаблонФайла.ЕдиницаИзмеренияНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмерения);
				//КонецЕсли;
				//
				//Если БазаДБФБазаШаблонов.SPNN = 1 Тогда
				//	ШаблонФайла.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияТоваров.Производство ;	
				//ИначеЕсли БазаДБФБазаШаблонов.SPNN = 2 Тогда
				//	ШаблонФайла.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияТоваров.Переработка ;	
				//ИначеЕсли БазаДБФБазаШаблонов.SPNN = 3 Тогда
				//	ШаблонФайла.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияТоваров.Закупка ;	
				//КонецЕсли;
				//СчетУчетаТоваров = СокрЛП(БазаДБФБазаШаблонов.SUZPNN);
				//Если ЗначениеЗаполнено(СчетУчетаТоваров) Тогда
				//	ШаблонФайла.СчетУчетаТоваров = ПланыСчетов.Управленческий.НайтиПоКоду(СчетУчетаТоваров);
				//КонецЕсли;
				//СчетУчетаЗатрат = СокрЛП(БазаДБФБазаШаблонов.SUZTNN);
				//Если ЗначениеЗаполнено(СчетУчетаЗатрат) Тогда
				//	ШаблонФайла.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НайтиПоКоду(СчетУчетаЗатрат);
				//КонецЕсли;
				//
				//ТипНоменклатуры = БазаДБФБазаШаблонов.TIPNN;
				//Если ТипНоменклатуры = 1 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот ;
				//ИначеЕсли ТипНоменклатуры = 2 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
				//ИначеЕсли ТипНоменклатуры = 3 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция;
				//ИначеЕсли ТипНоменклатуры = 4 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа;
				//ИначеЕсли ТипНоменклатуры = 5 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Расход;
				//ИначеЕсли ТипНоменклатуры = 6 Тогда
				//	ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
				//КонецЕсли;
				//
				//Если БазаДБФБазаШаблонов.SMN = 1 Тогда
				//	ШаблонФайла.СоздаватьМаркиНоменклатуры = Истина;
				//иначе
				//	ШаблонФайла.СоздаватьМаркиНоменклатуры = Ложь;
				//КонецЕсли;
				//Если БазаДБФБазаШаблонов.SMPN = 1 Тогда
				//	ШаблонФайла.СоздаватьМетодыПолученияНоменклатуры = Истина;
				//Иначе
				//	ШаблонФайла.СоздаватьМетодыПолученияНоменклатуры = Ложь;
				//КонецЕсли;
				ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей = СокрЛП(БазаДБФБазаШаблонов.VIRNAIM);
				Если БазаДБФБазаШаблонов.DOSO = 1 Тогда
					ШаблонФайла.ДляОбновленияСуществующихОбъектов = Истина;
				Иначе
					ШаблонФайла.ДляОбновленияСуществующихОбъектов = Ложь;
				КонецЕсли;
				//ШаблонФайла.СоставлятьХарактеристикуПоВыражениюИзИменПолей = СокрЛП(БазаДБФБазаШаблонов.HIRNAIM);
				ШаблонФайла.РазделительВСоставномНаименовании = СокрЛП(БазаДБФБазаШаблонов.RAZVSIM);
				Если ШаблонФайла.РазделительВСоставномНаименовании = "Пробел" Тогда
					ШаблонФайла.РазделительВСоставномНаименовании = " ";
				КонецЕсли;
				ШаблонФайла.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(СокрЛП(БазаДБФБазаШаблонов.NG)) ;
				ШаблонФайла.НомерЛиста = БазаДБФБазаШаблонов.NAMELIST;
				ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей = СокрЛП(БазаДБФБазаШаблонов.SRIP);
				//Попытка 
				//	ШаблонФайла.Производитель = Справочники.SZМаркиНоменклатуры.НайтиПоНаименованию(СокрЛП(БазаДБФБазаШаблонов.MK)) ;
				//Исключение 	
				//КонецПопытки;
				ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля = СокрЛП(БазаДБФБазаШаблонов.ST1);
				ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки = СокрЛП(БазаДБФБазаШаблонов.ST2);
				ШаблонФайла.ВыполнитьПрограммныйКодПередНачалом = СокрЛП(БазаДБФБазаШаблонов.ST3);
				ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончания = СокрЛП(БазаДБФБазаШаблонов.ST4);
				ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля = СокрЛП(БазаДБФБазаШаблонов.ST5);
				ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки = СокрЛП(БазаДБФБазаШаблонов.ST6);
				
//		ШаблонФайла.НаправлениеДеятельности = Справочники.НаправленияДеятельности.НайтиПоНаименованию(СокрЛП(БазаДБФБазаШаблонов.NAPRV)) ;
				
				//Если БазаДБФБазаШаблонов.SPSPS = 1 Тогда
				//	ШаблонФайла.СпособСписания = Перечисления.МетодОценкиТоваров.FIFO;
				//ИначеЕсли БазаДБФБазаШаблонов.SPSPS = 2 Тогда
				//	ШаблонФайла.СпособСписания = Перечисления.МетодОценкиТоваров.ПоСредней;
				//КонецЕсли;
				
				ШаблонФайла.ГруппаДляНовойНоменклатуры = Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(БазаДБФБазаШаблонов.GNN));		
				Если ЗначениеЗаполнено(ШаблонФайла.ГруппаДляНовойНоменклатуры) и не ШаблонФайла.ГруппаДляНовойНоменклатуры.ЭтоГруппа Тогда
					ШаблонФайла.ГруппаДляНовойНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() ;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.VIPPR = 1 Тогда
					ШаблонФайла.ВыполнятьПрограммы = Истина;
				Иначе
					ШаблонФайла.ВыполнятьПрограммы = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.FILNS = 1 Тогда
					ШаблонФайла.ФильтроватьНеподходящиеСимволы = Истина;
				Иначе
					ШаблонФайла.ФильтроватьНеподходящиеСимволы = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.KPNS = 1 Тогда
					ШаблонФайла.КаждоеПолеНоваяСтрока = Истина;
				Иначе
					ШаблонФайла.КаждоеПолеНоваяСтрока = Ложь;
				КонецЕсли;				
				Если БазаДБФБазаШаблонов.PSMZ = 1 Тогда
					ШаблонФайла.ПустыеСтрокиМеждуЗаписями = Истина;
				Иначе
					ШаблонФайла.ПустыеСтрокиМеждуЗаписями = Ложь;
				КонецЕсли;				
				Если БазаДБФБазаШаблонов.ESPD = 1 Тогда
					ШаблонФайла.ЭтоПлатежныйДокумент = Истина;
				Иначе
					ШаблонФайла.ЭтоПлатежныйДокумент = Ложь;
				КонецЕсли;
				//ШаблонФайла.ВалютаНеНациональная = Справочники.Валюты.НайтиПоКоду(СокрЛП(БазаДБФБазаШаблонов.VNN)) ;
				ШаблонФайла.ОбрабатыватьПлатежныеДокументы = СокрЛП(БазаДБФБазаШаблонов.OPD);
				Если БазаДБФБазаШаблонов.TPRIP = 1 Тогда
					ШаблонФайла.ТолькоПриходные = Истина;
				Иначе
					ШаблонФайла.ТолькоПриходные = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.TRASP = 1 Тогда
					ШаблонФайла.ТолькоРасходные = Истина;
				Иначе
					ШаблонФайла.ТолькоРасходные = Ложь;
				КонецЕсли;
				ШаблонФайла.РазделителиВстречаютсяМеждуЗнаками = СокрЛП(БазаДБФБазаШаблонов.RVMZ);
				
				ШаблонФайла.УсловиеДебетаПоле 		= СокрЛП(БазаДБФБазаШаблонов.USLDP);
				ШаблонФайла.УсловиеДебета 			= СокрЛП(БазаДБФБазаШаблонов.USLD);
				ШаблонФайла.УсловиеДебетаЗначение 	= СокрЛП(БазаДБФБазаШаблонов.USLDZ);
				
				Если БазаДБФБазаШаблонов.SBSK = 1 Тогда
					ШаблонФайла.СоздаватьБанковскиеСчетаКлиентов = Истина;
				Иначе
					ШаблонФайла.СоздаватьБанковскиеСчетаКлиентов = Ложь;
				КонецЕсли;
				
				Если БазаДБФБазаШаблонов.SKPO = 1 Тогда
					ШаблонФайла.СоздаватьКлиентовПоОКПО = Истина;
				Иначе
					ШаблонФайла.СоздаватьКлиентовПоОКПО = Ложь;
				КонецЕсли;
				
				Если БазаДБФБазаШаблонов.SDK = 1 Тогда
					ШаблонФайла.СоздаватьДоговораКлиентов = Истина;
				Иначе
					ШаблонФайла.СоздаватьДоговораКлиентов = Ложь;
				КонецЕсли;
				
				Если БазаДБФБазаШаблонов.NIPSF = 1 Тогда
					ШаблонФайла.НеУчитыватьПоследнююСтрокуФайла = Истина;
				Иначе
					ШаблонФайла.НеУчитыватьПоследнююСтрокуФайла = Ложь;
				КонецЕсли;
				ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки = БазаДБФБазаШаблонов.PROPNS;
				ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки 	= БазаДБФБазаШаблонов.PROPKS;
				Если БазаДБФБазаШаблонов.POPRDO = 1 Тогда
					ШаблонФайла.ПопытатьсяПроводитьДокументы = Истина;
				Иначе
					ШаблонФайла.ПопытатьсяПроводитьДокументы = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.ISZBD = 1 Тогда
					ШаблонФайла.ИспользоватьЗаголовкиБлоковДанных = Истина;
				Иначе
					ШаблонФайла.ИспользоватьЗаголовкиБлоковДанных = Ложь;
				КонецЕсли;
				ШаблонФайла.УсловиеЗаголовкаБлокаДанныхПоле 				= СокрЛП(БазаДБФБазаШаблонов.USLZDP);
				ШаблонФайла.УсловиеЗаголовкаБлокаДанных 					= СокрЛП(БазаДБФБазаШаблонов.USLZD);
				ШаблонФайла.УсловиеЗаголовкаБлокаДанныхЗначение 			= СокрЛП(БазаДБФБазаШаблонов.USLZDZ);
				ШаблонФайла.УсловиеЗаголовкаБлокаДанныхНаличиеПодстроки		= СокрЛП(БазаДБФБазаШаблонов.USLZDZP);				
				ШаблонФайла.РазделительПолейАльтернативный 					= сокрлп(БазаДБФБазаШаблонов.RAZDELIT2);
				ШаблонФайла.ЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить 	= БазаДБФБазаШаблонов.CHSKPRO;
				ШаблонФайла.ДобавитьТекстВШапкуФайла						= СокрЛП(БазаДБФБазаШаблонов.TSF);
				ШаблонФайла.ДобаватьТекстВПодвалФайла						= СокрЛП(БазаДБФБазаШаблонов.TPF);
				
				Если БазаДБФБазаШаблонов.NODOUSDV = 1 Тогда
					ШаблонФайла.НомерДокументаУстанавливатьНоНомеруВходящегоИлиИсходящегоДокумента = Истина;
				Иначе
					ШаблонФайла.НомерДокументаУстанавливатьНоНомеруВходящегоИлиИсходящегоДокумента = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.USD1 = 1 Тогда
					ШаблонФайла.УстанавливатьПервыйПодходящийДоговорКлиента = Истина;
				Иначе
					ШаблонФайла.УстанавливатьПервыйПодходящийДоговорКлиента = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.USDS1 = 1 Тогда
					ШаблонФайла.УстанавливатьДоговорКлиентаЕслиПодходитТолькоОдин = Истина;
				Иначе
					ШаблонФайла.УстанавливатьДоговорКлиентаЕслиПодходитТолькоОдин = Ложь;
				КонецЕсли;
				Если не СокрЛП(БазаДБФБазаШаблонов.SDDSR) = "" Тогда
					ШаблонФайла.СтатьяДДСРасходаПоУмолчанию = Справочники.СтатьиДвиженияДенег.НайтиПоКоду(СокрЛП(БазаДБФБазаШаблонов.SDDSR));
				КонецЕсли;
				Если не СокрЛП(БазаДБФБазаШаблонов.SDDSP) = "" Тогда
					ШаблонФайла.СтатьяДДСПоступленияПоУмолчанию = Справочники.СтатьиДвиженияДенег.НайтиПоКоду(СокрЛП(БазаДБФБазаШаблонов.SDDSP));
				КонецЕсли;
				Если БазаДБФБазаШаблонов.VSNED = 1 Тогда
					ШаблонФайла.ВсегдаСоздаватьНовыйЭлементИлиДокумент = Истина;
				Иначе
					ШаблонФайла.ВсегдаСоздаватьНовыйЭлементИлиДокумент = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.IVKKTPT = 1 Тогда
					ШаблонФайла.ИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы = Истина;
				Иначе
					ШаблонФайла.ИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.PVNZNSD = 1 Тогда
					ШаблонФайла.ПоискВНазначенииПлатежаНомераСчетаИДоговора = Истина;
				Иначе
					ШаблонФайла.ПоискВНазначенииПлатежаНомераСчетаИДоговора = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.SDRPOK = 1 Тогда
					ШаблонФайла.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток = Истина;
				Иначе
					ШаблонФайла.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток = Ложь;
				КонецЕсли;
				
				ШаблонФайла.ВставлятьМеждуТекстамиНазначенияСледующийТекст = Лев(БазаДБФБазаШаблонов.VSMTNST, БазаДБФБазаШаблонов.VSMTNSTD);
				
				Если БазаДБФБазаШаблонов.USPRIZA = 1 Тогда
					ШаблонФайла.УстанавливатьПризнакАвансаДокументамДенежныхСредств = Истина;
				Иначе
					ШаблонФайла.УстанавливатьПризнакАвансаДокументамДенежныхСредств = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.OTFDNP = 1 Тогда
					ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести = Истина;
				Иначе
					ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.OTFKD = 1 Тогда
					ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента = Истина;
				Иначе
					ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.UDFPUI = 1 Тогда
					ШаблонФайла.УдалятьФайлПослеУдачногоИмпорта = Истина;
				Иначе
					ШаблонФайла.УдалятьФайлПослеУдачногоИмпорта = Ложь;
				КонецЕсли;
				ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена = БазаДБФБазаШаблонов.USDDPI;
				Если БазаДБФБазаШаблонов.ZAVSFIP = 1 Тогда
					ШаблонФайла.ЗагружатьВсеФайлыИзПапки = Истина;
				Иначе
					ШаблонФайла.ЗагружатьВсеФайлыИзПапки = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.VEJUIEO = 1 Тогда
					ШаблонФайла.ВестиЖурналИмпортноЭкспортныхОпераций = Истина;
				Иначе
					ШаблонФайла.ВестиЖурналИмпортноЭкспортныхОпераций = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.ISVPK = 1 Тогда
					ШаблонФайла.ИскатьВПодкаталогах = Истина;
				Иначе
					ШаблонФайла.ИскатьВПодкаталогах = Ложь;
				КонецЕсли;
				Если БазаДБФБазаШаблонов.FAAR = 1 Тогда
					ШаблонФайла.ФайлАрхив = Истина;
				Иначе
					ШаблонФайла.ФайлАрхив = Ложь;
				КонецЕсли;
					
				ШаблонФайла.ПарольАрхива = СокрЛП(БазаДБФБазаШаблонов.PAFA);
				ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка = ?(БазаДБФБазаШаблонов.SONZPE = 1, Истина, Ложь);
				ШаблонФайла.ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора = ?(БазаДБФБазаШаблонов.PEPZVOSP = 1, Истина, Ложь);
				ШаблонФайла.ЕслиКлиентНеНайденПриИмпортеОткрыватьПодборИзСуществующих = ?(БазаДБФБазаШаблонов.EKNNPIOP = 1, Истина, Ложь);
				ШаблонФайла.НеВыводитьСообщениеОЗавершенииОбмена = ?(БазаДБФБазаШаблонов.NVSOOO = 1, Истина, Ложь);
				ШаблонФайла.СуммироватьТолькоЕслиПлатежкиСОднимНомером = ?(БазаДБФБазаШаблонов.STEPSON = 1, Истина, Ложь);
				ШаблонФайла.ПризнакДебетаОтрицательнаяСумма = ?(БазаДБФБазаШаблонов.PRDEOTSU = 1, Истина, Ложь);
				ШаблонФайла.ИмяРегистра = СокрЛП(БазаДБФБазаШаблонов.IMAREGI);
								
				
			Исключение Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устаревший формат обмена шаблонов:") + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
			
			Попытка 
				ШаблонФайла.Записать();
			Исключение 	Сообщение  =  Новый СообщениеПользователю;
				Сообщение.Текст  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;		
			
			Если НЕ БазаДБФБазаШаблонов.Следующая() Тогда 
				Прервать;
			Конецесли;
			
		КонецЦикла; //обхода ДБФ БазаШаблонов
	Конецесли;
	БазаДБФБазаШаблонов.ЗакрытьФайл();
	
	ТекстыШаблона = Новый ЧтениеТекста(лев(АдресФайла, стрдлина(АдресФайла) - 5) + "S.TXt");
	СтрокаТекста = ТекстыШаблона.ПрочитатьСтроку();
	
	ВерсияКонфигурации = "" + Константы.ВерсияПрограммы.Получить();
	Если не СтрокаТекста = ВерсияКонфигурации Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия выгрузки шаблонов") + " " + СтрокаТекста + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не совпадает с текущей:") + " " + ВерсияКонфигурации;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	пока Не СтрокаТекста = Неопределено Цикл
		ДобавитьТекстШаблона("АдресФайла", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодПередНачалом", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодПослеОкончания", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля", ТекстыШаблона);
		ДобавитьТекстШаблона("ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки", ТекстыШаблона);
		ДобавитьТекстШаблона("ДобаватьТекстВПодвалФайла", ТекстыШаблона);
		ДобавитьТекстШаблона("ДобавитьТекстВШапкуФайла", ТекстыШаблона);
		ДобавитьТекстШаблона("ИспользоватьСтрокуЗаголовок", ТекстыШаблона);
		ДобавитьТекстШаблона("Комментарий", ТекстыШаблона);
		ДобавитьТекстШаблона("СоставлятьНаименованиеГруппыРодителяИзИменПолей", ТекстыШаблона);
		ДобавитьТекстШаблона("СоставлятьНаименованиеПоВыражениюИзИменПолей", ТекстыШаблона);
		ДобавитьТекстШаблона("СоставлятьХарактеристикуПоВыражениюИзИменПолей", ТекстыШаблона);
		ДобавитьТекстШаблона("ТекстПроизвольногоЗапроса", ТекстыШаблона);	
		СтрокаТекста = ТекстыШаблона.ПрочитатьСтроку();
	КонецЦикла;
	ТекстыШаблона.Закрыть();
	
КонецПроцедуры //ВыполнитьЗагрузкуШаблоновНаСервере(АдресФайла)

Процедура ДобавитьТекстШаблона(ИмяРеквизита, ТекстыШаблона)
	
	ИмяШаблона = ТекстыШаблона.ПрочитатьСтроку();
	СтрокаНачалаТекста = ТекстыШаблона.ПрочитатьСтроку();
	если СтрокаНачалаТекста = "<BEGIN!>" тогда
		
		СтрокаТекста = ТекстыШаблона.ПрочитатьСтроку();
		ТекстДляРеквизита = "";
		пока не СтрокаТекста = Неопределено
			и не СтрокаТекста = "<!END>" цикл
			
			если не ТекстДляРеквизита = "" тогда
				ТекстДляРеквизита = ТекстДляРеквизита + символы.пс;	
			КонецЕсли;
			
			ТекстДляРеквизита = ТекстДляРеквизита + СтрокаТекста;
			СтрокаТекста = ТекстыШаблона.ПрочитатьСтроку();
		КонецЦикла;
		
		если не ТекстДляРеквизита = "" Тогда		
			ЭтотШаблон = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.НайтиПоНаименованию(ИмяШаблона) ;
			Если ЗначениеЗаполнено(ЭтотШаблон) Тогда
				ЭтотШаблонОбъект = ЭтотШаблон.ПолучитьОбъект();
				ЭтотШаблонОбъект[ИмяРеквизита] = ТекстДляРеквизита;
				ЭтотШаблонОбъект.Записать();
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблоныИзФайла(Команда)
	
	ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФильтр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл") + " (ieUNFSH0.DBf)|ieUNFSH0.DBf";
	ДиалогРасширение = "DBf";
	ДиалогВыбФайла.Заголовок 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для импорта шаблонов:");
	ДиалогВыбФайла.ПолноеИмяФайла 	= ПодсистемаИЭИмпортЭкспортФС.КонстантыОтносительныйАдресФайловПолучить() + "ieUNFSH0.DBf"; //АДРЕС
	ДиалогВыбФайла.Фильтр 		= ДиалогФильтр;
	ДиалогВыбФайла.Расширение 	= ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор = Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбФайла.ИндексФильтра = 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = Истина;
	Если ДиалогВыбФайла.Выбрать() Тогда
		АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
		ВыполнитьЗагрузкуШаблоновНаСервере(АдресФайла);
	КонецЕсли; //когда файл АдресФайла выбран
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)          // ПРИ СОЗДАНИИ НА СЕРВЕРЕ
	
	Если Параметры.ИспользоватьОтбор = "Э" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьТолькоДляИмпорта");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ИспользоватьТолькоДляИмпорта;
		
	ИначеЕсли Параметры.ИспользоватьОтбор = "И" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьТолькоДляЭкспорта");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Параметры.ИспользоватьТолькоДляЭкспорта;
	КонецЕсли;
	
	Если Параметры.ИспользоватьОтборПоВиду = "С" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляСпискаЭлементовСправочникаИлиДокументов);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
		
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "К" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляКарточкиСправочникаИлиШапкиДокумента);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
		
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "Б" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
		
	иначеЕсли Параметры.ИспользоватьОтборПоВиду = "З" Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидШаблона");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ВидыШаблона = Новый списокзначений;
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляТаблицыТовары);
		ВидыШаблона.Добавить(Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант);
		ЭлементОтбора.ПравоеЗначение = ВидыШаблона;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1);
КонецПроцедуры
