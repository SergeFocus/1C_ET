//sza141201-1506 формаоплаты
//sza140905-2154
//sza140420-2104  
//sza140114-0009 : 
//sza131119-2324
//sza110726-1530 
//sza110521-2153 ОпределитьФорматФайлаПоРасширению
//sza110515-0105 регистр сведений
//sza110427-0023 выгрузка
//sza110406-1938 
//sza110308-0135 
//sza110302-0011 
//sza110225-1217 
//sza110225-0102 УстановитьВидимостьДоступностьЭлементовФормы(
//sza110224-1525 РезультатПроизвольногоЗапроса
//sza110217-1131 СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка
//sza110216-2016 
//sza110216-1635 Файл архив
//sza110213-2131 ПравилаДляРаботыСЗапасами
//sza110213-0114 ШаблонФайла.ИскатьВПодкаталогах
//sza110213-0052 ?(Объект.ЗагружатьВсеФайлыИзПапки,
//sza110211-1203 вся папка
//sza110210-0055 результат произволього запроса
//sza110209-1618 
//sza110209-0050 ЗаполнитьПоРеквизитамОбъектаБазыДанных
//sza110207-1746 
//sza110205-2256 разное
//sza110131-1256 
//sza110128-1458 
//sza110128-0224 
//sza110126-1903 
//sza110126-0307 
//sza110120-0233 
//sza110118-1411 
//sza110112-1445 
//sza110111-0045 
//sza110110-1316 
//sza110107-1247 
//sza110107-0516 
//sza101222-2040 
//sza101209-2253 
//sza101207-2358 
//sza101204-0122 
//sza101203-0150 
//sza101201-1335 
//sza101116-1352 
//sza101116-0140 
//sza101115-1649 
//sza101110-1417 
//sza101109-1732 
//sza101108-2359 
//sza101105-0212 
//sza101025
//sza101023
&НаКлиенте
Процедура АдресФайлаБезВыбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДиалогФильтр = ПодсистемаИЭИмпортЭкспортФС.СтруктураДиалогФильтр(Объект);
	ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
	ДиалогФильтр = СтруктураДиалогФильтр.ДиалогФильтр;
	ДиалогВыбораФайла1 = Новый ДиалогВыбораФайла(?(Объект.ЗагружатьВсеФайлыИзПапки, РежимДиалогаВыбораФайла.ВыборКаталога, РежимДиалогаВыбораФайла.Открытие));
	ДиалогВыбораФайла1.Заголовок  		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите") + " " + ?(Объект.ЗагружатьВсеФайлыИзПапки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("каталог"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("файл")) + " :";
	ДиалогВыбораФайла1.ПолноеИмяФайла 	= ?(НЕ Объект.АдресФайла = "", Объект.АдресФайла, ПодсистемаИЭИмпортЭкспортФС.КонстантыОтносительныйАдресФайловПолучить()); //АДРЕС
	ДиалогВыбораФайла1.Фильтр  			= ДиалогФильтр;
	ДиалогВыбораФайла1.Расширение  		= ДиалогРасширение;
	ДиалогВыбораФайла1.МножественныйВыбор = ЛОЖЬ;
	ДиалогВыбораФайла1.ПредварительныйПросмотр = ИСТИНА;
	ДиалогВыбораФайла1.ИндексФильтра 	= 0;
	ДиалогВыбораФайла1.ПроверятьСуществованиеФайла = ЛОЖЬ;
	
	Если ДиалогВыбораФайла1.Выбрать() Тогда
		Объект.АдресФайла = ?(Объект.ЗагружатьВсеФайлыИзПапки, ДиалогВыбораФайла1.Каталог, ДиалогВыбораФайла1.ПолноеИмяФайла);
		Попытка 
			ПодсистемаИЭИмпортЭкспортФС.константыПодсистемаИЭИмпортЭкспортФСУстановить(Объект.АдресФайла);
		Исключение 
		КонецПопытки; 
		
		ОпределитьФорматФайлаПоРасширению();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстроСоздатьНовоеПоле(Команда)
	
	НаименованиеПоля = "";
	ВвестиСтроку(НаименованиеПоля, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите наименование нового поля") + ": ", 100);
	
	Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ПолеТаблицы =  БыстроСоздатьНовоеПолеНаСервере(НаименованиеПоля);
	ПриИзмененииПоля(ИСТИНА);
	
КонецПроцедуры

&НаСервере
Функция   БыстроСоздатьНовоеПолеНаСервере(НаименованиеПоля, ТипПоля = Неопределено)
	
	НовоеПоле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьЭлемент();
	Если ТипПоля = Неопределено Тогда
		НовоеПоле.ДлинаТут = 100;
		НовоеПоле.ТипТут = "S";
		НовоеПоле.ТочностьТут = 0;
		
	Иначе
		Если ТипПоля = Тип("Строка") Тогда
			НовоеПоле.ДлинаТут = 100;
			НовоеПоле.ТипТут = "S";
			НовоеПоле.ТочностьТут = 0;
			
		ИначеЕсли  ТипПоля = Тип("Число") Тогда
			НовоеПоле.ДлинаТут = 16;
			НовоеПоле.ТипТут = "N";
			НовоеПоле.ТочностьТут = 2;
			
		ИначеЕсли  ТипПоля = Тип("Дата") Тогда
			НовоеПоле.ДлинаТут = 8;
			НовоеПоле.ТипТут = "D";
			НовоеПоле.ТочностьТут = 0;
			
		ИначеЕсли  ТипПоля = Тип("Булево") Тогда
			НовоеПоле.ДлинаТут = 1;
			НовоеПоле.ТипТут = "L";
			НовоеПоле.ТочностьТут = 0;
			
		Иначе
			НовоеПоле.ДлинаТут = 100;
			НовоеПоле.ТипТут = "S";
			НовоеПоле.ТочностьТут = 0;
			
		КонецЕсли;
	КонецЕсли;
	
	НовоеПоле.ЗаголовокПоляПоУмолчанию = СтрЗаменить(НаименованиеПоля, " ", "");
	НовоеПоле.Комментарий = НаименованиеПоля;
	НовоеПоле.Наименование = СтрЗаменить(НаименованиеПоля, " ", "");
	//НовоеПоле.ОпределенноеЗначение =
	//НовоеПоле.ПолеПринадлежитОбъектуТаблицы =
	//НовоеПоле.Родитель =
	
	Попытка //Записи НовоеПоле
		НовоеПоле.Записать();
		Возврат НовоеПоле.Ссылка;
		
	Исключение //Записи НовоеПоле
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи справочника") + ": " + НовоеПоле + " " + ОписаниеОшибки();
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПустаяСсылка();
		
	КонецПопытки; //Записи НовоеПоле
	
КонецФункции //БыстроСоздатьНовоеПолеНаСервере

&НаКлиенте
Процедура ВидШаблонаПриИзменении(Элемент)
	
	Если Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.Предопределенный") 
		И НЕ Объект.Предопределенный Тогда
		
		Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант");
		
	ИначеЕсли Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса") Тогда
		
		Объект.ИспользоватьТолькоДляЭкспорта = ИСТИНА;
		Объект.ИспользоватьТолькоДляИмпорта = ЛОЖЬ;
		Объект.ИмяТаблицыШаблонаФайла = "";
		
	ИначеЕсли Объект.ВидШаблона = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком") 
		И СокрЛП(Объект.ОбрабатыватьПлатежныеДокументы) = "" Тогда
		
		Объект.ОбрабатыватьПлатежныеДокументы = "Безналичные";
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаСоздаватьНовыйЭлементИлиДокументПриИзменении(Элемент)
	
	Если Объект.ДляОбновленияСуществующихОбъектов 
		И Объект.ВсегдаСоздаватьНовыйЭлементИлиДокумент Тогда
		
		Объект.ДляОбновленияСуществующихОбъектов = ЛОЖЬ; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭтотШаблонВФайл(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогФильтр = "Файл (ieUNFSH0.DBf)|ieUNFSH0.DBf";
		ДиалогРасширение = "DBf";
		ДиалогВыбФайла.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для экспорта шаблона") + ": ";
		//ДиалогВыбФайла.ПолноеИмяФайла = ПодсистемаИЭИмпортЭкспортФС.КонстантыОтносительныйАдресФайловПолучить() + "ieUNFSH0.DBf";
		ДиалогВыбФайла.ПолноеИмяФайла = "ieUNFSH0.DBf";
		ДиалогВыбФайла.Фильтр = ДиалогФильтр;
		ДиалогВыбФайла.Расширение = ДиалогРасширение;
		ДиалогВыбФайла.МножественныйВыбор = ЛОЖЬ;
		ДиалогВыбФайла.ПредварительныйПросмотр = ИСТИНА;
		ДиалогВыбФайла.ИндексФильтра = 0;
		ДиалогВыбФайла.ПроверятьСуществованиеФайла = ЛОЖЬ;
		
		Если ДиалогВыбФайла.Выбрать() Тогда
			АдресФайла = ДиалогВыбФайла.ПолноеИмяФайла;
			ПодсистемаИЭИмпортЭкспортФС.ВыполнитьВыгрузкуШаблоновНаСервере(АдресФайла, Объект.Ссылка);
		КонецЕсли; //когда файл АдресФайла выбран
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураИмпортаЭкспорта = ПодсистемаИЭИмпортЭкспортФСКлиент.СоздатьСтруктуруВызоваИмпЭкспОперации(
		неопределено, 
		Объект.Ссылка, 
		ИСТИНА, 
		Объект.АдресФайла, 
		"С",
		"",
		,
		неопределено);
		
		ТипМета = "СправочникСсылка";
		
		ТипОбъектаОперации = "";//Прав(ЗадачаОбмена.ТипОбъектаОперации, стрДлина(ЗадачаОбмена.ТипОбъектаОперации) - 1);
		СтруктураИмпортаЭкспорта.ТипМетаОбъектаОбмена = ТипМета;
		СтруктураИмпортаЭкспорта.ТипОбъектаОперации = ТипОбъектаОперации;
		Если Объект.ИмяТаблицыШаблонаФайла = "" Тогда 
			СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "LISTofALL";	
		Иначе
			СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = Объект.ИмяТаблицыШаблонаФайла;
		КонецЕсли;
		
		СтруктураИмпортаЭкспорта.АдресФайла = Объект.АдресФайла;
		
		СтруктураИмпортаЭкспорта.ОбъектОперации = Неопределено ;
		
		ПодсистемаИЭИмпортЭкспортФСКлиент.ИмпортЭкспортОбработкаОбмена(СтруктураИмпортаЭкспорта);
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объект не записан!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьПрограммыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныйШаблонИспользоватьТолькоДляОбъектовСОпределеннымиРеквизитамиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДляОбновленияСуществующихОбъектовПриИзменении(Элемент)
	
	Если Объект.ДляОбновленияСуществующихОбъектов 
		И Объект.ВсегдаСоздаватьНовыйЭлементИлиДокумент Тогда
		
		Объект.ВсегдаСоздаватьНовыйЭлементИлиДокумент = ЛОЖЬ; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСимволTAB(Команда)
	
	Объект.РазделительПолей = Объект.РазделительПолей + Символы.Таб;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительноеЗаполнениеРеквизитовПриИмпортеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокБлокаДанныхШаблонаПолеТаблицыПриИзменении(Элемент)
	
	Элементы.ЗаголовокБлокаДанныхШаблона.ТекущиеДанные.КомментарийПоля = ИзменитьКомментарий(Элементы.ЗаголовокБлокаДанныхШаблона.ТекущиеДанные.ПолеТаблицы);
	
	Если НЕ Объект.ФорматФайла = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF") 
		И НЕ ЗначениеЗаполнено(Элементы.ЗаголовокБлокаДанныхШаблона.ТекущиеДанные.ИмяПоляВФайле) Тогда
		
		Элементы.ЗаголовокБлокаДанныхШаблона.ТекущиеДанные.ИмяПоляВФайле = ИзменитьИмяПоляВФайле(Элементы.ЗаголовокБлокаДанныхШаблона.ТекущиеДанные.ПолеТаблицы); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьВсеФайлыИзПапкиПриИзменении(Элемент)
	
	Если Объект.ЗагружатьВсеФайлыИзПапки Тогда
		
		Объект.ВестиЖурналИмпортноЭкспортныхОпераций = ИСТИНА;
		Объект.ИспользоватьТолькоДляИмпорта = ИСТИНА;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПараметрыИзТекстаЗапроса(Команда)
	
	ЗагрузитьПараметрыИзТекстаЗапросаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыИзТекстаЗапросаНаСервере()
	
	ТекстПроизвольногоЗапроса = Объект.ТекстПроизвольногоЗапроса;
	
	МассивКонцов  = Новый ТаблицаЗначений;
	МассивКонцов.Колонки.Добавить("НомерСимволаКонца");
	
	НачалоПараметра = 1;
	ЧислоИтераций = 0;
	Пока НЕ НачалоПараметра = 0 
		И ЧислоИтераций < 99 Цикл
		
		ЧислоИтераций = ЧислоИтераций + 1;
		
		НачалоПараметра = Найти(ТекстПроизвольногоЗапроса, "&");
		
		Если НЕ НачалоПараметра = 0 Тогда
			ТекстПроизвольногоЗапроса = Сред(ТекстПроизвольногоЗапроса, НачалоПараметра + 1);
			
			МассивКонцов.Очистить();
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, Символы.ВТаб);
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, ")");
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, Символы.ПС);
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, Символы.Таб);						
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, Символы.НПП);	
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, " ");
			СтрокаМассива = МассивКонцов.Добавить();
			СтрокаМассива.НомерСимволаКонца = Найти(ТекстПроизвольногоЗапроса, ",");									
			
			МассивКонцов.Сортировать("НомерСимволаКонца");
			
			БылКонец = ЛОЖЬ;
			Для Каждого СтрокаМассива Из МассивКонцов Цикл
				
				КонецПараметра = СтрокаМассива.НомерСимволаКонца;
				Если НЕ КонецПараметра = 0 Тогда 	
					НовыйПараметрНаименованиеПараметра = Лев(ТекстПроизвольногоЗапроса, КонецПараметра - 1);
					ПараметрыОтбора = Новый Структура("НаименованиеПараметра", НовыйПараметрНаименованиеПараметра);
					МассивНайденного = Объект.ПараметрыПроизвольногоЗапроса.НайтиСтроки(ПараметрыОтбора);
					Если МассивНайденного.Количество() = 0 Тогда
						НовыйПараметр = Объект.ПараметрыПроизвольногоЗапроса.Добавить();
						НовыйПараметр.НаименованиеПараметра = НовыйПараметрНаименованиеПараметра;	
					КонецЕсли;
					ТекстПроизвольногоЗапроса = Сред(ТекстПроизвольногоЗапроса, КонецПараметра);
					БылКонец = ИСТИНА;
					Прервать;	
				КонецЕсли;	
			КонецЦикла;
			Если НЕ БылКонец ТОгда
				НовыйПараметр = Объект.ПараметрыПроизвольногоЗапроса.Добавить();
				НовыйПараметр.НаименованиеПараметра = ТекстПроизвольногоЗапроса;
				НачалоПараметра = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузитьПараметрыИзТекстаЗапросаНаСервере()

&НаКлиенте
Процедура ЗаполнитьПоРеквизитамКоманда(Команда)
	
	ПараметрыФормы = Новый Структура("ТипОбъектаОбмена","");
	ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТипаОбъектаБазыДанных", ПараметрыФормы);
	ФормаВыбораТипа.ОткрытьМодально();
	
	ТипОбъектаОбмена = ФормаВыбораТипа.ТипОбъектаОбмена;
	Если ЗначениеЗаполнено(ТипОбъектаОбмена) Тогда
		
		Если Лев(ТипОбъектаОбмена, 1) = "Д" Тогда
			ТипМета = "Документы";
		Иначе
			ТипМета = "Справочники";
		КонецЕсли;
		
		ТипОбъектаОбмена = Прав(ТипОбъектаОбмена, стрДлина(ТипОбъектаОбмена) - 1);
		Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оценить таблицу объекта") + " " + ТипОбъектаОбмена + "? (НЕТ - сам объект)", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			ПараметрыФормы = Новый Структура("ТипОбъектаОбмена", ТипОбъектаОбмена);
			ПараметрыФормы.Вставить("ТипМета", ТипМета);
			ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТабличнойЧасти", ПараметрыФормы);
			ФормаВыбораТипа.ОткрытьМодально();
			
			ТаблицаОбъектаОбмена = ФормаВыбораТипа.ИмяТабличнойЧасти;			
		Иначе 
			ТаблицаОбъектаОбмена = "";
		КонецЕсли;
		
		ОценитьОбъектНаСервере(ТипМета, ТипОбъектаОбмена, ТаблицаОбъектаОбмена, ЛОЖЬ, 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРеквизитамОбъектаБазыДанных(Команда)
	
	ПараметрыФормы = Новый Структура("ТипОбъектаОбмена","");
	ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТипаОбъектаБазыДанных", ПараметрыФормы);
	ФормаВыбораТипа.ОткрытьМодально();
	
	ТипОбъектаОбмена = ФормаВыбораТипа.ТипОбъектаОбмена;
	Если ЗначениеЗаполнено(ТипОбъектаОбмена) Тогда
		
		Если Лев(ТипОбъектаОбмена, 1) = "Д" Тогда
			ТипМета = "Документы";
		Иначе
			ТипМета = "Справочники";
		КонецЕсли;
		
		ТипОбъектаОбмена = Прав(ТипОбъектаОбмена, стрДлина(ТипОбъектаОбмена) - 1);
		Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оценить таблицу объекта") + " " + ТипОбъектаОбмена + "? (НЕТ - сам объект)", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			ПараметрыФормы = Новый Структура("ТипОбъектаОбмена", ТипОбъектаОбмена);
			ПараметрыФормы.Вставить("ТипМета", ТипМета);
			ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТабличнойЧасти", ПараметрыФормы);
			ФормаВыбораТипа.ОткрытьМодально();
			
			ТаблицаОбъектаОбмена = ФормаВыбораТипа.ИмяТабличнойЧасти;
		Иначе 
			ТаблицаОбъектаОбмена = "";
		КонецЕсли;
		
		ОценитьОбъектНаСервере(ТипМета, ТипОбъектаОбмена, ТаблицаОбъектаОбмена, ЛОЖЬ, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонНаСервере(АдресФайла, ТипОценки)
	
	Если СтрДлина(АдресФайла) > 4 Тогда
		Если ВРЕГ(Прав(АдресФайла,3)) = "XLS" Или ВРЕГ(Прав(АдресФайла,4)) = "XLSX" Тогда
			Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS ;
		ИначеЕсли ВРЕГ(Прав(АдресФайла,3)) = "DBF" Тогда
			Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF ;
			//ИначеЕсли ВРЕГ(Прав(АдресФайла,3)) = "XML" Тогда
			//	Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XML ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ЗагружатьВсеФайлыИзПапки Тогда
		Объект.АдресФайла = АдресФайла;
	КонецЕсли;	
	
	ОбъектШаблон= РеквизитФормыВЗначение("Объект");
	ПодсистемаИЭИмпортЭкспортФС.ПроизвестиОценкуФайла(ОбъектШаблон, АдресФайла, ТипОценки); 
	ЗначениеВРеквизитФормы(ОбъектШаблон, "Объект");
	
	Объект.Комментарий = СокрЛП(Объект.Комментарий) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" По оценке файла") + " " + АдресФайла + " " + ТипОценки;
	
КонецПроцедуры //ЗаполнитьШаблонНаСервере()

&НаСервереБезКонтекста
Функция   ИзменитьИмяПоляВФайле(ПоследовательностьПолейВФайлеТекущиеДанные)
	
	Если ЗначениеЗаполнено(ПоследовательностьПолейВФайлеТекущиеДанные) Тогда
		возврат ПоследовательностьПолейВФайлеТекущиеДанные.ЗаголовокПоляПоУмолчанию;
	Иначе
		возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ИзменитьКомментарий(ПоследовательностьПолейВФайлеТекущиеДанные)
	
	Если ЗначениеЗаполнено(ПоследовательностьПолейВФайлеТекущиеДанные) Тогда
		возврат ПоследовательностьПолейВФайлеТекущиеДанные.Комментарий;
		
	Иначе
		возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИмяРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	СписокРС = ПолучитьСписокРегистровСведений();
	Объект.ИмяРегистра  = СписокРС.ВыбратьЭлемент("Укажите регистр сведений") + ": ";
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительноПоведениеШаблонаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаголовкиБлоковДанныхПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТолькоДляИмпортаПриИзменении(Элемент)
	
	Если Объект.ИспользоватьТолькоДляИмпорта Тогда
		Объект.ИспользоватьТолькоДляЭкспорта = ЛОЖЬ;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТолькоДляЭкспортаПриИзменении(Элемент)
	
	Если Объект.ИспользоватьТолькоДляЭкспорта Тогда
		Объект.ИспользоватьТолькоДляИмпорта = ЛОЖЬ;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ИСТИНА);
	
КонецПроцедуры

&НаКлиенте
Процедура КаждоеПолеНоваяСтрокаПриИзменении(Элемент)
	
	Элементы.ДобавлятьПустыеСтрокиМеждуПлатежами.Видимость = Объект.КаждоеПолеНоваяСтрока;
	Элементы.ЗнакМеждуИменемПоляИЗначением.Видимость = Объект.КаждоеПолеНоваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.Наименование = Наименование;
	НаименованиеИзменяли = ИСТИНА;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахНаЯзыкеПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НаименованияНаДругихЯзыкахПриИзменении(Элемент)
	БылиИзмененияЗначенияПолейНаЯзыках = ИСТИНА;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьДанноеПоле(Команда)
	
	Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ПолеТаблицы =  ПолеПропуска();
	ПриИзмененииПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабатыватьПлатежныеДокументыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьФорматФайлаПоРасширению() //Экспорт	
	
	Расширение = ВРег(Прав(Объект.АдресФайла, 3));
	
	Если Расширение = "XLS"
		ИЛИ Расширение = "LSX" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ФорматФайла) 
			ИЛИ НЕ Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
			Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS ;         	
		КонецЕсли;
		УстановитьВидимостьДоступность();
		
	ИначеЕсли Расширение = "DBF" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ФорматФайла) 
			ИЛИ НЕ Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
			Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF ;	
		КонецЕсли;
		УстановитьВидимостьДоступность();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ФорматФайла) Тогда
		
		Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT ;
		УстановитьВидимостьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры //ОпределитьФорматФайлаПоРасширению

&НаКлиенте
Процедура ОткрыватьФормуДокументовКоторыеНеУдалосьПровестиПриИзменении(Элемент)
	
	Если Объект.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести Тогда
		Объект.ОткрыватьФормуКаждогоЭлементаИлиДокумента = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьФормуКаждогоЭлементаИлиДокументаПриИзменении(Элемент)
	
	Если Объект.ОткрыватьФормуКаждогоЭлементаИлиДокумента Тогда
		Объект.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценитьОбъектБазыДанных(Команда)
	
	Если Объект.ПоследовательностьПолейВФайле.Количество() = 0 
		ИЛИ Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить поля шаблона?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура("ТипОбъектаОбмена","");
		ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТипаОбъектаБазыДанных", ПараметрыФормы);
		ФормаВыбораТипа.ОткрытьМодально();
		
		ТипОбъектаОбмена = ФормаВыбораТипа.ТипОбъектаОбмена;
		Если ЗначениеЗаполнено(ТипОбъектаОбмена) Тогда
			
			Если Лев(ТипОбъектаОбмена, 1) = "Д" Тогда
				ТипМета = "Документы";
			Иначе
				ТипМета = "Справочники";
			КонецЕсли;
			
			ТипОбъектаОбмена = Прав(ТипОбъектаОбмена, стрДлина(ТипОбъектаОбмена) - 1);
			Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оценить таблицу объекта") + " " + ТипОбъектаОбмена + "? (НЕТ - сам объект)", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ПараметрыФормы = Новый Структура("ТипОбъектаОбмена", ТипОбъектаОбмена);
				ПараметрыФормы.Вставить("ТипМета", ТипМета);
				ФормаВыбораТипа = ПолучитьФорму("Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны.Форма.ФормаВыбораТабличнойЧасти", ПараметрыФормы);
				ФормаВыбораТипа.ОткрытьМодально();
				ТаблицаОбъектаОбмена = ФормаВыбораТипа.ИмяТабличнойЧасти;
				Объект.ИмяТаблицыШаблонаФайла = ТаблицаОбъектаОбмена;
			Иначе 
				ТаблицаОбъектаОбмена = "";
			КонецЕсли;
			
			Объект.ПоследовательностьПолейВФайле.Очистить();
			Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создавать поля шаблона, согласно данных реквизитов объекта базы данных?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				СоздаватьПоляШаблона = ИСТИНА;
			Иначе
				СоздаватьПоляШаблона = ЛОЖЬ;
			КонецЕсли;
			
			ОценитьОбъектНаСервере(ТипМета, ТипОбъектаОбмена, ТаблицаОбъектаОбмена, СоздаватьПоляШаблона);
			
			Объект.Комментарий = СокрЛП(Объект.Комментарий) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" По оценке объекта базы данных") + " " + ТипОбъектаОбмена + " " + ТаблицаОбъектаОбмена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОценитьОбъектНаСервере(ТипМета, ТипОбъектаОбмена, ТаблицаОбъектаОбмена, СоздаватьПоляШаблона, РежимЗаполнения = 0)
	
	ОбъектШаблон = РеквизитФормыВЗначение("Объект");
	
	ПодсистемаИЭИмпортЭкспортФС.ПроизвестиОценкуОбъектаБазыДанных(ОбъектШаблон, ТипМета, ТипОбъектаОбмена, ТаблицаОбъектаОбмена, СоздаватьПоляШаблона, РежимЗаполнения); 
	
	ЗначениеВРеквизитФормы(ОбъектШаблон, "Объект");
	
КонецПроцедуры //ОценитьОбъектНаСервере

&НаКлиенте
Процедура ОценитьФайл(Команда)
	
	ОценитьФайлПоТипу("");
	
КонецПроцедуры

&НаКлиенте
Процедура ОценитьФайлПоТипу(ТипОценки)
	
	Если Объект.ПоследовательностьПолейВФайле.Количество() = 0 
		ИЛИ Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы удалить существующую таблицу полей шаблона?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Объект.ПоследовательностьПолейВФайле.Очистить();
		СтруктураДиалогФильтр = ПодсистемаИЭИмпортЭкспортФС.СтруктураДиалогФильтр(Объект);
		ДиалогРасширение = СтруктураДиалогФильтр.ДиалогРасширение;
		ДиалогФильтр 	 = СтруктураДиалогФильтр.ДиалогФильтр;
		ДиалогВыбораФайла1 					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла1.Заголовок  		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите файл для оценки") + " " + ТипОценки + ":";
		ДиалогВыбораФайла1.ПолноеИмяФайла 	= ПодсистемаИЭИмпортЭкспортФС.константыПодсистемаИЭИмпортЭкспортФСПолучить(); //АДРЕС
		ДиалогВыбораФайла1.Фильтр  			= ДиалогФильтр;
		ДиалогВыбораФайла1.Расширение  		= ДиалогРасширение;
		ДиалогВыбораФайла1.МножественныйВыбор 		= ЛОЖЬ;
		ДиалогВыбораФайла1.ПредварительныйПросмотр 	= ИСТИНА;
		ДиалогВыбораФайла1.ИндексФильтра 	= 0;
		ДиалогВыбораФайла1.ПроверятьСуществованиеФайла = ИСТИНА;
		
		Если ДиалогВыбораФайла1.Выбрать() Тогда
			АдресФайла = ДиалогВыбораФайла1.ПолноеИмяФайла;
			Попытка 
				ПодсистемаИЭИмпортЭкспортФС.константыПодсистемаИЭИмпортЭкспортФСУстановить(АдресФайла);
			Исключение 
			КонецПопытки; 
			
			ЗаполнитьШаблонНаСервере(АдресФайла,ТипОценки);
			
			УстановитьВидимостьДоступность();
			
		КонецЕсли; //когда файл АдресФайла выбран 
	КонецЕсли;
	
	ОпределитьФорматФайлаПоРасширению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОценитьФайлТовары(Команда)
	
	ОценитьФайлПоТипу("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуОтбора(Команда)
	
	Если Объект.ТолькоДляОбъектовСРеквизитами.Количество() > 0
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу отбора по реквизитам?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Объект.ТолькоДляОбъектовСРеквизитами.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуРеквизитов(Команда)
	
	Если Объект.ДополнительноеЗаполнениеРеквизитов.Количество() > 0 
		И Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы готовы очистить таблицу дополнительных реквизитов?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		Объект.ДополнительноеЗаполнениеРеквизитов.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОбъектыОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьПрогрессПроизводстваОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПрогрессПроизводстваОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьПрогрессПроизводстваОбмена();
	
КонецПроцедуры

&НаСервере
Функция   ПолеПропуска()	
	Возврат Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле;	
КонецФункции //ПолеПропуска

&НаСервере
Функция   ПолучитьСписокРегистровСведений()
	
	СписокРС = Новый СписокЗначений;
	
	Для Каждого Регистр из Метаданные.РегистрыСведений Цикл 	
		СписокРС.Добавить(СокрЛП(Регистр.Имя));
	КонецЦикла;	
	
	СписокРС.СортироватьПоЗначению();
	
	Возврат СписокРС;
	
КонецФункции

&НаКлиенте
Процедура ПоследовательностьПолейВФайлеПолеТаблицыПриИзменении(Элемент)
	
	ПриИзмененииПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глЧислоОбъектов = глЧислоОбъектов + 1; глПроверятьСообщения = ИСТИНА;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПоддержкаДругихЯзыков тогда
		Если НаименованиеИзменяли тогда
			ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, Наименование);
		КонецЕсли;
		
		Если БылиИзмененияЗначенияПолейНаЯзыках Тогда
			Для Каждого СтрокаЯзыка Из НаименованияНаДругихЯзыках Цикл
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Объект.Ссылка, СтрокаЯзыка.НаЯзыке, "Наименование", СтрокаЯзыка.Язык);	
			КонецЦикла;
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНаДругихЯзыках(Команда)
	Элементы.НаименованияНаДругихЯзыках.Видимость  = НЕ Элементы.НаименованияНаДругихЯзыках.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 1, Объект.Ссылка, ИСТИНА);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоля(Обязательно = ЛОЖЬ) 
	
	Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.КомментарийПоля = ИзменитьКомментарий(Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ПолеТаблицы);
	
	Если Обязательно 
		ИЛИ (НЕ ЗначениеЗаполнено(Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ИмяПоляВФайле)) Тогда
		
		Если Объект.ФорматФайла = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF") Тогда
			Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ИмяПоляВФайле = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(ИзменитьИмяПоляВФайле(Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ПолеТаблицы)); 
		Иначе
			Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ИмяПоляВФайле = ИзменитьИмяПоляВФайле(Элементы.ПоследовательностьПолейВФайле.ТекущиеДанные.ПолеТаблицы); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииПоля

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                    // ПРИ ОТКРЫТИИ	
	
	ОбщийМодульКлиент.СобытиеФормы(ЭтаФорма, 0, Объект.Ссылка, ИСТИНА);
	
	Если Объект.Предопределенный Тогда
		Элементы.ВидШаблона.ТолькоПросмотр=ИСТИНА;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И НЕ ЗначениеЗаполнено(Объект.ФорматФайла) Тогда
		Объект.ФорматФайла = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT");
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ИСТИНА);
	
	#Если ТонкийКлиент Тогда
		Элементы.ТипТекущегоКлиента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сейчас запущен ""Тонкий клиент""");
	#Иначе
		#Если ВебКлиент Тогда
			Элементы.ТипТекущегоКлиента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сейчас запущен ""WEB-клиент""");
		#Иначе
			Элементы.ТипТекущегоКлиента.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сейчас приложение в подходящем режиме.");
		#КонецЕсли
		
	#КонецЕсли
	УстановитьДоступностьПрогрессПроизводстваОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002700", ЭтаФорма, Отказ, Объект);	
	
	Если НЕ Отказ Тогда
		ПоддержкаДругихЯзыков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА);
		
		Элементы.ФормаОплаты.Видимость = НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах");
		
		Если ПоддержкаДругихЯзыков 
			И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Наименование = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Объект.Ссылка);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияНаДругихЯзыках.Язык,
			|	ЗначенияНаДругихЯзыках.НаЯзыке,
			|	ЗначенияНаДругихЯзыках.Поле
			|ИЗ
			|	РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ
			|	ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", Объект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Поле = "Наименование" Тогда
						СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
						СтрокаЯзыка.Язык 	= ВыборкаДетальныеЗаписи.Язык;
						СтрокаЯзыка.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Наименование = Объект.Наименование;
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			//	Объект.ПоказыватьПрогрессПроизводстваОбмена = ИСТИНА;
		КонецЕсли;
		
		КодДляСправки = "Общие:
		| ШаблонФайла
		| ПериодДляДокументов
		| ИмяТаблицыШаблонаФайла
		| ЭтоЗагрузкаСписка
		| ШаблонФайлаВидШаблонаДляРегистровСведений
		| ШаблонФайлаУстанавливатьФлагОбменаЗагрузки
		| ЭксельФайлИмпортаЭкспорта / БазаДБФФайлИмпортаЭкспорта
		| 
		| Для строки данных: 
		| МассивДанныхСтрокиФайла[0]
		| СтрокаТаблицыИлиЭлемент
		| ОбъектОперации
		| ОтказВЗаписи
		| 
		| Для поля:
		| СледующееПолеВФайле
		| СледующееПолеВФайле.ПолеТаблицы
		| СледующееПолеВФайле.ДанноеПолеКлючевоеДляПоискаИЗаписи
		| СледующееПолеВФайле.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение
		| СледующееПолеВФайле.НомерСтроки
		| ИмяПоляВФайлеИзТаблицы";	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьКонтрагентовПоОКПОПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлементыСправочниковВСлучаеИхОтсутствияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоляДляПроизвольногоЗапроса(Команда)
	
	СоздатьПоляДляПроизвольноЗапросаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоляДляПроизвольноЗапросаНаСервере(Режим = 0)
	
	ДатаНачала = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	ЗапросПроизвольный = Новый Запрос;
	ЗапросПроизвольный.Текст = СтрЗаменить(Объект.ТекстПроизвольногоЗапроса, "|", " ");
	ВыборкаОбъектов = Неопределено;
	
	Для Каждого ПараметрЗапроса Из Объект.ПараметрыПроизвольногоЗапроса Цикл    
		ПараметрЗапросаНаименованиеПараметра = СтрЗаменить(СокрЛП(ПараметрЗапроса.НаименованиеПараметра), " ", "");
		ПараметрЗапросаНаименованиеПараметра = СтрЗаменить(ПараметрЗапросаНаименованиеПараметра, ".", "");
		ЗапросПроизвольный.УстановитьПараметр(ПараметрЗапроса.НаименованиеПараметра, ПараметрЗапроса.ЗначениеПараметра);
	КонецЦикла;
	
	ВзДС = ЗапросПроизвольный.Выполнить();
	Если НЕ ВзДС.Пустой() Тогда
		Если Режим = 1 Тогда
			СчетчикПолей = 0;
			Для Каждого КолонкаРезультата Из ВзДС.Колонки Цикл
				
				СчетчикПолей = СчетчикПолей + 1;
				НовоеПолеПоследовательности = Объект.ПоследовательностьПолейВФайле.Добавить();
				НовоеПолеПоследовательности.ПолеТаблицы  = БыстроСоздатьНовоеПолеНаСервере(КолонкаРезультата.Имя, КолонкаРезультата.ТипЗначения);
				НовоеПолеПоследовательности.КомментарийПоля = НовоеПолеПоследовательности.ПолеТаблицы.Комментарий;
				
				Если НЕ Объект.ФорматФайла = ПредопределенноеЗначение("Перечисление.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF") Тогда
					НовоеПолеПоследовательности.ИмяПоляВФайле = НовоеПолеПоследовательности.ПолеТаблицы.ЗаголовокПоляПоУмолчанию; 	
				КонецЕсли;
			КонецЦикла;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Было создано") + ": " + СчетчикПолей + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" полей в последовательности.");
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
		Иначе	
			ВыборкаОбъектов = ВзДС.Выбрать(); 	
		КонецЕсли;
		
	КонецЕсли;          
	
	Если НЕ ВыборкаОбъектов = Неопределено Тогда
		ВыборкаОбъектов.Следующий();
		
		Сообщение = Новый СообщениеПользователю;
		разницаВремени = ОбщийМодульСервисСервер.ПользователяТекущаяДата() - ДатаНачала;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего в результате запроса") + ": " + ВыборкаОбъектов.Количество() + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" записе. Выполнен за") + " " + разницаВремени + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" сек.");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Для Каждого ПолеВФайле Из Объект.ПоследовательностьПолейВФайле Цикл
			ИмяПоляВФайле = СтрЗаменить(СокрЛП(ПолеВФайле.ИмяПоляВФайле), " ", "");
			Попытка 
				Выполнить(" Результат = ВыборкаОбъектов." + ИмяПоляВФайле + ";");
				
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка обращения к результату запроса поля") + ": " + ИмяПоляВФайле + " - " + ОписаниеОшибки();
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецЦикла;
		
	ИначеЕсли Режим = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет результата запроса!");
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоляФайлаПоРезультатамЗапроса(Команда)
	
	СоздатьПоляДляПроизвольноЗапросаНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСутокПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПриходныеПриИзменении(Элемент)
	
	Если Объект.ТолькоПриходные Тогда
		Объект.ТолькоРасходные = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасходныеПриИзменении(Элемент)
	
	Если Объект.ТолькоРасходные Тогда
		Объект.ТолькоПриходные = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияФильтраНомерПоляПриИзменении(Элемент)
	
	Попытка 
		Элементы.УсловияФильтра.ТекущиеДанные.ИмяПоля = СокрЛП(Объект.ПоследовательностьПолейВФайле[Элементы.УсловияФильтра.ТекущиеДанные.номерполя - 1].ПолеТаблицы);
		
	Исключение Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
		Сообщение.Поле = "ИмяПоля";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределенаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
		Объект.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределенаПриИзменении(Элемент)
	
	Если Объект.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
		Объект.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена = '00010101';
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступность(ИмпортЭкспортИзменился = ЛОЖЬ)
	
	ОбъектИспользоватьТолькоДляЭкспорта = Объект.ИспользоватьТолькоДляЭкспорта;
	ОбъектИспользоватьТолькоДляИмпорта  = Объект.ИспользоватьТолькоДляИмпорта;
	
	Если ОбъектИспользоватьТолькоДляЭкспорта Тогда
		Элементы.ФайлАрхив.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл архивировать");	
	ИначеЕсли ОбъектИспользоватьТолькоДляИмпорта тогда
		Элементы.ФайлАрхив.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для всех файлов архива");	
	Иначе
		
		Элементы.ФайлАрхив.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл в архиве");	
	КонецЕсли;
	
	Элементы.ПарольАрхива.Видимость = Объект.ФайлАрхив;	
	
	Если Объект.ЗагружатьВсеФайлыИзПапки Тогда
		Элементы.АдресФайлаБезВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог (папка) с файлами") + ": ";
		//		Элементы.ВестиЖурналИмпортноЭкспортныхОпераций.Доступность = ЛОЖЬ;
		Элементы.ВестиЖурналИмпортноЭкспортныхОпераций.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести журнал имен файлов и не загружать повторно");
		Элементы.ИскатьВПодкаталогах.Видимость = ИСТИНА;
		Элементы.ИспользоватьТолько.Видимость = ЛОЖЬ;
		
	Иначе
		Элементы.АдресФайлаБезВыбора.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строгий адрес файла (без выбора файла)");
		Элементы.ВестиЖурналИмпортноЭкспортныхОпераций.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вести журнал импортно-экспортных операций");
		//		Элементы.ВестиЖурналИмпортноЭкспортныхОпераций.Доступность = ИСТИНА;
		Элементы.ИскатьВПодкаталогах.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьТолько.Видимость= ИСТИНА;
		
	КонецЕсли;
	
	Если Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
		Элементы.ПараметрыТекстовогоФормата.Видимость = ЛОЖЬ;
		Элементы.ПараметрыФорматаExcel.Видимость = ЛОЖЬ;
		Элементы.ОбщиеПараметры.Видимость = ЛОЖЬ;
		Элементы.КодировкаФайла.Видимость = ЛОЖЬ;
		Элементы.КодировкаDOS.Видимость = ИСТИНА;
		
	ИначеЕсли Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
		Элементы.ПараметрыТекстовогоФормата.Видимость = ЛОЖЬ;
		Элементы.ПараметрыФорматаExcel.Видимость = ИСТИНА;
		Элементы.ОбщиеПараметры.Видимость = ИСТИНА;
		Элементы.КодировкаФайла.Видимость = ЛОЖЬ;
		Элементы.КодировкаDOS.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT Тогда
		Элементы.ПараметрыТекстовогоФормата.Видимость = ИСТИНА;
		Элементы.ПараметрыФорматаExcel.Видимость = ЛОЖЬ;
		Элементы.ОбщиеПараметры.Видимость = ИСТИНА;
		Элементы.КодировкаФайла.Видимость = ИСТИНА;
		Элементы.КодировкаDOS.Видимость = ЛОЖЬ;
		
	Иначе //xml
		Элементы.ПараметрыТекстовогоФормата.Видимость = ЛОЖЬ;
		Элементы.ПараметрыФорматаExcel.Видимость = ЛОЖЬ;
		Элементы.ОбщиеПараметры.Видимость = ЛОЖЬ;
		Элементы.КодировкаФайла.Видимость = ЛОЖЬ;
		Элементы.КодировкаDOS.Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
	Если ИмпортЭкспортИзменился Тогда
		
		НЕОбъектИспользоватьТолькоДляЭкспорта = НЕ ОбъектИспользоватьТолькоДляЭкспорта;
		
		Элементы.ЗагружатьИзКаталога.Видимость															 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.УдалятьФайлПослеУдачногоИмпорта.Видимость												 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ПоследовательностьПолейВФайлеЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение.Видимость = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.СоставлятьНаименованиеГруппыРодителяИзИменПолей.Видимость								 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ДляОбновленияСуществующихОбъектов.Видимость											 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ПроОбновлениеСуществующихОбъектов.Видимость											 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.СложноеУсловиеДебета.Видимость											 				 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.Клиенты.Видимость																	 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ФильтроватьНеподходящиеСимволы.Видимость												 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ПравилаДляДокументов.Видимость 														 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость										 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ДляОбновленияСуществующихОбъектов.Видимость											 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.НеУчитыватьПоследнююСтрокуФайла.Видимость												 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ЗначениеПлатежейПриУмолчанию.Видимость													 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.СоставлятьНаименованиеПоВыражениюИзИменПолей.Видимость									 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ВсегдаСоздаватьНовыйЭлементИлиДокумент.Видимость										 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ОткрыватьФормуКаждогоЭлементаИлиДокумента.Видимость									 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.СоздаватьЭлементыСправочниковВСлучаеИхОтсутствия.Видимость								 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.ИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы.Видимость								 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена.Видимость						 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена.Видимость						 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.НомерДокументаУстанавливатьНоНомеруВходящегоИлиИсходящегоДокумента.Видимость			 = НЕОбъектИспользоватьТолькоДляЭкспорта; 
		Элементы.ДополнительноеЗаполнениеРеквизитовПриИмпорте.Видимость									 = НЕОбъектИспользоватьТолькоДляЭкспорта;		
		Элементы.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла.Видимость								 = НЕОбъектИспользоватьТолькоДляЭкспорта;		
		Элементы.ПоследовательностьПолейВФайлеДанноеПолеКлючевоеДляПоискаИЗаписи.Видимость				 = НЕОбъектИспользоватьТолькоДляЭкспорта;		
		Элементы.ЗаголовокБлокаДанных.Видимость															 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		Элементы.УстанавливатьПризнакАвансаДокументамДенежныхСредств.Видимость							 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		
		Элементы.ПопытатьсяПроводитьДокументы.Видимость													 = НЕОбъектИспользоватьТолькоДляЭкспорта;
		
		Элементы.ДобавитьТекстФайлу.Видимость 												= НЕ ОбъектИспользоватьТолькоДляИмпорта;
		Элементы.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка.Видимость 	= НЕ ОбъектИспользоватьТолькоДляИмпорта;
		Элементы.ПриЭкспортеПередЗаписью.Видимость											= НЕ ОбъектИспользоватьТолькоДляИмпорта;		
		
	КонецЕсли;
	
	Элементы.ГруппаНовыхКлиентов.Видимость = НЕ ОбъектИспользоватьТолькоДляЭкспорта И Объект.СоздаватьКонтрагентовПоОКПО;
	Элементы.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести.Видимость = НЕ ОбъектИспользоватьТолькоДляЭкспорта И Объект.ПопытатьсяПроводитьДокументы;
	Элементы.ДопольнительноеПоведение.Видимость = Объект.ИспользоватьДополнительноеПоведение;
	
	ОбъектВыполнятьПрограммы = Объект.ВыполнятьПрограммы;
	Элементы.ОбщийКод.Видимость  		= ОбъектВыполнятьПрограммы;
	Элементы.КодСтрокиДанных.Видимость  = ОбъектВыполнятьПрограммы;
	Элементы.КодДляСправки.Видимость    = ОбъектВыполнятьПрограммы;
	Элементы.КодПоляДанных.Видимость	= ОбъектВыполнятьПрограммы;
	Элементы.ОтборПоОбъектамСОпределеннымиРеквизитами.Видимость = Объект.ДанныйШаблонИспользоватьТолькоДляОбъектовСОпределеннымиРеквизитами;
	
	МожноСуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток = НЕ ОбъектИспользоватьТолькоДляИмпорта И Объект.ОбрабатыватьПлатежныеДокументы = "Планы";
	Элементы.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток.Видимость = МожноСуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток;
	Элементы.ВставлятьМеждуТекстамиНазначенияСледующийТекст.Видимость = Объект.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток И МожноСуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток;
	Элементы.СуммироватьТолькоЕслиПлатежкиСОднимНомером.Видимость = Элементы.ВставлятьМеждуТекстамиНазначенияСледующийТекст.Видимость;
	
	Если Элементы.ПроОбновлениеСуществующихОбъектов.Видимость 
		И Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.Предопределенный Тогда
		
		Элементы.ДляОбновленияСуществующихОбъектов.Видимость = ЛОЖЬ;
		Элементы.ПроОбновлениеСуществующихОбъектов.Видимость = ЛОЖЬ;
		
	КонецЕсли;
	
	Элементы.ОпределенныеЗначенияНовойНоменклатуры.Видимость = Объект.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия;
	
	Элементы.ИмяТаблицыШаблонаФайла.Доступность = ИСТИНА;
	Элементы.ИмяТаблицыШаблонаФайла.Видимость = ИСТИНА;
	Элементы.ДанныеИмпортаЭтоРезультатПроизвольногоШаблона.Видимость = ЛОЖЬ;
	Элементы.НеПропускатьОбъектыПомеченныеНаУдаление.Видимость = ИСТИНА;
	Элементы.ИспользоватьТолько.Видимость = ИСТИНА;
	Элементы.СоставноеИмя.Видимость = ИСТИНА;
	
	Если Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляКарточкиСправочникаИлиШапкиДокумента Тогда
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.видимость = ИСТИНА;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком Тогда
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.видимость = ИСТИНА;
		Элементы.ИмяТаблицыШаблонаФайла.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляСпискаЭлементовСправочникаИлиДокументов Тогда
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ИСТИНА; //!
		Элементы.ПравилаДляДокументов.видимость = ИСТИНА;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляТаблицыТовары Тогда 
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ИСТИНА;
		Объект.ИмяТаблицыШаблонаФайла = "Товары";
		Элементы.ИмяТаблицыШаблонаФайла.Доступность = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.Видимость = ЛОЖЬ;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		Элементы.СоставноеИмя.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ЛюбойВариант Тогда 
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ИСТИНА;
		Элементы.ПравилаДляДокументов.видимость = ИСТИНА;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ИСТИНА;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляРегистровСведений Тогда 
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.видимость = ЛОЖЬ;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		Элементы.ИмяТаблицыШаблонаФайла.Видимость = ЛОЖЬ;
		Элементы.ИмяРегистра.Видимость = ИСТИНА;
		
	ИначеЕсли Объект.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса Тогда 
		Элементы.ДанныеИмпортаЭтоРезультатПроизвольногоШаблона.Видимость = ИСТИНА;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.видимость = ЛОЖЬ;
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		Элементы.НеПропускатьОбъектыПомеченныеНаУдаление.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьТолько.Видимость = ЛОЖЬ;
		Элементы.ИмяТаблицыШаблонаФайла.Доступность = ЛОЖЬ;
		Элементы.ИмяТаблицыШаблонаФайла.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ЛОЖЬ;
		
	Иначе //предопределенный 
		Элементы.УсловияОперацийСПлатежнымиДокументами.Видимость = ЛОЖЬ;
		Элементы.ПравилаДляРаботыСоСписками.Видимость = ИСТИНА;
		Элементы.ПравилаДляРаботыСЗапасами.Видимость = ИСТИНА;
		Элементы.ИмяТаблицыШаблонаФайла.Доступность = ЛОЖЬ;
		Элементы.ПравилаДляДокументов.видимость = ИСТИНА;
		
	КонецЕсли;
	
	Элементы.ДобавлятьПустыеСтрокиМеждуПлатежами.Видимость = Объект.КаждоеПолеНоваяСтрока;
	Элементы.ЗнакМеждуИменемПоляИЗначением.Видимость 	= Объект.КаждоеПолеНоваяСтрока;
	Элементы.ПараметрыЗаголовкаБлокаДанных.Видимость 	= Объект.ИспользоватьЗаголовкиБлоковДанных;
	Элементы.ДополнительноЗаполнятьРеквизиты.Видимость 	= Объект.ДополнительноеЗаполнениеРеквизитовПриИмпорте И НЕ Объект.ИспользоватьТолькоДляЭкспорта;
	Элементы.СоставноеИмя.Видимость = Объект.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия ИЛИ Объект.ДляОбновленияСуществующихОбъектов; 
	
	Попытка 
		ДополнительныеМеханизмыУчетаИАнализаНоменклатуры = ЛОЖЬ;
		Выполнить(" ДополнительныеМеханизмыУчетаИАнализаНоменклатуры = ПолучитьФункциональнуюОпцию(Метаданные.ФункциональныеОпции.ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры);");
		Элементы.Производитель.Видимость 					= ДополнительныеМеханизмыУчетаИАнализаНоменклатуры;
		Элементы.СоздаватьМаркиНоменклатуры.Видимость			= ДополнительныеМеханизмыУчетаИАнализаНоменклатуры;
		Элементы.СоздаватьМетодыПолученияНоменклатуры.Видимость = ДополнительныеМеханизмыУчетаИАнализаНоменклатуры;
		
	Исключение 
		Элементы.Производитель.Видимость					= ЛОЖЬ;
		Элементы.СоздаватьМаркиНоменклатуры.Видимость			= ЛОЖЬ;
		Элементы.СоздаватьМетодыПолученияНоменклатуры.Видимость	= ЛОЖЬ;
		
	КонецПопытки;
	
	Элементы.ЕслиКлиентНеНайденПриИмпортеОткрыватьПодборИзСуществующих.Видимость = Объект.СоздаватьКонтрагентовПоОКПО;
	
КонецПроцедуры //УстановитьВидимостьДоступность()

Процедура УстановитьДоступностьПрогрессПроизводстваОбмена()
	
	Если Объект.ПоказыватьПрогрессПроизводстваОбмена Тогда
		Элементы.РасчитыватьСрокОкончанияОбмена.Доступность = ИСТИНА;
		Элементы.ПоказыватьОбъектыОбмена.Доступность = ИСТИНА;
	Иначе
		Элементы.РасчитыватьСрокОкончанияОбмена.Доступность = ЛОЖЬ;
		Элементы.ПоказыватьОбъектыОбмена.Доступность = ЛОЖЬ;
	КонецЕсли;
	
	Если Объект.ПоказыватьОбъектыОбмена и Элементы.ПоказыватьОбъектыОбмена.Доступность Тогда
		Элементы.НеЗакрыватьОкноПеречняОбъектовОбмена.Видимость = ИСТИНА;
	Иначе
		Элементы.НеЗакрыватьОкноПеречняОбъектовОбмена.Видимость = ЛОЖЬ;
	КонецЕсли;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры //УстановитьДоступностьПрогрессПроизводстваОбмена

&НаСервере
Процедура УстановитьМаскуПоФормату()
	
	Если НЕ Объект.ЗагружатьВсеФайлыИзПапки Тогда
		Если Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
			Объект.МаскаФайла = "*.DBF" + ?(Объект.ФайлАрхив, "|*.ZIP", "");
		ИначеЕсли Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT Тогда
			Объект.МаскаФайла = "*.CSV|*.TXT" + ?(Объект.ФайлАрхив, "|*.ZIP", "");
		ИначеЕсли Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
			Объект.МаскаФайла = "*.XLS|*.XLSX" + ?(Объект.ФайлАрхив, "|*.ZIP", "");
			//ИначеЕсли Объект.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XML Тогда
			//	Объект.МаскаФайла = "*.XML" + ?(Объект.ФайлАрхив, "|*.ZIP", "");
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры //УстановитьМаскуПоФормату

&НаКлиенте
Процедура ФорматФайлаПолеПриИзменении(Элемент)
	
	УстановитьМаскуПоФормату();
	УстановитьВидимостьДоступность();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоПлатежныйдокументПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеДенегПриИзменении(Элемент)
	ХранилищеДенегПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХранилищеДенегПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ХранилищеДенег) Тогда
		Объект.ФормаОплаты = Объект.ХранилищеДенег.ФормаОплаты;
	КонецЕсли;
	
КонецПроцедуры
