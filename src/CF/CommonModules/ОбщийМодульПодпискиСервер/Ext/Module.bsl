//sza150109-0215 НЧ
//sza140119-0118
//sza131211-1456 
&НаСервере
Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПредставлениеТипаИсточника = СокрЛП(ТипЗнч(Источник));
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов") 
		И ОбщийМодульПовтор.ПроверитьЧтоТипДокументаПроводимыйИМожетБытьЗаблокирован(ПредставлениеТипаИсточника) 
		И Источник.Проведен
		И (НЕ ПредставлениеТипаИсточника = СокрЛП(Тип("ДокументОбъект.ОказанияУслугЗаВремя"))
		ИЛИ ОбщийМодульСервисСервер.ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита(Источник.Ссылка, "УслугаОказана", ИСТИНА)) Тогда
			
		Отказ = ИСТИНА;
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись проведенных документов запрещена!"), , Источник.Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда
		
		Отказ = НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник.Дата, Источник);		
	КонецЕсли;
	
	Если НЕ отказ 
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
		
		Сейчас = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
			Источник.ДатаСоздания = Сейчас;
		Иначе
			Источник.ДатаРедакции = Сейчас;
		КонецЕсли;
		Источник.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ Отказ Тогда				
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
			
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
			ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
			ЖурналСобытий.Активность 	 = ИСТИНА;
			ЖурналСобытий.Ответственный  = Ответственный;
			ЖурналСобытий.Период 		 = ТекущаяДата();
			ЖурналСобытий.СсылкаНаОбъект = Источник.ссылка;
			ЖурналСобытий.Событие 		 = Перечисления.СобытияЖурнала.ЗаписьДокумента;
			ЖурналСобытий.Описание 		 = СокрЛП(типзнч(Источник));
			
			Попытка 				
				ЖурналСобытий.Записать(ИСТИНА);
				
			Исключение
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ОписаниеОшибки(), , Источник.ссылка);
				КонецЕсли;
				
			КонецПопытки;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспорт") Тогда
			ОбновитьПовторноИспользуемые = ЛОЖЬ;
			Дата = Источник.Дата;
			
			ДатаНачалаПериодаДляВыгрузкиРуководителю = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаНачалаПериодаДляВыгрузкиРуководителю", ИСТИНА);
			Если ДатаНачалаПериодаДляВыгрузкиРуководителю > Дата Тогда
				Константы.ДатаНачалаПериодаДляВыгрузкиРуководителю.Установить(Дата);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
			
			ДатаОкончанияПериодаДляВыгрузкиРуководителю = константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Получить();
			Если ДатаОкончанияПериодаДляВыгрузкиРуководителю < Дата Тогда
				Константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Установить(Дата);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрНакопленияПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда		
		Отказ = НЕ Источник.количество() = 0 И НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник[0].Период, );		
	КонецЕсли;
	
	Если НЕ Отказ		
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий")
		И НЕ Источник.количество() = 0 Тогда
		
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 1);		
		
		Если ПодходящийВидОбъекта Тогда
			
			Сейчас = ТекущаяДата();
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			Для Каждого Запись Из Источник Цикл
				Если НЕ ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
					Запись.ДатаСоздания = Сейчас;
				Иначе
					Запись.ДатаРедакции = Сейчас;
				КонецЕсли;
				
				Запись.Ответственный = Ответственный;		
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрНакопленияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	
КонецПроцедуры

&НаСервере
Процедура РегистрСведенийПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда		
		Отказ = НЕ Источник.количество() = 0 И НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник[0].Период, );		
	КонецЕсли;
	
	Если НЕ отказ 
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий")
		И НЕ Источник.количество() = 0 Тогда
		
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 3);		
		
		Если ПодходящийВидОбъекта Тогда
			
			Сейчас = ТекущаяДата();
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			Для Каждого Запись Из Источник Цикл
				Если НЕ ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
					Запись.ДатаСоздания = Сейчас;
				Иначе
					Запись.ДатаРедакции = Сейчас;
				КонецЕсли;
				
				Запись.Ответственный = Ответственный;		      	
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ Тогда		
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
			
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
			ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
			ЖурналСобытий.Активность = ИСТИНА;
			ЖурналСобытий.Ответственный = Ответственный;
			ЖурналСобытий.Период = ТекущаяДата();
			ЖурналСобытий.Описание = " " + СокрЛП(типзнч(Источник));
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ЗаписьРегистраСведений;
			
			Попытка //Записи в регистр сведений 
				ЖурналСобытий.Записать(ИСТИНА);
				
			Исключение //Записи в регистр сведений 
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ОписаниеОшибки(), , );
				КонецЕсли;
				
			КонецПопытки; //Записи в регистр сведений
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СправочникиПередЗаписью(Источник, Отказ) Экспорт
	
	ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 2);		
	
	Если НЕ отказ
		И ПодходящийВидОбъекта
		И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
		
		Сейчас = ТекущаяДата();
		Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
			Источник.ДатаСоздания = Сейчас;
		Иначе
			Источник.ДатаРедакции = Сейчас;
		КонецЕсли;
		Источник.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СправочникиПриЗаписи(Источник, Отказ) Экспорт
	
	ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 2);		
	
	Если НЕ Отказ Тогда		
		
		Если ПодходящийВидОбъекта
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
			
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
			ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
			ЖурналСобытий.Активность 	 = ИСТИНА;
			ЖурналСобытий.Ответственный  = Ответственный;
			ЖурналСобытий.Период 		 = ТекущаяДата();
			ЖурналСобытий.СсылкаНаОбъект = Источник.ссылка;
			ЖурналСобытий.Событие 		 = Перечисления.СобытияЖурнала.ЗаписьЭлементаСправочника;
			ЖурналСобытий.Описание 		 = СокрЛП(СокрЛП(типзнч(Источник)));
			
			Попытка 
				ЖурналСобытий.Записать(ИСТИНА);
				
			Исключение 
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ОписаниеОшибки(), , Источник.ссылка);
				КонецЕсли;
				
			КонецПопытки; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеЦеныПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.Количество() = 0 
		И Замещение Тогда //удаление
		
		ОбщийМодульСервер.УдалитьВсеЗависимыеЦены(Источник.Отбор.номенклатура.Значение, Источник.Отбор.ВидЦен.Значение, Источник.Отбор.Период.Значение);
	КонецЕсли;
	
КонецПроцедуры
