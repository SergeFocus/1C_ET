// sza160204-0058
// sza150626-0407 
// sza150109-0215 НЧ
// sza140119-0118
// sza131211-1456 
Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		ПредставлениеТипаИсточника = СокрЛП(ТипЗнч(Источник));
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов") 
			И ОбщийМодульПовтор.ПроверитьЧтоТипДокументаПроводимыйИМожетБытьЗаблокирован(ПредставлениеТипаИсточника) 
			И Источник.Проведен
			И (НЕ ПредставлениеТипаИсточника = СокрЛП(Тип("ДокументОбъект.ОказанияУслугЗаВремя"))
			ИЛИ ОбщийМодульСервисСервер.ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита(Источник.Ссылка, "УслугаОказана", ИСТИНА)) Тогда
			
			Отказ = ИСТИНА;
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запись проведенных документов запрещена!"), , Источник.Ссылка);
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда
			
			Отказ = НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник.Дата, Источник);		
		КонецЕсли;
		
		Если НЕ Отказ 
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
			
			Сейчас = ТекущаяДата();
			Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
				Источник.ДатаСоздания = Сейчас;
			Иначе
				Источник.ДатаРедакции = Сейчас;
			КонецЕсли;
			Источник.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
		КонецЕсли;
		
		ПараметрыСеансаВыполнениеКодаЗаблокировано = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ Отказ
			И НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
				Если Источник.ПометкаУдаления Тогда
					РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 4);
					Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
						ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
						Попытка
							Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
						Исключение
							ТекстОписанияОшибки = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
						КонецПопытки;
						ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
					КонецЕсли;
					
				Иначе
					РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 2);
					Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
						ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
						Попытка
							Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
						Исключение
							ТекстОписанияОшибки = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
						КонецПопытки;
					КонецЕсли;
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
				КонецЕсли;			
				
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 5);
				Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
					Попытка
						Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
					КонецПопытки;
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
				КонецЕсли;
				
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 3);
				Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
					Попытка
						Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
					КонецПопытки;
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВерсионирование") Тогда
			
			ОбщийМодульСервер.ЗарегистрироватьИзмененияОбъекта(Источник, ИСТИНА, РежимЗаписи, РежимПроведения);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура ДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		Если НЕ Отказ Тогда
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
				
				Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
				ЖурналСобытий.Активность 	 = ИСТИНА;
				ЖурналСобытий.Ответственный  = Ответственный;
				ЖурналСобытий.Период 		 = ТекущаяДата();
				ЖурналСобытий.СсылкаНаОбъект = Источник.ссылка;
				ЖурналСобытий.Событие 		 = Перечисления.СобытияЖурнала.ЗаписьДокумента;
				ЖурналСобытий.Описание 		 = СокрЛП(ТипЗнч(Источник));
				
				Попытка 				
					ЖурналСобытий.Записать(ИСТИНА);
					
				Исключение
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ТекстОписаниеОшибки, , Источник.ссылка);
					КонецЕсли;
					
				КонецПопытки;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспорт") Тогда
				ОбновитьПовторноИспользуемые = ЛОЖЬ;
				Дата = Источник.Дата;
				
				ДатаНачалаПериодаДляВыгрузкиРуководителю = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаНачалаПериодаДляВыгрузкиРуководителю", ИСТИНА);
				Если ДатаНачалаПериодаДляВыгрузкиРуководителю > Дата Тогда
					Константы.ДатаНачалаПериодаДляВыгрузкиРуководителю.Установить(Дата);
					ОбновитьПовторноИспользуемыеЗначения();
				КонецЕсли;
				
				ДатаОкончанияПериодаДляВыгрузкиРуководителю = константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Получить();
				Если ДатаОкончанияПериодаДляВыгрузкиРуководителю < Дата Тогда
					Константы.ДатаОкончанияПериодаДляВыгрузкиРуководителю.Установить(Дата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыСеансаВыполнениеКодаЗаблокировано  = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ Отказ
			И НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 6);
			Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
				Попытка
					Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
				Исключение
					ТекстОписанияОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
				КонецПопытки;
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура ДокументыПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		ПараметрыСеансаВыполнениеКодаЗаблокировано = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 7);
			Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
				Попытка
					Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
				Исключение
					ТекстОписанияОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
				КонецПопытки;
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура РегистрНакопленияПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда		
			
			Отказ = НЕ Источник.количество() = 0 И НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник[0].Период, );
		КонецЕсли;
		
		Если НЕ Отказ		
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий")
			И НЕ Источник.количество() = 0
			И ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 1) Тогда
			
			Сейчас = ТекущаяДата();
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
			Для Каждого Запись Из Источник Цикл
				Если НЕ ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
					Запись.ДатаСоздания = Сейчас;
				Иначе
					Запись.ДатаРедакции = Сейчас;
				КонецЕсли;
				
				Запись.Ответственный = Ответственный;		
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура РегистрНакопленияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	
КонецПроцедуры
Процедура РегистрСведенийПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДействуетЗапретИзмененийПрошлого") Тогда		
			
			Отказ = НЕ Источник.количество() = 0 И НЕ ОбщийМодульСервер.ПроверитьДоступностьДокументаПрошлого(Источник[0].Период, );		
		КонецЕсли;
		
		Если НЕ отказ 
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий")
			И НЕ Источник.количество() = 0
			И ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(источник.метаданные().имя, 3) Тогда
			
			Сейчас = ТекущаяДата();
			Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
			Для Каждого Запись Из Источник Цикл
				Если НЕ ЗначениеЗаполнено(Запись.ДатаСоздания) Тогда
					Запись.ДатаСоздания = Сейчас;
				Иначе
					Запись.ДатаРедакции = Сейчас;
				КонецЕсли;
				
				Запись.Ответственный = Ответственный;		      	
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВерсионирование") Тогда
			
			ОбщийМодульСервер.ЗарегистрироватьИзмененияОбъекта(Источник, ЛОЖЬ, , , , ИСТИНА);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура РегистрСведенийПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		Если НЕ Отказ Тогда
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
				
				Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
				ЖурналСобытий.Активность 	= ИСТИНА;
				ЖурналСобытий.Ответственный = Ответственный;
				ЖурналСобытий.Период 		= ТекущаяДата();
				ЖурналСобытий.Описание 		= СокрЛП(ТипЗнч(Источник));
				ЖурналСобытий.Событие 		= Перечисления.СобытияЖурнала.ЗаписьРегистраСведений;
				
				Попытка
					ЖурналСобытий.Записать(ИСТИНА);
					
				Исключение
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ТекстОписаниеОшибки, , );
					КонецЕсли;				
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура СправочникиПередЗаписью(Источник, Отказ) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(Источник.Метаданные().Имя, 2);		
		
		Если НЕ Отказ
			И ПодходящийВидОбъекта
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
			
			Сейчас = ТекущаяДата();
			Если НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
				Источник.ДатаСоздания = Сейчас;
			Иначе
				Источник.ДатаРедакции = Сейчас;
			КонецЕсли;
			Источник.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			
		КонецЕсли;
		
		ПараметрыСеансаВыполнениеКодаЗаблокировано  = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ Отказ
			И НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			Если Источник.ПометкаУдаления Тогда
				РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 4);
				Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
					Попытка
						Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
					КонецПопытки;
					ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
				КонецЕсли;
				
			Иначе
				РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 2);
				Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
					Попытка
						ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
						Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
						ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
					Исключение
						ТекстОписанияОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВерсионирование") Тогда
			
			ОбщийМодульСервер.ЗарегистрироватьИзмененияОбъекта(Источник, ЛОЖЬ, , , ИСТИНА);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура СправочникиПриЗаписи(Источник, Отказ) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(Источник.Метаданные().Имя, 2);		
		
		Если НЕ Отказ Тогда		
			
			Если ПодходящийВидОбъекта
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий") Тогда
				
				Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
				
				ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
				ЖурналСобытий.Активность 	 = ИСТИНА;
				ЖурналСобытий.Ответственный  = Ответственный;
				ЖурналСобытий.Период 		 = ТекущаяДата();
				ЖурналСобытий.СсылкаНаОбъект = Источник.ссылка;
				ЖурналСобытий.Событие 		 = Перечисления.СобытияЖурнала.ЗаписьЭлементаСправочника;
				ЖурналСобытий.Описание 		 = СокрЛП(СокрЛП(ТипЗнч(Источник))); //!! Довідник об`єкт: Дополнительные отчеты и обработки
				
				Попытка 
					ЖурналСобытий.Записать(ИСТИНА);
					
				Исключение 
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ТекстОписаниеОшибки, , Источник.ссылка);
					КонецЕсли;				
				КонецПопытки; 
				
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСеансаВыполнениеКодаЗаблокировано  = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 6);
			Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
				Попытка
					Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
				Исключение
					ТекстОписанияОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
				КонецПопытки;
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура СправочникиПриУстановкеНовогоКодаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		ПараметрыСеансаВыполнениеКодаЗаблокировано = ПараметрыСеанса.ВыполнениеКодаЗаблокировано;
		
		Если НЕ ПараметрыСеансаВыполнениеКодаЗаблокировано
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
			
			РезультатПрограмма = ОбщийМодульСервер.ПроверитьВыполнитьПодписку(Источник.Ссылка, 7);
			Если НЕ ПустаяСтрока(РезультатПрограмма) Тогда
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
				Попытка
					Выполнить(" " + РезультатПрограмма + " ") + ?(Прав(СокрЛП(РезультатПрограмма), 1) = ";", "", ";");
				Исключение
					ТекстОписанияОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка исполнения программы подписки") + ": " + ТекстОписанияОшибки);
				КонецПопытки;
				ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура УдалениеЦеныПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда
		
		Если Источник.Количество() = 0 
			И Замещение Тогда // удаление
			
			ОбщийМодульСервер.УдалитьВсеЗависимыеЦены(Источник.Отбор.номенклатура.Значение, Источник.Отбор.ВидЦен.Значение, Источник.Отбор.Период.Значение);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
