//{{MRG[ <-> ]
// sza150419-2205  Нов драйвера
// sza140918-1604
//}}MRG[ <-> ]
//{{MRG[ <-> ]
////sza140918-1604
////sza140831-0452
//}}MRG[ <-> ]
// sza140831-0452
// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	СтруктураТиповПО = Новый Структура();

	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;

	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);

КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
//{{MRG[ <-> ]
	ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//                               ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
//}}MRG[ <-> ]
	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();

//{{MRG[ <-> ]
//	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
//}}MRG[ <-> ]
	Если НЕ Результат Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.");

		Возврат ЛОЖЬ;
	КонецЕсли;
	СписокОборудования =  МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
//{{MRG[ <-> ]
	// sza
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	//sza
//}}MRG[ <-> ]
	Если НЕ глПодключаемоеОборудование = Неопределено
		И СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
//{{MRG[ <-> ]
			// Проверим, не подключено ли устройство ранее
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//Проверим, не подключено ли устройство ранее
//}}MRG[ <-> ]
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
//{{MRG[ <-> ]
			Устройство.Ссылка);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                        Устройство.Ссылка);
//}}MRG[ <-> ]

			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
					// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
//{{MRG[ <-> ]
					+ "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					               + "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
//}}MRG[ <-> ]
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = ЛОЖЬ;
					Продолжить;
				КонецЕсли;

				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("СетевойПорт"            , Устройство.СетевойПорт);
//{{MRG[ <-> ]
				НовоеПодключение.Вставить("Параметры",
				МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Устройство.Ссылка));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				НовоеПодключение.Вставить("Параметры", 
//				                          МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Устройство.Ссылка));
//}}MRG[ <-> ]
				НовоеПодключение.Вставить("КоличествоПодключенных", 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"  , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				ВыходныеПараметры = Неопределено;
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(НовоеПодключение.ОбработчикДрайвера);
				Результат = ОбработчикДрайвера.ПодключитьУстройство(
//{{MRG[ <-> ]
				ОбъектДрайвера,
				НовоеПодключение.Параметры,
				НовоеПодключение.ПараметрыПодключения,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					    ОбъектДрайвера,
//					    НовоеПодключение.Параметры,
//					    НовоеПодключение.ПараметрыПодключения,
//					    ВыходныеПараметры);
//}}MRG[ <-> ]
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;

					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
//{{MRG[ <-> ]
					+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось подключить устройство") +" ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					               + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось подключить устройство") +" ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)";
//}}MRG[ <-> ]
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
//{{MRG[ <-> ]
				// Увеличим количество пользователей данного соединения
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				//Увеличим количество пользователей данного соединения
//}}MRG[ <-> ]
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;

		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбранное устройство не может использоваться для подключения.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите другое устройство.");
		КонечныйРезультат = ЛОЖЬ;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Отключение оборудования
// Отключает все подключенное оборудование, соответствующее указанному типу ПО
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт

	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);

//{{MRG[ <-> ]
//		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
//}}MRG[ <-> ]
		Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
			// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
			ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = ЛОЖЬ;
			Продолжить;
		КонецЕсли;

		ВыходныеПараметры = Неопределено;
		Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
//{{MRG[ <-> ]
		ОбъектДрайвера,
		ПодключенноеУстройство.Параметры,
		ПодключенноеУстройство.ПараметрыПодключения,
		ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			    ОбъектДрайвера,
//			    ПодключенноеУстройство.Параметры,
//			    ПодключенноеУстройство.ПараметрыПодключения,
//			    ВыходныеПараметры);
//}}MRG[ <-> ]

		Если НЕ Результат Тогда
			ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При отключении устройства") + " ""%Наименование%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("произошла ошибка") + ": %ОписаниеОшибки% (%КодОшибки%)";
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		КонецЕсли;

		КонечныйРезультат = КонечныйРезультат И Результат;

	КонецЦикла;

	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();

	Возврат КонечныйРезультат;

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")

	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	ВыходноеОписаниеОшибки = "";
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();

		Для Индекс = 1 По КоличествоУстройств Цикл
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);

			Если КлиентПодключения <> Неопределено
//{{MRG[ <-> ]
				И (ТипыПО = Неопределено
				Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
				И (ИдентификаторУстройства = Неопределено
				Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			   И (ТипыПО = Неопределено
//				 Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
//			   И (ИдентификаторУстройства = Неопределено
//				 Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
//}}MRG[ <-> ]

				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ПодключенноеУстройство.КоличествоПодключенных = 0;
					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
					Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						//Сообщить об ошибке, что не удалось загрузить драйвер.
//			ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
//}}MRG[ <-> ]
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = ЛОЖЬ;
						Продолжить;
					КонецЕсли;

					ВыходныеПараметры = Неопределено;
					Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
//{{MRG[ <-> ]
					ОбъектДрайвера,
					ПодключенноеУстройство.Параметры,
					ПодключенноеУстройство.ПараметрыПодключения,
					ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						    ОбъектДрайвера,
//						    ПодключенноеУстройство.Параметры,
//						    ПодключенноеУстройство.ПараметрыПодключения,
//						    ВыходныеПараметры);
//}}MRG[ <-> ]

					Если НЕ Результат Тогда
//{{MRG[ <-> ]
						ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При отключении устройства") + " ""%Наименование%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("произошла ошибка") + ": %ОписаниеОшибки% (%КодОшибки%)";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При отключении устройства") + " ""%Наименование%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("произошла ошибка") + ": %ОписаниеОшибки% (%КодОшибки%)";
//}}MRG[ <-> ]
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					КонецЕсли;

					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);

					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;

		КонецЦикла;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Методы подключения и отключения оборудования в форме
// Подключает необходимые типы оборудования при открытии формы.
//
// Параметры:
//{{MRG[ <-> ]
// 	Форма - УправляемаяФорма
// 	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
// 		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
////	Форма - УправляемаяФорма
////	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
////		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//}}MRG[ <-> ]
//
Функция ПодключитьОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	ОборудованиеПодключено = ИСТИНА;
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	Если Форма.ИспользоватьПодключаемоеОборудование И ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "";
		ОборудованиеПодключено = ПодключитьОборудованиеПоТипу(
//{{MRG[ <-> ]
		Форма.УникальныйИдентификатор,
		ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
		ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Форма.УникальныйИдентификатор,
//			ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
//			ОписаниеОшибки);
//}}MRG[ <-> ]
		Если НЕ ОборудованиеПодключено Тогда
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ":
//{{MRG[ <-> ]
			|""%ОписаниеОшибки%"".";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//									|""%ОписаниеОшибки%"".";
//}}MRG[ <-> ]
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	Возврат ОборудованиеПодключено; // признак ошибки при подключении оборудования
КонецФункции

// Отключает подключенные типы оборудования при закрытии формы
//
Функция ОтключитьОборудованиеПриЗакрытииФормы(Форма) Экспорт
	Возврат МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(
//{{MRG[ <-> ]
	Форма.УникальныйИдентификатор,
	ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				Форма.УникальныйИдентификатор,
//				ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
//}}MRG[ <-> ]
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Вспомогательные экспортные методы
// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыПользователяСБазойДанных() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
		|ПараметрыПодключенияПО,
		|ПоследнийСлипЧек,
		|ТаблицаУстройствДМ,
		|ПараметрыДрайверМенеджера",
		Новый Соответствие(),
		Новый Массив(),
		"",
		Новый Структура(),
		Новый Структура());
	КонецЕсли;

КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт

КонецФункции

//{{MRG[ <-> ]
// Функция осуществляет выбор устройства Из списка доступных
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Функция осуществляет выбор устройства из списка доступных
//}}MRG[ <-> ]
// по типу подключаемого оборудования
// Если устройств более одного, то пользователю отображается
// диалог со списком устройств с предложением выбрать "одно из..."
Функция ВыбратьУстройство(ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен) Экспорт

//{{MRG[ <-> ]
	// Выбор устройства
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	//Выбор устройства
//}}MRG[ <-> ]
	Идентификатор = Неопределено;
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если НЕ Результат Тогда
		Возврат Идентификатор;
	КонецЕсли;

//{{MRG[ <-> ]
	СписокДоступныхУстройств =
	МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	СписокДоступныхУстройств = 
//	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);
//}}MRG[ <-> ]
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если НЕ ПустаяСтрока(СообщениеНеПодключен) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеНеПодключен);
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();

		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;

		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(ТекстЗаголовкаВыбора);

			Если Идентификатор <> Неопределено Тогда
				Идентификатор = Идентификатор.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

// Функция предоставляет диалог выбора рабочего места
//
Функция ВыбратьРабочееМесто(ОткрыватьФормуВыбораПриПервомОбращении = ЛОЖЬ, ИдентификаторКлиента = "") Экспорт

	Результат    = ЛОЖЬ;
	//РабочееМесто = "";

	//ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("ОткрыватьПриПервомОбращении", ОткрыватьФормуВыбораПриПервомОбращении);
	//ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	//
	//Ответ = ОткрытьФормуМодально(""Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста"", ПараметрыФормы);

	//Если ТипЗнч(Ответ) = Тип("Структура") Тогда
	//	
	//	РабочееМесто = Ответ.РабочееМесто;
	//	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	//	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	//	Результат = ИСТИНА;
	//	
	//КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	Результат = ИСТИНА;
//{{MRG[ <-> ]
	// не Из повтора
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	//не из повтора
//}}MRG[ <-> ]
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));

		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			Параметры.Вставить("СетевойПорт");
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			Параметры.СетевойПорт          = МенеджерОборудованияКлиентСервер.ПолучитьСетевойПортПоУмолчанию();
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		ИначеЕсли МассивРабочихМест.Количество() = 1 Тогда
			РабочееМесто = МассивРабочихМест[0];
		ИначеЕсли МассивРабочихМест.Количество() > 1 Тогда
			Результат = МенеджерОборудованияКлиент.ВыбратьРабочееМесто(ИСТИНА, ВРег(СистемнаяИнформация.ИдентификаторКлиента));
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
	КонецЕсли;
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = ЛОЖЬ) Экспорт

	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);

КонецФункции

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт

	Результат = ЛОЖЬ;
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
//{{MRG[ <-> ]
	Идентификатор);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                                                        Идентификатор);
//}}MRG[ <-> ]

	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
			// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера   = ПодключенноеУстройство.ОбработчикДрайвера;
			// Вызов метода выполнения команды у обработчика
			Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ОбработчикДрайвера).ВыполнитьКоманду(Команда,
//{{MRG[ <-> ]
			ВходныеПараметры,
			ВыходныеПараметры,
			ОбъектДрайвера,
			Параметры,
			ПараметрыПодключения);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                             ВходныеПараметры,
//			                                                                             ВыходныеПараметры,
//			                                                                             ОбъектДрайвера,
//			                                                                             Параметры,
//			                                                                             ПараметрыПодключения);
//}}MRG[ <-> ]
		КонецЕсли;
	Иначе
//{{MRG[ <-> ]
		// Сообщить об ошибке, что устройство не подключено.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//Сообщить об ошибке, что устройство не подключено.
//}}MRG[ <-> ]
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устройство не подключено. Перед выполнением операции устройство должно быть подключено.");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры,
//{{MRG[ <-> ]
	Идентификатор, Параметры) Экспорт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//                                       Идентификатор, Параметры) Экспорт
//}}MRG[ <-> ]
	Результат = ЛОЖЬ;
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
//{{MRG[ <-> ]
	Идентификатор);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                                                        Идентификатор);
//}}MRG[ <-> ]

	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		времПараметрыПодключения = Новый Структура();
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);

//{{MRG[ <-> ]
//		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
//}}MRG[ <-> ]
		Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
			// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"));
		Иначе
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ДанныеОборудования.ОбработчикДрайвера);
			Если ОбработчикДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
				// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось подключить обработчик драйвера.");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"));
			Иначе
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(
//{{MRG[ <-> ]
				Команда,
				ВходныеПараметры,
				ВыходныеПараметры,
				ОбъектДрайвера,
				Параметры,
				времПараметрыПодключения);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					Команда,
//					ВходныеПараметры,
//					ВыходныеПараметры,
//					ОбъектДрайвера,
//					Параметры,
//					времПараметрыПодключения);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					Если НЕ Результат Тогда
//}}MRG[ <-> ]
				Если НЕ Результат Тогда
//{{MRG[ <-> ]
					ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
//					КонецЕсли;
//}}MRG[ <-> ]
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	Иначе
//{{MRG[ <-> ]
		// Сообщить об ошибке, что устройство подключено.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//Сообщить об ошибке, что устройство подключено.
//}}MRG[ <-> ]
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устройство подключено.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перед выполнением операции устройство должно быть отключено.");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводить модальную диалоговую форму настройки устройства
//Входные параметры:
//   Устройство   - СправочникСсылка.ПодключаемоеОборудование
Функция ВыполнитьНастройкуОборудования(Идентификатор, НастройкиИзменены = ЛОЖЬ,СообщениеОбОшибке = "") Экспорт

	Результат = ИСТИНА;

	//ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	//ОбработчикДрайвера = ДанныеУстройства.ОбработчикДрайвера;
	//ИдентификаторУстройства = ДанныеУстройства.ИдентификаторУстройства;

	//МодульОбработчикаДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ОбработчикДрайвера);
	//
	//Если МодульОбработчикаДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент Тогда
	//	// Получить параметры из базы       
	//	ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
	//	ПараметрыФормы = Новый Структура("ПараметрыОбработки", ПараметрыОбработки);
	//	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);    
	//	
	//	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	//	Ответ = ОткрытьФормуМодально("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы);   
	//	
	//	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
	//		Для Каждого СтрокаСпискаЗначений Из Ответ Цикл
	//			// Проверка модифицированности предыдущего значения
	//			ПредыдущееЗначение = Неопределено;

	//			ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Ключ, ПредыдущееЗначение);
	//			Если ПредыдущееЗначение <> Неопределено
	//			   И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
	//				НастройкиИзменены = ИСТИНА; // Есть изменение настроек устройства
	//			КонецЕсли;

	//			ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Ключ, СтрокаСпискаЗначений.Значение);
	//		КонецЦикла;

	//		Результат = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
	//		Если НЕ Результат Тогда
	//			СообщениеОбОшибке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось сохранить параметры устройства.");
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	//	//Получить параметры из базы
	//	ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
	//	ПараметрыОбработки.Вставить("Идентификатор", Идентификатор);
	//	// Получение формы настройки параметров
	//	ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ОбработчикДрайвера));
	//	ФормаНастройки = ПолучитьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыОбработки);
	//	Ответ = ФормаНастройки.ОткрытьМодально();
	//	
	//	Если Ответ = КодВозвратаДиалога.ОК Тогда
	//		ПараметрыФормы = ФормаНастройки.Параметры;
	//		Для Каждого СтрокаСпискаЗначений Из ПараметрыФормы.ПараметрыНастройки Цикл
	//			//Проверка модифицированности предыдущего значения
	//			ПредыдущееЗначение = Неопределено;
	//			ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Представление, ПредыдущееЗначение);
	//			Если ПредыдущееЗначение <> Неопределено
	//			   И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
	//				НастройкиИзменены = ИСТИНА; // Есть изменение настроек устройства
	//			КонецЕсли;
	//			
	//			ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Представление, СтрокаСпискаЗначений.Значение);
	//		КонецЦикла;
	//		Результат = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
	//		Если НЕ Результат Тогда
	//			СообщениеОбОшибке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось сохранить параметры устройства.");
	//		КонецЕсли;
	//	ИначеЕсли Ответ = КодВозвратаДиалога.Прервать Тогда
	//		ЗавершитьРаботуСистемы(ИСТИНА, ИСТИНА);
	//	КонецЕсли;
	//КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции

// Сохраняет пользовательские настройки подключаемого оборудования
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
	МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);
КонецПроцедуры

// Процедура формирует задержку указанной длительности
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;

	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет пробелами
//
Функция ПостроитьПоле(Текст, ДлинаПоля) Экспорт
	ТекстПолный = Лев(Текст, ДлинаПоля);

	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		ТекстПолный = ТекстПолный + " ";
	КонецЦикла;
	Возврат ТекстПолный;
КонецФункции

//{{MRG[ <-> ]
// Функция проверяет доступность каталога по полному ими файла
//
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Функция проверяет доступность каталога по полному ими файла 
//// 
//}}MRG[ <-> ]
Функция ПроверитьДоступностьКаталога(Знач ПолноеИмяФайла, ТекстОшибки) Экспорт
	ВремФайл = Новый Файл(ПолноеИмяФайла);
	ВремКаталог = Новый Файл(ВремФайл.Путь);
	Результат = ВремКаталог.Существует();
//{{MRG[ <-> ]
	Если Результат Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Если Результат Тогда 
//}}MRG[ <-> ]
		ТекстОшибки = "";
	Иначе
//{{MRG[ <-> ]
		ТекстОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Каталог") + " " + ВремКаталог.ПолноеИмя + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не существует.") + Символы.ПС;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		ТекстОшибки = НСтр("ru='Каталог ""%Каталог%"" не существует.'") + Символы.ПС;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Каталог%", ВремКаталог.ПолноеИмя);
//}}MRG[ <-> ]
	КонецЕсли;
	Возврат Результат;
КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Методы работы с ТСД
// Выгружает таблицу с данными в терминал сбора данных
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур в которых могут присутствовать только нижеуказанные ключи:
// 	 - Штрихкод
// 	 - Номенклатура
// 	 - ЕдиницаИзмерения
// 	 - ХарактеристикаНоменклатуры
// 	 - СерияНоменклатуры
// 	 - Качество
// 	 - Цена
// 	 - Количество
Функция ВыгрузитьДанныеВТСД(УникальныйИдентификатор, ТаблицаВыгрузкиВТСД) Экспорт

	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
//{{MRG[ <-> ]
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите терминал сбора данных"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Терминал сбора данных не подключен"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите терминал сбора данных"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Терминал сбора данных не подключен"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
				// выгружаем в ТСД
				ВходныеПараметры  = Новый Массив();
				ВыходныеПараметры = Неопределено;
				// Преобразуем массив структур в массив списка значений с предопределенным и фиксированным порядком полей:
				// 	0 - Штрихкод
				// 	1 - Номенклатура
				// 	2 - ЕдиницаИзмерения
				// 	3 - ХарактеристикаНоменклатуры
				// 	4 - СерияНоменклатуры
				// 	5 - Качество
				// 	6 - Цена
				// 	7 - Количество
				МассивТСД = Новый Массив;

				Для Каждого текСтрока Из ТаблицаВыгрузкиВТСД Цикл
					Если текСтрока.Свойство("Номенклатура") Тогда
						НаименованиеНоменклатуры = текСтрока.Номенклатура;
					ИначеЕсли текСтрока.Свойство("Наименование") Тогда
						НаименованиеНоменклатуры = текСтрока.Наименование;
					Иначе
						НаименованиеНоменклатуры = "";
					КонецЕсли;
					СтрокаМассиваТСД = Новый СписокЗначений; // не массив для сохранения совместимости с обработками обслуживания
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод"),						текСтрока.Штрихкод, ""));
					СтрокаМассиваТСД.Добавить(НаименованиеНоменклатуры);
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения"), 			текСтрока.ЕдиницаИзмерения, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры"), 	текСтрока.ХарактеристикаНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры"), 			текСтрока.СерияНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество"), 					текСтрока.Качество, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена"), 						текСтрока.Цена, 0));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество"), 					текСтрока.Количество, 0));
					МассивТСД.Добавить(СтрокаМассиваТСД);

				КонецЦикла;
				ВходныеПараметры.Добавить("Items");
				ВходныеПараметры.Добавить(МассивТСД);
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
//{{MRG[ <-> ]
				"UploadDirectory",
				ВходныеПараметры,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                        "UploadDirectory",
//				                                                        ВходныеПараметры,
//				                                                        ВыходныеПараметры);
//}}MRG[ <-> ]

				Если НЕ Результат Тогда
//{{MRG[ <-> ]
					ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При выгрузке данных в терминал сбора данных произошла ошибка.") + Символы.ПС +
					"%ОписаниеОшибки%" + Символы.ПС +
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные в терминал сбора данных не выгружены.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ТекстСообщения = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
//					                          |%ОписаниеОшибки%
//					                          |Данные в терминал сбора данных не выгружены.'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
//{{MRG[ <-> ]
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении устройства произошла ошибка.") + Символы.ПС +
				"%ОписаниеОшибки%" + символы.ПС +
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные в терминал сбора данных не выгружены.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//				                          |%ОписаниеОшибки%
//				                          |Данные в терминал сбора данных не выгружены.'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		Иначе
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
	Иначе
//{{MRG[ <-> ]
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
//}}MRG[ <-> ]
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;

	Возврат РезультатОперации;
КонецФункции

//{{MRG[ <-> ]
// Загружает в таблицу данные Из терминала сбора данных
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Загружает в таблицу данные из терминала сбора данных
//}}MRG[ <-> ]
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур с ключами:
// 	 - Штрихкод
// 	 - Количество
Функция ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД, СворачиватьДанные = ИСТИНА) Экспорт

//{{MRG[ <-> ]
	ТаблицаЗагрузкиИзТСД = Новый Массив();
	ОписаниеОшибки = "";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ТаблицаЗагрузкиИзТСД = Новый Массив();       
//	ОписаниеОшибки = "";    
//}}MRG[ <-> ]
	РезультатОперации = ИСТИНА;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
//{{MRG[ <-> ]
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите терминал сбора данных"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Терминал сбора данных не подключен"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				"DownloadDocument",
				ВходныеПараметры,
				ВыходныеПараметры);

//{{MRG[ <-> ]
//				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
//				                                                        "DownloadDocument",
//				                                                        ВходныеПараметры,
//				                                                        ВыходныеПараметры);
//}}MRG[ <-> ]
				Если Результат Тогда
					ТаблицаДанных = Новый Соответствие();
					Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
						Штрихкод    = ВыходныеПараметры[0][Индекс * 2 + 0];
						Количество = Число(?(ВыходныеПараметры[0][Индекс * 2 + 1] <> Неопределено, ВыходныеПараметры[0][Индекс * 2 + 1], 0));
						Если СворачиватьДанные Тогда
							Данные = ТаблицаДанных.Получить(Штрихкод);
							Если Данные = Неопределено Тогда
								ТаблицаДанных.Вставить(Штрихкод, Количество)
							Иначе
								ТаблицаДанных.Вставить(Штрихкод, Данные + Количество)
							КонецЕсли;
						Иначе
							ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
						КонецЕсли;
					КонецЦикла;
					Если СворачиватьДанные Тогда
						Для Каждого Данные  Из ТаблицаДанных Цикл
							ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Данные.Ключ, Данные.Значение));
						КонецЦикла
					КонецЕсли;
					Оповестить("DataCollectionTerminal", ТаблицаЗагрузкиИзТСД, "ПодключаемоеОборудование");
				Иначе
//{{MRG[ <-> ]
					ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При загрузке данных Из терминала сбора данных произошла ошибка.") + Символы.ПС +
					ВыходныеПараметры[1] + Символы.ПС +
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные Из терминала сбора данных не загружены.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
//					                          |%ОписаниеОшибки%
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |Данные из терминала сбора данных не загружены.'");
//					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
//}}MRG[ <-> ]
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
//{{MRG[ <-> ]
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении устройства произошла ошибка.") + Символы.ПС +
				ОписаниеОшибки + Символы.ПС +
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные Из терминала сбора данных не загружены.");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//				                          |%ОписаниеОшибки%
//				                          |Данные из терминала сбора данных не загружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
//}}MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		Иначе
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;

	Возврат РезультатОперации;
КонецФункции

// Очищает данные в терминале сбора данных
// УникальныйИдентификатор - идентификатор формы
Функция ОчиститьДанныеВТСД(УникальныйИдентификатор) Экспорт

	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
//{{MRG[ <-> ]
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
//{{MRG[ <-> ]
				"ClearTable",
				ВходныеПараметры,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                        "ClearTable",
//				                                                        ВходныеПараметры,
//				                                                        ВыходныеПараметры);
//}}MRG[ <-> ]

				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в терминале сбора данных произошла ошибка.
//{{MRG[ <-> ]
					|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%
				|Данные в терминал сбора данных не выгружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%
//				                          |Данные в терминал сбора данных не выгружены.'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;

	Возврат РезультатОперации;
КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Методы работы с весами
// Получает вес с электронных весов
// УникальныйИдентификатор - идентификатор формы
Функция ПолучитьВесСЭлектронныхВесов(УникальныйИдентификатор, Вес) Экспорт
	Вес = 0;
	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ЭлектронныеВесы", НСтр("ru='Выберите электронные весы'"), "");
		Если ИдентификаторУстройства <> Неопределено Тогда
			// Подключаем Весы
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Если Результат Тогда  
//}}MRG[ <-> ]
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				// Пытаемся получить вес
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
//{{MRG[ <-> ]
				ИдентификаторУстройства,
				"ПолучитьВес",
				ВходныеПараметры,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ИдентификаторУстройства,
//					"ПолучитьВес",
//					ВходныеПараметры,
//					ВыходныеПараметры);    
//}}MRG[ <-> ]
				Если Результат Тогда
					Вес = ВыходныеПараметры[0]; // Вес получен
				Иначе
					ТекстСообщения = НСтр("ru = 'При использовании электронных весов произошла ошибка.
					|Дополнительное описание: |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(
//{{MRG[ <-> ]
					ТекстСообщения,
					"%ДополнительноеОписание%",
					ВыходныеПараметры[1]);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//						ТекстСообщения,
//						"%ДополнительноеОписание%",
//						ВыходныеПараметры[1]);
//}}MRG[ <-> ]
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;
				// Отключаем Весы
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				// Ошибка подключения весов
				ТекстСообщения = НСтр("ru = 'При подключении электронных весов произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(
//{{MRG[ <-> ]
				ТекстСообщения,
				"%ДополнительноеОписание%",
				ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ТекстСообщения,
//					"%ДополнительноеОписание%",
//					ОписаниеОшибки);
//}}MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='Электронные весы не подключены.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;
	Возврат РезультатОперации;
КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Методы работы с оборудованием Offline
// Выгружает таблицу с данными в весы с печатью этикеток
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТоваров			- массив структур в которых могут присутствовать только нижеуказанные ключи:
// PLU , число
// Код, число
// Штрихкод, строка
// Номенклатура, строка
// НаименованиеПолное, строка
// Цена, число
// ОписаниеТовара, строка
Процедура ВыгрузитьДанныеВВесыСПечатьюЭтикеток(УникальныйИдентификатор, ТаблицаВыгрузкиТоваров) Экспорт

	ОписаниеОшибки = "";

	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для выгрузки!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ВесыСПечатьюЭтикеток",
//{{MRG[ <-> ]
		НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
//{{MRG[ <-> ]
				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в весы с печатью этикеток...'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в весы с печатью этикеток...'")); 
//}}MRG[ <-> ]
				ВходныеПараметры  = Новый Массив;
				МассивТоваров = Новый Массив;

				Для Каждого СтрокаТЧ Из ТаблицаВыгрузкиТоваров Цикл
					ЭлементМассива = Новый Структура("PLU, Код, Штрихкод, Наименование, НаименованиеПолное, Цена", 0, 0, "", "" , 0);
					ЭлементМассива.PLU = СтрокаТЧ.PLU;
					ЭлементМассива.Код = СтрокаТЧ.Код;
					ЭлементМассива.Наименование       = Строка(СтрокаТЧ.Номенклатура);
					ЭлементМассива.НаименованиеПолное = Строка(СтрокаТЧ.НаименованиеПолное);
					ЭлементМассива.Цена = СтрокаТЧ.Цена;
					МассивТоваров.Добавить(ЭлементМассива);

				КонецЦикла;
				ВходныеПараметры.Добавить(МассивТоваров);
				ВходныеПараметры.Добавить(ЛОЖЬ); // Частичная выгрузка.
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
//{{MRG[ <-> ]
					|%ОписаниеОшибки%
					|Данные не выгружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |%ОписаниеОшибки%
//					                          |Данные не выгружены.'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно выгружены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%
				|Данные не выгружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%
//				                          |Данные не выгружены.'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Очищает товары в весах с печатью этикеток
//{{MRG[ <-> ]
//
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// 
//}}MRG[ <-> ]
Процедура ОчиститьТоварыВВесахСПечатьюЭтикеток(УникальныйИдентификатор) Экспорт

	ОписаниеОшибки = "";
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ВесыСПечатьюЭтикеток",
//{{MRG[ <-> ]
		НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
				Состояние(НСтр("ru = 'Выполняется очистка товаров в весах с печатью этикеток...'"));
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
//{{MRG[ <-> ]
					|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно очищены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры
// Выгружает таблицу с данными в ККМ Offline
// УникальныйИдентификатор - идентификатор формы
// ТаблицаТоваров - массив структур в которых могут присутствовать только нижеуказанные ключи:
// Код, строка
// Штрихкод, строка или массив строк (если для одной номенклатурной позиции имеется несколько штрихкодов)
// Наименование, строка
// НаименованиеПолное, строка
// ЕдиницаИзмерения, строка
// Цена, число
// Остаток, число
//{{MRG[ <-> ]
//
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// 
//}}MRG[ <-> ]
Процедура ВыгрузитьДанныеВККМOffline(УникальныйИдентификатор, ТаблицаВыгрузкиТоваров) Экспорт

	ОписаниеОшибки = "";

	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для выгрузки!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
//{{MRG[ <-> ]
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Если ИдентификаторУстройства <> Неопределено Тогда
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
//{{MRG[ <-> ]
				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в ККМOffline...'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в ККМOffline...'")); 
//}}MRG[ <-> ]
				ВходныеПараметры  = Новый Массив;
				МассивТоваров = Новый Массив;

				Для Каждого СтрокаТЧ Из ТаблицаВыгрузкиТоваров Цикл
					ЭлементМассива = Новый Структура("Код, Артикул, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар");
					ЭлементМассива.Код                = СтрокаТЧ.Код;
					ЭлементМассива.Артикул            = ?(СтрокаТЧ.Свойство("Артикул"), СтрокаТЧ.Артикул, "");
					ЭлементМассива.Штрихкод           = Строка(СтрокаТЧ.Штрихкод);
					ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
					ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
					ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмерения;
					ЭлементМассива.Цена               = СтрокаТЧ.Цена;
					ЭлементМассива.Остаток            = ?(СтрокаТЧ.Свойство("Остаток"), СтрокаТЧ.Остаток, 0);
					ЭлементМассива.ВесовойТовар       = ?(СтрокаТЧ.Свойство("ВесовойТовар"), СтрокаТЧ.ВесовойТовар, ЛОЖЬ);
					МассивТоваров.Добавить(ЭлементМассива);

				КонецЦикла;
				ВходныеПараметры.Добавить(МассивТоваров);
				ВходныеПараметры.Добавить(ЛОЖЬ); // Частичная выгрузка
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
//{{MRG[ <-> ]
					|%ОписаниеОшибки%
					|Данные не выгружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |%ОписаниеОшибки%
//					                          |Данные не выгружены.'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно выгружены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%
				|Данные не выгружены.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%
//				                          |Данные не выгружены.'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Очищает товары в ККМ Offline
//
Процедура ОчиститьТоварыВККМOffline(УникальныйИдентификатор) Экспорт

	ОписаниеОшибки = "";
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
//{{MRG[ <-> ]
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]

		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
				Состояние(НСтр("ru = 'Выполняется очистка товаров в ККМ Offline...'"));
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
//{{MRG[ <-> ]
					|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно очищены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

//{{MRG[ <-> ]
// Функция загружает отчет о розничных продажах Из ККМ Offline.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Функция загружает отчет о розничных продажах из ККМ Offline.
//}}MRG[ <-> ]
//
Функция ЗагрузитьОтчетОРозничныхПродажахККМOffline(УникальныйИдентификатор, ТаблицаЗагрузкиТоваров) Экспорт
	ОписаниеОшибки = "";
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
//{{MRG[ <-> ]
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		    НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
//}}MRG[ <-> ]
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
			ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			                                                                              ИдентификаторУстройства, ОписаниеОшибки);
//}}MRG[ <-> ]
			Если Результат Тогда
//{{MRG[ <-> ]
				Состояние(НСтр("ru = 'Выполняется загрузка товаров Из ККМ Offline...'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				Состояние(НСтр("ru = 'Выполняется загрузка товаров из ККМ Offline...'"));
//}}MRG[ <-> ]
				ВходныеПараметры  = Новый Массив;
				ВыходныеПараметры = Неопределено;
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ЗагрузитьОтчет", ВходныеПараметры, ВыходныеПараметры);
				Если НЕ Результат Тогда
//{{MRG[ <-> ]
					ТекстСообщения = НСтр("ru='При загрузка данных Из ККМ Offline произошла ошибка.
					|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
//					                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТаблицаЗагрузкиТоваров = ВыходныеПараметры[0];
					ТекстСообщения = НСтр("ru = 'Загрузка товаров успешно завершена.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
//{{MRG[ <-> ]
				ИдентификаторУстройства);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                                                                 ИдентификаторУстройства);
//}}MRG[ <-> ]
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
//{{MRG[ <-> ]
				|%ОписаниеОшибки%'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                          |%ОписаниеОшибки%'");
//}}MRG[ <-> ]
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Работа с ридером магнитных карт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//// Работа с ридером магнитных карт 
//}}MRG[ <-> ]
// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//{{MRG[ <-> ]
// 	- Суффикс
// 	- Префикс
// 	- РазделительБлоков
// 	- ДлинаКода
//}}MRG[ <-> ]
//{{MRG[ <-> ]
////	- Суффикс
////	- Префикс
////	- РазделительБлоков
////	- ДлинаКода
//}}MRG[ <-> ]
// На выходе:
// ИСТИНА - код соответствует шаблону
// Сообщение пользователю что именно не соответствует
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона) Экспорт

	ОднаДорожкаПрисутствует = ЛОЖЬ;
	ПроверкаПройдена = ИСТИНА;
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			ОднаДорожкаПрисутствует = ИСТИНА;
			текСтрока = ДанныеДорожек[Итератор - 1];

			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс" + Строка(Итератор)])) <> ДанныеШаблона["Суффикс" + Строка(Итератор)] Тогда
//{{MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор)
				+ ". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
//					+ ". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.'"));
//}}MRG[ <-> ]
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			Если Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс" + Строка(Итератор)])) <> ДанныеШаблона["Префикс" + Строка(Итератор)] Тогда
//{{MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор)
				+ ". " + НСтр("ru='Префикс карты не соответствует префиксу шаблона.'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
//					+ ". " + НСтр("ru='Префикс карты не соответствует префиксу шаблона.'"));
//}}MRG[ <-> ]
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			Если Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0 Тогда
//{{MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор)
				+ ". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
//					+ ". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.'"));
//}}MRG[ <-> ]
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			Если СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
//{{MRG[ <-> ]
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор)
				+ ". " + НСтр("ru='Длина кода карты не соответствует длине кода шаблона.'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
//					+ ". " + НСтр("ru='Длина кода карты не соответствует длине кода шаблона.'"));
//}}MRG[ <-> ]
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			Если НЕ ПроверкаПройдена Тогда
				Возврат ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	Если ОднаДорожкаПрисутствует Тогда
		Возврат ИСТИНА;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В шаблоне не указано ни одной доступной дорожки.'"));

		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции
//{{MRG[ <-> ]
//	Если ОднаДорожкаПрисутствует Тогда 
//}}MRG[ <-> ]

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Обработка событий от устройств
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//// Обработка событий от устройств 
//}}MRG[ <-> ]
// Производит обработку данных события, полученных от клиента
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = ИСТИНА;
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
//{{MRG[ <-> ]
			Или (ПустаяСтрока(Подключение.ИсточникСобытия)
			И Подключение.ИменаСобытий <> Неопределено) Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
//		   И Подключение.ИменаСобытий <> Неопределено) Тогда
//}}MRG[ <-> ]

			// Ищем среди подключенного оборудования устройство с полученным событием
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение.ОбработчикДрайвера);

				Если ОбъектДрайвера = Неопределено Тогда
//{{MRG[ <-> ]
					// Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					//Сообщить об ошибке, что не удалось загрузить драйвер.
//}}MRG[ <-> ]
					ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
//{{MRG[ <-> ]
					|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
//}}MRG[ <-> ]
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
					Продолжить;
				КонецЕсли;

				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;
				// Обрабатываем сообщение
				Результат = ВыполнитьКоманду(Подключение.Ссылка,
//{{MRG[ <-> ]
				"ОбработатьСобытие",
				ВходныеПараметры,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                      "ОбработатьСобытие",
//				                      ВходныеПараметры,
//				                      ВыходныеПараметры);
//}}MRG[ <-> ]

				Если Результат Тогда
//{{MRG[ <-> ]
					// Оповещаем
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					// Оповещаем 
//}}MRG[ <-> ]
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;

				// Оповещаем драйвер о завершении обработки события
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(Результат);
				ВыполнитьКоманду(Подключение.Ссылка,
//{{MRG[ <-> ]
				"ЗавершитьОбработкуСобытия",
				ВходныеПараметры,
				ВыходныеПараметры);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				                 "ЗавершитьОбработкуСобытия",
//				                 ВходныеПараметры,
//				                 ВыходныеПараметры);
//}}MRG[ <-> ]
			КонецЕсли;
		КонецЕсли;

//{{MRG[ <-> ]
//		КонецЕсли;
//}}MRG[ <-> ]
	КонецЦикла;

	Возврат Результат;

КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Вспомогательные методы
// Поиск по идентификатору подключенного ранее устройства
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//// Вспомогательные методы 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
////Поиск по идентификатору подключенного ранее устройства
//}}MRG[ <-> ]
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор)

	ПодключенноеУстройство = Неопределено;

	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ПодключенноеУстройство;

КонецФункции

// Выполняет подготовку к переустановке компоненты: Спрашивает пользователя, устанавливает флаг ТребуетсяПереустановка.
//{{MRG[ <-> ]
// Процедура вызывается Из модуля формы настройки оборудования ПриОткрытии
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Процедура вызывается из модуля формы настройки оборудования ПриОткрытии
//}}MRG[ <-> ]
Процедура ПодготовкаКПереустановкеКомпоненты(ПодключаемоеОборудованиеСсылка, ВерсияТекущая, Отказ) Экспорт
	#Если ВебКлиент Тогда
		ВерсияИзКонфигурации = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(МенеджерОборудованияВызовСервера.ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка)).ПолучитьВерсиюВнешнейКомпоненты();
		ТребуетсяПереустановка = МенеджерОборудованияВызовСервера.ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка);

		Если НЕ ТребуетсяПереустановка
			И ЗначениеЗаполнено(ВерсияИзКонфигурации)
			И ЗначениеЗаполнено(ВерсияТекущая)
			И ВерсияИзКонфигурации <> ВерсияТекущая Тогда

			Ответ = Вопрос(НСтр("ru='На вашем компьютере установлена компонента версии'") + Символы.НПП + ВерсияТекущая + Символы.ПС
//{{MRG[ <-> ]
			+НСтр("ru='В конфигурации доступна версия компоненты'") + Символы.НПП +  ВерсияИзКонфигурации + Символы.ПС + Символы.ПС
			+НСтр("ru='Обновить компоненту Из конфигурации? (требуется перезапустить 1С:Предприятие)'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Обновление компоненты'"));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				+НСтр("ru='В конфигурации доступна версия компоненты'") + Символы.НПП +  ВерсияИзКонфигурации + Символы.ПС + Символы.ПС
//				+НСтр("ru='Обновить компоненту из конфигурации? (требуется перезапустить 1С:Предприятие)'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Обновление компоненты'"));
//}}MRG[ <-> ]
			Если Ответ = КодВозвратаДиалога.Да Тогда
				МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, ИСТИНА);
				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

	#КонецЕсли
КонецПроцедуры

Функция ПреобразоватьСписокСтрокойВМассив(Источник)
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник	   		   = Новый Массив;
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат Приемник;
КонецФункции

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//}}MRG[ <-> ]
// Процедуры общих команд

// Открытие формы списка рабочих мест
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт

	ОткрытьФормуВыбораРМПриПервомОбращении = ЛОЖЬ;
	СписокНастроек = МенеджерОборудованияКлиентПовтИсп.ПолучитьПользовательскиеНастройкиПодключаемогоОборудования();
	Для Каждого Параметр Из СписокНастроек Цикл
		Если Параметр.Ключ = "ОткрытьФормуВыбораРМПриПервомОбращении" Тогда
			ОткрытьФормуВыбораРМПриПервомОбращении = Параметр.Значение;
		КонецЕсли;

	КонецЦикла;
	МенеджерОборудованияКлиент.ВыбратьРабочееМесто(ОткрытьФормуВыбораРМПриПервомОбращении);
КонецПроцедуры

// Открытие формы подключаемого Оборудования
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

//{{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Работа с драйвером
//}}MRG[ <-> ]
//{{MRG[ <-> ]
/////////////////////////////////////////////////////////////////////////////////
//// Работа с драйвером 
//}}MRG[ <-> ]
// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
	Возврат ОбъектДрайвера <> Неопределено;
КонецФункции

#Если Не ВебКлиент Тогда
//{{MRG[ <-> ]
	// Устанавливает драйвер Из дистрибутива поставщика
	//
	Процедура УстановитьДрайверИзДистрибутива(Знач ИмяМакета, Знач ИмяФайла) Экспорт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Устанавливает драйвер из дистрибутива поставщика
////
//Процедура УстановитьДрайверИзДистрибутива(Знач ИмяМакета, Знач ИмяФайла) Экспорт
//}}MRG[ <-> ]

//{{MRG[ <-> ]
		ВременныйКаталог = КаталогВременныхФайлов();
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ВременныйКаталог = КаталогВременныхФайлов();
//}}MRG[ <-> ]
		// Получение макета с сервера
		СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
		Расширение = Прав(ВРег(ИмяФайла), 4);

//{{MRG[ <-> ]
//		Если НЕ Расширение = ".EXE" Тогда
			// Распаковка архива дистрибутива во временный каталог
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Получение макета с сервера
//	СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
//}}MRG[ <-> ]
			Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", ЛОЖЬ);
			ФайлМакета = Новый ЧтениеZipФайла();
			ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");
			ВременныйКаталогВнутр = ВременныйКаталог + "Model\";

//{{MRG[ <-> ]
			Для Каждого ЭлементМакета Из ФайлМакета.Элементы Цикл
				Расширение = Прав(ВРег(ЭлементМакета.Имя), 4);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Распаковка архива дистрибутива во временный каталог
//	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", ЛОЖЬ);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	ФайлМакета = Новый ЧтениеZipФайла();
//	ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");
//	ВременныйКаталог = ВременныйКаталог + "Model\";
//}}MRG[ <-> ]

//{{MRG[ <-> ]
				Если Расширение = ".ZIP"
					ИЛИ Расширение = ".EXE" Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Для Каждого ЭлементМакета Из ФайлМакета.Элементы Цикл
//		Если ЭлементМакета.Имя = ИмяФайла + ".zip" Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			СоздатьКаталог(ВременныйКаталог);
//			ФайлМакета.Извлечь(ЭлементМакета, ВременныйКаталог);
//}}MRG[ <-> ]

//{{MRG[ <-> ]
					СоздатьКаталог(ВременныйКаталог);
					ФайлМакета.Извлечь(ЭлементМакета, ВременныйКаталогВнутр);
					Если Расширение = ВРег(ИмяФайла + ".ZIP") Тогда
						// Распаковка дистрибутива
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			// Распаковка дистрибутива
//			ФайлАрхива = Новый ЧтениеZipФайла();
//			ФайлАрхива.Открыть(ВременныйКаталог + ЭлементМакета.Имя);
//			ФайлАрхива.ИзвлечьВсе(ВременныйКаталог);
//}}MRG[ <-> ]
						ФайлАрхива = Новый ЧтениеZipФайла();
						ФайлАрхива.Открыть(ВременныйКаталогВнутр + ЭлементМакета.Имя);
						ФайлАрхива.ИзвлечьВсе(ВременныйКаталогВнутр);
					КонецЕсли;

//{{MRG[ <-> ]
					// Запуск инсталлятора
					ЗапуститьПриложение(ВременныйКаталогВнутр + ЭлементМакета.Имя, ВременныйКаталогВнутр, ИСТИНА);
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			// Запуск инсталлятора
//			ЗапуститьПриложение(ВременныйКаталог + ИмяФайла, ВременныйКаталог, ИСТИНА);
//}}MRG[ <-> ]
					// Удаление всех временных файлов после работы
				КонецЕсли;

//{{MRG[ <-> ]
			КонецЦикла;
		//Иначе
		//	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Setup.exe", ЛОЖЬ);
		//	ЗапуститьПриложение(ВременныйКаталог + "Setup.exe", ВременныйКаталог, ИСТИНА);
		//
		//КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			// Удаление всех временных файлов после работы
//			Попытка
//				УдалитьФайлы(ВременныйКаталог);
//			Исключение
//			КонецПопытки;
//		КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	КонецЦикла;
//}}MRG[ <-> ]

//{{MRG[ <-> ]
		Попытка
			УдалитьФайлы(ВременныйКаталогВнутр);
			УдалитьФайлы(ВременныйКаталог + "Model.zip");
		Исключение
		КонецПопытки;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Удаление всех временных файлов после работы
//	ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "Model\", "");
//	Попытка
//		УдалитьФайлы(ВременныйКаталог + "Model.zip");
//	Исключение
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	КонецПопытки;
//}}MRG[ <-> ]

//{{MRG[ <-> ]
	КонецПроцедуры
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//КонецПроцедуры
//}}MRG[ <-> ]

#КонецЕсли
// Получение объекта драйвера.
//
Функция ПолучитьОбъектДрайвера(ДрайверУстройства) Экспорт

	ОбъектДрайвера = Неопределено;

	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДрайверУстройства Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
//{{MRG[ <-> ]
			// Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
			Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")
//{{MRG[ <-> ]
				Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") 
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
//}}MRG[ <-> ]
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода", "Сканер");
					ОбъектДрайвера = Новый ("AddIn.Сканер.Scanner");
				#Иначе
					ProgID = "AddIn.Scanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
//{{MRG[ <-> ]
//			    #Если ВебКлиент Тогда
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.ScancodeScanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода")
//{{MRG[ <-> ]
				Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//				  Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
//}}MRG[ <-> ]

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scaner45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода") Тогда
//{{MRG[ <-> ]
//					ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонСканерШтрихкода", "Гексагон");
//}}MRG[ <-> ]
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонСканерШтрихкода", "Гексагон");
//{{MRG[ <-> ]
				ОбъектДрайвера = Новый ("AddIn.Гексагон.ProtonScanner");
				// Конец Сканеры штрихкода/Считыватели магнитных карт
				// Фискальные регистраторы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//					ОбъектДрайвера = Новый ("AddIn.Гексагон.ProtonScanner");
//		// Конец Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Фискальные регистраторы
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1CФискальныйРегистратор", "Эмулятор");
				ОбъектДрайвера = Новый ("AddIn.Эмулятор.EmulatorFP1C");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк", "ККСФРСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСФРСПАРК.SparkTF");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.ATOL_KKM_1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы", "АтолУниверсальный");
				ОбъектДрайвера = Новый ("AddIn.АтолУниверсальный.ATOL_KKM_1C82");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы8X", "Атол8X");
				ОбъектДрайвера = Новый ("AddIn.Атол8X.ATOL_KKM_1C82");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.KSBFR1K1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.DrvFR1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1СРарусФискальныеРегистраторыФеликс", "Феликс");
				ОбъектДрайвера = Новый ("AddIn.Феликс.fr_feliksRMK1c82");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.OrionFR_1C8";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
//{{MRG[ <-> ]
				// Конец Фискальные регистраторы
				// Дисплеи покупателя
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец Фискальные регистраторы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Дисплеи покупателя
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Line45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.1CDSPPromag";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя")  Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.LineDisplay";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя", "ККСДПСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСДПСПАРК.VFCD220E");
//{{MRG[ <-> ]
				// Конец Дисплеи покупателя
				// Терминалы сбора данных
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец Дисплеи покупателя
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Терминалы сбора данных
//}}MRG[ <-> ]
			ИначеЕсли (ДрайверУстройства) = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.PDX45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.CipherLab";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных")  Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.iPOSoft_DT";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных")  Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Terminals";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверКлеверенсТСД", "КлеверенсТСД");
				ОбъектДрайвера = Новый ("AddIn.КлеверенсТСД.Cleverence.TO_TSD");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонТерминалыСбораДанных") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонТСД", "ГексагонТСД");
				ОбъектДрайвера = Новый ("AddIn.ГексагонТСД.ProtonTSD");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанныхMobileLogistics") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛТСДMobileLogistics", "MobileLogistics");
				ОбъектДрайвера = Новый ("AddIn.MobileLogistics.PDX1C_Int");
//{{MRG[ <-> ]
				// Конец Терминалы сбора данных
				// Эквайринговые терминалы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец Терминалы сбора данных
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Эквайринговые терминалы
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ПодключитьВнешнююКомпоненту("AddIn.SBRFCOMObject");
					ОбъектДрайвера = Новый("AddIn.SBRFCOMExtension");
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда

				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы", "ИНПАСЭТ");
				ОбъектДрайвера = Новый("AddIn.ИНПАСЭТ.AddInPulsarDriver1C");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалыSmart", "ИНПАСSmart");
				ОбъектДрайвера = Новый("AddIn.ИНПАСSmart.a_inpas1c82");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофтКейсЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофтКейсЭквайринговыеТерминалы", "СофтКейс");
				ОбъектДрайвера = Новый("AddIn.СофтКейс.SKAM");
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOS32ЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверTRPOSЭквайринговыеТерминалы", "TRPOS32");
				ОбъектДрайвера = Новый ("AddIn.TRPOS32.a_trpos1c82");
//{{MRG[ <-> ]
				// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
				// 	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX", "IngenicoECR");
				// 	ОбъектДрайвера = Новый ("AddIn.IngenicoECR.a_ingenicopb1c82");
				// Конец Эквайринговые терминалы
				// Электронные весы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
//			//	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX", "IngenicoECR");
//			//	ОбъектДрайвера = Новый ("AddIn.IngenicoECR.a_ingenicopb1c82");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец Эквайринговые терминалы
//		// Электронные весы
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
//{{MRG[ <-> ]
				// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
//}}MRG[ <-> ]
				// 	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы", "CASЭлектронныеВесы");
//{{MRG[ <-> ]
				// 	ОбъектДрайвера = Новый ("AddIn.CASЭлектронныеВесы.CasCentreSimpleScale");
				// Конец Электронные весы
				// Весы с печатью этикеток
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//			//	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы", "CASЭлектронныеВесы");
//			//	ОбъектДрайвера = Новый ("AddIn.CASЭлектронныеВесы.CasCentreSimpleScale");
//		// Конец Электронные весы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Весы с печатью этикеток
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикACOMВесыСПечатьюЭтикеток") Тогда

				ОбъектДрайвера = ""; // Драйвер не требуется
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "CL5000J.WrapperFor1C82";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый ("AddIn.CL5000JFor1C82");
				#КонецЕсли
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда

				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.DrvLP";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
//{{MRG[ <-> ]
				// Конец Весы с печатью этикеток
				// ККМ offline
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец Весы с печатью этикеток
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// ККМ offline
//}}MRG[ <-> ]
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККМOffline") Тогда

				ОбъектДрайвера = ""; // Драйвер не требуется
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККМOffline") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
//{{MRG[ <-> ]
				// Конец ККМ offline
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// Конец ККМ offline
//}}MRG[ <-> ]
			КонецЕсли;

		Исключение
		КонецПопытки;
//{{MRG[ <-> ]
	КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	КонецЕсли; 
//}}MRG[ <-> ]

	Если ОбъектДрайвера <> Неопределено Тогда
		глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДрайверУстройства, ОбъектДрайвера);
		ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДрайверУстройства];
	КонецЕсли;

	Возврат ОбъектДрайвера;

КонецФункции

//{{MRG[ <-> ]
// Установка Из макета драйвера устройства.
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//// Установка из макета драйвера устройства.
//}}MRG[ <-> ]
//
Процедура УстановитьДрайвер(Идентификатор) Экспорт
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ДрайверУстройства = ДанныеОборудования.ОбработчикДрайвера;
	Попытка
//{{MRG[ <-> ]
		// Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
		Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")
//{{MRG[ <-> ]
			Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")   
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда 
//}}MRG[ <-> ]
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода");
			#Иначе
				УстановитьДрайверИзДистрибутива("Драйвер1ССканерШтрихкодаExe", "ScanOPOS.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодСканерШтрихкода", "ScancodeScanOpos_8.0.8.19.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихКода") Тогда

			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛОбщий");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "atol_basic.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода") Тогда

			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонСканерШтрихкода");
//{{MRG[ <-> ]
			// Конец Сканеры штрихкода/Считыватели магнитных карт
			// Фискальные регистраторы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Сканеры штрихкода/Считыватели магнитных карт
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Фискальные регистраторы
//}}MRG[ <-> ]
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда

			УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1CФискальныйРегистратор");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы8X");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверВерсияТКасбиФР01К", "ksb01frk.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
//{{MRG[ <-> ]
//    		#Если ВебКлиент Тогда
//}}MRG[ <-> ]
			#Если ВебКлиент Тогда
			#Иначе
//{{MRG[ <-> ]
				УстановитьДрайверИзДистрибутива("ДрайверОРИОНФР01К", "ORION-FR01K_v.1.2.exe");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
// 				УстановитьДрайверИзДистрибутива("ДрайверОРИОНФР01К", "ORION-FR01K_v.1.2.exe");
//}}MRG[ <-> ]
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМФискальныеРегистраторы", "DrvFR_4.9_152.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс") Тогда

			УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1СРарусФискальныеРегистраторыФеликс");
//{{MRG[ <-> ]
			// Конец Фискальные регистраторы
			// Дисплеи покупателя
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Фискальные регистраторы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Дисплеи покупателя
//}}MRG[ <-> ]
		ИначеЕсли ДрайверУстройства =  ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодДисплеиПокупателя", "1CDSPPromag_2.1.0.5.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМДисплеиПокупателя", "LightPOSDrv_1.2.3.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда

			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя");
//{{MRG[ <-> ]
			// Конец Дисплеи покупателя
			// Терминалы сбора данных                                           `
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Дисплеи покупателя
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Терминалы сбора данных                                           `
//}}MRG[ <-> ]
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодТСДCipherLab", "CPT_1C_6.0.3.0.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных") Тогда

//{{MRG[ <-> ]
//		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных") Тогда
//}}MRG[ <-> ]
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканситиТСДCipherLab", "CitySoftWarehouseDOS.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных") Тогда

			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМТСД", "setup.exe");
			#КонецЕсли
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных") Тогда

			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверКлеверенсТСД");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонТерминалыСбораДанных") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонТСД");
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанныхMobileLogistics") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛТСДMobileLogistics");
//{{MRG[ <-> ]
			// Конец Терминалы сбора данных
			// Электронные весы
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Терминалы сбора данных
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Электронные весы
//}}MRG[ <-> ]
			// 	#Если ВебКлиент Тогда
//{{MRG[ <-> ]
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверШтрихМЭлектронныеВесы", "setup.exe");
			// 	#КонецЕсли
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
//		//	#Если ВебКлиент Тогда
//		//	#Иначе			
//		//		УстановитьДрайверИзДистрибутива("ДрайверШтрихМЭлектронныеВесы", "setup.exe");
//		//	#КонецЕсли	
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы");
//{{MRG[ <-> ]
			// Конец Электронные весы
			// Весы с печатью этикеток
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы");
//	// Конец Электронные весы 
//}}MRG[ <-> ]
			// 	#Если ВебКлиент Тогда
//{{MRG[ <-> ]
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверScaleCASВесыСПечатьюЭтикеток", "setup.exe");
			// 	#КонецЕсли
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Весы с печатью этикеток
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
//		//	#Если ВебКлиент Тогда
//		//	#Иначе
//		//		УстановитьДрайверИзДистрибутива("ДрайверScaleCASВесыСПечатьюЭтикеток", "setup.exe");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	#КонецЕсли
//}}MRG[ <-> ]
			// 	#Если ВебКлиент Тогда
//{{MRG[ <-> ]
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверШтрихМВесыCПечатьюЭтикеток", "setup.exe");
			// 	#КонецЕсли
			// Конец Весы с печатью этикеток
			// Эквайринговые терминалы
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
//		//	#Если ВебКлиент Тогда
//		//	#Иначе
//		//		УстановитьДрайверИзДистрибутива("ДрайверШтрихМВесыCПечатьюЭтикеток", "setup.exe");
//		//	#КонецЕсли
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Весы с печатью этикеток
//}}MRG[ <-> ]
			// 	#Если ВебКлиент Тогда
//{{MRG[ <-> ]
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверСБРФЭквайринговыеТерминалы", "setup.exe");
			// 	#КонецЕсли
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Эквайринговые терминалы        
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
//		//	#Если ВебКлиент Тогда
//		//	#Иначе
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//		УстановитьДрайверИзДистрибутива("ДрайверСБРФЭквайринговыеТерминалы", "setup.exe");
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы");
//{{MRG[ <-> ]
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	#КонецЕсли
//		//
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы");
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалыSmart");
//{{MRG[ <-> ]
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофтКейсЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалыSmart");
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофтКейсЭквайринговыеТерминалы");
//{{MRG[ <-> ]
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOS32ЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофтКейсЭквайринговыеТерминалы") Тогда
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофтКейсЭквайринговыеТерминалы");
//		//	
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOS32ЭквайринговыеТерминалы") Тогда
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверTRPOSЭквайринговыеТерминалы");
//{{MRG[ <-> ]
			//
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверTRPOSЭквайринговыеТерминалы");
//		//	
//		//ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		//	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX");
//}}MRG[ <-> ]
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX");
//{{MRG[ <-> ]
			// Конец Эквайринговые терминалы
		КонецЕсли;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// Конец Эквайринговые терминалы
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	КонецЕсли;
//}}MRG[ <-> ]
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при установке") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;

КонецПроцедуры
