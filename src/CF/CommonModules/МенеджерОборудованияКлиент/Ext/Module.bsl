// sza150419-2205  Нов драйвера
// sza140918-1604
// sza140831-0452
// Производит подключение доступного оборудования по списку типов ПО
// 
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для Каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);
	
КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
// 
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
	ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";
	
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если НЕ Результат Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.");
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	СписокОборудования =  МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	// sza
	Если НЕ глПодключаемоеОборудование = Неопределено
		И СписокОборудования.Количество() > 0 Тогда
		
		Для Каждого Устройство Из СписокОборудования Цикл
			// Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
			Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее
				
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					+ "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = ЛОЖЬ;
					
					Продолжить;
				КонецЕсли;
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("СетевойПорт"            , Устройство.СетевойПорт);
				НовоеПодключение.Вставить("Параметры", 
				МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Устройство.Ссылка));
				НовоеПодключение.Вставить("КоличествоПодключенных", 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"  , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				
				ВыходныеПараметры = Неопределено;
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(НовоеПодключение.ОбработчикДрайвера);
				
				Результат = ОбработчикДрайвера.ПодключитьУстройство(
				ОбъектДрайвера,
				НовоеПодключение.Параметры,
				НовоеПодключение.ПараметрыПодключения,
				ВыходныеПараметры);
				
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;
					
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось подключить устройство") +" ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)";
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				// Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выбранное устройство не может использоваться для подключения.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Укажите другое устройство.");
		КонечныйРезультат = ЛОЖЬ;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Отключение оборудования

// Отключает все подключенное оборудование, соответствующее указанному типу ПО
// 
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);
	
КонецФункции

// Отключает устройство, определенное идентификатором
// 
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	
	Для Каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = ЛОЖЬ;
			
			Продолжить;
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
		ОбъектДрайвера,
		ПодключенноеУстройство.Параметры,
		ПодключенноеУстройство.ПараметрыПодключения,
		ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При отключении устройства") + " ""%Наименование%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("произошла ошибка") + ": %ОписаниеОшибки% (%КодОшибки%)";
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		КонецЕсли;
		
		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = ИСТИНА;
	Результат         = ИСТИНА;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено
				И (ТипыПО = Неопределено
				Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
				И (ИдентификаторУстройства = Неопределено
				Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ПодключенноеУстройство.КоличествоПодключенных = 0;
					
					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
					Если ОбъектДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = ЛОЖЬ;
						
						Продолжить;
					КонецЕсли;
					
					ВыходныеПараметры = Неопределено;
					Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
					ОбъектДрайвера,
					ПодключенноеУстройство.Параметры,
					ПодключенноеУстройство.ПараметрыПодключения,
					ВыходныеПараметры);
					
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При отключении устройства") + " ""%Наименование%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("произошла ошибка") + ": %ОписаниеОшибки% (%КодОшибки%)";
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Методы подключения и отключения оборудования в форме

// Подключает необходимые типы оборудования при открытии формы.
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
// 		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
// 
Функция ПодключитьОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОборудованиеПодключено = ИСТИНА;
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование И ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОшибки = "";
		
		ОборудованиеПодключено = ПодключитьОборудованиеПоТипу(
		Форма.УникальныйИдентификатор,
		ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
		ОписаниеОшибки);
		
		Если НЕ ОборудованиеПодключено Тогда
			
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении оборудования произошла ошибка") + ":
			|""%ОписаниеОшибки%"".";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОборудованиеПодключено; // признак ошибки при подключении оборудования
	
КонецФункции

// Отключает подключенные типы оборудования при закрытии формы
// 
Функция ОтключитьОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	Возврат МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(
	Форма.УникальныйИдентификатор,
	ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Вспомогательные экспортные методы 

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
		|ПараметрыПодключенияПО,
		|ПоследнийСлипЧек,
		|ТаблицаУстройствДМ,
		|ПараметрыДрайверМенеджера",
		Новый Соответствие(),
		Новый Массив(),
		"",
		Новый Структура(),
		Новый Структура());
	КонецЕсли;
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
КонецФункции

// Функция осуществляет выбор устройства из списка доступных
// по типу подключаемого оборудования
// Если устройств более одного, то пользователю отображается
// диалог со списком устройств с предложением выбрать "одно из..."
Функция ВыбратьУстройство(ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен) Экспорт
	
	// Выбор устройства
	Идентификатор = Неопределено;
	
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если НЕ Результат Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	СписокДоступныхУстройств = 
	МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если НЕ ПустаяСтрока(СообщениеНеПодключен) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеНеПодключен);
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(ТекстЗаголовкаВыбора);
			Если Идентификатор <> Неопределено Тогда
				Идентификатор = Идентификатор.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Функция предоставляет диалог выбора рабочего места
// 
Функция ВыбратьРабочееМесто(ОткрыватьФормуВыбораПриПервомОбращении = ЛОЖЬ, ИдентификаторКлиента = "") Экспорт
	
	Результат    = ЛОЖЬ;
	РабочееМесто = "";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрыватьПриПервомОбращении", ОткрыватьФормуВыбораПриПервомОбращении);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ИмяНеобходимойФормы = "Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста";
	Ответ = ОткрытьФормуМодально(ИмяНеобходимойФормы, ПараметрыФормы);
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		РабочееМесто = Ответ.РабочееМесто;
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
		Результат = ИСТИНА;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
// 
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = ИСТИНА;
	
	// не из повтора
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			Параметры.Вставить("СетевойПорт");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			Параметры.СетевойПорт          = МенеджерОборудованияКлиентСервер.ПолучитьСетевойПортПоУмолчанию();
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
			
		ИначеЕсли МассивРабочихМест.Количество() = 1 Тогда
			
			РабочееМесто = МассивРабочихМест[0];
			
		ИначеЕсли МассивРабочихМест.Количество() > 1 Тогда
			Результат = МенеджерОборудованияКлиент.ВыбратьРабочееМесто(ИСТИНА, ВРег(СистемнаяИнформация.ИдентификаторКлиента));
			
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает макет слип чека по наименованию макета
// 
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = ЛОЖЬ) Экспорт
	
	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);
	
КонецФункции

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт
	
	Результат = ЛОЖЬ;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
			
		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера   = ПодключенноеУстройство.ОбработчикДрайвера;
			
			// Вызов метода выполнения команды у обработчика
			Результат = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ОбработчикДрайвера).ВыполнитьКоманду(Команда,
			ВходныеПараметры,
			ВыходныеПараметры,
			ОбъектДрайвера,
			Параметры,
			ПараметрыПодключения);
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устройство не подключено. Перед выполнением операции устройство должно быть подключено.");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
// 
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры,
	Идентификатор, Параметры) Экспорт
	
	Результат = ЛОЖЬ;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	Идентификатор);
	
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		
		времПараметрыПодключения = Новый Структура();
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = "%Наименование%: " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось загрузить драйвер устройства.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте, что драйвер корректно установлен и зарегистрирован в системе.");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"));
			
		Иначе
			
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ДанныеОборудования.ОбработчикДрайвера);
			
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось подключить обработчик драйвера.");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не установлен"));
			Иначе
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(
				Команда,
				ВходныеПараметры,
				ВыходныеПараметры,
				ОбъектДрайвера,
				Параметры,
				времПараметрыПодключения);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
				КонецЕсли;
			КонецЕсли
			
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устройство подключено.") + Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перед выполнением операции устройство должно быть отключено.");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выводить модальную диалоговую форму настройки устройства
// Входные параметры:
//   Устройство   - СправочникСсылка.ПодключаемоеОборудование
Функция ВыполнитьНастройкуОборудования(Идентификатор, НастройкиИзменены = ЛОЖЬ,СообщениеОбОшибке = "") Экспорт
	
	Результат = ИСТИНА;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ОбработчикДрайвера = ДанныеУстройства.ОбработчикДрайвера;
	ИдентификаторУстройства = ДанныеУстройства.ИдентификаторУстройства;
	
	МодульОбработчикаДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ОбработчикДрайвера);
	
	Если МодульОбработчикаДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент Тогда
		// Получить параметры из базы       
		ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
		ПараметрыФормы = Новый Структура("ПараметрыОбработки", ПараметрыОбработки);
		ПараметрыФормы.Вставить("Идентификатор", Идентификатор);    
		
		ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
		Ответ = ОткрытьФормуМодально("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы);   
		
		Если ТипЗнч(Ответ) = Тип("Структура") Тогда
			Для Каждого СтрокаСпискаЗначений Из Ответ Цикл
				// Проверка модифицированности предыдущего значения
				ПредыдущееЗначение = Неопределено;
				
				ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Ключ, ПредыдущееЗначение);
				Если ПредыдущееЗначение <> Неопределено
					И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
					НастройкиИзменены = ИСТИНА; // Есть изменение настроек устройства
				КонецЕсли;
				
				ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Ключ, СтрокаСпискаЗначений.Значение);
			КонецЦикла;
			
			Результат = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
			Если НЕ Результат Тогда
				СообщениеОбОшибке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось сохранить параметры устройства.");
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Получить параметры из базы
		ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
		ПараметрыОбработки.Вставить("Идентификатор", Идентификатор);
		// Получение формы настройки параметров
		ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ОбработчикДрайвера));
		ФормаНастройки = ПолучитьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыОбработки);
		Ответ = ФормаНастройки.ОткрытьМодально();
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ПараметрыФормы = ФормаНастройки.Параметры;
			Для Каждого СтрокаСпискаЗначений Из ПараметрыФормы.ПараметрыНастройки Цикл
				// Проверка модифицированности предыдущего значения
				ПредыдущееЗначение = Неопределено;
				ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Представление, ПредыдущееЗначение);
				Если ПредыдущееЗначение <> Неопределено
					И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
					НастройкиИзменены = ИСТИНА; // Есть изменение настроек устройства
				КонецЕсли;
				
				ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Представление, СтрокаСпискаЗначений.Значение);
			КонецЦикла;
			Результат = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
			Если НЕ Результат Тогда
				СообщениеОбОшибке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось сохранить параметры устройства.");
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Прервать Тогда
			ЗавершитьРаботуСистемы(ИСТИНА, ИСТИНА);
		КонецЕсли;
	КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции

// Сохраняет пользовательские настройки подключаемого оборудования
// 
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
	
	МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);
	
КонецПроцедуры

// Процедура формирует задержку указанной длительности
// 
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
// 
Процедура Пауза(Время) Экспорт
	
	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;
	
КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет пробелами
// 
Функция ПостроитьПоле(Текст, ДлинаПоля) Экспорт
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		ТекстПолный = ТекстПолный + " ";
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

// Функция проверяет доступность каталога по полному ими файла 
// 
Функция ПроверитьДоступностьКаталога(Знач ПолноеИмяФайла, ТекстОшибки) Экспорт
	
	ВремФайл = Новый Файл(ПолноеИмяФайла);
	ВремКаталог = Новый Файл(ВремФайл.Путь);
	Результат = ВремКаталог.Существует();
	
	Если Результат Тогда 
		ТекстОшибки = "";
	Иначе
		ТекстОшибки = НСтр("ru='Каталог ""%Каталог%"" не существует.'") + Символы.ПС;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Каталог%", ВремКаталог.ПолноеИмя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Методы работы с ТСД

// Выгружает таблицу с данными в терминал сбора данных
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур в которых могут присутствовать только нижеуказанные ключи:
// 	 - Штрихкод
// 	 - Номенклатура
// 	 - ЕдиницаИзмерения
// 	 - ХарактеристикаНоменклатуры
// 	 - СерияНоменклатуры
// 	 - Качество
// 	 - Цена
// 	 - Количество
Функция ВыгрузитьДанныеВТСД(УникальныйИдентификатор, ТаблицаВыгрузкиВТСД) Экспорт
	
	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите терминал сбора данных"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Терминал сбора данных не подключен"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				// выгружаем в ТСД
				ВходныеПараметры  = Новый Массив();
				ВыходныеПараметры = Неопределено;
				
				// Преобразуем массив структур в массив списка значений с предопределенным и фиксированным порядком полей:
				// 	0 - Штрихкод
				// 	1 - Номенклатура
				// 	2 - ЕдиницаИзмерения
				// 	3 - ХарактеристикаНоменклатуры
				// 	4 - СерияНоменклатуры
				// 	5 - Качество
				// 	6 - Цена
				// 	7 - Количество
				МассивТСД = Новый Массив;
				Для Каждого текСтрока Из ТаблицаВыгрузкиВТСД Цикл
					
					Если текСтрока.Свойство("Номенклатура") Тогда
						НаименованиеНоменклатуры = текСтрока.Номенклатура;
					ИначеЕсли текСтрока.Свойство("Наименование") Тогда
						НаименованиеНоменклатуры = текСтрока.Наименование;
					Иначе
						НаименованиеНоменклатуры = "";
					КонецЕсли;
					
					СтрокаМассиваТСД = Новый СписокЗначений; // не массив для сохранения совместимости с обработками обслуживания
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод"),						текСтрока.Штрихкод, ""));
					СтрокаМассиваТСД.Добавить(НаименованиеНоменклатуры);
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения"), 			текСтрока.ЕдиницаИзмерения, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры"), 	текСтрока.ХарактеристикаНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры"), 			текСтрока.СерияНоменклатуры, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество"), 					текСтрока.Качество, ""));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена"), 						текСтрока.Цена, 0));
					СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество"), 					текСтрока.Количество, 0));
					МассивТСД.Добавить(СтрокаМассиваТСД);
				КонецЦикла;
				
				ВходныеПараметры.Добавить("Items");
				ВходныеПараметры.Добавить(МассивТСД);
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				"UploadDirectory",
				ВходныеПараметры,
				ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
					|%ОписаниеОшибки%
					|Данные в терминал сбора данных не выгружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%
				|Данные в терминал сбора данных не выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		Иначе
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Загружает в таблицу данные из терминала сбора данных
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТСД 				- массив структур с ключами:
// 	 - Штрихкод
// 	 - Количество
Функция ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД, СворачиватьДанные = ИСТИНА) Экспорт
	
	ТаблицаЗагрузкиИзТСД = Новый Массив();       
	ОписаниеОшибки = "";    
	РезультатОперации = ИСТИНА;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				"DownloadDocument",
				ВходныеПараметры,
				ВыходныеПараметры);
				
				Если Результат Тогда
					
					ТаблицаДанных = Новый Соответствие();
					
					Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
						Штрихкод    = ВыходныеПараметры[0][Индекс * 2 + 0];
						Количество = Число(?(ВыходныеПараметры[0][Индекс * 2 + 1] <> Неопределено, ВыходныеПараметры[0][Индекс * 2 + 1], 0));
						
						Если СворачиватьДанные Тогда
							Данные = ТаблицаДанных.Получить(Штрихкод);
							Если Данные = Неопределено Тогда
								ТаблицаДанных.Вставить(Штрихкод, Количество)
							Иначе
								ТаблицаДанных.Вставить(Штрихкод, Данные + Количество)
							КонецЕсли;
						Иначе
							ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
						КонецЕсли;
						
					КонецЦикла;
					
					Если СворачиватьДанные Тогда
						Для Каждого Данные  Из ТаблицаДанных Цикл
							ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Данные.Ключ, Данные.Значение));
						КонецЦикла
					КонецЕсли;
					
					Оповестить("DataCollectionTerminal", ТаблицаЗагрузкиИзТСД, "ПодключаемоеОборудование");
					
				Иначе
					
					ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
					|%ОписаниеОшибки%
					|Данные из терминала сбора данных не загружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%
				|Данные из терминала сбора данных не загружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		Иначе
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Очищает данные в терминале сбора данных
// УникальныйИдентификатор - идентификатор формы
Функция ОчиститьДанныеВТСД(УникальныйИдентификатор) Экспорт
	
	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				"ClearTable",
				ВходныеПараметры,
				ВыходныеПараметры);
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в терминале сбора данных произошла ошибка.
					|%ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%
				|Данные в терминал сбора данных не выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // /
// Методы работы с весами

// Получает вес с электронных весов
// УникальныйИдентификатор - идентификатор формы
Функция ПолучитьВесСЭлектронныхВесов(УникальныйИдентификатор, Вес) Экспорт
	
	Вес = 0;
	ОписаниеОшибки = "";
	РезультатОперации = ИСТИНА;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ЭлектронныеВесы", НСтр("ru='Выберите электронные весы'"), "");
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			// Подключаем Весы
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда  
				
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				// Пытаемся получить вес
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
				ИдентификаторУстройства,
				"ПолучитьВес",
				ВходныеПараметры,
				ВыходныеПараметры);    
				
				Если Результат Тогда
					Вес = ВыходныеПараметры[0]; // Вес получен
				Иначе
					ТекстСообщения = НСтр("ru = 'При использовании электронных весов произошла ошибка.
					|Дополнительное описание: |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(
					ТекстСообщения,
					"%ДополнительноеОписание%",
					ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					РезультатОперации = ЛОЖЬ;
				КонецЕсли;
				
				// Отключаем Весы
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				// Ошибка подключения весов
				ТекстСообщения = НСтр("ru = 'При подключении электронных весов произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				ОписаниеОшибки);
				
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
				РезультатОперации = ЛОЖЬ;
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru='Электронные весы не подключены.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			РезультатОперации = ЛОЖЬ;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РезультатОперации = ЛОЖЬ;
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Методы работы с оборудованием Offline

// Выгружает таблицу с данными в весы с печатью этикеток
// УникальныйИдентификатор 	- идентификатор формы
// ТаблицаТоваров			- массив структур в которых могут присутствовать только нижеуказанные ключи:
// PLU , число
// Код, число
// Штрихкод, строка
// Номенклатура, строка
// НаименованиеПолное, строка
// Цена, число
// ОписаниеТовара, строка
Процедура ВыгрузитьДанныеВВесыСПечатьюЭтикеток(УникальныйИдентификатор, ТаблицаВыгрузкиТоваров) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для выгрузки!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ВесыСПечатьюЭтикеток",
		НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда
				
				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в весы с печатью этикеток...'")); 
				
				ВходныеПараметры  = Новый Массив;
				
				МассивТоваров = Новый Массив;
				Для Каждого СтрокаТЧ Из ТаблицаВыгрузкиТоваров Цикл
					ЭлементМассива = Новый Структура("PLU, Код, Штрихкод, Наименование, НаименованиеПолное, Цена", 0, 0, "", "" , 0);
					ЭлементМассива.PLU = СтрокаТЧ.PLU;
					ЭлементМассива.Код = СтрокаТЧ.Код;
					ЭлементМассива.Наименование       = Строка(СтрокаТЧ.Номенклатура);
					ЭлементМассива.НаименованиеПолное = Строка(СтрокаТЧ.НаименованиеПолное);
					ЭлементМассива.Цена = СтрокаТЧ.Цена;
					МассивТоваров.Добавить(ЭлементМассива);
				КонецЦикла;
				
				ВходныеПараметры.Добавить(МассивТоваров);
				ВходныеПараметры.Добавить(ЛОЖЬ); // Частичная выгрузка.
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
					|%ОписаниеОшибки%
					|Данные не выгружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно выгружены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%
				|Данные не выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Очищает товары в весах с печатью этикеток
// 
Процедура ОчиститьТоварыВВесахСПечатьюЭтикеток(УникальныйИдентификатор) Экспорт
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ВесыСПечатьюЭтикеток",
		НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда
				
				Состояние(НСтр("ru = 'Выполняется очистка товаров в весах с печатью этикеток...'"));
				
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
					|%ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно очищены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу с данными в ККМ Offline
// УникальныйИдентификатор - идентификатор формы
// ТаблицаТоваров - массив структур в которых могут присутствовать только нижеуказанные ключи:
// Код, строка
// Штрихкод, строка или массив строк (если для одной номенклатурной позиции имеется несколько штрихкодов)
// Наименование, строка
// НаименованиеПолное, строка
// ЕдиницаИзмерения, строка
// Цена, число
// Остаток, число
// 
Процедура ВыгрузитьДанныеВККМOffline(УникальныйИдентификатор, ТаблицаВыгрузкиТоваров) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для выгрузки!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда
				
				Состояние(НСтр("ru = 'Выполняется выгрузка товаров в ККМOffline...'")); 
				
				ВходныеПараметры  = Новый Массив;
				МассивТоваров = Новый Массив;
				Для Каждого СтрокаТЧ Из ТаблицаВыгрузкиТоваров Цикл
					ЭлементМассива = Новый Структура("Код, Артикул, Штрихкод, Наименование, НаименованиеПолное, ЕдиницаИзмерения, Цена, Остаток, ВесовойТовар");
					ЭлементМассива.Код                = СтрокаТЧ.Код;
					ЭлементМассива.Артикул            = ?(СтрокаТЧ.Свойство("Артикул"), СтрокаТЧ.Артикул, "");
					ЭлементМассива.Штрихкод           = Строка(СтрокаТЧ.Штрихкод);
					ЭлементМассива.Наименование       = СтрокаТЧ.Наименование;
					ЭлементМассива.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
					ЭлементМассива.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмерения;
					ЭлементМассива.Цена               = СтрокаТЧ.Цена;
					ЭлементМассива.Остаток            = ?(СтрокаТЧ.Свойство("Остаток"), СтрокаТЧ.Остаток, 0);
					ЭлементМассива.ВесовойТовар       = ?(СтрокаТЧ.Свойство("ВесовойТовар"), СтрокаТЧ.ВесовойТовар, ЛОЖЬ);
					МассивТоваров.Добавить(ЭлементМассива);
				КонецЦикла;
				
				ВходныеПараметры.Добавить(МассивТоваров);
				ВходныеПараметры.Добавить(ЛОЖЬ); // Частичная выгрузка
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
					|%ОписаниеОшибки%
					|Данные не выгружены.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно выгружены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%
				|Данные не выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Очищает товары в ККМ Offline
// 
Процедура ОчиститьТоварыВККМOffline(УникальныйИдентификатор) Экспорт
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда
				
				Состояние(НСтр("ru = 'Выполняется очистка товаров в ККМ Offline...'"));
				
				ВходныеПараметры  = Неопределено;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
					|%ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'Товары успешно очищены!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Функция загружает отчет о розничных продажах из ККМ Offline.
// 
Функция ЗагрузитьОтчетОРозничныхПродажахККМOffline(УникальныйИдентификатор, ТаблицаЗагрузкиТоваров) Экспорт
	
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Подключение устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ККМOffline",
		НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены'"));
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			ИдентификаторУстройства, ОписаниеОшибки);
			Если Результат Тогда
				
				Состояние(НСтр("ru = 'Выполняется загрузка товаров из ККМ Offline...'"));
				
				ВходныеПараметры  = Новый Массив;
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ЗагрузитьОтчет", ВходныеПараметры, ВыходныеПараметры);
				
				Если НЕ Результат Тогда
					ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
					|%ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТаблицаЗагрузкиТоваров = ВыходныеПараметры[0];
					ТекстСообщения = НСтр("ru = 'Загрузка товаров успешно завершена.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				ИдентификаторУстройства);
				
			Иначе
				ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
				|%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Работа с ридером магнитных карт 

// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
// 	- Суффикс
// 	- Префикс
// 	- РазделительБлоков
// 	- ДлинаКода
// На выходе:
// ИСТИНА - код соответствует шаблону
// Сообщение пользователю что именно не соответствует
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона) Экспорт
	ОднаДорожкаПрисутствует = ЛОЖЬ;
	ПроверкаПройдена = ИСТИНА;
	
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			ОднаДорожкаПрисутствует = ИСТИНА;
			текСтрока = ДанныеДорожек[Итератор - 1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс" + Строка(Итератор)])) <> ДанныеШаблона["Суффикс" + Строка(Итератор)] Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
				+ ". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.'"));
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			
			Если Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс" + Строка(Итератор)])) <> ДанныеШаблона["Префикс" + Строка(Итератор)] Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
				+ ". " + НСтр("ru='Префикс карты не соответствует префиксу шаблона.'"));
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			
			Если Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0 Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
				+ ". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.'"));
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			
			Если СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
				+ ". " + НСтр("ru='Длина кода карты не соответствует длине кода шаблона.'"));
				ПроверкаПройдена = ЛОЖЬ;
			КонецЕсли;
			
			Если НЕ ПроверкаПройдена Тогда
				Возврат ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОднаДорожкаПрисутствует Тогда 
		Возврат ИСТИНА;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='В шаблоне не указано ни одной доступной дорожки.'"));
		Возврат ЛОЖЬ;
	КонецЕсли;
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Обработка событий от устройств 

// Производит обработку данных события, полученных от клиента
// 
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = ИСТИНА;
	
	// Поиск обработчика события
	Для Каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
			Или (ПустаяСтрока(Подключение.ИсточникСобытия)
			И Подключение.ИменаСобытий <> Неопределено) Тогда
			
			// Ищем среди подключенного оборудования устройство с полученным событием
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
					|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
					
					Продолжить;
				КонецЕсли;
				
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;
				
				// Обрабатываем сообщение
				Результат = ВыполнитьКоманду(Подключение.Ссылка,
				"ОбработатьСобытие",
				ВходныеПараметры,
				ВыходныеПараметры);
				Если Результат Тогда
					// Оповещаем 
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;
				
				// Оповещаем драйвер о завершении обработки события
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(Результат);
				ВыполнитьКоманду(Подключение.Ссылка,
				"ЗавершитьОбработкуСобытия",
				ВходныеПараметры,
				ВыходныеПараметры);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Вспомогательные методы 

// Поиск по идентификатору подключенного ранее устройства
// 
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор)
	
	ПодключенноеУстройство = Неопределено;
	
	Для Каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Выполняет подготовку к переустановке компоненты: Спрашивает пользователя, устанавливает флаг ТребуетсяПереустановка.
// Процедура вызывается из модуля формы настройки оборудования ПриОткрытии
Процедура ПодготовкаКПереустановкеКомпоненты(ПодключаемоеОборудованиеСсылка, ВерсияТекущая, Отказ) Экспорт
	
	#Если ВебКлиент Тогда
		ВерсияИзКонфигурации = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(МенеджерОборудованияВызовСервера.ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка)).ПолучитьВерсиюВнешнейКомпоненты();
		ТребуетсяПереустановка = МенеджерОборудованияВызовСервера.ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка);
		Если НЕ ТребуетсяПереустановка
			И ЗначениеЗаполнено(ВерсияИзКонфигурации)
			И ЗначениеЗаполнено(ВерсияТекущая)
			И ВерсияИзКонфигурации <> ВерсияТекущая Тогда
			Ответ = Вопрос(НСтр("ru='На вашем компьютере установлена компонента версии'") + Символы.НПП + ВерсияТекущая + Символы.ПС
			+НСтр("ru='В конфигурации доступна версия компоненты'") + Символы.НПП +  ВерсияИзКонфигурации + Символы.ПС + Символы.ПС
			+НСтр("ru='Обновить компоненту из конфигурации? (требуется перезапустить 1С:Предприятие)'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Обновление компоненты'"));
			Если Ответ = КодВозвратаДиалога.Да Тогда
				МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, ИСТИНА);
				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

Функция ПреобразоватьСписокСтрокойВМассив(Источник)
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник	   		   = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры общих команд

// Открытие формы списка рабочих мест
// 
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса
// 
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ОткрытьФормуВыбораРМПриПервомОбращении = ЛОЖЬ;
	СписокНастроек = МенеджерОборудованияКлиентПовтИсп.ПолучитьПользовательскиеНастройкиПодключаемогоОборудования();
	Для Каждого Параметр Из СписокНастроек Цикл
		Если Параметр.Ключ = "ОткрытьФормуВыбораРМПриПервомОбращении" Тогда
			ОткрытьФормуВыбораРМПриПервомОбращении = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерОборудованияКлиент.ВыбратьРабочееМесто(ОткрытьФормуВыбораРМПриПервомОбращении);
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования
// 
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Работа с драйвером 

// Проверяет установлен ли драйвер.
// 
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда
	// Устанавливает драйвер из дистрибутива поставщика
	// 
	Процедура УстановитьДрайверИзДистрибутива(Знач ИмяМакета, Знач ИмяФайла) Экспорт
		
		ВременныйКаталог = КаталогВременныхФайлов();
		
		// Получение макета с сервера
		СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
		
		Расширение = Прав(ВРег(ИмяФайла), 4);
		
//		Если НЕ Расширение = ".EXE" Тогда
			// Распаковка архива дистрибутива во временный каталог
			Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", ЛОЖЬ);
			ФайлМакета = Новый ЧтениеZipФайла();
			ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");
			ВременныйКаталогВнутр = ВременныйКаталог + "Model\";
			
			Для Каждого ЭлементМакета Из ФайлМакета.Элементы Цикл
				Расширение = Прав(ВРег(ЭлементМакета.Имя), 4);
				
				Если Расширение = ".ZIP"
					ИЛИ Расширение = ".EXE" Тогда
					
					СоздатьКаталог(ВременныйКаталог);
					ФайлМакета.Извлечь(ЭлементМакета, ВременныйКаталогВнутр);
					
					Если Расширение = Врег(ИмяФайла + ".ZIP") Тогда
						// Распаковка дистрибутива
						ФайлАрхива = Новый ЧтениеZipФайла();
						ФайлАрхива.Открыть(ВременныйКаталогВнутр + ЭлементМакета.Имя);
						ФайлАрхива.ИзвлечьВсе(ВременныйКаталогВнутр);	
					КонецЕсли;
					
					// Запуск инсталлятора
					ЗапуститьПриложение(ВременныйКаталогВнутр + ЭлементМакета.Имя, ВременныйКаталогВнутр, ИСТИНА);
					
					// Удаление всех временных файлов после работы
				КонецЕсли;
			КонецЦикла;
		//Иначе
		//	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Setup.exe", ЛОЖЬ);
		//	ЗапуститьПриложение(ВременныйКаталог + "Setup.exe", ВременныйКаталог, ИСТИНА);
		//	
		//КонецЕсли;
		
		Попытка
			УдалитьФайлы(ВременныйКаталогВнутр);
			УдалитьФайлы(ВременныйКаталог + "Model.zip");
		Исключение
		КонецПопытки;
		
	КонецПроцедуры
#КонецЕсли

// Получение объекта драйвера.
// 
Функция ПолучитьОбъектДрайвера(ДрайверУстройства) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДрайверУстройства Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			// Сканеры штрихкода/Считыватели магнитных карт
			
			Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") 
				Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода", "Сканер");
					ОбъектДрайвера = Новый ("AddIn.Сканер.Scanner");
				#Иначе
					ProgID = "AddIn.Scanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.ScancodeScanner";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода")
				Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scaner45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонСканерШтрихкода", "Гексагон");
				ОбъектДрайвера = Новый ("AddIn.Гексагон.ProtonScanner");
				
				// Конец Сканеры штрихкода/Считыватели магнитных карт
				
				// Фискальные регистраторы
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1CФискальныйРегистратор", "Эмулятор");
				ОбъектДрайвера = Новый ("AddIn.Эмулятор.EmulatorFP1C");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк", "ККСФРСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСФРСПАРК.SparkTF");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.ATOL_KKM_1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы", "АтолУниверсальный");
				ОбъектДрайвера = Новый ("AddIn.АтолУниверсальный.ATOL_KKM_1C82");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы8X", "Атол8X");
				ОбъектДрайвера = Новый ("AddIn.Атол8X.ATOL_KKM_1C82");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.KSBFR1K1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.DrvFR1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1СРарусФискальныеРегистраторыФеликс", "Феликс");
				ОбъектДрайвера = Новый ("AddIn.Феликс.fr_feliksRMK1c82");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.OrionFR_1C8";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
				// Конец Фискальные регистраторы
				
				// Дисплеи покупателя
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Line45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.1CDSPPromag";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя")  Тогда
				#Если ВебКлиент Тогда
					
				#Иначе
					ProgID = "AddIn.LineDisplay";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя", "ККСДПСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСДПСПАРК.VFCD220E");
				
				// Конец Дисплеи покупателя
				
				// Терминалы сбора данных
				
			ИначеЕсли (ДрайверУстройства) = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.PDX45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.CipherLab";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных")  Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.iPOSoft_DT";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных")  Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Terminals";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверКлеверенсТСД", "КлеверенсТСД");
				ОбъектДрайвера = Новый ("AddIn.КлеверенсТСД.Cleverence.TO_TSD");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонТерминалыСбораДанных") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонТСД", "ГексагонТСД");
				ОбъектДрайвера = Новый ("AddIn.ГексагонТСД.ProtonTSD");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанныхMobileLogistics") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛТСДMobileLogistics", "MobileLogistics");
				ОбъектДрайвера = Новый ("AddIn.MobileLogistics.PDX1C_Int");
				
				// Конец Терминалы сбора данных
				
				// Эквайринговые терминалы
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ПодключитьВнешнююКомпоненту("AddIn.SBRFCOMObject");
					ОбъектДрайвера = Новый("AddIn.SBRFCOMExtension");
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы", "ИНПАСЭТ");
				ОбъектДрайвера = Новый("AddIn.ИНПАСЭТ.AddInPulsarDriver1C");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалыSmart", "ИНПАСSmart");
				ОбъектДрайвера = Новый("AddIn.ИНПАСSmart.a_inpas1c82");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофтКейсЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофтКейсЭквайринговыеТерминалы", "СофтКейс");
				ОбъектДрайвера = Новый("AddIn.СофтКейс.SKAM");
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOS32ЭквайринговыеТерминалы") Тогда
				ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверTRPOSЭквайринговыеТерминалы", "TRPOS32");
				ОбъектДрайвера = Новый ("AddIn.TRPOS32.a_trpos1c82");
				
				// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
				// 	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX", "IngenicoECR");
				// 	ОбъектДрайвера = Новый ("AddIn.IngenicoECR.a_ingenicopb1c82");
				
				// Конец Эквайринговые терминалы
				
				// Электронные весы
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
				// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
				// 	ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы", "CASЭлектронныеВесы");
				// 	ОбъектДрайвера = Новый ("AddIn.CASЭлектронныеВесы.CasCentreSimpleScale");
				
				// Конец Электронные весы
				
				// Весы с печатью этикеток
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикACOMВесыСПечатьюЭтикеток") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "CL5000J.WrapperFor1C82";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый ("AddIn.CL5000JFor1C82");
				#КонецЕсли
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
				#Если ВебКлиент Тогда
				#Иначе
					ProgID = "AddIn.DrvLP";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли
				
				// Конец Весы с печатью этикеток
				
				// ККМ offline
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККМOffline") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
			ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККМOffline") Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
				// Конец ККМ offline
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли; 
	
	Если ОбъектДрайвера <> Неопределено Тогда
		глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДрайверУстройства, ОбъектДрайвера);
		ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДрайверУстройства];
	КонецЕсли;
	
	Возврат ОбъектДрайвера;
	
КонецФункции

// Установка из макета драйвера устройства.
// 
Процедура УстановитьДрайвер(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ДрайверУстройства = ДанныеОборудования.ОбработчикДрайвера;
	
	Попытка
		
		// Сканеры штрихкода/Считыватели магнитных карт
		
		Если ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")   
			Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт") Тогда 
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода");
			#Иначе
				УстановитьДрайверИзДистрибутива("Драйвер1ССканерШтрихкодаExe", "ScanOPOS.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодСканерШтрихкода", "ScancodeScanOpos_8.0.8.19.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихКода") Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛОбщий");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "atol_basic.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонСканерШтрихкода");
			
			// Конец Сканеры штрихкода/Считыватели магнитных карт
			
			// Фискальные регистраторы
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1CФискальныйРегистратор");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторыСпарк") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСФРСпарк");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛФискальныеРегистраторы8X");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТКасбиФР01К") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверВерсияТКасбиФР01К", "ksb01frk.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныйРегистраторФР01К") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверОРИОНФР01К", "ORION-FR01K_v.1.2.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМФискальныеРегистраторы", "DrvFR_4.9_152.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1СРарусФискальныеРегистраторыФеликс");
			
			// Конец Фискальные регистраторы
			
			// Дисплеи покупателя
			
		ИначеЕсли ДрайверУстройства =  ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодДисплеиПокупателя", "1CDSPPromag_2.1.0.5.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМДисплеиПокупателя", "LightPOSDrv_1.2.3.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверККСДисплеиПокупателя");
			
			// Конец Дисплеи покупателя
			
			// Терминалы сбора данных                                           `
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканкодТСДCipherLab", "CPT_1C_6.0.3.0.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверСканситиТСДCipherLab", "CitySoftWarehouseDOS.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных") Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМТСД", "setup.exe");
			#КонецЕсли
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверКлеверенсТСД");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонТерминалыСбораДанных") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверГексагонТСД");
			
		ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанныхMobileLogistics") Тогда
			УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверАТОЛТСДMobileLogistics");
			
			// Конец Терминалы сбора данных
			
			// Электронные весы
			
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы") Тогда
			// 	#Если ВебКлиент Тогда
			// 	#Иначе			
			// 		УстановитьДрайверИзДистрибутива("ДрайверШтрихМЭлектронныеВесы", "setup.exe");
			// 	#КонецЕсли	
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверCASЭлектронныеВесы");
			
			// Конец Электронные весы 
			
			// Весы с печатью этикеток
			
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикScaleCASВесыСПечатьюЭтикеток") Тогда
			// 	#Если ВебКлиент Тогда
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверScaleCASВесыСПечатьюЭтикеток", "setup.exe");
			// 	#КонецЕсли
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток") Тогда
			// 	#Если ВебКлиент Тогда
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверШтрихМВесыCПечатьюЭтикеток", "setup.exe");
			// 	#КонецЕсли
			
			// Конец Весы с печатью этикеток
			
			// Эквайринговые терминалы        
			
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы") Тогда
			// 	#Если ВебКлиент Тогда
			// 	#Иначе
			// 		УстановитьДрайверИзДистрибутива("ДрайверСБРФЭквайринговыеТерминалы", "setup.exe");
			// 	#КонецЕсли
			// 
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалы") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалы");
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверИНПАСЭквайринговыеТерминалыSmart");
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСофтКейсЭквайринговыеТерминалы") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверСофтКейсЭквайринговыеТерминалы");
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOS32ЭквайринговыеТерминалы") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверTRPOSЭквайринговыеТерминалы");
			// 	
			// ИначеЕсли ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIngenicoECRCommXПриватбанк") Тогда
			// 	УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверПриватбанкIngenicoECRCommX");
			
			// Конец Эквайринговые терминалы
			
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при установке") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры
