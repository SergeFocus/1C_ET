//sza140124-1449 
//sza131211-1456 SZA: 

&НаСервере
Функция   ВывестиМакетЧтоНового(ТабДок) Экспорт
	
	если РегистрационныйКод() = "ah" тогда
		Возврат Неопределено;
	КонецЕсли;
		
	МакетЧтоНового = ПолучитьОбщийМакет("ЧтоНового");
	
	ВерсияПриИнсталляции = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");
	Попытка
		ЧислоВерсияПриИнсталляции = Число(Лев(ВерсияПриИнсталляции, 6));
	Исключение
		ЧислоВерсияПриИнсталляции = 0;
	КонецПопытки;
	МассивНеобходимыхОбластей = Новый ТаблицаЗначений;
	МассивНеобходимыхОбластей.Колонки.Добавить("ИмяОбласти");
	
	Для Каждого Область Из МакетЧтоНового.Области Цикл
		
		ИмяОбласти = СтрЗаменить(Область.Имя, "Ш", "");
		Если НЕ ИмяОбласти = "" Тогда
			
			попытка
				НомерОбласти = Число(ИмяОбласти);
				Если НомерОбласти > ЧислоВерсияПриИнсталляции Тогда
					СтрокаТаблицы = МассивНеобходимыхОбластей.Добавить();
					СтрокаТаблицы.ИмяОбласти = Область.Имя;
				КонецЕсли;
			исключение
			конецпопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МассивНеобходимыхОбластей.Количество() = 0 Тогда
		
		Ш = МакетЧтоНового.ПолучитьОбласть("Ш");	
		ТабДок.Вывести(Ш);
		
		МассивНеобходимыхОбластей.Сортировать("ИмяОбласти УБЫВ");
		Для Каждого ОбластьМассива Из МассивНеобходимыхОбластей Цикл
			Ш = МакетЧтоНового.ПолучитьОбласть(ОбластьМассива.ИмяОбласти);	
			ТабДок.Вывести(Ш);                   	               	
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
функция   ЭтоНоваяВерсия() Экспорт
	
	ВерсияКонфигурации 	  = Лев(ВРЕГ(Сокрлп(Метаданные.Версия)), 6);
	ВерсияБыла 			  = Лев(ВРЕГ(сокрлп(Константы.ВерсияПрограммы.Получить())), 6);
	
	Возврат Не ВерсияБыла = ВерсияКонфигурации;
	
КонецФункции

&НаСервере
функция   ОбновиласьВерсия() Экспорт
	
	ВерсияКонфигурации 		= Лев(ВРЕГ(Сокрлп(Метаданные.Версия)), 6);
	ВерсияБыла 				= Лев(ВРЕГ(сокрлп(Константы.ВерсияПрограммы.Получить())), 6);
	ПисьмаНеБыло			= Истина;
	РегистрационныйКод		= РегистрационныйКод();
	
	ВерсияПриИнсталляции 	= Лев(ВРЕГ(Сокрлп(Константы.ВерсияПриИнсталляции.Получить())), 6);
	если НЕ ЗначениеЗаполнено(ВерсияПриИнсталляции) Тогда		
		Константы.ВерсияПриИнсталляции.Установить(ВерсияКонфигурации);		
	КонецЕсли;
	
	Если ВерсияБыла = ВерсияКонфигурации тогда		
		Возврат ложь;
		
	иначе		
		ОбщийМодульСерверПривилегия.ОбновитьДанныеПриОбновленииКонфигурации(ВерсияБыла, ВерсияКонфигурации);
		
		Если ПисьмаНеБыло 
			и НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") тогда
			
			СтруктураПисьма = новый Структура;
			СтруктураПисьма.Вставить("ОтКого", "АвтоОБНОВЛЕНИЕ");
			СтруктураПисьма.Вставить("ТемаСообщения", "upver");
			СтруктураПисьма.Вставить("ТекстСообщения", "Было: " + ВерсияБыла);
			СтруктураПисьма.Вставить("РегистрационныйКод", РегистрационныйКод);
			
			ОбщийМодульСервисСервер.письмоавтору(СтруктураПисьма);	
		КонецЕсли;
		
		константы.ВерсияПрограммы.Установить(ВерсияКонфигурации);
		
		Возврат Истина;
		
	Конецесли;	
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля() Экспорт
	
	ПараметрыСеанса.ТекущийПользователь = ОпределитьПользователя();
	
	ИспользоватьЖурналированиеСобытий 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЖурналированиеСобытий") ;
	
	ПараметрыСеанса.МногоФункциональныйФлаг = Ложь;
	ПараметрыСеанса.ИспользоватьЖурналированиеСобытий 		= ИспользоватьЖурналированиеСобытий;
	ПараметрыСеанса.ВестиЗаписьВЖурналВсехОбычныхДействий 	= ИспользоватьЖурналированиеСобытий И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиЗаписьВЖурналВсехОбычныхДействийПользователей") ;
	ТекущийЯзыкИнтерфейсаПрограммы 							= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса") ;
	
	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();
	если не ДанныеТекущегоПользователя.Язык = Неопределено тогда
		
		ДанныеТекущегоПользователяЯзыкИмя = ДанныеТекущегоПользователя.Язык.Имя;
		если ДанныеТекущегоПользователяЯзыкИмя = "Русский" тогда
			ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Русский ;
			
		иначе			
			ТекущийЯзыкИнтерфейсаПрограммы = Неопределено;
			
			если ДанныеТекущегоПользователяЯзыкИмя = "Українська" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Український ;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Белорусский" тогда		
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Белорусский ;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "English" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.English ;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Румынский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Румынский;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Китайский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Китайский;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Немецкий" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Немецкий;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Тайский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Тайский;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Польский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Польский;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Болгарский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Болгарский;
			иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Казахский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.казахский;	
			КонецЕсли;			
			
			если НЕ ТекущийЯзыкИнтерфейсаПрограммы = Неопределено ТОгда				
				Если ОбщийМодульТекстСервер.НетНиОднойЗаписиЭтогоЯзыка(ТекущийЯзыкИнтерфейсаПрограммы) тогда				
					ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ТекущийЯзыкИнтерфейсаПрограммы.Код, ТекущийЯзыкИнтерфейсаПрограммы);		
				КонецЕсли;
				
			Иначе
				ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса") ;
			КонецЕсли;
		конецесли;
		
	иначе
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса") ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= ТекущийЯзыкИнтерфейсаПрограммы;
	иначе
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= Справочники.Языки.Русский ;
	КонецЕсли;
	
	ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
	Параметрысеанса.ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСИКонтрагентами", Истина) ;
	ИспользоватьСкидки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки") ;
	ПараметрыСеанса.ИспользоватьСкидкиПС 										= ИспользоватьСкидки;
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов 		= ИспользоватьСкидки и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов", Истина);
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры 	= ИспользоватьСкидки и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры", Истина);
	ПараметрыСеанса.ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар 		= ИспользоватьСкидки и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар");
	ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС 							= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен", Истина);
	ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже");
	ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию 						= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
	ПараметрыСеанса.РекомендуемыйМинимальныйОстатокТовара 						= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РекомендуемыйМинимальныйОстатокТовара");
	ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара", Истина);
	ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп", Истина) ;
	
	Параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц", Истина);
	ПараметрыСеанса.ВестиУчетВалютВСеансе 				= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют", Истина) ;
	ЗапретитьИзмененияВПрошломПериоде 					= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде", Истина);
	ПараметрыСеанса.ДействуетЗапретИзмененийПрошлого 	= (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты) ИЛИ (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока);
	ПараметрыСеанса.ИспользованиеНаборовТоваровПС 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров", Истина) ;
	
	Попытка 
		ПараметрыСеанса.РабочаяДата = ПараметрыСеанса.РабочаяДата;	
	Исключение 	
		ПараметрыСеанса.РабочаяДата = '00010101000000';	
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
	Исключение 	
		ПараметрыСеанса.НеВыводитьСообщений = Ложь;		
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеМожетМенятьЦены 	= ОбщийМодульСерверПривилегия.ЕстьПользователи() И РольДоступна("Реализация") И Не РольДоступна("ПолныеПрава") И Не РольДоступна("РеализацияИПриемТовара") И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");
	Исключение 	
	КонецПопытки;
	
	ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры 		= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьСерийныйУчетНоменклатуры", Истина) ;
	
КонецПроцедуры

процедура письмоавтору(Знач СтруктураПисьма = Неопределено) Экспорт
	
	если не СтруктураПисьма = Неопределено
		или не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") тогда
		
		ВыводитьСообщениеОбшибке = Ложь;		
		Профиль = Новый ИнтернетПочтовыйПрофиль;  Профиль.АдресСервераPOP3 = "pop.mail.ru"; Профиль.АдресСервераSMTP = "smtp.mail.ru";Профиль.ВремяОжидания = 5;Профиль.Пароль= "imexinfo";Профиль.Пользователь= "imexconsol";Профиль.ПортPOP3= 110;Профиль.ПортSMTP= 25;Профиль.ПарольSMTP= "imexinfo";Профиль.ПользовательSMTP = "imexconsol@mail.ru";
		
		ИнтернетПочта = Новый ИнтернетПочта;
		если не СтруктураПисьма = Неопределено тогда
			СтруктураПисьма.Свойство("Вручную", ВыводитьСообщениеОбшибке);	
		КонецЕсли;
		Если ВыводитьСообщениеОбшибке = Неопределено Тогда
			ВыводитьСообщениеОбшибке = Ложь;
		КонецЕсли;
		
		Попытка
			ИнтернетПочта.Подключиться(Профиль);
			текстписьма 	= "";
			ТемаСообщения 	= "";
			
			Если не СтруктураПисьма = Неопределено Тогда
				ТемаСообщения = СтруктураПисьма.ТемаСообщения;
				
				текстписьма = текстписьма + СтруктураПисьма.Откого + символы.пс;
				текстписьма = текстписьма + СтруктураПисьма.РегистрационныйКод + символы.пс;				
				текстписьма = текстписьма + ТемаСообщения + символы.пс;
				текстписьма = текстписьма + СтруктураПисьма.ТекстСообщения + символы.пс;
				текстписьма = текстписьма + символы.пс;
				
			КонецЕсли;			
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
			//письмо.Вложения.Добавить();
			письмо.ИмяОтправителя = "imexconsol@mail.ru"; письмо.Отправитель = "imexconsol@mail.ru";                                 письмо.Получатели.Добавить("sza@ukr.net");
			
			СисИнфо = новый СистемнаяИнформация;
			ИмяКомпьютера = "";
			ТекущийКодЛокализации = "";
			#Если Не ВебКлиент Тогда
				ИмяКомпьютера = ИмяКомпьютера(); 
				ТекущийКодЛокализации = ТекущийКодЛокализации();
			#КонецЕсли      
			СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
			ТекущийРежимЗапуска = Сокрлп(ТекущийРежимЗапуска());
			
			//Письмо автору не содержит какой либо конфеденциональной информации
			//здесь время, тип винды, версия платформы 1С, ип 1С-клиента, версия собственно конфигурации
			письмо.Тема = "ЭТ " + Метаданные.Версия + " " + ТемаСообщения;
			текстписьма = текстписьма + "_____" + Символы.ПС;
			текстписьма = текстписьма + "Name:" + символы.ВТаб + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати") + символы.пс;
			текстписьма = текстписьма + "Data:" + символы.ВТаб + ТекущаяДата() + Символы.ПС;
			текстписьма = текстписьма + "clc :" + символы.ВТаб + ПолучитьЧасовойПоясИнформационнойБазы() + символы.пс;			
			текстписьма = текстписьма + "ПК  :" + символы.ВТаб + ИмяКомпьютера + символы.пс;			
			текстписьма = текстписьма + "OS  :" + символы.ВТаб + СисИнфо.ВерсияОС + + " " + символы.пс;
			текстписьма = текстписьма + "WnwS:" + символы.ВТаб + СисИнфо.ТипПлатформы + символы.пс;
			текстписьма = текстписьма + "Proc:" + символы.ВТаб + СисИнфо.Процессор + Символы.ПС;			
			текстписьма = текстписьма + "RAM :" + символы.ВТаб + СисИнфо.ОперативнаяПамять + символы.пс;
			текстписьма = текстписьма + "1Сv :" + символы.ВТаб + СисИнфо.ВерсияПриложения + символы.пс;
			текстписьма = текстписьма + "brws:" + символы.ВТаб + СисИнфо.ИнформацияПрограммыПросмотра + символы.пс;
			текстписьма = текстписьма + "loc :" + символы.ВТаб + ТекущийКодЛокализации + символы.пс;
			текстписьма = текстписьма + "base:" + символы.ВТаб + СтрокаСоединенияИнформационнойБазы + символы.пс;
			текстписьма = текстписьма + "reg :" + символы.ВТаб + ТекущийРежимЗапуска + символы.пс;
			текстписьма = текстписьма + "Закончена настр: " + символы.ВТаб + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") + Символы.ПС ;
			текстписьма = текстписьма + "Заголовок окна : " + символы.ВТаб + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы") + Символы.ПС ;
			текстписьма = текстписьма + "Язык интерфейса: " + символы.ВТаб + ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы + Символы.ПС ;
			текстписьма = текстписьма + "Число объектов : " + символы.ВТаб + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЧислоОбъектов") + Символы.ПС ;
			
			текстписьма = текстписьма + Символы.ПС + "--" + Символы.ПС + письмо.Тема;
			ЭлектроннаяПочтаПодпись = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись") ;
			Если ЗначениеЗаполнено(ЭлектроннаяПочтаПодпись) Тогда
				текстписьма = текстписьма + Символы.ПС + ЭлектроннаяПочтаПодпись;
			КонецЕсли;
			
			ЭлектроннаяПочтаОтправитель = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель") ;
			Если ЗначениеЗаполнено(ЭлектроннаяПочтаОтправитель) Тогда
				текстписьма = текстписьма + Символы.ПС + ЭлектроннаяПочтаОтправитель;
			КонецЕсли;
			
			письмо.Тексты.Добавить(текстписьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
			
			интернетПочта.Послать(письмо);
			интернетПочта.Отключиться();
			
			Если ВыводитьСообщениеОбшибке 
				и ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено."), , );
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено.");
				//Сообщение.Сообщить();
			КонецЕсли;
			
		Исключение
			Если ВыводитьСообщениеОбшибке 
				и ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма:") + " " + ОписаниеОшибки(), , );
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма:") + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();
			КонецЕсли;
			
		КонецПопытки; 
		интернетПочта = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПисьмоКонтрагенту(Знач Контрагент = Неопределено, Знач Результат = Неопределено, Знач ТекстСопровождения, Знач НаименованиеДокумента, Знач ВозможноЕмейл = "") Экспорт
	
	если НЕ найти(ВозможноЕмейл, "@") = 0 Тогда
		Адрес = ВозможноЕмейл;
	Иначеесли Контрагент = Неопределено Тогда //руководителю
		Адрес = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
	Иначе
		Адрес = Контрагент.ЭлектроннаяПочта;	
	КонецЕсли;    	
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;                                                       
	Профиль.АдресСервераPOP3 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3");
	Профиль.АдресСервераSMTP = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераSMTP");
	Профиль.ВремяОжидания 	 = 12;
	Профиль.Пароль			 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПароль");
	Профиль.Пользователь	 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
	Профиль.ПортPOP3		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортPOP3");
	Профиль.ПортSMTP		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортSMTP");
	Профиль.ПарольSMTP		 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПарольSMTP");
	Профиль.ПользовательSMTP = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользовательSMTP");
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		
		ТемаСообщения = ТекстСопровождения;
		текстписьма = "" + ТекстСопровождения + Символы.ПС + "--" + Символы.ПС + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись");
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
		Письмо.Тема 	= Лев(НаименованиеДокумента + " - " + ТемаСообщения, 250); 
		
		Если не результат = Неопределено Тогда
			Каталог = КаталогВременныхФайлов();
			
			попытка
				УдалитьФайлы(Каталог + "/Document.xls");
			Исключение
			Конецпопытки;
			
			Результат.Записать(Каталог + "/Document.xls", ТипФайлаТабличногоДокумента.XLS97);
			письмо.Вложения.Добавить(Каталог + "/Document.xls", ?(ЗначениеЗаполнено(НаименованиеДокумента), НаименованиеДокумента, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ")));	
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаКопироватьВТекстПисьмаСодержаниеДокумента") Тогда
				
				ИмяТемпФайла = ПолучитьИмяВременногоФайла(); 
				Результат.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.TXT); 
				текст = новый текстовыйдокумент; 
				Текст.Прочитать(ИмяТемпФайла); 
				письмо.Тексты.Добавить(Текст.ПолучитьТекст() + Символы.ПС);
				
			КонецЕсли;
		КонецЕсли;
		
		письмо.ИмяОтправителя = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИмяОтправителя");
		письмо.Отправитель 	  = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
		письмо.Получатели.Добавить(Адрес);
		
		письмо.Тексты.Добавить(текстписьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
		
		интернетПочта.Послать(письмо);
		интернетПочта.Отключиться(); 			
		
		если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено:" + " " + Адрес), , );
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено: " + Адрес);
			//Сообщение.Сообщить();	
		КонецЕсли;
		
	Исключение
		если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма:") + " " + ОписаниеОшибки(), , );
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма:") + " " + ОписаниеОшибки();
			//Сообщение.Сообщить();	
		КонецЕсли;
		
	КонецПопытки; 
	
	интернетПочта = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьПользователя()	
	Возврат ОбщийМодульПовтор.ОпределитьПользователя();	
КонецФункции //ОпределитьПользователя

&НаСервере
Функция   РегистрационныйКод() Экспорт	
	Возврат ОбщийМодульПовтор.РегистрационныйКод();	
КонецФункции //РегистрационныйКод

&НаСервере
Процедура ОправитьПоEMAILКонтрагентуНаСервере(Знач ТекстСопровождения, Знач Результат, Знач ИмяДокумента, Знач ВозможноЕмейл = "") Экспорт	
	ОбщийМодульСервисСервер.ПисьмоКонтрагенту(неопределено, Результат, ТекстСопровождения, ИмяДокумента, ВозможноЕмейл);	
КонецПроцедуры

&НаСервере
Функция   ПользователяТекущаяДата() Экспорт
	
	РабочаяДатаПользователя = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РабочаяДата");
	Если РабочаяДатаПользователя = '00010101000000' Тогда
		Возврат ТекущаяДата();
	Иначе
		Возврат РабочаяДатаПользователя;
	КонецЕсли;
	
КонецФункции

&НаСервере 
Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт
	Возврат ПараметрыСеанса[ИмяПараметра];
КонецФункции

&НаСервере 
Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	ПараметрыСеанса[ИмяПараметра] = ЗначениеПараметра;
КонецПроцедуры

&НаСервере
Функция   ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект(Знач Ссылка, Знач ТипМетаданных, Знач ИмяОбъектаМетаданных) Экспорт
	
	СтруктураРезультат = новый Структура;
	Мета = Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных);
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		СтруктураРезультат.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Если ТипМетаданных = "Справочники" Тогда
		СтруктураРезультат.Вставить("Код", Ссылка.Код);
		СтруктураРезультат.Вставить("Наименование", Ссылка.Наименование);
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		СтруктураРезультат.Вставить("Дата", Ссылка.Дата);
		СтруктураРезультат.Вставить("Номер", Ссылка.номер);
		
	КонецЕсли;
	
	Попытка 
		СтруктураРезультат.Вставить("Ответственный", Ссылка.Ответственный);
		СтруктураРезультат.Вставить("ДатаСодания", Ссылка.ДатаСодания);
		СтруктураРезультат.Вставить("ДатаРедакции", Ссылка.ДатаРедакции);
	Исключение 	
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции //ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект

&НаСервере
Функция   ПолучитьЗначениеРеквизита(Знач ЭлементОбъектИлиСсылка, Знач ИмяРеквизита) Экспорт	
	Возврат ЭлементОбъектИлиСсылка[ИмяРеквизита];	
КонецФункции //ПолучитьЗначениеРеквизита

Функция   получитьРодителя(Знач Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент.Родитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции //получитьРодителя

Процедура УстановитьЗначениеКонстанты(Знач НаименованиеКонстанты, Знач ЗначениеКонстанты) Экспорт	
	константы[НаименованиеКонстанты].Установить(ЗначениеКонстанты);	
КонецПроцедуры

Функция   получитьЗначениеНастройкиИлиКонстантыНаСервере(Знач ИмяКонстанты, Знач ТолькоКонстанта = Ложь) Экспорт
	
	Если не ТолькоКонстанта 
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьЛичныеНастройкиПользователей", Истина) Тогда //осторожно
		
		Попытка 
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяКонстанты];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ НастройкиПользователей.ЗначениеНастройки ИЗ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ НастройкиПользователей.Пользователь = &Пользователь И НастройкиПользователей.Настройка = &Настройка";
			
			Запрос.УстановитьПараметр("Настройка", Настройка);
			Запрос.УстановитьПараметр("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
			
			РезультатЗапроса = Запрос.Выполнить();
			если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				ВыборкаДетальныеЗаписи.Следующий();
				
				Результат = ВыборкаДетальныеЗаписи.ЗначениеНастройки;
				Если Результат = Неопределено тогда
					Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
				КонецЕсли;
				
			иначе
				Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
			конецесли;
			
		Исключение 	
			Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
		КонецПопытки;		
		
	иначе
		Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
	конецесли;   
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СообщитьПользователю(	
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	
	если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекстСообщенияПользователю);
		Сообщение.Поле = Поле;
		
		ЭтоОбъект = Ложь;
		
		#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
			Если КлючДанных <> Неопределено
				И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
				
				ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
				ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
			КонецЕсли;
		#КонецЕсли
		
		Если ЭтоОбъект Тогда
			Сообщение.УстановитьДанные(КлючДанных);
		Иначе
			Сообщение.КлючДанных = КлючДанных;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			Сообщение.ПутьКДанным = ПутьКДанным;
		КонецЕсли;
		
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Функция   ДатаПервогоДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 ВаловаяПрибыль.Период КАК Период
		|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Деньги.Период
		|ИЗ РегистрНакопления.Деньги КАК Деньги
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Зарплата.Период
		|ИЗ РегистрНакопления.Зарплата КАК Зарплата
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Расчеты.Период
		|ИЗ РегистрНакопления.Расчеты КАК Расчеты
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Период
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыКлиентов.Период
		|ИЗ РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыПоставщикам.Период
		|ИЗ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ОплатаПоЗаказам.Период
		|ИЗ РегистрНакопления.ОплатаПоЗаказам КАК ОплатаПоЗаказам
		|УПОРЯДОЧИТЬ ПО Период";

	РезультатЗапроса = Запрос.Выполнить();

	Если не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Период;
		
	Иначе
		Возврат '00010101000000';
	КонецЕсли;		
	
КонецФункции //ДатаПервогоДокумента

Процедура ПередЗавершениемРаботыСистемы(Знач ИмяОперации) Экспорт	
	
	Если ИмяОперации = "Восстановление Валовой Прибыли" Тогда
		ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
	КонецЕсли;
	
КонецПроцедуры //ОбщийМодульСервисСервер

Функция   СледуетВыполнитьОперацииПередЗавершением() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли")
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СообщатьОНеактуальностиПоказателейВаловойПрибылиИПредлагатьПерепроведениеДокументовПриВыходеИзПрограммыПоследнегоПользователя", Истина)
		и не Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить() = '00010101000000' 
		и ОбщийМодульСерверПривилегия.НетБольшеПодключенийКБазеДанных() Тогда
		
		Результат.Добавить("Восстановление Валовой Прибыли");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //СледуетВыполнитьОперацииПередЗавершением

Процедура ДобавитьСообщениеПользователю(Знач СообщениеПользователю, Знач СтатусСообщенияТ = Неопределено, Знач Ссылка = Неопределено) Экспорт	
	
	СообщениеДляПользователя = РегистрыСведений.СообщенияПользователюОтСистемы.СоздатьМенеджерЗаписи();
	СообщениеДляПользователя.Пользователь = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
	СообщениеДляПользователя.Сообщение    = СообщениеПользователю;
	СообщениеДляПользователя.Ссылка		  = Ссылка;
	Если СтатусСообщенияТ = СтатусСообщения.БезСтатуса Тогда
		СообщениеДляПользователя.Порядок = 5;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Важное Тогда
		СообщениеДляПользователя.Порядок = 1;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Внимание Тогда
		СообщениеДляПользователя.Порядок = 2;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Информация Тогда
		СообщениеДляПользователя.Порядок = 3;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Обычное Тогда
		СообщениеДляПользователя.Порядок = 4;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.ОченьВажное Тогда
		СообщениеДляПользователя.Порядок = 0;		
	КонецЕсли;
	СообщениеДляПользователя.Активность = Истина;
	
	СообщениеДляПользователя.Записать(Истина);
	сообщить(СообщениеПользователю);
	
КонецПроцедуры 

Функция   ПолучитьСообщенияСистемыПользователю(Знач глОтборСтруктура) Экспорт	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ СообщенияПользователюОтСистемы.Сообщение
	//|ИЗ РегистрСведений.СообщенияПользователюОтСистемы КАК СообщенияПользователюОтСистемы
	//|ГДЕ СообщенияПользователюОтСистемы.Пользователь = &Пользователь
	//|УПОРЯДОЧИТЬ ПО СообщенияПользователюОтСистемы.Порядок";
	//
	//Запрос.УстановитьПараметр("Пользователь", глОтборСтруктура.Пользователь);
	//РезультатЗапроса = Запрос.Выполнить();
	//если не РезультатЗапроса.Пустой() тогда
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи = регистрысведений.СообщенияПользователюОтСистемы.Выбрать(глОтборСтруктура);
	
	ЕстьСообщения = Ложь;
	СтруктураСообщений = Новый Структура;
	МассивСообщений = Новый Массив;
	МассивСсылокТ = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЕстьСообщения = Истина;
		МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Сообщение);
		МассивССылокТ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		МенеджерЗаписи = ВыборкаДетальныеЗаписи.ПолучитьМенеджерЗаписи();			
		МенеджерЗаписи.Удалить();
	КонецЦикла;	
	
	СтруктураСообщений.Вставить("МассивСообщений", МассивСообщений);
	СтруктураСообщений.Вставить("МассивСсылокТ", МассивСсылокТ);
	//КонецЕсли;
	
	Если ЕстьСообщения Тогда
		Возврат СтруктураСообщений;
	иначе
		возврат Неопределено;
	КонецЕсли;
	
КонецФункции
