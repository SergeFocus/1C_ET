// sza151218-1916
// sza151011-0304 
// sza150514-0125 
// sza150201-1256 : языки
// sza150117-0225 
// sza150116-0009 mail
// sza150113-0333
// sza150109-2321 НЧ
// sza141112-0229 
// sza140831-0328
// sza140804-2013 личные настройки
// sza140522-0303  
// sza131211-1456

Функция   ВывестиМакетЧтоНового(ДокументДляПечати) Экспорт
	
	Если РегистрационныйКод() = "ah" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МакетЧтоНового = ПолучитьОбщийМакет("ЧтоНового");
	
	ВерсияПриИнсталляции = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");
	Попытка
		ЧислоВерсияПриИнсталляции = Число(Лев(ВерсияПриИнсталляции, 6));
	Исключение
		ЧислоВерсияПриИнсталляции = 0;
	КонецПопытки;
	МассивНеобходимыхОбластей = Новый ТаблицаЗначений;
	МассивНеобходимыхОбластей.Колонки.Добавить("ИмяОбласти");
	
	Для Каждого Область Из МакетЧтоНового.Области Цикл
		
		ИмяОбласти = СтрЗаменить(Область.Имя, "Ш", "");
		Если НЕ ПустаяСтрока(ИмяОбласти) Тогда
			
			попытка
				НомерОбласти = Число(ИмяОбласти);
				Если НомерОбласти > ЧислоВерсияПриИнсталляции Тогда
					СтрокаТаблицы = МассивНеобходимыхОбластей.Добавить();
					СтрокаТаблицы.ИмяОбласти = Область.Имя;
				КонецЕсли;
			исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МассивНеобходимыхОбластей.Количество() = 0 Тогда
		
		Шапка = МакетЧтоНового.ПолучитьОбласть("Ш");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		ДокументДляПечати.Вывести(Шапка);
		
		ПолнаяВерсия = ОбщийМодульПовтор.ПолнаяВерсия();
		
		Если НЕ ПолнаяВерсия Тогда
			ШапкаНеполной = МакетЧтоНового.ПолучитьОбласть("ШП");
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаНеполной);
			ДокументДляПечати.Вывести(ШапкаНеполной);
		КонецЕсли;
		
		МассивНеобходимыхОбластей.Сортировать("ИмяОбласти УБЫВ");
		Для Каждого ОбластьМассива Из МассивНеобходимыхОбластей Цикл
			Шапка = МакетЧтоНового.ПолучитьОбласть(ОбластьМассива.ИмяОбласти);
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ДокументДляПечати.Вывести(Шапка);                   	               	
		КонецЦикла;
		
		Возврат ИСТИНА;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции
Функция   ДатаПервогоДокумента(Знач ТолькоВаловойПрибыли = ЛОЖЬ) Экспорт
	
	Запрос = Новый Запрос;
	Если ТолькоВаловойПрибыли Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВаловаяПрибыль.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";	
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВаловаяПрибыль.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Деньги.Период
		|ИЗ
		|	РегистрНакопления.Деньги КАК Деньги
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Закупки.Период
		|ИЗ
		|	РегистрНакопления.Закупки КАК Закупки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Зарплата.Период
		|ИЗ
		|	РегистрНакопления.Зарплата КАК Зарплата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Продажи.Период
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Расчеты.Период
		|ИЗ
		|	РегистрНакопления.Расчеты КАК Расчеты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Товары.Период
		|ИЗ
		|	РегистрНакопления.Товары КАК Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыКлиентов.Период
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказыПоставщикам.Период
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОплатаПоЗаказам.Период
		|ИЗ
		|	РегистрНакопления.ОплатаПоЗаказам КАК ОплатаПоЗаказам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыПереданныеНаКомиссию.Период
		|ИЗ
		|	РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Период;
		
	Иначе
		Возврат '19800225044500';
	КонецЕсли;		
	
КонецФункции // ДатаПервогоДокумента
Процедура ДобавитьСообщениеПользователю(Знач ТекстСообщения,
	Знач СтатусЭтогоСообщения = Неопределено,
	Знач СсылкаНаОбъектБазыДанных = Неопределено,
	Знач ПользовательПолучатель = Неопределено,
	Знач ПользовательОтправитель = Неопределено,
	Знач ПисатьВЖурналЗапрещено = ЛОЖЬ) Экспорт
	
	ЧислоПодобныхСообщений = 0;
	Порядок = 5;
	
	Если СтатусЭтогоСообщения = СтатусСообщения.БезСтатуса Тогда
		Порядок = 5;
	ИначеЕсли СтатусЭтогоСообщения = СтатусСообщения.Важное Тогда
		Порядок = 1;
	ИначеЕсли СтатусЭтогоСообщения = СтатусСообщения.Внимание Тогда
		Порядок = 2;
	ИначеЕсли СтатусЭтогоСообщения = СтатусСообщения.Информация Тогда
		Порядок = 3;
	ИначеЕсли СтатусЭтогоСообщения = СтатусСообщения.Обычное Тогда
		Порядок = 4;
	ИначеЕсли СтатусЭтогоСообщения = СтатусСообщения.ОченьВажное Тогда
		Порядок = 0;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СУММА(1) КАК ЧислоПодобныхСообщений
	|ИЗ РегистрСведений.СообщенияПользователюОтСистемы КАК СообщенияПользователюОтСистемы
	|ГДЕ СообщенияПользователюОтСистемы.Порядок = &Порядок
	|	И СообщенияПользователюОтСистемы.Пользователь = &Пользователь
	|	И СообщенияПользователюОтСистемы.Прочитано = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Порядок", Порядок);
	Запрос.УстановитьПараметр("Пользователь", ПользовательПолучатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		ЧислоПодобныхСообщений = ?(ВыборкаДетальныеЗаписи.ЧислоПодобныхСообщений = NULL, 0 , ВыборкаДетальныеЗаписи.ЧислоПодобныхСообщений);
	КонецЕсли;
	
	Если ЧислоПодобныхСообщений < 31 Тогда
		
		Если ПользовательПолучатель = Неопределено Тогда
			ПользовательПолучатель = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			СообщениеТекущемуПользователю = ИСТИНА;
		Иначе
			СообщениеТекущемуПользователю = ПользовательПолучатель = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		КонецЕсли;		
		
		СообщениеДляПользователя = РегистрыСведений.СообщенияПользователюОтСистемы.СоздатьМенеджерЗаписи();
		СообщениеДляПользователя.Пользователь = ПользовательПолучатель;
		СообщениеДляПользователя.Сообщение    = ТекстСообщения;
		СообщениеДляПользователя.Ссылка		  = СсылкаНаОбъектБазыДанных;
		СообщениеДляПользователя.Порядок 	  = Порядок;
		СообщениеДляПользователя.Отправитель  = ПользовательОтправитель;		
		СообщениеДляПользователя.Активность   = ИСТИНА;
		
		Если СообщениеТекущемуПользователю
			И НЕ ТекстСообщения = "ПредложениеВосстановленияВаловойПрибыли" Тогда
			
			Если ЧислоПодобныхСообщений < 30 Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;
		КонецЕсли;	
		
		Попытка
			СообщениеДляПользователя.Записать(ИСТИНА);
		Исключение
		КонецПопытки;	
		
	ИначеЕсли ЧислоПодобныхСообщений = 31 Тогда // более 30 подобных сообщений
		
		Если ПользовательПолучатель = Неопределено Тогда
			ПользовательПолучатель = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
			СообщениеТекущемуПользователю = ИСТИНА;
		Иначе
			СообщениеТекущемуПользователю = ПользовательПолучатель = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		КонецЕсли;		
		
		СообщениеДляПользователя = РегистрыСведений.СообщенияПользователюОтСистемы.СоздатьМенеджерЗаписи();
		СообщениеДляПользователя.Пользователь = ПользовательПолучатель;
		СообщениеДляПользователя.Сообщение    = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таких сообщений больше 30");
		СообщениеДляПользователя.Ссылка		  = СсылкаНаОбъектБазыДанных;
		СообщениеДляПользователя.Порядок 	  = Порядок;
		СообщениеДляПользователя.Отправитель  = ПользовательОтправитель;		
		СообщениеДляПользователя.Активность   = ИСТИНА;
		
		Если СообщениеТекущемуПользователю 
			И НЕ ТекстСообщения = "ПредложениеВосстановленияВаловойПрибыли" Тогда
			
			Если ЧислоПодобныхСообщений < 32 Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъектБазыДанных, , , ПисатьВЖурналЗапрещено);
			КонецЕсли;
		КонецЕсли;	
		
		Попытка
			СообщениеДляПользователя.Записать(ИСТИНА);
		Исключение
		КонецПопытки;	
		
	Иначе // более 31 подобных сообщений - пропуск
	КонецЕсли;
	
КонецПроцедуры 
Функция   ЕстьЛиРеквизит(Знач ВидДокумента, Знач ИмяРеквизита, Знач ИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Результат = Метаданные.Документы[ВидДокумента].Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	Иначе
		ТабЧасть = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Найти(ИмяТаблицы); 
		Результат = ТабЧасть <> Неопределено И ТабЧасть.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // 
Процедура ЗаменитьСвоиЗначенияПараметровПечати(Знач ОбластьПечати, Знач ДоЗаполнитьМассивПараметров = ЛОЖЬ, Знач МассивПараметров = Неопределено, Знач ПараметрыОбластиПечати = Неопределено, Знач ВВерхнийРегистр = ЛОЖЬ, Знач КешированиеЗначений = ЛОЖЬ) Экспорт
	
	Если ДоЗаполнитьМассивПараметров Тогда
		МассивПараметров = ПолучитьМассивИменПараметров(ОбластьПечати, МассивПараметров);
	КонецЕсли;
	
	Если НЕ ПараметрыОбластиПечати = Неопределено
		И КешированиеЗначений Тогда
		
		Для Каждого ПараметрОбластиПечати Из ПараметрыОбластиПечати Цикл
			
			Если ВВерхнийРегистр Тогда
				ЗначениеДляЗамены = ВРег(ОбластьПечати.Параметры[ПараметрОбластиПечати]);
			Иначе
				ЗначениеДляЗамены = ОбластьПечати.Параметры[ПараметрОбластиПечати];
			КонецЕсли;
			
			НовоеЗначениеПараметра = ОбщийМодульПовтор.ВыполнитьПодстановкуСвоихЗначений(ПараметрОбластиПечати, ЗначениеДляЗамены);
			Если НЕ НовоеЗначениеПараметра = Неопределено Тогда
				ОбластьПечати.Параметры[ПараметрОбластиПечати] = НовоеЗначениеПараметра;	
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		СвоиЗначенияПараметровПечати = ОбщийМодульПовтор.ПолучитьСвоиЗначенияПараметровПечати();
		Если НЕ СвоиЗначенияПараметровПечати = Неопределено Тогда
			
			Попытка
				Если ПараметрыОбластиПечати = Неопределено Тогда
					ПараметрыОбластиПечати = ПолучитьМассивИменПараметров(ОбластьПечати); // , МассивПараметров);
				КонецЕсли;
				
				Для Каждого ПараметрОбластиПечати Из ПараметрыОбластиПечати Цикл
					
					Если ВВерхнийРегистр Тогда
						ПараметрыПоиска = Новый Структура("НаименованиеПараметра, ЗначениеДляЗамены", ПараметрОбластиПечати, ВРег(ОбластьПечати.Параметры[ПараметрОбластиПечати]));
					Иначе
						ПараметрыПоиска = Новый Структура("НаименованиеПараметра, ЗначениеДляЗамены", ПараметрОбластиПечати, ОбластьПечати.Параметры[ПараметрОбластиПечати]);
					КонецЕсли;
					
					МассивЗадающих = ПолучитьМассивЗадающих(СвоиЗначенияПараметровПечати, ПараметрыПоиска);	
					
					Для Каждого Задающий Из МассивЗадающих Цикл
						ОбластьПечати.Параметры[ПараметрОбластиПечати] = Задающий.НаЗначение;
					КонецЦикла;
					
				КонецЦикла;	
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаписатьДополнительнуюИнформацию(Знач ОбъектСсылка, Знач ДополнительнаяИнформация) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанных", ИСТИНА) 
		И НЕ ДополнительнаяИнформация.Количество() = 0 Тогда
		
		ДопИнфо = РегистрыСведений.ЗначенияДополнительныхРеквизитов.СоздатьНаборЗаписей();
		ДопИнфо.Отбор.ОбъектВладелец.Значение = ОбъектСсылка;
		ДопИнфо.Отбор.ОбъектВладелец.Использование = ИСТИНА;
		ДопИнфо.Очистить();
		
		Для Каждого СтрокаДопИнформации Из ДополнительнаяИнформация Цикл
			
			Информация = СтрокаДопИнформации.Информация;
			Если НЕ ПустаяСтрока(Информация) Тогда
				ДопИнфоСтрока = ДопИнфо.Добавить();   
				ДопИнфоСтрока.Активность 			 = ИСТИНА;
				ДопИнфоСтрока.Период 				 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				ДопИнфоСтрока.ДополнительныйРеквизит = СтрокаДопИнформации.ВидИнформации ;
				ДопИнфоСтрока.ОбъектВладелец 		 = ОбъектСсылка;
				ДопИнфоСтрока.ЗначениеРеквизита 	 = СтрокаДопИнформации.Информация;	
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка  
			ДопИнфо.Записать(ИСТИНА);			
		Исключение 
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр дополнительной информации") + ": " + ДопИнфо + " - " + ТекстОписаниеОшибки, ОбъектСсылка);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьДополнительнуюИнформацию(Знач ОбъектСсылка, ДополнительнаяИнформация, Знач ДопИнфоТипВладельца = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанных", ИСТИНА) Тогда
		
		Если ДопИнфоТипВладельца = Неопределено Тогда
			ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК ВидИнформации,
		|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеРеквизита, ДополнительныеРеквизиты.ЗначениеПоУмолчанию) КАК Информация
		|ИЗ Справочник.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ЗначениеРеквизита КАК ЗначениеРеквизита,
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ОбъектВладелец КАК ОбъектВладелец,
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ДополнительныйРеквизит КАК ДополнительныйРеквизит
		|		ИЗ
		|			РегистрСведений.ЗначенияДополнительныхРеквизитов.СрезПоследних(, ОбъектВладелец = &ОбъектВладелец) КАК ЗначенияДополнительныхРеквизитовСрезПоследних) КАК ВложенныйЗапрос
		|		ПО ДополнительныеРеквизиты.Ссылка = ВложенныйЗапрос.ДополнительныйРеквизит
		|ГДЕ ДополнительныеРеквизиты.ЭтоРеквизитДляОбъекта = &ЭтоРеквизитДляОбъекта";
		
		Запрос.УстановитьПараметр("ОбъектВладелец", ОбъектСсылка);		
		Запрос.УстановитьПараметр("ЭтоРеквизитДляОбъекта", ДопИнфоТипВладельца);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДополнительнаяИнформация.Загрузить(РезультатЗапроса.Выгрузить());			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Функция   МаксимальныйКодЭлемента(Знач НаименованиеСправочника, Знач ВыразитьВЧисле = ЛОЖЬ) Экспорт
	
	Если ВыразитьВЧисле Тогда
		Результат = 0;
	Иначе
		Результат = "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЭлтСпр.Код КАК Код
	|ИЗ Справочник." + НаименованиеСправочника + " КАК ЭлтСпр УПОРЯДОЧИТЬ ПО Код УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();	
		Результат = ВыборкаДетальныеЗаписи.Код;
		
		Если ВыразитьВЧисле 
			И НЕ ТипЗнч(Результат) = Тип("Число") Тогда
			
			Попытка 
				Результат = Число(Результат);
			Исключение 	
				Результат = 0;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
функция   ОбновиласьВерсия() Экспорт
	
	ВерсияКонфигурации 		= Лев(ВРег(СокрЛП(Метаданные.Версия)), 6);
	ВерсияБыла 				= Лев(ВРег(СокрЛП(Константы.ВерсияПрограммы.Получить())), 6);
	ПисьмаНеБыло			= ИСТИНА;
	РегистрационныйКод		= РегистрационныйКод();
	
	ВерсияПриИнсталляции 	= Лев(ВРег(СокрЛП(Константы.ВерсияПриИнсталляции.Получить())), 6);
	Если НЕ ЗначениеЗаполнено(ВерсияПриИнсталляции) Тогда		
		Константы.ВерсияПриИнсталляции.Установить(ВерсияКонфигурации);		
	КонецЕсли;
	
	Если ВерсияБыла = ВерсияКонфигурации Тогда		
		Возврат ЛОЖЬ;
		
	Иначе		
		ОбщийМодульСерверПривилегия.ОбновитьДанныеПриОбновленииКонфигурации(ВерсияБыла, ВерсияКонфигурации);
		
		Если ПисьмаНеБыло 
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") Тогда
			
			СтруктураПисьма = Новый Структура;
			СтруктураПисьма.Вставить("ОтКого", "АвтоОБНОВЛЕНИЕ");
			СтруктураПисьма.Вставить("ТемаСообщения", "upver");
			СтруктураПисьма.Вставить("ТекстСообщения", "Было: " + ВерсияБыла);
			СтруктураПисьма.Вставить("РегистрационныйКод", РегистрационныйКод);
			
			ОбщийМодульСервисСервер.ПисьмоАвтору(СтруктураПисьма);
		КонецЕсли;
		
		Константы.ВерсияПрограммы.Установить(ВерсияКонфигурации);
		
		Возврат ИСТИНА;
		
	КонецЕсли;	
	
КонецФункции
Процедура ОправитьПоEMAILКонтрагентуНаСервере(Знач ТекстСопровождения, Знач Результат, Знач ИмяДокумента, Знач ВозможноЕмейл = "") Экспорт	
	ОбщийМодульСервисСервер.ПисьмоКонтрагенту(Неопределено, Результат, ТекстСопровождения, ИмяДокумента, ВозможноЕмейл);
КонецПроцедуры
Функция   ОпределитьОбработкуДляМенюСервис() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ДополнительныеОтчетыИОбработки.Ссылка
	|ИЗ Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ ДополнительныеОтчетыИОбработки.ВыполнятьВМенюСервис = ИСТИНА
	|	И ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОпределитьОбработкуДляМенюСервис
Функция   ОпределитьПользователя()	
	Возврат ОбщийМодульПовтор.ОпределитьПользователя();	
КонецФункции // ОпределитьПользователя
Процедура ОформитьФорматКоличества(ЭлементФормы, Знач ТолькоФорматРедактирования = ЛОЖЬ, Знач ТолькоФормат = ЛОЖЬ) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКоличественныйУчет") Тогда
		КоличествоНоменклатурыМожетБытьДробным = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
		
		Если КоличествоНоменклатурыМожетБытьДробным Тогда
			ЧислоЗнаковПослеЗапятойДляКоличества = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества", ИСТИНА);		
			ФорматКоличества = "ЧЦ=15; ЧДЦ=" + СокрЛП(ЧислоЗнаковПослеЗапятойДляКоличества);
		Иначе
			ФорматКоличества = "ЧЦ=12; ЧДЦ=0";
		КонецЕсли;
		
		Если НЕ ТолькоФорматРедактирования Тогда
			ЭлементФормы.Формат = ФорматКоличества; 	
		КонецЕсли;
		Если НЕ ТолькоФормат Тогда
			ЭлементФормы.ФорматРедактирования = ФорматКоличества;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
Процедура ПередЗавершениемРаботыСистемы(Знач ИмяОперации) Экспорт	
	
	Если ИмяОперации = "Восстановление Валовой Прибыли" Тогда
		ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
	КонецЕсли;
	
КонецПроцедуры // ОбщийМодульСервисСервер
Процедура ПисьмоАвтору(Знач СтруктураПисьма = Неопределено) Экспорт
	
	Если НЕ СтруктураПисьма = Неопределено
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") Тогда
		
		ВыводитьСообщениеОбОшибке = ЛОЖЬ;		
		Отмена = ЛОЖЬ;
		
		Профиль = Новый ИнтернетПочтовыйПрофиль;  
		Попытка
			Профиль.ИспользоватьSSLSMTP = ИСТИНА;// ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLSMTP");
			
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия платформы 1С должна быть не ниже 8.2.19!!"));
			Отмена = ИСТИНА;
		КонецПопытки;
		
		Если НЕ Отмена Тогда
			
			РегистрационныйКод = ОбщийМодульСервисСервер.РегистрационныйКод();
			
			РегистрационныйКод = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
			Если НЕ СтруктураПисьма = Неопределено Тогда
				СтруктураПисьма.Свойство("РегистрационныйКод", РегистрационныйКод);	
			КонецЕсли;
			
			ОтКого = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
			Если НЕ СтруктураПисьма = Неопределено Тогда
				СтруктураПисьма.Свойство("ОтКого", ОтКого);	
			КонецЕсли;
			
			Пароль = "yESei*xxdMAL7yZCyByE4w";
			
			Профиль.ИспользоватьSSLSMTP = ЛОЖЬ;			
			Профиль.АдресСервераSMTP 	= "smtp.mandrillapp.com";			
			Пароль = СтрЗаменить(Пароль, "*", "6");
			Профиль.Пароль				= Пароль;
			Профиль.Пользователь		= "serzhyale@gmail.com";
			Профиль.ПортSMTP			= 587;			
			Профиль.ПарольSMTP			= Пароль;
			Профиль.ПользовательSMTP 	= "serzhyale@gmail.com";
			Профиль.ВремяОжидания 	 	= 6;
			Профиль.АутентификацияSMTP 	= СпособSMTPАутентификации.ПоУмолчанию;
			
			ИнтернетПочта = Новый ИнтернетПочта;
			Если НЕ СтруктураПисьма = Неопределено Тогда
				СтруктураПисьма.Свойство("Вручную", ВыводитьСообщениеОбОшибке);	
			КонецЕсли;
			Если ВыводитьСообщениеОбОшибке = Неопределено Тогда
				ВыводитьСообщениеОбОшибке = ЛОЖЬ;
			КонецЕсли;
			
			Попытка
				ИнтернетПочта.Подключиться(Профиль);
				ТекстПисьма   = "";
				ТемаСообщения = "";
				
				Если НЕ СтруктураПисьма = Неопределено Тогда
					ТемаСообщения = СтруктураПисьма.ТемаСообщения;
					
					ТекстПисьма = ТекстПисьма + ОтКого + символы.пс;
					ТекстПисьма = ТекстПисьма + РегистрационныйКод + символы.пс;				
					ТекстПисьма = ТекстПисьма + ТемаСообщения + символы.пс;
					ТекстПисьма = ТекстПисьма + СтруктураПисьма.ТекстСообщения + символы.пс;
					ТекстПисьма = ТекстПисьма + символы.пс;				
				КонецЕсли;			
				
				Письмо = Новый ИнтернетПочтовоеСообщение;
				письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
				// письмо.Вложения.Добавить();
				письмо.ИмяОтправителя = "imexconsol@mail.ru"; письмо.Отправитель = "imexconsol@mail.ru";                                 письмо.Получатели.Добавить("sza@ukr.net");
				
				СисИнфо = Новый СистемнаяИнформация;
				ИмяКомпьютера = "";
				ТекущийКодЛокализации = "";
				#Если Не ВебКлиент Тогда
					ИмяКомпьютера = ИмяКомпьютера(); 
					ТекущийКодЛокализации = ТекущийКодЛокализации();
				#КонецЕсли      
				СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
				ТекущийРежимЗапуска = СокрЛП(ТекущийРежимЗапуска());
				
				// Письмо автору не содержит какой либо конфиденциональной информации
				// здесь время, тип винды, версия платформы 1С, ип 1С-клиента, версия собственно конфигурации
				письмо.Тема = "ЭТ " + Метаданные.Версия + " " + ТемаСообщения;
				ТекстПисьма = ТекстПисьма + "_____" + Символы.ПС;
				ТекстПисьма = ТекстПисьма + "Name:" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати") + символы.пс;
				ТекстПисьма = ТекстПисьма + "Data:" + " " + символы.ВТаб + ТекущаяДата() + Символы.ПС;
				ТекстПисьма = ТекстПисьма + "clc :" + " " + символы.ВТаб + ПолучитьЧасовойПоясИнформационнойБазы() + символы.пс;			
				ТекстПисьма = ТекстПисьма + "ПК  :" + " " + символы.ВТаб + ИмяКомпьютера + символы.пс;			
				ТекстПисьма = ТекстПисьма + "OS  :" + " " + символы.ВТаб + СисИнфо.ВерсияОС + + " " + символы.пс;
				ТекстПисьма = ТекстПисьма + "WnwS:" + " " + символы.ВТаб + СисИнфо.ТипПлатформы + символы.пс;
				ТекстПисьма = ТекстПисьма + "Proc:" + " " + символы.ВТаб + СисИнфо.Процессор + Символы.ПС;			
				ТекстПисьма = ТекстПисьма + "RAM :" + " " + символы.ВТаб + СисИнфо.ОперативнаяПамять + символы.пс;
				ТекстПисьма = ТекстПисьма + "1Cv :" + " " + символы.ВТаб + СисИнфо.ВерсияПриложения + символы.пс;
				ТекстПисьма = ТекстПисьма + "brws:" + " " + символы.ВТаб + СисИнфо.ИнформацияПрограммыПросмотра + символы.пс;
				ТекстПисьма = ТекстПисьма + "loc :" + " " + символы.ВТаб + ТекущийКодЛокализации + символы.пс;
				ТекстПисьма = ТекстПисьма + "base:" + " " + символы.ВТаб + СтрокаСоединенияИнформационнойБазы + символы.пс;
				ТекстПисьма = ТекстПисьма + "reg :" + " " + символы.ВТаб + ТекущийРежимЗапуска + символы.пс;
				ТекстПисьма = ТекстПисьма + "Закончена настр:" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") + Символы.ПС ;
				ТекстПисьма = ТекстПисьма + "Заголовок окна :" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы") + Символы.ПС ;
				ТекстПисьма = ТекстПисьма + "Язык интерфейса:" + " " + символы.ВТаб + ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы + Символы.ПС ;
				ТекстПисьма = ТекстПисьма + "Первый запуск  :" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаПервогоЗапуска") + Символы.ПС ;
				ТекстПисьма = ТекстПисьма + "Послед. обновл.:" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаПоследнегоОбновления") + Символы.ПС ;
				ТекстПисьма = ТекстПисьма + "Число объектов :" + " " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоОбъектов") + Символы.ПС ;
				
				ТекстПисьма = ТекстПисьма + Символы.ПС + "--" + Символы.ПС + письмо.Тема;
				ЭлектроннаяПочтаПодпись = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись");
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаПодпись) Тогда
					ТекстПисьма = ТекстПисьма + Символы.ПС + ЭлектроннаяПочтаПодпись;
				КонецЕсли;
				
				ЭлектроннаяПочтаОтправитель = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаОтправитель) Тогда
					ТекстПисьма = ТекстПисьма + Символы.ПС + ЭлектроннаяПочтаОтправитель;
				КонецЕсли;
				
				письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
				
				интернетПочта.Послать(письмо);
				интернетПочта.Отключиться();
				
				Если ВыводитьСообщениеОбОшибке 
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено автору."), , );
				КонецЕсли;
				
			Исключение
				Если ВыводитьСообщениеОбОшибке 
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма") + ": " + ТекстОписаниеОшибки, , );
				КонецЕсли;				
			КонецПопытки; 
			
			интернетПочта = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ПисьмоКонтрагенту(Знач Контрагент = Неопределено, Знач Результат = Неопределено, Знач ТекстСопровождения, Знач НаименованиеДокумента, Знач ВозможноЕмейл = "") Экспорт
	
	Если НЕ найти(ВозможноЕмейл, "@") = 0 Тогда
		Адрес = ВозможноЕмейл;
	ИначеЕсли Контрагент = Неопределено Тогда // руководителю
		Адрес = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
		Адрес = Контрагент.ЭлектроннаяПочта;	
	Иначе // нет получателя
		Возврат;
	КонецЕсли;    	
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;                                                       
	Отмена = ЛОЖЬ;
	Попытка
		Профиль.ИспользоватьSSLSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLSMTP");
		Профиль.ИспользоватьSSLPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLPOP3");
		
		Профиль.POP3ПередSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаPOP3ПередSMTP");
		Профиль.АдресСервераIMAP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераIMAP");
		
		АутентификацияPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАутентификацияPOP3");
		Если ПустаяСтрока(АутентификацияPOP3)
			ИЛИ ВРег(АутентификацияPOP3) = "ОБЫЧНАЯ" Тогда
			
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;
		ИначеЕсли НЕ Найти(АутентификацияPOP3, "5") = 0 
			ИЛИ АутентификацияPOP3 = "CramMD5" Тогда
			
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.CramMD5;
		Иначе
			Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.APOP;
		КонецЕсли;
		
		АутентификацияSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАутентификацияSMTP");
		Если ПустаяСтрока(АутентификацияSMTP)
			ИЛИ ВРег(АутентификацияSMTP) = "ПОУМОЛЧАНИЮ" Тогда
			
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИначеЕсли НЕ Найти(АутентификацияSMTP, "5") = 0
			ИЛИ АутентификацияSMTP = "CramMD5" Тогда
			
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.CramMD5;
		ИначеЕсли НЕ Найти(ВРег(АутентификацияSMTP), "LOG") = 0
			ИЛИ АутентификацияSMTP = "Login" Тогда
			
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;
		ИначеЕсли НЕ Найти(АутентификацияSMTP, "P") = 0
			ИЛИ АутентификацияSMTP = "Plain" Тогда
			
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Plain;
		Иначе
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		КонецЕсли;
		
		Профиль.ИспользоватьSSLIMAP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLIMAP");
		Профиль.ПарольIMAP			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПарольIMAP");
		Профиль.ПользовательIMAP	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользовательIMAP");
		Профиль.ПортIMAP			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортIMAP");
		Профиль.ТолькоЗащищеннаяАутентификацияIMAP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаТолькоЗащищеннаяАутентификацияIMAP");
		Профиль.ТолькоЗащищеннаяАутентификацияPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаТолькоЗащищеннаяАутентификацияPOP3");
		Профиль.ТолькоЗащищеннаяАутентификацияSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаТолькоЗащищеннаяАутентификацияSMTP");
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия платформы 1С должна быть не ниже 8.2.19!!"));
		// Отмена = ИСТИНА; а вдруг!?
	КонецПопытки;
	
	Если НЕ Отмена Тогда
		
		Профиль.АдресСервераPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3");
		Профиль.АдресСервераSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераSMTP");
		Профиль.Таймаут		 	 = 12;
		Профиль.Пароль			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПароль");
		Профиль.Пользователь	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
		Профиль.ПортPOP3		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортPOP3");
		Профиль.ПортSMTP		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортSMTP");
		Профиль.ПарольSMTP		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПарольSMTP");
		Профиль.ПользовательSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользовательSMTP");	
		
		ИнтернетПочта = Новый ИнтернетПочта;
		
		Попытка
			ИнтернетПочта.Подключиться(Профиль);
			
			ТемаСообщения = ТекстСопровождения;
			ТекстПисьма = "" + ТекстСопровождения + Символы.ПС + "--" + Символы.ПС + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись");
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
			Письмо.Тема 	= Лев(НаименованиеДокумента + " - " + ТемаСообщения, 250); 
			
			Если НЕ результат = Неопределено Тогда
				Каталог = КаталогВременныхФайлов();
				
				Попытка
					УдалитьФайлы(Каталог + "/Document.xls");
				Исключение
				КонецПопытки;
				
				Результат.Записать(Каталог + "/Document.xls", ТипФайлаТабличногоДокумента.XLS97);
				письмо.Вложения.Добавить(Каталог + "/Document.xls", ?(ЗначениеЗаполнено(НаименованиеДокумента), НаименованиеДокумента, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ")));	
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаКопироватьВТекстПисьмаСодержаниеДокумента") Тогда
					
					ИмяТемпФайла = ПолучитьИмяВременногоФайла(); 
					Результат.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.TXT); 
					текст = Новый ТекстовыйДокумент; 
					Текст.Прочитать(ИмяТемпФайла); 
					письмо.Тексты.Добавить(Текст.ПолучитьТекст() + Символы.ПС);
					
				КонецЕсли;
			КонецЕсли;
			
			письмо.ИмяОтправителя = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИмяОтправителя");
			письмо.Отправитель 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
			письмо.Получатели.Добавить(Адрес);
			
			письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
			
			интернетПочта.Послать(письмо);
			интернетПочта.Отключиться(); 			
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено" + ": " + Адрес), , );
			КонецЕсли;
			
		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма") + ": " + ТекстОписаниеОшибки, , );
			КонецЕсли;			
		КонецПопытки;
		
	КонецЕсли;
	
	ИнтернетПочта = Неопределено;
	
КонецПроцедуры
Функция   ПодключитьВнешнююОбработку(Знач Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
		ИЛИ Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеОбработки.Получить());
	
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , Ссылка.БезопасныйРежим);
	
	Возврат ИмяОбработки;
	
КонецФункции
Функция   ПолучитьВерсиюПлатформы(Знач ПоРежимуСовместимости = ЛОЖЬ, Знач ВернутьВерсиюКонфигурацииЭТ = ЛОЖЬ) Экспорт
	
	Если ВернутьВерсиюКонфигурацииЭТ Тогда
		Возврат Лев(ВРег(СокрЛП(Метаданные.Версия)), 6);
		
	Иначе		
		Если ПоРежимуСовместимости Тогда			
			РежимСовместимости = СтрЗаменить(СокрЛП(Метаданные.РежимСовместимости), "Версия", "") + ".0";
			ВерсияПриложения = СтрЗаменить(РежимСовместимости, "_", ".0");
		Иначе
			ИнформацияОСистеме = Новый СистемнаяИнформация;	
			ВерсияПриложения = ИнформацияОСистеме.ВерсияПриложения;	
		КонецЕсли;
		
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		
		Если СтрДлина(ВерсияПриложения) = 3 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 2 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "00" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 1 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "000" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 0 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0000" + ВерсияПриложения;
		Иначе // 4
			ВерсияПлатформы  = ВерсияПлатформы + ВерсияПриложения;
		КонецЕсли;
		
		Попытка
			Возврат Число(ВерсияПлатформы);
		Исключение // Не использовать
			Возврат "802160000";
		КонецПопытки;		
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюПлатформы
Функция   ПолучитьЗначениеНастройкиИлиКонстантыНаСервере(Знач ИмяКонстанты, Знач ТолькоКонстанта = ЛОЖЬ) Экспорт
	
	Если НЕ ТолькоКонстанта 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЛичныеНастройкиПользователей", ИСТИНА) Тогда // осторожно
		
		Попытка 
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяКонстанты];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ НастройкиПользователей.ЗначениеНастройки Из РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ НастройкиПользователей.Пользователь = &Пользователь И НастройкиПользователей.Настройка = &Настройка";
			
			Запрос.УстановитьПараметр("Настройка", Настройка);
			Запрос.УстановитьПараметр("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				ВыборкаДетальныеЗаписи.Следующий();
				
				Результат = ВыборкаДетальныеЗаписи.ЗначениеНастройки;
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
				КонецЕсли;
				
			Иначе
				Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
			КонецЕсли;
			
		Исключение
			Попытка
				Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
			Исключение // ошибка константы;
				Результат = Неопределено;
			КонецПопытки;		
		КонецПопытки;		
		
	Иначе
		Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
	КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции
Функция   ПолучитьЗначениеРеквизита(Знач ЭлементОбъектИлиСсылка, Знач ИмяРеквизита) Экспорт	
	
	Если ЗначениеЗаполнено(ЭлементОбъектИлиСсылка) Тогда
		Возврат ЭлементОбъектИлиСсылка[ИмяРеквизита];	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеРеквизита
Функция   ПолучитьКаталогСИзображениями(Знач СвязанныйОбъект) Экспорт
	
	Каталог = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПапкаСИзображениями");
	
	Если ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(СвязанныйОбъект.Родитель) Тогда
			Если ЗначениеЗаполнено(СвязанныйОбъект.Родитель.ПапкаСИзображениями) Тогда
				Каталог = СвязанныйОбъект.Родитель.ПапкаСИзображениями;
				
			ИначеЕсли ЗначениеЗаполнено(СвязанныйОбъект.Родитель.Родитель)
				И ЗначениеЗаполнено(СвязанныйОбъект.Родитель.Родитель.ПапкаСИзображениями) Тогда
				
				Каталог = СвязанныйОбъект.Родитель.Родитель.ПапкаСИзображениями;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Каталог) Тогда
		Каталог = "C:";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции // ПолучитьКаталогСИзображениями
Функция   ПолучитьКрасивоеНаименованиеОбъекта(Знач НаименованиеОбъекта, Знач СПриставкой = ЛОЖЬ) Экспорт
	
	Наименование = НаименованиеОбъекта;
	
	Если СПриставкой Тогда
		Наименование = СтрЗаменить(Наименование, "СправочникСсылка.", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник") + " ");
		Наименование = СтрЗаменить(Наименование, "ДокументСсылка.", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ") + " ");
	Иначе
		Наименование = СтрЗаменить(Наименование, "СправочникСсылка.", "");
		Наименование = СтрЗаменить(Наименование, "ДокументСсылка.", "");
	КонецЕсли;
	
	ДлинаНаименования  = СтрДлина(Наименование);
	СчетчикСимволов = 1;
	СобираемоеНаименование = Лев(Наименование, 1);
	
	Пока СчетчикСимволов < ДлинаНаименования Цикл
		
		СчетчикСимволов = СчетчикСимволов + 1;		
		СимволСтроки = Сред(Наименование, СчетчикСимволов, 1);
		Если СимволСтроки = ВРег(СимволСтроки) Тогда
			СобираемоеНаименование = СобираемоеНаименование + " " + НРег(СимволСтроки);
		Иначе
			СобираемоеНаименование = СобираемоеНаименование + СимволСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СобираемоеНаименование);
	
	Возврат Наименование;
	
КонецФункции // ПолучитьКрасивоеНаименованиеОбъекта
Функция   ПолучитьМассивЗадающих(Знач СвоиЗначенияПараметровПечати, Знач ПараметрыПоиска)	
	Возврат СвоиЗначенияПараметровПечати.НайтиСтроки(ПараметрыПоиска);	
КонецФункции
Функция   ПолучитьМассивИменПараметров(Знач ОбластьТабДокумента, Знач МассивИменПараметров = Неопределено) Экспорт // SeraFim
	
	Если МассивИменПараметров = Неопределено Тогда
		МассивИменПараметров = Новый Массив;
	КонецЕсли;
	
	Для НомерСтроки = 1 По ОбластьТабДокумента.ВысотаТаблицы Цикл
		Для НомерКолонки = 1 По ОбластьТабДокумента.ШиринаТаблицы Цикл
			
			Ячейка = ОбластьТабДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
				Если МассивИменПараметров.Найти(Ячейка.Параметр) = Неопределено Тогда
					МассивИменПараметров.Добавить(Ячейка.Параметр);
				КонецЕсли;
			ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				
				ТекстШаблона = Ячейка.Текст;
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
				Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
					ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
					Если Лев(ТекСтрока, 1) = "[" Тогда
						ИмяПараметра = Сред(ТекСтрока, 2);
						
						Если МассивИменПараметров.Найти(ИмяПараметра) = Неопределено Тогда
							МассивИменПараметров.Добавить(ИмяПараметра);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли
			
		КонецЦикла
		
	КонецЦикла;
	
	Возврат МассивИменПараметров;
	
КонецФункции
Функция   ПолучитьОбъектВнешнейОбработки(Знач Ссылка) Экспорт
	
	ИмяОбработки = ПодключитьВнешнююОбработку(Ссылка);
	
	Если ИмяОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	Возврат Менеджер.Создать(ИмяОбработки);
	
КонецФункции
Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт
	Возврат ПараметрыСеанса[ИмяПараметра];
КонецФункции
Функция   ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(Знач Вид) Экспорт
	
	Назначение = Новый ТаблицаЗначений;
	Назначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных");
	Назначение.Колонки.Добавить("Класс");
	Назначение.Колонки.Добавить("Объект");
	
	Команда = Неопределено;
	
	//	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
	//		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	//	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
	//		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	//ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
	//	Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	//	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
	//		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	//	КонецЕсли;
	
	Если Команда <> Неопределено Тогда
		
		Для Каждого Тип Из Команда.ТипПараметраКоманды.Типы() Цикл
			ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
			НовоеНазначение = Назначение.Добавить();
			НовоеНазначение.ПолноеИмяОбъектаМетаданных	= ПолноеИмяОбъектаМетаданных;
			НовоеНазначение.Класс		= РазделеннаяСтрока[0];
			НовоеНазначение.Объект		= РазделеннаяСтрока[1];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции
Функция   ПолучитьПричинуСторнирования(Знач СторныйДокумент) Экспорт
	
	Результат = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СторнированныеДокументы.Причина
	|ИЗ РегистрСведений.СторнированныеДокументы КАК СторнированныеДокументы
	|ГДЕ СторнированныеДокументы.СторныйДокумент = &СторныйДокумент";
	
	Запрос.УстановитьПараметр("СторныйДокумент", СторныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.Причина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПричинуСторнирования
Функция   ПолучитьРодителя(Знач Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент.Родитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции // получитьРодителя
Функция   ПолучитьСообщенияСистемыПользователю(Знач глПараметрыСообщенийПользователя, Знач ВернутьТолькоФлагНаличия = ЛОЖЬ) Экспорт
	
	ПользователяТекущаяДата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Отказ = ЛОЖЬ;
	
	Попытка
		Если ПользователяТекущаяДата - ПараметрыСеанса.ПоследнееВремяЧтенийСообщений < 2 Тогда // не чаще 2 сек
			Отказ = ИСТИНА;
		КонецЕсли;
	Исключение
		ПараметрыСеанса.ПоследнееВремяЧтенийСообщений = ПользователяТекущаяДата;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		Если ВернутьТолькоФлагНаличия Тогда
			
			ЕстьСообщения = ЛОЖЬ;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ 1 КАК Поле1
			|ИЗ РегистрСведений.СообщенияПользователюОтСистемы КАК СообщенияПользователюОтСистемы
			|ГДЕ СообщенияПользователюОтСистемы.Прочитано = ЛОЖЬ
			|	И СообщенияПользователюОтСистемы.Пользователь = &Пользователь
			|	И СообщенияПользователюОтСистемы.Доставить <= &ПользователяТекущаяДата";
			
			Запрос.УстановитьПараметр("ПользователяТекущаяДата", ПользователяТекущаяДата);
			Запрос.УстановитьПараметр("Пользователь", глПараметрыСообщенийПользователя.Пользователь);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Возврат ИСТИНА;
			Иначе
				Возврат ЛОЖЬ;	
			КонецЕсли;
			
		Иначе		
			ЕстьСообщения 		= ЛОЖЬ;
			СтруктураСообщений 	= Новый Структура;
			МассивСообщений 	= Новый Массив;
			МассивСсылокТ 		= Новый Массив;
			
			СохранятьИсториюСообщенийПользователей = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СохранятьИсториюСообщенийПользователей");
			
			ВыборкаДетальныеЗаписи = РегистрыСведений.СообщенияПользователюОтСистемы.Выбрать(глПараметрыСообщенийПользователя);
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Прочитано Тогда
					Продолжить;
				КонецЕсли;
				ВремяДоставить = ВыборкаДетальныеЗаписи.Доставить;
				Если ВремяДоставить > ПользователяТекущаяДата Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьСообщения = ИСТИНА;
				Если ВернутьТолькоФлагНаличия Тогда
					Прервать;
				КонецЕсли;
				МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Сообщение);
				МассивСсылокТ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если НЕ СохранятьИсториюСообщенийПользователей Тогда
					МенеджерЗаписи = ВыборкаДетальныеЗаписи.ПолучитьМенеджерЗаписи();			
					МенеджерЗаписи.Удалить();	
				Иначе
					МенеджерЗаписи = ВыборкаДетальныеЗаписи.ПолучитьМенеджерЗаписи();
					МенеджерЗаписи.Прочитано = ИСТИНА;
					МенеджерЗаписи.Записать(ИСТИНА);
				КонецЕсли;
			КонецЦикла;	
			
			СтруктураСообщений.Вставить("МассивСообщений", МассивСообщений);
			СтруктураСообщений.Вставить("МассивСсылокТ", МассивСсылокТ);
			
			Если ВернутьТолькоФлагНаличия Тогда
				Возврат ЕстьСообщения;
			ИначеЕсли ЕстьСообщения Тогда
				Возврат СтруктураСообщений;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ВернутьТолькоФлагНаличия Тогда
			Возврат ЛОЖЬ;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
Функция   ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект(Знач Ссылка, Знач ТипМетаданных, Знач ИмяОбъектаМетаданных) Экспорт
	
	СтруктураРезультат = Новый Структура;
	Мета = Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных);
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		СтруктураРезультат.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Если ТипМетаданных = "Справочники" Тогда
		СтруктураРезультат.Вставить("Код", Ссылка.Код);
		СтруктураРезультат.Вставить("Наименование", Ссылка.Наименование);
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		СтруктураРезультат.Вставить("Дата", Ссылка.Дата);
		СтруктураРезультат.Вставить("Номер", Ссылка.номер);
		
	КонецЕсли;
	
	Попытка 
		СтруктураРезультат.Вставить("Ответственный", Ссылка.Ответственный);
		СтруктураРезультат.Вставить("ДатаСоздания", Ссылка.ДатаСоздания);
		СтруктураРезультат.Вставить("ДатаРедакции", Ссылка.ДатаРедакции);
	Исключение 	
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции // ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект
Функция   ПолучитьСтруктуруИзРеквизитов(Знач Ссылка, Знач РазделМетаданных = "Справочники") Экспорт
	
	Результат = Новый Структура("Ссылка", Ссылка);
	
	Если РазделМетаданных = "Справочники" Тогда	
		Результат.Вставить("Наименование", Ссылка.Наименование);
		Результат.Вставить("Код", Ссылка.Код);
	ИначеЕсли РазделМетаданных = "Документы" Тогда	
		Результат.Вставить("Дата", Ссылка.Дата);
		Результат.Вставить("Номер", Ссылка.Номер);
	КонецЕсли;
	
	Если Ссылка.Команды.Количество() = 0 Тогда
		Результат.Вставить("Идентификатор", "");
	Иначе
		Результат.Вставить("Идентификатор", Ссылка.Команды[0].Идентификатор);
	КонецЕсли;	
	
	Для Каждого РеквизитОбъекта Из Метаданные[РазделМетаданных][Ссылка.Метаданные().Имя].Реквизиты Цикл
		Результат.Вставить(РеквизитОбъекта.Имя, Ссылка[РеквизитОбъекта.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ПолучитьСтруктуруИзРеквизитов
Функция   ПолучитьТекущегоСотрудника() Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Возврат ТекущийПользователь.Сотрудник;
	Иначе
		Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(СокрЛП(ТекущийПользователь));
		Возврат Сотрудник;
	КонецЕсли;
	
КонецФункции //ПолучитьТекущегоСотрудника
Функция   ПользователяТекущаяДата() Экспорт
	
	РабочаяДатаПользователя = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РабочаяДата");
	Если РабочаяДатаПользователя = '00010101000000'
		ИЛИ РабочаяДатаПользователя =Неопределено Тогда
		
		Возврат ТекущаяДата();
	Иначе
		Возврат РабочаяДатаПользователя;
	КонецЕсли;
	
КонецФункции
Процедура ПроверитьДоступКНастройкамОтчета(ФормаОтчета, Знач ИмяОтчета, Знач Отказ = ЛОЖЬ, Знач ЭтоОбщаяФорма = ЛОЖЬ) Экспорт
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		Если НЕ ЭтоОбщаяФорма Тогда
			ИмяОтчета = СтрЗаменить(СтрЗаменить(ИмяОтчета, "Отчет.", ""), ".Форма.ФормаОтчета", "");	
		КонецЕсли;
		
		Запрет = ОбщийМодульПовтор.ПолучитьЗапретНаНастройкиОтчета(ИмяОтчета, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
		Если Запрет Тогда				
			
			Попытка
				ФормаОтчета.Элементы.ЗагрузитьВариант.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
			Попытка
				ФормаОтчета.Элементы.ИзменитьВариант.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
			Попытка
				ФормаОтчета.Элементы.НастройкиОтчета.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ОграниченКонтрагент) Тогда
		
		ЭлементФормыОтбора = ФормаОтчета.Элементы.Найти("ОтборПоКонтрагенту");
		Если НЕ ЭлементФормыОтбора = Неопределено Тогда
			ЭлементФормыОтбора.Видимость = ЛОЖЬ;
		КонецЕсли;
		Попытка 
			формаотчета["ОтборПоКонтрагенту"] = ПараметрыСеанса.ОграниченКонтрагент;
		Исключение 	
		КонецПопытки;
		
		Если ТипЗнч(ПараметрыСеанса.ОграниченКонтрагент) = Тип("СправочникСсылка.Клиенты") Тогда
			ЭлементФормыОтбора = ФормаОтчета.Элементы.Найти("ОтборПоКлиенту");
			Если НЕ ЭлементФормыОтбора = Неопределено Тогда
				ЭлементФормыОтбора.Видимость = ЛОЖЬ;
			КонецЕсли;
			Попытка 
				формаотчета["ОтборПоКлиенту"] = ПараметрыСеанса.ОграниченКонтрагент;
			Исключение 	
			КонецПопытки;
			
		Иначе
			ЭлементФормыОтбора = ФормаОтчета.Элементы.Найти("ОтборПоПоставщику");
			Если НЕ ЭлементФормыОтбора = Неопределено Тогда
				ЭлементФормыОтбора.Видимость = ЛОЖЬ;
			КонецЕсли;
			Попытка 
				формаотчета["ОтборПоПоставщику"] = ПараметрыСеанса.ОграниченКонтрагент;
			Исключение 	
			КонецПопытки;
			
		КонецЕсли;
		
		ВидЦенКлиентуПользователюДляОтчетаПоОстаткам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенКлиентуПользователюДляОтчетаПоОстаткам");
		Если ЗначениеЗаполнено(ВидЦенКлиентуПользователюДляОтчетаПоОстаткам) Тогда
			ЭлементФормыОтбора = ФормаОтчета.Элементы.Найти("ОтборПоВидуЦен");
			Если НЕ ЭлементФормыОтбора = Неопределено Тогда
				ЭлементФормыОтбора.Видимость = ЛОЖЬ;
			КонецЕсли;
			Попытка 
				формаотчета["ОтборПоВидуЦен"] = ВидЦенКлиентуПользователюДляОтчетаПоОстаткам;
			Исключение 	
			КонецПопытки;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДоступКНастройкамОтчета
Функция   ПроверитьОтказДоступа(Знач КодПрава, Форма = Неопределено, Знач Отказ = ЛОЖЬ, Знач Объект = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ) Экспорт
	
	Если ВернутьСтруктуру Тогда
		Результат = Новый Структура;
		Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ПолныйДоступ);
		Результат.Вставить("Отказ", Отказ);
	Иначе
		Результат = Отказ;
	КонецЕсли;
	
	Если НЕ Отказ
		И НЕ ПустаяСтрока(КодПрава)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		ТекущийПользователь = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		
		ОписаниеДоступа = ОбщийМодульПовтор.ПолучитьУровеньДоступа(КодПрава, ТекущийПользователь);
		
		Если НЕ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ПолныйДоступ Тогда
			
			ТолькоПросмотр = ЛОЖЬ;
			Если ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.НетДоступа Тогда
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ИСТИНА);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.НетДоступа);
				Иначе
					Результат = ИСТИНА;	
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				
				ТолькоПросмотр = ИСТИНА;
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ЛОЖЬ);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ТолькоЧтение);
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ДоступПриУсловии 
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено 
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ОбъектДоступа = Объект.Ссылка;
				Результат1 = ИСТИНА;
				Попытка 
					Выполнить(" Результат1 = НЕ (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ТекстОписаниеОшибки + " (" + КодПрава + ")", Объект);
				КонецПопытки;
				
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", Результат1);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.НетДоступа);
				Иначе
					Результат = Результат1;
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.БезУсловияЧтение
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ОбъектДоступа = Объект.Ссылка;
				ПолныйДоступ = ЛОЖЬ;
				Попытка 
					Выполнить(" ПолныйДоступ = (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					ТолькоПросмотр = НЕ ПолныйДоступ;
					
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ТекстОписаниеОшибки + " (" + КодПрава + ")", Объект);
				КонецПопытки;
				
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ЛОЖЬ);
					Результат.Вставить("УровеньДоступа", ?(ТолькоПросмотр, Перечисления.УровниДоступа.ТолькоЧтение, Перечисления.УровниДоступа.НетДоступа));
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ЧтениеПриУсловии Тогда
				
				ЧтениеВозможно = ИСТИНА;
				Если НЕ Объект = Неопределено
					И ЗначениеЗаполнено(Объект.Ссылка) 
					И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа) Тогда					
					
					ОбъектДоступа = Объект.Ссылка;
					Попытка 
						Выполнить(" ЧтениеВозможно = (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
						
					Исключение 	
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия чтения") + ": " + ТекстОписаниеОшибки + " (" + КодПрава + ")", Объект);
					КонецПопытки;                       	
				КонецЕсли;
				
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", НЕ ЧтениеВозможно);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ТолькоЧтение);
				Иначе
					Результат = НЕ ЧтениеВозможно;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если Отказ
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриОтказеВДоступеВыводитьСообщение") Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В доступе отказано") + ": " + ОписаниеДоступа.ОбъектДоступа);
			КонецЕсли;					
			
			Если ТолькоПросмотр 
				И НЕ Форма = Неопределено Тогда
				
				Форма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Только просмотр") + ": " + Форма.Заголовок;
				Для Каждого ЭлементФормы Из Форма.Элементы Цикл
					Попытка
						ЭлементФормы.ТолькоПросмотр = ИСТИНА;
						
					Исключение
						Попытка
							ЭлементФормы.Доступность = ЛОЖЬ;
						Исключение
						КонецПопытки;
					КонецПопытки;
					
				КонецЦикла;  				
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция   ПроверитьПравоРедакции(Знач КодПрава, Знач Объект = Неопределено) Экспорт
	
	Результат = ИСТИНА;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		ОписаниеДоступа = ОбщийМодульПовтор.ПолучитьУровеньДоступа(КодПрава, ПараметрыСеанса.ТекущийПользователь);
		
		Если НЕ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ПолныйДоступ Тогда
			
			Результат = ЛОЖЬ;
			Если (ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ДоступПриУсловии 
				ИЛИ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.БезУсловияЧтение)
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено 
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ОбъектДоступа = Объект.Ссылка;
				Результат1 = ИСТИНА;
				Попытка 
					Выполнить(" Результат1 = НЕ (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					Результат = Результат1;
					
				Исключение 	
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ТекстОписаниеОшибки, Объект);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция   ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита(Знач СуществующаяСсылка, Знач ИмяРеквизита, Знач ЗначениеРеквизита = Неопределено) Экспорт
	
	РезультатПроверки = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(СуществующаяСсылка)
		И ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		РезультатПроверки = СуществующаяСсылка.Ссылка[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита
Функция   РегистрационныйКод(Знач ИзСвойств = ЛОЖЬ) Экспорт	
	Возврат ОбщийМодульПовтор.РегистрационныйКод(ИзСвойств);	
КонецФункции // РегистрационныйКод
Функция   СледуетВыполнитьОперацииПередЗавершением() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СообщатьОНеактуальностиВаловойИПредлагатьПерепроведениеПриВыходеПоследнего", ИСТИНА)
		И НЕ Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить() = '00010101000000' 
		И ОбщийМодульСерверПривилегия.НетБольшеПодключенийКБазеДанных() Тогда
		
		Результат.Добавить("Восстановление Валовой Прибыли");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СледуетВыполнитьОперацииПередЗавершением
Процедура СообщитьПользователю(	
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = ЛОЖЬ) Экспорт
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю, КлючДанных, Поле, ПутьКДанным, Отказ);
КонецПроцедуры
Функция   ТекущийЯзыкРусский() Экспорт
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы) ИЛИ ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский")
КонецФункции //ТекущийЯзыкРусский
Процедура УстановитьЗначениеКонстанты(Знач НаименованиеКонстанты, Знач ЗначениеКонстанты, Знач ВыполнитьПривилегированно = ЛОЖЬ, Знач УстановитьТолькоЕслиНеРавно = ЛОЖЬ) Экспорт
	
	Устанавливать = ИСТИНА;
	
	Если УстановитьТолькоЕслиНеРавно Тогда
		ТекущееЗначение = Константы[НаименованиеКонстанты].Получить();
		Если НЕ ТекущееЗначение = ЗначениеКонстанты Тогда
			Устанавливать = ИСТИНА;
		Иначе
			Устанавливать = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;
	
	Если Устанавливать Тогда
		Если ВыполнитьПривилегированно Тогда
			ОбщийМодульСерверПривилегия.УстановитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеКонстанты);
		Иначе
			Константы[НаименованиеКонстанты].Установить(ЗначениеКонстанты);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры
Процедура УстановитьЗначениеПараметраИлиКонстанты(Знач ИмяПараметраИлиКонстанты, Знач ЗначениеПараметраИлиКонстанты, Знач ТолькоКонстанта = ЛОЖЬ, Знач Комментарий = "") Экспорт
	
	Если НЕ ТолькоКонстанта 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЛичныеНастройкиПользователей", ИСТИНА) Тогда // осторожно
		
		НастройкаПользователя = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		НастройкаПользователя.Активность = ИСТИНА;
		НастройкаПользователя.ДатаУстановки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		НастройкаПользователя.ЗначениеНастройки = ЗначениеПараметраИлиКонстанты;
		НастройкаПользователя.Комментарий = Комментарий;
		НастройкаПользователя.Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяПараметраИлиКонстанты];
		НастройкаПользователя.Пользователь = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		
		Попытка // Записи в регистр сведений 
			НастройкаПользователя.Записать(ИСТИНА);
			
		Исключение // Записи в регистр сведений 
		КонецПопытки; // Записи в регистр сведений
		
	Иначе
		ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты(ИмяПараметраИлиКонстанты, ЗначениеПараметраИлиКонстанты);
	КонецЕсли;   
	
КонецПроцедуры
Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	ПараметрыСеанса[ИмяПараметра] = ЗначениеПараметра;
КонецПроцедуры
Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля(Знач ВерсияПриложения = 0) Экспорт
	
	ПараметрыСеанса.ТекущийПользователь = ОпределитьПользователя();
	
	ИспользоватьЖурналированиеСобытий 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЖурналированиеСобытий");
	
	ПараметрыСеанса.ВыполнениеКодаЗаблокировано 			= ЛОЖЬ;	
	ПараметрыСеанса.ВерсияПриложения = ВерсияПриложения;
	ПараметрыСеанса.МногоФункциональныйФлаг = ЛОЖЬ;
	ПараметрыСеанса.ИспользоватьЖурналированиеСобытий 		= ИспользоватьЖурналированиеСобытий;
	ПараметрыСеанса.ВестиЗаписьВЖурналВсехОбычныхДействий 	= ИспользоватьЖурналированиеСобытий И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиЗаписьВЖурналВсехОбычныхДействийПользователей");	
	ТекущийЯзыкИнтерфейсаПрограммы 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	
	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если НЕ ДанныеТекущегоПользователя.Язык = Неопределено Тогда
		
		ДанныеТекущегоПользователяЯзыкИмя = ДанныеТекущегоПользователя.Язык.Имя;
		Если СокрЛП(ДанныеТекущегоПользователяЯзыкИмя) = "Русский" Тогда
			ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Русский ;
			
		Иначе			
			ТекущийЯзыкИнтерфейсаПрограммы = Неопределено;
			
			Если ДанныеТекущегоПользователяЯзыкИмя = "Українська" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Украинский ;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Белорусский" Тогда		
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Белорусский ;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "English" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.English ;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Румынский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Румынский;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Китайский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Китайский;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Немецкий" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Немецкий;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Тайский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Тайский;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Польский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Польский;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Болгарский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Болгарский;
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Казахский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Казахский;				
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Азербайджанский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Азербайджанский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Вьетнамский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Вьетнамский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Грузинский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Грузинский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Латышский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Латышский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Литовский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Литовский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Турецкий" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Турецкий;					
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Арабский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Арабский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Армянский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Армянский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Чешский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Чешский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Эстонский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Эстонский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Французский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Французский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Иврит" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Иврит;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Хинди" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Хинди;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Венгерский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Венгерский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Итальянский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Итальянский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Японский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Японский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Словацкий" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Словацкий;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Корейский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Корейский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Таджикский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Таджикский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Узбекский" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Узбекский;	
			ИначеЕсли ДанныеТекущегоПользователяЯзыкИмя = "Другой" Тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Другой;	
			КонецЕсли;			
			
			Если НЕ ТекущийЯзыкИнтерфейсаПрограммы = Неопределено Тогда				
				Если ОбщийМодульТекстСервер.НетНиОднойЗаписиЭтогоЯзыка(ТекущийЯзыкИнтерфейсаПрограммы) Тогда				
					ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ТекущийЯзыкИнтерфейсаПрограммы.Код, ТекущийЯзыкИнтерфейсаПрограммы);		
				КонецЕсли;
				
			Иначе
				ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= ТекущийЯзыкИнтерфейсаПрограммы;
	Иначе
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;
	
	ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
	ИспользоватьСкидки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
	ПараметрыСеанса.ИспользоватьСкидкиПС 										= ИспользоватьСкидки;
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов 		= ИспользоватьСкидки И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов", ИСТИНА);
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры 	= ИспользоватьСкидки И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры", ИСТИНА);
	ПараметрыСеанса.ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар 		= ИспользоватьСкидки И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар");
	ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен", ИСТИНА);
	ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже");
	ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
	ПараметрыСеанса.РекомендуемыйМинимальныйОстатокТовара 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РекомендуемыйМинимальныйОстатокТовара");
	ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара", ИСТИНА);
	ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп", ИСТИНА);
	ПараметрыСеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами", ИСТИНА);
	
	ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц", ИСТИНА);
	ПараметрыСеанса.ВестиУчетВалютВСеансе 				  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют", ИСТИНА);
	ЗапретитьИзмененияВПрошломПериоде 					  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде", ИСТИНА);
	ПараметрыСеанса.ДействуетЗапретИзмененийПрошлого 	  = (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты) ИЛИ (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока);
	ПараметрыСеанса.ИспользоватьНаборыТоваровПС 		  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров", ИСТИНА);	
	ПараметрыСеанса.ИспользоватьЦеныИСуммыВСеансе		  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЦеныИСуммы");
	ПараметрыСеанса.ИспользоватьКоличественныйУчетВСеансе = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКоличественныйУчет");
	
	Попытка 
		ПараметрыСеанса.РабочаяДата = ПараметрыСеанса.РабочаяДата;	
	Исключение 	
		ПараметрыСеанса.РабочаяДата = '00010101000000';	
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
	Исключение 	
		ПараметрыСеанса.НеВыводитьСообщений = ЛОЖЬ;		
	КонецПопытки;
	
	РолиРеализатора = ЛОЖЬ;
	Попытка 
		Выполнить(" РолиРеализатора = РольДоступна(""Реализация"") И Не РольДоступна(""ПолныеПрава"") И Не РольДоступна(""РеализацияИПриемТовара"") ");
	Исключение 	
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеМожетМенятьЦены = ОбщийМодульСерверПривилегия.ЕстьПользователи() И РолиРеализатора И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");
	Исключение 	
		ПараметрыСеанса.НеМожетМенятьЦены = ЛОЖЬ;
	КонецПопытки;
	
	ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры", ИСТИНА);
	Попытка 
		ПараметрыСеанса.ОграниченКонтрагент = ПараметрыСеанса.ОграниченКонтрагент;
	Исключение 	
		ПараметрыСеанса.ОграниченКонтрагент = Неопределено;
	КонецПопытки;	
	
КонецПроцедуры
функция   ЭтоНоваяВерсия(Знач ВернутьВерсиюЕслиНовая = ЛОЖЬ) Экспорт
	
	ВерсияКонфигурации = Лев(ВРег(СокрЛП(Метаданные.Версия)), 6);
	ВерсияБыла 		   = Лев(ВРег(СокрЛП(Константы.ВерсияПрограммы.Получить())), 6);
	
	Если ВернутьВерсиюЕслиНовая Тогда
		Возврат ?(Не ВерсияБыла = ВерсияКонфигурации, ВерсияКонфигурации, "");;
	Иначе
		Возврат Не ВерсияБыла = ВерсияКонфигурации;
	КонецЕсли;	
	
КонецФункции
