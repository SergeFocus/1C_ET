//sza150113-0333
//sza150109-2321 НЧ
//sza141112-0229 
//sza140831-0328
//sza140804-2013 личные настройки
//sza140522-0303  
//sza131211-1456  

Функция   ВывестиМакетЧтоНового(ТабДок) Экспорт
	
	Если РегистрационныйКод() = "ah" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МакетЧтоНового = ПолучитьОбщийМакет("ЧтоНового");
	
	ВерсияПриИнсталляции = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПриИнсталляции");
	Попытка
		ЧислоВерсияПриИнсталляции = Число(Лев(ВерсияПриИнсталляции, 6));
	Исключение
		ЧислоВерсияПриИнсталляции = 0;
	КонецПопытки;
	МассивНеобходимыхОбластей = Новый ТаблицаЗначений;
	МассивНеобходимыхОбластей.Колонки.Добавить("ИмяОбласти");
	
	Для Каждого Область Из МакетЧтоНового.Области Цикл
		
		ИмяОбласти = СтрЗаменить(Область.Имя, "Ш", "");
		Если НЕ ПустаяСтрока(ИмяОбласти) Тогда
			
			попытка
				НомерОбласти = Число(ИмяОбласти);
				Если НомерОбласти > ЧислоВерсияПриИнсталляции Тогда
					СтрокаТаблицы = МассивНеобходимыхОбластей.Добавить();
					СтрокаТаблицы.ИмяОбласти = Область.Имя;
				КонецЕсли;
			исключение
			конецпопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МассивНеобходимыхОбластей.Количество() = 0 Тогда
		
		Ш = МакетЧтоНового.ПолучитьОбласть("Ш");	
		ТабДок.Вывести(Ш);
		
		МассивНеобходимыхОбластей.Сортировать("ИмяОбласти УБЫВ");
		Для Каждого ОбластьМассива Из МассивНеобходимыхОбластей Цикл
			Ш = МакетЧтоНового.ПолучитьОбласть(ОбластьМассива.ИмяОбласти);	
			ТабДок.Вывести(Ш);                   	               	
		КонецЦикла;
		
		Возврат ИСТИНА;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция   ДатаПервогоДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 ВаловаяПрибыль.Период КАК Период
	|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Деньги.Период
	|ИЗ РегистрНакопления.Деньги КАК Деньги
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Период
	|ИЗ РегистрНакопления.Закупки КАК Закупки
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Зарплата.Период
	|ИЗ РегистрНакопления.Зарплата КАК Зарплата
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Период
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Расчеты.Период
	|ИЗ РегистрНакопления.Расчеты КАК Расчеты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Период
	|ИЗ РегистрНакопления.Товары КАК Товары
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыКлиентов.Период
	|ИЗ РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыПоставщикам.Период
	|ИЗ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 ОплатаПоЗаказам.Период
	|ИЗ РегистрНакопления.ОплатаПоЗаказам КАК ОплатаПоЗаказам
	|УПОРЯДОЧИТЬ ПО Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Период;
		
	Иначе
		Возврат '19800225044500';
	КонецЕсли;		
	
КонецФункции //ДатаПервогоДокумента

Процедура ДобавитьСообщениеПользователю(Знач СообщениеПользователю, Знач СтатусСообщенияТ = Неопределено, Знач Ссылка = Неопределено) Экспорт	
	
	СообщениеДляПользователя = РегистрыСведений.СообщенияПользователюОтСистемы.СоздатьМенеджерЗаписи();
	СообщениеДляПользователя.Пользователь = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
	СообщениеДляПользователя.Сообщение    = СообщениеПользователю;
	СообщениеДляПользователя.Ссылка		  = Ссылка;
	
	Если СтатусСообщенияТ = СтатусСообщения.БезСтатуса Тогда
		СообщениеДляПользователя.Порядок = 5;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Важное Тогда
		СообщениеДляПользователя.Порядок = 1;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Внимание Тогда
		СообщениеДляПользователя.Порядок = 2;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Информация Тогда
		СообщениеДляПользователя.Порядок = 3;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.Обычное Тогда
		СообщениеДляПользователя.Порядок = 4;
	ИначеЕсли СтатусСообщенияТ = СтатусСообщения.ОченьВажное Тогда
		СообщениеДляПользователя.Порядок = 0;		
	КонецЕсли;
	СообщениеДляПользователя.Активность = ИСТИНА;
	
	Если НЕ СообщениеПользователю = "ПредложениеВосстановленияВаловойПрибыли" Тогда
		сообщить(СообщениеПользователю);
	КонецЕсли;	
	
	Попытка
		СообщениеДляПользователя.Записать(ИСТИНА);
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

Функция   ЕстьЛиРеквизит(Знач ВидДокумента, Знач ИмяРеквизита, Знач ИмяТаблицы = "") Экспорт
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		Результат = Метаданные.Документы[ВидДокумента].Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
	Иначе
		ТабЧасть = Метаданные.Документы[ВидДокумента].ТабличныеЧасти.Найти(ИмяТаблицы); 
		Результат = ТабЧасть <> Неопределено И ТабЧасть.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //

Процедура ЗаписатьДополнительнуюИнформацию(Знач ОбъектСсылка, Знач ДополнительнаяИнформация) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанных", ИСТИНА) 
		И НЕ ДополнительнаяИнформация.Количество() = 0 Тогда
		
		ДопИнфо = РегистрыСведений.ЗначенияДополнительныхРеквизитов.СоздатьНаборЗаписей();
		ДопИнфо.Отбор.ОбъектВладелец.Значение = ОбъектСсылка;
		ДопИнфо.Отбор.ОбъектВладелец.Использование = ИСТИНА;
		ДопИнфо.Очистить();
		
		Для Каждого СтрокаДопИнформации Из ДополнительнаяИнформация Цикл
			
			Информация = СтрокаДопИнформации.Информация;
			Если НЕ ПустаяСтрока(Информация) Тогда
				ДопИнфоСтрока = ДопИнфо.Добавить();   
				ДопИнфоСтрока.Активность 			 = ИСТИНА;
				ДопИнфоСтрока.Период 				 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				ДопИнфоСтрока.ДополнительныйРеквизит = СтрокаДопИнформации.ВидИнформации ;
				ДопИнфоСтрока.ОбъектВладелец 		 = ОбъектСсылка;
				ДопИнфоСтрока.ЗначениеРеквизита 	 = СтрокаДопИнформации.Информация;	
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка  
			ДопИнфо.Записать(ИСТИНА);
			
		Исключение 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр дополнительной информации") + ": " + ДопИнфо + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектСсылка);
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительнуюИнформацию(Знач ОбъектСсылка, ДополнительнаяИнформация, Знач ДопИнфоТипВладельца = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительнуюИнформациюДляОбъектовБазыДанных", ИСТИНА) Тогда
		
		Если ДопИнфоТипВладельца = Неопределено Тогда
			ДопИнфоТипВладельца = ОбщийМодульПовтор.ПолучитьТипВладельца(ОбъектСсылка); 	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК ВидИнформации,
		|	ЕСТЬNULL(ВложенныйЗапрос.ЗначениеРеквизита, ДополнительныеРеквизиты.ЗначениеПоУмолчанию) КАК Информация
		|ИЗ Справочник.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ЗначениеРеквизита КАК ЗначениеРеквизита,
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ОбъектВладелец КАК ОбъектВладелец,
		|			ЗначенияДополнительныхРеквизитовСрезПоследних.ДополнительныйРеквизит КАК ДополнительныйРеквизит
		|		ИЗ
		|			РегистрСведений.ЗначенияДополнительныхРеквизитов.СрезПоследних(, ОбъектВладелец = &ОбъектВладелец) КАК ЗначенияДополнительныхРеквизитовСрезПоследних) КАК ВложенныйЗапрос
		|		ПО ДополнительныеРеквизиты.Ссылка = ВложенныйЗапрос.ДополнительныйРеквизит
		|ГДЕ ДополнительныеРеквизиты.ЭтоРеквизитДляОбъекта = &ЭтоРеквизитДляОбъекта";
		
		Запрос.УстановитьПараметр("ОбъектВладелец", ОбъектСсылка);		
		Запрос.УстановитьПараметр("ЭтоРеквизитДляОбъекта", ДопИнфоТипВладельца);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДополнительнаяИнформация.Загрузить(РезультатЗапроса.Выгрузить());			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

функция   ОбновиласьВерсия() Экспорт
	
	ВерсияКонфигурации 		= Лев(ВРЕГ(СокрЛП(Метаданные.Версия)), 6);
	ВерсияБыла 				= Лев(ВРЕГ(СокрЛП(Константы.ВерсияПрограммы.Получить())), 6);
	ПисьмаНеБыло			= ИСТИНА;
	РегистрационныйКод		= РегистрационныйКод();
	
	ВерсияПриИнсталляции 	= Лев(ВРЕГ(СокрЛП(Константы.ВерсияПриИнсталляции.Получить())), 6);
	Если НЕ ЗначениеЗаполнено(ВерсияПриИнсталляции) Тогда		
		Константы.ВерсияПриИнсталляции.Установить(ВерсияКонфигурации);		
	КонецЕсли;
	
	Если ВерсияБыла = ВерсияКонфигурации тогда		
		Возврат ЛОЖЬ;
		
	Иначе		
		ОбщийМодульСерверПривилегия.ОбновитьДанныеПриОбновленииКонфигурации(ВерсияБыла, ВерсияКонфигурации);
		
		Если ПисьмаНеБыло 
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеОтправлятьСтатистикуАвторуПрограммыПриПервомЗапускеИОбновлении") Тогда
			
			СтруктураПисьма = Новый Структура;
			СтруктураПисьма.Вставить("ОтКого", "АвтоОБНОВЛЕНИЕ");
			СтруктураПисьма.Вставить("ТемаСообщения", "upver");
			СтруктураПисьма.Вставить("ТекстСообщения", "Было: " + ВерсияБыла);
			СтруктураПисьма.Вставить("РегистрационныйКод", РегистрационныйКод);
			
			ОбщийМодульСервисСервер.письмоавтору(СтруктураПисьма);	
		КонецЕсли;
		
		Константы.ВерсияПрограммы.Установить(ВерсияКонфигурации);
		
		Возврат ИСТИНА;
		
	КонецЕсли;	
	
КонецФункции

Процедура ОправитьПоEMAILКонтрагентуНаСервере(Знач ТекстСопровождения, Знач Результат, Знач ИмяДокумента, Знач ВозможноЕмейл = "") Экспорт	
	ОбщийМодульСервисСервер.ПисьмоКонтрагенту(неопределено, Результат, ТекстСопровождения, ИмяДокумента, ВозможноЕмейл);	
КонецПроцедуры

Функция   ОпределитьПользователя()	
	Возврат ОбщийМодульПовтор.ОпределитьПользователя();	
КонецФункции //ОпределитьПользователя

Процедура ОформитьФорматКоличества(ЭлементФормы, Знач ТолькоФорматРедактирования = ЛОЖЬ, Знач ТолькоФормат = ЛОЖЬ) Экспорт
	
	КоличествоНоменклатурыМожетБытьДробным = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КоличествоНоменклатурыМожетБытьДробным");
	
	Если КоличествоНоменклатурыМожетБытьДробным ТОгда
		ЧислоЗнаковПослеЗапятойДляКоличества = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЗнаковПослеЗапятойДляКоличества", ИСТИНА);		
		ФорматКоличества = "ЧЦ=15; ЧДЦ=" + СокрЛП(ЧислоЗнаковПослеЗапятойДляКоличества);
	Иначе
		ФорматКоличества = "ЧЦ=12; ЧДЦ=0";
	КонецЕсли;
	
	Если НЕ ТолькоФорматРедактирования Тогда
		ЭлементФормы.Формат = ФорматКоличества; 	
	КонецЕсли;
	Если НЕ ТолькоФормат Тогда
		ЭлементФормы.ФорматРедактирования = ФорматКоличества;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Знач ИмяОперации) Экспорт	
	
	Если ИмяОперации = "Восстановление Валовой Прибыли" Тогда
		ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
	КонецЕсли;
	
КонецПроцедуры //ОбщийМодульСервисСервер

Процедура ПисьмоАвтору(Знач СтруктураПисьма = Неопределено) Экспорт
	
	Если НЕ СтруктураПисьма = Неопределено
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") Тогда
		
		ВыводитьСообщениеОбшибке = ЛОЖЬ;		
		Отмена = ЛОЖЬ;
		
		Профиль = Новый ИнтернетПочтовыйПрофиль;  
		Попытка
			Профиль.ИспользоватьSSLSMTP = ИСТИНА;//ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLSMTP");
			
		Исключение
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия платформы 1С должна быть не ниже 8.2.19!!"));
			Отмена = ИСТИНА;
		КонецПопытки;
		
		Если НЕ Отмена Тогда
			Профиль.АдресСервераSMTP = "smtp.mail.ru";
			Профиль.ВремяОжидания 	 = 5;
			Профиль.Пароль 			 = "imexinfo";Профиль.Пользователь= "imexconsol";
			Профиль.ПортSMTP		 = 465;
			Профиль.ПарольSMTP 		 = "imexinfo";Профиль.ПользовательSMTP = "imexconsol@mail.ru";
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			
			ИнтернетПочта = Новый ИнтернетПочта;
			Если НЕ СтруктураПисьма = Неопределено тогда
				СтруктураПисьма.Свойство("Вручную", ВыводитьСообщениеОбшибке);	
			КонецЕсли;
			Если ВыводитьСообщениеОбшибке = Неопределено Тогда
				ВыводитьСообщениеОбшибке = ЛОЖЬ;
			КонецЕсли;
			
			Попытка
				ИнтернетПочта.Подключиться(Профиль);
				текстписьма   = "";
				ТемаСообщения = "";
				
				Если НЕ СтруктураПисьма = Неопределено Тогда
					ТемаСообщения = СтруктураПисьма.ТемаСообщения;
					
					текстписьма = текстписьма + СтруктураПисьма.Откого + символы.пс;
					текстписьма = текстписьма + СтруктураПисьма.РегистрационныйКод + символы.пс;				
					текстписьма = текстписьма + ТемаСообщения + символы.пс;
					текстписьма = текстписьма + СтруктураПисьма.ТекстСообщения + символы.пс;
					текстписьма = текстписьма + символы.пс;				
				КонецЕсли;			
				
				Письмо = Новый ИнтернетПочтовоеСообщение;
				письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
				//письмо.Вложения.Добавить();
				письмо.ИмяОтправителя = "imexconsol@mail.ru"; письмо.Отправитель = "imexconsol@mail.ru";                                 письмо.Получатели.Добавить("sza@ukr.net");
				
				СисИнфо = Новый СистемнаяИнформация;
				ИмяКомпьютера = "";
				ТекущийКодЛокализации = "";
				#Если Не ВебКлиент Тогда
					ИмяКомпьютера = ИмяКомпьютера(); 
					ТекущийКодЛокализации = ТекущийКодЛокализации();
				#КонецЕсли      
				СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
				ТекущийРежимЗапуска = СокрЛП(ТекущийРежимЗапуска());
				
				//Письмо автору не содержит какой либо конфеденциональной информации
				//здесь время, тип винды, версия платформы 1С, ип 1С-клиента, версия собственно конфигурации
				письмо.Тема = "ЭТ " + Метаданные.Версия + " " + ТемаСообщения;
				текстписьма = текстписьма + "_____" + Символы.ПС;
				текстписьма = текстписьма + "Name: " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати") + символы.пс;
				текстписьма = текстписьма + "Data: " + символы.ВТаб + ТекущаяДата() + Символы.ПС;
				текстписьма = текстписьма + "clc : " + символы.ВТаб + ПолучитьЧасовойПоясИнформационнойБазы() + символы.пс;			
				текстписьма = текстписьма + "ПК  : " + символы.ВТаб + ИмяКомпьютера + символы.пс;			
				текстписьма = текстписьма + "OS  : " + символы.ВТаб + СисИнфо.ВерсияОС + + " " + символы.пс;
				текстписьма = текстписьма + "WnwS: " + символы.ВТаб + СисИнфо.ТипПлатформы + символы.пс;
				текстписьма = текстписьма + "Proc: " + символы.ВТаб + СисИнфо.Процессор + Символы.ПС;			
				текстписьма = текстписьма + "RAM : " + символы.ВТаб + СисИнфо.ОперативнаяПамять + символы.пс;
				текстписьма = текстписьма + "1Сv : " + символы.ВТаб + СисИнфо.ВерсияПриложения + символы.пс;
				текстписьма = текстписьма + "brws: " + символы.ВТаб + СисИнфо.ИнформацияПрограммыПросмотра + символы.пс;
				текстписьма = текстписьма + "loc : " + символы.ВТаб + ТекущийКодЛокализации + символы.пс;
				текстписьма = текстписьма + "base: " + символы.ВТаб + СтрокаСоединенияИнформационнойБазы + символы.пс;
				текстписьма = текстписьма + "reg : " + символы.ВТаб + ТекущийРежимЗапуска + символы.пс;
				текстписьма = текстписьма + "Закончена настр: " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка") + Символы.ПС ;
				текстписьма = текстписьма + "Заголовок окна : " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы") + Символы.ПС ;
				текстписьма = текстписьма + "Язык интерфейса: " + символы.ВТаб + ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы + Символы.ПС ;
				текстписьма = текстписьма + "Число объектов : " + символы.ВТаб + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоОбъектов") + Символы.ПС ;
				
				текстписьма = текстписьма + Символы.ПС + "--" + Символы.ПС + письмо.Тема;
				ЭлектроннаяПочтаПодпись = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись");
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаПодпись) Тогда
					текстписьма = текстписьма + Символы.ПС + ЭлектроннаяПочтаПодпись;
				КонецЕсли;
				
				ЭлектроннаяПочтаОтправитель = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаОтправитель) Тогда
					текстписьма = текстписьма + Символы.ПС + ЭлектроннаяПочтаОтправитель;
				КонецЕсли;
				
				письмо.Тексты.Добавить(текстписьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
				
				интернетПочта.Послать(письмо);
				интернетПочта.Отключиться();
				
				Если ВыводитьСообщениеОбшибке 
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено."), , );
				КонецЕсли;
				
			Исключение
				Если ВыводитьСообщениеОбшибке 
					И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма") + ": " + ОписаниеОшибки(), , );
				КонецЕсли;
				
			КонецПопытки; 
		КонецЕсли;
		интернетПочта = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПисьмоКонтрагенту(Знач Контрагент = Неопределено, Знач Результат = Неопределено, Знач ТекстСопровождения, Знач НаименованиеДокумента, Знач ВозможноЕмейл = "") Экспорт
	
	Если НЕ найти(ВозможноЕмейл, "@") = 0 Тогда
		Адрес = ВозможноЕмейл;
	Иначеесли Контрагент = Неопределено Тогда //руководителю
		Адрес = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
	Иначе
		Адрес = Контрагент.ЭлектроннаяПочта;	
	КонецЕсли;    	
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;                                                       
	Отмена = ЛОЖЬ;
	Попытка
		Профиль.ИспользоватьSSLSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИспользоватьSSLSMTP");
		
	Исключение
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Версия платформы 1С должна быть не ниже 8.2.19!!"));
		Отмена = ИСТИНА;
	КонецПопытки;
	
	Если НЕ Отмена Тогда
		
		Профиль.АдресСервераPOP3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераPOP3");
		Профиль.АдресСервераSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаАдресСервераSMTP");
		Профиль.ВремяОжидания 	 = 12;
		Профиль.Пароль			 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПароль");
		Профиль.Пользователь	 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользователь");
		Профиль.ПортPOP3		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортPOP3");
		Профиль.ПортSMTP		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПортSMTP");
		Профиль.ПарольSMTP		 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПарольSMTP");
		Профиль.ПользовательSMTP = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПользовательSMTP");	
		
		ИнтернетПочта = Новый ИнтернетПочта;
		
		Попытка
			ИнтернетПочта.Подключиться(Профиль);
			
			ТемаСообщения = ТекстСопровождения;
			текстписьма = "" + ТекстСопровождения + Символы.ПС + "--" + Символы.ПС + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаПодпись");
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			письмо.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
			Письмо.Тема 	= Лев(НаименованиеДокумента + " - " + ТемаСообщения, 250); 
			
			Если НЕ результат = Неопределено Тогда
				Каталог = КаталогВременныхФайлов();
				
				попытка
					УдалитьФайлы(Каталог + "/Document.xls");
				Исключение
				Конецпопытки;
				
				Результат.Записать(Каталог + "/Document.xls", ТипФайлаТабличногоДокумента.XLS97);
				письмо.Вложения.Добавить(Каталог + "/Document.xls", ?(ЗначениеЗаполнено(НаименованиеДокумента), НаименованиеДокумента, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ")));	
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаКопироватьВТекстПисьмаСодержаниеДокумента") Тогда
					
					ИмяТемпФайла = ПолучитьИмяВременногоФайла(); 
					Результат.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.TXT); 
					текст = Новый текстовыйдокумент; 
					Текст.Прочитать(ИмяТемпФайла); 
					письмо.Тексты.Добавить(Текст.ПолучитьТекст() + Символы.ПС);
					
				КонецЕсли;
			КонецЕсли;
			
			письмо.ИмяОтправителя = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаИмяОтправителя");
			письмо.Отправитель 	  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
			письмо.Получатели.Добавить(Адрес);
			
			письмо.Тексты.Добавить(текстписьма, ТипТекстаПочтовогоСообщения.ПростойТекст);
			
			интернетПочта.Послать(письмо);
			интернетПочта.Отключиться(); 			
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Письмо отправлено" + ": " + Адрес), , );
			КонецЕсли;
			
		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при отправке письма") + ": " + ОписаниеОшибки(), , );
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	
	интернетПочта = Неопределено;
	
КонецПроцедуры

Функция   ПолучитьЗначениеНастройкиИлиКонстантыНаСервере(Знач ИмяКонстанты, Знач ТолькоКонстанта = ЛОЖЬ) Экспорт
	
	Если НЕ ТолькоКонстанта 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЛичныеНастройкиПользователей", ИСТИНА) Тогда //осторожно
		
		Попытка 
			Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяКонстанты];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ НастройкиПользователей.ЗначениеНастройки ИЗ РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ НастройкиПользователей.Пользователь = &Пользователь И НастройкиПользователей.Настройка = &Настройка";
			
			Запрос.УстановитьПараметр("Настройка", Настройка);
			Запрос.УстановитьПараметр("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				ВыборкаДетальныеЗаписи.Следующий();
				
				Результат = ВыборкаДетальныеЗаписи.ЗначениеНастройки;
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
				КонецЕсли;
				
			Иначе
				Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
			КонецЕсли;
			
		Исключение
			Попытка
			Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
		Исключение //ошибка константы;
			Результат = Неопределено;
		КонецПопытки;		
		КонецПопытки;		
		
	Иначе
		Результат = ОбщийМодульСервер.получитьЗначениеКонстанты(ИмяКонстанты);
	КонецЕсли;   
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьЗначениеРеквизита(Знач ЭлементОбъектИлиСсылка, Знач ИмяРеквизита) Экспорт	
	Возврат ЭлементОбъектИлиСсылка[ИмяРеквизита];	
КонецФункции //ПолучитьЗначениеРеквизита
 
Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт
	Возврат ПараметрыСеанса[ИмяПараметра];
КонецФункции

Функция   ПолучитьРодителя(Знач Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент.Родитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции //получитьРодителя

Функция   ПолучитьСообщенияСистемыПользователю(Знач глОтборСтруктура) Экспорт	
	
	ВыборкаДетальныеЗаписи = регистрысведений.СообщенияПользователюОтСистемы.Выбрать(глОтборСтруктура);
	
	ЕстьСообщения 		= ЛОЖЬ;
	СтруктураСообщений 	= Новый Структура;
	МассивСообщений 	= Новый Массив;
	МассивСсылокТ 		= Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЕстьСообщения = ИСТИНА;
		МассивСообщений.Добавить(ВыборкаДетальныеЗаписи.Сообщение);
		МассивССылокТ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		МенеджерЗаписи = ВыборкаДетальныеЗаписи.ПолучитьМенеджерЗаписи();			
		МенеджерЗаписи.Удалить();
	КонецЦикла;	
	
	СтруктураСообщений.Вставить("МассивСообщений", МассивСообщений);
	СтруктураСообщений.Вставить("МассивСсылокТ", МассивСсылокТ);
	//КонецЕсли;
	
	Если ЕстьСообщения Тогда
		Возврат СтруктураСообщений;
	Иначе
		возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект(Знач Ссылка, Знач ТипМетаданных, Знач ИмяОбъектаМетаданных) Экспорт
	
	СтруктураРезультат = Новый Структура;
	Мета = Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных);
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		СтруктураРезультат.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Если ТипМетаданных = "Справочники" Тогда
		СтруктураРезультат.Вставить("Код", Ссылка.Код);
		СтруктураРезультат.Вставить("Наименование", Ссылка.Наименование);
		
	ИначеЕсли ТипМетаданных = "Документы" Тогда
		СтруктураРезультат.Вставить("Дата", Ссылка.Дата);
		СтруктураРезультат.Вставить("Номер", Ссылка.номер);
		
	КонецЕсли;
	
	Попытка 
		СтруктураРезультат.Вставить("Ответственный", Ссылка.Ответственный);
		СтруктураРезультат.Вставить("ДатаСодания", Ссылка.ДатаСодания);
		СтруктураРезультат.Вставить("ДатаРедакции", Ссылка.ДатаРедакции);
	Исключение 	
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции //ПолучитьСтруктуруЗначенийРеквизитовСсылкиНаОбъект

Функция   ПользователяТекущаяДата() Экспорт
	
	РабочаяДатаПользователя = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РабочаяДата");
	Если РабочаяДатаПользователя = '00010101000000' Тогда
		Возврат ТекущаяДата();
	Иначе
		Возврат РабочаяДатаПользователя;
	КонецЕсли;
	
КонецФункции

Функция   ПроверитьОтказДоступа(Знач КодПрава, Форма = Неопределено, Знач Отказ = ЛОЖЬ, Знач Объект = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ) Экспорт
	
	Если ВернутьСтруктуру Тогда
		Результат = Новый Структура;
		Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ПолныйДоступ);
		Результат.Вставить("Отказ", Отказ);
	Иначе
		Результат = Отказ;
	КонецЕсли;
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		ОписаниеДоступа = ОбщийМодульПовтор.ПолучитьУровеньДоступа(КодПрава, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
		
		Если НЕ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ПолныйДоступ Тогда
			
			ТолькоПросмотр = ЛОЖЬ;
			Если ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.НетДоступа Тогда
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ИСТИНА);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.НетДоступа);
				Иначе
					Результат = ИСТИНА;	
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ТолькоЧтение Тогда
				
				ТолькоПросмотр = ИСТИНА;
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ЛОЖЬ);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ТолькоЧтение);
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ДоступПриУсловии 
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено 
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Результат1 = ИСТИНА;
				Попытка 
					Выполнить(" Результат1 = НЕ (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ОписаниеОшибки();
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
				КонецПопытки;
				
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", Результат1);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.НетДоступа);
				Иначе
					Результат = Результат1;
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.БезУсловияЧтение
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				ПолныйДоступ = ЛОЖЬ;
				Попытка 
					Выполнить(" ПолныйДоступ = (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					ТолькоПросмотр = НЕ ПолныйДоступ;
					
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ОписаниеОшибки();
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Сообщить();
					
				КонецПопытки;
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", ЛОЖЬ);
					Результат.Вставить("УровеньДоступа", ?(ТолькоПросмотр, Перечисления.УровниДоступа.ТолькоЧтение, Перечисления.УровниДоступа.НетДоступа));
				КонецЕсли;
				
			ИначеЕсли ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ЧтениеПриУсловии Тогда
				
				ЧтениеВозможно = ИСТИНА;
				Если НЕ Объект = Неопределено
					И ЗначениеЗаполнено(Объект.Ссылка) 
					И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа) Тогда					
					
					Попытка 
						Выполнить(" ЧтениеВозможно = (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
						
					Исключение 	
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия чтения") + ": " + ОписаниеОшибки();
						Сообщение.УстановитьДанные(Объект);
						Сообщение.Сообщить();
						
					КонецПопытки;                       	
				КонецЕсли;
				
				Если ВернутьСтруктуру Тогда
					Результат.Вставить("Отказ", НЕ ЧтениеВозможно);
					Результат.Вставить("УровеньДоступа", Перечисления.УровниДоступа.ТолькоЧтение);
				Иначе
					Результат = НЕ ЧтениеВозможно;
				КонецЕсли;				
				
			КонецЕсли;
			
			Если Отказ
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриОтказеВДоступеВыводитьСообщение") Тогда
				
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В доступе отказано") + ": " + ОписаниеДоступа.ОбъектДоступа);
			КонецЕсли;					
			
			Если ТолькоПросмотр 
				И НЕ Форма = Неопределено Тогда
				
				Форма.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Только просмотр") + ": " + Форма.Заголовок;
				Для Каждого ЭлементФормы из Форма.Элементы Цикл
					Попытка
						ЭлементФормы.ТолькоПросмотр = ИСТИНА;
						
					Исключение
						Попытка
							ЭлементФормы.Доступность = ЛОЖЬ;
						Исключение
						КонецПопытки;
					КонецПопытки;
					
				КонецЦикла;  				
				//Форма.ЗаблокироватьДанныеФормыДляРедактирования();
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПроверитьПравоРедакции(Знач КодПрава, Знач Объект = Неопределено) Экспорт
	
	Результат = ИСТИНА;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		ОписаниеДоступа = ОбщийМодульПовтор.ПолучитьУровеньДоступа(КодПрава, ПараметрыСеанса.ТекущийПользователь);
		
		Если НЕ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ПолныйДоступ Тогда
			
			Результат = ЛОЖЬ;
			Если (ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.ДоступПриУсловии 
				ИЛИ ОписаниеДоступа.УровеньДоступа = Перечисления.УровниДоступа.БезУсловияЧтение)
				И ЗначениеЗаполнено(ОписаниеДоступа.УсловиеДоступа)
				И НЕ Объект = Неопределено 
				И ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Результат1 = ИСТИНА;
				Попытка 
					Выполнить(" Результат1 = НЕ (" + ОписаниеДоступа.УсловиеДоступа + ") = ИСТИНА;");
					Результат = Результат1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка условия доступа") + ": " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   РегистрационныйКод() Экспорт	
	Возврат ОбщийМодульПовтор.РегистрационныйКод();	
КонецФункции //РегистрационныйКод

Функция   СледуетВыполнитьОперацииПередЗавершением() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СообщатьОНеактуальностиПоказателейВаловойПрибылиИПредлагатьПерепроведениеДокументовПриВыходеИзПрограммыПоследнегоПользователя", ИСТИНА)
		И НЕ Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить() = '00010101000000' 
		И ОбщийМодульСерверПривилегия.НетБольшеПодключенийКБазеДанных() Тогда
		
		Результат.Добавить("Восстановление Валовой Прибыли");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //СледуетВыполнитьОперацииПередЗавершением

Процедура СообщитьПользователю(	
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "", Отказ = ЛОЖЬ) Экспорт
	
	Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекстСообщенияПользователю);
		Сообщение.Поле = Поле;
		
		ЭтоОбъект = ЛОЖЬ;
		
		#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
			Если КлючДанных <> Неопределено
				И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
				
				ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
				ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
			КонецЕсли;
		#КонецЕсли
		
		Если ЭтоОбъект Тогда
			Сообщение.УстановитьДанные(КлючДанных);
		Иначе
			Сообщение.КлючДанных = КлючДанных;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			Сообщение.ПутьКДанным = ПутьКДанным;
		КонецЕсли;
		
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Отказ = ИСТИНА;
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты(Знач НаименованиеКонстанты, Знач ЗначениеКонстанты) Экспорт	
	константы[НаименованиеКонстанты].Установить(ЗначениеКонстанты);	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраИлиКонстанты(Знач ИмяПараметраИлиКонстанты, Знач ЗначениеПараметраИлиКонстанты, Знач ТолькоКонстанта = ЛОЖЬ, Знач Комментарий = "") Экспорт
	
	Если НЕ ТолькоКонстанта 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЛичныеНастройкиПользователей", ИСТИНА) Тогда //осторожно
		
		НастройкаПользователя = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		НастройкаПользователя.Активность = ИСТИНА;
		НастройкаПользователя.ДатаУстановки = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		НастройкаПользователя.ЗначениеНастройки = ЗначениеПараметраИлиКонстанты;
		НастройкаПользователя.Комментарий = Комментарий;
		НастройкаПользователя.Настройка = ПланыВидовХарактеристик.НастройкиПользователей[ИмяПараметраИлиКонстанты];
		НастройкаПользователя.Пользователь = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		
		Попытка //Записи в регистр сведений 
			НастройкаПользователя.Записать(ИСТИНА);
			
		Исключение //Записи в регистр сведений 
		КонецПопытки; //Записи в регистр сведений
		
	Иначе
		ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты(ИмяПараметраИлиКонстанты, ЗначениеПараметраИлиКонстанты);
	КонецЕсли;   
	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	ПараметрыСеанса[ИмяПараметра] = ЗначениеПараметра;
КонецПроцедуры

Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля() Экспорт
	
	ПараметрыСеанса.ТекущийПользователь = ОпределитьПользователя();
	
	ИспользоватьЖурналированиеСобытий 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЖурналированиеСобытий");
	
	ПараметрыСеанса.МногоФункциональныйФлаг = ЛОЖЬ;
	ПараметрыСеанса.ИспользоватьЖурналированиеСобытий 		= ИспользоватьЖурналированиеСобытий;
	ПараметрыСеанса.ВестиЗаписьВЖурналВсехОбычныхДействий 	= ИспользоватьЖурналированиеСобытий И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиЗаписьВЖурналВсехОбычныхДействийПользователей");
	ТекущийЯзыкИнтерфейсаПрограммы 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	
	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если НЕ ДанныеТекущегоПользователя.Язык = Неопределено тогда
		
		ДанныеТекущегоПользователяЯзыкИмя = ДанныеТекущегоПользователя.Язык.Имя;
		Если ДанныеТекущегоПользователяЯзыкИмя = "Русский" тогда
			ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Русский ;
			
		Иначе			
			ТекущийЯзыкИнтерфейсаПрограммы = Неопределено;
			
			Если ДанныеТекущегоПользователяЯзыкИмя = "Українська" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Український ;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Белорусский" тогда		
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Белорусский ;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "English" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.English ;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Румынский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Румынский;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Китайский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Китайский;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Немецкий" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Немецкий;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Тайский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Тайский;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Польский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Польский;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Болгарский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.Болгарский;
			Иначеесли ДанныеТекущегоПользователяЯзыкИмя = "Казахский" тогда
				ТекущийЯзыкИнтерфейсаПрограммы = Справочники.Языки.казахский;	
			КонецЕсли;			
			
			Если НЕ ТекущийЯзыкИнтерфейсаПрограммы = Неопределено ТОгда				
				Если ОбщийМодульТекстСервер.НетНиОднойЗаписиЭтогоЯзыка(ТекущийЯзыкИнтерфейсаПрограммы) Тогда				
					ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ТекущийЯзыкИнтерфейсаПрограммы.Код, ТекущийЯзыкИнтерфейсаПрограммы);		
				КонецЕсли;
				
			Иначе
				ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= ТекущийЯзыкИнтерфейсаПрограммы;
	Иначе
		ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы 	= ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;
	
	ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры");
	
	Параметрысеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами", ИСТИНА);
	ИспользоватьСкидки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки");
	ПараметрыСеанса.ИспользоватьСкидкиПС 										= ИспользоватьСкидки;
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов 		= ИспользоватьСкидки и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов", ИСТИНА);
	ПараметрыСеанса.ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры 	= ИспользоватьСкидки и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры", ИСТИНА);
	ПараметрыСеанса.ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар 		= ИспользоватьСкидки и ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар");
	ПараметрыСеанса.ИспользоватьСложныйМеханизмЦенПС 							= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен", ИСТИНА);
	ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже");
	ПараметрыСеанса.ПроцентРасчетаЛьготнойЦеныПоУмолчанию 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
	ПараметрыСеанса.РекомендуемыйМинимальныйОстатокТовара 						= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РекомендуемыйМинимальныйОстатокТовара");
	ПараметрыСеанса.ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара", ИСТИНА);
	ПараметрыСеанса.ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС 			= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп", ИСТИНА);
	
	Параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц", ИСТИНА);
	ПараметрыСеанса.ВестиУчетВалютВСеансе 				= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют", ИСТИНА);
	ЗапретитьИзмененияВПрошломПериоде 					= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде", ИСТИНА);
	ПараметрыСеанса.ДействуетЗапретИзмененийПрошлого 	= (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты) ИЛИ (ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока);
	ПараметрыСеанса.ИспользоватьНаборыТоваровПС 		= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьНаборыТоваров", ИСТИНА);
	
	Попытка 
		ПараметрыСеанса.РабочаяДата = ПараметрыСеанса.РабочаяДата;	
	Исключение 	
		ПараметрыСеанса.РабочаяДата = '00010101000000';	
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
	Исключение 	
		ПараметрыСеанса.НеВыводитьСообщений = ЛОЖЬ;		
	КонецПопытки;
	
	Попытка 
		ПараметрыСеанса.НеМожетМенятьЦены 	= ОбщийМодульСерверПривилегия.ЕстьПользователи() И РольДоступна("Реализация") И Не РольДоступна("ПолныеПрава") И Не РольДоступна("РеализацияИПриемТовара") И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");
	Исключение 	
	КонецПопытки;
	
	ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры", ИСТИНА);
	
КонецПроцедуры

функция   ЭтоНоваяВерсия(Знач ВернутьВерсиюЕслиНовая = ЛОЖЬ) Экспорт
	
	ВерсияКонфигурации 	  = Лев(ВРЕГ(СокрЛП(Метаданные.Версия)), 6);
	ВерсияБыла 			  = Лев(ВРЕГ(СокрЛП(Константы.ВерсияПрограммы.Получить())), 6);
	
	Если ВернутьВерсиюЕслиНовая Тогда
		Возврат ?(Не ВерсияБыла = ВерсияКонфигурации, ВерсияКонфигурации, "");;
	Иначе
		Возврат Не ВерсияБыла = ВерсияКонфигурации;
	КонецЕсли;	
	
КонецФункции

Процедура ПроверитьДоступКНастройкамОтчета(ФормаОтчета, Знач ИмяОтчета, Знач Отказ = ЛОЖЬ) Экспорт
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом", ИСТИНА) Тогда
		
		ИмяОтчета = СтрЗаменить(СтрЗаменить(ИмяОтчета, "Отчет.", ""), ".Форма.ФормаОтчета", "");
		
		Запрет = ОбщийМодульПовтор.ПолучитьЗапретНаНастройкиОтчета(ИмяОтчета, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
		Если Запрет Тогда				
			Попытка
				ФормаОтчета.Элементы.ЗагрузитьВариант.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
			Попытка
				ФормаОтчета.Элементы.ИзменитьВариант.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
			Попытка
				ФормаОтчета.Элементы.НастройкиОтчета.Видимость = ЛОЖЬ;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПроверитьДоступКНастройкамОтчета

Функция   ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита(Знач СуществующаяСсылка, Знач ИмяРеквизита, Знач ЗначениеРеквизита = Неопределено) Экспорт
	
	РезультатПроверки = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(СуществующаяСсылка)
		И ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		РезультатПроверки = СуществующаяСсылка.Ссылка[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции //ПроверитьЧтоЗаписаннаяВерсияОбъектаИмеетЗначениеРеквизита

Функция   ПолучитьВерсиюПлатформы() Экспорт
	
		СисИнфор = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфор.ВерсияПриложения;
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		
		Если СтрДлина(ВерсияПриложения) = 3 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 2 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "00" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 1 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "000" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 0 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0000" + ВерсияПриложения;
		Иначе //4
			ВерсияПлатформы  = ВерсияПлатформы + ВерсияПриложения;
		КонецЕсли;
	
	Если СтрДлина(ВерсияПриложения) = 3 Тогда
		ВерсияПлатформы  = ВерсияПлатформы + "0" + ВерсияПриложения;
	ИначеЕсли СтрДлина(ВерсияПриложения) = 2 Тогда
		ВерсияПлатформы  = ВерсияПлатформы + "00" + ВерсияПриложения;
	ИначеЕсли СтрДлина(ВерсияПриложения) = 1 Тогда
		ВерсияПлатформы  = ВерсияПлатформы + "000" + ВерсияПриложения;
	ИначеЕсли СтрДлина(ВерсияПриложения) = 0 Тогда
		ВерсияПлатформы  = ВерсияПлатформы + "0000" + ВерсияПриложения;
	Иначе //4
		ВерсияПлатформы  = ВерсияПлатформы + ВерсияПриложения;
	КонецЕсли;
	
	Возврат Число(ВерсияПлатформы);
	
КонецФункции //ПолучитьВерсиюПлатформы

Функция   ПолучитьПричинуСторнирования(Знач СторныйДокумент) Экспорт
	
	Результат = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 СторнированныеДокументы.Причина
		|ИЗ РегистрСведений.СторнированныеДокументы КАК СторнированныеДокументы
		|ГДЕ СторнированныеДокументы.СторныйДокумент = &СторныйДокумент";
	
	Запрос.УстановитьПараметр("СторныйДокумент", СторныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.Причина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ПолучитьПричинуСторнирования
