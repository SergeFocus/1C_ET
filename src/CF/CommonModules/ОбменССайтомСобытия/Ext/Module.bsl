// sza150117-0325
// Суров С.В <s_surov@mail.ru>

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

Процедура ЗаписатьОшибку(ТекстСообщения, УзелОбмена) Экспорт
	
	ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтом"),
				УровеньЖурналаРегистрации.Предупреждение,
				УзелОбмена.Метаданные(),
				УзелОбмена,
				ТекстСообщения + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен отменен."));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОБРАБОТЧИКИ ПОДПИСОК

// Обработчик подписки на событие "ОбменССайтомПередЗаписьюРегистра".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
// 
Процедура ОбменССайтомПередЗаписьюРегистраПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если НЕ Отказ
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьОбменССайтом") Тогда
		
		ЗарегистрироватьИзменения(Источник, Замещение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "ОбменССайтомПриЗаписиСправочника".
// Выполняет регистрацию изменений для узлов плана обмена с сайтом. 
// 
Процедура ОбменССайтомПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьОбменССайтом") Тогда
		ЗарегистрироватьИзменения(Источник);	
	КонецЕсли;
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ

// Выборочно регистрирует изменения для узлов плана обмена с сайтом.
// 
// Параметры:
// 	Объект		- Объект метаданных - источник события
// 	Замещение - режим записи набора записей регистра.
// 
Процедура ЗарегистрироватьИзменения(Объект, Замещение = ЛОЖЬ)
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	ТипОбъекта = ТипЗнч(Объект);
	МассивУзловТовары = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(ИСТИНА);
	МассивУзловЗаказы = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(,ИСТИНА);
	ОбменССайтомПереопределяемый.ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение);
	
КонецПроцедуры

// Записывает в структуру ссылки на измененные объекты по узлу плана обмена.
// 
// Параметры:
// 	УзелПланаОбмена - ПланОбмена.Ссылка
// 	СтруктураВозврата - Структура
// 
Процедура ЗаполнитьСтруктуруИзмененийДляУзла(УзелПланаОбмена, СтруктураВозврата) Экспорт
	
	СтруктураВозврата.Вставить("Товары", Новый Массив);
	СтруктураВозврата.Вставить("Заказы", Новый Массив);
	
	ПолучитьИзмененияУзла(СтруктураВозврата, УзелПланаОбмена);
	
КонецПроцедуры

// Удаляет регистрацию у тех заказов, которые были загружены с сайта
// 
Процедура ОтменитьРегистрацию(ЗаказСсылка) Экспорт
	
	МассивУзлов = ОбменССайтомПовтИсп.МассивУзловДляРегистрации(, ИСТИНА);
	ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, ЗаказСсылка);
	
КонецПроцедуры

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ПРОЦЕДУРЫ ЗАПУСКА ОБМЕНА

// Выполняет запуск обмена с сайтом из регламентного задания.
// 
// Параметры:
//   КодУзлаОбмена		- строка с кодом узла плана обмена.
Процедура ЗаданиеВыполнитьОбмен(КодУзлаОбмена) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УзелОбмена = ПланыОбмена.ОбменССайтом.НайтиПоКоду(КодУзлаОбмена);
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтами"),
			УровеньЖурналаРегистрации.Ошибка,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не найден узел обмена с кодом") + " " + КодУзлаОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	Если УзелОбмена.ПометкаУдаления Тогда
		
		ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтами"),
			УровеньЖурналаРегистрации.Информация,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Настройка обмена помечена на удаление. Обмен отменен."));
		
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = "";
	ДоступноПодключениеКСайту = ЛОЖЬ;
	ПроверитьПодключениеКСайту(ДоступноПодключениеКСайту, УзелОбмена, ТекстСообщения);
	Если Не ДоступноПодключениеКСайту Тогда
		
		ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтами"),
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен отменен."));
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбмен(УзелОбмена, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фоновый обмен"));
	
КонецПроцедуры

// Запускает процедуру обмена с сайтом
// Параметры
// 	УзелОбмена - Ссылка на план обмена с сайтом
// 	РежимЗапускаОбмена - строка, поясняющая был ли обмен запущен интерактивно
// 						или через регл. задание
// 	ВыгружатьТолькоИзменения - Булево, определяет будут выгружаться все данные
// 						или только зарегистрированные 
Процедура ВыполнитьОбмен(УзелОбмена, РежимЗапускаОбмена, ВыгружатьТолькоИзменения = ИСТИНА) Экспорт
	
	Отказ = ЛОЖЬ;
	ОписаниеОшибки = "";
	
	// Перед обменом необходимо убедиться что есть доступ на сайт или к каталогу.
	ТекстСообщения = "";
	Если УзелОбмена.ВыгружатьНаСайт Тогда
		
		ДоступноПодключениеКСайту = ЛОЖЬ;
		
		ПроверитьПодключениеКСайту(ДоступноПодключениеКСайту, УзелОбмена, ТекстСообщения);
		Если Не ДоступноПодключениеКСайту Тогда
			
			ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтами"),
				УровеньЖурналаРегистрации.Предупреждение,
				УзелОбмена.Метаданные(),
				УзелОбмена,
				ТекстСообщения + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен отменен."));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		КаталогВыгрузки = УзелОбмена.КаталогВыгрузки;
		КаталогДоступен = ЛОЖЬ;
		ПроверитьДоступностьКаталогаВыгрузки(КаталогДоступен, КаталогВыгрузки, ТекстСообщения);
		Если Не КаталогДоступен Тогда
			
			ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтами"),
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен отменен."));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаИнформации = РегистрыСведений.СостоянияОбменовДанными.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаИнформации.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	НастройкиПодключения = Новый Структура;
	ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена);
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");

	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("УзелОбмена", УзелОбмена);
	ПараметрыОбмена.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	Если ВыгружатьТолькоИзменения Тогда
		ВыгружатьИзменения = УзелОбмена.ВыгружатьИзменения;
	Иначе
		ВыгружатьИзменения = ЛОЖЬ;
	КонецЕсли;
	ПараметрыОбмена.Вставить("ВыгружатьИзменения", ВыгружатьИзменения);
	
	ПараметрыОбмена.Вставить("РазмерПорции", УзелОбмена.РазмерПорции);
	ПараметрыОбмена.Вставить("КоличествоПовторов",УзелОбмена.КоличествоПовторений);
	ПараметрыОбмена.Вставить("РежимВыгрузки", УзелОбмена.РежимВыгрузки);
	ПараметрыОбмена.Вставить("ВладелецКаталога", УзелОбмена.ВладелецКаталога);
	ПараметрыОбмена.Вставить("ОбменЗаказами", УзелОбмена.ОбменЗаказами);
	ПараметрыОбмена.Вставить("ОбменТоварами", УзелОбмена.ОбменТоварами);
	
	ПараметрыОбмена.Вставить("КаталогВыгрузки", УзелОбмена.КаталогВыгрузки);
	ПараметрыОбмена.Вставить("ВыгружатьНаСайт", УзелОбмена.ВыгружатьНаСайт);
	ПараметрыОбмена.Вставить("ВыгружатьКартинки", УзелОбмена.ВыгружатьКартинки);
	
	ПараметрыОбмена.Вставить("РазрешенныеТипыКартинок",РазрешенныеТипыКартинок);
	ПараметрыОбмена.Вставить("НаименованиеНалога", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НДС"));
	
	ИспользоватьХарактеристики = ИСТИНА;
	
	ОбменССайтомПереопределяемый.УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики);
	ПараметрыОбмена.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристики);
	
	ПараметрыОбмена.Вставить("РежимЗапускаОбмена", РежимЗапускаОбмена);
	
	ПрикладныеПараметры = ПараметрыПрикладногоРешения(УзелОбмена);
	
	ПараметрыОбмена.Вставить("ПрикладныеПараметры", ПрикладныеПараметры);
	
	ФайлЗагрузки = УзелОбмена.ФайлЗагрузки;
	ФайлЗагрузки = ОбменССайтом.ПодготовитьПутьДляПлатформы(ОбменССайтом.ПлатформаWindows(), ФайлЗагрузки);
	
	ПараметрыОбмена.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	
	ПараметрыОбмена.Вставить("МассивКаталогов", Новый Массив);
	ПараметрыОбмена.Вставить("ДанныеОЗаказах", Неопределено);
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Заказы", Новый Массив);
	Если ВыгружатьТолькоИзменения Тогда
		СтруктураИзменений.Вставить("Товары", Новый Массив);
	КонецЕсли;
	ПолучитьИзмененияУзла(СтруктураИзменений, УзелОбмена);
	
	ПараметрыОбмена.Вставить("СтруктураИзменений",СтруктураИзменений);
	
	ОбменССайтомПереопределяемый.ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена);
	
	РезультатОбмена = Новый Структура;
	
	ОбменССайтом.ВыполнитьОбменССайтом(ПараметрыОбмена, РезультатОбмена, ТаблицаИнформации);
	
	Ошибка = НЕ(РезультатОбмена.ТоварыВыгружены И РезультатОбмена.ВыполненОбменЗаказами);
	
	ВыполнитьДействияПриЗавершенииОбмена(ПараметрыОбмена, ТаблицаИнформации, Ошибка);
	
КонецПроцедуры

// Проверяет доступно ли подключение к сайту
// Параметры:
// Результат - результат проверки подключения
// УзелОбмена - ссылка на узел обмена
// ТекстСообщения - строка - описание ошибки
Процедура ПроверитьПодключениеКСайту(Результат, УзелОбмена, ТекстСообщения) Экспорт
	
	НастройкиПодключения = Новый Структура;
	ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена);
	
	ТекстСообщения = "";
	Если ОбменССайтом.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстСообщения) Тогда
		Результат = ИСТИНА;
	Иначе
		ЗаписьЖурналаРегистрации(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен с сайтом"),
			УровеньЖурналаРегистрации.Предупреждение,
			УзелОбмена.Метаданные(),
			УзелОбмена,
			ТекстСообщения + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен отменен."));
			
		Результат = ЛОЖЬ;
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПроверитьДоступностьКаталогаВыгрузки(КаталогДоступен, КаталогВыгрузки, ТекстСообщения)
	
	КаталогДоступен = ИСТИНА;
		
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		
		КаталогВыгрузки = КаталогВременныхФайлов();
		
	Иначе
		
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
		
	КонецЕсли;
	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ОбменССайтом.ПодготовитьПутьДляПлатформы(ОбменССайтом.ПлатформаWindows(), КаталогНаДиске);
	
	Попытка
		
		СоздатьКаталог(КаталогНаДиске);
		
	Исключение
		
		ТекстСообщения = ОбменССайтом.ОписаниеИсключительнойОшибки();
		КаталогДоступен = ЛОЖЬ;
		
		Возврат;
		
	КонецПопытки;
	
	ОписаниеОшибки = "";
	Если НЕ ОчиститьКаталог(КаталогНаДиске, ОписаниеОшибки) Тогда
		
		ТекстСообщения = ОбменССайтом.ОписаниеИсключительнойОшибки();
		КаталогДоступен = ЛОЖЬ;
		
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Служебные процедуры

Процедура ЗаполнитьНастройкиПодключения(НастройкиПодключения, УзелОбмена)
	
	НастройкиПодключения.Вставить("Пользователь", УзелОбмена.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", УзелОбмена.Пароль);
	НастройкиПодключения.Вставить("АдресСайта", УзелОбмена.АдресСайта);

КонецПроцедуры

Функция   ОчиститьКаталог(Каталог, ОписаниеОшибки)
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		ОписаниеИсключительнойОшибки = ОбменССайтом.ОписаниеИсключительнойОшибки(
											ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось очистить каталог обмена")
											+ ": "+ "(" + Каталог + ")");
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
		Возврат ЛОЖЬ;
		
	КонецПопытки;
	
	Возврат ИСТИНА;
	
КонецФункции

// Выполняет необходимые действия при завершении обмена.
// 
// Параметры:
// 	Параметры - Структура основных параметров
// 	ТаблицаИнформации - Таблица значений, состояние текущего сеанса обмена
// 	Ошибка - Булево, ИСТИНА, если необходимо зафиксировать завершение обмена с ошибками.
// 
Процедура ВыполнитьДействияПриЗавершенииОбмена(Параметры, ТаблицаИнформации, Ошибка = ЛОЖЬ)
	
	ТаблицаИнформации.ЗаполнитьЗначения(Параметры.УзелОбмена, "УзелИнформационнойБазы");
	
	// Записываем информацию по каждому действию в журнал регистрации.
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		СобытиеЖурнала = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(Параметры.УзелОбмена,
			СтрокаТаблицыИнформации.ДействиеПриОбмене);
		
		Если СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		Если Ошибка Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
			УровеньЖурнала,
			Параметры.УзелОбмена.Метаданные(),
			Параметры.УзелОбмена,
			Параметры.РежимЗапускаОбмена + Символы.ПС+СтрокаТаблицыИнформации.Описание);
			
	КонецЦикла;

	// Объединяем 2 строки информации по выгрузке (товары и заказы) в одну (ВыгрузкаДанных).
	
	СтрокиВыгрузки = ТаблицаИнформации.НайтиСтроки(Новый Структура("ДействиеПриОбмене",
		Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	Если СтрокиВыгрузки.Количество() = 2 Тогда
		
		Если СтрокиВыгрузки[1].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
			СтрокиВыгрузки[0].РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
		
		ТаблицаИнформации.Удалить(СтрокиВыгрузки[1]);
		
	КонецЕсли;
	
	// Записываем состояния обмена.
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	
	Для Каждого СтрокаТаблицыИнформации Из ТаблицаИнформации Цикл
		
		ЗаписьСостояния = РегистрыСведений.СостоянияОбменовДанными.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(ЗаписьСостояния, СтрокаТаблицыИнформации);
		
		// Даты записываем по границам сеанса, чтобы работал отбор журнала.
		
		ЗаписьСостояния.ДатаНачала = Параметры.ДатаФормирования;
		ЗаписьСостояния.ДатаОкончания = ТекущаяДатаСеанса();
		
		ЗаписьСостояния.Записать();
		
		Если ЗначениеЗаполнено(ЗаписьСостояния.ДействиеПриОбмене)
			И (ЗаписьСостояния.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			ИЛИ ЗаписьСостояния.РезультатВыполненияОбмена
				= Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями) Тогда
			
			ЗаписьУспешногоСостояния = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(ЗаписьУспешногоСостояния, ЗаписьСостояния);
			
			ЗаписьУспешногоСостояния.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПараметрыПрикладногоРешения(УзелОбмена)
	
	ПрикладныеПараметры  = Новый Структура;
	РеквизитыПланаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена, "ПараметрыПрикладногоРешения, ВыгружатьКартинки");
	СохраненныеНастройки	 = РеквизитыПланаОбмена.ПараметрыПрикладногоРешения.Получить();
	Если Не ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Возврат ПрикладныеПараметры;
	КонецЕсли;
	
	Если Не СохраненныеНастройки.Свойство("ПараметрыПрикладногоРешения") Тогда
		Возврат ПрикладныеПараметры;
	КонецЕсли;
	
	ПрикладныеПараметры = СохраненныеНастройки.ПараметрыПрикладногоРешения;
	ПрикладныеПараметры.Вставить("ВыгружатьКартинки", РеквизитыПланаОбмена.ВыгружатьКартинки);
	
	ОбменССайтомПереопределяемый.ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры);
	
	Возврат ПрикладныеПараметры;
	
КонецФункции


// Записывает в лог информацию об обмене с сайтом
// 
// Параметры:
// 	ТаблицаИнформации - таблицаЗначений, соответствующая регистру СостоянияОбменовДанными
// 	Параметры - структура обмена - там хранятся все данные и настройки для обмена
// 	ДатаНачала - время события (загрузка или выгрузка заказов)
// 	Загрузка - флаг, указывающий происходила загрузка или выгрузка
// 	Успех - результат загрузки/выгрузки
// 	СтруктураСтатистики - структура в которой хранятся значения количества созданных документов, обновленных и пр.
// 	ОписаниеОшибки - текстовая информация об ошибке
// 
Процедура ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации, Параметры, ДатаНачала, Загрузка, Успех,
		СтруктураСтатистики, ОписаниеОшибки) Экспорт
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДатаНачала = ДатаНачала;
	СтрокаТаблицыИнформации.ДатаОкончания = ТекущаяДатаСеанса();
	Если Загрузка Тогда
		Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	Иначе
		Действие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Действие;
	
	Если Действие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
		
		Описание = Строка(ДатаНачала) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запуск загрузки заказов")
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обработано")+ ": " + СтруктураСтатистики.ОбработаноНаЗагрузке
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загружено")+ ": " + СтруктураСтатистики.Загружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Загружено);
		
		Описание = Описание
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пропущено") + ": " + СтруктураСтатистики.Пропущено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Пропущено);
		
		Описание = Описание
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновлено") + ": " + СтруктураСтатистики.Обновлено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры, СтруктураСтатистики.Обновлено);
		
		Описание = Описание
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создано") + ": " + СтруктураСтатистики.Создано.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры,СтруктураСтатистики.Создано);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена загрузка заказов")
			
	Иначе
		
		Описание = Строка(ДатаНачала) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запуск выгрузки заказов")
			+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгружено")+ ": " + СтруктураСтатистики.Выгружено.Количество();
		
		ВывестиСписокДокументовДляПротокола(Описание, Параметры, СтруктураСтатистики.Выгружено);
		
		Описание = Описание
			+ Символы.ПС
			+ СтрокаТаблицыИнформации.ДатаОкончания
			+ " "
			+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена выгрузка заказов");
	
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = Описание;
	
	Если Успех Тогда
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание
		+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительная информация:") + Символы.ПС + ОписаниеОшибки;

	
КонецПроцедуры
	
Процедура ВывестиСписокДокументовДляПротокола(Описание, Параметры, МассивДокументов)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Описание + ". " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список документов") + ":";
	
	Для Каждого Док Из МассивДокументов Цикл
		
		
		СтруктураРеквизитовЗаказаНаСайте = Неопределено;
				
		СтруктураРеквизитовЗаказаНаСайте = ОбменССайтомПереопределяемый.РеквизитыЗаказаНаСайте(Док.Ссылка, Параметры.УзелОбмена);
		Если СтруктураРеквизитовЗаказаНаСайте = Неопределено Тогда
			НомерЗаказаНаСайте = "";
			ДатаЗаказаНаСайте = "";
		Иначе
			
			НомерЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте;
			ДатаЗаказаНаСайте = СтруктураРеквизитовЗаказаНаСайте.ДатаЗаказаНаСайте;
		КонецЕсли;
		
		Описание = Описание + Символы.ПС + Символы.НПП + Символы.НПП
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"№ %1 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " %2 (№ %3 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " %4 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на сайте") + ")",
				Док.Номер,
				Док.Дата,
				НомерЗаказаНаСайте,
				ДатаЗаказаНаСайте);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьИзмененияУзла(СтруктураВозврата, УзелПланаОбмена) Экспорт
	
	ИмяСправочникаТовары = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ИмяСправочникаФайлы = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("НоменклатураПрисоединенныеФайлы");
	ИмяДокументаЗаказы = ОбменССайтомПовтИсп.ИмяПрикладногоДокумента("ЗаказПокупателя");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказыИзменения.Ссылка КАК Ссылка,
	|	""Заказы"" КАК ТипСсылки
	|ИЗ
	|	Документ." + ИмяДокументаЗаказы + ".Изменения КАК ЗаказыИзменения
	|ГДЕ
	|	ЗаказыИзменения.Узел = &Узел";
	
	Если СтруктураВозврата.Свойство("Товары") Тогда 
		ТекстЗапроса = ТекстЗапроса + 
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	НоменклатураИзменения.Ссылка,
		|	""Товары"" 
		|ИЗ
		|	Справочник." + ИмяСправочникаТовары + ".Изменения КАК НоменклатураИзменения
		|ГДЕ
		|	НоменклатураИзменения.Узел = &Узел";

	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Узел", УзелПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата[Выборка.ТипСсылки].Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриЗаписиСправочникаДокументаДляОбменаССайтами(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПередЗаписьюРегистраСведенийДляОбменаССайтами(Источник, Отказ, Замещение) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

