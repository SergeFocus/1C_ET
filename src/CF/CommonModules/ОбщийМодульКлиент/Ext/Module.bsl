//sza140117-2211 : 
//sza130901-1733 : 

Функция   ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат:") + " %" + СимволСтроки;
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат:") +" %" + ЗначениеПараметра;
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
		
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

функция   получитьЗначениеНастройкиИлиКонстанты(ИмяКонстанты)  Экспорт
	возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты(ИмяКонстанты);
КонецФункции

Процедура ОчиститьТовары(Документ) Экспорт	
	ОбщийМодульТоварСервер.ОчиститьТоварыНаСервере(Документ);	
КонецПроцедуры //ОчиститьТовары

Процедура ПересчитатьТоВары(Документ, Коэффициент = 0) Экспорт		
	ОбщийМодульТоварСервер.ПересчитатьТоварыНаСервере(Документ, Коэффициент);	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	УстановитьПараметрыСеансаЭлементарнаяТорговля();
	
	ТекстЗаголовкаОкнаПрограммы = ЗаголовокОкна();
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаОкнаПрограммы) Тогда
		ТекстЗаголовкаОкнаПрограммы 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭЛЕМЕНТАРНАЯ Торговля") + " " + ОбщийМодульСервер.ПолучитьВерсиюКонфигурации();
		ТекстКраткогоЗаголовкаОкнаПрограммы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭТ")
	КонецЕсли;	
	
	глКонфигурацияВРаботе = ПлатнаяВерсия();	
	
	попытка		
		Выполнить(" УстановитьЗаголовокКлиентскогоПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		
		Если НЕ глКонфигурацияВРаботе Тогда
			Выполнить(" УстановитьКраткийЗаголовокПриложения(ТекстКраткогоЗаголовкаОкнаПрограммы); ");	
		КонецЕсли;
		
	исключение //8.2!
		попытка
			Выполнить(" УстановитьЗаголовокПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		исключение
		конецпопытки;
		
	конецпопытки;
	
	Если ПервыйЗапуск() Тогда
		
		ФормаПервогоЗапуска = ПолучитьФорму("ОбщаяФорма.УстановкаПервоначальныхНастроек");
		ФормаПервогоЗапуска.открытьмодально();
		ОбновиласьВерсия();
		
	Иначе
		Если ОбновиласьВерсия() Тогда
			ВывестиМакетЧтоНового();
			
		Иначе
			НоваяВерсия = ЕстьНоваяВерсия();
			
			Если не НоваяВерсия = Неопределено
				и не НоваяВерсия = "" ТОгда
				
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " http://www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации:") + " " + НоваяВерсия);	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщийМодульСервер.получитьЗначениеКонстанты("ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы") 
			и ОбщийМодульСервер.нетсегоднякурса() Тогда
			
			формавводакурса = получитьформу("РегистрСведений.КурсыВалют.Форма.УстановитьКурсыВалют");
			формавводакурса.Открыть();
			
		КонецЕсли;
		
		Если ОбщийМодульСервер.получитьЗначениеКонстанты("ПоказыватьПриСтартеСписокКлиентовУКоторыхСгодняЗавтраПослезавтраДеньРождения") Тогда
			
			ПечатьДнейРождения();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьДнейРождения(Насильно = Ложь) Экспорт
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("НаименованиеДокумента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дни рождения"));
	ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
	
	Если ОбщийМодульСервер.ПечатьДнейРожденияКлиентов(ФормаПечати.Результат)
		ИЛИ Насильно Тогда
		
		ФормаПечати.Результат.ОтображатьСетку 	  = Ложь;
		ФормаПечати.Результат.Защита 			  = Истина;
		ФормаПечати.Результат.ТолькоПросмотр 	  = Истина;
		ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Дни рождения клиентов");
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

Функция   ЕстьНоваяВерсия() 	
	Возврат ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы();	
КонецФункции //ЕстьНоваяВерсия

процедура ВывестиМакетЧтоНового()
	
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати");
	Если НЕ ОбщийМодульСервисСервер.ВывестиМакетЧтоНового(ФормаПечати.Результат) = Неопределено Тогда
		
		ФормаПечати.Результат.ОтображатьСетку 	= Ложь;
		ФормаПечати.Результат.Защита 			= Истина;
		ФормаПечати.Результат.ТолькоПросмотр 	= Истина;
		ФормаПечати.Результат.ОтображатьЗаголовки = Ложь;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Что нового, что изменилось");
		
		ФормаПечати.открыть();		
		
	КонецЕсли;
	
конецпроцедуры

Функция   ПлатнаяВерсия() 	
	Возврат ОбщийМодульСервер.ПлатнаяВерсия();	
КонецФункции //ПлатнаяВерсия

Функция   ОбновиласьВерсия()    	
	
	Если ОбщийМодульСервисСервер.ЭтоНоваяВерсия() тогда
		
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление базы данных.."), , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Возврат ОбщийМодульСервисСервер.ОбновиласьВерсия();	
		
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

Функция   ПервыйЗапуск()	
	Возврат НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка");	
КонецФункции

Функция   ЗаголовокОкна()	
	Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы");	
КонецФункции //ЗаголовокОкна

Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля()
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
КонецПроцедуры //УстановитьПараметрыСеансаЭлементарнаяТорговля

Процедура ДобавитьСобытиеЖурнала(ФормаСобытия, ТипСобытия, СсылкаНаОбъект = Неопределено) Экспорт
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ФормаСобытия, ТипСобытия, СсылкаНаОбъект);
КонецПроцедуры

Процедура СобытиеФормы(ФормаСобытия, ТипСобытия, СсылкаНаОбъект = Неопределено, ЭтоФормаОбъекта = ложь) Экспорт
	
	глПроверятьСообщения = Истина;
	
	ИспользоватьЖурналированиеСобытий = ОбщийМодульПовтор.получитьПараметрСеанса("ИспользоватьЖурналированиеСобытий");
	ГруппаСтандартныхРеквизитов = Неопределено;
	
	#Если ВэбКлиент Тогда
	     СимволСправочника = формасобытия.элементы.найти("СимволСправочника");
		 Если НЕ СимволСправочника = Неопределено Тогда
		 	СимволСправочника.Видимость = ЛОжь;
		 КонецЕсли;
	#КонецЕсли
	
	Если ТипСобытия = 0
		И не СсылкаНаОбъект = Неопределено
		и ЗначениеЗаполнено(СсылкаНаОбъект)
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний")
		и не ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЗаметкиИНапоминания") Тогда
			 	
		ЧислоЗаметокСсылки = ОбщийМодульСервер.ПолучитьЧислоЗаметокСсылки(СсылкаНаОбъект);
		
		Если НЕ ЧислоЗаметокСсылки = 0 Тогда
			ГруппаСтандартныхРеквизитов = формасобытия.элементы.найти("ГруппаСтандартныхРеквизитов");
			
			Если не ГруппаСтандартныхРеквизитов = Неопределено Тогда
				
				НоваяКнопка = формасобытия.элементы.Найти("ЗаметкиДанногоОбъекта");
				если НоваяКнопка = неопределено тогда
					
					КнопкаЗаметокОбъекта = формасобытия.элементы.Найти("КнопкаЗаметокОбъекта");
					Если НЕ КнопкаЗаметокОбъекта = Неопределено Тогда
						КнопкаЗаметокОбъекта.Видимость 	= Истина;
						
					КонецЕсли;
				конецесли;
				
			 КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьЖурналированиеСобытий тогда
		
		если ТипСобытия = 0
			И ЭтоФормаОбъекта тогда
			
			если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				
				ГруппаСтандартныхРеквизитов = формасобытия.элементы.найти("ГруппаСтандартныхРеквизитов");	
					
				Если не ГруппаСтандартныхРеквизитов = Неопределено Тогда
					ГруппаСтандартныхРеквизитов.Видимость = ложь;
				КонецЕсли;
				
			иначе
				попытка
					если ФормаСобытия.Объект.ДатаРедакции = '00010101000000' тогда
						формасобытия.элементы.ДатаРедакции.Видимость = ложь;
					КонецЕсли;
				исключение
				конецпопытки;  
				
			КонецЕсли;
			
		КонецЕсли;
		
		попытка
			ДобавитьСобытиеЖурнала(ФормаСобытия.ИмяФормы, ТипСобытия, СсылкаНаОбъект);	
		исключение //НЕ УФ
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	Для каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			Если КоличествоНайденных > 7 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // АвтоПодбор()	

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,	
	знач ИмяПоля,
	знач ПравоеЗначение = Неопределено,
	знач ВидСравнения = Неопределено,
	знач Представление = Неопределено,
	знач Использование = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
	ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
		ПравоеЗначение, Представление, Использование, РежимОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция   ИзменитьЭлементыОтбора(ОбластьПоиска,	
	знач ИмяПоля = Неопределено,
	знач Представление = Неопределено,
	знач ПравоеЗначение = Неопределено,
	знач ВидСравнения = Неопределено,
	знач Использование = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция   ДобавитьЭлементКомпоновки(ОбластьДобавления,	
	знач ИмяПоля,
	знач ВидСравнения,
	знач ПравоеЗначение = Неопределено,
	знач Представление  = Неопределено,
	знач Использование  = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПеревестиТекстНаЯзык(СтрокаПеревода, Направление) Экспорт
	
	Если Направление = 0 Тогда
		Возврат ПодсистемаИЭИмпортЭкспортФС.ПривестиКСимволамНаРусском(СтрокаПеревода, Истина);
	Иначе
		Возврат ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(СтрокаПеревода, Ложь, Ложь, Истина);
	КонецЕсли;	
	
КонецФункции //ПеревестиТекстНаЯзык

Процедура ПоискОшибкиКодировки(ИмяСправочника, ДанныеВыбора, Текст, ЭлементыТекущиеДанные) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, Текст);
		
		Если ДанныеВыбора = Неопределено Тогда
			ТекстРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 0);
			ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстРус);
			Если ДанныеВыбора = Неопределено Тогда
				ТекстАнг = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 1);
				ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстАнг);
				Если НЕ ДанныеВыбора = Неопределено Тогда 	
					Текст = ТекстАнг;
				КонецЕсли;
				
			Иначе
				Текст = ТекстРус;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ЭлементыТекущиеДанные = ДанныеВыбора;
	КонецЕсли;
	
КонецПроцедуры

Функция   ВвестиНоменклатуруИКоличество(СтруктураДляВВода) Экспорт
	
	СтруктураВозврат = Неопределено;
	
	ФормаВВодаСКоличеством = получитьформу("ОбщаяФорма.ВводШтрихКодаИКоличества", СтруктураДляВВода);
	СтруктураВозврат = ФормаВВодаСКоличеством.ОткрытьМодально();
	
	Возврат СтруктураВозврат;
	
КонецФункции

Функция   ИспользоватьПодключаемоеОборудование() Экспорт	
	Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");	
КонецФункции //ИспользоватьПодключаемоеОборудование

Функция   ВыдатьСигнал(ТекКод = "") Экспорт
	
	#если не ВебКлиент тогда
		сигнал();
	#КонецЕсли
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре") Тогда
		
		ПараметрыФормы = новый Структура;
		ПараметрыФормы.Вставить("ШтрихКод", ТекКод);
		ФормаОшибки = ПолучитьФорму("ОбщаяФорма.ФормаОшибкиСканера", ПараметрыФормы);
		ФормаОшибки.Открыть();
		
		Возврат Истина;		
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции //ВыдатьСигнал()

Процедура ОтправитьПоEMAIL(Результат, ИмяДокумента) Экспорт
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что следует отправить отчет?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ТекстСопровождения = "";
		ВвестиСтроку(ТекстСопровождения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текст с") + " " + ИмяДокумента, 1020, Истина);
		
		ОбщийМодульСервисСервер.ОправитьПоEMAILКонтрагентуНаСервере(ТекстСопровождения, Результат, ИмяДокумента);	  	
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПользователяТекущаяДата() Экспорт	
	Возврат ОбщийМодульСервисСервер.ПользователяТекущаяДата();	
КонецФункции //ПользователяТекущаяДата

Функция   ПолучитьПараметрСеанса(ИмяПараметра) Экспорт	
	Возврат ОбщийМодульСервисСервер.ПолучитьПараметрСеанса(ИмяПараметра);	
КонецФункции //ПолучитьПараметрСеанса

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра) Экспорт   	
	ОбщийМодульСервисСервер.УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра);	
КонецПроцедуры

Функция   ПолучитьРодителя(Элемент) Экспорт  	
	Возврат ОбщийМодульСервисСервер.получитьРодителя(Элемент);	
КонецФункции //ПолучитьРодителя

Процедура ПроверитьВывестиСообщенияПользователю(Знач глОтборСтруктура) Экспорт	
	
	СтруктураСообщений = ОбщийМодульСервисСервер.ПолучитьСообщенияСистемыПользователю(глОтборСтруктура);
	
	Если Не СтруктураСообщений = Неопределено Тогда
//		ПараметрыФормы = Новый Структура("СтруктураСообщений", СтруктураСообщений);//("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
		ФормаСообщений = получитьформу("ОбщаяФорма.ФормаСообщений", Новый Структура("СтруктураСообщений", СтруктураСообщений));
		    
//		Если НЕ ФормаСообщений.Открыта() Тогда
			ФормаСообщений.Открыть();	
//		КонецЕсли;
   КонецЕсли;
	
КонецПроцедуры //ПроверитьВывестиСообщенияПользователю
