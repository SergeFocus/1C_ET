// sza151011-0228 функция
// sza150429-1813 
// sza150212-2115 
// sza150209-1429
// sza140913-2314
// sza140904-0114
// sza140830-1915
// sza140710-1224  локация
// sza140702-1333  
// sza140604-1707  
// sza130901-1733 :
Процедура АвтоПодбор(Элемент, 
	Текст, 
	ДанныеВыбора, 
	Ожидание, 
	СтандартнаяОбработка, 
	Знач ЧислоЭлементовПодбора = 7) Экспорт
	
	СтандартнаяОбработка = ЛОЖЬ;
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			
			Если КоличествоНайденных > ЧислоЭлементовПодбора Тогда
				Прервать;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // АвтоПодбор	

Функция   ВвестиНоменклатуруИКоличество(Знач СтруктураДляВВода) Экспорт
	
	СтруктураВозврат = Неопределено;
	
	ФормаВВодаСКоличеством = ПолучитьФорму("ОбщаяФорма.ВводШтрихКодаИКоличества", СтруктураДляВВода);
	СтруктураВозврат = ФормаВВодаСКоличеством.ОткрытьМодально();
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ВывестиМакетЧтоНового()
	
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати");
	Если НЕ ОбщийМодульСервисСервер.ВывестиМакетЧтоНового(ФормаПечати.Результат) = Неопределено Тогда
		
		ФормаПечати.Результат.ОтображатьСетку 	= ЛОЖЬ;
		ФормаПечати.Результат.Защита 			= ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	= ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Что нового, что изменилось");
		
		Попытка
			ФормаПечати.Открыть();	
		Исключение // 8.2 не УФ
		КонецПопытки;
		
	КонецЕсли;
	
конецпроцедуры

Функция   ВыдатьСигнал(Знач ТекКод = "") Экспорт
	
	#если НЕ ВебКлиент Тогда
		Сигнал();
	#КонецЕсли
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ШтрихКод", ТекКод);
		ФормаОшибки = ПолучитьФорму("ОбщаяФорма.ФормаОшибкиСканера", ПараметрыФормы);
		ФормаОшибки.Открыть();
		
		Возврат ИСТИНА;		
	Иначе
		Возврат ЛОЖЬ;		
	КонецЕсли;
	
КонецФункции // ВыдатьСигнал

Процедура ДобавитьСобытиеЖурнала(ФормаСобытия, 
	ТипСобытия, 
	Знач СсылкаНаОбъект = Неопределено) Экспорт
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(СокрЛП(ФормаСобытия), ТипСобытия, СсылкаНаОбъект);	
КонецПроцедуры

Функция   ДобавитьЭлементКомпоновки(ОбластьДобавления,	
	Знач ИмяПоля,
	Знач ВидСравнения,
	Знач ПравоеЗначение = Неопределено,
	Знач Представление  = Неопределено,
	Знач Использование  = Неопределено,
	Знач РежимОтображения = Неопределено,
	Знач ЭтоГруппаПолей = ЛОЖЬ,
	Знач СтруктураГруппыПолей = Неопределено) Экспорт
	
	Если ЭтоГруппаПолей
		И НЕ СтруктураГруппыПолей = Неопределено Тогда
		
		Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Элемент.ТипГруппы = СтруктураГруппыПолей.ТипГруппы;
		
		Для Каждого ЭлементГруппыСтруктуры Из СтруктураГруппыПолей.ЭлементыГруппы Цикл
			ЭлементГруппы = Элемент.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементГруппы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементГруппыСтруктуры);
			ЭлементГруппы.ВидСравнения = ВидСравнения;
			
			Если РежимОтображения = Неопределено Тогда
				ЭлементГруппы.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			Иначе
				ЭлементГруппы.РежимОтображения = РежимОтображения;
			КонецЕсли;
			
			Если ПравоеЗначение <> Неопределено Тогда
				ЭлементГруппы.ПравоеЗначение = ПравоеЗначение;
			КонецЕсли;
			
			Если Представление <> Неопределено Тогда
				ЭлементГруппы.Представление = Представление;
			КонецЕсли;
			
			Если Использование <> Неопределено Тогда
				ЭлементГруппы.Использование = Использование;
			КонецЕсли;	
		КонецЦикла;
		
	Иначе
		Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Элемент.ВидСравнения = ВидСравнения;
		
		Если РежимОтображения = Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Иначе
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция   ЕстьНоваяВерсия() 	
	Возврат ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы();	
КонецФункции // ЕстьНоваяВерсия

Функция   ЗаголовокОкна()	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы");	
КонецФункции // ЗаголовокОкна

Процедура ЗаписатьЗначениеПараметраИлиКонстанты(Знач ИмяПараметраИлиКонстанты, 
	Знач ЗначениеПараметраИлиКонстанты, 
	Знач ТолькоКонстанта = ЛОЖЬ, 
	Знач Комментарий = "") Экспорт
	
	ОбщийМодульСервисСервер.УстановитьЗначениеПараметраИлиКонстанты(ИмяПараметраИлиКонстанты, ЗначениеПараметраИлиКонстанты, ТолькоКонстанта, Комментарий);	
КонецПроцедуры

Функция   ИзменитьЭлементыОтбора(ОбластьПоиска,	
	Знач ИмяПоля = Неопределено,
	Знач Представление = Неопределено,
	Знач ПравоеЗначение = Неопределено,
	Знач ВидСравнения = Неопределено,
	Знач Использование = Неопределено,
	Знач РежимОтображения = Неопределено,
	Знач ЭтоГруппаПолей = ЛОЖЬ,
	Знач СтруктураГруппыПолей = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Если ЭтоГруппаПолей Тогда
		
		Если НЕ МассивЭлементов.Количество() = 0 Тогда
			Если Использование <> Неопределено Тогда
				МассивЭлементов[0].Использование = Использование;
			КонецЕсли;
			
			Для Каждого Элемент Из МассивЭлементов[0].Элементы Цикл
				Если ИмяПоля <> Неопределено Тогда
					Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				КонецЕсли;
				Если Представление <> Неопределено Тогда
					Элемент.Представление = Представление;
				КонецЕсли;
				Если ВидСравнения <> Неопределено Тогда
					Элемент.ВидСравнения = ВидСравнения;
				КонецЕсли;
				Если ПравоеЗначение <> Неопределено Тогда
					Элемент.ПравоеЗначение = ПравоеЗначение;
				КонецЕсли;
				Если РежимОтображения <> Неопределено Тогда
					Элемент.РежимОтображения = РежимОтображения;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	Иначе
		Для Каждого Элемент Из МассивЭлементов Цикл
			Если ИмяПоля <> Неопределено Тогда
				Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			КонецЕсли;
			Если Представление <> Неопределено Тогда
				Элемент.Представление = Представление;
			КонецЕсли;
			Если Использование <> Неопределено Тогда
				Элемент.Использование = Использование;
			КонецЕсли;
			Если ВидСравнения <> Неопределено Тогда
				Элемент.ВидСравнения = ВидСравнения;
			КонецЕсли;
			Если ПравоеЗначение <> Неопределено Тогда
				Элемент.ПравоеЗначение = ПравоеЗначение;
			КонецЕсли;
			Если РежимОтображения <> Неопределено Тогда
				Элемент.РежимОтображения = РежимОтображения;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

Функция   ИспользоватьПодключаемоеОборудование() Экспорт	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");	
КонецФункции // ИспользоватьПодключаемоеОборудование

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция   ОбновиласьВерсия()
	
	НоваяВерсия = ОбщийМодульСервисСервер.ЭтоНоваяВерсия(ИСТИНА);
	
	Если НЕ ПустаяСтрока(НоваяВерсия) Тогда
		
		Состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление базы данных..") + " (" + НоваяВерсия + ")", , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Возврат ОбщийМодульСервисСервер.ОбновиласьВерсия();	
		
	Иначе
		Возврат ЛОЖЬ;	
	КонецЕсли;
	
КонецФункции

Процедура ОкруглитьТоВары(Документ, 
	Знач Коэффициент = 0, 
	Знач ОкруглятьТолькоВверх = ЛОЖЬ, 
	Знач НаименованиеТаблицы = "Товары") Экспорт
	
	ОбщийМодульТоварСервер.ОкруглитьТоВары(Документ, Коэффициент, ОкруглятьТолькоВверх, НаименованиеТаблицы);	
КонецПроцедуры

Процедура ОтправитьПоEMAIL(Результат, Знач ИмяДокумента) Экспорт
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьПоEMAILЗавершение1", ОбщийМодульКлиент, Новый Структура("ИмяДокумента, Результат", ИмяДокумента, Результат)), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что следует отправить отчет?"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ОтправитьПоEMAILЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяДокумента = ДополнительныеПараметры.ИмяДокумента;
	Результат = ДополнительныеПараметры.Результат;	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекстСопровождения = "";
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ОтправитьПоEMAILЗавершение", ОбщийМодульКлиент, Новый Структура("ИмяДокумента, Результат, ТекстСопровождения", ИмяДокумента, Результат, ТекстСопровождения)), ТекстСопровождения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текст с") + " " + ИмяДокумента, 1020, ИСТИНА);		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьПоEMAILЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	ИмяДокумента = ДополнительныеПараметры.ИмяДокумента;
	Результат = ДополнительныеПараметры.Результат;
	ТекстСопровождения = ?(Строка = Неопределено, ДополнительныеПараметры.ТекстСопровождения, Строка);	
	
	Если НЕ Строка = Неопределено Тогда
		ОбщийМодульСервисСервер.ОправитьПоEMAILКонтрагентуНаСервере(ТекстСопровождения, Результат, ИмяДокумента);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТовары(Документ) Экспорт	
	ОбщийМодульТоварСервер.ОчиститьТоварыНаСервере(Документ);	
КонецПроцедуры // ОчиститьТовары

Функция   ПервыйЗапуск()	
	Возврат НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка");	
КонецФункции

Функция   ПеревестиТекстНаЯзык(СтрокаПеревода, Направление) Экспорт
	
	Если Направление = 0 Тогда
		Возврат ПодсистемаИЭ.ПривестиКСимволамНаРусском(СтрокаПеревода, ИСТИНА);
	Иначе
		Возврат ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(СтрокаПеревода, ЛОЖЬ, ЛОЖЬ, ИСТИНА);
	КонецЕсли;	
	
КонецФункции // ПеревестиТекстНаЯзык

Процедура ПересчитатьТовары(Документ, 
	Знач Коэффициент = 0, 
	Знач НаименованиеТаблицы = "Товары", 
	Знач БезДопРасчетов = ЛОЖЬ, 
	Знач ЭтоПроцентСкидки = ЛОЖЬ) Экспорт
	
	ОбщийМодульТоварСервер.ПересчитатьТоварыНаСервере(Документ, Коэффициент, НаименованиеТаблицы, БезДопРасчетов, ЭтоПроцентСкидки);
КонецПроцедуры

Процедура ПечатьДнейРождения(Знач ВОбязательномПорядке = ЛОЖЬ) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаименованиеДокумента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дни рождения"));
	
	Если ВОбязательномПорядке
		ИЛИ ОбщийМодульСервер.ПечатьДнейРожденияКлиентов() Тогда
		
		ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		ОбщийМодульСервер.ПечатьДнейРожденияКлиентов(ФормаПечати.Результат);
		
		ФормаПечати.Результат.ОтображатьСетку 	  = ЛОЖЬ;
		ФормаПечати.Результат.Защита 			  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Дни рождения клиентов");
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

Функция   ПечатьЧека(Знач Текст, Знач УникальныйИдентификатор, Знач ДокументЧека = Неопределено) Экспорт
	
	Результат = ИСТИНА;
	ОписаниеОшибки = "";
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
		Если НЕ ЗначениеЗаполнено(ФР) Тогда
			ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите фискальный регистратор"),	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фискальный регистратор не подключен"));
		Иначе
			ИдентификаторУстройства = ФР;
		КонецЕсли;
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				
				ВходныеПараметры = Новый Массив;
				ВходныеПараметры.Добавить(Текст);
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "PrintText", ВходныеПараметры, ВыходныеПараметры);
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				
				Если НЕ Результат Тогда
					ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При печати слип-чека возникла ошибка") + ":" + ВыходныеПараметры[1];
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Результат = ЛОЖЬ;
					
					// ИначеЕсли НЕ ДокументЧека = Неопределено 
					// 	И ЗначениеЗаполнено(ДокументЧека) Тогда
					// 	
					// 	// Попытка
					// 	// ДокументЧекаОбъект = ДокументЧека.ПолучитьОбъект();
					// 	// ДокументЧекаОбъект.ПКОНапечатан = ИСТИНА;
					// 	// ДокументЧекаОбъект.Записать(?(ДокументЧека.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));					
					// 	// Исключение 
					// 	// КонецПопытки;
				КонецЕсли;
				
			Иначе
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении устройства произошла ошибка. Чек НЕ напечатан на фискальном регистраторе");
				ТекстСообщения = ТекстСообщения + " :- " + ОписаниеОшибки;
				Результат = ЛОЖЬ;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбран фискальный регистратор.");
			Результат = ЛОЖЬ;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.");
		Результат = ЛОЖЬ;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолнаяВерсия() 	
	Возврат ОбщийМодульСервер.ПолнаяВерсия();	
КонецФункции // ПолнаяВерсия

Функция   ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	
	Знач Параметр2 = Неопределено, 
	Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, 
	Знач Параметр5 = Неопределено, 
	Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, 
	Знач Параметр8 = Неопределено, 
	Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат 	= "";
	НачПозиция 	= 1;
	Позиция 	= 1;
	
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат") + ": %" + СимволСтроки;
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда ЗначениеПараметра = Параметр9;
		Иначе ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат") + ": %" + ЗначениеПараметра;
		КонецЕсли;
		
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
		
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоискОшибкиКодировки(Знач ИмяСправочника, 
	ДанныеВыбора, 
	Текст, 
	ЭлементыТекущиеДанные, 
	Знач КлиентПоставщик = Неопределено) Экспорт
	
	ИмяСправочника = ВРЕГ(ИмяСправочника);
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, Текст);
		
		Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда
			ТекстРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 0);
			ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстРус);
			
			Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда
				ТекстАнг = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 1);
				ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстАнг);
				
				Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
					Текст = ТекстАнг;
				Иначе
					Если ИмяСправочника = "НОМЕНКЛАТУРА" Тогда
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда						
							ДанныеВыбора = ОбщийМодульТоварСервер.НайтиНоменклатуруПоАртикулу(Текст, ЛОЖЬ);	
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеВыбора)
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") Тогда
							
							ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(Текст, ЛОЖЬ);	
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеВыбора)
							И НЕ КлиентПоставщик = Неопределено
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда
							
							ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование"), Текст);
							
							Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда							
								ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати"), Текст);
								
								Если НЕ ЗначениеЗаполнено(ДанныеВыбора) 
									И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
									
									ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), Текст);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ИмяСправочника = "ПОСТАВЩИКИ"
						ИЛИ ИмяСправочника = "КЛИЕНТЫ"
						ИЛИ ИмяСправочника = "ОРГАНИЗАЦИИ"
						ИЛИ ИмяСправочника = "СОТРУДНИКИ" Тогда
						
						ДанныеВыбора = ОбщийМодульСервер.НайтиПоТелефонуАдресуИЕмейл(Текст, ИмяСправочника);						
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Текст = ТекстРус;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ЭлементыТекущиеДанные = ДанныеВыбора;
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьЗначениеНастройкиИлиКонстанты(Знач ИмяКонстанты) Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты(ИмяКонстанты);
КонецФункции

Функция   ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(Знач ВидИнформации) Экспорт
	Возврат ОбщийМодульСервер.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);	
КонецФункции 

Функция   ПолучитьЗначениеРеквизита(Знач ЭлементСРеквизитом, Знач ИмяРеквизита = "Наименование") Экспорт
	Возврат ОбщийМодульСервер.получитьЗначениеРеквизита(ЭлементСРеквизитом, ИмяРеквизита);
КонецФункции // получитьЗначениеРеквизита

Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт
	Возврат ОбщийМодульСервисСервер.ПолучитьПараметрСеанса(ИмяПараметра);	
КонецФункции // ПолучитьПараметрСеанса

Функция   ПолучитьРодителя(Знач Элемент) Экспорт
	Возврат ОбщийМодульСервисСервер.получитьРодителя(Элемент);	
КонецФункции // ПолучитьРодителя

Функция   ПользователяТекущаяДата() Экспорт
	Возврат ОбщийМодульСервисСервер.ПользователяТекущаяДата();	
КонецФункции // ПользователяТекущаяДата

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	СредаВыполнения = ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения();
	
	Если СредаВыполнения = 1
		ИЛИ СредаВыполнения = 4
		ИЛИ СредаВыполнения = 5 Тогда
		
		СисИнфор = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфор.ВерсияПриложения;
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		
		Если СтрДлина(ВерсияПриложения) = 3 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 2 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "00" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 1 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "000" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 0 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0000" + ВерсияПриложения;
		Иначе // 4
			ВерсияПлатформы  = ВерсияПлатформы + ВерсияПриложения;
		КонецЕсли;
		
		глВерсияПлатформы = Число(ВерсияПлатформы);
		Если глВерсияПлатформы < 803050000 Тогда
			Предупреждение("Configuration works on 1C ver. 8.3.5 and higher!" + Символы.ПС + "Recommended: 8.3.7 or higher!"); // без перевода
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьПараметрыСеансаЭлементарнаяТорговля(глВерсияПлатформы);
	
	ТекстЗаголовкаОкнаПрограммы = ЗаголовокОкна();
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаОкнаПрограммы) Тогда
		ТекстЗаголовкаОкнаПрограммы 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭЛЕМЕНТАРНАЯ Торговля") + " " + ОбщийМодульСервер.ПолучитьВерсиюКонфигурации();
		ТекстКраткогоЗаголовкаОкнаПрограммы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭТ")
	КонецЕсли;
	
	ТекстЗаголовкаОкнаПрограммы = ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьИмяПользователяВЗаголовокОкна"), "" + глТекущийПользователь + " ", "") + ТекстЗаголовкаОкнаПрограммы;
	ТекстЗаголовкаОкнаПрограммы = СокрЛП(ТекстЗаголовкаОкнаПрограммы + " " + глОграниченКонтрагент);
	
	ВалютаКурса = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВывестиТекущийКурсВЗаголовке");
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		И ЗначениеЗаполнено(ВалютаКурса) Тогда
		
		ТекстЗаголовкаОкнаПрограммы = ТекстЗаголовкаОкнаПрограммы + " " + СокрЛП(ВалютаКурса) + "=" + ОбщийМодульСервер.ПолучитьТекущийКурс(ВалютаКурса, ОбщийМодульКлиент.ПользователяТекущаяДата(), ЛОЖЬ);
	КонецЕсли;
	
	глКонфигурацияВРаботе = ПолнаяВерсия();	
	
	Попытка		
		Выполнить(" УстановитьЗаголовокКлиентскогоПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		
		Если НЕ глКонфигурацияВРаботе Тогда
			Выполнить(" УстановитьКраткийЗаголовокПриложения(ТекстКраткогоЗаголовкаОкнаПрограммы); ");	
		КонецЕсли;
		
	Исключение // 8.2!
		Попытка
			Выполнить(" УстановитьЗаголовокПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		Исключение
		КонецПопытки;
		
	КонецПопытки;
	
	Если ПервыйЗапуск() Тогда
		
		ФормаПервогоЗапуска = ПолучитьФорму("ОбщаяФорма.ФормаВыбораЯзыка");
		ФормаПервогоЗапуска.открытьмодально();
		
		ФормаПервогоЗапуска = ПолучитьФорму("ОбщаяФорма.УстановкаПервоначальныхНастроек");
		ФормаПервогоЗапуска.открытьмодально();
		
		ОбновиласьВерсия();
		
	Иначе
		Если ОбновиласьВерсия() Тогда
			ВывестиМакетЧтоНового();
			
		Иначе
			НоваяВерсия = ЕстьНоваяВерсия();
			
			Если НЕ НоваяВерсия = Неопределено
				И НЕ ПустаяСтрока(НоваяВерсия.ВерсияНаСайте) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации") + ": " + НоваяВерсия.ВерсияНаСайте+ ?(ЗначениеЗаполнено(НоваяВерсия.ПолныйТекстВерсии), Символы.ПС + НоваяВерсия.ПолныйТекстВерсии, ""));
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы")
			И ОбщийМодульСервер.НетСегодняКурса() Тогда
			
			формавводакурса = ПолучитьФорму("РегистрСведений.КурсыВалют.Форма.УстановитьКурсыВалют");
			Попытка
				формавводакурса.Открыть();
			Исключение // 8.2 не УФ
			КонецПопытки;
		КонецЕсли;
		
		Если ОбщийМодульСервер.получитьЗначениеКонстанты("ПоказыватьПриСтартеСписокКлиентовУКоторыхСгодняЗавтраПослезавтраДеньРождения") Тогда			
			ПечатьДнейРождения();			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВывестиСообщенияПользователю(Знач глПараметрыСообщенийПользователя) Экспорт	
	
	ЕстьСообщения = ОбщийМодульСервисСервер.ПолучитьСообщенияСистемыПользователю(глПараметрыСообщенийПользователя, ИСТИНА);
	
	// Если НЕ СтруктураСообщений = Неопределено Тогда
	// ПараметрыФормыСообщений = Новый Структура("СтруктураСообщений", СтруктураСообщений)
	// 	ФормаСообщений = ПолучитьФорму("ОбщаяФорма.ФормаСообщений", ПараметрыФормыСообщений);
	Если ЕстьСообщения Тогда
		ПараметрыФормыСообщений = Новый Структура("глПараметрыСообщенийПользователя, ПрочитатьСообщенияСамостоятельно", глПараметрыСообщенийПользователя, ИСТИНА);
		ФормаСообщений = ПолучитьФорму("ОбщаяФорма.ФормаСообщений", ПараметрыФормыСообщений);
		ФормаСообщений.Открыть();	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВывестиСообщенияПользователю

Процедура СобытиеФормы(ФормаСобытия, Знач ТипСобытия = 0, Знач СсылкаНаОбъект = Неопределено, Знач ЭтоФормаОбъекта = ЛОЖЬ) Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипСобытия = 0
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОтображатьКомандыСнизу") Тогда
			
			ФормаСобытия.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ;
		КонецЕсли;	
	#КонецЕсли
	
	глПроверятьСообщения = ИСТИНА;
	
	ИспользоватьЖурналированиеСобытий = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий");
	ГруппаСтандартныхРеквизитов = Неопределено;
	
	#Если ВебКлиент Тогда
		СимволСправочника = формасобытия.Элементы.найти("СимволСправочника");
		Если НЕ СимволСправочника = Неопределено Тогда
			СимволСправочника.Видимость = ЛОЖЬ;
		КонецЕсли;
	#КонецЕсли
	
	Если ТипСобытия = 0 Тогда
		
		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			ОбводитьРамкамиТекстовыеПоляВФормах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОбводитьРамкамиТекстовыеПоляВФормах");
			
			ТипПолеФормы = Тип("ПолеФормы");
			РамкиТекстовыхПолейВФормахРазличногоЦвета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РамкиТекстовыхПолейВФормахРазличногоЦвета");
			ПодсветитьФонПолей = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсветитьФонПолей");
			
			Если РамкиТекстовыхПолейВФормахРазличногоЦвета 
				ИЛИ ПодсветитьФонПолей Тогда
				
				Попытка
					ТипТаблицаФормы = Тип("ТаблицаФормы");
					Если РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда
						ЦветРамкиКрасный = 5; ЦветРамкиЗеленый = 80; ЦветРамкиСиний = 155;
					КонецЕсли;						
					Если ПодсветитьФонПолей Тогда
						ЦветФонаКрасный = 245; ЦветФонаЗеленый = 250; ЦветФонаСиний = 240;
					КонецЕсли;
					
					ВидР = 1;
					ВидК = 1;
					//Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл 							
					//	типЭлементФормы = тип(ЭлементФормы); 
					//	
					//	Если типЭлементФормы = ТипПолеФормы 							
					//		ИЛИ типЭлементФормы  = ТипТаблицаФормы Тогда
					//		
					//		Если РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда
					//			Если ВидР = 1 Тогда
					//				ЦветРамкиКрасный = ЦветРамкиКрасный + 25; Если ЦветРамкиКрасный > 205 Тогда ЦветРамкиКрасный = 5; КонецЕсли;
					//				ВидР = 2;	
					//			ИначеЕсли ВидР = 2 Тогда
					//				ЦветРамкиЗеленый = ЦветРамкиЗеленый + 25; Если ЦветРамкиЗеленый > 205 Тогда ЦветРамкиЗеленый = 5; КонецЕсли;
					//				ВидР = 3;
					//			Иначе
					//				ЦветРамкиСиний 	 = ЦветРамкиСиний + 25; Если ЦветРамкиСиний > 205 Тогда ЦветРамкиСиний = 5; КонецЕсли;
					//				ВидР = 1; 	
					//			КонецЕсли;
					//			ЦветРамки 		 = Новый Цвет(ЦветРамкиКрасный, ЦветРамкиЗеленый, ЦветРамкиСиний); 
					//			
					//			ЭлементФормы.ЦветРамки = ЦветРамки;	
					//		КонецЕсли;
					//		
					//		Если ПодсветитьФонПолей Тогда
					//			
					//			Если ВидК = 1 Тогда
					//				ЦветФонаКрасный = ЦветФонаКрасный + 5; Если ЦветФонаКрасный > 255 Тогда ЦветФонаКрасный = 240; КонецЕсли;
					//				ВидК = 2;	
					//			ИначеЕсли ВидК = 2 Тогда
					//				ЦветФонаЗеленый = ЦветФонаЗеленый + 5; Если ЦветФонаЗеленый > 255 Тогда ЦветФонаЗеленый = 240; КонецЕсли;
					//				ВидК = 3;	
					//			Иначе
					//				ЦветФонаСиний 	= ЦветФонаСиний + 5; Если ЦветФонаСиний > 255 Тогда ЦветФонаСиний = 240; КонецЕсли;
					//				ВидК = 1;		
					//			КонецЕсли;
					//			ЦветФона 		= Новый Цвет(ЦветФонаКрасный, ЦветФонаЗеленый, ЦветФонаСиний); 
					//			
					//			ЭлементФормы.ЦветФона = ЦветФона;
					//		КонецЕсли;
					//	КонецЕсли;
					//КонецЦикла;
					
					//!!! на переключателе платформа падает
					// Для ускорения код, представленный выше - в одну строку:					
					Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл типЭлементФормы = тип(ЭлементФормы);
						Если типЭлементФормы = ТипПолеФормы ИЛИ типЭлементФормы  = ТипТаблицаФормы Тогда Если РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда Если ВидР = 1 Тогда ЦветРамкиКрасный = ЦветРамкиКрасный + 25; Если ЦветРамкиКрасный > 205 Тогда ЦветРамкиКрасный = 5; КонецЕсли; ВидР = 2; ИначеЕсли ВидР = 2 Тогда ЦветРамкиЗеленый = ЦветРамкиЗеленый + 25; Если ЦветРамкиЗеленый > 205 Тогда ЦветРамкиЗеленый = 5; КонецЕсли; ВидР = 3; Иначе ЦветРамкиСиний = ЦветРамкиСиний + 25; Если ЦветРамкиСиний > 205 Тогда ЦветРамкиСиний = 5; КонецЕсли; ВидР = 1; КонецЕсли; ЦветРамки = Новый Цвет(ЦветРамкиКрасный, ЦветРамкиЗеленый, ЦветРамкиСиний);ЭлементФормы.ЦветРамки = ЦветРамки; КонецЕсли; Если ПодсветитьФонПолей Тогда Если ВидК = 1 Тогда ЦветФонаКрасный = ЦветФонаКрасный + 5; Если ЦветФонаКрасный > 255 Тогда ЦветФонаКрасный = 240; КонецЕсли;ВидК = 2; ИначеЕсли ВидК = 2 Тогда ЦветФонаЗеленый = ЦветФонаЗеленый + 5; Если ЦветФонаЗеленый > 255 Тогда ЦветФонаЗеленый = 240; КонецЕсли;ВидК = 3; Иначе ЦветФонаСиний = ЦветФонаСиний + 5; Если ЦветФонаСиний > 255 Тогда ЦветФонаСиний = 240; КонецЕсли;ВидК = 1; КонецЕсли; ЦветФона = Новый Цвет(ЦветФонаКрасный, ЦветФонаЗеленый, ЦветФонаСиний); ЭлементФормы.ЦветФона = ЦветФона; КонецЕсли; КонецЕсли;
					КонецЦикла;
					
				Исключение // 8,2,18
				КонецПопытки;	
			КонецЕсли;
			
			Если НЕ РамкиТекстовыхПолейВФормахРазличногоЦвета
				И ОбводитьРамкамиТекстовыеПоляВФормах Тогда
				
				Попытка
					ЦветРамки = Новый Цвет(200, 200, 200);	
					Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл							
						типЭлементФормы = тип(ЭлементФормы); Если типЭлементФормы = ТипПолеФормы Тогда ВидПоляФормыПереключатель = ЭлементФормы.Вид = ВидПоляФормы.ПолеПереключателя; Если НЕ ВидПоляФормыПереключатель Тогда ЭлементФормы.ЦветРамки = ЦветРамки; КонецЕсли; КонецЕсли;
					КонецЦикла;
				Исключение // 8,2,18							
				КонецПопытки;
			КонецЕсли;
			
		#КонецЕсли
		
		#Если НЕ ВебКлиент Тогда
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского")
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСобственныйПереводЭлементовИнтерфейса") Тогда
				
				ИмяФормы = ФормаСобытия.ИмяФормы;
				НаличиеПользовательскихПереводов = ОбщийМодульПовтор.ПроверитьНаличиеПользовательскихПереводовДляФормы(ИмяФормы);
				
				Если НаличиеПользовательскихПереводов = Неопределено
					ИЛИ НаличиеПользовательскихПереводов Тогда
					
					ПереводЗаголовка = ОбщийМодульПовтор.ПолучитьПереводДляЭлементаНаЯзыке(ФормаСобытия.Заголовок);
					
					Если НЕ ПустаяСтрока(ПереводЗаголовка) Тогда
						ФормаСобытия.Заголовок = ПереводЗаголовка;
						НаличиеПользовательскихПереводов = ИСТИНА;
					КонецЕсли;
					
					ДекорацияФормы = Тип("ДекорацияФормы");
					КнопкаФормы = Тип("КнопкаФормы");
					СуществуютЭлементыБезОпределенногоЗаголовка = ЛОЖЬ;
					
					//Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл 
					//	типЭлементФормы = тип(ЭлементФормы); 
					//	
					//	СтруктураРезультат = ОбщийМодульКлиент.ПроверитьИперевестиЭлементИнтерфейса(ЭлементФормы, типЭлементФормы = ДекорацияФормы ИЛИ типЭлементФормы = КнопкаФормы);
					//	Если СтруктураРезультат.ЭлементПереведен
					//		И НаличиеПользовательскихПереводов = Неопределено Тогда				
					//		
					//		глМассивФормСПользовательскимПереводом.Вставить(ИмяФормы, ИСТИНА);	
					//		НаличиеПользовательскихПереводов = ИСТИНА;
					//	КонецЕсли;						
					//	Если СтруктураРезультат.СуществуютЭлементыБезОпределенногоЗаголовка Тогда
					//		СуществуютЭлементыБезОпределенногоЗаголовка = ИСТИНА;
					//	КонецЕсли;
					//КонецЦикла;
					
					// Для ускорения код, представленный выше - в одну строку:					
					Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл 
						типЭлементФормы = тип(ЭлементФормы); СтруктураРезультат = ОбщийМодульКлиент.ПроверитьИперевестиЭлементИнтерфейса(ЭлементФормы, типЭлементФормы = ДекорацияФормы ИЛИ типЭлементФормы = КнопкаФормы); Если СтруктураРезультат.ЭлементПереведен И НаличиеПользовательскихПереводов = Неопределено Тогда глМассивФормСПользовательскимПереводом.Вставить(ИмяФормы, ИСТИНА); НаличиеПользовательскихПереводов = ИСТИНА; КонецЕсли; Если СтруктураРезультат.СуществуютЭлементыБезОпределенногоЗаголовка Тогда СуществуютЭлементыБезОпределенногоЗаголовка = ИСТИНА; КонецЕсли;
					КонецЦикла;
					
					Если НаличиеПользовательскихПереводов = Неопределено Тогда
						глМассивФормСПользовательскимПереводом.Вставить(ИмяФормы, ЛОЖЬ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		#КонецЕсли
		
		Если НЕ СсылкаНаОбъект = Неопределено
			И ЗначениеЗаполнено(СсылкаНаОбъект)
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний")
			И НЕ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЗаметкиИНапоминания") Тогда
			
			ЧислоЗаметокСсылки = ОбщийМодульСервер.ПолучитьЧислоЗаметокСсылки(СсылкаНаОбъект);
			
			Если НЕ ЧислоЗаметокСсылки = 0 Тогда
				ГруппаСтандартныхРеквизитов = формасобытия.Элементы.найти("ГруппаСтандартныхРеквизитов");
				
				Если НЕ ГруппаСтандартныхРеквизитов = Неопределено Тогда
					
					НоваяКнопка = формасобытия.Элементы.Найти("ЗаметкиДанногоОбъекта");
					Если НоваяКнопка = Неопределено Тогда
						
						КнопкаЗаметокОбъекта = формасобытия.Элементы.Найти("КнопкаЗаметокОбъекта");
						Если НЕ КнопкаЗаметокОбъекта = Неопределено Тогда
							КнопкаЗаметокОбъекта.Видимость 	= ИСТИНА;							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьЖурналированиеСобытий Тогда
		
		Если ТипСобытия = 0
			И ЭтоФормаОбъекта Тогда
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				
				ГруппаСтандартныхРеквизитов = формасобытия.Элементы.найти("ГруппаСтандартныхРеквизитов");	
				
				Если НЕ ГруппаСтандартныхРеквизитов = Неопределено Тогда
					ГруппаСтандартныхРеквизитов.Видимость = ЛОЖЬ;
				КонецЕсли;
				
			Иначе
				Попытка
					Если ФормаСобытия.Объект.ДатаРедакции = '00010101000000' Тогда
						формасобытия.Элементы.ДатаРедакции.Видимость = ЛОЖЬ;
					КонецЕсли;
				Исключение
				КонецПопытки;  
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			ДобавитьСобытиеЖурнала(ФормаСобытия.ИмяФормы, ТипСобытия, СсылкаНаОбъект);
		Исключение // НЕ УФ
		КонецПопытки;
		
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
		ОбщийМодульСервер.ПроверитьВыполнитьПодписку(СсылкаНаОбъект, ТипСобытия);
	КонецЕсли;
	
КонецПроцедуры

Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт	
	Возврат ОбщийМодульПовтор.УНоменклатурыЕстьАналоги(Номенклатура);	
КонецФункции 

Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт	
	Возврат ОбщийМодульПовтор.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);	
КонецФункции 

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра) Экспорт   	
	ОбщийМодульСервисСервер.УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра);	
КонецПроцедуры

Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля(Знач ВерсияПлатформы = "")
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля(ВерсияПлатформы);
КонецПроцедуры // УстановитьПараметрыСеансаЭлементарнаяТорговля

Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,	
	Знач ИмяПоля,
	Знач ПравоеЗначение = Неопределено,
	Знач ВидСравнения = Неопределено,
	Знач Представление = Неопределено,
	Знач Использование = Неопределено,
	Знач РежимОтображения = Неопределено,
	Знач ЭтоГруппаПолей = ЛОЖЬ,
	Знач СтруктураГруппыПолей = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
	ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ЭтоГруппаПолей, СтруктураГруппыПолей);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
		ПравоеЗначение, Представление, Использование, РежимОтображения, ЭтоГруппаПолей, СтруктураГруппыПолей);
	КонецЕсли;
	
КонецПроцедуры

Функция   СформироватьАдрес(Знач Регион, 
	Знач Локация, 
	Знач ПочтовыйИндекс = "", 
	Знач ЯзыкДокументов = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
		РезультатСформироватьАдрес = ?(стрдлина(СокрЛП(ПочтовыйИндекс)) < 7, "" + Регион + ", " + Локация + ", " + ПочтовыйИндекс, "" + ПочтовыйИндекс + " " + Регион + ", " + Локация);
		
	Иначе
		ВозможноеПредставление = ОбщийМодульТекстСервер.ПолучитьПредставлениеНаЯзыке(Регион, , ИСТИНА, ЯзыкДокументов);
		Если НЕ ВозможноеПредставление = Неопределено Тогда
			РегионСтрока = ВозможноеПредставление;
		Иначе
			РегионСтрока = СокрЛП(Регион);
		КонецЕсли;		
		
		ВозможноеПредставление = ОбщийМодульТекстСервер.ПолучитьПредставлениеНаЯзыке(Локация, , ИСТИНА, ЯзыкДокументов);
		Если НЕ ВозможноеПредставление = Неопределено Тогда
			ЛокацияСтрока = ВозможноеПредставление;
		Иначе
			ЛокацияСтрока = СокрЛП(Локация);
		КонецЕсли;		
		
		РезультатСформироватьАдрес = ?(стрдлина(СокрЛП(ПочтовыйИндекс)) < 7, "" + РегионСтрока + ", " + ЛокацияСтрока + ", " + ПочтовыйИндекс, "" + ПочтовыйИндекс + " " + РегионСтрока + ", " + ЛокацияСтрока);
	КонецЕсли;
	
	Возврат РезультатСформироватьАдрес;
	
КонецФункции 

Функция   ПолучитьСписокИзМетаданных(Знач ЭтоСправочник = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульСервер.ПолучитьСписокИзМетаданных(ЭтоСправочник);
КонецФункции // ПолучитьСписокИзМетаданных

Функция   ЕдиницаПринадлежитНоменклатуре(Знач Номенклатура, Знач ЕдиницаИзмерения) Экспорт	
	Возврат ОбщийМодульСервер.ЕдиницаПринадлежитНоменклатуре(Номенклатура, ЕдиницаИзмерения);	
КонецФункции // ЕдиницаПринадлежитНоменклатуре

Функция   РасчетСуммыПоЯчейкам(Знач ТабДок, Знач Результат) Экспорт
	
	РезультатСтруктураРасчетаСуммыЯчеек = Новый Структура;
	РезультатСтруктураРасчетаСуммыЯчеек.Вставить("СуммаЯчеек", 0);
	РезультатСтруктураРасчетаСуммыЯчеек.Вставить("ВыделеноЯчеек", 0);
	РезультатСтруктураРасчетаСуммыЯчеек.Вставить("КоличествоЧисел", 0);
	РезультатСтруктураРасчетаСуммыЯчеек.Вставить("СреднееЗначение", 0);
	
	Попытка
		
		СоответствиеЯчеек = Новый Соответствие;
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		
		Для Каждого ВыделеннаяОбласть Из ТабДок.ВыделенныеОбласти Цикл 
			Попытка
				Для Индекс1 = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл 
					Для Индекс2 = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл 
						
						Область = Результат.Область(Индекс2, Индекс1, Индекс2, Индекс1); 
						Значение = ОписаниеТипов.ПривестиЗначение(Область.Текст); 
						СоответствиеЯчеек.Вставить(Область.Имя, Значение); 
						РезультатСтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек = РезультатСтруктураРасчетаСуммыЯчеек.ВыделеноЯчеек + 1;
						
					КонецЦикла; 
				КонецЦикла; 
			Исключение // спецячейки (рисунки)
			конецпопытки;
		КонецЦикла;
		
		Для Каждого Ячейка Из СоответствиеЯчеек Цикл 
			Значение = Ячейка.Значение; 
			Если Значение <> 0 Тогда 
				РезультатСтруктураРасчетаСуммыЯчеек.СуммаЯчеек = РезультатСтруктураРасчетаСуммыЯчеек.СуммаЯчеек + Значение; 
				РезультатСтруктураРасчетаСуммыЯчеек.КоличествоЧисел = РезультатСтруктураРасчетаСуммыЯчеек.КоличествоЧисел + 1; 
			КонецЕсли; 
		КонецЦикла;
		
		Если РезультатСтруктураРасчетаСуммыЯчеек.КоличествоЧисел > 1 Тогда
			РезультатСтруктураРасчетаСуммыЯчеек.СреднееЗначение = РезультатСтруктураРасчетаСуммыЯчеек.СуммаЯчеек / РезультатСтруктураРасчетаСуммыЯчеек.КоличествоЧисел;
		Иначе
			РезультатСтруктураРасчетаСуммыЯчеек.СреднееЗначение = 0;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат РезультатСтруктураРасчетаСуммыЯчеек;
	
КонецФункции

Процедура ПеревестиНаименованияАвтоматически(Знач Наименование, 
	Знач НаименованияНаДругихЯзыках, 
	Знач КолонкаЯзык = "Язык", 
	Знач КолонкаПеревод = "НаЯзыке") Экспорт
	
	СписокЯзыков = Новый СписокЗначений;
	ОбщийМодульПовтор.УстановитьСписокДоступныхЯзыков(СписокЯзыков, ИСТИНА);
	
	Для Каждого ЯзыкИзСписка Из СписокЯзыков Цикл
		
		ПоискСтроки = Новый Структура(КолонкаЯзык, ЯзыкИзСписка.Значение);
		
		МассивСтрок = НаименованияНаДругихЯзыках.НайтиСтроки(ПоискСтроки);
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаЯзыка = МассивСтрок[0];
		Иначе
			СтрокаЯзыка = НаименованияНаДругихЯзыках.Добавить();
			СтрокаЯзыка[КолонкаЯзык] = ЯзыкИзСписка.Значение;
		КонецЕсли;
		
		ПереводНаименования = ОбщийМодульТекстСервер.ПолучитьПереводТекста(Наименование, ЯзыкИзСписка.Значение, );
		
		Если НЕ ПереводНаименования = СокрЛП(Наименование)
			И НЕ СтрокаЯзыка[КолонкаПеревод] = ПереводНаименования Тогда
			
			СтрокаЯзыка[КолонкаПеревод] = ПереводНаименования;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПроверитьИперевестиЭлементИнтерфейса(ЭлементФормы, Знач ЭлементБезПодсказки = ЛОЖЬ) Экспорт
	
	Попытка
		СтруктураРезультат = Новый Структура("ЭлементПереведен, СуществуютЭлементыБезОпределенногоЗаголовка", ЛОЖЬ, ЛОЖЬ);
		Если НЕ ПустаяСтрока(ЭлементФормы.Заголовок) Тогда	
			ПереводЗаголовка = ОбщийМодульПовтор.ПолучитьПереводДляЭлементаНаЯзыке(ЭлементФормы.Заголовок);
			
			Если НЕ ПустаяСтрока(ПереводЗаголовка)
				И НЕ ПереводЗаголовка = ЭлементФормы.Заголовок Тогда
				
				ЭлементФормы.Заголовок = ПереводЗаголовка;
				СтруктураРезультат.ЭлементПереведен = ИСТИНА;
			КонецЕсли;
			
		ИначеЕсли НЕ ЭлементБезПодсказки
			И ЭлементФормы.Видимость Тогда
			
			СтруктураРезультат.СуществуютЭлементыБезОпределенногоЗаголовка = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ЭлементБезПодсказки
			И НЕ ПустаяСтрока(ЭлементФормы.Подсказка) Тогда
			
			ПереводПодсказки = ОбщийМодульПовтор.ПолучитьПереводДляЭлементаНаЯзыке(ЭлементФормы.Подсказка);
			
			Если НЕ ПустаяСтрока(ПереводПодсказки)
				И НЕ ПереводПодсказки = ЭлементФормы.Подсказка Тогда
				
				ЭлементФормы.Подсказка = ПереводПодсказки;
				СтруктураРезультат.ЭлементПереведен = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Сообщить("" + тип(ЭлементФормы) + " " + ЭлементФормы.Заголовок + ": " + ТекстОписаниеОшибки);
	КонецПопытки;	
	
	Возврат СтруктураРезультат;
	
КонецФункции //ПроверитьИперевестиЭлементИнтерфейса

Функция   УстановитьКомпонентуWebCam() Экспорт
	
	Результат = ЛОЖЬ;
	Попытка
		УстановитьВнешнююКомпоненту("ОбщийМакет.ДрайверWebCam");
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка подключения компоненты") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции //УстановитьКомпонентуWebCam

Функция   КамераУстановить() Экспорт
	
	ПутьВК = "ОбщийМакет.ДрайверWebCam";
	ИмяВК  = "Video";
	ТипВК  = ТипВнешнейКомпоненты.Native;
	ИмяАИ  = "AddIn.Video.AddInNativeExtension";
	
	Если глВэбКамера <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ПодключитьВнешнююКомпоненту(ПутьВК, ИмяВК ,ТипВК) Тогда
		УстановитьВнешнююКомпоненту(ПутьВК);
		Если НЕ ПодключитьВнешнююКомпоненту(ПутьВК, ИмяВК, ТипВК) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		глВэбКамера = Новый(ИмяАИ);
	Исключение
		глВэбКамера = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция   КамераПолучитьСписокКамер() Экспорт
	Возврат глВэбКамера.ПолучитьСписокКамер();
КонецФункции

Функция   КамераПодключитьКамеру(ID, Знач ЗаголовокОкна, НомерЭлемента) Экспорт
	Возврат глВэбКамера.ПодключитьКамеру(ID, ЗаголовокОкна, НомерЭлемента);
КонецФункции

Функция   КамераОтключитьКамеру() Экспорт
	Возврат глВэбКамера.ОтключитьКамеру();
КонецФункции

Функция   КамераПолучитьФото() Экспорт
	Возврат глВэбКамера.ПолучитьФото();
КонецФункции

Процедура ВводТаблицыЗавершение(Результат, ТаблицаФормы) Экспорт 
	
	Если НЕ Результат = Неопределено Тогда 
		
		ВыполнитьПрограмму   = Результат.ВыполнитьПрограмму;
		СписокКолонокТаблицы = Результат.СписокКолонокТаблицы;
		ТипыКолонок			 = Результат.ТипыКолонок;
		СимволРазделителяЧислаНашейБазы = Сред(СокрЛП(1.5), 2, 1);
		НоменклатураПредставлена = Результат.НоменклатураПредставлена;
		
		ТаблицаФормы.Очистить();
		
		СчетчикСтрок = 2; // первая - заголовок
		Пока СчетчикСтрок < Результат.СчетчикСтрок Цикл
			
			СтрокаТаблицы = ТаблицаФормы.Добавить();
			
			СчетчикКолонок = 1;
			Для Каждого КолонкаТаблицы Из СписокКолонокТаблицы Цикл
				
				ЗначениеЯчейки = Результат.ТаблицаДанных.Область(СчетчикСтрок, СчетчикКолонок).Текст;
				
				ТипВКолонке = ТипЗнч(СтрокаТаблицы[КолонкаТаблицы.Значение]);
				Если ТипВКолонке = Тип("Строка") Тогда
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
				ИначеЕсли ТипВКолонке = Тип("Число") Тогда
					
					Попытка 
						ЗначениеЯчейки = Число(ЗначениеЯчейки);
					Исключение 	
						УбратьНечисловыеСимволы(ЗначениеЯчейки, СимволРазделителяЧислаНашейБазы);
						
						Попытка 
							ЗначениеЯчейки = Число(ЗначениеЯчейки);
						Исключение 	
							ЗначениеЯчейки = 0;
						КонецПопытки;
					КонецПопытки;
					
				ИначеЕсли ТипВКолонке = Тип("Булево") Тогда
					
					ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					Если ЗначениеЯчейки = "1"
						ИЛИ Лев(ВРег(ЗначениеЯчейки), 1) = "Д"
						ИЛИ Лев(ВРег(ЗначениеЯчейки), 1) = "Y" Тогда
						
						ЗначениеЯчейки = ИСТИНА;
					Иначе
						ЗначениеЯчейки = ЛОЖЬ;
					КонецЕсли;
					
				ИначеЕсли ТипВКолонке = Тип("СправочникСсылка.Номенклатура") Тогда
					
					Номенклатура = Неопределено;
					
					Если НоменклатураПредставлена = "Наименование"
						ИЛИ ПустаяСтрока(НоменклатураПредставлена) Тогда
						
						Номенклатура = ОбщийМодульСервер.НайтиЭлементПоИмени("Номенклатура", ЗначениеЯчейки);
					ИначеЕсли НоменклатураПредставлена = "Артикул" Тогда
						Номенклатура = ОбщийМодульТоварСервер.НайтиНоменклатуруПоАртикулу(ЗначениеЯчейки, ИСТИНА);
					ИначеЕсли НоменклатураПредставлена = "ШтрихКод" Тогда
						Номенклатура = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(ЗначениеЯчейки, ЛОЖЬ, ИСТИНА);
					ИначеЕсли НоменклатураПредставлена = "Код" Тогда
						Номенклатура = ОбщийМодульСервер.НайтиЭлементПоКоду("Номенклатура", ЗначениеЯчейки);
					КонецЕсли;
					
					Если Номенклатура = Неопределено Тогда
						Номенклатура = ОбщийМодульСервер.НайтиЭлементПоИмени("Номенклатура", ЗначениеЯчейки);
						Если Номенклатура = Неопределено Тогда
							Номенклатура = ОбщийМодульТоварСервер.НайтиНоменклатуруПоАртикулу(ЗначениеЯчейки, ЛОЖЬ);
						КонецЕсли;	
					КонецЕсли;
					
					ЗначениеЯчейки = Номенклатура;
					
				ИначеЕсли ТипВКолонке = Тип("Неопределено") Тогда // многослойный пирог
					
					ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + Результат.ТипПоляСоставногоВида + " КАК С ГДЕ С.Наименование = &ЗначениеНаименование ";
					ЗначениеЯчейки = ОбщийМодульСервер.НайтиСсылкуПоЗапросу(ТекстЗапроса, "ЗначениеНаименование", ЗначениеЯчейки);
					
				Иначе // обычная ссылка
					Попытка // !! добавить документы
						ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + ТипыКолонок[СчетчикКолонок - 1] + " КАК С ГДЕ С.Наименование = &ЗначениеНаименование ";
						ЗначениеЯчейки = ОбщийМодульСервер.НайтиСсылкуПоЗапросу(ТекстЗапроса, "ЗначениеНаименование", ЗначениеЯчейки);
					Исключение
						
					КонецПопытки;
				КонецЕсли;
				
				СтрокаТаблицы[КолонкаТаблицы.Значение] = ЗначениеЯчейки;
				
				Если НЕ ПустаяСтрока(ВыполнитьПрограмму) Тогда
					Попытка 
						Выполнить(" " + ВыполнитьПрограмму + " ");
					Исключение 	
						ТекстОписаниеОшибки = ОписаниеОшибки();
						Сообщение = Новый СообщениеПользователю;							
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения программы") + ": " + ТекстОписаниеОшибки;
						Сообщение.Сообщить();
					КонецПопытки;
				КонецЕсли;
				
				СчетчикКолонок = СчетчикКолонок + 1;
			КонецЦикла;
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   УбратьНечисловыеСимволы(ЗначениеДанных, Знач РазрешенныйСимволРаделитель = ".", Знач МожетБытьОтрицательным = ЛОЖЬ) Экспорт
	
	Если РазрешенныйСимволРаделитель = "." Тогда
		НеверныйСимволРазделителяЧисла = ",";
	Иначе
		НеверныйСимволРазделителяЧисла = ".";
	КонецЕсли;
	ЗначениеДанных = СокрЛП(ЗначениеДанных);
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, НеверныйСимволРазделителяЧисла, РазрешенныйСимволРаделитель);
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, Символы.НПП, "");
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, Символы.Таб, "");
	ИтоговаяСтрока = "";
	ЧислоСимволов  = СтрДлина(ЗначениеДанных);	
	СчетчикСимволов= 1;
	
	Пока СчетчикСимволов <= ЧислоСимволов Цикл
		СимволСтроки = Сред(ЗначениеДанных, СчетчикСимволов, 1);
		
		Если СимволСтроки = РазрешенныйСимволРаделитель 			
			ИЛИ (МожетБытьОтрицательным 
			И СимволСтроки = "-") Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
		ИначеЕсли НЕ КодСимвола(СимволСтроки) = 32 Тогда // " " -тоже 0
			
			Попытка 
				ЧислоСимвола = Число(СимволСтроки);
				ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
			Исключение 	
			КонецПопытки;      	
		КонецЕсли;
		
		СчетчикСимволов = СчетчикСимволов + 1;
	КонецЦикла;
	
	Возврат ЗначениеДанных;
	
КонецФункции // УбратьНечисловыеСимволы

Процедура ВвестиТаблицу(ПараметрКоманды, ПараметрыВыполненияКоманды, Знач ЭтоТаблицаТоваров = ЛОЖЬ) Экспорт
	
	Если ЭтоТаблицаТоваров Тогда
		ИмяТаблицыОбъекта = "Товары";
	Иначе
		ИмяТаблицыОбъекта = ПараметрыВыполненияКоманды.Источник.ТекущийЭлемент.Имя;
		Если ПустаяСтрока(ИмяТаблицыОбъекта) Тогда
			ИмяТаблицыОбъекта = "Товары";
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицыОбъекта = СтрЗаменить(ИмяТаблицыОбъекта, "1", ""); // для форм с повторениями таблиц в качестве элементов
	ТаблицаДанных 	  = ПараметрыВыполненияКоманды.Источник.Объект[ИмяТаблицыОбъекта];
	КоличествоСтрок   = ТаблицаДанных.Количество();
	
	ДокументЗаблокирован = ЛОЖЬ;
	Попытка
		ДокументЗаблокирован = ПараметрыВыполненияКоманды.Источник.ДокументЗаблокирован;
	Исключение
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ заблокирован!"));
	КонецЕсли;
	
	Если КоличествоСтрок = 0
		ИЛИ ДокументЗаблокирован
		ИЛИ Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заменить данные в таблице?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ТипПолучателяТаблицы = ПараметрыВыполненияКоманды.Источник.ИмяФормы;
		НаименованиеТаблицы  = ИмяТаблицыОбъекта;
		
		ПараметрыФормы = Новый Структура("ТипПолучателяТаблицы, НаименованиеТаблицы, ИсходнаяТаблицаДанных", ТипПолучателяТаблицы, НаименованиеТаблицы, ТаблицаДанных);
		
		Если глВерсияПлатформы < 803040000  Тогда
			Результат = ОткрытьФормуМодально("Обработка.ВводТаблицы.Форма.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Окно);
			Если НЕ ДокументЗаблокирован Тогда
				ВводТаблицыЗавершение(Результат, ТаблицаДанных);
			КонецЕсли;
		Иначе
			Выполнить("Если НЕ ДокументЗаблокирован Тогда
			|ОповещениеПроВводТаблицы = Новый ОписаниеОповещения(""ВводТаблицыЗавершение"", ОбщийМодульКлиент, ТаблицаДанных);
			|КонецЕсли;
			|ОткрытьФорму(""Обработка.ВводТаблицы.Форма"", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка, ?(НЕ ДокументЗаблокирован, ОповещениеПроВводТаблицы, Неопределено), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); ");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуКомандДополнительныхОтчетовИОбработок(ПараметрКоманды, ПараметрыВыполненияКоманды, Вид, ИмяРаздела = "") Экспорт
	
	ОбъектыНазначения = Новый СписокЗначений;
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		ОбъектыНазначения.ЗагрузитьЗначения(ПараметрКоманды);
	КонецЕсли;
	
	Параметры = Новый Структура("ОбъектыНазначения, Вид, ИмяРаздела, РежимОткрытияОкна");
	Параметры.ОбъектыНазначения = ОбъектыНазначения;
	Параметры.Вид = Вид;
	Параметры.ИмяРаздела = ИмяРаздела;
	Параметры.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		Параметры.Вставить("ИмяФормы", ПараметрыВыполненияКоманды.Источник.ИмяФормы);
	КонецЕсли;
	
	//ОткрытьФорму(
	//	"ОбщаяФорма.ДополнительныеОтчетыИОбработки", 
	//	Параметры,
	//	ПараметрыВыполненияКоманды.Источник
	//);
	
КонецПроцедуры

// Открывает форму дополнительного отчета с заданным вариантом.
// 
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//
Процедура ОткрытьВариантДополнительногоОтчета(Ссылка, КлючВарианта) Экспорт
	
	ИмяОтчета = ОбщийМодульСервисСервер.ПодключитьВнешнююОбработку(Ссылка);
	ПараметрыОткрытия = Новый Структура("КлючВарианта", КлючВарианта);
	Уникальность = "ВнешнийОтчет." + ИмяОтчета + "/КлючВарианта." + КлючВарианта;
	ОткрытьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Уникальность);
	
КонецПроцедуры

// Вызывает диалог сохранения редактируемых данных произвольной формы
//   Вызывается из обработчиков "ПередЗакрытием" и "ПриЗакрытии".
// 
// Параметры:
//   Отказ - (...) Флаг отказа от закрытия формы.
//       |- (Булево)    для обработчика "ПередЗакрытием", используется для толстого и тонкого клиентов
//       |- (Неопределено) для обработчика "ПриЗакрытии", используется для веб клиента
//   Модифицированность - (Булево) Флаг модифицированности формы.
//       Если форма не модифицирована, то сохранять нечего и запрос не требуется
// 
// Возвращаемое значение: 
//   (Булево) Необходимость сохранения данных формы.
//
Функция   СохранитьДанныеПроизвольнойФормы(Модифицированность, Отказ = Неопределено) Экспорт
	
	// Изменение сохраняемых данных должно устанавливать модифицированность формы
	Если Модифицированность <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определение клиента
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	// Предупреждение необходимо вызвать только один раз для одного клиента
	Если ЭтоВебКлиент <> (Отказ = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса =ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные были изменены. Сохранить изменения?");
	Кнопки = ?(ЭтоВебКлиент, РежимДиалогаВопрос.ДаНет, РежимДиалогаВопрос.ДаНетОтмена);
	Ответ = Вопрос(ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет); 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЭтоВебКлиент И Ответ = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для внутреннего использования
// 
Функция   ВариантЗапускаВызовКлиентскогоМетода() Экспорт
	
	Возврат "ВызовКлиентскогоМетода";
	
КонецФункции

// Для внутреннего использования
// 
Функция   ВариантЗапускаВызовСерверногоМетода() Экспорт
	
	Возврат "ВызовСерверногоМетода";
	
КонецФункции

// Для внутреннего использования
// 
Функция   ВариантЗапускаОткрытиеФормы() Экспорт
	
	Возврат "ОткрытиеФормы";
	
КонецФункции

Процедура ОткрытьФункциюОператора(Знач ДополнительныйОтчетИлиОбработка, Знач ЗапускатьМодально = ЛОЖЬ) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныйОтчетИлиОбработка) Тогда
		ОбщийМодульКлиент.ВыполнитьОбработкуПоПараметрам(ДополнительныйОтчетИлиОбработка, ЗапускатьМодально);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФункциюОператора

Процедура ВыполнитьОбработкуПоПараметрам(Знач ДополнительныйОтчетИлиОбработка, Знач ЗапускатьМодально = ЛОЖЬ, Знач ПереданоИмяФайла = ЛОЖЬ) Экспорт
	
	Если ПереданоИмяФайла Тогда
		ВыполнитьОткрытиеФормыВнешнейОбработки(ДополнительныйОтчетИлиОбработка);	
		
	Иначе
		ВыполняемаяОбработка = ОбщийМодульСервисСервер.ПолучитьСтруктуруИзРеквизитов(ДополнительныйОтчетИлиОбработка);
		
		Если ЗапускатьМодально = Неопределено Тогда
			ЗапускатьМодально = ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(ДополнительныйОтчетИлиОбработка, "ЗапускатьМодально");
		КонецЕсли;
		
		ВыполнитьОткрытиеФормыОбработки(ДополнительныйОтчетИлиОбработка, ВыполняемаяОбработка, ЗапускатьМодально);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОткрытиеФормыВнешнейОбработки(Знач ДополнительныйОтчетИлиОбработка)
	
	АдресХранилища = "";
	Результат = ПоместитьФайл(АдресХранилища, ДополнительныйОтчетИлиОбработка, , Ложь);           
	ИмяОбработки = ОбщийМодульСервер.ПодключитьВнешнююОбработку(АдресХранилища);
	
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма");
	
КонецПроцедуры

Процедура ВыполнитьОткрытиеФормыОбработки(Знач ДополнительныйОтчетИлиОбработка, Знач ВыполняемаяОбработка = Неопределено, Знач ЗапускатьМодально = ЛОЖЬ, Знач ПереданоИмяФайла = ЛОЖЬ)
	
	ИмяОбработки = ОбщийМодульСервисСервер.ПодключитьВнешнююОбработку(ДополнительныйОтчетИлиОбработка);
	
	ПараметрыОбработки = Новый Структура("ИдентификаторКоманды, ДополнительнаяОбработкаСсылка");
	ПараметрыОбработки.ИдентификаторКоманды          = ВыполняемаяОбработка.Идентификатор;
	ПараметрыОбработки.ДополнительнаяОбработкаСсылка = ВыполняемаяОбработка.Ссылка;
	
	Если ЗапускатьМодально Тогда
		
		Если ВыполняемаяОбработка.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет")
			ИЛИ ВыполняемаяОбработка.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет") Тогда
			
			ОткрытьФормуМодально("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		Иначе
			ОткрытьФормуМодально("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		КонецЕсли;	
		
	Иначе
		Если ВыполняемаяОбработка.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет")
			ИЛИ ВыполняемаяОбработка.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет") Тогда
			
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		Иначе
			ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
