//sza140913-2314
//sza140904-0114
//sza140830-1915
//sza140710-1224  локация
//sza140702-1333  
//sza140604-1707  
//sza130901-1733 : 
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = ЛОЖЬ;
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			Если КоличествоНайденных > 7 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // АвтоПодбор()	

Функция   ВвестиНоменклатуруИКоличество(Знач СтруктураДляВВода) Экспорт
	
	СтруктураВозврат = Неопределено;
	
	ФормаВВодаСКоличеством = получитьформу("ОбщаяФорма.ВводШтрихКодаИКоличества", СтруктураДляВВода);
	СтруктураВозврат = ФормаВВодаСКоличеством.ОткрытьМодально();
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ВывестиМакетЧтоНового()
	
	ФормаПечати = ПолучитьФорму("ОбщаяФорма.ФормаПечати");
	Если НЕ ОбщийМодульСервисСервер.ВывестиМакетЧтоНового(ФормаПечати.Результат) = Неопределено Тогда
		
		ФормаПечати.Результат.ОтображатьСетку 	= ЛОЖЬ;
		ФормаПечати.Результат.Защита 			= ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	= ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Что нового, что изменилось");
		
		ФормаПечати.открыть();		
		
	КонецЕсли;
	
конецпроцедуры

Функция   ВыдатьСигнал(Знач ТекКод = "") Экспорт
	
	#если не ВебКлиент тогда
		сигнал();
	#КонецЕсли
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОстанавливатьСканированиеВДокументеПриНеНайденнойНоменклатуре") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ШтрихКод", ТекКод);
		ФормаОшибки = ПолучитьФорму("ОбщаяФорма.ФормаОшибкиСканера", ПараметрыФормы);
		ФормаОшибки.Открыть();
		
		Возврат ИСТИНА;		
		
	Иначе
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
КонецФункции //ВыдатьСигнал()

Процедура ДобавитьСобытиеЖурнала(ФормаСобытия, ТипСобытия, Знач СсылкаНаОбъект = Неопределено) Экспорт
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(СокрЛП(ФормаСобытия), ТипСобытия, СсылкаНаОбъект);
КонецПроцедуры

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция   ДобавитьЭлементКомпоновки(ОбластьДобавления,	
	знач ИмяПоля,
	знач ВидСравнения,
	знач ПравоеЗначение = Неопределено,
	знач Представление  = Неопределено,
	знач Использование  = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция   ЕстьНоваяВерсия() 	
	Возврат ОбщийМодульСервер.ЕстьНоваяВерсияПрограммы();	
КонецФункции //ЕстьНоваяВерсия

Функция   ЗаголовокОкна()	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы");	
КонецФункции //ЗаголовокОкна

Процедура ЗаписатьЗначениеПараметраИлиКонстанты(Знач ИмяПараметраИлиКонстанты, Знач ЗначениеПараметраИлиКонстанты, Знач ТолькоКонстанта = ЛОЖЬ, Знач Комментарий = "") Экспорт
	ОбщийМодульСервисСервер.УстановитьЗначениеПараметраИлиКонстанты(ИмяПараметраИлиКонстанты, ЗначениеПараметраИлиКонстанты, ТолькоКонстанта, Комментарий);	
КонецПроцедуры

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция   ИзменитьЭлементыОтбора(ОбластьПоиска,	
	знач ИмяПоля = Неопределено,
	знач Представление = Неопределено,
	знач ПравоеЗначение = Неопределено,
	знач ВидСравнения = Неопределено,
	знач Использование = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

Функция   ИспользоватьПодключаемоеОборудование() Экспорт	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПодключаемоеОборудование");	
КонецФункции //ИспользоватьПодключаемоеОборудование

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ОбновиласьВерсия()    	
	
	НоваяВерсия = ОбщийМодульСервисСервер.ЭтоНоваяВерсия(ИСТИНА);
	
	Если НЕ ПустаяСтрока(НоваяВерсия) Тогда
		
		состояние(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обновление базы данных..") + "(" + НоваяВерсия + ")", , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ждите.."));
		Возврат ОбщийМодульСервисСервер.ОбновиласьВерсия();	
		
	Иначе
		Возврат ЛОЖЬ;	
	КонецЕсли;
	
КонецФункции

Процедура ОкруглитьТоВары(Документ, Коэффициент = 0, ОкруглятьТолькоВверх = ЛОЖЬ, НаименованиеТаблицы = "Товары") Экспорт		
	ОбщийМодульТоварСервер.ОкруглитьТоВары(Документ, Коэффициент, ОкруглятьТолькоВверх, НаименованиеТаблицы);	
КонецПроцедуры

Процедура ОтправитьПоEMAIL(Результат, ИмяДокумента) Экспорт
	
	Если Вопрос(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вы уверены, что следует отправить отчет?"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ТекстСопровождения = "";
		ВвестиСтроку(ТекстСопровождения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Текст с") + " " + ИмяДокумента, 1020, ИСТИНА);
		
		ОбщийМодульСервисСервер.ОправитьПоEMAILКонтрагентуНаСервере(ТекстСопровождения, Результат, ИмяДокумента);	  	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТовары(Документ) Экспорт	
	ОбщийМодульТоварСервер.ОчиститьТоварыНаСервере(Документ);	
КонецПроцедуры //ОчиститьТовары

Функция   ПервыйЗапуск()	
	Возврат НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка");	
КонецФункции

Функция   ПеревестиТекстНаЯзык(СтрокаПеревода, Направление) Экспорт
	
	Если Направление = 0 Тогда
		Возврат ПодсистемаИЭИмпортЭкспортФС.ПривестиКСимволамНаРусском(СтрокаПеревода, ИСТИНА);
	Иначе
		Возврат ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(СтрокаПеревода, ЛОЖЬ, ЛОЖЬ, ИСТИНА);
	КонецЕсли;	
	
КонецФункции //ПеревестиТекстНаЯзык

Процедура ПересчитатьТоВары(Документ, Знач Коэффициент = 0, Знач НаименованиеТаблицы = "Товары", Знач БезДопРасчетов = ЛОЖЬ) Экспорт		
	ОбщийМодульТоварСервер.ПересчитатьТоварыНаСервере(Документ, Коэффициент, НаименованиеТаблицы, БезДопРасчетов);	
КонецПроцедуры

Процедура ПечатьДнейРождения(Насильно = ЛОЖЬ) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаименованиеДокумента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дни рождения"));
	
	Если ОбщийМодульСервер.ПечатьДнейРожденияКлиентов()
		ИЛИ Насильно Тогда
		
		ФормаПечати = получитьформу("ОбщаяФорма.ФормаПечати", ПараметрыФормы);
		ОбщийМодульСервер.ПечатьДнейРожденияКлиентов(ФормаПечати.Результат);
		
		ФормаПечати.Результат.ОтображатьСетку 	  = ЛОЖЬ;
		ФормаПечати.Результат.Защита 			  = ИСТИНА;
		ФормаПечати.Результат.ТолькоПросмотр 	  = ИСТИНА;
		ФормаПечати.Результат.ОтображатьЗаголовки = ЛОЖЬ;
		ФормаПечати.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("печать: Дни рождения клиентов");
		ФормаПечати.открыть();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьЧека(Знач Текст, Знач УникальныйИдентификатор) Экспорт
	
	ОписаниеОшибки = "";
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ФР = ПодключаемоеОборудованиеДСервер.ВернутьИдентификаторУстройстваФР();
		Если ФР.Пустая() Тогда
			ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выберите фискальный регистратор"),	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фискальный регистратор не подключен"));
		Иначе
			ИдентификаторУстройства = ФР;
		КонецЕсли;
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
			
			Если Результат Тогда
				
				ВходныеПараметры = Новый Массив;
				ВходныеПараметры.Добавить(Текст);
				ВыходныеПараметры = Неопределено;
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "PrintText", ВходныеПараметры, ВыходныеПараметры);
				
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				
				Если НЕ Результат Тогда
					ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При печати слип-чека возникла ошибка") + ":" + ВыходныеПараметры[1];
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);					
				КонецЕсли;
				
			Иначе
				ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("При подключении устройства произошла ошибка. Чек НЕ напечатан на фискальном регистраторе");
				ТекстСообщения = ТекстСообщения + " :- " + ОписаниеОшибки;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не выбран фискальный регистратор.");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПлатнаяВерсия() 	
	Возврат ОбщийМодульСервер.ПлатнаяВерсия();	
КонецФункции //ПлатнаяВерсия

Функция   ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат") + ": %" + СимволСтроки;
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда ЗначениеПараметра = Параметр9;
		Иначе ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Входная строка СтрокаПодстановки имеет неверный формат") + ": %" + ЗначениеПараметра;
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
		
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПоискОшибкиКодировки(Знач ИмяСправочника, ДанныеВыбора, Текст, ЭлементыТекущиеДанные, Знач КлиентПоставщик = Неопределено) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, Текст);
		
		Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда
			ТекстРус = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 0);
			ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстРус);
			
			Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда
				ТекстАнг = ОбщийМодульКлиент.ПеревестиТекстНаЯзык(Текст, 1);
				ДанныеВыбора = ОбщийМодульСервер.НайтиЭлементПоИмени(ИмяСправочника, ТекстАнг);
				
				Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
					Текст = ТекстАнг;
				Иначе
					Если ИмяСправочника = "Номенклатура" Тогда
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда						
							ДанныеВыбора = ОбщийМодульТоварСервер.НайтиНоменклатуруПоАртикулу(Текст, ЛОЖЬ);	
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеВыбора)
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") Тогда
							
							ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоШтрихКоду(Текст, ЛОЖЬ);	
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеВыбора)
							И НЕ КлиентПоставщик = Неопределено
							И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда
							
							ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование"), Текст);
							
							Если НЕ ЗначениеЗаполнено(ДанныеВыбора) Тогда							
								ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати"), Текст);
								
								Если НЕ ЗначениеЗаполнено(ДанныеВыбора) 
									И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры") Тогда
									
									ДанныеВыбора = ОбщийМодульТоварСервер.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), Текст);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ИмяСправочника = "Поставщики"
						ИЛИ ИмяСправочника = "Клиенты"
						ИЛИ ИмяСправочника = "Организации"
						ИЛИ ИмяСправочника = "Сотрудники" Тогда
						
						ДанныеВыбора = ОбщийМодульСервер.НайтиПоТелефону(Текст, ИмяСправочника);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Текст = ТекстРус;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		ЭлементыТекущиеДанные = ДанныеВыбора;
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьЗначениеНастройкиИлиКонстанты(ИмяКонстанты)  Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты(ИмяКонстанты);
КонецФункции

Функция   ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(Знач ВидИнформации) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(ВидИнформации);	
КонецФункции 

Функция   получитьЗначениеРеквизита(Знач ЭлементСРеквизитом, Знач ИмяРеквизита = "Наименование") Экспорт
	Возврат ОбщийМодульСервер.получитьЗначениеРеквизита(ЭлементСРеквизитом, ИмяРеквизита);
КонецФункции //получитьЗначениеРеквизита

Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт	
	Возврат ОбщийМодульСервисСервер.ПолучитьПараметрСеанса(ИмяПараметра);	
КонецФункции //ПолучитьПараметрСеанса

Функция   ПолучитьРодителя(Знач Элемент) Экспорт  	
	Возврат ОбщийМодульСервисСервер.получитьРодителя(Элемент);	
КонецФункции //ПолучитьРодителя

Функция   ПользователяТекущаяДата() Экспорт	
	Возврат ОбщийМодульСервисСервер.ПользователяТекущаяДата();	
КонецФункции //ПользователяТекущаяДата

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	СредаВыполнения = ОбщийМодульПовтор.ПолучитьТекущуюСредуВыполнения();
	
	Если СредаВыполнения = 1
		ИЛИ СредаВыполнения = 4
		ИЛИ СредаВыполнения = 5 Тогда
		
		СисИнфор = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфор.ВерсияПриложения;
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПлатформы  = ВерсияПлатформы + ?(ТочкаВВерсии = 2, "0", "") + Лев(ВерсияПриложения, ТочкаВВерсии - 1);
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		ТочкаВВерсии 	 = Найти(ВерсияПриложения, ".");
		ВерсияПриложения = Прав(ВерсияПриложения, СтрДлина(ВерсияПриложения) - ТочкаВВерсии);
		
		Если СтрДлина(ВерсияПриложения) = 3 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 2 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "00" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 1 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "000" + ВерсияПриложения;
		ИначеЕсли СтрДлина(ВерсияПриложения) = 0 Тогда
			ВерсияПлатформы  = ВерсияПлатформы + "0000" + ВерсияПриложения;
		Иначе //4
			ВерсияПлатформы  = ВерсияПлатформы + ВерсияПриложения;
		КонецЕсли;
		
		глВерсияПлатформы = Число(ВерсияПлатформы);
		Если глВерсияПлатформы < 802180000 Тогда
			Предупреждение("Конфигурация работает на платформе 1С вер. 8.2.18 и выше!" + Символы.ПС + "Рекомендуется: 8.3.5 и выше!"); //без перевода
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьПараметрыСеансаЭлементарнаяТорговля();
	
	ТекстЗаголовкаОкнаПрограммы = ЗаголовокОкна();
	
	Если НЕ ЗначениеЗаполнено(ТекстЗаголовкаОкнаПрограммы) Тогда
		ТекстЗаголовкаОкнаПрограммы 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭЛЕМЕНТАРНАЯ Торговля") + " " + ОбщийМодульСервер.ПолучитьВерсиюКонфигурации();
		ТекстКраткогоЗаголовкаОкнаПрограммы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЭТ")
	КонецЕсли;
	
	ТекстЗаголовкаОкнаПрограммы = ?(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДобавлятьИмяПользователяВЗаголовокОкна"), "" + глТекущийПользователь + " ", "") + ТекстЗаголовкаОкнаПрограммы;
	
	глКонфигурацияВРаботе = ПлатнаяВерсия();	
	
	Попытка		
		Выполнить(" УстановитьЗаголовокКлиентскогоПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		
		Если НЕ глКонфигурацияВРаботе Тогда
			Выполнить(" УстановитьКраткийЗаголовокПриложения(ТекстКраткогоЗаголовкаОкнаПрограммы); ");	
		КонецЕсли;
		
	Исключение //8.2!
		Попытка
			Выполнить(" УстановитьЗаголовокПриложения(ТекстЗаголовкаОкнаПрограммы); ");
		Исключение
		КонецПопытки;
		
	КонецПопытки;
	
	Если ПервыйЗапуск() Тогда
		
		ФормаПервогоЗапуска = ПолучитьФорму("ОбщаяФорма.ФормаВыбораЯзыка");
		ФормаПервогоЗапуска.открытьмодально();
		
		ФормаПервогоЗапуска = ПолучитьФорму("ОбщаяФорма.УстановкаПервоначальныхНастроек");
		ФормаПервогоЗапуска.открытьмодально();
		ОбновиласьВерсия();
		
	Иначе
		Если ОбновиласьВерсия() Тогда
			ВывестиМакетЧтоНового();
			
		Иначе
			НоваяВерсия = ЕстьНоваяВерсия();
			
			Если НЕ НоваяВерсия = Неопределено
				И НЕ ПустаяСтрока(НоваяВерсия.ВерсияНаСайте) ТОгда
				
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("На сайте") + " www.ELTR.od.ua " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступна новая версия конфигурации") + ": " + НоваяВерсия.ВерсияНаСайте+ ?(ЗначениеЗаполнено(НоваяВерсия.ПолныйТекстВерсии), Символы.ПС + НоваяВерсия.ПолныйТекстВерсии, ""));
			КонецЕсли;	
		КонецЕсли;
		
		Если ОбщийМодульСервер.получитьЗначениеКонстанты("ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы") 
			И ОбщийМодульСервер.нетсегоднякурса() Тогда
			
			формавводакурса = ПолучитьФорму("РегистрСведений.КурсыВалют.Форма.УстановитьКурсыВалют");
			формавводакурса.Открыть();			
		КонецЕсли;
		
		Если ОбщийМодульСервер.получитьЗначениеКонстанты("ПоказыватьПриСтартеСписокКлиентовУКоторыхСгодняЗавтраПослезавтраДеньРождения") Тогда
			
			ПечатьДнейРождения();			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВывестиСообщенияПользователю(Знач глОтборСтруктура) Экспорт	
	
	СтруктураСообщений = ОбщийМодульСервисСервер.ПолучитьСообщенияСистемыПользователю(глОтборСтруктура);
	
	Если НЕ СтруктураСообщений = Неопределено Тогда
		ФормаСообщений = получитьформу("ОбщаяФорма.ФормаСообщений", Новый Структура("СтруктураСообщений", СтруктураСообщений));
		ФормаСообщений.Открыть();	
	КонецЕсли;
	
КонецПроцедуры //ПроверитьВывестиСообщенияПользователю

Процедура СобытиеФормы(ФормаСобытия, Знач ТипСобытия = 0, Знач СсылкаНаОбъект = Неопределено, Знач ЭтоФормаОбъекта = ЛОЖЬ) Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	Если ТипСобытия = 0
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОтображатьКомандыСнизу") Тогда
		
		ФормаСобытия.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Низ;
	КонецЕсли;	
	#КонецЕсли

	глПроверятьСообщения = ИСТИНА;
	
	ИспользоватьЖурналированиеСобытий = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьЖурналированиеСобытий");
	ГруппаСтандартныхРеквизитов = Неопределено;
	
	#Если ВэбКлиент Тогда
		СимволСправочника = формасобытия.Элементы.найти("СимволСправочника");
		Если НЕ СимволСправочника = Неопределено Тогда
			СимволСправочника.Видимость = ЛОЖЬ;
		КонецЕсли;
	#КонецЕсли
	
	Если ТипСобытия = 0 Тогда
		
		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			ОбводитьРамкамиТекстовыеПоляВФормах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОбводитьРамкамиТекстовыеПоляВФормах");
				
				ТипПолеФормы = Тип("ПолеФормы");
				РамкиТекстовыхПолейВФормахРазличногоЦвета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РамкиТекстовыхПолейВФормахРазличногоЦвета");
				ПодсветитьФонПолей = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсветитьФонПолей");
				
				Если РамкиТекстовыхПолейВФормахРазличногоЦвета 
					ИЛИ ПодсветитьФонПолей Тогда
					
					Попытка
						ТипТаблицаФормы = Тип("ТаблицаФормы");
						Если РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда
							ЦветРамкиКрасный = 5; ЦветРамкиЗеленый = 80; ЦветРамкиСиний = 155;
						КонецЕсли;						
						Если ПодсветитьФонПолей Тогда
							ЦветФонаКрасный = 245; ЦветФонаЗеленый = 250; ЦветФонаСиний = 240;
						КонецЕсли;
						
						ВидР = 1;
						ВидК = 1;
						Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл типЭлементФормы = тип(ЭлементФормы); 
							
							Если типЭлементФормы = ТипПолеФормы 							
								ИЛИ типЭлементФормы  = ТипТаблицаФормы Тогда
								
								Если РамкиТекстовыхПолейВФормахРазличногоЦвета Тогда
									Если ВидР = 1 Тогда
										ЦветРамкиКрасный = ЦветРамкиКрасный + 25; если ЦветРамкиКрасный > 205 тогда ЦветРамкиКрасный = 5; КонецЕсли;
										ВидР = 2;	
									ИначеЕсли ВидР = 2 Тогда
										ЦветРамкиЗеленый = ЦветРамкиЗеленый + 25; если ЦветРамкиЗеленый > 205 тогда ЦветРамкиЗеленый = 5; КонецЕсли;
										ВидР = 3;
									Иначе
										ЦветРамкиСиний 	 = ЦветРамкиСиний + 25; если ЦветРамкиСиний > 205 тогда ЦветРамкиСиний = 5; КонецЕсли;
										ВидР = 1; 	
									КонецЕсли;
									ЦветРамки 		 = Новый Цвет(ЦветРамкиКрасный, ЦветРамкиЗеленый, ЦветРамкиСиний); 
									
									ЭлементФормы.ЦветРамки = ЦветРамки;	
								КонецЕсли;
								                                 
								Если ПодсветитьФонПолей Тогда
									
									Если ВидК = 1 Тогда
										ЦветФонаКрасный = ЦветФонаКрасный + 5; если ЦветФонаКрасный > 255 тогда ЦветФонаКрасный = 240; КонецЕсли;
										ВидК = 2;	
									ИначеЕсли ВидК = 2 Тогда
										ЦветФонаЗеленый = ЦветФонаЗеленый + 5; если ЦветФонаЗеленый > 255 тогда ЦветФонаЗеленый = 240; КонецЕсли;
										ВидК = 3;	
									Иначе
										ЦветФонаСиний 	= ЦветФонаСиний + 5; если ЦветФонаСиний > 255 тогда ЦветФонаСиний = 240; КонецЕсли;
										ВидК = 1;		
									КонецЕсли;
									ЦветФона 		= Новый Цвет(ЦветФонаКрасный, ЦветФонаЗеленый, ЦветФонаСиний); 
									
									ЭлементФормы.ЦветФона = ЦветФона;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Исключение //8,2,18
					КонецПопытки;	
				КонецЕсли;
				
				Если НЕ РамкиТекстовыхПолейВФормахРазличногоЦвета
					И ОбводитьРамкамиТекстовыеПоляВФормах Тогда
					
					Попытка
						ЦветРамки = Новый Цвет(200, 200, 200);	
						Для Каждого ЭлементФормы Из ФормаСобытия.Элементы Цикл							
							типЭлементФормы = тип(ЭлементФормы);							
							Если типЭлементФормы  = ТипПолеФормы Тогда ЭлементФормы.ЦветРамки = ЦветРамки; КонецЕсли;
						КонецЦикла;
					Исключение //8,2,18							
					КонецПопытки;
				КонецЕсли;
				
		#КонецЕсли
		
		Если НЕ СсылкаНаОбъект = Неопределено
			И ЗначениеЗаполнено(СсылкаНаОбъект)
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний")
			И НЕ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЗаметкиИНапоминания") Тогда
			
			ЧислоЗаметокСсылки = ОбщийМодульСервер.ПолучитьЧислоЗаметокСсылки(СсылкаНаОбъект);
			
			Если НЕ ЧислоЗаметокСсылки = 0 Тогда
				ГруппаСтандартныхРеквизитов = формасобытия.Элементы.найти("ГруппаСтандартныхРеквизитов");
				
				Если НЕ ГруппаСтандартныхРеквизитов = Неопределено Тогда
					
					НоваяКнопка = формасобытия.Элементы.Найти("ЗаметкиДанногоОбъекта");
					Если НоваяКнопка = Неопределено тогда
						
						КнопкаЗаметокОбъекта = формасобытия.Элементы.Найти("КнопкаЗаметокОбъекта");
						Если НЕ КнопкаЗаметокОбъекта = Неопределено Тогда
							КнопкаЗаметокОбъекта.Видимость 	= ИСТИНА;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьЖурналированиеСобытий тогда
		
		Если ТипСобытия = 0
			И ЭтоФормаОбъекта тогда
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				
				ГруппаСтандартныхРеквизитов = формасобытия.Элементы.найти("ГруппаСтандартныхРеквизитов");	
				
				Если НЕ ГруппаСтандартныхРеквизитов = Неопределено Тогда
					ГруппаСтандартныхРеквизитов.Видимость = ЛОЖЬ;
				КонецЕсли;
				
			Иначе
				попытка
					Если ФормаСобытия.Объект.ДатаРедакции = '00010101000000' тогда
						формасобытия.Элементы.ДатаРедакции.Видимость = ЛОЖЬ;
					КонецЕсли;
				исключение
				конецпопытки;  
				
			КонецЕсли;
			
		КонецЕсли;
		
		попытка
			ДобавитьСобытиеЖурнала(ФормаСобытия.ИмяФормы, ТипСобытия, СсылкаНаОбъект);	
		исключение //НЕ УФ
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт	
	Возврат ОбщийМодульПовтор.УНоменклатурыЕстьАналоги(Номенклатура);	
КонецФункции 

Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт	
	Возврат ОбщийМодульПовтор.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);	
КонецФункции 

Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра) Экспорт   	
	ОбщийМодульСервисСервер.УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра);	
КонецПроцедуры

Процедура УстановитьПараметрыСеансаЭлементарнаяТорговля()
	ОбщийМодульСервисСервер.УстановитьПараметрыСеансаЭлементарнаяТорговля();
КонецПроцедуры //УстановитьПараметрыСеансаЭлементарнаяТорговля

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,	
	знач ИмяПоля,
	знач ПравоеЗначение = Неопределено,
	знач ВидСравнения = Неопределено,
	знач Представление = Неопределено,
	знач Использование = Неопределено,
	знач РежимОтображения = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
	ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
		ПравоеЗначение, Представление, Использование, РежимОтображения);
	КонецЕсли;
	
КонецПроцедуры

Функция   СформироватьАдрес(Знач Регион, Знач Локация, Знач ПочтовыйИндекс = "", Знач ЯзыкДокументов = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
		РезультатСформироватьАдрес = ?(стрдлина(СокрЛП(ПочтовыйИндекс)) < 7, "" + Регион + ", " + Локация + ", " + ПочтовыйИндекс, "" + ПочтовыйИндекс + " " + Регион + ", " + Локация);
		
	Иначе
		ВозможноеПредставление = ОбщийМодульТекстСервер.ПолучитьПредставлениеНаЯзыке(Регион, , ИСТИНА, ЯзыкДокументов);
		Если НЕ ВозможноеПредставление = Неопределено Тогда
			РегионСтрока = ВозможноеПредставление;
		Иначе
			РегионСтрока = СокрЛП(Регион);
		КонецЕсли;		

		ВозможноеПредставление = ОбщийМодульТекстСервер.ПолучитьПредставлениеНаЯзыке(Локация, , ИСТИНА, ЯзыкДокументов);
		Если НЕ ВозможноеПредставление = Неопределено Тогда
			ЛокацияСтрока = ВозможноеПредставление;
		Иначе
			ЛокацияСтрока = СокрЛП(Локация);
		КонецЕсли;		
		
		РезультатСформироватьАдрес = ?(стрдлина(СокрЛП(ПочтовыйИндекс)) < 7, "" + РегионСтрока + ", " + ЛокацияСтрока + ", " + ПочтовыйИндекс, "" + ПочтовыйИндекс + " " + РегионСтрока + ", " + ЛокацияСтрока);
	КонецЕсли;
	
	Возврат РезультатСформироватьАдрес;
	
КонецФункции 

&НаКлиенте
Функция   ПолучитьСписокИзМетаданных(Знач ЭтоСправочник = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульСервер.ПолучитьСписокИзМетаданных(ЭтоСправочник);
КонецФункции //ПолучитьСписокИзМетаданных

Функция   ЕдиницаПринадлежитНоменклатуре(Знач Номенклатура, Знач ЕдиницаИзмерения) Экспорт	
	Возврат ОбщийМодульСервер.ЕдиницаПринадлежитНоменклатуре(Номенклатура, ЕдиницаИзмерения);	
КонецФункции //ЕдиницаПринадлежитНоменклатуре
