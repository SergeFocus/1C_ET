// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
// Функция осуществляет подключение устройства.
// 
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
// Функция осуществляет выгрузку строки в терминал сбора данных.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Штрихкод                       - <Строка>
//                                 - Штрихкод товара.
// 
//  Номенклатура                   - <СправочникСсылка.Номенклатура>
//                                 - Номенклатура.
// 
//  ЕдиницаИзмерения               - <СправочникСсылка.ЕдиницыИзмерения>
//                                 - Единица измерения номенклатуры.
// 
//  ХарактеристикаНоменклатуры     - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                 - Характеристика номенклатуры.
// 
//  СерияНоменклатуры              - <СправочникСсылка.СерииНоменклатуры>
//                                 - Серия номенклатуры.
// 
//  Качество                       - <СправочникСсылка.Качество>
//                                 - Качество.
// 
//  Цена                           - <Число>
//                                 - Цена номенклатуры.
// 
//  Количество                     - <Число>
//                                 - Количество номенклатуры.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
// 
Функция ВыгрузитьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                        Штрихкод, Номенклатура, ЕдиницаИзмерения,
                        ХарактеристикаНоменклатуры, СерияНоменклатуры,
                        Качество, Цена, Количество, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	Для Индекс = 1 По 8 Цикл
		ОбъектДрайвера["Поле" + Индекс] = "";
	КонецЦикла;
	
	// Обрезание поля "Номенклатура" связана с настройками задач ТСД, где по умолчанию наименование 40 символов
	
	Если Параметры.ФорматБазы.Количество() > 0 Тогда
		Для Каждого СтрокаФормата Из Параметры.ФорматБазы Цикл
			Если СтрокаФормата.Наименование = "Штрихкод" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = Штрихкод;
			ИначеЕсли СтрокаФормата.Наименование = "Номенклатура" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = Лев(Номенклатура, 40);
			ИначеЕсли СтрокаФормата.Наименование = "ЕдиницаИзмерения" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = ЕдиницаИзмерения;
			ИначеЕсли СтрокаФормата.Наименование = "ХарактеристикаНоменклатуры" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = ХарактеристикаНоменклатуры;
			ИначеЕсли СтрокаФормата.Наименование = "СерияНоменклатуры" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = СерияНоменклатуры;
			ИначеЕсли СтрокаФормата.Наименование = "Качество" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = Качество;
			ИначеЕсли СтрокаФормата.Наименование = "Цена" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = Формат(Цена, "ЧГ=0");
			ИначеЕсли СтрокаФормата.Наименование = "Количество" Тогда
				ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля] = Формат(Количество, "ЧГ=0");
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбъектДрайвера.Поле1 = Штрихкод;
		ОбъектДрайвера.Поле2 = Лев(Номенклатура, 40);
		ОбъектДрайвера.Поле3 = ЕдиницаИзмерения;
		ОбъектДрайвера.Поле4 = ХарактеристикаНоменклатуры;
		ОбъектДрайвера.Поле5 = СерияНоменклатуры;
		ОбъектДрайвера.Поле6 = Качество;
		ОбъектДрайвера.Поле7 = Формат(Цена, "ЧГ=0");
		ОбъектДрайвера.Поле8 = Формат(Количество, "ЧГ=0");
	КонецЕсли;

	Ответ = ОбъектДрайвера.ЗагрузитьЗапись(Параметры.НомерБазы);
	Если Ответ = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Функция осуществляет выгрузку строки в терминал сбора данных.
// 
Функция ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ВыходныеПараметры)

	Результат = ИСТИНА;
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Результат = НачатьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	Если Результат Тогда
		
		ТекущийПроцент = 0;
		ПроцентИнкремент = 100 / ТаблицаВыгрузки.Количество();
		
		Для Индекс = 0 По ТаблицаВыгрузки.Количество() - 1 Цикл
			Результат = ВыгрузитьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                            ТаблицаВыгрузки[Индекс][0].Значение, ТаблицаВыгрузки[Индекс][1].Значение,
			                            ТаблицаВыгрузки[Индекс][2].Значение, ТаблицаВыгрузки[Индекс][3].Значение,
			                            ТаблицаВыгрузки[Индекс][4].Значение, ТаблицаВыгрузки[Индекс][5].Значение,
			                            ТаблицаВыгрузки[Индекс][6].Значение, ТаблицаВыгрузки[Индекс][7].Значение,
			                            ВыходныеПараметры);
			Если НЕ Результат Тогда
				ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
				Прервать;
			КонецЕсли;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
		КонецЦикла;
		
		Если Результат Тогда
			Результат = ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
// 
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = ИСТИНА;

	ВыходныеПараметры = Новый Массив();

	// Выгрузка таблицы в устройство
	Если Команда = "ВыгрузитьТаблицу" ИЛИ Команда = "UploadDirectory" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];

		Результат = ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                             ТаблицаВыгрузки, ВыходныеПараметры);

	// Загрузка таблицы из устройства
	ИначеЕсли Команда = "ЗагрузитьТаблицу" ИЛИ Команда = "DownloadDocument" Тогда
		Результат = ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = ЛОЖЬ;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет завершение процедуры выгрузки данных в терминал сбора данных.
// 
Функция ЗавершитьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	ОбъектДрайвера.ЗавершитьЗагрузку();

	Возврат Результат;

КонецФункции

// Функция осуществляет завершение процедуры загрузки данных из терминала сбора данных.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ЗавершитьЗагрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	ОбъектДрайвера.ЗавершитьЗагрузку();

	Если ОбъектДрайвера.Результат <> 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

		Результат = ЛОЖЬ;
	Иначе
		Если Параметры.ОчищатьДокумент
		   И ПараметрыПодключения.ПоследнийИсточникЗагрузки = "Документ" Тогда
			ОбъектДрайвера.ОчиститьДокумент(Параметры.НомерДокумента);
			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

				Результат = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку строки из терминала сбора данных.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Штрихкод                       - <Строка>
//                                 - Штрихкод, соответствующий данной номенклатуре.
// 
//  Количество                     - <Число>
//                                 - Выходной параметр; количество номенклатуры.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ЗагрузитьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Штрихкод, Количество, ВыходныеПараметры)

	Результат       = ИСТИНА;
	ФорматИсточника = ?(ПараметрыПодключения.ПоследнийИсточникЗагрузки = "Документ",
	                    Параметры.ФорматДокумента, Параметры.ФорматБазы);
	Штрихкод        = Неопределено;
	Количество      = Неопределено;
	Разделитель = "";
	
	Если ПараметрыПодключения.ПоследнийИсточникЗагрузки = "Документ" Тогда
		Разделитель = Символ(Параметры.РазделительДокумента);
		ОбъектДрайвера.ПолучитьЗаписьИзДокумента(Параметры.НомерДокумента);
	Иначе
		Разделитель = Символ(Параметры.РазделительБазы);
		ОбъектДрайвера.ПолучитьЗаписьИзБазыДанных(Параметры.НомерБазы);
	КонецЕсли;
	
	Если ОбъектДрайвера.Результат <> 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

		Результат = ЛОЖЬ;
	Иначе
		ДанныеИзТСД = СтрЗаменить(ОбъектДрайвера.Данные, Разделитель, Символы.ПС);

		Если ФорматИсточника.Количество() > 0 Тогда
			Для Каждого СтрокаФормата Из ФорматИсточника Цикл
				Если СтрокаФормата.Наименование = "Штрихкод" Тогда
					Попытка
						#Если ВебКлиент Тогда
							Штрихкод = СтрПолучитьСтроку(ДанныеИзТСД, СтрокаФормата.НомерПоля);
						#Иначе
							Штрихкод = ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля];
						#КонецЕсли
					Исключение
						Продолжить;
					КонецПопытки;
				ИначеЕсли СтрокаФормата.Наименование = "Количество" Тогда
					Попытка
						#Если ВебКлиент Тогда
							Количество = Число(СтрПолучитьСтроку(ДанныеИзТСД, СтрокаФормата.НомерПоля));
						#Иначе
							Количество = Число(ОбъектДрайвера["Поле" + СтрокаФормата.НомерПоля]);
						#КонецЕсли
					Исключение
						Количество = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Штрихкод   = ОбъектДрайвера.Поле1;
			Попытка
				Если ПараметрыПодключения.ПоследнийИсточникЗагрузки = "Документ" Тогда
					Попытка
						Количество = Число(ОбъектДрайвера.Поле2);
					Исключение
						Количество = 0;
					КонецПопытки;
				Иначе
					Попытка
						Количество = Число(ОбъектДрайвера.Поле8);
					Исключение
						Количество = 0;
					КонецПопытки;
				КонецЕсли;
			Исключение
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат данных поля ""Количество"".
				|Проверьте настройку задачи терминала.'"));

				Результат = ЛОЖЬ;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку строки из терминала сбора данных.
// 
Функция ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат  = ИСТИНА;
	Штрихкод   = Неопределено;
	Количество = Неопределено;

	Результат = НачатьЗагрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Количество, ВыходныеПараметры);

	Если Результат Тогда
		
		ТекущийПроцент = 0;
		ПроцентИнкремент = 100 / Количество;
		
		ВыходныеПараметры.Добавить(Новый Массив());
		
		Для Индекс = 1 По Количество Цикл
			Результат = ЗагрузитьСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
			                            Штрихкод, Количество, ВыходныеПараметры);
			Если Результат Тогда
				ВыходныеПараметры[0].Добавить(Штрихкод);
				ВыходныеПараметры[0].Добавить(Количество);
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

				ЗавершитьЗагрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Новый Массив());

				Результат = ЛОЖЬ;
				Прервать;
			КонецЕсли;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Загрузка данных...'"), Окр(ТекущийПроцент));
		КонецЦикла;
		
	КонецЕсли;

	Если Результат Тогда
		Результат = ЗавершитьЗагрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

			Результат = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет подготовку процедуры выгрузки данных в терминал.
// 
Функция НачатьВыгрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	Возврат Результат;

КонецФункции

// Функция осуществляет подготовку процедуры загрузки данных из терминала сбора данных.
// 
Функция НачатьЗагрузку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Количество, ВыходныеПараметры)

	Результат = ИСТИНА;
	ПараметрыПодключения.Вставить("ПоследнийИсточникЗагрузки", "Документ");

	Если Параметры.ВыбиратьИсточникЗагрузки Тогда
		СписокИсточниковЗагрузки = Новый СписокЗначений();
		СписокИсточниковЗагрузки.Добавить("Документ", НСтр("ru='Документ терминала сбора данных'"));
		СписокИсточниковЗагрузки.Добавить("База",     НСтр("ru='База терминала сбора данных'"));

		ИсточникЗагрузки = СписокИсточниковЗагрузки.ВыбратьЭлемент(НСтр("ru='Выберите источник загрузки данных'"));
		Если ИсточникЗагрузки <> Неопределено Тогда
			ПараметрыПодключения.ПоследнийИсточникЗагрузки = ИсточникЗагрузки.Значение;
			Если ПараметрыПодключения.ПоследнийИсточникЗагрузки = "Документ" Тогда
				Количество = ОбъектДрайвера.ЗаписейВДокументе(Параметры.НомерДокумента);
			Иначе
				Количество = ОбъектДрайвера.ЗаписейВБазеДанных(Параметры.НомерБазы);
			КонецЕсли;
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Операция отменена пользователем'"));
			Возврат ЛОЖЬ;
		КонецЕсли;
	Иначе
		Количество = ОбъектДрайвера.ЗаписейВДокументе(Параметры.НомерДокумента);
	КонецЕсли;

	Если Количество = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Отсутствуют данные для загрузки из терминала сбора данных.'"));

		Результат = ЛОЖЬ;
	ИначеЕсли Количество < 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
// 
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	ВыходныеПараметры = Новый Массив();

	ОбъектДрайвера.Отключить();

	Возврат Результат;

КонецФункции

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();

	// Проверка параметров устройства
	Порт                     = Неопределено;
	Скорость                 = Неопределено;
	Таймаут                  = Неопределено;
	ИКПодставка              = Неопределено;
	РазделительБазы          = Неопределено;
	РазделительДокумента     = Неопределено;
	НомерБазы                = Неопределено;
	НомерДокумента           = Неопределено;
	ОчищатьДокумент          = Неопределено;
	ВыбиратьИсточникЗагрузки = Неопределено;
	ФорматБазы               = Неопределено;
	ФорматДокумента          = Неопределено;
	Модель                   = Неопределено;

	Параметры.Свойство("Порт"                    , Порт);
	Параметры.Свойство("Скорость"                , Скорость);
	Параметры.Свойство("Таймаут"                 , Таймаут);
	Параметры.Свойство("ИКПодставка"             , ИКПодставка);
	Параметры.Свойство("РазделительБазы"         , РазделительБазы);
	Параметры.Свойство("РазделительДокумента"    , РазделительДокумента);
	Параметры.Свойство("НомерБазы"               , НомерБазы);
	Параметры.Свойство("НомерДокумента"          , НомерДокумента);
	Параметры.Свойство("ОчищатьДокумент"         , ОчищатьДокумент);
	Параметры.Свойство("ВыбиратьИсточникЗагрузки", ВыбиратьИсточникЗагрузки);
	Параметры.Свойство("ФорматБазы"              , ФорматБазы);
	Параметры.Свойство("ФорматДокумента"         , ФорматДокумента);
	Параметры.Свойство("Модель",                   Модель);

	Если Порт                     = Неопределено
	 Или Скорость                 = Неопределено
	 Или Таймаут                  = Неопределено
	 Или ИКПодставка              = Неопределено
	 Или РазделительБазы          = Неопределено
	 Или РазделительДокумента     = Неопределено
	 Или НомерБазы                = Неопределено
	 Или НомерДокумента           = Неопределено
	 Или ОчищатьДокумент          = Неопределено
	 Или ВыбиратьИсточникЗагрузки = Неопределено
	 Или ФорматБазы               = Неопределено
	 Или ФорматДокумента          = Неопределено
	 Или Модель                   = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = ЛОЖЬ;
	КонецЕсли;

	Если Результат Тогда
		Ответ = ОбъектДрайвера.УстановитьПараметры(Параметры.Порт,
		                                           Параметры.Скорость,
		                                           ?(Параметры.ИКПодставка, 1, 0),
		                                           Символ(Параметры.РазделительБазы),
		                                           Символ(Параметры.РазделительДокумента));

		Если Ответ = 1 Тогда
			ОбъектДрайвера.УстановитьЗадержку(Параметры.Таймаут);

			ОбъектДрайвера.Подключить();
			Если ОбъектДрайвера.Результат <> 0 Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

				Результат = ЛОЖЬ;
			КонецЕсли;
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОбъектДрайвера.ОписаниеРезультата);

			Результат = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
// 
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета без гашения.
// 
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;
	
	ОбъектДрайвера.Порт 					= Параметры.Порт;
	ОбъектДрайвера.Скорость 				= Параметры.Скорость;
	ОбъектДрайвера.Задержка					= Параметры.Таймаут;
	ОбъектДрайвера.ИК		 				= Параметры.ИКПодставка;
	ОбъектДрайвера.РазделительБазы 			= Параметры.РазделительБазы;
	ОбъектДрайвера.РазделительДокумента 	= Параметры.РазделительДокумента;

	ОбъектДрайвера.ТестУстройства();

	Возврат Результат;

КонецФункции



