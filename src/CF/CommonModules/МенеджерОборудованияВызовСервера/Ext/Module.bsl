
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает список подключенного в справочнике ПО
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт
	
	Возврат Справочники.ПодключаемоеОборудование.ПолучитьСписокОборудования(ТипыПО, Идентификатор, РабочееМесто);
	
КонецФункции

// Функция возвращает по идентификатору устройства его параметры
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);

КонецФункции

// Процедура предназначена для сохранения параметров устройства
//в реквизит Параметры типа хранилище значения в элементе справочника
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);

КонецФункции

// Функция возвращает структуру с данными устройства
//(со значениями реквизитов элемента справочника)
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает по идентификатору наименование драйвера устройства
Функция ПолучитьИмяДрайвераЭкземпляра(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = "";

	//Для каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
	//	Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
	//		Результат = ИмяПеречисления.Имя;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает из переменной сеанса имя компьютера клиента
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = Ложь
	|");

	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);

	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат СписокКомпьютеров;

КонецФункции

// Функция устанавливает в переменную сеанса имя компьютера клиента
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Функция возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт

	Документ = Новый ТекстовыйДокумент();
	СлипЧек  = "";

//	Макет    = ПолучитьОбщийМакет(ИмяМакета);
//	Область  = Макет.ПолучитьОбласть("Чек" + ШиринаСлипЧека + ?(АвторизацияПИН, "пин", ""));

//	Для Каждого Параметр Из Параметры Цикл
//		Область.Параметры[Параметр.Ключ] = Параметр.Значение;
//	КонецЦикла;

//	Если Область <> Неопределено Тогда
//		Документ.Вывести(Область);

//		Для Индекс = 1 По Документ.КоличествоСтрок() Цикл
//			СлипЧек = СлипЧек + Документ.ПолучитьСтроку(Индекс)
//					+ ?(Индекс = Документ.КоличествоСтрок(), "", Символ(13) + Символ(10));
//		КонецЦикла;
//	КонецЕсли;

	Возврат СлипЧек;

КонецФункции

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));
	Возврат Ссылка;

КонецФункции

// Функция возвращает значение константы
//
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт
	
	Константа = Константы[ИмяКонстанты].Получить();
	Возврат Константа;
	
КонецФункции           

// Функция возвращает доступность сохранение данных пользователя
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт
	
	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецФункции

// Функция возвращает имя перечисления из его метаданных
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция возвращает созданное рабочее место клиента
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;
	РабочееМесто.СетевойПорт   = Параметры.СетевойПорт;

	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());

	РабочееМесто.Записать();

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		
		//Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		ИначеЕсли СписокРМ.Количество() = 1 Тогда
			ТекущееРМ = СписокРМ[0];
		ИначеЕсли СписокРМ.Количество() > 1 Тогда
			// Будет выбрано на клиенте.
		КонецЕсли;
		
		УстановитьРабочееМестоКлиента(ТекущееРМ);
		
		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает набор пользовательских настроек,
// связанных с механизмом подключаемого оборудования
Функция ПолучитьПользовательскиеНастройкиПодключаемогоОборудования() Экспорт

	Настройки = Новый Структура();
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок("ПользовательскиеНастройкиПодключаемогоОборудования");
	Для Каждого Элемент из СписокНастроек Цикл
		КлючНастройки = Элемент.Значение;
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ПользовательскиеНастройкиПодключаемогоОборудования", КлючНастройки);
		Если ЗначениеНастройки <> Неопределено Тогда
			Настройки.Вставить(КлючНастройки, ЗначениеНастройки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;

КонецФункции

// Сохраняет пользовательские настройки подключаемого оборудования
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт
		
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
		
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Производит разложение данных дорожек магнитной карты по шаблонам
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства
//  * Использовать, булево - признак использования дорожки
//  * НомерДорожки, число - порядковый номер дорожки 1-3
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них
// * Массив - шаблоны
//   * Структура - данные шаблона
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек
//       * Структура - данные поля
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	//Если ДанныеДорожек.Количество() = 0
	//	ИЛИ ПараметрыДорожек.Количество() = 0 Тогда
	//	Возврат Неопределено; // нет данных
	//КонецЕсли;
	//
	//ДанныеОтбор = Новый Массив;
	//СчетчикДорожек = 0;
	//Для каждого текПараметр Из ПараметрыДорожек Цикл
	//	Если текПараметр.Использовать Тогда
	//		Попытка
	//			ДанныеОтбор.Добавить(Новый Структура("НомерДорожки, ДлинаДорожки, ДанныеДорожки"
	//												, текПараметр.НомерДорожки, СтрДлина(ДанныеДорожек[СчетчикДорожек]), ДанныеДорожек[СчетчикДорожек]));
	//		Исключение
	//			Возврат Неопределено; // неверный формат шаблона
	//		КонецПопытки;
	//	КонецЕсли;
	//	СчетчикДорожек = СчетчикДорожек + 1;
	//КонецЦикла;
	//
	//// 1-ый этап. Ищем шаблоны совпадающие по длине кода
	//// а) При сравнении играют роль только доступные дорожки
	//// б) Необходимо чтобы хотя бы одна дорожка была доступной
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ШаблоныМагнитныхКарт.Ссылка,
	//|	
	//|	ШаблоныМагнитныхКарт.ДоступностьДорожки1,
	//|	ШаблоныМагнитныхКарт.Префикс1,
	//|	ШаблоныМагнитныхКарт.Суффикс1,
	//|	ШаблоныМагнитныхКарт.ДлинаКода1,
	//|	ШаблоныМагнитныхКарт.РазделительБлоков1,
	//|	
	//|	ШаблоныМагнитныхКарт.ДоступностьДорожки2,
	//|	ШаблоныМагнитныхКарт.Префикс2,
	//|	ШаблоныМагнитныхКарт.Суффикс2,
	//|	ШаблоныМагнитныхКарт.ДлинаКода2,
	//|	ШаблоныМагнитныхКарт.РазделительБлоков2,
	//|	
	//|	ШаблоныМагнитныхКарт.ДоступностьДорожки3,
	//|	ШаблоныМагнитныхКарт.Префикс3,
	//|	ШаблоныМагнитныхКарт.Суффикс3,
	//|	ШаблоныМагнитныхКарт.ДлинаКода3,
	//|	ШаблоныМагнитныхКарт.РазделительБлоков3
	//|ИЗ
	//|	Справочник.ШаблоныМагнитныхКарт КАК ШаблоныМагнитныхКарт
	//|ГДЕ
	//|	(ШаблоныМагнитныхКарт.ДоступностьДорожки1
	//|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки2
	//|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки3)
	//|	И ВЫБОР
	//|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки1
	//|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода1 = &ДлинаКода1
	//|			ИНАЧЕ Истина
	//|		КОНЕЦ
	//|	И ВЫБОР
	//|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки2
	//|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода2 = &ДлинаКода2
	//|			ИНАЧЕ Истина
	//|		КОНЕЦ
	//|	И ВЫБОР
	//|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки3
	//|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода3 = &ДлинаКода3
	//|			ИНАЧЕ Истина
	//|		КОНЕЦ");
	//Запрос.УстановитьПараметр("ДлинаКода1", СтрДлина(ДанныеДорожек[0]));
	//Запрос.УстановитьПараметр("ДлинаКода2", СтрДлина(ДанныеДорожек[1]));
	//Запрос.УстановитьПараметр("ДлинаКода3", СтрДлина(ДанныеДорожек[2]));
//	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокШаблонов = Новый Массив;
	//Пока Выборка.Следующий() Цикл
	//	
	//	// 2-ой этап - Пропускаем шаблоны не совпадающие по суффиксу, префиксу, разделителю.
	//	
	//	Если НЕ КодСоответствуетШаблонуМК(ДанныеДорожек, Выборка) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ДанныеДорожки = Новый Массив;
	//	Для каждого текОтбор Из ДанныеОтбор Цикл
	//		Для каждого текПоле Из Выборка.Ссылка["ПоляДорожки"+Строка(текОтбор.НомерДорожки)] Цикл
	//			
	//			// Поиск блока по номеру
	//			ДанныеСтрока = текОтбор.ДанныеДорожки;
	//			Префикс = Выборка["Префикс"+Строка(текОтбор.НомерДорожки)];
	//			Если Префикс = Лев(ДанныеСтрока, СтрДлина(Префикс)) Тогда
	//				ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Префикс)); // Удаляем префикс если есть
	//			КонецЕсли;
	//			Суффикс = Выборка["Суффикс"+Строка(текОтбор.НомерДорожки)];
	//			Если Суффикс = Прав(ДанныеСтрока, СтрДлина(Суффикс)) Тогда
	//				ДанныеСтрока = Лев(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Суффикс)); // Удаляем суффикс если есть
	//			КонецЕсли;
	//			
	//			текНомерБлока = 0;
	//			Пока текНомерБлока < текПоле.НомерБлока Цикл
	//				РазделительБлоков = Выборка["РазделительБлоков"+Строка(текОтбор.НомерДорожки)];
	//				ПозицияРазделителя = Найти(ДанныеСтрока, РазделительБлоков);
	//				Если ПустаяСтрока(РазделительБлоков) ИЛИ ПозицияРазделителя = 0 Тогда
	//					Блок = ДанныеСтрока;
	//				ИначеЕсли ПозицияРазделителя = 1 Тогда
	//					Блок = "";
	//					ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-1);
	//				Иначе
	//					Блок = Лев(ДанныеСтрока, ПозицияРазделителя-1);
	//					ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-ПозицияРазделителя);
	//				КонецЕсли;
	//				текНомерБлока = текНомерБлока + 1;
	//			КонецЦикла;
	//			
	//			// Поиск подстроки в блоке
	//			ЗначениеПоля = Сред(Блок, текПоле.НомерПервогоСимволаПоля, ?(текПоле.ДлинаПоля = 0, СтрДлина(Блок), текПоле.ДлинаПоля));
	//			
	//			ДанныеПоля = Новый Структура("Поле, ЗначениеПоля", текПоле.Поле, ЗначениеПоля);
	//			ДанныеДорожки.Добавить(ДанныеПоля);
	//		КонецЦикла;
	//	КонецЦикла;
	//	Шаблон = Новый Структура("Шаблон, ДанныеДорожек", Выборка.Ссылка, ДанныеДорожки);
	//	СписокШаблонов.Добавить(Шаблон);
	//КонецЦикла;
	//
	//Если СписокШаблонов.Количество() = 0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Возврат СписокШаблонов;
	
КонецФункции

// Возвращает список оборудования для которого необходима переустановка компоненты
//
Функция ПолучитьСписокОборудованияДляПереустановки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Список = Новый Массив;
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	ПодключаемоеОборудование.ИдентификаторУстройства,
	//|	ПодключаемоеОборудование.ОбработчикДрайвера,
	//|	ПодключаемоеОборудование.Ссылка
	//|ИЗ
	//|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	//|ГДЕ
	//|	ПодключаемоеОборудование.ТребуетсяПереустановка");
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Строка = Новый Структура("Ссылка, ИдентификаторУстройства, ОбработчикДрайвера",
	//		Выборка.Ссылка, Выборка.ИдентификаторУстройства, Выборка.ОбработчикДрайвера);
	//	Список.Добавить(Строка);
	//КонецЦикла;
	
	Возврат Список;
КонецФункции

// Устанавливает признак необходимости переустановки оборудования
//
Процедура УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, Признак) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникОбъект = ПодключаемоеОборудованиеСсылка.ПолучитьОбъект();
	СправочникОбъект.ТребуетсяПереустановка = Признак;
	СправочникОбъект.Записать();
КонецПроцедуры

// Возвращает реквизит ОбработчикДрайвера по ссылке справочника ПодключаемоеОборудование
//
Функция ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка) Экспорт
	Возврат ПодключаемоеОборудованиеСсылка.ОбработчикДрайвера
КонецФункции

// Возвращает реквизит ТребуетсяПереустановка по ссылке справочника ПодключаемоеОборудование
//
Функция ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка) Экспорт
	Возврат ПодключаемоеОборудованиеСсылка.ТребуетсяПереустановка
КонецФункции

// Получить таблицу товаров из XML структуры для ТСД
//
Функция ПолучитьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	//Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
	//	
	//	ЧтениеXML = Новый ЧтениеXML; 
	//	ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
	//	ЧтениеXML.ПерейтиКСодержимому();
	//	
	//	Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
	//		Пока ЧтениеXML.Прочитать() Цикл  
	//			Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
	//				Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
	//				Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД
//
Функция СформироватьТаблицуТоваров(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode", Позиция[0].Значение);
		ЗаписьXML.ЗаписатьАтрибут("Name", Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement", Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature", Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature", Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality", Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity", Строка(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция определяет тип ШтрихКода по значение кода
// 
Функция ОпределитьТипШтрихКода(ШтрихКод) Экспорт
	
	ТипШтрихКода = "";	
	ДлинаШтрихКода = СтрДлина(ШтрихКод);
	
	Если ДлинаШтрихКода = 0 Тогда
		Возврат ТипШтрихКода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихКода = 14 Тогда // ITF14
		
		Коэффициент = 1; 
		Для Сч = 1 По 13 Цикл
			КодСимв = КодСимвола(ШтрихКод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Если КодСимвола(ШтрихКод, 14) = Сумма + 48 Тогда
			ТипШтрихКода = "ITF14";
 		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихКода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			КодСимв     = КодСимвола(ШтрихКод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(ШтрихКод, 1) Тогда
			ТипШтрихКода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихКода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			КодСимв = КодСимвола(ШтрихКод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(ШтрихКод, 8) = Сумма + 48) Тогда
			ТипШтрихКода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихКода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихКода Цикл
			КодСимв = КодСимвола(ШтрихКод, Сч);
			Если (КодСимв <> 32)
				И (КодСимв < 36 Или КодСимв > 37)
				И (КодСимв <> 43)
				И (КодСимв < 45 Или КодСимв > 57)
				И (КодСимв < 65 Или КодСимв > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ТипШтрихКода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихКода= ""  Тогда // CODE128
		// CODE128 — символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = Истина;
		Для Сч = 1 По ДлинаШтрихКода Цикл
			КодСимв = КодСимвола(ШтрихКод, Сч);
			Если (КодСимв > 127) Тогда
				CODE128 = Ложь;
			Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE128 Тогда
			ТипШтрихКода = "CODE128";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ТипШтрихКода= "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов
		Если КодСимвола(ШтрихКод, 1) = 40 Тогда
			ТипШтрихКода = "EAN128";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипШтрихКода;
	
КонецФункции

// Функция выполняет формирование изображения ШтрихКода.
// Параметры: 
//   ПараметрыШтрихКода 
// Возвращаемое значение: 
//   Картинка - Картинка со сформированным ШтрихКодом или НЕОПРЕДЕЛЕНО
Функция ПолучитьКартинкуШтрихКода(ПараметрыШтрихКода) Экспорт
	
	//ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихКода();
	//
	//Если ВнешняяКомпонента = Неопределено Тогда
	//	ВызватьИсключение НСтр("ru = 'Ошибка подключения внешней компоненты печати ШтрихКода!'");
	//КонецЕсли;
	//
	//// Зададим размер картинки
	//ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихКода.Ширина);
	//ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихКода.Высота);
	//
	//ВнешняяКомпонента.АвтоТип = Ложь;
	//
	//Если ПараметрыШтрихКода.ТипКода = 99 Тогда
	//	ТипШтрихКодаВрем = ОпределитьТипШтрихКода(ПараметрыШтрихКода.ШтрихКод);
	//	Если ТипШтрихКодаВрем = "EAN8" Тогда
	//		ВнешняяКомпонента.ТипКода = 0;
	//	ИначеЕсли ТипШтрихКодаВрем = "EAN13" Тогда
	//		ВнешняяКомпонента.ТипКода = 1;
	//		// Если код содержит контрольный символ, обязательно указываем
	//		ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихКода.ШтрихКод) = 13;
	//	ИначеЕсли ТипШтрихКодаВрем = "EAN128" Тогда
	//		ВнешняяКомпонента.ТипКода = 2;
	//	ИначеЕсли ТипШтрихКодаВрем = "CODE39" Тогда
	//		ВнешняяКомпонента.ТипКода = 3;
	//	ИначеЕсли ТипШтрихКодаВрем = "CODE128" Тогда
	//		ВнешняяКомпонента.ТипКода = 4;
	//	ИначеЕсли ТипШтрихКодаВрем = "ITF14" Тогда
	//		ВнешняяКомпонента.ТипКода = 11;
	//	Иначе
	//		ВнешняяКомпонента.АвтоТип = Истина;
	//	КонецЕсли;
	//Иначе
	//	ВнешняяКомпонента.АвтоТип = Ложь;
	//	ВнешняяКомпонента.ТипКода = ПараметрыШтрихКода.ТипКода;
	//КонецЕсли;
	//
	//ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихКода.ОтображатьТекст;
	//
	//// Формируем картинку ШтрихКода
	//ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихКода.ШтрихКод;
	//
	//Если ПараметрыШтрихКода.Свойство("УголПоворота") Тогда
	//	ВнешняяКомпонента.УголПоворота = ПараметрыШтрихКода.УголПоворота;
	//Иначе
	//	ВнешняяКомпонента.УголПоворота = 0;
	//КонецЕсли;
	//
	//Если ВнешняяКомпонента.УголПоворота = 90 Или ВнешняяКомпонента.УголПоворота = 270 Тогда
	//	ВнешняяКомпонента.Высота = ВнешняяКомпонента.Ширина;
	//КонецЕсли;
	//
	//// Если установленная нами ширина меньше минимально допустимой для этого ШтрихКода
	//Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
	//	ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	//КонецЕсли;
	//
	//// Если установленная нами высота меньше минимально допустимой для этого ШтрихКода
	//Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
	//	ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	//КонецЕсли;
	//
	//Если ПараметрыШтрихКода.Свойство("РазмерШрифта") И (ПараметрыШтрихКода.РазмерШрифта > 0) 
	//	И (ПараметрыШтрихКода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихКода.РазмерШрифта) Тогда
	//	ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихКода.РазмерШрифта;
	//КонецЕсли;
	//
	//// Сформируем картинку
	//ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихКод();
	//
	//// Если картинка сформировалась
	//Если ДвоичныеДанныеКартинки <> Неопределено Тогда
	//	// Формируем из двоичных данных
	//	Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	//КонецЕсли;
	//
	Возврат Неопределено;
	
КонецФункции