// sza150419-0315
// sza150406-0442
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
// Функция возвращает список подключенного в справочнике ПО
// Определяет соответствует ли код карты шаблону
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
// 	- Суффикс
// 	- Префикс
// 	- РазделительБлоков
// 	- ДлинаКода
// На выходе:
// ИСТИНА - код соответствует шаблону
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона)

	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			текСтрока = ДанныеДорожек[Итератор - 1];

			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс"+Строка(Итератор)])) <> ДанныеШаблона["Суффикс"+Строка(Итератор)]
				ИЛИ Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс"+Строка(Итератор)])) <> ДанныеШаблона["Префикс"+Строка(Итератор)]
				ИЛИ Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0
				ИЛИ СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда

				Возврат ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ИСТИНА;

КонецФункции

// Функция возвращает список рабочих мест, соответствующих указанному имени компьютера
Функция НайтиРабочиеМестаПоИД(ИдентификаторКлиента) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РабочиеМеста.Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Код = &Код
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ
	|");
	Запрос.УстановитьПараметр("Код", ИдентификаторКлиента);

	СписокКомпьютеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат СписокКомпьютеров;

КонецФункции

// Функция определяет тип штрихкода по значение кода
//
Функция ОпределитьТипШтрихкода(Знач Штрихкод) Экспорт

	ТипШтрихкода = "";
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ТипШтрихкода;
	КонецЕсли;

	Сумма = 0;

	Если ДлинаШтрихкода = 14 Тогда // ITF14
		Коэффициент = 1;
		Для Сч = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);

			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;
			КонецЕсли;

			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;

		Сумма     = (10 - Сумма % 10) % 10;

		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ТипШтрихкода = "ITF14";
		КонецЕсли;
	ИначеЕсли ДлинаШтрихкода = 13 ИЛИ ДлинаШтрихкода = 15 ИЛИ ДлинаШтрихкода = 18 Тогда // EAN13
		EAN13 = ИСТИНА;
		Коэффициент = 1;

		Для Сч = 1 По 12 Цикл
			КодСимв     = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				EAN13 = ЛОЖЬ;
				Прервать;
			КонецЕсли;

			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;

		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Сред(Штрихкод, 13, 1) Тогда
			ТипШтрихкода = "EAN13";
		КонецЕсли;
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		EAN8 = ИСТИНА;
		Коэффициент = 3;

		Для Сч = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				EAN8 = ЛОЖЬ;
				Прервать;
			КонецЕсли;

			Сумма       = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;

		Сумма = (10 - Сумма % 10) % 10;

		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ТипШтрихкода = "EAN8";
		КонецЕсли;
	КонецЕсли;

	Если ТипШтрихкода = ""  Тогда // CODE128
		// CODE128 — символы ASCII от 0 до 127 (цифры от «0» до «9», буквы от «A» до «Z» и от «a» до «z») и специальные символы;
		CODE128 = ИСТИНА;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);

			Если (КодСимв > 127) Тогда
				CODE128 = ЛОЖЬ;
			Прервать;
			КонецЕсли;

		КонецЦикла;

		Если CODE128 Тогда
			ТипШтрихкода = "CODE128";
		КонецЕсли
	КонецЕсли;

	Если ТипШтрихкода = "" Тогда // CODE39
		CODE39 = ИСТИНА;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);

			Если (КодСимв <> 32)
				И (КодСимв < 36 Или КодСимв > 37)
				И (КодСимв <> 43)
				И (КодСимв < 45 Или КодСимв > 57)
				И (КодСимв < 65 Или КодСимв > 90) Тогда

				CODE39 = ЛОЖЬ;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если CODE39 Тогда
			ТипШтрихкода = "CODE39";
		КонецЕсли
	КонецЕсли;

	Если ТипШтрихкода = "CODE128"  Тогда // EAN128
		// В коде EAN128 регламентирован словарь CODE128 но регламентированы группы кодов
		Если КодСимвола(Штрихкод, 1) = 40 Тогда

			ТипШтрихкода = "EAN128";
		КонецЕсли;
	КонецЕсли;

	Возврат ТипШтрихкода;

КонецФункции

// Функция возвращает структуру с данными устройства
// (со значениями реквизитов элемента справочника)
Функция ПолучитьДанныеУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(Идентификатор);

КонецФункции

// Функция возвращает по идентификатору наименование драйвера устройства
Функция ПолучитьИмяДрайвераЭкземпляра(НаименованиеОбработчикаДрайвера) Экспорт

	Результат = "";

	Для Каждого ИмяПеречисления Из Метаданные.Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ЗначенияПеречисления Цикл
		Если НаименованиеОбработчикаДрайвера = ИмяПеречисления.Синоним Тогда
			Результат = ИмяПеречисления.Имя;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает имя перечисления Из его метаданных
//
Функция ПолучитьИмяТипаОборудования(ТипОборудования) Экспорт

	Результат = Неопределено;
	МетаОбъект = ТипОборудования.Метаданные();
	Индекс = Перечисления.ТипыПодключаемогоОборудования.Индекс(ТипОборудования);
	Результат = МетаОбъект.ЗначенияПеречисления[Индекс].Имя;

	Возврат Результат;

КонецФункции

// Функция выполняет формирование изображения штрихкода.
// Параметры:
//   ПараметрыШтрихкода
// Возвращаемое значение:
//   Картинка - Картинка со сформированным штрихкодом или НЕОПРЕДЕЛЕНО
Функция ПолучитьКартинкуШтрихкода(Знач ПараметрыШтрихкода) Экспорт

	ВнешняяКомпонента = МенеджерОборудованияСерверПовтИсп.ПодключитьВнешнююКомпонентуПечатиШтрихкода();

	Если ВнешняяКомпонента = Неопределено Тогда
		ВызватьИсключение ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка подключения внешней компоненты печати штрихкода!");
	КонецЕсли;

	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = Окр(ПараметрыШтрихкода.Ширина);
	ВнешняяКомпонента.Высота = Окр(ПараметрыШтрихкода.Высота);
	ВнешняяКомпонента.АвтоТип = ЛОЖЬ;

	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ВнешняяКомпонента.ТипКода = 4;
 		ТипШтрихкодаВрем = ОпределитьТипШтрихкода(ПараметрыШтрихкода.Штрихкод);
 		Если ТипШтрихкодаВрем = "EAN8" Тогда
 			ВнешняяКомпонента.ТипКода = 0;
 		ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
 			ВнешняяКомпонента.ТипКода = 1;
 			// Если код содержит контрольный символ, обязательно указываем
 			ВнешняяКомпонента.СодержитКС = СтрДлина(ПараметрыШтрихкода.Штрихкод) = 13;
 		ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
 			ВнешняяКомпонента.ТипКода = 2;
 		ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
 			ВнешняяКомпонента.ТипКода = 3;
 		ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
			ВнешняяКомпонента.ТипКода = 4;
 		ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
 			ВнешняяКомпонента.ТипКода = 11;
 		Иначе
 			ВнешняяКомпонента.АвтоТип = ИСТИНА;
 		КонецЕсли;
	Иначе
		ВнешняяКомпонента.АвтоТип = ЛОЖЬ;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;

	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихкода.ОтображатьТекст;

	Если ВнешняяКомпонента.ТипКода = 4
		И ПараметрыШтрихкода.ОтображатьТекст Тогда

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмещениеТекстаСШтрихКодомНаЭтикетке") = Перечисления.ОтносительноеРазмещение.Сверху Тогда
			ВнешняяКомпонента.ПоложениеТекста = 1;
		Иначе
			ВнешняяКомпонента.ПоложениеТекста = 0;
		КонецЕсли;
	КонецЕсли;

	// Формируем картинку штрихкода
	ВнешняяКомпонента.ЗначениеКода = ПараметрыШтрихкода.Штрихкод;
	Если ПараметрыШтрихкода.Свойство("УголПоворота") Тогда
		ВнешняяКомпонента.УголПоворота = ПараметрыШтрихкода.УголПоворота;
	Иначе
		ВнешняяКомпонента.УголПоворота = 0;
	КонецЕсли;

	Если ВнешняяКомпонента.УголПоворота = 90 Или ВнешняяКомпонента.УголПоворота = 270 Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.Ширина;
	КонецЕсли;

	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда

		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;

	// Если установленная нами высота меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда

		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;

	Если ПараметрыШтрихкода.Свойство("РазмерШрифта")
		И (ПараметрыШтрихкода.РазмерШрифта > 0)
		И (ПараметрыШтрихкода.ОтображатьТекст)
		И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда

		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;

	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	// Если картинка сформировалась
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда

		// Формируем Из двоичных данных

		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Функция возвращает значение константы
//
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт

	Константа = Константы[ИмяКонстанты].Получить();

	Возврат Константа;

КонецФункции

// Функция получает макет драйвера и сохраняет его во временное хранилище,
// возвращая ссылку на временное хранилище
Функция ПолучитьМакетССервера(ИмяМакета) Экспорт

	Ссылка = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(ИмяМакета));

	Возврат Ссылка;

КонецФункции

// Возвращает реквизит ОбработчикДрайвера по ссылке справочника ПодключаемоеОборудование
//
Функция ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка) Экспорт

	Возврат ПодключаемоеОборудованиеСсылка.ОбработчикДрайвера

КонецФункции

// Функция возвращает по идентификатору устройства его параметры
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Идентификатор);

КонецФункции

// Функция возвращает набор пользовательских настроек,
// связанных с механизмом подключаемого оборудования
Функция ПолучитьПользовательскиеНастройкиПодключаемогоОборудования() Экспорт

	Настройки = Новый Структура();

	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат Настройки;
	КонецЕсли;

	СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок("ПользовательскиеНастройкиПодключаемогоОборудования");

	Для Каждого Элемент Из СписокНастроек Цикл
		КлючНастройки = Элемент.Значение;
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ПользовательскиеНастройкиПодключаемогоОборудования", КлючНастройки);
		Если ЗначениеНастройки <> Неопределено Тогда
			Настройки.Вставить(КлючНастройки, ЗначениеНастройки);
		КонецЕсли;

	КонецЦикла;

	Возврат Настройки;

КонецФункции

// Возвращает реквизит ТребуетсяПереустановка по ссылке справочника ПодключаемоеОборудование
//
Функция ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка) Экспорт

	Возврат ПодключаемоеОборудованиеСсылка.ТребуетсяПереустановка

КонецФункции

// Функция возвращает Из переменной сеанса имя компьютера клиента
Функция ПолучитьРабочееМестоКлиента() Экспорт

	УстановитьПривилегированныйРежим(ИСТИНА);

	Возврат ПараметрыСеанса.РабочееМестоКлиента;

КонецФункции

// Функция возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = ЛОЖЬ) Экспорт

	Документ = Новый ТекстовыйДокумент();
	СлипЧек  = "";
	Макет    = ПолучитьОбщийМакет(ИмяМакета);
	Область  = Макет.ПолучитьОбласть("Чек" + ШиринаСлипЧека + ?(АвторизацияПИН, "пин", ""));

	Для Каждого Параметр Из Параметры Цикл
		Область.Параметры[Параметр.Ключ] = Параметр.Значение;
	КонецЦикла;

	Если Область <> Неопределено Тогда
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Область);
		Документ.Вывести(Область);
		Для Индекс = 1 По Документ.КоличествоСтрок() Цикл
			СлипЧек = СлипЧек + Документ.ПолучитьСтроку(Индекс)
			        + ?(Индекс = Документ.КоличествоСтрок(), "", Символ(13) + Символ(10));

		КонецЦикла;
	КонецЕсли;

	Возврат СлипЧек;

КонецФункции

// {{MRG[ <-> ]
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //
// // ПРОГРАММНЫЙ ИНТЕРФЕЙС
// // Функция возвращает список подключенного в справочнике ПО
// }}MRG[ <-> ]
Функция ПолучитьСписокОборудования(ТипыПО = Неопределено, Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.ПолучитьСписокОборудования(ТипыПО, Идентификатор, РабочееМесто);

КонецФункции

// Возвращает список оборудования для которого необходима переустановка компоненты
//
Функция ПолучитьСписокОборудованияДляПереустановки() Экспорт

	УстановитьПривилегированныйРежим(ИСТИНА);
	Список = Новый Массив;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ИдентификаторУстройства,
	|	ПодключаемоеОборудование.ОбработчикДрайвера,
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТребуетсяПереустановка");

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Строка = Новый Структура("Ссылка, ИдентификаторУстройства, ОбработчикДрайвера",
			Выборка.Ссылка, Выборка.ИдентификаторУстройства, Выборка.ОбработчикДрайвера);
		Список.Добавить(Строка);

	КонецЦикла;

	Возврат Список;

КонецФункции

// Получить таблицу товаров Из XML структуры для ТСД
//
Функция ПолучитьТаблицуТоваров(ДанныеЗагрузки) Экспорт

	Результат = Новый Массив();

	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();

		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получить таблицу товаров Из XML структуры для ТСД
//
Функция ПолучитьТаблицуТоваровТСД(ДанныеЗагрузки) Экспорт

	Результат = Новый Массив();

	Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ДанныеЗагрузки);
		ЧтениеXML.ПерейтиКСодержимому();

		Если ЧтениеXML.Имя = "Table" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ЧтениеXML.Прочитать() Цикл
				Если ЧтениеXML.Имя = "Record" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("BarCode"));
					Результат.Добавить(ЧтениеXML.ЗначениеАтрибута("Quantity"));
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает доступность сохранение данных пользователя
//
Функция ПравоДоступаСохранениеДанныхПользователя() Экспорт

	Возврат ПравоДоступа("СохранениеДанныхПользователя", Метаданные);

КонецФункции

// Производит разложение данных дорожек магнитной карты по шаблонам
// На входе:
// ДанныеДорожек - массив строк. Значения полученные Из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства
//  * Использовать, булево - признак использования дорожки
//  * НомерДорожки, число - порядковый номер дорожки 1-3
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них
// * Массив - шаблоны
//   * Структура - данные шаблона
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек
//       * Структура - данные поля
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт

	Если ДанныеДорожек.Количество() = 0
		ИЛИ ПараметрыДорожек.Количество() = 0 Тогда

		Возврат Неопределено; // нет данных
	КонецЕсли;

	ДанныеОтбор = Новый Массив;
	СчетчикДорожек = 0;
	Для Каждого текПараметр Из ПараметрыДорожек Цикл
		Если текПараметр.Использовать Тогда
			Попытка
				ДанныеОтбор.Добавить(Новый Структура("НомерДорожки, ДлинаДорожки, ДанныеДорожки"
													, текПараметр.НомерДорожки, СтрДлина(ДанныеДорожек[СчетчикДорожек]), ДанныеДорожек[СчетчикДорожек]));
			Исключение

				Возврат Неопределено; // неверный формат шаблона
			КонецПопытки;
		КонецЕсли;

		СчетчикДорожек = СчетчикДорожек + 1;

	КонецЦикла;

	// 1-ый этап. Ищем шаблоны совпадающие по длине кода
	// а) При сравнении играют роль только доступные дорожки
	// б) Необходимо чтобы хотя бы одна дорожка была доступной

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныМагнитныхКарт.Ссылка,
	|
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки1,
	|	ШаблоныМагнитныхКарт.Префикс1,
	|	ШаблоныМагнитныхКарт.Суффикс1,
	|	ШаблоныМагнитныхКарт.ДлинаКода1,
	|	ШаблоныМагнитныхКарт.РазделительБлоков1,
	|
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки2,
	|	ШаблоныМагнитныхКарт.Префикс2,
	|	ШаблоныМагнитныхКарт.Суффикс2,
	|	ШаблоныМагнитныхКарт.ДлинаКода2,
	|	ШаблоныМагнитныхКарт.РазделительБлоков2,
	|
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки3,
	|	ШаблоныМагнитныхКарт.Префикс3,
	|	ШаблоныМагнитныхКарт.Суффикс3,
	|	ШаблоныМагнитныхКарт.ДлинаКода3,
	|	ШаблоныМагнитныхКарт.РазделительБлоков3
	|ИЗ
	|	Справочник.ШаблоныМагнитныхКарт КАК ШаблоныМагнитныхКарт
	|ГДЕ
	|	(ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки3)
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода1 = &ДлинаКода1

	|			Иначе ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода2 = &ДлинаКода2

	|			Иначе ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки3
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода3 = &ДлинаКода3

	|			Иначе ИСТИНА
	|		КОНЕЦ");
	Запрос.УстановитьПараметр("ДлинаКода1", СтрДлина(ДанныеДорожек[0]));
	Запрос.УстановитьПараметр("ДлинаКода2", СтрДлина(ДанныеДорожек[1]));
	Запрос.УстановитьПараметр("ДлинаКода3", СтрДлина(ДанныеДорожек[2]));

	Выборка = Запрос.Выполнить().Выбрать();
	СписокШаблонов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		// 2-ой этап - Пропускаем шаблоны не совпадающие по суффиксу, префиксу, разделителю.
		Если НЕ КодСоответствуетШаблонуМК(ДанныеДорожек, Выборка) Тогда

			Продолжить;
		КонецЕсли;

		ДанныеДорожки = Новый Массив;

		Для Каждого текОтбор Из ДанныеОтбор Цикл
			Для Каждого текПоле Из Выборка.Ссылка["ПоляДорожки"+Строка(текОтбор.НомерДорожки)] Цикл
				// Поиск блока по номеру
				ДанныеСтрока = текОтбор.ДанныеДорожки;
				Префикс = Выборка["Префикс"+Строка(текОтбор.НомерДорожки)];

				Если Префикс = Лев(ДанныеСтрока, СтрДлина(Префикс)) Тогда
					ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Префикс)); // Удаляем префикс если есть
				КонецЕсли;

				Суффикс = Выборка["Суффикс"+Строка(текОтбор.НомерДорожки)];

				Если Суффикс = Прав(ДанныеСтрока, СтрДлина(Суффикс)) Тогда
					ДанныеСтрока = Лев(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Суффикс)); // Удаляем суффикс если есть
				КонецЕсли;

				текНомерБлока = 0;

				Пока текНомерБлока < текПоле.НомерБлока Цикл
					РазделительБлоков = Выборка["РазделительБлоков"+Строка(текОтбор.НомерДорожки)];
					ПозицияРазделителя = Найти(ДанныеСтрока, РазделительБлоков);
					Если ПустаяСтрока(РазделительБлоков) ИЛИ ПозицияРазделителя = 0 Тогда
						Блок = ДанныеСтрока;
					ИначеЕсли ПозицияРазделителя = 1 Тогда
						Блок = "";
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-1);
					Иначе
						Блок = Лев(ДанныеСтрока, ПозицияРазделителя-1);
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-ПозицияРазделителя);
					КонецЕсли;

					текНомерБлока = текНомерБлока + 1;

				КонецЦикла;

				// Поиск подстроки в блоке
				ЗначениеПоля = Сред(Блок, текПоле.НомерПервогоСимволаПоля, ?(текПоле.ДлинаПоля = 0, СтрДлина(Блок), текПоле.ДлинаПоля));
				ДанныеПоля = Новый Структура("Поле, ЗначениеПоля", текПоле.Поле, ЗначениеПоля);
				ДанныеДорожки.Добавить(ДанныеПоля);

			КонецЦикла;

		КонецЦикла;

		Шаблон = Новый Структура("Шаблон, ДанныеДорожек", Выборка.Ссылка, ДанныеДорожки);
		СписокШаблонов.Добавить(Шаблон);
	КонецЦикла;

	Если СписокШаблонов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СписокШаблонов;

КонецФункции

// Функция возвращает созданное рабочее место клиента
Функция СоздатьРабочееМестоКлиента(Параметры) Экспорт

	УстановитьПривилегированныйРежим(ИСТИНА);
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();
	РабочееМесто.Код           = Параметры.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = Параметры.ИмяКомпьютера;
	РабочееМесто.СетевойПорт   = Параметры.СетевойПорт;
	МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());
	РабочееМесто.Записать();
	УстановитьПривилегированныйРежим(ЛОЖЬ);

	Возврат РабочееМесто.Ссылка;

КонецФункции // СоздатьРабочееМестоКлиентаПоИД()

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт

	Возврат Справочники.ПодключаемоеОборудование.СохранитьПараметрыУстройства(Идентификатор, Параметры);

КонецФункции

// Сохраняет пользовательские настройки подключаемого оборудования
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Элемент Из СписокНастроек Цикл
		ХранилищеОбщихНастроек.Сохранить("ПользовательскиеНастройкиПодключаемогоОборудования", Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Сформировать таблицу товаров в XML структуре для ТСД
//
Функция СформироватьТаблицуТоваров(ДанныеЗагрузки) Экспорт

	Результат = Новый Массив();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");

	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode", Позиция[0].Значение);
		ЗаписьXML.ЗаписатьАтрибут("Name", Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement", Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature", Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature", Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality", Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity", Строка(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Сформировать таблицу товаров в XML структуре для весов с печатью этикеток
//
Функция СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(ДанныеЗагрузки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");

	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("PLU"         , Строка(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Code"        , Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name"        , Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price"       , Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Description" , Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("ShelfLife"   , Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Сформировать таблицу товаров в XML структуре для ТСД
//
Функция СформироватьТаблицуТоваровТСД(ДанныеЗагрузки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");

	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		ЗаписьXML.ЗаписатьАтрибут("BarCode"                      , Строка(Позиция[0].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Name", Строка(Позиция[1].Значение));
		ЗаписьXML.ЗаписатьАтрибут("UnitOfMeasurement", Строка(Позиция[2].Значение));
		ЗаписьXML.ЗаписатьАтрибут("CharacteristicOfNomenclature", Строка(Позиция[3].Значение));
		ЗаписьXML.ЗаписатьАтрибут("SeriesOfNomenclature", Строка(Позиция[4].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quality", Строка(Позиция[5].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Позиция[6].Значение));
		ЗаписьXML.ЗаписатьАтрибут("Quantity", Строка(Позиция[7].Значение));
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Процедура устанавливает значения параметров сеанса, относящихся к подключаемому оборудованию
Процедура УстановитьПараметрыСеансаПодключаемогоОборудования(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра = "РабочееМестоКлиента" Тогда
		// Если с идентификатором клиента текущего сеанса связано одно рабочее место,
		// то его сразу и запишем в параметры сеанса
		ТекущееРМ           = Справочники.РабочиеМеста.ПустаяСсылка();
		СистемнаяИнформация = Новый СистемнаяИнформация();
		СписокРМ = НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));

		Если СписокРМ.Количество() = 0 Тогда
			// Будет создано с клиента.
		ИначеЕсли СписокРМ.Количество() = 1 Тогда

			ТекущееРМ = СписокРМ[0];
		ИначеЕсли СписокРМ.Количество() > 1 Тогда
			// Будет выбрано на клиенте.
		КонецЕсли;

		УстановитьРабочееМестоКлиента(ТекущееРМ);

		Если ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить("РабочееМестоКлиента");
		Иначе
			УстановленныеПараметры.Добавить("РабочееМестоКлиента");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает признак необходимости переустановки оборудования
//
Процедура УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, Признак) Экспорт

	УстановитьПривилегированныйРежим(ИСТИНА);
	СправочникОбъект = ПодключаемоеОборудованиеСсылка.ПолучитьОбъект();
	СправочникОбъект.ТребуетсяПереустановка = Признак;
	СправочникОбъект.Записать();

КонецПроцедуры

// Функция устанавливает в переменную сеанса имя компьютера клиента
Процедура УстановитьРабочееМестоКлиента(РабочееМестоКлиента) Экспорт

	УстановитьПривилегированныйРежим(ИСТИНА);
	ПараметрыСеанса.РабочееМестоКлиента = РабочееМестоКлиента;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры
