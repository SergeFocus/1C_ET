//sza140117-1811 : 
//sza131111-1845

&НаСервере
Функция   ЕстьПользователи() Экспорт	
	Возврат НЕ ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0;	
КонецФункции //ЕстьПользователи

&НаСервере
процедура ОбновитьДанныеПриОбновленииКонфигурации(Знач ВерсияБыла, Знач ВерсияКонфигурации) Экспорт
	
	попытка
		установитьМонопольныйРежим(Истина);
	исключение
	конецпопытки;
	
	ПараметрыСеанса.НеВыводитьСообщений = Истина;
	
	ДокументыДляПерепроведения = Новый Массив;
	ТаблицаДокументовДляПерепроведения = новый ТаблицаЗначений;
	ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Документ");
	ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Дата");
	
	ВерсияБыла = стрзаменить(ВерсияБыла, "F", "");
	Попытка 
		ВерсияБыла = Число(?(ВерсияБыла = "", "0", ВерсияБыла));
	Исключение 	
		ВерсияБыла = 0;
	КонецПопытки;
	Попытка 
		ВерсияКонфигурации 	= Число(стрзаменить(ВерсияКонфигурации, "F", ""));
	Исключение 	
		ВерсияКонфигурации 	= 0;
	КонецПопытки;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
		Язык = Справочники.Языки.Выбрать() ;
		пока язык.Следующий() Цикл
			
			ЭтотЯзык = язык.Ссылка;
			Если не ЭтотЯзык = Справочники.Языки.Русский 
				и не ОбщийМодульТекстСервер.НетНиОднойЗаписиЭтогоЯзыка(ЭтотЯзык) Тогда
				
				ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ЭтотЯзык.Код, ЭтотЯзык, Истина);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	если ВерсияБыла < 131117 тогда
		
		НашеЮрЛицо = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект();
		Наименование = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати");
		если ЗначениеЗаполнено(Наименование) ТОгда
			НашеЮрЛицо.Наименование = стрзаменить(Наименование, символы.ПС, " ");
		иначе
			НашеЮрЛицо.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Основная организация");
		КонецЕсли;
		НашеЮрЛицо.ВидЦен 		    = Справочники.ВидыЦен.ОсновнойВидЦен ;
		НашеЮрЛицо.ЭлектроннаяПочта = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
		НашеЮрЛицо.Записать();
		
		Если Не ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			ЭлементСправочника = Справочники.Договора.Архив.ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование) ;
			ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Договоров") ;
			ЭлементСправочника.Записать();	                         
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Продажи.Регистратор, Продажи.Период КАК Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Закупки.Регистратор, Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|УПОРЯДОЧИТЬ ПО Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() ТОгда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Период;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		ЯзыкР = Справочники.Языки.Болгарский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Български BG";
		ЯзыкР.Наименование 	= "Български - Болгарский (BG)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Казахский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Қазақ BL";
		ЯзыкР.Наименование 	= "Қазақ - Казахский (KK)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Немецкий.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Deutsch DE";
		ЯзыкР.Наименование 	= "Deutsch - Немецкий (DE)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Польский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Polski PL";
		ЯзыкР.Наименование 	= "Polski - Польский (PL)";
		ЯзыкР.Записать();
		
	конецесли;
	
	Если ВерсияБыла < 131119 Тогда
		Константы.ВключитьКомандыИзмененийИЗаполненияДляТаблицыТовары.Установить(истина);
	КонецЕсли;
	
	Если ВерсияБыла < 131125 Тогда
		Константы.ПриниматьИОтдаватьДеньгиМожноПрямоВДокументахРасходаИПрихода.Установить(Истина);
	КонецЕсли;
	
	Если ВерсияБыла < 131127 Тогда
		ЯзыкР = Справочники.Языки.Тайский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "ภาษาไทย  TH";
		ЯзыкР.Наименование 	= "ภาษาไทย - Тайский (TH)";
		ЯзыкР.Записать();
	КонецЕсли;
	
	Если ВерсияБыла < 131204 Тогда
		Константы.ОрганизацияПоУмолчанию.Установить(ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие")) ;	
		
		ОсновнаяКассаВОсновнойВалюте = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте.ПолучитьОбъект();
		ОсновнаяКассаВОсновнойВалюте.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОсновнаяКассаВОсновнойВалюте.Наименование) ;
		ОсновнаяКассаВОсновнойВалюте.Валюта 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ОсновнаяКассаВОсновнойВалюте.ФормаОплаты  = перечисления.ФормыОплаты.Наличные;
		ОсновнаяКассаВОсновнойВалюте.Записать();
		
		Константы.ОсновноеХранилищеДенег.Установить(ОсновнаяКассаВОсновнойВалюте.Ссылка);
		
		Если Не ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			ВидХарактеристик = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
			Пока ВидХарактеристик.Следующий() Цикл
				ОбъектХарактеристика = ВидХарактеристик.ПолучитьОбъект();
				ОбъектХарактеристика.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидХарактеристик.Наименование) ;
				ОбъектХарактеристика.Записать();
			конеццикла;
			
			СтатьяДенег = Справочники.СтатьиДвиженияДенег.ВнутреннееПеремещениеДенег.ПолучитьОбъект();
			СтатьяДенег.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СтатьяДенег.Наименование) ;
			СтатьяДенег.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 131215 Тогда
		Константы.ИспользоватьПечатьЭтикеток.Установить(Истина); ;
	КонецЕсли;
	
	если ВерсияБыла < 131219 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Изображения.Ссылка, Изображения.СвязанныйОбъект ИЗ Справочник.Изображения КАК Изображения";
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			МассивОбъектов = Новый Массив;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СвязанныйОбъект = ВыборкаДетальныеЗаписи.СвязанныйОбъект;
				если МассивОбъектов.Найти(СвязанныйОбъект) = Неопределено тогда
					МассивОбъектов.Добавить(СвязанныйОбъект);
					Изображение = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Изображение.ЭтоОсновноеИзображениеОбъекта = Истина;	
					Изображение.Записать();
				КонецЕсли;
			КонецЦикла;                        	
		КонецЕсли;
		
	КонецЕсли;
	
	если ВерсияБыла < 140103 тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ДвиженияДенег.Ссылка, ДвиженияДенег.Дата КАК Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Инвентаризации.Ссылка, Инвентаризации.Дата
		|ИЗ Документ.Инвентаризации КАК Инвентаризации
		|ГДЕ Инвентаризации.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ КорректировкиИРегистрацияОстатков.Ссылка, КорректировкиИРегистрацияОстатков.Дата
		|ИЗ Документ.КорректировкиИРегистрацияОстатков КАК КорректировкиИРегистрацияОстатков
		|ГДЕ КорректировкиИРегистрацияОстатков.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПоступленияТовара.Ссылка, ПоступленияТовара.Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка, РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Константы.ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского.Установить(Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить());
		
	КонецЕсли;
	
	МассивПартий = новый Массив;
	если ВерсияБыла < 140108 тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата,
		|	ПоступленияТовара.ПартияПриобретения
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.ПартияПриобретения <> &ПустаяПартияПриобретения
		|	И ПоступленияТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("ПустаяПартияПриобретения", Справочники.ПартииПриобретения.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
				Если МассивПартий.Найти(ВыборкаДетальныеЗаписи.ПартияПриобретения) = Неопределено Тогда
					МассивПартий.Добавить(ВыборкаДетальныеЗаписи.ПартияПриобретения);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	
	если ВерсияБыла < 140112 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасходыТовара.Ссылка, ПоступленияТовара.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходыТовара КАК РасходыТовара
		|		ПО ПоступленияТовара.ЗаказКлиента = РасходыТовара.Ссылка
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВерсияБыла < 140113 тогда 
		Константы.ВключитьЛичныеНастройкиПользователей.Установить(истина);
	КонецЕсли;
	
	если ВерсияБыла < 140117 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПоступленияТовараДополнительныеРасходы.Ссылка,
		|	ПоступленияТовараДополнительныеРасходы.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара.ДополнительныеРасходы КАК ПоступленияТовараДополнительныеРасходы
		|ГДЕ ПоступленияТовараДополнительныеРасходы.Ссылка.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВерсияБыла < 140119 тогда 
		Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(Истина) ;
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ВерсияБыла < 140125 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		               |	ПоступленияТовара.Дата КАК Дата
		               |ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		               |ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		               |ОБЪЕДИНИТЬ ВСЕ
		               |ВЫБРАТЬ РасходыТовара.Ссылка,
		               |	РасходыТовара.Дата
		               |ИЗ Документ.РасходыТовара КАК РасходыТовара
		               |ГДЕ РасходыТовара.Проведен = ИСТИНА
		               |УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
		//перпроведение
	Если не ДокументыДляПерепроведения.Количество() = 0 Тогда
		ТаблицаДокументовДляПерепроведения.Сортировать("Дата Возр");
		
		Для Каждого СтрокаДокумент Из ТаблицаДокументовДляПерепроведения Цикл
			ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЕсли;
	
	//	после проведения документов
	если ВерсияБыла < 140108 тогда
		Для каждого ПартияПриобретения Из МассивПартий Цикл
			ПартияПриобретенияОбъект = ПартияПриобретения.ПолучитьОбъект();
			ПартияПриобретенияОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыСеанса.НеВыводитьСообщений = Ложь;
	попытка
		установитьМонопольныйРежим(Ложь);
	исключение
	конецпопытки;
	
КонецПроцедуры

&НаСервере
Функция   СоздатьДоговор(Знач Организация, Знач КлиентПоставщик, Знач Дата, Знач ВидЦен = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.Договора.СоздатьЭлемент() ;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		НовыйДоговор.ВидЦен = ВидЦен;          		
	Иначе
		
		Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
			НовыйДоговор.ВидЦен = КлиентПоставщик.ВидЦен;
			
			Если НЕ ЗначениеЗаполнено(НовыйДоговор.ВидЦен) Тогда
				
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					НовыйДоговор.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию") ;
				Иначе
					НовыйДоговор.ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию") ;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
			НовыйДоговор.ВидЦен = Организация.ВидЦен;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДоговор.ВидЦен) Тогда
			НовыйДоговор.ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен") ;
		КонецЕсли;	
	КонецЕсли;
	
	НовыйДоговор.ДатаЗаключения 	= НачалоДня(Дата);
	НовыйДоговор.КлиентПоставщик 	= КлиентПоставщик;
	НовыйДоговор.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создан автоматически");
	НовыйДоговор.НомерДоговора 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по-умолчанию");
	НовыйДоговор.Организация 		= Организация;
	НовыйДоговор.УстанавливаетСрокОплатыВДнях = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СрокОплатыВДняхДляДоговоровПоУмолчанию");
	НовыйДоговор.Записать();
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции

&НаСервере
Процедура ВыполнитьКод(Знач ПрограммныйКод) Экспорт
	Выполнить("" + ПрограммныйКод[0] + ";");	
КонецПроцедуры

&НаСервере
Процедура СохранитьВФайл(Знач ПараметрыСохранения) Экспорт
	
	ТабДок = ПараметрыСохранения[0];
	АдресФайла = ПараметрыСохранения[1] + "\" + ПараметрыСохранения[2] + ".xls";
	ТабДок.Записать(АдресФайла, ТипФайлаТабличногоДокумента.XLS97);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмо(Знач ПараметрыСохранения) Экспорт	
	ОбщийМодульСервисСервер.ОправитьПоEMAILКонтрагентуНаСервере(ПараметрыСохранения[1], ПараметрыСохранения[0], ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет Руководителю") + ПараметрыСохранения[2], ПараметрыСохранения[3]);	  	
КонецПроцедуры

&НаСервере
Процедура Резервировать(Знач ПараметрыРезервирования) Экспорт	
	
	АдресКаталогБазыДанных = СтрЗаменить(ПараметрыРезервирования[0], """", "");
	
	ИмяФайла 		= формат(ПараметрыРезервирования[1], "ДФ=ггММдд-ЧЧммсс");
	КаталогРезерва 	= ПараметрыРезервирования[2] + "\" + ИмяФайла;
	файлыБазыДанных = НайтиФайлы(АдресКаталогБазыДанных, "*.*");
	
	СоздатьКаталог(КаталогРезерва);
	
	для каждого файлБазыДанных из файлыБазыДанных Цикл
		попытка
			КопироватьФайл(файлБазыДанных.ПолноеИмя, КаталогРезерва + "\" + файлБазыДанных.имя);
		исключение
		конецпопытки;					             	
	КонецЦикла;
	
	Если ПараметрыРезервирования[3] = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанныхВАрхив Тогда
		
		АдресФайла = ПараметрыРезервирования[2] + "\" + ИмяФайла + ".ZIp";
		архив = новый ЗаписьZipФайла(АдресФайла, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Автоматический архив с базой данных"), МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
		архив.Добавить(КаталогРезерва + "\*.*", РежимСохраненияПутейZIP.СохранятьПолныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		архив.Записать();		
		
		УдалитьФайлы(КаталогРезерва);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачку(зНАЧ напоминание) Экспорт
	
	Дата = ТекущаяДата();
	
	Для Каждого ПодЗадача Из напоминание.ВыполняемыеЗадачи Цикл
		
		типЗадачи = ПодЗадача.типЗадачи;
		
		СформироватьОтчетИОтправитьПоEmail 	  = типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИОтправитьПоEmail;
		СформироватьОтчетИСохранитьВФайлExcel = типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИСохранитьВФайлExcel;
		резервирование						  = типЗадачи = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанных ИЛи типЗадачи = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанныхВАрхив;
		
		Попытка 
			Если типЗадачи = Перечисления.ТипыЗадач.ВыполнитьПрограммныйКод Тогда
				
				ПараметрыЗадания = Новый Массив;
				ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
				ВыполнитьКод(ПараметрыЗадания);
				
				//ФоновыеЗадания.Выполнить("ОбщийМодульСерверПривилегия.ВыПолнитьКод", ПараметрыЗадания, "ВК" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить код") + " " + Напоминание.Код);
				ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнен код задачи") + " " + Напоминание.Наименование, 2, напоминание);
				
			ИначеЕсли СформироватьОтчетИОтправитьПоEmail
				или СформироватьОтчетИСохранитьВФайлExcel Тогда
				
				СтруктураУсловий = Новый Структура;
				СтруктураУсловий.Вставить("ДатаНачала", НачалоДня(НачалоДня(Дата) - 3600));
				СтруктураУсловий.Вставить("ДатаОкончания", КонецДня(Дата));
				СтруктураУсловий.Вставить("ОтборПоСкладу", Неопределено);
				
				ТабДок 		= Новый ТабличныйДокумент;
				СтруктураОтчета = ОбщийМодульСервер.СформироватьОтчетРуководителюНаСервере(СтруктураУсловий);
				
				ОбщийМодульСервер.ПечатьНаСервереОтчетаРуководителю(СтруктураОтчета, ТабДок, СформироватьОтчетИОтправитьПоEmail);
				
				Если СформироватьОтчетИСохранитьВФайлExcel Тогда
					
					ПараметрыЗадания = Новый Массив;
					ПараметрыЗадания.Добавить(ТабДок);
					ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
					ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
					
					СохранитьВФайл(ПараметрыЗадания);
					
					//ФоновыеЗадания.Выполнить("ОбщийМодульСерверПривилегия.СохранитьВФайл", ПараметрыЗадания, "СФ" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить в файл") + " " + Напоминание.Код);
					ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записан отчет руководителю в файл") + " " + ПодЗадача.Адрес + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" задачи") + " " + Напоминание.Наименование, 2, напоминание);
					
				Иначе
					ТекстСопровождения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подготовлен и отправлен автоматически");
					
					ПараметрыЗадания = Новый Массив;
					ПараметрыЗадания.Добавить(ТабДок);
					ПараметрыЗадания.Добавить(ТекстСопровождения);
					ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
					ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
					
					ОтправитьПисьмо(ПараметрыЗадания);
					//ФоновыеЗадания.Выполнить("ОбщийМодульСерверПривилегия.ОтправитьПисьмо", ПараметрыЗадания, "ОП" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправить письмо") + " " + Напоминание.Код);
					
					ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправлен отчет руководителю по email задачи") + " " + Напоминание.Наименование, 2, напоминание);
					
				КонецЕсли;			
				
			ИначеЕсли резервирование Тогда
				
				АдресКаталогБазыДанных = ПолучитьПредставлениеИнформационнойБазы();
				
				если не АдресКаталогБазыДанных = Неопределено тогда
					
					ПараметрыЗадания = Новый Массив;
					ПараметрыЗадания.Добавить(АдресКаталогБазыДанных);
					ПараметрыЗадания.Добавить(Дата);
					ПараметрыЗадания.Добавить(Подзадача.Адрес);
					ПараметрыЗадания.Добавить(типЗадачи);
					Резервировать(ПараметрыЗадания);
					
					//ФоновыеЗадания.Выполнить("ОбщийМодульСерверПривилегия.Резервировать", ПараметрыЗадания, "РЗ" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Резервировать") + " " + Напоминание.Код);
					ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарезерварован каталог базы данных. Задачи") + " " + Напоминание.Наименование, 2, напоминание);
					
				КонецЕсли;    				
			КонецЕсли;
			
		Исключение 	
			
			ОписаниеОшибки = ОписаниеОшибки();
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при исполнении задачи") + " " + ОписаниеОшибки, , напоминание.ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки;
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при исполнении задачи") + " " + Напоминание.Наименование + " - " + ОписаниеОшибки, 2);
			
			Прервать;
			
		КонецПопытки;  		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьПредставлениеИнформационнойБазы() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяИБ = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	
	Если ЭтоФайловаяИБ Тогда
		Возврат Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

Функция   ПроверитьНаличиеПропущенныхНапоминаний(ТолькоЗадачи = Ложь) Экспорт
	
	СтруктураНапоминаний = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Наименование,
	|	ЗаметкиИНапоминания.ПовторятьКаждыеЧислоЧасов,
	|	ЗаметкиИНапоминания.Причина,
	|	ЗаметкиИНапоминания.ДатаПоследнегоНапоминания,
	|	ЗаметкиИНапоминания.Дата,
	|	ЗаметкиИНапоминания.ТипЗаметки,
	|	ЗаметкиИНапоминания.Ссылка,
	|	ЗаметкиИНапоминания.Получатель
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.ТипЗаметки = &ТипЗаметки
	|	И ЗаметкиИНапоминания.Актуально = ИСТИНА
	|	И ЗаметкиИНапоминания.Дата <= &Дата
	|	И (ЗаметкиИНапоминания.ДатаПоследнегоНапоминания = &ПустаяДата
	|			ИЛИ НЕ ЗаметкиИНапоминания.ПовторятьКаждыеЧислоЧасов = 0)
	|	И (ЗаметкиИНапоминания.Получатель = &ПустойПолучатель или ЗаметкиИНапоминания.Получатель = &ПользовательПоУмолчанию
	|	ИЛИ ЗаметкиИНапоминания.Получатель = &ТекущийПользователь)";
	
	ПустаяДата 	= '00010101000000';
	Дата 		= ТекущаяДата();
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПользовательПоУмолчанию", ПредопределенноеЗначение("Справочник.Пользователи.ПользовательПоУмолчанию"));
	Запрос.УстановитьПараметр("ПустойПолучатель", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
	Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
	Запрос.УстановитьПараметр("ТипЗаметки", ?(ТолькоЗадачи, Перечисления.ТипыЗаметок.Задача, Перечисления.ТипыЗаметок.Напоминание));
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапросаПустой = РезультатЗапроса.Пустой();
	
	СтруктураНапоминаний.Вставить("Есть", Ложь);
	
	Если НЕ РезультатЗапросаПустой Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СтруктураНапоминаний.Вставить("МассивНапоминаний", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			если ВыборкаДетальныеЗаписи.ДатаПоследнегоНапоминания = ПустаяДата Тогда 
				СтруктураНапоминаний.МассивНапоминаний.Добавить(ВыборкаДетальныеЗаписи.ссылка);
				СтруктураНапоминаний.Есть = Истина;
				
			иначе
				СледующийПериод = ВыборкаДетальныеЗаписи.ДатаПоследнегоНапоминания + ВыборкаДетальныеЗаписи.ПовторятьКаждыеЧислоЧасов * 3600;
				
				если СледующийПериод < Дата тогда
					СтруктураНапоминаний.МассивНапоминаний.Добавить(ВыборкаДетальныеЗаписи.ссылка);	
					СтруктураНапоминаний.Есть = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат СтруктураНапоминаний;
	
КонецФункции 

Функция   ЗаписатьВыполнениеНапоминания(Знач напоминание) Экспорт
	
	напоминаниеОбъект = напоминание.ПолучитьОбъект();
	напоминаниеОбъект.ДатаПоследнегоНапоминания = ТекущаяДата();
	напоминаниеОбъект.Записать();
	
	Возврат напоминаниеОбъект.ссылка
	
КонецФункции

Процедура ВыполнитьЗадачи() Экспорт
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний") Тогда
		
		МассивНапоминаний 	 = Новый Массив;
		СтруктураНапоминаний = ОбщийМодульСерверПривилегия.ПроверитьНаличиеПропущенныхНапоминаний(Истина);
		
		Если СтруктураНапоминаний.Есть Тогда			
			
			НаименованиеФЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Задача на фоне") + " ";
			Для каждого напоминание из СтруктураНапоминаний.МассивНапоминаний Цикл				
				
				напоминание = ОбщийМодульСерверПривилегия.ЗаписатьВыполнениеНапоминания(напоминание);	
				ОбщийМодульСерверПривилегия.ВыполнитьЗадачку(напоминание);	
				
			КонецЦикла;
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   ОпределитьПользователя() Экспорт
	
	НаименованиеПользователя = Сокрлп(ПользователиИнформационнойБазы.ТекущийПользователь());
	Если НаименованиеПользователя = "" Тогда
		
		ОпределенныйПользователь = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Пользователи.ПользовательПоУмолчанию");
	иначе
		
		ОпределенныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(НаименованиеПользователя);
		Если НЕ ЗначениеЗаполнено(ОпределенныйПользователь) Тогда
			ОпределенныйПользовательОбъект 	= Справочники.Пользователи.СоздатьЭлемент();
			ОпределенныйПользовательОбъект.Наименование = НаименованиеПользователя;
			ОпределенныйПользовательОбъект.Записать();
			ОпределенныйПользователь 		= ОпределенныйПользовательОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОпределенныйПользователь;
	
КонецФункции //ОпределитьПользователя

Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Экспорт
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	
	если ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли) тогда
		
		НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
		ПараметрыСеанса.НеВыводитьСообщений = Истина;
		
		Попытка 
			УстановитьМонопольныйРежим(Истина);
		Исключение 	
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Дата КАК Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|	И РасходыТовара.Дата > &ДатаАктуальностиПоказателейВаловойПрибыли
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|	И ПоступленияТовара.Дата > &ДатаАктуальностиПоказателейВаловойПрибыли
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("ДатаАктуальностиПоказателейВаловойПрибыли", ДатаАктуальностиПоказателейВаловойПрибыли);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
				Исключение 	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка проведения документа:") + " " + Документ, , Документ.Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка проведения документа:") + " " + Документ;//ОписаниеОшибки();
					//Сообщение.Сообщить();
					
				КонецПопытки;
			КонецЦикла;
			
			Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить('00010101000000') ;
		КонецЕсли;	
		
		Попытка 
			УстановитьМонопольныйРежим(Ложь);
		Исключение 	
		КонецПопытки;
		
		ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция   НетБольшеПодключенийКБазеДанных() Экспорт
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() = 1;
КонецФункции 
