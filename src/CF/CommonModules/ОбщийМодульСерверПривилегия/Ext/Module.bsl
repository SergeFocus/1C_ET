//sza141210-0338
//sza141112-2203
//sza141103-1043 : валовая перепроводить
//sza141102-0106 : 
//sza141009-0203 
//sza140719-0951 обнов по отсрочка
//sza140719-0124 произвольный
//sza140717-1722 ошибка резерва
//sza140710-1050  попытка на удаление ревкизита
//sza140709-1756  допрасх в приходах
//sza140707-1402  !
//sza140627-1742  
//sza140624-1547  
//sza131111-1845
Процедура ВыполнитьЗадачи() Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмЗаметокИНапоминаний") Тогда
		
		МассивНапоминаний 	 = Новый Массив;
		СтруктураНапоминаний = ОбщийМодульСерверПривилегия.ПроверитьНаличиеПропущенныхНапоминаний(ИСТИНА);
		
		Если СтруктураНапоминаний.Есть Тогда			
			
			НаименованиеФЗ = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Задача на фоне") + " ";
			Для Каждого напоминание из СтруктураНапоминаний.МассивНапоминаний Цикл				
				
				напоминание = ОбщийМодульСерверПривилегия.ЗаписатьВыполнениеНапоминания(напоминание);	
				ОбщийМодульСерверПривилегия.ВыполнитьЗадачку(напоминание);	
				
			КонецЦикла;
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьЗадачку(Знач Напоминание) Экспорт
	
	Дата = ТекущаяДата();
	
	Для Каждого ПодЗадача Из Напоминание.ВыполняемыеЗадачи Цикл
		
		типЗадачи = ПодЗадача.типЗадачи;
		
		ОтчетРуководителю 					  = (типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИОтправитьПоEmail) ИЛИ (типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИСохранитьВФайлExcel);
		СформироватьОтчетИОтправитьПоEmail 	  = (типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИОтправитьПоEmail) ИЛИ (типЗадачи = Перечисления.ТипыЗадач.СформироватьПроизвольныйОтчетИОтправитьПоEmail);
		СформироватьОтчетИСохранитьВФайлExcel = (типЗадачи = Перечисления.ТипыЗадач.СформироватьОтчетИСохранитьВФайлExcel) ИЛИ (типЗадачи = Перечисления.ТипыЗадач.СформироватьПроизвольныйОтчетИСохранитьВФайлExcel);
		Резервирование						  = типЗадачи = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанных ИЛи типЗадачи = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанныхВАрхив;
		
		Попытка 
			Если типЗадачи = Перечисления.ТипыЗадач.ВыполнитьПрограммныйКод Тогда
				
				ПараметрыЗадания = Новый Массив;
				ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
				ВыполнитьКод(ПараметрыЗадания);
				
				//ФоновыеЗадания.Выполнить(" ОбщийМодульСерверПривилегия.ВыПолнитьКод", ПараметрыЗадания, "ВК" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнить код") + " " + Напоминание.Код);
				ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнен код задачи") + " " + Напоминание.Наименование, 2, напоминание);
				
			ИначеЕсли СформироватьОтчетИОтправитьПоEmail
				ИЛИ СформироватьОтчетИСохранитьВФайлExcel Тогда
				
				Если ОтчетРуководителю Тогда
					СтруктураУсловий = Новый Структура;
					СтруктураУсловий.Вставить("ДатаНачала", НачалоДня(НачалоДня(Дата) - 3600));
					СтруктураУсловий.Вставить("ДатаОкончания", КонецДня(Дата));
					СтруктураУсловий.Вставить("ОтборПоСкладу", Неопределено);
					
					ТабДок = Новый ТабличныйДокумент;
					ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОТЧЕТРУК" + СокрЛП(ИмяКомпьютера());
					ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
					
					СтруктураОтчета = ОбщийМодульСервер.СформироватьОтчетРуководителюНаСервере(СтруктураУсловий);
					
					ОбщийМодульСервер.ПечатьНаСервереОтчетаРуководителю(СтруктураОтчета, ТабДок, СформироватьОтчетИОтправитьПоEmail);
					
					Если СформироватьОтчетИСохранитьВФайлExcel Тогда
						
						ПараметрыЗадания = Новый Массив;
						ПараметрыЗадания.Добавить(ТабДок);
						ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
						ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
						
						СохранитьВФайл(ПараметрыЗадания);
						
						//ФоновыеЗадания.Выполнить(" ОбщийМодульСерверПривилегия.СохранитьВФайл", ПараметрыЗадания, "СФ" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сохранить в файл") + " " + Напоминание.Код);
						ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записан отчет руководителю в файл") + " " + ПодЗадача.Адрес + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("задачи") + " " + Напоминание.Наименование, 2, напоминание);
						
					Иначе
						ТекстСопровождения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подготовлен и отправлен автоматически");
						
						ПараметрыЗадания = Новый Массив;
						ПараметрыЗадания.Добавить(ТабДок);
						ПараметрыЗадания.Добавить(ТекстСопровождения);
						ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
						ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
						
						ОтправитьПисьмо(ПараметрыЗадания);
						//ФоновыеЗадания.Выполнить(" ОбщийМодульСерверПривилегия.ОтправитьПисьмо", ПараметрыЗадания, "ОП" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправить письмо") + " " + Напоминание.Код);
						
						ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправлен отчет руководителю по email задачи") + " " + Напоминание.Наименование, 2, напоминание);
						
					КонецЕсли;
					
				Иначе					
					СтруктураУсловий = Новый Структура;
					Если ПодЗадача.ПериодОтчета = Перечисления.ПериодыОтчета.ЗаГод Тогда
						ДатаНачала 		= ДобавитьМесяц(НачалоДня(НачалоДня(Дата)), -12);
						ДатаОкончания 	= КонецДня(Дата);
					ИначеЕсли ПодЗадача.ПериодОтчета = Перечисления.ПериодыОтчета.ЗаДень Тогда
						ДатаНачала 		= НачалоДня(НачалоДня(Дата));
						ДатаОкончания 	= КонецДня(Дата);
					ИначеЕсли ПодЗадача.ПериодОтчета = Перечисления.ПериодыОтчета.ЗаМесяц Тогда
						ДатаНачала 		= ДобавитьМесяц(НачалоДня(НачалоДня(Дата)), -1);
						ДатаОкончания 	= КонецДня(Дата);
					КонецЕсли;
					
					ТабДок = Новый ТабличныйДокумент;
					ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОТЧЕТ" + СокрЛП(ИмяКомпьютера());
					ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
					
					ТаблицаПараметров = Новый ТаблицаЗначений;
					ТаблицаПараметров.Колонки.Добавить("НаименованиеПараметра");
					ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
					
					СтрокаПараметров = ТаблицаПараметров.Добавить();
					СтрокаПараметров.НаименованиеПараметра  = "ДатаНачала";
					СтрокаПараметров.ЗначениеПараметра 		= ДатаНачала;
					
					СтрокаПараметров = ТаблицаПараметров.Добавить();
					СтрокаПараметров.НаименованиеПараметра  = "ДатаОкончания";
					СтрокаПараметров.ЗначениеПараметра 		= ДатаОкончания;
					
					ОбщийМодульСервер.СформироватьПроизвольныйОтчетНаСервере(ТаблицаПараметров, ТабДок, ПодЗадача.НаименованиеОтчета);
					
					Если СформироватьОтчетИСохранитьВФайлExcel Тогда
						
						ПараметрыЗадания = Новый Массив;
						ПараметрыЗадания.Добавить(ТабДок);
						ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
						ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета);
						
						СохранитьВФайл(ПараметрыЗадания);
						
						ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Записан отчет") + " " + ПодЗадача.НаименованиеОтчета + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в файл") + " " + ПодЗадача.Адрес + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("задачи") + " " + Напоминание.Наименование, 2, напоминание);
						
					Иначе
						ТекстСопровождения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подготовлен и отправлен автоматически");
						
						ПараметрыЗадания = Новый Массив;
						ПараметрыЗадания.Добавить(ТабДок);
						ПараметрыЗадания.Добавить(ТекстСопровождения);
						ПараметрыЗадания.Добавить(ПодЗадача.КодИмяОтчета + СокрЛП(" " + ПодЗадача.НаименованиеОтчета));
						ПараметрыЗадания.Добавить(ПодЗадача.Адрес);
						
						ОтправитьПисьмо(ПараметрыЗадания);
						
						ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправлен отчет") + " " + ПодЗадача.НаименованиеОтчета + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по email задачи") + " " + Напоминание.Наименование, 2, напоминание);
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли резервирование Тогда
				
				АдресКаталогБазыДанных = ПолучитьПредставлениеИнформационнойБазы();
				
				Если НЕ АдресКаталогБазыДанных = Неопределено тогда
					
					ПараметрыЗадания = Новый Массив;
					ПараметрыЗадания.Добавить(АдресКаталогБазыДанных);
					ПараметрыЗадания.Добавить(Дата);
					ПараметрыЗадания.Добавить(Подзадача.Адрес);
					ПараметрыЗадания.Добавить(типЗадачи);
					Резервировать(ПараметрыЗадания);
					
					//ФоновыеЗадания.Выполнить(" ОбщийМодульСерверПривилегия.Резервировать", ПараметрыЗадания, "РЗ" + Напоминание.Код, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Резервировать") + " " + Напоминание.Код);
					ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Зарезерварован каталог базы данных. Задачи") + " " + Напоминание.Наименование, 2, напоминание);
					
				КонецЕсли;    				
			КонецЕсли;
			
		Исключение 	
			
			ОписаниеОшибки = ОписаниеОшибки();
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при исполнении задачи") + ": " + ОписаниеОшибки, , напоминание.ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки;
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при исполнении задачи") + ": " + Напоминание.Наименование + " - " + ОписаниеОшибки, 2);
			
			Прервать;
			
		КонецПопытки;  		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКод(Знач ПрограммныйКод) Экспорт
	Выполнить(" " + ПрограммныйКод[0] + ";");	
КонецПроцедуры

Функция   ЕстьПользователи() Экспорт	
	Возврат НЕ ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0;	
КонецФункции //ЕстьПользователи

Функция   ЗаписатьВыполнениеНапоминания(Знач Напоминание) Экспорт
	
	напоминаниеОбъект = напоминание.ПолучитьОбъект();
	напоминаниеОбъект.ДатаПоследнегоНапоминания = ТекущаяДата();
	напоминаниеОбъект.Записать();
	
	Возврат напоминаниеОбъект.ссылка
	
КонецФункции

Функция   НетБольшеПодключенийКБазеДанных() Экспорт
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() = 1;
КонецФункции 

Процедура ОбновитьДанныеПриОбновленииКонфигурации(Знач ВерсияБыла, Знач ВерсияКонфигурации) Экспорт
	
	Попытка
		установитьМонопольныйРежим(ИСТИНА);
	Исключение
	конецпопытки;
	
	ПараметрыСеанса.НеВыводитьСообщений = ИСТИНА;
	
	ДокументыДляПерепроведения = Новый Массив;
	ТаблицаДокументовДляПерепроведения = Новый ТаблицаЗначений;
	ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Документ");
	ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Дата");
	
	ВерсияБыла = стрзаменить(ВерсияБыла, "F", "");
	Попытка 
		ВерсияБыла = Число(?(ВерсияБыла = "", "0", ВерсияБыла));
	Исключение 	
		ВерсияБыла = 0;
	КонецПопытки;
	Попытка 
		ВерсияКонфигурации 	= Число(стрзаменить(ВерсияКонфигурации, "F", ""));
	Исключение 	
		ВерсияКонфигурации 	= 0;
	КонецПопытки;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
		Язык = Справочники.Языки.Выбрать();
		пока язык.Следующий() Цикл
			
			ЭтотЯзык = язык.Ссылка;
			Если НЕ ЭтотЯзык = Справочники.Языки.Русский 
				И НЕ ОбщийМодульТекстСервер.НетНиОднойЗаписиЭтогоЯзыка(ЭтотЯзык) Тогда
				
				ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ЭтотЯзык.Код, ЭтотЯзык, ИСТИНА);
			КонецЕсли;	
		КонецЦикла;	
		
		Если версияБыла < 140611 Тогда
			ЭлементСправочника = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОплатаКомиссионногоВознаграждения").ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Записать();
			
			ЭлементСправочника = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.СменаФормыОплаты").ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Записать();		
		КонецЕсли;
		
		Если версияБыла < 150112 Тогда
			ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ДубльЛишнийДокумент").ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Записать();
			
			ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ОшибкаУказанияДатыДокумента").ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Записать();
			
			ЭлементСправочника = ПредопределенноеЗначение("Справочник.ПричиныСторнированияДокументов.ОшибочноУказанКонтрагент").ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Записать();
		КонецЕсли;
		//Если версияБыла < 140914 Тогда
		//	Для Счетчик = 1 по 10 Цикл
		//		Выполнить(" ЭлементСправочника = Справочники.ДругиеИменованныеОбъекты.НаименованиеДополнительногоРеквизитаСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
		//		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		//		ЭлементСправочника.Записать();	
		//	КонецЦикла;	
		//КонецЕсли;					
	КонецЕсли;
	
	Если версияБыла < 141216 Тогда
		Константы.ЧислоДнейДействительностиСчетаФактурыДляОплаты.Установить(3);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Клиенты.Адрес,
		|	Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
				Контрагент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Контрагент.ЮридическийАдрес = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);
				Попытка 
					Контрагент.Записать();
				Исключение 	
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Поставщики.Адрес,
		|	Поставщики.Ссылка
		|ИЗ Справочник.Поставщики КАК Поставщики
		|ГДЕ Поставщики.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
				Контрагент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Контрагент.ЮридическийАдрес = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);
				Попытка 
					Контрагент.Записать();
				Исключение 	
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Организации.Адрес,
		|	Организации.Ссылка
		|ИЗ Справочник.Организации КАК Организации
		|ГДЕ Организации.ПометкаУдаления = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
				Контрагент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Контрагент.ЮридическийАдрес = СокрЛП(ВыборкаДетальныеЗаписи.Адрес);
				Попытка 
					Контрагент.Записать();
				Исключение 	
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если версияБыла < 141125 Тогда
		Константы.ФормироватьНовыйШтрихКодТолькоВЕгоОтсутствии.Установить(ИСТИНА);
	КонецЕсли;
	
	Если версияБыла < 140916 Тогда
		ДополнительныйРеквизитСправочникаКлиентов = Неопределено;
		Для Счетчик = 1 по 10 Цикл 
			Выполнить(" ДополнительныйРеквизитСправочникаКлиентов = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
			ДополнительныйРеквизитСправочникаКлиентов.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный реквизит справочника Клиентов") + " №" + СокрЛП(Счетчик);
			ДополнительныйРеквизитСправочникаКлиентов.НаименованиеОбъектаВладельца = ДополнительныйРеквизитСправочникаКлиентов.Комментарий;
			ДополнительныйРеквизитСправочникаКлиентов.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляКарточкиСправочникаКлиенты;
			ДополнительныйРеквизитСправочникаКлиентов.Записать();	
		КонецЦикла;
	КонецЕсли;
	
	Если версияБыла < 140617 Тогда
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ВнутреннееПеремещениеДенег").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
		
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДополнительныеРасходыПриПриобретенииТоваров").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
		
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ДоходОтРеализации").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
		
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.ОбменВалют").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
		
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.РасходыНаПриобретениеТоваров").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
		
		СтатьяДвиженияДенег = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенег.СменаФормыОплаты").ПолучитьОбъект();
		СтатьяДвиженияДенег.НеВключаетсяВОтчетОЧистойПрибыли = ИСТИНА;
		СтатьяДвиженияДенег.Записать();
	КонецЕсли;
	
	Если версияБыла < 140617 Тогда
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") 
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ХранилищаДенег.Ссылка
			|ИЗ Справочник.ХранилищаДенег КАК ХранилищаДенег
			|ГДЕ ХранилищаДенег.Валюта = &Валюта";
			
			Валюты = справочники.Валюты.Выбрать();
			Пока Валюты.Следующий() Цикл
				Если НЕ Валюты.Предопределенный Тогда
					Запрос.УстановитьПараметр("Валюта", Валюты.Ссылка);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если РезультатЗапроса.Пустой() Тогда
						
						НовоеХранилищеДенег = Справочники.ХранилищаДенег.СоздатьЭлемент();
						НовоеХранилищеДенег.Валюта = Валюты.Ссылка;
						НовоеХранилищеДенег.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Основное в валюте") + " " + СокрЛП(Валюты.Ссылка);
						НовоеХранилищеДенег.Записать();
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ДвиженияДенег.Ссылка,
			|	ДвиженияДенег.Дата КАК Дата
			|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
			|ГДЕ ДвиженияДенег.Проведен = ИСТИНА
			|	И ДвиженияДенег.Валюта <> &Валюта
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ Инвентаризации.Ссылка,
			|	Инвентаризации.Дата
			|ИЗ Документ.Инвентаризации КАК Инвентаризации
			|ГДЕ Инвентаризации.Проведен = ИСТИНА
			|	И Инвентаризации.Валюта <> &Валюта
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПоступленияТовара.Ссылка,
			|	ПоступленияТовара.Дата
			|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
			|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
			|	И ПоступленияТовара.Валюта <> &Валюта
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РасходыТовара.Ссылка,
			|	РасходыТовара.Дата
			|ИЗ Документ.РасходыТовара КАК РасходыТовара
			|ГДЕ РасходыТовара.Проведен = ИСТИНА
			|	И РасходыТовара.Валюта <> &Валюта
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ОказанияУслугЗаВремя.Ссылка,
			|	ОказанияУслугЗаВремя.Дата
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.Валюта <> &Валюта
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ВыполненияРабот.Ссылка,
			|	ВыполненияРабот.Дата
			|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
			|ГДЕ ВыполненияРабот.Проведен = ИСТИНА
			|	И ВыполненияРабот.Валюта <> &Валюта
			|УПОРЯДОЧИТЬ ПО Дата";
			
			Запрос.УстановитьПараметр("Валюта", ОсновнаяВалюта);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					РегистраторОбъект = Регистратор.ПолучитьОбъект();
					РегистраторОбъект.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(Регистратор.Валюта, РегистраторОбъект.ХранилищеДенег);
					РегистраторОбъект.НеПроводить = ИСТИНА;
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Регистратор = РегистраторОбъект.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ КорректировкиИРегистрацияОстатковДеньги.Ссылка, КорректировкиИРегистрацияОстатковДеньги.Ссылка.Дата
			|ИЗ Документ.КорректировкиИРегистрацияОстатков.Деньги КАК КорректировкиИРегистрацияОстатковДеньги
			|ГДЕ КорректировкиИРегистрацияОстатковДеньги.Валюта <> &Валюта
			|	И КорректировкиИРегистрацияОстатковДеньги.Ссылка.Проведен = ИСТИНА";
			
			Запрос.УстановитьПараметр("Валюта", ОсновнаяВалюта);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					РегистраторОбъект = Регистратор.ПолучитьОбъект();
					Для Каждого СтрокаДенег Из РегистраторОбъект.Деньги Цикл
						Если НЕ СтрокаДенег.Валюта = ОсновнаяВалюта Тогда
							СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);	
						КонецЕсли;	
					КонецЦикла;
					РегистраторОбъект.НеПроводить = ИСТИНА;
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Регистратор = РегистраторОбъект.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ДвиженияДенегПлатежи.Ссылка,
			|	ДвиженияДенегПлатежи.Ссылка.Дата КАК Дата
			|ИЗ Документ.ДвиженияДенег.Платежи КАК ДвиженияДенегПлатежи
			|ГДЕ ДвиженияДенегПлатежи.Валюта <> &Валюта
			|	И ДвиженияДенегПлатежи.Ссылка.Проведен = ИСТИНА
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ДвиженияДенегЗарплата.Ссылка,
			|	ДвиженияДенегЗарплата.Ссылка.Дата
			|ИЗ Документ.ДвиженияДенег.Зарплата КАК ДвиженияДенегЗарплата
			|ГДЕ ДвиженияДенегЗарплата.Валюта <> &Валюта
			|	И ДвиженияДенегЗарплата.Ссылка.Проведен = ИСТИНА";
			
			Запрос.УстановитьПараметр("Валюта", ОсновнаяВалюта);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					РегистраторОбъект = Регистратор.ПолучитьОбъект();
					Для Каждого СтрокаДенег Из РегистраторОбъект.Платежи Цикл
						Если НЕ СтрокаДенег.Валюта = ОсновнаяВалюта Тогда
							СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);	
						КонецЕсли;	
					КонецЦикла;
					Для Каждого СтрокаДенег Из РегистраторОбъект.Зарплата Цикл
						Если НЕ СтрокаДенег.Валюта = ОсновнаяВалюта Тогда
							СтрокаДенег.ХранилищеДенег = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(СтрокаДенег.Валюта, СтрокаДенег.ХранилищеДенег);	
						КонецЕсли;	
					КонецЦикла;
					РегистраторОбъект.НеПроводить = ИСТИНА;
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Регистратор = РегистраторОбъект.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если версияБыла < 141225 //неверно заполнялась сумма итогов перемещений
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПеремещенияТовара.Ссылка КАК Регистратор,
		               |	ПеремещенияТовара.Дата КАК период
		               |ИЗ Документ.ПеремещенияТовара КАК ПеремещенияТовара
		               |ГДЕ ПеремещенияТовара.Проведен = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата 	= ВыборкаДетальныеЗаписи.Период;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если версияБыла < 140624 
		И (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненияРабот.Ссылка как Регистратор,
		|	ВыполненияРабот.Дата как период
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОказанияУслугЗаВремя.Ссылка,
		|	ОказанияУслугЗаВремя.Дата
		|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ ОказанияУслугЗаВремя.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Комплектация.Ссылка,
		|	Комплектация.Дата
		|ИЗ Документ.Комплектация КАК Комплектация
		|ГДЕ Комплектация.Проведен = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата 	= ВыборкаДетальныеЗаписи.Период;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если версияБыла < 150114 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЕдиницыИзмерения.Ссылка
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЕдИзм = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ЕдИзмНаименование = ВРег(СокрЛП(ЕдИзм.Наименование));
				Если Лев(ЕдИзмНаименование, 1) = "Ш" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "2009";
				ИначеЕсли Лев(ЕдИзмНаименование, 1) = "Л" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "0138";
				ИначеЕсли Лев(ЕдИзмНаименование, 1) = "К" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "0301";
				ИначеЕсли Лев(ЕдИзмНаименование, 1) = "М" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "0101";
				ИначеЕсли Лев(ЕдИзмНаименование, 2) = "УП" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "2102";
				ИначеЕсли Лев(ЕдИзмНаименование, 2) = "УС"
					ИЛИ Лев(ЕдИзмНаименование, 3) = "ПОС" Тогда
					ЕдИзм.КодЕдиницыПоКлассификатору = "2454";
				КонецЕсли;
				ЕдИзм.Записать();
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если версияБыла < 140402 Тогда
		Константы.НаименованиеОсновнойЕдиницыИзмеренияПоУмолчанию.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Шт."));
		Если НЕ ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			ЭлементСправочника = Справочники.Спецификации.Архив.ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Спецификаций для комплектаций");
			ЭлементСправочника.Записать();	                         
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияБыла < 131117 тогда
		
		НашеЮрЛицо = Справочники.Организации.ОсновноеПредприятие.ПолучитьОбъект();
		Наименование = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати");
		Если ЗначениеЗаполнено(Наименование) Тогда
			НашеЮрЛицо.Наименование = стрзаменить(Наименование, символы.ПС, " ");
		Иначе
			НашеЮрЛицо.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Основная организация");
		КонецЕсли;
		НашеЮрЛицо.ВидЦен 		    = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		НашеЮрЛицо.ЭлектроннаяПочта = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЭлектроннаяПочтаОтправитель");
		НашеЮрЛицо.Записать();
		
		Если НЕ ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			ЭлементСправочника = Справочники.Договора.Архив.ПолучитьОбъект();
			ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
			ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Договоров");
			ЭлементСправочника.Записать();	                         
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Продажи.Регистратор, Продажи.Период КАК Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Закупки.Регистратор, Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|УПОРЯДОЧИТЬ ПО Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Период;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
		ЯзыкР = Справочники.Языки.Болгарский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Български BG";
		ЯзыкР.Наименование 	= "Български - Болгарский (BG)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Казахский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Қазақ KK";
		ЯзыкР.Наименование 	= "Қазақ - Казахский (KK)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Немецкий.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Deutsch DE";
		ЯзыкР.Наименование 	= "Deutsch - Немецкий (DE)";
		ЯзыкР.Записать();
		
		ЯзыкР = Справочники.Языки.Польский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "Polski PL";
		ЯзыкР.Наименование 	= "Polski - Польский (PL)";
		ЯзыкР.Записать();
		
	КонецЕсли;
	
	Если ВерсияБыла < 131119 Тогда
		Константы.ИспользоватьКомандыИзмененийИЗаполненияДляТаблицыТовары.Установить(ИСТИНА);
	КонецЕсли;
	
	Если ВерсияБыла < 131125
		И Константы.ВестиУчетДвиженияДенег.Получить() Тогда
		
		Константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Установить(ИСТИНА);
	КонецЕсли;
	
	Если ВерсияБыла < 131127 Тогда
		ЯзыкР = Справочники.Языки.Тайский.ПолучитьОбъект();
		ЯзыкР.Комментарий 	= "ภาษาไทย  TH";
		ЯзыкР.Наименование 	= "ภาษาไทย - Тайский (TH)";
		ЯзыкР.Записать();
	КонецЕсли;
	
	Если ВерсияБыла < 131204 Тогда
		Константы.ОрганизацияПоУмолчанию.Установить(ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));	
		
		ОсновнаяКассаВОсновнойВалюте = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте.ПолучитьОбъект();
		ОсновнаяКассаВОсновнойВалюте.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ОсновнаяКассаВОсновнойВалюте.Наименование);
		ОсновнаяКассаВОсновнойВалюте.Валюта 	  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ОсновнаяКассаВОсновнойВалюте.ФормаОплаты  = перечисления.ФормыОплаты.Наличные;
		ОсновнаяКассаВОсновнойВалюте.Записать();
		
		Константы.ОсновноеХранилищеДенег.Установить(ОсновнаяКассаВОсновнойВалюте.Ссылка);
		
		Если НЕ ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
			ВидХарактеристик = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
			Пока ВидХарактеристик.Следующий() Цикл
				ОбъектХарактеристика = ВидХарактеристик.ПолучитьОбъект();
				ОбъектХарактеристика.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидХарактеристик.Наименование);
				ОбъектХарактеристика.Записать();
			КонецЦикла;
			
			СтатьяДенег = Справочники.СтатьиДвиженияДенег.ВнутреннееПеремещениеДенег.ПолучитьОбъект();
			СтатьяДенег.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СтатьяДенег.Наименование);
			СтатьяДенег.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140227 
		И НЕ ОбщийМодульТекстСервер.ТекущийЯзыкРусский() Тогда
		
		ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.ГигиеническоеЗаключениеОбыкновенное.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.ИнформационноеПисьмо.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();
		
		ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.СертификатОбыкновенный.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();	
	КонецЕсли;
	
	Если ВерсияБыла < 131215 Тогда
		Константы.ИспользоватьПечатьЭтикеток.Установить(ИСТИНА); ;
	КонецЕсли;
	
	Если ВерсияБыла < 131219 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Изображения.Ссылка, Изображения.СвязанныйОбъект ИЗ Справочник.Изображения КАК Изображения";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			МассивОбъектов = Новый Массив;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СвязанныйОбъект = ВыборкаДетальныеЗаписи.СвязанныйОбъект;
				Если МассивОбъектов.Найти(СвязанныйОбъект) = Неопределено тогда
					МассивОбъектов.Добавить(СвязанныйОбъект);
					Изображение = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Изображение.ЭтоОсновноеИзображениеОбъекта = ИСТИНА;	
					Изображение.Записать();
				КонецЕсли;
			КонецЦикла;                        	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140103 тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ДвиженияДенег.Ссылка, ДвиженияДенег.Дата КАК Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Инвентаризации.Ссылка, Инвентаризации.Дата
		|ИЗ Документ.Инвентаризации КАК Инвентаризации
		|ГДЕ Инвентаризации.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ КорректировкиИРегистрацияОстатков.Ссылка, КорректировкиИРегистрацияОстатков.Дата
		|ИЗ Документ.КорректировкиИРегистрацияОстатков КАК КорректировкиИРегистрацияОстатков
		|ГДЕ КорректировкиИРегистрацияОстатков.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПоступленияТовара.Ссылка, ПоступленияТовара.Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка, РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Константы.ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского.Установить(Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить());
		
	КонецЕсли;
	
	МассивПартий = Новый Массив;
	Если ВерсияБыла < 140108 тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата,
		|	ПоступленияТовара.ПартияПриобретения
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.ПартияПриобретения <> &ПустаяПартияПриобретения
		|	И ПоступленияТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("ПустаяПартияПриобретения", ПредопределенноеЗначение("Справочник.ПартииПриобретения.ПустаяСсылка"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
				Если МассивПартий.Найти(ВыборкаДетальныеЗаписи.ПартияПриобретения) = Неопределено Тогда
					МассивПартий.Добавить(ВыборкаДетальныеЗаписи.ПартияПриобретения);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ВерсияБыла < 141115 Тогда
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег")
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
			
			НаборКурсов = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборКурсов.Прочитать();
			Для Каждого ЗаписьКурса Из НаборКурсов Цикл
				ЗаписьКурса.ОбратныйПересчет = ?(ЗаписьКурса.Курс = 0, 1, 1 / ЗаписьКурса.Курс);					
			КонецЦикла;
			
			Попытка
				НаборКурсов.Записать(ИСТИНА);
			Исключение //гтлтщцт!
			КонецПопытки;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасходыТовара.Ссылка,
			|	РасходыТовара.Дата КАК Дата
			|ИЗ Документ.РасходыТовара КАК РасходыТовара
			|ГДЕ РасходыТовара.Валюта <> &ОсновнаяВалюта
			|	И РасходыТовара.Курс = 1
			|	И РасходыТовара.Проведен = ИСТИНА
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПоступленияТовара.Ссылка,
			|	ПоступленияТовара.Дата
			|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
			|ГДЕ ПоступленияТовара.Валюта <> &ОсновнаяВалюта
			|	И ПоступленияТовара.Курс = 1
			|	И ПоступленияТовара.Проведен = ИСТИНА
			|УПОРЯДОЧИТЬ ПО Дата";
			
			Запрос.УстановитьПараметр("ОсновнаяВалюта", ОсновнаяВалюта);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;		
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка
			|ИЗ Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗависимыйВидЦен = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					БылИзм = ЛОЖЬ;
					Для Каждого СтрокаНомГруппы Из ЗависимыйВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп Цикл
						СтрокаНомГруппы.ОсновнойВидЦен = ЗависимыйВидЦен.ОсновнойВидЦен;
						БылИзм = ИСТИНА;
					КонецЦикла;
					
					Если БылИзм Тогда
						ЗависимыйВидЦен.Записать();
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;  	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 141201 Тогда
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибыли") Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВаловаяПрибыль.Регистратор КАК Ссылка,
			|	ВаловаяПрибыль.Период КАК Дата
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|УПОРЯДОЧИТЬ ПО Дата";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140209 Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВерсияБыла < 140510 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|	И ПоступленияТовара.ЭтоЗаказ = ЛОЖЬ
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|	И РасходыТовара.ЭтоЗаказ = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВерсияБыла < 140606 
		И Константы.ВестиУчетВаловойПрибыли.Получить() Тогда 
		
		Запрос = Новый Запрос;      //ВОЗВРАТЫ-Валовая прибыль
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата,
		|	ПоступленияТовара.КлиентПоставщик
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|	И ПоступленияТовара.ЭтоЗаказ = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				КлиентПоставщик = ВыборкаДетальныеЗаписи.КлиентПоставщик;
				Если ЗначениеЗаполнено(КлиентПоставщик)
					И ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияБыла < 140531 тогда 
		
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
			|	ПоступленияТовара.Дата КАК Дата
			|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
			|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
			|	И ПоступленияТовара.ЭтоЗаказ = ЛОЖЬ
			|	И ПоступленияТовара.УДАЛИТЬ_СпособДоставки <> &ПустаяСтрока
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РасходыТовара.Ссылка,
			|	РасходыТовара.Дата
			|ИЗ Документ.РасходыТовара КАК РасходыТовара
			|ГДЕ РасходыТовара.Проведен = ИСТИНА
			|	И РасходыТовара.ЭтоЗаказ = ЛОЖЬ
			|	И РасходыТовара.УДАЛИТЬ_СпособДоставки <> &ПустаяСтрока
			|УПОРЯДОЧИТЬ ПО Дата";
			
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Исключение //реквизит удалён
			
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|	И ПоступленияТовара.Договор.УстанавливаетСрокОплатыВДнях <> 0
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|	И РасходыТовара.ЭтоЗаказ = ЛОЖЬ
		|	И РасходыТовара.Договор.УстанавливаетСрокОплатыВДнях <> 0
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ВерсияБыла < 140113 тогда 
		Константы.ИспользоватьЛичныеНастройкиПользователей.Установить(ИСТИНА);
	КонецЕсли;
	
	Если ВерсияБыла < 140117 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПоступленияТовараДополнительныеРасходы.Ссылка,
		|	ПоступленияТовараДополнительныеРасходы.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара.ДополнительныеРасходы КАК ПоступленияТовараДополнительныеРасходы
		|ГДЕ ПоступленияТовараДополнительныеРасходы.Ссылка.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140426 
		И Константы.ВестиУчетДвиженияДенег.Получить()
		И константы.ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода.Получить()
		И константы.РазрешеноПриниматьПриРеализацииДеньгиСразуВНесколькихВалютах.Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РасходыТовара.Ссылка,
		|	РасходыТовара.Ссылка.Дата КАК Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовара.ПоступилоДенег <> 0
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияБыла < 140119 тогда 
		Константы.ПриАвтоматическомПерепроведенииДокументовОтменитьПроверкиНаОтказ.Установить(ИСТИНА);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ВерсияБыла < 140125 тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Проведен = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140216 тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Дата
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.БезПлана = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ОсновнаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Документ = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
				Для Каждого СтрокаТ из Документ.Товары Цикл
					
					Если НЕ СтрокаТ.КоличествоПлан = СтрокаТ.Количество Тогда						
						СтрокаТ.КоличествоПлан = СтрокаТ.Количество;
					КонецЕсли;
					
					Если НЕ СтрокаТ.ЦенаПлан = СтрокаТ.Цена Тогда
						СтрокаТ.ЦенаПлан = СтрокаТ.Цена;
					КонецЕсли;
					
					Если НЕ СтрокаТ.ПроцентСкидкиПлан = СтрокаТ.ПроцентСкидки Тогда
						СтрокаТ.ПроцентСкидкиПлан = СтрокаТ.ПроцентСкидки;
					КонецЕсли;
					
					Если НЕ СтрокаТ.СуммаБезСкидкиПлан = СтрокаТ.СуммаБезСкидки Тогда
						СтрокаТ.СуммаБезСкидкиПлан = СтрокаТ.СуммаБезСкидки;
					КонецЕсли;			
					
					Если СтрокаТ.Курс = 0 Тогда
						СтрокаТ.Курс = 1;
					КонецЕсли;
					
					Если СтрокаТ.КурсПлан = 0 Тогда
						СтрокаТ.КурсПлан = 1;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТ.Валюта) Тогда
						СтрокаТ.Валюта = ОсновнаяВалюта;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаТ.ВалютаПлан) Тогда
						СтрокаТ.ВалютаПлан = ОсновнаяВалюта;
					КонецЕсли;
					
					Если НЕ СтрокаТ.Количество = 0
						И ЗначениеЗаполнено(СтрокаТ.Дата) Тогда
						
						СтрокаТ.ВаловаяПрибыль = ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТ.номенклатура, СтрокаТ.Количество, СтрокаТ.Дата, СтрокаТ.Сумма, СтрокаТ.Валюта, СтрокаТ.Курс);
					Иначе
						СтрокаТ.ВаловаяПрибыль = ОбщийМодульСервер.РасчитатьОриентировочнуюВаловуюПрибыль(СтрокаТ.номенклатура, СтрокаТ.КоличествоПлан, СтрокаТ.ДатаПлан, СтрокаТ.План, СтрокаТ.ВалютаПлан, СтрокаТ.КурсПлан);
					КонецЕсли;	
				КонецЦикла;
				
				Для Каждого СтрокаТ из Документ.Оплаты Цикл
					Если НЕ СтрокаТ.ВалютаПлан = СтрокаТ.Валюта Тогда
						СтрокаТ.ВалютаПлан = СтрокаТ.Валюта;
					КонецЕсли;
					Если НЕ СтрокаТ.КурсПлан = СтрокаТ.Курс Тогда
						СтрокаТ.КурсПлан = СтрокаТ.Курс;
					КонецЕсли;					
				КонецЦикла;
				
				Для Каждого СтрокаТ из Документ.Расходы Цикл
					
					Если НЕ СтрокаТ.ВалютаПлан = СтрокаТ.Валюта Тогда
						СтрокаТ.ВалютаПлан = СтрокаТ.Валюта;
					КонецЕсли;
					
					Если НЕ СтрокаТ.КурсПлан = СтрокаТ.Курс Тогда
						СтрокаТ.КурсПлан = СтрокаТ.Курс;
					КонецЕсли;					
					
				КонецЦикла;
				
				Если ВыборкаДетальныеЗаписи.проведен Тогда
					Документ.Записать(РежимЗаписиДокумента.Проведение);
					Регистратор = Документ.ссылка;
					
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;
				Иначе
					Документ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;                        	
		КонецЕсли;
		
	КонецЕсли;
	
	Если версияБыла < 140427 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка КАК ссылка,
		|	ВыполненияРабот.Проведен КАК проведен,
		|	ВыполненияРабот.Дата КАК дата
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ДвиженияДенег.Ссылка,
		|	ДвиженияДенег.Проведен,
		|	ДвиженияДенег.Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ОказанияУслугЗаВремя.Ссылка,
		|	ОказанияУслугЗаВремя.Проведен,
		|	ОказанияУслугЗаВремя.Дата
		|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ ОказанияУслугЗаВремя.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Инвентаризации.Ссылка,
		|	Инвентаризации.Проведен,
		|	Инвентаризации.Дата
		|ИЗ Документ.Инвентаризации КАК Инвентаризации
		|ГДЕ Инвентаризации.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ КорректировкиИРегистрацияОстатков.Ссылка,
		|	КорректировкиИРегистрацияОстатков.Проведен,
		|	КорректировкиИРегистрацияОстатков.Дата
		|ИЗ Документ.КорректировкиИРегистрацияОстатков КАК КорректировкиИРегистрацияОстатков
		|ГДЕ КорректировкиИРегистрацияОстатков.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПеремещенияТовара.Ссылка,
		|	ПеремещенияТовара.Проведен,
		|	ПеремещенияТовара.Дата
		|ИЗ Документ.ПеремещенияТовара КАК ПеремещенияТовара
		|ГДЕ ПеремещенияТовара.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Проведен,
		|	ПоступленияТовара.Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ РасходыТовара.Ссылка,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Дата
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ТаблицыДанных.Ссылка,
		|	ТаблицыДанных.Проведен,
		|	ТаблицыДанных.Дата
		|ИЗ Документ.ТаблицыДанных КАК ТаблицыДанных
		|ГДЕ ТаблицыДанных.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ УстановкиЦен.Ссылка,
		|	УстановкиЦен.Проведен,
		|	УстановкиЦен.Дата
		|ИЗ Документ.УстановкиЦен КАК УстановкиЦен
		|ГДЕ УстановкиЦен.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ КоррекцияПартииПриобретенияРуководителем.Ссылка,
		|	КоррекцияПартииПриобретенияРуководителем.Проведен,
		|	КоррекцияПартииПриобретенияРуководителем.Дата
		|ИЗ Документ.КоррекцияПартииПриобретенияРуководителем КАК КоррекцияПартииПриобретенияРуководителем
		|ГДЕ КоррекцияПартииПриобретенияРуководителем.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Комплектация.Ссылка,
		|	Комплектация.Проведен,
		|	Комплектация.Дата
		|ИЗ Документ.Комплектация КАК Комплектация
		|ГДЕ Комплектация.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ОтчетКомиссионера.Ссылка,
		|	ОтчетКомиссионера.Проведен,
		|	ОтчетКомиссионера.Дата
		|ИЗ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
		|ГДЕ ОтчетКомиссионера.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПланыДоходовИРасходовДенег.Ссылка,
		|	ПланыДоходовИРасходовДенег.Проведен,
		|	ПланыДоходовИРасходовДенег.Дата
		|ИЗ Документ.ПланыДоходовИРасходовДенег КАК ПланыДоходовИРасходовДенег
		|ГДЕ ПланыДоходовИРасходовДенег.НеПроводить = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПланыПродаж.Ссылка,
		|	ПланыПродаж.Проведен,
		|	ПланыПродаж.Дата
		|ИЗ Документ.ПланыПродаж КАК ПланыПродаж
		|ГДЕ ПланыПродаж.НеПроводить = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				РегистраторОбъект = Регистратор.ПолучитьОбъект();
				РегистраторОбъект.НеПроводить = ЛОЖЬ;
				
				Если ВыборкаДетальныеЗаписи.Проведен тогда
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Регистратор = РегистраторОбъект.Ссылка;
					Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
						ДокументыДляПерепроведения.Добавить(Регистратор);
						СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
						СтрокаДокумент.Документ = Регистратор;
						СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
					КонецЕсли;                   	
					
				Иначе
					РегистраторОбъект.Записать(РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Запись);
				КонецЕсли;         	
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140703 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорректировкиИРегистрацияОстатковТовары.Ссылка,
		|	КорректировкиИРегистрацияОстатковТовары.Ссылка.Дата КАК Дата
		|ИЗ Документ.КорректировкиИРегистрацияОстатков.Товары КАК КорректировкиИРегистрацияОстатковТовары
		|ГДЕ КорректировкиИРегистрацияОстатковТовары.Ссылка.Проведен = ИСТИНА
		|	И КорректировкиИРегистрацияОстатковТовары.Склад = &Склад
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("Склад", ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Константы.ТекстЗаголовкаСчета.Установить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Счет на оплату"));
	КонецЕсли;
	
	Если ВерсияБыла < 140719 Тогда //отсрочка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступленияТовара.Ссылка,
		|	ПоступленияТовара.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара КАК ПоступленияТовара
		|ГДЕ ПоступленияТовара.Ссылка.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140722 Тогда //продажи по складам
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	Продажи.Регистратор.Ссылка КАК Ссылка,
		|	Продажи.Регистратор.Дата КАК Дата
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140707 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПоступленияТовараДополнительныеРасходы.Ссылка,
		|	ПоступленияТовараДополнительныеРасходы.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара.ДополнительныеРасходы КАК ПоступленияТовараДополнительныеРасходы
		|ГДЕ ПоступленияТовараДополнительныеРасходы.Ссылка.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
				Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
					ДокументыДляПерепроведения.Добавить(Регистратор);
					СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
					СтрокаДокумент.Документ = Регистратор;
					СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Дата;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	///
	
	//перепроведение
	Если НЕ ДокументыДляПерепроведения.Количество() = 0 Тогда
		ТаблицаДокументовДляПерепроведения.Сортировать("Дата Возр");
		
		Для Каждого СтрокаДокумент Из ТаблицаДокументовДляПерепроведения Цикл
			ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
			
			Если ВерсияБыла < 140531 тогда
				Попытка
					СпособДоставки = ДокументОбъект.УДАЛИТЬ_СпособДоставки;
					Если НЕ ПустаяСтрока(СпособДоставки) Тогда
						ДокументОбъект.СпособДоставки = Справочники.СпособыДоставки.НайтиПоНаименованию(СпособДоставки);
						Если НЕ ЗначениеЗаполнено(ДокументОбъект.СпособДоставки) Тогда
							НовыйСпособДоставки = Справочники.СпособыДоставки.СоздатьЭлемент();
							НовыйСпособДоставки.Наименование = СпособДоставки;
							НовыйСпособДоставки.Записать();
							ДокументОбъект.СпособДоставки = НовыйСпособДоставки.Ссылка;
						КонецЕсли;
						
						ДокументОбъект.УДАЛИТЬ_СпособДоставки = "";
					КонецЕсли;
				Исключение //удалённый реквизит
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	//	после проведения документов
	Если ВерсияБыла < 140108 тогда
		Для Каждого ПартияПриобретения Из МассивПартий Цикл
			ПартияПриобретенияОбъект = ПартияПриобретения.ПолучитьОбъект();
			ПартияПриобретенияОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если ВерсияБыла < 140426 тогда
		Константы.ЕстьПринтер.Установить(ИСТИНА);
		Константы.ПравовойСтатусПоставщикаПоУмолчанию.Установить(Константы.ПравовойСтатусПоУмолчанию.Получить());
	КонецЕсли;
	
	Если ВерсияБыла < 140204 тогда
		
		СтрокаДубль = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дубль") + " ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.Наименование ПОДОБНО &НаименованиеДубль";
		
		Запрос.УстановитьПараметр("НаименованиеДубль", СтрокаДубль);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Номенклатура = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
				Номенклатура.Наименование = стрЗаменить(Номенклатура.Наименование, СтрокаДубль, "");
				Номенклатура.ОбменДанными.Загрузка = ИСТИНА;
				Номенклатура.ПометкаУдаления = ЛОЖЬ;
				Номенклатура.Записать();
				
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсияБыла < 140420 
		И Константы.КоличествоНоменклатурыМожетБытьДробным.Получить() Тогда 	
		
		Константы.ЧислоЗнаковПослеЗапятойДляКоличества.Установить(3);
	КонецЕсли;
	
	Если ВерсияБыла < 140418 тогда 	
		
		ПолныйДоступ = перечисления.УровниДоступа.ПолныйДоступ;
		Пользователи = Справочники.Пользователи.Выбрать();
		
		Пока Пользователи.Следующий() Цикл
			Пользователь = Пользователи.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаДоступа Из Пользователь.Доступ Цикл
				СтрокаДоступа.УровеньДоступа = ПолныйДоступ;
			КонецЦикла;
			
			Пользователь.Записать();			
		КонецЦикла;
	КонецЕсли;
	
	Если ВерсияБыла < 140719 Тогда //отсрочка
		ОбщийМодульСервер.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();	
	КонецЕсли;
	
	Если ВерсияБыла < 140903 Тогда
		Константы.РазмерШрифтаЗаголовкаЭтикетки.Установить(12);
	КонецЕсли;
	
	Если версияБыла < 141009 Тогда
		Константы.ЧислоЭтикетокНаЛистеПоГоризонтали.Установить(1);
		Константы.ЧислоЭтикетокНаЛистеПоВертикали.Установить(1);
	КонецЕсли;
	
	ОбновитьНаименованияПравПользователей(ВерсияБыла < 140426);
	
	ПараметрыСеанса.НеВыводитьСообщений = ЛОЖЬ;
	Попытка
		установитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьНаименованияПравПользователей(Знач ВНезависимосиОтЯзыка)
	
	Если ВНезависимосиОтЯзыка
		ИЛИ Константы.ПоддерживатьИныеЯзыкиКромеРусского.Получить() Тогда
		
		Пользователи = Справочники.Пользователи.Выбрать();
		Пока Пользователи.Следующий() Цикл
			
			ПользовательОбъект = Пользователи.Ссылка.ПолучитьОбъект();
			ЕстьИзменения = ЛОЖЬ;
			
			Для Каждого СтрокаДоступа Из ПользовательОбъект.Доступ Цикл
				ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СтрокаДоступа.ОбъектДоступа);
				Если НЕ СтрокаДоступа.ОбъектДоступа = ОбъектДоступа Тогда
					СтрокаДоступа.ОбъектДоступа = ОбъектДоступа;
					ЕстьИзменения = ИСТИНА;
				КонецЕсли;			
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				ПользовательОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Функция   ОпределитьПользователя() Экспорт
	
	НаименованиеПользователя = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь());
	Если ПустаяСтрока(НаименованиеПользователя) Тогда		
		ОпределенныйПользователь = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Пользователи.ПользовательПоУмолчанию");
	Иначе
		
		ОпределенныйПользователь = Справочники.Пользователи.НайтиПоНаименованию(НаименованиеПользователя);
		Если НЕ ЗначениеЗаполнено(ОпределенныйПользователь) Тогда
			ОпределенныйПользовательОбъект 	= Справочники.Пользователи.СоздатьЭлемент();
			ОпределенныйПользовательОбъект.Наименование = НаименованиеПользователя;
			ОпределенныйПользовательОбъект.Записать();
			ОпределенныйПользователь 		= ОпределенныйПользовательОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОпределенныйПользователь;
	
КонецФункции //ОпределитьПользователя

Процедура ОтправитьПисьмо(Знач ПараметрыСохранения) Экспорт	
	ОбщийМодульСервисСервер.ОправитьПоEMAILКонтрагентуНаСервере(ПараметрыСохранения[1], ПараметрыСохранения[0], ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет") + " " + ПараметрыСохранения[2], ПараметрыСохранения[3]);	  	
КонецПроцедуры

Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Экспорт
	
	ДатаАктуальностиПоказателейВаловойПрибыли = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
	
	Если ЗначениеЗаполнено(ДатаАктуальностиПоказателейВаловойПрибыли) Тогда
		
		НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
		ПараметрыСеанса.НеВыводитьСообщений = ИСТИНА;
		
		Попытка 
			УстановитьМонопольныйРежим(ИСТИНА);
		Исключение 	
		КонецПопытки;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Товары.Регистратор КАК Ссылка,
		|	Товары.Период КАК Дата
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период > &ДатаАктуальностиПоказателейВаловойПрибыли
		|УПОРЯДОЧИТЬ ПО Дата";
		
		Запрос.УстановитьПараметр("ДатаАктуальностиПоказателейВаловойПрибыли", ДатаАктуальностиПоказателейВаловойПрибыли);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Попытка
					Документ.Записать(РежимЗаписиДокумента.Проведение);
				Исключение 	
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка проведения документа") + ": " + Документ, , Документ.Ссылка);
					
				КонецПопытки;
			КонецЦикла;
			
			Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить('00010101000000');
		КонецЕсли;	
		
		Попытка 
			УстановитьМонопольныйРежим(ЛОЖЬ);
		Исключение 	
		КонецПопытки;
		
		ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция   ПолучитьПредставлениеИнформационнойБазы() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяИБ = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	
	Если ЭтоФайловаяИБ Тогда
		Возврат Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

Функция   ПроверитьНаличиеПропущенныхНапоминаний(Знач ТолькоЗадачи = ЛОЖЬ) Экспорт
	
	СтруктураНапоминаний = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗаметкиИНапоминания.Наименование,
	|	ЗаметкиИНапоминания.ПовторятьКаждыеЧислоЧасов,
	|	ЗаметкиИНапоминания.Причина,
	|	ЗаметкиИНапоминания.ДатаПоследнегоНапоминания,
	|	ЗаметкиИНапоминания.Дата,
	|	ЗаметкиИНапоминания.ТипЗаметки,
	|	ЗаметкиИНапоминания.Ссылка,
	|	ЗаметкиИНапоминания.Получатель
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.ТипЗаметки = &ТипЗаметки
	|	И ЗаметкиИНапоминания.Актуально = ИСТИНА
	|	И ЗаметкиИНапоминания.Дата <= &Дата
	|	И (ЗаметкиИНапоминания.ДатаПоследнегоНапоминания = &ПустаяДата
	|			ИЛИ НЕ ЗаметкиИНапоминания.ПовторятьКаждыеЧислоЧасов = 0)
	|	И (ЗаметкиИНапоминания.Получатель = &ПустойПолучатель или ЗаметкиИНапоминания.Получатель = &ПользовательПоУмолчанию
	|	ИЛИ ЗаметкиИНапоминания.Получатель = &ТекущийПользователь)";
	
	ПустаяДата 	= '00010101000000';
	Дата 		= ТекущаяДата();
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПользовательПоУмолчанию", ПредопределенноеЗначение("Справочник.Пользователи.ПользовательПоУмолчанию"));
	Запрос.УстановитьПараметр("ПустойПолучатель", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
	Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
	Запрос.УстановитьПараметр("ТипЗаметки", ?(ТолькоЗадачи, Перечисления.ТипыЗаметок.Задача, Перечисления.ТипыЗаметок.Напоминание));
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапросаПустой = РезультатЗапроса.Пустой();
	
	СтруктураНапоминаний.Вставить("Есть", ЛОЖЬ);
	
	Если НЕ РезультатЗапросаПустой Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СтруктураНапоминаний.Вставить("МассивНапоминаний", Новый Массив);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.ДатаПоследнегоНапоминания = ПустаяДата Тогда 
				СтруктураНапоминаний.МассивНапоминаний.Добавить(ВыборкаДетальныеЗаписи.ссылка);
				СтруктураНапоминаний.Есть = ИСТИНА;
				
			Иначе
				СледующийПериод = ВыборкаДетальныеЗаписи.ДатаПоследнегоНапоминания + ВыборкаДетальныеЗаписи.ПовторятьКаждыеЧислоЧасов * 3600;
				
				Если СледующийПериод < Дата Тогда
					СтруктураНапоминаний.МассивНапоминаний.Добавить(ВыборкаДетальныеЗаписи.ссылка);	
					СтруктураНапоминаний.Есть = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат СтруктураНапоминаний;
	
КонецФункции 

Процедура Резервировать(Знач ПараметрыРезервирования) Экспорт	
	
	АдресКаталогБазыДанных = СтрЗаменить(ПараметрыРезервирования[0], """", "");
	
	ИмяФайла 		= формат(ПараметрыРезервирования[1], "ДФ=ггММдд-ЧЧммсс");
	КаталогРезерва 	= ПараметрыРезервирования[2] + "\" + ИмяФайла;
	файлыБазыДанных = НайтиФайлы(АдресКаталогБазыДанных, "*.*");
	
	Попытка
		СоздатьКаталог(КаталогРезерва);
		
		Для Каждого файлБазыДанных из файлыБазыДанных Цикл
			Попытка
				КопироватьФайл(файлБазыДанных.ПолноеИмя, КаталогРезерва + "\" + файлБазыДанных.имя);
			Исключение
			КонецПопытки;					             	
		КонецЦикла;
		
		Если ПараметрыРезервирования[3] = Перечисления.ТипыЗадач.РезервированиеКаталогаСБазойДанныхВАрхив Тогда
			
			АдресФайла = ПараметрыРезервирования[2] + "\" + ИмяФайла + ".ZIp";
			архив = Новый ЗаписьZipФайла(АдресФайла, , ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Автоматический архив с базой данных"), МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
			архив.Добавить(КаталогРезерва + "\*.*", РежимСохраненияПутейZIP.СохранятьПолныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			архив.Записать();		
			
			УдалитьФайлы(КаталогРезерва);			
		КонецЕсли;
		
	Исключение
		Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при создании резерва") + ": " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция   СоздатьДоговор(Знач Организация, Знач КлиентПоставщик, Знач Дата, Знач ВидЦен = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.Договора.СоздатьЭлемент();
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		НовыйДоговор.ВидЦен = ВидЦен;          		
	Иначе
		
		Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
			НовыйДоговор.ВидЦен = КлиентПоставщик.ВидЦен;
			
			Если НЕ ЗначениеЗаполнено(НовыйДоговор.ВидЦен) Тогда
				
				Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Клиенты") Тогда
					НовыйДоговор.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
				Иначе
					НовыйДоговор.ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
			НовыйДоговор.ВидЦен = Организация.ВидЦен;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДоговор.ВидЦен) Тогда
			НовыйДоговор.ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
		КонецЕсли;	
	КонецЕсли;
	
	НовыйДоговор.ДатаЗаключения 	= НачалоДня(Дата);
	НовыйДоговор.КлиентПоставщик 	= КлиентПоставщик;
	НовыйДоговор.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Создан автоматически");
	НовыйДоговор.НомерДоговора 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по-умолчанию");
	НовыйДоговор.Организация 		= Организация;
	НовыйДоговор.УстанавливаетСрокОплатыВДнях = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокОплатыВДняхДляДоговоровПоУмолчанию");
	НовыйДоговор.Записать();
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции

Процедура СохранитьВФайл(Знач ПараметрыСохранения) Экспорт
	
	ТабДок = ПараметрыСохранения[0];
	АдресФайла = ПараметрыСохранения[1] + "\" + ПараметрыСохранения[2] + ".xls";
	ТабДок.Записать(АдресФайла, ТипФайлаТабличногоДокумента.XLS97);
	
КонецПроцедуры

Процедура ПерепровестиВсеДокументыВБазеДанных(Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = '00010101000000';
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений;
	ПараметрыСеанса.НеВыводитьСообщений = ИСТИНА;
	
	Попытка 
		УстановитьМонопольныйРежим(ИСТИНА);
	Исключение 	
	КонецПопытки;
	
	СписокДокументовДляПерепроведения = Новый ТаблицаЗначений;
	СписокДокументовДляПерепроведения.Колонки.Добавить("СсылкаНаДокумент");
	СписокДокументовДляПерепроведения.Колонки.Добавить("ДатаДокумента");
	
	Для Каждого ДокументМетаданных Из Метаданные.Документы Цикл
		ИмяДокумента = ДокументМетаданных.Имя;
		Если ДокументМетаданных.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ИмяДокумента = ДокументМетаданных.Имя;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ Д.Ссылка, Д.Дата КАК Дата
			|ИЗ Документ." + ИмяДокумента + " КАК Д
			|ГДЕ Д.Проведен = ИСТИНА И Д.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|УПОРЯДОЧИТЬ ПО Дата";
			
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ДокДляПерепроведения = СписокДокументовДляПерепроведения.Добавить();
				ДокДляПерепроведения.СсылкаНаДокумент = ВыборкаДетальныеЗаписи.Ссылка;
				ДокДляПерепроведения.ДатаДокумента = ВыборкаДетальныеЗаписи.Дата;
				
			КонецЦикла;		
		КонецЕсли;
	КонецЦикла;
	
	СписокДокументовДляПерепроведения.Сортировать("ДатаДокумента");
	СписокДокументовДляПерепроведения.Свернуть("СсылкаНаДокумент");
	
	Для Каждого ДокументКПерепроведению Из СписокДокументовДляПерепроведения Цикл
		ОбъектДокумент = ДокументКПерепроведению.СсылкаНаДокумент.ПолучитьОбъект();
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
	
	Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(ДатаОкончания);
	
	Попытка 
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение 	
	КонецПопытки;
	
	ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
	
КонецПроцедуры //ПерепровестиВсеДокументыВБазеДанных
