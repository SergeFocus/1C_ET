// sza160308-0414 БСП

// Проверяет, является ли текущий или указанный пользователь полноправным.
//
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы,
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт

	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();

	УстановитьПривилегированныйРежим(Истина);
	Свойства = СвойстваПроверяемогоПользователяИБ(Пользователь);
	ПользовательИБ = Свойства.ПользовательИБ;

	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;

	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Свойства.УказанТекущийПользовательИБ Тогда
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы(Истина)) Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Иначе
		Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
			Возврат Истина;
		КонецЕсли;

		Если ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить(
		"ПривилегированныйРежимУстановленПриЗапуске") = Истина Тогда
			// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
			// пользователь является полноправным, если привилегированный режим установлен.
			Возврат Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
			// Когда основные роли не указаны, тогда у неуказанного пользователя
			// есть все права (как в привилегированном режиме).
			Возврат Истина;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПользовательИБ.Имя)
		   И ПривилегированныйРежимУстановлен
		   И ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
			// Когда у неуказанного пользователя есть право Администрирование,
			// тогда привилегированный режим учитывается всегда для поддержки
			// параметра запуска UsePrivilegedMode у не клиентских приложений.
			Возврат Истина;
		КонецЕсли;

		// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
		// а роли в текущем сеансе.
		Если ПроверитьРольПолныеПрава
		   И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьРольАдминистратораСистемы
		   И НЕ РольДоступна(РольАдминистратораСистемы(Истина)) Тогда // Не заменять на РолиДоступны.
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция СвойстваПроверяемогоПользователяИБ(Пользователь)

	Свойства = Новый Структура;
	Свойства.Вставить("ТекущийПользовательИБ", ПользователиИнформационнойБазы.ТекущийПользователь());
	Свойства.Вставить("ПользовательИБ", Неопределено);

	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		Свойства.Вставить("ПользовательИБ", Пользователь);

	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		Свойства.Вставить("ПользовательИБ", Свойства.ТекущийПользовательИБ);
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Свойства.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ")));
		КонецЕсли;
	КонецЕсли;

	Если Свойства.ПользовательИБ <> Неопределено Тогда
		Свойства.Вставить("УказанТекущийПользовательИБ",
			Свойства.ПользовательИБ.УникальныйИдентификатор
				= Свойства.ТекущийПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;

	Возврат Свойства;

КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Параметры:
//  ДляПроверки - Булево - вернуть роль для проверки, а не для установки.
//                 Для базовых версий роль для установки АдминистраторСистемы,
//                 а роль для проверки может быть ПолныеПрава с правом Администрирование.
//
// Возвращаемое значение:
//  ОбъектМетаданных - Роль.
//
Функция РольАдминистратораСистемы(ДляПроверки = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;

	Если ДляПроверки
	   И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава)
	   И НЕ Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") = 0 Тогда

		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;

	Возврат РольАдминистратораСистемы;

КонецФункции

// См. одноименную функцию в общем модуле ПользователиКлиентСервер.
Функция АвторизованныйПользователь() Экспорт

	Возврат ИСТИНА; // ПользователиКлиентСервер.АвторизованныйПользователь();

КонецФункции
