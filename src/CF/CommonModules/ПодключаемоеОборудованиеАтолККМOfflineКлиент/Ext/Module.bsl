// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
// Функция осуществляет подключение устройства.
// 
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
// 
// Параметры:
//  ОбъектДрайвера                 - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     Код                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Штрихкод                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//                                     Наименование               - <Строка>
//                                                                - Сокращенное наименование товара (для печати в чеке)
//                                     НаименованиеПолное         - <Строка>
//                                                                - Полное наименование товара (для отображения на мониторе)
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     Остаток                    - <Число>
//                                                                - Остаток товара на складе кассы.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
// 
//  ЧастичнаяВыгрузка               - <Булево>
//                                  - Признак частичной выгрузки товара
// 
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры)
	
	// При частичной выгрузке нельзя делать новую выгрузку пока не произошла загрузка предыдущей.
	Если ЧастичнаяВыгрузка И
		НЕ МожноВыгружатьТовары(Параметры) Тогда
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'");
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	мРазделитель = ПолучитьРазделитель();
	Результат = ИСТИНА;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");

	Если ЧастичнаяВыгрузка = ЛОЖЬ Тогда
		Файл.ДобавитьСтроку("$$$DELETEALLWARES");
		Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
		Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
	Иначе
		Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
	КонецЕсли;

	Для Каждого Товар Из Товары Цикл
		Если ТипЗнч(Товар.Штрихкод) <> Тип("Массив") Тогда

			Строка =   Формат(Строка(Товар.Код), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")       + мРазделитель // Код (1)
			         + Формат(Строка(Товар.Штрихкод), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")  + мРазделитель // Штрих-код (2)
			         + ПодготовитьСтроку(Товар.НаименованиеПолное)                 + мРазделитель // Наименование (3)
			         + ПодготовитьСтроку(Товар.Наименование)      		           + мРазделитель // Текст для чека (4)
			         + Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена (5)
			         + Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧН=0; ЧГ=0")    + мРазделитель // Остаток (6)
			         + "0"                                                  + мРазделитель // Схема внутренней автоматической скидки (7)
			         + ?(Товар.ВесовойТовар, 1, 0)                                         // Флаги через запятую: (8)
			                                                                               // • дробное количество (весовой)
			                                                                               // • продажа
			                                                                               // • возврат
			                                                                               // • отрицательные остатки
			                                                                               // • без ввода количества
			                                                                               // • списание остатков
			                                                                               // • редактирование цены
			                                                                               // • ввод количества вручную
			         + ",1,1,0,0,0," + ?(Товар.Цена = 0, "1", "0") + ",1"   + мРазделитель
			         + ""                                                   + мРазделитель // Минимальная цена (9)
			         + ""                                                   + мРазделитель // Срок годности (10)
			         + ""                                                   + мРазделитель // Код схемы разрезов (11)
			         + ""                                                   + мРазделитель // Вариант использования разрезов: (12)
			                                                                               //  0 – полный список
			                                                                               //  1 – заданный список
			                                                                               //  2 – заданный список с остатком
			         + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки (13)
			         + Формат(?(ТипЗнч(Товар.ЕдиницаИзмерения) = Тип("Строка"), "", Товар.ЕдиницаИзмерения.Коэффициент),
			                  "ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент (14)
			         + ""                                                   + мРазделитель // Код базового товара (15)
			         + ""                                                   + мРазделитель // Код родительской группы (16)
			         + "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0» (17)
			         + "0"                                                  + мРазделитель // Номер уровня иерархического списка (18)
			         + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1» (19)
			         + ""							                        + мРазделитель // Серия номенклатуры (20)
			         + ""                                                   + мРазделитель // Сертификат (21)
			         + ""                                                   + мРазделитель // Код ККМ (22)
			         + ""                                                   + мРазделитель // Код налоговой группы (23)
			         + ""                                                   + мРазделитель // Код весов с ПЭ (24)
			         + ?(Товар.ВесовойТовар,
			             Формат(Товар.Код,
			                    "ЧН=0; ЧГ=0"), "")                          + мРазделитель // Код товара в весах ПЭ (25)
			         + ?(Товар.Свойство("Артикул"), ПодготовитьСтроку(Товар.Артикул), "") + мРазделитель // Артикул (26)
			         + ""                                                   + мРазделитель // Тип скидки/надбавки: (27)
			                                                                               //  0 – процентная скидка
			                                                                               //  1 – скидка суммой
			                                                                               //  2 – процентная надбавка
			                                                                               //  3 – надбавка суммой
			         + ""                                                   + мРазделитель // Значение товарной скидки/надбавки (28)
			         + ""                                                   + мРазделитель // Максимальная скидка, % (29)
			         + ""                                                   + мРазделитель // Код принтера чеков (30)
			         + ""                                                   + мРазделитель // Файл *.bmp с картинкой (31)
			         + ""                                                   + мРазделитель // Описание (32)
			         + "";                                                                 // Кратность количества (33)

			Файл.ДобавитьСтроку(Строка);
		Иначе

			Штрихкод = ""; Запятая = "";
			Для Каждого СтрокаМассива Из Товар.Штрихкод Цикл
				ШтрихКод = ШтрихКод + Запятая + СтрокаМассива;
				Запятая = ",";
			КонецЦикла;

			НаименованиеТовара = Товар.Наименование;

			Строка =   Формат(Товар.Код, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код
			         + ШтрихКод                                             + мРазделитель // Штрих-код
			         + ПодготовитьСтроку(Товар.НаименованиеПолное)          + мРазделитель // Наименование
			         + ПодготовитьСтроку(Товар.Наименование)                + мРазделитель // Текст для чека
			         + Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена
			         + Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧН=0; ЧГ=0")    + мРазделитель // Остаток
			         + "0"                                                  + мРазделитель // Схема внутренней автоматической скидки
			         + ?(Товар.ВесовойТовар, 1, 0)                                         // Флаги через запятую:
			                                                                               // • дробное количество (весовой)
			                                                                               // • продажа
			                                                                               // • возврат
			                                                                               // • отрицательные остатки
			                                                                               // • без ввода количества
			                                                                               // • списание остатков
			                                                                               // • редактирование цены
			                                                                               // • ввод количества вручную
			         + ",1,1,0,0,0," + ?(Товар.Цена = 0, "1", "0") + ",1"   + мРазделитель
			         + ""                                                   + мРазделитель // Минимальная цена
			         + ""                                                   + мРазделитель // Срок годности
			         + ""                                                   + мРазделитель // Код схемы разрезов
			         + ""                                                   + мРазделитель // Вариант использования разрезов:
			                                                                               //  0 – полный список
			                                                                               //  1 – заданный список
			                                                                               //  2 – заданный список с остатком
			         + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки
			         + Формат(?(ТипЗнч(Товар.ЕдиницаИзмерения) = Тип("Строка"), "", Товар.ЕдиницаИзмерения.Коэффициент),
			                  "ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент (14)
			         + ""                                                   + мРазделитель // Код базового товара
			         + ""                                                   + мРазделитель // Код родительской группы
			         + "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
			         + "0"                                                  + мРазделитель // Номер уровня иерархического списка
			         + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1»
			         + ""							                        + мРазделитель // Серия номенклатуры
			         + ""                                                   + мРазделитель // Сертификат
			         + ""                                                   + мРазделитель // Код ККМ
			         + ""                                                   + мРазделитель // Код налоговой группы
			         + ""                                                   + мРазделитель // Код весов с ПЭ
			         + ?(Товар.ВесовойТовар,
			             Формат(Товар.Код,
			                    "ЧН=0; ЧГ=0"), "")                          + мРазделитель // Код товара в весах ПЭ
			
			         + ?(Товар.Свойство("Артикул"), ПодготовитьСтроку(Товар.Артикул), "") + мРазделитель // Артикул (26)
			         + ""                                                   + мРазделитель // Тип скидки/надбавки:
			                                                                               //  0 – процентная скидка
			                                                                               //  1 – скидка суммой
			                                                                               //  2 – процентная надбавка
			                                                                               //  3 – надбавка суммой
			         + ""                                                   + мРазделитель // Значение товарной скидки/надбавки
			         + ""                                                   + мРазделитель // Максимальная скидка, %
			         + ""                                                   + мРазделитель // Код принтера чеков
			         + ""                                                   + мРазделитель // Файл *.bmp с картинкой
			         + ""                                                   + мРазделитель // Описание
			         + "";                                                                 // Кратность количества

			Файл.ДобавитьСтроку(Строка);
		КонецЕсли;
		
	КонецЦикла;

	Попытка
		Файл.Записать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.БазаТоваров));
		Результат = ЛОЖЬ;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ВыгрузитьТовары()

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
// 
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = ИСТИНА;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары 				= ВходныеПараметры[0];
		ЧастичнаяВыгрузка 	= ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры);

	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьОтчет" Тогда

		Результат = ЗагрузитьОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
											  
	// Определяет результат загрузки отчета
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		
		Результат = ОтчетЗагружен(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
											  
	// Очистить базу ККМ Offline
	ИначеЕсли Команда = "ОчиститьБазу" Тогда

		Результат = ОчиститьТоварыНаККМ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку отчета о продажах из ККМ, подключаемой в режиме Offline.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица, содержащая данные
//                                   о продажах за смену. Таблица содержит
//                                   следующие колонки:
//                                     Код        - <Число>
//                                                - Идентификатор проданного (возвращенного)
//                                                  товара.
//                                     Цена       - <Число>
//                                                - Цена за единицу товара.
//                                     Количество - <Число>
//                                                - Количество проданного (>0) или
//                                                  возвращенного (<0) товара.
//                                     Скидка     - <Число>
//                                                - Процент предоставленной скидки
//                                     Сумма      - <Число>
//                                                - Сумма позиции: >0 - продажа, <0 - возврат.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ЗагрузитьОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
    мРазделитель			= ПолучитьРазделитель();
	Результат           	= ИСТИНА;
	НеизвестнаяТранзакция 	= ЛОЖЬ;
	НомерПоследнейСмены 	= 0;

	Отчет 	= Новый Массив;
	Чеки 	= Новый Массив;
	Позиции = Новый Массив;
	
	Файл = Новый Файл(Параметры.ФайлОтчета);
	Если НЕ Файл.Существует() Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 10 Цикл
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ожидание ответа кассы...'"));
			МенеджерОборудованияКлиент.Пауза(5);
			Если Файл.Существует() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Файл.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Попытка
			Файл.Прочитать(Параметры.ФайлОтчета);
		Исключение
			ВыходныеПараметры.Добавить(999);
			ОписаниеОшибки = НСтр("ru='Не удалось прочитать файл отчета по адресу: %Адрес%'");
			ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
			Результат = ЛОЖЬ;
		КонецПопытки;
		Если Результат Тогда
			ТекущаяСтрока = Файл.ПолучитьСтроку(1);
			Если ТекущаяСтрока = "#" Тогда
				ИндексСтроки  = 4;
				ТекущаяСтрока = Файл.ПолучитьСтроку(ИндексСтроки);
				Пока Не ПустаяСтрока(ТекущаяСтрока) Цикл
					ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, мРазделитель, Символы.ПС);

					НомерТранзакцииСтр = СтрПолучитьСтроку(ТекущаяСтрока,  1);
					ТипТранзакцииСтр   = СтрПолучитьСтроку(ТекущаяСтрока,  4);
					НомерДокументаСтр  = СтрПолучитьСтроку(ТекущаяСтрока,  6);
					КодПричиныСтр      = СтрПолучитьСтроку(ТекущаяСтрока,  9);
					НомерСменыСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 14);

					Попытка
						ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
						НомерТранзакции    = Число(НомерТранзакцииСтр);
						ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
						ТипТранзакции      = Число(ТипТранзакцииСтр);
						ПолеОшибки = Нстр("ru='Номер документа (6)'");
						НомерДокумента     = Число(НомерДокументаСтр);
						ПолеОшибки = Нстр("ru='Номер смены (14)'");
						НомерСмены         = Число(НомерСменыСтр);
					Исключение
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
						Результат = ЛОЖЬ;
						Прервать;
					КонецПопытки;

					Если НомерПоследнейСмены < НомерСмены Тогда
						НомерПоследнейСмены = НомерСмены;
					КонецЕсли;

					Если ТипТранзакции =  1 Тогда
						// Регистрация без учета кода товара
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Регистрация продаж без учета кода товара не допускается'"));
						Результат = ЛОЖЬ;
						Прервать;
					ИначеЕсли ТипТранзакции = 11 Тогда
						// Регистрация с учетом кода товара
						КодСтр        = СтрПолучитьСтроку(ТекущаяСтрока,  8);
						ЦенаСтр       = СтрПолучитьСтроку(ТекущаяСтрока, 10);
						КоличествоСтр = СтрПолучитьСтроку(ТекущаяСтрока, 11);
						СуммаСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 16);
						Артикул       = СтрПолучитьСтроку(ТекущаяСтрока, 18);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Цена товара (10)'");
							Цена       = Число(ЦенаСтр);
							ПолеОшибки = Нстр("ru='Количество товара (11)'");
							Количество = Число(КоличествоСтр);
							ПолеОшибки = Нстр("ru='Сумма продажи (16)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						Врем                = Новый Структура("Код, Цена, Количество, Сумма, Артикул, НомерДокумента, НомерСмены");
						Врем.Код            = Код;
						Врем.Цена           = Цена;
						Врем.Количество     = Количество;
						Врем.Сумма          = Сумма;
						Врем.Артикул        = Артикул;
						Врем.НомерДокумента = НомерДокумента;
						Врем.НомерСмены     = НомерСмены;
						Позиции.Добавить(Врем);
					ИначеЕсли ТипТранзакции =  2 Или ТипТранзакции = 12 Тогда
						// Сторнирование
						СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
						СтруктураПоиска.НомерДокумента = НомерДокумента;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						Врем                           = НайтиСтроки(Позиции, СтруктураПоиска);
						Врем                           = Врем[Врем.Количество() - 1];
						Позиции.Удалить(Врем.ИндексВМассиве);
					ИначеЕсли ТипТранзакции =  4 Или ТипТранзакции = 14 Тогда
						// Налог
					ИначеЕсли ТипТранзакции =  5 Или ТипТранзакции = 15 Или ТипТранзакции =  7 Или ТипТранзакции = 17 Тогда
						// Скидка на позицию
					ИначеЕсли ТипТранзакции =  6 Или ТипТранзакции = 16 Или ТипТранзакции =  8 Или ТипТранзакции = 18 Тогда
						// Надбавка на позицию
					ИначеЕсли ТипТранзакции = 85 Или ТипТранзакции = 75
							  Или ТипТранзакции = 87 Или ТипТранзакции = 77 Тогда
						// Распределенная скидка
					ИначеЕсли ТипТранзакции = 86 Или ТипТранзакции = 76
							  Или ТипТранзакции = 88 Или ТипТранзакции = 78 Тогда
						// Распределенная надбавка
					ИначеЕсли ТипТранзакции = 60 Тогда
						// X-отчет
					ИначеЕсли ТипТранзакции = 63 Тогда
						// Z-отчет
					ИначеЕсли ТипТранзакции = 64 Тогда
						// Документ открытия смены
					ИначеЕсли ТипТранзакции = 61 Тогда
						// Закрытие смены
					ИначеЕсли ТипТранзакции = 62 Тогда
						// Открытие смены
					ИначеЕсли ТипТранзакции = 40 Тогда
						// Оплата с вводом суммы клиента
					ИначеЕсли ТипТранзакции = 41 Тогда
						// Оплата без ввода суммы клиента
					ИначеЕсли ТипТранзакции = 42 Тогда
						// Открытие чека
						Врем = Новый Структура("НомерДокумента, НомерСмены, ЧекЗакрыт, Скидка");
						Врем.НомерДокумента = НомерДокумента;
						Врем.НомерСмены     = НомерСмены;
						Врем.ЧекЗакрыт      = ЛОЖЬ;
						Врем.Скидка         = 0;
						Чеки.Добавить(Врем);
					ИначеЕсли ТипТранзакции = 43 Тогда
						// Распределение оплаты
					ИначеЕсли ТипТранзакции = 45 Тогда
						// Закрытие документа в ККМ
					ИначеЕсли ТипТранзакции = 49 Тогда
						// Закрытие документа по ГП
					ИначеЕсли ТипТранзакции = 50 Тогда
						// Внесение
					ИначеЕсли ТипТранзакции = 51 Тогда
						// Выплата
					ИначеЕсли ТипТранзакции = 55 Тогда
						// Закрытие чека
						СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
						СтруктураПоиска.НомерДокумента = НомерДокумента;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						ВремПозиции                    = НайтиСтроки(Позиции, СтруктураПоиска);

						СуммаПозиций                   = 0;
						Для Каждого Позиция Из ВремПозиции Цикл
							СуммаПозиций = СуммаПозиций + Позиция.Сумма;
						КонецЦикла;

						ВремЧеки = НайтиСтроки(Чеки, СтруктураПоиска)[0];
						ВремЧеки.ЧекЗакрыт = ИСТИНА;
					ИначеЕсли ТипТранзакции = 56 Тогда
						// Чек не закрыт на ККМ
						СтруктураПоиска                = Новый Структура("НомерДокумента, НомерСмены");
						СтруктураПоиска.НомерДокумента = НомерДокумента;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						Врем                           = НайтиСтроки(Позиции, СтруктураПоиска);
						Для Индекс = 1 По Врем.Количество() Цикл
							ВремСтрока                 = Врем[Врем.Количество() - Индекс];
							Позиции.Удалить(ВремСтрока.ИндексВМассиве);
						КонецЦикла;
					ИначеЕсли ТипТранзакции = 57 Тогда
						// Восстановление отложенного чека
					ИначеЕсли ТипТранзакции = 35 Или ТипТранзакции = 37 Тогда
						// Скидка на чек
					ИначеЕсли ТипТранзакции = 36 Или ТипТранзакции = 38 Тогда
						// Надбавка на чек
					ИначеЕсли ТипТранзакции = 21 Или ТипТранзакции = 23 Тогда
						// Регистрация купюр по свободной цене
					ИначеЕсли ТипТранзакции = 22 Или ТипТранзакции = 24 Тогда
						// Сторно купюр по свободной цене/из справочника
					Иначе
						ОписаниеОшибки = НСтр("ru='Обнаружена неизвестная транзакция: %ТипТранзакции%. Данные по транзакции не были загружены!'");
						ОбщегоНазначения.СообщитьПользователю(СтрЗаменить(ОписаниеОшибки, "%ТипТранзакции%", Строка(ТипТранзакции)));
						НеизвестнаяТранзакция = ИСТИНА;
					КонецЕсли;

					ИндексСтроки  = ИндексСтроки + 1;
					ТекущаяСтрока = Файл.ПолучитьСтроку(ИндексСтроки);
				КонецЦикла;

				Если НеизвестнаяТранзакция Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не все данные были загружены из отчета. Обратитесь к администратору системы!'"));
				КонецЕсли;
			ИначеЕсли ТекущаяСтрока = "@" Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Операция прервана. Отчет уже был загружен!'"));
				Результат = ЛОЖЬ;
			Иначе
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат данных или данные отсутствуют.'"));
				Результат = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл отчета по адресу: %Адрес% не обнаружен'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
		Результат = ЛОЖЬ;
	КонецЕсли;

	Если Результат Тогда
		СтруктураПоиска            = Новый Структура("ЧекЗакрыт");	
		СтруктураПоиска.ЧекЗакрыт  = ИСТИНА;
		Врем                       = НайтиСтроки(Чеки, СтруктураПоиска);
		Для Каждого Чек Из Врем Цикл
			СтруктураПоиска                = Новый Структура("НомерДокумента");
			СтруктураПоиска.НомерДокумента = Чек.НомерДокумента;
			ПозицииЧека = НайтиСтроки(Позиции, СтруктураПоиска);
			Для Каждого Позиция Из ПозицииЧека Цикл
				
				СкидкаВрем = (Позиция.Цена * Позиция.Количество) - Позиция.Сумма;
				Если Позиция.Сумма = 0  И  Позиция.Цена * Позиция.Количество > 0 Тогда
					СкидкаВрем = 100;
				ИначеЕсли Позиция.Цена * Позиция.Количество = 0 Тогда
					СкидкаВрем = 0;
				Иначе
					СкидкаВрем = Окр(СкидкаВрем / (Позиция.Цена * Позиция.Количество) * 100, 2);
				КонецЕсли;
				
				РезПозиция = Новый Структура("Код, Количество, Цена, Сумма, Скидка"
				, Позиция.Код
				, Позиция.Количество
				, Позиция.Цена
				, Позиция.Сумма
				, СкидкаВрем);
				Отчет.Добавить(РезПозиция);
			КонецЦикла;
		КонецЦикла;
		ВыходныеПараметры.Добавить(Отчет);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчет()

// Функция возвращает флаг загрузки предыдущей выгрузки
// Если результат ИСТИНА - значит можно выгружать товар поверх существующего файла
Функция МожноВыгружатьТовары(Параметры) 
	
	БазаТоваров = Новый Файл(Параметры.БазаТоваров);
	Если БазаТоваров.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Файл.Прочитать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Строка = Файл.ПолучитьСтроку(2);
		Если СтрДлина(Строка) = 1
			И Найти(Строка,"#") > 0 Тогда
			Результат = ЛОЖЬ; // нельзя если символ во второй строке "#"
		Иначе
			Результат = ИСТИНА; // можно если символ во второй строке не "#" (как правило если загрузка произошла там стоит "@")
		КонецЕсли;
	Иначе
		Результат = ИСТИНА; // можно если файла товаров нет
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает массив элементов найденных в массиве структур по параметрам отбора. Параметры отбора являют собой структуру.
// Действует аналогично методу НайтиСтроки таблицы значений
Функция НайтиСтроки(МассивПоиска, ПараметрыОтбора)
	Результат = Новый Массив;
	Для й = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[й];
		ПолноеСовпадение = ИСТИНА;
		
		Для Каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = ЛОЖЬ;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", й);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция осуществляет отключение устройства.
// 
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	Возврат Результат;

КонецФункции

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ОтчетЗагружен(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 

	Результат = ИСТИНА;

	Файл = Новый Файл(Параметры.ФайлОтчета);
	Если Файл.Существует() Тогда
		Попытка
			Документ = Новый ТекстовыйДокумент();
			Документ.Прочитать(Параметры.ФайлОтчета, КодировкаТекста.ANSI);
			Документ.ЗаменитьСтроку(1, "@");
			Документ.Записать(Параметры.ФайлОтчета, КодировкаТекста.ANSI);
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетЗагружен()

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
// 
Функция ОчиститьТоварыНаККМ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 

	Результат = ИСТИНА;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");

	Файл.ДобавитьСтроку("$$$DELETEALLWARES");
	Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
	Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");

	Попытка
		Файл.Записать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		Результат = ЛОЖЬ;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчет()

// Подготавливает строку для выгрузки
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, 100);
		 
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= ИСТИНА;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = ЛОЖЬ;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
// 
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
// 
Процедура ПолучитьКаталогИИмяФайлаТО(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Функция возвращает разделитель полей таблицы содержащейся в файле.
Функция ПолучитьРазделитель();
	
	Возврат ";";
	
КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена
// 
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	
	Перем ТекПараметр;
	Результат = ИСТИНА;
	Каталог = Неопределено;
	ТекстОшибки = "";

	Параметры.Свойство("БазаТоваров", ТекПараметр);
	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Результат = ЛОЖЬ;
		ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
	КонецЕсли;

	Параметры.Свойство("ФайлОтчета", ТекПараметр);
	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Результат = ЛОЖЬ;
		ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
	КонецЕсли;

	Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
		Параметры.Свойство("ФлагВыгрузки", ТекПараметр);
		ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
		Файл = Новый Файл(Каталог);
		Если НЕ Файл.Существует() Тогда
			Результат = ЛОЖЬ;
			ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
			ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
		КонецЕсли;
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



