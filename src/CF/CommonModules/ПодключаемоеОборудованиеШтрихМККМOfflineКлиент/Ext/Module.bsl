// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
// Функция осуществляет подключение устройства.
// 
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
// 
// Параметры:
//  ОбъектДрайвера                 - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     Код                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Штрихкод                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//                                     Наименование               - <Строка>
//                                                                - Сокращенное наименование товара (для печати в чеке)
//                                     НаименованиеПолное         - <Строка>
//                                                                - Полное наименование товара (для отображения на мониторе)
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     Остаток                    - <Число>
//                                                                - Остаток товара на складе кассы.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
// 
//  ЧастичнаяВыгрузка               - <Булево>
//                                  - Признак частичной выгрузки товара
// 
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры) 
	
	// При частичной выгрузке нельзя делать новую выгрузку пока не произошла загрузка предыдущей.
	Если ЧастичнаяВыгрузка И
		НЕ МожноВыгружатьТовары(Параметры) Тогда
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Нельзя сделать выгрузку. Товары предыдущей выгрузки еще не были получены ККМ-offline'");
		ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Разделитель = ПолучитьРазделитель();
	Результат = ИСТИНА;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");

	Если ЧастичнаяВыгрузка Тогда
		Файл.ДобавитьСтроку("$$$ADD");
	Иначе
		Файл.ДобавитьСтроку("$$$CLR");
	КонецЕсли;

	Для Каждого Товар Из Товары Цикл
		
		Если ТипЗнч(Товар.Штрихкод) <> Тип("Массив") Тогда
			Строка = Формат(Товар.Код, "ЧЦ=13; ЧДЦ=0; ЧГ=0")   + Разделитель + // Поле 1
			Формат(Товар.Штрихкод, "ЧЦ=13; ЧДЦ=0; ЧГ=0")       + Разделитель + // Поле 2
			ПодготовитьСтроку(Товар.НаименованиеПолное)        + Разделитель + // Поле 3
			ПодготовитьСтроку(Товар.Наименование)              + Разделитель + // Поле 4
			Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")    + Разделитель + // Поле 5
			Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0") + Разделитель + // Поле 6
			"0"                                                + Разделитель + // Поле 7
			?(Товар.ВесовойТовар, "1", "0")                    + Разделитель + // Поле 8
			"0"                                                + Разделитель + // Поле 9
			"0"                                                + Разделитель + // Поле 10
			"0"                                                + Разделитель + // Поле 11
			?(Товар.Свойство("Артикул"), ПодготовитьСтроку(Товар.Артикул), "") + Разделитель + // Поле 12
			"0"                                                + Разделитель + // Поле 13
			"0"                                                + Разделитель + // Поле 14
			"0"                                                + Разделитель + // Поле 15
			"0"                                                + Разделитель + // Поле 16
			"1";                                                               // Поле 17
			Файл.ДобавитьСтроку(Строка);
		Иначе
			Строка = Формат(Товар.Код, "ЧЦ=13; ЧДЦ=0; ЧГ=0") + Разделитель +  // Поле 1
			Лев(?(Товар.Штрихкод.Количество() = 0, "", Товар.Штрихкод[0]), 13) + Разделитель + // Поле 2
			ПодготовитьСтроку(Товар.НаименованиеПолное)      + Разделитель + // Поле 3
			ПодготовитьСтроку(Товар.Наименование)            + Разделитель + // Поле 4
			Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0")  + Разделитель + // Поле 5
			Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧГ=0")      + Разделитель + // Поле 6
			"0"                                              + Разделитель + // Поле 7
			?(Товар.ВесовойТовар, "1", "0")                  + Разделитель + // Поле 8
			"0"                                              + Разделитель + // Поле 9
			"0"                                              + Разделитель + // Поле 10
			"0"                                              + Разделитель + // Поле 11
			?(Товар.Свойство("Артикул"), ПодготовитьСтроку(Товар.Артикул), "") + Разделитель + // Поле 12
			"0"                                              + Разделитель + // Поле 13
			"0"                                              + Разделитель + // Поле 14
			"0"                                              + Разделитель + // Поле 15
			"0"                                              + Разделитель + // Поле 16
			"1";                                                             // Поле 17
			Файл.ДобавитьСтроку(Строка);

			// Загружаем только дополнительные штрихкоды
			Счетчик = 0;
			Для Каждого ШтрихКод Из Товар.Штрихкод Цикл
				// Пропускаем первый штрихкод
				Счетчик = Счетчик + 1;
				Если Счетчик = 1 Тогда
					Продолжить;
				КонецЕсли;

				Строка ="# "+Формат(Товар.Код, "ЧЦ=13; ЧДЦ=0; ЧГ=0")                + Разделитель +
									Лев(ШтрихКод, 13)                               + Разделитель +
									СокрЛП(Товар.НаименованиеПолное)                + Разделитель +
									СокрЛП(Товар.Наименование)	                    + Разделитель +
									Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧГ=0") + Разделитель +// Цена
									""                                              + Разделитель +
									""                                              + Разделитель +
									""                                              + Разделитель +
									""                                              + Разделитель +
									?(ТипЗнч(Товар.ЕдиницаИзмерения) = Тип("Строка"), "", Товар.ЕдиницаИзмерения.Коэффициент);
				Файл.ДобавитьСтроку(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Попытка
		Файл.Записать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Не удалось записать файл товаров по адресу: %Адрес%'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.БазаТоваров));
		Результат = ЛОЖЬ;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
// 
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = ИСТИНА;
	ВыходныеПараметры = Новый Массив();

	// Выгрузка товаров в ККМ Offline
	Если Команда = "ВыгрузитьТовары" Тогда
		Товары            = ВходныеПараметры[0];
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, Товары, ЧастичнаяВыгрузка, ВыходныеПараметры);

	// Загрузка данных по продажам (отчета) из ККМ Offline
	ИначеЕсли Команда = "ЗагрузитьОтчет" ИЛИ Команда = "ЗагрузитьОтчет" Тогда
		Результат = ЗагрузитьОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Определяет результат загрузки отчета
	ИначеЕсли Команда = "ОтчетЗагружен" Тогда
		Результат = ОтчетЗагружен(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Очистить базу ККМ Offline
	ИначеЕсли Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыНаККМ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);

		Результат = ЛОЖЬ;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку отчета о продажах из ККМ, подключаемой в режиме Offline.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица, содержащая данные
//                                   о продажах за смену. Таблица содержит
//                                   следующие колонки:
//                                     Код        - <Число>
//                                                - Идентификатор проданного (возвращенного)
//                                                  товара.
//                                     Цена       - <Число>
//                                                - Цена за единицу товара.
//                                     Количество - <Число>
//                                                - Количество проданного (>0) или
//                                                  возвращенного (<0) товара.
//                                     Скидка     - <Число>
//                                                - Процент предоставленной скидки
//                                     Сумма      - <Число>
//                                                - Сумма позиции: >0 - продажа, <0 - возврат.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ЗагрузитьОтчет(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	
	Результат   = ИСТИНА;
	НеизвестнаяТранзакция = ЛОЖЬ;
	
	Отчет = Новый Массив;
	Чеки  = Новый Массив;
	
	Файл = Новый Файл(Параметры.ФайлОтчета);
	Если НЕ Файл.Существует() Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 10 Цикл
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ожидание ответа кассы...'"));
			МенеджерОборудованияКлиент.Пауза(5);
			Если Файл.Существует() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Файл.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Попытка
			Файл.Прочитать(Параметры.ФайлОтчета);
		Исключение
			ВыходныеПараметры.Добавить(999);
			ОписаниеОшибки = НСтр("ru='Не удалось прочитать файл отчета по адресу: %Адрес%'");
			ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
			Результат = ЛОЖЬ;
		КонецПопытки;
		Если Результат Тогда
			Строка = Файл.ПолучитьСтроку(1);
			Если Строка = "#" Тогда
				Индекс  = 4;
				Строка = Файл.ПолучитьСтроку(Индекс);
				
				Пока ИСТИНА Цикл
					
					Строка = Файл.ПолучитьСтроку(Индекс);
					
					Если Строка = "#" Тогда
						Индекс = Индекс + 3;
						Строка =Файл.ПолучитьСтроку(Индекс);
					КонецЕсли;
					
					Индекс = Индекс + 1;
					Если ПустаяСтрока(Строка) Тогда
						Прервать;
					КонецЕсли;
					Строка             = СтрЗаменить(Строка, ";", Символы.ПС);
					НомерТранзакцииСтр = СтрПолучитьСтроку(Строка, 1);
					ДатаТранзакцииСтр  = СтрПолучитьСтроку(Строка, 2);
					ВремяТранзакцииСтр = СтрПолучитьСтроку(Строка, 3);
					ДатаТранзакцииСтр  = СтрЗаменить(ДатаТранзакцииСтр,  ".", Символы.ПС);
					ВремяТранзакцииСтр = СтрЗаменить(ВремяТранзакцииСтр, ":", Символы.ПС);
					ДеньСтр            = СтрПолучитьСтроку(ДатаТранзакцииСтр, 1);
					МесяцСтр           = СтрПолучитьСтроку(ДатаТранзакцииСтр, 2);
					ГодСтр             = СтрПолучитьСтроку(ДатаТранзакцииСтр, 3);
					ЧасСтр             = СтрПолучитьСтроку(ВремяТранзакцииСтр, 1);
					МинутаСтр          = СтрПолучитьСтроку(ВремяТранзакцииСтр, 2);
					СекундаСтр         = СтрПолучитьСтроку(ВремяТранзакцииСтр, 3);
					ТипТранзакцииСтр   = СтрПолучитьСтроку(Строка, 4);
					НомерККМСтр        = СтрПолучитьСтроку(Строка, 5);
					НомерЧекаСтр       = СтрПолучитьСтроку(Строка, 6);
					КодКассираСтр      = СтрПолучитьСтроку(Строка, 7);
					Попытка
						ПолеОшибки = Нстр("ru='Номер транзакции (1)'");
						НомерТранзакции = Число(НомерТранзакцииСтр);
						ПолеОшибки = Нстр("ru='Дата транзакции (2,3)'");
						ДатаТранзакции  = Дата(Число(ГодСтр), Число(МесяцСтр), Число(ДеньСтр),
						                       Число(ЧасСтр), Число(МинутаСтр), Число(СекундаСтр));
						ПолеОшибки = Нстр("ru='Тип транзакции (4)'");
						ТипТранзакции   = Число(ТипТранзакцииСтр);
						ПолеОшибки = Нстр("ru='Номер ККМ (5)'");
						НомерККМ        = Число(НомерККМСтр);
						ПолеОшибки = Нстр("ru='Номер чека (6)'");
						НомерЧека       = Число(НомерЧекаСтр);
					Исключение
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно распознать поле:'") + Символы.НПП + ПолеОшибки);
						Результат = ЛОЖЬ;
						Прервать;
					КонецПопытки;
					
					Если ТипТранзакции = 1 Тогда
						// Регистрация без учета кода товара
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Регистрация продаж без учета кода товара не допускается'"));
						Результат = ЛОЖЬ;
						Прервать;
						
					ИначеЕсли ТипТранзакции = 11 Тогда
						// Продажа
						КодСтр        = СтрПолучитьСтроку(Строка, 8);
						СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
						ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
						КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
						СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Секция (9)'");
							Секция     = Число(СекцияСтр);
							ПолеОшибки = Нстр("ru='Цена товара (10)'");
							Цена       = Число(ЦенаСтр);
							ПолеОшибки = Нстр("ru='Количество товара (11)'");
							Количество = Число(КоличествоСтр);
							ПолеОшибки = Нстр("ru='Сумма (12)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно распознать поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						Товар                 = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
						Товар.Код             = Код;
						Товар.Количество      = Количество;
						Товар.Цена            = Цена;
						Товар.Сумма           = Сумма;
						Товар.Секция          = Секция;
						Товар.НомерЧека       = НомерЧека;
						Товар.НомерТранзакции = НомерТранзакции;
						Чеки.Добавить(Товар);
						
					ИначеЕсли ТипТранзакции = 2 Тогда
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Ошибка сторно'"));
						Результат = ЛОЖЬ;
						Прервать;
							
					ИначеЕсли ТипТранзакции = 12 Тогда
						// Сторно
						КодСтр        = СтрПолучитьСтроку(Строка, 8);
						СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
						ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
						КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
						СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Секция (9)'");
							Секция     = Число(СекцияСтр);
							ПолеОшибки = Нстр("ru='Цена товара (10)'");
							Цена       = Число(ЦенаСтр);
							ПолеОшибки = Нстр("ru='Количество товара (11)'");
							Количество = Число(КоличествоСтр);
							ПолеОшибки = Нстр("ru='Сумма (12)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска            = Новый Структура("Код, Цена, Секция, НомерЧека");
						СтруктураПоиска.Код        = Код;
						СтруктураПоиска.Цена       = Цена;
						СтруктураПоиска.Секция     = Секция;
						СтруктураПоиска.НомерЧека  = НомерЧека;
						Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
						Если Товар.Количество() > 0 Тогда
							НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
							Товар = Чеки[НомерЭлемента];
							Товар.Количество = Товар.Количество + Количество;
							Товар.Сумма      = Товар.Сумма + Сумма;
							Если Товар.Количество = 0 Или Товар.Сумма = 0 Тогда
								Чеки.Удалить(НомерЭлемента);
							КонецЕсли;
						Иначе
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Ошибка сторно'"));
							Результат = ЛОЖЬ;
							Прервать;
						КонецЕсли;
						
					ИначеЕсли ТипТранзакции = 3 Или ТипТранзакции = 4 Тогда
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить(НСтр("ru='Ошибка возврата'"));
						Результат = ЛОЖЬ;
						Прервать;
						
					ИначеЕсли ТипТранзакции = 13 Или ТипТранзакции = 14 Тогда
						// Возврат
						КодСтр        = СтрПолучитьСтроку(Строка, 8);
						СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
						ЦенаСтр       = СтрПолучитьСтроку(Строка, 10);
						КоличествоСтр = СтрПолучитьСтроку(Строка, 11);
						СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Секция (9)'");
							Секция     = Число(СекцияСтр);
							ПолеОшибки = Нстр("ru='Цена товара (10)'");
							Цена       = Число(ЦенаСтр);
							ПолеОшибки = Нстр("ru='Количество товара (11)'");
							Количество = Число(КоличествоСтр);
							ПолеОшибки = Нстр("ru='Сумма (12)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						Товар                 = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
						Товар.Код             = Код;
						Товар.Количество      = Количество;
						Товар.Цена            = Цена;
						Товар.Сумма           = Сумма;
						Товар.Секция          = Секция;
						Товар.НомерЧека       = НомерЧека;
						Товар.НомерТранзакции = НомерТранзакции;
						Чеки.Добавить(Товар);
						
					ИначеЕсли ТипТранзакции = 24 Тогда
						// Регистрация единицы измерения
					ИначеЕсли ТипТранзакции = 30 Тогда
						// Редактирование цены
					ИначеЕсли ТипТранзакции = 15 Или ТипТранзакции = 17 Тогда
						// Итоговая скидка на позицию
						КодСтр        = СтрПолучитьСтроку(Строка, 8);
						СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
						СкидкаСтр     = СтрПолучитьСтроку(Строка, 11);
						СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Секция (9)'");
							Секция     = Число(СекцияСтр);
							ПолеОшибки = Нстр("ru='Скидка (11)'");
							Скидка     = Число(СкидкаСтр);
							ПолеОшибки = Нстр("ru='Сумма (12)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска            = Новый Структура("Код, Секция, НомерЧека");
						СтруктураПоиска.Код        = Код;
						СтруктураПоиска.Секция     = Секция;
						СтруктураПоиска.НомерЧека  = НомерЧека;
						Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
						Если Товар.Количество() > 0 Тогда
							НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
							Товар = Чеки[НомерЭлемента];
							Если Товар.Сумма > 0 Тогда
								Товар.Сумма = Товар.Сумма - Макс(Сумма, -Сумма);
							Иначе
								Товар.Сумма = Товар.Сумма + Макс(Сумма, -Сумма);
							КонецЕсли;
						Иначе
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Ошибка итоговой скидки на позицию'"));
							Результат = ЛОЖЬ;
							Прервать;
						КонецЕсли;
						
					ИначеЕсли ТипТранзакции = 16 Или ТипТранзакции = 18 Тогда
						// Итоговая надбавка на позицию
						КодСтр        = СтрПолучитьСтроку(Строка, 8);
						СекцияСтр     = СтрПолучитьСтроку(Строка, 9);
						НадбавкаСтр   = СтрПолучитьСтроку(Строка, 11);
						СуммаСтр      = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Код товара (8)'");
							Код        = Число(КодСтр);
							ПолеОшибки = Нстр("ru='Секция (9)'");
							Секция     = Число(СекцияСтр);
							ПолеОшибки = Нстр("ru='Надбавка (11)'");
							Надбавка   = Число(НадбавкаСтр);
							ПолеОшибки = Нстр("ru='Сумма (12)'");
							Сумма      = Число(СуммаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска            = Новый Структура("Код, Секция, НомерЧека");
						СтруктураПоиска.Код        = Код;
						СтруктураПоиска.Секция     = Секция;
						СтруктураПоиска.НомерЧека  = НомерЧека;
						Товар                      = НайтиСтроки(Чеки, СтруктураПоиска);
						Если Товар.Количество() > 0 Тогда
							НомерЭлемента = Товар[Товар.Количество() - 1].ИндексВМассиве;
							Товар = Чеки[НомерЭлемента];
							Если Товар.Сумма > 0 Тогда
								Товар.Сумма = Товар.Сумма + Макс(Сумма, -Сумма);
							Иначе
								Товар.Сумма = Товар.Сумма - Макс(Сумма, -Сумма);
							КонецЕсли;
						Иначе
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Ошибка итоговой надбавки на позицию'"));
							Результат = ЛОЖЬ;
							Прервать;
						КонецЕсли;
						
					ИначеЕсли ТипТранзакции = 70 Или ТипТранзакции = 71 Тогда
						// Детализация скидки
					ИначеЕсли ТипТранзакции = 40 Тогда
						// Оплата
					ИначеЕсли ТипТранзакции = 50 Тогда
						// Внесение
					ИначеЕсли ТипТранзакции = 51 Тогда
						// Выплата
					ИначеЕсли ТипТранзакции = 55 Тогда
						// Закрытие чека
					ИначеЕсли ТипТранзакции = 56 Тогда
						// Отмена чека
						СтруктураПоиска           = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека = НомерЧека;
						Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
						КоличествоСтрок           = Товары.Количество();
						Для УдалСтрока = 1 По КоличествоСтрок Цикл
							Чеки.Удалить(Товары[КоличествоСтрок - УдалСтрока].ИндексВМассиве);
						КонецЦикла;
					ИначеЕсли ТипТранзакции = 58 Тогда
						// Отложенный чек
					ИначеЕсли ТипТранзакции = 59 Тогда
						// Продолжение отложенного чека
					ИначеЕсли ТипТранзакции = 64 Тогда
						// Печать товарного чека
					ИначеЕсли ТипТранзакции = 65 Тогда
						// Открыть денежный ящик
					ИначеЕсли ТипТранзакции = 66 Тогда
						// Просмотр товара
					ИначеЕсли ТипТранзакции = 67 Тогда
						// Просмотр дисконтной карты
					ИначеЕсли ТипТранзакции = 80 Тогда
						// Возврат по номеру чека
						ТранзакцияПозицииСтр      = СтрПолучитьСтроку(Строка, 11);
						НомерВозвращаемогоЧекаСтр = СтрПолучитьСтроку(Строка, 12);
						Попытка
							ПолеОшибки = Нстр("ru='Транзакция позиции (11)'");
							ТранзакцияПозиции      = Число(ТранзакцияПозицииСтр);
							ПолеОшибки = Нстр("ru='Номер возвращаемого чека (12)'");
							НомерВозвращаемогоЧека = Число(НомерВозвращаемогоЧекаСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска                 = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека       = НомерВозвращаемогоЧека;
						Врем                            = НайтиСтроки(Чеки, СтруктураПоиска);
						КоличествоСтрок                 = Врем.Количество() - 1;
						Если КоличествоСтрок >= 0 Тогда
							Для УдалСтрока = 0 По КоличествоСтрок Цикл
								Товар = Новый Структура("Код, Количество, Цена, Сумма, Секция, НомерЧека, НомерТранзакции");
								Товар.Код             = Врем[УдалСтрока].Код;
								Товар.Количество      = -Врем[УдалСтрока].Количество;
								Товар.Цена            = Врем[УдалСтрока].Цена;
								Товар.Сумма           = -Врем[УдалСтрока].Сумма;
								Товар.Секция          = Врем[УдалСтрока].Секция;
								Товар.НомерЧека       = НомерЧека;
								Товар.НомерТранзакции = НомерТранзакции;
								Чеки.Добавить(Товар);
							КонецЦикла;
						Иначе
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Ошибка возврата по номеру чека'"));
							Результат = ЛОЖЬ;
							Прервать;
						КонецЕсли;
						
					ИначеЕсли ТипТранзакции = 35 Тогда
						// Скидка суммой на чек
						СуммаСкидкиСтр = СтрПолучитьСтроку(Строка, 11);
						Попытка
							ПолеОшибки  = Нстр("ru='Сумма скидки (11)'");
							СуммаСкидки = Число(СуммаСкидкиСтр);
							СуммаСкидки = Макс(СуммаСкидки, -СуммаСкидки);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						
						СтруктураПоиска           = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека = НомерЧека;
						Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
						СуммаЧека                 = 0;
						
						Для Каждого Товар Из Товары Цикл
							СуммаЧека = СуммаЧека + Чеки[Товар.ИндексВМассиве].Сумма;
						КонецЦикла;
						
						ПроцентСкидки = СуммаСкидки / СуммаЧека * 100;
						Для Каждого Товар Из Товары Цикл
							Если Товар.ИндексВМассиве = Товары.Количество() - 1 Тогда
								ВремСкидка = СуммаСкидки;
							Иначе
								ВремСкидка = Окр(Чеки[Товар.ИндексВМассиве].Сумма / 100 * ПроцентСкидки, 2);
								СуммаСкидки = СуммаСкидки - ВремСкидка;
							КонецЕсли;
							Чеки[Товар.ИндексВМассиве].Сумма = Чеки[Товар.ИндексВМассиве].Сумма - ВремСкидка; 
						КонецЦикла;
						              
					ИначеЕсли ТипТранзакции = 36 Тогда
						// Надбавка суммой на чек
						СуммаНадбавкиСтр = СтрПолучитьСтроку(Строка, 11);
						Попытка
							ПолеОшибки    = Нстр("ru='Сумма надбавки (11)'");
							СуммаНадбавки = Число(СуммаНадбавкиСтр);
							СуммаНадбавки = Макс(СуммаНадбавки, -СуммаНадбавки);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						
						СтруктураПоиска           = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека = НомерЧека;
						Товары                    = НайтиСтроки(Чеки, СтруктураПоиска);
						СуммаЧека                 = 0;
						
						Для Каждого Товар Из Товары Цикл
							СуммаЧека = СуммаЧека + Чеки[Товар.ИндексВМассиве].Сумма;
						КонецЦикла;
						
						ПроцентНадбавки = СуммаНадбавки / СуммаЧека * 100;
						Для Каждого Товар Из Товары Цикл
							Если Товар.ИндексВМассиве = Товары.Количество() - 1 Тогда
								ВремНадбавка = СуммаНадбавки;
							Иначе
								ВремНадбавка  = Окр(Чеки[Товар.ИндексВМассиве].Сумма / 100 * ПроцентНадбавки, 2);
								СуммаНадбавки = СуммаНадбавки - ВремНадбавка;
							КонецЕсли;
							Чеки[Товар.ИндексВМассиве].Сумма = Чеки[Товар.ИндексВМассиве].Сумма + ВремНадбавка; 
						КонецЦикла;
						
					ИначеЕсли ТипТранзакции = 37 Тогда
						// Скидка в процентах на чек
						ПроцентСкидкиСтр = СтрПолучитьСтроку(Строка, 11);
						Попытка
							ПолеОшибки = Нстр("ru='Процент скидки (11)'");
							ПроцентСкидки = Число(ПроцентСкидкиСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска           = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека = НомерЧека;
						Товар                     = НайтиСтроки(Чеки, СтруктураПоиска);
						Для Каждого Врем Из Товар Цикл
							Чеки[Врем.ИндексВМассиве].Сумма = Чеки[Врем.ИндексВМассиве].Сумма * (100 - ПроцентСкидки) / 100;
						КонецЦикла;
						
					ИначеЕсли ТипТранзакции = 38 Тогда
						// Надбавка в процентах на чек
						ПроцентНадбавкиСтр = СтрПолучитьСтроку(Строка, 11);
						Попытка
							ПолеОшибки = Нстр("ru='Процент надбавки (11)'");
							ПроцентНадбавки = Число(ПроцентНадбавкиСтр);
						Исключение
							ВыходныеПараметры.Добавить(999);
							ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат файла. Невозможно преобразовать к числу поле:'") + Символы.НПП + ПолеОшибки);
							Результат = ЛОЖЬ;
							Прервать;
						КонецПопытки;
						СтруктураПоиска           = Новый Структура("НомерЧека");
						СтруктураПоиска.НомерЧека = НомерЧека;
						Товар                     = НайтиСтроки(Чеки, СтруктураПоиска);
						Для Каждого Врем Из Товар Цикл
							Чеки[Врем.ИндексВМассиве].Сумма = Чеки[Врем.ИндексВМассиве].Сумма * (100 + ПроцентНадбавки) / 100;
						КонецЦикла;
					ИначеЕсли ТипТранзакции = 60 Или ТипТранзакции = 61 Или ТипТранзакции = 62 Или ТипТранзакции = 63 Тогда
						// Отчеты
					ИначеЕсли ТипТранзакции = 75 Тогда
						// Налоги
					ИначеЕсли ТипТранзакции = 90 Или ТипТранзакции = 91 Тогда
						// Информация о продавцах
					ИначеЕсли ТипТранзакции = 150 Или ТипТранзакции = 151 Или ТипТранзакции = 152 Или ТипТранзакции = 153 Или ТипТранзакции = 155 Тогда				
						// Запуск программы, Оплата в платежной системе, Возврат в платежной системе, Отмена в платежной системе, Авторизация
					ИначеЕсли ТипТранзакции = 140 Тогда
						// Параметры безналичной оплаты
					Иначе
						ОписаниеОшибки = НСтр("ru='Обнаружена неизвестная транзакция: %ТипТранзакции%. Данные по транзакции не были загружены!'");
						ОбщегоНазначения.СообщитьПользователю(СтрЗаменить(ОписаниеОшибки, "%ТипТранзакции%", Строка(ТипТранзакции)));
						НеизвестнаяТранзакция = ИСТИНА;
						Продолжить; // Неизвестная транзакция (продолжаем перебор)
					КонецЕсли;
				КонецЦикла;
				
				Если НеизвестнаяТранзакция Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не все данные были загружены из отчета. Обратитесь к администратору системы!'"));
				КонецЕсли;
				
			ИначеЕсли Строка = "@" Тогда
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Операция прервана. Отчет уже был загружен!'"));
				Результат = ЛОЖЬ;
			Иначе
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Неверный формат данных или данные отсутствуют.'"));
				Результат = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВыходныеПараметры.Добавить(999);
		ОписаниеОшибки = НСтр("ru='Файл отчета по адресу: %Адрес% не обнаружен'");
		ВыходныеПараметры.Добавить(СтрЗаменить(ОписаниеОшибки, "%Адрес%", Параметры.ФайлОтчета));
		Результат = ЛОЖЬ;
	КонецЕсли;

	Для Каждого текСтрока Из Чеки Цикл
		текСтрока.Вставить("Скидка", 0);
	КонецЦикла;
	ВыходныеПараметры.Добавить(Чеки);

	Возврат Результат;

КонецФункции

// Функция возвращает флаг загрузки предыдущей выгрузки
// Если результат ИСТИНА - значит можно выгружать товар поверх существующего файла
Функция МожноВыгружатьТовары(Параметры) 
	
	БазаТоваров = Новый Файл(Параметры.БазаТоваров);
	Если БазаТоваров.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Файл.Прочитать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Строка = Файл.ПолучитьСтроку(2);
		Если СтрДлина(Строка) = 1
			И Найти(Строка,"#") > 0 Тогда
			Результат = ЛОЖЬ; // нельзя если символ во второй строке "#"
		Иначе
			Результат = ИСТИНА; // можно если символ во второй строке не "#" (как правило если загрузка произошла там стоит "@")
		КонецЕсли;
	Иначе
		Результат = ИСТИНА; // можно если файла товаров нет
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает массив элементов найденных в массиве структур по параметрам отбора. Параметры отбора являют собой структуру.
// Действует аналогично методу НайтиСтроки таблицы значений
Функция НайтиСтроки(МассивПоиска, ПараметрыОтбора)
	Результат = Новый Массив;
	Для й = 0 По МассивПоиска.Количество()-1 Цикл
		
		ЭлементМассива = МассивПоиска[й];
		ПолноеСовпадение = ИСТИНА;
		
		Для Каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			
			Если ЭлементМассива.Свойство(ЭлементОтбора.Ключ) 
				И НЕ ЭлементОтбора.Значение = ЭлементМассива[ЭлементОтбора.Ключ] Тогда
				ПолноеСовпадение = ЛОЖЬ;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолноеСовпадение Тогда
			ЭлементМассива.Вставить("ИндексВМассиве", й);
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция осуществляет отключение устройства.
// 
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	Возврат Результат;

КонецФункции

// Функция вызывается после того, как был загружен и обработан отчет о продажах.
// 
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
// 
Функция ОтчетЗагружен(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 

	Результат = ИСТИНА;

	Файл = Новый Файл(Параметры.ФайлОтчета);
	Если Файл.Существует() Тогда
		Попытка
			Документ = Новый ТекстовыйДокумент();
			Документ.Прочитать(Параметры.ФайлОтчета, КодировкаТекста.ANSI);
			
			Индекс  = 1;
			
			Пока ИСТИНА Цикл
				
				Строка = Документ.ПолучитьСтроку(Индекс);
				Если ПустаяСтрока(Строка) Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка = "#" Тогда
					Документ.ЗаменитьСтроку(Индекс, "@");
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			Документ.Записать(Параметры.ФайлОтчета, КодировкаТекста.ANSI);
			
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
// 
Функция ОчиститьТоварыНаККМ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 

	Результат = ИСТИНА;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");

	Файл.ДобавитьСтроку("$$$CLR");

	Попытка
		Файл.Записать(Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		Результат = ЛОЖЬ;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Подготавливает строку для выгрузки
Функция ПодготовитьСтроку(Знач ИсходнаяСтрока);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), ПолучитьРазделитель(), " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, 100);
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат      		= ИСТИНА;
	ВыходныеПараметры 	= Новый Массив();
	ОбъектДрайвера 		= Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
	 	ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.'"));
		Результат = ЛОЖЬ;
	Иначе
		ОбъектДрайвера = Новый Структура("Параметры", Параметры);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
// 
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
// 
Процедура ПолучитьКаталогИИмяФайлаТО(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Функция возвращает разделитель полей таблицы содержащейся в файле.
Функция ПолучитьРазделитель();
	
	Возврат ";";
	
КонецФункции

// Функция осуществляет проверку путей по которым хранятся файлы обмена
// 
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) 
	Перем ТекПараметр;
	Результат = ИСТИНА;
	Каталог = Неопределено;
	ТекстОшибки = "";

	Параметры.Свойство("БазаТоваров", ТекПараметр);
	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Результат = ЛОЖЬ;
		ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
	КонецЕсли;

	Параметры.Свойство("ФайлОтчета", ТекПараметр);
	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		Результат = ЛОЖЬ;
		ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
		ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
	КонецЕсли;

	Если НЕ ПустаяСтрока(Параметры.ФлагВыгрузки) Тогда
		Параметры.Свойство("ФлагВыгрузки", ТекПараметр);
		ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
		Файл = Новый Файл(Каталог);
		Если НЕ Файл.Существует() Тогда
			Результат = ЛОЖЬ;
			ТекстОшибки1 = НСтр("ru='Каталог ""%Каталог%"" не существует.'")+Символы.ПС;
			ТекстОшибки = ТекстОшибки + СтрЗаменить(ТекстОшибки1, "%Каталог%", Каталог);
		КонецЕсли;
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ВыходныеПараметры.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции



