// sza160115-0307
// sza151128-0240 рк
// sza151108-1814 
// sza150720-2340 
// sza150624-1758 
// sza150511-1435 
// sza150429-1807 
// sza150424-0113 
// sza150324-0316 языки
// sza150213-0004 
// sza150109-0210 
// sza141203-0351
// sza141130-1643 
// sza141106-1328 : 
// sza140914-1850 
// sza140913-2314
// sza140902-1631 ВывестиНаименованияНаДругомЯзыке
// sza140830-1635
// sza140710-2148  локац
// sza140701-1629  
// sza140613-1357 : 
// sza131003-1330 : 
Функция   ВывестиНаименованияНаДругомЯзыке() Экспорт	
	Возврат ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА); // И НЕ ОбщийМодульСервисСервер.ТекущийЯзыкРусский();	
КонецФункции // ВывестиНаименованияНаДругомЯзыке

&НаСервере
Функция   ВыполнитьПодстановкуСвоихЗначений(Знач ПараметрОбластиПечати, Знач ЗначениеДляЗамены) Экспорт	
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СвоиЗначенияПечати.НаЗначение
	|ИЗ РегистрСведений.СвоиЗначенияПечати КАК СвоиЗначенияПечати
	|ГДЕ СвоиЗначенияПечати.ЗначениеДляЗамены = &ЗначениеДляЗамены
	|	И СвоиЗначенияПечати.НаименованиеПараметра = &НаименованиеПараметра
	|УПОРЯДОЧИТЬ ПО СвоиЗначенияПечати.ДлинаЗначения УБЫВ";
	
	Запрос.УстановитьПараметр("НаименованиеПараметра", ПараметрОбластиПечати);
	Запрос.УстановитьПараметр("ЗначениеДляЗамены", ЗначениеДляЗамены);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			Результат = ВыборкаИзЗапроса.НаЗначение;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ВыполнитьСКешированием(Знач ИмяПроцедурыИлиФункции, СтруктураПараметров = Неопределено, Знач ЭтоФункция = ЛОЖЬ, Знач Результат = Неопределено) Экспорт
	
	СтрокаПараметров = "";
	
	Если НЕ СтруктураПараметров = Неопределено Тогда
		СчетчикПараметров = 0;
		Для Каждого ПараметрПроцедурыИлиФункции Из СтруктураПараметров Цикл
			СтрокаПараметров = ?(ПустаяСтрока(СтрокаПараметров), "", СтрокаПараметров + ", ") + "СтруктураПараметров." + ПараметрПроцедурыИлиФункции.Ключ;
			СчетчикПараметров = СчетчикПараметров + 1;
		КонецЦикла;		
	КонецЕсли;
	
	Если ЭтоФункция Тогда
		Выполнить(" Результат = " + ИмяПроцедурыИлиФункции + "(" + СтрокаПараметров + "); ");
	Иначе
		Выполнить(" " + ИмяПроцедурыИлиФункции + "(" + СтрокаПараметров + "); ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ВычислитьИмяФормы(Знач ФормаСобытияТ) Экспорт
	
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаЭлемента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаЗаписи", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаСписка", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаОтчета", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Окно отчета"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаСпискаСОтборомПоГруппе", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Форма с отбором по группе"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "ОбщаяФорма.НастройкиБазыДанных", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Форма настроек"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, ".", " ");
	
	Возврат ФормаСобытияТ;
	
КонецФункции // ВычислитьИмяФормы

&НаСервере
Функция   ВыяснитьПодходящийВидОбъекта(Знач ИсточникМетаданные, Знач Режим, Знач ПоискНаправления = ЛОЖЬ) Экспорт
	
	Если ПоискНаправления Тогда
		Если режим = 1 Тогда
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.НаправлениеДеятельности.Состав.Найти(Метаданные.РегистрыНакопления[ИсточникМетаданные]);	
		ИначеЕсли режим = 2 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.НаправлениеДеятельности.Состав.Найти(Метаданные.Справочники[ИсточникМетаданные]);	
		ИначеЕсли режим = 3 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.НаправлениеДеятельности.Состав.Найти(Метаданные.РегистрыСведений[ИсточникМетаданные]);	
		ИначеЕсли режим = 4 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.НаправлениеДеятельности.Состав.Найти(Метаданные.Документы[ИсточникМетаданные]);	
		КонецЕсли;	
	Иначе
		Если режим = 1 Тогда
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.РегистрыНакопления[ИсточникМетаданные]);	
		ИначеЕсли режим = 2 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.Справочники[ИсточникМетаданные]);	
		ИначеЕсли режим = 3 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.РегистрыСведений[ИсточникМетаданные]);	
		ИначеЕсли режим = 4 Тогда 
			ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.Документы[ИсточникМетаданные]);	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат  НЕ ВидОбъекта = Неопределено 
	И ВидОбъекта.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
	И (ПоискНаправления ИЛИ ПараметрыСеанса.ИспользоватьЖурналированиеСобытий);
	
КонецФункции // ВыяснитьПодходящийВидОбъекта

&НаСервере
Функция   ВыяснитьРежимВерсионирования(Знач ИмяОбъекта, Знач Дата, Знач ЭтоДокумент) Экспорт
	
	РежимВерсионирования = Перечисления.ВидыВерсионирования.НеВерсионировать;
	ПрограммноеУсловие	 = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РежимыВерсионированияСрезПоследних.ВидВерсионирования,
	|	РежимыВерсионированияСрезПоследних.ПрограммноеУсловие
	|ИЗ РегистрСведений.РежимыВерсионирования.СрезПоследних(&Дата, ОбъектБазыДанных = &ОбъектБазыДанных) КАК РежимыВерсионированияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОбъектБазыДанных", ИмяОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		РежимВерсионирования = ВыборкаДетальныеЗаписи.ВидВерсионирования;
		ПрограммноеУсловие 	 = ВыборкаДетальныеЗаписи.ПрограммноеУсловие;
	КонецЕсли;
	
	Возврат Новый Структура("РежимВерсионирования, ПрограммноеУсловие", РежимВерсионирования, ПрограммноеУсловие);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораЕдиницИзмерения(СписокВыборЭлементФормы) Экспорт	
	
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уп.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("кг.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("м.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("л.");
	СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ЕдиницыИзмерения.Наименование
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ ЕдиницыИзмерения.Наименование <> &Н1
		|	И ЕдиницыИзмерения.Наименование <> &Н2
		|	И ЕдиницыИзмерения.Наименование <> &Н3
		|	И ЕдиницыИзмерения.Наименование <> &Н4
		|	И ЕдиницыИзмерения.Наименование <> &Н5
		|	И ЕдиницыИзмерения.Наименование <> &Н6";
		
		Запрос.УстановитьПараметр("Н1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("шт."));
		Запрос.УстановитьПараметр("Н2", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("усл."));
		Запрос.УстановитьПараметр("Н3", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уп."));
		Запрос.УстановитьПараметр("Н4", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("кг."));
		Запрос.УстановитьПараметр("Н5", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("м."));
		Запрос.УстановитьПараметр("Н6", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("л."));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяЕдиницы = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
			СписокВыборЭлементФормы.Добавить(ИмяЕдиницы, ИмяЕдиницы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьСписокВыбораЕдиницИзмерения

&НаСервере
функция   ЗапросВЦ() Экспорт
	
	ЗапросВЦР = Новый Запрос;
	ЗапросВЦР.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыЦен.Ссылка Из Справочник.ВидыЦен КАК ВидыЦен ГДЕ ВидыЦен.ПометкаУдаления = ЛОЖЬ И ВидыЦен.Зависимая = ЛОЖЬ И ВидыЦен.ВалютаЦены = &ОсновнаяВалюта";
	
	ЗапросВЦР.УстановитьПараметр("ОсновнаяВалюта", ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта"));
	
	Возврат ЗапросВЦР.Выполнить();
	
КонецФункции

&НаСервере
Функция   ЗначениеПредопределенного(Знач ТекстДляЗначения) Экспорт
	
	Результат = Неопределено;	
	Выполнить(" Результат = " + ТекстДляЗначения + ";");
	
	Возврат Результат;
	
КонецФункции // ЗначениеПредопределенного

&НаСервере
Функция   НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении(Знач Номенклатура) Экспорт
	Возврат Номенклатура.НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении;
КонецФункции // НаЭтотТоварНеРаспределяютсяДополнительныеРасходыПриПриобретении

Функция   ОпределитьНужнуюФормулуДляНадписиНаФорме(Знач ИмяФормыСНадписью) Экспорт	
	Возврат ОбщийМодульСервер.ОпределитьНужнуюФормулуДляНадписиНаФорме(ИмяФормыСНадписью);	
КонецФункции //ОпределитьНужнуюФормулуДляНадписиНаФорме

&НаСервере
Функция   ОпределитьПользователя() Экспорт
	Возврат ОбщийМодульСерверПривилегия.ОпределитьПользователя();
КонецФункции

&НаСервере
Функция   ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	// В зависимости от типа платформы подключим соответствующую внешнюю компоненту
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьШтрихкода.Макет.КомпонентаПечатиШтрихкодовWindows32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьШтрихкода.Макет.КомпонентаПечатиШтрихкодовWindows64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьШтрихкода.Макет.КомпонентаПечатиШтрихкодовLinux32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	Иначе
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьШтрихкода.Макет.КомпонентаПечатиШтрихкодовLinux64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	КонецЕсли;                                                   
	
	// Создадим объект внешней компоненты
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем
		Возврат Неопределено;
	Иначе
		
		// Установим основные параметры компоненты
		
		// Если в системе установлен шрифт Tahoma
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") = ИСТИНА Тогда
			// Выбираем его как шрифт для формирования картинки
			
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			
			// Шрифт Tahoma в системе отсутствует
			// Обойдем все доступные компоненте шрифты
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штри-кода
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Утановим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 14;
		
		Возврат ВнешняяКомпонента;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолнаяВерсия() Экспорт
	Возврат ОбщийМодульСервер.ПолнаяВерсия();
КонецФункции

&НаСервере
Функция   ПолучитьАвтоХранилищеДенегПоВалюте(Знач Валюта, Знач ХранилищеДенег = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХранилищеДенег)
		ИЛИ НЕ ХранилищеДенег.Валюта = Валюта Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ХранилищаДенег.Ссылка
		|ИЗ Справочник.ХранилищаДенег КАК ХранилищаДенег
		|ГДЕ ХранилищаДенег.Валюта = &Валюта		
		|УПОРЯДОЧИТЬ ПО ХранилищаДенег.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Валюта", Валюта);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ХранилищеДенег = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ХранилищеДенег;
	
КонецФункции // ПолучитьАвтоХранилищеДенегПоВалюте

&НаСервере
Функция   ПолучитьГруппуНоменклатурыПоНаименованию(Знач Наименование, Знач НеСоздавать = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульТоварСервер.ПолучитьГруппуНоменклатурыПоНаименованию(Наименование, НеСоздавать);
КонецФункции // ПолучитьГруппуНоменклатурыПоНаименованию

&НаСервере
Функция   ПолучитьДатуПервойРеализации(Знач Номенклатура) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Период КАК Период
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Номенклатура = &Номенклатура
	|УПОРЯДОЧИТЬ ПО Период";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Период;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьДатуПервойРеализации

&НаСервере
Функция   ПолучитьДополнительныеРеквизитыВидаСредств(Знач ВидСредств = Неопределено, Знач Сворачивать = ЛОЖЬ) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыСредствПредприятияДополнительныеРеквизиты.Ссылка,
	|	ВидыСредствПредприятияДополнительныеРеквизиты.НомерСтроки,
	|	ВидыСредствПредприятияДополнительныеРеквизиты.ДополнительныйРеквизит,
	|	ВидыСредствПредприятияДополнительныеРеквизиты.ЗначениеПоУмолчанию,
	|	ВидыСредствПредприятияДополнительныеРеквизиты.ОСтроке
	|ИЗ
	|	Справочник.ВидыСредствПредприятия.ДополнительныеРеквизиты КАК ВидыСредствПредприятияДополнительныеРеквизиты";
	
	Если ЗначениеЗаполнено(ВидСредств) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ВидыСредствПредприятияДополнительныеРеквизиты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВидСредств);  	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = РезультатЗапроса.Выгрузить();
		
		Результат.Сортировать("НомерСтроки");
		
		Если Сворачивать Тогда
			
			РезультатСвернутый = Новый ТаблицаЗначений;			
			РезультатСвернутый.Колонки.Добавить("ИмяДопРеквизита");
			НомерСтроки = -1;
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				Если НЕ СтрокаРезультата.НомерСтроки = НомерСтроки Тогда
					
					СтрокаСвернутогоРезультата = РезультатСвернутый.Добавить();
					НомерСтроки = СтрокаРезультата.НомерСтроки;	
				КонецЕсли;
				ДополнительныйРеквизит = СокрЛП(СтрокаРезультата.ДополнительныйРеквизит);
				Если Найти(СтрокаСвернутогоРезультата.ИмяДопРеквизита, ДополнительныйРеквизит) = 0 Тогда
					СтрокаСвернутогоРезультата.ИмяДопРеквизита = СокрЛП("" + СтрокаСвернутогоРезультата.ИмяДопРеквизита + " " + ДополнительныйРеквизит);
				КонецЕсли;
				
			КонецЦикла;
			
			Результат = РезультатСвернутый;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьМассивНаименованийДополнительныхРеквизитов

&НаСервере
Функция   ПолучитьДополнительныеРеквизитыКлиентов() Экспорт
	
	Результат = Неопределено;
	ДопРеквизит = Неопределено;
	
	Для Счетчик = 1 по 15 Цикл
		
		Выполнить(" ДопРеквизит = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ";");
		Наименование = ДопРеквизит.Наименование;
		РеквизитВыбран = ЗначениеЗаполнено(Наименование);
		
		Если НЕ РеквизитВыбран Тогда
			Прервать;
			
		Иначе
			Если Результат = Неопределено Тогда
				Результат = Новый ТаблицаЗначений;			
				Результат.Колонки.Добавить("ИмяДопРеквизита");	
				Результат.Колонки.Добавить("ДополнительныйРеквизит");
			КонецЕсли;
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.ИмяДопРеквизита = Наименование;
			СтрокаРезультата.ДополнительныйРеквизит = ДопРеквизит;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // ПолучитьДополнительныеРеквизитыКлиентов

&НаСервере
Функция   ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Знач НоменклатурнаяГруппа = Неопределено, Знач Сворачивать = ЛОЖЬ) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ НоменклатурныеГруппыРеквизитыНоменклатуры.Ссылка,
	|	НоменклатурныеГруппыРеквизитыНоменклатуры.НомерСтроки,
	|	НоменклатурныеГруппыРеквизитыНоменклатуры.ДополнительныйРеквизит,
	|	НоменклатурныеГруппыРеквизитыНоменклатуры.ЗначениеПоУмолчанию,
	|	НоменклатурныеГруппыРеквизитыНоменклатуры.ОСтроке
	|ИЗ Справочник.НоменклатурныеГруппы.РеквизитыНоменклатуры КАК НоменклатурныеГруппыРеквизитыНоменклатуры ";
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ НоменклатурныеГруппыРеквизитыНоменклатуры.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", НоменклатурнаяГруппа);  	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Результат = РезультатЗапроса.Выгрузить();
		
		Результат.Сортировать("НомерСтроки");
		
		Если Сворачивать Тогда
			
			РезультатСвернутый = Новый ТаблицаЗначений;			
			РезультатСвернутый.Колонки.Добавить("ИмяДопРеквизита");
			НомерСтроки = -1;
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				Если НЕ СтрокаРезультата.НомерСтроки = НомерСтроки Тогда
					
					СтрокаСвернутогоРезультата = РезультатСвернутый.Добавить();
					НомерСтроки = СтрокаРезультата.НомерСтроки;	
				КонецЕсли;
				ДополнительныйРеквизит = СокрЛП(СтрокаРезультата.ДополнительныйРеквизит);
				Если Найти(СтрокаСвернутогоРезультата.ИмяДопРеквизита, ДополнительныйРеквизит) = 0 Тогда
					СтрокаСвернутогоРезультата.ИмяДопРеквизита = СокрЛП("" + СтрокаСвернутогоРезультата.ИмяДопРеквизита + " " + ДополнительныйРеквизит);
				КонецЕсли;
				
			КонецЦикла;
			
			Результат = РезультатСвернутый;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьМассивНаименованийДополнительныхРеквизитов

&НаСервере
Функция   ПолучитьЗапретНаНастройкиОтчета(Знач НаименованиеОтчета, Знач ТекущийПользователь) Экспорт
	
	Запрет = ЛОЖЬ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПользователиСкрытьНастройкиОтчетов.СкрытьНастройки
	|ИЗ Справочник.Пользователи.СкрытьНастройкиОтчетов КАК ПользователиСкрытьНастройкиОтчетов
	|ГДЕ ПользователиСкрытьНастройкиОтчетов.Ссылка = &ТекущийПользователь
	|	И ПользователиСкрытьНастройкиОтчетов.НаименованиеОтчета = &НаименованиеОтчета";
	
	Запрос.УстановитьПараметр("НаименованиеОтчета", НаименованиеОтчета);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Запрет = ВыборкаДетальныеЗаписи.СкрытьНастройки;
	КонецЕсли;
	
	Возврат Запрет;
	
КонецФункции // ПолучитьЗапретНаНастройкиОтчета

&НаСервере
Функция   ПолучитьЗначениеИмениПеречисления(Знач ЗначениеПеречисления) Экспорт
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
КонецФункции
Функция   ПолучитьЗначениеНастройкиИлиКонстанты(Знач ИмяКонстанты, Знач ТолькоКонстанта = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульСервисСервер.ПолучитьЗначениеНастройкиИлиКонстантыНаСервере(ИмяКонстанты, ТолькоКонстанта);
КонецФункции // ПолучитьЗначениеНастройкиИлиКонстанты
Функция   ПолучитьКрасивоеНаименованиеОбъекта(Знач НаименованиеОбъекта, Знач СПриставкой = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(НаименованиеОбъекта, СПриставкой);
КонецФункции

&НаСервере
Функция   ПолучитьНоменклатуруБыстрогоСпроса(Знач Позиция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатураЧастогоСпроса.Номенклатура
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|ГДЕ НоменклатураЧастогоСпроса.Позиция = &Позиция";
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");	
		
	Иначе		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;	
		
	КонецЕсли;
	
КонецФункции // ПолучитьНоменклатуруБыстрогоСпроса

&НаСервере
Функция   ПолучитьНоменклатуруПоПредставлениюКонтрагента(Знач КлиентПоставщик, Знач Поле = Неопределено, Знач Текст, Знач НаЯзыке = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(КлиентПоставщик)
		И НЕ ПустаяСтрока(Текст) Тогда
		
		Если НЕ ЗначениеЗаполнено(Поле = Неопределено) Тогда
			Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПредставлениеТоваровКонтрагентами.Номенклатура
		|ИЗ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
		|ГДЕ (ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик
		|	ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик В ИЕРАРХИИ(&КлиентПоставщик))
		|	И ПредставлениеТоваровКонтрагентами.Поле = &Поле";
		
		Если НЕ НаЯзыке = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Язык = &НаЯзыке ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "	И ПредставлениеТоваровКонтрагентами.ЗначениеПредставления = &Текст
		|УПОРЯДОЧИТЬ ПО ПредставлениеТоваровКонтрагентами.Номенклатура";
		
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("Поле", Поле);
		Запрос.УстановитьПараметр("Текст", Текст);
		
		Если НЕ НаЯзыке = Неопределено Тогда
			Запрос.УстановитьПараметр("НаЯзыке", НаЯзыке);
		КонецЕсли;	
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ВыборкаДетальныеЗаписи.Номенклатура;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНоменклатуруПоПредставлениюКонтрагента

&НаСервере
Функция   ПолучитьОписаниеВсехАналогов(Знач Номенклатура, Знач ФорматРезультата = 0) Экспорт
	
	Результат = "";
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры") Тогда
		
		Если ФорматРезультата = 0 Тогда
			Результат = Новый Массив; // ссылок
		ИначеЕсли ФорматРезультата = 1 Тогда
			Результат = ""; // срока перечня наименований
		ИначеЕсли ФорматРезультата = 2 Тогда
			Результат = ""; // строка перечня артикулов
		КонецЕсли;		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыАналоговТовары.Номенклатура,
		|	ГруппыАналоговТовары.Номенклатура.Артикул КАК Артикул,
		|	ГруппыАналоговТовары.ЕдиницаИзмерения,
		|	ГруппыАналоговТовары.Количество,
		|	ВЫРАЗИТЬ(ГруппыАналоговТовары.ОСтроке КАК СТРОКА(1000)) КАК ОСтроке,
		|	ГруппыАналоговТовары.Ссылка КАК ГруппаАналогов
		|ИЗ (ВЫБРАТЬ
		|		ГруппыАналоговТовары.Ссылка КАК Ссылка
		|	ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
		|	ГДЕ
		|		ГруппыАналоговТовары.Номенклатура = &Номенклатура) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
		|		ПО (ГруппыАналоговТовары.Ссылка = ВложенныйЗапрос.Ссылка)
		|ГДЕ ГруппыАналоговТовары.Номенклатура <> &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Аналог = ВыборкаДетальныеЗаписи.Номенклатура;
				
				Если ФорматРезультата = 0 Тогда
					Результат.Добавить(Аналог);
					
				ИначеЕсли ФорматРезультата = 1 Тогда
					
					ПредставлениеНоменклатуры = Неопределено;
					Если ОбщийМодульПовтор.ВывестиНаименованияНаДругомЯзыке() Тогда
						
						ПредставлениеНоменклатуры = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Аналог, , ИСТИНА);
					КонецЕсли;
					Если ПредставлениеНоменклатуры = Неопределено Тогда
						ПредставлениеНоменклатуры = СокрЛП(Аналог);
					КонецЕсли;
					
					Результат = ?(ПустаяСтрока(Результат), ПредставлениеНоменклатуры, Результат + ", " + ПредставлениеНоменклатуры);
					
				ИначеЕсли ФорматРезультата = 2 Тогда
					
					Артикул = ВыборкаДетальныеЗаписи.Артикул;
					Результат = ?(ПустаяСтрока(Артикул), Результат, ?(ПустаяСтрока(Результат), Результат, Результат + ", " + Артикул));
				КонецЕсли;		
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьОписаниеВсехАналогов
Функция   ПолучитьОсновноеИзображениеОбъекта(Знач СвязанныйОбъект) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьОсновноеИзображениеОбъекта(СвязанныйОбъект);	
КонецФункции // ПолучитьОсновноеИзображениеОбъекта

&НаСервере
Функция   ПолучитьОтборыДоступа(Знач ИмяОбъектаДляОтбора, Знач ТекущийПользователь = Неопределено, Знач ДопТип = "", Знач СвоеНаименованиеОбъектаОтбора = "") Экспорт
	
	СписокОтборов = Неопределено;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом")
		И ЗначениеЗаполнено(ИмяОбъектаДляОтбора) Тогда
		
		Если ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыДвиженийТовара" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыКлиента" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыПоставщика" Тогда
			ИмяОбъектаДляОтбора = "Документ.ПоступленияТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ПолныйЖурнал" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		КонецЕсли;
		
		Если ТекущийПользователь = Неопределено Тогда
			ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПользователиПринудительныйОтборДанных.ИмяОбластиОтбора,
		|	ПользователиПринудительныйОтборДанных.ЗначениеУсловия,
		|	ПользователиПринудительныйОтборДанных.УсловиеОтбора,
		|	ПользователиПринудительныйОтборДанных.РеквизитОбъекта,
		|	ПользователиПринудительныйОтборДанных.ОтборИспользуется,
		|	ПользователиПринудительныйОтборДанных.ГруппаИли КАК ГруппаИли
		|ИЗ Справочник.Пользователи.ПринудительныйОтборДанных КАК ПользователиПринудительныйОтборДанных
		|ГДЕ ПользователиПринудительныйОтборДанных.ИмяОбластиОтбора = &ОбластьОтбора
		|	И ПользователиПринудительныйОтборДанных.Ссылка = &Пользователь
		|УПОРЯДОЧИТЬ ПО ГруппаИли";
		
		Запрос.УстановитьПараметр("ОбластьОтбора", ?(СвоеНаименованиеОбъектаОтбора = "", ИмяОбъектаДляОтбора + ДопТип, СвоеНаименованиеОбъектаОтбора));
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			СписокОтборов = Новый СписокЗначений;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			МассивГрупп = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ГруппаИли = СокрЛП(ВыборкаДетальныеЗаписи.ГруппаИли);
				Если НЕ ГруппаИли = 0
					И МассивГрупп.Найти(ГруппаИли) = Неопределено Тогда
					
					ЭлементСписка = Новый Структура;		
					ЭлементСписка.Вставить("ЭтоГруппаЭлементов", ИСТИНА);
					ЭлементСписка.Вставить("ГруппаЭлементов", "Г" + ГруппаИли);
					СписокОтборов.Добавить(ЭлементСписка);
					
					МассивГрупп.Добавить(ГруппаИли);
				КонецЕсли;
				
				ЭлементСписка = Новый Структура;
				ЭлементСписка.Вставить("ЭтоГруппаЭлементов", ЛОЖЬ);
				ЭлементСписка.Вставить("РеквизитОбъекта", ВыборкаДетальныеЗаписи.РеквизитОбъекта);
				
				УсловиеОтбора = СокрЛП(ВыборкаДетальныеЗаписи.УсловиеОтбора);
				
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;	
				Если УсловиеОтбора = "=" Тогда
					// 
				ИначеЕсли УсловиеОтбора = "<>" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно;
				ИначеЕсли УсловиеОтбора = ">" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше;
				ИначеЕсли УсловиеОтбора = ">=" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ИначеЕсли УсловиеОтбора = "<" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше;
				ИначеЕсли УсловиеОтбора = "<=" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ИначеЕсли УсловиеОтбора = "В" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли УсловиеОтбора = "НВ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
				ИначеЕсли УсловиеОтбора = "С" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
				ИначеЕсли УсловиеОтбора = "НС" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеСодержит;
				ИначеЕсли УсловиеОтбора = "1" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено;
				ИначеЕсли УсловиеОтбора = "0" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ИначеЕсли УсловиеОтбора = "ВИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
				ИначеЕсли УсловиеОтбора = "СИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				ИначеЕсли УсловиеОтбора = "НИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии;
				ИначеЕсли УсловиеОтбора = "С-" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
				Иначе
					
					СисИнфо = Новый СистемнаяИнформация;
					ВерсияПриложения = Лев(СтрЗаменить(СисИнфо.ВерсияПриложения, ".", ""), 3);
					Попытка
						ВерсияПриложения = Число(ВерсияПриложения);
						Если ВерсияПриложения >= 835 Тогда
							
							Если УсловиеОтбора = "+С" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС;
							ИначеЕсли УсловиеОтбора = "-С" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
							ИначеЕсли УсловиеОтбора = "НП" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеПодобно;
							ИначеЕсли УсловиеОтбора = "П" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Подобно;					
							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				ЭлементСписка.Вставить("ВидСравненияКомпоновкиДанных", ВидСравненияОтбора);
				ЭлементСписка.Вставить("ОтборИспользуется", ВыборкаДетальныеЗаписи.ОтборИспользуется);
				ЭлементСписка.Вставить("ЗначениеУсловия", ВыборкаДетальныеЗаписи.ЗначениеУсловия);
				ЭлементСписка.Вставить("ГруппаИли", "Г" + ГруппаИли);
				
				СписокОтборов.Добавить(ЭлементСписка);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СписокОтборов;
	
КонецФункции // ПолучитьУровеньДоступа
Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьЗначениеПараметраСеанса(ИмяПараметра);	
КонецФункции // получитьПараметрСеанса
Функция   ПолучитьПереводДляЭлементаНаЯзыке(Знач ТекстДляПеревода) Экспорт
	Возврат ОбщийМодульТекстСервер.ПолучитьПереводДляЭлементаНаЯзыке(ТекстДляПеревода);
КонецФункции //ПолучитьПереводДляЭлементаНаЯзыке

&НаСервере
Функция   ПолучитьПредставлениеНаЯзыке(Знач ДанныеДляПредставления, Знач ПолеЗначения = "Наименование", Знач ОтказатьсяПриОтсутствии = ЛОЖЬ, Знач ОпределенныйЯзык = Неопределено, Знач ЗапасноеПолеЗначения = "") Экспорт
	
	Если ЗначениеЗаполнено(ДанныеДляПредставления) Тогда
		Если ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗначенияНаДругихЯзыках.НаЯзыке
			|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
			|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных
			|	И ЗначенияНаДругихЯзыках.Поле = &Поле
			|	И ЗначенияНаДругихЯзыках.Язык = &Язык";
			
			Запрос.УстановитьПараметр("ОбъектБазыДанных", ДанныеДляПредставления);
			Запрос.УстановитьПараметр("Поле", ПолеЗначения);
			Если ЗначениеЗаполнено(ОпределенныйЯзык) Тогда
				Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);		
			Иначе
				Запрос.УстановитьПараметр("Язык", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"));
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
			ИначеЕсли НЕ ОтказатьсяПриОтсутствии Тогда
				
				Если НЕ ПустаяСтрока(ЗапасноеПолеЗначения) Тогда
					Запрос.УстановитьПараметр("Поле", ЗапасноеПолеЗначения);
					РезультатЗапроса = Запрос.Выполнить();	
					Если НЕ РезультатЗапроса.Пустой() Тогда
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						ВыборкаДетальныеЗаписи.Следующий();
						НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
					Иначе
						НаЯзыке = ДанныеДляПредставления[ПолеЗначения];	
					КонецЕсли;	
				Иначе		
					НаЯзыке = ДанныеДляПредставления[ПолеЗначения];	
				КонецЕсли;
			Иначе
				НаЯзыке = Неопределено;
			КонецЕсли;
			
			Возврат НаЯзыке;
		Иначе
			Возврат ДанныеДляПредставления[ПолеЗначения];
		КонецЕсли;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеНаЯзыке
Функция   ПолучитьПустоеЗначениеДополнительногоРеквизита(Знач ОбъектИлиТипДополнительногоРеквизита, Знач НаОснованииОбъекта = ЛОЖЬ) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьПустоеЗначениеДополнительногоРеквизита(ОбъектИлиТипДополнительногоРеквизита, НаОснованииОбъекта);	
КонецФункции

&НаСервере
Функция   ПолучитьСвоиЗначенияПараметровПечати() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СвоиЗначенияПечати.НаименованиеПараметра,
	|	СвоиЗначенияПечати.ЗначениеДляЗамены,
	|	СвоиЗначенияПечати.НаЗначение
	|ИЗ РегистрСведений.СвоиЗначенияПечати КАК СвоиЗначенияПечати
	|УПОРЯДОЧИТЬ ПО СвоиЗначенияПечати.ДлинаЗначения УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьСписокИзМетаданных(Знач ЭтоСправочник = ЛОЖЬ) Экспорт
	
	СписокЭлементовМетаданных = Новый СписокЗначений;
	
	Если ЭтоСправочник Тогда
		Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
			СписокЭлементовМетаданных.Добавить(ЭлементМетаданных.Имя, ЭлементМетаданных.Синоним);	
		КонецЦикла;	
	Иначе
		Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
			СписокЭлементовМетаданных.Добавить(ЭлементМетаданных.Имя, ЭлементМетаданных.Синоним);	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СписокЭлементовМетаданных;
	
КонецФункции // ПолучитьСписокИзМетаданных

&НаСервере
Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(Знач ВернутьСписок = ИСТИНА) Экспорт
	возврат ОбщийМодульТоварСервер.ПолучитьСписокНоменклатурыБыстрогоСпроса(ВернутьСписок);
КонецФункции // ПолучитьСписокНоменклатурыБыстрогоСпроса

&НаСервере
Функция   ПолучитьСтрокуИзЗначенияПеречисления(Знач СсылкаНаЗначениеПеречисления, Знач ВидПеречисленияМетаданных) Экспорт
	Возврат СокрЛП(Метаданные.Перечисления[СсылкаНаЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления[Перечисления[ВидПеречисленияМетаданных].Индекс(СсылкаНаЗначениеПеречисления)].Имя);
КонецФункции
Функция   ПолучитьСтруктуруИзРеквизитов(Знач Ссылка) Экспорт
	
	// тут повтор! не используйте для объектов, которые меняются у пользователя
	Возврат ОбщийМодульСервисСервер.ПолучитьСтруктуруИзРеквизитов(Ссылка);
	
КонецФункции //ПолучитьСтруктуруИзРеквизитов

&НаСервере
Функция   ПолучитьТаблицуОбъектовДоступа() Экспорт
	
	СтрокаОтменаПроведенияДокументов	 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отмена проведения документов") + " ";
	СтрокаИзмененияПроведенныхДокументов = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменения проведенных документов") + " ";
	СтрокаСправочник 					 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник") + " ";
	СтрокаДокументы						 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы") + " ";
	
	ТаблицаОбъектовДоступа = Новый ТаблицаЗначений;
	ТаблицаОбъектовДоступа.Колонки.Добавить("КодПрава");
	ТаблицаОбъектовДоступа.Колонки.Добавить("ОбъектДоступа");
	ТаблицаОбъектовДоступа.Колонки.Добавить("УровеньДоступаПоУмолчанию");
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000100";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возможность управлять доступом пользователей");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000150";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возможность менять общие настройки (Администратор)");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000170";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Валюты и курсы");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000200";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Номенклатуры");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000300";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Номенклатуры");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000305";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты по движению товаров");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000310";
	СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инвентаризации");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000311";
	СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инвентаризации");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000312";
	СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Инвентаризации");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВнутреннихЗаказов") Тогда
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000320";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Внутренние заказы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000350";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурные Группы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСертификатовНоменклатуры") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000360";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сертификатов и гигиенических заключений");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьИнструментРабочееМестоОператораКассы") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000365";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ассортимент для рабочего места оператора Кассы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000370";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Движений товара");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000380";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ данным по товарам переданным на комиссию");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000381";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты Комиссионеров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000382";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты Комиссионеров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
	КонецЕсли;
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
	Если ИспользоватьСложныйМеханизмЦен Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000400";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Виды Цен");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	ВестиУчетПоКлиентам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	Если ВестиУчетПоКлиентам Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000500";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000600";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Клиента");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000605";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по взаиморасчетам с Клиентами");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000607";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Клиента");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВаучеры") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000610";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Учет Ваучеров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;		
	КонецЕсли;
	
	ВестиУчетПоПоставщикам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	Если ВестиУчетПоПоставщикам Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000650";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Поставщиков");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000655";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Поставщика");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000656";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по взаиморасчетам с Поставщиками");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "00065A";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Поставщика");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ИспользоватьСложныйМеханизмЦен Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "00065D";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цены поставщиков");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
		КонецЕсли;
	КонецЕсли;
	
	Если ВестиУчетПоКлиентам 
		ИЛИ ВестиУчетПоПоставщикам Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "00065B";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к представлению товаров Контрагентами");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		КонецЕсли;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000657";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Взаимозачета долга контрагентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000658";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Взаимозачеты долга контрагентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000660";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Договоров с Контрагентами");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000665";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Договора с Контрагентом");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000690";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнения работ");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000691";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнения работ");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000692";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполнения работ");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000700";
			СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Объектов Клиентов");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		КонецЕсли;	
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000790";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к Полному журналу документов");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000800";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склады");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000810";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещения товаров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000811";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещения товаров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000812";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перемещения товаров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000890";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движения денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000891";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движения Денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000892";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Движения Денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000892";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приходование денег при реализации");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
			
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000894";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходование денег при оприходовании");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		КонецЕсли;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000895";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты по движению денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000900";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статьи движения денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000950";
			СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Хранилищ денег");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001400";
			СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сотрудников");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
			
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001450";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заработная плата сотрудников");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000966";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Направлений Деятельности");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВидовДеятельности") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000967";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Видов деятельности");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобытий") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000971";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("События с контрагентами");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001000";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формул");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001100";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Собственных юридических лиц");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001150";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Организации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПартийПриобретения") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001200";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Партий приобретения");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001250";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Партии приобретения");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001290";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оказания услуг за время");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001291";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оказания услуг за время");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001292";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Оказания услуг за время");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001300";
			СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Позиций оказания услуг за время");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001500";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Спецификаций");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001550";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Спецификации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001560";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001561";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001562";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комплектации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001600";
		СтрокаДоступа.ОбъектДоступа = СтрокаСправочник + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Средств предприятия");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001700";
	СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступления товаров и услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001701";
	СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступления товаров и услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001702";
	СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поступления товаров и услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001750";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы поставщикам");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001751";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказов Поставщикам");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001752";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказов Поставщикам");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001800";
	СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходования товаров и реализации услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001801";
	СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходования товаров и реализации услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001802";
	СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходования товаров и реализации услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001850";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001851";
		СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказов Клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001852";
		СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказов Клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001853";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тендеры");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЕстьПринтер") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002100";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печать документов и карточек справочников");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002200";
	СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Корректировки");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002201";
	СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Корректировки и Взаимозачетов контрагентов");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002202";
	СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Корректировки");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002300";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменение цен в документах");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002350";
	СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установки Цен");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002351";
	СтрокаДоступа.ОбъектДоступа = СтрокаОтменаПроведенияДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установки Цен");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002352";
	СтрокаДоступа.ОбъектДоступа = СтрокаИзмененияПроведенныхДокументов + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установки Цен");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановыхПоказателейПродаж") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002400";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планы продаж");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановДоходовИРасходов") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002450";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Планы расходов и доходов денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПроизвольныеПечатныеФормы") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002455";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произвольные печатные формы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСторнированиеДокументов") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002460";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Право на сторнирование документов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002470";
		СтрокаДоступа.ОбъектДоступа = СтрокаДокументы + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по Сторнированным документам");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002500";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Полный журнал документов");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002600";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Экономические отчеты, отчет руководителю");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспорт") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002700";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт - экспорт");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмПодписокНаСобытия") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002800";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Механизм подписок");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002900";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проводить документы будущим периодом");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВерсионирование") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "003000";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Управлять версионированием");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение; 	
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "003010";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изучать версии объектов базы данных");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "003100";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Управлять дополнительными внешними обработками");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидкиПериода") Тогда
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002355";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Устанавливать скидки для периода");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	Возврат ТаблицаОбъектовДоступа;
	
КонецФункции 

&НаСервере
функция   ПолучитьТаблицуСопоставленийПроизвольныхПечатныхФорм() Экспорт
	
	МакетСопоставлений = Неопределено;
	Выполнить(" МакетСопоставлений = Справочники.ПроизвольныеПечатныеФормы.ПолучитьМакет(""МакетСопоставленияОбъектов""); ");
	МакетСопоставлений.КодЯзыкаМакета = "ru"; // !
	
	КоличествоСтрок = 99999;
	Счетчик = 1;
	Пусто 	= 0;
	
	ТаблицаСопоставлений = Новый ТаблицаЗначений;
	ТаблицаСопоставлений.Колонки.Добавить("ТипОбъекта");
	ТаблицаСопоставлений.Колонки.Добавить("ЗначениеПеречисления");
	ТаблицаСопоставлений.Колонки.Добавить("РазрядМетаданных");
	
	Пока КоличествоСтрок > Счетчик цикл
		
		R = СокрЛП(формат(Счетчик, "ЧГ=0"));
		
		СтрокаСопоставлений = ТаблицаСопоставлений.Добавить();
		СтрокаСопоставлений.ТипОбъекта 			 = СокрЛП(МакетСопоставлений.Область("R" + R + "C1").Текст);
		СтрокаСопоставлений.ЗначениеПеречисления = СокрЛП(МакетСопоставлений.Область("R" + R + "C2").Текст);
		СтрокаСопоставлений.РазрядМетаданных 	 = СокрЛП(МакетСопоставлений.Область("R" + R + "C3").Текст);
		
		Если ПустаяСтрока(СтрокаСопоставлений.ТипОбъекта)
			И ПустаяСтрока(СтрокаСопоставлений.ЗначениеПеречисления) Тогда
			
			Прервать;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат ТаблицаСопоставлений;
	
КонецФункции
Функция   ПолучитьТекстЗапросаПоискаСпецСправочника(Знач ТипСправочника) Экспорт
	
	Результат = "";
	
	ТипСправочника = ВРег(ТипСправочника);
	Если ТипСправочника = "НОМЕНКЛАТУРА"
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = "НШК";
		
	ИначеЕсли (ТипСправочника = "КЛИЕНТЫ" 
		ИЛИ ТипСправочника = "ПОСТАВЩИКИ" 
		ИЛИ ТипСправочника = "ОРГАНИЗАЦИИ" 
		ИЛИ ТипСправочника = "СОТРУДНИКИ")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда
		
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка Из Справочник." + ТипСправочника + " КАК С ГДЕ С.ОКПО = &СпецКод ";
		
	ИначеЕсли ТипСправочника = "СЕРИИНОМЕНКЛАТУРЫ"
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.СерияНоменклатуры Как Ссылка
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.ШтрихКод = &СпецКод";
		
	Иначе
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка Из Справочник." + ТипСправочника + " КАК С ГДЕ С.Наименование = &СпецКод ";// И С.Код = &ЗначениеКод";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 
Функция   ПолучитьТекстНаЯзыке(Знач ТекстНаРусском, Знач КонкретныйЯзык = Неопределено, Знач НасильноВернутьРусский = ЛОЖЬ, Знач ВернутьПереводНаЯзыкеПользователя = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульТекстСервер.ПолучитьТекстНаЯзыке(ТекстНаРусском, КонкретныйЯзык, НасильноВернутьРусский, ВернутьПереводНаЯзыкеПользователя);
КонецФункции // ПолучитьТекстНаЯзыке
Функция   ПолучитьТекущегоСотрудника() Экспорт
	Возврат ОбщийМодульСервисСервер.ПолучитьТекущегоСотрудника();
КонецФункции //ПолучитьТекущегоСотрудника
Функция   ПолучитьТекущийКурс(Знач Валюта = Неопределено, Знач Дата = Неопределено) Экспорт  	
	Возврат ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);	
КонецФункции // ПолучитьТекущийКурс

&НаСервере
Функция   ПолучитьТекущийЯзыкДокументов(Знач Контрагент = Неопределено, Знач ЯзыкПечати = Неопределено, Знач ВернутьКод = ИСТИНА) Экспорт
	
	Результат = ПредопределенноеЗначение("Справочник.Языки.Русский");
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
		Если НЕ ЗначениеЗаполнено(ЯзыкПечати) Тогда
			
			Если ЗначениеЗаполнено(Контрагент)
				И ЗначениеЗаполнено(Контрагент.ЯзыкДокументов) Тогда
				
				Результат = Контрагент.ЯзыкДокументов;				
			Иначе
				
				Результат = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЯзыкПечатныхФорм");
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
					
					Если НЕ ЗначениеЗаполнено(Результат) Тогда
						Результат = ПредопределенноеЗначение("Справочник.Языки.Русский");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Результат = ЯзыкПечати;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ВернутьКод Тогда
		Возврат Результат.Код;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьТекущийЯзыкДокументов
Функция   ПолучитьТекущуюСредуВыполнения() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Возврат 1;
	#ИначеЕсли Сервер Тогда
		
		Возврат 2;
	#ИначеЕсли ВнешнееСоединение Тогда
		
		Возврат 3;
	#ИначеЕсли ТонкийКлиент Тогда
		
		Возврат 4;
	#ИначеЕсли ВебКлиент Тогда
		
		Возврат 5;
	#Иначе
		
		Возврат 0;
	#КонецЕсли	
	
КонецФункции   
Функция   ПолучитьТипВладельца(Знач ОбъектСсылка) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьИмяДополнительногоРеквизита(ОбъектСсылка).ЭтоРеквизитДляОбъекта;	
КонецФункции // ПолучитьТипВладельца
Функция   ПолучитьТипДополнительногоРеквизита(Знач ТипОбъектаДляДополнительныхРеквизитов) Экспорт
	Возврат ОбщийМодульСервер.ПолучитьТипДополнительногоРеквизита(ТипОбъектаДляДополнительныхРеквизитов);
КонецФункции

&НаСервере
Функция   ПолучитьУровеньДоступа(Знач КодПрава, Знач ТекущийПользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("УровеньДоступа", перечисления.УровниДоступа.ПолныйДоступ);
	Результат.Вставить("ОбъектДоступа", "");
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		НайтиПраво = ТекущийПользователь.Доступ.Найти(КодПрава, "КодПрава");
		Если НЕ НайтиПраво = Неопределено Тогда
			Результат.УровеньДоступа = НайтиПраво.УровеньДоступа;
			Результат.ОбъектДоступа  = НайтиПраво.ОбъектДоступа;
			Результат.Вставить("УсловиеДоступа", НайтиПраво.УсловиеДоступа);			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьУровеньДоступа

&НаСервере
Функция   ПолучитьШтрихКодНоменклатурыИлиСерии(Знач Ссылка, Знач ЭтоСерия = ЛОЖЬ) Экспорт
	
	Результат = "";
	Если НЕ ЭтоСерия Тогда
		Результат = СокрЛП(ссылка.ОсновнойШтрихКод);
		
		Если ПустаяСтрока(Результат) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ ШтрихКоды.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";
		
		Запрос.УстановитьПараметр("СерияНоменклатуры", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ПолучитьШтрихКодНоменклатурыИлиСерии

&НаКлиенте
Функция   ПроверитьНаличиеПользовательскихПереводовДляФормы(Знач ИмяФормыКонфигурации) Экспорт
	
	Возврат глМассивФормСПользовательскимПереводом.Получить(ИмяФормыКонфигурации);
	
КонецФункции //ПроверитьНаличиеПользовательскихПереводовДляФормы

&НаСервере
Функция   ПроверитьЧтоТипДокументаПроводимыйИМожетБытьЗаблокирован(Знач ТипЗнчИсточник) Экспорт
	
	Если ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ВыполненияРабот"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ВыполненияРабот")) 
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.Инвентаризации"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.Комплектация"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.КорректировкиИРегистрацияОстатков"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ОказанияУслугЗаВремя"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ОтчетыКомиссионеров"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ПеремещенияТовара"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.ПоступленияТовара"))
		ИЛИ ТипЗнчИсточник = СокрЛП(Тип("ДокументОбъект.РасходыТовара")) Тогда
		
		Возврат ИСТИНА;
	Иначе
		Возврат ЛОЖЬ;			
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   РегистрационныйКод(Знач ИзСвойств = ЛОЖЬ) Экспорт
	
	Если ИзСвойств Тогда
		Результат = Метаданные.Комментарий;
	Иначе	
		Результат = СокрЛП(Константы.РегистрационныйНомер.Получить());
		Если ПустаяСтрока(Результат) Тогда
			Результат = Метаданные.Комментарий;		
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РегистрационныйКод
Функция   СпецСправочник(Знач ТипСправочника) Экспорт
	
	ТипСправочника = ВРег(ТипСправочника);
	Возврат ТипСправочника = "НОМЕНКЛАТУРА"
	ИЛИ ТипСправочника = "КЛИЕНТЫ" 
	ИЛИ ТипСправочника = "ПОСТАВЩИКИ" 
	ИЛИ ТипСправочника = "ОРГАНИЗАЦИИ" 
	ИЛИ ТипСправочника = "СЕРИИНОМЕНКЛАТУРЫ" 
	ИЛИ ТипСправочника = "СОТРУДНИКИ";
	
КонецФункции // СпецСправочник

&НаСервере
Функция   СформироватьВидыУсловийДляОтбора() Экспорт
	
	ВидыУсловийДляОтбора = Новый СписокЗначений;
	
	ВидыУсловийДляОтбора.Добавить("=", "=  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("равно") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("<>", "!= (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ равно") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить(">", ">  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("больше") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить(">=", ">= (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("больше либо равно") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("<", "<  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("меньше") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("<=", "<= (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("меньше либо равно") + ")", ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнено"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("0", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ заполнено"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("В", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В списке"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("НВ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ в списке"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Содержит"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("НС", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ содержит"), ЛОЖЬ);
	
	ВидыУсловийДляОтбора.Добавить("ВИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В Иерархии"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("НИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ В Иерархии"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("СИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В списке по Иерархии"), ЛОЖЬ);
	ВидыУсловийДляОтбора.Добавить("С-", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ В списке по Иерархии"), ЛОЖЬ);
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = Лев(СтрЗаменить(СисИнфо.ВерсияПриложения, ".", ""), 3);
	Попытка
		ВерсияПриложения = Число(ВерсияПриложения);
		Если ВерсияПриложения >= 835 Тогда
			ВидыУсловийДляОтбора.Добавить("+С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("начинается С"), ЛОЖЬ);
			ВидыУсловийДляОтбора.Добавить("-С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ начинается С"), ЛОЖЬ);
			ВидыУсловийДляОтбора.Добавить("П", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("подобно"), ЛОЖЬ);
			ВидыУсловийДляОтбора.Добавить("НП", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ подобно"), ЛОЖЬ);	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ВидыУсловийДляОтбора;
	
КонецФункции

&НаСервере
Функция   СформироватьПереченьОбъектовБазыДанных(Знач ТолькоСправочникиДокументыИРегистрыСведений = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульСервер.СформироватьПереченьОбъектовБазыДанных(ТолькоСправочникиДокументыИРегистрыСведений);
КонецФункции 

&НаСервере
Функция   ТекущийЯзыкРусский() Экспорт
	Возврат ОбщийМодульСервисСервер.ТекущийЯзыкРусский();
КонецФункции // ТекущийЯзыкРусский
Функция   ТоварВедетсяПоСериям(Знач Номенклатура) Экспорт	
	Возврат ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(Номенклатура, "СерийныйУчет");	
КонецФункции // ТоварВедетсяПоСериям
Функция   ТоварВедетсяПоСериямИСерияОбязательна(Знач Номенклатура) Экспорт
	
	Результат = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Номенклатура)
		И Номенклатура.СерийныйУчет
		И Номенклатура.ЗапретитьУказаниеБезСерии Тогда
		
		Результат = ИСТИНА;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ТоварВедетсяПоСериямИСерияОбязательна

&НаСервере
Функция   ТоварНеУчитываетсяПоКоличеству(Знач Номенклатура) Экспорт
	
	Если Номенклатура.НеОтслеживатьОстаток 
		ИЛИ Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму")
		ИЛИ Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.УслугиНаСумму") Тогда
		
		возврат ИСТИНА;
	Иначе
		возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции // ТоварНеУчитываетсяПоКоличеству
Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт
	Возврат ОбщийМодульСервер.УНоменклатурыЕстьАналоги(Номенклатура);
КонецФункции
Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт
	Возврат ОбщийМодульСервер.УНоменклатурыЕстьЕдиницыИзмерения(Номенклатура);
КонецФункции 
Процедура УстановитьСписокДоступныхЯзыков(ЭлементФормыСписокВыбора, Знач ДляНаименования = ЛОЖЬ, Знач ДляДокументов = ЛОЖЬ, Знач ДляОбщения = ЛОЖЬ) Экспорт
	ОбщийМодульСервер.УстановитьСписокДоступныхЯзыков(ЭлементФормыСписокВыбора, ДляНаименования, ДляДокументов, ДляОбщения);
КонецПроцедуры
Функция   ЧислоОпцийДляКонтрагентов() Экспорт
	
	РезультатЧислоОпцийДляКонтрагентов = 0;
	
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетИнформацииОДоставкеВДокументахПоступления"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетИнформацииОДоставкеВДокументахРасхода"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидки"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмОтсрочкиПлатежа"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетТоваровПереданныхОтНасДляКомиссионнойТорговли"), 1, 0);
	РезультатЧислоОпцийДляКонтрагентов = РезультатЧислоОпцийДляКонтрагентов + ?(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоНаправлениямДеятельности"), 1, 0);
	
	Возврат РезультатЧислоОпцийДляКонтрагентов;
	
КонецФункции // ЧислоОпцийДляКонтрагентов
Функция   ЭтоГруппа(Знач ЭлементСправочника) Экспорт
	
	Возврат ЭлементСправочника.ЭтоГруппа;
	
КонецФункции //ЭтоГруппа
Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	
	#Если Клиент Тогда
		Возврат ОбщийМодульСервер.ПолучитьЗначениеПараметраСеанса("ИспользоватьНаборыТоваровПС") И ОбщийМодульТоварСервер.ЭтоНабор(Номенклатура);
	#КонецЕсли
	
	#Если НЕ Клиент Тогда
		Возврат ПараметрыСеанса.ИспользоватьНаборыТоваровПС И НЕ Номенклатура.ЭтоГруппа И Номенклатура.ЭтоНабор;
	#КонецЕсли	
	
КонецФункции // ЭтоНабор
