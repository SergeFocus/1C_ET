//sza140613-1357 : 
//sza131003-1330 : 

Функция   ПолучитьТекстНаЯзыке(Знач ТекстНаРусском, Знач КонкретныйЯзык = Неопределено) Экспорт 	
	Возврат ОбщийМодульТекстСервер.ПолучитьТекстНаЯзыке(ТекстНаРусском, КонкретныйЯзык);	
КонецФункции //ПолучитьТекстНаЯзыке

&НаСервере
Функция   ТоварНеУчитываетсяПоКоличеству(Знач Номенклатура) Экспорт
	//%16.8	
	Если Номенклатура.НеОтслеживатьОстаток 
		или Номенклатура = Справочники.Номенклатура.ТоварНаСумму
		или Номенклатура = Справочники.Номенклатура.УслугиНаСумму Тогда
		
		возврат истина;
	иначе
		возврат ложь;
	КонецЕсли;
	
КонецФункции //ТоварНеУчитываетсяПоКоличеству

Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	
	#Если Клиент Тогда
		Возврат ОбщийМодульСервер.ПолучитьЗначениеПраметраСеанса("ИспользоватьНаборыТоваровПС") И ОбщийМодульТоварСервер.ЭтоНабор(Номенклатура);
	#КонецЕсли
	
	#Если НЕ Клиент Тогда
		Возврат ПараметрыСеанса.ИспользоватьНаборыТоваровПС И Номенклатура.ЭтоНабор;		
	#КонецЕсли	
	
КонецФункции //ЭтоНабор

Функция   ПолучитьТекущийКурс(Знач Валюта = Неопределено, Знач Дата = Неопределено) Экспорт  	
	Возврат ОбщийМодульСервер.ПолучитьТекущийКурс(Валюта, Дата);	
КонецФункции //ПолучитьТекущийКурс

Функция   ПолучитьПараметрСеанса(Знач ИмяПараметра) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьЗначениеПраметраСеанса(ИмяПараметра);	
КонецФункции //получитьПараметрСеанса

&НаСервере
Функция   ВыяснитьПодходящийВидОбъекта(Знач ИсточникМетаданные, Знач режим) Экспорт
	
	если режим = 1 тогда
		ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.регистрынакопления[ИсточникМетаданные]);	
	иначеесли режим = 2 тогда 
		ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.справочники[ИсточникМетаданные]);	
	иначеесли режим = 3 тогда 
		ВидОбъекта = Метаданные.ОбщиеРеквизиты.Ответственный.Состав.Найти(Метаданные.регистрысведений[ИсточникМетаданные]);	
	КонецЕсли;
	
	Возврат  НЕ ВидОбъекта = Неопределено 
	и ВидОбъекта.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
	и ПараметрыСеанса.ИспользоватьЖурналированиеСобытий;
	
КонецФункции //ВыяснитьПодходящийВидОбъекта

&НаСервере
Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(Знач ВернутьСписок = истина) Экспорт
	возврат ОбщийМодульТоварСервер.ПолучитьСписокНоменклатурыБыстрогоСпроса(ВернутьСписок);
КонецФункции //ПолучитьСписокНоменклатурыБыстрогоСпроса

&НаСервере
Функция   ПолучитьНоменклатуруБыстрогоСпроса(Знач Позиция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатураЧастогоСпроса.Номенклатура
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|ГДЕ НоменклатураЧастогоСпроса.Позиция = &Позиция";
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.Номенклатура.ПустаяСсылка();	
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;	
		
	КонецЕсли;
	
КонецФункции //ПолучитьНоменклатуруБыстрогоСпроса

&НаСервере
Функция   ПлатнаяВерсия() Экспорт
	Возврат ОбщийМодульСервер.ПлатнаяВерсия();
КонецФункции

&НаСервере
Функция   РегистрационныйКод() Экспорт
	Возврат Метаданные.Комментарий;
КонецФункции //РегистрационныйКод

Функция   ПолучитьЗначениеНастройкиИлиКонстанты(Знач ИмяКонстанты, Знач ТолькоКонстанта = Ложь) Экспорт
	Возврат ОбщийМодульСервисСервер.получитьЗначениеНастройкиИлиКонстантыНаСервере(ИмяКонстанты, ТолькоКонстанта);
КонецФункции //получитьЗначениеНастройкиИлиКонстанты

Функция   ТоварВедетсяПоСериям(Знач Номенклатура) Экспорт
	
	Возврат ОбщийМодульСервисСервер.ПолучитьЗначениеРеквизита(Номенклатура, "СерийныйУчет");
	
КонецФункции //ТоварВедетсяПоСериям

Функция   ТоварВедетсяПоСериямИСерияОбязательна(Знач Номенклатура) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Номенклатура)
		и Номенклатура.СерийныйУчет
		И Номенклатура.ЗапретитьУказаниеБезСерии Тогда
		
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции //ТоварВедетсяПоСериямИСерияОбязательна

&НаСервере
Функция   ОпределитьПользователя() Экспорт
	Возврат ОбщийМодульСерверПривилегия.ОпределитьПользователя();
КонецФункции

&НаСервере
функция   ЗапросВЦ() Экспорт
	
	ЗапросВЦР = Новый Запрос;
	ЗапросВЦР.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыЦен.Ссылка ИЗ Справочник.ВидыЦен КАК ВидыЦен ГДЕ ВидыЦен.ПометкаУдаления = ЛОЖЬ И ВидыЦен.Зависимая = ЛОЖЬ И ВидыЦен.ВалютаЦены = &ОсновнаяВалюта";
	
	ЗапросВЦР.УстановитьПараметр("ОсновнаяВалюта", ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта"));
	
	Возврат ЗапросВЦР.Выполнить();
	
КонецФункции

&НаСервере
Функция   ЗначениеПредопределенного(Знач ТекстДляЗначения) Экспорт
	
	Результат = Неопределено;
	
	Выполнить(" Результат = " + ТекстДляЗначения + ";");
	
	Возврат Результат;
	
КонецФункции //ЗначениеПредопределенного

&НаСервере
Функция   ПолучитьГруппуНоменклатурыПоНаименованию(Знач наименование, Знач НеСоздавать = Ложь) Экспорт
	Возврат ОбщийМодульТоварСервер.ПолучитьГруппуНоменклатурыПоНаименованию(наименование, НеСоздавать);
КонецФункции //ПолучитьГруппуНоменклатурыПоНаименованию

&НаСервере
Функция   ТекущийЯзыкРусский() Экспорт
	Возврат НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы) ИЛИ ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");	
КонецФункции //ТекущийЯзыкРусский

&НаСервере
Функция   ПолучитьПредставлениеНаЯзыке(Знач Данные, Знач ПолеЗначения = "Наименование", Знач ОтказатьсяПриОтсутствии = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗначенияНаДругихЯзыках.НаЯзыке
	|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
	|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных
	|	И ЗначенияНаДругихЯзыках.Поле = &Поле
	|	И ЗначенияНаДругихЯзыках.Язык = &Язык";
	
	Запрос.УстановитьПараметр("ОбъектБазыДанных", Данные);
	Запрос.УстановитьПараметр("Поле", ПолеЗначения);
	Запрос.УстановитьПараметр("Язык", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"));
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
	иначеЕсли НЕ ОтказатьсяПриОтсутствии Тогда
		НаЯзыке = Данные[ПолеЗначения];
	Иначе
		НаЯзыке = Неопределено;
	КонецЕсли;
	
	Возврат НаЯзыке;
	
КонецФункции //ПолучитьПредставлениеНаЯзыке

Функция   СпецСправочник(Знач ТипСправочника) Экспорт
	
	ТипСправочника = Врег(ТипСправочника);
	Возврат ТипСправочника = "НОМЕНКЛАТУРА"
	ИЛИ ТипСправочника = "КЛИЕНТЫ" 
	ИЛИ ТипСправочника = "ПОСТАВЩИКИ" 
	ИЛИ ТипСправочника = "ОРГАНИЗАЦИИ" 
	ИЛИ ТипСправочника = "СЕРИИНОМЕНКЛАТУРЫ" 
	ИЛИ ТипСправочника = "СОТРУДНИКИ";
	
КонецФункции //СпецСправочник

&НаСервере
Функция   ПолучитьШтрихКодНоменклатурыИлиСерии(Знач Ссылка, Знач ЭтоСерия = Ложь) Экспорт
	
	результат = "";
	если не этосерия тогда
		результат = Сокрлп(ссылка.ОсновнойШтрихКод);
		
		Если результат = "" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ ШтрихКоды.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				результат = ВыборкаДетальныеЗаписи.ШтрихКод;
			конецесли;
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";
		
		Запрос.УстановитьПараметр("СерияНоменклатуры", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		конецесли;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции //ПолучитьШтрихКодНоменклатурыИлиСерии

Функция   ПолучитьТекстЗапросаПоискаСпецСправочника(Знач ТипСправочника) Экспорт
	
	Результат = "";
	
	ТипСправочника = Врег(ТипСправочника);
	Если ТипСправочника = "НОМЕНКЛАТУРА"
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		и НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = "НШК";
		
	ИначеЕсли (ТипСправочника = "КЛИЕНТЫ" 
		ИЛИ ТипСправочника = "ПОСТАВЩИКИ" 
		ИЛИ ТипСправочника = "ОРГАНИЗАЦИИ" 
		ИЛИ ТипСправочника = "СОТРУДНИКИ")
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда
		
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + ТипСправочника + " КАК С ГДЕ С.ОКПО = &СпецКод ";
		
	ИначеЕсли ТипСправочника = "СЕРИИНОМЕНКЛАТУРЫ"
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		и НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода") Тогда
		
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.СерияНоменклатуры Как Ссылка
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.ШтрихКод = &СпецКод";
		
	Иначе
		Результат = "ВЫБРАТЬ ПЕРВЫЕ 1 С.Ссылка ИЗ Справочник." + ТипСправочника + " КАК С ГДЕ С.Наименование = &СпецКод ";// И С.Код = &ЗначениеКод";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция   ПолучитьОсновноеИзображениеОбъекта(Знач СвязанныйОбъект) Экспорт	
	Возврат ОбщийМодульСервер.ПолучитьОсновноеИзображениеОбъекта(СвязанныйОбъект);	
КонецФункции //ПолучитьОсновноеИзображениеОбъекта

Функция   ВычислитьИмяФормы(Знач ФормаСобытияТ) Экспорт
	
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаЭлемента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаЗаписи", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаСписка", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаОтчета", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Окно отчета"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "Форма.ФормаСпискаСОтборомПоГруппе", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Форма с отбором по группе"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, "ОбщаяФорма.НастройкиБазыДанных", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Форма настроек"));
	ФормаСобытияТ = СтрЗаменить(ФормаСобытияТ, ".", " ");
	
	Возврат ФормаСобытияТ;
	
КонецФункции //ВычислитьИмяФормы

Функция   ПолучитьПустоеЗначениеДополнительногоРеквизита(Знач ОбъектИлиТипДополнительногоРеквизита, Знач НаОснованииОбъекта = Ложь) Экспорт
	
	Возврат ОбщийМодульСервер.ПолучитьПустоеЗначениеДополнительногоРеквизита(ОбъектИлиТипДополнительногоРеквизита, НаОснованииОбъекта);
	
КонецФункции

Функция   ПолучитьТипДополнительногоРеквизита(Знач ТипОбъектаДляДополнительныхРеквизитов) Экспорт
	Возврат ОбщийМодульСервер.ПолучитьТипДополнительногоРеквизита(ТипОбъектаДляДополнительныхРеквизитов);
КонецФункции

&НаСервере
Функция   ПолучитьИмяДополнительногоРеквизита(Знач ОбъектВладелец) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоРеквизитДляОбъекта", Перечисления.ОбъектыДляДополнительныхРеквизитов.ПустаяСсылка()) ;
	ТипЗнчОбъектВладелец = ТипЗнч(ОбъектВладелец);
	Результат.Вставить("НаименованиеОбъектаВладельца", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ТипЗнчОбъектВладелец)));
	
	Если ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ВидыЦен") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаВидыЦен ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляНоменклатурыНоменклатурнойГруппы;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Договора") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаДоговора ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ЗаметкиИНапоминания") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляЗаметокИНапоминаний;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Изображения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляПрикрепленныхИзображений;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Клиенты") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаКлиенты;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Номенклатура") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаНоменклатура ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Организации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОрганизации;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ТаблицыДанных") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаТаблицыДанных;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ОбъектыКлиентов") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОбъектыКлиентов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ПартииПриобретения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПартииПриобретения ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Поставщики") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПоставщики ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Производители") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПроизводители ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Регионы") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаРегионы ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Склады") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСклады ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Сотрудники") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСотрудники ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СредстваПредприятия") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСредств;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СтатьиДвиженияДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСтатьиДвиженияДенег ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ХранилищаДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаХранилищаДенег ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Спецификации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСпецификаций;		
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ГруппыАналогов") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаГруппАналогов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Подразделения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПодразделений;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СертификатыГигиеническиеЗаключения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСертификатов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ДвиженияДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаДвиженияДенег;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.Инвентаризации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаИнвентаризация;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКорректировкаИВводОстатков;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПеремещенияТоваров;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПланыПродаж") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланПродаж;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПланыДоходовИРасходовДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланДоходовИРасходов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПоступлениеТовара;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.РасходыТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаРасходТовара;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаВыполненияРабот;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.УстановкиЦен") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаУстановкаЦен;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.Комплектация") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКомплектации;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОтчетКомиссионера;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОказанияУслугЗаВремя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьИмяДополнительногоРеквизита

Функция   ПолучитьКрасивоеНаименованиеОбъекта(Знач НаименованиеОбъекта, Знач СПриставкой = Ложь) Экспорт
	
	Если СПриставкой Тогда
		Наименование = СтрЗаменить(НаименованиеОбъекта, "СправочникСсылка.", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник") + " ");
		Наименование = СтрЗаменить(Наименование, "ДокументСсылка.", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документ") + " ");
	Иначе
		Наименование = СтрЗаменить(НаименованиеОбъекта, "СправочникСсылка.", "");
		Наименование = СтрЗаменить(Наименование, "ДокументСсылка.", "");
	КонецЕсли;
	с = стрдлина(Наименование);
	сч = 1;
	Наименование2 = Лев(Наименование, 1);
	пока сч < с цикл
		сч = сч + 1;		
		СимволСтроки = Сред(Наименование, сч, 1);
		Если СимволСтроки = Врег(СимволСтроки) Тогда
			Наименование2 = Наименование2 + " " + НРег(СимволСтроки);
		Иначе
			Наименование2 = Наименование2 + СимволСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Наименование2);
	
	Возврат Наименование;
	
КонецФункции //ПолучитьКрасивоеНаименованиеОбъекта

Функция   ПолучитьТекущуюСредуВыполнения() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Возврат 1;
	#ИначеЕсли Сервер Тогда
		
		Возврат 2;
	#ИначеЕсли ВнешнееСоединение Тогда
		
		Возврат 3;
	#ИначеЕсли ТонкийКлиент Тогда
		
		Возврат 4;
	#ИначеЕсли ВебКлиент Тогда
		
		Возврат 5;
	#Иначе
		
		Возврат 0;
	#КонецЕсли
	
	
КонецФункции   

&НаСервере
Функция   ПолучитьДополнительныеРеквизитыНоменклатурныхГрупп(Знач НоменклатурнаяГруппа = Неопределено, Знач Сворачивать = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ НоменклатурныеГруппыРеквитыНоменклатуры.Ссылка,
	|	НоменклатурныеГруппыРеквитыНоменклатуры.НомерСтроки,
	|	НоменклатурныеГруппыРеквитыНоменклатуры.ДополнительныйРеквизит,
	|	НоменклатурныеГруппыРеквитыНоменклатуры.ЗначениеПоУмолчанию,
	|	НоменклатурныеГруппыРеквитыНоменклатуры.ОСтроке
	|ИЗ Справочник.НоменклатурныеГруппы.РеквитыНоменклатуры КАК НоменклатурныеГруппыРеквитыНоменклатуры ";
	
	если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ НоменклатурныеГруппыРеквитыНоменклатуры.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", НоменклатурнаяГруппа);  	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		
		Результат = РезультатЗапроса.Выгрузить();
		
		Результат.Сортировать("НомерСтроки");
		
		Если Сворачивать Тогда
			
			РезультатСвернутый = Новый ТаблицаЗначений;			
			РезультатСвернутый.Колонки.Добавить("ИмяДопРеквизита");
			НомерСтроки = -1;
			
			Для Каждого СтрокаРезультата Из Результат Цикл
				Если НЕ СтрокаРезультата.НомерСтроки = НомерСтроки тогда
					
					СтрокаСвернутогоРезультата = РезультатСвернутый.Добавить();
					НомерСтроки = СтрокаРезультата.НомерСтроки;	
				КонецЕсли;
				ДополнительныйРеквизит = СокрЛП(СтрокаРезультата.ДополнительныйРеквизит);
				Если Найти(СтрокаСвернутогоРезультата.ИмяДопРеквизита, ДополнительныйРеквизит) = 0 Тогда
					СтрокаСвернутогоРезультата.ИмяДопРеквизита = СокрЛП("" + СтрокаСвернутогоРезультата.ИмяДопРеквизита + " " + ДополнительныйРеквизит);
				КонецЕсли;
				
			КонецЦикла;
			
			Результат = РезультатСвернутый;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьМассивНаименованийДополнительныхРеквизитов

&НаСервере
Функция   ПолучитьТаблицуОбъектовДоступа() Экспорт
	
	ТаблицаОбъектовДоступа = Новый ТаблицаЗначений;
	ТаблицаОбъектовДоступа.Колонки.Добавить("КодПрава");
	ТаблицаОбъектовДоступа.Колонки.Добавить("ОбъектДоступа");
	ТаблицаОбъектовДоступа.Колонки.Добавить("УровеньДоступаПоУмолчанию");
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000100";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возможность управлять доступом пользователей");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000150";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возможность менять общие настройки");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000200";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Номенклатуры");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000300";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Номенклатуры");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000305";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты по движению товаров");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000310";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Инвентаризации");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000350";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Номенклатурные Группы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСертификатовНоменклатуры") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000360";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Сертификатов и гигиенических заключений");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьИнструментРабочееМестоОператораКассы") Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000365";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Ассортимент для рабочего места оператора Кассы");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000370";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Движений товара");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УчетТоваровПереданныхОтНасКомиссионерамДляКомиссионнойТорговли") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000380";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ данным по товарам переданным на комиссию");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000400";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справоник Виды Цен");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	ВестиУчетПоКлиентам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам");
	Если ВестиУчетПоКлиентам Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000500";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000600";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Клиента");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000605";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по взаиморасчетам с Клиентами");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000607";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Клиента");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	ВестиУчетПоПоставщикам = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам");
	Если ВестиУчетПоПоставщикам Тогда		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000650";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Поставщиков");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000655";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Поставщика");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000656";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по взаиморасчетам с Поставщиками");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "00065А";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к журналу документов Поставщика");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ВестиУчетПоКлиентам 
		ИЛИ ВестиУчетПоПоставщикам Тогда
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000657";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Взаимозачета долга контрагентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000660";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Договоров с Контрагентами");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000665";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Договора с Контрагентом");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьДокументыВыполненияРабот") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000690";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Выполнения работ");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОбъектовКлиентов") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000700";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Объектов Клиентов");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		КонецЕсли;	
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "000790";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Доступ к Полному журналу документов");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000800";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Складов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000810";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Перемещения товаров");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000890";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы движения денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьРегистрациюПриемаИВыдачиДенегПрямоВДокументахРасходаИПрихода") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000892";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Приходование денег при реализации");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
			
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000894";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Расходование денег при оприходовании");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		КонецЕсли;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000895";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчеты по движению денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "000900";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Статей движения денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "000950";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Хранилищ денег");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;	
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001400";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Сотрудников");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
			
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001450";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заработная плата сотрудников");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001000";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Формул");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСобственныхЮридическихЛиц") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001100";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Собственных юридических лиц");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001150";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Организации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПартийПриобретения") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001200";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Партий приобретения");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001250";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Партии приобретения");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремя") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001290";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Оказания услуг за время");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетОказанияУслугЗаВремяСОпределеннымиПозициямиНомерами") Тогда
			СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
			СтрокаДоступа.КодПрава		= "001300";
			СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Позиций оказания услуг за время");
			СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьКомплектацию") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001500";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Список Спецификаций");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001550";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Карточка Спецификации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
		
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001560";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Комплектации");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетСредствПредприятия") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001600";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Справочник Средств предприятия");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001700";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Поступления товаров и услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001750";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Заказы Поставщикам");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "001800";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Расходования товаров и реализации услуг");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗаказовПоставщикам") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "001850";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Заказы Клиентов");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЕстьПринтер") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002100";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Печать документов и карточек справочников");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002200";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Корректировки");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002300";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменение цен в документах");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002350";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы установки цен");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановыхПоказателейПродаж") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002400";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Планы продаж");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановДоходоВИРасходов") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002450";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы Планы расходов и доходов денег");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	КонецЕсли;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002500";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Полный журнал документов");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ТолькоЧтение;
	
	СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
	СтрокаДоступа.КодПрава		= "002600";
	СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Экономические отчеты, отчет руководителю");
	СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.НетДоступа;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспорт") Тогда
		СтрокаДоступа = ТаблицаОбъектовДоступа.Добавить();
		СтрокаДоступа.КодПрава		= "002700";
		СтрокаДоступа.ОбъектДоступа = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Импорт - экспорт");
		СтрокаДоступа.УровеньДоступаПоУмолчанию = Перечисления.УровниДоступа.ПолныйДоступ;
	КонецЕсли;
	
	Возврат ТаблицаОбъектовДоступа;
	
КонецФункции 

&НаСервере
Функция   ПолучитьУровеньДоступа(Знач КодПрава, Знач ТекущийПользователь = Неопределено) Экспорт
	
	Результат = Новый Структура("УровеньДоступа", перечисления.УровниДоступа.ПолныйДоступ);
	Результат.Вставить("ОбъектДоступа", "");
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		НайтиПраво = ТекущийПользователь.Доступ.Найти(КодПрава, "КодПрава");
		Если не НайтиПраво = Неопределено Тогда
			Результат.УровеньДоступа = НайтиПраво.УровеньДоступа;
			Результат.ОбъектДоступа  = НайтиПраво.ОбъектДоступа;
			Результат.Вставить("УсловиеДоступа", НайтиПраво.УсловиеДоступа);			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьУровеньДоступа

&НаСервере
Функция   ПолучитьОтборыДоступа(Знач ИмяОбъектаДляОтбора, Знач ТекущийПользователь = Неопределено, Знач ДопТип = "") Экспорт
	
	СписокОтборов = Неопределено;
	
	Если ЗначениеЗаполнено(ИмяОбъектаДляОтбора)
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьСистемуУправленияДоступом") Тогда
		
		Если ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыДвиженийТовара" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыКлиента" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ДокументыПоставщика" Тогда
			ИмяОбъектаДляОтбора = "Документ.Документ.ПоступленияТовара";
		ИначеЕсли ИмяОбъектаДляОтбора = "ЖурналДокументов.ПолныйЖурнал" Тогда
			ИмяОбъектаДляОтбора = "Документ.РасходыТовара";
		КонецЕсли;
		
		Если ТекущийПользователь = Неопределено Тогда
			ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПользователиПринудительныйОтборДанных.ИмяОбластиОтбора,
		|	ПользователиПринудительныйОтборДанных.ЗначениеУсловия,
		|	ПользователиПринудительныйОтборДанных.УсловиеОтбора,
		|	ПользователиПринудительныйОтборДанных.РеквизитОбъекта,
		|	ПользователиПринудительныйОтборДанных.ОтборИспользуется
		|ИЗ Справочник.Пользователи.ПринудительныйОтборДанных КАК ПользователиПринудительныйОтборДанных
		|ГДЕ ПользователиПринудительныйОтборДанных.ИмяОбластиОтбора = &ОбластьОтбора
		|	И ПользователиПринудительныйОтборДанных.Ссылка = &Пользователь";
		
		Запрос.УстановитьПараметр("ОбластьОтбора", ИмяОбъектаДляОтбора + ДопТип);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СписокОтборов = Новый СписокЗначений;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЭлементСписка = Новый Структура;		
				ЭлементСписка.Вставить("РеквизитОбъекта", ВыборкаДетальныеЗаписи.РеквизитОбъекта);
				
				УсловиеОтбора = СокрЛП(ВыборкаДетальныеЗаписи.УсловиеОтбора);
				
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;	
				Если УсловиеОтбора = "=" Тогда
					//
				ИначеЕсли УсловиеОтбора = "<>" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно;
				ИначеЕсли УсловиеОтбора = ">" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше;
				ИначеЕсли УсловиеОтбора = ">=" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ИначеЕсли УсловиеОтбора = "<" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше;
				ИначеЕсли УсловиеОтбора = "<=" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ИначеЕсли УсловиеОтбора = "В" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				ИначеЕсли УсловиеОтбора = "НВ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
				ИначеЕсли УсловиеОтбора = "С" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
				ИначеЕсли УсловиеОтбора = "НС" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеСодержит;
				ИначеЕсли УсловиеОтбора = "1" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено;
				ИначеЕсли УсловиеОтбора = "0" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ИначеЕсли УсловиеОтбора = "ВИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
				ИначеЕсли УсловиеОтбора = "СИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				ИначеЕсли УсловиеОтбора = "НИ" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии;
				ИначеЕсли УсловиеОтбора = "С-" Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
				иначе
					
					СисИнфо = Новый СистемнаяИнформация;
					Версияприложения = Лев(СтрЗаменить(СисИнфо.Версияприложения, ".", ""), 3);
					Попытка
						Версияприложения = Число(Версияприложения);
						Если Версияприложения >= 835 тогда
							
							Если УсловиеОтбора = "+С" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НачинаетсяС;
							ИначеЕсли УсловиеОтбора = "-С" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
							ИначеЕсли УсловиеОтбора = "НП" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеПодобно;
							ИначеЕсли УсловиеОтбора = "П" Тогда
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Подобно;					
							КонецЕсли;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				ЭлементСписка.Вставить("ВидСравненияКомпоновкиДанных", ВидСравненияОтбора);
				ЭлементСписка.Вставить("ОтборИспользуется", ВыборкаДетальныеЗаписи.ОтборИспользуется);
				ЭлементСписка.Вставить("ЗначениеУсловия", ВыборкаДетальныеЗаписи.ЗначениеУсловия);
				
				СписокОтборов.Добавить(ЭлементСписка);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СписокОтборов;
	
КонецФункции //ПолучитьУровеньДоступа

Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт
	Возврат ОбщийМодульСервер.УНоменклатурыЕстьАналоги(Номенклатура);
КонецФункции

Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт
	Возврат ОбщийМодульСервер.УНоменклатурыЕстьАналоги(Номенклатура);
КонецФункции 

&НаСервере
Функция   СформироватьВидыУсловийДляОтбора() Экспорт
	
	ВидыУсловийДляОтбора = Новый СписокЗначений;
	
	ВидыУсловийДляОтбора.Добавить("=", "=  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("равно") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить("<>", "!= (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ равно") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить(">", ">  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("больше") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить(">=", ">= (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("больше либо равно") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить("<", "<  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("меньше") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить("<=", "<=  (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("меньше либо равно") + ")", Ложь);
	ВидыУсловийДляОтбора.Добавить("1", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заполнено"), Ложь);
	ВидыУсловийДляОтбора.Добавить("0", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ заполнено"), Ложь);
	ВидыУсловийДляОтбора.Добавить("В", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В списке"), Ложь);
	ВидыУсловийДляОтбора.Добавить("НВ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ в списке"), Ложь);
	ВидыУсловийДляОтбора.Добавить("С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Содержит"), Ложь);
	ВидыУсловийДляОтбора.Добавить("НС", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ содержит"), Ложь);
	
	ВидыУсловийДляОтбора.Добавить("ВИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В Иерархии"), Ложь);
	ВидыУсловийДляОтбора.Добавить("НИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ В Иерархии"), Ложь);
	ВидыУсловийДляОтбора.Добавить("СИ", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В списке по Иерархии"), Ложь);
	ВидыУсловийДляОтбора.Добавить("С-", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ В списке по Иерархии"), Ложь);
	
	СисИнфо = Новый СистемнаяИнформация;
	Версияприложения = Лев(СтрЗаменить(СисИнфо.Версияприложения, ".", ""), 3);
	Попытка
		Версияприложения = Число(Версияприложения);
		Если Версияприложения >= 835 тогда
			ВидыУсловийДляОтбора.Добавить("+С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("начинается С"), Ложь);
			ВидыУсловийДляОтбора.Добавить("-С", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ начинается С"), Ложь);
			ВидыУсловийДляОтбора.Добавить("П", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("подобно"), Ложь);
			ВидыУсловийДляОтбора.Добавить("НП", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НЕ подобно"), Ложь);	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ВидыУсловийДляОтбора;
	
КонецФункции

&НаСервере
Функция   СформироватьПереченьОбъектовБазыДанных() Экспорт
	
	ОбъектыБазыДанных = Новый СписокЗначений;
	
	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СПРАВОЧНИКИ") + "..", Ложь);
	
	Для Каждого СправочникИзМетаДанных Из Метаданные.Справочники Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, Ложь);
	КонецЦикла;
	
	ОбъектыБазыДанных.Добавить("", " ", Ложь);
	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДОКУМЕНТЫ") + "..", Ложь);
	
	Для Каждого СправочникИзМетаДанных Из Метаданные.Документы Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, Ложь);
	КонецЦикла;
	Если Константы.ВестиУчетЗаказовКлиентов.Получить() Тогда
		ОбъектыБазыДанных.Добавить("РасходыТовара" + "ЗаказКлиента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы Клиентов"), Ложь);
	КонецЕсли;
	Если Константы.ВестиУчетЗаказовПоставщикам.Получить() Тогда
		ОбъектыБазыДанных.Добавить("ПоступленияТовара" + "ЗаказПоставщику", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы Поставщикам"), Ложь);
	КонецЕсли;
	Если Константы.ВестиУчетЗарплатыСотрудников.Получить() Тогда
		ОбъектыБазыДанных.Добавить("ДвиженияДенег" + "Зарплата", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы заработной платы"), Ложь);
	КонецЕсли;
	ОбъектыБазыДанных.Добавить("КорректировкиИРегистрацияОстатков" + "Взаимозачет", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы взаимозачета"), Ложь);
	
	ОбъектыБазыДанных.Добавить("", " ", Ложь);
	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("РЕГИСТРЫ") + "..", Ложь);
	
	Для Каждого СправочникИзМетаДанных Из Метаданные.РегистрыСведений Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, Ложь);
	КонецЦикла;
	Для Каждого СправочникИзМетаДанных Из Метаданные.РегистрыНакопления Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, Ложь);
	КонецЦикла;
	
	Возврат ОбъектыБазыДанных;
	
КонецФункции 

Функция   ПолучитьТипВладельца(Знач ОбъектСсылка) Экспорт
	
	Возврат ОбщийМодульПовтор.ПолучитьИмяДополнительногоРеквизита(ОбъектСсылка).ЭтоРеквизитДляОбъекта;
	
КонецФункции //ПолучитьТипВладельца

&НаСервере
Функция   ПолучитьАвтоХранилищеДенегПоВалюте(Знач Валюта, Знач ХранилищеДенег = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХранилищеДенег)
		ИЛИ НЕ ХранилищеДенег.Валюта = Валюта Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ХранилищаДенег.Ссылка
		|ИЗ Справочник.ХранилищаДенег КАК ХранилищаДенег
		|ГДЕ ХранилищаДенег.Валюта = &Валюта		
		|УПОРЯДОЧИТЬ ПО ХранилищаДенег.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Валюта", Валюта);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ХранилищеДенег = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ХранилищеДенег;
	
КонецФункции //ПолучитьАвтоХранилищеДенегПоВалюте
