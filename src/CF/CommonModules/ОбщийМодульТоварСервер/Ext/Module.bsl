// sza160329-0626 
// sza151205-2118
// sza151111-1631
// sza150720-2258
// sza150604-0330
// sza150529-1729
// sza150520-1256
// sza150510-0248
// sza150403-1753 ППФ
// sza150303-1536 число мест
// sza150208-1602
// sza150112-1803 фикс
// sza150109-2012
// sza141228-2129
// sza141222-1358
// sza141202-1416
// sza141201-0019
// sza141124-2238
// sza141117-1454
// sza141117-0309
// sza141115-2252
// sza141101-0306 :
// sza141015-1439
// sza141011-2125
// sza141009-0147
// sza140703-2353  косметика
// sza140612-1545 :
// ыяф131205

Функция   ВычислитьСуммуНакопления(Знач Ваучер, Знач Номенклатура = Неопределено, Знач Сумма = 0, Знач Склад = Неопределено, Знач Дата = Неопределено) Экспорт

	Результат = 0;
	Если ЗначениеЗаполнено(Ваучер) Тогда
		ВаучерПодходит = ИСТИНА;
		Процент = Ваучер.НоминалПроцент;

		Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
			И ЗначениеЗаполнено(Ваучер.ДатаОкончания) Тогда

			Если Дата = Неопределено Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;

			Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
				И Дата < Ваучер.ДатаНачала Тогда

				ВаучерПодходит = ЛОЖЬ;
			КонецЕсли;

			Если ЗначениеЗаполнено(Ваучер.ДатаОкончания)
				И Дата > Ваучер.ДатаОкончания Тогда

				ВаучерПодходит = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;

		Если ВаучерПодходит Тогда
			Если ЗначениеЗаполнено(Номенклатура) Тогда

				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
					И НЕ Ваучер.ДляНоменклатурныхГрупп.Количество() = 0 Тогда

					ВаучерПодходит = ЛОЖЬ;

					Для Каждого СтрокаНоменклатурныхГрупп Из Ваучер.ДляНоменклатурныхГрупп Цикл
						Если СтрокаНоменклатурныхГрупп.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа Тогда
							ВаучерПодходит = ИСТИНА;
							Если НЕ СтрокаНоменклатурныхГрупп.НеНакапливать Тогда
								Процент = СтрокаНоменклатурныхГрупп.ПроцентСкидки;
							Иначе
								Процент = 0;
							КонецЕсли;

							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				Если ВаучерПодходит
					И НЕ Ваучер.ДляНоменклатурыИЕеГрупп.Количество() = 0 Тогда

					ВаучерПодходит = ЛОЖЬ;

					Для Каждого СтрокаНоменклатуры Из Ваучер.ДляНоменклатурыИЕеГрупп Цикл

						Если (НЕ СтрокаНоменклатуры.Номенклатура.ЭтоГруппа
							И СтрокаНоменклатуры.Номенклатура = Номенклатура)
							ИЛИ (СтрокаНоменклатуры.Номенклатура.ЭтоГруппа
							И Номенклатура.ПринадлежитЭлементу(СтрокаНоменклатуры.Номенклатура)) Тогда

							ВаучерПодходит = ИСТИНА;

							Если НЕ СтрокаНоменклатуры.НеНакапливать Тогда
								Процент = СтрокаНоменклатуры.ПроцентСкидки;
							Иначе
								Процент = 0;
							КонецЕсли;

							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			Если ВаучерПодходит
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
				И ЗначениеЗаполнено(Склад)
				И НЕ Ваучер.ДляСкладов.Количество() = 0 Тогда

				ВаучерПодходит = ЛОЖЬ;

				Для Каждого СтрокаСклада Из Ваучер.ДляСкладов Цикл
					Если СтрокаСклада.Склад = Склад Тогда
						ВаучерПодходит = ИСТИНА;
						Если НЕ СтрокаСклада.НеНакапливать Тогда
							Процент = СтрокаСклада.ПроцентСкидки;
						Иначе
							Процент = 0;
						КонецЕсли;

						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ВаучерПодходит Тогда
				Результат = Сумма * Процент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Вычислить сумму накопления

Функция   ВычислитьЧислоМест(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Количество = 0, Знач ОкруглятьВБольшуюСтрону = ИСТИНА) Экспорт

	НаОдноМесто = 1;

	Если ЗначениеЗаполнено(ЕдиницаИзмерения)
		И НЕ ЕдиницаИзмерения.НаОдноМесто = 0 Тогда

		НаОдноМесто = Номенклатура.НаОдноМесто;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура)
		И НЕ Номенклатура.НаОдноМесто = 0 Тогда

		НаОдноМесто = Номенклатура.НаОдноМесто;
	КонецЕсли;

	ЧислоМест = Количество / НаОдноМесто;

	Если ОкруглятьВБольшуюСтрону Тогда
		Если НЕ ЧислоМест = Цел(ЧислоМест) Тогда
			ЧислоМест = Цел(ЧислоМест) + 1;
		КонецЕсли;
	Иначе
		ЧислоМест = Цел(ЧислоМест);
	КонецЕсли;

	Возврат ЧислоМест;

КонецФункции // Вычислить число мест

Процедура ДополнитьСтрокуПодстрокой(СтрокаДляДополнения, Знач СтрокаДополнения, Знач ЧислоСимволовНеМенее = 1, Знач ДополнятьСзади = ЛОЖЬ)

	Если НЕ СтрокаДополнения = " " Тогда
		СтрокаДляДополнения = СокрЛП(СтрокаДляДополнения);
	КонецЕсли;

	Если НЕ ПустаяСтрока(СтрокаДополнения) Тогда
		Пока СтрДлина(СтрокаДляДополнения) < ЧислоСимволовНеМенее Цикл
			Если ДополнятьСзади Тогда
				СтрокаДляДополнения = СтрокаДляДополнения + СтрокаДополнения;
			Иначе
				СтрокаДляДополнения = СтрокаДополнения + СтрокаДляДополнения;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьШтрихКод(Знач ШтрихКод, Знач Номенклатура, Знач ТипШтрихКодов = Неопределено, Знач СерияНоменклатуры = Неопределено) Экспорт

	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		Если НЕ ЗначениеЗаполнено(ТипШтрихКодов) Тогда
			
			ТипШтрихКодовПоОпределению = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(ШтрихКод);
			Если НЕ ПустаяСтрока(ТипШтрихКодовПоОпределению) Тогда
				ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.НайтиПоНаименованию(ТипШтрихКодовПоОпределению);
				Если НЕ ЗначениеЗаполнено(ТипШтрихКодов) Тогда
					ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;
				КонецЕсли;
			Иначе
				ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;
			КонецЕсли;
		КонецЕсли;

		ШтрихКодРегистр = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		ШтрихКодРегистр.Активность 		= ИСТИНА;
		ШтрихКодРегистр.Номенклатура 	= Номенклатура;
		ШтрихКодРегистр.ТипШтрихКода 	= ТипШтрихКодов;
		ШтрихКодРегистр.ШтрихКод 		= ШтрихКод;
		ШтрихКодРегистр.СерияНоменклатуры = СерияНоменклатуры;
		Попытка
			ШтрихКодРегистр.Записать(ИСТИНА);
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи штрихкода") + ": " + ШтрихКод + " - " + ТекстОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // Зарегистрировать ШтрихКод

Процедура ИзменениеКонстантыИспользованияНаборовПередЗаписью(Знач Источник, Отказ) Экспорт

	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка", ИСТИНА) Тогда

		Если НЕ Отказ
			И НЕ Источник.Значение Тогда // отключают наборы

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КорректировкиИРегистрацияОстатковТовары.Номенклатура
			|ИЗ Документ.КорректировкиИРегистрацияОстатков.Товары КАК КорректировкиИРегистрацияОстатковТовары
			|ГДЕ КорректировкиИРегистрацияОстатковТовары.Ссылка.Проведен = ИСТИНА
			|	И КорректировкиИРегистрацияОстатковТовары.Номенклатура.ЭтоНабор = ИСТИНА
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1 ПеремещенияТовараТовары.Номенклатура
			|ИЗ Документ.ПеремещенияТовара.Товары КАК ПеремещенияТовараТовары
			|ГДЕ ПеремещенияТовараТовары.Ссылка.Проведен = ИСТИНА
			|	И ПеремещенияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Номенклатура
			|ИЗ	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
			|ГДЕ ПоступленияТовараТовары.Ссылка.Проведен = ИСТИНА
			|	И ПоступленияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1 РасходыТовараТовары.Номенклатура
			|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
			|ГДЕ РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
			|	И РасходыТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА";

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности отменить использование Наборов! Они уже участвуют в проведенных документах."), ,);
				КонецЕсли;

				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ПолучитьНаименованиеГруппыПоПервомуСлову(Знач Наименование, Знач НеСоздавать = ЛОЖЬ) Экспорт

	Наименование = СокрЛП(Наименование);
	Если НЕ ПустаяСтрока(Наименование) Тогда
		КонецСлова = Найти(Наименование, " ");
		Если КонецСлова = 0 Тогда
			КонецСлова = Найти(Наименование, ",");
			Если КонецСлова = 0 Тогда
				КонецСлова = Найти(Наименование, ";");
				Если КонецСлова = 0 Тогда
					КонецСлова = Найти(Наименование, ".");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ КонецСлова = 0 Тогда
			Наименование = Лев(Наименование, КонецСлова);
		КонецЕсли;

		Если ПустаяСтрока(Наименование) Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОбщийМодульПовтор.НайтиГруппуНоменклатурыПоНаименованию(Наименование, НеСоздавать);
		КонецЕсли;
	Иначе
		Возврат неопределено;
	КонецЕсли;

КонецФункции // Наименование Группы По Первому Слову

Функция   НаименованиеЭтойНоменклатурнойГруппыНазначается(Знач НоменклатурнаяГруппа) Экспорт
	Возврат ЗначениеЗаполнено(НоменклатурнаяГруппа) И ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы);
КонецФункции

Функция   НайтиНоменклатуруПоАртикулу(Знач Артикул, Знач ТочноеСоответствие = ЛОЖЬ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Артикул " + ?(ТочноеСоответствие, " = ", " ПОДОБНО ") + "&Артикул";
	Запрос.УстановитьПараметр("Артикул", Артикул);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе

		Возврат неопределено;
	КонецЕсли;

КонецФункции

Функция   НапечататьЭтикетку(Знач СтруктураПечати,
	Знач ТабДокОбщийРезультат = Неопределено,
	Знач ЭтикеткаДляОднойНоменклатуры = ИСТИНА,
	Знач ЧислоЭтикетокНаСтраницеРегулируетсяРанее = ЛОЖЬ) Экспорт

	ИспользоватьШтрихКоды  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	КоличествоВыведено     = 0;
	НеВыводитьРазделитель  = ЛОЖЬ;

	Если ТабДокОбщийРезультат = Неопределено Тогда
		ТабДокОбщийРезультат = Новый ТабличныйДокумент;
		ТабДокОбщийРезультат.ИмяПараметровПечати   = "ПАРАМЕТРЫ_ПЕЧАТИ_Мелкая1" + СокрЛП(ИмяКомпьютера());
		ТабДокОбщийРезультат.КлючПараметровПечати  = ТабДокОбщийРезультат.ИмяПараметровПечати;
		ТабДокОбщийРезультат.КоличествоЭкземпляров = 1;
	КонецЕсли;

	СуммаТаб = Новый ТабличныйДокумент;
	СуммаТаб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СУМТАБ" + СокрЛП(ИмяКомпьютера());
	СуммаТаб.КлючПараметровПечати = СуммаТаб.ИмяПараметровПечати;
	ПроизвольнаяПечатнаяФорма = Неопределено;
	СтруктураПечати.Свойство("ПроизвольнаяПечатнаяФорма", ПроизвольнаяПечатнаяФорма);

	Если ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
		ЧислоЭтикетокНаЛистеПоГоризонтали = 1;
		ЧислоЭтикетокНаЛистеПоВертикали   = 1;
		ЧислоЭтикетокНаСтранице 		  = 1;
	Иначе
		ЧислоЭтикетокНаЛистеПоГоризонтали = 0;

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
			И НЕ ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда

			ЧислоЭтикетокНаЛистеПоГоризонтали = ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоГоризонтали;
		КонецЕсли;

		Если ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
			ЧислоЭтикетокНаЛистеПоГоризонтали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоГоризонтали");
			Если ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
				ЧислоЭтикетокНаЛистеПоГоризонтали = 1;
			КонецЕсли;
		КонецЕсли;

		ЧислоЭтикетокНаЛистеПоВертикали = 0;

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
			И НЕ ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда

			ЧислоЭтикетокНаЛистеПоВертикали = ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоВертикали;
		КонецЕсли;

		Если ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
			ЧислоЭтикетокНаЛистеПоВертикали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоВертикали");
			Если ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
				ЧислоЭтикетокНаЛистеПоВертикали = 1;
			КонецЕсли;
		КонецЕсли;

		Если ЭтикеткаДляОднойНоменклатуры Тогда
			ЧислоЭтикетокНаСтранице = ЧислоЭтикетокНаЛистеПоВертикали * ЧислоЭтикетокНаЛистеПоГоризонтали;
		Иначе
			ЧислоЭтикетокНаСтранице = 1;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
		НеВыводитьРазделитель = ПроизвольнаяПечатнаяФорма.ИспользоватьОтступыМасштабИПринтер И ПроизвольнаяПечатнаяФорма.НеВыводитьРазделитель;
		МассивИменПараметровПечати = Новый Массив;
		ВПП = Неопределено; // Все параметры печати
		СтруктураПечати.Свойство("ВсеПараметрыПечати", ВПП);

		Для Каждого СвойствоСтруктурыПечати Из СтруктураПечати Цикл
			ВПП.Вставить(СвойствоСтруктурыПечати.Ключ, СвойствоСтруктурыПечати.Значение);
		КонецЦикла;

		КолонокВСтрокеПечати = 0;
		СтруктураПечати.Свойство("КолонокВСтрокеПечати", КолонокВСтрокеПечати);
		ЗапретитьСозданиеФорматаКолонок = НЕ КолонокВСтрокеПечати = 0;
		СуммаТаб = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, ВПП, СуммаТаб, , , , , , ЧислоЭтикетокНаСтраницеРегулируетсяРанее, ЗапретитьСозданиеФорматаКолонок);
		ОбъектГотов = ИСТИНА;
	Иначе
		ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено;
		ДополнительнаяСтрокаЭтикетки 		= "";
		ВывестиДополнительнуюСтрокуЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВывестиДополнительнуюСтрокуЭтикетки");
		Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");

		Если ВывестиДополнительнуюСтрокуЭтикетки
			И СтруктураПечати.Свойство("ДополнительнаяСтрокаЭтикетки", ДополнительнаяСтрокаЭтикетки)
			И ЗначениеЗаполнено(ДополнительнаяСтрокаЭтикетки)
			И НЕ ПустаяСтрока(ДополнительнаяСтрокаЭтикетки) Тогда

			РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаДополнительнойСтрокиЭтикетки");

			Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
			Иначе
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок8");
			КонецЕсли;

			ДополнительнаяСтрокаЭтикеткиОбласть.Параметры.ТекстЗаголовка = ДополнительнаяСтрокаЭтикетки;
		КонецЕсли;

		ЗаголовокЭтикеткиОбласть = Неопределено;
		ТекстЗаголовка = "";

		Если СтруктураПечати.Свойство("ТекстЗаголовка", ТекстЗаголовка)
			И ЗначениеЗаполнено(ТекстЗаголовка)
			И НЕ ПустаяСтрока(ТекстЗаголовка) Тогда

			РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаЗаголовкаЭтикетки");

			Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
			Иначе
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок8");
			КонецЕсли;

			ЗаголовокЭтикеткиОбласть.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбъектГотов = ИСТИНА;
		Иначе
			ОбъектГотов = ЛОЖЬ;
		КонецЕсли;

		Если ИспользоватьШтрихКоды
			И НЕ ПустаяСтрока(СтруктураПечати.ШтрихКод) Тогда

			ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(СуммаТаб, СтруктураПечати);
			ОбъектГотов = ИСТИНА;
		КонецЕсли;

		Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>12 Тогда
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
			Иначе
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С");
			КонецЕсли;
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>16 Тогда
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
			Иначе
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
			КонецЕсли;
		Иначе
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>20 Тогда

				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С3");
			Иначе
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
			КонецЕсли;
		КонецЕсли;

		ЭтикеткаОбласть.Параметры.ТекстПодШтрихКодом = СтруктураПечати.ТекстСШтрихКодом;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЭтикеткаОбласть);
		СуммаТаб.Вывести(ЭтикеткаОбласть, 0);

		Если ВывестиДополнительнуюСтрокуЭтикетки
			И НЕ ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено Тогда

			РазмещениеДополнительнойСтрокиЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмещениеДополнительнойСтрокиЭтикетки");

			Если РазмещениеДополнительнойСтрокиЭтикетки = 1 Тогда // по центру
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
					ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
					СуммаТаб = ЗаголовокЭтикеткиОбласть;
				Иначе
					ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);
					СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
				КонецЕсли;
			ИначеЕсли РазмещениеДополнительнойСтрокиЭтикетки = 2 Тогда // снизу
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
					ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
					СуммаТаб = ЗаголовокЭтикеткиОбласть;
				Иначе
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					СуммаТаб.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
				КонецЕсли;
			Иначе // сверху
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда

					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЗаголовокЭтикеткиОбласть);
					ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(ЗаголовокЭтикеткиОбласть);
				КонецЕсли;

				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
				ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);
				СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
			КонецЕсли;

		ИначеЕсли НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
			ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
			СуммаТаб = ЗаголовокЭтикеткиОбласть;
		КонецЕсли;

		ОбъектГотов = ИСТИНА;
	КонецЕсли; //формирование макета одной этикетки

	Если НЕ ЧислоЭтикетокНаСтранице = 1
		И (НЕ (ЧислоЭтикетокНаЛистеПоВертикали = 1
		И ЧислоЭтикетокНаЛистеПоГоризонтали = 1)) Тогда

		ТекущаяПозицияПоГоризонтали = 1;
		ТекущаяПозицияПоВертикали 	= 1;
		Строка = Новый ТабличныйДокумент;
		Строка.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
		Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;

		Пока ТекущаяПозицияПоВертикали <= ЧислоЭтикетокНаЛистеПоВертикали Цикл
			Пока ТекущаяПозицияПоГоризонтали <= ЧислоЭтикетокНаЛистеПоГоризонтали Цикл
				Строка.Присоединить(СуммаТаб);
				КоличествоВыведено = КоличествоВыведено + 1;

				Если КоличествоВыведено = СтруктураПечати.Количество Тогда
					Прервать;
				КонецЕсли;

				ТекущаяПозицияПоГоризонтали = ТекущаяПозицияПоГоризонтали + 1;
			КонецЦикла;

			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Строка);
			ТабДокОбщийРезультат.Вывести(Строка);
				Если КоличествоВыведено = СтруктураПечати.Количество Тогда
				Прервать;
			КонецЕсли;

			Строка = Новый ТабличныйДокумент;
			Строка.ИмяПараметровПечати  = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
			Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;
			ТекущаяПозицияПоГоризонтали = 1;
			ТекущаяПозицияПоВертикали 	= ТекущаяПозицияПоВертикали + 1;

			Если НЕ НеВыводитьРазделитель
				И ТекущаяПозицияПоВертикали > ЧислоЭтикетокНаЛистеПоВертикали Тогда

				ТекущаяПозицияПоВертикали = 1;
				ТабДокОбщийРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;

		ОбъектГотов = ИСТИНА;
	ИначеЕсли ОбъектГотов Тогда
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
		ТабДокОбщийРезультат.Вывести(СуммаТаб);
	КонецЕсли;

	Если ОбъектГотов Тогда
		Если НЕ ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда

			Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
				И ПроизвольнаяПечатнаяФорма.ИспользоватьОтступыМасштабИПринтер Тогда

				ОбщийМодульТекстСервер.УстановитьПараметрыПечатиДляПроизвольнойПечатнойФормы(ТабДокОбщийРезультат, ПроизвольнаяПечатнаяФорма);
			Иначе
				ТабДокОбщийРезультат.РазмерКолонтитулаСверху = 0;
				ТабДокОбщийРезультат.РазмерКолонтитулаСнизу  = 0;
				ТабДокОбщийРезультат.ПолеСверху 	= 0;
				ТабДокОбщийРезультат.ПолеСлева 		= 0;
				ТабДокОбщийРезультат.ПолеСнизу 		= 0;
				ТабДокОбщийРезультат.ПолеСправа 	= 0;
				ТабДокОбщийРезультат.АвтоМасштаб 	= ИСТИНА;
				ИмяПринтера = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеПринтераШтрихКодов");

				Если ЗначениеЗаполнено(ИмяПринтера) Тогда
					ТабДокОбщийРезультат.ИмяПринтера = ИмяПринтера;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
				Если (СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице) > 1 Тогда
					ТабДокОбщийРезультат.КоличествоЭкземпляров = Окр(СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Макет = Неопределено;
	КонецЕсли;

	Возврат ТабДокОбщийРезультат;

КонецФункции

Функция   ОбнаружитьЕдиницуНоменклатуры(Знач Номенклатура, Знач Наименование) Экспорт

	Если ЗначениеЗаполнено(Наименование) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЕдиницыИзмерения.Ссылка
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ ЕдиницыИзмерения.Наименование = &Наименование
		|	И ЕдиницыИзмерения.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();

			Возврат ВыборкаДетальныеЗаписи.сылка;
		КонецЕсли;
	КонецЕсли;

	Возврат ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");

КонецФункции // Обнаружить Единицу Номенклатуры

Функция   НайтиСериюНоменклатуры(Знач Номенклатура,
	Знач НаименованиеСерии,
	Знач СоздаватьНовую = ЛОЖЬ) Экспорт

	Результат = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");

	Если НЕ ПустаяСтрока(НаименованиеСерии) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Ссылка
		|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ СерииНоменклатуры.Наименование = &Наименование
		|	И СерииНоменклатуры.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Наименование", НаименованиеСерии);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.сылка;
		ИначеЕсли СоздаватьНовую Тогда
			НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НоваяСерия.Наименование = НаименованиеСерии;
			НоваяСерия.Владелец 	= Номенклатура;
			НоваяСерия.Записать();
			Результат = НоваяСерия.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Обнаружить Серию Номенклатуры

Функция   НайтиСпецификациюНоменклатуры(Знач Номенклатура, Знач Дата = Неопределено) Экспорт

	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Результат = ПредопределенноеЗначение("Справочник.Спецификации.ПустаяСсылка");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СпецификацииТовары.Ссылка
	|ИЗ Справочник.Спецификации.Товары КАК СпецификацииТовары
	|ГДЕ СпецификацииТовары.Номенклатура = &Номенклатура
	|	И СпецификацииТовары.Ссылка.НеАктуальна = ЛОЖЬ
	|	И СпецификацииТовары.Ссылка.Дата <= &Дата
	|УПОРЯДОЧИТЬ ПО СпецификацииТовары.Ссылка.Дата УБЫВ,
	|	СпецификацииТовары.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Ссылка;

		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ОчиститьТаблицуТоварыНаСервере(Знач Ссылка) Экспорт

	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла Ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // Очистить Товары На Сервере

Процедура ОкруглитьДанныеВТаблицеТовары(Знач СсылкаНаОбъектБазыДанных,
	Знач Коэффициент,
	Знач ВидЦенОкруглятьТолькоВБольшуюСторону,
	Знач НаименованиеТаблицы = "ТОВАРЫ") Экспорт

	НаименованиеТаблицы = ВРег(НаименованиеТаблицы);

	Если ЗначениеЗаполнено(СсылкаНаОбъектБазыДанных) Тогда
		ДокументСсылка = СсылкаНаОбъектБазыДанных.ссылка;
		ТипЗнчДокументСсылка = ТипЗнч(ДокументСсылка);
		ПеремещенияТовара 	 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.РасходыТовара");
		ВыполненияРабот		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументСсылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.УстановкиЦен");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументСсылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		ДокументОбъект = СсылкаНаОбъектБазыДанных.ПолучитьОбъект();

		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл
			Цена = СтрокаТовара.Цена;
			Если НЕ Коэффициент = 0 Тогда
				Цена = Цена * (10 * Коэффициент);
			КонецЕсли;

			ЦенаНовая = Окр(Цена);

			Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
				ЦенаЦелая = Цел(Цена);
				Если НЕ ЦенаЦелая = Цена Тогда
					Цена = ЦенаЦелая + 1;
				КонецЕсли;
			ИначеЕсли НЕ Цена = 0 Тогда
				Цена = Окр(Цена);
			КонецЕсли;

			Если НЕ Коэффициент = 0 Тогда
				Цена = Цена / (10 * Коэффициент);
			КонецЕсли;

			СтрокаТовара.Цена = Цена;

			Если НаименованиеТаблицы = "ТОВАРЫ" Тогда
				Если ВыполненияРабот Тогда
					Цена = СтрокаТовара.ЦенаПлан;
					Если НЕ Коэффициент = 0 Тогда
						Цена = Цена * (10 * Коэффициент);
					КонецЕсли;

					ЦенаНовая = Окр(Цена);

					Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
						ЦенаЦелая = цел(Цена);
						Если НЕ ЦенаЦелая = Цена Тогда
							Цена = ЦенаЦелая + 1;
						КонецЕсли;
					ИначеЕсли не цена = 0 Тогда
						Цена = окр(Цена);
					КонецЕсли;

					Если НЕ Коэффициент = 0 Тогда
						Цена = Цена / (10 * Коэффициент);
					КонецЕсли;

					СтрокаТовара.ЦенаПлан = Цена;
				КонецЕсли;

				Если РасходыТовара
					ИЛИ ВыполненияРабот Тогда

					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
						СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, ДокументСсылка.ВидЦен, ДокументСсылка.КлиентПоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
					КонецЕсли;

					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, ДокументСсылка.ВидЦен, ДокументСсылка.КлиентПоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
						КонецЕсли;

						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
						СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);
					КонецЕсли;

				ИначеЕсли ПеремещенияТовара
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков Тогда

					СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;

				ИначеЕсли Инвентаризации
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда

					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, , , , , ДокументСсылка.Склад, ДокументСсылка.Дата); // акция ном

					Если НЕ ПроцентСкидки = 0
						И НЕ СтрокаТовара.Цена = 0 Тогда

						СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
					КонецЕсли;
				ИначеЕсли УстановкиЦен Тогда
					Если СтрокаТовара.Цена = 0 Тогда
						СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);
					КонецЕсли;

					СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла Ошибка") + ": " + ТекстОписаниеОшибки, , СсылкаНаОбъектБазыДанных);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьТоварыНаСервере(Знач СсылкаНаОбъектБазыДанных,
	Знач Коэффициент = 0,
	Знач НаименованиеТаблицы = "ТОВАРЫ",
	Знач БезДопРасчетов = ЛОЖЬ,
	Знач ЭтоПроцентСкидки = ЛОЖЬ) Экспорт

	НаименованиеТаблицы = ВРег(НаименованиеТаблицы);
	БылиИзменения = ЛОЖЬ;

	Если ЗначениеЗаполнено(СсылкаНаОбъектБазыДанных) Тогда
		ДокументСсылка = СсылкаНаОбъектБазыДанных.ссылка;
		ТипЗнчДокументСсылка = ТипЗнч(ДокументСсылка);
		ПеремещенияТовара 	 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.РасходыТовара");
		Тендеры 		 	 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.Тендеры");
		ВыполненияРабот		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументСсылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументСсылка = Тип("ДокументСсылка.УстановкиЦен");
		ОтчетыКомиссионеров  = ТипЗнчДокументСсылка = Тип("ДокументСсылка.ОтчетыКомиссионеров");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументСсылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		ДокументОбъект = СсылкаНаОбъектБазыДанных.ПолучитьОбъект();

		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл
			Если Коэффициент = 0 Тогда

				Если ПеремещенияТовара
					ИЛИ ПоступленияТовара
					ИЛИ РасходыТовара Тогда

					Если НЕ ЭтоПроцентСкидки Тогда
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, ДокументСсылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, ДокументСсылка.Договор, , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);
						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли КорректировкиИРегистрацияОстатков Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, ДокументСсылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, , , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);

					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				ИначеЕсли Инвентаризации Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, ДокументСсылка.Дата, ЛОЖЬ, , , , , СсылкаНаОбъектБазыДанных);

					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				ИначеЕсли Договора Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, ДокументСсылка.Дата, ЛОЖЬ, , , , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);

					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				ИначеЕсли УстановкиЦен Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, ДокументСсылка.Дата, , , , , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);

					Если НЕ СтрокаТовара.СтараяЦена = Цена Тогда
						СтрокаТовара.СтараяЦена = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				ИначеЕсли ВыполненияРабот Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, СтрокаТовара.Дата, ЛОЖЬ,  СтрокаТовара.Количество, ДокументСсылка.Договор, , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);

					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;

					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, ДокументСсылка.ВидЦен, СтрокаТовара.ДатаПлан, ЛОЖЬ,  СтрокаТовара.КоличествоПлан, ДокументСсылка.Договор, , , СсылкаНаОбъектБазыДанных, , СтрокаТовара.ЕдиницаИзмерения);

					Если НЕ СтрокаТовара.ЦенаПлан = Цена Тогда
						СтрокаТовара.ЦенаПлан = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли НЕ Тендеры Тогда
				Цена = СтрокаТовара.Цена * Коэффициент;

				Если НЕ СтрокаТовара.Цена = Цена Тогда
					СтрокаТовара.Цена = Цена;
					БылиИзменения = ИСТИНА;
				КонецЕсли;

				Если ВыполненияРабот Тогда
					Цена = СтрокаТовара.ЦенаПлан * Коэффициент;
					Если НЕ СтрокаТовара.ЦенаПлан = Цена Тогда
						СтрокаТовара.ЦенаПлан = Цена;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НЕ БезДопРасчетов Тогда

				Если РасходыТовара
					ИЛИ ВыполненияРабот Тогда

					Если ЭтоПроцентСкидки Тогда
						Если НЕ СтрокаТовара.ПроцентСкидки = Коэффициент Тогда
							СтрокаТовара.ПроцентСкидки = Коэффициент;
							БылиИзменения = ИСТИНА;
						КонецЕсли;
					Иначе
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда

							ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, ДокументСсылка.ВидЦен, ДокументСсылка.КлиентПоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);

							Если НЕ СтрокаТовара.ПроцентСкидки = ПроцентСкидки Тогда
								СтрокаТовара.ПроцентСкидки = ПроцентСкидки;
								БылиИзменения = ИСТИНА;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

					СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;

					Если НЕ СтрокаТовара.СуммаБезСкидки = СуммаБезСкидки Тогда
						СтрокаТовара.СуммаБезСкидки = СуммаБезСкидки;
						БылиИзменения = ИСТИНА;
					КонецЕсли;

					Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);

					Если НЕ СтрокаТовара.Сумма = Сумма Тогда
						СтрокаТовара.Сумма = Сумма;
						БылиИзменения = ИСТИНА;
					КонецЕсли;

					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, ДокументСсылка.ВидЦен, ДокументСсылка.КлиентПоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
							Если НЕ СтрокаТовара.ПроцентСкидкиПлан = ПроцентСкидкиПлан Тогда
								СтрокаТовара.ПроцентСкидкиПлан = ПроцентСкидкиПлан;
								БылиИзменения = ИСТИНА;
							КонецЕсли;
						КонецЕсли;

						СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;

						Если НЕ СтрокаТовара.СуммаБезСкидкиПлан = СуммаБезСкидкиПлан Тогда
							СтрокаТовара.СуммаБезСкидкиПлан = СуммаБезСкидкиПлан;
							БылиИзменения = ИСТИНА;
						КонецЕсли;

						План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);

						Если НЕ СтрокаТовара.План = План Тогда
							СтрокаТовара.План = План;
							БылиИзменения = ИСТИНА;
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли ПеремещенияТовара
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков
					ИЛИ ОтчетыКомиссионеров Тогда

					Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;

					Если НЕ СтрокаТовара.Сумма = Сумма Тогда
						СтрокаТовара.Сумма = Сумма;
						БылиИзменения = ИСТИНА;
					КонецЕсли;

				ИначеЕсли Инвентаризации
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда

					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, , , , , ДокументСсылка.Склад, ДокументСсылка.Дата); // акция ном

					Если НЕ ПроцентСкидки = 0
						И НЕ СтрокаТовара.Цена = 0 Тогда

						Цена = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);

						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли УстановкиЦен Тогда
					Если Коэффициент = 0 Тогда
						Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);

						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;
						КонецЕсли;
					КонецЕсли;

					РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена;

					Если НЕ СтрокаТовара.РазницаЦены = РазницаЦены Тогда
						СтрокаТовара.РазницаЦены = РазницаЦены;
						БылиИзменения = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Если БылиИзменения Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла Ошибка") + ": " + ТекстОписаниеОшибки, , СсылкаНаОбъектБазыДанных);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПечататьСвоюПечатнуюФорму(ТабДокРезультат, Знач СсылкаНаОбъектПечати, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач ПроизвольнаяПечатнаяФорма) Экспорт

	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	РазрядМетаданных = ""; ИмяМетаданных = "";
	// ниже определяются именно метаданные
	ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.АктВыполненныхРабот, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

	Если ВставлятьРазделительСтраниц Тогда
		ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

КонецПроцедуры

Процедура ПечатьАктаВыполненныхРабот(ТабДокРезультат, Знач СсылкаНаОбъектПечати, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт

	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	РазрядМетаданных = ""; ИмяМетаданных = "";
	ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.АктВыполненныхРабот, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
	Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Возврат;
	КонецЕсли;

	ДокументДляПечати = Новый ТабличныйДокумент;
	ДокументДляПечати.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	ОбластьПечатиШапка = Макет.ПолучитьОбласть("РазделительШапка");
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
	ДокументДляПечати.Вывести(ОбластьПечатиШапка);
	ДокументДляПечати.Область().СоздатьФорматСтрок();
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);

	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;

	Запрос = Новый Запрос;

	Если ЭтоВыполнениеРабот Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.СкладДляОбъектаВыполненияРабот,
		|	ВыполненияРабот.ДатаПоступленияОбъектаРаботНаНашСклад,
		|	ВЫРАЗИТЬ(ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот КАК СТРОКА(1000)) КАК КомментарийПриПоступленииОбъектаРабот,
		|	ВыполненияРабот.ДатаВыдачиОбъектаРаботКлиентуОбратно,
		|	ВыполненияРабот.КомментарийПриВыдачеОбъектаРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВЫРАЗИТЬ(ВыполненияРабот.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ВыполненияРабот.СпособДоставки,
		|	ВыполненияРабот.ТалонТрек,
		|	ВыполненияРабот.КлиентОповещен,
		|	ВыполненияРабот.ТоварОтправлен,
		|	ВыполненияРабот.ДатаОтправки,
		|	ВыполненияРабот.ДатаОповещения,
		|	ВыполненияРабот.ДнейОтсрочки,
		|	ВыполненияРабот.НеПроводить,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВаловаяПрибыль,
		|		ВаловаяПрибыльПлан,
		|		Валюта,
		|		ВалютаПлан,
		|		Дата,
		|		ДатаПлан,
		|		Количество,
		|		КоличествоПлан,
		|		Курс,
		|		КурсПлан,
		|		Номенклатура,
		|		ОСтроке,
		|		План,
		|		ПроцентСкидки,
		|		ПроцентСкидкиПлан,
		|		СерияНоменклатуры,
		|		Склад,
		|		Сотрудник,
		|		Сумма,
		|		СуммаБезСкидки,
		|		СуммаБезСкидкиПлан,
		|		Цена,
		|		ЦенаПлан,
		|		ЕдиницаИзмерения
		|	)
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Ссылка = &Ссылка";
		КлиентПоставщик = СсылкаНаОбъектПечати.Клиент;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик КАК Клиент,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	ВЫРАЗИТЬ(РасходыТовара.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета,
		|	"""" КАК ТипРаботы,
		|	"""" КАК ОбъектКлиента,
		|	"""" КАК Номенклатура
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка = &Ссылка";
		КлиентПоставщик = СсылкаНаОбъектПечати.КлиентПоставщик;
	КонецЕсли;

	Запрос.Параметры.Вставить("Ссылка", СсылкаНаОбъектПечати);

	Выборка = Запрос.Выполнить().Выбрать();
	ИспользоватьРеквизитАртикулНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");

	ПечататьАртикул = ИспользоватьРеквизитАртикулНоменклатуры
	И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую");

	ОсновнаяВалюта  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");

	Если ЭтоВыполнениеРабот Тогда
		ТипРаботы = Выборка.ТипРаботы;
	Иначе
		ТипРаботы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипРаботПоУмолчанию");
	КонецЕсли;

	ЯзыкДокументов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЯзыкПечатныхФорм");

	Если ЗначениеЗаполнено(КлиентПоставщик)
		И ЗначениеЗаполнено(КлиентПоставщик.ЯзыкДокументов) Тогда

		ЯзыкДокументов = КлиентПоставщик.ЯзыкДокументов;

		Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
			ЯзыкДокументов = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	Макет.КодЯзыкаМакета 		= ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
	ОбластьПечатиШапка 			= Макет.ПолучитьОбласть("ШапкаАкта");
	ОбластьПечатиОбъектРабот 	= Макет.ПолучитьОбласть("ОбъектРабот");
	ОбластьПечатиЗаголовокРабот = Макет.ПолучитьОбласть("ЗаголовокРабот");
	ОбластьПечатиСтрокаРабот 	= Макет.ПолучитьОбласть("СтрокаРабот");
	ОбластьПечатиПодвалРабот 	= Макет.ПолучитьОбласть("ПодвалРабот");

	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ДокументДляПечати.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ВыборкаВидЦен = Выборка.ВидЦен;

		Если ЗначениеЗаполнено(ВыборкаВидЦен)
			И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда

			ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.Заполнить(Выборка);
		ОбластьПечатиШапка.Параметры.ПриемПередача = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("приема передачи выполненных работ (услуг)") + " № " + Выборка.Номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			ОбластьПечатиШапка.Параметры.Директор = Выборка.Организация.Руководитель;
		КонецЕсли;

		КлиентПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
		ОбластьПечатиШапка.Параметры.Клиент 	  = КлиентПоставщик;
		ОбластьПечатиШапка.Параметры.ТипРаботы = ТипРаботы;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		ДокументДляПечати.Вывести(ОбластьПечатиШапка, Выборка.Уровень());

		Если ЗначениеЗаполнено(Выборка.ОбъектКлиента) Тогда
			ОбластьПечатиОбъектРабот.ОбъектКлиента = Выборка.ОбъектКлиента;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиОбъектРабот);
			ДокументДляПечати.Вывести(ОбластьПечатиОбъектРабот, Выборка.Уровень());
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			ОбластьПечатиОбъектРабот.ОбъектКлиента = Выборка.Номенклатура;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиОбъектРабот);
			ДокументДляПечати.Вывести(ОбластьПечатиОбъектРабот, Выборка.Уровень());
		КонецЕсли;

		Количество = 0;
		Сумма 	   = 0;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиЗаголовокРабот);
		ДокументДляПечати.Вывести(ОбластьПечатиЗаголовокРабот);
		ВыборкаТовары = Выборка.Товары.Выбрать();

		Пока ВыборкаТовары.Следующий() Цикл
			Номенклатура = ВыборкаТовары.Номенклатура;
			Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
			ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");
			ОбластьПечатиСтрокаРабот.Параметры.Заполнить(ВыборкаТовары);
			ОбластьПечатиСтрокаРабот.Параметры.НоменклатураПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиСтрокаРабот);
			ДокументДляПечати.Вывести(ОбластьПечатиСтрокаРабот, ВыборкаТовары.Уровень());
			Количество = Количество + ВыборкаТовары.Количество;
			Сумма = Сумма + ВыборкаТовары.Сумма;

		КонецЦикла;

		ОбластьПечатиПодвалРабот.Параметры.Заполнить(Выборка);
		ОбластьПечатиПодвалРабот.Параметры.Количество = Количество;
		ОбластьПечатиПодвалРабот.Параметры.Сумма 	 = Сумма;
		ОбластьПечатиПодвалРабот.Параметры.СуммаПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, ВалютаЦены, ЯзыкДокументов);
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиПодвалРабот);
		ДокументДляПечати.Вывести(ОбластьПечатиПодвалРабот);
		ВставлятьРазделительСтраниц = ИСТИНА;

	КонецЦикла;

	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ДокументДляПечати.Область().СоздатьФорматСтрок();
	КонецЕсли;

	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДокументДляПечати);
	ТабДокРезультат.Вывести(ДокументДляПечати);

КонецПроцедуры

Процедура ПечатьГарантийногоТалона(ТабДокРезультат,
	Знач ПараметрыПечати,
	Знач НеОчищатьТабДок = ЛОЖЬ,
	Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт

	ПереченьЭлементов = ПараметрыПечати.ПереченьЭлементов;

	Если НЕ (ПереченьЭлементов.ПечататьГарантийныйТалон
		ИЛИ ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя
		ИЛИ ПереченьЭлементов.ПечататьСписокРаботИсполнителя
		ИЛИ ПереченьЭлементов.ПечататьПодвалРаботИсполнителя
		ИЛИ ПереченьЭлементов.ПечататьКвитанцию
		ИЛИ ПереченьЭлементов.ПечататьГарантийныйТалонККвитанции
		ИЛИ ПереченьЭлементов.ПечататьПоложениеОРемонте
		ИЛИ ПереченьЭлементов.ПечататьЗаказНаряд
		ИЛИ ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта) Тогда

		Возврат;
	КонецЕсли;

	Если НЕ НеОчищатьТабДок Тогда
		ТабДокРезультат.Очистить();
	КонецЕсли;

	Если ВставлятьРазделительСтраниц Тогда
		ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

	ТалонНапечатан 		 = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьГарантийныйТалон Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалон, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ТалонНапечатан  = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	БлокТалонаОтИсполнителя	 = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонБлокОтИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			БлокТалонаОтИсполнителя = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СписокРаботИсполнителя = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонСписокРаботОтИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			СписокРаботИсполнителя = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПодвалРаботИсполнителя = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонПодвалРаботИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПодвалРаботИсполнителя = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПечататьКвитанцию = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьКвитанцию Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонКвитанция, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПечататьКвитанцию = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПоложениеОРемонте = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонПоложениеОРемонте, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат   = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПоложениеОРемонте = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ГарантийныйТалонККвитанции = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонККвитанции, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ГарантийныйТалонККвитанции = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЗаказНаряд = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьЗаказНаряд Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ЗаказНаряд, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ЗаказНаряд = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТехнологическуюКартуРемонта = ЛОЖЬ;

	Если ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ТехнологическаяКарта, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ТехнологическуюКартуРемонта = ИСТИНА;
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Ссылка = ПараметрыПечати.Ссылка;
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;

	Макет  = ПолучитьОбщийМакет("ГарантийныйТалон");

	Запрос = Новый Запрос;
	Если ЭтоВыполнениеРабот Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВЫРАЗИТЬ(ВыполненияРабот.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Склад,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		СерияНоменклатуры,
		|		Сотрудник,
		|		Количество,
		|		Цена,
		|		План,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ВаловаяПрибыль,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	ВЫРАЗИТЬ(РасходыТовара.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Представление,
		|	РасходыТовара.МоментВремени
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка = &Ссылка";
	КонецЕсли;

	Запрос.Параметры.Вставить("Ссылка", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");

	СтруктураДополнительныхПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();

	Если НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда

		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВШапкеДокументовПриПечати;
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;

	КлиентПоставщик 	  = Неопределено;
	КлиентПоставщикСтрока = "";
	ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии");
	ВставлятьРазделительСтраниц = ЛОЖЬ;

	Пока Выборка.Следующий() Цикл
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), СокрЛП(Организация.Адрес), СокрЛП(Организация.ЮридическийАдрес));;
		НашеОКПО 	= Организация.ОКПО;
		Дата 		= Выборка.Дата;
		Сотрудник 	= Выборка.Сотрудник;
		МассивСтрок = Новый Массив;

		Если НЕ ЭтоВыполнениеРабот Тогда
			КлиентПоставщик = Выборка.КлиентПоставщик;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
			ВыборкаТоварыИзЗапроса = Выборка.Товары.Выбрать();
			СЧ = 1;

			Пока ВыборкаТоварыИзЗапроса.Следующий() Цикл

				Если НЕ ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии
					ИЛИ (ЗначениеЗаполнено(ВыборкаТоварыИзЗапроса.Номенклатура)
					И НЕ ВыборкаТоварыИзЗапроса.Номенклатура.ГарантийныйСрокПроизводителя = 0) Тогда

					ВыборкаТовары = Новый Структура;
					ВыборкаТовары.Вставить("НомерСтроки", СЧ);
					Сч = СЧ + 1 ;
					ВыборкаТовары.Вставить("Номенклатура", ВыборкаТоварыИзЗапроса.Номенклатура);
					ВыборкаТовары.Вставить("СерияНоменклатуры", ВыборкаТоварыИзЗапроса.СерияНоменклатуры);
					ВыборкаТовары.Вставить("Количество", ВыборкаТоварыИзЗапроса.Количество);
					ВыборкаТовары.Вставить("Цена", ВыборкаТоварыИзЗапроса.Цена);
					ВыборкаТовары.Вставить("Сумма", ВыборкаТоварыИзЗапроса.Сумма);
					ВыборкаТовары.Вставить("ПроцентСкидки", ВыборкаТоварыИзЗапроса.ПроцентСкидки);
					ВыборкаТовары.Вставить("СуммаБезСкидки", ВыборкаТоварыИзЗапроса.СуммаБезСкидки);
					ВыборкаТовары.Вставить("ЗаказКлиента", ВыборкаТоварыИзЗапроса.ЗаказКлиента);
					ВыборкаТовары.Вставить("Остроке", ВыборкаТоварыИзЗапроса.ОСтроке);
					ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
					ВыборкаТовары.Вставить("Производитель", ВыборкаТоварыИзЗапроса.Номенклатура.Производитель);
					// ЗаполнитьЗначенияСвойств(ВыборкаТовары, ВыборкаТоварыИзЗапроса);
					МассивСтрок.Добавить(ВыборкаТовары);
				КонецЕсли;

			КонецЦикла;
		Иначе
			КлиентПоставщик = Выборка.Клиент;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта 			= ОсновнаяВалюта;

			Если НЕ ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии
				ИЛИ (ЗначениеЗаполнено(Выборка.Номенклатура)
				И НЕ Выборка.Номенклатура.ГарантийныйСрокПроизводителя = 0) Тогда

				ВыборкаТовары = Новый Структура;
				ВыборкаТовары.Вставить("НомерСтроки", 1);
				ВыборкаТовары.Вставить("Номенклатура", Выборка.Номенклатура);
				ВыборкаТовары.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
				ВыборкаТовары.Вставить("Количество", 1);
				ВыборкаТовары.Вставить("Цена", Выборка.ОценочнаяСтоимостьОбъектаРабот);
				ВыборкаТовары.Вставить("Сумма", Выборка.ОценочнаяСтоимостьОбъектаРабот);
				ВыборкаТовары.Вставить("ПроцентСкидки", 0);
				ВыборкаТовары.Вставить("СуммаБезСкидки", 0);
				ВыборкаТовары.Вставить("ЗаказКлиента", "");
				ВыборкаТовары.Вставить("Остроке", Выборка.Комментарий);
				ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
				ВыборкаТовары.Вставить("Производитель", Выборка.Производитель);
				МассивСтрок.Добавить(ВыборкаТовары);
			КонецЕсли;
		КонецЕсли;

		Для Каждого ВыборкаТовары Из МассивСтрок Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда

				Если НЕ ТалонНапечатан
					И ПереченьЭлементов.ПечататьГарантийныйТалон Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбластьПечатиШапка.Параметры.ОКПО = НашеОКПО;
					ОбластьПечатиШапка.Параметры.Дата = Дата;
					ОбластьПечатиШапка.Параметры.Валюта 		= Валюта;
					ОбластьПечатиШапка.Параметры.Организация = Организация;
					ОбластьПечатиШапка.Параметры.НашЮридическийАдрес = НашЮридическийАдрес;
					ПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(ВыборкаТовары.Номенклатура, , КлиентПоставщик);
					ОбластьПечатиШапка.Параметры.ПолноеНаименование = ПолноеНаименование + ?(ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) и ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.Производитель), " " + ВыборкаТовары.Номенклатура.Производитель, "");
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				Если НЕ БлокТалонаОтИсполнителя
					И ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПриемПоГарантии");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				Если НЕ СписокРаботИсполнителя
					И ЭтоВыполнениеРабот
					И ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("ШапкаРабот");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
					ВыборкаРаботы = Выборка.Товары.Выбрать();

					Пока ВыборкаРаботы.Следующий() Цикл
						Строка = Макет.ПолучитьОбласть("СтрокаРабот");
						Строка.Параметры.Заполнить(ВыборкаРаботы);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Строка);
						ТабДокРезультат.Вывести(Строка);

					КонецЦикла;
				КонецЕсли;

				Если НЕ ПодвалРаботИсполнителя
					И ПереченьЭлементов.ПечататьПодвалРаботИсполнителя Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПодвалРабот");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				Если НЕ ПечататьКвитанцию
					И ПереченьЭлементов.ПечататьКвитанцию Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("Квитанция");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбластьПечатиШапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					ОбластьПечатиШапка.Параметры.Дата        = Выборка.Дата;
					ОбластьПечатиШапка.Параметры.Номер       = Выборка.Номер;
					ОбластьПечатиШапка.Параметры.Сотрудник	= Сотрудник;
					ОбластьПечатиШапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					ОбластьПечатиШапка.Параметры.ТекстВШапкеДокументовПриПечати 	 = ТекстВШапкеДокументовПриПечати;
					ОбластьПечатиШапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				Если НЕ ГарантийныйТалонККвитанции
					И ПереченьЭлементов.ПечататьГарантийныйТалонККвитанции Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("ГарантийныйТалонККвитанции");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбластьПечатиШапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					ОбластьПечатиШапка.Параметры.Дата        = Выборка.Дата;
					ОбластьПечатиШапка.Параметры.Номер       = Выборка.Номер;
					ОбластьПечатиШапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					ОбластьПечатиШапка.Параметры.Исполнитель		= Сотрудник;
					ОбластьПечатиШапка.Параметры.ТекстВШапкеДокументовПриПечати   = ТекстВШапкеДокументовПриПечати;
					ОбластьПечатиШапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				Если НЕ ПоложениеОРемонте
					И ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда

					ОбластьПечатиШапка = Макет.ПолучитьОбласть("Положение");
					ОбластьПечатиШапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
					ТабДокРезультат.Вывести(ОбластьПечатиШапка);
				КонецЕсли;

				ВставлятьРазделительСтраниц = ИСТИНА;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗаказНаряд
			И ПереченьЭлементов.ПечататьЗаказНаряд Тогда

			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ЗаказНаряд");
			ОбластьПечатиШапка.Параметры.Заполнить(Выборка);
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				ОбластьПечатиШапка.Параметры.АдресПодразделения    = Подразделение.Адрес;
				ОбластьПечатиШапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;

			ОбластьПечатиШапка.Параметры.ОтКого = "";

			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				ОбластьПечатиШапка.Параметры.Контрагент 		 = КлиентПоставщик;
				ОбластьПечатиШапка.Параметры.ТелефоныКонтрагента = ОбщийМодульСервер.ПолучитьТекстТелефонов(КлиентПоставщик);
				ОбластьПечатиШапка.Параметры.АдресКонтрагента 	 = ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;

			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					ОбластьПечатиШапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					ОбластьПечатиШапка.Параметры.Номенклатура 		  = Номенклатура;
					ОбластьПечатиШапка.Параметры.Производитель 		  = Номенклатура.Производитель;
					ОбластьПечатиШапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			ИначеЕсли НЕ Выборка.Ссылка.Товары.Количество() = 0 Тогда
				Номенклатура = Выборка.Ссылка.Товары[0].Номенклатура;

				Если ЗначениеЗаполнено(Номенклатура) Тогда
					ОбластьПечатиШапка.Параметры.Номенклатура 		  = Номенклатура;
					ОбластьПечатиШапка.Параметры.Производитель 		  = Номенклатура.Производитель;
					ОбластьПечатиШапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;

			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
			ТабДокРезультат.Вывести(ОбластьПечатиШапка);
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;

		Если НЕ ТехнологическуюКартуРемонта
			И ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта Тогда

			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;

			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ТехнологическаяКартаРемонта");
			ОбластьПечатиШапка.Параметры.Заполнить(Выборка);
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				ОбластьПечатиШапка.Параметры.АдресПодразделения    = Подразделение.Адрес;
				ОбластьПечатиШапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;

			ОбластьПечатиШапка.Параметры.ОтКого = "";

			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				ОбластьПечатиШапка.Параметры.Контрагент 		 = КлиентПоставщик;
				ОбластьПечатиШапка.Параметры.ТелефоныКонтрагента = КлиентПоставщик.Телефон;
				ОбластьПечатиШапка.Параметры.АдресКонтрагента 	 = ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;

			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					ОбластьПечатиШапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					ОбластьПечатиШапка.Параметры.Номенклатура = Номенклатура;
					ОбластьПечатиШапка.Параметры.Производитель 		  = Номенклатура.Производитель;
					ОбластьПечатиШапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;

				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
				ТабДокРезультат.Вывести(ОбластьПечатиШапка);
			Иначе
				ВыборкаТовары = Выборка.Товары.Выбрать();

				Пока ВыборкаТовары.Следующий() Цикл
					Номенклатура = ВыборкаТовары.Номенклатура;
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						ОбластьПечатиШапка.Параметры.Номенклатура = Номенклатура;
						ОбластьПечатиШапка.Параметры.Производитель 		  = Номенклатура.Производитель;
						ОбластьПечатиШапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
						ТабДокРезультат.Вывести(ОбластьПечатиШапка);
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПечатьНалоговойНакладной(ТабДокРезультат, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт

	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	ДокументДляПечати = Новый ТабличныйДокумент;
	ДокументДляПечати.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НАЛНАКЛ" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
	ОбластьПечатиШапка = Макет.ПолучитьОбласть("РазделительШапка");
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
	ДокументДляПечати.Вывести(ОбластьПечатиШапка);
	ДокументДляПечати.Область().СоздатьФорматСтрок();
	СсылкаНаДокументПечати = ПараметрыПечати.Ссылка;
	ПереченьЭлементов = ПараметрыПечати.ПереченьЭлементов;

	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;

	ПечататьКопию = ЛОЖЬ;

	Если НЕ ПараметрыПечати.Свойство("ПечататьКопию", ПечататьКопию) Тогда
		ПечататьКопию = ЛОЖЬ;
	КонецЕсли;

	ПечататьОригинал = ЛОЖЬ;

	Если НЕ ПараметрыПечати.Свойство("ПечататьОригинал", ПечататьОригинал) Тогда
		ПечататьОригинал = ЛОЖЬ;
	КонецЕсли;

	Если НЕ ПечататьКопию
		И НЕ ПечататьОригинал Тогда

		ПечататьОригинал = ИСТИНА;
	КонецЕсли;

	ПоследнийНомерНалоговойНакладной = ПереченьЭлементов.ПоследнийНомерНалоговойНакладной;
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");

	Запрос = Новый Запрос;

	Если ЭтоВыполнениеРабот Тогда

		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВЫРАЗИТЬ(ВыполненияРабот.Комментарий  КАК СТРОКА(1000)) КАК Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Склад,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		Номенклатура КАК Номенклатура,
		|		СерияНоменклатуры,
		|		Сотрудник,
		|		Количество,
		|		Цена,
		|		План,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ВаловаяПрибыль,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		ЕдиницаИзмерения
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Представление,
		|	ВыполненияРабот.МоментВремени,
		|	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ВыполненияРабот.Валюта
		|ИЗ Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ ВыполненияРабот.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель,
		|		ЕдиницаИзмерения
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	ВЫРАЗИТЬ(РасходыТовара.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Представление,
		|	РасходыТовара.МоментВремени,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка = &Ссылка";
	КонецЕсли;

	Запрос.Параметры.Вставить("Ссылка", СсылкаНаДокументПечати);

	Выборка = Запрос.Выполнить().Выбрать();
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	СтруктураДополнительныхПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();

	Если НЕ ПараметрыСеанса.ВестиУчетСобственныхЮридическихЛицПС
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда

		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныхПараметровМакета.ТекстВШапкеДокументовПриПечати;
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ДокументДляПечати.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		ПредставлениеОрганизации = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(организация);
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
		НашеОКПО = Организация.ОКПО;
		Дата = Выборка.Дата;
		Макет2014 = Дата >= Дата(2014, 3, 1) И Дата < Дата(2014, 12, 1);
		Макет2014_12 = Дата >= Дата(2014, 12, 1) И Дата < Дата(2015, 1, 1);
		Макет2015 = Дата >= Дата(2015, 1, 1);

		Если НЕ ЭтоВыполнениеРабот Тогда
			Сотрудник = Выборка.Сотрудник;
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.КлиентПоставщик);
			КлиентПоставщик = Выборка.КлиентПоставщик;
		Иначе
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.Клиент);
			КлиентПоставщик = Выборка.Клиент;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Сотрудник = Организация.Сотрудник;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
		КонецЕсли;

		ПараметрыШаблонаПечати = Новый Структура;
		ДатаДокумента = Формат(Выборка.Дата, "ДФ=ддММгггг");
		ПараметрыШаблонаПечати.Вставить("Д1", Сред(ДатаДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Д2", Сред(ДатаДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Д3", Сред(ДатаДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Д4", Сред(ДатаДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Д5", Сред(ДатаДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Д6", Сред(ДатаДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Д7", Сред(ДатаДокумента, 7, 1));
		ПараметрыШаблонаПечати.Вставить("Д8", Сред(ДатаДокумента, 8, 1));

		Если ПоследнийНомерНалоговойНакладной = 0 Тогда
			НомерДокумента = СокрЛП(Организация.ПоследнийНомерНалоговойНакладной) + 1;
			Попытка
				ОрганизацияОбъект = Организация.ПолучитьОбъект();
				ОрганизацияОбъект.ПоследнийНомерНалоговойНакладной = НомерДокумента;
				ОрганизацияОбъект.Записать();
			Исключение
			КонецПопытки;
		Иначе
			НомерДокумента = ПоследнийНомерНалоговойНакладной;
		КонецЕсли;

		НомерДокумента = Прав("       " + НомерДокумента, 7);
		ПараметрыШаблонаПечати.Вставить("Н1", Сред(НомерДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Н2", Сред(НомерДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Н3", Сред(НомерДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Н4", Сред(НомерДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Н5", Сред(НомерДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Н6", Сред(НомерДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Н7", Сред(НомерДокумента, 7, 1));
		ПараметрыШаблонаПечати.Вставить("Организация", Организация);
		ПараметрыШаблонаПечати.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщик", КлиентПоставщик);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(Организация.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("с1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("с2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("с3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("с4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("с5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("с6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("с7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("с8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("с9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(КлиентПоставщик.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("м1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("м2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("м3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("м4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("м5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("м6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("м7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("м8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("м9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		ОКПО = СокрЛП(Организация.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("и1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("и2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("и3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("и4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("и5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("и6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("и7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("и8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("и9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("и10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("и11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("и12", Сред(ОКПО, 12, 1));
		ОКПО = СокрЛП(КлиентПоставщик.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("к1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("к2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("к3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("к4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("к5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("к6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("к7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("к8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("к9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("к10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("к11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("к12", Сред(ОКПО, 12, 1));
		ПараметрыШаблонаПечати.Вставить("ОрганизацияАдрес", ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес));
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикАдрес", ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес));
		Телефон = СокрЛП(Организация.Телефон) + "          ";
		Телефон = ОбщийМодульСервер.УдалитьНечисловыеСимволыИзТекста(Телефон, "", ЛОЖЬ);
		ПараметрыШаблонаПечати.Вставить("т1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("т2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("т3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("т4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("т5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("т6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("т7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("т8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("т9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("т10", Сред(Телефон, 10, 1));
		Телефон = СокрЛП(КлиентПоставщик.Телефон) + "          ";
		Телефон = ОбщийМодульСервер.УдалитьНечисловыеСимволыИзТекста(Телефон, "", ЛОЖЬ);
		ПараметрыШаблонаПечати.Вставить("ь1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ь2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ь3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ь4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ь5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ь6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ь7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ь8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("ь9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("ь10", Сред(Телефон, 10, 1));
		Договор = Выборка.Договор;

		Если ЗначениеЗаполнено(Договор) Тогда
			НомерДоговора = Договор.НомерДоговора;
			ДатаЗаключения = Формат(Договор.ДатаЗаключения, "ДФ=ддММгггг");
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Договор.ФормаВзаиморасчетов);
		Иначе
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Организация.ФормаВзаиморасчетовПоУмолчанию);
			НомерДоговора  = СокрЛП(Выборка.НомерСчета);
			ДатаЗаключения = Формат(Выборка.ДатаСчета, "ДФ=ддММгггг");
			Договор 	   = "Договір, рахунок-фактура" + " " + ДатаЗаключения + " №" + НомерДоговора;
		конецесли;

		ПараметрыШаблонаПечати.Вставить("Договор", Договор);
		ПараметрыШаблонаПечати.Вставить("НомерДоговора", НомерДоговора);
		ПараметрыШаблонаПечати.Вставить("ДД1", Сред(ДатаЗаключения, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ДД2", Сред(ДатаЗаключения, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ДД3", Сред(ДатаЗаключения, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ДД4", Сред(ДатаЗаключения, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ДД5", Сред(ДатаЗаключения, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ДД6", Сред(ДатаЗаключения, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ДД7", Сред(ДатаЗаключения, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ДД8", Сред(ДатаЗаключения, 8, 1));
		НалоговаяНакладная = Новый ТабличныйДокумент;
		НалоговаяНакладная.ИмяПараметровПечати = "НАЛ_НАКЛ_УКР" + СокрЛП(ИмяКомпьютера());
		НалоговаяНакладная.КлючПараметровПечати = НалоговаяНакладная.ИмяПараметровПечати;
		ОбластьПечатиШапка = Макет.ПолучитьОбласть("Пробел");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);
		ОбластьПечатиШапка = ?(Макет2014 ИЛИ Макет2014_12, Макет.ПолучитьОбласть("Заголовок14"), Макет.ПолучитьОбласть("Заголовок"));
		ОбластьПечатиШапка.Параметры.Заполнить(ПараметрыШаблонаПечати);
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);

		Если Макет2015 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка15_1");
		ИначеЕсли Макет2014 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка14");
		ИначеЕсли Макет2014_12 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка15");
		Иначе
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка");
		КонецЕсли;

		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);
		НДС   = 0;
		НДС7  = 0;
		Всего = 0;
		ВсегоСНДС = 0;
		ИтогСуммаСНДС20 = 0;
		ИтогСуммаСНДС7  = 0;
		СтавкаНДС = Организация.СтавкаНДС;
		ВыборкаТовары = Выборка.Товары.Выбрать();

		Пока ВыборкаТовары.Следующий() Цикл
			Номенклатура = ВыборкаТовары.Номенклатура;
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму");
			КонецЕсли;

			Если Макет2015 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("РазделI15_1");
			ИначеЕсли Макет2014_12 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("РазделI15");
			Иначе
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("РазделI");
			КонецЕсли;

			ОбластьПечатиШапка.Параметры.Дата = Выборка.Дата;
			ОбластьПечатиШапка.Параметры.Номенклатура = Номенклатура;
			ОбластьПечатиШапка.Параметры.НоменклатураПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, , КлиентПоставщик);
			ОбластьПечатиШапка.Параметры.КодУКТВЭД = Номенклатура.КодУКТВЭД;
			КодЕдиницыИзмерения = "";

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
				ЕдиницаИзмеренияНоменклатуры = ВыборкаТовары.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияНоменклатуры) Тогда
					ЕдиницаИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры);
					КодЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры.КодЕдиницыПоКлассификатору);

					Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
						Если ВРег(Лев(ЕдиницаИзмерения, 1)) = "Ш" Тогда
							КодЕдиницыИзмерения = "2009";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "К" Тогда
							КодЕдиницыИзмерения = "0301";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "М" Тогда
							КодЕдиницыИзмерения = "0101";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "Л" Тогда
							КодЕдиницыИзмерения = "0138";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 2)) = "УП" Тогда
							КодЕдиницыИзмерения = "2102";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 3)) = "УСЛ"
							ИЛИ ВРег(Лев(ЕдиницаИзмерения, 4)) = "ПОСЛ" Тогда

							КодЕдиницыИзмерения = "2454";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
				ЕдиницаИзмерения = "шт.";
			КонецЕсли;

			Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;

			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда
				ЕдиницаИзмерения = "шт.";
				КодЕдиницыИзмерения = "2009";
			Иначе
				ЕдиницаИзмерения = "послуга";
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;

			Если КодЕдиницыИзмерения = "2454" Тогда
				ЕдиницаИзмерения = "грн.";
			КонецЕсли;

			ОбластьПечатиШапка.Параметры.ЕдИзм = ЕдиницаИзмерения;
			Количество = ?(ВыборкаТовары.Количество = 0, 1, ВыборкаТовары.Количество);
			ОбластьПечатиШапка.Параметры.Количество = Количество;
			Сумма = ВыборкаТовары.Сумма;
			ВсегоСНДС = ВсегоСНДС + Сумма;
			СтавкаНДС = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
			СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
			НДС = НДС + (Сумма - СуммаБезНДС);

			Если Макет2014_12
				ИЛИ Макет2015 Тогда

				Если Макет2015 Тогда
					ОбластьПечатиШапка.Параметры.ЕдиницаИзмеренияКод = КодЕдиницыИзмерения;
				КонецЕсли;

				Если СтавкаНДС = 7 Тогда
					ИтогСуммаСНДС7  = ИтогСуммаСНДС7 + СуммаБезНДС;
					ОбластьПечатиШапка.Параметры.Сумма20 = 0;
					ОбластьПечатиШапка.Параметры.Сумма7  = СуммаБезНДС;
				Иначе
					ИтогСуммаСНДС20 = ИтогСуммаСНДС20 + СуммаБезНДС;
					ОбластьПечатиШапка.Параметры.Сумма20 = СуммаБезНДС;
					ОбластьПечатиШапка.Параметры.Сумма7  = 0;
				КонецЕсли;
			Иначе
				ОбластьПечатиШапка.Параметры.СуммаБезНДС = СуммаБезНДС;
			КонецЕсли;

			ОбластьПечатиШапка.Параметры.ЦенаБезНДС  = СуммаБезНДС / Количество;
			Всего = Всего + СуммаБезНДС;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
			НалоговаяНакладная.Вывести(ОбластьПечатиШапка);

		КонецЦикла;

		Если Макет2015 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ИтогРазделI15_1");
		ИначеЕсли Макет2014_12 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ИтогРазделI15");
		Иначе
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ИтогРазделI");
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.Всего = Всего;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);
		Если Макет2015 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ВозврТара15_1");
		ИначеЕсли Макет2014_12 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ВозврТара15");
		Иначе
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("ВозврТара");
		КонецЕсли;

		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);
		Если Макет2015 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("итоги15_1");
			ОбластьПечатиШапка.Параметры.ИтогНДС20			= НДС;
			ОбластьПечатиШапка.Параметры.ИтогНДС7			= НДС7;
			ОбластьПечатиШапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			ОбластьПечатиШапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;
		ИначеЕсли Макет2014_12 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("итоги15");
			ОбластьПечатиШапка.Параметры.ИтогНДС20			= НДС;
			ОбластьПечатиШапка.Параметры.ИтогНДС7			= НДС7;
			ОбластьПечатиШапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			ОбластьПечатиШапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;
		Иначе
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("итоги");
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.НДС = НДС + НДС7;
		ОбластьПечатиШапка.Параметры.ВсегоСНДС = ВсегоСНДС;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);

		Если Макет2015 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Подвал15_1");
		ИначеЕсли Макет2014 ИЛИ Макет2014_12 Тогда
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Подвал14");
		Иначе
			ОбластьПечатиШапка = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.Сотрудник = Сотрудник;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		НалоговаяНакладная.Вывести(ОбластьПечатиШапка);
		Если ПечататьОригинал Тогда
			Если Макет2015 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("Оригинал15_1");
			ИначеЕсли Макет2014 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("Оригинал14");
			ИначеЕсли Макет2014_12 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("Оригинал15");
			Иначе
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("Оригинал");
			КонецЕсли;

			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
			ДокументДляПечати.Вывести(ОбластьПечатиШапка);
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(НалоговаяНакладная);
			ДокументДляПечати.Вывести(НалоговаяНакладная);
			ДокументДляПечати.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		Если ПечататьКопию Тогда
			Если Макет2015 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПерваяКопия15_1");
			ИначеЕсли Макет2014 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПерваяКопия14");
			ИначеЕсли Макет2014_12 Тогда
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПерваяКопия15");
			Иначе
				ОбластьПечатиШапка = Макет.ПолучитьОбласть("ПерваяКопия");
			КонецЕсли;

			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
			ДокументДляПечати.Вывести(ОбластьПечатиШапка);
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(НалоговаяНакладная);
			ДокументДляПечати.Вывести(НалоговаяНакладная);
		КонецЕсли;

		ВставлятьРазделительСтраниц = ИСТИНА;

	КонецЦикла;

	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ДокументДляПечати.Область().СоздатьФорматСтрок();
	КонецЕсли;

	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДокументДляПечати);
	ТабДокРезультат.Вывести(ДокументДляПечати);

КонецПроцедуры

Функция   НайтиВаучерПоШтрихКоду(Знач ШтрихКод = "") Экспорт

	Результат = Неопределено;
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ваучеры.Ссылка
		|ИЗ Справочник.Ваучеры КАК Ваучеры
		|ГДЕ Ваучеры.ШтрихКод = &ШтрихКод
		|УПОРЯДОЧИТЬ ПО Ваучеры.Отключен, Ваучеры.ПометкаУдаления";
		Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);

		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить Ваучер По ШтрихКоду

Функция   НайтиГруппуНоменклатурыПоНаименованию(Знач Наименование, Знач НеСоздавать = ЛОЖЬ) Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ЭтоГруппа = ИСТИНА";
	Запрос.УстановитьПараметр("Наименование", Наименование);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
	ИначеЕсли НЕ НеСоздавать Тогда
		РезультатОбъект = Справочники.Номенклатура.СоздатьГруппу();
		РезультатОбъект.Наименование = Наименование;
		РезультатОбъект.Записать();
		Результат = результатОбъект.Ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Найти Группу Номенклатуры По Наименованию

Функция   ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Знач Номенклатура, Знач ПолеПредставления = Неопределено, Знач Язык = Неопределено, Знач КлиентПоставщик, Знач ВОтсутствииВернутьСобственноеПредставление = ЛОЖЬ) Экспорт

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	Иначе
		Если ПолеПредставления = Неопределено Тогда
			ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
		КонецЕсли;

		Если ВОтсутствииВернутьСобственноеПредставление Тогда
			ЗначениеПредставления = СобственноеЗначениеНаСервере(Номенклатура, Язык, ПолеПредставления);
		Иначе
			ЗначениеПредставления = "";
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПредставлениеТоваровКонтрагентами.ЗначениеПредставления
			|ИЗ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
			|ГДЕ ПредставлениеТоваровКонтрагентами.Номенклатура = &Номенклатура ";

			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Запрос.Текст = Запрос.Текст + " И (ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель2 ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель3 ) ";
				Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель", КлиентПоставщик.Родитель);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель2", КлиентПоставщик.Родитель.Родитель);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель3", КлиентПоставщик.Родитель.Родитель.Родитель);
			КонецЕсли;

			Если ЗначениеЗаполнено(ПолеПредставления) Тогда
				Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Поле = &Поле ";
				Запрос.УстановитьПараметр("Поле", ПолеПредставления);
			КонецЕсли;

			Если ЗначениеЗаполнено(Язык) Тогда
				Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Язык = &Язык ";
				Запрос.УстановитьПараметр("Язык", Язык);
			КонецЕсли;

			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ПредставлениеТоваровКонтрагентами.Поле";
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				ЗначениеПредставления = ВыборкаДетальныеЗаписи.ЗначениеПредставления;
			КонецЕсли;
		КонецЕсли;

		Возврат ЗначениеПредставления;
	КонецЕсли;

КонецФункции // Получить Значение Представления Номенклатуры Контрагентом

Функция   ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Знач Штрихкод, Знач Ширина = 250, Знач Высота = 90, Знач ТипКода = 4, Знач УголПоворота = 0) Экспорт

	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		ВнешняяКомпонента.Ширина 		= Ширина;
		ВнешняяКомпонента.Высота 		= Высота;
		ВнешняяКомпонента.АвтоТип 		= ЛОЖЬ;
		ВнешняяКомпонента.ТипКода 		= ТипКода;
		ВнешняяКомпонента.УголПоворота 	= УголПоворота;
		ВнешняяКомпонента.СодержитКС 	= СтрДлина(Штрихкод) = 13;
		ВнешняяКомпонента.ЗначениеКода 	= Штрихкод;
		ВнешняяКомпонента.ОтображатьТекст = ЛОЖЬ;

		Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
			ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
		КонецЕсли;

		ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			Возврат Новый Картинка(ДвоичныеДанныеКартинки);
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция   НайтиНоменклатуруПоПредставлениюКонтрагента(Знач КлиентПоставщик, Знач ПолеПредставления = Неопределено, Знач ТекстПредставления, Знач НаЯзыке = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ПолеПредставления) Тогда
		ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;

	Возврат ОбщийМодульПовтор.НайтиНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, ПолеПредставления, ТекстПредставления, НаЯзыке);

КонецФункции // Получить Номенклатуру По Представлению Контрагента

Функция   НайтиНоменклатуруПоШтрихКоду(Знач ДанныеШтрихкода,
	Знач ВСтруктуре = ЛОЖЬ,
	Знач ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено,
	Знач ДатаДокумента = Неопределено) Экспорт

	Номенклатура = Неопределено;
	НоменклатураСтруктура = ЛОЖЬ;
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрихкода;
	Иначе
		ШтрихКод = ДанныеШтрихкода.ШтрихКод;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, ЛОЖЬ, ИСТИНА);
	КонецЕсли;

	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено
		ИЛИ ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда

		ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");
	КонецЕсли;

	Запрос = Новый Запрос;

	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда
		Если НЕ ДатаДокумента = Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура,  &ЗначениеНеопределено) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры,  &ЗначениеНеопределено) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения,  &ЗначениеНеопределено) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления,  &ЗначениеНеопределено) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления,  &ЗначениеНеопределено)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|	И (ДополнительныеШтрихКоды.ДействуетСДаты = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетСДаты >= &ДатаДок)
			|	И (ДополнительныеШтрихКоды.ДействуетПоДату = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетПоДату <= &ДатаДок)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
			Запрос.УстановитьПараметр("ДатаДок", ДатаДокумента);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101');
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура,  &ЗначениеНеопределено) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры,  &ЗначениеНеопределено) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения,  &ЗначениеНеопределено) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления,  &ЗначениеНеопределено) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения,  &ЗначениеНеопределено),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления,  &ЗначениеНеопределено)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
		КонецЕсли;

		Запрос.УстановитьПараметр("ЗначениеНеопределено", Неопределено);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихКоды.Номенклатура КАК Номенклатура,
		|	ШтрихКоды.СерияНоменклатуры,
		|	ШтрихКоды.ЕдиницаИзмерения,
		|	ШтрихКоды.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
		|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
	КонецЕсли;

	Запрос.УстановитьПараметр("ШтрихКод", НРег(ШтрихКод));
	Запрос.УстановитьПараметр("ШтрихКодВРЕГ", ВРег(ШтрихКод));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ВСтруктуре Тогда
			Номенклатура = Новый Структура;
			Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
			Номенклатура.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
			Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
			Номенклатура.Вставить("Количество", 1);
			НоменклатураСтруктура = ИСТИНА;
		Иначе
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
	Иначе
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу") Тогда

			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка КАК Номенклатура
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ (Номенклатура.Артикул = &ОсновнойШтрихКод
			|			ИЛИ Номенклатура.Артикул = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				Если ВСтруктуре Тогда
					Номенклатура = Новый Структура;
					Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
					Номенклатура.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
					Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
					Номенклатура.Вставить("Количество", 1);
					НоменклатураСтруктура = ИСТИНА;
				Иначе
					Номенклатура = Выборка.Номенклатура;
				КонецЕсли;
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
				|	ИЛИ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ
				|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
				Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
				Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

				Выборка = Запрос.Выполнить().Выбрать();

				Если Выборка.Следующий() Тогда
					Номенклатура = Выборка.Номенклатура;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Номенклатура = Неопределено Тогда

		Если (ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении"))
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ШтрихКодомМожетВыступатьСерияИлиКодПродукта") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
			|	СерииНоменклатуры.Владелец КАК Номенклатура,
			|	СерииНоменклатуры.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|	И (СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКодВРЕГ
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО ПометкаУдаления";
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВСтруктуре Тогда
						Номенклатура = Новый Структура;
						Номенклатура.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						Номенклатура.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
						Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
						Номенклатура.Вставить("Количество", 1);
						НоменклатураСтруктура = ИСТИНА;
					Иначе
						Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если Номенклатура = Неопределено Тогда
			Если ВСтруктуре Тогда
				Номенклатура = Новый Структура;
				Номенклатура.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				Номенклатура.Вставить("СерияНоменклатуры", Неопределено);
				Номенклатура.Вставить("ЕдиницаИзмерения", Неопределено);
				Номенклатура.Вставить("Количество", 1);
				НоменклатураСтруктура = ИСТИНА;
			Иначе
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;

		Возврат Номенклатура;
	Иначе

		Если ВСтруктуре
			И НЕ НоменклатураСтруктура Тогда

			НоменклатураВСтруктуре = Новый Структура;
			НоменклатураВСтруктуре.Вставить("Номенклатура", Номенклатура);
			НоменклатураВСтруктуре.Вставить("СерияНоменклатуры", Неопределено);
			НоменклатураВСтруктуре.Вставить("ЕдиницаИзмерения", Неопределено);
			НоменклатураВСтруктуре.Вставить("Количество", 1);

			Возврат НоменклатураВСтруктуре;

		Иначе
			Возврат Номенклатура;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция   ПолучитьОстатокНакопленияНаВаучер(Знач Ваучер, Знач Дата = Неопределено) Экспорт

	Результат = 0;
	Если ЗначениеЗаполнено(Ваучер) Тогда
		Если Дата = Неопределено Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ НакоплениеНаВаучерыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.НакоплениеНаВаучеры.Остатки(&Дата, Ваучер = &Ваучер) КАК НакоплениеНаВаучерыОстатки";
		Запрос.УстановитьПараметр("Ваучер", Ваучер);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = Результат + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьПоследнегоПоставщика(Знач Номенклатура, Знач Дата = Неопределено, Знач КоличествоПриход = 1) Экспорт

	Результат = Неопределено;

	Если НЕ КоличествоПриход = 0
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда

		НетОграниченияПоДате = Дата = Неопределено;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Ссылка.КлиентПоставщик КАК Поставщик,
		|	ПоступленияТовараТовары.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ ПоступленияТовараТовары.Номенклатура = &Номенклатура
		|	И (&НетОграниченияПоДате ИЛИ ПоступленияТовараТовары.Ссылка.Дата <= &Дата)
		|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("НетОграниченияПоДате", НетОграниченияПоДате);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.Поставщик;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьПроцентСкидкиПериода(Знач ОбъектСкидки, Знач Дата, Знач Склад) Экспорт

	Результат = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СкидкиПериодаСрезПоследних.Скидка
	|ИЗ РегистрСведений.СкидкиПериода.СрезПоследних(&Дата, ";
	Запрос.УстановитьПараметр("Дата", Дата);
	УстановленСклад = ЛОЖЬ;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И ЗначениеЗаполнено(Склад) Тогда

		Запрос.Текст = Запрос.Текст + " Склад = &Склад ";
		Запрос.УстановитьПараметр("Склад", Склад);
		УстановленСклад = ИСТИНА;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ЗначениеЗаполнено(ОбъектСкидки.НоменклатурнаяГруппа) Тогда

		Запрос.Текст = Запрос.Текст + ?(УстановленСклад, " И ", "") + " НоменклатурнаяГруппа = &НоменклатурнаяГруппа ";
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ОбъектСкидки.НоменклатурнаяГруппа);
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + ") КАК СкидкиПериодаСрезПоследних";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Скидка;
	КонецЕсли;

	Возврат Результат;

КонецФункции //Получить Процент Скидки Периода

Функция   ПолучитьСкоростьРеализации(Знач Номенклатура, Знач СкоростьПродажВ = Неопределено, Знач ВыводитьСТекстом = ЛОЖЬ, Знач ДатаОкончания = Неопределено, Знач ТолькоПоследнийПериод = ЛОЖЬ) Экспорт

	Результат = 0;
	Если СкоростьПродажВ = Неопределено Тогда
		СкоростьПродажВ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВКарточкеНоменклатурыСкоростьПродажВ");
	КонецЕсли;

	Если ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(СкоростьПродажВ) Тогда

		Если ДатаОкончания = Неопределено Тогда
			ДатаОкончания = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;

		ЧислоПериодов = 0;

		Если НЕ ТолькоПоследнийПериод Тогда
			ДатаНачала = ОбщийМодульПовтор.ПолучитьДатуПервойРеализации(Номенклатура);
			Если ДатаНачала = Неопределено Тогда
				ДатаНачала = ДатаОкончания;
				ЧислоПериодов = 0;
			Иначе
				Если СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаГод Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / (3600 * 24 * 365.259636);
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаМесяц Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / (3600 * 24 * 30.43685);
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаКвартал Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / (3600 * 24 * 30.43685 * 3);
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаНеделю Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / (3600 * 24 * 7);
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / (3600 * 24);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДатаНачала = ДатаОкончания;

			Если СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаГод Тогда
				ДатаНачала = ДатаНачала - (3600 * 24 * 365.259636);
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаМесяц Тогда
				ДатаНачала = ДатаНачала - (3600 * 24 * 30.43685);
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаКвартал Тогда
				ДатаНачала = ДатаНачала - (3600 * 24 * 30.43685 * 3);
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаНеделю Тогда
				ДатаНачала = ДатаНачала - (3600 * 24 * 7);
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
				ДатаНачала = ДатаНачала - (3600 * 24);
			КонецЕсли;

			ЧислоПериодов = 1;
		КонецЕсли;

		Если НЕ ЧислоПериодов = 0 Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ СУММА(Продажи.Количество) КАК Количество,
			|	СУММА(1) КАК ЧислоПродаж
			|ИЗ РегистрНакопления.Продажи КАК Продажи
			|ГДЕ 	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И Продажи.Номенклатура = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ЧислоПродаж = 0;
				Количество  = 0;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЧислоПродаж = ЧислоПродаж + ВыборкаДетальныеЗаписи.ЧислоПродаж;
					Количество  = Количество + ВыборкаДетальныеЗаписи.Количество;
				КонецЦикла;

				Если НЕ ЧислоПродаж = 0 Тогда
					Результат = (Количество / ЧислоПродаж) / ЧислоПериодов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ВыводитьСТекстом Тогда
			РезультатСтрока = "" + Формат(Результат,"ЧДЦ=3; ЧРД=.; ЧРГ=' '; ЧГ=0")  + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(СкоростьПродажВ));
		КонецЕсли;
	КонецЕсли;

	Если ВыводитьСТекстом Тогда
		Возврат РезультатСтрока;
	Иначе
		Возврат Результат;
	КонецЕсли;

КонецФункции //Получить Скорость Реализации

Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(Знач ВернутьСписок = ИСТИНА) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ НоменклатураЧастогоСпроса.Позиция КАК Позиция,
	|	НоменклатураЧастогоСпроса.Номенклатура,
	|	ВЫРАЗИТЬ(НоменклатураЧастогоСпроса.Комментарий КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|УПОРЯДОЧИТЬ ПО Позиция";

	РезультатЗапроса = Запрос.Выполнить();

	Если ВернутьСписок Тогда
		СписокРезультат = Новый СписокЗначений;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокРезультат.Добавить(ВыборкаДетальныеЗаписи.номенклатура);
			КонецЦикла;
		КонецЕсли;

		Возврат СписокРезультат;
	Иначе
		Возврат РезультатЗапроса;
	КонецЕсли;

КонецФункции // ПолучитьСписокНоменклатурыБыстрогоСпроса

Функция   ПолучитьСреднююВаловуюПрибыльРеализации(Знач Номенклатура, Знач Дата, Знач Ссылка = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ, Знач СерияНоменклатуры = Неопределено) Экспорт

	Если ВернутьСтруктуру Тогда
		Результат = Новый Структура;
		Результат.Вставить("СредняяВаловаяПрибыль", 0);
		Результат.Вставить("ПроцентНаценки", 0);
		Результат.Вставить("РентабельностьПродаж", 0);
	Иначе
		Результат = 0;
	КонецЕсли;

	РезультатНеГотов = ИСТИНА;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьПерсонифицированныйУчетВаловойПрибыли") Тогда

		Если ЗначениеЗаполнено(Ссылка)
			И ТипЗнч(Ссылка) = Тип("ДокументСсылка.Инвентаризации")
			И ЗначениеЗаполнено(Ссылка.СвязанныйДокументРеализации) Тогда  // по документу

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ ВаловаяПрибыль.Номенклатура = &Номенклатура
			|И (&НетТребованияКСерии ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
			|	И ВаловаяПрибыль.Регистратор = &Ссылка
			|СГРУППИРОВАТЬ ПО ВаловаяПрибыль.Номенклатура";

			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("Ссылка", Ссылка.СвязанныйДокументРеализации);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("НетТребованияКСерии", (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры")) ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры)));
			Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;

						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;
						КонецЕсли;

						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; // при реализации по себестоимости валовой прибыли нет

			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;
			КонецЕсли;

			РезультатНеГотов = ЛОЖЬ;
		КонецЕсли;

		Если РезультатНеГотов
			И НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.Инвентаризации")
			И ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда // по клиенту

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ ВаловаяПрибыль.Номенклатура = &Номенклатура
			|И (&НетТребованияКСерии ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
			|	И ВаловаяПрибыль.Регистратор.КлиентПоставщик = &КлиентПоставщик
			|	И ВаловаяПрибыль.Регистратор.Дата <= &Период
			|СГРУППИРОВАТЬ ПО ВаловаяПрибыль.Номенклатура";

			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("НетТребованияКСерии", (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры")) ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры)));
			Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
			Запрос.УстановитьПараметр("КлиентПоставщик", Ссылка.КлиентПоставщик);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("Период", Дата);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Сумма 		= 0;
				Количество  = 0;
				ЧислоЗаписейВРегистр = 0;
				ПроцентНаценки 		 = 0;
				РентабельностьПродаж = 0;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;
						КонецЕсли;

						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;
					КонецЕсли;
				КонецЦикла;

				Если ВернутьСтруктуру Тогда
					Если Количество = 0 Тогда
						Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат.СредняяВаловаяПрибыль = Сумма / Количество;
						Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
					КонецЕсли;
				Иначе
					Если Количество = 0 Тогда
						Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат = Сумма / Количество;
					КонецЕсли;
				КонецЕсли;

				РезультатНеГотов = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если РезультатНеГотов Тогда // вот тут средняя продажи

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|		КОНЕЦ) КАК Количество,
		|	СУММА(1) КАК ЧислоЗаписейВРегистр,
		|	ВаловаяПрибыль.Номенклатура,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|		КОНЕЦ) КАК ПроцентНаценки,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|		КОНЕЦ) КАК РентабельностьПродаж
		|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ ВаловаяПрибыль.Номенклатура = &Номенклатура
		|	И (&НетТребованияКСерии
		|			ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
		|	И ВаловаяПрибыль.Период <= &Период
		|	И ВаловаяПрибыль.Регистратор <> &Ссылка
		|СГРУППИРОВАТЬ ПО ВаловаяПрибыль.Номенклатура";

		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);

		НетТребованияКСерии = (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении")
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры"))
		ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры));

		Запрос.УстановитьПараметр("НетТребованияКСерии", НетТребованияКСерии);
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
					Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
					Если ВернутьСтруктуру Тогда
						ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
						РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;
					КонецЕсли;

					Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
					ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;
				КонецЕсли;
			КонецЦикла;

			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить Среднюю Валовую Прибыль Реализации

Функция   ПолучитьСсылкуНаСкопированныйОбъект(Знач Ссылка) Экспорт

	ОбъектКопия = Ссылка.Скопировать();
	ОбъектКопияСсылка = Неопределено;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ((ПустаяСтрока(ОбъектКопия.ОсновнойШтрихКод)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"))
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода")) Тогда

		ОбъектКопия.ОсновнойШтрихКод = "";
		ОбъектКопия.ОсновнойШтрихКод = ОбъектКопия.ОсновнойШтрихКод + формат(ТекущаяДата(), "ДФ=ЧЧммсс");
	КонецЕсли;

	ОбъектКопия.наименование = ОбъектКопия.наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия");

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
		И НЕ ЗначениеЗаполнено(ОбъектКопия.НоменклатурнаяГруппа) Тогда

		ОбъектКопия.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
	КонецЕсли;

	Попытка
		НеВыводитьСообщений = ПараметрыСеанса.НеВыводитьСообщений; // без кэша
		ПараметрыСеанса.НеВыводитьСообщений = ИСТИНА;
		ОбъектКопия.Записать();
		ПараметрыСеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		ОбъектКопияСсылка = ОбъектКопия.Ссылка;

		НаборЗаписиЦен = РегистрыСведений.Цены.СоздатьНаборЗаписей();
		НаборЗаписиЦен.Отбор.Номенклатура.Установить(Ссылка);
		НаборЗаписиЦен.Прочитать();

		Для Каждого ЗаписьОЦене Из НаборЗаписиЦен Цикл
			Цены = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			Цены.Активность 	= ИСТИНА;
			Цены.ВидЦен  		= ЗаписьОЦене.ВидЦен;
			Цены.Вручную		= ЗаписьОЦене.Вручную;
			Цены.Комментарий	= ЗаписьОЦене.Комментарий;
			Цены.Номенклатура	= ОбъектКопияСсылка;
			Цены.Период			= ЗаписьОЦене.Период;
			Цены.Цена 			= ЗаписьОЦене.Цена;
			Попытка
				Цены.Записать(ИСТИНА);
			Исключение
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений Цены") + ": " + ТекстОписаниеОшибки, , Ссылка);
			КонецПопытки;
		КонецЦикла;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
			НаборЗаписиЦен = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
			НаборЗаписиЦен.Отбор.ОбъектБазыДанных.Установить(Ссылка);
			НаборЗаписиЦен.Прочитать();

			Для Каждого ЗаписьОЯзыке Из НаборЗаписиЦен Цикл
				Перевод = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				Перевод.Активность 		 = ИСТИНА;
				Перевод.НаЯзыке			 = ЗаписьОЯзыке.НаЯзыке;
				Перевод.ОбъектБазыДанных = ОбъектКопияСсылка;
				Перевод.Поле			 = ЗаписьОЯзыке.Поле;
				Перевод.Язык			 = ЗаписьОЯзыке.Язык;
				Попытка
					Перевод.Записать(ИСТИНА);
				Исключение
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Перевода") + ": " + ТекстОписаниеОшибки, , Ссылка);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;

	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи копии номенклатуры") + ": " + ТекстОписаниеОшибки, , Ссылка);
	КонецПопытки;

	Возврат ОбъектКопияСсылка;

КонецФункции

Функция   ПолучитьСтруктуруОстаткаТоваров(Знач ИспользоватьСложныйМеханизмЦен = Неопределено, Знач ВидЦен = Неопределено, Знач ОтобратьОстаткиПоСкладу = Неопределено, Знач ВестиУчетПоСкладам = Неопределено) Экспорт

	Если ВестиУчетПоСкладам = Неопределено Тогда
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	КонецЕсли;

	Если ИспользоватьСложныйМеханизмЦен = Неопределено Тогда
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
	КонецЕсли;

	Если ВидЦен = Неопределено Тогда
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
	КонецЕсли;

	СтруктураОтвета = Новый Структура;
	Запрос = Новый Запрос;

	Если ВидЦен = Неопределено
		ИЛИ НЕ ИспользоватьСложныйМеханизмЦен Тогда

		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки";
	Иначе
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда

			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.КоличествоОстаток * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена)) КАК СуммаОстаток
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныСрезПоследних.Цена КАК Цена,
			|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены
			|		ИЗ РегистрСведений.Цены.СрезПоследних(, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних
			|		ГДЕ ЦеныСрезПоследних.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения) КАК ВложенныйЗапрос
			|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
			Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.КоличествоОстаток * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена)) КАК СуммаОстаток
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныСрезПоследних.Цена КАК Цена,
			|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены
			|		ИЗ РегистрСведений.Цены.СрезПоследних(, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних) КАК ВложенныйЗапрос
			|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
		КонецЕсли;

		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу)
		И ВестиУчетПоСкладам Тогда

		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " Склад = &ОтобратьОстаткиПоСкладу ");
		Запрос.УстановитьПараметр("ОтобратьОстаткиПоСкладу", ОтобратьОстаткиПоСкладу);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	ОбщееКоличество  = 0;
	НаСумму 		 = 0;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
				ОбщееКоличество = ОбщееКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				НаСумму = НаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;

	СтруктураОтвета.Вставить("НаСумму", НаСумму);
	СтруктураОтвета.Вставить("ОбщееКоличество", ОбщееКоличество);

	Возврат СтруктураОтвета;

КонецФункции

Функция   ПолучитьШтрихКодЕдиницыИзмерения(Знач ЕдиницаИзмерения) Экспорт

	Результат = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";

	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить ШтрихКод Серии

Функция   ПолучитьШтрихКодНоменклатурыСерии(Знач Номенклатура, Знач СерияНоменклатуры, Знач ЕдиницаИзмерения = Неопределено) Экспорт

	Результат = "";
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодСерии(СерияНоменклатуры);
	ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодЕдиницыИзмерения(ЕдиницаИзмерения);
	КонецЕсли;

	Если ПустаяСтрока(Результат) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.Номенклатура = &Номенклатура";

		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
			Результат = Номенклатура.ОсновнойШтрихКод;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьШтрихКодСерии(Знач СерияНоменклатуры) Экспорт

	Результат = "";
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";

		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить ШтрихКод Серии

Процедура ПроверитьИСортироватьТаблицуТовары(ДанныйОбъект, Знач ЭтоПланПродаж = ЛОЖЬ, Знач ИмяТаблицы = "Товары") Экспорт

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНаименованиюПередЗаписьюДокументов") Тогда
		ТоварыДляСортировки = ДанныйОбъект[ИмяТаблицы].Выгрузить();

		Если ЭтоПланПродаж Тогда
			ТОварыДляСортировки.Сортировать("НоменклатураИлиГруппа");

		ИначеЕсли ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументов") Тогда

			ТОварыДляСортировки.Колонки.Добавить("НоменклатурнаяГруппа");

			Для Каждого СтрокаТовар Из ТОварыДляСортировки Цикл
				Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
					СтрокаТовар.НоменклатурнаяГруппа = СтрокаТовар.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЦикла;

			ТОварыДляСортировки.Сортировать("НоменклатурнаяГруппа, Номенклатура");
		Иначе
			ТОварыДляСортировки.Сортировать("Номенклатура");
		КонецЕсли;

		ДанныйОбъект[ИмяТаблицы].Загрузить(ТОварыДляСортировки);
	КонецЕсли;

КонецПроцедуры

Функция   ПроверитьНаличиеСерийНоменклатуры(Знач ТаблицаТоваров, Знач ЭтоМассивНоменклатуры = ЛОЖЬ) Экспорт

	НаличиеСерийНоменклатуры = ЛОЖЬ;

	Если (ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении")) Тогда

		Если НЕ ЭтоМассивНоменклатуры Тогда
			СписокНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		Иначе
			СписокНоменклатуры = ТаблицаТоваров;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.СерийныйУчет
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.СерийныйУчет = ИСТИНА И Номенклатура.Ссылка В(&СписокНоменклатуры)";

		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НаличиеСерийНоменклатуры = ИСТИНА;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат НаличиеСерийНоменклатуры;

КонецФункции // Проверить Наличие Серий Номенклатуры

Функция   ПроверитьОтсутствиеСерииВОстатках(Знач Номенклатура, Знач СерияНоменклатуры, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(&Дата,
	|			СерияНоменклатуры = &СерияНоменклатуры
	|				И Номенклатура = &Номенклатура) КАК ТоварыОстатки";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КоличествоОстаток = 0;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;
	КонецЕсли;

	Возврат не КоличествоОстаток = 0;

КонецФункции // Проверить Отсутствие Серии В Остатках

Функция   ПроверитьСерийностьЭлементовНабора(Знач Номенклатура, Знач НоменклатураСерийная = ЛОЖЬ) Экспорт

	Для Каждого СтрокаСостава Из Номенклатура.Состав Цикл
		НоменклатураСостава = СтрокаСостава.Номенклатура;
		Если НоменклатураСостава.СерийныйУчет Тогда
			НоменклатураСерийная = ИСТИНА;
			Прервать;
		КонецЕсли;

		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			НоменклатураСерийная = ПроверитьСерийностьЭлементовНабора(НоменклатураСостава, НоменклатураСерийная);
			Если НоменклатураСерийная Тогда
				прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат НоменклатураСерийная;

КонецФункции

Функция   ПроверитьЧтоВаучерПодходит(Знач Ваучер, Знач Дата = Неопределено, Знач Товары = Неопределено, Знач Склад = Неопределено, Знач ВернутьПервуюПричину = ИСТИНА, Знач ВзятьСкладыКолонкойИзТаблицы = ЛОЖЬ) Экспорт

	Результат = Новый Структура("ВаучерПодходит, Причина", ИСТИНА, "");
	Если ЗначениеЗаполнено(Ваучер) Тогда

		Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
			ИЛИ ЗначениеЗаполнено(Ваучер.ДатаОкончания) Тогда

			Если Дата = Неопределено Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			КонецЕсли;

			Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
				И Дата < Ваучер.ДатаНачала Тогда

				Результат.ВаучерПодходит = ЛОЖЬ;
				Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата меньше, чем начало действия Ваучера");
				Если ВернутьПервуюПричину Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(Ваучер.ДатаОкончания)
				И Дата > Ваучер.ДатаОкончания Тогда

				Результат.ВаучерПодходит = ЛОЖЬ;
				Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата больше, чем окончание действия Ваучера");
				Если ВернутьПервуюПричину Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Товары = Неопределено Тогда

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
				И НЕ Ваучер.ДляНоменклатурныхГрупп.Количество() = 0 Тогда

				МассивНоменклатурныхГрупп = Ваучер.ДляНоменклатурныхГрупп.ВыгрузитьКолонку("НоменклатурнаяГруппа");

				Для Каждого СтрокаТовары Из Товары Цикл

					Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
						И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) Тогда

						Если МассивНоменклатурныхГрупп.Найти(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) = Неопределено Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа не подходит для Ваучера") + ": " + СокрЛП(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) + " (" + СтрокаТовары.Номенклатура + ")";
							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если НЕ Ваучер.ДляНоменклатурыИЕеГрупп.Количество() = 0 Тогда
				МассивНоменклатуры = Ваучер.ДляНоменклатурыИЕеГрупп.ВыгрузитьКолонку("Номенклатура");
				Для Каждого СтрокаТовары Из Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
						ЭлементПодходит = ЛОЖЬ;

						Для Каждого ЭлементМассиваНоменклатуры Из МассивНоменклатуры Цикл

							Если (НЕ ЭлементМассиваНоменклатуры.ЭтоГруппа
								И СтрокаТовары.Номенклатура = ЭлементМассиваНоменклатуры)
								ИЛИ (ЭлементМассиваНоменклатуры.ЭтоГруппа
								И СтрокаТовары.Номенклатура.ПринадлежитЭлементу(ЭлементМассиваНоменклатуры)) Тогда

								ЭлементПодходит = ИСТИНА;
							КонецЕсли;
						КонецЦикла;

						Если НЕ ЭлементПодходит Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа номенклатуры не подходит для Ваучера") + ": " + СокрЛП(СтрокаТовары.Номенклатура);
							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
				И НЕ Ваучер.ДляСкладов.Количество() = 0 Тогда

				Если ВзятьСкладыКолонкойИзТаблицы
					И НЕ Товары = Неопределено Тогда

					СкладыДляВаучера = Товары.ВыгрузитьКолонку("Склад");
					МассивСкладов = Ваучер.ДляСкладов.ВыгрузитьКолонку("Склад");
					Для Каждого СкладДляВаучера Из СкладыДляВаучера Цикл

						Если ЗначениеЗаполнено(СкладДляВаучера)
							И МассивСкладов.Найти(СкладДляВаучера) = Неопределено Тогда

							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад не подходит для Ваучера") + ": " + СокрЛП(СкладДляВаучера);
							Если ВернутьПервуюПричину Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;

					КонецЦикла;
				Иначе
					Если Склад = Неопределено Тогда
						Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(Склад) Тогда
						Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
					КонецЕсли;

					Если ЗначениеЗаполнено(Склад) Тогда
						МассивСкладов = Ваучер.ДляСкладов.ВыгрузитьКолонку("Склад");
						Если МассивСкладов.Найти(Склад) = Неопределено Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад не подходит для Ваучера") + ": " + СокрЛП(Склад);

							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПроверитьЧтоВаучерУжеИспользован(Знач Ваучер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПринадлежностьВаучеров.Сумма,
	|	НакоплениеНаВаучеры.Сумма КАК СуммаНакопления
	|ИЗ РегистрСведений.ПринадлежностьВаучеров КАК ПринадлежностьВаучеров,
	|	РегистрНакопления.НакоплениеНаВаучеры КАК НакоплениеНаВаучеры
	|ГДЕ ПринадлежностьВаучеров.Ваучер = &Ваучер
	|	И НакоплениеНаВаучеры.Ваучер = &Ваучер";
	Запрос.УстановитьПараметр("Ваучер", Ваучер);

	РезультатЗапроса = Запрос.Выполнить();
	Результат = НЕ РезультатЗапроса.Пустой();

	Возврат Результат;

КонецФункции //Проверить Что Ваучер Уже Использован

Функция   НайтиСвязаннуюНоменклатурнуюГруппу(Знач Родитель)

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
	|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
	|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатурныеГруппы.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   СгенерироватьСерию(Знач ФормулаГенерацииСерий = Неопределено, Знач Номенклатура, Знач ДобавитьККоду = 0) Экспорт

	Если ФормулаГенерацииСерий = Неопределено Тогда
		ФормулаГенерацииСерий = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаГенерацииСерий");
	КонецЕсли;

	Результат = "";
	Код = ОбщийМодульСервисСервер.МаксимальныйКодЭлемента("СерииНоменклатуры", ИСТИНА) + 1 + ДобавитьККоду;
	Если ЗначениеЗаполнено(ФормулаГенерацииСерий) Тогда
		Выполнить(" Результат = " + ФормулаГенерацииСерий.Формула + "; ");
	КонецЕсли;

	Возврат Результат;

КонецФункции //Сгенерировать Серию

Функция   СобственноеЗначениеНаСервере(Знач Номенклатура, Знач Язык, Знач ПолеПредставления = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Язык) Тогда
		Язык = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПолеПредставления) Тогда
		ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;

	Результат = "";

	Если ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, , , Язык);
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, "НаименованиеДляПечати", , Язык);
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул") Тогда
		Результат = Номенклатура.Артикул;
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Вес") Тогда
		Результат = "" + Номенклатура.Вес;
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Высота") Тогда
		Результат = "" + Номенклатура.Высота;
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Длина") Тогда
		Результат = "" + Номенклатура.Длина;
	ИначеЕсли ПолеПредставления = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Ширина") Тогда
		Результат = "" + Номенклатура.Ширина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   СоздатьНоменклатуру(Знач ШтрихКод, Знач Производитель, Знач НоменклатурнаяГруппа, Знач Цена = 0, Знач Наименование, Знач ВидЦен, Знач Родитель = Неопределено, Знач Серия = "")  Экспорт

	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
			И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда

			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , );
			КонецЕсли;

			Возврат Неопределено;
		ИначеЕсли ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
				родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);

				Если НЕ ОбщийМодульПовтор.ЭтоГруппа(родитель) Тогда
					Родитель = Неопределено;
				КонецЕсли;
			КонецЕсли;

			Если ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда

				Формула = ВРег(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.формула);
				Ошибка = ЛОЖЬ;

				Если НЕ найти(формула, "ЦЕНА") = 0
					И цена = 0 Тогда

					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!"), , );
					КонецЕсли;

					Ошибка = ИСТИНА;
				КонецЕсли;

				Если НЕ найти(формула, "ПРОИЗВОДИТЕЛЬ") = 0
					И НЕ ЗначениеЗаполнено(Производитель) Тогда

					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
					КонецЕсли;

					Ошибка = ИСТИНА;
				КонецЕсли;

				Если НЕ найти(формула, "ВидЦен") = 0
					И НЕ ЗначениеЗаполнено(ВидЦен) Тогда

					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Вид цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
					КонецЕсли;

					Ошибка = ИСТИНА;
				КонецЕсли;

				Если НЕ найти(формула, "ШТРИХКОД") = 0
					И НЕ ЗначениеЗаполнено(ШтрихКод) Тогда

					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
					КонецЕсли;

					Ошибка = ИСТИНА;
				КонецЕсли;

				Если Ошибка Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НоваНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваНоменклатура.Наименование 		  = Наименование;
	НоваНоменклатура.ОсновнойШтрихКод 	  = ШтрихКод;
	НоваНоменклатура.Производитель 		  = Производитель;
	НоваНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;

	Если НЕ родитель = Неопределено
		И ЗначениеЗаполнено(родитель) Тогда

		НоваНоменклатура.родитель = родитель;
	КонецЕсли;

	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		НоваНоменклатура.Цена = Цена;
	КонецЕсли;

	НоваНоменклатура.Записать();

	Если НЕ ПустаяСтрока(серия) Тогда
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.Наименование = Серия;
		НоваяСерия.Владелец 	= НоваНоменклатура.Ссылка;
		НоваяСерия.Записать();
	КонецЕсли;

	Если НЕ Цена = 0
		И ИспользоватьСложныйМеханизмЦен Тогда

		Если ЗначениеЗаполнено(ВидЦен) Тогда
			Дата = Началомесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 3600 * 24;
			ЗаписьЦены = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			ЗаписьЦены.ВидЦен 	  = ВидЦен;
			ЗаписьЦены.Номенклатура = НоваНоменклатура.Ссылка;
			ЗаписьЦены.Период 	  = Дата;
			ЗаписьЦены.Цена	 	  = Цена;
			ЗаписьЦены.Вручную	  = ИСТИНА;
			ЗаписьЦены.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена установлена при создании номенклатуры");
			Попытка
				ЗаписьЦены.Записать(ИСТИНА);
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", НоваНоменклатура.Ссылка);
				СтрокаТовара.Вставить("Цена", Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , ЛОЖЬ);
				// на случай наименования по цене
				НоваНоменклатура = НоваНоменклатура.Ссылка.ПолучитьОбъект();
				НоваНоменклатура.записать();
			Исключение
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла Ошибка при установке цены") + ": " + ТекстОписаниеОшибки);
				КонецЕсли;
			КонецПопытки;
		Иначе
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Вид цен!"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат НоваНоменклатура.Ссылка;

КонецФункции // Создать Номенклатуру

Функция   УстановитьАртикулНоменклатурыПоФормуле(Знач ОбъектНоменклатура) Экспорт

	Результат = "";
	ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ОбъектНоменклатура, "Артикул", ИСТИНА, Результат);

	Возврат Результат;

КонецФункции

Процедура УстановитьРеквизитНоменклатурыПоФормуле(Знач НоменклатураОбъект, Знач ИмяРеквизита = "Наименование", Знач ВернутьРезультат = ЛОЖЬ, Результат = Неопределено) Экспорт

	// Если ВернутьРезультат Тогда НоменклатураОбъект может быть ссылкой
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда

		Если ИмяРеквизита = "Наименование"
			И НЕ ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			И ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда

			СвязаннаяНоменклатурнаяГруппа = НайтиСвязаннуюНоменклатурнуюГруппу(НоменклатураОбъект.Родитель);

			Если НЕ СвязаннаяНоменклатурнаяГруппа = Неопределено
				И НЕ НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа Тогда

				НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда

		Если ИмяРеквизита = "Артикул"
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьАртикулДажеКогдаОнУказанВручную")
			И НЕ ПустаяСтрока(НоменклатураОбъект.Артикул) Тогда

			Возврат; // не перезаполнять
		КонецЕсли;

		Формула = Неопределено;

		Если ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа) Тогда
			Если ИмяРеквизита = "Наименование"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы) Тогда

				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.Формула;

			ИначеЕсли ИмяРеквизита = "Артикул"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияАртикула) Тогда

				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияАртикула.Формула;

			ИначеЕсли ИмяРеквизита = "НаименованиеДляПечати"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияПолногоНаименованияНоменклатуры) Тогда

				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияПолногоНаименованияНоменклатуры.Формула;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Формула) Тогда
			Если ИмяРеквизита = "Артикул" Тогда
				ФормулаФормированияАртикула = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияАртикула");
				Если ЗначениеЗаполнено(ФормулаФормированияАртикула) Тогда
					Формула = ФормулаФормированияАртикула.Формула;
				КонецЕсли;
			ИначеЕсли ИмяРеквизита = "Наименование" Тогда
				ФормулаОбщая = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию");

				Если ЗначениеЗаполнено(ФормулаОбщая) Тогда
					Формула = ФормулаОбщая.Формула;
				КонецЕсли;
			ИначеЕсли ИмяРеквизита = "НаименованиеДляПечати" Тогда
				ФормулаОбщая = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияПолногоНаименованияНоменклатуры");

				Если ЗначениеЗаполнено(ФормулаОбщая) Тогда
					Формула = ФормулаОбщая.Формула;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Формула) Тогда
			Попытка
				Попытка
					Номенклатура = НоменклатураОбъект.Ссылка;
				Исключение
					Номенклатура = НоменклатураОбъект.Номенклатура;

					Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
						Номенклатура = Неопределено;
					КонецЕсли;
				КонецПопытки;

				Цена 		 = 0;
				Цена2 		 = 0;
				Цена3 		 = 0;
				ЛьготнаяЦена = 0;
				ФормулаВРег  = ВРег(Формула);
				Дата 		 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				Валюта 		 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				Валюта2 	 = Валюта;
				Валюта3 	 = Валюта;

				Если НЕ Найти(ФормулаВРег, "ЦЕНА") = 0 Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
					// усл не менять

					Если (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
						И ЗначениеЗаполнено(Номенклатура))
						ИЛИ (ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура")
						И ЗначениеЗаполнено(Номенклатура.ссылка)) Тогда

						Формулаврег = ВРег(Формула);
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ИСТИНА);
						Если Цена = 0 Тогда
							Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
						КонецЕсли;
					Иначе

						Если НЕ Номенклатура = Неопределено
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") Тогда

							Попытка
								Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура.Ссылка, ВидЦен, Дата, ИСТИНА);
							Исключение
							КонецПопытки;
						Иначе
							Попытка
								Цена = НоменклатураОбъект.Цена;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;

					ВидЦен2 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");

					Если ЗначениеЗаполнено(ВидЦен2) Тогда
						Цена2 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен2, Дата);
						Валюта2 = ВидЦен2.ВалютаЦены;
					КонецЕсли;

					ВидЦен3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТретийВидЦенДляФормул");

					Если ЗначениеЗаполнено(ВидЦен3) Тогда
						Цена3 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен3, Дата);
						Валюта3 = ВидЦен3.ВалютаЦены;
					КонецЕсли;

					Если НЕ Найти(ФормулаВРег, "ЛЬГОТНАЯЦЕНА") = 0 Тогда
						ЛьготнаяЦена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(Номенклатура.Ссылка, , Цена, ВидЦен);
					КонецЕсли;
				КонецЕсли;

				ЗначениеРеквизитаНовое 	= "";
				Производитель 			= НоменклатураОбъект.Производитель;
				НоменклатурнаяГруппа 	= НоменклатураОбъект.НоменклатурнаяГруппа;
				Выполнить(" ЗначениеРеквизитаНовое = """" + "  + Формула  + ";");

				Если ВернутьРезультат Тогда
					Результат = ЗначениеРеквизитаНовое;
				Иначе
					Если НЕ ЗначениеРеквизитаНовое = НоменклатураОбъект[ИмяРеквизита] Тогда
						НоменклатураОбъект[ИмяРеквизита] = ЗначениеРеквизитаНовое;
					КонецЕсли;
				КонецЕсли;

			Исключение
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке авто-наименования номенклатуры") + ": " + ТекстОписаниеОшибки, , НоменклатураОбъект);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   УстановитьШтрихКодНоменклатурыПоФормуле(Знач ОбъектНоменклатура, Знач ФормулаШтрихКода = "", Знач ВидЦен = Неопределено, Знач Дата = Неопределено, Знач Цена = Неопределено, Знач СерияНоменклатуры = "", Знач ЕдиницаИзмерения = Неопределено) экспорт

	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Если ПустаяСтрока(ФормулаШтрихКода) Тогда

		Если ЗначениеЗаполнено(ОбъектНоменклатура.Производитель)
			И ЗначениеЗаполнено(ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры) Тогда

			ФормулаШтрихКода = ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры.Формула;
		Иначе
			ФормулаШтрихКодаСсылка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры");
			Если ЗначениеЗаполнено(ФормулаШтрихКодаСсылка) Тогда
				ФормулаШтрихКода = ФормулаШтрихКодаСсылка.Формула;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Результат = "";

	Если ЗначениеЗаполнено(ФормулаШтрихКода) Тогда
		Попытка
			Номенклатура = ОбъектНоменклатура;
			Если НЕ Номенклатура = Неопределено Тогда
				Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");

				Если ВидЦен = Неопределено Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				Иначе
					Валюта = ВидЦен.ВалютаЦены;
				КонецЕсли;

				Если Цена = Неопределено Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, , , , , , , , ЕдиницаИзмерения);
				КонецЕсли;

				НоменклатурнаяГруппа = ОбъектНоменклатура.НоменклатурнаяГруппа;
				Производитель = ОбъектНоменклатура.Производитель;
				Выполнить(" Результат = """"+" + ФормулаШтрихКода + ";");
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
					Результат = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(Результат, ЛОЖЬ);
				КонецЕсли;
			КонецЕсли;

		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при авто-формировании Штрих-кода номенклатуры") + ": " + ТекстОписаниеОшибки, , ОбъектНоменклатура);
			КонецЕсли;

		КонецПопытки;
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуEAN13") Тогда
		ПервыеТриЧисла = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КодСтраныПервыеТриЧислаШтрихКодаПоEAN13");
		ПроизводителяЧетыреЧисла = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КодПроизводителяЧетыреЧислаШтрихКодаПоEAN13");
		ДополнитьСтрокуПодстрокой(ПервыеТриЧисла, "0", 3, ИСТИНА);
		ДополнитьСтрокуПодстрокой(ПроизводителяЧетыреЧисла, "0", 4, ЛОЖЬ);
		ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);

		Если ПустаяСтрока(ТекущийКод) Тогда // новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);
		КонецЕсли;

		ДополнитьСтрокуПодстрокой(ТекущийКод, "0", 5, ЛОЖЬ);
		Штрихкод = "" + ПервыеТриЧисла + ПроизводителяЧетыреЧисла + ТекущийКод;
		Коэффициент = 1;
		Сумма = 0;

		Для Сч = 1 По 12 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;

		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Результат = Штрихкод + ПроверочныйСимвол;
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуCode128") Тогда
		ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);

		Если ПустаяСтрока(ТекущийКод) Тогда // новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);
		КонецЕсли;

		Результат = "" + СокрЛП(ПервыеТриЧисла) + СокрЛП(ПроизводителяЧетыреЧисла) + ТекущийКод;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	Возврат НЕ Номенклатура.ЭтоГруппа И Номенклатура.ЭтоНабор;
КонецФункции
