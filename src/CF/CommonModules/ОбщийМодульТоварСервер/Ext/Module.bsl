//sza150112-1803 фикс
//sza150109-2012 
//sza141228-2129
//sza141222-1358 нн
//sza141202-1416 возв реал по себест
//sza141201-0019
//sza141124-2238
//sza141117-1454 
//sza141117-0309 
//sza141115-2252
//sza141101-0306 : 
//sza141015-1439 
//sza141011-2125
//sza141009-0147 ЧислоЭтикетокНаСтранице
//sza140703-2353  косметика
//sza140612-1545 : 
//ыяф131205
Процедура ИзменениеКонстантыИспользованияНаборовПередЗаписью(Знач Источник, Отказ) Экспорт
	
	Если НЕ источник.Значение Тогда //отключают наборы
		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КорректировкиИРегистрацияОстатковТовары.Номенклатура
		|ИЗ Документ.КорректировкиИРегистрацияОстатков.Товары КАК КорректировкиИРегистрацияОстатковТовары
		|ГДЕ КорректировкиИРегистрацияОстатковТовары.Ссылка.Проведен = ИСТИНА
		|	И КорректировкиИРегистрацияОстатковТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПеремещенияТовараТовары.Номенклатура
		|ИЗ Документ.ПеремещенияТовара.Товары КАК ПеремещенияТовараТовары
		|ГДЕ ПеремещенияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПеремещенияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Номенклатура
		|ИЗ	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ ПоступленияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПоступленияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 РасходыТовараТовары.Номенклатура
		|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности отменить использование Наборов! Они уже участвуют в проведенных документах."), ,);
			КонецЕсли;
			
			Отказ = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция   НаименованиеГруппыПоПервомуСлову(Знач Наименование, Знач НеСоздавать = ЛОЖЬ) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	Если НЕ ПустаяСтрока(Наименование) тогда
		
		КонецСлова = найти(Наименование, " ");
		Если КонецСлова = 0 тогда
			КонецСлова = найти(Наименование, ",");
			Если КонецСлова = 0 тогда
				КонецСлова = найти(Наименование, ";");
				Если КонецСлова = 0 тогда
					КонецСлова = найти(Наименование, ".");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ КонецСлова = 0 тогда
			наименование = лев(наименование, КонецСлова);	        	
		КонецЕсли;
		
		Если ПустаяСтрока(наименование) тогда
			Возврат неопределено;
		Иначе
			Возврат ОбщийМодульПовтор.ПолучитьГруппуНоменклатурыПоНаименованию(наименование, НеСоздавать);	
		КонецЕсли;
		
	Иначе
		Возврат неопределено;	
	КонецЕсли;
	
КонецФункции //НаименованиеГруппыПоПервомуСлову(Наименование)

Функция   НаименованиеЭтойНоменклатрнойГруппыНазначается(Знач НоменклатурнаяГруппа) Экспорт	
	Возврат ЗначениеЗаполнено(НоменклатурнаяГруппа)	И ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы);	
КонецФункции //НаименованиеЭтойНоменклатрнойГруппыНазначается

Функция   НайтиНоменклатуруПоАртикулу(Знач Артикул, Знач ТочноеСоотвествие = ЛОЖЬ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Артикул " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ результатзапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ссылка;
		
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

Функция   НапечататьЭтикетку(Знач СтруктураПечати, Таб = Неопределено, Знач ЭтикеткаДляОднойНоменклатуры = ИСТИНА, Знач ЧислоЭтикетокНаСтраницеРегулируетсяРанее = ЛОЖЬ) Экспорт
	
	ИмяПринтера 		   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеПринтераШтрихКодов");
	ПечатьНаОбычныйПринтер = НЕ ЗначениеЗаполнено(ИмяПринтера);		
	ИспользоватьШтрихКоды  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	КоличествоВыведено = 0;
	
	Если Таб = Неопределено Тогда
		Таб = Новый ТабличныйДокумент;
		Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Мелкая1" + СокрЛП(ИмяКомпьютера());
		Таб.КлючПараметровПечати = Таб.ИмяПараметровПечати;
	КонецЕсли;
	
	ЧислоЭтикетокНаЛистеПоГоризонтали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоГоризонтали");
	Если ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
		ЧислоЭтикетокНаЛистеПоГоризонтали = 1;
	КонецЕсли;
	
	ЧислоЭтикетокНаЛистеПоВертикали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоВертикали");
	Если ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
		ЧислоЭтикетокНаЛистеПоВертикали = 1;
	КонецЕсли;
	
	Если ЭтикеткаДляОднойНоменклатуры Тогда
		ЧислоЭтикетокНаСтранице = ЧислоЭтикетокНаЛистеПоВертикали * ЧислоЭтикетокНаЛистеПоГоризонтали;
	Иначе
		ЧислоЭтикетокНаСтранице = 1;
	КонецЕсли;
	
	СуммаТаб = Новый ТабличныйДокумент;
	СуммаТаб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СУМТАБ" + СокрЛП(ИмяКомпьютера());
	СуммаТаб.КлючПараметровПечати = СуммаТаб.ИмяПараметровПечати;
	
	ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено;
	ДополнительнаяСтрокаЭтикетки 		= "";
	ВывестиДополнительнуюСтрокуЭтикетки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВывестиДополнительнуюСтрокуЭтикетки");
	Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");
	
	Если ВывестиДополнительнуюСтрокуЭтикетки
		И СтруктураПечати.Свойство("ДополнительнаяСтрокаЭтикетки", ДополнительнаяСтрокаЭтикетки) 
		И ЗначениеЗаполнено(ДополнительнаяСтрокаЭтикетки)
		И НЕ ПустаяСтрока(ДополнительнаяСтрокаЭтикетки) Тогда
		
		РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаДополнительнойСтрокиЭтикетки");
		Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
			ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
			ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
			ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
			ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
		Иначе
			ДополнительнаяСтрокаЭтикеткиОбласть= Макет.ПолучитьОбласть("Заголовок8");
		КонецЕсли;
		
		ДополнительнаяСтрокаЭтикеткиОбласть.Параметры.ТекстЗаголовка = ДополнительнаяСтрокаЭтикетки;
	КонецЕсли;
	
	ЗаголовокЭтикеткиОбласть = Неопределено;
	ТекстЗаголовка = "";
	
	Если СтруктураПечати.Свойство("ТекстЗаголовка", ТекстЗаголовка) 
		И ЗначениеЗаполнено(ТекстЗаголовка)
		И НЕ ПустаяСтрока(ТекстЗаголовка) Тогда
		
		РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаЗаголовкаЭтикетки");
		Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
			ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
			ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
			ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
			ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
		Иначе
			ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок8");
		КонецЕсли;
		
		ЗаголовокЭтикеткиОбласть.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ОбъектГотов = ИСТИНА;
		
	Иначе
		ОбъектГотов = ЛОЖЬ;			
	КонецЕсли;				
	
	Если ИспользоватьШтрихКоды 
		И НЕ ПустаяСтрока(СтруктураПечати.ШтрихКод) Тогда
		
		ФорматЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФорматЭтикетки");
		АльтернативныйСпособФормированияШтрихКодаНаЭтикетках = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("АльтернативныйСпособФормированияШтрихКодаНаЭтикетках");
		
		Если АльтернативныйСпособФормированияШтрихКодаНаЭтикетках Тогда
			
			Макет = обработки.ПечатьШтрихкода.ПолучитьМакет("МакетМелкий");
			
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("Строка|Колонка");
			
			Эталон = Обработки.ПечатьШтрихкода.ПолучитьМакет("Эталон");
			КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
			
			РисунокШтрихКод = ЭтикеткаОбласть.Рисунки.ШтрихКод;
			
			ШиринаЭтикетки = Окр(РисунокШтрихКод.Ширина / КоличествоМиллиметровВПикселе);
			Если ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_3_Высота_1  тогда
				ШиринаЭтикетки = ШиринаЭтикетки / 2 * 3;
			Иначеесли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_1  тогда
				ШиринаЭтикетки = ШиринаЭтикетки / 2 * 5;
			КонецЕсли;	
			
			ВысотаЭтикетки = Окр(РисунокШтрихКод.Высота / КоличествоМиллиметровВПикселе);
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина"		 , ШиринаЭтикетки);
			ПараметрыШтрихкода.Вставить("Высота"		 , ВысотаЭтикетки);
			ПараметрыШтрихкода.Вставить("ТипКода"		 , 99);//ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128 );//;ТипШтрихкода);
			//ПараметрыШтрихкода.Вставить("ОтображатьТекст", ИСТИНА);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст", ЛОЖЬ);
			ПараметрыШтрихкода.Вставить("РазмерШрифта"	 , 9);
			ПараметрыШтрихкода.Вставить("УголПоворота"	 , 0);//(УголПоворота));
			ПараметрыШтрихкода.Вставить("Штрихкод"		 , СтруктураПечати.ШтрихКод);
			
			Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			
			РисунокШтрихКод.Картинка = Картинка;
			СуммаТаб.Вывести(ЭтикеткаОбласть);
			
			РисунокШтрихКод = Неопределено;
			ОбъектГотов = ИСТИНА;
			
			Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");
			
		Иначе
			Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Мелкая1" + СокрЛП(ИмяКомпьютера());
			Таб.КлючПараметровПечати = Таб.ИмяПараметровПечати;
			
			ЭтикеткаОбласть = Макет.ПолучитьОбласть(1, 1, 4, 2);
			РисунокШтрихКод = ЭтикеткаОбласть.Рисунки.ШтрихКод;
			
			Если ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_3_Высота_1  тогда
				ВысотаЭтикетки = 50;
				ШиринаЭтикетки = 150;				
			Иначеесли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_1  тогда
				ВысотаЭтикетки = 30;
				ШиринаЭтикетки = 150;				
			Иначе
				ВысотаЭтикетки = 100;
				ШиринаЭтикетки = 150;
			КонецЕсли;	
			
			ВнешняяКомпонента = ПодключитьВнешнююКомпонентуПечатиШтрихкода();
			РисунокШтрихКод.Картинка = ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, СтруктураПечати.ШтрихКод, ШиринаЭтикетки, ВысотаЭтикетки);
			
			СуммаТаб.Вывести(ЭтикеткаОбласть);
			
			РисунокШтрихКод = Неопределено;
			ОбъектГотов = ИСТИНА;
			
		КонецЕсли;		
	КонецЕсли;
	
	Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
		Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>12 Тогда 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
		Иначе 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С");
		КонецЕсли;
		
	ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
		Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>16 Тогда 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
		Иначе 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
		КонецЕсли;
		
	Иначе
		Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>20 Тогда 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С3");
		Иначе 
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
		КонецЕсли;
	КонецЕсли;
	ЭтикеткаОбласть.Параметры.ТекстПодШтрихКодом = СтруктураПечати.ТекстСШтрихКодом;
	
	СуммаТаб.Вывести(ЭтикеткаОбласть);			
	
	Если ВывестиДополнительнуюСтрокуЭтикетки
		И НЕ ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено Тогда
		
		РазмещениеДополнительнойСтрокиЭтикетки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмещениеДополнительнойСтрокиЭтикетки");
		
		Если РазмещениеДополнительнойСтрокиЭтикетки = 1 Тогда //по центру
			Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
				ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
				ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
				СуммаТаб = ЗаголовокЭтикеткиОбласть;
			Иначе
				ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);
				СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
			КонецЕсли;
			
		ИначеЕсли РазмещениеДополнительнойСтрокиЭтикетки = 2 Тогда //сниуз
			Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
				ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
				ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
				СуммаТаб = ЗаголовокЭтикеткиОбласть;
			Иначе
				СуммаТаб.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
			КонецЕсли;
			
		Иначе //сверху
			Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(ЗаголовокЭтикеткиОбласть);	
			КонецЕсли;
			ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);
			СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗаголовокЭтикеткиОбласть = Неопределено ТОгда
		ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
		СуммаТаб = ЗаголовокЭтикеткиОбласть;
	КонецЕсли;
	
	Если НЕ (ЧислоЭтикетокНаЛистеПоВертикали = 1
		И ЧислоЭтикетокНаЛистеПоГоризонтали = 1) Тогда
		
		ТекущияПозицияПоГоризонтали = 1;
		ТекущияПозицияПоВертикали 	= 1;
		
		Строка = Новый ТабличныйДокумент;
		Строка.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
		Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;
		
		Пока ТекущияПозицияПоВертикали <= ЧислоЭтикетокНаЛистеПоВертикали Цикл
			Пока ТекущияПозицияПоГоризонтали <= ЧислоЭтикетокНаЛистеПоГоризонтали Цикл
				
				Строка.Присоединить(СуммаТаб);
				
				КоличествоВыведено = КоличествоВыведено + 1;
				Если КоличествоВыведено = СтруктураПечати.Количество Тогда
					Прервать;
				КонецЕсли;
				
				ТекущияПозицияПоГоризонтали = ТекущияПозицияПоГоризонтали + 1;
			КонецЦикла;
			Таб.Вывести(Строка);
			Если КоличествоВыведено = СтруктураПечати.Количество Тогда
				Прервать;
			КонецЕсли;
			Строка = Новый ТабличныйДокумент;
			Строка.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
			Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;
			
			ТекущияПозицияПоГоризонтали = 1;
			ТекущияПозицияПоВертикали = ТекущияПозицияПоВертикали + 1;
		КонецЦикла;
		
		//Если ТекущияПозицияПоГоризонтали > 0
		//	И ТекущияПозицияПоГоризонтали < ЧислоЭтикетокНаЛистеПоГоризонтали Тогда
		//	
		//	Таб.Вывести(Строка);
		//КонецЕсли;
		
	ИначеЕсли ОбъектГотов Тогда
		Таб.Вывести(СуммаТаб);
	КонецЕсли;
	
	Если ОбъектГотов тогда
		
		таб.РазмерКолонтитулаСверху = 0;
		таб.РазмерКолонтитулаСнизу 	= 0;
		Если НЕ ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
			Если (СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице) > 1 Тогда
				таб.КоличествоЭкземпляров = Окр(СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице);
			КонецЕсли;
		КонецЕсли;
		таб.ПолеСверху 	= 0;
		таб.ПолеСлева 	= 0;
		таб.ПолеСнизу 	= 0;
		таб.ПолеСправа 	= 0;
		таб.АвтоМасштаб = ИСТИНА;
		
		Если ЗначениеЗаполнено(ИмяПринтера) Тогда
			таб.ИмяПринтера = ИмяПринтера;
		КонецЕсли;
		
		Макет = Неопределено;
	КонецЕсли;
	
	возврат Таб;
	
КонецФункции

Функция   ОбнаружитьЕдиницуНоменклатуры(Знач Номенклатура, Знач Наименование) Экспорт
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЕдиницыИзмерения.Ссылка
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ ЕдиницыИзмерения.Наименование = &Наименование
		|	И ЕдиницыИзмерения.Владелец = &Номенклатура";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Возврат ВыборкаДетальныеЗаписи.сылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	
КонецФункции //ОбнаружитьЕдиницуНоменклатуры

Функция   ОбнаружитьСериюНоменклатуры(Знач Номенклатура, Знач Наименование, Знач СоздаватьНовую = ЛОЖЬ) Экспорт
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Ссылка
		|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ СерииНоменклатуры.Наименование = &Наименование
		|	И СерииНоменклатуры.Владелец = &Номенклатура";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Возврат ВыборкаДетальныеЗаписи.сылка;
			
		КонецЕсли;
		
		Если СоздаватьНовую Тогда
			
			НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НоваяСерия.Наименование = Наименование;
			НоваяСерия.Владелец 	= Номенклатура;
			НоваяСерия.Записать();
			
			Возврат НоваяСерия.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	
КонецФункции //ОбнаружитьСериюНоменклатуры

Функция   ОбнаружитьСпецификациюНоменклатуры(Знач Номенклатура, Знач Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Результат = ПредопределенноеЗначение("Справочник.Спецификации.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпецификацииТовары.Ссылка
	|ИЗ Справочник.Спецификации.Товары КАК СпецификацииТовары
	|ГДЕ СпецификацииТовары.Номенклатура = &Номенклатура
	|	И СпецификацииТовары.Ссылка.НеАктуальна = ЛОЖЬ
	|	И СпецификацииТовары.Ссылка.Дата <= &Дата
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииТовары.Ссылка.Дата УБЫВ,
	|	СпецификацииТовары.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОкруглитьТоВары(Знач Ссылка, Знач Коэффициент, Знач ВидЦенОкруглятьТолькоВБольшуюСторону, Знач НаименованиеТаблицы) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Документссылка = Ссылка.ссылка;
		
		ТипЗнчДокументссылка = ТипЗнч(Документссылка);
		ПеремещенияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.РасходыТовара");
		ВыполненияРабот		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументссылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументссылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		
		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл			
			
			Цена = СтрокаТовара.Цена;
			
			Если НЕ Коэффициент = 0 тогда
				Цена = Цена * (10 * Коэффициент);	
			КонецЕсли;
			ЦенаНов = Окр(Цена);
			
			Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(Цена);
				Если НЕ ЦенаЦел = Цена тогда
					Цена = ЦенаЦел + 1;
				КонецЕсли;
				
			Иначеесли не цена = 0 тогда				
				Цена = окр(Цена);
				
			КонецЕсли;	
			
			Если НЕ Коэффициент = 0 тогда
				Цена = Цена / (10 * Коэффициент);	
			КонецЕсли;
			
			СтрокаТовара.Цена = Цена;
			
			Если Врег(НаименованиеТаблицы) = "ТОВАРЫ" Тогда
				Если ВыполненияРабот Тогда 	
					
					Цена = СтрокаТовара.ЦенаПлан;
					
					Если НЕ Коэффициент = 0 тогда
						Цена = Цена * (10 * Коэффициент);	
					КонецЕсли;
					ЦенаНов = Окр(Цена);
					
					Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
						
						ЦенаЦел = цел(Цена);
						Если НЕ ЦенаЦел = Цена тогда
							Цена = ЦенаЦел + 1;
						КонецЕсли;
						
					Иначеесли не цена = 0 тогда
						
						Цена = окр(Цена);
						
					КонецЕсли;	
					
					Если НЕ Коэффициент = 0 тогда
						Цена = Цена / (10 * Коэффициент);	
					КонецЕсли;
					СтрокаТовара.ЦенаПлан = Цена;
				КонецЕсли;
				
				Если РасходыТовара 
					ИЛИ ВыполненияРабот Тогда
					
					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
						СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, документссылка.видцен, документссылка.клиентпоставщик);	
					КонецЕсли;
					
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
					
					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, документссылка.видцен, документссылка.клиентпоставщик);
						КонецЕсли;
						
						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
						СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);
					КонецЕсли;
					
				ИначеЕсли ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков Тогда
					
					СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					
				Иначеесли Инвентаризации 
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
					
					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура); //акция ном
					Если НЕ процентскидки = 0 
						И НЕ СтрокаТовара.Цена = 0 тогда
						
						СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
					КонецЕсли;
					
				ИначеЕсли УстановкиЦен Тогда
					
					Если Коэффициент = 0 Тогда
						СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);	
					КонецЕсли;
					СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена; 				
					
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки(), , Ссылка);
			КонецЕсли;
		КонецПопытки; 		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОчиститьТоварыНаСервере(Знач Ссылка) Экспорт	
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		ДокументОбъект.Товары.Очистить();
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки(), , Ссылка);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //ОчиститьТоварыНаСервере

Процедура ПересчитатьТоварыНаСервере(Знач Ссылка, Знач Коэффициент = 0, Знач НаименованиеТаблицы = "Товары", Знач БезДопРасчетов = ЛОЖЬ) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Документссылка = Ссылка.ссылка;
		
		ТипЗнчДокументссылка = ТипЗнч(Документссылка);
		ПеремещенияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.РасходыТовара");
		ВыполненияРабот		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументссылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументссылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		
		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл			
			
			Если Коэффициент = 0 Тогда
				
				Если ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ РасходыТовара тогда
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					
				ИначеЕсли КорректировкиИРегистрацияОстатков Тогда
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					
				ИначеЕсли Инвентаризации ТОгда
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ, , , , , Ссылка);
					
				ИначеЕсли Договора Тогда				
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ, , , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					
				ИначеЕсли УстановкиЦен Тогда
					
					СтрокаТовара.СтараяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, , , , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					
				ИначеЕсли ВыполненияРабот Тогда
					СтрокаТовара.Цена 		= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, СтрокаТовара.Дата, ЛОЖЬ,  СтрокаТовара.Количество, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					СтрокаТовара.ЦенаПлан 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, СтрокаТовара.ДатаПлан, ЛОЖЬ,  СтрокаТовара.КоличествоПлан, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
				КонецЕсли;
				
			Иначе
				СтрокаТовара.Цена = СтрокаТовара.Цена * Коэффициент;
				Если ВыполненияРабот Тогда 	
					СтрокаТовара.ЦенаПлан = СтрокаТовара.ЦенаПлан * Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ БезДопРасчетов Тогда
				
				Если РасходыТовара 
					ИЛИ ВыполненияРабот Тогда
					
					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
						СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, документссылка.видцен, документссылка.клиентпоставщик);
					КонецЕсли;
					
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
					
					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, документссылка.видцен, документссылка.клиентпоставщик);
						КонецЕсли;
						
						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
						СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);
					КонецЕсли;
					
				ИначеЕсли ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков Тогда
					
					СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					
				Иначеесли Инвентаризации 
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
					
					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура); //акция ном
					Если НЕ процентскидки = 0 
						И НЕ СтрокаТовара.Цена = 0 тогда
						
						СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
					КонецЕсли;
					
				ИначеЕсли УстановкиЦен Тогда
					
					Если Коэффициент = 0 Тогда
						СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);	
					КонецЕсли;
					СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена; 				
					
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки(), , Ссылка);
			КонецЕсли;
		КонецПопытки; 		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПечатьГарантийногоТалона(ТабДок, Знач ПараметрыПечати) Экспорт
	
	Ссылка = ПараметрыПечати.Ссылка;
	ПереченьЭлементов  = ПараметрыПечати.ПереченьЭлементов;
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Склад,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		СерияНоменклатуры,
		|		Сотрудник,
		|		Количество,
		|		Цена,
		|		План,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ВаловаяПрибыль,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот
		|ИЗ
		|	Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ
		|	ВыполненияРабот.Ссылка = &Ссылка";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Представление,
		|	РасходыТовара.МоментВремени
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	ТабДок.Очистить();
	
	СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
	Если НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;
	
	КлиентПоставщик = Неопределено;
	КлиентПоставщикСтрока = "";
	
	ВставлятьРазделительСтраниц = ЛОЖЬ;
	Пока Выборка.Следующий() Цикл
		
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), СокрЛП(Организация.Адрес), СокрЛП(Организация.ЮридическийАдрес));;
		НашеОКПО 	= Организация.ОКПО;
		Дата 		= Выборка.Дата;
		Сотрудник 	= Выборка.Сотрудник;
		МассивСтрок = Новый Массив;
		
		Если НЕ ЭтоВыполнениеРабот Тогда			
			КлиентПоставщик = Выборка.КлиентПоставщик;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
			
			ВыборкаТоварыИзЗапроса = Выборка.Товары.Выбрать();
			СЧ = 1;
			Пока ВыборкаТоварыИзЗапроса.Следующий() Цикл
				
			ВыборкаТовары = Новый Структура;
			ВыборкаТовары.Вставить("НомерСтроки", СЧ);
			Сч = СЧ + 1 ;
			ВыборкаТовары.Вставить("Номенклатура", ВыборкаТоварыИзЗапроса.Номенклатура);
			ВыборкаТовары.Вставить("СерияНоменклатуры", ВыборкаТоварыИзЗапроса.СерияНоменклатуры);
			ВыборкаТовары.Вставить("Количество", ВыборкаТоварыИзЗапроса.Количество);
			ВыборкаТовары.Вставить("Цена", ВыборкаТоварыИзЗапроса.Цена);
			ВыборкаТовары.Вставить("Сумма", ВыборкаТоварыИзЗапроса.Сумма);
			ВыборкаТовары.Вставить("ПроцентСкидки", ВыборкаТоварыИзЗапроса.ПроцентСкидки);
			ВыборкаТовары.Вставить("СуммаБезСкидки", ВыборкаТоварыИзЗапроса.СуммаБезСкидки);
			ВыборкаТовары.Вставить("ЗаказКлиента", ВыборкаТоварыИзЗапроса.ЗаказКлиента);
			ВыборкаТовары.Вставить("Остроке", ВыборкаТоварыИзЗапроса.ОСтроке);
			ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
			ВыборкаТовары.Вставить("Производитель", ВыборкаТоварыИзЗапроса.Номенклатура.Производитель);
			
			//ЗаполнитьЗначенияСвойств(ВыборкаТовары, ВыборкаТоварыИзЗапроса);			
			
				МассивСтрок.Добавить(ВыборкаТовары);
			КонецЦикла;
			
		Иначе
			КлиентПоставщик = Выборка.Клиент;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта 			= ОсновнаяВалюта;
			
			ВыборкаТовары = Новый Структура;
			ВыборкаТовары.Вставить("НомерСтроки", 1);
			ВыборкаТовары.Вставить("Номенклатура", Выборка.Номенклатура);
			ВыборкаТовары.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
			ВыборкаТовары.Вставить("Количество", 1);
			ВыборкаТовары.Вставить("Цена", Выборка.ОценочнаяСтоимостьОбъектаРабот);
			ВыборкаТовары.Вставить("Сумма", Выборка.ОценочнаяСтоимостьОбъектаРабот);
			ВыборкаТовары.Вставить("ПроцентСкидки", 0);
			ВыборкаТовары.Вставить("СуммаБезСкидки", 0);
			ВыборкаТовары.Вставить("ЗаказКлиента", "");
			ВыборкаТовары.Вставить("Остроке", Выборка.Комментарий);
			ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
			ВыборкаТовары.Вставить("Производитель", Выборка.Производитель);
			
			МассивСтрок.Добавить(ВыборкаТовары);			
		КонецЕсли;
		
		Для Каждого ВыборкаТовары Из МассивСтрок Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда
				
				Если ПереченьЭлементов.ПечататьГарантийныйТалон Тогда
					Шапка = Макет.ПолучитьОбласть("Шапка");					
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					
					Шапка.Параметры.ОКПО = НашеОКПО;
					Шапка.Параметры.Дата = Дата;
					Шапка.Параметры.Валюта 		= Валюта;
					Шапка.Параметры.Организация = Организация;
					Шапка.Параметры.НашЮридическийАдрес = НашЮридическийАдрес;
					
					ПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(ВыборкаТовары.Номенклатура, , КлиентПоставщик);
					Шапка.Параметры.ПолноеНаименование = ПолноеНаименование + ?(ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) и ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.Производитель), " " + ВыборкаТовары.Номенклатура.Производитель, "");
					
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				Если ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя Тогда
					Шапка = Макет.ПолучитьОбласть("ПриемПоГарантии");		
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				Если ЭтоВыполнениеРабот 
					И ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
					
					Шапка = Макет.ПолучитьОбласть("ШапкаРабот");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ТабДок.Вывести(Шапка);	
					ВыборкаРаботы = Выборка.Товары.Выбрать();
					Пока ВыборкаРаботы.Следующий() Цикл
						Строка = Макет.ПолучитьОбласть("СтрокаРабот");
						Строка.Параметры.Заполнить(ВыборкаРаботы);
						ТабДок.Вывести(Строка);
					КонецЦикла;
				КонецЕсли;
				
				Если ПереченьЭлементов.ПечататьПодвалРаботИсполнителя Тогда
					Шапка = Макет.ПолучитьОбласть("ПодвалРабот");                   	
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				Если ПереченьЭлементов.ПечататьКвитанцию Тогда
					Шапка = Макет.ПолучитьОбласть("Квитанция");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					Шапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					Шапка.Параметры.Дата        = Выборка.Дата;
					Шапка.Параметры.Номер       = Выборка.Номер;
					Шапка.Параметры.Сотрудник	= Сотрудник;
					Шапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати 	 = ТекстВШапкеДокументовПриПечати;
					Шапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				Если ПереченьЭлементов.ПечататьГарантийныйТалонККвитанции Тогда
					Шапка = Макет.ПолучитьОбласть("ГарантийныйТалонККвитанции");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					Шапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					Шапка.Параметры.Дата        = Выборка.Дата;
					Шапка.Параметры.Номер       = Выборка.Номер;
					Шапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					Шапка.Параметры.Исполнитель		= Сотрудник;
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати   = ТекстВШапкеДокументовПриПечати;
					Шапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				Если ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
					Шапка = Макет.ПолучитьОбласть("Положение");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ТабДок.Вывести(Шапка);	
				КонецЕсли;
				
				ВставлятьРазделительСтраниц = ИСТИНА;	
			КонецЕсли;
		КонецЦикла;		
		
		Если ПереченьЭлементов.ПечататьЗаказНаряд Тогда
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			Шапка = Макет.ПолучитьОбласть("ЗаказНаряд");
			
			Шапка.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				
				Шапка.Параметры.АдресПодразделения 	  = Подразделение.Адрес;
				Шапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;
			Шапка.Параметры.ОтКого = "";
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Шапка.Параметры.Контрагент 			= КлиентПоставщик;
				Шапка.Параметры.ТелефоныКонтрагента = ОбщийМодульСервер.ПолучитьТекстТелефонов(КлиентПоставщик);
				Шапка.Параметры.АдресКонтрагента 	= ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;		
			
			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					Шапка.Параметры.Номенклатура 		 = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				
			ИначеЕсли НЕ Выборка.Ссылка.Товары.Количество() = 0 Тогда
				Номенклатура = Выборка.Ссылка.Товары[0].Номенклатура;	
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура 		 = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДок.Вывести(Шапка);
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		Если ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта Тогда
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			Шапка = Макет.ПолучитьОбласть("ТехнологическаяКартаРемонта");
			
			Шапка.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				
				Шапка.Параметры.АдресПодразделения 	  = Подразделение.Адрес;
				Шапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;
			Шапка.Параметры.ОтКого = "";
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Шапка.Параметры.Контрагент 			= КлиентПоставщик;
				Шапка.Параметры.ТелефоныКонтрагента = КлиентПоставщик.Телефон;
				Шапка.Параметры.АдресКонтрагента 	= ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;		
			
			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					Шапка.Параметры.Номенклатура = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				ТабДок.Вывести(Шапка);
				
			Иначе
				ВыборкаТовары = Выборка.Товары.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					
					Номенклатура = ВыборкаТовары.Номенклатура;
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						Шапка.Параметры.Номенклатура = Номенклатура;
						Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
						Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
						ТабДок.Вывести(Шапка);					
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьАктаВполненныхРабот(ТабДокРезультат, Знач ОбъектСсылка, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	Ссылка = ОбъектСсылка;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ" + СокрЛП(ИмяКомпьютера());
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	Шапка = Макет.ПолучитьОбласть("РазделительШапка");
	ТабДок.Вывести(Шапка);
	ТабДок.Область().СоздатьФорматСтрок();
			
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.СкладДляОбъектаВыполненияРабот,
		|	ВыполненияРабот.ДатаПоступленияОбъектаРаботНаНашСклад,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот,
		|	ВыполненияРабот.ДатаВыдачиОбъектаРаботКлиентуОбратно,
		|	ВыполненияРабот.КомментарийПриВыдачеОбъектаРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВыполненияРабот.Комментарий,
		|	ВыполненияРабот.СпособДоставки,
		|	ВыполненияРабот.ТалонТрек,
		|	ВыполненияРабот.КлиентОповещен,
		|	ВыполненияРабот.ТоварОтправлен,
		|	ВыполненияРабот.ДатаОтправки,
		|	ВыполненияРабот.ДатаОповещения,
		|	ВыполненияРабот.ДнейОтсрочки,
		|	ВыполненияРабот.НеПроводить,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВаловаяПрибыль,
		|		ВаловаяПрибыльПлан,
		|		Валюта,
		|		ВалютаПлан,
		|		Дата,
		|		ДатаПлан,
		|		Количество,
		|		КоличествоПлан,
		|		Курс,
		|		КурсПлан,
		|		Номенклатура,
		|		ОСтроке,
		|		План,
		|		ПроцентСкидки,
		|		ПроцентСкидкиПлан,
		|		СерияНоменклатуры,
		|		Склад,
		|		Сотрудник,
		|		Сумма,
		|		СуммаБезСкидки,
		|		СуммаБезСкидкиПлан,
		|		Цена,
		|		ЦенаПлан,
		|		ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ
		|	ВыполненияРабот.Ссылка = &Ссылка";
		
		КлиентПоставщик = Ссылка.Клиент;
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик КАК Клиент,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета,
		|	"""" КАК ТипРаботы,
		|	"""" КАК ОбъектКлиента,
		|	"""" КАК Номенклатура
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка = &Ссылка";
		
		КлиентПоставщик = Ссылка.КлиентПоставщик;		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьРеквизитАртикулНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
	ПечататьАртикул = ИспользоватьРеквизитАртикулНоменклатуры И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую");
	ОсновнаяВалюта  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	Если ЭтоВыполнениеРабот Тогда				
		ТипРаботы = Выборка.ТипРаботы;
	Иначе
		ТипРаботы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТипРаботПоУмолчанию");
	КонецЕсли;
	
	ЯзыкДокументов = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЯзыкПечатныхФорм");
	Если ЗначениеЗаполнено(КлиентПоставщик)
		И ЗначениеЗаполнено(КлиентПоставщик.ЯзыкДокументов) Тогда
		
		ЯзыкДокументов = КлиентПоставщик.ЯзыкДокументов;
		Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
			ЯзыкДокументов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
	
	Шапка = Макет.ПолучитьОбласть("ШапкаАкта");
	ОбъектРабот 	= Макет.ПолучитьОбласть("ОбъектРабот");
	ЗаголовокРабот  = Макет.ПолучитьОбласть("ЗаголовокРабот");
	СтрокаРабот 	= Макет.ПолучитьОбласть("СтрокаРабот");
	ПодвалРабот 	= Макет.ПолучитьОбласть("ПодвалРабот");
	
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаВидЦен = Выборка.ВидЦен;
		Если ЗначениеЗаполнено(ВыборкаВидЦен) 
			И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда
			
			ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");				
		КонецЕсли;
		
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.ПриемПередача = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("приема передачи выполненных работ (услуг)") + " № " + Выборка.Номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			Шапка.Параметры.Директор = Выборка.Организация.Руководитель;
		КонецЕсли;
		
		КлиентПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
		
		Шапка.Параметры.Клиент 	  = КлиентПоставщик;
		Шапка.Параметры.ТипРаботы = ТипРаботы;
		
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		Если ЗначениеЗаполнено(Выборка.ОбъектКлиента) Тогда
			ОбъектРабот.ОбъектКлиента = Выборка.ОбъектКлиента;
			ТабДок.Вывести(ОбъектРабот, Выборка.Уровень());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			ОбъектРабот.ОбъектКлиента = Выборка.Номенклатура;
			ТабДок.Вывести(ОбъектРабот, Выборка.Уровень());
		КонецЕсли;
		
		Количество = 0;
		Сумма 	   = 0;
		
		ТабДок.Вывести(ЗаголовокРабот);
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Номенклатура = ВыборкаТовары.Номенклатура;
			Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
			ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");			
			
			СтрокаРабот.Параметры.Заполнить(ВыборкаТовары);
			СтрокаРабот.Параметры.НоменклатураПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
			ТабДок.Вывести(СтрокаРабот, ВыборкаТовары.Уровень());
			
			Количество = Количество + ВыборкаТовары.Количество;
			Сумма = Сумма + ВыборкаТовары.Сумма;
		КонецЦикла;
		
		ПодвалРабот.Параметры.Заполнить(Выборка);
		ПодвалРабот.Параметры.Количество = Количество;
		ПодвалРабот.Параметры.Сумма 	 = Сумма;
		ПодвалРабот.Параметры.СуммаПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, ВалютаЦены, ЯзыкДокументов);
		//ПодвалРабот.Параметры.валюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ТабДок.Вывести(ПодвалРабот);
		
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;	
	
	Если ВставлятьРазделительСтраницНаСтарте Тогда
	ТабДок.Область().СоздатьФорматСтрок();	
										  КонецЕсли;
	ТабДокРезультат.Вывести(ТабДок);
	
КонецПроцедуры

Процедура ПечатьНалоговойНакладной(ТабДокРезультат, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НАЛНАКЛ" + СокрЛП(ИмяКомпьютера());
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
	Шапка = Макет.ПолучитьОбласть("РазделительШапка");
	ТабДок.Вывести(Шапка);
	ТабДок.Область().СоздатьФорматСтрок();
	
	Ссылка = ПараметрыПечати.Ссылка;
	ПереченьЭлементов = ПараметрыПечати.ПереченьЭлементов;
	
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	ПечататьКопию = ЛОЖЬ;
	Если НЕ ПараметрыПечати.Свойство("ПечататьКопию", ПечататьКопию) Тогда
		ПечататьКопию = ЛОЖЬ;
	КонецЕсли;
	
	ПечататьОригинал = ЛОЖЬ;
	Если НЕ ПараметрыПечати.Свойство("ПечататьОригинал", ПечататьОригинал) Тогда
		ПечататьОригинал = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ ПечататьКопию
		И НЕ ПечататьОригинал Тогда
		
		ПечататьОригинал = ИСТИНА;
	КонецЕсли;
	
	ПоследнийНомерНалоговойНакладной = ПереченьЭлементов.ПоследнийНомерНалоговойНакладной;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВыполненияРабот.Ссылка,
		               |	ВыполненияРабот.Дата,
		               |	ВыполненияРабот.Организация,
		               |	ВыполненияРабот.ВерсияДанных,
		               |	ВыполненияРабот.ПометкаУдаления,
		               |	ВыполненияРабот.Номер,
		               |	ВыполненияРабот.Проведен,
		               |	ВыполненияРабот.Клиент,
		               |	ВыполненияРабот.Договор,
		               |	ВыполненияРабот.ЗаказКлиента,
		               |	ВыполненияРабот.ВидЦен,
		               |	ВыполненияРабот.Результат,
		               |	ВыполненияРабот.ХранилищеДенег,
		               |	ВыполненияРабот.ДатаПлан,
		               |	ВыполненияРабот.РезультатПлан,
		               |	ВыполненияРабот.Актуален,
		               |	ВыполненияРабот.БезПлана,
		               |	ВыполненияРабот.Номенклатура,
		               |	ВыполненияРабот.СерияНоменклатуры,
		               |	ВыполненияРабот.Комментарий,
		               |	ВыполненияРабот.Ответственный,
		               |	ВыполненияРабот.ДатаСоздания,
		               |	ВыполненияРабот.ДатаРедакции,
		               |	ВыполненияРабот.Товары.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДатаПлан,
		               |		Дата,
		               |		Склад,
		               |		Номенклатура КАК СодержаниеВыполненнойРаботы,
		               |		Номенклатура КАК Номенклатура,
		               |		СерияНоменклатуры,
		               |		Сотрудник,
		               |		Количество,
		               |		Цена,
		               |		План,
		               |		Сумма,
		               |		ПроцентСкидки,
		               |		СуммаБезСкидки,
		               |		ВаловаяПрибыль,
		               |		ОСтроке,
		               |		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		               |		ЕдиницаИзмерения
		               |	),
		               |	ВыполненияРабот.Оплаты.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДатаПлан,
		               |		Дата,
		               |		План,
		               |		Сумма,
		               |		Валюта,
		               |		Курс,
		               |		ХранилищеДенег,
		               |		ФормаОплаты,
		               |		ОСтроке
		               |	),
		               |	ВыполненияРабот.Расходы.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		ДатаПлан,
		               |		Дата,
		               |		Поставщик,
		               |		Статья,
		               |		План,
		               |		Сумма,
		               |		Валюта,
		               |		Курс,
		               |		ХранилищеДенег,
		               |		ФормаОплаты,
		               |		Договор,
		               |		Сотрудник,
		               |		ОСтроке
		               |	),
		               |	ВыполненияРабот.Представление,
		               |	ВыполненияРабот.МоментВремени,
		               |	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		               |	ВыполненияРабот.НомерСчета,
		               |	ВыполненияРабот.ДатаСчета,
		               |	ВыполненияРабот.Валюта
		               |ИЗ
		               |	Документ.ВыполненияРабот КАК ВыполненияРабот
		               |ГДЕ
		               |	ВыполненияРабот.Ссылка = &Ссылка";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	РасходыТовара.Ссылка,
		               |	РасходыТовара.Дата,
		               |	РасходыТовара.Валюта,
		               |	РасходыТовара.Организация,
		               |	РасходыТовара.Товары.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		Номенклатура,
		               |		Номенклатура КАК СодержаниеВыполненнойРаботы,
		               |		СерияНоменклатуры,
		               |		Количество,
		               |		Цена,
		               |		Сумма,
		               |		ПроцентСкидки,
		               |		СуммаБезСкидки,
		               |		ЗаказКлиента,
		               |		ОСтроке,
		               |		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		               |		Номенклатура.Производитель КАК Производитель,
		               |		ЕдиницаИзмерения
		               |	),
		               |	РасходыТовара.ВерсияДанных,
		               |	РасходыТовара.ПометкаУдаления,
		               |	РасходыТовара.Номер,
		               |	РасходыТовара.Проведен,
		               |	РасходыТовара.Склад,
		               |	РасходыТовара.КлиентПоставщик,
		               |	РасходыТовара.ПоступилоДенег,
		               |	РасходыТовара.ВидЦен,
		               |	РасходыТовара.Курс,
		               |	РасходыТовара.Комментарий,
		               |	РасходыТовара.ВидДокумента,
		               |	РасходыТовара.ТовараНаСумму,
		               |	РасходыТовара.ТовараВКоличестве,
		               |	РасходыТовара.ПартияПриобретения,
		               |	РасходыТовара.Договор,
		               |	РасходыТовара.ХранилищеДенег,
		               |	РасходыТовара.ЗаказКлиента,
		               |	РасходыТовара.ЭтоЗаказ,
		               |	РасходыТовара.ЗаказСогласован,
		               |	РасходыТовара.ЗаказОплачен,
		               |	РасходыТовара.ЗаказДатаПлана,
		               |	РасходыТовара.ЗаказДатаФакта,
		               |	РасходыТовара.ЗаказНомерПриРегистрации,
		               |	РасходыТовара.Сотрудник,
		               |	РасходыТовара.Ответственный,
		               |	РасходыТовара.ДатаСоздания,
		               |	РасходыТовара.ДатаРедакции,
		               |	РасходыТовара.ПланОплаты.(
		               |		Ссылка,
		               |		НомерСтроки,
		               |		Дата,
		               |		ФормаОплаты,
		               |		ХранилищеДенег,
		               |		Сумма,
		               |		ОСтроке
		               |	),
		               |	РасходыТовара.Представление,
		               |	РасходыТовара.МоментВремени,
		               |	РасходыТовара.НомерСчета,
		               |	РасходыТовара.ДатаСчета
		               |ИЗ
		               |	Документ.РасходыТовара КАК РасходыТовара
		               |ГДЕ
		               |	РасходыТовара.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
	Если НЕ параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		ПредставлениеОрганизации = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(организация);		
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
		НашеОКПО = Организация.ОКПО;
		Дата = Выборка.Дата;
		
		Макет2014 = Дата >= Дата(2014, 3, 1) И Дата < Дата(2014, 12, 1);
		Макет2014_12 = Дата >= Дата(2014, 12, 1) И Дата < Дата(2015, 1, 1);
		Макет2015 = Дата >= Дата(2015, 1, 1);
		
		Если НЕ ЭтоВыполнениеРабот Тогда
			Сотрудник = Выборка.Сотрудник;
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.КлиентПоставщик);
			КлиентПоставщик = Выборка.КлиентПоставщик;
		Иначе
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.Клиент);
			КлиентПоставщик = Выборка.Клиент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Сотрудник = Организация.Сотрудник;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
		КонецЕсли;
		
		ПараметрыШаблонаПечати = Новый Структура;
		
		ДатаДокумента = Формат(Выборка.Дата, "ДФ=ддММгггг");
		ПараметрыШаблонаПечати.Вставить("Д1", Сред(ДатаДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Д2", Сред(ДатаДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Д3", Сред(ДатаДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Д4", Сред(ДатаДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Д5", Сред(ДатаДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Д6", Сред(ДатаДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Д7", Сред(ДатаДокумента, 7, 1));
		ПараметрыШаблонаПечати.Вставить("Д8", Сред(ДатаДокумента, 8, 1));
		
		Если ПоследнийНомерНалоговойНакладной = 0 Тогда
			НомерДокумента = СокрЛП(Организация.ПоследнийНомерНалоговойНакладной) + 1;
			Попытка
				ОрганизацияОбъект = Организация.ПолучитьОбъект();
				ОрганизацияОбъект.ПоследнийНомерНалоговойНакладной = НомерДокумента;
				ОрганизацияОбъект.Записать();
			Исключение
			КонецПопытки;
		Иначе
			НомерДокумента = ПоследнийНомерНалоговойНакладной;
		КонецЕсли;
		
		НомерДокумента = Прав("       " + НомерДокумента, 7);
		ПараметрыШаблонаПечати.Вставить("Н1", Сред(НомерДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Н2", Сред(НомерДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Н3", Сред(НомерДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Н4", Сред(НомерДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Н5", Сред(НомерДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Н6", Сред(НомерДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Н7", Сред(НомерДокумента, 7, 1));
		
		ПараметрыШаблонаПечати.Вставить("Организация", Организация);
		ПараметрыШаблонаПечати.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщик", КлиентПоставщик);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(Организация.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("с1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("с2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("с3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("с4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("с5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("с6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("с7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("с8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("с9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(КлиентПоставщик.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("м1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("м2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("м3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("м4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("м5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("м6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("м7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("м8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("м9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		
		ОКПО = СокрЛП(Организация.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("и1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("и2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("и3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("и4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("и5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("и6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("и7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("и8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("и9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("и10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("и11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("и12", Сред(ОКПО, 12, 1));
		
		ОКПО = СокрЛП(КлиентПоставщик.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("к1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("к2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("к3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("к4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("к5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("к6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("к7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("к8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("к9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("к10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("к11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("к12", Сред(ОКПО, 12, 1));
		
		ПараметрыШаблонаПечати.Вставить("ОрганизацияАдрес", ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес));
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикАдрес", ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес));
		
		Телефон = СокрЛП(Организация.Телефон) + "          ";
		Телефон = ПодсистемаИЭИмпортЭкспортФС.УбратьНечисловыеСимволы(Телефон, "", ЛОЖЬ);
		ПараметрыШаблонаПечати.Вставить("т1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("т2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("т3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("т4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("т5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("т6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("т7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("т8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("т9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("т10", Сред(Телефон, 10, 1));
		
		Телефон = СокрЛП(КлиентПоставщик.Телефон) + "          ";
		Телефон = ПодсистемаИЭИмпортЭкспортФС.УбратьНечисловыеСимволы(Телефон, "", ЛОЖЬ);
		ПараметрыШаблонаПечати.Вставить("ь1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ь2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ь3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ь4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ь5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ь6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ь7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ь8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("ь9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("ь10", Сред(Телефон, 10, 1));
		
		Договор = Выборка.Договор;
		Если ЗначениеЗаполнено(Договор) Тогда			
			НомерДоговора = Договор.НомерДоговора;
			ДатаЗаключения = Формат(Договор.ДатаЗаключения, "ДФ=ддММгггг");
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Договор.ФормаВзаиморасчетов);
		Иначе
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Организация.ФормаВзаиморасчетовПоУмолчанию);
			НомерДоговора  = СокрЛП(Выборка.НомерСчета);
			ДатаЗаключения = Формат(Выборка.ДатаСчета, "ДФ=ддММгггг");
			Договор 	   = "Договір, рахунок-фактура " + ДатаЗаключения + " №" + НомерДоговора;
		конецесли;
		
		ПараметрыШаблонаПечати.Вставить("Договор", Договор);
		ПараметрыШаблонаПечати.Вставить("НомерДоговора", НомерДоговора);
		ПараметрыШаблонаПечати.Вставить("ДД1", Сред(ДатаЗаключения, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ДД2", Сред(ДатаЗаключения, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ДД3", Сред(ДатаЗаключения, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ДД4", Сред(ДатаЗаключения, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ДД5", Сред(ДатаЗаключения, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ДД6", Сред(ДатаЗаключения, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ДД7", Сред(ДатаЗаключения, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ДД8", Сред(ДатаЗаключения, 8, 1));			
		
		НалНакл = Новый ТабличныйДокумент;
		НалНакл.ИмяПараметровПечати = "НАЛ_НАКЛ_УКР" + СокрЛП(ИмяКомпьютера());
		НалНакл.КлючПараметровПечати = НалНакл.ИмяПараметровПечати;
		
		Шапка = Макет.ПолучитьОбласть("Пробел");	
		НалНакл.Вывести(Шапка);
		
		Шапка = ?(Макет2014 ИЛИ Макет2014_12, Макет.ПолучитьОбласть("Заголовок14"), Макет.ПолучитьОбласть("Заголовок"));	
		Шапка.Параметры.Заполнить(ПараметрыШаблонаПечати);
		НалНакл.Вывести(Шапка);		
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка15_1");
		ИначеЕсли Макет2014 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка14");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка15");
		Иначе
			Шапка = Макет.ПолучитьОбласть("Шапка1");
		КонецЕсли;
		
		НалНакл.Вывести(Шапка);		
		
		НДС   = 0;
		НДС7  = 0;
		Всего = 0;
		ВсегоСНДС = 0;
		ИтогСуммаСНДС20 = 0;
		ИтогСуммаСНДС7  = 0;
		СтавкаНДС = Организация.СтавкаНДС;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Номенклатура = ВыборкаТовары.Номенклатура;
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму");
			КонецЕсли;
			
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("РазделI15_1");	
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("РазделI15");	
			Иначе
				Шапка = Макет.ПолучитьОбласть("РазделI");	
			КонецЕсли;
			Шапка.Параметры.Дата = Выборка.Дата;
			Шапка.Параметры.Номенклатура = Номенклатура;
			Шапка.Параметры.НоменклатураПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, , КлиентПоставщик);
			Шапка.Параметры.КодУКТВЭД = Номенклатура.КодУКТВЭД;
			
			КодЕдиницыИзмерения = "";
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
				ЕдиницаИзмеренияНоменклатуры = ВыборкаТовары.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияНоменклатуры) Тогда
					ЕдиницаИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры);
					КодЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры.КодЕдиницыПоКлассификатору);
					
					Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
						Если ВРег(Лев(ЕдиницаИзмерения, 1)) = "Ш" Тогда
							КодЕдиницыИзмерения = "2009";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "К" Тогда
							КодЕдиницыИзмерения = "0301";						
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "М" Тогда
							КодЕдиницыИзмерения = "0101";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "Л" Тогда
							КодЕдиницыИзмерения = "0138";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 2)) = "УП" Тогда
							КодЕдиницыИзмерения = "2102";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 3)) = "УСЛ"
							ИЛИ ВРег(Лев(ЕдиницаИзмерения, 4)) = "ПОСЛ" Тогда
							КодЕдиницыИзмерения = "2454";
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
				ЕдиницаИзмерения = "шт.";
			КонецЕсли;
			Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;			
			
			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда
				ЕдиницаИзмерения = "шт.";
				КодЕдиницыИзмерения = "2009";
			Иначе
				ЕдиницаИзмерения = "послуга";
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;
			
			Если КодЕдиницыИзмерения = "2454" Тогда
				ЕдиницаИзмерения = "грн.";
			КонецЕсли;
			
			Шапка.Параметры.ЕдИзм = ЕдиницаИзмерения;
			
			Количество = ?(ВыборкаТовары.Количество = 0, 1, ВыборкаТовары.Количество);
			Шапка.Параметры.Количество = Количество;
			Сумма = ВыборкаТовары.Сумма;
			ВсегоСНДС = ВсегоСНДС + Сумма;
			СтавкаНДС = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
			СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
			НДС = НДС + (Сумма - СуммаБезНДС);
			
			Если Макет2014_12
				ИЛИ Макет2015 Тогда
				
				Если Макет2015 Тогда
					Шапка.Параметры.ЕдиницаИзмеренияКод = КодЕдиницыИзмерения; 
				КонецЕсли;
				
				Если СтавкаНДС = 7 Тогда
					ИтогСуммаСНДС7  = ИтогСуммаСНДС7 + СуммаБезНДС;
					Шапка.Параметры.Сумма20 = 0;
					Шапка.Параметры.Сумма7  = СуммаБезНДС;
				Иначе
					ИтогСуммаСНДС20 = ИтогСуммаСНДС20 + СуммаБезНДС;
					Шапка.Параметры.Сумма20 = СуммаБезНДС;
					Шапка.Параметры.Сумма7  = 0;
				КонецЕсли;
			Иначе
				Шапка.Параметры.СуммаБезНДС = СуммаБезНДС;	
			КонецЕсли;
			
			Шапка.Параметры.ЦенаБезНДС  = СуммаБезНДС / Количество;
			Всего = Всего + СуммаБезНДС;
			
			НалНакл.Вывести(Шапка);			
		КонецЦикла;
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI15_1");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI15");
		Иначе
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI");
		КонецЕсли;
		Шапка.Параметры.Всего = Всего;
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("ВозврТара15_1");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("ВозврТара15");	
		Иначе
			Шапка = Макет.ПолучитьОбласть("ВозврТара");	
		КонецЕсли;
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("итоги15_1");	
			Шапка.Параметры.ИтогНДС20			= НДС;
			Шапка.Параметры.ИтогНДС7			= НДС7;
			Шапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			Шапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;					
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("итоги15");	
			Шапка.Параметры.ИтогНДС20			= НДС;
			Шапка.Параметры.ИтогНДС7			= НДС7;
			Шапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			Шапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;					
		Иначе
			Шапка = Макет.ПолучитьОбласть("итоги");	
		КонецЕсли;
		Шапка.Параметры.НДС = НДС + НДС7;
		Шапка.Параметры.ВсегоСНДС = ВсегоСНДС;
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("Подвал15_1");
		ИначеЕсли Макет2014 ИЛИ Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("Подвал14");
		Иначе
			Шапка = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		Шапка.Параметры.Сотрудник = Сотрудник;
		НалНакл.Вывести(Шапка);	
		
		Если ПечататьОригинал Тогда
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал15_1");
			ИначеЕсли Макет2014 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал14");
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал15");
			Иначе
				Шапка = Макет.ПолучитьОбласть("Оригинал");
			КонецЕсли;
			
			ТабДок.Вывести(Шапка);		
			
			ТабДок.Вывести(НалНакл);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ПечататьКопию Тогда
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия15_1");
			ИначеЕсли Макет2014 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия14");
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия15");
			Иначе
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия");
			КонецЕсли;
			
			ТабДок.Вывести(Шапка);		
			
			ТабДок.Вывести(НалНакл);
		КонецЕсли;
		
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;
	
	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ТабДок.Область().СоздатьФорматСтрок();	
	КонецЕсли;
	ТабДокРезультат.Вывести(ТабДок);
	
КонецПроцедуры

Функция   ПодключитьВнешнююКомпонентуПечатиШтрихкода() Экспорт
	
	// В зависимости от типа платформы подключим соответствующую внешнюю компоненту
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЭтикетокИЦенников.Макет.КомпонентаПечатиШтрихкодовWindows32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЭтикетокИЦенников.Макет.КомпонентаПечатиШтрихкодовWindows64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЭтикетокИЦенников.Макет.КомпонентаПечатиШтрихкодовLinux32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	Иначе
		ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("Обработка.ПечатьЭтикетокИЦенников.Макет.КомпонентаПечатиШтрихкодовLinux64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	КонецЕсли;                                                   
	
	// Создадим объект внешней компоненты
	Если ПодключениеВыполнено Тогда
		ВнешняяКомпонента = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет возможности рисовать
	Если НЕ ВнешняяКомпонента.ГрафикаУстановлена Тогда
		// То картинку сформировать не сможем
		Возврат Неопределено;
	Иначе
		
		// Установим основные параметры компоненты
		
		// Если в системе установлен шрифт Tahoma
		Если ВнешняяКомпонента.НайтиШрифт("Tahoma") = ИСТИНА Тогда
			// Выбираем его как шрифт для формирования картинки
			
			ВнешняяКомпонента.Шрифт = "Tahoma";
		Иначе
			
			// Шрифт Tahoma в системе отсутствует
			// Обойдем все доступные компоненте шрифты
			Для Сч = 0 По ВнешняяКомпонента.КоличествоШрифтов -1 Цикл
				// Получим очередной шрифт, доступный компоненте
				ТекущийШрифт = ВнешняяКомпонента.ШрифтПоИндексу(Сч);
				// Если шрифт доступен
				Если ТекущийШрифт <> Неопределено Тогда
					// Они и будет шрифтом для формирования штри-кода
					ВнешняяКомпонента.Шрифт = ТекущийШрифт;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Утановим размер шрифта
		ВнешняяКомпонента.РазмерШрифта = 14;
		
		Возврат ВнешняяКомпонента;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьГруппуНоменклатурыПоНаименованию(Знач наименование, НеСоздавать = ЛОЖЬ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ЭтоГруппа = ИСТИНА";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		результат = ВыборкаДетальныеЗаписи.ссылка;
		
	ИначеЕсли НеСоздавать тогда
		результат = Неопределено;
		
	Иначе		
		результатОбъект = Справочники.Номенклатура.СоздатьГруппу();
		результатОбъект.Наименование = Наименование;
		результатОбъект.Записать();
		
		результат = результатОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции //ПолучитьГруппуНоменклатурыПоНаименованию(наименование)

Функция   ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Знач Штрихкод, Знач Ширина = 250, Знач Высота = 90, Знач ТипКода = 4) Экспорт
	
	// Зададим размер картинки
	ВнешняяКомпонента.Ширина = Ширина;
	ВнешняяКомпонента.Высота = Высота;
	
	// Разрешим компоненте самой определять тип кода
	ВнешняяКомпонента.АвтоТип = ЛОЖЬ;
	ВнешняяКомпонента.ТипКода = ТипКода;
	ВнешняяКомпонента.ОтображатьТекст = ЛОЖЬ;
	
	
	// Если код содержит контрольный символ, обязательно указываем
	ВнешняяКомпонента.СодержитКС = СтрДлина(Штрихкод) = 13;
	
	// Если отображать контрольный символ не нужно
	// ВнешняяКомпонента.ВидимостьКС = ЛОЖЬ;
	
	// Формируем картинку штрихкода
	ВнешняяКомпонента.ЗначениеКода = Штрихкод;
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		// Скорректируем ширину
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
	
	// Если картинка сформировалась
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		// Формируем из двоичных данных
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция   ПолучитьНоменклатуруПоШтрихКоду(Знач ДанныеШтрикода, Знач ВСтруктуре = ЛОЖЬ, Знач ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено, Знач ДатаДокумента = Неопределено) Экспорт
	
	Номенклатура = Неопределено;
	НоменклатураСтруктура = ЛОЖЬ;
	
	Если ТипЗнч(ДанныеШтрикода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрикода;	
	Иначе	
		ШтрихКод = ДанныеШтрикода.ШтрихКод;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, ЛОЖЬ, ИСТИНА);
	КонецЕсли;	
	
	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено 
		ИЛИ ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда
		
		ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда
		
		Если НЕ ДатаДокумента = Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура, &неопред) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры, &неопред) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения, &неопред) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления, &неопред) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления, &неопред)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|	И (ДополнительныеШтрихКоды.ДействуетСДаты = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетСДаты >= &ДатаДок)
			|	И (ДополнительныеШтрихКоды.ДействуетПоДату = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетПоДату <= &ДатаДок)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
			
			Запрос.УстановитьПараметр("ДатаДок", ДатаДокумента);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101');
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура, &неопред) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры, &неопред) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения, &неопред) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления, &неопред) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления, &неопред)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("неопред", Неопределено);
		
	Иначе			
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихКоды.Номенклатура КАК Номенклатура,
		|	ШтрихКоды.СерияНоменклатуры,
		|	ШтрихКоды.ЕдиницаИзмерения,
		|	ШтрихКоды.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
		|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШтрихКод", нрег(ШтрихКод));
	Запрос.УстановитьПараметр("ШтрихКодВРЕГ", ВРЕГ(ШтрихКод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВСтруктуре Тогда
			Номенклатура = Новый Структура;
			Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
			Номенклатура.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
			Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
			Номенклатура.Вставить("Количество", 1);
			НоменклатураСтруктура = ИСТИНА;
			
		Иначе
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
	Иначе
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу") Тогда
			
			//	Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка КАК Номенклатура
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ (Номенклатура.Артикул = &ОсновнойШтрихКод
			|			ИЛИ Номенклатура.Артикул = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Если ВСтруктуре Тогда
					Номенклатура = Новый Структура;
					Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
					Номенклатура.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
					Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
					Номенклатура.Вставить("Количество", 1);
					НоменклатураСтруктура = ИСТИНА;
					
				Иначе
					Номенклатура = Выборка.ссылка;	
				КонецЕсли;
				
			Иначе
				//	Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
				|	ИЛИ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ
				|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
				
				Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
				Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Номенклатура = Выборка.ссылка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Номенклатура = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ШтрихКодомМожетВыступатьСерияИлиКодПродукта") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
			|	СерииНоменклатуры.Владелец КАК Номенклатура,
			|	СерииНоменклатуры.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|	И (СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКодВРЕГ
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВСтруктуре тогда
						
						Номенклатура = Новый Структура;
						Номенклатура.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						Номенклатура.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
						Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
						Номенклатура.Вставить("Количество", 1);
						НоменклатураСтруктура = ИСТИНА;
						
					Иначе
						Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;	
					КонецЕсли;	
				КонецЦикла;				
				
			КонецЕсли;
		КонецЕсли;
		
		Если Номенклатура = Неопределено Тогда
			Если ВСтруктуре тогда
				
				Номенклатура = Новый Структура;
				Номенклатура.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				Номенклатура.Вставить("СерияНоменклатуры", Неопределено);
				Номенклатура.Вставить("ЕдиницаИзмерения", Неопределено);
				Номенклатура.Вставить("Количество", 1);
				НоменклатураСтруктура = ИСТИНА;
				
			Иначе
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Номенклатура;	
		
	Иначе
		Если ВСтруктуре
			И НЕ НоменклатураСтруктура тогда
			
			НоменклатураВСтруктуре = Новый Структура;
			НоменклатураВСтруктуре.Вставить("Номенклатура", Номенклатура);
			НоменклатураВСтруктуре.Вставить("СерияНоменклатуры", Неопределено);
			НоменклатураВСтруктуре.Вставить("ЕдиницаИзмерения", Неопределено);
			НоменклатураВСтруктуре.Вставить("Количество", 1);
			
			Возврат НоменклатураВСтруктуре;
			
		Иначе
			Возврат Номенклатура;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(Знач ВернутьСписок = ИСТИНА) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ НоменклатураЧастогоСпроса.Позиция КАК Позиция,
	|	НоменклатураЧастогоСпроса.Номенклатура,
	|	НоменклатураЧастогоСпроса.Комментарий
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|УПОРЯДОЧИТЬ ПО Позиция";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВернутьСписок Тогда
		списокрезультат = Новый СписокЗначений;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				списокрезультат.Добавить(ВыборкаДетальныеЗаписи.номенклатура);
			КонецЦикла;	
		КонецЕсли;
		
		Возврат списокрезультат;
		
	Иначе
		Возврат РезультатЗапроса;
		
	КонецЕсли;
	
КонецФункции //ПолучитьСписокНоменклатурыБыстрогоСпроса

Функция   ПолучитьССылкуНаСкопированныйОбъект(Знач Ссылка) Экспорт
	
	ОбъектКопия = Ссылка.Скопировать();
	ОбъектКопияСсылка = Неопределено;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ((ПустаяСтрока(ОбъектКопия.ОсновнойШтрихКод) 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"))
		ИЛИ не ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода")) Тогда
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование и Штрих-код вручную!"), ,  Ссылка);
		
		ОбъектКопия.ОсновнойШтрихКод = ОбъектКопия.ОсновнойШтрихКод + формат(ТекущаяДата(), "ДФ=ЧЧммсс");
	Иначе
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование вручную!"), , Ссылка);
	КонецЕсли;
	
	ОбъектКопия.наименование = ОбъектКопия.наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия товара с ценами");
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
		И НЕ ЗначениеЗаполнено(ОбъектКопия.НоменклатурнаяГруппа)Тогда
		
		ОбъектКопия.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
	КонецЕсли;	
	
	попытка
		НеВыводитьСообщений = параметрысеанса.НеВыводитьСообщений; //без кэша
		параметрысеанса.НеВыводитьСообщений = ИСТИНА;
		ОбъектКопия.записать();
		параметрысеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		
		ОбъектКопияСсылка = ОбъектКопия.ссылка;
		
		РсНз = Регистрысведений.Цены.СоздатьНаборЗаписей();
		РсНз.Отбор.Номенклатура.Установить(Ссылка);
		РсНз.Прочитать();
		
		Для Каждого ЗаписьОЦене Из РсНз Цикл
			
			Цены = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			Цены.Активность 	= ИСТИНА;
			Цены.ВидЦен  		= ЗаписьОЦене.ВидЦен;
			Цены.Вручную		= ЗаписьОЦене.Вручную;
			Цены.Комментарий	= ЗаписьОЦене.Комментарий;
			Цены.Номенклатура	= ОбъектКопияСсылка;
			Цены.Период			= ЗаписьОЦене.Период;
			Цены.Цена 			= ЗаписьОЦене.Цена;
			
			Попытка 
				Цены.Записать(ИСТИНА);
				
			Исключение 
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений Цены") + ": " + ОписаниеОшибки(), , Ссылка);
			КонецПопытки; 
		КонецЦикла;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
			РсНз = Регистрысведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
			РсНз.Отбор.ОбъектБазыДанных.Установить(Ссылка);
			РсНз.Прочитать();
			
			Для Каждого ЗаписьОЯзыке Из РсНз Цикл
				
				Перевод = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				Перевод.Активность 		 = ИСТИНА;
				Перевод.НаЯзыке			 = ЗаписьОЯзыке.НаЯзыке;
				Перевод.ОбъектБазыДанных = ОбъектКопияСсылка;
				Перевод.Поле			 = ЗаписьОЯзыке.Поле;
				Перевод.Язык			 = ЗаписьОЯзыке.Язык;
				
				Попытка 
					Перевод.Записать(ИСТИНА);
					
				Исключение 
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Перевода") + ": " + ОписаниеОшибки(), , Ссылка);
				КонецПопытки; 
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи копии номенклатуры") + ": " + ОписаниеОшибки(), , Ссылка);
	КонецПопытки;
	
	Возврат ОбъектКопияСсылка;
	
КонецФункции

Функция   ПолучитьШтрихКодЕдиницыИзмерения(Знач ЕдиницаИзмерения) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьШтрихКодСерии

Функция   ПолучитьШтрихКодНоменклатурыСерии(Знач Номенклатура, Знач СерияНоменклатуры, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодСерии(СерияНоменклатуры);
	ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодЕдиницыИзмерения(ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
			
		Иначеесли ЗначениеЗаполнено(Номенклатура) Тогда
			Результат = Номенклатура.ОсновнойШтрихКод;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьШтрихКодСерии(Знач СерияНоменклатуры) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";
	
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьШтрихКодСерии

Процедура ПроверитьИСортироватьТаблицуТовары(ДанныйОбъект, Знач ЭтоПланПродаж = ЛОЖЬ, Знач ИмяТаблицы = "Товары") Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНаименованиюПередЗаписьюДокументов") Тогда
		
		ТОварыДляСортировки = ДанныйОбъект[ИмяТаблицы].Выгрузить();
		
		Если ЭтоПланПродаж Тогда
			ТОварыДляСортировки.Сортировать("НоменклатураИлиГруппа");
			
		ИначеЕсли ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументов") Тогда
			
			ТОварыДляСортировки.Колонки.Добавить("НоменклатурнаяГруппа");
			Для Каждого СтрокаТовар из ТОварыДляСортировки Цикл
				Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
					СтрокаТовар.НоменклатурнаяГруппа = СтрокаТовар.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;				
			КонецЦикла;
			
			ТОварыДляСортировки.Сортировать("НоменклатурнаяГруппа, Номенклатура");
			
		Иначе
			ТОварыДляСортировки.Сортировать("Номенклатура");
			
		КонецЕсли;		
		
		ДанныйОбъект[ИмяТаблицы].Загрузить(ТОварыДляСортировки);		
	КонецЕсли;   
	
КонецПроцедуры

Функция   ПроверитьНаличиеСерийНоменклатуры(Знач Ссылка, Знач ИмяТаблицы = "Товары") Экспорт
	
	НаличиеСерийНоменклатуры = ЛОЖЬ;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		И ЗначениеЗаполнено(ссылка) Тогда
		
		СписокНоменклатуры = Ссылка[ИмяТаблицы].ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.СерийныйУчет
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.СерийныйУчет = ИСТИНА И Номенклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НаличиеСерийНоменклатуры = ИСТИНА;
			КонецЦикла;	
		КонецЕсли;
		//Для Каждого СтрокаТовара Из Ссылка[ИмяТаблицы] Цикл
		//	Если ОбщийМодульПовтор.ТоварВедетсяПоСериям(СтрокаТовара.Номенклатура) Тогда
		//		
		//		НаличиеСерийНоменклатуры = ИСТИНА;
		//		Прервать;
		//		
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	
	Возврат НаличиеСерийНоменклатуры;
	
КонецФункции //ПроверитьНаличиеСерийНоменклатуры

Функция   ПроверитьОтсутствиеСерииВОстатках(Знач Номенклатура, Знач СерияНоменклатуры, Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(&Дата,
	|			СерияНоменклатуры = &СерияНоменклатуры
	|				И Номенклатура = &Номенклатура) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	КоличествоОстаток = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;	                            	
	КонецЕсли;
	
	Возврат не КоличествоОстаток = 0;
	
КонецФункции //ПроверитьОтсутствиеСерииВОстатках

Функция   ПроверитьСерийностьЭлементовНабора(Знач Номенклатура, Знач НоменклатураСерийная = ЛОЖЬ) Экспорт
	
	Для Каждого СтрокаСостава Из Номенклатура.Состав Цикл
		
		НоменклатураСостава = СтрокаСостава.Номенклатура;
		
		Если НоменклатураСостава.СерийныйУчет Тогда
			НоменклатураСерийная = ИСТИНА;
			Прервать;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			
			НоменклатураСерийная = ПроверитьСерийностьЭлементовНабора(НоменклатураСостава, НоменклатураСерийная);
			
			Если НоменклатураСерийная тогда
				прервать;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат НоменклатураСерийная;
	
КонецФункции

Функция   СвязаннаяНоменклатурнаяГруппа(Знач Родитель)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
	|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
	|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатурныеГруппы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   СоздатьНоменклатуру(Знач ШтрихКод, Знач Производитель, Знач НоменклатурнаяГруппа, Знач Цена, Знач наименование, Знач ВидЦен, Знач Родитель = Неопределено, Знач Серия = "")  Экспорт
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
			И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , );
			КонецЕсли;
			
			Возврат неопределено;	
			
		ИначеЕСли ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
				родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);
				Если НЕ родитель.ЭтоГруппа тогда
					родитель = Неопределено;						
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
				
				формула = врег(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.формула);
				
				ошибка = ЛОЖЬ;
				
				Если НЕ найти(формула, "ЦЕНА") = 0 
					И цена = 0 Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!"), , );
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ПРОИЗВОДИТЕЛЬ") = 0 
					И НЕ ЗначениеЗаполнено(Производитель) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ВИДЦЕН") = 0 
					И НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ШТРИХКОД") = 0 
					И НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если ошибка тогда
					Возврат неопределено;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НоваНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваНоменклатура.Наименование 		  = наименование;
	НоваНоменклатура.ОсновнойШтрихКод 	  = ШтрихКод;
	НоваНоменклатура.Производитель 		  = Производитель;
	НоваНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	
	Если НЕ родитель = Неопределено
		И ЗначениеЗаполнено(родитель) Тогда
		
		НоваНоменклатура.родитель = родитель;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		НоваНоменклатура.Цена = Цена;
	КонецЕсли;
	
	НоваНоменклатура.Записать();
	
	Если НЕ ПустаяСтрока(серия) тогда
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.Наименование = серия;
		НоваяСерия.Владелец 	= НоваНоменклатура.Ссылка;
		НоваяСерия.Записать();
		
	КонецЕсли;
	
	Если НЕ Цена = 0 
		И ИспользоватьСложныйМеханизмЦен Тогда	
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			Дата = Началомесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 3600 * 24;
			
			Рсмз = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			РСМЗ.ВидЦен 	  = ВидЦен;
			РСМЗ.Номенклатура = НоваНоменклатура.Ссылка;
			РСМЗ.Период 	  = Дата;
			РСМЗ.Цена	 	  = Цена;
			РСМЗ.Вручную	  = ИСТИНА;
			РСМЗ.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена установлена при создании номенклатуры");
			
			Попытка 
				рсмз.Записать(ИСТИНА);
				
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", НоваНоменклатура.Ссылка);
				СтрокаТовара.Вставить("Цена", Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , ЛОЖЬ);
				
				//на случай наименования по цене
				НоваНоменклатура = НоваНоменклатура.Ссылка.ПолучитьОбъект();
				НоваНоменклатура.записать();
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при установке цены") + ": " + ОписаниеОшибки());
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Вид цен!"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваНоменклатура.ссылка;
	
КонецФункции //СоздатьНоменклатуру

Процедура УстановитьНаименованиеНоменклатурыПоФормуле(Знач НоменклатураОбъект) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
		
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			И ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда
			
			СвязаннаяНоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа(НоменклатураОбъект.Родитель);
			Если НЕ СвязаннаяНоменклатурнаяГруппа = Неопределено 
				И НЕ НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа Тогда
				
				НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом")
			И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы) Тогда
			
			Попытка 
				Номенклатура = НоменклатураОбъект;
				Цена 		 = 0;
				Цена2 		 = 0;
				льготнаяцена = 0;
				Формула 	 = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы.Формула;
				Формулаврег  = врег(Формула);
				Дата 		 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				Валюта 		 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				Валюта2 	 = Валюта;
				
				Если НЕ найти(Формулаврег, "ЦЕНА") = 0 тогда
					
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
					
					//усл не менять
					Если (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура))
						ИЛИ (ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура.ссылка)) Тогда
						
						Формулаврег = врег(Формула);
						
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ИСТИНА);
						
						Если цена = 0 Тогда
							Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
						КонецЕсли;
						
					Иначе
						
						Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") Тогда
							попытка
								Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура.ссылка, ВидЦен, Дата, ИСТИНА);
							Исключение
							КонецПопытки;	
							
						Иначе
							попытка
								Цена = НоменклатураОбъект.Цена;
							Исключение
							КонецПопытки;	
						КонецЕсли;
						
					КонецЕсли; 	
					
					ВидЦен2 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");
					Если ЗначениеЗаполнено(ВидЦен2) Тогда
						Цена2 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен2, Дата);
						Валюта2 = ВидЦен2.ВалютаЦены;
					КонецЕсли;
					
					Если НЕ найти(Формулаврег, "ЛЬГОТНАЯЦЕНА") = 0 тогда
						льготнаяцена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(Номенклатура.ссылка, , Цена, ВидЦен);
					КонецЕсли;
				КонецЕсли;
				
				НаименованиеНов = "";
				Производитель 	= НоменклатураОбъект.Производитель;
				НоменклатурнаяГруппа = НоменклатураОбъект.НоменклатурнаяГруппа;
				
				Выполнить(" НаименованиеНов = """" + "  + Формула  + ";");
				
				Если НЕ НаименованиеНов = НоменклатураОбъект.Наименование тогда
					НоменклатураОбъект.Наименование = НаименованиеНов;
				КонецЕсли;
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке авто-наименования номенклатуры") + ": " + ОписаниеОшибки(), , НоменклатураОбъект);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция   УстановитьШтрихКодНоменклатурыПоФормуле(Знач ОбъектНоменклатура, Знач ФормулаШтрихКода = "", Знач ВидЦен = Неопределено, Знач Дата = Неопределено, Знач Цена = Неопределено, Знач СерияНоменклатуры = "", Знач ЕдиницаИзмерения = Неопределено) экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если ПустаяСтрока(ФормулаШтрихКода) Тогда  
		
		Если ЗначениеЗаполнено(ОбъектНоменклатура.Производитель)
			И ЗначениеЗаполнено(ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры) Тогда
			
			ФормулаШтрихКода = ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры.Формула;
		Иначе
			ФормулаШтрихКодаСсылка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры");
			Если ЗначениеЗаполнено(ФормулаШтрихКодаСсылка) Тогда
				ФормулаШтрихКода = ФормулаШтрихКодаСсылка.Формула;
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
	
	Результат = "";	
	Если ЗначениеЗаполнено(ФормулаШтрихКода) Тогда
		Попытка 
			Номенклатура = ОбъектНоменклатура;
			Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
			
			Если ВидЦен = Неопределено Тогда
				ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
			Иначе
				Валюта = ВидЦен.ВалютаЦены;
			КонецЕсли;
			
			Если Цена = Неопределено тогда
				Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, , , , , , , , ЕдиницаИзмерения);		
			КонецЕсли;
			
			НоменклатурнаяГруппа = ОбъектНоменклатура.НоменклатурнаяГруппа;
			Производитель = ОбъектНоменклатура.Производитель;
			
			Выполнить(" Результат = """"+" + ФормулаШтрихКода + ";");
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
				Результат = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(Результат, ЛОЖЬ);
			КонецЕсли;
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при авто-формировании Штрих-кода номенклатуры") + ": " + ОписаниеОшибки(), , ОбъектНоменклатура.Ссылка);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуEAN13") Тогда
		ПервыеТриЧисла = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КодСтраныПервыеТриЧислаШтрихКодаПоEAN13");
		ПроизводителяЧетыреЧисла = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("КодПроизводителяЧетыреЧислаШтрихКодаПоEAN13");
		ДополнитьСтрокуПодстрокой(ПервыеТриЧисла, "0", 3, ИСТИНА);
		ДополнитьСтрокуПодстрокой(ПроизводителяЧетыреЧисла, "0", 4, ЛОЖЬ);
		
		ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);
		Если ПустаяСтрока(ТекущийКод) Тогда //новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);
		КонецЕсли;
		ДополнитьСтрокуПодстрокой(ТекущийКод, "0", 5, ЛОЖЬ);
		
		Штрихкод = "" + ПервыеТриЧисла + ПроизводителяЧетыреЧисла + ТекущийКод;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		
		Результат = Штрихкод + ПроверочныйСимвол;
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуCode128") Тогда
		
		ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);
		Если ПустаяСтрока(ТекущийКод) Тогда //новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);
		КонецЕсли;
		
		Результат = "" + СокрЛП(ПервыеТриЧисла) + СокрЛП(ПроизводителяЧетыреЧисла) + ТекущийКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСтрокуПодстрокой(СтрокаДляДополнения, Знач СтрокаДополнения, Знач ЧислоСимволовНеМенее = 1, Знач ДополнятьСзади = ЛОЖЬ)
	
	Если НЕ СтрокаДополнения = " " Тогда
		СтрокаДляДополнения = СокрЛП(СтрокаДляДополнения);		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаДополнения) Тогда
		
		Пока СтрДлина(СтрокаДляДополнения) < ЧислоСимволовНеМенее Цикл
			Если ДополнятьСзади Тогда
				СтрокаДляДополнения = СтрокаДляДополнения + СтрокаДополнения;
			Иначе
				СтрокаДляДополнения = СтрокаДополнения + СтрокаДляДополнения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	Возврат Номенклатура.ЭтоНабор;
КонецФункции //ЭтоНабор

Функция   ПолучитьСреднююВаловуюПрибыльРеализации(Знач Номенклатура, Знач Дата, Знач Ссылка = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ) Экспорт
	
	Если ВернутьСтруктуру Тогда
		Результат = Новый Структура;
		Результат.Вставить("СредняяВаловаяПрибыль", 0);
		Результат.Вставить("ПроцентНаценки", 0);
		Результат.Вставить("РентабельностьПродаж", 0);
	Иначе
		Результат = 0;
	КонецЕсли;	
	
	РезультатНеГотов = ИСТИНА;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВключитьПерсонифицированныйУчетВаловойПрибыли") Тогда
		
		Если ЗначениеЗаполнено(Ссылка.ДокументРеализации) Тогда  //по документу
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ
			|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ
			|	ВаловаяПрибыль.Номенклатура = &Номенклатура
			|	И ВаловаяПрибыль.Регистратор = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВаловаяПрибыль.Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("Ссылка", Ссылка.ДокументРеализации);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
						КонецЕсли;
						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли; //при реалиазции по себестоимости вп нет
			
			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;	
				
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;	
			КонецЕсли;
			
			РезультатНеГотов = ЛОЖЬ;
			
		КонецЕсли;
		
		Если РезультатНеГотов
			И ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда //по клиенту
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ
			|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ
			|	ВаловаяПрибыль.Номенклатура = &Номенклатура
			|	И ВаловаяПрибыль.Регистратор.КлиентПоставщик = &КлиентПоставщик
			|	И ВаловаяПрибыль.Регистратор.Дата <= &Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВаловаяПрибыль.Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("КлиентПоставщик", Ссылка.КлиентПоставщик);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("Период", Дата);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Сумма 		= 0;
				Количество  = 0;
				ЧислоЗаписейВРегистр = 0;
				ПроцентНаценки 		 = 0;
				РентабельностьПродаж = 0;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
						КонецЕсли;
						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
					КонецЕсли;
				КонецЦикла;	
				
				Если ВернутьСтруктуру Тогда
					Если Количество = 0 Тогда
						Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат.СредняяВаловаяПрибыль = Сумма / Количество;
						Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
					КонецЕсли;	
					
				Иначе
					Если Количество = 0 Тогда
						Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат = Сумма / Количество;
					КонецЕсли;	
				КонецЕсли;
				
				РезультатНеГотов = ЛОЖЬ;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатНеГотов Тогда //вот тут средняя продажи
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|		КОНЕЦ) КАК Количество,
		|	СУММА(1) КАК ЧислоЗаписейВРегистр,
		|	ВаловаяПрибыль.Номенклатура,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|		КОНЕЦ) КАК ПроцентНаценки,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				ТОГДА ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|		КОНЕЦ) КАК РентабельностьПродаж
		|ИЗ
		|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ
		|	ВаловаяПрибыль.Номенклатура = &Номенклатура
		|	И ВаловаяПрибыль.Период <= &Период
		|	И ВаловаяПрибыль.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВаловаяПрибыль.Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
					Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
					Если ВернутьСтруктуру Тогда
						ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
						РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
					КонецЕсли;
					Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
					ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
				КонецЕсли;
			КонецЦикла;	
			
			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;	
				
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьСреднююВаловуюПрибыльРеализации

Функция   ПолучитьНоменклатуруПоПредставлениюКонтрагента(Знач КлиентПоставщик, Знач Поле = Неопределено, Знач Текст, Знач НаЯзыке = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;
	
	Возврат ОбщийМодульПовтор.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, Поле, Текст, НаЯзыке);
	
КонецФункции //ПолучитьНоменклатуруПоПредставлениюКонтрагента

Функция   СобственноеЗначениеНаСервере(Знач Номенклатура, Знач Язык, Знач Поле) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Язык) Тогда
		Язык = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;
	
	Результат = "";
	
	Если Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, , , Язык);
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, "НаименованиеДляПечати", , Язык);
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул") Тогда
		Результат = Номенклатура.Артикул;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Вес") Тогда
		Результат = "" + Номенклатура.Вес;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Высота") Тогда
		Результат = "" + Номенклатура.Высота;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Длина") Тогда
		Результат = "" + Номенклатура.Длина;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Ширина") Тогда
		Результат = "" + Номенклатура.Ширина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //СобственноеЗначениеНаСервере

Функция   ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Знач Номенклатура, Знач Поле = Неопределено, Знач Язык = Неопределено, Знач КлиентПоставщик, Знач ВОтсутствииВернутьСобственноеПредставление = ЛОЖЬ) Экспорт
	
	Если Поле = Неопределено Тогда
		Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;
	
	Если ВОтсутствииВернутьСобственноеПредставление Тогда
		ЗначениеПредставления = СобственноеЗначениеНаСервере(Номенклатура, Язык, Поле);
	Иначе
		ЗначениеПредставления = "";
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПредставлениеТоваровКонтрагентами.ЗначениеПредставления
		|ИЗ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
		|ГДЕ ПредставлениеТоваровКонтрагентами.Номенклатура = &Номенклатура ";
		
		Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
			Запрос.Текст = Запрос.Текст + " И (ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель2 ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель3 ) ";
			Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
			Запрос.УстановитьПараметр("КлиентПоставщикРодитель", КлиентПоставщик.Родитель);
			Запрос.УстановитьПараметр("КлиентПоставщикРодитель2", КлиентПоставщик.Родитель.Родитель);
			Запрос.УстановитьПараметр("КлиентПоставщикРодитель3", КлиентПоставщик.Родитель.Родитель.Родитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Поле) Тогда
			Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Поле = &Поле ";
			Запрос.УстановитьПараметр("Поле", Поле);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Язык) Тогда
			Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Язык = &Язык ";
			Запрос.УстановитьПараметр("Язык", Язык);
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ПредставлениеТоваровКонтрагентами.Поле";	
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			ЗначениеПредставления = ВыборкаДетальныеЗаписи.ЗначениеПредставления;		
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ЗначениеПредставления;
	
КонецФункции //ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом
