//sza140110-1721 : 
//ыяф131205

&НаСервере
Функция   ПроверитьСерийностьЭлементовНабора(Знач Номенклатура, Знач НоменклатураСерийная = Ложь) Экспорт
	
	Для Каждого СтрокаСостава Из Номенклатура.Состав Цикл
		
		НоменклатураСостава = СтрокаСостава.Номенклатура;
		
		Если НоменклатураСостава.СерийныйУчет Тогда
			НоменклатураСерийная = Истина;
			Прервать;
		КонецЕсли;
		
		если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			
			НоменклатураСерийная = ПроверитьСерийностьЭлементовНабора(НоменклатураСостава, НоменклатураСерийная) ;
			
			если НоменклатураСерийная тогда
				прервать;
			конецесли;
			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат НоменклатураСерийная;
	
КонецФункции

&НаСервере
Функция   ПолучитьНоменклатуруПоШтрихКоду(Знач ДанныеШтрикода, Знач ИСерию = Ложь) Экспорт
	
	Номенклатура = Неопределено;
	
	Если ТипЗнч(ДанныеШтрикода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрикода;	
	иначе	
		ШтрихКод = ДанныеШтрикода.ШтрихКод;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, Ложь, Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
	|	ИЛИ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ
	|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
	Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
	Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Номенклатура = Выборка.ссылка;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.Номенклатура КАК Номенклатура,
		|	ШтрихКоды.СерияНоменклатуры
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
		|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)";
		
		Запрос.УстановитьПараметр("ШтрихКод", нрег(ШтрихКод));
		Запрос.УстановитьПараметр("ШтрихКодВРЕГ", ВРЕГ(ШтрихКод));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если ИСерию Тогда
				Номенклатура = Новый Структура;
				Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
				Номенклатура.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
				Номенклатура.Вставить("Количество", 1);
			иначе
				Номенклатура = Выборка.Номенклатура;
			КонецЕсли;
			
		Иначе
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка КАК Номенклатура,
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ (Номенклатура.Артикул = &ОсновнойШтрихКод
				|			ИЛИ Номенклатура.Артикул = &ОсновнойШтрихКодВРЕГ)
				|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
				Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
				Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Если ИСерию Тогда
						НоменклатураСтруктура = Новый Структура;
						НоменклатураСтруктура.Вставить("Номенклатура", Выборка.Номенклатура);
						НоменклатураСтруктура.Вставить("СерияНоменклатуры", ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СерииНоменклатуры.ПустаяСсылка()"));
						НоменклатураСтруктура.Вставить("Количество", 1);
					иначе
						Номенклатура = Выборка.ссылка;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 		
	КонецЕсли;
	
	Если Номенклатура = Неопределено Тогда
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ШтрихКодомМожетВыступатьСерияИлиКодПродукта") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
			|	СерииНоменклатуры.Владелец КАК Номенклатура
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|	И (СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКодВРЕГ
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКодВРЕГ)";
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					если ИСерию тогда
						
						Номенклатура = Новый Структура;
						Номенклатура.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						Номенклатура.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
						Номенклатура.Вставить("Количество", 1);
						
					иначе
						Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;	
					КонецЕсли;	
				КонецЦикла;				
				
			КонецЕсли;
		конецесли;
		
		Если Номенклатура = Неопределено Тогда
			если ИСерию тогда
				
				Номенклатура = Новый Структура;
				Номенклатура.Вставить("Номенклатура", ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Номенклатура.ПустаяСсылка()"));
				Номенклатура.Вставить("СерияНоменклатуры", ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СерииНоменклатуры.ПустаяСсылка()"));
				Номенклатура.Вставить("Количество", 1);
				
			иначе
				Номенклатура = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Номенклатура.ПустаяСсылка()");
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Номенклатура;	
		
	Иначе
		если ИСерию тогда
			
			НоменклатураСтруктура = Новый Структура;
			НоменклатураСтруктура.Вставить("Номенклатура", Номенклатура);
			НоменклатураСтруктура.Вставить("СерияНоменклатуры", ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СерииНоменклатуры.ПустаяСсылка()"));
			НоменклатураСтруктура.Вставить("Количество", 1);
			
			Возврат НоменклатураСтруктура;
			
		иначе
			Возврат Номенклатура;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция   СвязаннаяНоменклатурнаяГруппа(Знач Родитель)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
	|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
	|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатурныеГруппы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
процедура УстановитьНаименованиеНоменклатурыПоФормуле(Знач НоменклатураОбъект) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
		
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			и ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда
			
			СвязаннаяНоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа(НоменклатураОбъект.Родитель);
			Если не СвязаннаяНоменклатурнаяГруппа = Неопределено 
				и не НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа Тогда
				
				НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом")
			и ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы) Тогда
			
			Попытка 
				Номенклатура 	= НоменклатураОбъект;
				Цена 			= 0;
				льготнаяцена 	= 0;
				Формула 		= НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы.Формула;
				Формулаврег 	= врег(Формула);
				
				если НЕ найти(Формулаврег, "ЦЕНА") = 0 тогда
					
					ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен");
					//усл не менять
					Если (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура))
						ИЛИ (ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура.ссылка)) Тогда
						
						Формулаврег = врег(Формула);
						
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, ОбщийМодульСервисСервер.ПользователяТекущаяДата(), Истина) ;
						Если цена = 0 Тогда
							Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, Истина, ОбщийМодульСервисСервер.ПользователяТекущаяДата(), Истина) ;
						КонецЕсли;
						
					Иначе
						попытка
							Цена = НоменклатураОбъект.Цена;
						Исключение
						КонецПопытки;
						
					КонецЕсли; 	
					
					если НЕ найти(Формулаврег, "ЛЬГОТНАЯЦЕНА") = 0 тогда
						льготнаяцена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(Номенклатура.ссылка, , цена, видцен);
					КонецЕсли;
				КонецЕсли;
				
				НаименованиеНов = "";
				Производитель 	= НоменклатураОбъект.Производитель;
				НоменклатурнаяГруппа = НоменклатураОбъект.НоменклатурнаяГруппа;
				
				Выполнить(" НаименованиеНов = """" + "  + Формула  + ";") ;
				
				Если не НаименованиеНов = НоменклатураОбъект.Наименование тогда
					НоменклатураОбъект.Наименование = НаименованиеНов;
				КонецЕсли;
				
			Исключение 	
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке авто-наименования номенклатуры:") + ОписаниеОшибки(), , НоменклатураОбъект);
					//сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке авто-наименования номенклатуры:") + ОписаниеОшибки());					
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   УстановитьШтрихКодНоменклатурыПоФормуле(Знач ОбъектНоменклатура, Знач ФормулаШтрихКода = "", ВидЦен = Неопределено, Дата = Неопределено, Цена = Неопределено, СерияНоменклатуры = "") экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если ФормулаШтрихКода = "" Тогда  
		
		Если ЗначениеЗаполнено(ОбъектНоменклатура.Производитель)
			и ЗначениеЗаполнено(ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры) Тогда
			
			ФормулаШтрихКода = ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры.Формула;
		иначе
			ФормулаШтрихКодаСсылка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры");
			Если ЗначениеЗаполнено(ФормулаШтрихКодаСсылка) Тогда
				ФормулаШтрихКода = ФормулаШтрихКодаСсылка.Формула;
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
	
	Результат = "";	
	Если ЗначениеЗаполнено(ФормулаШтрихКода) Тогда
		Попытка 
			Номенклатура = ОбъектНоменклатура;
			Если ВидЦен = Неопределено Тогда
				ВидЦен = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен");
			КонецЕсли;
			
			если Цена = Неопределено тогда
				Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата);		
			КонецЕсли;
			
			НоменклатурнаяГруппа = ОбъектНоменклатура.НоменклатурнаяГруппа;
			Производитель = ОбъектНоменклатура.Производитель;
			
			выполнить(" Результат = """"+" + ФормулаШтрихКода + ";") ;
			
			Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
				Результат = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(Результат, Ложь);
			КонецЕсли;
			
		Исключение 	
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при авто-формировании Штрих-кода номенклатуры:") + ОписаниеОшибки(), , ОбъектНоменклатура.Ссылка);
				//сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при авто-формировании Штрих-кода номенклатуры:") + ОписаниеОшибки());	
			КонецЕсли;
		КонецПопытки; 		           	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   СоздатьНоменклатуру(Знач ШтрихКод, Знач Производитель, Знач НоменклатурнаяГруппа, Знач Цена, Знач наименование, Знач ВидЦен, Знач Родитель = Неопределено, Знач Серия = "")  Экспорт
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") тогда
		
		если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
			и НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , );
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!");
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			Возврат неопределено;	
			
		ИначеЕСли ЗначениеЗаполнено(НоменклатурнаяГруппа) тогда
			
			Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
				родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование) ;
				если не родитель.ЭтоГруппа тогда
					родитель = Неопределено;						
				КонецЕсли;
			КонецЕсли;
			
			если ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы)
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
				
				формула = врег(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.формула);
				
				ошибка = ложь;
				
				Если не найти(формула, "ЦЕНА") = 0 
					и цена = 0 Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!"), , );
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = истина;
					
				КонецЕсли;
				
				Если не найти(формула, "ПРОИЗВОДИТЕЛЬ") = 0 
					и НЕ ЗначениеЗаполнено(Производитель) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = истина;
					
				КонецЕсли;
				
				Если не найти(формула, "ВИДЦЕН") = 0 
					и НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = истина;
					
				КонецЕсли;
				
				Если не найти(формула, "ШТРИХКОД") = 0 
					и НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = истина;
					
				КонецЕсли;
				
				если ошибка тогда
					Возврат неопределено;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НоваНоменклатура = Справочники.Номенклатура.СоздатьЭлемент() ;
	НоваНоменклатура.Наименование 		  = наименование;
	НоваНоменклатура.ОсновнойШтрихКод 	  = ШтрихКод;
	НоваНоменклатура.Производитель 		  = Производитель;
	НоваНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	
	если не родитель = Неопределено
		и ЗначениеЗаполнено(родитель) тогда
		
		НоваНоменклатура.родитель = родитель;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		НоваНоменклатура.Цена = Цена;
	КонецЕсли;
	
	НоваНоменклатура.Записать();
	
	если не серия = "" тогда
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент() ;
		НоваяСерия.Наименование = серия;
		НоваяСерия.Владелец 	= НоваНоменклатура.Ссылка;
		НоваяСерия.Записать();
		
	КонецЕсли;
	
	Если НЕ Цена = 0 
		и ИспользоватьСложныйМеханизмЦен Тогда	
		
		если ЗначениеЗаполнено(ВидЦен) Тогда
			
			Дата = Началомесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 3600 * 24;
			
			Рсмз = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			РСМЗ.ВидЦен 	  = ВидЦен;
			РСМЗ.Номенклатура = НоваНоменклатура.Ссылка;
			РСМЗ.Период 	  = Дата;
			РСМЗ.Цена	 	  = Цена;
			РСМЗ.Вручную	  = истина;
			РСМЗ.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена установлена при создании номенклатуры");
			
			Попытка 
				рсмз.Записать(Истина);
				
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", НоваНоменклатура.Ссылка);
				СтрокаТовара.Вставить("Цена", Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Дата, Истина, , , ЛОЖЬ);
				
				//на случай наименования по цене
				НоваНоменклатура = НоваНоменклатура.Ссылка.ПолучитьОбъект();
				НоваНоменклатура.записать();
				
			Исключение 	
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при установке цены:") + " " + ОписаниеОшибки());
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при установке цены:") + " " + ОписаниеОшибки();
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
				
			КонецПопытки;
			
		иначе
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Вид цен!"));
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Вид цен!");
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваНоменклатура.ссылка;
	
КонецФункции //СоздатьНоменклатуру

&НаСервере
Процедура ПроверитьИСортироватьТаблицуТовары(ЭтотОбъект, Знач ЭтоПланПродаж = Ложь) Экспорт
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНаименованиюПередЗаписьюДокументов") Тогда
		
		ТОварыДляСортировки = ЭтотОбъект.Товары.Выгрузить();
		
		Если ЭтоПланПродаж Тогда
			ТОварыДляСортировки.Сортировать("НоменклатураИлиГруппа");
			
		ИначеЕсли ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументов") тогда
			
			ТОварыДляСортировки.Колонки.Добавить("НоменклатурнаяГруппа");
			Для Каждого СтрокаТовар из ТОварыДляСортировки Цикл
				Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
					СтрокаТовар.НоменклатурнаяГруппа = СтрокаТовар.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;				
			КонецЦикла;
			
			ТОварыДляСортировки.Сортировать("НоменклатурнаяГруппа, Номенклатура");
			
		Иначе
			ТОварыДляСортировки.Сортировать("Номенклатура");
			
		КонецЕсли;		
		
		ЭтотОбъект.Товары.Загрузить(ТОварыДляСортировки);		
	КонецЕсли;   
	
КонецПроцедуры

&насервере
Процедура ОчиститьТоварыНаСервере(Знач Ссылка) Экспорт	
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		ДокументОбъект.Товары.Очистить();
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //ОчиститьТоварыНаСервере

&насервере
Процедура ПересчитатьТоварыНаСервере(Знач Ссылка, Знач Коэффициент = 0) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Документссылка = Ссылка.ссылка;
		
		ТипЗнчДокументссылка = ТипЗнч(Документссылка);
		ПеремещенияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.РасходыТовара");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументссылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументссылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		
		Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл			
			
			Если Коэффициент = 0 Тогда
				Если ПеремещенияТовара 
					или ПоступленияТовара
					Или РасходыТовара тогда
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, Ложь,  СтрокаТовара.Количество, Документссылка.Договор, , , Ссылка);
					
				ИначеЕсли Инвентаризации 
					или КорректировкиИРегистрацияОстатков Тогда
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, Ложь,  СтрокаТовара.Количество, , , , Ссылка);
					
				ИначеЕсли Инвентаризации
					или Договора Тогда				
					
					СтрокаТовара.Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, Ложь, , , , , Ссылка);
					
				ИначеЕсли УстановкиЦен Тогда
					
					СтрокаТовара.СтараяЦена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, , , , , , Ссылка);
				КонецЕсли;
				
			иначе
				СтрокаТовара.Цена = СтрокаТовара.Цена * Коэффициент;
			КонецЕсли;
			
			Если РасходыТовара Тогда  
				
				если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") тогда
					СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, строкатовара.количество, документссылка.видцен, документссылка.клиентпоставщик);	
				КонецЕсли;
				
				СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
				
			иначеЕсли ПеремещенияТовара 
				или ПоступленияТовара
				или КорректировкиИРегистрацияОстатков Тогда
				
				СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
				
			иначеесли Инвентаризации 
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") тогда
				
				ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура); //акция ном
				если не процентскидки = 0 
					и не СтрокаТовара.Цена = 0 тогда
					
					СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена/100 * ПроцентСкидки);
				КонецЕсли;
				
			ИначеЕсли УстановкиЦен Тогда
				
				Если Коэффициент = 0 Тогда
					СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);	
				КонецЕсли;
				СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена; 				
				
			КонецЕсли;			
		КонецЦикла;
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки(), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		КонецПопытки; 		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция   НапечататьЭтикетку(Знач СтруктураПечати, Знач Таб = Неопределено) Экспорт
	
	ИмяПринтера 			= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НаименованиеПринтераШтрихКодов");
	ПечатьНаОбычныйПринтер 	= не ЗначениеЗаполнено(ИмяПринтера);		
	ИспользоватьШтрихКоды	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды") ;
	
	ОбъектГотов = ложь;
	Попытка
		КомпонентШК = Новый COMОбъект("V8.Barcod.2");
		
		НазваниеШрифта		= "MS Serif";
		РазмерШрифта		= 6;
		ВесШрифта			= 400;
		НаклонныйШрифт		= Ложь;
		ЗачёркнутыйШрифт	= Ложь;
		ПодстрочныйШрифт	= Ложь;          
		
		КомпонентШК.УстановитьШрифт(НазваниеШрифта,
		РазмерШрифта,
		ВесШрифта,
		НаклонныйШрифт,
		ЗачёркнутыйШрифт,
		ПодстрочныйШрифт);
		
		КомпонентШК = Неопределено;
		ОбъектГотов = Истина;
		
	Исключение
		если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Компонента 1С:Печать ШтрихКодов не установлена на данном компьютере!"), СтатусСообщения.Важное, );	
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Компонента 1С:Печать ШтрихКодов не установлена на данном компьютере!"), СтатусСообщения.Важное);	
		КонецЕсли;
	КонецПопытки;
	
	если ОбъектГотов тогда
		
		ТекКолонка = 1;
		ТекСтрока  = 1;
		
		Таб = Новый ТабличныйДокумент;
		
		Таб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Мелкая" + СокрЛП(ИмяКомпьютера());
		Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");
		
		ВысотаЭтикетки = 17;
		ФорматЭтикетки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ФорматЭтикетки");
		
		если ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_3_Высота_1  тогда
			ШиринаЭтикетки = 16;
		иначеесли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_1  тогда
			ШиринаЭтикетки = 23;
		иначе
			ШиринаЭтикетки = 13;
		конецесли;
		
		Попытка                			
			если ИспользоватьШтрихКоды тогда
				
				ЭтикеткаОбласть  = Макет.ПолучитьОбласть(1, 1, 4, 2);
				ОбластьШтрихКод  = ЭтикеткаОбласть.Области.ОбластьШтрихКод;
				ОбластьЦена      = ЭтикеткаОбласть.Области.Цена;		
				РисунокШтрихКод  = ЭтикеткаОбласть.Рисунки.ШтрихКод;             	
				
				НазваниеШрифта 	 = "MS Serif";
				РазмерШрифта 	 = 6;
				ВесШрифта 		 = 400;
				НаклонныйШрифт 	 = ложь;
				ЗачёркнутыйШрифт = Ложь;
				ПодстрочныйШрифт = Ложь;
				
				РисунокШтрихКод.объект.УстановитьШрифт(НазваниеШрифта,
				РазмерШрифта,
				ВесШрифта,
				НаклонныйШрифт,
				ЗачёркнутыйШрифт,
				ПодстрочныйШрифт);
				
				РисунокШтрихКод.Расположить(ОбластьШтрихКод);
				
				если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмещениеТекстаСШтрихКодомНаЭтикетке") = Перечисления.ОтносительноеРазмещение.Сверху тогда
					РисунокШтрихКод.Объект.положениеТекста = 1;
				иначе
					РисунокШтрихКод.Объект.положениеТекста = 0;			
				КонецЕсли;
				
				РисунокШтрихКод.Объект.ВыравниваниеКода = 2;
				РисунокШтрихКод.Объект.ТипКода			= 4;
				РисунокШтрихКод.Объект.Сообщение		= СтруктураПечати.ШтрихКод;
				
				если не СтруктураПечати.ТекстСШтрихКодом = СтруктураПечати.ШтрихКод тогда
					РисунокШтрихКод.Объект.ТекстКода = СтруктураПечати.ТекстСШтрихКодом;                                 	
				КонецЕсли;                                   	
				
				ОбластьЦена.ВысотаСтроки = ВысотаЭтикетки;
				ЭтикеткаОбласть.Область(2, 2, 2, 2).ШиринаКолонки = ШиринаЭтикетки;
				
				ОбластьЦена.Текст = "";
				Таб.Вывести(ЭтикеткаОбласть);
				
			иначе
				ЭтикеткаОбласть   = Макет.ПолучитьОбласть("С");
				ЭтикеткаОбласть.Параметры.ТекстПодШтрихКодом = СтруктураПечати.ТекстСШтрихКодом;
				Таб.Вывести(ЭтикеткаОбласть);
			КонецЕсли;
			
			ТекКолонка = ТекКолонка + 1;
			
			таб.РазмерКолонтитулаСверху = 0;
			таб.РазмерКолонтитулаСнизу 	= 0;
			таб.ПолеСверху 	= 0;
			таб.ПолеСлева 	= 0;
			таб.ПолеСнизу 	= 0;
			таб.ПолеСправа 	= 0;
			таб.КоличествоЭкземпляров   = СтруктураПечати.Количество;
			
			Если ЗначениеЗаполнено(ИмяПринтера) Тогда
				таб.ИмяПринтера = ИмяПринтера;
			КонецЕсли;
			
			если не ПечатьНаОбычныйПринтер тогда	
				Таб.Напечатать();               	
			КонецЕсли;
			
		исключение
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при обращении к подпрограмме печати Штрих-Кода!") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перезапустите программу и принтер:") + " " + ОписаниеОшибки(), СтатусСообщения.Важное, );	
				//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при обращении к подпрограмме печати Штрих-Кода!") + символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Перезапустите программу и принтер:") + " " + ОписаниеОшибки(), СтатусСообщения.Важное);	
			КонецЕсли;
			
		КонецПопытки;
		
		РисунокШтрихКод = Неопределено;
		Макет 			= Неопределено;
	КонецЕсли;
	
	возврат Таб;
	
КонецФункции

&НаСервере
Функция   НаименованиеЭтойНоменклатрнойГруппыНазначается(Знач НоменклатурнаяГруппа) Экспорт	
	Возврат ЗначениеЗаполнено(НоменклатурнаяГруппа)	и ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы);	
КонецФункции //НаименованиеЭтойНоменклатрнойГруппыНазначается

Функция   ПроверитьНаличиеСерийНоменклатуры(Знач Ссылка) Экспорт
	
	НаличиеСерийНоменклатуры = Ложь;
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		и ЗначениеЗаполнено(ссылка) Тогда
		
		Для Каждого СтрокаТовара Из Ссылка.Товары Цикл
			Если ОбщийМодульПовтор.ТоварВедетсяПоСериям(СтрокаТовара.Номенклатура) Тогда
				
				НаличиеСерийНоменклатуры = Истина; 			
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НаличиеСерийНоменклатуры;
	
КонецФункции //ПроверитьНаличиеСерийНоменклатуры

Функция   ОбнаружитьСериюНоменклатуры(Знач Номенклатура, Знач Наименование, Знач СоздаватьНовую = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Ссылка
	|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ СерииНоменклатуры.Наименование = &Наименование
	|	И СерииНоменклатуры.Владелец = &Номенклатура";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.сылка;
		
	ИначеЕсли СоздаватьНовую Тогда
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.Наименование = Наименование;
		НоваяСерия.Владелец 	= Номенклатура;
		НоваяСерия.Записать();
		
		Возврат НоваяСерия.Ссылка;
		
	иначе
		Возврат ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.СерииНоменклатуры.ПустаяСсылка()");
	КонецЕсли;
	
КонецФункции //ОбнаружитьСериюНоменклатуры

Функция   ПолучитьШтрихКодСерии(Знач СерияНоменклатуры) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";

	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьШтрихКодСерии

Процедура ИзменениеКонстантыИспользованияНаборовПередЗаписью(Знач Источник, Отказ) Экспорт
	
	Если НЕ источник.Значение Тогда //отключают наборы
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 КорректировкиИРегистрацияОстатковТовары.Номенклатура
		|ИЗ Документ.КорректировкиИРегистрацияОстатков.Товары КАК КорректировкиИРегистрацияОстатковТовары
		|ГДЕ КорректировкиИРегистрацияОстатковТовары.Ссылка.Проведен = ИСТИНА
		|	И КорректировкиИРегистрацияОстатковТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПеремещенияТовараТовары.Номенклатура
		|ИЗ Документ.ПеремещенияТовара.Товары КАК ПеремещенияТовараТовары
		|ГДЕ ПеремещенияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПеремещенияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Номенклатура
		|ИЗ	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ ПоступленияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПоступленияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 РасходыТовараТовары.Номенклатура
		|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности отменить использование Наборов! Они уже участвуют в проведенных документах."), ,);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности отменить использование Наборов! Они уже участвуют в проведенных документах.");
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			отказ = истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция   НаименованиеГруппыПоПервомуСлову(Знач Наименование, НеСоздавать = Ложь) Экспорт
	
	Наименование = сокрлп(Наименование);
	
	если не Наименование = "" тогда
		КонецСлова = найти(Наименование, " ");
		Если КонецСлова = 0 тогда
			КонецСлова = найти(Наименование, ",");
			Если КонецСлова = 0 тогда
				КонецСлова = найти(Наименование, ";");
				Если КонецСлова = 0 тогда
					КонецСлова = найти(Наименование, ".");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		если не КонецСлова = 0 тогда
			наименование = лев(наименование, КонецСлова);	        	
		КонецЕсли;
		
		если наименование = "" тогда
			Возврат неопределено;
		иначе
			Возврат ОбщийМодульПовтор.ПолучитьНоменклатурнуюГруппуПоНаименованию(наименование, НеСоздавать);	
		КонецЕсли;
		
	иначе
		Возврат неопределено;	
	КонецЕсли;
	
КонецФункции //НаименованиеГруппыПоПервомуСлову(Наименование)

Функция   ПолучитьНоменклатурнуюГруппуПоНаименованию(Знач наименование, НеСоздавать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ЭтоГруппа = ИСТИНА";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		результат = ВыборкаДетальныеЗаписи.ссылка;
		
	иначеЕсли НеСоздавать тогда
		результат = Неопределено;
		
	Иначе		
		результатОбъект = Справочники.Номенклатура.СоздатьГруппу() ;
		результатОбъект.Наименование = Наименование;
		результатОбъект.Записать();
		
		результат = результатОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции //ПолучитьНоменклатурнуюГруппуПоНаименованию(наименование)

Функция   ПолучитьССылкуНаСкопированныйОбъект(Знач Ссылка) Экспорт
	
	ОбъектКопия = Ссылка.Скопировать();
	ОбъектКопияСсылка = неопределено;
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ((ОбъектКопия.ОсновнойШтрихКод = "" 
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"))
		иЛИ не ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода")) Тогда
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование и Штрих-код вручную!"), ,  Ссылка);
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование и Штрих-код вручную!");
		//Сообщение.Сообщить();
		
		ОбъектКопия.ОсновнойШтрихКод = ОбъектКопия.ОсновнойШтрихКод + формат(ТекущаяДата(), "ДФ=ЧЧммсс");
	Иначе
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование вручную!"), , Ссылка);
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование вручную!");
		//Сообщение.Сообщить();
		
	КонецЕсли;
	
	ОбъектКопия.наименование = ОбъектКопия.наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия товара с ценами");
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
		и НЕ ЗначениеЗаполнено(ОбъектКопия.НоменклатурнаяГруппа)Тогда
		
		ОбъектКопия.НоменклатурнаяГруппа = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
	КонецЕсли;	
	
	попытка
		НеВыводитьСообщений = параметрысеанса.НеВыводитьСообщений; //без кэша
		параметрысеанса.НеВыводитьСообщений = Истина;
		ОбъектКопия.записать();
		параметрысеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		
		ОбъектКопияСсылка = ОбъектКопия.ссылка;
		
		РсНз = Регистрысведений.Цены.СоздатьНаборЗаписей();
		РсНз.Отбор.Номенклатура.Установить(Ссылка);
		РсНз.Прочитать();
		
		Для Каждого ЗаписьОЦене Из РсНз Цикл
			
			Цены = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			Цены.Активность 	= Истина;
			Цены.ВидЦен  		= ЗаписьОЦене.ВидЦен;
			Цены.Вручную		= ЗаписьОЦене.Вручную;
			Цены.Комментарий	= ЗаписьОЦене.Комментарий;
			Цены.Номенклатура	= ОбъектКопияСсылка;
			Цены.Период			= ЗаписьОЦене.Период;
			Цены.Цена 			= ЗаписьОЦене.Цена;
			
			Попытка 
				Цены.Записать(Истина);
				
			Исключение 
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений Цены:") + " " + ОписаниеОшибки(), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений Цены:") + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();
			КонецПопытки; 
		КонецЦикла;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
			РсНз = Регистрысведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
			РсНз.Отбор.ОбъектБазыДанных.Установить(Ссылка);
			РсНз.Прочитать();
			
			Для Каждого ЗаписьОЯзыке Из РсНз Цикл
				
				Перевод = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				Перевод.Активность 		 = Истина;
				Перевод.НаЯзыке			 = ЗаписьОЯзыке.НаЯзыке;
				Перевод.ОбъектБазыДанных = ОбъектКопияСсылка;
				Перевод.Поле			 = ЗаписьОЯзыке.Поле;
				Перевод.Язык			 = ЗаписьОЯзыке.Язык;
				
				Попытка 
					Перевод.Записать(Истина);
					
				Исключение 
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Перевода:") + " " + ОписаниеОшибки(), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Перевода:") + " " + ОписаниеОшибки();
					//Сообщение.Сообщить();
				КонецПопытки; 
			КонецЦикла;
		КонецЕсли;
		
	исключение
		
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи копии номенклатуры:") + " " + ОписаниеОшибки(), , Ссылка);
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи копии номенклатуры:") + " " + ОписаниеОшибки();
		//Сообщение.Сообщить();
	конецпопытки;
	
	Возврат ОбъектКопияСсылка;
	
КонецФункции

Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	Возврат Номенклатура.ЭтоНабор;
КонецФункции //ЭтоНабор

&НаСервере
Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(ВернутьСписок = истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ НоменклатураЧастогоСпроса.Позиция КАК Позиция,
	|	НоменклатураЧастогоСпроса.Номенклатура,
	|	НоменклатураЧастогоСпроса.Комментарий
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|УПОРЯДОЧИТЬ ПО Позиция";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВернутьСписок Тогда
		списокрезультат = Новый СписокЗначений;
		
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				списокрезультат.Добавить(ВыборкаДетальныеЗаписи.номенклатура);
			КонецЦикла;	
		КонецЕсли;
		
		Возврат списокрезультат;
		
	Иначе
		Возврат РезультатЗапроса;
		
	КонецЕсли;
	
КонецФункции //ПолучитьСписокНоменклатурыБыстрогоСпроса

Функция   ПроверитьОтсутствиеСерииВОстатках(Знач Номенклатура, Знач СерияНоменклатуры, Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток
	               |ИЗ РегистрНакопления.Товары.Остатки(&Дата,
	               |			СерияНоменклатуры = &СерияНоменклатуры
	               |				И Номенклатура = &Номенклатура) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	КоличествоОстаток = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;	                            	
	КонецЕсли;
	
	Возврат не КоличествоОстаток = 0;
	
КонецФункции //ПроверитьОтсутствиеСерииВОстатках

Процедура ПечатьГарантийногоТалона(Знач ТабДок, Знач Ссылка) Экспорт
	
	Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыТовара.Ссылка,
	|	РасходыТовара.Дата,
	|	РасходыТовара.Валюта,
	|	РасходыТовара.Организация,
	|	РасходыТовара.Товары.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		СерияНоменклатуры,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		ПроцентСкидки,
	|		СуммаБезСкидки,
	|		ЗаказКлиента,
	|		ОСтроке,
	|		Номенклатура.НеОтслеживатьОстаток
	|	)
	|ИЗ
	|	Документ.РасходыТовара КАК РасходыТовара
	|ГДЕ
	|	РасходыТовара.Ссылка = &Ссылка";
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие")) ;
		НашЮридическийАдрес = Организация.Адрес;
		НашеОКПО = Организация.ОКПО;
		Дата = Выборка.Дата;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			Если ВставлятьРазделительСтраниц Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			если не ВыборкаТовары.НоменклатураНеОтслеживатьОстаток Тогда
				Шапка.Параметры.Заполнить(ВыборкаТовары);
				
				Шапка.Параметры.Валюта = Валюта;
				Шапка.Параметры.Организация = Организация;
				Шапка.Параметры.НашЮридическийАдрес = НашЮридическийАдрес;
				Шапка.Параметры.ОКПО = НашеОКПО;
				Шапка.Параметры.Дата = Дата;
				
				ПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(ВыборкаТовары.Номенклатура);
				Шапка.Параметры.ПолноеНаименование = ПолноеНаименование + ?(ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) и ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.Производитель), " " + ВыборкаТовары.Номенклатура.Производитель, "");
				
				ТабДок.Вывести(Шапка);
				
				ВставлятьРазделительСтраниц = Истина;	
			КонецЕсли;
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры
