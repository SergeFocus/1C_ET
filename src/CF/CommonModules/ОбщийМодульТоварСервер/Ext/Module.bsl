// sza151205-2118 
// sza151111-1631 
// sza150720-2258 
// sza150604-0330 вауч
// sza150529-1729 
// sza150520-1256 
// sza150510-0248 
// sza150403-1753 ППФ
// sza150303-1536 число мест
// sza150208-1602 abrc
// sza150112-1803 фикс
// sza150109-2012 
// sza141228-2129
// sza141222-1358 нн
// sza141202-1416 возв реал по себест
// sza141201-0019
// sza141124-2238
// sza141117-1454 
// sza141117-0309 
// sza141115-2252
// sza141101-0306 : 
// sza141015-1439 
// sza141011-2125
// sza141009-0147 ЧислоЭтикетокНаСтранице
// sza140703-2353  косметика
// sza140612-1545 : 
// ыяф131205
Процедура ИзменениеКонстантыИспользованияНаборовПередЗаписью(Знач Источник, Отказ) Экспорт
	
	Если НЕ Отказ
		И НЕ Источник.Значение Тогда // отключают наборы
		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КорректировкиИРегистрацияОстатковТовары.Номенклатура
		|ИЗ Документ.КорректировкиИРегистрацияОстатков.Товары КАК КорректировкиИРегистрацияОстатковТовары
		|ГДЕ КорректировкиИРегистрацияОстатковТовары.Ссылка.Проведен = ИСТИНА
		|	И КорректировкиИРегистрацияОстатковТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПеремещенияТовараТовары.Номенклатура
		|ИЗ Документ.ПеремещенияТовара.Товары КАК ПеремещенияТовараТовары
		|ГДЕ ПеремещенияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПеремещенияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Номенклатура
		|ИЗ	Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ ПоступленияТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И ПоступленияТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 РасходыТовараТовары.Номенклатура
		|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
		|ГДЕ РасходыТовараТовары.Ссылка.Проведен = ИСТИНА
		|	И РасходыТовараТовары.Номенклатура.ЭтоНабор = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет возможности отменить использование Наборов! Они уже участвуют в проведенных документах."), ,);
			КонецЕсли;
			
			Отказ = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция   НаименованиеГруппыПоПервомуСлову(Знач Наименование, Знач НеСоздавать = ЛОЖЬ) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	Если НЕ ПустаяСтрока(Наименование) Тогда
		
		КонецСлова = Найти(Наименование, " ");
		Если КонецСлова = 0 Тогда
			КонецСлова = Найти(Наименование, ",");
			Если КонецСлова = 0 Тогда
				КонецСлова = Найти(Наименование, ";");
				Если КонецСлова = 0 Тогда
					КонецСлова = Найти(Наименование, ".");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ КонецСлова = 0 Тогда
			Наименование = Лев(Наименование, КонецСлова);	        	
		КонецЕсли;
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат Неопределено;
		Иначе
			Возврат ОбщийМодульПовтор.ПолучитьГруппуНоменклатурыПоНаименованию(Наименование, НеСоздавать);	
		КонецЕсли;
		
	Иначе
		Возврат неопределено;	
	КонецЕсли;
	
КонецФункции // НаименованиеГруппыПоПервомуСлову

Функция   НаименованиеЭтойНоменклатрнойГруппыНазначается(Знач НоменклатурнаяГруппа) Экспорт	
	
	Возврат ЗначениеЗаполнено(НоменклатурнаяГруппа)	
	И ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы);
	
КонецФункции // НаименованиеЭтойНоменклатрнойГруппыНазначается

Функция   НайтиНоменклатуруПоАртикулу(Знач Артикул, Знач ТочноеСоотвествие = ЛОЖЬ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Артикул " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Артикул";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

Функция   НапечататьЭтикетку(Знач СтруктураПечати, 
	Знач ТабДокОбщийРезультат = Неопределено, 
	Знач ЭтикеткаДляОднойНоменклатуры = ИСТИНА, 
	Знач ЧислоЭтикетокНаСтраницеРегулируетсяРанее = ЛОЖЬ) Экспорт
	
	ИспользоватьШтрихКоды  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды");
	КоличествоВыведено     = 0;
	НеВыводитьРазделитель  = ЛОЖЬ;
	
	Если ТабДокОбщийРезультат = Неопределено Тогда
		ТабДокОбщийРезультат = Новый ТабличныйДокумент;
		ТабДокОбщийРезультат.ИмяПараметровПечати   = "ПАРАМЕТРЫ_ПЕЧАТИ_Мелкая1" + СокрЛП(ИмяКомпьютера());
		ТабДокОбщийРезультат.КлючПараметровПечати  = ТабДокОбщийРезультат.ИмяПараметровПечати;
		ТабДокОбщийРезультат.КоличествоЭкземпляров = 1;
	КонецЕсли;
	
	СуммаТаб = Новый ТабличныйДокумент;
	СуммаТаб.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СУМТАБ" + СокрЛП(ИмяКомпьютера());
	СуммаТаб.КлючПараметровПечати = СуммаТаб.ИмяПараметровПечати;
	
	ПроизвольнаяПечатнаяФорма = Неопределено;
	СтруктураПечати.Свойство("ПроизвольнаяПечатнаяФорма", ПроизвольнаяПечатнаяФорма);
	
	Если ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
		ЧислоЭтикетокНаЛистеПоГоризонтали = 1;
		ЧислоЭтикетокНаЛистеПоВертикали   = 1;
		ЧислоЭтикетокНаСтранице 		  = 1;
		
	Иначе		
		ЧислоЭтикетокНаЛистеПоГоризонтали = 0;
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
			И НЕ ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
			
			ЧислоЭтикетокНаЛистеПоГоризонтали = ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоГоризонтали;
		КонецЕсли;
		
		Если ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
			ЧислоЭтикетокНаЛистеПоГоризонтали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоГоризонтали");
			Если ЧислоЭтикетокНаЛистеПоГоризонтали = 0 Тогда
				ЧислоЭтикетокНаЛистеПоГоризонтали = 1;
			КонецЕсли;
		КонецЕсли;
		
		ЧислоЭтикетокНаЛистеПоВертикали = 0;
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
			И НЕ ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
			
			ЧислоЭтикетокНаЛистеПоВертикали = ПроизвольнаяПечатнаяФорма.ЧислоЭтикетокНаЛистеПоВертикали;
		КонецЕсли;
		
		Если ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
			ЧислоЭтикетокНаЛистеПоВертикали = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЧислоЭтикетокНаЛистеПоВертикали");
			Если ЧислоЭтикетокНаЛистеПоВертикали = 0 Тогда
				ЧислоЭтикетокНаЛистеПоВертикали = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтикеткаДляОднойНоменклатуры Тогда
			ЧислоЭтикетокНаСтранице = ЧислоЭтикетокНаЛистеПоВертикали * ЧислоЭтикетокНаЛистеПоГоризонтали;
		Иначе
			ЧислоЭтикетокНаСтранице = 1;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
		
		НеВыводитьРазделитель = ПроизвольнаяПечатнаяФорма.ИспользоватьОтступыМасштабИПринтер И ПроизвольнаяПечатнаяФорма.НеВыводитьРазделитель;
		МассивИменПараметровПечани = Новый Массив;
		ВПП = Неопределено; //ВсеПараметрыПечати
		СтруктураПечати.Свойство("ВсеПараметрыПечати", ВПП);
		Для Каждого СвойствоСтруктурыПечати Из СтруктураПечати Цикл
			ВПП.Вставить(СвойствоСтруктурыПечати.Ключ, СвойствоСтруктурыПечати.Значение);
		КонецЦикла;
		
		КолонокВСтрокеПечати = 0;
		СтруктураПечати.Свойство("КолонокВСтрокеПечати", КолонокВСтрокеПечати);
		ЗапретитьСозданиеФорматаКолонок = НЕ КолонокВСтрокеПечати = 0;
		
		СуммаТаб = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, ВПП, СуммаТаб, , , , , , ЧислоЭтикетокНаСтраницеРегулируетсяРанее, ЗапретитьСозданиеФорматаКолонок);
		ОбъектГотов = ИСТИНА;
		
	Иначе		
		ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено;
		ДополнительнаяСтрокаЭтикетки 		= "";
		ВывестиДополнительнуюСтрокуЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВывестиДополнительнуюСтрокуЭтикетки");
		
		Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");
		
		Если ВывестиДополнительнуюСтрокуЭтикетки
			И СтруктураПечати.Свойство("ДополнительнаяСтрокаЭтикетки", ДополнительнаяСтрокаЭтикетки) 
			И ЗначениеЗаполнено(ДополнительнаяСтрокаЭтикетки)
			И НЕ ПустаяСтрока(ДополнительнаяСтрокаЭтикетки) Тогда
			
			РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаДополнительнойСтрокиЭтикетки");
			Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
			Иначе
				ДополнительнаяСтрокаЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок8");
			КонецЕсли;
			
			ДополнительнаяСтрокаЭтикеткиОбласть.Параметры.ТекстЗаголовка = ДополнительнаяСтрокаЭтикетки;
		КонецЕсли;
		
		ЗаголовокЭтикеткиОбласть = Неопределено;
		ТекстЗаголовка = "";
		
		Если СтруктураПечати.Свойство("ТекстЗаголовка", ТекстЗаголовка) 
			И ЗначениеЗаполнено(ТекстЗаголовка)
			И НЕ ПустаяСтрока(ТекстЗаголовка) Тогда
			
			РазмерШрифтаЗаголовкаЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерШрифтаЗаголовкаЭтикетки");
			Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок12");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 14 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок14");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 16 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок16");
			ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок10");
			Иначе
				ЗаголовокЭтикеткиОбласть = Макет.ПолучитьОбласть("Заголовок8");
			КонецЕсли;
			
			ЗаголовокЭтикеткиОбласть.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ОбъектГотов = ИСТИНА;
			
		Иначе
			ОбъектГотов = ЛОЖЬ;			
		КонецЕсли;				
		
		Если ИспользоватьШтрихКоды 
			И НЕ ПустаяСтрока(СтруктураПечати.ШтрихКод) Тогда
			
			ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(СуммаТаб, СтруктураПечати);
			ОбъектГотов = ИСТИНА;			
		КонецЕсли;
		
		Если РазмерШрифтаЗаголовкаЭтикетки = 12 Тогда
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>12 Тогда 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
			Иначе 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С");
			КонецЕсли;
			
		ИначеЕсли РазмерШрифтаЗаголовкаЭтикетки = 10 Тогда
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>16 Тогда 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
			Иначе 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С1");
			КонецЕсли;
			
		Иначе
			Если СтрДлина(СтруктураПечати.ТекстСШтрихКодом)>20 Тогда 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С3");
			Иначе 
				ЭтикеткаОбласть = Макет.ПолучитьОбласть("С2");
			КонецЕсли;
		КонецЕсли;
		ЭтикеткаОбласть.Параметры.ТекстПодШтрихКодом = СтруктураПечати.ТекстСШтрихКодом;
		
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЭтикеткаОбласть);
		СуммаТаб.Вывести(ЭтикеткаОбласть, 0);			
		
		Если ВывестиДополнительнуюСтрокуЭтикетки
			И НЕ ДополнительнаяСтрокаЭтикеткиОбласть = Неопределено Тогда
			
			РазмещениеДополнительнойСтрокиЭтикетки = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмещениеДополнительнойСтрокиЭтикетки");
			
			Если РазмещениеДополнительнойСтрокиЭтикетки = 1 Тогда // по центру
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
					ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);					
					СуммаТаб = ЗаголовокЭтикеткиОбласть;
				Иначе
					ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);					
					СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
				КонецЕсли;
				
			ИначеЕсли РазмещениеДополнительнойСтрокиЭтикетки = 2 Тогда // снизу
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
					ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					ЗаголовокЭтикеткиОбласть.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
					СуммаТаб = ЗаголовокЭтикеткиОбласть;
				Иначе
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ДополнительнаяСтрокаЭтикеткиОбласть);
					СуммаТаб.Вывести(ДополнительнаяСтрокаЭтикеткиОбласть);
				КонецЕсли;
				
			Иначе // сверху
				Если НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЗаголовокЭтикеткиОбласть);
					ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(ЗаголовокЭтикеткиОбласть);	
				КонецЕсли;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
				ДополнительнаяСтрокаЭтикеткиОбласть.Вывести(СуммаТаб);
				СуммаТаб = ДополнительнаяСтрокаЭтикеткиОбласть;
			КонецЕсли;
			
		ИначеЕсли НЕ ЗаголовокЭтикеткиОбласть = Неопределено Тогда
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
			ЗаголовокЭтикеткиОбласть.Вывести(СуммаТаб);
			СуммаТаб = ЗаголовокЭтикеткиОбласть;
		КонецЕсли;
		
		ОбъектГотов = ИСТИНА;
	КонецЕсли; //формирование макета одной этикетки
	
	Если НЕ ЧислоЭтикетокНаСтранице = 1
		И (НЕ (ЧислоЭтикетокНаЛистеПоВертикали = 1
		И ЧислоЭтикетокНаЛистеПоГоризонтали = 1)) Тогда
		
		ТекущияПозицияПоГоризонтали = 1;
		ТекущияПозицияПоВертикали 	= 1;
		
		Строка = Новый ТабличныйДокумент;
		Строка.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
		Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;
		
		Пока ТекущияПозицияПоВертикали <= ЧислоЭтикетокНаЛистеПоВертикали Цикл
			Пока ТекущияПозицияПоГоризонтали <= ЧислоЭтикетокНаЛистеПоГоризонтали Цикл
				
				Строка.Присоединить(СуммаТаб);
				
				КоличествоВыведено = КоличествоВыведено + 1;
				Если КоличествоВыведено = СтруктураПечати.Количество Тогда
					Прервать;
				КонецЕсли;
				
				ТекущияПозицияПоГоризонтали = ТекущияПозицияПоГоризонтали + 1;
			КонецЦикла;
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Строка);
			ТабДокОбщийРезультат.Вывести(Строка);
			
				Если КоличествоВыведено = СтруктураПечати.Количество Тогда
				Прервать;
			КонецЕсли;
			
			Строка = Новый ТабличныйДокумент;
			Строка.ИмяПараметровПечати  = "ПАРАМЕТРЫ_ПЕЧАТИ_Строка" + СокрЛП(ИмяКомпьютера());
			Строка.КлючПараметровПечати = Строка.ИмяПараметровПечати;
			
			ТекущияПозицияПоГоризонтали = 1;
			ТекущияПозицияПоВертикали 	= ТекущияПозицияПоВертикали + 1;
			
			Если НЕ НеВыводитьРазделитель
				И ТекущияПозицияПоВертикали > ЧислоЭтикетокНаЛистеПоВертикали Тогда
				
				ТекущияПозицияПоВертикали = 1;
				ТабДокОбщийРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
			
		КонецЦикла;
		ОбъектГотов = ИСТИНА;
		
	ИначеЕсли ОбъектГотов Тогда
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
		ТабДокОбщийРезультат.Вывести(СуммаТаб);
	КонецЕсли;
	
	Если ОбъектГотов Тогда
		
		Если НЕ ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
			
			Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма)
				И ПроизвольнаяПечатнаяФорма.ИспользоватьОтступыМасштабИПринтер Тогда
				
				ОбщийМодульТекстСервер.УстановитьПараметрыПечатиДляПроизвольнойПечатнойФормы(ТабДокОбщийРезультат, ПроизвольнаяПечатнаяФорма);
				
			Иначе
				ТабДокОбщийРезультат.РазмерКолонтитулаСверху = 0;
				ТабДокОбщийРезультат.РазмерКолонтитулаСнизу  = 0;
				ТабДокОбщийРезультат.ПолеСверху 	= 0;
				ТабДокОбщийРезультат.ПолеСлева 		= 0;
				ТабДокОбщийРезультат.ПолеСнизу 		= 0;
				ТабДокОбщийРезультат.ПолеСправа 	= 0;
				ТабДокОбщийРезультат.АвтоМасштаб 	= ИСТИНА;				
				
				ИмяПринтера = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаименованиеПринтераШтрихКодов");
				
				Если ЗначениеЗаполнено(ИмяПринтера) Тогда
					ТабДокОбщийРезультат.ИмяПринтера = ИмяПринтера;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЧислоЭтикетокНаСтраницеРегулируетсяРанее Тогда
				Если (СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице) > 1 Тогда
					ТабДокОбщийРезультат.КоличествоЭкземпляров = Окр(СтруктураПечати.Количество / ЧислоЭтикетокНаСтранице);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Макет = Неопределено;
	КонецЕсли;
	
	Возврат ТабДокОбщийРезультат;
	
КонецФункции

Функция   ОбнаружитьЕдиницуНоменклатуры(Знач Номенклатура, Знач Наименование) Экспорт
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЕдиницыИзмерения.Ссылка
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ ЕдиницыИзмерения.Наименование = &Наименование
		|	И ЕдиницыИзмерения.Владелец = &Номенклатура";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Возврат ВыборкаДетальныеЗаписи.сылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	
КонецФункции // ОбнаружитьЕдиницуНоменклатуры

Функция   ОбнаружитьСериюНоменклатуры(Знач Номенклатура, 
	Знач Наименование, 
	Знач СоздаватьНовую = ЛОЖЬ) Экспорт
	
	Результат = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Ссылка
		|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ СерииНоменклатуры.Наименование = &Наименование
		|	И СерииНоменклатуры.Владелец = &Номенклатура";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.сылка;
			
		ИначеЕсли СоздаватьНовую Тогда
			
			НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			НоваяСерия.Наименование = Наименование;
			НоваяСерия.Владелец 	= Номенклатура;
			НоваяСерия.Записать();
			
			Результат = НоваяСерия.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОбнаружитьСериюНоменклатуры

Функция   ОбнаружитьСпецификациюНоменклатуры(Знач Номенклатура, Знач Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Результат = ПредопределенноеЗначение("Справочник.Спецификации.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СпецификацииТовары.Ссылка
	|ИЗ Справочник.Спецификации.Товары КАК СпецификацииТовары
	|ГДЕ СпецификацииТовары.Номенклатура = &Номенклатура
	|	И СпецификацииТовары.Ссылка.НеАктуальна = ЛОЖЬ
	|	И СпецификацииТовары.Ссылка.Дата <= &Дата
	|УПОРЯДОЧИТЬ ПО СпецификацииТовары.Ссылка.Дата УБЫВ,
	|	СпецификацииТовары.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОкруглитьТоВары(Знач Ссылка, 
	Знач Коэффициент, 
	Знач ВидЦенОкруглятьТолькоВБольшуюСторону, 
	Знач НаименованиеТаблицы = "ТОВАРЫ") Экспорт
	
	НаименованиеТаблицы = ВРег(НаименованиеТаблицы);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Документссылка = Ссылка.ссылка;
		
		ТипЗнчДокументссылка = ТипЗнч(Документссылка);
		ПеремещенияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.РасходыТовара");
		ВыполненияРабот		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументссылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументссылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		
		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл			
			
			Цена = СтрокаТовара.Цена;
			
			Если НЕ Коэффициент = 0 Тогда
				Цена = Цена * (10 * Коэффициент);	
			КонецЕсли;
			ЦенаНов = Окр(Цена);
			
			Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(Цена);
				Если НЕ ЦенаЦел = Цена Тогда
					Цена = ЦенаЦел + 1;
				КонецЕсли;
				
			Иначеесли не цена = 0 Тогда				
				Цена = окр(Цена);
				
			КонецЕсли;	
			
			Если НЕ Коэффициент = 0 Тогда
				Цена = Цена / (10 * Коэффициент);	
			КонецЕсли;
			
			СтрокаТовара.Цена = Цена;
			
			Если НаименованиеТаблицы = "ТОВАРЫ" Тогда
				Если ВыполненияРабот Тогда 	
					
					Цена = СтрокаТовара.ЦенаПлан;
					
					Если НЕ Коэффициент = 0 Тогда
						Цена = Цена * (10 * Коэффициент);	
					КонецЕсли;
					ЦенаНов = Окр(Цена);
					
					Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
						
						ЦенаЦел = цел(Цена);
						Если НЕ ЦенаЦел = Цена Тогда
							Цена = ЦенаЦел + 1;
						КонецЕсли;
						
					Иначеесли не цена = 0 Тогда
						
						Цена = окр(Цена);
						
					КонецЕсли;	
					
					Если НЕ Коэффициент = 0 Тогда
						Цена = Цена / (10 * Коэффициент);	
					КонецЕсли;
					СтрокаТовара.ЦенаПлан = Цена;
				КонецЕсли;
				
				Если РасходыТовара 
					ИЛИ ВыполненияРабот Тогда
					
					Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
						СтрокаТовара.ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, документссылка.видцен, документссылка.клиентпоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
					КонецЕсли;
					
					СтрокаТовара.СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СтрокаТовара.Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
					
					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							СтрокаТовара.ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, документссылка.видцен, документссылка.клиентпоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
						КонецЕсли;
						
						СтрокаТовара.СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
						СтрокаТовара.План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);
					КонецЕсли;
					
				ИначеЕсли ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков Тогда
					
					СтрокаТовара.Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					
				Иначеесли Инвентаризации 
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
					
					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, , , , , ДокументСсылка.Склад, ДокументСсылка.Дата); // акция ном
					Если НЕ процентскидки = 0 
						И НЕ СтрокаТовара.Цена = 0 Тогда
						
						СтрокаТовара.Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
					КонецЕсли;
					
				ИначеЕсли УстановкиЦен Тогда
					
					Если СтрокаТовара.Цена = 0 Тогда
						СтрокаТовара.Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);	
					КонецЕсли;
					СтрокаТовара.РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена; 				
					
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
			КонецЕсли;
		КонецПопытки; 		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОчиститьТоварыНаСервере(Знач Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		ДокументОбъект.Товары.Очистить();
		
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ОчиститьТоварыНаСервере

Процедура ПересчитатьТоварыНаСервере(Знач Ссылка, 
	Знач Коэффициент = 0, 
	Знач НаименованиеТаблицы = "ТОВАРЫ", 
	Знач БезДопРасчетов = ЛОЖЬ, 
	Знач ЭтоПроцентСкидки = ЛОЖЬ) Экспорт
	
	НаименованиеТаблицы = ВРег(НаименованиеТаблицы);
	БылиИзменения = ЛОЖЬ;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Документссылка = Ссылка.ссылка;
		
		ТипЗнчДокументссылка = ТипЗнч(Документссылка);
		ПеремещенияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПеремещенияТовара");
		Инвентаризации		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Инвентаризации");
		ПоступленияТовара 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ПоступленияТовара");
		РасходыТовара 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.РасходыТовара");
		Тендеры 		 	 = ТипЗнчДокументссылка = Тип("ДокументСсылка.Тендеры");
		ВыполненияРабот		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.ВыполненияРабот");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		Договора 			 = ТипЗнчДокументссылка = Тип("СправочникСсылка.Договора");
		УстановкиЦен 		 = ТипЗнчДокументссылка = Тип("ДокументСсылка.УстановкиЦен");
		ОтчетыКомиссионеров  = ТипЗнчДокументссылка = Тип("ДокументСсылка.ОтчетыКомиссионеров");
		КорректировкиИРегистрацияОстатков = ТипЗнчДокументссылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков");
		
		ДокументОбъект = Ссылка.ПолучитьОБъект();
		
		Для Каждого СтрокаТовара Из ДокументОбъект[НаименованиеТаблицы] Цикл			
			
			Если Коэффициент = 0 Тогда
				
				Если ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ РасходыТовара Тогда
					
					Если НЕ ЭтоПроцентСкидки Тогда
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли КорректировкиИРегистрацияОстатков Тогда
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ,  СтрокаТовара.Количество, , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				ИначеЕсли Инвентаризации Тогда
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ, , , , , Ссылка);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				ИначеЕсли Договора Тогда				
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, ЛОЖЬ, , , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				ИначеЕсли УстановкиЦен Тогда
					
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, Документссылка.Дата, , , , , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.СтараяЦена = Цена Тогда
						СтрокаТовара.СтараяЦена = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				ИначеЕсли ВыполненияРабот Тогда
					Цена 		= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, СтрокаТовара.Дата, ЛОЖЬ,  СтрокаТовара.Количество, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.Цена = Цена Тогда
						СтрокаТовара.Цена = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					Цена 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(СтрокаТовара.Номенклатура, Документссылка.ВидЦен, СтрокаТовара.ДатаПлан, ЛОЖЬ,  СтрокаТовара.КоличествоПлан, Документссылка.Договор, , , Ссылка, , СтрокаТовара.ЕдиницаИзмерения);
					Если НЕ СтрокаТовара.ЦенаПлан = Цена Тогда
						СтрокаТовара.ЦенаПлан = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Не Тендеры Тогда
				Цена = СтрокаТовара.Цена * Коэффициент;
				Если НЕ СтрокаТовара.Цена = Цена Тогда
					СтрокаТовара.Цена = Цена;
					БылиИзменения = ИСТИНА;	
				КонецЕсли;
				
				Если ВыполненияРабот Тогда 	
					Цена = СтрокаТовара.ЦенаПлан * Коэффициент;
					Если НЕ СтрокаТовара.ЦенаПлан = Цена Тогда
						СтрокаТовара.ЦенаПлан = Цена;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ БезДопРасчетов Тогда
				
				Если РасходыТовара 
					ИЛИ ВыполненияРабот Тогда
					
					Если ЭтоПроцентСкидки Тогда
						Если НЕ СтрокаТовара.ПроцентСкидки = Коэффициент Тогда
							СтрокаТовара.ПроцентСкидки = Коэффициент;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
					Иначе
						
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, документссылка.видцен, документссылка.клиентпоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
							Если НЕ СтрокаТовара.ПроцентСкидки = ПроцентСкидки Тогда
								СтрокаТовара.ПроцентСкидки = ПроцентСкидки;
								БылиИзменения = ИСТИНА;	
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;
					
					СуммаБезСкидки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					Если НЕ СтрокаТовара.СуммаБезСкидки = СуммаБезСкидки Тогда
						СтрокаТовара.СуммаБезСкидки = СуммаБезСкидки;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					Сумма = СтрокаТовара.СуммаБезСкидки - (СтрокаТовара.СуммаБезСкидки / 100 * СтрокаТовара.ПроцентСкидки);
					Если НЕ СтрокаТовара.Сумма = Сумма Тогда
						СтрокаТовара.Сумма = Сумма;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
					Если ВыполненияРабот Тогда
						Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
							ПроцентСкидкиПлан = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, СтрокаТовара.количество, документссылка.видцен, документссылка.клиентпоставщик, ДокументСсылка.ВаучерСкидки, ДокументСсылка.Склад, ДокументСсылка.Дата);
							Если НЕ СтрокаТовара.ПроцентСкидкиПлан = ПроцентСкидкиПлан Тогда
								СтрокаТовара.ПроцентСкидкиПлан = ПроцентСкидкиПлан;
								БылиИзменения = ИСТИНА;	
							КонецЕсли;
						КонецЕсли;
						
						СуммаБезСкидкиПлан = СтрокаТовара.ЦенаПлан * СтрокаТовара.КоличествоПлан;
						Если НЕ СтрокаТовара.СуммаБезСкидкиПлан = СуммаБезСкидкиПлан Тогда
							СтрокаТовара.СуммаБезСкидкиПлан = СуммаБезСкидкиПлан;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
						План = СтрокаТовара.СуммаБезСкидкиПлан - (СтрокаТовара.СуммаБезСкидкиПлан / 100 * СтрокаТовара.ПроцентСкидкиПлан);
						Если НЕ СтрокаТовара.План = План Тогда
							СтрокаТовара.План = План;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ПеремещенияТовара 
					ИЛИ ПоступленияТовара
					ИЛИ КорректировкиИРегистрацияОстатков
					ИЛИ ОтчетыКомиссионеров Тогда
					
					Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					Если НЕ СтрокаТовара.Сумма = Сумма Тогда
						СтрокаТовара.Сумма = Сумма;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				Иначеесли Инвентаризации 
					И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
					
					ПроцентСкидки = ОбщийМодульСервер.ПолучитьПроцентСкидкиНаСервере(СтрокаТовара.Номенклатура, , , , , ДокументССылка.Склад, ДокументСсылка.Дата); // акция ном
					Если НЕ Процентскидки = 0 
						И НЕ СтрокаТовара.Цена = 0 Тогда
						
						Цена  = СтрокаТовара.Цена - (СтрокаТовара.Цена / 100 * ПроцентСкидки);
						
						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли УстановкиЦен Тогда
					
					Если Коэффициент = 0 Тогда
						Цена = ОбщийМодульСервер.РассчитатьНовуюЦену(СтрокаТовара.Номенклатура, СтрокаТовара.СтараяЦена, ДокументСсылка.ВидЦен, ДокументСсылка.Дата);	
						Если НЕ СтрокаТовара.Цена = Цена Тогда
							СтрокаТовара.Цена = Цена;
							БылиИзменения = ИСТИНА;	
						КонецЕсли;
					КонецЕсли;
					РазницаЦены = СтрокаТовара.Цена - СтрокаТовара.СтараяЦена; 				
					Если НЕ СтрокаТовара.РазницаЦены = РазницаЦены Тогда
						СтрокаТовара.РазницаЦены = РазницаЦены;
						БылиИзменения = ИСТИНА;	
					КонецЕсли;
					
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			Попытка 
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки, , Ссылка);
				КонецЕсли;
			КонецПопытки; 	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПечатьГарантийногоТалона(ТабДокРезультат, 
	Знач ПараметрыПечати, 
	Знач НеОчищатьТабДок = ЛОЖЬ, 
	Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ПереченьЭлементов = ПараметрыПечати.ПереченьЭлементов;
	
	Если НЕ (ПереченьЭлементов.ПечататьГарантийныйТалон 
		ИЛИ ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя 
		ИЛИ ПереченьЭлементов.ПечататьСписокРаботИсполнителя 
		ИЛИ ПереченьЭлементов.ПечататьПодвалРаботИсполнителя 
		ИЛИ ПереченьЭлементов.ПечататьКвитанцию
		ИЛИ ПереченьЭлементов.ПечататьГарантийныйТалонККвитанции
		ИЛИ ПереченьЭлементов.ПечататьПоложениеОРемонте
		ИЛИ ПереченьЭлементов.ПечататьЗаказНаряд
		ИЛИ ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта) Тогда
		
		Возврат;	
	КонецЕсли;
	
	Если НЕ НеОчищатьТабДок Тогда
		ТабДокРезультат.Очистить();	
	КонецЕсли;
	
	Если ВставлятьРазделительСтраниц Тогда
		ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТалонНапечатан 		 = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьГарантийныйТалон Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалон, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ТалонНапечатан  = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	БлокТалонаОтИсполнителя	 = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонБлокОтИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			БлокТалонаОтИсполнителя = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	СписокРаботИсполнителя = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонСписокРаботОтИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			СписокРаботИсполнителя = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ПодвалРаботИсполнителя = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонПодвалРаботИсполнителя, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПодвалРаботИсполнителя = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ПечататьКвитанцию = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьКвитанцию Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонКвитанция, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПечататьКвитанцию = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ПоложениеОРемонте = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонПоложениеОРемонте, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат   = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ПоложениеОРемонте = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ГарантийныйТалонККвитанции = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ГарантийныйТалонККвитанции, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ГарантийныйТалонККвитанции = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ЗаказНаряд = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьЗаказНаряд Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ЗаказНаряд, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ЗаказНаряд = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ТехнологическуюКартуРемонта = ЛОЖЬ;	
	Если ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта Тогда
		СсылкаНаОбъектПечати = ПараметрыПечати.Ссылка;	
		РазрядМетаданных 	 = "";
		ИмяМетаданных 		 = "";
		ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ТехнологическаяКарта, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
			
			ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
			ТехнологическуюКартуРемонта = ИСТИНА;
			
			Если НЕ ПереченьЭлементов.ЕстьПечатьПрочихСервисныхДокументов Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Ссылка = ПараметрыПечати.Ссылка;
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	Макет  = ПолучитьОбщийМакет("ГарантийныйТалон");
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Склад,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		СерияНоменклатуры,
		|		Сотрудник,
		|		Количество,
		|		Цена,
		|		План,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ВаловаяПрибыль,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот
		|ИЗ
		|	Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ
		|	ВыполненияРабот.Ссылка = &Ссылка";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Представление,
		|	РасходыТовара.МоментВремени
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка = &Ссылка";		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
	Если НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;
	
	КлиентПоставщик 	  = Неопределено;
	КлиентПоставщикСтрока = "";
	ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии");
	
	ВставлятьРазделительСтраниц = ЛОЖЬ;
	Пока Выборка.Следующий() Цикл
		
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), СокрЛП(Организация.Адрес), СокрЛП(Организация.ЮридическийАдрес));;
		НашеОКПО 	= Организация.ОКПО;
		Дата 		= Выборка.Дата;
		Сотрудник 	= Выборка.Сотрудник;
		МассивСтрок = Новый Массив;
		
		Если НЕ ЭтоВыполнениеРабот Тогда			
			КлиентПоставщик = Выборка.КлиентПоставщик;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
			
			ВыборкаТоварыИзЗапроса = Выборка.Товары.Выбрать();
			СЧ = 1;
			
			Пока ВыборкаТоварыИзЗапроса.Следующий() Цикл
				
				Если НЕ ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии 
					ИЛИ (ЗначениеЗаполнено(ВыборкаТоварыИзЗапроса.Номенклатура)
					И НЕ ВыборкаТоварыИзЗапроса.Номенклатура.ГарантийныйСрокПроизводителя = 0) Тогда
					
					ВыборкаТовары = Новый Структура;
					ВыборкаТовары.Вставить("НомерСтроки", СЧ);
					Сч = СЧ + 1 ;
					ВыборкаТовары.Вставить("Номенклатура", ВыборкаТоварыИзЗапроса.Номенклатура);
					ВыборкаТовары.Вставить("СерияНоменклатуры", ВыборкаТоварыИзЗапроса.СерияНоменклатуры);
					ВыборкаТовары.Вставить("Количество", ВыборкаТоварыИзЗапроса.Количество);
					ВыборкаТовары.Вставить("Цена", ВыборкаТоварыИзЗапроса.Цена);
					ВыборкаТовары.Вставить("Сумма", ВыборкаТоварыИзЗапроса.Сумма);
					ВыборкаТовары.Вставить("ПроцентСкидки", ВыборкаТоварыИзЗапроса.ПроцентСкидки);
					ВыборкаТовары.Вставить("СуммаБезСкидки", ВыборкаТоварыИзЗапроса.СуммаБезСкидки);
					ВыборкаТовары.Вставить("ЗаказКлиента", ВыборкаТоварыИзЗапроса.ЗаказКлиента);
					ВыборкаТовары.Вставить("Остроке", ВыборкаТоварыИзЗапроса.ОСтроке);
					ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
					ВыборкаТовары.Вставить("Производитель", ВыборкаТоварыИзЗапроса.Номенклатура.Производитель);
					
					// ЗаполнитьЗначенияСвойств(ВыборкаТовары, ВыборкаТоварыИзЗапроса);			
					
					МассивСтрок.Добавить(ВыборкаТовары);	
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			КлиентПоставщик = Выборка.Клиент;
			КлиентПоставщикСтрока = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
			Валюта 			= ОсновнаяВалюта;
			
			Если НЕ ПечататьГарантийныеОбязательстваТолькоДляТоваровСУказаннымСрокомГарантии 
				ИЛИ (ЗначениеЗаполнено(Выборка.Номенклатура)
				И НЕ Выборка.Номенклатура.ГарантийныйСрокПроизводителя = 0) Тогда
				
				ВыборкаТовары = Новый Структура;
				ВыборкаТовары.Вставить("НомерСтроки", 1);
				ВыборкаТовары.Вставить("Номенклатура", Выборка.Номенклатура);
				ВыборкаТовары.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
				ВыборкаТовары.Вставить("Количество", 1);
				ВыборкаТовары.Вставить("Цена", Выборка.ОценочнаяСтоимостьОбъектаРабот);
				ВыборкаТовары.Вставить("Сумма", Выборка.ОценочнаяСтоимостьОбъектаРабот);
				ВыборкаТовары.Вставить("ПроцентСкидки", 0);
				ВыборкаТовары.Вставить("СуммаБезСкидки", 0);
				ВыборкаТовары.Вставить("ЗаказКлиента", "");
				ВыборкаТовары.Вставить("Остроке", Выборка.Комментарий);
				ВыборкаТовары.Вставить("НеОтслеживатьОстаток", ЛОЖЬ);
				ВыборкаТовары.Вставить("Производитель", Выборка.Производитель);
				
				МассивСтрок.Добавить(ВыборкаТовары);	
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ВыборкаТовары Из МассивСтрок Цикл
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда
				
				Если НЕ ТалонНапечатан 
					И ПереченьЭлементов.ПечататьГарантийныйТалон Тогда
					
					Шапка = Макет.ПолучитьОбласть("Шапка");					
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					
					Шапка.Параметры.ОКПО = НашеОКПО;
					Шапка.Параметры.Дата = Дата;
					Шапка.Параметры.Валюта 		= Валюта;
					Шапка.Параметры.Организация = Организация;
					Шапка.Параметры.НашЮридическийАдрес = НашЮридическийАдрес;
					
					ПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(ВыборкаТовары.Номенклатура, , КлиентПоставщик);
					Шапка.Параметры.ПолноеНаименование = ПолноеНаименование + ?(ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) и ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.Производитель), " " + ВыборкаТовары.Номенклатура.Производитель, "");
					
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);	
				КонецЕсли;
				
				Если НЕ БлокТалонаОтИсполнителя
					И ПереченьЭлементов.ПечататьБлокТалонаОтИсполнителя Тогда
					
					Шапка = Макет.ПолучитьОбласть("ПриемПоГарантии");		
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);	
				КонецЕсли;
				
				Если НЕ СписокРаботИсполнителя
					И ЭтоВыполнениеРабот 
					И ПереченьЭлементов.ПечататьСписокРаботИсполнителя Тогда
					
					Шапка = Макет.ПолучитьОбласть("ШапкаРабот");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);	
					ВыборкаРаботы = Выборка.Товары.Выбрать();
					Пока ВыборкаРаботы.Следующий() Цикл
						Строка = Макет.ПолучитьОбласть("СтрокаРабот");
						Строка.Параметры.Заполнить(ВыборкаРаботы);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Строка);
						ТабДокРезультат.Вывести(Строка);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ПодвалРаботИсполнителя
					И ПереченьЭлементов.ПечататьПодвалРаботИсполнителя Тогда
					
					Шапка = Макет.ПолучитьОбласть("ПодвалРабот");                   	
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);	
				КонецЕсли;
				
				Если НЕ ПечататьКвитанцию
					И ПереченьЭлементов.ПечататьКвитанцию Тогда
					
					Шапка = Макет.ПолучитьОбласть("Квитанция");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					Шапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					Шапка.Параметры.Дата        = Выборка.Дата;
					Шапка.Параметры.Номер       = Выборка.Номер;
					Шапка.Параметры.Сотрудник	= Сотрудник;
					Шапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати 	 = ТекстВШапкеДокументовПриПечати;
					Шапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);					
				КонецЕсли;
				
				Если НЕ ГарантийныйТалонККвитанции
					И ПереченьЭлементов.ПечататьГарантийныйТалонККвитанции Тогда
					
					Шапка = Макет.ПолучитьОбласть("ГарантийныйТалонККвитанции");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					Шапка.Параметры.Организация = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация);
					Шапка.Параметры.Дата        = Выборка.Дата;
					Шапка.Параметры.Номер       = Выборка.Номер;
					Шапка.Параметры.КлиентПоставщик = КлиентПоставщик;
					Шапка.Параметры.Исполнитель		= Сотрудник;
					Шапка.Параметры.ТекстВШапкеДокументовПриПечати   = ТекстВШапкеДокументовПриПечати;
					Шапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);					
				КонецЕсли;
				
				Если НЕ ПоложениеОРемонте
					И ПереченьЭлементов.ПечататьПоложениеОРемонте Тогда
					
					Шапка = Макет.ПолучитьОбласть("Положение");
					Шапка.Параметры.Заполнить(ВыборкаТовары);
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
					ТабДокРезультат.Вывести(Шапка);	
				КонецЕсли;
				
				ВставлятьРазделительСтраниц = ИСТИНА;	
			КонецЕсли;
		КонецЦикла;		
		
		Если НЕ ЗаказНаряд
			И ПереченьЭлементов.ПечататьЗаказНаряд Тогда
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			Шапка = Макет.ПолучитьОбласть("ЗаказНаряд");
			
			Шапка.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				
				Шапка.Параметры.АдресПодразделения 	  = Подразделение.Адрес;
				Шапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;
			Шапка.Параметры.ОтКого = "";
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Шапка.Параметры.Контрагент 			= КлиентПоставщик;
				Шапка.Параметры.ТелефоныКонтрагента = ОбщийМодульСервер.ПолучитьТекстТелефонов(КлиентПоставщик);
				Шапка.Параметры.АдресКонтрагента 	= ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;		
			
			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					Шапка.Параметры.Номенклатура 		 = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				
			ИначеЕсли НЕ Выборка.Ссылка.Товары.Количество() = 0 Тогда
				Номенклатура = Выборка.Ссылка.Товары[0].Номенклатура;	
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура 		 = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ТабДокРезультат.Вывести(Шапка);
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
		
		Если НЕ ТехнологическуюКартуРемонта
			И ПереченьЭлементов.ПечататьТехнологическуюКартуРемонта Тогда
			
			Если ВставлятьРазделительСтраниц Тогда
				ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			Макет = ПолучитьОбщийМакет("ГарантийныйТалон");
			Шапка = Макет.ПолучитьОбласть("ТехнологическаяКартаРемонта");
			
			Шапка.Параметры.Заполнить(Выборка);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Сотрудник, Выборка.Дата);
				
				Шапка.Параметры.АдресПодразделения 	  = Подразделение.Адрес;
				Шапка.Параметры.ТелефоныПодразделения = Подразделение.Телефон;
			КонецЕсли;
			Шапка.Параметры.ОтКого = "";
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Шапка.Параметры.Контрагент 			= КлиентПоставщик;
				Шапка.Параметры.ТелефоныКонтрагента = КлиентПоставщик.Телефон;
				Шапка.Параметры.АдресКонтрагента 	= ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес);
			КонецЕсли;		
			
			Если ЭтоВыполнениеРабот Тогда
				Номенклатура = Выборка.Номенклатура;
				Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
					Шапка.Параметры.Номенклатура = Выборка.ОбъектКлиента;
				Иначе
					Шапка.Параметры.Номенклатура = Номенклатура;
					Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
					Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
				ТабДокРезультат.Вывести(Шапка);
				
			Иначе
				ВыборкаТовары = Выборка.Товары.Выбрать();
				Пока ВыборкаТовары.Следующий() Цикл
					
					Номенклатура = ВыборкаТовары.Номенклатура;
					Если ЗначениеЗаполнено(Номенклатура) Тогда
						Шапка.Параметры.Номенклатура = Номенклатура;
						Шапка.Параметры.Производитель 		 = Номенклатура.Производитель;
						Шапка.Параметры.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;						
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
						ТабДокРезультат.Вывести(Шапка);					
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ВставлятьРазделительСтраниц = ИСТИНА;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПечататьСвоюПечатнуюФорму(ТабДокРезультат, Знач СсылкаНаОбъектПечати, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ, Знач ПроизвольнаяПечатнаяФорма) Экспорт	
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	
	РазрядМетаданных = ""; ИмяМетаданных = "";
	// ниже оппределяются именно метаданные
	ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.АктВыполненныхРабот, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
	
	Если ВставлятьРазделительСтраниц Тогда
		ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
	
КонецПроцедуры

Процедура ПечатьАктаВыполненныхРабот(ТабДокРезультат, Знач СсылкаНаОбъектПечати, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	
	РазрядМетаданных = ""; ИмяМетаданных = "";
	ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.АктВыполненныхРабот, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
	
	Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда			
		Если ВставлятьРазделительСтраниц Тогда
			ТабДокРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабДокРезультат = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ТабДокРезультат, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
		
		Возврат;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ" + СокрЛП(ИмяКомпьютера());
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	Шапка = Макет.ПолучитьОбласть("РазделительШапка");
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
	ТабДок.Вывести(Шапка);
	ТабДок.Область().СоздатьФорматСтрок();
	
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.СкладДляОбъектаВыполненияРабот,
		|	ВыполненияРабот.ДатаПоступленияОбъектаРаботНаНашСклад,
		|	ВыполненияРабот.КомментарийПриПоступленииОбъектаРабот,
		|	ВыполненияРабот.ДатаВыдачиОбъектаРаботКлиентуОбратно,
		|	ВыполненияРабот.КомментарийПриВыдачеОбъектаРабот,
		|	ВыполненияРабот.ОценочнаяСтоимостьОбъектаРабот,
		|	ВыполненияРабот.Сотрудник,
		|	ВыполненияРабот.ОбъектКлиента,
		|	ВыполненияРабот.Валюта,
		|	ВыполненияРабот.ТипРаботы,
		|	ВыполненияРабот.ОрганизацияПродавец,
		|	ВыполненияРабот.ДатаПродажи,
		|	ВыполненияРабот.Комплектность,
		|	ВыполненияРабот.ВнешнийВид,
		|	ВыполненияРабот.ПричинаЦельРабот,
		|	ВыполненияРабот.Комментарий,
		|	ВыполненияРабот.СпособДоставки,
		|	ВыполненияРабот.ТалонТрек,
		|	ВыполненияРабот.КлиентОповещен,
		|	ВыполненияРабот.ТоварОтправлен,
		|	ВыполненияРабот.ДатаОтправки,
		|	ВыполненияРабот.ДатаОповещения,
		|	ВыполненияРабот.ДнейОтсрочки,
		|	ВыполненияРабот.НеПроводить,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ВаловаяПрибыль,
		|		ВаловаяПрибыльПлан,
		|		Валюта,
		|		ВалютаПлан,
		|		Дата,
		|		ДатаПлан,
		|		Количество,
		|		КоличествоПлан,
		|		Курс,
		|		КурсПлан,
		|		Номенклатура,
		|		ОСтроке,
		|		План,
		|		ПроцентСкидки,
		|		ПроцентСкидкиПлан,
		|		СерияНоменклатуры,
		|		Склад,
		|		Сотрудник,
		|		Сумма,
		|		СуммаБезСкидки,
		|		СуммаБезСкидкиПлан,
		|		Цена,
		|		ЦенаПлан,
		|		ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ
		|	ВыполненияРабот.Ссылка = &Ссылка";
		
		КлиентПоставщик = СсылкаНаОбъектПечати.Клиент;
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик КАК Клиент,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета,
		|	"""" КАК ТипРаботы,
		|	"""" КАК ОбъектКлиента,
		|	"""" КАК Номенклатура
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка = &Ссылка";
		
		КлиентПоставщик = СсылкаНаОбъектПечати.КлиентПоставщик;		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", СсылкаНаОбъектПечати);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьРеквизитАртикулНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры");
	ПечататьАртикул = ИспользоватьРеквизитАртикулНоменклатуры И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВРасходномДокументеАртикулВНаименованииЧерезЗапятую");
	ОсновнаяВалюта  = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	Если ЭтоВыполнениеРабот Тогда				
		ТипРаботы = Выборка.ТипРаботы;
	Иначе
		ТипРаботы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТипРаботПоУмолчанию");
	КонецЕсли;
	
	ЯзыкДокументов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЯзыкПечатныхФорм");
	Если ЗначениеЗаполнено(КлиентПоставщик)
		И ЗначениеЗаполнено(КлиентПоставщик.ЯзыкДокументов) Тогда
		
		ЯзыкДокументов = КлиентПоставщик.ЯзыкДокументов;
		Если НЕ ЗначениеЗаполнено(ЯзыкДокументов) Тогда
			ЯзыкДокументов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы2");
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(КлиентПоставщик);
	
	Шапка = Макет.ПолучитьОбласть("ШапкаАкта");
	ОбъектРабот 	= Макет.ПолучитьОбласть("ОбъектРабот");
	ЗаголовокРабот  = Макет.ПолучитьОбласть("ЗаголовокРабот");
	СтрокаРабот 	= Макет.ПолучитьОбласть("СтрокаРабот");
	ПодвалРабот 	= Макет.ПолучитьОбласть("ПодвалРабот");
	
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаВидЦен = Выборка.ВидЦен;
		Если ЗначениеЗаполнено(ВыборкаВидЦен) 
			И ЗначениеЗаполнено(ВыборкаВидЦен.ВалютаЦены) Тогда
			
			ВалютаЦены = ВыборкаВидЦен.ВалютаЦены;
		Иначе
			ВалютаЦены = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");				
		КонецЕсли;
		
		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.ПриемПередача = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("приема передачи выполненных работ (услуг)") + " № " + Выборка.Номер + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			Шапка.Параметры.Директор = Выборка.Организация.Руководитель;
		КонецЕсли;
		
		КлиентПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов);
		
		Шапка.Параметры.Клиент 	  = КлиентПоставщик;
		Шапка.Параметры.ТипРаботы = ТипРаботы;
		
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		
		Если ЗначениеЗаполнено(Выборка.ОбъектКлиента) Тогда
			ОбъектРабот.ОбъектКлиента = Выборка.ОбъектКлиента;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбъектРабот);
			ТабДок.Вывести(ОбъектРабот, Выборка.Уровень());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			ОбъектРабот.ОбъектКлиента = Выборка.Номенклатура;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбъектРабот);
			ТабДок.Вывести(ОбъектРабот, Выборка.Уровень());
		КонецЕсли;
		
		Количество = 0;
		Сумма 	   = 0;
		
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЗаголовокРабот);
		ТабДок.Вывести(ЗаголовокРабот);
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Номенклатура = ВыборкаТовары.Номенклатура;
			Артикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Номенклатура, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ЯзыкДокументов, КлиентПоставщик, ИСТИНА);
			ДополнениеКНаименованиюНоменклатуры = ?(ПечататьАртикул И ЗначениеЗаполнено(Артикул), ", " + Артикул, "");			
			
			СтрокаРабот.Параметры.Заполнить(ВыборкаТовары);
			СтрокаРабот.Параметры.НоменклатураПредставление = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, ЯзыкДокументов, КлиентПоставщик) + ДополнениеКНаименованиюНоменклатуры;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаРабот);
			ТабДок.Вывести(СтрокаРабот, ВыборкаТовары.Уровень());
			
			Количество = Количество + ВыборкаТовары.Количество;
			Сумма = Сумма + ВыборкаТовары.Сумма;
		КонецЦикла;
		
		ПодвалРабот.Параметры.Заполнить(Выборка);
		ПодвалРабот.Параметры.Количество = Количество;
		ПодвалРабот.Параметры.Сумма 	 = Сумма;
		ПодвалРабот.Параметры.СуммаПрописью = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, ВалютаЦены, ЯзыкДокументов);
		
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ПодвалРабот);
		ТабДок.Вывести(ПодвалРабот);
		
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;	
	
	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ТабДок.Область().СоздатьФорматСтрок();	
	КонецЕсли;
	
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТабДок);
	ТабДокРезультат.Вывести(ТабДок);
	
КонецПроцедуры

Процедура ПечатьНалоговойНакладной(ТабДокРезультат, Знач ПараметрыПечати, Знач ВставлятьРазделительСтраниц = ЛОЖЬ) Экспорт
	
	ВставлятьРазделительСтраницНаСтарте = ВставлятьРазделительСтраниц;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НАЛНАКЛ" + СокрЛП(ИмяКомпьютера());
	ТабДок.КлючПараметровПечати = ТабДок.ИмяПараметровПечати;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
	Шапка = Макет.ПолучитьОбласть("РазделительШапка");
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
	ТабДок.Вывести(Шапка);
	ТабДок.Область().СоздатьФорматСтрок();
	
	Ссылка = ПараметрыПечати.Ссылка;
	ПереченьЭлементов = ПараметрыПечати.ПереченьЭлементов;
	
	ЭтоВыполнениеРабот = ЛОЖЬ;
	ПараметрыПечати.Свойство("ЭтоВыполнениеРабот", ЭтоВыполнениеРабот);
	Если ЭтоВыполнениеРабот = Неопределено Тогда
		ЭтоВыполнениеРабот = ЛОЖЬ;
	КонецЕсли;
	
	ПечататьКопию = ЛОЖЬ;
	Если НЕ ПараметрыПечати.Свойство("ПечататьКопию", ПечататьКопию) Тогда
		ПечататьКопию = ЛОЖЬ;
	КонецЕсли;
	
	ПечататьОригинал = ЛОЖЬ;
	Если НЕ ПараметрыПечати.Свойство("ПечататьОригинал", ПечататьОригинал) Тогда
		ПечататьОригинал = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ ПечататьКопию
		И НЕ ПечататьОригинал Тогда
		
		ПечататьОригинал = ИСТИНА;
	КонецЕсли;
	
	ПоследнийНомерНалоговойНакладной = ПереченьЭлементов.ПоследнийНомерНалоговойНакладной;
	
	Макет = ПолучитьОбщийМакет("РегламентированныеДокументы");
	Запрос = Новый Запрос;
	
	Если ЭтоВыполнениеРабот Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыполненияРабот.Ссылка,
		|	ВыполненияРабот.Дата,
		|	ВыполненияРабот.Организация,
		|	ВыполненияРабот.ВерсияДанных,
		|	ВыполненияРабот.ПометкаУдаления,
		|	ВыполненияРабот.Номер,
		|	ВыполненияРабот.Проведен,
		|	ВыполненияРабот.Клиент,
		|	ВыполненияРабот.Договор,
		|	ВыполненияРабот.ЗаказКлиента,
		|	ВыполненияРабот.ВидЦен,
		|	ВыполненияРабот.Результат,
		|	ВыполненияРабот.ХранилищеДенег,
		|	ВыполненияРабот.ДатаПлан,
		|	ВыполненияРабот.РезультатПлан,
		|	ВыполненияРабот.Актуален,
		|	ВыполненияРабот.БезПлана,
		|	ВыполненияРабот.Номенклатура,
		|	ВыполненияРабот.СерияНоменклатуры,
		|	ВыполненияРабот.Комментарий,
		|	ВыполненияРабот.Ответственный,
		|	ВыполненияРабот.ДатаСоздания,
		|	ВыполненияРабот.ДатаРедакции,
		|	ВыполненияРабот.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Склад,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		Номенклатура КАК Номенклатура,
		|		СерияНоменклатуры,
		|		Сотрудник,
		|		Количество,
		|		Цена,
		|		План,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ВаловаяПрибыль,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		ЕдиницаИзмерения
		|	),
		|	ВыполненияРабот.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Расходы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаПлан,
		|		Дата,
		|		Поставщик,
		|		Статья,
		|		План,
		|		Сумма,
		|		Валюта,
		|		Курс,
		|		ХранилищеДенег,
		|		ФормаОплаты,
		|		Договор,
		|		Сотрудник,
		|		ОСтроке
		|	),
		|	ВыполненияРабот.Представление,
		|	ВыполненияРабот.МоментВремени,
		|	ВыполненияРабот.Номенклатура.Производитель КАК Производитель,
		|	ВыполненияРабот.НомерСчета,
		|	ВыполненияРабот.ДатаСчета,
		|	ВыполненияРабот.Валюта
		|ИЗ
		|	Документ.ВыполненияРабот КАК ВыполненияРабот
		|ГДЕ
		|	ВыполненияРабот.Ссылка = &Ссылка";
		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Ссылка,
		|	РасходыТовара.Дата,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура КАК СодержаниеВыполненнойРаботы,
		|		СерияНоменклатуры,
		|		Количество,
		|		Цена,
		|		Сумма,
		|		ПроцентСкидки,
		|		СуммаБезСкидки,
		|		ЗаказКлиента,
		|		ОСтроке,
		|		Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
		|		Номенклатура.Производитель КАК Производитель,
		|		ЕдиницаИзмерения
		|	),
		|	РасходыТовара.ВерсияДанных,
		|	РасходыТовара.ПометкаУдаления,
		|	РасходыТовара.Номер,
		|	РасходыТовара.Проведен,
		|	РасходыТовара.Склад,
		|	РасходыТовара.КлиентПоставщик,
		|	РасходыТовара.ПоступилоДенег,
		|	РасходыТовара.ВидЦен,
		|	РасходыТовара.Курс,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.ВидДокумента,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ТовараВКоличестве,
		|	РасходыТовара.ПартияПриобретения,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.ЗаказКлиента,
		|	РасходыТовара.ЭтоЗаказ,
		|	РасходыТовара.ЗаказСогласован,
		|	РасходыТовара.ЗаказОплачен,
		|	РасходыТовара.ЗаказДатаПлана,
		|	РасходыТовара.ЗаказДатаФакта,
		|	РасходыТовара.ЗаказНомерПриРегистрации,
		|	РасходыТовара.Сотрудник,
		|	РасходыТовара.Ответственный,
		|	РасходыТовара.ДатаСоздания,
		|	РасходыТовара.ДатаРедакции,
		|	РасходыТовара.ПланОплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Дата,
		|		ФормаОплаты,
		|		ХранилищеДенег,
		|		Сумма,
		|		ОСтроке
		|	),
		|	РасходыТовара.Представление,
		|	РасходыТовара.МоментВремени,
		|	РасходыТовара.НомерСчета,
		|	РасходыТовара.ДатаСчета
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
	
	СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
	Если НЕ параметрысеанса.ВестиУчетСобственныхЮридическихЛицПС
		ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
	Иначе
		ТекстВШапкеДокументовПриПечати = "";
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл		
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Валюта = ?(ЗначениеЗаполнено(Выборка.Валюта), Выборка.Валюта, ОсновнаяВалюта);
		Организация = ?(ЗначениеЗаполнено(Выборка.Организация), Выборка.Организация, ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Организации.ОсновноеПредприятие"));
		ПредставлениеОрганизации = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(организация);		
		НашЮридическийАдрес = ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес);
		НашеОКПО = Организация.ОКПО;
		Дата = Выборка.Дата;
		
		Макет2014 = Дата >= Дата(2014, 3, 1) И Дата < Дата(2014, 12, 1);
		Макет2014_12 = Дата >= Дата(2014, 12, 1) И Дата < Дата(2015, 1, 1);
		Макет2015 = Дата >= Дата(2015, 1, 1);
		
		Если НЕ ЭтоВыполнениеРабот Тогда
			Сотрудник = Выборка.Сотрудник;
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.КлиентПоставщик);
			КлиентПоставщик = Выборка.КлиентПоставщик;
		Иначе
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Выборка.Клиент);
			КлиентПоставщик = Выборка.Клиент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			Сотрудник = Организация.Сотрудник;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) Тогда
			КлиентПоставщик = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо");
			КлиентПоставщикНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик);
		КонецЕсли;
		
		ПараметрыШаблонаПечати = Новый Структура;
		
		ДатаДокумента = Формат(Выборка.Дата, "ДФ=ддММгггг");
		ПараметрыШаблонаПечати.Вставить("Д1", Сред(ДатаДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Д2", Сред(ДатаДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Д3", Сред(ДатаДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Д4", Сред(ДатаДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Д5", Сред(ДатаДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Д6", Сред(ДатаДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Д7", Сред(ДатаДокумента, 7, 1));
		ПараметрыШаблонаПечати.Вставить("Д8", Сред(ДатаДокумента, 8, 1));
		
		Если ПоследнийНомерНалоговойНакладной = 0 Тогда
			НомерДокумента = СокрЛП(Организация.ПоследнийНомерНалоговойНакладной) + 1;
			Попытка
				ОрганизацияОбъект = Организация.ПолучитьОбъект();
				ОрганизацияОбъект.ПоследнийНомерНалоговойНакладной = НомерДокумента;
				ОрганизацияОбъект.Записать();
			Исключение
			КонецПопытки;
		Иначе
			НомерДокумента = ПоследнийНомерНалоговойНакладной;
		КонецЕсли;
		
		НомерДокумента = Прав("       " + НомерДокумента, 7);
		ПараметрыШаблонаПечати.Вставить("Н1", Сред(НомерДокумента, 1, 1));
		ПараметрыШаблонаПечати.Вставить("Н2", Сред(НомерДокумента, 2, 1));
		ПараметрыШаблонаПечати.Вставить("Н3", Сред(НомерДокумента, 3, 1));
		ПараметрыШаблонаПечати.Вставить("Н4", Сред(НомерДокумента, 4, 1));
		ПараметрыШаблонаПечати.Вставить("Н5", Сред(НомерДокумента, 5, 1));
		ПараметрыШаблонаПечати.Вставить("Н6", Сред(НомерДокумента, 6, 1));
		ПараметрыШаблонаПечати.Вставить("Н7", Сред(НомерДокумента, 7, 1));
		
		ПараметрыШаблонаПечати.Вставить("Организация", Организация);
		ПараметрыШаблонаПечати.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщик", КлиентПоставщик);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикНаименование", КлиентПоставщикНаименование);
		
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(Организация.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("с1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("с2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("с3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("с4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("с5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("с6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("с7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("с8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("с9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		
		НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость = СокрЛП(КлиентПоставщик.НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость) + "            ";
		ПараметрыШаблонаПечати.Вставить("м1", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 1, 1));
		ПараметрыШаблонаПечати.Вставить("м2", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 2, 1));
		ПараметрыШаблонаПечати.Вставить("м3", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 3, 1));
		ПараметрыШаблонаПечати.Вставить("м4", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 4, 1));
		ПараметрыШаблонаПечати.Вставить("м5", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 5, 1));
		ПараметрыШаблонаПечати.Вставить("м6", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 6, 1));
		ПараметрыШаблонаПечати.Вставить("м7", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 7, 1));
		ПараметрыШаблонаПечати.Вставить("м8", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 8, 1));
		ПараметрыШаблонаПечати.Вставить("м9", Сред(НомерСвидетельстваПлательщикаНалогаНаДобавочнуюСтоимость, 9, 1));
		
		ОКПО = СокрЛП(Организация.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("и1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("и2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("и3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("и4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("и5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("и6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("и7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("и8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("и9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("и10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("и11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("и12", Сред(ОКПО, 12, 1));
		
		ОКПО = СокрЛП(КлиентПоставщик.ОКПО) + "            ";
		ПараметрыШаблонаПечати.Вставить("к1", Сред(ОКПО, 1, 1));
		ПараметрыШаблонаПечати.Вставить("к2", Сред(ОКПО, 2, 1));
		ПараметрыШаблонаПечати.Вставить("к3", Сред(ОКПО, 3, 1));
		ПараметрыШаблонаПечати.Вставить("к4", Сред(ОКПО, 4, 1));
		ПараметрыШаблонаПечати.Вставить("к5", Сред(ОКПО, 5, 1));
		ПараметрыШаблонаПечати.Вставить("к6", Сред(ОКПО, 6, 1));
		ПараметрыШаблонаПечати.Вставить("к7", Сред(ОКПО, 7, 1));
		ПараметрыШаблонаПечати.Вставить("к8", Сред(ОКПО, 8, 1));
		ПараметрыШаблонаПечати.Вставить("к9", Сред(ОКПО, 9, 1));
		ПараметрыШаблонаПечати.Вставить("к10", Сред(ОКПО, 10, 1));
		ПараметрыШаблонаПечати.Вставить("к11", Сред(ОКПО, 11, 1));
		ПараметрыШаблонаПечати.Вставить("к12", Сред(ОКПО, 12, 1));
		
		ПараметрыШаблонаПечати.Вставить("ОрганизацияАдрес", ?(ПустаяСтрока(Организация.ЮридическийАдрес), Организация.Адрес, Организация.ЮридическийАдрес));
		ПараметрыШаблонаПечати.Вставить("КлиентПоставщикАдрес", ?(ПустаяСтрока(КлиентПоставщик.ЮридическийАдрес), КлиентПоставщик.Адрес, КлиентПоставщик.ЮридическийАдрес));
		
		Телефон = СокрЛП(Организация.Телефон) + "          ";
		Телефон = ОбщийМодульСервер.УбратьНечисловыеСимволы(Телефон, "", ЛОЖЬ);
		
		ПараметрыШаблонаПечати.Вставить("т1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("т2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("т3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("т4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("т5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("т6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("т7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("т8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("т9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("т10", Сред(Телефон, 10, 1));
		
		Телефон = СокрЛП(КлиентПоставщик.Телефон) + "          ";
		Телефон = ОбщийМодульСервер.УбратьНечисловыеСимволы(Телефон, "", ЛОЖЬ);
		
		ПараметрыШаблонаПечати.Вставить("ь1", Сред(Телефон, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ь2", Сред(Телефон, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ь3", Сред(Телефон, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ь4", Сред(Телефон, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ь5", Сред(Телефон, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ь6", Сред(Телефон, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ь7", Сред(Телефон, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ь8", Сред(Телефон, 8, 1));
		ПараметрыШаблонаПечати.Вставить("ь9", Сред(Телефон, 9, 1));
		ПараметрыШаблонаПечати.Вставить("ь10", Сред(Телефон, 10, 1));
		
		Договор = Выборка.Договор;
		Если ЗначениеЗаполнено(Договор) Тогда			
			НомерДоговора = Договор.НомерДоговора;
			ДатаЗаключения = Формат(Договор.ДатаЗаключения, "ДФ=ддММгггг");
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Договор.ФормаВзаиморасчетов);
		Иначе
			ПараметрыШаблонаПечати.Вставить("ФормаВзаиморасчетов", Организация.ФормаВзаиморасчетовПоУмолчанию);
			НомерДоговора  = СокрЛП(Выборка.НомерСчета);
			ДатаЗаключения = Формат(Выборка.ДатаСчета, "ДФ=ддММгггг");
			Договор 	   = "Договір, рахунок-фактура " + ДатаЗаключения + " №" + НомерДоговора;
		конецесли;
		
		ПараметрыШаблонаПечати.Вставить("Договор", Договор);
		ПараметрыШаблонаПечати.Вставить("НомерДоговора", НомерДоговора);
		ПараметрыШаблонаПечати.Вставить("ДД1", Сред(ДатаЗаключения, 1, 1));
		ПараметрыШаблонаПечати.Вставить("ДД2", Сред(ДатаЗаключения, 2, 1));
		ПараметрыШаблонаПечати.Вставить("ДД3", Сред(ДатаЗаключения, 3, 1));
		ПараметрыШаблонаПечати.Вставить("ДД4", Сред(ДатаЗаключения, 4, 1));
		ПараметрыШаблонаПечати.Вставить("ДД5", Сред(ДатаЗаключения, 5, 1));
		ПараметрыШаблонаПечати.Вставить("ДД6", Сред(ДатаЗаключения, 6, 1));
		ПараметрыШаблонаПечати.Вставить("ДД7", Сред(ДатаЗаключения, 7, 1));
		ПараметрыШаблонаПечати.Вставить("ДД8", Сред(ДатаЗаключения, 8, 1));			
		
		НалНакл = Новый ТабличныйДокумент;
		НалНакл.ИмяПараметровПечати = "НАЛ_НАКЛ_УКР" + СокрЛП(ИмяКомпьютера());
		НалНакл.КлючПараметровПечати = НалНакл.ИмяПараметровПечати;
		
		Шапка = Макет.ПолучитьОбласть("Пробел");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);
		
		Шапка = ?(Макет2014 ИЛИ Макет2014_12, Макет.ПолучитьОбласть("Заголовок14"), Макет.ПолучитьОбласть("Заголовок"));	
		Шапка.Параметры.Заполнить(ПараметрыШаблонаПечати);
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);		
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка15_1");
		ИначеЕсли Макет2014 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка14");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("Шапка15");
		Иначе
			Шапка = Макет.ПолучитьОбласть("Шапка");
		КонецЕсли;
		
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);		
		
		НДС   = 0;
		НДС7  = 0;
		Всего = 0;
		ВсегоСНДС = 0;
		ИтогСуммаСНДС20 = 0;
		ИтогСуммаСНДС7  = 0;
		СтавкаНДС = Организация.СтавкаНДС;
		
		ВыборкаТовары = Выборка.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Номенклатура = ВыборкаТовары.Номенклатура;
			Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму");
			КонецЕсли;
			
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("РазделI15_1");	
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("РазделI15");	
			Иначе
				Шапка = Макет.ПолучитьОбласть("РазделI");	
			КонецЕсли;
			Шапка.Параметры.Дата = Выборка.Дата;
			Шапка.Параметры.Номенклатура = Номенклатура;
			Шапка.Параметры.НоменклатураПолноеНаименование = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Номенклатура, , КлиентПоставщик);
			Шапка.Параметры.КодУКТВЭД = Номенклатура.КодУКТВЭД;
			
			КодЕдиницыИзмерения = "";
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
				ЕдиницаИзмеренияНоменклатуры = ВыборкаТовары.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(ЕдиницаИзмеренияНоменклатуры) Тогда
					ЕдиницаИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры);
					КодЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияНоменклатуры.КодЕдиницыПоКлассификатору);
					
					Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
						Если ВРег(Лев(ЕдиницаИзмерения, 1)) = "Ш" Тогда
							КодЕдиницыИзмерения = "2009";
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "К" Тогда
							КодЕдиницыИзмерения = "0301";						
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "М" Тогда
							КодЕдиницыИзмерения = "0101";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 1)) = "Л" Тогда
							КодЕдиницыИзмерения = "0138";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 2)) = "УП" Тогда
							КодЕдиницыИзмерения = "2102";	
						ИначеЕсли ВРег(Лев(ЕдиницаИзмерения, 3)) = "УСЛ"
							ИЛИ ВРег(Лев(ЕдиницаИзмерения, 4)) = "ПОСЛ" Тогда
							КодЕдиницыИзмерения = "2454";
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ЕдиницаИзмерения) Тогда
				ЕдиницаИзмерения = "шт.";
			КонецЕсли;
			Если ПустаяСтрока(КодЕдиницыИзмерения) Тогда
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;			
			
			Если НЕ ВыборкаТовары.НеОтслеживатьОстаток Тогда
				ЕдиницаИзмерения = "шт.";
				КодЕдиницыИзмерения = "2009";
			Иначе
				ЕдиницаИзмерения = "послуга";
				КодЕдиницыИзмерения = "2009";
			КонецЕсли;
			
			Если КодЕдиницыИзмерения = "2454" Тогда
				ЕдиницаИзмерения = "грн.";
			КонецЕсли;
			
			Шапка.Параметры.ЕдИзм = ЕдиницаИзмерения;
			
			Количество = ?(ВыборкаТовары.Количество = 0, 1, ВыборкаТовары.Количество);
			Шапка.Параметры.Количество = Количество;
			Сумма = ВыборкаТовары.Сумма;
			ВсегоСНДС = ВсегоСНДС + Сумма;
			СтавкаНДС = ?(ЗначениеЗаполнено(Номенклатура.СтавкаНДС), Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
			СуммаБезНДС = Сумма - Сумма * (СтавкаНДС / 100);
			НДС = НДС + (Сумма - СуммаБезНДС);
			
			Если Макет2014_12
				ИЛИ Макет2015 Тогда
				
				Если Макет2015 Тогда
					Шапка.Параметры.ЕдиницаИзмеренияКод = КодЕдиницыИзмерения; 
				КонецЕсли;
				
				Если СтавкаНДС = 7 Тогда
					ИтогСуммаСНДС7  = ИтогСуммаСНДС7 + СуммаБезНДС;
					Шапка.Параметры.Сумма20 = 0;
					Шапка.Параметры.Сумма7  = СуммаБезНДС;
				Иначе
					ИтогСуммаСНДС20 = ИтогСуммаСНДС20 + СуммаБезНДС;
					Шапка.Параметры.Сумма20 = СуммаБезНДС;
					Шапка.Параметры.Сумма7  = 0;
				КонецЕсли;
			Иначе
				Шапка.Параметры.СуммаБезНДС = СуммаБезНДС;	
			КонецЕсли;
			
			Шапка.Параметры.ЦенаБезНДС  = СуммаБезНДС / Количество;
			Всего = Всего + СуммаБезНДС;
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			НалНакл.Вывести(Шапка);			
		КонецЦикла;
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI15_1");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI15");
		Иначе
			Шапка = Макет.ПолучитьОбласть("ИтогРазделI");
		КонецЕсли;
		Шапка.Параметры.Всего = Всего;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("ВозврТара15_1");
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("ВозврТара15");	
		Иначе
			Шапка = Макет.ПолучитьОбласть("ВозврТара");	
		КонецЕсли;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("итоги15_1");	
			Шапка.Параметры.ИтогНДС20			= НДС;
			Шапка.Параметры.ИтогНДС7			= НДС7;
			Шапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			Шапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;					
		ИначеЕсли Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("итоги15");	
			Шапка.Параметры.ИтогНДС20			= НДС;
			Шапка.Параметры.ИтогНДС7			= НДС7;
			Шапка.Параметры.ИтогСуммаСНДС20		= ИтогСуммаСНДС20;
			Шапка.Параметры.ИтогСуммаСНДС7		= ИтогСуммаСНДС7;					
		Иначе
			Шапка = Макет.ПолучитьОбласть("итоги");	
		КонецЕсли;
		Шапка.Параметры.НДС = НДС + НДС7;
		Шапка.Параметры.ВсегоСНДС = ВсегоСНДС;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);	
		
		Если Макет2015 Тогда
			Шапка = Макет.ПолучитьОбласть("Подвал15_1");
		ИначеЕсли Макет2014 ИЛИ Макет2014_12 Тогда
			Шапка = Макет.ПолучитьОбласть("Подвал14");
		Иначе
			Шапка = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		Шапка.Параметры.Сотрудник = Сотрудник;
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		НалНакл.Вывести(Шапка);	
		
		Если ПечататьОригинал Тогда
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал15_1");
			ИначеЕсли Макет2014 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал14");
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("Оригинал15");
			Иначе
				Шапка = Макет.ПолучитьОбласть("Оригинал");
			КонецЕсли;
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ТабДок.Вывести(Шапка);		
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(НалНакл);
			ТабДок.Вывести(НалНакл);
			
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ПечататьКопию Тогда
			Если Макет2015 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия15_1");
			ИначеЕсли Макет2014 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия14");
			ИначеЕсли Макет2014_12 Тогда
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия15");
			Иначе
				Шапка = Макет.ПолучитьОбласть("ПерваяКопия");
			КонецЕсли;
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ТабДок.Вывести(Шапка);		
			
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(НалНакл);
			ТабДок.Вывести(НалНакл);
		КонецЕсли;
		
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;
	
	Если ВставлятьРазделительСтраницНаСтарте Тогда
		ТабДок.Область().СоздатьФорматСтрок();	
	КонецЕсли;
	
	ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ТабДок);
	ТабДокРезультат.Вывести(ТабДок);
	
КонецПроцедуры

Функция   ПолучитьГруппуНоменклатурыПоНаименованию(Знач Наименование, НеСоздавать = ЛОЖЬ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ЭтоГруппа = ИСТИНА";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		результат = ВыборкаДетальныеЗаписи.ссылка;
		
	ИначеЕсли НеСоздавать Тогда
		результат = Неопределено;
		
	Иначе		
		результатОбъект = Справочники.Номенклатура.СоздатьГруппу();
		результатОбъект.Наименование = Наименование;
		результатОбъект.Записать();
		
		результат = результатОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции // ПолучитьГруппуНоменклатурыПоНаименованию(наименование)

Функция   ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, Знач Штрихкод, Знач Ширина = 250, Знач Высота = 90, Знач ТипКода = 4, Знач УголПоворота = 0) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		// Зададим размер картинки
		ВнешняяКомпонента.Ширина = Ширина;
		ВнешняяКомпонента.Высота = Высота;
		
		// Разрешим компоненте самой определять тип кода
		ВнешняяКомпонента.АвтоТип = ЛОЖЬ;
		ВнешняяКомпонента.ТипКода = ТипКода;
		ВнешняяКомпонента.ОтображатьТекст = ЛОЖЬ;
		ВнешняяКомпонента.УголПоворота 	  = УголПоворота;
		
		// Если код содержит контрольный символ, обязательно указываем
		ВнешняяКомпонента.СодержитКС = СтрДлина(Штрихкод) = 13;
		
		// Если отображать контрольный символ не нужно
		// ВнешняяКомпонента.ВидимостьКС = ЛОЖЬ;
		
		// Формируем картинку штрихкода
		ВнешняяКомпонента.ЗначениеКода = Штрихкод;
		// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
		Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
			// Скорректируем ширину
			ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода + 10;
		КонецЕсли;
		
		// Сформируем картинку
		ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод();
		
		// Если картинка сформировалась
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			// Формируем из двоичных данных
			Возврат Новый Картинка(ДвоичныеДанныеКартинки);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция   ПолучитьНоменклатуруПоШтрихКоду(Знач ДанныеШтрикода, Знач ВСтруктуре = ЛОЖЬ, Знач ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено, Знач ДатаДокумента = Неопределено) Экспорт
	
	Номенклатура = Неопределено;
	НоменклатураСтруктура = ЛОЖЬ;
	
	Если ТипЗнч(ДанныеШтрикода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрикода;	
	Иначе	
		ШтрихКод = ДанныеШтрикода.ШтрихКод;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, ЛОЖЬ, ИСТИНА);
	КонецЕсли;	
	
	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = Неопределено 
		ИЛИ ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда
		
		ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИспользоватьДополнительныеУстаревшиеШтрихКодыНоменклатуры Тогда
		
		Если НЕ ДатаДокумента = Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура, &неопред) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры, &неопред) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения, &неопред) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления, &неопред) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления, &неопред)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|	И (ДополнительныеШтрихКоды.ДействуетСДаты = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетСДаты >= &ДатаДок)
			|	И (ДополнительныеШтрихКоды.ДействуетПоДату = &ПустаяДата
			|			ИЛИ ДополнительныеШтрихКоды.ДействуетПоДату <= &ДатаДок)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
			
			Запрос.УстановитьПараметр("ДатаДок", ДатаДокумента);
			Запрос.УстановитьПараметр("ПустаяДата", '00010101');
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура, &неопред) КАК Номенклатура,
			|	ЕСТЬNULL(ШтрихКоды.СерияНоменклатуры, &неопред) КАК СерияНоменклатуры,
			|	ЕСТЬNULL(ШтрихКоды.ЕдиницаИзмерения, &неопред) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ШтрихКоды.Номенклатура.ПометкаУдаления, &неопред) КАК НоменклатураПометкаУдаления
			|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.СерияНоменклатуры, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.ЕдиницаИзмерения, &неопред),
			|	ЕСТЬNULL(ДополнительныеШтрихКоды.Номенклатура.ПометкаУдаления, &неопред)
			|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
			|ГДЕ (ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКод
			|			ИЛИ ДополнительныеШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("неопред", Неопределено);
		
	Иначе			
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихКоды.Номенклатура КАК Номенклатура,
		|	ШтрихКоды.СерияНоменклатуры,
		|	ШтрихКоды.ЕдиницаИзмерения,
		|	ШтрихКоды.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ (ШтрихКоды.ШтрихКод = &ШтрихКод
		|			ИЛИ ШтрихКоды.ШтрихКод = &ШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО НоменклатураПометкаУдаления";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШтрихКод", нрег(ШтрихКод));
	Запрос.УстановитьПараметр("ШтрихКодВРЕГ", ВРЕГ(ШтрихКод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ВСтруктуре Тогда
			Номенклатура = Новый Структура;
			Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
			Номенклатура.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
			Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
			Номенклатура.Вставить("Количество", 1);
			НоменклатураСтруктура = ИСТИНА;
			
		Иначе
			Номенклатура = Выборка.Номенклатура;
		КонецЕсли;
		
	Иначе		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПриИспользованииШтрихКодаЕслиНоменклатураНеНайденаПоШтрихКодуИскатьПоАртикулу") Тогда
			
			// 	Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка КАК Номенклатура
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ (Номенклатура.Артикул = &ОсновнойШтрихКод
			|			ИЛИ Номенклатура.Артикул = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Если ВСтруктуре Тогда
					Номенклатура = Новый Структура;
					Номенклатура.Вставить("Номенклатура", Выборка.Номенклатура);
					Номенклатура.Вставить("СерияНоменклатуры", ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка"));
					Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
					Номенклатура.Вставить("Количество", 1);
					НоменклатураСтруктура = ИСТИНА;
					
				Иначе
					Номенклатура = Выборка.Номенклатура;	
				КонецЕсли;
				
			Иначе
				// 	Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка
				|ИЗ Справочник.Номенклатура КАК Номенклатура
				|ГДЕ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
				|	ИЛИ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ
				|УПОРЯДОЧИТЬ ПО Номенклатура.ПометкаУдаления"	;
				
				Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
				Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Номенклатура = Выборка.Номенклатура;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Номенклатура = Неопределено Тогда
		
		Если (ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении"))
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ШтрихКодомМожетВыступатьСерияИлиКодПродукта") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
			|	СерииНоменклатуры.Владелец КАК Номенклатура,
			|	СерииНоменклатуры.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ
			|	И (СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКод
			|			ИЛИ СерииНоменклатуры.КодПродукта = &ОсновнойШтрихКодВРЕГ
			|			ИЛИ СерииНоменклатуры.Наименование = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВСтруктуре Тогда
						
						Номенклатура = Новый Структура;
						Номенклатура.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
						Номенклатура.Вставить("СерияНоменклатуры", ВыборкаДетальныеЗаписи.СерияНоменклатуры);
						Номенклатура.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмерения);
						Номенклатура.Вставить("Количество", 1);
						НоменклатураСтруктура = ИСТИНА;
						
					Иначе
						Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;	
					КонецЕсли;	
				КонецЦикла;				
				
			КонецЕсли;
		КонецЕсли;
		
		Если Номенклатура = Неопределено Тогда
			Если ВСтруктуре Тогда
				
				Номенклатура = Новый Структура;
				Номенклатура.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
				Номенклатура.Вставить("СерияНоменклатуры", Неопределено);
				Номенклатура.Вставить("ЕдиницаИзмерения", Неопределено);
				Номенклатура.Вставить("Количество", 1);
				НоменклатураСтруктура = ИСТИНА;
				
			Иначе
				Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Номенклатура;	
		
	Иначе
		Если ВСтруктуре
			И НЕ НоменклатураСтруктура Тогда
			
			НоменклатураВСтруктуре = Новый Структура;
			НоменклатураВСтруктуре.Вставить("Номенклатура", Номенклатура);
			НоменклатураВСтруктуре.Вставить("СерияНоменклатуры", Неопределено);
			НоменклатураВСтруктуре.Вставить("ЕдиницаИзмерения", Неопределено);
			НоменклатураВСтруктуре.Вставить("Количество", 1);
			
			Возврат НоменклатураВСтруктуре;
			
		Иначе
			Возврат Номенклатура;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСписокНоменклатурыБыстрогоСпроса(Знач ВернутьСписок = ИСТИНА) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ НоменклатураЧастогоСпроса.Позиция КАК Позиция,
	|	НоменклатураЧастогоСпроса.Номенклатура,
	|	НоменклатураЧастогоСпроса.Комментарий
	|ИЗ РегистрСведений.НоменклатураЧастогоСпроса КАК НоменклатураЧастогоСпроса
	|УПОРЯДОЧИТЬ ПО Позиция";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВернутьСписок Тогда
		списокрезультат = Новый СписокЗначений;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				списокрезультат.Добавить(ВыборкаДетальныеЗаписи.номенклатура);
			КонецЦикла;	
		КонецЕсли;
		
		Возврат списокрезультат;
		
	Иначе
		Возврат РезультатЗапроса;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСписокНоменклатурыБыстрогоСпроса

Функция   ПолучитьСсылкуНаСкопированныйОбъект(Знач Ссылка) Экспорт
	
	ОбъектКопия = Ссылка.Скопировать();
	ОбъектКопияСсылка = Неопределено;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьШтрихКоды")
		И ((ПустаяСтрока(ОбъектКопия.ОсновнойШтрихКод) 
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьНоменклатуруБезШтрихКода"))
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НеПроверятьУникальностьШтрихКода")) Тогда
		
		ОбъектКопия.ОсновнойШтрихКод = "";
		//ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование и Штрих-код вручную!"), ,  Ссылка);
		
		ОбъектКопия.ОсновнойШтрихКод = ОбъектКопия.ОсновнойШтрихКод + формат(ТекущаяДата(), "ДФ=ЧЧммсс");
	Иначе
		//ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отредактируйте Наименование вручную!"), , Ссылка);
	КонецЕсли;
	
	ОбъектКопия.наименование = ОбъектКопия.наименование + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Копия");
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
		И НЕ ЗначениеЗаполнено(ОбъектКопия.НоменклатурнаяГруппа)Тогда
		
		ОбъектКопия.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаПоУмолчанию");
	КонецЕсли;	
	
	попытка
		НеВыводитьСообщений = параметрысеанса.НеВыводитьСообщений; // без кэша
		параметрысеанса.НеВыводитьСообщений = ИСТИНА;
		ОбъектКопия.записать();
		параметрысеанса.НеВыводитьСообщений = НеВыводитьСообщений;
		
		ОбъектКопияСсылка = ОбъектКопия.ссылка;
		
		РсНз = Регистрысведений.Цены.СоздатьНаборЗаписей();
		РсНз.Отбор.Номенклатура.Установить(Ссылка);
		РсНз.Прочитать();
		
		Для Каждого ЗаписьОЦене Из РсНз Цикл
			
			Цены = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			Цены.Активность 	= ИСТИНА;
			Цены.ВидЦен  		= ЗаписьОЦене.ВидЦен;
			Цены.Вручную		= ЗаписьОЦене.Вручную;
			Цены.Комментарий	= ЗаписьОЦене.Комментарий;
			Цены.Номенклатура	= ОбъектКопияСсылка;
			Цены.Период			= ЗаписьОЦене.Период;
			Цены.Цена 			= ЗаписьОЦене.Цена;
			
			Попытка 
				Цены.Записать(ИСТИНА);				
			Исключение 
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр сведений Цены") + ": " + ТекстОписаниеОшибки, , Ссылка);
			КонецПопытки; 
		КонецЦикла;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") Тогда
			РсНз = Регистрысведений.ЗначенияНаДругихЯзыках.СоздатьНаборЗаписей();
			РсНз.Отбор.ОбъектБазыДанных.Установить(Ссылка);
			РсНз.Прочитать();
			
			Для Каждого ЗаписьОЯзыке Из РсНз Цикл
				
				Перевод = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				Перевод.Активность 		 = ИСТИНА;
				Перевод.НаЯзыке			 = ЗаписьОЯзыке.НаЯзыке;
				Перевод.ОбъектБазыДанных = ОбъектКопияСсылка;
				Перевод.Поле			 = ЗаписьОЯзыке.Поле;
				Перевод.Язык			 = ЗаписьОЯзыке.Язык;
				
				Попытка 
					Перевод.Записать(ИСТИНА);					
				Исключение 
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи Перевода") + ": " + ТекстОписаниеОшибки, , Ссылка);
				КонецПопытки; 
			КонецЦикла;
		КонецЕсли;
		
	Исключение		
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи копии номенклатуры") + ": " + ТекстОписаниеОшибки, , Ссылка);
	КонецПопытки;
	
	Возврат ОбъектКопияСсылка;
	
КонецФункции

Функция   ПолучитьШтрихКодЕдиницыИзмерения(Знач ЕдиницаИзмерения) Экспорт
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьШтрихКодСерии

Функция   ПолучитьШтрихКодНоменклатурыСерии(Знач Номенклатура, Знач СерияНоменклатуры, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодСерии(СерияНоменклатуры);
	ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Результат = ОбщийМодульТоварСервер.ПолучитьШтрихКодЕдиницыИзмерения(ЕдиницаИзмерения);
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;
			
		Иначеесли ЗначениеЗаполнено(Номенклатура) Тогда
			Результат = Номенклатура.ОсновнойШтрихКод;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьШтрихКодСерии(Знач СерияНоменклатуры) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ШтрихКоды.ШтрихКод
		|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ ШтрихКоды.СерияНоменклатуры = &СерияНоменклатуры";
		
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			
			Результат = ВыборкаДетальныеЗаписи.ШтрихКод;		
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьШтрихКодСерии

Процедура ПроверитьИСортироватьТаблицуТовары(ДанныйОбъект, Знач ЭтоПланПродаж = ЛОЖЬ, Знач ИмяТаблицы = "Товары") Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНаименованиюПередЗаписьюДокументов") Тогда
		
		ТОварыДляСортировки = ДанныйОбъект[ИмяТаблицы].Выгрузить();
		
		Если ЭтоПланПродаж Тогда
			ТОварыДляСортировки.Сортировать("НоменклатураИлиГруппа");
			
		ИначеЕсли ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СортироватьНоменклатуруПоНоменклатурнойГруппеПередЗаписьюДокументов") Тогда
			
			ТОварыДляСортировки.Колонки.Добавить("НоменклатурнаяГруппа");
			Для Каждого СтрокаТовар из ТОварыДляСортировки Цикл
				Если ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
					СтрокаТовар.НоменклатурнаяГруппа = СтрокаТовар.Номенклатура.НоменклатурнаяГруппа;
				КонецЕсли;				
			КонецЦикла;
			
			ТОварыДляСортировки.Сортировать("НоменклатурнаяГруппа, Номенклатура");
			
		Иначе
			ТОварыДляСортировки.Сортировать("Номенклатура");			
		КонецЕсли;		
		
		ДанныйОбъект[ИмяТаблицы].Загрузить(ТОварыДляСортировки);		
	КонецЕсли;   
	
КонецПроцедуры

Функция   ПроверитьНаличиеСерийНоменклатуры(Знач ТаблицаТоваров, Знач ЭтоМассивНоменклатуры = ЛОЖЬ) Экспорт
	
	НаличиеСерийНоменклатуры = ЛОЖЬ;
	
	Если (ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении")) Тогда
		
		Если НЕ ЭтоМассивНоменклатуры Тогда
			СписокНоменклатуры = ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура");
		Иначе 	
			СписокНоменклатуры = ТаблицаТоваров;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.СерийныйУчет
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.СерийныйУчет = ИСТИНА И Номенклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НаличиеСерийНоменклатуры = ИСТИНА;
				Прервать;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаличиеСерийНоменклатуры;
	
КонецФункции // ПроверитьНаличиеСерийНоменклатуры

Функция   ПроверитьОтсутствиеСерииВОстатках(Знач Номенклатура, Знач СерияНоменклатуры, Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(&Дата,
	|			СерияНоменклатуры = &СерияНоменклатуры
	|				И Номенклатура = &Номенклатура) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	КоличествоОстаток = 0;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;	                            	
	КонецЕсли;
	
	Возврат не КоличествоОстаток = 0;
	
КонецФункции // ПроверитьОтсутствиеСерииВОстатках

Функция   ПроверитьСерийностьЭлементовНабора(Знач Номенклатура, Знач НоменклатураСерийная = ЛОЖЬ) Экспорт
	
	Для Каждого СтрокаСостава Из Номенклатура.Состав Цикл
		
		НоменклатураСостава = СтрокаСостава.Номенклатура;
		
		Если НоменклатураСостава.СерийныйУчет Тогда
			НоменклатураСерийная = ИСТИНА;
			Прервать;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ЭтоНабор(НоменклатураСостава) Тогда
			
			НоменклатураСерийная = ПроверитьСерийностьЭлементовНабора(НоменклатураСостава, НоменклатураСерийная);
			
			Если НоменклатураСерийная Тогда
				прервать;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат НоменклатураСерийная;
	
КонецФункции

Функция   СвязаннаяНоменклатурнаяГруппа(Знач Родитель)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 НоменклатурныеГруппы.Ссылка
	|ИЗ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ НоменклатурныеГруппы.СвязатьОдноименнуюГруппуНоменклатуры = ИСТИНА
	|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатурныеГруппы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Родитель.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Результат = ВыборкаДетальныеЗаписи.ссылка;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   СоздатьНоменклатуру(Знач ШтрихКод, Знач Производитель, Знач НоменклатурнаяГруппа, Знач Цена = 0, Знач Наименование, Знач ВидЦен, Знач Родитель = Неопределено, Знач Серия = "")  Экспорт
	
	ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаОбязательныйРеквизитЛюбойНоменклатуры")
			И НЕ ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа обязательный реквизит номенклатуры, но она не указана!"), , );
			КонецЕсли;
			
			Возврат неопределено;	
			
		ИначеЕСли ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			Если НоменклатурнаяГруппа.СвязатьОдноименнуюГруппуНоменклатуры Тогда
				родитель = Справочники.Номенклатура.НайтиПоНаименованию(НоменклатурнаяГруппа.Наименование);
				Если НЕ ОбщийМодульПовтор.ЭтоГруппа(родитель) Тогда
					родитель = Неопределено;						
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы)
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
				
				формула = врег(НоменклатурнаяГруппа.ФормулаАвтоНаименованияНоменклатурыДаннойГруппы.формула);
				
				ошибка = ЛОЖЬ;
				
				Если НЕ найти(формула, "ЦЕНА") = 0 
					И цена = 0 Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!"), , );
						// Сообщение = Новый СообщениеПользователю;
						// Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Цена.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но она не заполнена!");
						// Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ПРОИЗВОДИТЕЛЬ") = 0 
					И НЕ ЗначениеЗаполнено(Производитель) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						// Сообщение = Новый СообщениеПользователю;
						// Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Производитель.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						// Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ВИДЦЕН") = 0 
					И НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						// Сообщение = Новый СообщениеПользователю;
						// Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Вид Цен.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						// Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если НЕ найти(формула, "ШТРИХКОД") = 0 
					И НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!"));
						// Сообщение = Новый СообщениеПользователю;
						// Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В формуле наименования номенклатуры фигурирует") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Штрих КОд.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Но он не указан!");
						// Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					ошибка = ИСТИНА;
					
				КонецЕсли;
				
				Если ошибка Тогда
					Возврат неопределено;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НоваНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваНоменклатура.Наименование 		  = наименование;
	НоваНоменклатура.ОсновнойШтрихКод 	  = ШтрихКод;
	НоваНоменклатура.Производитель 		  = Производитель;
	НоваНоменклатура.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	
	Если НЕ родитель = Неопределено
		И ЗначениеЗаполнено(родитель) Тогда
		
		НоваНоменклатура.родитель = родитель;
	КонецЕсли;
	
	Если НЕ ИспользоватьСложныйМеханизмЦен Тогда
		НоваНоменклатура.Цена = Цена;
	КонецЕсли;
	
	НоваНоменклатура.Записать();
	
	Если НЕ ПустаяСтрока(серия) Тогда
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.Наименование = серия;
		НоваяСерия.Владелец 	= НоваНоменклатура.Ссылка;
		НоваяСерия.Записать();
		
	КонецЕсли;
	
	Если НЕ Цена = 0 
		И ИспользоватьСложныйМеханизмЦен Тогда	
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			Дата = Началомесяца(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) - 3600 * 24;
			
			Рсмз = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
			РСМЗ.ВидЦен 	  = ВидЦен;
			РСМЗ.Номенклатура = НоваНоменклатура.Ссылка;
			РСМЗ.Период 	  = Дата;
			РСМЗ.Цена	 	  = Цена;
			РСМЗ.Вручную	  = ИСТИНА;
			РСМЗ.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена установлена при создании номенклатуры");
			
			Попытка 
				рсмз.Записать(ИСТИНА);
				
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", НоваНоменклатура.Ссылка);
				СтрокаТовара.Вставить("Цена", Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Дата, ИСТИНА, , , ЛОЖЬ);
				
				// на случай наименования по цене
				НоваНоменклатура = НоваНоменклатура.Ссылка.ПолучитьОбъект();
				НоваНоменклатура.записать();
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при установке цены") + ": " + ТекстОписаниеОшибки);
				КонецЕсли;				
			КонецПопытки;
			
		Иначе
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Вид цен!"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваНоменклатура.ссылка;
	
КонецФункции // СоздатьНоменклатуру

Процедура УстановитьРеквизитНоменклатурыПоФормуле(Знач НоменклатураОбъект, Знач ИмяРеквизита = "Наименование", Знач ВернутьРезультат = ЛОЖЬ, Результат = Неопределено) Экспорт
	
	// Если ВернутьРезультат Тогда НоменклатураОбъект может быть ссылкой
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГруппПС") Тогда
		
		Если ИмяРеквизита = "Наименование"
			И НЕ ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа)
			И ЗначениеЗаполнено(НоменклатураОбъект.Родитель) Тогда
			
			СвязаннаяНоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа(НоменклатураОбъект.Родитель);
			Если НЕ СвязаннаяНоменклатурнаяГруппа = Неопределено 
				И НЕ НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа Тогда
				
				НоменклатураОбъект.НоменклатурнаяГруппа = СвязаннаяНоменклатурнаяГруппа;
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьФормулыАвтоНаименованияФормированияШтрихКодаИТекстаСШтрихКодом") Тогда
		
		Если ИмяРеквизита = "Артикул"
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьАртикулДажеКогдаОнУказанВручную")
			И НЕ пустаястрока(НоменклатураОбъект.Артикул) Тогда
			
			Возврат; // не перезаполнять
		КонецЕсли;
		
		Формула = Неопределено;
		Если ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа) Тогда
			Если ИмяРеквизита = "Наименование"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы) Тогда
				
				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаАвтоНаименованияноменклатурыДаннойГруппы.Формула;	
			ИначеЕсли ИмяРеквизита = "Артикул"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияАртикула) Тогда
				
				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияАртикула.Формула;
			ИначеЕсли ИмяРеквизита = "НаименованиеДляПечати"
				И ЗначениеЗаполнено(НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияПолногоНаименованияНоменклатуры) Тогда
				
				Формула = НоменклатураОбъект.НоменклатурнаяГруппа.ФормулаФормированияПолногоНаименованияНоменклатуры.Формула;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Формула) Тогда
			Если ИмяРеквизита = "Артикул" Тогда
				ФормулаФормированияАртикула = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияАртикула");
				Если ЗначениеЗаполнено(ФормулаФормированияАртикула) Тогда
					Формула = ФормулаФормированияАртикула.Формула;
				КонецЕсли;
				
			ИначеЕсли ИмяРеквизита = "Наименование" Тогда
				
				ФормулаОбщая = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаАвтоНаименованияНоменклатурыНоменклатурнойГруппыПоУмолчанию");
				Если ЗначениеЗаполнено(ФормулаОбщая) Тогда
					Формула = ФормулаОбщая.Формула;
				КонецЕсли;
				
			ИначеЕсли ИмяРеквизита = "НаименованиеДляПечати" Тогда
				
				ФормулаОбщая = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаФормированияПолногоНаименованияНоменклатуры");
				Если ЗначениеЗаполнено(ФормулаОбщая) Тогда
					Формула = ФормулаОбщая.Формула;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Формула) Тогда
			
			Попытка 
				Попытка 
					Номенклатура = НоменклатураОбъект.Ссылка;
				Исключение 	
					Номенклатура = НоменклатураОбъект.Номенклатура;
					Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
						Номенклатура = Неопределено;
					КонецЕсли;
				КонецПопытки;
				
				Цена 		 = 0;
				Цена2 		 = 0;
				Цена3 		 = 0;
				льготнаяцена = 0;					
				ФормулаВРег  = ВРег(Формула);
				Дата 		 = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				Валюта 		 = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				Валюта2 	 = Валюта;
				Валюта3 	 = Валюта;
				
				Если НЕ Найти(ФормулаВРег, "ЦЕНА") = 0 Тогда
					
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
					
					// усл не менять
					Если (ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура))
						ИЛИ (ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура") 
						И ЗначениеЗаполнено(Номенклатура.ссылка)) Тогда
						
						Формулаврег = врег(Формула);
						
						Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, ИСТИНА);
						
						Если Цена = 0 Тогда
							Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, ОбщийМодульСервисСервер.ПользователяТекущаяДата());
						КонецЕсли;
						
					Иначе						
						Если НЕ Номенклатура = Неопределено
							И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен") Тогда
							
							Попытка
								Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура.ссылка, ВидЦен, Дата, ИСТИНА);
							Исключение
							КонецПопытки;	
							
						Иначе
							Попытка
								Цена = НоменклатураОбъект.Цена;
							Исключение
							КонецПопытки;	
						КонецЕсли;
						
					КонецЕсли; 	
					
					ВидЦен2 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");
					Если ЗначениеЗаполнено(ВидЦен2) Тогда
						Цена2 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен2, Дата);
						Валюта2 = ВидЦен2.ВалютаЦены;
					КонецЕсли;
					
					ВидЦен3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТретийВидЦенДляФормул");
					Если ЗначениеЗаполнено(ВидЦен3) Тогда
						Цена3 	= ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен3, Дата);
						Валюта3 = ВидЦен3.ВалютаЦены;
					КонецЕсли;
					
					Если НЕ найти(Формулаврег, "ЛЬГОТНАЯЦЕНА") = 0 Тогда
						льготнаяцена = ОбщийМодульСервер.ПолучитьЛьготнуюЦену(Номенклатура.ссылка, , Цена, ВидЦен);
					КонецЕсли;
				КонецЕсли;
				
				ЗначениеРеквизитаНовое 	= "";
				Производитель 			= НоменклатураОбъект.Производитель;
				НоменклатурнаяГруппа 	= НоменклатураОбъект.НоменклатурнаяГруппа;
				
				Выполнить(" ЗначениеРеквизитаНовое = """" + "  + Формула  + ";");
				
				Если ВернутьРезультат Тогда
					Результат = ЗначениеРеквизитаНовое;
				Иначе
					Если НЕ ЗначениеРеквизитаНовое = НоменклатураОбъект[ИмяРеквизита] Тогда
						НоменклатураОбъект[ИмяРеквизита] = ЗначениеРеквизитаНовое;
					КонецЕсли;	
				КонецЕсли;
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке авто-наименования номенклатуры") + ": " + ТекстОписаниеОшибки, , НоменклатураОбъект);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция   УстановитьАртикулНоменклатурыПоФормуле(Знач ОбъектНоменклатура) Экспорт	
	
	Результат = "";
	ОбщийМодульТоварСервер.УстановитьРеквизитНоменклатурыПоФормуле(ОбъектНоменклатура, "Артикул", ИСТИНА, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция   УстановитьШтрихКодНоменклатурыПоФормуле(Знач ОбъектНоменклатура, Знач ФормулаШтрихКода = "", Знач ВидЦен = Неопределено, Знач Дата = Неопределено, Знач Цена = Неопределено, Знач СерияНоменклатуры = "", Знач ЕдиницаИзмерения = Неопределено) экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Если ПустаяСтрока(ФормулаШтрихКода) Тогда  
		
		Если ЗначениеЗаполнено(ОбъектНоменклатура.Производитель)
			И ЗначениеЗаполнено(ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры) Тогда
			
			ФормулаШтрихКода = ОбъектНоменклатура.Производитель.СвояФормулаШтрихКодаНоменклатуры.Формула;
		Иначе
			ФормулаШтрихКодаСсылка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновнаяФормулаШтрихКодаНоменклатуры");
			Если ЗначениеЗаполнено(ФормулаШтрихКодаСсылка) Тогда
				ФормулаШтрихКода = ФормулаШтрихКодаСсылка.Формула;
			КонецЕсли;
		КонецЕсли;		
		
	КонецЕсли;
	
	Результат = "";	
	Если ЗначениеЗаполнено(ФормулаШтрихКода) Тогда
		Попытка 
			Номенклатура = ОбъектНоменклатура;
			Если НЕ Номенклатура = Неопределено Тогда
				Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
				
				Если ВидЦен = Неопределено Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				Иначе
					Валюта = ВидЦен.ВалютаЦены;
				КонецЕсли;
				
				Если Цена = Неопределено Тогда
					Цена = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, , , , , , , , ЕдиницаИзмерения);		
				КонецЕсли;
				
				НоменклатурнаяГруппа = ОбъектНоменклатура.НоменклатурнаяГруппа;
				Производитель = ОбъектНоменклатура.Производитель;
				
				Выполнить(" Результат = """"+" + ФормулаШтрихКода + ";");
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
					Результат = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(Результат, ЛОЖЬ);
				КонецЕсли;
			КонецЕсли;
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при авто-формировании Штрих-кода номенклатуры") + ": " + ТекстОписаниеОшибки, , ОбъектНоменклатура);
			КонецЕсли;
		КонецПопытки;
		
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуEAN13") Тогда
		ПервыеТриЧисла = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КодСтраныПервыеТриЧислаШтрихКодаПоEAN13");
		ПроизводителяЧетыреЧисла = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("КодПроизводителяЧетыреЧислаШтрихКодаПоEAN13");
		ДополнитьСтрокуПодстрокой(ПервыеТриЧисла, "0", 3, ИСТИНА);
		ДополнитьСтрокуПодстрокой(ПроизводителяЧетыреЧисла, "0", 4, ЛОЖЬ);
		
		ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);
		Если ПустаяСтрока(ТекущийКод) Тогда // новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = Прав(СокрЛП(ОбъектНоменклатура.Код), 5);
		КонецЕсли;
		ДополнитьСтрокуПодстрокой(ТекущийКод, "0", 5, ЛОЖЬ);
		
		Штрихкод = "" + ПервыеТриЧисла + ПроизводителяЧетыреЧисла + ТекущийКод;
		Коэффициент = 1;
		Сумма = 0;
		Для Сч = 1 По 12 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		
		Результат = Штрихкод + ПроверочныйСимвол;
		
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормироватьШтрихКодБезФормулыПоФорматуCode128") Тогда
		
		ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);
		Если ПустаяСтрока(ТекущийКод) Тогда // новый код
			ОбъектНоменклатура.УстановитьНовыйКод();
			ТекущийКод = СокрЛП(ОбъектНоменклатура.Код);
		КонецЕсли;
		
		Результат = "" + СокрЛП(ПервыеТриЧисла) + СокрЛП(ПроизводителяЧетыреЧисла) + ТекущийКод;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСтрокуПодстрокой(СтрокаДляДополнения, Знач СтрокаДополнения, Знач ЧислоСимволовНеМенее = 1, Знач ДополнятьСзади = ЛОЖЬ)
	
	Если НЕ СтрокаДополнения = " " Тогда
		СтрокаДляДополнения = СокрЛП(СтрокаДляДополнения);		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаДополнения) Тогда
		
		Пока СтрДлина(СтрокаДляДополнения) < ЧислоСимволовНеМенее Цикл
			Если ДополнятьСзади Тогда
				СтрокаДляДополнения = СтрокаДляДополнения + СтрокаДополнения;
			Иначе
				СтрокаДляДополнения = СтрокаДополнения + СтрокаДляДополнения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ЭтоНабор(Знач Номенклатура) Экспорт
	Возврат НЕ Номенклатура.ЭтоГруппа И Номенклатура.ЭтоНабор;
КонецФункции // ЭтоНабор

Функция   ПолучитьСреднююВаловуюПрибыльРеализации(Знач Номенклатура, Знач Дата, Знач Ссылка = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ, Знач СерияНоменклатуры = Неопределено) Экспорт
	
	Если ВернутьСтруктуру Тогда
		Результат = Новый Структура;
		Результат.Вставить("СредняяВаловаяПрибыль", 0);
		Результат.Вставить("ПроцентНаценки", 0);
		Результат.Вставить("РентабельностьПродаж", 0);
	Иначе
		Результат = 0;
	КонецЕсли;	
	
	РезультатНеГотов = ИСТИНА;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВключитьПерсонифицированныйУчетВаловойПрибыли") Тогда
		
		Если ЗначениеЗаполнено(Ссылка)
			И ТипЗнч(Ссылка) = Тип("ДокументСсылка.Инвентаризации")
			И ЗначениеЗаполнено(Ссылка.СвязанныйДокументРеализации) Тогда  // по документу
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ
			|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ
			|	ВаловаяПрибыль.Номенклатура = &Номенклатура
			|И (&НетТребованияКСерии ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
			|	И ВаловаяПрибыль.Регистратор = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВаловаяПрибыль.Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("Ссылка", Ссылка.СвязанныйДокументРеализации);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("НетТребованияКСерии", (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры")) ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры)));
			Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
			
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
						КонецЕсли;
						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли; // при реалиазции по себестоимости вп нет
			
			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;	
				
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;	
			КонецЕсли;
			
			РезультатНеГотов = ЛОЖЬ;
			
		КонецЕсли;
		
		Если РезультатНеГотов
			И НЕ ТипЗнч(Ссылка) = Тип("ДокументСсылка.Инвентаризации")
			И ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда // по клиенту
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
			|		КОНЕЦ) КАК Сумма,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	СУММА(1) КАК ЧислоЗаписейВРегистр,
			|	ВаловаяПрибыль.Номенклатура,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
			|		КОНЕЦ) КАК ПроцентНаценки,
			|	СУММА(ВЫБОР
			|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
			|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|			Иначе -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
			|		КОНЕЦ) КАК РентабельностьПродаж
			|ИЗ
			|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ
			|	ВаловаяПрибыль.Номенклатура = &Номенклатура
			|И (&НетТребованияКСерии ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
			|	И ВаловаяПрибыль.Регистратор.КлиентПоставщик = &КлиентПоставщик
			|	И ВаловаяПрибыль.Регистратор.Дата <= &Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВаловаяПрибыль.Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("НетТребованияКСерии", (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры")) ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры)));
			Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
			Запрос.УстановитьПараметр("КлиентПоставщик", Ссылка.КлиентПоставщик);
			Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("Период", Дата);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Сумма 		= 0;
				Количество  = 0;
				ЧислоЗаписейВРегистр = 0;
				ПроцентНаценки 		 = 0;
				РентабельностьПродаж = 0;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
						Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
						Если ВернутьСтруктуру Тогда
							ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
							РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
						КонецЕсли;
						Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
						ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
					КонецЕсли;
				КонецЦикла;	
				
				Если ВернутьСтруктуру Тогда
					Если Количество = 0 Тогда
						Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат.СредняяВаловаяПрибыль = Сумма / Количество;
						Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
						Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
					КонецЕсли;	
					
				Иначе
					Если Количество = 0 Тогда
						Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Иначе
						Результат = Сумма / Количество;
					КонецЕсли;	
				КонецЕсли;
				
				РезультатНеГотов = ЛОЖЬ;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатНеГотов Тогда // вот тут средняя продажи
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.Сумма, 0)
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.Количество, 0)
		|		КОНЕЦ) КАК Количество,
		|	СУММА(1) КАК ЧислоЗаписейВРегистр,
		|	ВаловаяПрибыль.Номенклатура,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0)
		|		КОНЕЦ) КАК ПроцентНаценки,
		|	СУММА(ВЫБОР
		|			КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|				Тогда ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ВаловаяПрибыль.РентабельностьПродаж, 0)
		|		КОНЕЦ) КАК РентабельностьПродаж
		|ИЗ
		|	РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ
		|	ВаловаяПрибыль.Номенклатура = &Номенклатура
		|	И (&НетТребованияКСерии
		|			ИЛИ ВаловаяПрибыль.СерияНоменклатуры = &СерияНоменклатуры)
		|	И ВаловаяПрибыль.Период <= &Период
		|	И ВаловаяПрибыль.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВаловаяПрибыль.Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Период", Дата);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		
		НетТребованияКСерии = (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении")
		ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры"))
		ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры));
		Запрос.УстановитьПараметр("НетТребованияКСерии", НетТребованияКСерии);
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Сумма 		= 0;
			Количество  = 0;
			ЧислоЗаписейВРегистр = 0;
			ПроцентНаценки 		 = 0;
			РентабельностьПродаж = 0;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.Сумма = NULL Тогда
					Сумма 				 = Сумма + ВыборкаДетальныеЗаписи.Сумма;
					Если ВернутьСтруктуру Тогда
						ПроцентНаценки 		 = ПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
						РентабельностьПродаж = РентабельностьПродаж + ВыборкаДетальныеЗаписи.РентабельностьПродаж;	
					КонецЕсли;
					Количество 			 = Количество + ВыборкаДетальныеЗаписи.Количество;
					ЧислоЗаписейВРегистр = ЧислоЗаписейВРегистр + ВыборкаДетальныеЗаписи.ЧислоЗаписейВРегистр;	
				КонецЕсли;
			КонецЦикла;	
			
			Если ВернутьСтруктуру Тогда
				Если Количество = 0 Тогда
					Результат.СредняяВаловаяПрибыль = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.ПроцентНаценки 		= ПроцентНаценки / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат.СредняяВаловаяПрибыль = Сумма / Количество;
					Результат.ПроцентНаценки 		= ПроцентНаценки / Количество;
					Результат.РентабельностьПродаж 	= РентабельностьПродаж / Количество;
				КонецЕсли;	
				
			Иначе
				Если Количество = 0 Тогда
					Результат = Сумма / ?(ЧислоЗаписейВРегистр = 0, 1, ЧислоЗаписейВРегистр);
				Иначе
					Результат = Сумма / Количество;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСреднююВаловуюПрибыльРеализации

Функция   ПолучитьНоменклатуруПоПредставлениюКонтрагента(Знач КлиентПоставщик, Знач Поле = Неопределено, Знач Текст, Знач НаЯзыке = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;
	
	Возврат ОбщийМодульПовтор.ПолучитьНоменклатуруПоПредставлениюКонтрагента(КлиентПоставщик, Поле, Текст, НаЯзыке);
	
КонецФункции // ПолучитьНоменклатуруПоПредставлениюКонтрагента

Функция   СобственноеЗначениеНаСервере(Знач Номенклатура, Знач Язык, Знач Поле = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Язык) Тогда
		Язык = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
	КонецЕсли;
	
	Результат = "";
	
	Если Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, , , Язык);
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати") Тогда
		Результат = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Номенклатура, "НаименованиеДляПечати", , Язык);
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул") Тогда
		Результат = Номенклатура.Артикул;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Вес") Тогда
		Результат = "" + Номенклатура.Вес;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Высота") Тогда
		Результат = "" + Номенклатура.Высота;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Длина") Тогда
		Результат = "" + Номенклатура.Длина;
	ИначеЕсли Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Ширина") Тогда
		Результат = "" + Номенклатура.Ширина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СобственноеЗначениеНаСервере

Функция   ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Знач Номенклатура, Знач Поле = Неопределено, Знач Язык = Неопределено, Знач КлиентПоставщик, Знач ВОтсутствииВернутьСобственноеПредставление = ЛОЖЬ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	Иначе
		Если Поле = Неопределено Тогда
			Поле = ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование");
		КонецЕсли;
		
		Если ВОтсутствииВернутьСобственноеПредставление Тогда
			ЗначениеПредставления = СобственноеЗначениеНаСервере(Номенклатура, Язык, Поле);
		Иначе
			ЗначениеПредставления = "";
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПредставлениеТоваровКонтрагентами.ЗначениеПредставления
			|ИЗ РегистрСведений.ПредставлениеТоваровКонтрагентами КАК ПредставлениеТоваровКонтрагентами
			|ГДЕ ПредставлениеТоваровКонтрагентами.Номенклатура = &Номенклатура ";
			
			Если ЗначениеЗаполнено(КлиентПоставщик) Тогда
				Запрос.Текст = Запрос.Текст + " И (ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщик ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель2 ИЛИ ПредставлениеТоваровКонтрагентами.КлиентПоставщик = &КлиентПоставщикРодитель3 ) ";
				Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель", КлиентПоставщик.Родитель);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель2", КлиентПоставщик.Родитель.Родитель);
				Запрос.УстановитьПараметр("КлиентПоставщикРодитель3", КлиентПоставщик.Родитель.Родитель.Родитель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Поле) Тогда
				Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Поле = &Поле ";
				Запрос.УстановитьПараметр("Поле", Поле);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Язык) Тогда
				Запрос.Текст = Запрос.Текст + " И ПредставлениеТоваровКонтрагентами.Язык = &Язык ";
				Запрос.УстановитьПараметр("Язык", Язык);
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ПредставлениеТоваровКонтрагентами.Поле";	
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				ВыборкаДетальныеЗаписи.Следующий();
				ЗначениеПредставления = ВыборкаДетальныеЗаписи.ЗначениеПредставления;		
			КонецЕсли;	
		КонецЕсли;	
		
		Возврат ЗначениеПредставления;	
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом

Функция   ВычислитьЧислоМест(Знач Номенклатура, Знач ЕдиницаИзмерения, Знач Количество = 0, Знач ОкруглятьВБольшуюСтрону = ИСТИНА) Экспорт
	
	НаОдноМесто = 1;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения)
		И НЕ ЕдиницаИзмерения.НаОдноМесто = 0 Тогда
		
		НаОдноМесто = Номенклатура.НаОдноМесто;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура)
		И НЕ Номенклатура.НаОдноМесто = 0 Тогда
		
		НаОдноМесто = Номенклатура.НаОдноМесто;
	КонецЕсли;
	
	ЧислоМест = Количество / НаОдноМесто;
	
	Если ОкруглятьВБольшуюСтрону Тогда
		Если НЕ ЧислоМест = Цел(ЧислоМест) Тогда
			ЧислоМест = Цел(ЧислоМест) + 1;
		КонецЕсли;
	Иначе
		ЧислоМест = Цел(ЧислоМест);
	КонецЕсли;
	
	Возврат ЧислоМест;
	
КонецФункции // ВычислитьЧислоМест

Процедура ЗарегистрироватьШтрихКод(Знач ШтрихКод, Знач Номенклатура, Знач ТипШтрихКодов = Неопределено, Знач СерияНоменклатуры = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТипШтрихКодов) Тогда
			ТипШтрихКодов = ПланыВидовХарактеристик.ТипыШтрихКодов.CODE128;
		КонецЕсли;	
		
		ШтрихКодРегистр = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		ШтрихКодРегистр.Активность 		= ИСТИНА;
		ШтрихКодРегистр.Номенклатура 	= Номенклатура;			
		ШтрихКодРегистр.ТипШтрихКода 	= ТипШтрихКодов;
		ШтрихКодРегистр.ШтрихКод 		= ШтрихКод;
		ШтрихКодРегистр.СерияНоменклатуры = СерияНоменклатуры;
		
		Попытка 
			ШтрихКодРегистр.Записать(ИСТИНА);
			
		Исключение 
			ТекстОписаниеОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;			
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи штрих-кода") + ": " + ШтрихКод + " - " + ТекстОписаниеОшибки;
			Сообщение.Сообщить();
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры //ЗарегистрироватьШтрихКод

Функция   СгенерироватьСерию(Знач ФормулаГенерацииСерий = Неопределено, Знач Номенклатура, Знач ДобавитьККоду = 0) Экспорт
	
	Если ФормулаГенерацииСерий = Неопределено Тогда
		ФормулаГенерацииСерий = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФормулаГенерацииСерий");
	КонецЕсли;
	
	Результат = "";
	Код = ОбщийМодульСервисСервер.МаксимальныйКодЭлемента("СерииНоменклатуры", ИСТИНА) + 1 + ДобавитьККоду;
	
	Если ЗначениеЗаполнено(ФормулаГенерацииСерий) Тогда
		Выполнить(" Результат = " + ФормулаГенерацииСерий.Формула + "; ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //СгенерироватьСерию

Функция   ПроверитьЧтоВаучерУжеИспользован(Знач Ваучер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПринадлежностьВаучеров.Сумма,
	|	НакоплениеНаВаучеры.Сумма КАК Сумма1
	|ИЗ РегистрСведений.ПринадлежностьВаучеров КАК ПринадлежностьВаучеров,
	|	РегистрНакопления.НакоплениеНаВаучеры КАК НакоплениеНаВаучеры
	|ГДЕ ПринадлежностьВаучеров.Ваучер = &Ваучер
	|	И НакоплениеНаВаучеры.Ваучер = &Ваучер";
	
	Запрос.УстановитьПараметр("Ваучер", Ваучер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = НЕ РезультатЗапроса.Пустой();
	
	Возврат Результат;
	
КонецФункции //ПроверитьЧтоВаучерУжеИспользован

Функция   ПолучитьВаучерПоШтрихКоду(Знач ШтрихКод = "") Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ПустаяСтрока(ШтрихКод) Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ваучеры.Ссылка
		|ИЗ Справочник.Ваучеры КАК Ваучеры
		|ГДЕ Ваучеры.ШтрихКод = &ШтрихКод
		|УПОРЯДОЧИТЬ ПО Ваучеры.Отключен, Ваучеры.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.Ссылка;		
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьВаучерПоШтрихКоду

Функция   ПроверитьЧтоВаучерПодходит(Знач Ваучер, Знач Дата = Неопределено, Знач Товары = Неопределено, Знач Склад = Неопределено, Знач ВернутьПервуюПричину = ИСТИНА, Знач ВзятьСкладыКолонкойИзТаблицы = ЛОЖЬ) Экспорт
	
	Результат = Новый Структура("ВаучерПодходит, Причина", ИСТИНА, "");
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		
		Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
			ИЛИ ЗначениеЗаполнено(Ваучер.ДатаОкончания) Тогда
			
			Если Дата = Неопределено Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
				И Дата < Ваучер.ДатаНачала Тогда
				
				Результат.ВаучерПодходит = ЛОЖЬ;
				Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата меньше, чем начало действия Ваучера");
				Если ВернутьПервуюПричину Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ваучер.ДатаОкончания)
				И Дата > Ваучер.ДатаОкончания Тогда
				
				Результат.ВаучерПодходит = ЛОЖЬ;
				Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата больше, чем окончание действия Ваучера");
				Если ВернутьПервуюПричину Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Товары = Неопределено Тогда
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
				И НЕ Ваучер.ДляНоменклатурныхГрупп.Количество() = 0 Тогда
				
				МассивНоменклатурныхГрупп = Ваучер.ДляНоменклатурныхГрупп.ВыгрузитьКолонку("НоменклатурнаяГруппа");
				
				Для Каждого СтрокаТовары Из Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
						И ЗначениеЗаполнено(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) Тогда
						
						Если МассивНоменклатурныхГрупп.Найти(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) = Неопределено Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа не подходит для Ваучера") + ": " + СокрЛП(СтрокаТовары.Номенклатура.НоменклатурнаяГруппа) + " (" + СтрокаТовары.Номенклатура + ")";
							
							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ Ваучер.ДляНоменклатурыИЕеГрупп.Количество() = 0 Тогда
				
				МассивНоменклатуры = Ваучер.ДляНоменклатурыИЕеГрупп.ВыгрузитьКолонку("Номенклатура");
				
				Для Каждого СтрокаТовары Из Товары Цикл
					Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
						
						ЭлементПодходит = ЛОЖЬ;
						Для Каждого ЭлементМассиваНоменклатуры Из МассивНоменклатуры Цикл
							
							Если (НЕ ЭлементМассиваНоменклатуры.ЭтоГруппа
								И СтрокаТовары.Номенклатура = ЭлементМассиваНоменклатуры)
								ИЛИ (ЭлементМассиваНоменклатуры.ЭтоГруппа							
								И СтрокаТовары.Номенклатура.ПринадлежитЭлементу(ЭлементМассиваНоменклатуры)) Тогда
								
								ЭлементПодходит = ИСТИНА;
							КонецЕсли;	
						КонецЦикла;
						
						Если НЕ ЭлементПодходит Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа номенклатуры не подходит для Ваучера") + ": " + СокрЛП(СтрокаТовары.Номенклатура);
							
							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") 
				И НЕ Ваучер.ДляСкладов.Количество() = 0 Тогда
				
				Если ВзятьСкладыКолонкойИзТаблицы
					И НЕ Товары = Неопределено Тогда
					
					СкладыДляВаучера = Товары.ВыгрузитьКолонку("Склад");
					МассивСкладов = Ваучер.ДляСкладов.ВыгрузитьКолонку("Склад");
					
					Для Каждого СкладДляВаучера Из СкладыДляВаучера Цикл
						
						Если ЗначениеЗаполнено(СкладДляВаучера)
							И МассивСкладов.Найти(СкладДляВаучера) = Неопределено Тогда
							
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад не подходит для Ваучера") + ": " + СокрЛП(СкладДляВаучера);
							Если ВернутьПервуюПричину Тогда
								Прервать;							
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
					
				Иначе				
					Если Склад = Неопределено Тогда
						Склад = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СкладДляИзъятияВаучеров");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Склад) Тогда
						Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Склад) Тогда					
						МассивСкладов = Ваучер.ДляСкладов.ВыгрузитьКолонку("Склад");
						
						Если МассивСкладов.Найти(Склад) = Неопределено Тогда
							Результат.ВаучерПодходит = ЛОЖЬ;
							Результат.Причина = ?(ПустаяСтрока(Результат.Причина), "", Результат.Причина + ", ") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Склад не подходит для Ваучера") + ": " + СокрЛП(Склад);
							Если ВернутьПервуюПричину Тогда
								Возврат Результат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьОстатокНакопленияНаВаучер(Знач Ваучер, Знач Дата = Неопределено) Экспорт
	
	Результат = 0;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		
		Если Дата = Неопределено Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ НакоплениеНаВаучерыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.НакоплениеНаВаучеры.Остатки(&Дата, Ваучер = &Ваучер) КАК НакоплениеНаВаучерыОстатки";
		
		Запрос.УстановитьПараметр("Ваучер", Ваучер);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = Результат + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ВычислитьСуммуНакопления(Знач Ваучер, Знач Номенклатура = Неопределено, Знач Сумма = 0, Знач Склад = Неопределено, Знач Дата = Неопределено) Экспорт
	
	Результат = 0;
	
	Если ЗначениеЗаполнено(Ваучер) Тогда
		
		ВаучерПодходит = ИСТИНА;
		Процент = Ваучер.НоминалПроцент;
		
		Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
			И ЗначениеЗаполнено(Ваучер.ДатаОкончания) Тогда
			
			Если Дата = Неопределено Тогда
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ваучер.ДатаНачала)
				И Дата < Ваучер.ДатаНачала Тогда
				
				ВаучерПодходит = ЛОЖЬ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ваучер.ДатаОкончания)
				И Дата > Ваучер.ДатаОкончания Тогда
				
				ВаучерПодходит = ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;
		
		Если ВаучерПодходит Тогда
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
					И НЕ Ваучер.ДляНоменклатурныхГрупп.Количество() = 0 Тогда
					
					ВаучерПодходит = ЛОЖЬ;
					Для Каждого СтрокаНоменклатурныхГрупп Из Ваучер.ДляНоменклатурныхГрупп Цикл
						
						Если СтрокаНоменклатурныхГрупп.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа Тогда
							
							ВаучерПодходит = ИСТИНА;
							Если НЕ СтрокаНоменклатурныхГрупп.НеНакапливать Тогда								
								Процент = СтрокаНоменклатурныхГрупп.ПроцентСкидки;	
							Иначе
								Процент = 0;
							КонецЕсли;
							
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ВаучерПодходит				
					И НЕ Ваучер.ДляНоменклатурыИЕеГрупп.Количество() = 0 Тогда
					
					ВаучерПодходит = ЛОЖЬ;
					Для Каждого СтрокаНоменклатуры Из Ваучер.ДляНоменклатурыИЕеГрупп Цикл
						Если (НЕ СтрокаНоменклатуры.Номенклатура.ЭтоГруппа
							И СтрокаНоменклатуры.Номенклатура = Номенклатура)
							ИЛИ (СтрокаНоменклатуры.Номенклатура.ЭтоГруппа
							И Номенклатура.ПринадлежитЭлементу(СтрокаНоменклатуры.Номенклатура)) Тогда
							
							ВаучерПодходит = ИСТИНА;
							Если НЕ СтрокаНоменклатуры.НеНакапливать Тогда								
								Процент = СтрокаНоменклатуры.ПроцентСкидки;	
							Иначе
								Процент = 0;
							КонецЕсли;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;	
			КонецЕсли;
			
			Если ВаучерПодходит				
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") 
				И ЗначениеЗаполнено(Склад)
				И НЕ Ваучер.ДляСкладов.Количество() = 0 Тогда
				
				ВаучерПодходит = ЛОЖЬ;
				Для Каждого СтрокаСклада Из Ваучер.ДляСкладов Цикл
					
					Если СтрокаСклада.Склад = Склад Тогда
						
						ВаучерПодходит = ИСТИНА;
						Если НЕ СтрокаСклада.НеНакапливать Тогда								
							Процент = СтрокаСклада.ПроцентСкидки;	
						Иначе
							Процент = 0;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ВаучерПодходит Тогда
				Результат = Сумма * Процент;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ВычислитьСуммуНакопления

Функция   ПолучитьПроцентСкилкиПериода(Знач ОбъектСкидки, Знач Дата, Знач Склад) Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СкидкиПериодаСрезПоследних.Скидка
	|ИЗ РегистрСведений.СкидкиПериода.СрезПоследних(
	|			&Дата, ";		
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	УстановленСклад = ЛОЖЬ;
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И ЗначениеЗаполнено(Склад) Тогда
		
		Запрос.Текст = Запрос.Текст + " Склад = &Склад ";
		Запрос.УстановитьПараметр("Склад", Склад);
		УстановленСклад = ИСТИНА;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппа")
		И ЗначениеЗаполнено(ОбъектСкидки.НоменклатурнаяГруппа) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(УстановленСклад, " И ", "") + " НоменклатурнаяГруппа = &НоменклатурнаяГруппа ";
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", ОбъектСкидки.НоменклатурнаяГруппа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ") КАК СкидкиПериодаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Скидка;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьПроцентСкилкиПериода

Функция   ПолучитьПоследнегоПоставщика(Знач Номенклатура, Знач Дата = Неопределено, Знач КоличествоПриход = 1) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ КоличествоПриход = 0
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
		
		НетОграниченияПоДате = Дата = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПоступленияТовараТовары.Ссылка.КлиентПоставщик КАК Поставщик,
		|	ПоступленияТовараТовары.Ссылка.Дата КАК Дата
		|ИЗ Документ.ПоступленияТовара.Товары КАК ПоступленияТовараТовары
		|ГДЕ ПоступленияТовараТовары.Номенклатура = &Номенклатура
		|	И (&НетОграниченияПоДате ИЛИ ПоступленияТовараТовары.Ссылка.Дата <= &Дата)
		|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("НетОграниченияПоДате", НетОграниченияПоДате);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = ВыборкаДетальныеЗаписи.Поставщик;				
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьСкоростьРеализации(Знач Номенклатура, Знач СкоростьПродажВ = Неопределено, Знач ВыводитьСТекстом = ЛОЖЬ, Знач ДатаОкончания = Неопределено, Знач ТолькоПоследнийПериод = ЛОЖЬ) Экспорт
	
	Результат = 0;
	
	Если СкоростьПродажВ = Неопределено Тогда
		СкоростьПродажВ = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьВКарточкеНоменклатурыСкоростьПродажВ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(СкоростьПродажВ) Тогда
		
		Если ДатаОкончания = Неопределено Тогда
			ДатаОкончания = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		ЧислоПериодов = 0;
		
		Если НЕ ТолькоПоследнийПериод Тогда
			ДатаНачала = ОбщийМодульПовтор.ПолучитьДатуПервойРеализации(Номенклатура);
			
			Если ДатаНачала = Неопределено Тогда
				ДатаНачала = ДатаОкончания;
				ЧислоПериодов = 0;
			Иначе
				
				Если СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаГод Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / 3600 * 24 * 365.259636;
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаМесяц Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / 3600 * 24 * 30.43685;
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаКвартал Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / 3600 * 24 * 30.43685 * 3;
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаНеделю Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / 3600 * 24 * 7;
				ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
					ЧислоПериодов = (ДатаОкончания - ДатаНачала) / 3600 * 24;
				КонецЕсли;	
			КонецЕсли;
			
		Иначе
			ДатаНачала = ДатаОкончания;
			Если СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаГод Тогда
				ДатаНачала = ДатаНачала - 3600 * 24 * 365.259636;
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаМесяц Тогда
				ДатаНачала = ДатаНачала - 3600 * 24 * 30.43685;
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаКвартал Тогда
				ДатаНачала = ДатаНачала - 3600 * 24 * 30.43685 * 3;
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыПродаж.ЗаНеделю Тогда
				ДатаНачала = ДатаНачала - 3600 * 24 * 7;
			ИначеЕсли СкоростьПродажВ = Перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
				ДатаНачала = ДатаНачала - 3600 * 24;
			КонецЕсли;
			ЧислоПериодов = 1;
		КонецЕсли;
		
		Если НЕ ЧислоПериодов = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ СУММА(Продажи.Количество) КАК Количество,
			|	СУММА(1) КАК ЧислоПродаж
			|ИЗ РегистрНакопления.Продажи КАК Продажи
			|ГДЕ 	Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И Продажи.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ЧислоПродаж = 0;
				Количество  = 0;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЧислоПродаж = ЧислоПродаж + ВыборкаДетальныеЗаписи.ЧислоПродаж;
					Количество  = Количество + ВыборкаДетальныеЗаписи.Количество;
				КонецЦикла;
				
				Если НЕ ЧислоПродаж = 0 Тогда
					Результат = (Количество / ЧислоПродаж) / ЧислоПериодов;
				КонецЕсли; 	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыводитьСТекстом Тогда
			РезультатСтрока = "" + Формат(Результат,"ЧДЦ=3; ЧРД=.; ЧРГ=' '; ЧГ=0")  + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(СкоростьПродажВ));
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьСТекстом Тогда
		Возврат РезультатСтрока;
	Иначе
		Возврат Результат;	
	КонецЕсли;
	
КонецФункции //ПолучитьСкоростьРеализации

Функция   ПолучитьСтруктураОстаткаТоваров(Знач ИспользоватьСложныйМеханизмЦен = Неопределено, Знач ВидЦен = Неопределено, Знач ОтобратьОстаткиПоСкладу = Неопределено, Знач ВестиУчетПоСкладам = Неопределено) Экспорт	
	
	Если ВестиУчетПоСкладам = Неопределено Тогда
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
	КонецЕсли;
	
	Если ИспользоватьСложныйМеханизмЦен = Неопределено Тогда
		ИспользоватьСложныйМеханизмЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСложныйМеханизмЦен");
	КонецЕсли;
	
	Если ВидЦен = Неопределено Тогда
		ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Если ВидЦен = Неопределено 
		ИЛИ НЕ ИспользоватьСложныйМеханизмЦен Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
		|	ТоварыОстатки.СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки";
		
	Иначе
		
		Если  ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток КАК КоличествоОстаток,
			|	ВЫБОР КОГДА ЕСТЬNULL(ВложенныйЗапрос.ЕдиницаИзмерения.Количество, 0) = 0
			|			ТОГДА ТоварыОстатки.КоличествоОстаток
			|		ИНАЧЕ ТоварыОстатки.КоличествоОстаток / ЕСТЬNULL(ВложенныйЗапрос.ЕдиницаИзмерения.Количество, 1)
			|	КОНЕЦ * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена) КАК СуммаОстаток
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
			|			ЦеныСрезПоследних.Цена КАК Цена,
			|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены,
			|			ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|		ИЗ РегистрСведений.Цены.СрезПоследних КАК ЦеныСрезПоследних
			|		ГДЕ ЦеныСрезПоследних.ВидЦен = &ВидЦен) КАК ВложенныйЗапрос
			|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
			|	ТоварыОстатки.КоличествоОстаток * ЕСТЬNULL(ВложенныйЗапрос.Цена, ТоварыОстатки.Номенклатура.Цена) КАК СуммаОстаток
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, %1%) КАК ТоварыОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЦеныСрезПоследних.Цена КАК Цена,
			|			ЦеныСрезПоследних.Номенклатура КАК НоменклатураЦены
			|		ИЗ РегистрСведений.Цены.СрезПоследних КАК ЦеныСрезПоследних
			|		ГДЕ ЦеныСрезПоследних.ВидЦен = &ВидЦен) КАК ВложенныйЗапрос
			|		ПО ТоварыОстатки.Номенклатура = ВложенныйЗапрос.НоменклатураЦены";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтобратьОстаткиПоСкладу)
		И ВестиУчетПоСкладам Тогда
		
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " Склад = &ОтобратьОстаткиПоСкладу ");
		Запрос.УстановитьПараметр("ОтобратьОстаткиПоСкладу", ОтобратьОстаткиПоСкладу);
		
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	ОбщееКоличество  = 0;
	НаСумму 		 = 0;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
				ОбщееКоличество = ОбщееКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				НаСумму = НаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
			Исключение
			Конецпопытки;
		КонецЦикла;                            	
	КонецЕсли;
	
	СтруктураОтвета.Вставить("НаСумму", НаСумму);
	СтруктураОтвета.Вставить("ОбщееКоличество", ОбщееКоличество);
	
	Возврат СтруктураОтвета;
	
КонецФункции
