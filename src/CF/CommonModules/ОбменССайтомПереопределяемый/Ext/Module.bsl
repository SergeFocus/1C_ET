// Суров С.В <s_surov@mail.ru>

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

// Определяет имя формы узла плана обмена "Обмен с сайтом"
// 
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
// 
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - Объект узла плана обмена "ОбменССайтом"
// 
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ВестиУчетЗаказовКлиентов")) И ТекущийОбъект.ОбменЗаказами Тогда
		Форма.Объект.ОбменЗаказами = ЛОЖЬ;
		Форма.Элементы.СтраницаОбменЗаказами.Видимость = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
// 
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события
// 
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.СпособИдентификацииКонтрагентов)  Тогда
		
		Форма.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП;
		
	КонецЕсли;
	
	Форма.ИспользоватьПартнеровКакКонтрагентов = ИСТИНА;
	Форма.ИспользуютсяГруппыДоступаПартнеров   = ЛОЖЬ;
	
	Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа доступа создаваемых контрагентов");
	Иначе
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа доступа создаваемых партнеров");
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
// 
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
// 
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
// 
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект
//  ПараметыЗаписи - Структура - структура, содержащая параметры записи
// 
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры
// Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиОбновлениеПакетаПредложений"
// плана обмена "Обмен с сайтом"
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.ВидЦенРеализацииСЭтогоСклада КАК ВидЦены,
	|	Склады.Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад,
	|	Склады.ВидЦенРеализацииСЭтогоСклада.Ссылка.* КАК Соглашение}
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.ВНаличииОстаток,
	|	ВложенныйЗапрос.ВРезервеПодЗаказОстаток,
	|	ВложенныйЗапрос.РезервИзПоступлений
	|ПОМЕСТИТЬ СвободныеОстаткиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.Склад КАК Склад,
	|		СУММА(ТоварыОстатки.КоличествоОстаток) КАК ВНаличииОстаток,
	|		0 КАК ВРезервеПодЗаказОстаток,
	|		0 КАК РезервИзПоступлений
	|	ИЗ
	|		РегистрНакопления.Товары.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад}) КАК ТоварыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыОстатки.Номенклатура,
	|		ТоварыОстатки.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Клиент.Склад,
	|		0,
	|		СУММА(ЗаказыКлиентовОстатки.КоличествоОстаток),
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Клиент.Склад).* КАК Склад}) КАК ЗаказыКлиентовОстатки
	|	ГДЕ
	|		ЗаказыКлиентовОстатки.КоличествоОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Клиент.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.Номенклатура,
	|		ЗаказыПоставщикамОстатки.Поставщик.Склад,
	|		0,
	|		0,
	|		СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток)
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Поставщик.Склад).* КАК Склад}) КАК ЗаказыПоставщикамОстатки
	|	ГДЕ
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикамОстатки.Поставщик.Склад,
	|		ЗаказыПоставщикамОстатки.Номенклатура) КАК ВложенныйЗапрос
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	Товары.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСклады.ВидЦены КАК ТипЦены,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗаЕдиницу,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ЕСТЬNULL(СвободныеОстаткиОстатки.РезервИзПоступлений, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе,
	|	ДоступныеСклады.ВидЦены.ВалютаЦены.Код КАК ТипЦеныВалютаКод,
	|	"""" КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстаткиОстатки КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (Товары.Ссылка = СвободныеОстаткиОстатки.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&Период, {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = Товары.Ссылка)
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦен = ДоступныеСклады.ВидЦены)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура,
	|	(ЕСТЬNULL(СвободныеОстаткиОстатки.РезервИзПоступлений, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";

КонецПроцедуры
 // Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	// ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	// ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	// ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом"
//   Параметры:
// ПоляОтбора - Структура, в которую добавляются поля отбора
// 		* Ключ - Наименование поля отбора
// 		* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦеныИОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цены");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	// Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
	// 	
	// 	НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
	// 	НоваяСтрока.Наименование = "СегментНоменклатуры";
	// 	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сегмент номенклатуры");
	// 	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
	// 	
	// КонецЕсли;
	
	ПоляОтбора.Вставить("ЦеныИОстатки", ПоляЦеныИОстатки);
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений"
// плана обмена "Обмен с сайтом"
// Параметры:
// 		ТекстыЗапросов - структура содердащая тексты запросов
// 			* Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
// 					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
// 			* Остатки- поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
// 					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом"
// 
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.Ссылка КАК ВидЦен,
	|	СоглашенияСКлиентами.ВалютаЦены КАК Валюта,
	|	СоглашенияСКлиентами.Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.ВидыЦен КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.Наименование КАК НоменклатураНаименование,
	|	Товары.Артикул КАК НоменклатураАртикул,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	"""" КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ИСТИНА КАК ТипЦеныЦенаВключаетНДС,
	|	ДоступныеСоглашенияСоглашения.Наименование КАК ТипЦеныНаименование,
	|	ДоступныеСоглашенияСоглашения.Валюта.Наименование КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗаЕдиницу,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	"""" КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕдиницыИзмерения.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (Товары.Ссылка = ЕдиницыИзмерения.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Цены.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = Товары.Ссылка)
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦен = ДоступныеСоглашенияСоглашения.ВидЦен)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура}";

	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.ВидЦенРеализацииСЭтогоСклада КАК ВидЦены,
	|	Склады.Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад,
	|	Склады.ВидЦенРеализацииСЭтогоСклада.Ссылка.* КАК Соглашение}
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.ВНаличииОстаток,
	|	ВложенныйЗапрос.ВРезервеПодЗаказОстаток,
	|	ВложенныйЗапрос.РезервИзПоступлений
	|ПОМЕСТИТЬ СвободныеОстаткиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.Склад КАК Склад,
	|		СУММА(ТоварыОстатки.КоличествоОстаток) КАК ВНаличииОстаток,
	|		0 КАК ВРезервеПодЗаказОстаток,
	|		0 КАК РезервИзПоступлений
	|	ИЗ
	|		РегистрНакопления.Товары.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Склад).* КАК Склад}) КАК ТоварыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыОстатки.Номенклатура,
	|		ТоварыОстатки.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Клиент.Склад,
	|		0,
	|		СУММА(ЗаказыКлиентовОстатки.КоличествоОстаток),
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Клиент.Склад).* КАК Склад}) КАК ЗаказыКлиентовОстатки
	|	ГДЕ
	|		ЗаказыКлиентовОстатки.КоличествоОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Клиент.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.Номенклатура,
	|		ЗаказыПоставщикамОстатки.Поставщик.Склад,
	|		0,
	|		0,
	|		СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток)
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(&Период, {(Номенклатура).* КАК Номенклатура, (Поставщик.Склад).* КАК Склад}) КАК ЗаказыПоставщикамОстатки
	|	ГДЕ
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикамОстатки.Поставщик.Склад,
	|		ЗаказыПоставщикамОстатки.Номенклатура) КАК ВложенныйЗапрос
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Ссылка КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	Товары.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ДоступныеСклады.Наименование КАК СкладНаименование,
	|	ЕСТЬNULL(СвободныеОстаткиОстатки.РезервИзПоступлений, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0) КАК ОстатокНаСкладе
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения,
	|	СкладНаименование}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстаткиОстатки КАК СвободныеОстаткиОстатки
	|		ПО ДоступныеСклады.Склад = СвободныеОстаткиОстатки.Склад
	|			И (Товары.Ссылка = СвободныеОстаткиОстатки.Номенклатура)
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|{ГДЕ
	|	Товары.Ссылка.* КАК Номенклатура,
	|	(ЕСТЬNULL(СвободныеОстаткиОстатки.РезервИзПоступлений, 0) + ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток, 0)) КАК ОстатокНаСкладе}";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаПакетПредложений
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	// ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	// ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	// ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	// 
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
// ПоляОтбора - Соотвествие, в которую добавляются поля отбора
// 		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений"
// 		* Структура с полями данного набора
// 			* Ключ - Наименование поля отбора
// 			* Значение - Описание типа значения добавляемого поля
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
	ПоляЦены = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦены.Добавить();
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цены");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	// Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
	// 	
	// 	НоваяСтрока = ПоляЦены.Добавить();
	// 	НоваяСтрока.Наименование = "СегментНоменклатуры";
	// 	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сегмент номенклатуры");
	// 	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
	// 	
	// 	ПоляОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	// 	НоваяСтрока = ПоляОстатки.Добавить();
	// 	НоваяСтрока.Наименование = "СегментНоменклатуры";
	// 	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сегмент номенклатуры");
	// 	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
	// 	
	// 	ПоляОтбора.Вставить("Остатки", ПоляОстатки);
	// 	
	// КонецЕсли;
	
	ПоляОтбора.Вставить("Цены", ПоляЦены);

	
КонецПроцедуры

// Формирует тексты запросов, которые позволит получать таблицы значений,
// описанные в макете "СхемаВыгрузкиКаталогПакетПредложений"
// плана обмена "Обмен с сайтом"
// Параметры:
// 	ТекстыЗапросов - структура содердащая тексты запросов
// 		* Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
// 
//      * Свойства      - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
// 
//      * Файлы          - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
// 
//      * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характерстики"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
// 
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Владелец,
	|	Штрихкоды.ЕдиницаИзмерения,
	|	МАКСИМУМ(Штрихкоды.ШтрихКод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтриховыеКоды
	|ИЗ
	|	РегистрСведений.ШтрихКоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|{ГДЕ
	|	Штрихкоды.Номенклатура.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.ЕдиницаИзмерения,
	|	Штрихкоды.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	Номенклатура.Родитель КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеДляПечати КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	""Товар"" КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.НоменклатурнаяГруппа КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Комментарий КАК НоменклатураОписание,
	|	"""" КАК НоменклатураОсновноеИзображение,
	|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	"""" КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	"""" КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕСТЬNULL(ШтрихКодыНоменклатуры.Штрихкод, """") КАК НоменклатураШтрихкод
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение,
	|	ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Номенклатура.Ссылка = ЕдиницыИзмерения.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтриховыеКоды КАК ШтрихКодыНоменклатуры
	|		ПО Номенклатура.Ссылка = ШтрихКодыНоменклатуры.Владелец
	|			И (ШтрихКодыНоменклатуры.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|				ИЛИ ЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
	|					И ШтрихКодыНоменклатуры.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.Пустаяссылка))
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|{ГДЕ
	|	Номенклатура.Ссылка.*}";
	
	// Если ТекстыЗапросов.Свойство("Характеристики") Тогда
	// 	
	// 	ТекстыЗапросов.Характеристики = 
	// 	"ВЫБРАТЬ
	// 	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	// 	|	НоменклатураСегмента.Характеристика КАК Характеристика,
	// 	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	// 	|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	// 	|ИЗ
	// 	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	// 	|{ГДЕ
	// 	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры,
	// 	|	НоменклатураСегмента.Номенклатура.*}
	// 	|
	// 	|ИНДЕКСИРОВАТЬ ПО
	// 	|	Номенклатура, 
	// 	|	Характеристика
	// 	|;
	// 	|
	// 	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	// 	|ВЫБРАТЬ
	// 	|	Номенклатура.Ссылка КАК Номенклатура,
	// 	|	ВЫБОР
	// 	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	// 	|			ТОГДА Номенклатура.Ссылка
	// 	|		ИНАЧЕ Номенклатура.ВидНоменклатуры
	// 	|	КОНЕЦ КАК ВладелецХарактеристик
	// 	|ПОМЕСТИТЬ ТаблицаВладельцевНоменклатуры
	// 	|ИЗ
	// 	|	Справочник.Номенклатура КАК Номенклатура
	// 	|ГДЕ
	// 	|	НЕ Номенклатура.ЭтоГруппа
	// 	|	И НЕ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	// 	|{ГДЕ
	// 	|	Номенклатура.Ссылка.*,
	// 	|	(Номенклатура.Ссылка В
	// 	|			(ВЫБРАТЬ
	// 	|				ОтборПоСегментуНоменклатуры.Номенклатура Как Ссылка
	// 	|			ИЗ
	// 	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	// 	|			ГДЕ
	// 	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}
	// 	|;
	// 	|
	// 	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	// 	|ВЫБРАТЬ
	// 	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	// 	|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
	// 	|	ТаблицаВладельцевНоменклатуры.Номенклатура КАК Номенклатура
	// 	|{ВЫБРАТЬ
	// 	|	Характеристика.*,
	// 	|	ХарактеристикаНаименование,
	// 	|	Номенклатура.*}
	// 	|ИЗ
	// 	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	// 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВладельцевНоменклатуры КАК ТаблицаВладельцевНоменклатуры
	// 	|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВладельцевНоменклатуры.ВладелецХарактеристик
	// 	|{ГДЕ
	// 	|	(ХарактеристикиНоменклатуры.Ссылка В
	// 	|			(ВЫБРАТЬ
	// 	|				ОтборПоСегментуНоменклатуры.Характеристика Как Ссылка
	// 	|			ИЗ
	// 	|				ОтборПоСегментуНоменклатуры КАК ОтборПоСегментуНоменклатуры
	// 	|			ГДЕ
	// 	|				ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры))}";
	// 	
	// КонецЕсли;
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.ОбъектВладелец КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.ДополнительныйРеквизит КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.ЗначениеРеквизита КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитов КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.ОбъектВладелец ССЫЛКА Справочник.Номенклатура
	|{ГДЕ
	|	НоменклатураДополнительныеРеквизиты.ОбъектВладелец.* КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.ДополнительныйРеквизит.* КАК СвойствоНоменклатуры}
	|";
	
	Для Сч=1 По 10 Цикл
	
		ТекстыЗапросов.Свойства = ТекстыЗапросов.Свойства + "
		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	НоменклатурныеГруппыРеквизитыНоменклатуры.ДополнительныйРеквизит,
		|	Номенклатура.РеквизитНоменклатурнойГруппы"+Сч+"
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы.РеквизитыНоменклатуры КАК НоменклатурныеГруппыРеквизитыНоменклатуры
		|		ПО Номенклатура.НоменклатурнаяГруппа = НоменклатурныеГруппыРеквизитыНоменклатуры.Ссылка
		|			И (НоменклатурныеГруппыРеквизитыНоменклатуры.НомерСтроки = "+Сч+")
		|{ГДЕ
		|	Номенклатура.Ссылка.* КАК Номенклатура,
		|	НоменклатурныеГруппыРеквизитыНоменклатуры.ДополнительныйРеквизит.* КАК СвойствоНоменклатуры}
		|";
	
	КонецЦикла;
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.СвязанныйОбъект КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	НоменклатураПрисоединенныеФайлы.ХранилищеИзображения КАК НоменклатураФайлДанныеФайла,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.РасширениеФайла КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.СсылкаНаИзображение КАК НоменклатураФайлСсылкаНаИзображение,
	|	ВЫБОР
	|		КОГДА НоменклатураПрисоединенныеФайлы.ИмяФайлаИзображения ПОДОБНО """"
	|			ТОГДА НоменклатураПрисоединенныеФайлы.СсылкаНаИзображение
	|		ИНАЧЕ НоменклатураПрисоединенныеФайлы.ИмяФайлаИзображения
	|	КОНЕЦ КАК НоменклатураФайлПутьКФайлу,
	|	ВЫБОР
	|		КОГДА НоменклатураПрисоединенныеФайлы.ИзображениеВБазеДанных
	|			ТОГДА ""ВБазе""
	|		КОГДА НоменклатураПрисоединенныеФайлы.ИмяФайлаИзображения ПОДОБНО """"
	|			ТОГДА ""ВИнтернете""
	|		ИНАЧЕ ""НаДиске""
	|	КОНЕЦ КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Комментарий КАК НоменклатураФайлОписание,
	|	НоменклатураПрисоединенныеФайлы.ЭтоОсновноеИзображениеОбъекта КАК ОсновноеИзображение
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлСсылкаНаИзображение,
	|	НоменклатураФайлТипХраненияФайла,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.Изображения КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.СвязанныйОбъект ССЫЛКА Справочник.Номенклатура
	|	И &ВыгружатьКартинки
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.СвязанныйОбъект.*}";

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстыЗапросовКаталог
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	// ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	// ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	// ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	// ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МассивРасширенийКартинок", ОбменССайтом.МассивДопустимыхРасширенийИзображений());
	// ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьПрочиеФайлы", ПрикладныеПараметры.ВыгружатьФайлы);
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьКартинки", ПрикладныеПараметры.ВыгружатьКартинки);
	
КонецПроцедуры

// Заполняет соотвествие полями, которые должны быть добавлены в отбор настройки каталога 
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Поля в соотвествии хранятся с привязкой к набору данных, к которому они относятся 
//   Параметры:
// 	* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений" 
// 	* ПоляОтбора - Таблица значений, в которую добавляются поля отбора			
// 		* Наименование - строка - Имя поля
// 		* Синоним - строка - пользовательское представление
// 		* ТипЗначения - ОписаниеТипов - Тип значения поля
// 		* Отбор - Массив - Содержит стуктуры  - описание отбора, необходимого при открытии формы выбора поля
// 
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
	// Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
	// 	
	// 	ПоляНоменклатуры = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	// 	
	// 	НоваяСтрока = ПоляНоменклатуры.Добавить();
	// 	НоваяСтрока.Наименование = "СегментНоменклатуры";
	// 	НоваяСтрока.Синоним = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сегмент номенклатуры");
	// 	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
	// 	
	// 	
	// 	ПоляОтбора.Вставить("Номенклатура", ПоляНоменклатуры);
	// 	ПоляОтбора.Вставить("Свойства", ПоляНоменклатуры);
	// 	ПоляОтбора.Вставить("Файлы", ПоляНоменклатуры);
	// 	ПоляОтбора.Вставить("Характеристики", ПоляНоменклатуры);
	// 	
	// КонецЕсли;
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки
// 
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется
// 
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	// Если ВРег(ИмяМакета) = ВРег("Каталог") 
	// 	ИЛИ ВРег(ИмяМакета) = ВРег("ПакетПредложений")
	// 	ИЛИ ВРег(ИмяМакета) = ВРег("ОбновлениеПакетаПредложений") Тогда
	// 	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек, ИСТИНА);
	// КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом"
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец КАК Заказ,
	|	ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита КАК НомерЗаказаНаСайте,
	|	СостоянияЗаказовКлиентов.СостояниеЗаказаКлиента КАК СостояниеЗаказа,
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец.ТовараНаСумму - ЕСТЬNULL(ОплатаПоЗаказам.СуммаОстаток, 0) КАК ЗаказКОплатеОстаток,
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец.ТовараНаСумму - ЕСТЬNULL(ОтгрузкиПоЗаказам.Сумма, 0) - ЕСТЬNULL(ОтгрузкиПоЗаказамСтр.Сумма, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец.Валюта КАК Валюта
	|ПОМЕСТИТЬ ЗаказыДляВыгрузки
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитов КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказовКлиентов
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = СостоянияЗаказовКлиентов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходыТовара КАК ЗаказКлиента_
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = ЗаказКлиента_.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаПоЗаказам.Остатки(, ) КАК ОплатаПоЗаказам
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = ОплатаПоЗаказам.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЗаказКлиента_.ТовараНаСумму) КАК Сумма,
	|			ЗаказКлиента_.ЗаказКлиента КАК Заказ
	|		ИЗ
	|			Документ.РасходыТовара КАК ЗаказКлиента_
	|		ГДЕ
	|			ЗаказКлиента_.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказКлиента_.ЗаказКлиента) КАК ОтгрузкиПоЗаказам
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = ОтгрузкиПоЗаказам.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ЗаказКлиента_.Сумма) КАК Сумма,
	|			ЗаказКлиента_.ЗаказКлиента КАК Заказ
	|		ИЗ
	|			Документ.РасходыТовара.Товары КАК ЗаказКлиента_
	|		ГДЕ
	|			ЗаказКлиента_.Ссылка.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказКлиента_.ЗаказКлиента) КАК ОтгрузкиПоЗаказамСтр
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = ОтгрузкиПоЗаказамСтр.Заказ
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит = &НомерНаСайте
	|	И ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита <> """"""""
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОтгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(ЕСТЬNULL(ДвижениеТоваров.Регистратор, ДвижениеТоваровСтр.Регистратор)) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаказКлиента_.Ссылка КАК Регистратор,
	|				ЗаказКлиента_.ЗаказКлиента КАК Заказ
	|			ИЗ
	|				Документ.РасходыТовара КАК ЗаказКлиента_
	|			ГДЕ
	|				ЗаказКлиента_.Проведен) КАК ДвижениеТоваров
	|			ПО ЗаказыДляВыгрузки.Заказ = ДвижениеТоваров.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗаказКлиента_.Ссылка КАК Регистратор,
	|				ЗаказКлиента_.ЗаказКлиента КАК Заказ
	|			ИЗ
	|				Документ.РасходыТовара.Товары КАК ЗаказКлиента_
	|			ГДЕ
	|				ЗаказКлиента_.Ссылка.Проведен) КАК ДвижениеТоваровСтр
	|			ПО ЗаказыДляВыгрузки.Заказ = ДвижениеТоваровСтр.Заказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(РасчетыСКлиентами.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаПоЗаказам КАК РасчетыСКлиентами
	|			ПО ЗаказыДляВыгрузки.Заказ = РасчетыСКлиентами.Заказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	ЗаказыДляВыгрузки.Заказ,
	|	ЗаказыДляВыгрузки.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ЕСТЬNULL(ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаНаСайте,
	|	ЗаказыДляВыгрузки.ЗаказКОплатеОстаток,
	|	ЗаказыДляВыгрузки.ЗаказКОтгрузкеОстаток,
	|	ЗаказыДляВыгрузки.Заказ.Номер КАК ЗаказНомер,
	|	ЗаказыДляВыгрузки.Заказ.Дата КАК ЗаказДата,
	|	ЗаказыДляВыгрузки.Заказ.Проведен КАК ЗаказПроведен,
	|	ЗаказыДляВыгрузки.Заказ.ПометкаУдаления КАК ЗаказПометкаУдаления,
	|	ЕСТЬNULL(ЗаказОплата.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ЗаказОплата.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ЗаказОтгрузка.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ЗаказОтгрузка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОтгрузки,
	|	ЕСТЬNULL(Валюты.Код, ""руб"") КАК ЗаказВалютаКод,
	|	ЗаказыДляВыгрузки.НалогообложениеНДС КАК ЗаказНалогообложениеНДС,
	|	ИСТИНА КАК ЗаказСуммаВключаетНДС,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСостояниеЗаказа,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСтатусЗаказа,
	|	ВЫБОР
	|		КОГДА ЗаказыДляВыгрузки.СостояниеЗаказа = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.ВыполненПолученКлиентом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаказЗакрыт,
	|	ЗаказыДляВыгрузки.Заказ.Комментарий КАК ЗаказКомментарий,
	|	ЗаказыДляВыгрузки.Заказ.КлиентПоставщик КАК ЗаказКонтрагент,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК ЗаказКурс,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ТоварыНоменклатура,
	|	ЕСТЬNULL(ДанныеНоменлатуры.Артикул, """") КАК ТоварыНоменклатураАртикул,
	|	ЕСТЬNULL(""Товар"", """") КАК ТоварыНоменклатураТипНоменклатуры,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ЕдиницаИзмерения, """") КАК ТоварыЕдиницаИзмерения,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ЕдиницаИзмерения.Код, """") КАК ТоварыЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ЕдиницаИзмерения.Наименование, """") КАК ТоварыЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ЕдиницаИзмерения.Наименование, """") КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	"""" КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ЕдиницаИзмерения.Код, """") КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Количество, 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Цена, 0) КАК ТоварыЦена,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.СтавкаНДС, 0) КАК ТоварыСтавкаНДС,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) * ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.СтавкаНДС, 0) / (100 + ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.СтавкаНДС, 0)) КАК ЧИСЛО(15, 2)) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) КАК ТоварыВсего,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентСкидки, 0) КАК ТоварыПроцентСкидки,
	|	НЕОПРЕДЕЛЕНО КАК ТоварыХарактеристика,
	|	ЕСТЬNULL(ЗаказКлиента_.ЗаказКлиента.ТовараНаСумму, 0) КАК ЗаказСуммаДокумента,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) - ЕСТЬNULL(ЗаказКлиентаТовары.СуммаБезСкидки, 0) КАК ТоварыСуммаСкидки,
	|	ЗаказыДляВыгрузки.Заказ.КлиентПоставщик КАК Контрагент,
	|	ЕСТЬNULL(Контрагенты.Наименование, """") КАК КонтрагентНаименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеДляПечати, """") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(Контрагенты.ПравовойСтатус, ЗНАЧЕНИЕ(Перечисление.ПравовойСтатус.ПустаяСсылка)) КАК КонтрагентПравовойСтатус,
	|	ЕСТЬNULL(Контрагенты.ИНН, """") КАК КонтрагентИНН,
	|	"""" КАК КонтрагентКПП,
	|	ЕСТЬNULL(Контрагенты.ОКПО, """") КАК КонтрагентКодПоОКПО
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте.*,
	|	ЗаказДатаНаСайте.*,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказНомер,
	|	ЗаказДата,
	|	ЗаказПроведен,
	|	ЗаказПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказНалогообложениеНДС.*,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа.*,
	|	ЗаказСтатусЗаказа.*,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	ЗаказКонтрагент.*,
	|	ЗаказКурс,
	|	ТоварыНоменклатура.*,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыНоменклатураТипНоменклатуры,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыКоличество,
	|	ТоварыЦена,
	|	ТоварыСумма,
	|	ТоварыСтавкаНДС,
	|	ТоварыСуммаНДС,
	|	ТоварыВсего,
	|	ТоварыПроцентСкидки,
	|	ТоварыХарактеристика,
	|	ЗаказСуммаДокумента,
	|	ТоварыСуммаСкидки,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентПравовойСтатус.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО}
	|ИЗ
	|	ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОплата КАК ЗаказОплата
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОплата.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОтгрузка КАК ЗаказОтгрузка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОтгрузка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитов КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец
	|			И (ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит = &ДатаНаСайте)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходыТовара КАК ЗаказКлиента_
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Контрагенты
	|			ПО ЗаказКлиента_.КлиентПоставщик = Контрагенты.Ссылка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиента_.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЗаказыДляВыгрузки.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Период,
	|				Валюта В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаказыДляВыгрузки.Валюта
	|					ИЗ
	|						ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки)) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказыДляВыгрузки.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходыТовара.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменлатуры
	|		ПО (ЗаказКлиентаТовары.Номенклатура = ДанныеНоменлатуры.Ссылка)";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре ПолучитьТекстЗапросаЗаказы
// или быть особенностью прикладного решения
//   Параметры:
// ПрикладныеПараметры - структура, содержащая в себе параметры, добавленные в прикладном решении
// ПараметрыСхемыКомпоновки - параметры схемы компоновки, тип значения - "ПараметрСхемыКомпоновкиДанных"
Процедура УстановитьПараметыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НомерНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	КонецЕсли;

	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ДатаНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	КонецЕсли;
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
	УдаляемыеПоля.Добавить("ТипЦены");
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом"
// Параметры:
//    УдаляемыеПоля - массив,который заполняется наименованием полей, которые должны быть удалены из отбора
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
// 
// Параметры:
//  ПараметрыОбмена  - Структрура - текущие параметры обмена
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
// 
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт

	Если (НЕ ПолучитьФункциональнуюОпцию("ВестиУчетЗаказовКлиентов")) И ПараметрыОбмена.ОбменЗаказами Тогда
		ПараметрыОбмена.ОбменЗаказами = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает в БП информацию о номера и дате заказа на сайте
// Параметры:
// ТаблицаЗаказов. Тип: Таблица значений
// 		Колонки:	Заказ - Ссылка на документ Заказ покупателя
// 					НомерЗаказа - строка, номер заказа на сайте
// 					ДатаЗаказа - Дата, Дата заказа на сайте
// 
// ПрикладныеПараметры. Тип: структура
// Структура содержит параметры обмена которые были добавлены в форму узла при встраивании подсистемы в прикладное решение
// 
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет информацию о складах
//   Параметры:
// СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена
// СписокСкладов - список значений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений)
// ИнформацияОТочкахСамомывоза - таблица значений - таблица, в которой будет храниться информация о точках самовывоза и складах
// 		Колонки:Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза)
// 				СкладНаименование - наименование склада
// 				СкладАдрес - Адресная информация о складе - Структура СкладАдрес
// 				СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация" 
// 
// 	СкладАдрес - Структура, в которой необходимо представить адресную информацию о складе
// 		Поля: ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира
// 
// 	СкладКонтактнаяИнформация - структура , в которой необходимо представить контактную информацию о складе
// 		Поля: ТелефонРабочий, Почта, КоординатыНаКарте, Прочее
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза,
	                                                   СписокСкладов,
	                                                   ИнформацияОТочкахСамовывоза,
	                                                   СкладАдрес,
	                                                   СкладКонтактнаяИнформация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.Наименование,
	|	Склады.Локация.Наименование КАК АдресСклада
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(Склады.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Склады.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = СкладАдрес;
		СтрокаТаблицы.СкладКонтактнаяИнформация = СкладКонтактнаяИнформация;
		
		Если ЗначениеЗаполнено(Выборка.АдресСклада) Тогда			
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресСклада;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов"
// устанавливается видимость табличной части "Соответствия заказов"
Процедура УстановитьВидимостьТабличнойЧастиСоотвествиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = ИСТИНА;// ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена
// 
// Параметры:
// 	Объект. Тип: СправочникОбъект, ДокументОбъект
// 			Регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект
// 
// 	МассивУзловТовары. Тип: массив значений
// 			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Номенклатурой
// 
// 	МассивУзловЗаказы. Тип: массив значений
// 			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случе если он является Заказом
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = ЛОЖЬ) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.Товары")
		Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.Цены") Тогда
		// Или ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДоступныеОстаткиПланируемыхПоступлений") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = ЛОЖЬ Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = ИСТИНА;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Изображения") Тогда
		
		Если НЕ ТипЗнч(Объект.СвязанныйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.СвязанныйОбъект);

		
	// ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
	// 	
	// 	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
	// 		
	// 		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
	// 		
	// 	КонецЕсли;
	// 	
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходыТовара") Тогда 
		
		// Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Если НЕ Объект.ЭтоЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбменССайтамиУТ.ВписатьСтатусЗаказа(Объект.Ссылка, Объект.Статус);
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена);
			Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
				
				Если Объект.ПометкаУдаления Тогда
					 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект.Ссылка);
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказов") Тогда
		
		Если Объект.Отбор.Найти("Заказ") = Неопределено 
			Или Не ЗначениеЗаполнено(Объект.Отбор.Заказ.Значение)
			Или ТипЗнч(Объект.Отбор.Заказ.Значение) <> Тип("ДокументСсылка.РасходыТовара") Тогда
			Возврат;
		КонецЕсли;
		
		Если Замещение Тогда
			
			Если Объект.Отбор.Количество() <> 1 Тогда
				Возврат;
			КонецЕсли;
			
			ДокументЗаказ = Объект.Отбор[0].Значение;
			
			МассивУзловКРегистрации = Новый Массив;
			Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
				
				СтруктураРеквизитовЗаказаНаСайте = РеквизитыЗаказаНаСайте(ДокументЗаказ, УзелОбмена);
				Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
					Если СтруктураРеквизитовЗаказаНаСайте.Свойство("НомерЗаказаНаСайте")
						И ЗначениеЗаполнено(СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте) Тогда
						
						МассивУзловКРегистрации.Добавить(УзелОбмена);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.Количество() <> 1 Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзловКРегистрации, ДокументЗаказ);
				Возврат;
				
			КонецЕсли;
			
			ЭлементОтбора = Объект.Отбор[0];
			Если ЭлементОтбора.Использование = ЛОЖЬ Тогда
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗаказ) Тогда
				Возврат;
			КонецЕсли;
			
			Если МассивУзловКРегистрации.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НовоеСостояниеЗаказа = Объект[0].Состояние;
			Если НовоеСостояниеЗаказа = Перечисления.СостоянияЗаказаКлиента.ВыполненПолученКлиентом Тогда
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СостоянияЗаказовКлиентов.СостояниеЗаказаКлиента КАК Состояние
				|ИЗ
				|	РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказовКлиентов
				|ГДЕ
				|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
				
				Запрос.УстановитьПараметр("Заказ", ДокументЗаказ);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					Если Выборка.Состояние = Перечисления.СостоянияЗаказаКлиента.НеАктуален Тогда
						Возврат;
					КонецЕсли;
					
					Если Выборка.Состояние = Перечисления.СостоянияЗаказаКлиента.ВыполненПолученКлиентом Тогда
						Возврат;
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловКРегистрации, ДокументЗаказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления
// Параметры
// 			ДанныеКонтрагентаПравовойСтатус. Тип ПеречислениеСсылка
// Перечисление, которое определяет юридический статус контрагента
// В зависимости от статуса контрагента при выгрузке на сайт
// будут по разному заполняется данные о контрагенте
// Если это юр. лицо заполняться будут ИНН, КПП, если это физ лицо то наименование
Процедура ОпределитьЭтоЮрЛицо(ПравовойСтатус, ЭтоЮрЛицо) Экспорт
	
	Если ПравовойСтатус = Перечисления.ПравовойСтатус.ЮрЛицо ИЛИ ПравовойСтатус = Перечисления.ПравовойСтатус.ЮрЛицоНеРезидент Тогда
		ЭтоЮрЛицо = ИСТИНА;
	ИначеЕсли ПравовойСтатус = Перечисления.ПравовойСтатус.ФизЛицо ИЛИ ПравовойСтатус = Перечисления.ПравовойСтатус.ИндивидуальныйПредприниматель Тогда
		ЭтоЮрЛицо = ЛОЖЬ;
	КонецЕсли;
	
	ЭтоЮрЛицо = ЛОЖЬ;
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана
// Параметры:
// 	Номенклатура. Тип - Ссылка, например, СправочникСсылка.Номенклатура
// 	Характерстика. Тип - Ссылка, например, СправочникСсылка.ХарактеристикиНоменклатуры
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	// Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
	// 	И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
	// 	И (НЕ Номенклатура.ЭтоГруппа)
	// 	И ЗначениеЗаполнено(Характеристика) Тогда
	// 	
	// 	Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
	// 	
	// КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта
//  Параметры:
// ПрикладныеПараметры - структура, содержащая параметры прикладного решения
// ТаблицаНомераИДатыЗаказа - Таблица значений, содержащая номера и даты заказов, загруженных с сайта
// 		Колонки: НомерЗаказа, ДатаЗаказа
// 
// Результат - таблица значений, в которую будет помещаться информация о заказах
// 		Колонки:ЗаказПокупателя - ссылка на документ Заказ
// 				НомерЗаказаНаСайте - Номер заказа
// 				НеОбновлятьЗаказ - Признак того, что Заказ не должен перезаписываться 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	НомерНаСайте = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
	МассивНомеров = ТаблицаНомераИДатыЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Запрос.УстановитьПараметр("НомерНаСайте", НомерНаСайте);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Значение КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодСтроки = -1
	|				ИЛИ ВложенныйЗапрос.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.Формируется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец КАК Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита КАК Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.СостояниеЗаказаКлиента, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.ВыполненПолученКлиентом)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.Формируется)
	|			КОНЕЦ) КАК Состояние,
	|		МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаТовары.НомерСтроки, -1)) КАК КодСтроки
	|	ИЗ
	|		РегистрСведений.ЗначенияДополнительныхРеквизитов КАК ЗаказКлиентаДополнительныеРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказов КАК СостоянияЗаказовКлиентов
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = СостоянияЗаказовКлиентов.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходыТовара.Товары КАК ЗаказКлиентаТовары
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = ЗаказКлиентаТовары.Ссылка
	|	ГДЕ
	|		ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит = &НомерНаСайте
	|		И ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита В(&МассивНомеров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец,
	|		ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.СостояниеЗаказаКлиента, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.ВыполненПолученКлиентом)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказаКлиента.Формируется)
	|			КОНЕЦ)) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя"
// Параметры
// ДокументОбъект - ДокументОбъект. Выходной параметр, запоняется созданным Объектом документа Заказ
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.РасходыТовара.СоздатьДокумент();
	
КонецПроцедуры

// Заполнят документ заказ данными с сайта
// 
// 	Параметры:
// 	
// 	ДокументОбъект. Тип - ДокументОбъект, объект документа Заказ покупателя
// 	
// 	СтруктураРеквизитов. Тип - Структура, структура, содержащая в себе значения реквизитов заказа, закгруженных с сайта
// 		Состав полей:
// 					Ид					- Идентификатор заказа, очень часто тоже что и номер
// 					Дата				- дата создания заказа на сайте
// 					Номер				- номер заказа на сайте
// 					ДатаОтгрузки		- дата отгрузки товара по заказу
// 					ВалютаДокументаКод	- 3-х значный идентификатор валюты
// 					ВидЦенНаименование	- наименование вида цены
// 					СуммаВключаетНДС	- признак включения НДС
// 					НаименованиеСкидки	- наименование скидки
// 					ПроцентСкидки		- процент скидки
// 					СуммаСкидки			- Сумма скидки по заказу
// 					СкладНаименование 	- наименование склада, точки самовывоза
// 					ПодразделениеНаименование - наименование подразделения
// 					Контрагент			- Ссылка на контрагента, который уже был идентифицирован в базе
// 					ТочкаСамовывоза		- Ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено
// 					Товары				- табличная часть документа
// 					Комментарий			- текстовый комментарий
// 	
// 	СвойстваЗаказа. Тип - соответсвие, содержит строкое представления свойств и значений заказа
// 	ПрикладныеПараметры. Тип - Структура, содержит параметры прикладного решения, добавленные на форму узла плана обмена
// 	ОписаниеОшибки. Тип - Строка, текстовое представление ошибки
// 	Успешно. Тип - Булево - Признак успешного заполнения документа
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа,
                         ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	Валюта = Неопределено;
	ОбменССайтамиУТ.ОбработатьВалютуXML(Валюта, РеквизитыЗаказа.ВалютаДокументаКод);
	
	ДокументОбъект.Дата          		= ?(ПрикладныеПараметры.ЗаписыватьДокументыТекущейДатой, ТекущаяДатаСеанса(), РеквизитыЗаказа.Дата);
	ДокументОбъект.Валюта        		= Валюта;
	ДокументОбъект.Организация   		= ПрикладныеПараметры.Организация;
	ДокументОбъект.КлиентПоставщик 		= РеквизитыЗаказа.Контрагент;
	ДокументОбъект.Склад           		= ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза),
	                                   РеквизитыЗаказа.ТочкаСамовывоза, 
	                                   ПрикладныеПараметры.Склад);
	ДокументОбъект.ЭтоЗаказ				= ИСТИНА;
	ДокументОбъект.НалогообложениеНДС	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НалогообложениеНДСпоУмолчанию");
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС") Тогда
		
		ДокументОбъект.Договор = ОбщийМодульСервер.ПодобратьДоговор(ДокументОбъект.Организация, 
														ДокументОбъект.КлиентПоставщик, 
														ДокументОбъект.Дата, 
														ДокументОбъект.ВидЦен);
		ДокументОбъект.ВидЦен			= ДокументОбъект.Договор.ВидЦен;
	КонецЕсли;
	
	Комментарий = "";
	Если Не ПустаяСтрока(РеквизитыЗаказа.Комментарий) Тогда
		Комментарий = Комментарий + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий менеджера на сайте") + ": " +РеквизитыЗаказа.Комментарий;
	КонецЕсли;
	
	КомментарийПокупателя = СвойстваЗаказа.Получить("Комментарии покупателя");
	Если Не КомментарийПокупателя = Неопределено И Не ПустаяСтрока(КомментарийПокупателя) Тогда
		Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий),"",Символы.ПС) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий покупателя на сайте") + ": " + КомментарийПокупателя;
	КонецЕсли;
	
	ДокументОбъект.Комментарий   = Комментарий;
	
	ТаблицаНоменклатура = Неопределено;
	
	ОбменССайтамиУТ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	ОбменССайтамиУТ.ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры);
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
		ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		Иначе
			ДокументОбъект.Статус = Перечисления.СостоянияЗаказаКлиента.Формируется;
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект.Статус = Перечисления.СостоянияЗаказаКлиента.Формируется;
		
	КонецЕсли;
	
	Успешно = ИСТИНА;
	
КонецПроцедуры

// Ищет контрагента согласно настройкам плана обмена
// Параметры:
// 	СтруктураСвойстваЗаказа. Тип - Структура.
// 		Содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо заполнить поле "Контрагент"
// 	ДанныеКонтрагента. Тип - Структура.
// 		Содержит реквизита контаргента, загруженная с заказа, по данным реквизитам будет происходить поиск существующего контрагента
// 		или создание нового
// 		Описание полей:
// 			ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контарагента
// 			ОфициальноеНаоименование - Тип строка.Официальное Наименование контрагента Юр лица
// 			ПолноеНаименование - Тип строка. Полное наименование контрагента Юр лица
// 			Наименование - Тип строка. Наименование контрагента
// 			ФИО - ФИО контрагента, если он Физ. лицо
// 			ОКПО - код ОКПО
// 			ИНН - код ИНН
// 			КПП - код КПП
// 			ИнформацияПоКонтрагенту - Таблица значений, содержит строковое представление и значение контакнтной информации о контрагенте
// 					Колонки:
// 						Вид - Вид контактной информации
// 						Значение - значение контактной инормации
// 			Пример: ИнформацияПоКонтрагенту
// 					Вид:							Значение:
// 					"Наименование"					Администратор
// 					"Полное наименование"			Администратор
// 					"Юр./Физ. лицо"					Физ. лицо
// 					"Юридический адрес"				Ул. Ленина
// 					"Почта"							email@example.com
// 					"Контактные лица"				Администратор
// 
// 	ПрикладныеПараметры - Стуктура, содаржащая параметры прикданого решения
// 	ОписаниеОшибки - текствое представление ошибки
// 
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт

	СтруктураСвойстваЗаказа.Вставить("Партнер", Неопределено);
	
	Наименование  = ДанныеКонтрагента.Наименование;
	ЮрЛицо        = ДанныеКонтрагента.ЮрЛицо;
	ИНН           = ДанныеКонтрагента.ИНН;
	КПП           = ДанныеКонтрагента.КПП;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Клиенты КАК Контрагенты";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование контрагента должно быть заполнено!"));
		
		Возврат ;
		
	КонецЕсли;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.Наименование ИЛИ ПустаяСтрока(ИНН) Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по наименованию")+ ": " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда
		
		Если ЮрЛицо и ЛОЖЬ Тогда// у нас КПП нет, поэтому всегда только по ИНН смотрим
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по ИНН") + ": %1, " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КПП") + ": %2",
			                            ИНН, КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		Иначе // у физического лица КПП не бывает
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("по ИНН") + ": %1", КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = ОбменССайтамиУТ.СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрагентСсылка = Выборка.Контрагент;
		// СтруктураСвойстваЗаказа.Партнер = Выборка.Партнер;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось найти или создать контрагента!"));
		
		Возврат ;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую
// Параметры:
// Номенклатура. Тип - неопределено. Ссылка на найденную или новую номенклатуру
// ДанныеНоменклатуры. Тип - структура. Структура, содержащая инормацию о номенклатуре, загруженной с сайта.
// 	По данным этой структуры необходимо провести поиск существующей номенклатуры или создать новую
// 		Описание полей:
// 				Ид - внутренний идентификатор номенклатуры
// 				АртикулНоменклатуры - Артикул номенклатуры
// 				НаименованиеНоменклатуры - Наименование номенклатуры
// 				ЕдиницаИзмерения  - ссылка на единицу измерения товара
// 				ЭтоУслуга - признак услуги
// 				СтавкаНДС - ставка НДС номенклатуры
// 
// ПрикладныеПараметры - структура,содержащая параметры прикладного решения, добавленные в узел плана обмена
// ОписаниеОшибки - текстовое представление ошибки
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	УникальныйИдентификаторКорректен = ИСТИНА;
	
	Если ОбменССайтамиУТ.УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ВидНоменклатуры = ?(ДанныеНоменклатуры.ЭтоУслуга, ПрикладныеПараметры.ВидНоменклатурыУслуга, ПрикладныеПараметры.ВидНоменклатурыТовар);
	
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоНаименованиюИВиду(ДанныеНоменклатуры.НаименованиеНоменклатуры, Неопределено);// ВидНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// ЕдиницаПоКлассификатору = Неопределено;
	// 
	// Если ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы) Тогда
	// 	
	// 	ЕдиницаПоКлассификатору = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы);
	// 	
	// КонецЕсли;
	// 
	// Если ЕдиницаПоКлассификатору = Неопределено 
	// 	И ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы) Тогда
	// 	
	// 	ЕдиницаПоКлассификатору = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы, ИСТИНА);
	// 	
	// КонецЕсли;
	// 
	// Если ЕдиницаПоКлассификатору = Неопределено Тогда
	// 	ЕдиницаПоКлассификатору = ПрикладныеПараметры.ЕдиницаИзмеренияНовойНоменклатуры;
	// КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	// НоменклатураОбъект.ВидНоменклатуры    = ВидНоменклатуры;

	// Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураОбъект, ВидНоменклатуры);
	
	// НоменклатураОбъект.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(ЕдиницаПоКлассификатору), ЕдиницаПоКлассификатору, НоменклатураОбъект.ЕдиницаИзмерения);
	НоменклатураОбъект.Родитель           = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	НоменклатураОбъект.Наименование       = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	НоменклатураОбъект.НаименованиеДляПечати = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	СтавкаНДС 							  = ДанныеНоменклатуры.СтавкаНДС;
	НоменклатураОбъект.СтавкаНДС          = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, НоменклатураОбъект.СтавкаНДС);
	
	НоменклатураОбъект.НоменклатурнаяГруппа = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НоменклатурнаяГруппаСозданныхНаСайте");
	
	Если УникальныйИдентификаторКорректен Тогда
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид)));
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	Номенклатура = НоменклатураОбъект.Ссылка;
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины
// Параметры:
// ДанныеТочкиСамовывоза - Струтура.
// 		Описание полей:
// 			Ид - Строка, идентификатор точки самовывоза
// 			Адрес - Структура с полями "ТипАдреса" и "ЗначениеАдреса"
// 			Контакты- Структура с полями "ТипКонтакта" и "ЗначениеКонтакта"
// 			Наименование - Строка, наименнование точки самовывоза
// 
// ТочкаСамовывоза - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления
// Параметры:
// СтавкаНДС. Тип - ПеречислениеСсылка, СправочникССылка, Ставка НДС, выраженная элементом объекта метаданных прикладного решения
// ЗначениеСтавкиНДС. Тип - Число. Значение ставки НДС выраженное числом
// Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
// 	
// 	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
// 		ЗначениеСтавкиНДС = 18;
// 	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
// 		ЗначениеСтавкиНДС = 18;
// 	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
// 		ЗначениеСтавкиНДС = 10;
// 	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
// 		ЗначениеСтавкиНДС = 10;
// 	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
// 		ЗначениеСтавкиНДС = 0;
// 	КонецЕсли;
// 	
// КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе
// Параметры:
// ОбновленыСвойстваЗаказа.Тип - булево. Признак успешного выпонения процедуры
// ЗаказПокупателя. Тип - ДокументСсылка. Ссылка на документ ЗаказПокупателя
// СвойстваЗаказа. Тип - Соотвествие. Строковое представление параметров заказа и их значений
// ОписаниеОшибки. Тип - Строка. Текстовое представление ошибки
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
													  ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
КонецПроцедуры

// В зависимости от настроек прикладного решения устанавливает флаг использования характеристик
// 
// Пример:ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики")
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	// /ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристики = ЛОЖЬ;
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
// 	Параметры:
// 		ПрикладныеПараметры - Структура, параметры прикладного решения, добавленные в форму узла плана обмена
// 		ДокументСсылка - Ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = ИСТИНА;// ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ОбъектЗаказ = ДокументСсылка.ПолучитьОбъект();
	ЕстьИзменения = ЛОЖЬ;
	Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
		Если Найти(СтрокаТовары.Остроке,"Отменено")=0 Тогда
			СтрокаТовары.Остроке = "Отменено";
			Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
				СтрокаТовары.Остроке = СтрокаТовары.Остроке+": "+ПрикладныеПараметры.ПричинаОтменыЗаказа;
				ЕстьИзменения = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		// ОбъектЗаказ.ЗаполнитьЭтапыГрафикаОплаты();
		ОбъектЗаказ.Записать(?(ОбъектЗаказ.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу
// Параметры: 
// 		ЗаказОплачен. Тип - Булево. Признак того, что заказ был оплачен
// 					 Данные признак влияет на статус оплаты закаща на сайте
// 		СтатусЗаказа. Тип - ПеречислениеСсылка. Статус заказа в прикладном решении
// 		ДанныеДокументаКОплатеОстаток. Тип - Число. Не оплаченный остаток денег по заказу
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
	                                    ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = НЕ (ДанныеДокументаКОплатеОстаток > 0);
	
КонецПроцедуры

// Проверяет текущее состояние заказа
// 	Параметры:
// ЗаказВРаботе. Тип - Булево. Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после щагрузки с сайта)
// 								Данные признак влияет на статус заказа на сайте
// ДанныеДокументаСостояниеЗаказа. Тип - ПеречислениеССылка, СправочникССылка. Статус заказа, который он может принимать в прикладном решении
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = ДанныеДокументаСостояниеЗаказа <> Перечисления.СостоянияЗаказаКлиента.ВыполненПолученКлиентом;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу
// Параметры:
// 	ЗаказОтгружен. Тип - Булево. Признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте
// 	ДанныеДокументаСтатусЗаказа. Тип - ПеречислениеСсылка, СпрвочникСсылка. Статус, который может иметь заказ в прикладном решени
// 	ДанныеДокументаКОтгрузкеОстаток. Тип - Число. Неотгруженный остаток по заказу (заказно было 7, а отгрузили 5)
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
	                                      ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен =  НЕ (ДанныеДокументаКОтгрузкеОстаток > 0);
	
КонецПроцедуры

// Определяем нужно ли считать НДС
// Паратетры:
// СчитатьНДС.Тип- Булево. Признак о небходимости считать НДС по заказу
// ВыборкаДокументовНалогообложениеНДС. Тип - ПеречислениеСсылка, СправочникСсылка. 
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = (ВыборкаДокументовНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
// 
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
// 
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","РасходыТовара");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
// 
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
// 
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры", Неопределено);
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений", "ДополнительныеРеквизиты");
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы", "Изображения");
	СоответствиеСправочников.Вставить("Склады", "Склады");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Склады");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
// 
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
// 
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизиты");
	
КонецПроцедуры

// Заполняет соотвесветсиве форм библотеки и прикадного решения
// Параметры:
// СоответствиеФорм. Тип - соответсвие. Используется для переопределения форм, вызываемых библиотекой
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза","Справочник.Склады.ФормаВыбора");
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
// 
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//  Сервер       - адрес прокси-сервера
//  Порт         - порт прокси-сервера
//  Пользователь - имя пользователя для авторизации на прокси-сервере
//  Пароль       - пароль пользователя
// 
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
// #Если Клиент Тогда
// 	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
// #Иначе
// 	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
// #КонецЕсли

	НастройкаПроксиСервера = Неопределено

КонецФункции

// Определяет номер и дату заказа на сайте
// 
// Параметры:
// ДокСсылка - Ссылка на документ Заказ
// ПрикладныеПараметры .Тип - Структура.Параметры прикладного рещения, размещенные в форме узла плана обмена
// 
// Возращаемое значение:
// РеквизитыЗаказаНаСайте. Тип - структура. Структура, содержащая реквизиты заказа
// Описание полей:
// НомерЗаказаНаСайте. Тип - Строка. Номер заказа на сайте
// ДатаЗаказаНаСайте.Тип - Дата. Дата заказа на сайте
// 
Функция РеквизитыЗаказаНаСайте(Заказ, УзелОбмена) Экспорт
	
	ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте = 
	           ОбменССайтомПовтИсп.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте = 
	           ОбменССайтомПовтИсп.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаДополнительныеРеквизиты.ЗначениеРеквизита КАК Значение,
	|	ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит КАК Свойство
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитов КАК ЗаказКлиентаДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.ОбъектВладелец = &ЗаказКлиента
	|	И (ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит = &СвойствоНомерЗаказа
	|			ИЛИ ЗаказКлиентаДополнительныеРеквизиты.ДополнительныйРеквизит = &СвойствоДатаЗаказа)";
	
	Запрос.УстановитьПараметр("СвойствоНомерЗаказа", ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	Запрос.УстановитьПараметр("СвойствоДатаЗаказа", ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказаНаСайте", "");
	СтруктураВозврата.Вставить("ДатаЗаказаНаСайте", Дата(1,1,1));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте Тогда
			СтруктураВозврата.НомерЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте Тогда
			СтруктураВозврата.ДатаЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполняет массив реквизитам формы, значение которых должно быть сохранено
// 
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменСсайтом(МассивРеквизитов) Экспорт
	
	РеквизитыТоваров = ОбменССайтамиУТ.РеквизитыОбменаТоварами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыТоваров);
	
	РеквизитыЗаказов = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
// 
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
// 
Процедура СкоректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	Если Не ОбменЗаказами Тогда
		НепроверяемыеРеквизиты = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	Иначе
		
		НепроверяемыеРеквизиты = Новый Массив;
		
		Если Не Форма.ИспользуютсяГруппыДоступаПартнеров 
			Или (НЕ Форма.ИспользоватьПартнеровКакКонтрагентов И НЕ Форма.СоздаватьПартнеровДляНовыхКонтрагентов) Тогда
			НепроверяемыеРеквизиты.Добавить("ГруппаДоступаПартнеров");
		КонецЕсли;
		
	КонецЕсли;
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

// Добавляет в произвольные поля в стукруту ПрикладныеПараметры
// Параметры
//   ПрикладныеПараметры - структура, содержащая параметры прикладнного решения, необходимые для обмена с сайтом
// 
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом
// 
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
// 
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ГруппаДоступаПартнеров.Имя);
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользуютсяГруппыДоступаПартнеров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	ГруппаОтбораИ = ГруппаОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПартнеровКакКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоздаватьПартнеровДляНовыхКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЛОЖЬ;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", ЛОЖЬ);
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
// 
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом
// 
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	
	
КонецПроцедуры
