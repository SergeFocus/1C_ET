// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
// Функция осуществляет подключение устройства.
// 
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
// 
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = ИСТИНА;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	Если Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры,	ВыходныеПараметры);
		
		// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста   = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                         СтрокаТекста, ВыходныеПараметры);
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры);

	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда
		ТипШтрихКода = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];
		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
		// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команда") + " ""%Команда%"" " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не поддерживается данным драйвером."));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = ЛОЖЬ;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
// 
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	СуммаНаличнойОплаты    = 0;
	СуммаБезналичнойОплаты = 0;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;

	Результат = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства,
	                                      СуммаНаличнойОплаты, СуммаБезналичнойОплаты);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет внесение или выемку суммы на ФР.
// 
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры)

	Результат = ИСТИНА;

	Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства,
	                           ?(ТипИнкассации = 1, Сумма, -Сумма));
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нефискальной строки.
// 
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	Результат = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета без гашения.
// 
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета с гашением.
// 
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	Результат = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	Иначе
		// Заполнение выходных параметров
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать фискальной строки.
// 
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	Результат = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС);
	
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
// 
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ЛОЖЬ;

	// Обязательные выходные
	ВыходныеПараметры = Новый Массив();

	Если НЕ ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства) Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	Иначе
		Результат = ИСТИНА;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие денежного ящика
// 
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	Попытка
		Результат = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Команда") + " """ + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Открыть денежный ящик") + """ " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не поддерживается данным драйвером."));
		Возврат Результат;
	КонецПопытки;
		
	Если НЕ Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Функция осуществляет открытие смены
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие нового чека.
// 
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат  = ИСТИНА;
	НомерСмены = 0;
	НомерЧека  = 0;

	// Открываем чек
	Результат = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ЧекВозврата,
	                                      ИСТИНА, НомерЧека, НомерСмены);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	Иначе
		// Заполнение выходных параметров
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерЧека);
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
// 
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;

	ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);

	Возврат Результат;

КонецФункции

// Осуществляет печать слип-чека
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                       СтрокаТекста, ВыходныеПараметры)

	Результат  = ИСТИНА;

	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЛОЖЬ, ЛОЖЬ, ВыходныеПараметры);

	// Печатаем строки чека
	Если Результат Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			Если (Найти(ВыделеннаяСтрока, Символ(Параметры.КодСимволаЧастичногоОтреза)) > 0)
				ИЛИ (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				ИЛИ (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
				Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЛОЖЬ, ЛОЖЬ, ВыходныеПараметры);
			Иначе
				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     ВыделеннаяСтрока, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Закрываем чек
	Если Результат Тогда
		ТаблицаОплат = Новый Массив();
		Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Осуществляет печать фискального чека
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	          
	Возврат МенеджерОборудованияКлиентПереопределяемый.ПечатьЧека(ПодключаемоеОборудованиеАтолФискальныеРегистраторыКлиент,
 		ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
КонецФункции

// Функция осуществляет печать штрихкода 
// 
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	СтрокаТекста = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ШТРИХКОД:") + ШтрихКод; 
	Результат = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();
	
	// Проверка параметров устройства
	Порт                       = Неопределено;
	Скорость                   = Неопределено;
	Таймаут                    = Неопределено;
	ПарольПользователя         = Неопределено;
	ПарольУстройства           = Неопределено;
	ПечататьНалогиВЧеке        = Неопределено;
	НомерСекции                = Неопределено;
	КодСимволаЧастичногоОтреза = Неопределено;

	Параметры.Свойство("Порт"                      , Порт);
	Параметры.Свойство("Скорость"                  , Скорость);
	Параметры.Свойство("Таймаут"                   , Таймаут);
	Параметры.Свойство("ПарольПользователя"        , ПарольПользователя);
	Параметры.Свойство("ПарольУстройства"          , ПарольУстройства);
	Параметры.Свойство("ПечататьНалогиВЧеке"       , ПечататьНалогиВЧеке);
	Параметры.Свойство("НомерСекции"               , НомерСекции);
	Параметры.Свойство("КодСимволаЧастичногоОтреза", КодСимволаЧастичногоОтреза);

	Если Порт                       = Неопределено
	 Или Скорость                   = Неопределено
	 Или Таймаут                    = Неопределено
	 Или ПарольПользователя         = Неопределено
	 Или ПарольУстройства           = Неопределено
	 Или ПечататьНалогиВЧеке        = Неопределено
	 Или НомерСекции                = Неопределено
	 Или КодСимволаЧастичногоОтреза = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не настроены параметры устройства.") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для корректной работы устройства необходимо задать параметры его работы." + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сделать это можно при помощи формы") + " """ + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Настройка параметров") + """ " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("модели") + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("подключаемого оборудования в форме") + " """ + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подключение и настройка оборудования") + """."));

		Результат = ЛОЖЬ;
	КонецЕсли;
	// Конец: Проверка параметров устройства

	Если Результат Тогда
		Если Параметры.Модель = Неопределено Тогда
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = ЛОЖЬ;
		КонецЕсли;

		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(Параметры.Порт);
		МассивЗначений.Добавить(Параметры.Скорость);
		МассивЗначений.Добавить(Параметры.ПарольПользователя);
		МассивЗначений.Добавить(Параметры.ПарольУстройства);
		МассивЗначений.Добавить(Параметры.Модель);
		МассивЗначений.Добавить(Параметры.ПечататьНалогиВЧеке);

		Если ОбъектДрайвера.Подключить(МассивЗначений, ПараметрыПодключения.ИДУстройства) Тогда
			ВыходныеПараметры.Добавить(""); // Источник событий
			ВыходныеПараметры.Добавить(Неопределено); // Список событий
		Иначе
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);

			Результат = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера
// 
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Установлен"));
	ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не определена"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	ШиринаСтроки = Неопределено;
	ВыходныеПараметры.Очистить();  
	ВыходныеПараметры.Добавить(ШиринаСтроки);
	Возврат Результат;
	
КонецФункции

// Функция осуществляет Тест Устройства
// 
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;
	РезультатТеста = "";

	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Параметры.Порт);
	МассивЗначений.Добавить(Параметры.Скорость);
	МассивЗначений.Добавить(Параметры.ПарольПользователя);
	МассивЗначений.Добавить(Параметры.ПарольУстройства);
	МассивЗначений.Добавить(Параметры.Модель);
	МассивЗначений.Добавить(Параметры.ПечататьНалогиВЧеке);

	Результат = ОбъектДрайвера.ТестУстройства(МассивЗначений, РезультатТеста);

	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	ВыходныеПараметры.Добавить(РезультатТеста);

	Возврат Результат;

КонецФункции



