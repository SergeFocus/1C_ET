//sza141226-0350 для совместимости с большим числом внешних разработок 
//Суров С.В <s_surov@mail.ru>

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если ИСТИНА, 
//		то в массив будут включены только те значения, которых в нем еще нет, причем единожды
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = ЛОЖЬ) Экспорт

	УникальныеЗначения = Новый Соответствие;
	
	Если ТолькоУникальныеЗначения Тогда
		Для каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, ИСТИНА);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПриемник.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, ИСТИНА);
	КонецЦикла;
	
КонецПроцедуры
// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение ИСТИНА
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сообщение об ошибке."), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сообщение об ошибке."), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сообщение об ошибке."), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сообщение об ошибке."), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сообщение об ошибке."), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = ЛОЖЬ) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = ЛОЖЬ;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = ИСТИНА;
	
КонецПроцедуры


// Вызывает исключение с текстом Сообщение, если Условие не равно ИСТИНА.
// Применяется для самодиагностики кода.
//
// Параметры:
//   Условие                - Булево - если не равно ИСТИНА, то вызывается исключение.
//   КонтекстПроверки       - Строка - например, имя процедуры или функции, в которой выполняется проверка.
//   Сообщение              - Строка - текст сообщения. Если не задан, то исключение вызывается с сообщением по умолчанию.
//
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	
	Если Условие <> ИСТИНА Тогда
		Если ПустаяСтрока(Сообщение) Тогда
			ТекстИсключения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимая операция"); // Assertion failed
		Иначе
			ТекстИсключения = Сообщение;
		КонецЕсли;
		Если Не ПустаяСтрока(КонтекстПроверки) Тогда
			ТекстИсключения = ТекстИсключения + " " +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в") + " %1", КонтекстПроверки);
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Вызывает исключение, если тип значения параметра ИмяПараметра процедуры или функции ИмяПроцедурыИлиФункции
// отличается от ожидаемого.
// Для диагностики типов параметров, передаваемых в процедуры и функции программного интерфейса.
//
// Параметры:
//   ИмяПроцедурыИлиФункции - Строка             - имя процедуры или функции, параметр которой проверяется.
//   ИмяПараметра           - Строка             - имя проверяемого параметра процедуры или функции.
//   ЗначениеПараметра      - Произвольный       - фактическое значение параметра.
//   ОжидаемыеТипы          - ОписаниеТипов, Тип - тип(ы) параметра процедуры или функции.
//   ОжидаемыеТипыСвойств   - Структура          - если ожидаемый тип - структура, то 
//                                                 в этом параметре можно указать типы ее свойств.
//
Процедура ПроверитьПараметр(Знач ИмяПроцедурыИлиФункции, Знач ИмяПараметра, Знач ЗначениеПараметра, 
	Знач ОжидаемыеТипы, Знач ОжидаемыеТипыСвойств = Неопределено) Экспорт
	
	Контекст = "ОбщегоНазначенияКлиентСервер.ПроверитьПараметр";
	Проверить(ТипЗнч(ИмяПроцедурыИлиФункции) = Тип("Строка"), 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимо значение параметра") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИмяПроцедурыИлиФункции"), Контекст);
	Проверить(ТипЗнч(ИмяПараметра) = Тип("Строка"), 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимо значение параметра") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИмяПараметра"), Контекст);
		
	ЭтоОписаниеТипов = ТипЗнч(ОжидаемыеТипы) = Тип("ОписаниеТипов");
	Проверить(ЭтоОписаниеТипов Или ТипЗнч(ОжидаемыеТипы) = Тип("Тип"), 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимо значение параметра") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ОжидаемыеТипы"), Контекст);
		
	НедопустимыйПараметр = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимое значение параметра") + " %1 в %2." + Символы.ПС
		+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ожидалось") + ": %3; " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("передано значение") + ": %4 (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("тип") + " %5).";
	Проверить((ЭтоОписаниеТипов И ОжидаемыеТипы.СодержитТип(ТипЗнч(ЗначениеПараметра)))
		Или (Не ЭтоОписаниеТипов И ОжидаемыеТипы = ТипЗнч(ЗначениеПараметра)), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НедопустимыйПараметр, 
			ИмяПараметра, ИмяПроцедурыИлиФункции, ОжидаемыеТипы, 
			?(ЗначениеПараметра <> Неопределено, ЗначениеПараметра, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неопределено")), ТипЗнч(ЗначениеПараметра)));
			
	Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ОжидаемыеТипыСвойств <> Неопределено Тогда
		
		Проверить(ТипЗнч(ОжидаемыеТипыСвойств) = Тип("Структура"), 
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимо значение параметра") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИмяПроцедурыИлиФункции"), Контекст);
			
		НетСвойства = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимое значение параметра") + " %1 (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Структура") + ") в %2." + символы.ПС
			+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В структуре ожидалось свойство") + " %3 (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("тип") + " %4).";
		НедопустимоеСвойство = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Недопустимое значение свойства") + " %1 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в параметре") + " %2 (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Структура") + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в") + " %3." + Символы.ПС
			+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ожидалось") + ": %4; " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("передано значение") + ": %5 (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("тип") + " %6).";
		Для каждого Свойство Из ОжидаемыеТипыСвойств Цикл
			
			ОжидаемоеИмяСвойства = Свойство.Ключ;
			ОжидаемыйТипСвойства = Свойство.Значение;
			ЗначениеСвойства = Неопределено;
			
			Проверить(ЗначениеПараметра.Свойство(ОжидаемоеИмяСвойства, ЗначениеСвойства), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НетСвойства, 
					ИмяПараметра, ИмяПроцедурыИлиФункции, ОжидаемоеИмяСвойства, ОжидаемыйТипСвойства));
					
			ЭтоОписаниеТипов = ТипЗнч(ОжидаемыйТипСвойства) = Тип("ОписаниеТипов");
			Проверить((ЭтоОписаниеТипов И ОжидаемыйТипСвойства.СодержитТип(ТипЗнч(ЗначениеСвойства)))
				Или (Не ЭтоОписаниеТипов И ОжидаемыйТипСвойства = ТипЗнч(ЗначениеСвойства)), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НедопустимоеСвойство, 
					ОжидаемоеИмяСвойства, ИмяПараметра, ИмяПроцедурыИлиФункции, ОжидаемыйТипСвойства, 
					?(ЗначениеСвойства <> Неопределено, ЗначениеСвойства, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неопределено")), ТипЗнч(ЗначениеСвойства)));
					
		КонецЦикла;	
	КонецЕсли;		
	
КонецПроцедуры

// Формирует путь к заданной строке НомерСтроки и колонке ИмяРеквизита 
// табличной части ИмяТабличнойЧасти для выдачи сообщений в форме.
// Для совместного использования с процедурой СообщитьПользователю
// (для передачи в параметры Поле или ПутьКДанным). 
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//  НомерСтроки       - Число - номер строки табличной части.
//  ИмяРеквизита      - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Строка - путь к ячейке таблицы.
//
Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, 
	Знач ИмяРеквизита) Экспорт

	Возврат ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;

КонецФункции

