// sza160219-0220 сообщение
// sza131211-1459 для совместимости с большим числом внешних разработок

// Заполняет массив-приемник уникальными значениями Из массива-источника.
// Если элемент в массиве-приемнике уже существует, то добавления нового элемента не происходит.
// 
// Параметры:
//  МассивПриемник – Массив – массив, который заполняется уникальными значениями
//  МассивИсточник – Массив – массив, Из которого подбираются элементы в массив-приемник.
// 
Процедура ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, МассивИсточник) Экспорт
	
	Для Каждого Элемент Из МассивИсточник Цикл
		
		Если МассивПриемник.Найти(Элемент) = Неопределено Тогда
			
			МассивПриемник.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение реквизита, прочитанного Из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 
// Возвращает значения реквизита, прочитанного Из информационной базы для нескольких объектов.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
// 				ВАЖНО! значения массива должны быть ссылками на 
// 				объекты одного типа!
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на объект, Значение - значение прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита);
	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
	КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции
// Возвращает структуру, содержащую значения реквизитов прочитанные Из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному Из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
// 
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется Из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
// 
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", ИСТИНА);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неверный тип второго параметра Реквизиты") + ": %1",
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции
// Возвращает значения реквизитов, прочитанные Из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному Из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
// 				ВАЖНО! значения массива должны быть ссылками на 
// 				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
// 				в формате требований к свойствам структуры.
// 				Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Соответствие - где ключ - ссылка на объект, а Значение - структура, которая 
// 		   		содержит список свойств, как список имен в строке
// 				ИменаРеквизитов, со значениям реквизитов, прочитанными Из информационной базы.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции
// Возвращает имя базового типа по переданному значению объекта метаданных.
// 
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
// 
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегламентныеЗадания();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции
// Возвращает значение для идентификации общего типа "Бизнес-процессы".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцессы";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Документы".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Журналы документов".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат "ЖурналыДокументов";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Задачи".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задачи";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Константы".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константы";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Обработки".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаОбработки() Экспорт
	
	Возврат "Обработки";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Отчеты".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат "Отчеты";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Перечисления".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисления";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Планы видов расчета".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Планы видов характеристик".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции
// Возвращает значение для идентификации общего типа "ПланыОбмена".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланыОбмена";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Планы счетов".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланыСчетов";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Последовательности".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаПоследовательности() Экспорт
	
	Возврат "Последовательности";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Регистры бухгалтерии".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Регистры накопления".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрыНакопления";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Регистры расчета".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрыРасчета";
	
КонецФункции
// ОБМЕН С САЙТОМ+
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// Имена типов.
// Возвращает значение для идентификации общего типа "Регистры сведений".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрыСведений";
	
КонецФункции
// Возвращает значение для идентификации общего типа "РегламентныеЗадания".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаРегламентныеЗадания() Экспорт
	
	Возврат "РегламентныеЗадания";
	
КонецФункции
// Возвращает значение для идентификации общего типа "Справочники".
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочники";
	
КонецФункции
// Выполняет действия перед продолжением выполнения обработчика регламентного задания.
// 
// Например, проверяет возможность выполнения обработчика регламентного задания.
// Если администратор не заблокировал выполнение регламентных заданий до
// окончания обновления ИБ, Тогда требуется прекратить выполнение обработчика.
// 
Процедура ПриНачалеВыполненияРегламентногоЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(ИСТИНА);
		
КонецПроцедуры

Процедура СообщитьПользователю(Знач ТекстСообщения,
	Знач ОбъектИлиСсылка = Неопределено,
	Знач ПолеФормыОбъекта = "",
	Знач ПутьКДанным = "",
	Отказ = ЛОЖЬ,
	Знач ПисатьВЖурналЗапрещено = ЛОЖЬ,
	Знач СтатусЭтогоСообщения = Неопределено) Экспорт
	
	Если НЕ ПисатьВЖурналЗапрещено Тогда
		РегистрироватьВЖурнал = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаписыватьВсеСообщенияПользователюОтСистемыВЖурналСобытий");
		Если РегистрироватьВЖурнал Тогда
			ОбщийМодульСервер.ДобавитьСобытиеЖурнала(ТекстСообщения, 3, ОбъектИлиСсылка);
		КонецЕсли;	
		
		// Не выносить следующую строку из этого условия
		НаправитьВсеСообщенияПользователямОтСистемыВОдноОкно = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НаправитьВсеСообщенияПользователямОтСистемыВОдноОкно");
		
	Иначе // нет возможности использовать то окно - там ошибка
		НаправитьВсеСообщенияПользователямОтСистемыВОдноОкно = ЛОЖЬ;
	КонецЕсли;
	
	Если НаправитьВсеСообщенияПользователямОтСистемыВОдноОкно Тогда
		Если НЕ ПустаяСтрока(ПолеФормыОбъекта) Тогда
			ТекстСообщения = ТекстСообщения + " (" + ПолеФормыОбъекта + ")";
		КонецЕсли;
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			ТекстСообщения = ТекстСообщения + " (" + ПутьКДанным + ")";
		КонецЕсли;
		ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ТекстСообщения, СтатусЭтогоСообщения, ОбъектИлиСсылка, , , ПисатьВЖурналЗапрещено);
		
	ИначеЕсли ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле  = ПолеФормыОбъекта;
		Сообщение.ПутьКДанным = ПутьКДанным;
		
		Если НЕ ОбъектИлиСсылка = Неопределено Тогда
			Сообщение.УстановитьДанные(ОбъектИлиСсылка);
			#Если Сервер Тогда
				Если ОбъектИлиСсылка.Ссылка = ОбъектИлиСсылка Тогда
					Сообщение.КлючДанных = ОбъектИлиСсылка;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Отказ = ИСТИНА;
	
КонецПроцедуры

// Процедура удаляет Из массива МассивРеквизитов элементы, соответствующие именам 
// реквизитов объекта Из массива МассивНепроверяемыхРеквизитов.
// Для использования в обработчиках события ОбработкаПроверкиЗаполнения.
// 
// Параметры:
// 	МассивРеквизитов              - Массив - массив строк с именами реквизитов объекта.
// 	МассивНепроверяемыхРеквизитов - Массив строк с именами реквизитов объекта, не требующих проверки.
// 
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
	
		ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
		Если ПорядковыйНомер <> Неопределено Тогда
			МассивРеквизитов.Удалить(ПорядковыйНомер);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры
