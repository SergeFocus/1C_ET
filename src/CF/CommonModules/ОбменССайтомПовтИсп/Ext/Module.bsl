// Суров С.В <s_surov@mail.ru>

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОбменССайтомПовтИсп: механизм обмена с сайтом
// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает уникальный идентификатор объекта для выгрузки в XML.
// 
// Параметры:
// 	Объект - произвольный ссылочный тип
// 	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// 
// Возвращаемое значение:
// 	Строка, уникальный идентификатор объекта.
// 
Функция УникальныйИдентификаторОбъекта(Объект, Характеристика = Неопределено) Экспорт
	
	Ид = Строка(Объект.УникальныйИдентификатор());
	
	ОбменССайтомПереопределяемый.ДополнитьИдНоменклатурыХарактеристикой(Ид, Объект, Характеристика);
	
	Возврат Ид;

КонецФункции

// Получает предопределенный узел плана обмена
// 
// Параметры:
//  УзелОбмена - Ссылка на план обмена
// 
// Возвращаемое значение:
//  Булево - признак равенства узла обмена предопределенному значению
// 
Функция ПолучитьЭтотУзелПланаОбмена(Знач УзелОбмена) Экспорт
	
	Возврат (УзелОбмена = ПланыОбмена.ОбменССайтом.ЭтотУзел());
	
КонецФункции

// Возвращает имя прикладного документа по имени библиотечного документа.
// 
// Параметры:
//  ИмяДокумента - строка - название справочника из библиотеки.
// 
// Возвращаемое значение:
//  ИмяПрикладногоДокумента - строковое имя прикладного справочника.
// 
Функция ИмяПрикладногоДокумента(ИмяДокумента) Экспорт
	
	СоответствиеДокументов = Новый Соответствие;
	ОбменССайтомПереопределяемый.ПолучитьСоответствиеДокументов(СоответствиеДокументов);
	
	ИмяПрикладногоДокумента = СоответствиеДокументов.Получить(ИмяДокумента);
	Если ИмяПрикладногоДокумента = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В коде прикладного решения необходимо указать соответствие для документа") + " %1.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяДокумента);
		ЗаписьЖурналаРегистрации(ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	
	Возврат ИмяПрикладногоДокумента;
	
КонецФункции

// Возвращает имя прикладного документа по имени библиотечного документа.
// 
// Параметры:
//  ИмяДокумента - строка - название справочника из библиотеки.
// 
// Возвращаемое значение:
//  ИмяПрикладногоДокумента - строковое имя прикладного справочника.
// 
Функция ИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	СоответствиеСправочников = Новый Соответствие;
	ОбменССайтомПереопределяемый.ПолучитьСоответствиеСправочников(СоответствиеСправочников);
	
	ИмяПрикладногоСправочника = СоответствиеСправочников.Получить(ИмяСправочника);
	Если ИмяПрикладногоСправочника = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В коде прикладного решения необходимо указать соответствие для справочника") + " %1.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСправочника);
		ЗаписьЖурналаРегистрации(ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	
	Возврат ИмяПрикладногоСправочника;
	
КонецФункции

 // Возвращает имя прикладного документа по имени библиотечного документа.
// 
// Параметры:
//  ИмяДокумента - строка - название справочника из библиотеки.
// 
// Возвращаемое значение:
//  ИмяПрикладногоДокумента - строковое имя прикладного справочника.
// 
Функция ИмяПрикладногоПВХ(ИмяПВХ) Экспорт
	
	СоответствиеПВХ = Новый Соответствие;
	ОбменССайтомПереопределяемый.ПолучитьСоответствиеПВХ(СоответствиеПВХ);
	
	ИмяПрикладногоПВХ = СоответствиеПВХ.Получить(ИмяПВХ);
	Если ИмяПрикладногоПВХ = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В коде прикладного решения необходимо указать соответствие для плана видов характеристик") + " %1.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяПВХ);
		ЗаписьЖурналаРегистрации(ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	
	Возврат ИмяПрикладногоПВХ;
	
КонецФункции

// Возвращает имя прикладного документа по имени библиотечного документа.
// 
// Параметры:
//  ИмяДокумента - строка - название справочника из библиотеки.
// 
// Возвращаемое значение:
//  ИмяПрикладногоДокумента - строковое имя прикладного справочника.
// 
Функция ИмяПрикладнойФормы(ИмяФормы) Экспорт
	
	СоответствиеФорм= Новый Соответствие;
	ОбменССайтомПереопределяемый.ПолучитьСоответствиеФорм(СоответствиеФорм);
	
	ИмяПрикладнойФормы = СоответствиеФорм.Получить(ИмяФормы);
	Если ИмяПрикладнойФормы = Неопределено Тогда // не задано соответствие
		ШаблонСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В коде прикладного решения необходимо указать соответствие для формы") + " %1.";
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФормы);
		ЗаписьЖурналаРегистрации(ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
	КонецЕсли;
	
	Возврат ИмяПрикладнойФормы;
	
КонецФункции

// Возвращает список узлов плана обмена
// в которых будут регистрироваться товары, заказы
// 
Функция МассивУзловДляРегистрации(ОбменТоварами = ЛОЖЬ, ОбменЗаказами = ЛОЖЬ) Экспорт
	
	МассивУзлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбменССайтом.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменССайтом КАК ОбменССайтом
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОбменТоварами
	|				ТОГДА ОбменССайтом.ОбменТоварами
	|			КОГДА &ОбменЗаказами
	|				ТОГДА ОбменССайтом.ОбменЗаказами
	|		КОНЕЦ
	|	И НЕ ОбменССайтом.Ссылка = &ЭтотУзел";
	Запрос.УстановитьПараметр("ОбменТоварами", ОбменТоварами);
	Запрос.УстановитьПараметр("ОбменЗаказами", ОбменЗаказами);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменССайтом.ЭтотУзел());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивУзлов.Добавить(Выборка.Узел);
	КонецЦикла;
	
	Возврат МассивУзлов;
	
КонецФункции

// Возвращает текущую версию формата обмена
// 
Функция ВерсияСхемы() Экспорт
	Возврат "2.07";
КонецФункции

// Возвращает значение реквизита, который был добавлен на форму узла плана обмена
// добавленный реквизит формы не является реквизитом плана обмена
// Параметры
// 	Узел - ПланОбмена.ОбменССайтом.Ссылка
// 	ИмяРеквизита - имя реквизита, добавленного на форму
// Возвращаемое значение
// Значение реквизита, которое было выбрано в форме узла
// 
Функция РеквизитПрикладногоРешения(Узел, ИмяРеквизита) Экспорт
	
	СохраненныеПараметрыПрикладногоРешения = Узел.ПараметрыПрикладногоРешения.Получить();
	Если Не ТипЗнч(СохраненныеПараметрыПрикладногоРешения) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПрикладногоРешения = Неопределено;
	Если Не СохраненныеПараметрыПрикладногоРешения.Свойство("ПараметрыПрикладногоРешения", ПараметрыПрикладногоРешения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрПрикладногоРешения = Неопределено;
	Если Не ПараметрыПрикладногоРешения.Свойство(ИмяРеквизита,ПараметрПрикладногоРешения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрПрикладногоРешения;
	
КонецФункции

Функция ПространствоИменСхемы() Экспорт
	Возврат "urn:1C.ru:commerceml_2";
КонецФункции


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// Вспомогательные служебные процедуры и функции

Функция ТекстовоеПредставлениеПодсистемыДляЖурналаРегистрации()
	
	Возврат ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Обмен ЭД.");
	
КонецФункции
