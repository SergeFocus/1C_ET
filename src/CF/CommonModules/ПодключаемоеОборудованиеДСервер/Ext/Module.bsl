///////////////////////////////////////////////////////////////////////////////////
// ПОРЦЕДУРЫ/ФУНКЦИИ ПОИСКА И ОПРЕДЕЛЕНИЯ ТИПОВ ШТРИХКОДОВ

// Функция возвращает тип штрихкода
//
// Параметры:
// Штрихкод - Строка
//
// Возвращаемое значение:
// ПланВидовХарактеристикСсылка
//
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ITF14 = Ложь;
	Сумма = 0;
	
	Если ДлинаШтрихкода = 14 Тогда //ITF14
		
		Коэффициент = 1;
		Для Сч = 1 По 13 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 14) = Сумма + 48 Тогда
			ITF14 = Истина;
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 13 Тогда //EAN13
		
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда	//EAN8
		
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			КодСимв = КодСимвола(Штрихкод, Сч);
			Если КодСимв < 48 Или КодСимв > 57 Тогда
				Прервать;
			КонецЕсли;
			Сумма = Сумма + Коэффициент * (КодСимв - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если КодСимвола(Штрихкод, 8) = Сумма + 48 Тогда
			ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипШтрихкода.Пустая() 
		И НЕ ITF14 Тогда //CODE39
		
		CODE39 = Ложь;
		Если ДлинаШтрихкода > 0 Тогда
			CODE39 = Истина;
			Для Сч = 1 По ДлинаШтрихкода Цикл
				КодСимв = КодСимвола(Штрихкод, Сч);
				Если (КодСимв <> 32)
					И (КодСимв < 36 Или КодСимв > 37)
					И (КодСимв <> 43)
					И (КодСимв < 45 Или КодСимв > 57)
					И (КодСимв < 65 Или КодСимв > 90) Тогда
					
					CODE39 = Ложь;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если CODE39 Тогда
			ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
		Иначе
			ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипШтрихкода;
	
КонецФункции // ОпределитьТипШтрихкода()

// Функция возвращает результат поиска по штрихкоду в справочнике Номенклатура.
//
// Параметры:
// ШКод - Строка - проверяемый штрихкод
// ТольКод - Булево - признак изменения текста запроса
//
// Возвращаемое значение зависит от входного параметра ТолькоКод:
//
//   ТолькоКод = Ложь:
//    ТаблицаЗначений - колонки: Номенклатура, Цена, ЕдиницаИзмерения, Весовой
//
//   ТолькоКод = Истина
//    ТаблицаЗначений - колонки: Код
//
Функция ПоискПоШтрихкоду(ШКод, ТолькоКод = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
	|	ИЛИ Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШКод));
	Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", Врег(ШКод));
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		возврат РезультатЗапроса.Выгрузить();
	иначе
		
		ТипШК = ОпределитьТипШтрихКода(ШКод);
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихКоды.Номенклатура КАК Номенклатура,
		|	СпрНоменклатура.Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|		ПО (ШтрихКоды.Номенклатура.Ссылка = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	ШтрихКоды.ТипШтрихКода = &ТипШК
		|	И (ШтрихКоды.ШтрихКод = &ШКод
		|	ИЛИ ШтрихКоды.ШтрихКод = &ШКодВРЕГ)";
		
		Если ТолькоКод Тогда
			ЗаменяемыйТекст = "
			|	ШтрихКоды.Номенклатура КАК Номенклатура,
			|	СпрНоменклатура.Цена ";
			
			ТекстЗамены = "
			|	СпрНоменклатура.Код";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипШК", ТипШК);
		Запрос.УстановитьПараметр("ШКод", нрег(ШКод));
		Запрос.УстановитьПараметр("ШКодВРЕГ", врег(ШКод));
		
		Результат = Запрос.Выполнить();
		Возврат Результат.Выгрузить();
		
	КонецЕсли;	
	
КонецФункции // ПоискПоШтрихкоду()

// Функция возвращает результат проверки полученного штрихкода на предмет уникальности в информационной базе.
//
// Параметры:
// ШКод - Строка - проверяемый штрихкод
// ТипШК - ПланВидовХарактеристикСсылка.ТипыШтрихкодов - тип штрихкода
//
// ВозвращаемоеЗначение:
// Булево - результат проверки.
//
Функция ПроверитьУникальностьШтрихкода(ШКод, ТипШК = Неопределено) Экспорт
	
	Уникальность = Истина;
	Если ТипШК = Неопределено Тогда
		ТипШК = ОпределитьТипШтрихкода(ШКод);
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	| Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ Штрихкоды.Штрихкод = &ШКод
	|И Штрихкоды.ТипШтрихкода = &ТипШК";
	
	Запрос.УстановитьПараметр("ШКод", ШКод);
	Запрос.УстановитьПараметр("ТипШК", ТипШК);
	
	Если Запрос.Выполнить().Выгрузить().Количество() Тогда
		Уникальность = Ложь;
	КонецЕсли;
	
	Возврат Уникальность;
	
КонецФункции // ПроверитьУникальностьШтрихкода()

// Функция возвращает результат поиска по регистру сведений Штрихкоды.
//
// Параметры:
// ТекКод - Строка - штрихкод,по которуму производится поиск
//
// Возвращаемое значение зависит от результат запроса:
//
//   Штрихкод найден:
//    Структура - ключи структуры: Владелец, Штрихкод, ТипШтрихкода
//
//   Штрихкод НЕ найден:
//    Структура - ключи структуры: Штрихкод, ТипШтрихкода
//
Функция ПоискПоРегиструСведенийШтрихкоды(ТекКод) Экспорт
	
	ТипШтрихкода = ОпределитьТипШтрихкода(ТекКод);
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.ТипШтрихкода = &ТипШтрихкода";
	
	Запрос.УстановитьПараметр("Штрихкод", ТекКод);
	Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТипШтрихкода", ТипШтрихкода);
	Выборка = Запрос.Выполнить();
	Если Не Выборка.Пустой() Тогда
		ТекСтрока = Выборка.Выгрузить()[0];
		СтруктураРезультата.Вставить("Владелец", ТекСтрока.Владелец);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции // ПоискПоРегиструСведенийШтрихкоды()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ/ФУНКЦИИ РАБОТЫ С КОДАМИ МАГНИТНЫХ КАРТ

// Функция возвращает результат поиска клиента в справочнике по коду магнитной карты.
//
// Параметры:
// МКод - Строка - магнитный код
//
// Возвращаемое значение:
// СправочникСсылкаКлиенты / Неопределено
//
Функция НайтиКлиентаПоМК(МКод) Экспорт
	
	Клиент = Справочники.Клиенты.НайтиПоРеквизиту("НомерКарты", МКод);
	Если Клиент.Пустая() Тогда
		Клиент = Неопределено;
	КонецЕсли;
	Возврат Клиент;
	
КонецФункции

// Функция возвращает результат проверки кода магнитной карты на предмет уникальности в информационной базе.
//
// Если объект уже записан и редактируется, тогда для исключения этого объекта из результат запроса
// добавляется дополнительное условие и устанавливается параметр.
//
// Параметры:
// СпрОбъект - СправочникОбъект.Клиенты - элемент справочника Клиенты
//
// Возвращаемое значение:
// Булево - результат проверки
//
Функция ПроверитьУникальностьМагнитногоКода(СпрОбъект) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	| Клиенты.НомерКарты
	|ИЗ
	| Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.НомерКарты = &МКод";
	МКод = СпрОбъект.НомерКарты;
	Запрос.УстановитьПараметр("МКод", МКод);
	Если НЕ СпрОбъект.ЭтоНовый() Тогда
		ЭлементСсылка = СпрОбъект.Ссылка;
		Запрос.Текст = Запрос.Текст + " И Клиенты.Ссылка <> &ЭлементСсылка";
		Запрос.УстановитьПараметр("ЭлементСсылка", ЭлементСсылка);
	КонецЕсли;
	Результат = Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ/ФУНКЦИИ РАБОТЫ С ФИСКАЛЬНЫМ РЕГИСТРАТОРОМ

// Функция возвращает подключенный фискальный регистратор
//
// Возвращаемое значение:
// Результат - СправочникСсылкаПодключаемоеОборудование
// Если в справочнике несколько фискальных регистраторов или ни одного, тогда ссылка пустая.
//
Функция ВернутьИдентификаторУстройстваФР() Экспорт
	
	Результат = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = &ФР
	|	И ПодключаемоеОборудование.ПометкаУдаления = ЛОЖЬ";
	
	ФР = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор;
	Запрос.УстановитьПараметр("ФР", ФР);
	Оборудование = Запрос.Выполнить().Выгрузить();
	
	Если Оборудование.Количество() = 1 Тогда
		Результат = Оборудование[0].Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВернутьИдентификаторУстройстваФР()

// Функция возвращет текущее состояние кассовой смены.
//
// Возвращаемое значение:
// КассоваяСмена - Структура:
//  Ключи структуры:
//   "СтатусСмены" - если не было открыто ни одной смены
//   "СтатусСмены", "Время"
//
Функция ПолучитьСостояниеКассовойСмены() Экспорт
	
	КассоваяСмена = Новый Структура;
	//Состояние = РегистрыСведений.КассоваяСмена.СрезПоследних();
	//Если Состояние.Количество() = 0 Тогда
	//	КассоваяСмена.Вставить("СтатусСмены", Перечисления.СтатусыКассовойСмены.Закрыта);
	//Иначе
	//	КассоваяСмена.Вставить("СтатусСмены", Состояние[0].СтатусСмены);
	//	Кассоваясмена.Вставить("Время", Состояние[0].Период);
	//КонецЕсли;
	
	Возврат КассоваяСмена;
	
КонецФункции //ПолучитьСостояниеКассовойСмены()

// Функция возвращает результат открытия кассовой смены.
//
// Параметры:
// ОписаниеОшибки - Строка
//
// Возвращаемое значение:
// Результат - Булево
//
Функция ОткрытьКассовуюСмену(ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены();
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	Открыта = Перечисления.СтатусыКассовойСмены.Открыта;
	
	Если СтруктураСостояниеКассовойСмены.СтатусСмены = Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.Время < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
			
		КонецЕсли;
		
	Иначе                
		
		// Смена закрыта. Откроем новую кассовую смену.
		
//		НоваяКассоваяСмена = РегистрыСведений.КассоваяСмена.СоздатьМенеджерЗаписи();
		//
		//НоваяКассоваяСмена.Период = ТекущаяДатаСеанса();
		//НоваяКассоваяСмена.СтатусСмены = Открыта;
		//НоваяКассоваяСмена.Записать();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОткрытьКассовуСмену()

// Функция возвращает результат закрытия кассовой смены.
//
// Параметры:
// ОписаниеОшибки - строка
//
// Возвращаемое значение:
// Результат - Булево
//
Функция ЗакрытьКассовуюСмену(ОписаниеОшибки = "") Экспорт
	
	Результат = Истина;
	Закрыта = Перечисления.СтатусыКассовойСмены.Закрыта;
	СтруктураСостоянияКассовойСмены = ПолучитьСостояниеКассовойСмены();
	
	Если СтруктураСостоянияКассовойСмены.СтатусСмены = Закрыта Тогда
		Результат = Ложь;
	//Иначе
	//	ЗакрытиеСмены = РегистрыСведений.КассоваяСмена.СоздатьМенеджерЗаписи();
	//	ЗакрытиеСмены.Период = ТекущаяДатаСеанса();
	//	ЗакрытиеСмены.СтатусСмены = Закрыта;
	//	ЗакрытиеСмены.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗакрытьКассовуюСмену()

// Функция выбирает чеки, пробитые в текущую смену и присваивает им статус Архивный
//
// Возвращаеомое значение:
// Результат - Булево - результат записи документов
//
Функция ЗаархивироватьДокументыПередЗакрытиемСмены() Экспорт
	
	Смена = ПолучитьСостояниеКассовойСмены();
	ДатаНачала = Смена.Время;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДемоЧек.Ссылка
	|ИЗ
	|	Документ.ДемоЧек КАК ДемоЧек
	|ГДЕ
	|	ДемоЧек.Дата > &ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	ВыборкаДокументов = Запрос.Выполнить().Выгрузить();
	
	Результат = Истина;
	НачатьТранзакцию();
	Для Каждого Документ Из ВыборкаДокументов Цикл
		
		ДокОбъект = Документ.Ссылка.ПолучитьОбъект();
		ДокОбъект.Архивный = Истина;
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Результат = Ложь;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Результат Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ РАСПРЕДЕЛЕНИЯ ВЫРУЧКИ ПО СЕКЦИЯМ ФР

// Получает распределение выручки по секциям фискального регистратора
//
Функция ПолучитьРаспределениеВыручкиПоСекциям(НастройкаРаспределения) Экспорт

	Результат = Новый Структура;   

	СоответствиеВидовНоменклатурыСекциям = Новый Соответствие();
	Результат.Вставить("СекцияПоУмолчанию", 1);
	Результат.Вставить("СоответствиеВидовНоменклатурыСекциям", СоответствиеВидовНоменклатурыСекциям);

	Распределение = НастройкаРаспределения;

	//Если (Распределение = Неопределено) Или (Распределение = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка()) Тогда
	//	// Получаем распределение по умолчанию
	//	Распределение = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию;
	//КонецЕсли;

	Результат.СекцияПоУмолчанию = Распределение.СекцияПоУмолчанию;  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ВидНоменклатуры
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеВидовНоменклатурыСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";

	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.СоответствиеВидовНоменклатурыСекциям.Вставить(ВыборкаДетальныеЗаписи.ВидНоменклатуры, ВыборкаДетальныеЗаписи.НомерСекции);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Заполнить cоответствие cекций фискального регистратора для табличной части
// 
Процедура ЗаполнитьСоответствиеСекцийДляТабличнойЧасти(НастройкаРаспределения, Знач Товары, ТаблицаТоваровСоответствияCекциям) Экспорт
	
	РаспределениеВидовНоменклатурыПоСекциям = ПолучитьРаспределениеВыручкиПоСекциям(НастройкаРаспределения);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		ВидНоменклатуры = СтрокаТЧ.Номенклатура.ВидНоменклатуры;
		Секция = РаспределениеВидовНоменклатурыПоСекциям.СоответствиеВидовНоменклатурыСекциям.Получить(ВидНоменклатуры);
		Если Секция = Неопределено Тогда
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, РаспределениеВидовНоменклатурыПоСекциям.СекцияПоУмолчанию);
		Иначе
			ТаблицаТоваровСоответствияCекциям.Вставить(СтрокаТЧ.НомерСтроки, Секция);
		КонецЕсли
		
	КонецЦикла;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает результат проверки общей структуры адресов электронной почты клиента
// на корректность записи.
//
// Параметры:
// АдресЭП - Строка - адрес или несколько адресов электронной почты
//
// Возвращаемое значение:
// Результат - Булево - результат проверки
//
Функция ПроверитьКорректностьЗаписиАдресаЭлектроннойПочты(АдресЭП) Экспорт
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(АдресЭП) Тогда
		
		ЧислоАдресов = СтрЧислоВхождений(АдресЭП,"@");
		Если ЧислоАдресов = 0 Тогда
			
			Результат = Ложь;
			
		Иначе
			
			Для к = 1 По ЧислоАдресов Цикл
				
				АТ = Найти(АдресЭП, "@");
				
				ИмяПользователя = Лев(АдресЭП,АТ-1);
				
				Если (ПустаяСтрока(ИмяПользователя) ИЛИ Найти(ИмяПользователя," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = Сред(АдресЭП, АТ+1);
				Разделитель = НайтиРазделительАдресов(АдресЭП);
				Если Разделитель = СтрДлина(АдресЭП) Тогда
					Домен = Лев(АдресЭП,Разделитель);
				Иначе
					Домен = Лев(АдресЭП,Разделитель-1);
				КонецЕсли;
				
				Если (ПустаяСтрока(Домен) ИЛИ Найти(Домен," ") <> 0) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				ЧислоТочек = СтрЧислоВхождений(Домен,".");
				
				Если НЕ (ЧислоТочек > 0 И ЧислоТочек <=2) Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
				
				АдресЭП = СокрЛ(Сред(АдресЭП,Разделитель+1));
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция возвращает позицию символа, разделяющего два соседних адреса электронной почты,
// записанных в одной строке.
//
// Параметры:
// Стр - Строка - строка с адресам электронной почты
//
// Возвращаемое значение:
// Результат - Число - позиция разделителя
//
Функция НайтиРазделительАдресов(Стр)
	
	Результат = Найти(Стр," ");
	Если Результат = 0 Тогда
		Результат = Найти(Стр,",");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = Найти(Стр,";");
	КонецЕсли;
	Если Результат = 0 Тогда
		Результат = СтрДлина(Стр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает ф.о "Использовать подключаемое оборудование" 
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользованиеПодключаемогоОборудования");
	
КонецФункции

// Получить максимальный код SKU
//
Функция ПолучитьМаксимальныйКодSKU() Экспорт
	
	Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(Номенклатура.SKU) КАК SKU
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура";
	
	Запрос = Новый Запрос(Текст);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.SKU) Тогда
			Результат = Выборка.SKU + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает первые 50 элементов из справочника Номенклатура
//
// Возвращаемое значение:
// Результат - ТаблицаЗначений - таблица товаров
//
Функция ВыбратьДемоДанные() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Характеристика,
	|	Номенклатура.ЕдиницаИзмерения,
	|	Номенклатура.Цена,
	|	Номенклатура.СтавкаНДС,
	|	Номенклатура.Цена КАК Сумма
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Вставить(6,"Количество");
	Результат.Колонки.Вставить(7,"СуммаНДС");
	
	Для Каждого СтрокаТЗ ИЗ Результат Цикл
		СтрокаТЗ.Количество = 1;
		Ставка = ВернутьСтавкуНДС(СтрокаТЗ.СтавкаНДС);
		Если Ставка <> 0 Тогда
			Сумма = СтрокаТЗ.Сумма;
			СтрокаТЗ.СуммаНДС = Окр(Сумма - Сумма/(1+Ставка),2);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение ставки НДС с типом Число для рассчета Суммы НДС
//
Функция ВернутьСтавкуНДС(СтавкаНДС)
	  Ставка = 0.2;
	//Ставка = 0.18;
	
	//Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
	//	Ставка = 0.10;
	//ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
	//	Ставка = 0;
	//КонецЕсли;
	
	Возврат Ставка;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////