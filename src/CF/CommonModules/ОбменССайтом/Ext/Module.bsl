// Суров С.В <s_surov@mail.ru>
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// ОбменССайтом - формирование, отправка на сайт, чтение файлов xml формата CommerceML 2
// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 

// Возвращает результат тестового подключения к сайту.
// 
// Параметры:
// 	НастройкиПодключения - структура, Адрес сайта, пользователь и пароль
// 	ТекстСообщения - текстовое сообщение об ошибках
// Возвращаемое значение:
// 	Булево
// 
Функция ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстСообщения) Экспорт
	
	ТипСоединения = "catalog";
	ОписаниеОшибки = "";
	
	Если НЕ ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при получении параметров подключения к сайту.")
			+ Символы.ПС + ОписаниеОшибки;
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	Соединение = СоединениеССервером(НастройкиПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при установке соединения с сайтом.") + Символы.ПС + ОписаниеОшибки;
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера,
												ОписаниеОшибки, ТипСоединения);
		
	Если Успешно Тогда
		
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Соединение с сайтом успешно установлено.");
		
	Иначе
		
		ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось установить соединение.") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Выполняет запуск обмена с сайтом.
// 
// Параметры:
// 	Параметры		- структура, содержащая настройки и данные для обмена
// 	РезультатОбмена - структура, содержащая результат обмена товарами и заказами
// 	ТаблицаИнформации - таблица, хранящая лог обмена
// 
Процедура ВыполнитьОбменССайтом(Параметры, РезультатОбмена, ТаблицаИнформации) Экспорт

	ПлатформаWindows = ПлатформаWindows();
	Параметры.Вставить("ПлатформаWindows", ПлатформаWindows);
	
	КаталогВыгрузки = Параметры.КаталогВыгрузки;
	Если Параметры.ВыгружатьНаСайт Тогда
		
		КаталогВыгрузки = КаталогВременныхФайлов();
		
	Иначе
		
		ПоследнийСимвол = Прав(КаталогВыгрузки, 1);
		
		Если НЕ ПоследнийСимвол = "\" Тогда
			КаталогВыгрузки = КаталогВыгрузки + "\";
		КонецЕсли;
		
	КонецЕсли;

	
	ПодкаталогБезопасностиКаталогаВыгрузки = "webdata";
	КаталогНаДиске = КаталогВыгрузки + ПодкаталогБезопасностиКаталогаВыгрузки;
	КаталогНаДиске = ПодготовитьПутьДляПлатформы(ПлатформаWindows, КаталогНаДиске);
	
	РезультатОбмена.Вставить("ТоварыВыгружены", ЛОЖЬ);
	РезультатОбмена.Вставить("ВыполненОбменЗаказами", ЛОЖЬ);
	
	Попытка
		
		СоздатьКаталог(КаталогНаДиске);
		
	Исключение
		
		СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
		СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		СтрокаТаблицыИнформации.Описание = ОписаниеИсключительнойОшибки();
		
		Возврат;
		
	КонецПопытки;

	Параметры.Вставить("КаталогНаДиске",КаталогНаДиске);
	
	ФайлЗагрузки = Параметры.ФайлЗагрузки;
	ФайлЗагрузки = ПодготовитьПутьДляПлатформы(ПлатформаWindows, ФайлЗагрузки);
	
	Параметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	Параметры.Вставить("ПодкаталогФайлов", "import_files");
	Параметры.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	
	ПолучитьНастройкиПодключения(Параметры.НастройкиПодключения, "");
	ДобавитьПараметрыПротоколаОбменаВСтруктуру(Параметры.НастройкиПодключения);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВыгруженоТоваров", 0);
	СтруктураРезультата.Вставить("ВыгруженоКартинок", 0);
	СтруктураРезультата.Вставить("ВыгруженоПредложений", 0);
	СтруктураРезультата.Вставить("Ошибка", ЛОЖЬ);
	СтруктураРезультата.Вставить("ОписаниеОшибки", "");
	
	Параметры.Вставить("СтруктураРезультата", СтруктураРезультата);
	
	Если Параметры.ОбменТоварами Тогда 
		ТаблицаКаталогов = ПодготовитьТаблицуКаталогов(Параметры.УзелОбмена);
	Иначе
		ТаблицаКаталогов = Новый ТаблицаЗначений;
	КонецЕсли;
	ИндексФайлаОбмена = 0;
	ИндексФайлаОбменаСтрокой = "0";
	
	Успешно = ИСТИНА;
	

	Для Каждого СтрокаТаблицы Из ТаблицаКаталогов Цикл
		
		Если ИндексФайлаОбмена > 0 Тогда
			ИндексФайлаОбменаСтрокой = Формат(ИндексФайлаОбмена, "ЧГ=");
		КонецЕсли;
		
		ИндексФайлаОбмена = ИндексФайлаОбмена + 1;
		
		Параметры.Вставить("ИндексФайлаОбмена", ИндексФайлаОбменаСтрокой);
		
		Если Параметры.РежимВыгрузки = 0 Тогда
			
			// Выгружаем каталог и пакет предложеницй.
			
			Успешно = ВыгрузитьКаталог(Параметры, СтрокаТаблицы, ТаблицаИнформации);
			
			Успешно = ВыгрузитьПакетПредложений(Параметры, СтрокаТаблицы, ТаблицаИнформации);
			
		ИначеЕсли Параметры.РежимВыгрузки = 1 Тогда
			
			// Выгружаем каталог товаров.
			Успешно = ВыгрузитьКаталог(Параметры, СтрокаТаблицы, ТаблицаИнформации);
			
		ИначеЕсли Параметры.РежимВыгрузки = 2 Тогда
			
			// Выгружаем пакет предложений.
			Успешно = ВыгрузитьПакетПредложений(Параметры, СтрокаТаблицы,ТаблицаИнформации);

			
		ИначеЕсли Параметры.РежимВыгрузки = 3 Тогда
			
			// Выгружаем обновление пакета предложений.
			Успешно = ВыгрузитьОстаткиИЦены(Параметры, СтрокаТаблицы, ТаблицаИнформации);
			
		КонецЕсли;
			
	КонецЦикла;
	
	РезультатОбмена.ТоварыВыгружены = Успешно;
	
	ВыполненОбменЗаказами = ВыполнитьОбменЗаказами(Параметры, ТаблицаИнформации);
	РезультатОбмена.ВыполненОбменЗаказами = ВыполненОбменЗаказами;
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораВСхему(ПоляОтбора, СхемаВыгрузкиДанных) Экспорт
	
	ВычисляемыеПоля = СхемаВыгрузкиДанных.ВычисляемыеПоля;
	Отбор = СхемаВыгрузкиДанных.НастройкиПоУмолчанию.Отбор.Элементы;

	Для Каждого ПоляНабора из ПоляОтбора Цикл
		
		Для Каждого ДанныеПоля Из ПоляНабора.Значение Цикл
			
			Если Не ВычисляемыеПоля.Найти(ДанныеПоля.Наименование) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеПоле = ВычисляемыеПоля.Добавить();
			
			НовоеПоле.Заголовок = ДанныеПоля.Синоним;
			НовоеПоле.ПутьКДанным = ДанныеПоля.Наименование;
			НовоеПоле.ТипЗначения = ДанныеПоля.ТипЗначения;
			
			Если ЗначениеЗаполнено(ДанныеПоля.Отбор) Тогда
				ЗаполнитьПараметрыРедактирования(НовоеПоле, ДанныеПоля.Отбор);
			КонецЕсли;
			
			Отбор = СхемаВыгрузкиДанных.НастройкиПоУмолчанию.Отбор.Элементы;
			НовоеПоле = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовоеПоле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДанныеПоля.Наименование);
			НовоеПоле.ИдентификаторПользовательскойНастройки = ДанныеПоля.Синоним;
			НовоеПоле.Использование = ЛОЖЬ;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Выгружает на сайт файлы каталога и пакета предложений.
// 
// Параметры:
// 	Параметры				- Структура, все параметры обмена
// 	СтрокаТаблицыИнформации	- Строка таблицы значений, в которую пишется лог обмена
// 	ТипСоединения - Строка или неопределено , "catalog" - для выгрузки товаров, "sale" - для обмена заками
// Возвращаемое значение:
// 	Успешно - Булево, признак успешной отправки данных на сайт. 
// 				Свидетельствует о том, что с сайта получен полжительный сигнал о загрузке данных.
Функция ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации, ТипСоединения = Неопределено)
	
	МассивПодкаталогов = Новый Массив;
	
	Если Параметры.ВыгружатьКартинки Тогда
		
		МассивПодкаталогов.Добавить(Параметры.ПодкаталогФайлов);
		
	КонецЕсли;
	ОписаниеОшибки = "";
	
	Если ТипСоединения = Неопределено Тогда
		ТипСоединения = "catalog";
	КонецЕсли;
	
	Успешно = ВыгрузитьНаСайт(Параметры, МассивПодкаталогов, ОписаниеОшибки, ИСТИНА, ТипСоединения);
	
	Если Успешно Тогда
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ ТекущаяДатаСеанса() + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данные успешно выгружены на сайт.")
			+ ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительная информация о выгрузке") + ":"
			+ Символы.ПС + ОписаниеОшибки);
		
	Иначе
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание + Символы.ПС
			+ ТекущаяДатаСеанса() + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка на сайт завершилась с ошибками.")
			+ Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Попытка
		
		УдалитьФайлы(Параметры.КаталогНаДиске, "*.*");
		
	Исключение
		
		СтрокаТаблицыИнформации.Описание = 
			СтрокаТаблицыИнформации.Описание
			+ Символы.ПС
			+ ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось очистить каталог обмена") + ":"
			+ " " + Параметры.КаталогНаДиске);
		
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

Функция ПакетCML()
	
	URIПространстваИмен = ОбменССайтомПовтИсп.ПространствоИменСхемы();
	Возврат ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
КонецФункции

Функция КоммерческаяИнформация(ДатаФормирования)
	
	ПакетCML = ПакетCML();
	
	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	КоммерческаяИнформацияXDTO.ВерсияСхемы = ОбменССайтомПовтИсп.ВерсияСхемы();
	КоммерческаяИнформацияXDTO.ДатаФормирования = ДатаФормирования;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

Процедура ЗарегистрироватьВыгружаемыеДанные(ТаблицаДанных, ИмяКолонки, УзелОбмена)
		
	КолонкаТаблицы = ТаблицаДанных.ВыгрузитьКолонку(ИмяКолонки);
	МассивУникальныхЗначений = Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУникальныхЗначений, КолонкаТаблицы);
	Для Каждого ЭлементМассива Из МассивУникальныхЗначений Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементМассива);
	КонецЦикла;
	
	// Помечаем зарегистрированную в узле номенклатуру номером сообщения 0.
	ПланыОбмена.ВыбратьИзменения(УзелОбмена, 0, МассивУникальныхЗначений);

КонецПроцедуры

Функция ИмяФайлаПрайса(Параметры)
	
	ИндексПорции = Параметры.ИндексПорции;
	ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена;
	
	ИмяФайлаПрайса = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
			Параметры.КаталогНаДиске + "\offers"
			+ ИндексФайлаОбмена +"_"
			+ ИндексПорции + ".xml");
			
	Возврат ИмяФайлаПрайса;
	
КонецФункции

Процедура ЗаписатьДанныеВФайл(Параметры, КоммерческаяИнформацияXDTO, СтрокаТаблицыИнформации, ФайлЗаписан)
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	ИмяФайлаПрайса = ИмяФайлаПрайса(Параметры);
	ФайлЗаписан = ЛОЖЬ;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаПрайса, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Попытка
		
		КоммерческаяИнформацияXDTO.Проверить();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
		ЗаписьXML.Закрыть();
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
										ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать XML-файл измениний предложений на диск") + ":"
										+ " " + ИмяФайлаПрайса + Символы.ПС + ТекстОписаниеОшибки);
										
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
		
		СтруктураРезультата.ВыгруженоКартинок = 0;
		СтруктураРезультата.ВыгруженоТоваров = 0;
		
		ДобавитьОписаниеОшибки(СтрокаТаблицыИнформации.Описание, СтруктураРезультата.ОписаниеОшибки);
		ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Ошибка,
													ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена выгрузка обновления пакета"));
		
		Возврат;
		
	КонецПопытки;

	ФайлЗаписан = ИСТИНА;
	
КонецПроцедуры

Процедура СообщитьОбОшибке(Узел, ТекстОшибки)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.УстановитьДанные(Узел);
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ПодготовитьТаблицуКаталогов(УзелОбмена)
	
	
	
	ТаблицаКаталогов =УзелОбмена.СохраненнаяТаблицаКаталогов.Получить();
	
	Для Каждого ДанныеКаталога Из ТаблицаКаталогов Цикл
		
		МассивУдалить = Новый Массив;
		Для Каждого Группа Из ДанныеКаталога.Группы Цикл
			Если НЕ ЗначениеЗаполнено(Группа.Значение) Тогда
				МассивУдалить.Добавить(Группа);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
			ДанныеКаталога.Группы.Удалить(УдалитьЭлемент);
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаКаталогов.Колонки.Добавить("СтруктураРезультата");
	
	
	Возврат ТаблицаКаталогов;
	
КонецФункции

Процедура ИзменитьОтборКомпоновщика(КомпоновщикНастроек, СписокГруппКаталога = Неопределено,
									МассивИзмененийНоменклатуры = Неопределено)
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборПоКаталогу   = "ПрограммныйОтборПоКаталогу";
	ОтборПоИзменениям = "ПрограммныйОтборПоИзменениям";
	
	// Удаляем программные отборы, если они были установлены.
	
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу
			ИЛИ ЭлементОтбора.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям Тогда
			
			МассивУдалить.Добавить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдалитьЭлемент Из МассивУдалить Цикл
		
		Отбор.Элементы.Удалить(УдалитьЭлемент);
		
	КонецЦикла;
	
	// Добавляем отбор по каталогу.
	
	Если СписокГруппКаталога <> Неопределено И СписокГруппКаталога.Количество() > 0 Тогда
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоКаталогу;
		НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		НовыйЭлемент.ПравоеЗначение = СписокГруппКаталога;
		НовыйЭлемент.Использование = ИСТИНА;
		
	КонецЕсли;
	
	// Добавляем отбор по изменениям.
	Если МассивИзмененийНоменклатуры <> Неопределено Тогда
		
		СписокГруппОтбора = Новый СписокЗначений;
		СписокГруппОтбора.ЗагрузитьЗначения(МассивИзмененийНоменклатуры);
		
		НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ИдентификаторПользовательскойНастройки = ОтборПоИзменениям;
		НовыйЭлемент.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Номенклатура");
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		НовыйЭлемент.ПравоеЗначение = СписокГруппОтбора;
		НовыйЭлемент.Использование 	= ИСТИНА;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки, ХранилищеНастроекВыгрузки)  Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	
	НастройкиКомпоновщикаИзНастройкиОбмена = ХранилищеНастроекВыгрузки.Получить();
	Если ЗначениеЗаполнено(НастройкиКомпоновщикаИзНастройкиОбмена) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщикаИзНастройкиОбмена);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Процедура ПолучитьДанныеОбновленияПакетаПредложений(ПрикладныеПараметры, КомпоновщикНастроек, ТаблицаОстаткиИЦены,
													ОписаниеОшибки)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = ЛОЖЬ;
		
	ТекстЗапроса = "";
	ОбменССайтомПереопределяемый.ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнен текст запроса для получения данных обновления") + " """ + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цен и остатков") + """.";
		Возврат;
	КонецЕсли;
	
	ПараметрыКомпоновки = СхемаКомпоновкиДанных.Параметры;
	ОбменССайтомПереопределяемый.УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры,
																						ПараметрыКомпоновки);
	
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя            = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресСхемыКомпоновкиДанных1 = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Идентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных1);
	
	КомпоновщикНастроек1 = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек1.Инициализировать(ИсточникНастроек);
	
	Настройки = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроек1.ЗагрузитьНастройки(Настройки.Получить());
	ОбменССайтомПереопределяемый.КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек1, "ОбновлениеПакетаПредложений");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек1.Настройки,,,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаОстаткиИЦены);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СоздатьНедостающиеКолонкиТаблицыДанных(КомпоновщикНастроек.Настройки, ТаблицаОстаткиИЦены);

КонецПроцедуры

Процедура ПолучитьДанныеДляВыгрузкиПакетаПредложений(ПрикладныеПараметры,Знач КомпоновщикНастроек, ТаблицаДанныеПакетаПредложений,
										  ОписаниеОшибки)
		
	ТекстыЗапросов = Новый Структура("Цены, Остатки");
	ОбменССайтомПереопределяемый.ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов);
	ЕстьОшибка = ЛОЖЬ;
	Для Каждого КлючЗначение Из ТекстыЗапросов Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнен текст запроса для получения данных") + ":" + КлючЗначение.Ключ
				+ Символы.ПС;
			ЕстьОшибка = ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ПоляИсточниковДанных = Новый Структура;
	ЗаполнитьПоляИсточниковДанных(ПоляИсточниковДанных, ИСТИНА);
	
	ТаблицаЦены = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Цены, ПоляИсточниковДанных.Цены,
		ПрикладныеПараметры, "ПакетПредложений");
	ТаблицаЦены.Индексы.Добавить("Номенклатура");
	
	
	ТаблицаОстатки = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Остатки, ПоляИсточниковДанных.Остатки,
		ПрикладныеПараметры, "ПакетПредложений");
	ТаблицаОстатки.Индексы.Добавить("Номенклатура");

	// Полученные в результате выполнения СКД таблицы значений поместим в новую СКД,
	// чтобы можно было применить отбор по количеству на складе
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	ОбъектЦены = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	ОбъектЦены.Имя = "Цены";
	ОбъектЦены.ИмяОбъекта = "Цены";
	ОбъектЦены.ИсточникДанных = "ИсточникДанных1";
	
	ОбъектОстатки = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	ОбъектОстатки.Имя = "Остатки";
	ОбъектОстатки.ИмяОбъекта = "Остатки";
	ОбъектОстатки.ИсточникДанных = "ИсточникДанных1";
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Цены", ТаблицаЦены);
	ВнешниеНаборыДанных.Вставить("Остатки", ТаблицаОстатки);
	
	ПоляИсточниковДанных = Новый Структура;
	ЗаполнитьПоляИсточниковДанных(ПоляИсточниковДанных, ИСТИНА, ЛОЖЬ);
	ЗаполнитьПоляСхемыКомпоновки(ПоляИсточниковДанных, СхемаКомпоновкиДанных);
	
	СвязиНаборов = СхемаКомпоновкиДанных.СвязиНаборовДанных;
	
	НоваяСвязь = СвязиНаборов.Добавить();
	НоваяСвязь.НаборДанныхИсточник  = "Цены";
	НоваяСвязь.НаборДанныхПриемник  = "Остатки";
	НоваяСвязь.ВыражениеИсточник    = "Номенклатура";
	НоваяСвязь.ВыражениеПриемник    = "Номенклатура";
	
	НоваяСвязь = СвязиНаборов.Добавить();
	НоваяСвязь.НаборДанныхИсточник  = "Цены";
	НоваяСвязь.НаборДанныхПриемник  = "Остатки";
	НоваяСвязь.ВыражениеИсточник    = "Характеристика";
	НоваяСвязь.ВыражениеПриемник    = "Характеристика";

	НоваяСвязь = СвязиНаборов.Добавить();
	НоваяСвязь.НаборДанныхИсточник  = "Цены";
	НоваяСвязь.НаборДанныхПриемник  = "Остатки";
	НоваяСвязь.ВыражениеИсточник    = "ЕдиницаИзмерения";
	НоваяСвязь.ВыражениеПриемник    = "ЕдиницаИзмерения";
	
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Идентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек1 = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек1.Инициализировать(ИсточникНастроек);
	
	Настройки = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроек1.ЗагрузитьНастройки(Настройки.Получить());
	
	ОбщийМассив = ПоляИсточниковДанных.Цены;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбщийМассив, ПоляИсточниковДанных.Остатки, ИСТИНА);
	
	УдалитьПоляДругихНаборовДанных(ОбщийМассив, КомпоновщикНастроек1.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек1.Настройки,,,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,,);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаДанныеПакетаПредложений = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанныеПакетаПредложений);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	ТаблицаДанныеПакетаПредложений.Индексы.Добавить("Номенклатура");

КонецПроцедуры

Процедура ЗаполнитьПоляСхемыКомпоновки(ПоляИсточниковДанных, СхемаКомпоновкиДанных)
	
	ПоляИсточникаЦены = СхемаКомпоновкиДанных.НаборыДанных.Цены.Поля;
	Для Каждого ПолеЦены Из ПоляИсточниковДанных.Цены Цикл
		
		Поле = ПоляИсточникаЦены.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле        = ПолеЦены;
		Поле.ПутьКДанным = ПолеЦены;
		Поле.Заголовок   = ПолеЦены;
		
	КонецЦикла;
	
	ПоляИсточникаЦены = СхемаКомпоновкиДанных.НаборыДанных.Остатки.Поля;
	Для Каждого ПолеОстатка Из ПоляИсточниковДанных.Остатки Цикл
		
		Поле = ПоляИсточникаЦены.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле        = ПолеОстатка;
		Поле.ПутьКДанным = ПолеОстатка;
		Поле.Заголовок   = ПолеОстатка;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ПолучитьДанныеДляВыгрузкиКаталога(ПрикладныеПараметры, Знач КомпоновщикНастроек, ТаблицыДляВыгрузкиКаталога, 
											ОписаниеОшибки)
	
	// ТекстыЗапросов = Новый Структура("Номенклатура, Свойства, Файлы, Характеристики");
	ТекстыЗапросов = Новый Структура("Номенклатура, Свойства, Файлы");
		
	ОбменССайтомПереопределяемый.ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов);
	
	ЕстьОшибка = ЛОЖЬ;
	Для Каждого КлючЗначение Из ТекстыЗапросов Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнен текст запроса для получения данных")
				+" "+ КлючЗначение.Ключ;
			ЕстьОшибка = ИСТИНА;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ПоляИсточниковДанных = Новый Структура;
	ЗаполнитьПоляИсточниковДанных(ПоляИсточниковДанных);
	
	ТаблицаНоменклатуры = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Номенклатура,
		ПоляИсточниковДанных.Номенклатура, ПрикладныеПараметры, "Каталог");
	ТаблицаНоменклатуры.Индексы.Добавить("Номенклатура");
	
	
	// ТаблицаХарактеристики = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Характеристики,
	// 		ПоляИсточниковДанных.Характеристики, ПрикладныеПараметры, "Каталог");
	// ТаблицаХарактеристики.Индексы.Добавить("Номенклатура");
	ТаблицаХарактеристики = Неопределено;
	
	ТаблицаФайлы = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Файлы, ПоляИсточниковДанных.Файлы,
		ПрикладныеПараметры, "Каталог");
	ТаблицаФайлы.Индексы.Добавить("Номенклатура");
	
	ТаблицаСвойства = РезультатВыполненияСхемы(КомпоновщикНастроек, ТекстыЗапросов.Свойства,
		ПоляИсточниковДанных.Свойства, ПрикладныеПараметры, "Каталог");
	ТаблицаСвойства.Индексы.Добавить("Номенклатура");
	
	ТаблицыДляВыгрузкиКаталога = Новый Структура;
	ТаблицыДляВыгрузкиКаталога.Вставить("Номенклатура", ТаблицаНоменклатуры);
	ТаблицыДляВыгрузкиКаталога.Вставить("Характеристики", ТаблицаХарактеристики);
	ТаблицыДляВыгрузкиКаталога.Вставить("Файлы", ТаблицаФайлы);
	ТаблицыДляВыгрузкиКаталога.Вставить("Свойства", ТаблицаСвойства);
	
КонецПроцедуры

Функция РезультатВыполненияСхемы(Знач КомпоновщикНастроек, ТекстЗапроса, ПоляНабораДанных, ПрикладныеПараметры, ИмяМакета)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	// Изменяем текст запроса чтобы получить таблицу, свернутую по номенклатуре.
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	НаборДанныхЗапрос = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = ИСТИНА;
	НаборДанныхЗапрос.Запрос = ТекстЗапроса;
	НаборДанныхЗапрос.Имя            = "НаборДанных";
	НаборДанныхЗапрос.ИсточникДанных = "ИсточникДанных";
		
	ПараметрыКомпоновки = СхемаКомпоновкиДанных.Параметры;
	
	Если ВРег(ИмяМакета) = Врег("Каталог") Тогда
		ОбменССайтомПереопределяемый.УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры,
																	ПараметрыКомпоновки);
	ИначеЕсли ВРег(ИмяМакета) = Врег("ПакетПредложений") Тогда
		ОбменССайтомПереопределяемый.УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры,
																	ПараметрыКомпоновки);

	КонецЕсли;
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Идентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек1 = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек1.Инициализировать(ИсточникНастроек);
	
	Настройки = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроек1.ЗагрузитьНастройки(Настройки.Получить());
	
	ОбменССайтомПереопределяемый.КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек1, ИмяМакета);
	
	УдалитьПоляДругихНаборовДанных(ПоляНабораДанных, КомпоновщикНастроек1.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек1.Настройки,,,
	                                              Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СоздатьНедостающиеКолонкиТаблицыДанных(КомпоновщикНастроек.Настройки, ТаблицаРезультат);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ЗаполнитьПоляИсточниковДанных(СтруктураСПолямиИсточниковДанных, ПакетПредложений = ЛОЖЬ, ДобавитьПоляОтбор = ИСТИНА)
	
	ПоляОтбора = Новый Соответствие;
	
	Если ПакетПредложений Тогда
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиПакетПредложений");
		
		ОбменССайтомПереопределяемый.ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора);
		
	Иначе
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталог");
		
		ОбменССайтомПереопределяемый.ЗаполнитьПоляОтбораКаталога(ПоляОтбора);
		
	КонецЕсли;
	
	КоллекцияНаборовДанных = СхемаКомпоновки.НаборыДанных.НаборДанных1.Элементы;
	Для Каждого ЭлементДанных Из КоллекцияНаборовДанных Цикл
		ПоляНабора = Новый Массив;
		Для Каждого ПолеНабора Из ЭлементДанных.Поля Цикл
			
			ПоляНабора.Добавить(ВРег(ПолеНабора.Поле));
		КонецЦикла;
		
		Если ДобавитьПоляОтбор Тогда
			// Добавляем в поля набора Вычисляемые поля, что бы избежать их удаления из отбора.
			ИмяНабораДанных = ЭлементДанных.Имя;
			ВычисляемыеПоля = ПоляОтбора.Получить(ИмяНабораДанных);
			Если Не ВычисляемыеПоля = Неопределено Тогда
				
				Для Каждого ДанныеПоля Из ВычисляемыеПоля Цикл
					ПоляНабора.Добавить(ВРег(ДанныеПоля.Наименование));
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСПолямиИсточниковДанных.Вставить(ЭлементДанных.Имя, ПоляНабора);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция МассивДопустимыхРасширенийИзображений() Экспорт

	МассивДопустимыхРасширенийИзображений = Новый Массив;
	МассивДопустимыхРасширенийИзображений.Добавить("gif");
	МассивДопустимыхРасширенийИзображений.Добавить("jpg");
	МассивДопустимыхРасширенийИзображений.Добавить("jpeg");
	МассивДопустимыхРасширенийИзображений.Добавить("png");
	
	Возврат МассивДопустимыхРасширенийИзображений;
	
КонецФункции

Процедура УдалитьПоляДругихНаборовДанных(ПоляНабораДанных, КомпоновщикНастройки)
	
	ПоляКомпоновки = КомпоновщикНастройки.Выбор.Элементы;
	н = 0;
	Пока н < ПоляКомпоновки.Количество() Цикл
		
		ПолеКомпоновки = ПоляКомпоновки[н];
		
		Если ПоляНабораДанных.Найти(ВРег(ПолеКомпоновки.Поле)) = Неопределено Тогда
			ПоляКомпоновки.Удалить(ПолеКомпоновки);
		Иначе
			н = н +1;
		КонецЕсли;
	КонецЦикла;

	ПоляОтбора = КомпоновщикНастройки.Отбор.Элементы;
	
	н = 0;
	Пока н < ПоляОтбора.Количество() Цикл
		
		ПолеОтбора = ПоляОтбора[н];
		
		Если ПоляНабораДанных.Найти(ВРег(ПолеОтбора.ЛевоеЗначение)) = Неопределено Тогда
			ПоляОтбора.Удалить(ПолеОтбора);
		Иначе
			н = н +1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВладельцаКаталога(Параметры, ДанныеОрганизацииВладельцаКаталога)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Контрагент,
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеДляПечати КАК НаименованиеПолное,
	|	Организации.ПравовойСтатус КАК ПравовойСтатус,
	|	Организации.ИНН КАК ИНН,
	|	"""" КАК КПП,
	|	Организации.ОКПО КАК КодПоОКПО
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &ВладелецКаталога";
	
	Запрос.УстановитьПараметр("ВладелецКаталога", Параметры.ВладелецКаталога);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеОрганизацииВладельцаКаталога = Выборка;
	
КонецПроцедуры

Процедура ЗаполнитьКлассификатор(ДанныеДляВыгрузкиКаталога, Классификатор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаНоменклатура.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втКаталог
	|ИЗ
	|	&ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	втКаталог.Номенклатура КАК Номенклатура
	|ИЗ
	|	втКаталог КАК втКаталог
	|ИТОГИ ПО
	|	Номенклатура ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВременнаяТаблицаНоменклатура", ДанныеДляВыгрузкиКаталога);
	Результат = Запрос.Выполнить();
	
	Классификатор = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией)
	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицаОбновленияПакета(МассивНоменклатуры, ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого ТекСтрока Из ТаблицаИсточник Цикл
		
		Если МассивНоменклатуры.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);

	КонецЦикла;
	
	ТаблицаЦены = ТаблицаПриемник.Скопировать();
	ТаблицаЦены.Свернуть("Номенклатура, Характеристика, ЦенаЗаЕдиницу, ТипЦены, ТипЦеныВалютаКод,
																|ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
																|ТипЦеныЕдиницаЦеныКоэффициент");
	
	ТаблицаОстатки = ТаблицаПриемник.Скопировать();
	ТаблицаОстатки.Свернуть("Номенклатура, Характеристика, Склад, ОстатокНаСкладе");
	
	ТаблицаПриемник.Свернуть("Номенклатура, Характеристика", "Цены, Остатки");
	
	Для Каждого ТекСтрока Из ТаблицаПриемник Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		Отбор.Вставить("Характеристика", ТекСтрока.Характеристика);
		
		Цены = ТаблицаЦены.Скопировать(Отбор,"ЦенаЗаЕдиницу, ТипЦены, ТипЦеныВалютаКод,
																|ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
																|ТипЦеныЕдиницаЦеныКоэффициент");
		ТекСтрока.Цены = Цены;
		
		Остатки = ТаблицаОстатки.Скопировать(Отбор, "Склад, ОстатокНаСкладе");
		ТекСтрока.Остатки = Остатки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИзменияПакета(СтрокаТаблицыКаталога, ТаблицаОбновленияПакета, КоммерческаяИнформацияXDTO)
	
	ПакетCML =  ПакетCML();
	ИзмененияПакетаПредложенийТип = ПакетCML.Получить("ИзмененияПакетаПредложений");
	ИзмененияПакетаПредложенийXDTO = ФабрикаXDTO.Создать(ИзмененияПакетаПредложенийТип);
	
	ИзмененияПакетаПредложенийXDTO.Ид = СтрокаТаблицыКаталога.ИдентификаторКаталога+"#";
	ИзмененияПакетаПредложенийXDTO.ИдКаталога = СтрокаТаблицыКаталога.ИдентификаторКаталога;
	
	ПредложенияТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ИзмененияПакетаПредложенийТип, "Предложения");
	ПредложенияXDTO = ФабрикаXDTO.Создать(ПредложенияТип);
	
	ПредложениеТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложенияТип, "Предложение");
	
	ЦенаТип = ПакетCML.Получить("Цена");
	ОстаткиПоСкладамТип = ПакетCML.Получить("ОстаткиПоСкладам");
	
	ЦеныТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Цены");
	Для Каждого ТекСтрока Из ТаблицаОбновленияПакета Цикл
		
		ПредложениеXDTO = ФабрикаXDTO.Создать(ПредложениеТип);
		
		
		ПредложениеXDTO.Ид = УникальныйИдентификаторОбъекта(ТекСтрока.Номенклатура);
		Если ЗначениеЗаполнено(ТекСтрока.Характеристика) Тогда
			ПредложениеXDTO.ИдХарактеристики = УникальныйИдентификаторОбъекта(ТекСтрока.Характеристика);
		КонецЕсли;
		
		ЦеныXDTO = ФабрикаXDTO.Создать(ЦеныТип);
		Для Каждого СтрокаТипЦены Из ТекСтрока.Цены Цикл
			
			ЦенаXDTO = ФабрикаXDTO.Создать(ЦенаТип);
			ЦенаXDTO.ИдТипаЦены = УникальныйИдентификаторОбъекта(СтрокаТипЦены.ТипЦены);
			ЦенаXDTO.ЦенаЗаЕдиницу = СтрокаТипЦены.ЦенаЗаЕдиницу;
			ЦенаXDTO.Коэффициент = СтрокаТипЦены.ТипЦеныЕдиницаЦеныКоэффициент;
			ЦенаXDTO.Валюта = ФорматНаименованияВалютыДляXDTO(СтрокаТипЦены.ТипЦеныВалютаКод);
			ЦенаXDTO.Единица = СтрокаТипЦены.ТипЦеныЕдиницаЦеныНаименованиеСокращенное;
			
			ЦеныXDTO.Цена.Добавить(ЦенаXDTO); 
			
		КонецЦикла;
		Если ЦеныXDTO.Цена.Количество() > 0 Тогда
			ПредложениеXDTO.Цены = ЦеныXDTO;
		КонецЕсли;
		
		ОстатокВсего = 0;
		Для Каждого СтрокаОстаткиПоСкладам Из ТекСтрока.Остатки Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаОстаткиПоСкладам.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			ОстаткиПоСкладамXDTO = ФабрикаXDTO.Создать(ОстаткиПоСкладамТип);
			ОстаткиПоСкладамXDTO.ИдСклада = УникальныйИдентификаторОбъекта(СтрокаОстаткиПоСкладам.Склад);
			ОстаткиПоСкладамXDTO.КоличествоНаСкладе = СтрокаОстаткиПоСкладам.ОстатокНаСкладе;
			
			ПредложениеXDTO.Склады.Добавить(ОстаткиПоСкладамXDTO);
			
			ОстатокВсего = ОстатокВсего + СтрокаОстаткиПоСкладам.ОстатокНаСкладе;
			
		КонецЦикла;
		
		ПредложениеXDTO.Количество = ОстатокВсего;
		
		ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
		
	КонецЦикла;
	
	ИзмененияПакетаПредложенийXDTO.Предложения = ПредложенияXDTO;
	
	КоммерческаяИнформацияXDTO.ИзмененияПакетаПредложений.Добавить(ИзмененияПакетаПредложенийXDTO);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДляОтправкиДаннымиНоменклатуры(МассивНоменклатуры, СтруктураИсходныхТаблиц, ТаблицаПриемник)
	
	Для Каждого ТекСтрока Из СтруктураИсходныхТаблиц.Номенклатура Цикл
		
		Если МассивНоменклатуры.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		
		Если Не СтруктураИсходныхТаблиц.Характеристики = Неопределено Тогда
			Характеристики = СтруктураИсходныхТаблиц.Характеристики.Скопировать(Отбор);
			НоваяСтрока.Характеристики = Характеристики;
		КонецЕсли;
		
		Файлы = СтруктураИсходныхТаблиц.Файлы.Скопировать(Отбор);
		НоваяСтрока.Файлы = Файлы;
		
		Свойства = СтруктураИсходныхТаблиц.Свойства.Скопировать(Отбор);
		НоваяСтрока.Свойства = Свойства;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуФормированияПакетаПредложений(МассивНоменклатуры, ТаблицаИсточник, ТаблицаПриемник)
	
		
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ЭлементМассива);
		
		ТаблицаТипыЦен = ТаблицаИсточник.Скопировать(Отбор);
		
		ТаблицаТипыЦен.Свернуть("ТипЦены,
									|ТипЦеныЦенаВключаетНДС,
									|ТипЦеныНаименование,
									|ТипЦеныВалютаКод,
									|ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
									|ТипЦеныЕдиницаЦеныКоэффициент,
									|ЦенаЗаЕдиницу,
									|Номенклатура,
									|Характеристика, ЕдиницаИзмерения");
									
		УдалитьПустыеСтроки(ТаблицаТипыЦен, "ТипЦены");
		
		ТаблицаОстаткиПоСкладам = ТаблицаИсточник.Скопировать(Отбор);
		ТаблицаОстаткиПоСкладам.Свернуть("Склад, СкладНаименование, ОстатокНаСкладе,
									|Номенклатура, Характеристика, ЕдиницаИзмерения");
		
		УдалитьПустыеСтроки(ТаблицаОстаткиПоСкладам, "Склад");
		
		ПромежуточнаяТаблицаНоменклатуры = ТаблицаИсточник.Скопировать(Отбор);
		ПромежуточнаяТаблицаНоменклатуры.Свернуть("Номенклатура, НоменклатураНаименование,
									|НоменклатураАртикул,
									|НоменклатураПометкаУдаления,
									|Характеристика,
									|ЕдиницаИзмерения,
									|ЕдиницаИзмеренияКод,
									|ЕдиницаИзмеренияНаименованиеПолное,
									|ЕдиницаИзмеренияМеждународноеСокращение,
									|ЕдиницаИзмеренияПересчетКоэф,
									|ЕдиницаИзмеренияПересчетЕдиница,
									|ЕдиницаИзмеренияПересчетЕдиница");
	
		УдалитьПустыеСтроки(ПромежуточнаяТаблицаНоменклатуры, "НоменклатураНаименование");
		
		Для Каждого ТекСтрока Из ПромежуточнаяТаблицаНоменклатуры Цикл
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			ОтборНоменклатураХарактеристика = Новый Структура;
			ОтборНоменклатураХарактеристика.Вставить("Номенклатура", ТекСтрока.Номенклатура);
			ОтборНоменклатураХарактеристика.Вставить("Характеристика", ТекСтрока.Характеристика);
			ОтборНоменклатураХарактеристика.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
			
			Остатки = ТаблицаОстаткиПоСкладам.Скопировать(ОтборНоменклатураХарактеристика);
			НоваяСтрока.ОстаткиПоСкладам = Остатки;
			
			ТаблицаЦен = ТаблицаТипыЦен.Скопировать(ОтборНоменклатураХарактеристика);
			НоваяСтрока.Цены = ТаблицаЦен;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСвойстваНоменклатуры(Знач ТаблицаСвойстваНоменклатуры, СвойстваНоменклатуры)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаНоменклатура.СвойствоНоменклатуры КАК Свойство,
	|	ВременнаяТаблицаНоменклатура.ЗначениеСвойства КАК Значение
	|ПОМЕСТИТЬ втСвойства
	|ИЗ
	|	&ВременнаяТаблицаНоменклатура КАК ВременнаяТаблицаНоменклатура
	|;
	|
	|// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
	|ВЫБРАТЬ
	|	втСвойства.Свойство КАК Свойство,
	|	втСвойства.Значение КАК Значение,
	|	втСвойства.Свойство.ТипДополнительногоРеквизита КАК ТипЗначения
	|ИЗ
	|	втСвойства КАК втСвойства
	|ИТОГИ ПО
	|	Свойство";
	
	Запрос.УстановитьПараметр("ВременнаяТаблицаНоменклатура", ТаблицаСвойстваНоменклатуры);

	Результат = Запрос.Выполнить();
	
	СвойстваНоменклатуры = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецПроцедуры

Функция ВыгрузитьКаталог(Параметры, СтрокаТаблицыКаталога, ТаблицаИнформации)
	
	ИндексФайлаОбмена	= Параметры.ИндексФайлаОбмена;
	ВыполнятьОбмен 		= ИСТИНА;
	ПерваяПорция 		= ИСТИНА;
	СтруктураРезультата	= Параметры.СтруктураРезультата;
	ТолькоИзменения 	= Параметры.ВыгружатьИзменения;
	
	Если Параметры.РежимВыгрузки = 0 Тогда
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталогПакетПредложений");
		
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
											СтрокаТаблицыКаталога.ХранилищеНастроекКаталогПакет);

		
	Иначе
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталог");
	
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
											СтрокаТаблицыКаталога.ХранилищеНастроекКаталог);
	КонецЕсли;
	// Отборы.
	УстановитьОтборКомпоновщика(Параметры, СтрокаТаблицыКаталога, КомпоновщикНастроек);
	
	// Получаем данные для формирования "Каталога номенклатуры".
	ТаблицыДляВыгрузкиКаталога = Неопределено;
	ОписаниеОшибки = "";
	ПолучитьДанныеДляВыгрузкиКаталога(Параметры.ПрикладныеПараметры, КомпоновщикНастроек, ТаблицыДляВыгрузкиКаталога,
		ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбменССайтомСобытия.ЗаписатьОшибку(ОписаниеОшибки, Параметры.УзелОбмена);
		Возврат ЛОЖЬ;
	КонецЕсли;
		
	Если ТаблицыДляВыгрузкиКаталога.Номенклатура.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	// Заполняем данные Владельца каталога.
	ДанныеОрганизацииВладельцаКаталога = Неопределено;
	ЗаполнитьДанныеВладельцаКаталога(Параметры, ДанныеОрганизацииВладельцаКаталога);
	
	// Формируем дерево значений, которое будет содержать классификатор каталога.
	Классификатор = Неопределено;
	ЗаполнитьКлассификатор(ТаблицыДляВыгрузкиКаталога.Номенклатура, Классификатор);
	
	// Формируем Выборку свойств номенклатуры для заполнения Классификатора.
	СвойстваНоменклатуры = Неопределено;
	ЗаполнитьСвойстваНоменклатуры(ТаблицыДляВыгрузкиКаталога.Свойства, СвойстваНоменклатуры);
	
	// Сначала формируем и отправляем классификатор,
	// если сайт его успешно загрузит,
	// то будем порциями отправлять каталог.
	
	URIПространстваИмен = "urn:1C.ru:commerceml_2";
	ПакетCML = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);

	КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
	КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);
	
	// Сначала отправляем каталог.
	КоммерческаяИнформацияXDTO.ВерсияСхемы = ОбменССайтомПовтИсп.ВерсияСхемы();
	КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;
	
	КлассификаторТип = ПакетCML.Получить("Классификатор");
	КлассификаторXDTO = ФабрикаXDTO.Создать(КлассификаторТип);
	
	КлассификаторXDTO.ИД = СтрокаТаблицыКаталога.ИдентификаторКаталога;
	КлассификаторXDTO.Наименование = ФорматНаименованияДляXDTO("Классификатор (" + СтрокаТаблицыКаталога.Каталог + ")");
	
	Владелец = ПолучитьКонтрагентаXDTO(ДанныеОрганизацииВладельцаКаталога);
	Если Владелец = Неопределено Тогда
		
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
									ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось определить организацию владельца каталога")
									+ Символы.ПС + ТекстОписаниеОшибки);
		
		ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
		СтруктураРезультата.ВыгруженоКартинок = 0;
		СтруктураРезультата.ВыгруженоТоваров = 0;
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	КлассификаторXDTO.Владелец = Владелец;
	
	ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, Классификатор.Строки, ПакетCML);
	
	// Добавляем свойства номенклатуры.
	ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, СвойстваНоменклатуры);
	
	КоммерческаяИнформацияXDTO.Классификатор = КлассификаторXDTO;
	
	ОписаниеОшибки = "";
	
	// Регистрируем номенклатуру в узле.
	КолонкаНоменклатуры = ТаблицыДляВыгрузкиКаталога.Номенклатура.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры = Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры, КолонкаНоменклатуры);
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
	КонецЦикла;
	
	// Помечаем зарегистрированную в узле номенклатуру номером сообщения 0.
	ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, 0, МассивНоменклатуры);
	
	ИндексПорции = 0;
	НомерСообщения = 1;
	НомерСообщенияСтарый = Неопределено;
	КоличествоПовторов = 0;
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запуск выгрузки товаров");
	
	ТаблицаДляФормированияКаталога =  ТаблицыДляВыгрузкиКаталога.Номенклатура.СкопироватьКолонки();
	ТаблицаДляФормированияКаталога.Колонки.Добавить("Файлы"); // в эту колонку поместим таблицу значений, содержашую файлы номенклатуры
	ТаблицаДляФормированияКаталога.Колонки.Добавить("Свойства"); // в эту колонку поместим таблицу значений, содержашую свойства номенклатуры
	ТаблицаДляФормированияКаталога.Колонки.Добавить("Характеристики"); // в эту колонку поместим таблицу значений, содержашую характеристики
	
	ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена выгрузка товаров");
	
	Пока ВыполнятьОбмен Цикл
		
		// Получаем порцию товаров.
		МассивНоменклатуры = НоменклатураУзла(Параметры.УзелОбмена, Параметры.РазмерПорции, 0);
		
		// Если в узле нет новых товаров, значит остались старые.
		Если МассивНоменклатуры.Количество() = 0 Тогда
		
			ТаблицаНоменклатуры = НоменклатураНомерСообщенияУзла(Параметры.УзелОбмена, Параметры.РазмерПорции);
			
			Если ТаблицаНоменклатуры.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения Тогда
				КоличествоПовторов = КоличествоПовторов + 1;
			КонецЕсли;
			
			// Если количество повторов больше заданного
			// прерываем обмен.
			Если КоличествоПовторов >= Параметры.КоличествоПовторов Тогда
				ВыполнятьОбмен = ЛОЖЬ;
				Прервать;
			КонецЕсли;
			
			МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
			НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения;
			
		КонецЕсли;
		
		// Получаем данные номенклатуры для получения файла.
		ТаблицаДляФормированияКаталога.Очистить();
		
		// Т.к. данные в основной таблице храняться в развернутом виде
		// (колчество строк будет равно количеству прикрепленных файлов, например)
		// необходимо свернуть их по номенклатуре, характеристике , единице измерения.
		ЗаполнитьТаблицуДляОтправкиДаннымиНоменклатуры(МассивНоменклатуры, ТаблицыДляВыгрузкиКаталога,
																		ТаблицаДляФормированияКаталога);
		
		Если ТаблицаДляФормированияКаталога.Количество() = 0  Тогда
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		
		// Формируем файл с каталогом для отправки на сайт.
		КаталогТип = ПакетCML.Получить("Каталог");
		КаталогXDTO = ФабрикаXDTO.Создать(КаталогТип);
		
		КаталогXDTO.СодержитТолькоИзменения = (НомерСообщения > 1);
		
		
		КаталогXDTO.Ид = СтрокаТаблицыКаталога.ИдентификаторКаталога;
		КаталогXDTO.ИдКлассификатора = СтрокаТаблицыКаталога.ИдентификаторКаталога;
		КаталогXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаТаблицыКаталога.Каталог);
		
		КаталогXDTO.Владелец = ПолучитьКонтрагентаXDTO(ДанныеОрганизацииВладельцаКаталога);
		
		// Добавляем в каталог информацию о товарах.
		ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры, ТаблицаДляФормированияКаталога);
		
		КаталогXDTO.Проверить();
		
		Если НомерСообщения > 1 Тогда
			КоммерческаяИнформацияТип = ПакетCML.Получить("КоммерческаяИнформация");
			КоммерческаяИнформацияXDTO = ФабрикаXDTO.Создать(КоммерческаяИнформацияТип);	
			
		КонецЕсли;
		
		КоммерческаяИнформацияXDTO.Каталог = КаталогXDTO;
		КоммерческаяИнформацияXDTO.ВерсияСхемы = ОбменССайтомПовтИсп.ВерсияСхемы();
		КоммерческаяИнформацияXDTO.ДатаФормирования = Параметры.ДатаФормирования;

		ИндексПорции = ИндексПорции + 1;
		
		ИмяФайлаКаталога = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
				Параметры.КаталогНаДиске + "\import"
				+ ИндексФайлаОбмена +"_"
				+ ИндексПорции + ".xml");

		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаКаталога, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Попытка
			
			КоммерческаяИнформацияXDTO.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
			ЗаписьXML.Закрыть();
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать XML-файл классификатора товаров на диск") + ":"
				+ " " + ИмяФайлаКаталога + Символы.ПС + ТекстОписаниеОшибки);
				
			ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
			ДобавитьОписаниеОшибки(СтрокаТаблицыИнформации.Описание, СтруктураРезультата.ОписаниеОшибки);
			ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Ошибка,
														ТекстСообщения);
			
			СтруктураРезультата.ВыгруженоКартинок = 0;
			СтруктураРезультата.ВыгруженоТоваров = 0;
			
			Возврат ЛОЖЬ;
			
		КонецПопытки;
		
		// Отправляем файл на сайт.
		Если Параметры.ВыгружатьНаСайт Тогда
			
			УдалитьРегистрацию = ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации);
			
		Иначе 
			УдалитьРегистрацию = ИСТИНА;
		КонецЕсли;
		
		// Если файл на сайт был загружен, удаляем регистрацию.
		Если УдалитьРегистрацию Тогда
			
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			
			// Если не был отправлен первый файл, который содержит классификатор
			// то не будем продолжать обмен, т.к. данные на сайт не загрузятся.
			Если НомерСообщения = 1 Тогда
				ВыполнятьОбмен = ЛОЖЬ;
				Прервать;
			КонецЕсли;
						
			// Если мы имеем дело с данными, которые уже отправлялись на сайт, но не отправились
			// то не будем у них изменять номер сообщения.
			Если Не НомерСообщенияСтарый = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если товары не были отправлены на сайт, то зарегистрируем их в узле
			// и пометим номером сообщения отличным от нуля.
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, НомерСообщения, МассивНоменклатуры);
			
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
	Если ВыполнятьОбмен Тогда
		Результат =  Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		Результат =  Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат, ТекстСообщения);
	
	Возврат ВыполнятьОбмен;
	
	
КонецФункции

Функция ВыгрузитьОстаткиИЦены(Параметры, СтрокаТаблицыКаталога, ТаблицаИнформации)
	
	ИндексФайлаОбмена	= Параметры.ИндексФайлаОбмена;
	
	СтруктураРезультата	= Параметры.СтруктураРезультата;
	ТолькоИзменения 	= Параметры.ВыгружатьИзменения;
	
	СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиОбновлениеПакетаПредложений");
	
	КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
											СтрокаТаблицыКаталога.ХранилищеНастроекИзмененияПакета);
	
	УстановитьОтборКомпоновщика(Параметры, СтрокаТаблицыКаталога, КомпоновщикНастроек);
	
	ТаблицаОстаткиИЦены = Новый ТаблицаЗначений;
	
	ОписаниеОшибки = "";
	ПолучитьДанныеОбновленияПакетаПредложений(Параметры.ПрикладныеПараметры, КомпоновщикНастроек, ТаблицаОстаткиИЦены,
																										ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбменССайтомСобытия.ЗаписатьОшибку(ОписаниеОшибки, Параметры.УзелОбмена);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ЗарегистрироватьВыгружаемыеДанные(ТаблицаОстаткиИЦены, "Номенклатура", Параметры.УзелОбмена);
	
	ИндексПорции = 0;
	НомерСообщения = 1;
	НомерСообщенияСтарый = Неопределено;
	КоличествоПовторов = 0;
	
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запуск выгрузки обновление пакета");
	ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена выгрузка обновления пакета");
	
	ВыполнятьОбмен = ИСТИНА;
	Пока ВыполнятьОбмен Цикл
		
		
		// Получаем порцию товаров.
		МассивНоменклатуры = НоменклатураУзла(Параметры.УзелОбмена, Параметры.РазмерПорции, 0);
		
		// Если в узле нет новых товаров, значит остались старые.
		Если МассивНоменклатуры.Количество() = 0 Тогда
		
			ТаблицаНоменклатуры = НоменклатураНомерСообщенияУзла(Параметры.УзелОбмена, Параметры.РазмерПорции);
			
			Если ТаблицаНоменклатуры.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения Тогда
				КоличествоПовторов = КоличествоПовторов + 1;
			КонецЕсли;
			
			// Если количество повторов больше заданного
			// прерываем обмен.
			Если КоличествоПовторов >= Параметры.КоличествоПовторов Тогда
				ВыполнятьОбмен = ЛОЖЬ;
				Прервать;
			КонецЕсли;
			
			МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
			НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения;
			
		КонецЕсли;
		
		ТаблицаОбновленияПакета = ТаблицаОстаткиИЦены.СкопироватьКолонки();
		ТаблицаОбновленияПакета.Колонки.Добавить("Цены");
		ТаблицаОбновленияПакета.Колонки.Добавить("Остатки");
		
		// Из общей таблицы товаров получаем данные по товарам в порции
		// и сгруппируем ее по ценам и остаткам по складам.
		ЗаполнитьТаблицаОбновленияПакета(МассивНоменклатуры, ТаблицаОстаткиИЦены, ТаблицаОбновленияПакета);
		
		Если ТаблицаОбновленияПакета.Количество() = 0  Тогда
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;

		
		КоммерческаяИнформацияXDTO = КоммерческаяИнформация(Параметры.ДатаФормирования);
		ЗаполнитьИзменияПакета(СтрокаТаблицыКаталога, ТаблицаОбновленияПакета, КоммерческаяИнформацияXDTO);
		
		// Записываем сформированный XDTO в каталог на диске.
		Параметры.Вставить("ИндексПорции",НомерСообщения);
		
		ЗаписатьДанныеВФайл(Параметры, КоммерческаяИнформацияXDTO, СтрокаТаблицыИнформации, ВыполнятьОбмен);
		
		Если Не ВыполнятьОбмен Тогда
			Продолжить;
		КонецЕсли;
		
		// Отправляем файл на сайт.
		Если Параметры.ВыгружатьНаСайт Тогда
			
			УдалитьРегистрацию = ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации);
			
		Иначе 
			УдалитьРегистрацию = ИСТИНА;
		КонецЕсли;
		
		// Если файл на сайт был загружен, удаляем регистрацию.
		Если УдалитьРегистрацию Тогда
			
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			
			// Если имеем дело с данными, которые уже отправлялись на сайт, но не отправились
			// то не будем у них изменять номер сообщения.
			Если Не НомерСообщенияСтарый = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если товары не были отправлены на сайт, то зарегистрируем их в узле
			// и пометим номером сообщения отличным от нуля.
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, НомерСообщения, МассивНоменклатуры);
			
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
	Если ВыполнятьОбмен Тогда
		Результат = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		Результат = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	
	ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат, ТекстСообщения);
	
	Возврат ВыполнятьОбмен;
	
КонецФункции

Процедура УстановитьОтборКомпоновщика(Параметры, СтрокаТаблицыКаталога, КомпоновщикНастроек)
	
	Если Параметры.ВыгружатьИзменения Тогда
		
		ИзменитьОтборКомпоновщика(КомпоновщикНастроек,
								  СтрокаТаблицыКаталога.Группы,
								  Параметры.СтруктураИзменений.Товары);
		
	Иначе
		
		ИзменитьОтборКомпоновщика(КомпоновщикНастроек,
								  СтрокаТаблицыКаталога.Группы);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеВидыЦенПакетаПредложений(ДанныеПакетаПредложений, ТаблицаВидыЦен)
	
	ТаблицаВидыЦен = ДанныеПакетаПредложений.Скопировать(,"ТипЦены,
															|ТипЦеныНаименование,
															|ТипЦеныВалютаКод,
															|ТипЦеныЦенаВключаетНДС");
	
	ТаблицаВидыЦен.Свернуть("ТипЦены,
							|ТипЦеныНаименование,
							|ТипЦеныВалютаКод,
							|ТипЦеныЦенаВключаетНДС");


	УдалитьПустыеСтроки(ТаблицаВидыЦен, "ТипЦены");

	
КонецПроцедуры

Процедура УдалитьПустыеСтроки(ТаблицаИсточник, ИмяКолонки)
	
	н = 0;
	Пока н < ТаблицаИсточник.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаИсточник[н];
		Если Не ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
			ТаблицаИсточник.Удалить(н);
		Иначе
			н = н + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получаем таблицу, которая содержит информацию о складах, на которых есть остатки
// и о точках самовывоза, указанных на форме.
Процедура ПолучитьДанныеСкладыПакетаПредложений(ДанныеПакетаПредложений, Параметры, СкладыПакетаПредложений)
	
	
	СписокТочекСамовывоза = Параметры.ПрикладныеПараметры.СписокТочекСамовывоза;
	СписокСкладов = ДанныеПакетаПредложений.ВыгрузитьКолонку("Склад");
	
	СкладыПакетаПредложений = Новый ТаблицаЗначений();
	СкладыПакетаПредложений.Колонки.Добавить("Склад");
	СкладыПакетаПредложений.Колонки.Добавить("СкладНаименование");
	СкладыПакетаПредложений.Колонки.Добавить("СкладАдрес");
	СкладыПакетаПредложений.Колонки.Добавить("СкладКонтактнаяИнформация");
	
	
	СкладАдрес = Новый Структура("ПочтовыйИндекс, Страна, Регион, Район, 
								|НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира");
	
	СкладКонтактнаяИнформация = Новый Структура("ТелефонРабочий, Почта, КоординатыНаКарте, Прочее");
	
	
	ОбменССайтомПереопределяемый.ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза, СписокСкладов,
																					СкладыПакетаПредложений,
																					СкладАдрес, 
																					СкладКонтактнаяИнформация);
		
	УдалитьПустыеСтроки(СкладыПакетаПредложений, "Склад");
		
КонецПроцедуры

Функция ВыгрузитьПакетПредложений(Параметры, СтрокаТаблицыКаталога, ТаблицаИнформации)
	
	Если Параметры.РежимВыгрузки = 0 Тогда
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиКаталогПакетПредложений");
		
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
									 СтрокаТаблицыКаталога.ХранилищеНастроекКаталогПакет);

		
	Иначе
		
		СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиПакетПредложений");
	
		КомпоновщикНастроек = ПолучитьКомпоновщикНастроекСхемыКомпоновки(СхемаКомпоновки,
								 СтрокаТаблицыКаталога.ХранилищеНастроекПакетПредложений);
	КонецЕсли;

	
	// Отборы.
	УстановитьОтборКомпоновщика(Параметры, СтрокаТаблицыКаталога, КомпоновщикНастроек);
	
	// Получаем данные для формирования "Пакета предложений".
	ОписаниеОшибки = "";
	ТаблицаДанныеПакетаПредложений = Новый ТаблицаЗначений;
	ПолучитьДанныеДляВыгрузкиПакетаПредложений(Параметры.ПрикладныеПараметры, КомпоновщикНастроек, ТаблицаДанныеПакетаПредложений, ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбменССайтомСобытия.ЗаписатьОшибку(ОписаниеОшибки, Параметры.УзелОбмена);
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	Если ТаблицаДанныеПакетаПредложений.Количество() = 0 Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	ДанныеОрганизацииВладельцаКаталога = Неопределено;
	ЗаполнитьДанныеВладельцаКаталога(Параметры, ДанныеОрганизацииВладельцаКаталога);
	
	// Из таблицы с данными пакета преложений.
	ВидыЦенПакетаПредложений = Неопределено;
	ПолучитьДанныеВидыЦенПакетаПредложений(ТаблицаДанныеПакетаПредложений, ВидыЦенПакетаПредложений);
	
	СкладыПакетаПредложений = Неопределено;
	ПолучитьДанныеСкладыПакетаПредложений(ТаблицаДанныеПакетаПредложений, Параметры, СкладыПакетаПредложений);
	
	ВладелецПакета = ПолучитьКонтрагентаXDTO(ДанныеОрганизацииВладельцаКаталога);
	
	КолонкаНоменклатуры = ТаблицаДанныеПакетаПредложений.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатуры = Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивНоменклатуры, КолонкаНоменклатуры);
	// Регистрируем номенклатуру в узле.
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
	КонецЦикла;
	
	// Помечаем зарегистрированную в узле номенклатуру номером сообщения 0.
	ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, 0, МассивНоменклатуры);
	
	ИндексФайлаОбмена = Параметры.ИндексФайлаОбмена;
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
	СтрокаТаблицыИнформации.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицыИнформации.Описание = Строка(ТекущаяДата()) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Запуск выгрузки пакета предложений");
	ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Завершена выгрузка пакета предложений");
	
	ИндексПорции = 0;
	НомерСообщения = 1;
	НомерСообщенияСтарый = Неопределено;
	КоличествоПовторов = 0;
	
	КоммерческаяИнформацияXDTO = КоммерческаяИнформация(Параметры.ДатаФормирования);
	
	ВыполнятьОбмен = ИСТИНА;
	Пока ВыполнятьОбмен Цикл
		
		// Получаем порцию товаров.
		МассивНоменклатуры = НоменклатураУзла(Параметры.УзелОбмена, Параметры.РазмерПорции, 0);
		
		// Если в узле нет новых товаров, проверим старые.
		Если МассивНоменклатуры.Количество() = 0 Тогда
		
			ТаблицаНоменклатуры = НоменклатураНомерСообщенияУзла(Параметры.УзелОбмена, Параметры.РазмерПорции);
			
			Если ТаблицаНоменклатуры.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения Тогда
				КоличествоПовторов = КоличествоПовторов + 1;
			КонецЕсли;
			
			// Если количество повторов больше заданного
			// прерываем обмен.
			Если КоличествоПовторов >= Параметры.КоличествоПовторов Тогда
				ВыполнятьОбмен = ЛОЖЬ;
				Прервать;
			КонецЕсли;
			
			МассивНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
			НомерСообщенияСтарый = ТаблицаНоменклатуры[0].НомерСообщения;
			
		КонецЕсли;
		
		ТаблицаДляФормированияПакетаПредложений = ТаблицаДанныеПакетаПредложений.СкопироватьКолонки();
		ТаблицаДляФормированияПакетаПредложений.Колонки.Добавить("Цены"); // в эту колонку поместим таблицу значений, содержашую цены номенклатуры
		ТаблицаДляФормированияПакетаПредложений.Колонки.Добавить("ОстаткиПоСкладам"); // в эту колонку поместим таблицу значений, содержашую остаки по складам
		
		// Получаем порцию данных из общей таблицы.
		// Т.к. данные в основной таблице храняться в развернутом виде (колчество строк будет равно количеству типов цен и/ или складов, например,)
		// необходимо свернуть их по номенклатуре, характеристике , единице измерения.
		ЗаполнитьТаблицуФормированияПакетаПредложений(МассивНоменклатуры, ТаблицаДанныеПакетаПредложений, ТаблицаДляФормированияПакетаПредложений);
		
		Если ТаблицаДляФормированияПакетаПредложений.Количество() = 0 Тогда
			
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ПакетCML = ПакетCML();
		ПакетПредложенийXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ПакетПредложений"));
		ПакетПредложенийXDTO.Владелец = ВладелецПакета;
		ДобавитьВидыЦенВПакетПредложенийXDTO(ВидыЦенПакетаПредложений, ПакетПредложенийXDTO, Параметры);
		ДобавитьСкладыВПакетПредложений(СкладыПакетаПредложений, ПакетПредложенийXDTO, Параметры);
		
		ПакетПредложенийXDTO.СодержитТолькоИзменения = (НомерСообщения > 1);
		ПакетПредложенийXDTO.Ид = СтрокаТаблицыКаталога.ИдентификаторКаталога + "#";
		
		Шаблон = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пакет предложений") + " ( %1 )";
		ИмяПакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаТаблицыКаталога.Каталог);
		ПакетПредложенийXDTO.Наименование = ИмяПакета;
		ПакетПредложенийXDTO.ИдКаталога = СтрокаТаблицыКаталога.ИдентификаторКаталога;
		ПакетПредложенийXDTO.ИдКлассификатора = СтрокаТаблицыКаталога.ИдентификаторКаталога;
			
		ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ТаблицаДляФормированияПакетаПредложений, Параметры);
			
		КоммерческаяИнформацияXDTO.ПакетПредложений = ПакетПредложенийXDTO;
		
		ИндексПорции = ИндексПорции + 1;
		ИмяФайлаПрайса = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
					Параметры.КаталогНаДиске + "\offers"
					+ ИндексФайлаОбмена +"_"
					+ ИндексПорции + ".xml");
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаПрайса, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Попытка
			
			КоммерческаяИнформацияXDTO.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформацияXDTO, "КоммерческаяИнформация");
			ЗаписьXML.Закрыть();
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать XML-файл пакета предложений на диск") + ":"
				+ " " + ИмяФайлаПрайса + Символы.ПС + ТекстОписаниеОшибки);
				ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
				
			СтруктураРезультата.ВыгруженоПредложений = 0;
			
			СообщитьОбОшибке(Параметры.УзелОбмена, ОписаниеИсключительнойОшибки);
			
			ДобавитьОписаниеОшибки(СтруктураРезультата.ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			ДобавитьОписаниеОшибки(СтрокаТаблицыИнформации.Описание, СтруктураРезультата.ОписаниеОшибки);

			ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Перечисления.РезультатыВыполненияОбмена.Ошибка, ТекстСообщения);

			
			Возврат ЛОЖЬ;
			
		КонецПопытки;
		
		// Отправляем файл на сайт.
		Если Параметры.ВыгружатьНаСайт Тогда
			
			УдалитьРегистрацию = ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации);
			
		Иначе 
			УдалитьРегистрацию = ИСТИНА;
		КонецЕсли;
		
		// Если файл на сайт был загружен, удаляем регистрацию.
		Если УдалитьРегистрацию Тогда
			
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			
			// Если мы имеем дело с данными, которые уже отправлялись на сайт, но не отправились
			// то не будем у них изменять номер сообщения .
			Если Не НомерСообщенияСтарый = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если товары не были отправлены на сайт, то зарегистрируем их в узле
			// и пометим номером сообщения отличным от нуля.
			Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, НомерСообщения, МассивНоменклатуры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполнятьОбмен Тогда
		Результат = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	Иначе
		Результат = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	КонецЕсли;
	ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат, ТекстСообщения);

	
	Возврат ВыполнятьОбмен;
	
КонецФункции

// Добавляет в классификатор номенклатуры дерево родителей номенклатуры
// Параметры:
// 	КлассификаторXDTO - XDTO объект, в который добавляется дерево
// 	ДеревоГрупп - дерево значений -дерево групп номенклатуры
// 	ПакетCML - XDTO объект, содержащий описание элемента "Группы"
// 
Процедура ДобавитьГруппыКлассификатораXDTO(КлассификаторXDTO, ДеревоГрупп, ПакетCML) Экспорт
	
	ГруппыКлассификатораТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Классификатор"), "Группы");
	ГруппыКлассификатораXDTO = ФабрикаXDTO.Создать(ГруппыКлассификатораТип);
	
	ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, ПакетCML);
	
	Если ГруппыКлассификатораXDTO.Группа.Количество() > 0 Тогда
		КлассификаторXDTO.Группы = ГруппыКлассификатораXDTO;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппыКлассификатораXDTO(ГруппыКлассификатораXDTO, ДеревоГрупп, ПакетCML, ТекущийРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ ОбщийМодульПовтор.ЭтоГруппа(СтрокаДерева.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;		
		
		ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
		
		ИдГруппы = УникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
		ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
		
		ГруппаXDTO.Ид = ИдГруппы;
		ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
		
		ГруппыXDTO = ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура);
		Если ГруппыXDTO.Группа.Количество() > 0 Тогда
			ГруппаXDTO.Группы = ГруппыXDTO;
		КонецЕсли;
		
		ГруппыКлассификатораXDTO.Группа.Добавить(ГруппаXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно формирует Объект XDTO, содержащий иерархию групп номенклатуры.
// 
// Параметры:
// 	ДеревоГрупп - Дерево значений
// 	СписокГрупп - список значений, группы выгружаемого каталога
// 	ТекущийРодитель - СправочникСсылка.Номенклатура.
// 
// Возвращаемое значение:
// 	ОбъектXDTO - объект, содержащий иерархию групп.
// 
Функция ГруппыНоменклатурыXDTO(ДеревоГрупп, ПакетCML, ТекущийРодитель = Неопределено)
	
	ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Группа"), "Группы");
	ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ ОбщийМодульПовтор.ЭтоГруппа(СтрокаДерева.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Номенклатура = ТекущийРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Группа"));
		
		ИдГруппы = УникальныйИдентификаторОбъекта(СтрокаДерева.Номенклатура);
		ИмяГруппы = СтрокаДерева.Номенклатура.Наименование;
		
		ГруппаXDTO.Ид = ИдГруппы;
		ГруппаXDTO.Наименование = ФорматНаименованияДляXDTO(ИмяГруппы);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ГруппыОбъектXDTO = ГруппыНоменклатурыXDTO(СтрокаДерева.Строки, ПакетCML, СтрокаДерева.Номенклатура);
			
			Если ГруппыОбъектXDTO.Группа.Количество() > 0 Тогда
				ГруппаXDTO.Группы = ГруппыОбъектXDTO;
			КонецЕсли;
			
		КонецЕсли;
		
		ГруппыXDTO.Группа.Добавить(ГруппаXDTO);
		
	КонецЦикла;
	
	Возврат ГруппыXDTO;
	
КонецФункции

// Добавляет свойства Номенклатуры в список свойств объекта XDTO типа Классификатор.
// 
// Параметры
// 	КлассификаторXDTO - объект XDTO типа Классификатор
// 	ПакетCML - пакет XDTO
// 	ВыборкаСвойствНоменклатуры - выборка, содержащая свойства Номенклатуры.
// 
Процедура ДобавитьСвойстваНоменклатурыВКлассификаторXDTO(КлассификаторXDTO, ПакетCML, ВыборкаСвойствНоменклатуры) Экспорт
	
	Если ВыборкаСвойствНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТип = КлассификаторXDTO.Свойства().Получить("Свойства").Тип;
	СвойстваXDTO = ФабрикаXDTO.Создать(СвойстваТип);
	
	Пока ВыборкаСвойствНоменклатуры.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСвойствНоменклатуры.ТипЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСвойство = ПакетCML.Получить("Свойство");
		СвойствоXDTO = ФабрикаXDTO.Создать(ТипСвойство);
		
		СвойствоXDTO.ИД = Строка(ВыборкаСвойствНоменклатуры.Свойство.УникальныйИдентификатор());
		СвойствоXDTO.Наименование = ФорматНаименованияДляXDTO(ВыборкаСвойствНоменклатуры.Свойство);
		
		// Типы = ВыборкаСвойствНоменклатуры.ТипЗначения.Типы();
		
		ТипXML = "Строка";
		
		// Если Типы.Количество() <> 1 Тогда
		// 	
		// 	// По стандарту CML можно выгрузить только один тип значений.
		// 	// Выгружаем тип "Строка", как универсальный тип.
		// 	
		// 	СвойствоXDTO.ТипЗначений = ТипXML;
		// 	
		// Иначе
			
			Тип = ВыборкаСвойствНоменклатуры.ТипЗначения;// Типы[0];
			
			Если Тип = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
				ТипXML = "Число";
			ИначеЕсли Тип = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
				ТипXML = "Время";
			ИначеЕсли Тип = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника ИЛИ
						Тип = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
				ТипXML = "Справочник";
			КонецЕсли;
			
			СвойствоXDTO.ТипЗначений = ТипXML;
			
			Если ТипXML = "Справочник" Тогда
				
				ВариантыЗначенийСвойстваТип = ТипСвойство.Свойства.Получить("ВариантыЗначений").Тип;
				СправочникТип = ВариантыЗначенийСвойстваТип.Свойства.Получить("Справочник").Тип;
				
				ВариантыЗначенийXDTO = ФабрикаXDTO.Создать(ВариантыЗначенийСвойстваТип);
				
				ВариантыЗначений = ВариантыЗначенийСвойстваПоТипу(ВыборкаСвойствНоменклатуры, Тип);
				Для Каждого ВариантЗначения Из ВариантыЗначений Цикл
					
					Значение = Лев(ВариантЗначения, 1000);
					Если ПустаяСтрока(Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					СправочникXDTO = ФабрикаXDTO.Создать(СправочникТип);
					
					Попытка
						СправочникXDTO.ИдЗначения = Строка(ВариантЗначения.УникальныйИдентификатор());
					Исключение
						СправочникXDTO.ИдЗначения = Значение;
					КонецПопытки;
					
					СправочникXDTO.Значение = Значение;
					
					ВариантыЗначенийXDTO.Справочник.Добавить(СправочникXDTO);
					
				КонецЦикла;
				
				СвойствоXDTO.ВариантыЗначений = ВариантыЗначенийXDTO;
				
			КонецЕсли;
			
// 		КонецЕсли;
		
		СвойстваXDTO.Свойство.Добавить(СвойствоXDTO);
		
	КонецЦикла;
	
	Если СвойстваXDTO.Свойство.Количество() > 0 Тогда
		КлассификаторXDTO.Свойства = СвойстваXDTO;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список товаров объекта XDTO типа Каталог
// 
// Параметры
// 	КаталогXDTO - объект XDTO типа Каталог
// 	ПакетCML - пакет XDTO
// 	Параметры - структура, содержащая параметры обмена.
// 
Процедура ДобавитьНоменклатуруВКаталогXDTO(КаталогXDTO, ПакетCML, Параметры, ТаблицаНоменклатуры) Экспорт
	
	ТоварыТип = КаталогXDTO.Свойства().Получить("Товары").Тип;
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
		
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		
		ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ТекСтрока, Параметры);
				
	КонецЦикла;
	
	Если ТоварыXDTO.Товар.Количество() > 0 Тогда
		
		КаталогXDTO.Товары = ТоварыXDTO;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект XDTO БазоваяЕдиница и заполняет данными
// 
Функция БазоваяЕдиницаXDTO(ТоварXDTO, ДанныеЕдиницы)
		
	ПакетCML = ПакетCML();

	СвойствоБазоваяЕдиница = ПакетCML.Получить("Товар").Свойства.Получить("БазоваяЕдиница");
	
	ТипБазоваяЕдиница = СвойствоБазоваяЕдиница.Тип;
	
	БазоваяЕдиницаXDTO = ФабрикаXDTO.Создать(ТипБазоваяЕдиница);
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияКод) Тогда
		БазоваяЕдиницаXDTO.Код = ДанныеЕдиницы.ЕдиницаИзмеренияКод;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное) Тогда
		БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмеренияНаименованиеПолное;
		
	Иначе
		
		Если ТипЗнч(ДанныеЕдиницы) = Тип("Структура") Тогда
			Если Не ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияНаименование) Тогда
				БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмеренияНаименование;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеЕдиницы) = Тип("СтрокаТаблицыЗначений") Тогда
			Если Не ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмерения) Тогда
				БазоваяЕдиницаXDTO.НаименованиеПолное = ДанныеЕдиницы.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение) Тогда
		БазоваяЕдиницаXDTO.МеждународноеСокращение = ДанныеЕдиницы.ЕдиницаИзмеренияМеждународноеСокращение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЕдиницы.ЕдиницаИзмеренияПересчетЕдиница) Тогда
		
		ТипПересчет = ТипБазоваяЕдиница.Свойства.Получить("Пересчет").Тип;
		ПересчетXDTO = ФабрикаXDTO.Создать(ТипПересчет);
		
		ПересчетXDTO.Коэффициент = ДанныеЕдиницы.ЕдиницаИзмеренияПересчетКоэф;
		ПересчетXDTO.Единица = Лев(ДанныеЕдиницы.ЕдиницаИзмеренияПересчетЕдиница, 3);
		
		БазоваяЕдиницаXDTO.Пересчет.Добавить(ПересчетXDTO);
	КонецЕсли;
	
	Возврат БазоваяЕдиницаXDTO;
	
КонецФункции

// Добавляет объект XDTO типа Товар в список товаров объекта XDTO типа Каталог
// 
// Параметры
// 	ТоварыXDTO - объект XDTO типа Товары
// 	ПакетCML - пакет XDTO
// 	ДополнительныеДанные - структура, содержащая информацию по изображениям номенклатуры и значения свойств
// 	Параметры - структура, содержащая параметры обмена.
// 
Процедура ДобавитьНоменклатуруXDTO(ТоварыXDTO, ПакетCML, ДанныеНоменклатуры, Параметры)
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	ТоварТип = ПакетCML.Получить("Товар");
	ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
	
	Если ДанныеНоменклатуры.НоменклатураПометкаУдаления Тогда
		
		ТоварXDTO.Статус = "Удален";
		
	КонецЕсли;
	
	Ид = УникальныйИдентификаторОбъекта(ДанныеНоменклатуры.Номенклатура);
	
	ТоварXDTO.Ид = Ид;
	
	Штрихкод = ПолучитьШтрихкодДляXDTO(ДанныеНоменклатуры.НоменклатураШтрихКод);
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ТоварXDTO.Штрихкод = ШтрихКод;
		
	КонецЕсли;
	
	ТоварXDTO.Артикул = ДанныеНоменклатуры.НоменклатураАртикул;
	ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(ДанныеНоменклатуры.НоменклатураНаименование);
	ТоварXDTO.БазоваяЕдиница = БазоваяЕдиницаXDTO(ТоварXDTO, ДанныеНоменклатуры);
	
	ИдГруппы = "";
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатураРодитель) Тогда
		
		ИдГруппы = УникальныйИдентификаторОбъекта(ДанныеНоменклатуры.НоменклатураРодитель);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдГруппы) Тогда
		
		ГруппыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Группы");
		ГруппыXDTO = ФабрикаXDTO.Создать(ГруппыТип);
		
		ГруппыXDTO.Ид.Добавить(ИдГруппы);
		
		ТоварXDTO.Группы = ГруппыXDTO;
		
	КонецЕсли;
	
	ТоварXDTO.Описание = ДанныеНоменклатуры.НоменклатураОписание;
	
	ОписанияФайлов = Новый Соответствие;
	ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ДанныеНоменклатуры, ОписанияФайлов, Параметры);
	
	ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ДанныеНоменклатуры.Свойства);
	
	ДобавитьВТоварХарактеристики(ТоварXDTO, ДанныеНоменклатуры.Характеристики, Параметры);
	
	ЗначенияРеквизитовТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "ЗначенияРеквизитов");
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ЗначенияРеквизитовТип);
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		Файл = ОписаниеФайла.Ключ;
		Описание = ОписаниеФайла.Значение;
				
	КонецЦикла;
	
	ВидНоменклатуры = "Товар";
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		"ВидНоменклатуры", ДанныеНоменклатуры.НоменклатураВидНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		"ТипНоменклатуры", ДанныеНоменклатуры.НоменклатураТипНоменклатуры);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, 
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Полное наименование"), ДанныеНоменклатуры.НоменклатураНаименованиеПолное);
	
	ТоварXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	ТоварыXDTO.Товар.Добавить(ТоварXDTO);
	
	СтруктураРезультата.ВыгруженоТоваров =
		СтруктураРезультата.ВыгруженоТоваров + 1;
	
КонецПроцедуры

// Добавляет пути к файлам изображений номенклатуры в объект XDTO типа Товар.
// 
// Параметры
// 	ТоварXDTO - объект XDTO типа Товар
// 	ТаблицаФайлов - таблица значений, содержащая пути к файлам
// 	Параметры - структура, содержащая параметры обмена
// 	ОписанияФайлов - соответствие, ключом которого является пути к файлу, а значением описание файла.
// 
Процедура ДобавитьАдресаИзображенийНоменклатурыXDTO(ТоварXDTO, ДанныеНоменклатуры, ОписанияФайлов, Параметры)
	
	Если НЕ Параметры.ВыгружатьКартинки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	// Основное изображение выгружаем первым.
	ТаблицаФайлов = ДанныеНоменклатуры.Файлы;
	ТаблицаФайлов.Колонки.Добавить("Сортировка");
	
	// ОсновноеИзображение = ДанныеНоменклатуры.НоменклатураОсновноеИзображение;
	
	ТаблицаФайлов.ЗаполнитьЗначения(1, "Сортировка");
	
	// Если ЗначениеЗаполнено(ОсновноеИзображение) Тогда
		
		// Найдено = ТаблицаФайлов.Найти(ОсновноеИзображение, "НоменклатураФайл");
		Найдено = ТаблицаФайлов.Найти(ИСТИНА, "НоменклатураОсновноеИзображение");
		Если НЕ Найдено = Неопределено Тогда
			
			ИндексОсновногоИзображения = ТаблицаФайлов.Индекс(Найдено);
			Если ИндексОсновногоИзображения > 0 Тогда
				
				Найдено.Сортировка = 0;
				ТаблицаФайлов.Сортировать("Сортировка");
				
			КонецЕсли;
			
		КонецЕсли;
		
	// КонецЕсли;
	
	Для Каждого ТекФайл Из ТаблицаФайлов Цикл
		
		ОписаниеОшибки = "";
		
		АдресФайла = ПутьКФайлу(ТекФайл, ДанныеНоменклатуры, Параметры, ОписаниеОшибки);
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			
			СтруктураРезультата.ОписаниеОшибки = СтруктураРезультата.ОписаниеОшибки
												+ Символы.ПС
												+ ТекущаяДатаСеанса() + ": " + ОписаниеОшибки;
			
		Иначе
			
			Если ЗначениеЗаполнено(АдресФайла) Тогда
				
				СтруктураРезультата.ВыгруженоКартинок = СтруктураРезультата.ВыгруженоКартинок + 1;
				
				ТоварXDTO.Картинка.Добавить(АдресФайла);
				
				Описание = ТекФайл.НоменклатураФайлОписание;
				Если НЕ ПустаяСтрока(Описание) Тогда
					
					ОписанияФайлов.Вставить(АдресФайла, Описание);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает файл с изображением номенклатуры на диск и возвращает путь к файлу.
// 
// Параметры
// 	ДанныеФайла - структура, содержащая информацию по изображению
// 	Параметры - структура, содержащая данные по обмену
// 	ОписаниеОшибки - строка для записи информации об ошибках
// 	
// Возвращаемое значение
// 	Строка, содержащая путь к файлу.
// 
Функция ПутьКФайлу(ДанныеФайла, ДанныеНоменклатуры, Параметры, ОписаниеОшибки)
	
	АдресФайла = "";
	
	Если НЕ Параметры.ВыгружатьКартинки Тогда
		
		Возврат АдресФайла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.НоменклатураФайл) Тогда
		Возврат АдресФайла;
	КонецЕсли;
	
	РасширениеФайла = НРег(ДанныеФайла.НоменклатураФайлРасширение);
	ГдеЛежитФайл	= ДанныеФайла.НоменклатураФайлТипХраненияФайла;
		
	Если ГдеЛежитФайл = "ВБазе" Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.НоменклатураФайлДанныеФайла) Тогда
			ДвоичныеДанныеФайла = Неопределено;
		Иначе
			ДвоичныеДанныеФайла = ДанныеФайла.НоменклатураФайлДанныеФайла.Получить();
		КонецЕсли;
		
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось получить данные файла") + " %1 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("номенклатуры") + " %2'",
					ДанныеФайла.НоменклатураФайл,
					ДанныеНоменклатуры.Номенклатура);

			ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
					
			Возврат АдресФайла;
			
		КонецЕсли;
		
		ПутьДляПлатформы	= "";
		
	ИначеЕсли ГдеЛежитФайл = "НаДиске" Тогда// НЕ ПустаяСтрока(ДанныеФайла.НоменклатураФайлПутьКФайлу) Тогда
		// ПутьДляПлатформы = ПутьТомаДляПлатформы(Параметры.ПлатформаWindows, ДанныеФайла.Том);
		// ПутьДляПлатформы = ПутьДляПлатформы+ "\" + ДанныеФайла.ПутьКФайлу;
		ПутьДляПлатформы = ДанныеФайла.НоменклатураФайлПутьКФайлу;
		ИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, ПутьДляПлатформы);
		
		Попытка
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
			
		Исключение
			
			ТекстОшибки = ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка файла номенклатуры") + ":"
				+ " " + ДанныеНоменклатуры.Номенклатура);
				
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
					
			Возврат АдресФайла;
			
		КонецПопытки;
		
	Иначе
		// ПутьДляПлатформы	= ДанныеФайла.НоменклатураФайлСсылкаНаИзображение;
		ПутьДляПлатформы	= ДанныеФайла.НоменклатураФайлПутьКФайлу;

	КонецЕсли;
	
	Если ПустаяСтрока(РасширениеФайла) Тогда
	
		ПозТочки	= СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(ПутьДляПлатформы, ".");
		
		Если ПозТочки < 5 И ПозТочки > 1 Тогда
			РасширениеФайла = НРег(Прав(ПутьДляПлатформы,ПозТочки-1));
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПустаяСтрока(РасширениеФайла) Тогда
		РасширениеФайла	= "jpg";	
	КонецЕсли;

	
	ИмяПоНоменклатуре = СтрЗаменить(ДанныеНоменклатуры.Номенклатура.УникальныйИдентификатор(), "-", "");
	ИмяПоХранилищу    = СтрЗаменить(ДанныеФайла.НоменклатураФайл.УникальныйИдентификатор(), "-", "");
	
	ПодкаталогФайлов = Параметры.ПодкаталогФайлов;
	
	ИмяФайла = ИмяПоНоменклатуре + "_" + ИмяПоХранилищу + "." + НРег(РасширениеФайла);
	КаталогПоИмени = Лев(ИмяПоНоменклатуре, 2);
	КаталогФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows,
		Параметры.КаталогНаДиске + "\" + ПодкаталогФайлов + "\" + КаталогПоИмени);
	
	Попытка
		
		СоздатьКаталог(КаталогФайла);
		
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось создать каталог") + " %1. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура") + ": %2'",
				КаталогФайла,
				ДанныеНоменклатуры.Номенклатура.Номенклатура);
		ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(ТекстОшибки);
		ДобавитьОписаниеОшибки(ОписаниеОшибки,ОписаниеИсключительнойОшибки);
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	ПолноеИмяФайла = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, КаталогФайла + "\" + ИмяФайла);
	
	Попытка
		
		Если ГдеЛежитФайл = "ВИнтернете" Тогда
			КопироватьФайл(ПутьДляПлатформы,ПолноеИмяФайла)
		Иначе
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		КонецЕсли;
				
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать файл") + " %1 " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на диск.") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура") + ": %2'",
				ПолноеИмяФайла,
				ДанныеНоменклатуры.Номенклатура)));
		
		Возврат АдресФайла;
		
	КонецПопытки;
	
	АдресФайла = ПодкаталогФайлов + "/" + КаталогПоИмени + "/" + ИмяФайла;
	
	Возврат АдресФайла;
	
КонецФункции

// Добавляет значения свойств номенклатуры в список значений свойств объекта XDTO типа Товар.
// 
// Параметры
// 	ТоварXDTO - объект XDTO типа Товар
// 	ТаблицаСвойств - таблица значений, содержащая значения свойств номенклатуры
// 	Параметры - структура, содержащая параметры обмена
// 	ПакетCML - пакет XDTO.
// 
Процедура ДобавитьЗначенияСвойствНоменклатурыXDTO(ТоварXDTO, ТаблицаСвойств)
	
	ЗначенияСвойствТип = ТоварXDTO.Свойства().Получить("ЗначенияСвойств").Тип;
	ЗначенияСвойствXDTO = ФабрикаXDTO.Создать(ЗначенияСвойствТип);
	ПакетCML = ПакетCML();
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойств Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыСвойств.СвойствоНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияСвойстваXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначенияСвойства"));
		
		ЗначенияСвойстваXDTO.Ид = УникальныйИдентификаторОбъекта(СтрокаТаблицыСвойств.СвойствоНоменклатуры);
		ЗначенияСвойстваXDTO.Наименование = Строка(СтрокаТаблицыСвойств.СвойствоНоменклатуры);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыСвойств.ЗначениеСвойства) Тогда
			
			// Если значение свойства не заполнено, выгружаем пустую строку.
			ЗначениеСвойства = "";
			
		Иначе
			
			ТипЗначенияСвойства = ТипЗнч(СтрокаТаблицыСвойств.ЗначениеСвойства);
			Если ТипЗначенияСвойства = Тип("Дата") Тогда
				
				ЗначениеСвойства = ФорматДатыДляXDTO(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			ИначеЕсли ТипЗначенияСправочник(ТипЗначенияСвойства) Тогда
				
				ЗначениеСвойства = УникальныйИдентификаторОбъекта(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			Иначе
				
				ЗначениеСвойства = Строка(СтрокаТаблицыСвойств.ЗначениеСвойства);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначенияСвойстваXDTO.Значение.Добавить(ЗначениеСвойства);
		ЗначенияСвойствXDTO.ЗначенияСвойства.Добавить(ЗначенияСвойстваXDTO);
		
	КонецЦикла;
	
	Если ЗначенияСвойствXDTO.ЗначенияСвойства.Количество() > 0 Тогда
		ТоварXDTO.ЗначенияСвойств = ЗначенияСвойствXDTO;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДобавитьВТоварХарактеристики(ТоварXDTO, Характеристики, Параметры)
		
	// ПакетCML = ПакетCML();
	// ХарактеристикиТип = ПакетCML.Получить("ХарактеристикиТовара");
	// ХарактеристикиXDTO = ФабрикаXDTO.Создать(ХарактеристикиТип);
	// Для Каждого ТекСтрока Из Характеристики Цикл
	// 	
	// 	Если Не ЗначениеЗаполнено(ТекСтрока.Характеристика) Тогда
	// 		Продолжить;
	// 	КонецЕсли;
	// 	
	// 	ХарактеристикаТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ХарактеристикиТип, "ХарактеристикаТовара");
	// 	ХарактеристикаXDTO = ФабрикаXDTO.Создать(ХарактеристикаТип);
	// 	
	// 	ХарактеристикаXDTO.ИД = УникальныйИдентификаторОбъекта(ТекСтрока.Характеристика);
	// 	ХарактеристикаXDTO.Наименование = ФорматНаименованияДляXDTO(ТекСтрока.Характеристика.Наименование);
	// 	ХарактеристикаXDTO.Значение = ФорматНаименованияДляXDTO(ТекСтрока.Характеристика.Наименование);
	// 	
	// 	ХарактеристикиXDTO.ХарактеристикаТовара.Добавить(ХарактеристикаXDTO);
	// 	
	// КонецЦикла;
	// 
	// Если ХарактеристикиXDTO.ХарактеристикаТовара.Количество() > 0 Тогда
	// 	ТоварXDTO.ХарактеристикиТовара = ХарактеристикиXDTO;
	// КонецЕсли;
	
КонецПроцедуры


Процедура ДобавитьСкладыВПакетПредложений(ТаблциаСкладов, ПакетПредложенийXDTO, Параметры)
	
	Если ТаблциаСкладов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПакетCML = ПакетCML();

	СкладыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "Склады");
	СкладыXDTO = ФабрикаXDTO.Создать(СкладыТип);

	Для Каждого ТекСтрока Из ТаблциаСкладов Цикл
		
		СкладТип = ПакетCML.Получить("Склад");
		СкладXDTO = ФабрикаXDTO.Создать(СкладТип);
		
		СкладXDTO.Ид = УникальныйИдентификаторОбъекта(ТекСтрока.Склад);
		СкладXDTO.Наименование = ТекСтрока.СкладНаименование;
		
		Адрес = АдресСклада(ТекСтрока.СкладАдрес);
		Если Адрес.АдресноеПоле.Количество() > 0 Тогда
			СкладXDTO.Адрес = Адрес;
		КонецЕсли;
		
		Контакты = КонтактнаяИнформацияСклада(ТекСтрока.СкладКонтактнаяИнформация);
		Если Контакты.Контакт.Количество() > 0 Тогда
			СкладXDTO.Контакты = Контакты;
		КонецЕсли;
		
		СкладыXDTO.Склад.Добавить(СкладXDTO);
		
	КонецЦикла;
	
	Если СкладыXDTO.Склад.Количество() > 0 Тогда
		
		ПакетПредложенийXDTO.Склады = СкладыXDTO;
	КонецЕсли;
	
КонецПроцедуры

Функция АдресСклада(СтруктураАдресСклада)
	
	ПакетCML = ПакетCML();
	АдресСклада = ФабрикаXDTO.Создать(ПакетCML.Получить("Адрес"));
	Представление  = "";
	Для Каждого КлючЗначение Из СтруктураАдресСклада Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьАдресноеПоле(КлючЗначение, АдресСклада.АдресноеПоле);
		Представление = Представление +КлючЗначение.Значение +" ,";
	КонецЦикла;
	АдресСклада.Представление = Представление;
	
	Возврат АдресСклада;
	
КонецФункции

Процедура ДобавитьАдресноеПоле(КлючЗначение, АдресныеПоля)
	
	ПакетCML = ПакетCML();
	АдресноеПолеТип =ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Адрес"), "АдресноеПоле");
	АдресноеПоле = ФабрикаXDTO.Создать(АдресноеПолеТип);
	
	Если ВРег(КлючЗначение.Ключ) = ВРег("ПочтовыйИндекс") Тогда
		АдресноеПоле.Тип = "Почтовый индекс";
		
	ИначеЕсли ВРег(КлючЗначение.Ключ) = ВРег("НаселенныйПункт") Тогда
		АдресноеПоле.Тип = "Населенный пункт";
		
	Иначе
		АдресноеПоле.Тип = КлючЗначение.Ключ;
		
	КонецЕсли;
	АдресноеПоле.Значение = КлючЗначение.Значение;
	
	АдресныеПоля.Добавить(АдресноеПоле);
	
КонецПроцедуры

Функция КонтактнаяИнформацияСклада(СтруктураКИСклада)
	
	ПакетCML = ПакетCML();
	КонтактнаяИнформация = ФабрикаXDTO.Создать(ПакетCML.Получить("КонтактнаяИнформация"));
	
	КонтактТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("КонтактнаяИнформация"), "Контакт");
	Для Каждого КлючЗначение Из СтруктураКИСклада Цикл
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Контакт = ФабрикаXDTO.Создать(КонтактТип);
		ЗаполнитьКонтакт(КлючЗначение, Контакт);
		
		КонтактнаяИнформация.Контакт.Добавить(Контакт);
	КонецЦикла;
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

Процедура ЗаполнитьКонтакт(КлючЗначение, Контакт)
	
	Если ВРег(КлючЗначение.Ключ) = ВРег("ТелефонРабочий") Тогда
		Контакт.Тип = "Телефон рабочий";
	ИначеЕсли ВРег(КлючЗначение.Ключ) = ВРег("КоординатыНаКарте") Тогда
		Контакт.Тип = "Координаты на карте";
	Иначе
		Контакт.Тип = КлючЗначение.Ключ;
	КонецЕсли;
	
	Контакт.Значение = КлючЗначение.Значение;
	
КонецПроцедуры


// Добавляет виды цен в объект XDTO типа ПакетПредложений.
// 
// Параметры
// 	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
// 	ПакетCML - пакет XDTO
// 	Параметры - структура, содержащая параметры обмена.
Процедура ДобавитьВидыЦенВПакетПредложенийXDTO(ВидыЦенПакетаПредложений, ПакетПредложенийXDTO, Параметры)
	
	Если ВидыЦенПакетаПредложений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетCML = ПакетCML();
	
	ТипыЦенТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "ТипыЦен");
	ТипыЦенXDTO = ФабрикаXDTO.Создать(ТипыЦенТип);
	
	Для Каждого ТекСтрока Из ВидыЦенПакетаПредложений Цикл
		
		ТипТипЦены = ПакетCML.Получить("ТипЦены");
		ТипЦеныXDTO = ФабрикаXDTO.Создать(ТипТипЦены);
		
		ИдТипаЦены = УникальныйИдентификаторОбъекта(ТекСтрока.ТипЦены);
		
		ТипЦеныXDTO.Ид = ИдТипаЦены;
		ТипЦеныXDTO.Наименование = ФорматНаименованияДляXDTO(ТекСтрока.ТипЦеныНаименование);
		ТипЦеныXDTO.Валюта = ФорматНаименованияВалютыДляXDTO(ТекСтрока.ТипЦеныВалютаКод);
		
		НалогXDTO = ФабрикаXDTO.Создать(ТипТипЦены.Свойства.Получить("Налог").Тип);
		
		НалогXDTO.Наименование = Параметры.НаименованиеНалога;
		НалогXDTO.УчтеноВСумме = ТекСтрока.ТипЦеныЦенаВключаетНДС;
		НалогXDTO.Акциз = ЛОЖЬ;
		
		ТипЦеныXDTO.Налог.Добавить(НалогXDTO);
		
		
		ТипыЦенXDTO.ТипЦены.Добавить(ТипЦеныXDTO);
		
	КонецЦикла;
	
	ПакетПредложенийXDTO.ТипыЦен = ТипыЦенXDTO;
	
КонецПроцедуры

// Добавляет предложения в объект XDTO типа ПакетПредложений.
// 
// Параметры
// 	ПакетПредложенийXDTO - объект XDTO типа ПакетПредложений
// 	ПакетCML - пакет XDTO
// 	Параметры - структура, содержащая параметры обмена.
// 
Процедура ДобавитьПредложенияВПакетПредложенийXDTO(ПакетПредложенийXDTO, ТаблицаДанныеПакетаПредложений, Параметры)
	
	СтруктураРезультата = Параметры.СтруктураРезультата;
	
	ПакетCML = ПакетCML();
	
	ПредложенияТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("ПакетПредложений"), "Предложения");
	ПредложенияXDTO = ФабрикаXDTO.Создать(ПредложенияТип);
		
	ПредложениеТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложенияТип,"Предложение");
	
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ПредложениеXDTO = Неопределено;
	ЦеныXDTO = Неопределено;
	
	Для Каждого ТекСтрока Из ТаблицаДанныеПакетаПредложений Цикл
		
		ПредложениеXDTO = ФабрикаXDTO.Создать(ПредложениеТип);
		
		ЦеныТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПредложениеТип, "Цены");
		ЦеныXDTO = ФабрикаXDTO.Создать(ЦеныТип);
		
		ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, ТекСтрока, Параметры);
		
		ЗаполнитьЦеныXDTO(ЦеныXDTO, ТекСтрока.Цены);
		
		Если ЦеныXDTO.Цена.Количество() > 0 Тогда
			ПредложениеXDTO.Цены = ЦеныXDTO;
		КонецЕсли;
		
		ЗаполнитьОстаткиПоСкладам(ПредложениеXDTO, ТекСтрока.ОстаткиПоСкладам);
		
		ПредложенияXDTO.Предложение.Добавить(ПредложениеXDTO);
		
		СтруктураРезультата.ВыгруженоПредложений = СтруктураРезультата.ВыгруженоПредложений + 1;

	КонецЦикла;
	
	ПакетПредложенийXDTO.Предложения = ПредложенияXDTO;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиПоСкладам(ПредложениеXDTO, ТаблицаОстатков)
	
	ПакетCML = ПакетCML();
	
	Для Каждого ТекСтрока Из ТаблицаОстатков Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ОстаткиПоСкладам"));
		
		ОстатокXDTO.ИдСклада = УникальныйИдентификаторОбъекта(ТекСтрока.Склад);
		ОстатокXDTO.КоличествоНаСкладе = ТекСтрока.ОстатокНаСкладе;
		
		ПредложениеXDTO.Склад.Добавить(ОстатокXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЦеныXDTO(ЦеныXDTO, ТаблицаЦен)
	
	ПакетCML = ПакетCML();

	Для Каждого ТекСтрока Из ТаблицаЦен Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ТипЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦенаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Цена"));
		
		ИдТипаЦены = УникальныйИдентификаторОбъекта(ТекСтрока.ТипЦены);
		Единица = ТекСтрока.ТипЦеныЕдиницаЦеныНаименованиеСокращенное;
		
		ПредставлениеЦены = " " + СокрЛП(ТекСтрока.ЦенаЗаЕдиницу) + " " + СокрЛП(ТекСтрока.ТипЦеныВалютаКод) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("за") + " " + СокрЛП(Единица);
		
		ЦенаXDTO.Представление = ПредставлениеЦены;
		ЦенаXDTO.ИдТипаЦены = ИдТипаЦены;
		ЦенаXDTO.ЦенаЗаЕдиницу = ТекСтрока.ЦенаЗаЕдиницу;
		ЦенаXDTO.Валюта = ФорматНаименованияВалютыДляXDTO(ТекСтрока.ТипЦеныВалютаКод);
		Если ЗначениеЗаполнено(Единица) Тогда
			ЦенаXDTO.Единица = Лев(Строка(Единица),3);
		КонецЕсли; 
		ЦенаXDTO.Коэффициент = ТекСтрока.ТипЦеныЕдиницаЦеныКоэффициент;
		
		ЦеныXDTO.Цена.Добавить(ЦенаXDTO);
	КонецЦикла;

КонецПроцедуры

// Заполняет реквизиты товара для объекта XDTO типа Предложение.
// 
// Параметры
// 	ПредложениеXDTO - объект XDTO типа Предложение
// 	ПакетCML - пакет XDTO
// 	Характеристика - характеристика номенклатуры
// 	Параметры - параметры обмена.
// 
Процедура ДобавитьРеквизитыТовараДляПредложенияXDTO(ПредложениеXDTO, СтрокаПредложения, Параметры)
	
	ПредложениеXDTO.Ид = УникальныйИдентификаторОбъекта(СтрокаПредложения.Номенклатура, СтрокаПредложения.Характеристика);
	
	Наименование = СтрокаПредложения.НоменклатураНаименование;
	
	Если ЗначениеЗаполнено(СтрокаПредложения.Характеристика) Тогда
		Наименование = Наименование + " (" + СтрокаПредложения.Характеристика + ")";
	КонецЕсли;
	
	ПредложениеXDTO.Наименование	= ФорматНаименованияДляXDTO(Наименование);
	ПредложениеXDTO.БазоваяЕдиница	= БазоваяЕдиницаXDTO(ПредложениеXDTO, СтрокаПредложения);
	ПредложениеXDTO.Артикул 		= СтрокаПредложения.НоменклатураАртикул;
	
	СтатусУдаления = Неопределено;
	Если СтрокаПредложения.НоменклатураПометкаУдаления = ИСТИНА Тогда
		СтатусУдаления = "Удален";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусУдаления) Тогда
		ПредложениеXDTO.Статус = СтатусУдаления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборПоЗаказам(КомпоновщикНастроек, МассивОграничения, ВидСравнения)
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Заказ");
	НовыйЭлемент.ВидСравнения = ВидСравнения;
	СписокЗначенийОграничения = Новый СписокЗначений;
	СписокЗначенийОграничения.ЗагрузитьЗначения(МассивОграничения);
	НовыйЭлемент.ПравоеЗначение = СписокЗначенийОграничения;
	НовыйЭлемент.Использование = ИСТИНА;
	
КонецПроцедуры

Процедура ПолучитьДанныеДляВыгрузкиЗаказов(ПараметрыОбмена, ТаблицаЗаказов, ОписаниеОшибки)
	
	СхемаКомпоновки = ПланыОбмена.ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиЗаказов");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	Заказы = ПараметрыОбмена.СтруктураИзменений.Заказы;
	// На сайт выгружать будем только измененные заказы.
	ДобавитьОтборПоЗаказам(КомпоновщикНастроек, Заказы, ВидСравненияКомпоновкиДанных.ВСписке);
		
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = ЛОЖЬ;
		
	ТекстЗапроса = "";
	ОбменССайтомПереопределяемый.ПолучитьТекстЗапросаЗаказы(ТекстЗапроса);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ОписаниеОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнен текст запроса для получения данных выгрузки") + """" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы покупателя") + """.";
		Возврат;
	КонецЕсли;
	
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя            = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	// Заполняем параметры "НомерЗаказаНаСайте", и "ДатаЗаказаНаСайте".
	ПараметрыКомпоновки = СхемаКомпоновкиДанных.Параметры;
	ОбменССайтомПереопределяемый.УстановитьПараметыТекстаЗапросаЗаказы(ПараметрыОбмена.ПрикладныеПараметры, ПараметрыКомпоновки);
	
	Идентификатор = Новый УникальныйИдентификатор;
	
	АдресСхемыКомпоновкиДанных1 = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Идентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных1);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗаказов);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СоздатьНедостающиеКолонкиТаблицыДанных(КомпоновщикНастроек.Настройки, ТаблицаЗаказов);
	
КонецПроцедуры

// Запускает процесс обмена заказами.
// 
// Параметры:
// 	Параметры			- Структура, основные параметры
// 	ТаблицаИнформации	- Таблица значений, таблица информации о состоянии обмена
// 
// Возвращаемое значение
// 	Булево				- ИСТИНА, если успех. 
// 
Функция ВыполнитьОбменЗаказами(Параметры, ТаблицаИнформации)
	
	Если Не Параметры.ОбменЗаказами Тогда
		Возврат ИСТИНА;
	КонецЕсли;
	
	УспешноЗагружено = ЛОЖЬ;
	УспешноВыгружено = ЛОЖЬ;
	
	СтруктураСтатистики = Новый Структура;
	
	СтруктураСтатистики.Вставить("ОбработаноНаЗагрузке", 0);
	СтруктураСтатистики.Вставить("Загружено" , Новый Массив);
	СтруктураСтатистики.Вставить("Пропущено" , Новый Массив);
	СтруктураСтатистики.Вставить("Обновлено" , Новый Массив);
	СтруктураСтатистики.Вставить("Создано"   , Новый Массив);
	СтруктураСтатистики.Вставить("Выгружено" , Новый Массив);
	
	Параметры.Вставить("СтруктураСтатистики", СтруктураСтатистики);
	
	ОписаниеОшибки = "";
	ДатаНачала = ТекущаяДатаСеанса();
	
	Если Параметры.ВыгружатьНаСайт Тогда
		
		ЗаказыССайта = Новый Массив;
		Параметры.Вставить("ЗаказыССайта",ЗаказыССайта);
		УспешноЗагружено = ЗагрузитьЗаказыССайта(Параметры, ОписаниеОшибки);
		
		ОбменССайтомСобытия.ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			Параметры,
			ДатаНачала,
			ИСТИНА,
			УспешноЗагружено,
			СтруктураСтатистики,
			ОписаниеОшибки);
			
	Иначе
		
		УспешноЗагружено = ЗагрузитьЗаказыИзФайла(Параметры, ОписаниеОшибки);
		
		ОбменССайтомСобытия.ЗаписатьИнформациюПоЗаказамВТаблицуИнформации(ТаблицаИнформации,
			Параметры,
			ДатаНачала,
			ИСТИНА,
			УспешноЗагружено,
			СтруктураСтатистики,
			ОписаниеОшибки);
		
	КонецЕсли;
	
	УспешноВыгружено = ИСТИНА;
	ВыгрузитьЗаказы(Параметры, ТаблицаИнформации, УспешноВыгружено);
	
	Успешно = УспешноЗагружено И УспешноВыгружено;
	Возврат Успешно;
	
КонецФункции

Процедура ВыгрузитьЗаказы(Параметры, ТаблицаИнформации, УспешноВыгружено)
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ОписаниеОшибки = "";
	ПолучитьДанныеДляВыгрузкиЗаказов(Параметры, ТаблицаЗаказов, ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбменССайтомСобытия.ЗаписатьОшибку(ОписаниеОшибки, Параметры.УзелОбмена);
		УспешноВыгружено = ЛОЖЬ;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗаказов.Количество() = 0 Тогда
		Возврат ;
	КонецЕсли;
	
	ЗарегистрироватьВыгружаемыеДанные(ТаблицаЗаказов, "Заказ", Параметры.УзелОбмена);
	
	СтруктураСтатистики = Параметры.СтруктураСтатистики;
	
	УИД = Строка(Новый УникальныйИдентификатор);
	ОписаниеОшибки = "";
	
	ИндексПорции = 0;
	НомерСообщения = 1;
	НомерСообщенияСтарый = Неопределено;
	КоличествоПовторов = 0;
	
    ВыполнятьОбмен = ИСТИНА;
	Пока ВыполнятьОбмен Цикл
		
		МассивЗаказов = ЗаказыУзла(Параметры.УзелОбмена, Параметры.РазмерПорции, 0);
		
		// Если в узле нет новых товаров, то м.б. остались старые.
		Если МассивЗаказов.Количество() = 0 Тогда
			
			ЗаказыСНомерами = ЗаказНомерСообщенияУзла(Параметры.УзелОбмена, Параметры.РазмерПорции);
			
			Если ЗаказыСНомерами .Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерСообщенияСтарый = ЗаказыСНомерами [0].НомерСообщения Тогда
				КоличествоПовторов = КоличествоПовторов + 1;
			КонецЕсли;
			
			// Если количество повторов больше заданного
			// прерываем обмен.
			Если КоличествоПовторов >= Параметры.КоличествоПовторов Тогда
				ВыполнятьОбмен = ЛОЖЬ;
				Прервать;
			КонецЕсли;
			
			МассивЗаказов = ЗаказыСНомерами .ВыгрузитьКолонку("Заказ");
			НомерСообщенияСтарый = ЗаказыСНомерами[0].НомерСообщения;
			
		КонецЕсли;
			
		ТаблицаДанныеЗаказов = ТаблицаЗаказов.СкопироватьКолонки();
		ТаблицаДанныеЗаказов.Колонки.Добавить("Товары");
		
		// Из общей таблицы товаров получаем данные по товарам в порции
		// и сгруппируем их по ценам и остаткам и по складам.
		ЗаполнитьТаблицуДанныеЗаказов(МассивЗаказов, ТаблицаЗаказов, ТаблицаДанныеЗаказов);
		
		КоммерческаяИнформация = Неопределено;
		
		СформироватьЗаказыXDTO(Параметры, ТаблицаДанныеЗаказов, КоммерческаяИнформация);
		
		
		ИмяФайлаОбмена = "orders-" + УИД+ "_"+ НомерСообщения + ".xml";
		ИмяФайлаОбмена = Параметры.КаталогНаДиске + "\" + ИмяФайлаОбмена;
		ПолноеИмяФайлаОбмена = ПодготовитьПутьДляПлатформы(Параметры.ПлатформаWindows, ИмяФайлаОбмена);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Попытка
			
			КоммерческаяИнформация.Проверить();
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КоммерческаяИнформация, "КоммерческаяИнформация");
			ЗаписьXML.Закрыть();
			
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать XML-файл на диск") + ":"
			+ " " + ПолноеИмяФайлаОбмена + Символы.ПС + ТекстОписаниеОшибки));
			
			СтруктураСтатистики.Выгружено.Очистить();
			
			УспешноВыгружено = ЛОЖЬ;
			Возврат ;
			
		КонецПопытки;
		
				
		// Отправляем файл на сайт.
		Если Параметры.ВыгружатьНаСайт Тогда
			
			СтрокаТаблицыИнформации = ТаблицаИнформации.Добавить();
			УдалитьРегистрацию = ВыгрузитьДанныеНаСайт(Параметры, СтрокаТаблицыИнформации, "sale");
			
		Иначе 
			УдалитьРегистрацию = ИСТИНА;
		КонецЕсли;
		
		// Если файл на сайт был загружен, удаляем регистрацию.
		Если УдалитьРегистрацию Тогда
			
			Для Каждого ЭлементМассива Из МассивЗаказов Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			
			// Если имеем дело с данными, которые уже отправлялись на сайт, но не отправились,
			// то не будем у них изменять номер сообщения.
			Если Не НомерСообщенияСтарый = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если товары не были отправлены на сайт, то зарегистрируем их в узле
			// и пометим номером сообщения отличным от нуля.
			Для Каждого ЭлементМассива Из МассивЗаказов Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Параметры.УзелОбмена, ЭлементМассива);
			КонецЦикла;
			ПланыОбмена.ВыбратьИзменения(Параметры.УзелОбмена, НомерСообщения, МассивЗаказов);
			
		КонецЕсли;
		
		НомерСообщения = НомерСообщения + 1;
		
	КонецЦикла;
	
КонецПроцедуры


// Загружает заказы с сайта.
// 
// Параметры:
// 	Параметры				- Структура, основные параметры
// 	СтруктураСтатистики		- Структура
// 	ОписаниеОшибки			- Строка
// 
// Возвращаемое значение
// 	Булево				- ИСТИНА, если успех. 
// 
Функция ЗагрузитьЗаказыССайта(Параметры, ОписаниеОшибки)
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	АдресДляРаботы = Параметры.НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения;
	
	ОписаниеОшибки = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, Параметры.НастройкиПодключения,
											  ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка заказов не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_ПолучитьДанные,
		ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка заказов не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
		
	Иначе
		
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			
			СтрокаXML = ОтветСервера;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаXML) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось прочитать данные, загруженные с сервера."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	
	Если НЕ ЗагрузитьЗаказы(СтрокаXML, Параметры, ОписаниеОшибки) Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось обработать документы, загруженные с сервера."));
			
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		АдресДляРаботы + Параметры.НастройкиПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта,
		ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Загрузка заказов не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции

// Загружает заказы из файла.
// 
// Параметры:
// 	Параметры			- Структура, основные параметры
// 	СтруктураСтатистики	- Структура
// 	ОписаниеОшибки		- Строка
// 
// Возвращаемое значение:
// 	Булево				- ИСТИНА, если успех.
// 
Функция ЗагрузитьЗаказыИзФайла(Параметры, ОписаниеОшибки)
	
	Файл = Новый Файл(Параметры.ФайлЗагрузки);
	
	Если НЕ Файл.Существует()
		ИЛИ Файл.ЭтоКаталог() Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл загрузки не найден") + ": " + Параметры.ФайлЗагрузки);
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ФайлXML = Новый ТекстовыйДокумент;
	ФайлXML.Прочитать(Параметры.ФайлЗагрузки);
	СтрокаXML = ФайлXML.ПолучитьТекст();
	
	Возврат ЗагрузитьЗаказы(СтрокаXML, Параметры, ОписаниеОшибки);
	
КонецФункции

// Выполняет загрузку заказов.
// 
// Параметры:
// 	ДанныеЗаказов		- строка для записи xml или ОбъектXDTO
// 	СтруктураСтатистики	- Структура
// 	Параметры			- Структура, основные параметры
// 	ОписаниеОшибки		- Строка
// 
// Возвращаемое значение:
// 	Булево				- ИСТИНА, если успех.
// 
Функция ЗагрузитьЗаказы(ДанныеЗаказов, Параметры, ОписаниеОшибки) Экспорт
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ДанныеЗаказовВXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат ЛОЖЬ;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет документов для обработки."));
		Возврат ИСТИНА;
		
	КонецЕсли;
	
	НомераИДатыЗаказов = Новый ТаблицаЗначений;
	НомераИДатыЗаказов.Колонки.Добавить("НомерЗаказа", 
	 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(11, ДопустимаяДлина.Переменная)));
	НомераИДатыЗаказов.Колонки.Добавить("ДатаЗаказа",
		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));

	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл 
		
		НоваяСтрока = НомераИДатыЗаказов.Добавить();
		НоваяСтрока.НомерЗаказа = ДокументXDTO.Номер;
		НоваяСтрока.ДатаЗаказа = ДокументXDTO.Дата;
		
	КонецЦикла;
	
	
	РанееЗагруженныеЗаказы = Новый ТаблицаЗначений;
	РанееЗагруженныеЗаказы.Колонки.Добавить("ЗаказПокупателя");
	РанееЗагруженныеЗаказы.Колонки.Добавить("НомерЗаказаНаСайте");
	РанееЗагруженныеЗаказы.Колонки.Добавить("НеОбновлятьЗаказ");

	ОбменССайтомПереопределяемый.ПолучитьРанееЗагруженныеДокументы(Параметры.ПрикладныеПараметры, НомераИДатыЗаказов,
																								РанееЗагруженныеЗаказы);
	
	НачатьТранзакцию();
	
	Успешно = СоздатьОбновитьЗаказы(МассивЗаказовXDTO, РанееЗагруженныеЗаказы, Параметры, ОписаниеОшибки);
	
		
	Если Не Успешно Тогда
		
		ОтменитьТранзакцию();
		Возврат ЛОЖЬ;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	СтруктураСтатистики = Параметры.СтруктураСтатистики;
	
	Для Каждого СсылкаНаДокумент Из СтруктураСтатистики.Загружено Цикл
		
		
		ОбменССайтомСобытия.ОтменитьРегистрацию(СсылкаНаДокумент);
		
		
	КонецЦикла;
		
	Возврат ИСТИНА;
	
КонецФункции

// Создает на основании XML объект XDTO.
// 
// Параметры:
// 	СтрокаXML - объект чтения XML
// 	Параметры - структура
// 	ОписаниеОшибки - строка
// 
// Возвращаемое значение:
// 	ОбъектXDTO.
// 
Функция ДанныеЗаказовВXDTO(СтрокаXML, Параметры, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось прочитать XML")));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		КоммерческаяИнформацияXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось прочитать XML")));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

Процедура ИнициализироватьСтруктуруРеквизитов(РеквизитыЗаказа)
	
	РеквизитыЗаказа = Новый Структура;
	РеквизитыЗаказа.Вставить("Ид",							 Неопределено);
	РеквизитыЗаказа.Вставить("Дата",						 Неопределено);
	РеквизитыЗаказа.Вставить("Номер",						 Неопределено);
	РеквизитыЗаказа.Вставить("ДатаОтгрузки",				 Неопределено);
	РеквизитыЗаказа.Вставить("ВалютаДокументаКод",			 Неопределено);
	РеквизитыЗаказа.Вставить("ВидЦенНаименование",			 Неопределено);
	РеквизитыЗаказа.Вставить("СуммаВключаетНДС",			 Неопределено);
	РеквизитыЗаказа.Вставить("НаименованиеСкидки",			 Неопределено);
	РеквизитыЗаказа.Вставить("ПроцентСкидки",				 Неопределено);
	РеквизитыЗаказа.Вставить("СуммаСкидки",					 Неопределено);
	РеквизитыЗаказа.Вставить("СкладНаименование",			 Неопределено);
	РеквизитыЗаказа.Вставить("ПодразделениеНаименование",	 Неопределено);
	РеквизитыЗаказа.Вставить("Склад",	 					 Неопределено);
	РеквизитыЗаказа.Вставить("Контрагент",					 Неопределено);
	РеквизитыЗаказа.Вставить("Товары",						 Неопределено);// Табличная часть документа
	РеквизитыЗаказа.Вставить("Комментарий",					 Неопределено);
	
	
КонецПроцедуры

// Создает и заполняет заказы покупателей.
// Если на заказ покупателя есть ссылки в документах отгрузки или оплаты, обновляются только свойства заказа.
// 	
// Параметры
// 	ДокументыXDTO - массив объектов XDTO
// 	РанееЗагруженныеЗаказы - таблица значений - данные по ранее загруженным заказам
// 	СтруктураСтатистики - структура статистики
// 	Параметры - структура параметров
// 	ОписаниеОшибки - строка - содержит описание ошибок
// 
// Возвращаемое значение
// 	Булево - ИСТИНА, если при загрузке заказов не возникло ошибок или обновлены свойства уже загруженного заказа.
// 
Функция СоздатьОбновитьЗаказы(ДокументыXDTO, РанееЗагруженныеЗаказы, Параметры, ОписаниеОшибки)
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("Заказ");
	ТаблицаЗаказов.Колонки.Добавить("НомерЗаказа");
	ТаблицаЗаказов.Колонки.Добавить("ДатаЗаказа");
	
	СтруктураСтатистики = Параметры.СтруктураСтатистики;
	
	Для Каждого ДокументXDTO Из ДокументыXDTO Цикл
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = Нрег("Заказ товара") Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в значении узла <Документ>.<ХозОперация> документа XML (%1)"),
					ДокументXDTO.ХозОперация);
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Если НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в значении узла <Документ>.<Валюта> документа XML (%1)"),
					ДокументXDTO.Валюта);
					
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		// Получаем свойства заказа.
		
		СвойстваЗаказа = Новый Соответствие;
		
		Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов")
			И ДокументXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ДокументXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Реквизит = ЗначениеРеквизитаXDTO.Наименование;
				Значение = ЗначениеРеквизитаXDTO.Значение;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение);
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
					И Значение.Количество() > 0 Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение[0]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		
		СтруктураСтатистики.ОбработаноНаЗагрузке = СтруктураСтатистики.ОбработаноНаЗагрузке + 1;
		
		ЭтоНовыйДокумент = ЛОЖЬ;
		ЕстьСсылкиНаДокументыОплатыОтгрузки = ЛОЖЬ;
		ЗаказЗакрытОтменен = ЛОЖЬ;
		
		// Поиск должен осуществляться по номеру и дате
		НайденнаяСтрока = РанееЗагруженныеЗаказы.Найти(ДокументXDTO.Номер, "НомерЗаказаНаСайте");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ЗаказЗакрытОтменен = НайденнаяСтрока.НеОбновлятьЗаказ;
			
			Если ЗаказЗакрытОтменен Тогда
				
				СтруктураСтатистики.Пропущено.Добавить(НайденнаяСтрока.ЗаказПокупателя);
				ТекстОшибки = Строка(НайденнаяСтрока.ЗаказПокупателя) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" пропущен по причине:") + Символы.ПС 
					+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Статус заказа - ""Закрыт"".");
				ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект = НайденнаяСтрока.ЗаказПокупателя.ПолучитьОбъект();
			
		Иначе
			
			
			ДокументОбъект = Неопределено;
			
			ОбменССайтомПереопределяемый.СоздатьНовыйДокументЗаказ(ДокументОбъект);
			ЭтоНовыйДокумент = ИСТИНА;
		
		КонецЕсли;
		
		Если ДокументОбъект = Неопределено Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
		
		Если ЗаказЗакрытОтменен Тогда
			
			// Если у заказа есть ссылки на документы оплаты или отгрузки - обновляем только свойства.
			
			СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект.Ссылка);
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("%1 пропущен, т.к. существуют документы, введенные на основании заказа."),
				ДокументОбъект.Ссылка);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
			
			ОбновленыСвойстваЗаказа = ИСТИНА;
			ОбменССайтомПереопределяемый.ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
																					ДокументОбъект.Ссылка,
																					СвойстваЗаказа, ОписаниеОшибки);
			Если ОбновленыСвойстваЗаказа Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свойства заказа %1 обновлены."),
					ДокументОбъект.Ссылка);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
				
			КонецЕсли;
			
		Иначе
			
			Успешно = ЛОЖЬ;
			СтруктураРеквизитыЗаказа = Неопределено;
			ИнициализироватьСтруктуруРеквизитов(СтруктураРеквизитыЗаказа);
			
			ИзвлечьСвойстваЗаказаИзДанныхДокументаXDTO(СтруктураРеквизитыЗаказа, ДокументXDTO,
												СвойстваЗаказа, Параметры, ОписаниеОшибки);
			
			// заполняем документ заказ
			ОбменССайтомПереопределяемый.ЗаполнитьЗаказ(ДокументОбъект, СтруктураРеквизитыЗаказа,
														СвойстваЗаказа, Параметры.ПрикладныеПараметры,
														ОписаниеОшибки, Успешно);
			
			Если НЕ Успешно Тогда
				Возврат ЛОЖЬ;
			КонецЕсли;
			
			Попытка
				
				Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
					ДокументОбъект.УстановитьНовыйНомер();
				КонецЕсли;
				
				ЗаписатьДокумент(ДокументОбъект);
				
				Если ЭтоНовыйДокумент Тогда
					СтруктураСтатистики.Создано.Добавить(ДокументОбъект.Ссылка);
				Иначе
					СтруктураСтатистики.Обновлено.Добавить(ДокументОбъект.Ссылка);
				КонецЕсли;
				
			Исключение
				
				СтруктураСтатистики.Пропущено.Добавить(ДокументОбъект);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать заказ №") + ДокументОбъект.Номер));
				
				Возврат ЛОЖЬ;
				
			КонецПопытки;
			
			ОбновленыСвойстваЗаказа = ИСТИНА;
			ОбменССайтомПереопределяемый.ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
																					 ДокументОбъект.Ссылка,
																					 СвойстваЗаказа, ОписаниеОшибки);
			Если ОбновленыСвойстваЗаказа Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Свойства заказа %1 обновлены."),
					ДокументОбъект.Ссылка);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Сообщение);
				
			КонецЕсли;

			СтруктураСтатистики.Загружено.Добавить(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
		НоваяСтрока						= ТаблицаЗаказов.Добавить();
		НоваяСтрока.Заказ				= ДокументОбъект.Ссылка;
		НоваяСтрока.НомерЗаказа			= СтруктураРеквизитыЗаказа.Номер;
		НоваяСтрока.ДатаЗаказа			= СтруктураРеквизитыЗаказа.Дата;
		
	КонецЦикла;
	
	ОбменССайтомПереопределяемый.ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, Параметры.ПрикладныеПараметры);
	
	Возврат ИСТИНА;
	
КонецФункции

Процедура ИзвлечьСвойстваЗаказаИзДанныхДокументаXDTO(СтруктураРеквизитыЗаказа, ДокументXDTO,
													 СвойстваЗаказа, Параметры, ОписаниеОшибки)
	
	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	СтруктураРеквизитыЗаказа.Ид				 = СокрЛП(ДокументXDTO.Ид);
	СтруктураРеквизитыЗаказа.Дата			 = ДатаВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	СтруктураРеквизитыЗаказа.ДатаОтгрузки	 = ДатаОтгрузкиИзСвойствЗаказа(СвойстваЗаказа);
	СтруктураРеквизитыЗаказа.Номер			 = СокрЛП(ДокументXDTO.Номер);
	
	СтруктураРеквизитыЗаказа.ВалютаДокументаКод = ДокументXDTO.Валюта;
	
	Контрагент = Неопределено;
	
	ДанныеКонтрагента = Новый Структура;
	ЗаполнитьДанныеКонтрагента(ДанныеКонтрагента, ДокументXDTO);
	
	СтруктураРеквизитыЗаказа.Вставить("Контрагент", Неопределено);
	ОбменССайтомПереопределяемый.ИдентифицироватьКонтрагента(СтруктураРеквизитыЗаказа, ДанныеКонтрагента,
															 Параметры.ПрикладныеПараметры, ОписаниеОшибки);

	Если СтруктураРеквизитыЗаказа.Контрагент = Неопределено Тогда
		Успешно = ЛОЖЬ;
		Возврат;
	КонецЕсли;
		
	Если НЕ ИдентифицироватьНоменклатуру(СтруктураРеквизитыЗаказа, ДокументXDTO, Параметры, ОписаниеОшибки) Тогда
		Успешно = ЛОЖЬ;
		Возврат;
	КонецЕсли;
	
	Склад = Неопределено;
	Если НЕ ДокументXDTO.Свойства().Получить("Склады") = Неопределено Тогда
		ДанныеСклада = Новый Структура;
		ИзвлечьРеквизитыСклада(ДокументXDTO.Склады.Склад, ДанныеСклада);
			
		ИдентифицироватьСклад(ДанныеСклада, Склад, ОписаниеОшибки);
	КонецЕсли;
	СтруктураРеквизитыЗаказа.Вставить("ТочкаСамовывоза", Склад);
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий")
		И ТипЗнч(ДокументXDTO.Комментарий) = Тип("Строка") Тогда
		
		СтруктураРеквизитыЗаказа.Комментарий = ДокументXDTO.Комментарий;
	КонецЕсли;
	
	Успешно = ИСТИНА;

	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагента(ДанныеКонтрагента, ДокументXDTO)
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ЮрЛицо = ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование");
	ОфициальноеНаименование = "";
	Если ЮрЛицо Тогда
		ОфициальноеНаименование = КонтрагентXDTO.ОфициальноеНаименование;
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить("ЮрЛицо", ЮрЛицо);
	ДанныеКонтрагента.Вставить("ОфициальноеНаименование", ОфициальноеНаименование);
	
	ПолноеНаименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование") Тогда
		ПолноеНаименование = КонтрагентXDTO.ПолноеНаименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ПолноеНаименование",ПолноеНаименование);
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование") Тогда
		Наименование = КонтрагентXDTO.Наименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", Наименование);
	
	ФИО = ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO);
	ДанныеКонтрагента.Вставить("ФИО", ФИО);
	
	ОКПО = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") Тогда
		ОКПО = КонтрагентXDTO.ОКПО;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ОКПО", ОКПО);
	
	ИНН = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН") Тогда
		ИНН = КонтрагентXDTO.ИНН;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ИНН", ИНН);
	
	КПП = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП") Тогда
		КПП = КонтрагентXDTO.КПП;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("КПП", КПП);
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование") Тогда
		Наименование = КонтрагентXDTO.Наименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", Наименование);
	
	ИнформацияПоКонтрагенту = Новый ТаблицаЗначений;
	ИнформацияПоКонтрагенту.Колонки.Добавить("Вид");
	ИнформацияПоКонтрагенту.Колонки.Добавить("Представление");
	
	ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту);
	
	ДанныеКонтрагента.Вставить("ИнформацияПоКонтрагенту",ИнформацияПоКонтрагенту);
	
КонецПроцедуры

Процедура ИзвлечьРеквизитыСклада(СкладXDTO, ДанныеСклада)
	
	ДанныеСклада.Вставить("Ид", СкладXDTO.Ид);
	
	АдресСклада = Новый Структура;
	АдресСклада.Вставить("ТипАдреса", СкладXDTO.Адрес.АдресноеПоле.Тип);
	АдресСклада.Вставить("ЗначениеАдреса", СкладXDTO.Адрес.АдресноеПоле.Значение);
	ДанныеСклада.Вставить("Адрес", АдресСклада);
	
	
	КонтактыСклада = Новый Структура("ТипКонтакта,ЗначениеКонтакта");
	
	Если Не ТипЗнч(СкладXDTO.Контакты.Контакт.Значение) = Тип("ОбъектXDTO") Тогда
		КонтактыСклада.ТипКонтакта = СкладXDTO.Контакты.Контакт.Тип;
		КонтактыСклада.ЗначениеКонтакта = СкладXDTO.Контакты.Контакт.Значение;
	КонецЕсли;
	
	ДанныеСклада.Вставить("Контакты", КонтактыСклада);
	ДанныеСклада.Вставить("Наименование", СкладXDTO.Наименование);
	
КонецПроцедуры

// ДанныеСклада - структура
// 		Поля:
// 			Ид - Строка, идентификатор склада
// 			Адрес - Структура с полями "ТипАдреса" и "ЗначениеАдреса"
// 			Контакты - Структура с полями "ТипКонтакта" и "ЗначениеКонтакта"
// 			Наименование - Строка, наименнованиеСклада
Процедура ИдентифицироватьСклад(ДанныеСклада, Склад, ОписаниеОшибки)
	
	// Если в параметрах склада
	Если Не ЗначениеЗаполнено(ДанныеСклада.Ид) 
			И Не ЗначениеЗаполнено(ДанныеСклада.Наименование) Тогда
			
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не заполнены поля идентификатции точки самовывоза: ""Ид"" и ""Наименование"""));

		Возврат;
	КонецЕсли;
	ИмяСправочникаСклады = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("ТочкиСамовывоза");
	
	Попытка 
		Склад = Справочники[ИмяСправочникаСклады].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСклада.Ид));
		
		Если Не Склад = Справочники[ИмяСправочникаСклады].ПустаяСсылка()
			И Склад.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Точка самовывоза не найдена по уникальному идентификатору:")+ " " + ДанныеСклада.Ид);
		
	КонецПопытки;

	Попытка 
		Склад = Справочники[ИмяСправочникаСклады].НайтиПоНаименованию(ДанныеСклада.Наименование);
		Если Не Склад = Справочники[ИмяСправочникаСклады].ПустаяСсылка()
			И Склад.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Точка самовывоза не найдена по наименованию:")+ " " + ДанныеСклада.Наименование);
		
	КонецПопытки;
	
	ОбменССайтомПереопределяемый.СоздатьТочкуСамовывоза(ДанныеСклада, Склад);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ДокументОбъект.ЭтоНовый() Или ДокументОбъект.Проведен Тогда
		Попытка 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	// может тут и лишнее, но пусть будет на всякий случай
	ОбменССайтамиУТ.ВписатьСтатусЗаказа(ДокументОбъект.Ссылка,ДокументОбъект.Статус)
	
КонецПроцедуры

Функция ДатаОтгрузкиИзСвойствЗаказа(СвойстваЗаказа)
	
	ДатаОтгрузки = Дата(1,1,1);
	
	ДатаОтгрузкиСтрока = СвойстваЗаказа.Получить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата отгрузки"));
	Если ДатаОтгрузкиСтрока <> Неопределено
		И ЗначениеЗаполнено(ДатаОтгрузкиСтрока) Тогда
		
		ДатаСтрока = Лев(ДатаОтгрузкиСтрока, 10);
		ВремяСтрока = Сред(ДатаОтгрузкиСтрока, 12);
		
		ДатаОтгрузки = ДатаВремяИзСтроки(ДатаСтрока, ВремяСтрока);
		
	КонецЕсли;
	
	Возврат ДатаОтгрузки;
	
КонецФункции

// Добавляет и заполняет строку табличной части "ИнформацияПоКонтрагенту" заказа покупателя.
// 
// Параметры
// 	Вид - Строка, вид информации
// 	Представление - строка, информация о контагенте
// 	ИнформацияПоКонтрагенту - ТабличнаяЧасть документ ЗаказПокупателю.
// 
Процедура ДобавитьСтрокуИнформацииПоКонтрагенту(Вид, Представление, ИнформацияПоКонтрагенту)
	
	Если ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = ИнформацияПоКонтрагенту.Добавить();
		НоваяСтрока.Вид = Вид;
		НоваяСтрока.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

Функция УточненноеПредставлениеАдреса(АдресXDTO)
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле") Тогда
		
		АдресноеПоле = АдресXDTO.АдресноеПоле;
		Для Каждого ТипАдреса Из АдресноеПоле Цикл
			
			Если НРег(ТипАдреса.Тип) = НРег("Почтовый индекс") Тогда
				ПочтовыйИндекс = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Страна") Тогда
				Страна = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Город") Тогда
				Город = ТипАдреса.Значение;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(ЗначениеЗаполнено(ПочтовыйИндекс), ПочтовыйИндекс+","+ " ","")
				+ ?(ЗначениеЗаполнено(Страна), Страна+"," + " ","")
				+ ?(ЗначениеЗаполнено(Город), Город+","+ " ","");
				
			ПредставлениеАдреса = ПредставлениеАдреса + СокрЛП(АдресXDTO.Представление);
			
		КонецЦикла;
		
	Иначе
		ПредставлениеАдреса = СокрЛП(АдресXDTO.Представление);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции


// Заполняет табличную часть "ИнформацияПоКонтрагенту" заказа покупателя.
// 
Процедура ЗаполнитьДанныеКонтрагентаЗаказа(КонтрагентXDTO, ИнформацияПоКонтрагенту)
	
	ЭтоЮрЛицо = ЛОЖЬ;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("Наименование", КонтрагентXDTO.Наименование, ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование")
			И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Полное наименование"),
			КонтрагентXDTO.ПолноеНаименование,
			ИнформацияПоКонтрагенту);
			
			ДобавитьСтрокуИнформацииПоКонтрагенту("Юр./Физ. лицо", "Физ. лицо", ИнформацияПоКонтрагенту);
		
	ИначеЕсли ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование") 
				И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Полное наименование"),
			КонтрагентXDTO.ОфициальноеНаименование,
			ИнформацияПоКонтрагенту);
			
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Юр./Физ. лицо"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Юр. лицо"), ИнформацияПоКонтрагенту);
		
		ЭтоЮрЛицо = ИСТИНА;
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИНН"), КонтрагентXDTO.ИНН, ИнформацияПоКонтрагенту);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП") Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КПП"), КонтрагентXDTO.КПП, ИнформацияПоКонтрагенту);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО") И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ОКПО"), КонтрагентXDTO.ОКПО, ИнформацияПоКонтрагенту);
	КонецЕсли;
	
	// Банковские счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			Комментарий = "";
			Если ОбъектXDTOСодержитСвойство(РасчетныйСчетXDTO, "Комментарий")
				И СвойствоXDTOЗаполнено(РасчетныйСчетXDTO.Комментарий) Тогда
				
				Комментарий = РасчетныйСчетXDTO.Комментарий;
				
			КонецЕсли;
			
			ИнформацияПоРасчетномуСчету = "Номер счета = " + НомерСчета
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Наименование), "", ", Банк = " + ДанныеБанкаXDTO.Наименование)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.БИК), "", ", БИК = " + ДанныеБанкаXDTO.БИК)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.SWIFT), "", ", SWIFT = " + ДанныеБанкаXDTO.SWIFT)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.КоррСчет), "", ", КоррСчет = " + ДанныеБанкаXDTO.КоррСчет)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Город), "", ", Город = " + ДанныеБанкаXDTO.Город)
				+ ?(ПустаяСтрока(ДанныеБанкаXDTO.Адрес), "", ", Адрес = " + ДанныеБанкаXDTO.Адрес)
				+ ?(ПустаяСтрока(Комментарий), "", ", Комментарий = " + Комментарий);
				
			ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Банковский счет"), ИнформацияПоРасчетномуСчету, ИнформацияПоКонтрагенту);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактная информация.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
		
		ФактическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.Адрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фактический адрес"),
			ФактическийАдресПредставление,
			ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	Если ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ЮридическийАдрес.Представление) Тогда
		
		ЮридическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.ЮридическийАдрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Юридический адрес"),
			ЮридическийАдресПредставление,
			ИнформацияПоКонтрагенту);
		
	ИначеЕсли НЕ ЭтоЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.АдресРегистрации.Представление) Тогда // физ. лицо содержит адрес регистрации
		
		АдресРегистрацииПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.АдресРегистрации);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Юридический адрес"),
			АдресРегистрацииПредставление,
			ИнформацияПоКонтрагенту);
		
	КонецЕсли;
	
	// Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты") И КонтрагентXDTO.Контакты <> Неопределено Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			
			ДобавитьСтрокуИнформацииПоКонтрагенту(ТипКИXDTO, КонтактXDTO.Значение, ИнформацияПоКонтрагенту);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители") И КонтрагентXDTO.Представители <> Неопределено Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		Если МассивПредставителейXDTO.Количество() > 0 Тогда
			
			КонтактныеЛица = "";
			
			Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл
				
				НаименованиеКЛ = "";
				Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент")
					И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
					
					НаименованиеКЛ = ПредставительXDTO.Контрагент.Наименование;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НаименованиеКЛ) Тогда
					КонтактныеЛица = КонтактныеЛица + НаименованиеКЛ + ";";
				КонецЕсли;
				
			КонецЦикла;
			
			КонтактныеЛица = Сред(КонтактныеЛица,1,СтрДлина(КонтактныеЛица)-1);
			ДобавитьСтрокуИнформацииПоКонтрагенту(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контактные лица"), КонтактныеЛица, ИнформацияПоКонтрагенту);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск номенклатуры и заполнение табличной части Запасы заказа покупателя.
// Не найденные элементы номенклатуры создаются.
// 
// Параметры
// 	ДокументОбъект - ДокументОбъект.ЗаказПокупателя - заказ, для которого идентифицируется номенклатура
// 	ДокументXDTO - ОбъектXDTO - источник информации для заполнения данных заказа покупателя
// 	Параметры - Структура - параметры обмена
// 	ОписаниеОшибки - Строка - информация по ошибкам
// 
// Возвращаемое значение:
// 	Булево - ИСТИНА, если не возникло ошибок.
// 
Функция ИдентифицироватьНоменклатуру(РеквизитыЗаказа, ДокументXDTO, Параметры, ОписаниеОшибки) Экспорт
	
	Успешно = ИСТИНА;
	
	Запасы = ИнициализироватьТаблицуЗапасов();
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат Успешно ;
		
	КонецЕсли;
	
	СтавкаНДСПоУмолчанию = Неопределено;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
		И ДокументXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ДокументXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					СтавкаНДСПоУмолчанию = НалогXDTO.Ставка;
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
					РеквизитыЗаказа.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = ИСТИНА ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТоварыXDTO = ДокументXDTO.Товары.Товар;
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварыXDTO);
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ТипНоменклатурыXDTO = "";
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
			И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
					И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
					
					ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = Неопределено;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
			И ТоварXDTO.СтавкиНалогов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
			
			СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
			МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
			
			Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
				
				Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
					
					ЗначениеСтавкиНДС = СтавкаНалога.Ставка;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
			И ТоварXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ТоварXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						
						ЗначениеСтавкиНДС = СтавкаНалога.Ставка;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтавкаНДСНоменклатуры = ?(ЗначениеЗаполнено(ЗначениеСтавкиНДС), ЗначениеСтавкиНДС, СтавкаНДСПоУмолчанию);
		Если СтавкаНДСНоменклатуры = Неопределено Тогда
			
			СтавкаНДСНоменклатуры = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Без НДС");
			ЗначениеСтавки = 0;
		Иначе
			ЗначениеСтавки = Число(СтавкаНДСНоменклатуры);
		КонецЕсли;
		
		ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = НРег("Услуга");
		
		Номенклатура = ПолучитьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДСНоменклатуры, ОписаниеОшибки);
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ХарактеристикаНоменклатуры = НайтиСоздатьХарактеристикуНоменклатуры(
			ТоварXDTO, 
			ЭтоУслуга, 
			Номенклатура, 
			Параметры, 
			ОписаниеОшибки);
				
		Если НЕ ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ЧислоИзСтроки(ТоварXDTO.Количество);
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Резерв = 0;
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Резерв") Тогда
			Резерв = ЧислоИзСтроки(ТоварXDTO.Резерв);
			Если Резерв > Количество Тогда
				Резерв = Количество;
			КонецЕсли;
		КонецЕсли;
		
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
			И ТоварXDTO.Скидки <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
			
			МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
			Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
				
				Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме")
					ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СуммаСкидки = ЧислоИзСтроки(СкидкаXDTO.Сумма);
				СуммаСкидок = СуммаСкидок + СуммаСкидки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Добавляем новую строку в табличную часть "Запасы".
		
		НоваяСтрока = Запасы.Добавить();
		НоваяСтрока.ТипНоменклатурыЗапас = НЕ ЭтоУслуга;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Характеристика = ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.Резерв = Резерв;
		НоваяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры;
		НоваяСтрока.ЗначениеСтавкиНДС = ЗначениеСтавки;
		НоваяСтрока.Сумма = ?(СуммаСкидок > 0, Сумма - СуммаСкидок, Сумма);
		НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		
	КонецЦикла;
	
	ЗаполнитьЕдиницыИзмеренияТоваров(Запасы, ОписаниеОшибки);
	
	РеквизитыЗаказа.Товары = Запасы;
	
	// Скидка на документ распределяется на строки табличной части пропорционально сумме.
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Скидки")
		И ДокументXDTO.Скидки <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.Скидки, "Скидка") Тогда
		
		МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.Скидки.Скидка);
		Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Сумма") Тогда
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Наименование")
					И ОбъектXDTOСодержитСвойство(СкидкаXDTO, "Процент") Тогда
					
					ПроцентЧисло = ЧислоИзСтроки(СкидкаXDTO.Процент);
					Если ПроцентЧисло <> 0 Тогда
						
						РеквизитыЗаказа.НаименованиеСкидки = СкидкаXDTO.Наименование;
						РеквизитыЗаказа.ПроцентСкидки = СкидкаXDTO.Процент;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме")
					И НЕ НРег(СкидкаXDTO.УчтеноВСумме) = "true" Тогда
					
					СуммаСкидки = ЧислоИзСтроки(СкидкаXDTO.Сумма);
					Если СуммаСкидки <> 0 Тогда
						
						РеквизитыЗаказа.СуммаСкидки = СуммаСкидки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Таблица, в которой хранятся данные, загружаемые в табличную часть Заказа покупателя
// 
Функция ИнициализироватьТаблицуЗапасов()
	
	ТаблицаЗапасы = Новый ТаблицаЗначений;
	ТаблицаЗапасы.Колонки.Добавить("ТипНоменклатурыЗапас");
	ТаблицаЗапасы.Колонки.Добавить("Номенклатура");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗапасы.Колонки.Добавить("Характеристика");
	ТаблицаЗапасы.Колонки.Добавить("Резерв");
	ТаблицаЗапасы.Колонки.Добавить("Количество");
	ТаблицаЗапасы.Колонки.Добавить("СтавкаНДС");
	ТаблицаЗапасы.Колонки.Добавить("ЗначениеСтавкиНДС");
	ТаблицаЗапасы.Колонки.Добавить("Сумма");
	ТаблицаЗапасы.Колонки.Добавить("СуммаНДС");
	ТаблицаЗапасы.Колонки.Добавить("Цена");
	ТаблицаЗапасы.Колонки.Добавить("Всего");
	
	Возврат ТаблицаЗапасы;
	
КонецФункции

Функция НайтиСоздатьХарактеристикуНоменклатуры(ТоварXDTO, ЭтоУслуга, Номенклатура, Параметры, ОписаниеОшибки)
	
	ИмяПрикладногоСправочника = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	Если ИмяПрикладногоСправочника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	
	ХарактеристикаНоменклатуры = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
	Если ЭтоУслуга ИЛИ Не Параметры.ИспользоватьХарактеристики Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	ХарактеристикаТовараXDTO = Неопределено;
	ИдХарактеристики = "";
	НаименованиеХарактеристики = "";
	
		
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
		ИдХарактеристики = ИдХарактеристики(ТоварXDTO.Ид);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
		НаименованиеХарактеристики = НаименованиеХарактеристики(ТоварXDTO.Наименование);
	КонецЕсли;
	
	
	Попытка
		
		Если Не ПустаяСтрока(ИдХарактеристики) Тогда
			СправочникМенеджер = Справочники[ИмяПрикладногоСправочника];
			ХарактеристикаНоменклатуры = СправочникМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдХарактеристики));
			Если Не ХарактеристикаНоменклатуры = СправочникМенеджер.ПустаяСсылка()
				И ХарактеристикаНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
				
				Возврат ХарактеристикаНоменклатуры;
			Иначе
				Дополнение = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Характеристика номенклатуры не найдена по уникальному идентификатору: %1");
				Дополнение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Дополнение, ИдХарактеристики);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, Дополнение);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось выполнить поиск характеристики номенклатуры по уникальному идентификатору:")
			+ " "+ ИдХарактеристики));
		
	КонецПопытки;
	
	Если СвойствоXDTOЗаполнено(НаименованиеХарактеристики) Тогда
		ХарактеристикаНоменклатуры = СправочникМенеджер.НайтиПоНаименованию(НаименованиеХарактеристики, ИСТИНА,, Номенклатура);
	Иначе
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Возврат ХарактеристикаНоменклатуры;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = СправочникМенеджер.СоздатьЭлемент();
	ХарактеристикаНоменклатуры.Владелец = Номенклатура;
	ХарактеристикаНоменклатуры.Наименование = НаименованиеХарактеристики;
	ХарактеристикаНоменклатуры.Записать();
	
	Если Параметры.ОбменТоварами И Параметры.ВыгружатьТолькоИзменения Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, ХарактеристикаНоменклатуры.Ссылка);
		
	КонецЕсли;
	
	Возврат ХарактеристикаНоменклатуры.Ссылка;
	
КонецФункции

Функция ПолучитьНоменклатуру(ТоварXDTO, ЭтоУслуга, Параметры, СтавкаНДС, ОписаниеОшибки)
	
	ДанныеНоменклатуры = Новый Структура;
	
	ИД = "";
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") Тогда
		Ид = ТоварXDTO.Ид;
	КонецЕсли;
	ДанныеНоменклатуры.Вставить("Ид", Ид);
		
	АртикулНоменклатуры = "";
	НаименованиеНоменклатуры = "";
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		АртикулНоменклатуры = ТоварXDTO.Артикул;
	КонецЕсли;
	ДанныеНоменклатуры.Вставить("АртикулНоменклатуры",АртикулНоменклатуры);
	
	НаименованиеНоменклатуры = "";
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
		Наименование = НаименованиеНоменклатуры(ТоварXDTO.Наименование);
	КонецЕсли;
	ДанныеНоменклатуры.Вставить("НаименованиеНоменклатуры", Наименование);
	
	
	ЕдиницаИзмерения = БазоваяЕдиницаИзмеренияИзТоварXDTO(ТоварXDTO);
	ДанныеНоменклатуры.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	ДанныеНоменклатуры.Вставить("ЭтоУслуга", ЭтоУслуга);
	ДанныеНоменклатуры.Вставить("СтавкаНДС", СтавкаНДС);
	
	Номенклатура = Неопределено;
	ОбменССайтомПереопределяемый.НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, Параметры.ПрикладныеПараметры, ОписаниеОшибки);
	Если Номенклатура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Параметры.УзелОбмена, Номенклатура);
	
	Возврат Номенклатура;
	
КонецФункции

Функция БазоваяЕдиницаИзмеренияИзТоварXDTO(ТоварXDTO)
	
	ЕдиницаПоКлассификатору = Новый Структура;
	
	КодБазовойЕдиницы = "";
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "Код") Тогда
		КодБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.Код;
	КонецЕсли;
	ЕдиницаПоКлассификатору.Вставить("КодБазовойЕдиницы", КодБазовойЕдиницы);
	
	НаименованиеБазовойЕдиницы = "";
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "НаименованиеПолное")
		И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.НаименованиеПолное) Тогда
		
		НаименованиеБазовойЕдиницы = ТоварXDTO.БазоваяЕдиница.НаименованиеПолное;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору.Вставить("НаименованиеБазовойЕдиницы", НаименованиеБазовойЕдиницы);
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции

Процедура ЗаполнитьТаблицуДанныеЗаказов(МассивЗаказов, ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого ТекСтрока из ТаблицаИсточник Цикл
		
		Если МассивЗаказов.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаПриемник.Скопировать(,"Заказ, ТоварыНоменклатура,
											|ТоварыНоменклатураАртикул,
											|ТоварыНоменклатураТипНоменклатуры,
											|ТоварыЕдиницаИзмерения,
											|ТоварыЕдиницаИзмеренияКод,
											|ТоварыЕдиницаИзмеренияМеждународноеСокращение,
											|ТоварыЕдиницаИзмеренияНаименование,
											|ТоварыЕдиницаИзмеренияНаименованиеПолное,
											|ТоварыЕдиницаИзмеренияПересчетКоэффициент,
											|ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
											|ТоварыКоличество,
											|ТоварыПроцентСкидки,
											|ТоварыСуммаСкидки,
											|ТоварыСтавкаНДС,
											|ТоварыСумма,
											|ТоварыСуммаНДС,
											|ТоварыХарактеристика,
											|ТоварыЦена");
											
	ТаблицаПриемник.Свернуть("Заказ, ЗаказВалютаКод, ЗаказДата, ЗаказДатаНаСайте,
											|ЗаказДатаОплаты,
											|ЗаказДатаОтгрузки,
											|ЗаказЗакрыт,
											|ЗаказКОплатеОстаток,
											|ЗаказКОтгрузкеОстаток,
											|ЗаказКомментарий,
											|ЗаказНалогообложениеНДС,
											|ЗаказСуммаВключаетНДС,
											|ЗаказКурс,
											|ЗаказНомер,
											|ЗаказНомерНаСайте,
											|ЗаказНомерОтгрузки,
											|ЗаказНомерОплаты,
											|ЗаказПометкаУдаления,
											|ЗаказПроведен,
											|ЗаказСостояниеЗаказа,
											|ЗаказСтатусЗаказа,
											|ЗаказСуммаДокумента,
											|Контрагент,
											|КонтрагентИНН,
											|КонтрагентКПП,
											|КонтрагентКодПоОКПО,
											|КонтрагентНаименование,
											|КонтрагентНаименованиеПолное,
											|КонтрагентПравовойСтатус","Товары");
								
	Для Каждого ТекСтрока Из ТаблицаПриемник Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Заказ", ТекСтрока.Заказ);
		
		Товары = ТаблицаТовары.Скопировать(Отбор,"ТоварыНоменклатура,
											|ТоварыНоменклатураАртикул,
											|ТоварыНоменклатураТипНоменклатуры,
											|ТоварыЕдиницаИзмерения,
											|ТоварыЕдиницаИзмеренияКод,
											|ТоварыЕдиницаИзмеренияМеждународноеСокращение,
											|ТоварыЕдиницаИзмеренияНаименование,
											|ТоварыЕдиницаИзмеренияНаименованиеПолное,
											|ТоварыЕдиницаИзмеренияПересчетКоэффициент,
											|ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
											|ТоварыКоличество,
											|ТоварыПроцентСкидки,
											|ТоварыСуммаСкидки,
											|ТоварыСтавкаНДС,
											|ТоварыСумма,
											|ТоварыСуммаНДС,
											|ТоварыХарактеристика,
											|ТоварыЦена");
		ТекСтрока.Товары = Товары;
	КонецЦикла;

	
КонецПроцедуры

Процедура СформироватьЗаказыXDTO(Параметры, ТаблицаДанныеЗаказов, КоммерческаяИнформацияXDTO)
	
	СтруктураСтатистики = Параметры.СтруктураСтатистики;
	
	КоммерческаяИнформацияXDTO = КоммерческаяИнформация(Параметры.ДатаФормирования);
	ПакетCML = ПакетCML();
	
	Для Каждого ТекСтрока Из ТаблицаДанныеЗаказов Цикл
		
		// Если заказ есть в списке загруженных, то его не будем выгружать
		// 
		Если Не СтруктураСтатистики.Загружено.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказНомерНаСайте)
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказДатаНаСайте) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтатистики.Выгружено.Добавить(ТекСтрока.Заказ);
		
		ДокументТип			= ПакетCML.Получить("Документ");
		ДокументXDTO		= ФабрикаXDTO.Создать(ДокументТип);
		
		ДокументXDTO.Ид				= УникальныйИдентификаторОбъекта(ТекСтрока.Заказ);
		ДокументXDTO.Номер			= ТекСтрока.ЗаказНомерНаСайте;
		ДокументXDTO.Дата			= ТекСтрока.ЗаказДатаНаСайте;
		ДокументXDTO.ХозОперация	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказ товара");
		ДокументXDTO.Роль			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продавец");
		ДокументXDTO.Валюта			= ФорматНаименованияВалютыДляXDTO(ТекСтрока.ЗаказВалютаКод);
		ДокументXDTO.Курс			= ?(ЗначениеЗаполнено(ТекСтрока.ЗаказКурс),ТекСтрока.ЗаказКурс,1);
		ДокументXDTO.Сумма			= ТекСтрока.ЗаказСуммаДокумента;
		ДокументXDTO.Время			= ТекСтрока.ЗаказДатаНаСайте;
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказДатаОплаты) Тогда
			ДокументXDTO.СрокПлатежа	= ТекСтрока.ЗаказДатаОплаты;
		КонецЕсли;
		
		Комментарий = Лев(ТекСтрока.ЗаказКомментарий, 3000);
		Если НЕ ПустаяСтрока(Комментарий) Тогда
			ДокументXDTO.Комментарий = Комментарий;
		КонецЕсли;
		
		КонтрагентыXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументТип, "Контрагенты"));
		
		РеквизитыКонтрагента = ДанныеКонтрагента(ТекСтрока);
		
		КонтрагентXDTO = ПолучитьКонтрагентаXDTO(РеквизитыКонтрагента);
		КонтрагентыXDTO.Контрагент.Добавить(КонтрагентXDTO);
		
		ДокументXDTO.Контрагенты = КонтрагентыXDTO;
		
		ДеревоСвойствХарактеристик = Неопределено;
		ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ТекСтрока, ДеревоСвойствХарактеристик, Параметры);
		
		ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ТекСтрока, Параметры);
		
		КоммерческаяИнформацияXDTO.Документ.Добавить(ДокументXDTO);
		
	КонецЦикла;

	
КонецПроцедуры

Функция ДанныеКонтрагента(ТекСтрока)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Контрагент",		ТекСтрока.Контрагент);
	ДанныеКонтрагента.Вставить("Наименование",		ТекСтрока.КонтрагентНаименование);
	ДанныеКонтрагента.Вставить("НаименованиеПолное",ТекСтрока.КонтрагентНаименованиеПолное);
	ДанныеКонтрагента.Вставить("ПравовойСтатус",	ТекСтрока.КонтрагентПравовойСтатус);
	ДанныеКонтрагента.Вставить("ИНН",				ТекСтрока.КонтрагентИНН);
	ДанныеКонтрагента.Вставить("КПП",				ТекСтрока.КонтрагентКПП);
	ДанныеКонтрагента.Вставить("КодПоОКПО",			ТекСтрока.КонтрагентКодПоОКПО);
	ДанныеКонтрагента.Вставить("КонтактнаяИнформация",	"");
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

// Заполняет списки XDTO Товары и Налоги объекта XDTO типа Документ.
// 
// Параметры
// 	ДокументXDTO - объект XDTO типа Документ
// 	ПакетCML - пакет XDTO, содержащий типы CML
// 	ВыборкаДокументов - выборка, содержащая данные по заказам покупателей
// 	ДеревоСвойствХарактеристик - дерево значений, содержащее свойства характеристик.
// 	Параметры - структура, содержащая параметры обмена.
// 
Процедура ДобавитьТоварыЗаказаXDTO(ДокументXDTO, ТекСтрока, ДеревоСвойствХарактеристик, Параметры)
	
	ТаблицаТоваров = ТекСтрока.Товары;
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетCML = ПакетCML();
	
	ТоварыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Товары");
	ТоварТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварыТип, "Товар");
	
	НалогиВДокументеXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ДокументXDTO.Тип(), "Налоги"));
	ТоварыXDTO = ФабрикаXDTO.Создать(ТоварыТип);
	
	СчитатьНДС = ИСТИНА;
	ОбменССайтомПереопределяемый.ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ТекСтрока.ЗаказНалогообложениеНДС);
	
	СуммаНДС = 0;
	
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
		ТоварXDTO = ФабрикаXDTO.Создать(ТоварТип);
		
		Характеристика = Неопределено;
		Если Параметры.ИспользоватьХарактеристики Тогда
			Характеристика = СтрокаТаблицыТоваров.ТоварыХарактеристика;
		КонецЕсли;
		
		ИдТовара = УникальныйИдентификаторОбъекта(СтрокаТаблицыТоваров.ТоварыНоменклатура, Характеристика);
		
		ТоварXDTO.Ид = ИдТовара;
		ТоварXDTO.Артикул = СтрокаТаблицыТоваров.ТоварыНоменклатураАртикул;
		ТоварXDTO.Наименование = ФорматНаименованияДляXDTO(СтрокаТаблицыТоваров.ТоварыНоменклатура);
		
		РеквизитыЕдиницыИзмерения = ДанныеЕдиницыИзмерения(СтрокаТаблицыТоваров);
		
		ТоварXDTO.БазоваяЕдиница = БазоваяЕдиницаXDTO(ТоварXDTO, РеквизитыЕдиницыИзмерения);
		ТоварXDTO.ЦенаЗаЕдиницу = СтрокаТаблицыТоваров.ТоварыЦена;
		ТоварXDTO.Количество = СтрокаТаблицыТоваров.ТоварыКоличество;
		ТоварXDTO.Сумма = СтрокаТаблицыТоваров.ТоварыСумма;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетЕдиницаКод) Тогда
			ТоварXDTO.Единица = Лев(Строка(СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетЕдиницаКод),3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетКоэффициент) Тогда
			ТоварXDTO.Коэффициент = СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетКоэффициент;
		КонецЕсли;
		
		ДобавитьТипНоменклатурыВЗначенияРеквизитов(ТоварXDTO, СтрокаТаблицыТоваров.ТоварыНоменклатураТипНоменклатуры);
				
		Если СтрокаТаблицыТоваров.ТоварыСуммаНДС > 0 Тогда
			
			НалогТовараXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Налог"));
			
			СтавкиНалоговXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов"));
			
			ТипНалогиТовара = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Налоги");
			НалогиТовараXDTO = ФабрикаXDTO.Создать(ТипНалогиТовара);
			
			ТипНалогТовара = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТипНалогиТовара, "Налог");
			НалогТовараXDTO = ФабрикаXDTO.Создать(ТипНалогТовара);
			
			НалогТовараXDTO.Наименование = Параметры.НаименованиеНалога;
			НалогТовараXDTO.УчтеноВСумме = ТекСтрока.ЗаказСуммаВключаетНДС;
			
			НалогТовараXDTO.Сумма = СтрокаТаблицыТоваров.ТоварыСуммаНДС;
			ЗначениеСтавкиНДС = СтрокаТаблицыТоваров.ТоварыСтавкаНДС;
			// ОбменССайтомПереопределяемый.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтрокаТаблицыТоваров.ТоварыСтавкаНДС,
			// 																						ЗначениеСтавкиНДС);
			НалогТовараXDTO.Ставка = ЗначениеСтавкиНДС;
			
			НалогиТовараXDTO.Налог.Добавить(НалогТовараXDTO);
			ТоварXDTO.Налоги = НалогиТовараXDTO;
			
			Если СчитатьНДС Тогда
				
				СуммаНДС = СуммаНДС + СтрокаТаблицыТоваров.ТоварыСуммаНДС;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроцентСкидки = СтрокаТаблицыТоваров.ТоварыПроцентСкидки;
		
		Если ПроцентСкидки <> 0 Тогда
			
			СуммаСкидки = СтрокаТаблицыТоваров.ТоварыСуммаСкидки;
			
			СкидкиТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "Скидки"));
			СкидкаТовараXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(СкидкиТовараXDTO.Тип(), "Скидка"));
			
			СкидкаТовараXDTO.Наименование = Строка(ПроцентСкидки);
			СкидкаТовараXDTO.Процент = ПроцентСкидки;
			СкидкаТовараXDTO.Сумма = СуммаСкидки;
			СкидкаТовараXDTO.УчтеноВСумме = "true";
			
			СкидкиТовараXDTO.Скидка.Добавить(СкидкаТовараXDTO);
			ТоварXDTO.Скидки = СкидкиТовараXDTO;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ТоварыСтавкаНДС) Тогда
			
			СтавкиНалоговXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТоварТип, "СтавкиНалогов"));
			СтавкаНалогаXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(СтавкиНалоговXDTO.Тип(), "СтавкаНалога"));
			
			СтавкаНалогаXDTO.Наименование = Параметры.НаименованиеНалога;
			
			ЗначениеСтавки = СтрокаТаблицыТоваров.ТоварыСтавкаНДС;
			// ОбменССайтомПереопределяемый.ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтрокаТаблицыТоваров.ТоварыСтавкаНДС, ЗначениеСтавки);
			
			СтавкаНалогаXDTO.Ставка = ЗначениеСтавки;
			
			СтавкиНалоговXDTO.СтавкаНалога.Добавить(СтавкаНалогаXDTO);
			
			ТоварXDTO.СтавкиНалогов = СтавкиНалоговXDTO;
			
		КонецЕсли;
		
		ТоварыXDTO.Товар.Добавить(ТоварXDTO);
		
	КонецЦикла;
	
	ТипДокумента = ПакетCML.Получить("Документ");
	ТипНалогиДокумента = ТипДокумента.Свойства.Получить("Налоги").Тип;
	ТипНалогДокумента = ТипНалогиДокумента.Свойства.Получить("Налог").Тип;
	НалогДокументаXDTO = ФабрикаXDTO.Создать(ТипНалогДокумента);
	
	НалогДокументаXDTO.Наименование = Параметры.НаименованиеНалога;
	НалогДокументаXDTO.УчтеноВСумме = ТекСтрока.ЗаказСуммаВключаетНДС;
	НалогДокументаXDTO.Сумма = СуммаНДС;
	
	НалогиВДокументеXDTO.Налог.Добавить(НалогДокументаXDTO);
	
	ДокументXDTO.Налоги = НалогиВДокументеXDTO;
	ДокументXDTO.Товары = ТоварыXDTO;
	
КонецПроцедуры

// Заполняет значения дополнительных реквизитов для объекта XDTO типа Документ.
// 
// Параметры
// 	ДокументXDTO - объект XDTO типа Документ
// 	ПакетCML - пакет XDTO, содержащий типы CML
// 	ДанныеДокумента - выборка, содержащая данные заказа покупателя
// 	Параметры - структура, содержащая параметры обмена.
// 
Процедура ДобавитьЗначенияРеквизитовЗаказаXDTO(ДокументXDTO, ПакетCML, ДанныеДокумента, Параметры)
	
	ЗначенияРеквизитовXDTO = ФабрикаXDTO.Создать(ДокументXDTO.Свойства().Получить("ЗначенияРеквизитов").Тип);
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер по 1С"), ДанныеДокумента.ЗаказНомер);
	
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата по 1С"),
		ФорматДатыДляXDTO(ДанныеДокумента.ЗаказДата, ИСТИНА, ИСТИНА));
		
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "ПометкаУдаления", ДанныеДокумента.ЗаказПометкаУдаления);
	ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Проведен", ДанныеДокумента.ЗаказПроведен);
	
	ЗаказОплачен = ЛОЖЬ;
	ОбменССайтомПереопределяемый.ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, ДанныеДокумента.ЗаказСтатусЗаказа,
															  ДанныеДокумента.ЗаказКОплатеОстаток);
	
	Если ДанныеДокумента.ЗаказПроведен И ЗаказОплачен Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер оплаты по 1С"), ДанныеДокумента.ЗаказНомерОплаты);
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, 
			ПакетCML, "Дата оплаты по 1С", ФорматДатыДляXDTO(ДанныеДокумента.ЗаказДатаОплаты, ИСТИНА, ИСТИНА));
		
	КонецЕсли;
	
	ЗаказОтгружен = ЛОЖЬ;
	ОбменССайтомПереопределяемый.ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокумента.ЗаказСтатусЗаказа,
																ДанныеДокумента.ЗаказКОтгрузкеОстаток);
	Если ДанныеДокумента.ЗаказПроведен И ЗаказОтгружен Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO,
			ПакетCML, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер отгрузки по 1С"), ДанныеДокумента.ЗаказНомерОтгрузки);
			
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, 
			ПакетCML, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата отгрузки по 1С"), ФорматДатыДляXDTO(ДанныеДокумента.ЗаказДатаОтгрузки, ИСТИНА, ИСТИНА));
		
	КонецЕсли;
	
	ЗаказВРаботе = ЛОЖЬ;
	ОбменССайтомПереопределяемый.ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокумента.ЗаказСостояниеЗаказа);
	
	Если ДанныеДокумента.ЗаказЗакрыт И ЗаказВРаботе Тогда
		
		ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, "Отменен", "true");
		
	КонецЕсли;
	
	ДокументXDTO.ЗначенияРеквизитов = ЗначенияРеквизитовXDTO;
	
КонецПроцедуры

Процедура ДобавитьТипНоменклатурыВЗначенияРеквизитов(ТоварXDTO, ТипНоменклауры)
	
	ЗначениеРеквизитов = ТоварXDTO.Свойства().Получить("ЗначенияРеквизитов").Тип;
	ЗначениеРеквизитовXDTO = ФабрикаXDTO.Создать(ЗначениеРеквизитов);
	ПакетCML = ПакетCML();
	
	ЗначениеРеквизитаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначениеРеквизита"));
	
	ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры";
	ЗначениеСвойства = ТипНоменклауры;
	ЗначениеРеквизитаXDTO.Значение.Добавить(ЗначениеСвойства);
	
	ЗначениеРеквизитовXDTO.ЗначениеРеквизита.Добавить(ЗначениеРеквизитаXDTO);
	
	ТоварXDTO.ЗначенияРеквизитов = ЗначениеРеквизитовXDTO;

	
КонецПроцедуры

Процедура ЗаполнитьЕдиницыИзмеренияТоваров(ТоварыЗаказа, ОписаниеОшибки)
	
	ИмяСправочникаНоменклатура = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	Если Не ЗначениеЗаполнено(ИмяСправочникаНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочникаНоменклатура];
	Если МетаданныеСправочника.Реквизиты.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		
		ШаблонСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В справочнике %1 не найден реквизит %2");
		ТексСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСправочникаНоменклатура, "ЕдиницаИзмерения");
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТексСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	МассивНоменклатуры = ТоварыЗаказа.ВыгрузитьКолонку("Номенклатура");
	ЕдиницыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "ЕдиницаИзмерения");
	Для Каждого ТекСтрока Из ТоварыЗаказа Цикл
		
		Единица = ЕдиницыНоменклатуры.Получить(ТекСтрока.Номенклатура);
		ТекСтрока.ЕдиницаИзмерения = Единица;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРедактирования(НовоеПоле, Отбор)
	
	ПараметрВыбора = НовоеПоле.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
	
	Для Каждого СтруктураОтбора Из Отбор Цикл
		
		НовыйОтбор =ПараметрВыбора.Значение.Добавить();
		НовыйОтбор.Имя = "Отбор."+ СтруктураОтбора.ИмяПоля;
		НовыйОтбор.Значение = СтруктураОтбора.ЗначениеОтбора;
		
	КонецЦикла;
	
	ПараметрВыбора.Использование = ИСТИНА;
	
КонецПроцедуры

// В связи с тем, что некоторые данные могут быть завязаны на функциональную опцию,
// например, Использование характеристик, Дополнительных свойств и Томов хранения файлов
// то при отключеной ф.о. в таблице пропадает часть колонок (построироитель их не выведет)
// для того, чтобы в дальнейщем избежать ошибки, связанной с обращением к несуществующей колонке
// дополним полученную таблицу значений колонками которые могли изчезнуть
// Для этого переберем поля компоновщика настроек и убедимся (или создадим) что все колонки существуют
// Тип создаваемой колонки будет браться из построителя, его должен задать прикладной программист
// 
Процедура СоздатьНедостающиеКолонкиТаблицыДанных(НастройкиКомпоновщика, ТаблицаДанных)
	
	ВыбранныеПоля = НастройкиКомпоновщика.ДоступныеПоляВыбора.Элементы;
	Для Каждого ПолеКомпоновщика Из ВыбранныеПоля Цикл
		
		ИмяКолонки = Строка(ПолеКомпоновщика.Поле);
		
		// Если существует такая колонка, то проверяем следующее поле
		Если Не ТаблицаДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Если колонки нет, то будет ее создавать
		ТипЗначенияПоля = ПолеКомпоновщика.ТипЗначения;
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки, ТипЗначенияПоля);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЕдиницыИзмерения(СтрокаТаблицыТоваров)
	
	ДанныеЕдиницы = Новый Структура;
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияКод",				 СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияКод);
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияНаименованиеПолное", СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияНаименованиеПолное);
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияНаименование",		 СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияНаименование);
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияМеждународноеСокращение", 	СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияМеждународноеСокращение);
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияПересчетКоэф",				СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетКоэффициент);
	ДанныеЕдиницы.Вставить("ЕдиницаИзмеренияПересчетЕдиница",			СтрокаТаблицыТоваров.ТоварыЕдиницаИзмеренияПересчетЕдиницаКод);
	
	Возврат ДанныеЕдиницы;
	
КонецФункции

Функция УникальныйИдентификаторОбъекта(Объект, Характеристика = Неопределено)
	
	Ид = Строка(Объект.УникальныйИдентификатор());
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		ИдХаракетеристики = Строка(Характеристика.УникальныйИдентификатор());
		
		Ид = Ид + "#" + ИдХаракетеристики;
		
	КонецЕсли;
	
	Возврат Ид;
	
КонецФункции

// Формирует объект ИнтернетПрокси по настройкам прокси.
// 
// Параметры:
// 	Прокси		- Соответствие -
// 					ключи:
// 					НеИспользоватьПроксиДляЛокальныхАдресов - строка - 
// 					Сервер			- адрес прокси-сервера
// 					Порт			- порт прокси-сервера
// 					Пользователь	- имя пользователя для авторизации на прокси-сервере
// 					Пароль			- пароль пользователя
// 	Протокол	- строка - протокол для которого устанавливаются параметры прокси сервера.
// 					Например: "http", "https", "ftp".
// 
Функция НастройкиПрокси(Настройки, Протокол)
	Прокси = Новый ИнтернетПрокси;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Настройки["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, Настройки["Сервер"], Настройки["Порт"]);
	Прокси.Пользователь = Настройки["Пользователь"];
	Прокси.Пароль = Настройки["Пароль"];
	
	Возврат Прокси;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по настройке обмена
// с учетом параметров прокси.
// 
// Параметры:
// 	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
// 	НастройкиПодключения - Структура настроек подключения к сайту
// 	ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
// 	Булево - ИСТИНА, если успех.
// 
Функция ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки)
	
	Если НЕ РазобратьАдресСайта( НастройкиПодключения, ОписаниеОшибки) Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	НастройкаПроксиСервера = Новый Соответствие;
	ОбменССайтомПереопределяемый.ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера);

	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = ЛОЖЬ Тогда
		
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, НастройкиПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат ИСТИНА;
	
КонецФункции

Функция СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки)
	
	Соединение = Неопределено;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Пользователь,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.Прокси,
			ПараметрыПодключения.ЗащищенноеСоединение
		);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль."),
					ПараметрыПодключения.Сервер,
					ПараметрыПодключения.Порт)));
		
		Соединение = Неопределено;
			
	Конецпопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, 
										  ОписаниеОшибки, ТипСоединения = "catalog")
	
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Авторизация не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth");
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Авторизация не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Авторизация не выполнена.")
			+ Символы.ПС 
			+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль."));
			
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции

// Выгружает файлы на сайт.
// 
// Параметры:
// 	Параметры								- Структура, основные параметры
// 	МассивПодкаталогов						- Массив
// 	ОписаниеОшибки							- Строка
// 	ОжидатьЗавершенияИмпортаФайловСервером	- булево
// 	ТипСоединения							- Строка
// 
// Возвращаемое значение:
// 	Булево				- ИСТИНА, если успех.
// 
Функция ВыгрузитьНаСайт(Параметры,
						МассивПодкаталогов = Неопределено,
						ОписаниеОшибки,
						ОжидатьЗавершенияИмпортаФайловСервером = ЛОЖЬ,
						ТипСоединения = "catalog")
	
	ОтветСервера = "";
	Соединение = Неопределено;
	НастройкиПодключения = Параметры.НастройкиПодключения;
	
	АдресДляРаботы = НастройкиПодключения.АдресСкрипта + "?type=" + ТипСоединения; 
	
	ОписаниеОшибки = "";
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, 
												ОтветСервера, ОписаниеОшибки,
												ТипСоединения);
	
	Если НЕ Успешно Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка на сайт не выполнена."));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_Инициализация,
		ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка на сайт не выполнена."));
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = ЛОЖЬ;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Если СтрЧислоСтрок(ОтветСервера) <> 2 Тогда
		ТекстОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выгрузка на сайт не выполнена.")
							+ Символы.ПС
							+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось прочитать ответ сервера. Параметры обмена не получены.");
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) = НастройкиПодключения.ОтветСервера_ZIPРазрешен;
	
	Попытка 
		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 2))),
			НастройкиПодключения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, ""));
		
	Исключение
		
		ОписаниеИсключительнойОшибки = ОписаниеИсключительнойОшибки(
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка получения параметров обмена (ограничение размера файла)!"));
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
		
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		
	КонецПопытки;
	
	МассивИсходныхXMLФайлов = НайтиФайлы(Параметры.КаталогНаДиске, "*.xml");
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(Параметры.КаталогНаДиске, МассивПодкаталогов);
	
	Если ZIPФайлыРазрешены Тогда
		СписокФайловДляОтправки = ПодготовитьZIPАрхивы(Параметры.КаталогНаДиске, ОписаниеОшибки);
		
		Если СписокФайловДляОтправки.Количество() = 0 Тогда
			Возврат ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда
		
		СписокФайловДляОтправки = РазделитьФайлыНаФрагменты(СписокФайловДляОтправки, ОграничениеРазмераФрагментаФайлаОбмена);
		
	КонецЕсли;
	
	ВсегоФайлов = СписокФайловДляОтправки.Количество();
	
	Для Каждого ТекФайл Из СписокФайловДляОтправки цикл
		
		ОтветСервера = ОтправитьФайлНаСервер(ТекФайл.Значение,
			Соединение,
			ОписаниеОшибки,
			АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ПередачаФайла + ТекФайл.Представление,
			ЗаголовкиЗапросов);
		
		Если ZIPФайлыРазрешены Тогда
			
			Попытка
				УдалитьФайлы(ТекФайл.Значение);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось получить ответ сервера. Файл не отправлен.") + " (" + ТекФайл.Значение + ").");
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера,1)));
		
		Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
			
			ОписаниеИсключительнойОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка на стороне сервера. Файл не отправлен.")
				+ " (" + ТекФайл.Значение + ")."
				+ Символы.ПС
				+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ответ сервера:")
				+ Символы.ПС
				+ ОтветСервера;
				
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
			Возврат ЛОЖЬ;
			
		ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
			
			Если СтрЧислоСтрок(ОтветСервера) > 1 Тогда
				
				ОписаниеИсключительнойОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Получен расширенный статус успешного завершения сеанса.")
					+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ответ сервера:") + Символы.ПС + ОтветСервера;
					
				ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
				
			КонецЕсли;
			
		Иначе
			
			ОписаниеИсключительнойОшибки = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка на стороне сервера. Не получен статус завершения операции. Файл не отправлен.")
				+ " (" + ТекФайл.Значение + ")."
				+ Символы.ПС
				+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ответ сервера:")
				+ Символы.ПС
				+ ОтветСервера;
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки);
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмпортУспешноЗавершен = ЛОЖЬ;
	
	Если ОжидатьЗавершенияИмпортаФайловСервером Тогда
		
		Для Каждого ТекФайл Из МассивИсходныхXMLФайлов Цикл
			
			ИмпортПродолжается = ИСТИНА;
			ТекущееСостояние = "";
			
			Пока ИмпортПродолжается Цикл
				
				ИмпортПродолжается = ЛОЖЬ;
				
				ОписаниеОшибки = "";
				ОтветСервера = ПолучитьДанныеССервера(
					Соединение,
					ОписаниеОшибки,
					АдресДляРаботы + НастройкиПодключения.ПараметрЗапросаHTTP_ИмпортФайлаСервером + ТекФайл.Имя,
					ЗаголовкиЗапросов);
				
				Если ОтветСервера = Неопределено Тогда 
					
					Успешно = ЛОЖЬ;
					
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось получить текущее состояние процесса обмена. Данные обмена отправлены, но не загружены."));
					
				ИначеЕсли СтрЧислоСтрок(ОтветСервера) = 0 Тогда
					
					Успешно = ЛОЖЬ;
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
						+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось прочитать данные о текущем состоянии процесса обмена. Данные обмена отправлены, но не загружены."));
					
				Иначе
					
					СостояниеОбмена = СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1)));
					
					Если СостояниеОбмена = НастройкиПодключения.ОтветСервера_АварийноеЗавершениеТекущейОперации Тогда
						
						Успешно = ЛОЖЬ;
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
							+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка на стороне сервера.")
							+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ответ сервера") + ": "
							+ Символы.ПС + ОтветСервера);
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_УспешноеЗавершениеТекущейОперации Тогда
						
						ИмпортУспешноЗавершен = ИСТИНА;
						
					ИначеЕсли СостояниеОбмена = НастройкиПодключения.ОтветСервера_ВыполнениеТекущейОперации Тогда
						
						ИмпортПродолжается = ИСТИНА;
						
					Иначе
						
						Успешно = ЛОЖЬ;
						
						ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекФайл.Имя + ": "
							+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка на стороне сервера. Получен неизвестный статус импорта.")
							+ Символы.ПС + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ответ сервера") + ": "
							+ Символы.ПС + ОтветСервера);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ИмпортУспешноЗавершен Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Отправляет файл на сервер по http.
// 
// Параметры:
// 	ПолноеИмяФайла - строка
// 	Соединение - HTTPСоединение
// 	ПараметрыЗапроса - строка
// 	Заголовки - строка
// 	ОписаниеОшибки - строка
// 
// Возвращаемое значение:
// 	Строка - Ответ сервера.
// 
Функция ОтправитьФайлНаСервер(ПолноеИмяФайла, Соединение, ОписаниеОшибки, ПараметрыЗапроса="", Заголовки="")
	
	ОтветСервера = Неопределено;
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки());
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправка файла на сервер: Получен пустой ответ сервера."));
		КонецЕсли;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отправка файла на сервер: Ответ сервера не получен.")); 
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция РазделитьФайлыНаФрагменты(СписокФайлов, ОграничениеРазмераФрагмента)
	
	НовыйСписокФайлов = Новый СписокЗначений;
	Для Каждого ТекФайл Из СписокФайлов цикл
		
		ФайлНаДиске = Новый Файл(ТекФайл.Значение);
		Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
			
			МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
			Для Каждого НовыйФайл Из МассивФрагментов Цикл
				НовыйСписокФайлов.Добавить(НовыйФайл, ТекФайл.Представление);
			КонецЦикла;
			
			УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
			
		Иначе
			НовыйСписокФайлов.Добавить(ТекФайл.Значение, ТекФайл.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПодготовитьZIPАрхивы(КаталогНаДиске, ОписаниеОшибки)
	
	ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	НовыйСписокФайлов = Новый СписокЗначений;
	
	ЗаписьАрхива.Добавить(КаталогНаДиске + "\*.*",
						  РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
						  РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	
	Попытка
		ЗаписьАрхива.Записать();
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать zip-архив на диск!")));
		Возврат НовыйСписокФайлов;
		
	КонецПопытки;
	
	ФайлАрхива = Новый Файл(ПолноеИмяФайлаАрхива);
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ФайлАрхива.Имя);
	
	Возврат НовыйСписокФайлов;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(КаталогНаДиске, МассивПодкаталогов)
	
	СписокФайлов = Новый СписокЗначений;
	Маска = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогНаДиске, Маска);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогНаДиске + "\" + Подкаталог, Маска);
			
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
					
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			
			ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ТекФайл);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

Функция ПодготовитьИмяФайлаДляСервера(КаталогНаДиске, ФайлОбъект)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если Найти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
		
	Иначе
		
		// Для картинки оставляем 2 папки и разворачиваем слэши.
		
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПутьДляУдаления = КаталогНаДиске + "\";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
		
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ПолноеИмяФайлаДляСервера);
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция УдалитьДополнительныеРасширенияФайла(КаталогНаДиске, ИсходноеИмяФайла)
	
	ПозицияТочки = Найти(ИсходноеИмяФайла, ".");
	
	ИмяФайла = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	
	ПозицияТочки = Найти(ПраваяЧастьИсходногоИмени, ".");
	
	Расширение = ПраваяЧастьИсходногоИмени;
	
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);
	КонецЕсли;
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

Функция ПолучитьДанныеССервера(Соединение, ОписаниеОшибки, ПараметрыЗапроса = "", Заголовки = "")
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось получить данные с сервера.") + Символы.ПС 
				+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте правильность адреса сервера, порт, имя пользователя и пароль") + ","
				+ Символы.ПС
				+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("а также настройки подключения к Интернет.")));
		
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ОтветСервера = Неопределено;
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Получение данных с сервера: Получен пустой ответ сервера."));
		КонецЕсли;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Получение данных с сервера: Ответ сервера не получен."));
			
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

// В зависимости от типа платформы меняет слеши в пути к файлу
// 
Функция ПодготовитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	Возврат Путь;
	
КонецФункции

// Возвращает тип операционной системы компьютера
// 
Функция ПлатформаWindows() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
		
	Возврат ПлатформаWindows;

	
КонецФункции

Процедура ДобавитьЗначениеРеквизитаXDTO(ЗначенияРеквизитовXDTO, ПакетCML, Наименование, Значение)
	
	Если НЕ ЗначениеЗаполнено(Наименование) ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизитаXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("ЗначениеРеквизита"));
	
	ЗначениеРеквизитаXDTO.Наименование = Наименование;
	ЗначениеРеквизитаXDTO.Значение.Добавить(СтрокаЗаписиДляXML(Значение));
	
	ЗначенияРеквизитовXDTO.ЗначениеРеквизита.Добавить(ЗначениеРеквизитаXDTO);
	
КонецПроцедуры

// Получает тип свойства от типа объекта XDTO.
// 
// Параметры:
// 	ТипОбъектаXDTO - тип объекта XDTO, от которого требуется получить тип свойства
// 	ИмяСвойства - имя свойства, тип которого нужно получить
// 
// Возвращаемое значение:
// 	ТипОбъектаXDTO.
// 
Функция ПолучитьТипСвойстваОтТипаОбъектаXDTO(ТипОбъектаXDTO, ИмяСвойства)
	
	ТипСвойства = ТипОбъектаXDTO.Свойства.Получить(ИмяСвойства).Тип;
	Возврат ТипСвойства;
	
КонецФункции

// Формирует XDTO объект типа Контрагент и заполняет его данными
// Параметры:
// 	ДанныеКонтрагента - выборка результата запроса реквизитами контрагента
// 	ПакетCML - пакет, который содержит описание типа контрагента
// Возвращаемое значение
// 	КонтрагентXDTO
// 
Функция ПолучитьКонтрагентаXDTO(ДанныеКонтрагента) Экспорт
	
	ПакетCML = ПакетCML();
	
	Если ДанныеКонтрагента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	ЭтоОрганизация = ТипЗнч(ДанныеКонтрагента.Контрагент) = Тип("СправочникСсылка."+НазваниеСправочникаОрганизации);
	Если ЭтоОрганизация Тогда
		
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПакетCML.Получить("Контрагент"));
		
	Иначе
		
		КонтрагентыТип = ПолучитьТипСвойстваОтТипаОбъектаXDTO(ПакетCML.Получить("Документ"), "Контрагенты");
		КонтрагентXDTO = ФабрикаXDTO.Создать(ПолучитьТипСвойстваОтТипаОбъектаXDTO(КонтрагентыТип, "Контрагент"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
		КонтрагентXDTO.ИД = УникальныйИдентификаторОбъекта(ДанныеКонтрагента.Контрагент);
	КонецЕсли;
	КонтрагентXDTO.Наименование = ДанныеКонтрагента.Наименование;
	
	ЭтоЮрЛицо = ЛОЖЬ;
	
	ОбменССайтомПереопределяемый.ОпределитьЭтоЮрЛицо(ДанныеКонтрагента.ПравовойСтатус, ЭтоЮрЛицо);
	
	Если ЭтоЮрЛицо Тогда
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ОфициальноеНаименование = ДанныеКонтрагента.НаименованиеПолное;
		КонецЕсли;
		
		
	Иначе
		
		Если НЕ ПустаяСтрока(ДанныеКонтрагента.НаименованиеПолное) Тогда
			КонтрагентXDTO.ПолноеНаименование = ДанныеКонтрагента.НаименованиеПолное;
		КонецЕсли;
		
	КонецЕсли;
	
	ИНН = ПолучитьИННДляXDTO(ДанныеКонтрагента.ИНН, ЭтоЮрЛицо);
	Если НЕ ПустаяСтрока(ИНН) Тогда
		КонтрагентXDTO.ИНН = ИНН;
	КонецЕсли;
	
	КПП = ПолучитьКППДляXDTO(ДанныеКонтрагента.КПП);
	Если НЕ ПустаяСтрока(КПП) Тогда
		КонтрагентXDTO.КПП = КПП;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		КонтрагентXDTO.ОКПО = ДанныеКонтрагента.КодПоОКПО;
	КонецЕсли;
	
	Если НЕ ЭтоОрганизация Тогда
		КонтрагентXDTO.Роль = "Покупатель";
	КонецЕсли;
	
	КонтрагентXDTO.Проверить();
	
	Возврат КонтрагентXDTO;
	
КонецФункции

Функция ПолучитьИННДляXDTO(ИНН, ЭтоЮрЛицо)
	
	Если ЭтоЮрЛицо Тогда
		ЗначениеИНН = ?(СтрДлина(ИНН) = 10, ИНН, "");
	Иначе
		ЗначениеИНН = ?(СтрДлина(ИНН) = 12, ИНН, "");
	КонецЕсли;
	
	Возврат ЗначениеИНН;
	
КонецФункции

Функция ПолучитьКППДляXDTO(КПП)
	
	ЗначениеКПП = ?(СтрДлина(КПП) = 9, КПП, "");
	
	Возврат ЗначениеКПП;
	
КонецФункции 

// Проверяет штрихкод на соответствие формату CML205.
// Если штрихкод не соответствует формату, возвращает пустую строку.
// 
Функция ПолучитьШтрихкодДляXDTO(Штрихкод)
	
	Если СтрДлина(Штрихкод) < 8
		ИЛИ СтрДлина(Штрихкод) > 14 Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ТипЗначенияСправочник(Тип)
	
	ТипЗначенияСправочник = ЛОЖЬ;
	
	Попытка
		ОбъектПоТипу = Новый(Тип);
		ТипЗначенияСправочник = Метаданные.Справочники.Содержит(ОбъектПоТипу.Метаданные());
	Исключение
	КонецПопытки;
	
	Возврат ТипЗначенияСправочник;
	
КонецФункции

Функция ФорматНаименованияДляXDTO(Наименование)
	
	Возврат Лев(Наименование, 250);
	
КонецФункции

Функция ФорматДатыДляXDTO(ЗначениеДата, ВернутьДату = ИСТИНА, ВернутьВремя = ЛОЖЬ)
	
	ФорматДаты = "ДФ=yyyy-MM-dd; ДЛФ=D";
	ФорматВремени = "ДЛФ=T";
	РазделительДатаВремя = "T";
	
	ДатаСтрока = Формат(ЗначениеДата, ФорматДаты);
	ВремяСтрока = Формат(ЗначениеДата, ФорматВремени);
	Результат = "";
	
	Если ВернутьДату И ВернутьВремя Тогда
		Результат = ДатаСтрока + РазделительДатаВремя + ВремяСтрока;
	ИначеЕсли ВернутьДату И (НЕ ВернутьВремя) Тогда
		Результат = ДатаСтрока;
	ИначеЕсли (НЕ ВернутьДату) И ВернутьВремя Тогда
		Результат = ВремяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение валюты для выгрузки в XML.
// 
// Параметры:
//  Валюта - СправочникСсылка.Валюты
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ФорматНаименованияВалютыДляXDTO(Знач НаименованиеВалюты)
	
	Если ПустаяСтрока(НаименованиеВалюты) Тогда
		НаименованиеВалюты	= Справочники.ВидыЦен.ГлавныйВидЦен.ВалютаЦены;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеВалюты) Тогда
		НаименованиеВалюты	= "Руб";
	КонецЕсли;
	
	Возврат Лев(НаименованиеВалюты, 3);;
	
КонецФункции

Функция РаспаковатьZIPАрхив(СтрокаZIP, ОписаниеОшибки)
	
	СтрокаСодержимого = "";
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	
	Попытка
		
		СоздатьКаталог(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось распаковать архив с заказами!")));
			
		Возврат "";
		
	КонецПопытки;
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка
		
		СтрокаВФайл.Записать(ИмяФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось записать архив с заказами") + ":"
				+ " " + ИмяФайла));
				
		Возврат "";
		
	КонецПопытки;
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя);
			СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось распаковать архив с заказами") + ":"
				+ " " + ИмяФайла));
				
		Возврат "";
		
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

// Возвращает структуру, содержащую данные банка, полученные из объекта XDTO типа Банк
// 
Функция ПолучитьДанныеБанкаXDTO(БанкXDTO)
	
	ДанныеБанка = Новый Структура;
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Наименование") И СвойствоXDTOЗаполнено(БанкXDTO.Наименование) Тогда
		Наименование = БанкXDTO.Наименование;
	КонецЕсли;
	
	БИК = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "БИК") И СвойствоXDTOЗаполнено(БанкXDTO.БИК) Тогда
		БИК = СтрЗаменить(БанкXDTO.БИК, " ", "");
	КонецЕсли;
	
	SWIFT = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "SWIFT") И СвойствоXDTOЗаполнено(БанкXDTO.SWIFT) Тогда
		SWIFT = СтрЗаменить(БанкXDTO.SWIFT, " ", "");
	КонецЕсли;
	
	КоррСчет = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "СчетКорреспондентский") 
		 И СвойствоXDTOЗаполнено(БанкXDTO.СчетКорреспондентский) Тогда
		КоррСчет = СтрЗаменить(БанкXDTO.СчетКорреспондентский, " ", "");
	КонецЕсли;
	
	Адрес = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") И СвойствоXDTOЗаполнено(БанкXDTO.Адрес.Представление) Тогда
		Адрес = СокрЛП(БанкXDTO.Адрес.Представление);
	КонецЕсли;
	
	Город = ПолучитьГородБанкаИзАдресаXDTO(БанкXDTO.Адрес);
	
	ДанныеБанка.Вставить("Наименование", Наименование);
	ДанныеБанка.Вставить("БИК", БИК);
	ДанныеБанка.Вставить("SWIFT", SWIFT);
	ДанныеБанка.Вставить("КоррСчет", КоррСчет);
	ДанныеБанка.Вставить("Адрес", Адрес);
	ДанныеБанка.Вставить("Город", Город);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)
	
	ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
		И ОбъектXDTO[Свойство] <> Неопределено;
		
	Возврат ЕстьСвойство;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO)
	
	СвойствоЗаполнено = ИСТИНА;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ПолучитьГородБанкаИзАдресаXDTO(АдресXDTO)
	
	Город = "";
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из АдресXDTO.АдресноеПоле Цикл
			
			Если ОбъектXDTO.Тип = "Город" Тогда
				
				Город = ОбъектXDTO.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Город;
	
КонецФункции

Функция ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Фамилия") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Фамилия) Тогда
		ТекущаяСтрока = КонтрагентXDTO.Фамилия;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Имя") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Имя);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Отчество") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Возвращает массив, содержащий объекты XDTO 
// 	или объект XDTO, если тип переданного параметра "ОбъектXDTO".
// 
// Параметры
// 	СписокXDTO - СписокXDTO, ОбъектXDTO - список XDTO, объекты которого нужно получить
// 
// Возвращаемое значение
// 	Массив - массив свойств объекта XDTO.
// 
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO)
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

Функция ЧислоИзСтроки(ЗначениеСтрока)
	
	ЗначениеЧисло = 0;
	
	Попытка
		ЗначениеЧисло = Число(ЗначениеСтрока);
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

Функция НаименованиеНоменклатуры(Знач Наименование)
	
	ПозицияРазделителя = Найти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеНоменклатуры = Лев(Наименование, ПозицияРазделителя - 1);
	Иначе
		НаименованиеНоменклатуры = Наименование;
	КонецЕсли;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции

Функция ИдХарактеристики(Знач Ид)
	
	ПозицияРазделителя = Найти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдХарактеристики = Сред(Ид, ПозицияРазделителя + 1);
	Иначе
		ИдХарактеристики = "";
	КонецЕсли;
	
	Возврат ИдХарактеристики;
	
КонецФункции

Функция НаименованиеХарактеристики(Знач Наименование)
	
	ПозицияРазделителя = Найти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеХарактеристики = Сред(Наименование, ПозицияРазделителя + 1);
	Иначе
		НаименованиеХарактеристики = "";
	КонецЕсли;
	
	Возврат НаименованиеХарактеристики;
	
КонецФункции

Функция ДатаВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Процедура ДобавитьПараметрыПротоколаОбменаВСтруктуру(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

// Возвращает путь к файлу в зависимости от типа платформы
// 
Функция ПутьТомаДляПлатформы(ПлатформаWindows, Том) Экспорт
	
	Если ПлатформаWindows Тогда
		Возврат Том.ПолныйПутьWindows;
	Иначе
		Возврат Том.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

Функция ВариантыЗначенийСвойстваПоТипу(Выборка, Тип)
	
	ВариантыЗначений = Новый Массив;
	ВыборкаЗначений = Выборка.Выбрать();
	
	Пока ВыборкаЗначений.Следующий() Цикл
		
		// Если ТипЗнч(ВыборкаЗначений.Значение) = Тип Тогда
			
			ВариантыЗначений.Добавить(ВыборкаЗначений.Значение);
			
		// КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантыЗначений;
	
КонецФункции

Функция СтрокаЗаписиДляXML(Значение)
	
	СтрокаЗаписи = Строка(Значение);
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЗаписи;
	
КонецФункции

// Формирует расширенное описание ошибки.
// 
// Параметры:
// 	ТекстНачалаСообщения - Строка
// 	ТекстОкончанияСообщения - Строка
// 
// Возвращаемое значение:
// 	Строка - Сформированное описание ошибки.
// 
Функция ОписаниеИсключительнойОшибки(ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "") Экспорт
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	ТекстСообщения = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:")
		+ " " + ТекстНачалаСообщения
		+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
		+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
		
	Возврат ТекстСообщения;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по URL.
// 
// Параметры:
// 	АдресСайта - Строка, URL
// 	НастройкиПодключения - Структура настроек подключения к сайту
// 	ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
// 	Булево - ИСТИНА, если успех.
// 
Функция РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки)
	
	АдресСайта = СокрЛП(НастройкиПодключения.АдресСайта); 
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = ЛОЖЬ;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = ИСТИНА;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не удалось получить номер порта") + ":"
					+ " " + ПортСтрока + Символы.ПС
					+ ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте правильность ввода адреса сайта.")));
				
			Возврат ЛОЖЬ;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	Если АдресСкрипта = "" Тогда
		АдресСкрипта = "bitrix/admin/1c_exchange.php";
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат ИСТИНА;
	
КонецФункции

// К существующему описанию добавляет текст
// 
Процедура ДобавитьОписаниеОшибки(Описание, Дополнение) Экспорт

	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗафиксироватьЗавершениеВыгрузкиНоменклатуры(СтрокаТаблицыИнформации, Результат, ТекстЗавершения)
	
	ДатаОкончания = ТекущаяДата();
	
	СтрокаТаблицыИнформации.Описание = СтрокаТаблицыИнформации.Описание + Символы.ПС
		+ ДатаОкончания + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТекстЗавершения);
		
	СтрокаТаблицыИнформации.РезультатВыполненияОбмена = Результат;
	СтрокаТаблицыИнформации.ДатаОкончания = ДатаОкончания;
	
КонецПроцедуры


Функция НоменклатураУзла(Узел, КоличествоЭлементов, НомерСообщения = Неопределено)
 
 ИмяСправочникаНоменклатура = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
 
 Запрос = Новый Запрос;
 Запрос.Текст = 
 "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "Первые "+ Формат(КоличествоЭлементов, "ЧГ=0"))+
 "
 | Т.Ссылка КАК Номенклатура
 |ИЗ
 | Справочник."+ИмяСправочникаНоменклатура+".Изменения КАК Т
 |ГДЕ
 | Т.Узел = &Узел 
 | И Выбор Когда &НомерСообщения = &Неопределено Тогда ИСТИНА
 |  Иначе Т.НомерСообщения = &НомерСообщения
 | Конец";
 
 Запрос.УстановитьПараметр("Узел", Узел);
 Запрос.УстановитьПараметр("Неопределено", Неопределено);
 Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
 Результат = Запрос.Выполнить();
 
 Возврат Результат.Выгрузить().ВыгрузитьКолонку("Номенклатура");
 
КонецФункции

Функция НоменклатураНомерСообщенияУзла(УзелОбмена, КоличествоЭлементов)
 
 ИмяСправочникаНоменклатура = ОбменССайтомПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
 
 Запрос = Новый Запрос;
 Запрос.Текст = 
 "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0,"", "Первые "+ Формат(КоличествоЭлементов, "ЧГ=0"))+
 "
 | Т.Ссылка КАК Номенклатура,
 | Т.НомерСообщения КАК НомерСообщения
 |ИЗ
 | Справочник."+ИмяСправочникаНоменклатура+".Изменения КАК Т
 |ГДЕ
 | Т.Узел = &Узел
 |УПОРЯДОЧИТЬ ПО
 | НомерСообщения";
 
 Запрос.УстановитьПараметр("Узел", УзелОбмена);
 Результат = Запрос.Выполнить();
 
 Возврат Результат.Выгрузить();

 
КонецФункции

Функция ЗаказНомерСообщенияУзла(УзелОбмена, КоличествоЭлементов)
 
 ИмяДокументаЗаказы = ОбменССайтомПовтИсп.ИмяПрикладногоДокумента("ЗаказПокупателя");
 
 Запрос = Новый Запрос;
 Запрос.Текст = 
 "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0, "", "Первые " + Формат(КоличествоЭлементов, "ЧГ=0"))+
 "
 | Т.Ссылка КАК Заказ,
 | Т.НомерСообщения КАК НомерСообщения
 |ИЗ
 | Документ."+ИмяДокументаЗаказы+".Изменения КАК Т
 |ГДЕ
 | Т.Узел = &Узел
 |УПОРЯДОЧИТЬ ПО
 | НомерСообщения";
 
 Запрос.УстановитьПараметр("Узел", УзелОбмена);
 Результат = Запрос.Выполнить();
 
 Возврат Результат.Выгрузить();
 
КонецФункции

Функция ЗаказыУзла(Узел, КоличествоЭлементов, НомерСообщения = Неопределено)
 
 ИмяДокументаЗаказы = ОбменССайтомПовтИсп.ИмяПрикладногоДокумента("ЗаказПокупателя");
 
 Запрос = Новый Запрос;
 Запрос.Текст = 
 "ВЫБРАТЬ " + ?(КоличествоЭлементов = 0, "", "Первые " + Формат(КоличествоЭлементов, "ЧГ=0"))+
 "
 | Т.Ссылка КАК Заказ
 |ИЗ
 | Документ."+ИмяДокументаЗаказы+".Изменения КАК Т
 |ГДЕ
 | Т.Узел = &Узел 
 | И Выбор Когда &НомерСообщения = &Неопределено Тогда ИСТИНА
 |  Иначе Т.НомерСообщения = &НомерСообщения
 | Конец";
 Запрос.УстановитьПараметр("Узел", Узел);
 Запрос.УстановитьПараметр("Неопределено", Неопределено);
 Запрос.УстановитьПараметр("НомерСообщения", НомерСообщения);
 Результат = Запрос.Выполнить();
 
 Возврат Результат.Выгрузить().ВыгрузитьКолонку("Заказ");

 
КонецФункции
