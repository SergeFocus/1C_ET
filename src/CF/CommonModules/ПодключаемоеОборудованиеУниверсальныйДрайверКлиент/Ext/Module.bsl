// sza150602-1226                                             
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция осуществляет подключение устройства.
// 
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", Неопределено);
	
	ТипОборудования = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
		Исключение
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	  
	Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
		
	Если НЕ Ответ Тогда
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		Если ТипОборудования = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудования = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(ПараметрыПодключения.ИДУстройства);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
		ИначеЕсли ТипОборудования = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(ПараметрыПодключения.ИДУстройства);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
// 
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
// 
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
// 
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ИСТИНА;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
// 
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = ИСТИНА;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                         СтрокаТекста, ВыходныеПараметры);
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры);
		
	ИначеЕсли Команда = "PrintBarCode" ИЛИ Команда = "ПечатьШтрихкода" Тогда
		ТипШтрихКода = ВходныеПараметры[0];
		ШтрихКод     = ВходныеПараметры[1];
		Результат = ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры);
		
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		                                      
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭКВАЙРИНГОВЫМИ ТЕРМИНАЛАМИ
	
	// Функция возвращает, будет ли печать слип чеков на терминале
	ИначеЕсли Команда = "PrintSlipOnTerminal" ИЛИ Команда = "ПечатьКвитанцийНаТерминале" Тогда
		Результат = ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Оплата платежной картой
	ИначеЕсли Команда = "AuthorizeSales" ИЛИ Команда = "ОплатитьПлатежнойКартой" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                            Сумма,  НомерКарты, НомерЧека, ВыходныеПараметры);
	// Возврат платежа
	ИначеЕсли Команда = "AuthorizeRefund" ИЛИ Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                          Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Отмена платежа
	ИначеЕсли Команда = "AuthorizeVoid" ИЛИ Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	// Сверка итогов по картам
	ИначеЕсли Команда = "Settlement" ИЛИ Команда = "ИтогиДняПоКартам" Тогда
		Результат = ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Аварийная отмена платежа
	ИначеЕсли Команда = "EmergencyVoid" ИЛИ Команда = "АварийнаяОтменаОперации" Тогда
		Сумма          = ВходныеПараметры[0];
		СсылочныйНомер = ВходныеПараметры[1];
		НомерЧека      = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                    Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		
	// Преавторизация платежа
	ИначеЕсли Команда = "AuthorizePreSales" ИЛИ Команда = "ПреавторизацияПоПлатежнойКарте" Тогда
		Сумма      = ВходныеПараметры[0];
		НомерКарты = ВходныеПараметры[1];
		НомерЧека  = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		Результат = ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                           Сумма, НомерКарты, НомерЧека, ВыходныеПараметры);
		
	// Отмена преавторизации платежа
	ИначеЕсли Команда = "AuthorizeVoidPreSales" ИЛИ Команда = "ОтменитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                                   Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
	
	// Завершение преавторизации платежа
	ИначеЕсли Команда = "AuthorizeCompletion" ИЛИ Команда = "ЗавершитьПреавторизациюПоПлатежнойКарте" Тогда
		Сумма          = ВходныеПараметры[0];
		НомерКарты     = ВходныеПараметры[1];
		СсылочныйНомер = ?(ВходныеПараметры.Количество() > 2, ВходныеПараметры[2], "");
		НомерЧека      = ?(ВходныеПараметры.Количество() > 3, ВходныеПараметры[3], "");
		Результат = ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
															Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ТЕРМИНАЛАМИ СБОРА ДАННЫМИ
	
	// Выгрузка таблицы в терминал сбора данных
	ИначеЕсли Команда =  "UploadDirectory" ИЛИ Команда = "ВыгрузитьТаблицу" Тогда
		ТаблицаВыгрузки = ВходныеПараметры[1];
		Результат = ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                             ТаблицаВыгрузки, ВыходныеПараметры);
	// Загрузка таблицы из терминала сбора данных
	ИначеЕсли Команда = "DownloadDocument" ИЛИ Команда = "ЗагрузитьТаблицу" Тогда
		Результат = ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Очищает загруженную ранее таблицу в терминале сбора данных
	ИначеЕсли Команда = "ClearTable" ИЛИ Команда = "ОчиститьТаблицу" Тогда
		Результат = ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ДИСПЛЕЯМИ ПОКУПАТЕЛЯ
	
	// Вывод строк на дисплей
	ИначеЕсли Команда = "DisplayText" ИЛИ Команда = "ВывестиСтрокуНаДисплейПокупателя" Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Очистка дисплея
	ИначеЕсли Команда = "ClearText" ИЛИ Команда = "ОчиститьДисплейПокупателя" Тогда
		Результат = ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры вывода
	ИначеЕсли Команда = "GetOutputOptions" ИЛИ Команда = "ПолучитьПараметрыВывода" Тогда
		Результат = ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ЭЛЕКТРОННЫМИ ВЕСАМИ
	
	// Получить вес 
	ИначеЕсли Команда = "GetWeight" ИЛИ Команда = "ПолучитьВес" Тогда
		Результат = ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Установить вес тары 
	ИначеЕсли Команда = "Calibrate" ИЛИ Команда = "Тарировать" Тогда
		ВесТары = ?(ТипЗнч(ВходныеПараметры) = Тип("Массив") И ВходныеПараметры.Количество() > 0, ВходныеПараметры[0], Неопределено);
		Результат = Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ВЕСАМИ C ПЕЧАТЬЮ ЭТИКЕТОК

	// Выгрузка товаров в весы с печатью этикеток
	ИначеЕсли Команда = "UploadGoods" ИЛИ Команда = "ВыгрузитьТовары" Тогда
		ТаблицаВыгрузки   = ВходныеПараметры[0];
		ЧастичнаяВыгрузка = ВходныеПараметры[1];
		Результат = ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры);

	// Очистить базу весов с печатью этикеток
	ИначеЕсли Команда = "ClearBase" ИЛИ Команда = "ОчиститьБазу" Тогда
		Результат = ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);

	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = ЛОЖЬ;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с устройствами ввода данных

// Функция осуществляет обработку внешних событий подключаемого оборудования
// 
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Если Событие = "Штрихкод" Тогда
		
		Штрихкод = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("ScanData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(Штрихкод);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(Штрихкод);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = ИСТИНА;
		
	ИначеЕсли Событие = "ДанныеКарты" Тогда
		
		ДанныеКарты = СокрЛП(Данные);
		ВыходныеПараметры.Добавить("TracksData");
		ВыходныеПараметры.Добавить(Новый Массив());
		ВыходныеПараметры[1].Добавить(ДанныеКарты);
		ВыходныеПараметры[1].Добавить(Новый Массив());
		ВыходныеПараметры[1][1].Добавить(Данные);
		ВыходныеПараметры[1][1].Добавить(ДанныеКарты);
		ВыходныеПараметры[1][1].Добавить(0);
		Результат = ИСТИНА;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с фискальными регистраторами

// Функция осуществляет открытие смены
// 
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	Возврат Результат;
	
КонецФункции

// Осуществляет печать фискального чека
// 
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	       
	Возврат МенеджерОборудованияКлиентПереопределяемый.ПечатьЧека(ПодключаемоеОборудованиеУниверсальныйДрайверКлиент,
		ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
КонецФункции

// Осуществляет печать текста
// 
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                       СтрокаТекста, ВыходныеПараметры)
	   
	Результат  = ИСТИНА;  
	
	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЛОЖЬ, ЛОЖЬ, ВыходныеПараметры);
	
	// Печатаем строки чека
	Если Результат Тогда
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
			 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				ТаблицаОплат = Новый Массив();
				Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
				Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЛОЖЬ, ЛОЖЬ, ВыходныеПараметры);
			Иначе
				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
				                                     ВыделеннаяСтрока, ВыходныеПараметры) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Закрываем чек
	Если Результат Тогда
		ТаблицаОплат = Новый Массив();
		Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие нового чека
// 
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт
	
	Результат  = ИСТИНА;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ЧекВозврата,  ИСТИНА, НомерЧека, НомерСмены);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(0); // Номер документа
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОткрытьЧек>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие ранее открытого чека
// 
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = ИСТИНА;
	
	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	
	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства,
	                                      СуммаНаличнойОплаты, СуммаБезналичнойОплаты1, СуммаБезналичнойОплаты2, СуммаБезналичнойОплаты3);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ЗакрытьЧек>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
// 
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = ИСТИНА;
	
	Попытка
		ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОтменитьЧек>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;   
	
КонецФункции

// Функция осуществляет снятие отчета без гашения 
// 
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьОтчетБезГашения>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет снятие отчета с гашением 
// 
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьОтчетСГашением>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать фискальной строки 
// 
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьФискСтроку>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать нефискальной строки 
// 
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьНефискСтроку>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы 
// 
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства,
	                           ?(ТипИнкассации = 1, Сумма, -Сумма));
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать штрихкода 
// 
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьШтрихКод(ПараметрыПодключения.ИДУстройства, ТипШтрихКода, ШтрихКод);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.НапечататьШтрихКод>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие денежного ящика
// 
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОткрытьДенежныйЯщик>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	ШиринаСтроки = 0;
	 
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ПолучитьШиринуСтроки>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с эквайринговыми терминалами

// Функция возвращает, будет ли печать слип чеков на терминале
// 
Функция ПечатьКвитанцийНаТерминале(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.ПечатьКвитанцийНаТерминале();
		ВыходныеПараметры.Очистить();  
		ВыходныеПараметры.Добавить(Ответ);
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ПечатьКвитанцийНаТерминале>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет сверку итогов по картам.
// 
Функция ИтогиДняПоКартам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;
	Ответ     = ЛОЖЬ;
	СлипЧек   = "";

	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Сверка итогов'");

	Попытка
		Ответ = ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ИтогиДняПоКартам>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет авторизацию/оплату по карте.
// 
Функция ОплатитьПлатежнойКартой(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)

	Результат      = ИСТИНА;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Оплатить'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = ЛОЖЬ;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОплатитьПлатежнойКартой(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = ЛОЖЬ;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОплатитьПлатежнойКартой>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет возврат платежа по карте.
// 
Функция ВернутьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = ИСТИНА;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Вернуть платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = ЛОЖЬ;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = ЛОЖЬ;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ВернутьПлатежПоПлатежнойКарте>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену платежа по карте.
// 
Функция ОтменитьПлатежПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                      Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	  
	Результат      = ИСТИНА;
	КодRRN         = СсылочныйНомер;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	НомерКарты     = "";

	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = ЛОЖЬ;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = ЛОЖЬ;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОтменитьПлатежПоПлатежнойКарте>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет аварийную отмену операции по карте.
// 
Функция АварийнаяОтменаОперации(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                Сумма, СсылочныйНомер, НомерЧека, ВыходныеПараметры)

	Ответ = ЛОЖЬ;
	Результат = ИСТИНА;

	Попытка
		Ответ = ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.АварийнаяОтменаОперации>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет преавторизацию по карте.
// 
Функция ПреавторизоватьПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                        Сумма, НомерКарты, НомерЧека, ВыходныеПараметры)
	Результат      = ИСТИНА;
	КодRRN         = Неопределено;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Преавторизовать платеж'");
	
	Если НЕ (Сумма > 0) Тогда
		Результат = ЛОЖЬ;
		ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не корректная сумма операции.'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Ответ = ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, КодRRN, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(КодRRN);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[3].Добавить("СлипЧек");
			ВыходныеПараметры[3].Добавить(СлипЧек);
			ВыходныеПараметры.Добавить(КодАвторизации);
		Иначе
			Результат = ЛОЖЬ;
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ПреавторизацияПоПлатежнойКарте>." + Символы.ПС + ТекстОписаниеОшибки);
	 КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену преавторизации по карте.
// 
Функция ОтменитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                               Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = ИСТИНА;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отменить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = ЛОЖЬ; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОтменитьПреавторизациюПоПлатежнойКарте>." + Символы.ПС + ТекстОписаниеОшибки);
	 КонецПопытки;
	 
	 Возврат Результат;
	 
 КонецФункции

// Функция осуществляет завершение преавторизации по карте.
// 
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                                Сумма, НомерКарты, СсылочныйНомер, НомерЧека, ВыходныеПараметры)
	Результат      = ИСТИНА;
	КодАвторизации = Неопределено;
	СлипЧек        = "";
	
	ПараметрыПодключения.ТипТранзакции = НСтр("ru='Завершить преавторизацию'");
	
	Попытка
		Ответ = ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте(ПараметрыПодключения.ИДУстройства, НомерКарты, Сумма, 
													НомерЧека, СсылочныйНомер, КодАвторизации, СлипЧек);
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[0].Добавить("СлипЧек");
			ВыходныеПараметры[0].Добавить(СлипЧек);
		Иначе
			Результат = ЛОЖЬ; 
			ПараметрыПодключения.ТипТранзакции = НСтр("ru='Отказ'");
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ЗавершитьПреавторизациюПоПлатежнойКарте>." + Символы.ПС + ТекстОписаниеОшибки);
	 КонецПопытки;
	 
	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с терминалами сбора данными

// Функция осуществляет выгрузку данных в терминал сбора данных.
// 
Функция ВыгрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ВыходныеПараметры)

	Результат = ИСТИНА;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	РазмерПакета     = 100;
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";
	
	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);
	
	МассивТоваров = Новый Массив;



	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл
		
		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;
		
		СтрокаМассиваТСД = Новый СписокЗначений; 
		СтрокаМассиваТСД.Добавить(Позиция[0].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[1].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[2].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[3].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[4].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[5].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[6].Значение);
		СтрокаМассиваТСД.Добавить(Позиция[7].Значение);
		МассивТоваров.Добавить(СтрокаМассиваТСД);
		
		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;
		
		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  

			
			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровТСД(МассивТоваров);
			
			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;
			
			Ответ = ОбъектДрайвера.ВыгрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = ЛОЖЬ;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;
			
			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;
			
			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));
			 
		 КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет загрузку таблицы из терминала сбора данных.
// 
Функция ЗагрузитьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;
	ДанныеЗагрузки = "";
	Состояние(НСтр("ru='Загрузка данных...'"));
	
	Попытка
		
		Ответ = ОбъектДрайвера.ЗагрузитьТаблицу(ПараметрыПодключения.ИДУстройства, ДанныеЗагрузки);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			Возврат Результат;
		КонецЕсли;      
		
		Если НЕ ПустаяСтрока(ДанныеЗагрузки) Тогда
			МассивДанных = МенеджерОборудованияВызовСервера.ПолучитьТаблицуТоваровТСД(ДанныеЗагрузки);
		КонецЕсли;
	
		Если ПустаяСтрока(ДанныеЗагрузки) Или (МассивДанных.Количество() = 0) Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для загрузки.'"));
		Иначе
			ВыходныеПараметры.Добавить(МассивДанных);
		КонецЕсли;   
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") +" <ОбъектДрайвера.ЗагрузитьТаблицу>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Очищает загруженную ранее таблицу товаров в ТСД
// 
Функция ОчиститьТаблицу(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Состояние(НСтр("ru='Выполнение операции...'"));	
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТаблицу(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОчиститьТаблицу>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с дисплеями покупателя

// Функция осуществляет вывод списка строк на дисплей покупателя.
// 
Функция ВывестиСтрокуНаДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаТекста, 1));
	МассивСтрок.Добавить(СтрПолучитьСтроку(СтрокаТекста, 2));
	
	Попытка
		Ответ = ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя(ПараметрыПодключения.ИДУстройства, МассивСтрок);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ВывестиСтрокуНаДисплейПокупателя>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет очистку дисплея покупателя.
// 
Функция ОчиститьДисплейПокупателя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.ОчиститьДисплейПокупателя(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОчиститьДисплейПокупателя>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры вывода на дисплей покупателя)
// 
Функция ПолучитьПараметрыВывода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	СтолбцовНаДисплее = 20; 
	СтрокНаДисплее    = 2;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыВывода(ПараметрыПодключения.ИДУстройства, СтолбцовНаДисплее, СтрокНаДисплее);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(СтолбцовНаДисплее);
			ВыходныеПараметры.Добавить(СтрокНаДисплее);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ПолучитьПараметрыВывода>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с электронными весами

// Функция осуществляет получение веса груза, расположенного на весах
// 
Функция ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = ИСТИНА;
	Вес = 0;
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьВес(ПараметрыПодключения.ИДУстройства, Вес);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(Вес);
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ПолучитьВес>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет установку веса тары на весах
// 
Функция Тарировать(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ВесТары = 0)
	
	Результат = ИСТИНА;
	
	Попытка
		Ответ = ОбъектДрайвера.УстановитьВесТары(ПараметрыПодключения.ИДУстройства, ВесТары);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.Тарировать>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /
// Процедуры и функции общие для работы с весами c печатью этикеток

// Функция осуществляет очистre базs товаров в весах с печатью этикеток
// 
Функция ОчиститьТоварыВВесах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	Попытка
		Ответ = ОбъектДрайвера.ОчиститьТовары(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ОчиститьТовары>." +  ТекстОписаниеОшибки);
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция осуществляет выгрузку данных в весы с печатью этикеток.
// 
Функция ВыгрузитьТовары(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаВыгрузки, ЧастичнаяВыгрузка, ВыходныеПараметры)

	Результат = ИСТИНА;

	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Нет данных для выгрузки.'"));
		Возврат ЛОЖЬ;
	КонецЕсли;

	РазмерПакета     = 100;
	ТекущийПакет     = 1;
	ЗаписьВПакете    = 0;
	ЗаписейВыгружено = 0;
	ЗаписейВсего     = ТаблицаВыгрузки.Количество();
	СтатусПакета     = "first";

	ТекущийПроцент = 0;
	Состояние(НСтр("ru='Инициализация выгрузки...'"), Окр(ТекущийПроцент));
	ПроцентИнкремент = 100 / (ЗаписейВсего / РазмерПакета);

	МассивТоваров = Новый Массив;

	Для Каждого Позиция Из ТаблицаВыгрузки  Цикл

		Если ЗаписьВПакете = 0 Тогда
		    МассивТоваров.Очистить();
		КонецЕсли;

		ВремНаименование = ?(Позиция.Свойство("Номенклатура"), Позиция.Номенклатура, "");
		ВремНаименование = ?(Позиция.Свойство("Наименование"), Позиция.Наименование, ВремНаименование);
		ВремНаименование = ?(Позиция.Свойство("НаименованиеПолное"), Позиция.НаименованиеПолное, ВремНаименование);

		СтрокаМассиваТоваров = Новый СписокЗначений; 
		СтрокаМассиваТоваров.Добавить(Позиция.PLU);
		СтрокаМассиваТоваров.Добавить(Позиция.Код);
		СтрокаМассиваТоваров.Добавить(ВремНаименование);
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("Цена"), Позиция.Цена, 0));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("ОписаниеТовара"), Позиция.ОписаниеТовара, ""));
		СтрокаМассиваТоваров.Добавить(?(Позиция.Свойство("СрокХранения"), Позиция.СрокХранения, 0));
		МассивТоваров.Добавить(СтрокаМассиваТоваров);

		ЗаписейВыгружено  = ЗаписейВыгружено + 1;
		ЗаписьВПакете = ЗаписьВПакете + 1;

		Если (ЗаписьВПакете = РазмерПакета) ИЛИ (ЗаписейВыгружено = ЗаписейВсего) Тогда  

			ДанныеДляВыгрузки = МенеджерОборудованияВызовСервера.СформироватьТаблицуТоваровВесыСПечатьюЭтикеток(МассивТоваров);

			Если (ЗаписейВыгружено = ЗаписейВсего) Тогда
				СтатусПакета = "last";
			ИначеЕсли (ТекущийПакет > 1) Тогда
				СтатусПакета = "regular";
			КонецЕсли;

			Ответ = ОбъектДрайвера.ВыгрузитьТовары(ПараметрыПодключения.ИДУстройства, ДанныеДляВыгрузки, СтатусПакета);
			Если НЕ Ответ Тогда
				Результат = ЛОЖЬ;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			КонецЕсли;

			ЗаписьВПакете = 0;
			ТекущийПакет = ТекущийПакет + 1;

			ТекущийПроцент = ТекущийПроцент + ПроцентИнкремент;
			Состояние(НСтр("ru='Выгрузка данных...'"), Окр(ТекущийПроцент));

		 КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// Процедуры и функции общие для всех типов драйверов

// Функция осуществляет тестирование устройства.
// 
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = ИСТИНА;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ТестУстройства>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства
// 
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = ИСТИНА;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = ЛОЖЬ;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
		
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		Результат = ЛОЖЬ;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка вызова метода") + " <ОбъектДрайвера.ВыполнитьДополнительноеДействие>." + Символы.ПС + ТекстОписаниеОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера
// 
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера
// 
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = ИСТИНА;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционнаяБиблиотека  = ИСТИНА;
	ОсновнойДрайверУстановлен = ЛОЖЬ;
	РевизияИнтерфейса         = 1012;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
		ВыходныеПараметры[1] = ВерсияДрайвера;

		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, 
										ОписаниеДрайвера, 
										ТипОборудования, 
										РевизияИнтерфейса, 
										ИнтеграционнаяБиблиотека, 
										ОсновнойДрайверУстановлен, 
										URLЗагрузкиДрайвера);
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционнаяБиблиотека;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		// Получаем дополнительные действия
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера'"));
	КонецПопытки;
	
	Возврат Результат;

КонецФункции
