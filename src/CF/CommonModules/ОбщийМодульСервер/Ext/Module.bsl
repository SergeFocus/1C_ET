// sza160402-0018 НаименованиеВариантаНастройки
// sza160303-0352 исправлен пересчет валют
// sza160228-2219
// sza160226-0103
// sza160203-1912
// sza151210-0228 про
// sza151210-0202
// sza151122-1944
// sza151116-0320
// sza151014-0039
// sza150728-0417
// sza150720-1858 регион
// sza150701-1643 фикс верс
// sza150521-0319
// sza150505-0304
// sza150331-1838
// sza150215-1355
// sza150204-1546
// sza150113-0512
// sza150109-0257 НЧ
// sza141225-2034
// sza141216-1557
// sza141128-0101
// sza141119-1823
// sza141118-1424 фикс записи сотр
// sza141114-2223
// sza141107-1722 фикс цен
// sza141101-2323 :
// sza141007-0042
// sza141004-1604 пополнение
// sza140904-0114
// sza140831-1106
// sza140829-2327
// sza140821-1952
// sza140730-1836 СредняяЦенаПриобретения
// sza140719-0037 Произвольный отчет
// sza140717-0303 детализировать отчет руководителю
// sza140710-2149
// sza140702-1128  проверка  новой версии раз в сутки
// sza140701-1629
// sza140624-1915
// sza130901-0132 :

Функция   ВосстановитьАктуальностьПоказателейВаловойПрибылиДокумента(Знач Ссылка, Знач СсылкаДата) Экспорт

	НеОтказ = ИСТИНА ;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Товары.Регистратор КАК Ссылка,
	|	Товары.Период КАК Период
	|ИЗ РегистрНакопления.Товары КАК Товары
	|ГДЕ Товары.Номенклатура В(&Номенклатура)
	|	И Товары.Период > &Дата
	|УПОРЯДОЧИТЬ ПО Период";
	Номенклатура = Ссылка.Товары.Выгрузить(, "Номенклатура");
	Запрос.УстановитьПараметр("Дата", СсылкаДата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДатаАктуальности = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
		ДокументыДляПерепроведения = Новый Массив;
		ТаблицаДокументовДляПерепроведения = Новый ТаблицаЗначений;
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Документ");
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Дата");
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
			Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
				ДокументыДляПерепроведения.Добавить(Регистратор);
				СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
				СтрокаДокумент.Документ = Регистратор;
				СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Период;
			КонецЕсли;

		КонецЦикла;

		Если НЕ ДокументыДляПерепроведения.Количество() = 0 Тогда
			ТаблицаДокументовДляПерепроведения.Сортировать("Дата Возр");
			Для Каждого СтрокаДокумент Из ТаблицаДокументовДляПерепроведения Цикл
				ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

			КонецЦикла;
		КонецЕсли;

		Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(ДатаАктуальности);
	КонецЕсли;

	Возврат НеОтказ;

КонецФункции // Восстановить Актуальность Показателей Валовой Прибыли

Функция   ВычислитьИтогДляТаблицы(Знач ТаблицаВычисления, Знач ФормулаВычисления) Экспорт

	РезультатВычислитьИтогДляТаблицы = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаВычисления Цикл
		ЗначениеВычисления = 0;
		Выполнить(" ЗначениеВычисления = " + ФормулаВычисления + "; ");
		РезультатВычислитьИтогДляТаблицы = РезультатВычислитьИтогДляТаблицы + ЗначениеВычисления;

	КонецЦикла;

	Возврат РезультатВычислитьИтогДляТаблицы;

КонецФункции //Вычислить Итог Для Таблицы

Функция   ВычислитьКоличествоУслугВПериоде(Знач Номенклатура, Знач ДатаНачалаОказанияУслуг, Знач ДатаОкончанияОказанияУслуг) Экспорт

	Если ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(Номенклатура.ПериодОказанияУслугиЗаВремя)
		И ЗначениеЗаполнено(ДатаНачалаОказанияУслуг)
		И ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг) Тогда

		Секунд = ДатаОкончанияОказанияУслуг - ДатаНачалаОказанияУслуг + 1;
		ПериодОказанияУслугиЗаВремя = Номенклатура.ПериодОказанияУслугиЗаВремя;
		Если ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСекунду Тогда
			Возврат Секунд;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаМинуту Тогда
			Возврат Секунд / 60;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаЧас Тогда
			Возврат Секунд / 3600;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
			Возврат Секунд / (24 * 3600);
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаМесяц Тогда
			Возврат Секунд / (2629843.2);
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаГод Тогда
			Возврат Секунд / (31558118.4);
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Процедура ДобавитьСобытиеЖурналаНаСервере(Знач ТекстСобытия, Знач ТипСобытия, Знач СсылкаНаОбъектБазыДанных = Неопределено) Экспорт

	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиЗаписьВЖурналВсехОбычныхДействий") Тогда
		ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
		ЖурналСобытий.Активность 	= ИСТИНА;
		ЖурналСобытий.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		ЖурналСобытий.Период 		= ТекущаяДатаСеанса();

		Если ТипСобытия = 0 Тогда // открытие формы
			ТекстСобытия = ОбщийМодульПовтор.ВычислитьИмяФормы(ТекстСобытия);
			ЖурналСобытий.Событие  = Перечисления.СобытияЖурнала.ОткрытиеФормы ;
			ЖурналСобытий.Описание = "" + ОбщийМодульПовтор.ПолучитьКрасивоеНаименованиеОбъекта(ТекстСобытия); // эти чаще повторяются
		ИначеЕсли ТипСобытия = 1 Тогда // закрытие формы
			ТекстСобытия = ОбщийМодульПовтор.ВычислитьИмяФормы(ТекстСобытия);
			ЖурналСобытий.Событие  = Перечисления.СобытияЖурнала.ЗакрытиеФормы ;
			ЖурналСобытий.Описание = "" + ОбщийМодульПовтор.ПолучитьКрасивоеНаименованиеОбъекта(ТекстСобытия); // эти чаще повторяются
		ИначеЕсли ТипСобытия = 2 Тогда // прочее. например, сменил значение константы
			ЖурналСобытий.Событие  = Перечисления.СобытияЖурнала.ВыполнилОбработкуДанных;
			ЖурналСобытий.Описание = "" + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ТекстСобытия);
		ИначеЕсли ТипСобытия = 3 Тогда // сообщение пользователю от системы
			ЖурналСобытий.Событие  = Перечисления.СобытияЖурнала.ПринялСообщениеСистемы;
			ЖурналСобытий.Описание = "" + ТекстСобытия;
		КонецЕсли;

		Попытка
			Если ЗначениеЗаполнено(СсылкаНаОбъектБазыДанных) Тогда
				ЖурналСобытий.СсылкаНаОбъект = СсылкаНаОбъектБазыДанных;
			КонецЕсли;
		Исключение
		КонецПопытки;

		Попытка // записи в регистр сведений
			ЖурналСобытий.Записать(ИСТИНА);
		Исключение // записи в регистр сведений
			ТекстОписаниеОшибки = ОписаниеОшибки();

			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ТекстОписаниеОшибки, , СсылкаНаОбъектБазыДанных, , , ИСТИНА);
			КонецЕсли;
		КонецПопытки; // записи в регистр сведений
	КонецЕсли;

КонецПроцедуры

Функция   ДобавитьШапкуОрганизации(ДокументДляПечати, Знач Организация, Знач ЯзыкДокументов = Неопределено) Экспорт

	Если ОбщийМодульПовтор.ПолнаяВерсияКонфигурации() Тогда
		МакетОрганизации = Неопределено;
		Выполнить(" МакетОрганизации = Справочники.Организации.ПолучитьМакет(""ШапкаДокументов""); ");
		Если НЕ МакетОрганизации = Неопределено Тогда
			МакетОрганизации.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(, ЯзыкДокументов, ИСТИНА);
			ШапкаОрганизации = МакетОрганизации.ПолучитьОбласть("Ш");
			ШапкаОрганизации.Параметры.НаименованиеДляПечати = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов);
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ШапкаОрганизации);
			ДокументДляПечати.Вывести(ШапкаОрганизации);

			Если ЗначениеЗаполнено(Организация)
				И (НЕ ПустаяСтрока(Организация.Адрес)
				ИЛИ НЕ ПустаяСтрока(Организация.ЮридическийАдрес)) Тогда

				ОбластьАдрес = МакетОрганизации.ПолучитьОбласть("Адрес");
				ВыборкаАдрес = СокрЛП(Организация.адрес);
				Если Найти(ВыборкаАдрес, "" + СокрЛП(Организация.регион)) = 0 Тогда
					Адрес = "" + СокрЛП(Организация.Регион) + ?(ЗначениеЗаполнено(Организация.Локация), ", " + СокрЛП(Организация.Локация), "") + ", " + ВыборкаАдрес;
				Иначе
					Адрес = ВыборкаАдрес;
				КонецЕсли;

				Если НЕ ПустаяСтрока(Организация.ЮридическийАдрес)
					И НЕ ВыборкаАдрес = СокрЛП(Организация.ЮридическийАдрес) Тогда

					// Адрес = Адрес + ", " + Организация.ЮридическийАдрес;
					Адрес = Организация.ЮридическийАдрес;
				КонецЕсли;

				ОбластьАдрес.Параметры.РегионАдрес = Адрес;
				ОбластьАдрес.Параметры.Регион = Организация.Регион;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьАдрес);
				ДокументДляПечати.Вывести(ОбластьАдрес);
			КонецЕсли;

			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");

			Если НЕ ПустаяСтрока(Организация.Телефон) Тогда
				ОбластьТелефон.Параметры.Телефон = Организация.Телефон;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТелефон);
				ДокументДляПечати.Вывести(ОбластьТелефон);
			КонецЕсли;

			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон1"); // без заголовка

			Если НЕ ПустаяСтрока(Организация.Телефон2) Тогда
				ОбластьТелефон.Параметры.Телефон = Организация.Телефон2;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТелефон);
				ДокументДляПечати.Вывести(ОбластьТелефон);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.Телефон3) Тогда
				ОбластьТелефон.Параметры.Телефон = Организация.Телефон3;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТелефон);
				ДокументДляПечати.Вывести(ОбластьТелефон);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.Телефон4) Тогда
				ОбластьТелефон.Параметры.Телефон = Организация.Телефон4;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТелефон);
				ДокументДляПечати.Вывести(ОбластьТелефон);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.Телефон5) Тогда
				ОбластьТелефон.Параметры.Телефон = Организация.Телефон5;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьТелефон);
				ДокументДляПечати.Вывести(ОбластьТелефон);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.ЭлектроннаяПочта) Тогда
				ОбластьЭлектроннаяПочта = МакетОрганизации.ПолучитьОбласть("ЭлектроннаяПочта");
				ОбластьЭлектроннаяПочта.Параметры.ЭлектроннаяПочта = Организация.ЭлектроннаяПочта;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЭлектроннаяПочта);
				ДокументДляПечати.Вывести(ОбластьЭлектроннаяПочта);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.ОКПО) Тогда
				ОбластьОКПО = МакетОрганизации.ПолучитьОбласть("ОКПО");
				ОбластьОКПО.Параметры.ОКПО = Организация.ОКПО;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьОКПО);
				ДокументДляПечати.Вывести(ОбластьОКПО);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.ИНН) Тогда
				ОбластьИНН = МакетОрганизации.ПолучитьОбласть("ИНН");
				ОбластьИНН.Параметры.ИНН = Организация.ИНН;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьИНН);
				ДокументДляПечати.Вывести(ОбластьИНН);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.МФО) Тогда
				ОбластьМФО = МакетОрганизации.ПолучитьОбласть("МФО");
				ОбластьМФО.Параметры.МФО = Организация.МФО;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьМФО);
				ДокументДляПечати.Вывести(ОбластьМФО);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.НаименованиеБанка) Тогда
				ОбластьНаименованиеБанка = МакетОрганизации.ПолучитьОбласть("НаименованиеБанка");
				ОбластьНаименованиеБанка.Параметры.НаименованиеБанка = Организация.НаименованиеБанка;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьНаименованиеБанка);
				ДокументДляПечати.Вывести(ОбластьНаименованиеБанка);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.НомерСчета) Тогда
				ОбластьНомерСчета = МакетОрганизации.ПолучитьОбласть("НомерСчета");
				ОбластьНомерСчета.Параметры.НомерСчета = Организация.НомерСчета;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьНомерСчета);
				ДокументДляПечати.Вывести(ОбластьНомерСчета);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Организация.КорреспондентскийСчет) Тогда
				ОбластьНомерСчета = МакетОрганизации.ПолучитьОбласть("КорреспондентскийСчет");
				ОбластьНомерСчета.Параметры.КорреспондентскийСчет = Организация.КорреспондентскийСчет;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьНомерСчета);
				ДокументДляПечати.Вывести(ОбластьНомерСчета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ИСТИНА;

КонецФункции

Функция   ЕдиницаПринадлежитНоменклатуре(Знач Номенклатура, Знач ЕдиницаИзмерения) Экспорт
	Возврат ЕдиницаИзмерения.Владелец = Номенклатура;
КонецФункции

Функция   ЕстьНоваяВерсияКонфигурацииЭТ(Знач ПроверитьВЛюбомСлучае = ЛОЖЬ) Экспорт

	СтруктураРезультата = Новый Структура("ВерсияНаСайте", "");
	СтруктураРезультата.Вставить("ПолныйТекстВерсии", "");

	Если ПроверитьВЛюбомСлучае
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске")
		И НЕ НачалоДня(Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Получить()) = НачалоДня(ТекущаяДата())) Тогда

		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		Попытка
			ТекущаяВерсия 		= Число(стрзаменить(СокрЛП(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПрограммы")), "F", ""));
			ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
			// подключение к серверу ФТП на сайте автора только для проверки наличия новой версии конфигурации
			ФТПСоединение = Новый FTPСоединение("85.238.97.60", 2121, "etest", "etest", , ИСТИНА, 7);
			ФТПСоединение.Получить("\ET_cur_ver.txt", ИмяВременногоФайла);
			ФТПСоединение = Неопределено;
			ЧтениеФайла   = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
			ВерсияНаСайте = Число(ЧтениеФайла.ПрочитатьСтроку());
			ПолныйТекстВерсии = "";
			ТекстКВерсии  = ЧтениеФайла.ПрочитатьСтроку();

			Пока Не ТекстКВерсии = Неопределено Цикл
				ПолныйТекстВерсии = ПолныйТекстВерсии + ТекстКВерсии + Символы.ПС;
				ТекстКВерсии  = ЧтениеФайла.ПрочитатьСтроку();
			КонецЦикла;

			ЧтениеФайла.Закрыть();

			Если ВерсияНаСайте > ТекущаяВерсия Тогда
				СтруктураРезультата.ВерсияНаСайте = формат(ВерсияНаСайте, "ЧГ=0");
				СтруктураРезультата.ПолныйТекстВерсии = ПолныйТекстВерсии;

				Возврат СтруктураРезультата;
			Иначе
				Возврат СтруктураРезультата;
			КонецЕсли;

		Исключение
			Возврат неопределено;
		КонецПопытки;
	Иначе
		Возврат СтруктураРезультата;
	КонецЕсли;

КонецФункции

Процедура ЗадатьНаименованияОбъектамНаДругомЯзыке(Знач НасильноВернутьРусский = ЛОЖЬ) Экспорт

	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	Если ЭлементСправочника.Наименование = "Основное предприятие" Тогда
		ЭлементСправочника = ЭлементСправочника.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
		ЭлементСправочника.Записать();
	КонецЕсли;

	ЭлементСправочника = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ГлавноеНаправление").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.ВалютаЦены   = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Клиенты.ФизическоеЛицо").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Спецификации.Архив").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных спецификаций для комплектации");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Клиенты.Архив").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных клиентов");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Договора.Архив").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных договоров");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Поставщики.ФизическоеЛицо").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Поставщики.Архив").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных поставщиков");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Склады.ТоварыВПути").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не используйте этот склад для поступлений и реализаций!");
	ЭлементСправочника.Виртуальный  = ИСТИНА;
	ЭлементСправочника.СДанногоСкладаПродаватьЗапрещено = ИСТИНА;
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ВидыСертификатов.ГигиеническоеЗаключениеОбыкновенное").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ВидыСертификатов.ИнформационноеПисьмо").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.ВидыСертификатов.СертификатОбыкновенный").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	СтатьиДвиженияДенег = Справочники.СтатьиДвиженияДенег.Выбрать();

	Пока СтатьиДвиженияДенег.Следующий() Цикл
		ЭлементСправочника = СтатьиДвиженияДенег.ПолучитьОбъект();
		ЭлементСправочника.Наименование = "" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
		ЭлементСправочника.Записать();
	КонецЦикла;

	ФормулыОписания = Справочники.ФормулыОписания.Выбрать();
	Пока ФормулыОписания.Следующий() Цикл
		ЭлементСправочника = ФормулыОписания.ПолучитьОбъект();
		ЭлементСправочника.Наименование = "" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
		ЭлементСправочника.Записать();
	КонецЦикла;

	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Регионы.НашРегион").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Номенклатура.Архив").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальной Номенклатуры");
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Номенклатура.ТоварНаСумму").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Номенклатура.УслугиНаСумму").ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование, , НасильноВернутьРусский);
	ЭлементСправочника.Записать();
	ПолеШаблона = Справочники.ПодсистемаИЭПоля.Выбрать();

	Пока ПолеШаблона.Следующий() Цикл
		// наименование нельзя! Потому что оно - автореквизит. Следует Сменить для представления
		// Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ПолеШаблона.Наименование, , НасильноВернутьРусский);
		Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ПолеШаблона.Комментарий);

		Если НЕ Комментарий = ПолеШаблона.Комментарий Тогда
			ПолеШаблонаОбъект = ПолеШаблона.ПолучитьОбъект();
			ПолеШаблонаОбъект.Комментарий = Комментарий;
			ПолеШаблонаОбъект.Записать();
		КонецЕсли;

	КонецЦикла; // Выборка спр ПолеШаблона

	ВерсияПлатформы = ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы();

	Если ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы(ИСТИНА) < 803020000
		ИЛИ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803020000 Тогда // не поддерживается свое представление

		ВидХарактеристик = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();

		Пока ВидХарактеристик.Следующий() Цикл
			ОбъектХарактеристика = ВидХарактеристик.ПолучитьОбъект();
			ОбъектХарактеристика.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидХарактеристик.Наименование, , НасильноВернутьРусский);
			ОбъектХарактеристика.Записать();
		КонецЦикла;
	КонецЕсли;

	ДополнительныйРеквизитСправочникаКлиентов = Неопределено;

	Для Счетчик = 1 по 10 Цикл
		Выполнить(" ДополнительныйРеквизитСправочникаКлиентов = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");

		ДополнительныйРеквизитСправочникаКлиентов.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный реквизит справочника Клиентов", , НасильноВернутьРусский) + " №" + СокрЛП(Счетчик);
		ДополнительныйРеквизитСправочникаКлиентов.НаименованиеОбъектаВладельца = ДополнительныйРеквизитСправочникаКлиентов.Комментарий;
		ДополнительныйРеквизитСправочникаКлиентов.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляКарточкиСправочникаКлиенты;
		ДополнительныйРеквизитСправочникаКлиентов.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗадатьПереченьОбъектовБазыДанных(СписокВыбора) Экспорт
	ОбщийМодульСервер.СформироватьПереченьОбъектовБазыДанных(ИСТИНА, СписокВыбора);
КонецПроцедуры

Функция   ЗапросКСерверуПриНачалеРаботы() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ПолнаяВерсия", ОбщийМодульПовтор.ПолнаяВерсияКонфигурации());
	Результат.Вставить("МассоваяЗагрузка", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МассоваяЗагрузка"));
	Результат.Вставить("ЗаголовокОкна", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстЗаголовкаОкнаПрограммы"));
	Результат.Вставить("ДобавлятьИмяПользователяВЗаголовокОкна", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДобавлятьИмяПользователяВЗаголовокОкна"));
	Результат.Вставить("ПервыйЗапуск", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗаконченаПервоначальнаяНастройка"));

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют") Тогда
		Результат.Вставить("ВалютаКурса", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВывестиТекущийКурсВЗаголовке"));
		Результат.Вставить("ЗапрашиватьКурсы", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьОкноВводаКурсовВалютКаждыйДеньПриЗапускеПрограммы") И ОбщийМодульСервер.НетСегодняКурса());
		Результат.Вставить("ТекущийКурс", ОбщийМодульСервер.ПолучитьТекущийКурс(Результат.ВалютаКурса, ТекущаяДата(), ЛОЖЬ));
	Иначе
		Результат.Вставить("ВалютаКурса", Неопределено);
		Результат.Вставить("ЗапрашиватьКурсы", ЛОЖЬ);
		Результат.Вставить("ТекущийКурс", 0);
	КонецЕсли;

	Результат.Вставить("ПоказыватьПриСтартеСписокКлиентовУКоторыхСегодняЗавтраПослезавтраДеньРождения", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоказыватьПриСтартеСписокКлиентовУКоторыхСегодняЗавтраПослезавтраДеньРождения"));

	Возврат Результат;

КонецФункции

Процедура ЗарегистрироватьИзмененияОбъекта(Знач ОбъектБазыДанных, Знач ЭтоДокумент = ЛОЖЬ, Знач РежимЗаписи = Неопределено, Знач РежимПроведения = Неопределено, Знач ЭтоСправочник = ЛОЖЬ, Знач ЭтоРегистр = ЛОЖЬ) Экспорт

	Если ЭтоРегистр
		ИЛИ ЗначениеЗаполнено(ОбъектБазыДанных.Ссылка) Тогда // для существующих

		ДатаСобытия = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ИмяОбъекта 	= ОбъектБазыДанных.Метаданные().Имя;
		СтруктураВерсионирования = ОбщийМодульПовтор.ВыяснитьРежимВерсионирования(ИмяОбъекта, НачалоДня(ДатаСобытия), ЭтоДокумент);
		Если НЕ СтруктураВерсионирования.РежимВерсионирования = Перечисления.ВидыВерсионирования.НеВерсионировать Тогда
			Версионировать = ИСТИНА;

			Если СтруктураВерсионирования.РежимВерсионирования = Перечисления.ВидыВерсионирования.ТолькоПроведенные
				И ЭтоДокумент
				И НЕ РежимЗаписи = РежимЗаписиДокумента.Запись Тогда

				Версионировать = ЛОЖЬ;
			КонецЕсли;

			Если СтруктураВерсионирования.РежимВерсионирования = Перечисления.ВидыВерсионирования.ПриУсловии Тогда
				Попытка
					УсловиеВыполняется = ЛОЖЬ;
					Выполнить(" УсловиеВыполняется = " + СтруктураВерсионирования.ПрограммноеУсловие + "; ");
				Исключение
					ОписаниеОшибкиТекст = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка вычисления условия версионирования") + ": " + ОписаниеОшибкиТекст);
				КонецПопытки;
				Версионировать = УсловиеВыполняется;
			КонецЕсли;

			Если Версионировать Тогда
				ТаблицаИзменений = Новый ТаблицаЗначений;
				ТаблицаИзменений.Колонки.Добавить("ТаблицаОбъекта");
				ТаблицаИзменений.Колонки.Добавить("РеквизитОбъекта");
				ТаблицаИзменений.Колонки.Добавить("ПредыдущееЗначение");
				ТаблицаИзменений.Колонки.Добавить("НовоеЗначение");
				ТаблицаИзменений.Колонки.Добавить("Комментарий");

				Если ЭтоРегистр Тогда
					ПредыдущийОбъект = РегистрыСведений[ОбъектБазыДанных.Метаданные().Имя].СоздатьМенеджерЗаписи();
					Измерения = ОбъектБазыДанных.метаданные().Измерения;
					Для Каждого Измерение Из Измерения Цикл
						ПредыдущийОбъект[Измерение.Имя] = ОбъектБазыДанных[Измерение.Имя];
					КонецЦикла;

					ПредыдущийОбъект.Прочитать();
				Иначе
					ПредыдущийОбъект = ОбъектБазыДанных.Ссылка;
				КонецЕсли;

				МассивРеквизитов = Новый Массив;
				РеквизитыОбъекта = ОбъектБазыДанных.метаданные().Реквизиты;
				Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
					МассивРеквизитов.Добавить(РеквизитОбъекта.Имя);
				КонецЦикла;

				Если ЭтоСправочник Тогда
					МассивРеквизитов.Добавить("Код");
					МассивРеквизитов.Добавить("Наименование");
				ИначеЕсли ЭтоДокумент Тогда
					МассивРеквизитов.Добавить("Дата");
					МассивРеквизитов.Добавить("Номер");
				КонецЕсли;

				Для Каждого ЭлементРеквизит Из МассивРеквизитов Цикл
					Если НЕ ОбъектБазыДанных[ЭлементРеквизит] = ПредыдущийОбъект[ЭлементРеквизит] Тогда
						СтрокаИзменений = ТаблицаИзменений.Добавить();
						СтрокаИзменений.ТаблицаОбъекта		= "";
						СтрокаИзменений.РеквизитОбъекта		= ЭлементРеквизит;
						СтрокаИзменений.ПредыдущееЗначение	= ПредыдущийОбъект[ЭлементРеквизит];
						СтрокаИзменений.НовоеЗначение 		= ОбъектБазыДанных[ЭлементРеквизит];
						СтрокаИзменений.Комментарий 		= "";
					КонецЕсли;
				КонецЦикла;

				РегистрироватьВсеИзмененияВТаблицахОбъектов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегистрироватьВсеИзмененияВТаблицахОбъектов");
				ТаблицыОбъекта = ОбъектБазыДанных.метаданные().ТабличныеЧасти;
				Для Каждого ТаблицаОбъекта Из ТаблицыОбъекта Цикл
					Если НЕ ОбъектБазыДанных[ТаблицаОбъекта.Имя].Количество() = ПредыдущийОбъект[ТаблицаОбъекта.Имя].Количество()  Тогда
						СтрокаИзменений = ТаблицаИзменений.Добавить();
						СтрокаИзменений.ТаблицаОбъекта		= ТаблицаОбъекта.Имя;
						СтрокаИзменений.РеквизитОбъекта		= "";
						СтрокаИзменений.ПредыдущееЗначение	= ПредыдущийОбъект[ТаблицаОбъекта.Имя].Количество();
						СтрокаИзменений.НовоеЗначение 		= ОбъектБазыДанных[ТаблицаОбъекта.Имя].Количество();
						СтрокаИзменений.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Изменилось число строк");
					КонецЕсли;

					Если РегистрироватьВсеИзмененияВТаблицахОбъектов Тогда
						СчетчикСтрок = 0;
						КоличествоПредыдущихСтрок = ПредыдущийОбъект[ТаблицаОбъекта.Имя].Количество();
						Для Каждого СтрокаТаблицыОбъекта Из ОбъектБазыДанных[ТаблицаОбъекта.Имя] Цикл
							Если КоличествоПредыдущихСтрок <= СчетчикСтрок Тогда
								ПредыдущаяСтрока = Неопределено;
							Иначе
								ПредыдущаяСтрока = ПредыдущийОбъект[ТаблицаОбъекта.Имя][СчетчикСтрок];
							КонецЕсли;

							Если ПредыдущаяСтрока = Неопределено Тогда
								СтрокаИзменений = ТаблицаИзменений.Добавить();
								СтрокаИзменений.ТаблицаОбъекта		= ТаблицаОбъекта.Имя;
								СтрокаИзменений.РеквизитОбъекта		= "";
								СтрокаИзменений.ПредыдущееЗначение	= Неопределено;
								СтрокаИзменений.НовоеЗначение 		= СчетчикСтрок + 1;
								СтрокаИзменений.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новая Строка");
							Иначе
								Для Каждого РеквизитТаблицыОбъекта Из ТаблицаОбъекта.Реквизиты Цикл
									Если НЕ СтрокаТаблицыОбъекта[РеквизитТаблицыОбъекта.Имя] = ПредыдущаяСтрока[РеквизитТаблицыОбъекта.Имя] Тогда
										СтрокаИзменений = ТаблицаИзменений.Добавить();
										СтрокаИзменений.ТаблицаОбъекта		= ТаблицаОбъекта.Имя;
										СтрокаИзменений.РеквизитОбъекта		= РеквизитТаблицыОбъекта.Имя;
										СтрокаИзменений.ПредыдущееЗначение	= ПредыдущаяСтрока[РеквизитТаблицыОбъекта.Имя];
										СтрокаИзменений.НовоеЗначение 		= СтрокаТаблицыОбъекта[РеквизитТаблицыОбъекта.Имя];
										СтрокаИзменений.Комментарий 		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("В строке таблицы") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ТаблицаОбъекта.Имя) + " №" + СокрЛП(СчетчикСтрок + 1);
									КонецЕсли;

								КонецЦикла;
							КонецЕсли;

							СчетчикСтрок = СчетчикСтрок + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				Если НЕ ТаблицаИзменений.Количество() = 0 Тогда
					ОбщийМодульСерверПривилегия.ЗарегистрироватьИзмененияОбъектаВРегистр(ОбъектБазыДанных.Ссылка, ПараметрыСеанса.ТекущийПользователь, ДатаСобытия, ТаблицаИзменений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ИспользоватьШтрихКоды() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтрихКоды");
КонецФункции

Функция   НайтиКонтрагентаПоОКПО(Знач ДанныеОКПО, Знач ЭтоТочноКлиент = ЛОЖЬ, Знач ЭтоТочноПоставщик = ЛОЖЬ) Экспорт

	РезультатПоиска = Неопределено;
	Если НЕ ПустаяСтрока(ДанныеОКПО) Тогда

		Если ЭтоТочноКлиент
			ИЛИ НЕ ЭтоТочноПоставщик Тогда

			ЗапросКПоОКПО = Новый Запрос;
			ЗапросКПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
			|ИЗ Справочник.Клиенты КАК Клиенты
			|ГДЕ Клиенты.ОКПО = &ОКПО";
			ЗапросКПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));

			Выборка = ЗапросКПоОКПО.Выполнить();

			Если НЕ Выборка.Пустой() Тогда
				Результат = Выборка.Выбрать();
				Результат.Следующий();
				РезультатПоиска = Результат.Ссылка;
			КонецЕсли;
		КонецЕсли;

		Если ЭтоТочноПоставщик
			ИЛИ (не ЭтоТочноКлиент и РезультатПоиска = Неопределено) Тогда

			ЗапросКПоОКПО = Новый Запрос;
			ЗапросКПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Поставщики.Ссылка ИЗ
			|	Справочник.Поставщики КАК Поставщики
			|ГДЕ Поставщики.ОКПО = &ОКПО";
			ЗапросКПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));

			Выборка = ЗапросКПоОКПО.Выполнить();

			Если НЕ Выборка.Пустой() Тогда
				Результат = Выборка.Выбрать();
				Результат.Следующий();
				РезультатПоиска = Результат.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПоиска;

КонецФункции

Функция   НайтиПоТелефонуАдресуИЕмейл(Знач СтрокаПоиска, Знач ИмяСправочника = "Клиенты", Знач ТочноеСоответствие = ЛОЖЬ) Экспорт

	УсловиеПоиска = ?(ТочноеСоответствие, " = ", " ПОДОБНО ");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + ИмяСправочника + ".Ссылка
	|ИЗ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
	|ГДЕ " + ИмяСправочника + ".Телефон " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Телефон2 " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Телефон3 " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Телефон4 " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Телефон5 " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Телефон5 " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".Адрес " + УсловиеПоиска + "&СтрокаПоиска
	| ИЛИ " + ИмяСправочника + ".ЭлектроннаяПочта " + УсловиеПоиска + "&СтрокаПоиска
	|";
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // Найти По Телефону Адресу И Емейл

Функция   НайтиСсылкуПоЗапросу(Знач ТекстЗапроса, Знач ИмяРеквизитаОтбора = Неопределено, Знач ЗначениеРеквизитаОтбора = Неопределено) Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если НЕ ИмяРеквизитаОтбора = Неопределено Тогда
		Запрос.УстановитьПараметр(ИмяРеквизитаОтбора, ЗначениеРеквизитаОтбора);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   НайтиХранилищеПоПараметрам(Знач Валюта = Неопределено, Знач ФормаОплаты = Неопределено, Знач НомерСчета = "", Знач ЕслиНетВернутьОсновное = ЛОЖЬ, Знач СоздатьНовоеЕслиОниВыключены = ИСТИНА) Экспорт

	РезультатХранилище = ?(ЕслиНетВернутьОсновное, ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте"), ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка"));

	Запрос = Новый Запрос;
	Условие = "ИСТИНА";
	Если НЕ НомерСчета = "" Тогда
		Условие = Условие + " И ХранилищаДенег.НомерСчета = &НомерСчета ";
	КонецЕсли;

	Если ЗначениеЗаполнено(Валюта) Тогда
		Условие = Условие + " И ХранилищаДенег.Валюта = &Валюта ";
	КонецЕсли;

	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Условие = Условие + " И ХранилищаДенег.ФормаОплаты = &ФормаОплаты ";
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ХранилищаДенег.Ссылка,
	|	ХранилищаДенег.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ Справочник.ХранилищаДенег КАК ХранилищаДенег
	|ГДЕ " + Условие + " УПОРЯДОЧИТЬ ПО ПометкаУдаления";

	Если НЕ НомерСчета = "" Тогда
		Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	КонецЕсли;

	Если ЗначениеЗаполнено(Валюта) Тогда
		Запрос.УстановитьПараметр("Валюта", Валюта);
	КонецЕсли;

	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		РезультатХранилище = ВыборкаДетальныеЗаписи.Ссылка;
		
	ИначеЕсли СоздатьНовоеЕслиОниВыключены 
		И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДенегВНесколькихХранилищах") Тогда
		
		РезультатХранилище = ОбщийМодульСерверПривилегия.СоздатьХранилищеДенег(Валюта, ФормаОплаты, НомерСчета);
	КонецЕсли;

	Возврат РезультатХранилище;

КонецФункции // Найти Хранилище По Параметрам

Функция   НайтиЭлементПоИмени(Знач ИмяСправочника, Знач ТекстНаименования) Экспорт

	ИскомыйЭлемент = Справочники[ИмяСправочника].НайтиПоНаименованию(ТекстНаименования, ЛОЖЬ);

	Если НЕ ЗначениеЗаполнено(ИскомыйЭлемент)
		И (метаданные.Справочники[ИмяСправочника].Иерархический
		И ИскомыйЭлемент.ЭтоГруппа) Тогда

		ИскомыйЭлемент = Неопределено
	КонецЕсли;

	Возврат ИскомыйЭлемент;

КонецФункции // НайтиН оменклатуру По Имени

Функция   НайтиЭлементПоКоду(Знач ИмяСправочника, Знач Код) Экспорт

	ИскомыйЭлемент = Справочники[ИмяСправочника].НайтиПоКоду(Код);

	Если НЕ ЗначениеЗаполнено(ИскомыйЭлемент)
		И (метаданные.Справочники[ИмяСправочника].Иерархический
		И ИскомыйЭлемент.ЭтоГруппа) Тогда

		ИскомыйЭлемент = Неопределено
	КонецЕсли;

	Возврат ИскомыйЭлемент;

КонецФункции // Найти Номенклатуру По Коду

Функция   НетСегодняКурса() Экспорт

	Результат = ИСТИНА;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КурсыВалют.Курс
	|ИЗ РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ КурсыВалют.Период МЕЖДУ &НачалоДня И &КонецДня";
	дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("КонецДня", КонецДня(Дата));
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Дата));

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой();

КонецФункции

Процедура ОбеспечитьСписокОтборов(СписокФормы, Знач ДопТип = "", Знач СвоеНаименованиеОбъектаОтбора = "") Экспорт

	СписокОтборов = ОбщийМодульПовтор.ПолучитьОтборыДоступа(СписокФормы.ОсновнаяТаблица, , ДопТип, СвоеНаименованиеОбъектаОтбора);
	Если НЕ СписокОтборов = Неопределено Тогда
		ИндексыГрупп 	= Новый Соответствие;
		ИндексЭлемента 	= 0;
		Попытка
			Для Каждого ЭлементСписка Из СписокОтборов Цикл
				Если ЭлементСписка.Значение.ЭтоГруппаЭлементов Тогда
					ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
					ЭлементОтбора.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ЭлементОтбора.Представление		= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа ИЛИ");
					ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
					ИндексЭлемента = СписокФормы.Отбор.Элементы.количество() - 1;
					ИндексыГрупп.Вставить(ЭлементСписка.Значение.ГруппаЭлементов, ИндексЭлемента);
				Иначе
					РодительЭлементу = Неопределено;

					Если НЕ ЭлементСписка.Значение.ГруппаИли = "Г0" Тогда
						РодительЭлементу = СписокФормы.Отбор.Элементы.Получить(ИндексыГрупп.Получить(ЭлементСписка.Значение.ГруппаИли));
					КонецЕсли;

					Если РодительЭлементу = Неопределено
						ИЛИ ТипЗнч(РодительЭлементу) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда

						ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Иначе
						ЭлементОтбора = РодительЭлементу.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					КонецЕсли;

					ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ЭлементСписка.Значение.РеквизитОбъекта);
					ЭлементОтбора.ВидСравнения     = ЭлементСписка.Значение.ВидСравненияКомпоновкиДанных;
					ЭлементОтбора.Использование    = ЭлементСписка.Значение.ОтборИспользуется;
					ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
					ЭлементОтбора.ПравоеЗначение   = ЭлементСписка.Значение.ЗначениеУсловия;
					ЭлементОтбора.Представление	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ЭлементСписка.Значение.РеквизитОбъекта)) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ЭлементСписка.Значение.ВидСравненияКомпоновкиДанных)) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ЭлементСписка.Значение.ЗначениеУсловия));
				КонецЕсли;

			КонецЦикла;

		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка установки правила отбора") + ": " + ТекстОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыСеанса.ОграниченКонтрагент) Тогда
		ЕстьПолеДляОтбора = СписокФормы.Отбор.ДоступныеПоляОтбора.Элементы.Найти("КлиентПоставщик");
		Если Не ЕстьПолеДляОтбора = Неопределено Тогда
			ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение    = ЕстьПолеДляОтбора.Поле;
			ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование    = ИСТИНА;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОтбора.ПравоеЗначение   = ПараметрыСеанса.ОграниченКонтрагент;
			ЭлементОтбора.Представление	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ограничен контрагент - пользователь") + ": " + ПараметрыСеанса.ОграниченКонтрагент;
		КонецЕсли;

		Если ТипЗнч(ПараметрыСеанса.ОграниченКонтрагент) = Тип("СправочникСсылка.Клиенты") Тогда
			ЕстьПолеДляОтбора = СписокФормы.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Клиент");
			Если Не ЕстьПолеДляОтбора = Неопределено Тогда
				ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение    = ЕстьПолеДляОтбора.Поле;
				ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование    = ИСТИНА;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.ПравоеЗначение   = ПараметрыСеанса.ОграниченКонтрагент;
				ЭлементОтбора.Представление	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ограничен клиент - пользователь") + ": " + ПараметрыСеанса.ОграниченКонтрагент;
			КонецЕсли;
		Иначе
			ЕстьПолеДляОтбора = СписокФормы.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Поставщик");

			Если Не ЕстьПолеДляОтбора = Неопределено Тогда
				ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение    = ЕстьПолеДляОтбора.Поле;
				ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование    = ИСТИНА;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.ПравоеЗначение   = ПараметрыСеанса.ОграниченКонтрагент;
				ЭлементОтбора.Представление	   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ограничен поставщик - пользователь") + ": " + ПараметрыСеанса.ОграниченКонтрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЗначениеНаЯзыке(Знач Ссылка, Знач НаЯзыке, Знач ПолеЗначения = "Наименование", Знач Язык = Неопределено) Экспорт

	Если НЕ ПустаяСтрока(НаЯзыке) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		РСМЗ = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
		РСМЗ.Активность = ИСТИНА;
		РСМЗ.НаЯзыке 	= НаЯзыке;
		РСМЗ.Поле 		= ПолеЗначения;
		РСМЗ.Язык 		= ?(Язык = Неопределено, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"), Язык);
		РСМЗ.ОбъектБазыДанных = Ссылка;
		Попытка
			РСМЗ.Записать(ИСТИНА);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Функция   ОбработатьБлокировку(Знач ОбъектДокумент = Неопределено, ФормаДокумента, Знач ПриСозданииФормы = ЛОЖЬ, Знач КодПроверкиДляБлокировкиПроведенных = "", Знач ДополнительноеУсловиеБлокировки = ИСТИНА) Экспорт

	БлокироватьПроведенныеДокументы = ИСТИНА;
	Результат = ЛОЖЬ;
	ОбъектДокументНеопределено = ОбъектДокумент = Неопределено;

	Если НЕ КодПроверкиДляБлокировкиПроведенных = ""
		И НЕ ОбъектДокументНеопределено
		И ОбъектДокумент.Проведен Тогда

		Результат = ОбщийМодульСервисСервер.ПроверитьОтказДоступа(КодПроверкиДляБлокировкиПроведенных, ФормаДокумента, Результат, ОбъектДокумент);

		Если Результат Тогда
			БлокироватьПроведенныеДокументы = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Результат Тогда

		Если НЕ ОбъектДокументНеопределено
			И ТипЗнч(ОбъектДокумент.Ссылка) = Тип("ДокументСсылка.Инвентаризации") Тогда

			БлокироватьПроведенныеДокументы = ИСТИНА;
		Иначе
			БлокироватьПроведенныеДокументы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("БлокироватьПроведенныеДокументы");
		КонецЕсли;
	КонецЕсли;

	Результат = Результат И ДополнительноеУсловиеБлокировки;

	Если БлокироватьПроведенныеДокументы Тогда
		ЗАБЛОКИРОВАН = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЗАБЛОКИРОВАН") + " ";

		Если Результат
			ИЛИ ОбъектДокументНеопределено
			ИЛИ (ОбъектДокумент.Проведен И ДополнительноеУсловиеБлокировки) Тогда

			Если Найти(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН) = 0 Тогда
				ФормаДокумента.Заголовок = ЗАБЛОКИРОВАН + ФормаДокумента.Заголовок;
			КонецЕсли;

			ФормаДокумента.ТолькоПросмотр = ИСТИНА;
			Результат = ИСТИНА;
			ФормаДокумента.ДокументЗаблокирован = ИСТИНА;
		ИначеЕсли НЕ ПриСозданииФормы Тогда
			ФормаДокумента.Заголовок = стрзаменить(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН, "");
			ФормаДокумента.ДокументЗаблокирован = ЛОЖЬ;
			ФормаДокумента.ТолькоПросмотр = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   НайтиНаправлениеДеятельности(Знач Контрагент = Неопределено, Знач Договор = Неопределено, Знач Организация = Неопределено, Знач Номенклатура = Неопределено, Знач Склад = Неопределено, Знач Сотрудник = Неопределено) Экспорт

	РезультатОпределитьНаправлениеДеятельности = Неопределено;

	Если ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(Контрагент.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Контрагент.НаправлениеДеятельности;
	ИначеЕсли ЗначениеЗаполнено(Договор)
		И ЗначениеЗаполнено(Договор.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Договор.НаправлениеДеятельности;
	ИначеЕсли ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(Организация.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Организация.НаправлениеДеятельности;
	ИначеЕсли ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(Номенклатура.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Номенклатура.НаправлениеДеятельности;
	ИначеЕсли ЗначениеЗаполнено(Склад)
		И ЗначениеЗаполнено(Склад.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Склад.НаправлениеДеятельности;
	ИначеЕсли ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(Сотрудник.НаправлениеДеятельности) Тогда

		РезультатОпределитьНаправлениеДеятельности = Сотрудник.НаправлениеДеятельности;
	иначе
		ОсновноеНаправлениеДеятельности = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ОсновноеНаправлениеДеятельности");
		Если ЗначениеЗаполнено(ОсновноеНаправлениеДеятельности) Тогда
			РезультатОпределитьНаправлениеДеятельности = ОсновноеНаправлениеДеятельности;
		Иначе
			РезультатОпределитьНаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ГлавноеНаправление");
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатОпределитьНаправлениеДеятельности;

КонецФункции // ОпределитьНаправлениеДеятельности

Функция   НайтиФормулуДляНадписиНаФорме(Знач ИмяФормыСНадписью) Экспорт

	// ИмяФормыСНадписью = "Документ.ПоступленияТовара.Форма.ФормаДокумента"
	ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ПриходныйДокументПодТаблицейТовары");
	Результат = Неопределено;
	Если ИмяФормыСНадписью = "Документ.ПоступленияТовара.Форма.ФормаДокументаЗаказ" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ЗаказПоставщикуПодТаблицейТовары");
	ИначеЕсли ИмяФормыСНадписью = "Документ.РасходыТовара.Форма.ФормаДокумента" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.РасходныйДокументВнизу");
	ИначеЕсли ИмяФормыСНадписью = "Документ.РасходыТовара.Форма.ФормаДокументаЗаказ" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ЗаказКлиентаВнизу");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.КарточкаНоменклатурыПодКомментарием");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаЭлементаУпрощенная" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.КарточкаНоменклатурыПодКомментарием");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Клиенты.Форма.ФормаЭлемента" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.КарточкаКлиентаПодКомментарием");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Клиенты.Форма.ФормаЭлементаУпрощенная" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.КарточкаКлиентаПодКомментарием");
	ИначеЕсли ИмяФормыСНадписью = "Документ.РасходыТовара.Форма.ФормаСписка" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.РасходныеСписокВнизу");
	ИначеЕсли ИмяФормыСНадписью = "Документ.РасходыТовара.Форма.ФормаСпискаЗаказов" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ЗаказыКлиентовСписокВнизу");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Клиенты.Форма.КлиентыСДолгамиИлиПереплатой" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ПодТаблицейДолговКлиентов");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Поставщики.Форма.ПоставщикиСДолгамиИлиПереплатой" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ПодТаблицейДолговПоставщикам");
	ИначеЕсли ИмяФормыСНадписью = "ОбщаяФорма.Деньги" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ПодТаблицейОстатковДенег");
	ИначеЕсли ИмяФормыСНадписью = "ОбщаяФорма.ФормаПечати" Тогда
		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ВФормеПечати");
	ИначеЕсли ИмяФормыСНадписью = "ОбщаяФорма.ФормаОтчета"
		ИЛИ ИмяФормыСНадписью = "ОбщаяФорма.ОбщаяФормаОтчетов" Тогда

		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.ВФормеОтчетов");
	ИначеЕсли ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаСписка"
		ИЛИ ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаСпискаСОтборомПоГруппе"
		ИЛИ ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаСпискаСОтборомПоГруппеУпрощенная"
		ИЛИ ИмяФормыСНадписью = "Справочник.Номенклатура.Форма.ФормаСпискаУпрощенная" Тогда

		ДляНадписиВФорме = ПредопределенноеЗначение("Перечисление.ВидыФормСНадписямиПоФормулам.СписокНоменклатурыВнизу");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормулыОписания.Формула КАК Формула,
	|	ФормулыОписания.ВыводитьКнопкуОбновленияНадписи КАК ВыводитьКнопкуОбновленияНадписи,
	|	ФормулыОписания.ВыполнитьНаСервереСОбъектом КАК ВыполнитьНаСервереСОбъектом
	|ИЗ Справочник.ФормулыОписания КАК ФормулыОписания
	|ГДЕ ФормулыОписания.ДляНадписиВФорме = &ДляНадписиВФорме
	|УПОРЯДОЧИТЬ ПО ФормулыОписания.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДляНадписиВФорме", ДляНадписиВФорме);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = Новый Структура;
		Результат.Вставить("Формула", ВыборкаДетальныеЗаписи.Формула);
		Результат.Вставить("ВыводитьКнопкуОбновленияНадписи", ВыборкаДетальныеЗаписи.ВыводитьКнопкуОбновленияНадписи);
		Результат.Вставить("ВыполнитьНаСервереСОбъектом", ВыборкаДетальныеЗаписи.ВыполнитьНаСервереСОбъектом);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ОстатокТовара(Знач Склад = Неопределено, Знач Номенклатура, Знач ДатаОстатка, Знач ВернутьСтруктуру = ЛОЖЬ, ЭтоРасходТовара = ЛОЖЬ) Экспорт

	КвоОстаток 	 = 0;
	СуммаОстаток = 0;
	ЗначениеЗаполненоСклад = ЗначениеЗаполнено(Склад);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			Номенклатура = &Номенклатура ";

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам", ИСТИНА) Тогда
		Если ЭтоРасходТовара Тогда
			Если ЗначениеЗаполненоСклад Тогда
				Запрос.Текст = Запрос.Текст + " И (Склад = &Склад или Склад = &СкладПополнения) ) КАК ТоварыОстатки";
				Запрос.УстановитьПараметр("СкладПополнения", Склад.СкладПополнения);
			Иначе
				Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
			КонецЕсли;
		Иначе
			Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполненоСклад, " И Склад = &Склад", "") + ") КАК ТоварыОстатки";
		КонецЕсли;

		Если ЗначениеЗаполненоСклад Тогда
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;
	Иначе
		Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КвоОстаток 	 = КвоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СуммаОстаток = СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;

	Если ВернутьСтруктуру Тогда
		СтруктураРезультат = Новый структура;
		СтруктураРезультат.Вставить("Количество", КвоОстаток);
		СтруктураРезультат.Вставить("Сумма", СуммаОстаток);

		Возврат СтруктураРезультат;
	Иначе
		Возврат КвоОстаток;
	КонецЕсли;

КонецФункции // Остаток Денег

Процедура ОформитьОписаниеТаблицы(ОбъектСТаблицей, Знач НаименованиеТаблицы = "Товары", Знач ПолеХарактера = "Номенклатура", Знач КогоЧего = "", Знач ДублирующийПараметрШапки = Неопределено) Экспорт

	ПроТаблицу = "";
	Если ПустаяСтрока(КогоЧего) Тогда
		КогоЧего = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("товаров");
	КонецЕсли;

	ЧислоСтрок = ОбъектСТаблицей[НаименованиеТаблицы].Количество();

	Если ЧислоСтрок = 0 Тогда
		Если НЕ ДублирующийПараметрШапки = Неопределено Тогда
			ПроТаблицу = СокрЛП(ОбъектСТаблицей[ДублирующийПараметрШапки]);
		КонецЕсли;

		Если ПустаяСтрока(ПроТаблицу) Тогда
			ПроТаблицу = ?(КогоЧего = "-", "", СокрЛП(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Без")) + " " + КогоЧего);
		КонецЕсли;
	ИначеЕсли ЧислоСтрок < 6 Тогда
		Для Каждого СтрокаТаблицы Из ОбъектСТаблицей[НаименованиеТаблицы] Цикл
			ПроТаблицу = ПроТаблицу + ?(ПустаяСтрока(ПроТаблицу), СтрокаТаблицы[ПолеХарактера], ", " + СтрокаТаблицы[ПолеХарактера]);

		КонецЦикла;

		ПроТаблицу = СокрЛП(ПроТаблицу);
	Иначе // более 5
		Счетчик = 1;
		Для Каждого СтрокаТаблицы Из ОбъектСТаблицей[НаименованиеТаблицы] Цикл
			Если Счетчик = 4 Тогда // первые 3
				Прервать;
			КонецЕсли;

			ПроТаблицу = ПроТаблицу + ?(ПустаяСтрока(ПроТаблицу), СтрокаТаблицы[ПолеХарактера], ", " + СтрокаТаблицы[ПолеХарактера]);
			Счетчик = Счетчик + 1;
		КонецЦикла;

		ПроТаблицу = СокрЛП(ПроТаблицу);
		ПроТаблицу = СокрЛП(ПроТаблицу + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("и другие") + ".. " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего") + " " + ?(КогоЧего = "-", "", КогоЧего) + " " + Формат(ЧислоСтрок, "ЧРГ=' '; ЧГ=0"));
	КонецЕсли;

	Если НЕ ОбъектСТаблицей["Про" + НаименованиеТаблицы] = ПроТаблицу Тогда
		ОбъектСТаблицей["Про" + НаименованиеТаблицы] = ПроТаблицу;
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьУпоминаниеОбЕдиницахИзмерения() Экспорт

	ПустаяЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Цены.Период,
	|	Цены.ВидЦен,
	|	Цены.Номенклатура,
	|	Цены.ЕдиницаИзмерения,
	|	Цены.Цена,
	|	Цены.ДокументРегистрации,
	|	ВЫРАЗИТЬ(Цены.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	Цены.Вручную,
	|	Цены.Ответственный,
	|	Цены.ДатаСоздания,
	|	Цены.ДатаРедакции
	|ИЗ РегистрСведений.Цены КАК Цены
	|ГДЕ Цены.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.Цены.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписейРегистра.Отбор.ВидЦен.Установить(ВыборкаДетальныеЗаписи.ВидЦен);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);
		ЗаписьРегистра = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Период,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Номенклатура,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ЕдиницаИзмерения,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Цена,
	|	ВЫРАЗИТЬ(СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Ответственный,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ДатаСоздания,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ДатаРедакции
	|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг КАК СебестоимостьТоваровБезКоличественногоУчетаИУслуг
	|ГДЕ СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);
		ЗаписьРегистра = РегистрыСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ЕдиницаИзмерения,
	|	ШтрихКоды.Ответственный,
	|	ШтрихКоды.ДатаСоздания,
	|	ШтрихКоды.ДатаРедакции
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.ШтрихКод.Установить(ВыборкаДетальныеЗаписи.ШтрихКод);
		НаборЗаписейРегистра.Отбор.ТипШтрихКода.Установить(ВыборкаДетальныеЗаписи.ТипШтрихКода);
		НаборЗаписейРегистра.Отбор.СерияНоменклатуры.Установить(ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);
		ЗаписьРегистра = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ДополнительныеШтрихКоды.ШтрихКод,
	|	ДополнительныеШтрихКоды.Номенклатура,
	|	ДополнительныеШтрихКоды.ТипШтрихКода,
	|	ДополнительныеШтрихКоды.СерияНоменклатуры,
	|	ДополнительныеШтрихКоды.ЕдиницаИзмерения,
	|	ДополнительныеШтрихКоды.ДействуетСДаты,
	|	ДополнительныеШтрихКоды.ДействуетПоДату,
	|	ДополнительныеШтрихКоды.Ответственный,
	|	ДополнительныеШтрихКоды.ДатаСоздания,
	|	ДополнительныеШтрихКоды.ДатаРедакции
	|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
	|ГДЕ ДополнительныеШтрихКоды.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.ШтрихКод.Установить(ВыборкаДетальныеЗаписи.ШтрихКод);
		НаборЗаписейРегистра.Отбор.ТипШтрихКода.Установить(ВыборкаДетальныеЗаписи.ТипШтрихКода);
		НаборЗаписейРегистра.Отбор.СерияНоменклатуры.Установить(ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);
		ЗаписьРегистра = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЕдиницыИзмерения.Ссылка
	|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокСсылокНаЕдиницыИзмерения = Новый Массив;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокСсылокНаЕдиницыИзмерения.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;

		СписокСсылокНаЕдиницыИзмеренияКоличество = СписокСсылокНаЕдиницыИзмерения.Количество();
		Если НЕ СписокСсылокНаЕдиницыИзмерения.Количество() = 0 Тогда
			Попытка
				УстановитьМонопольныйРежим(ИСТИНА);
				УдалитьОбъекты(СписокСсылокНаЕдиницыИзмерения, ИСТИНА);
				УстановитьМонопольныйРежим(ЛОЖЬ);
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалено ссылок") + ": " + СокрЛП(СписокСсылокНаЕдиницыИзмеренияКоличество));
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Монопольный режим недоступен. Очистка не произошла."));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ПеревестиРеквизитыФормы(ФормаСобытия, НаличиеПользовательскихПереводов = ЛОЖЬ, Знач РодительскийРеквизит = "", Уровень = 0) Экспорт

	Если Уровень = 0 Тогда
		Для Каждого РеквизитФормы Из ФормаСобытия.Команды Цикл
			СтруктураРезультат = ОбщийМодульСервер.ПроверитьИПеревестиРеквизитИнтерфейса(РеквизитФормы, ИСТИНА);

			Если СтруктураРезультат.ЭлементПереведен
				И НаличиеПользовательскихПереводов = Неопределено Тогда

				НаличиеПользовательскихПереводов = ИСТИНА;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Уровень = Уровень + 1;

	Если Уровень < 3 Тогда
		Попытка
			Если ПустаяСтрока(РодительскийРеквизит) Тогда
				МассивРеквизитовФормы = ФормаСобытия.ПолучитьРеквизиты();
			Иначе
				МассивРеквизитовФормы = ФормаСобытия.ПолучитьРеквизиты(РодительскийРеквизит);
			КонецЕсли;

			Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
				ПолноеИмя = ?(ПустаяСтрока(РеквизитФормы.Путь), РеквизитФормы.Имя, РеквизитФормы.Путь + "." + РеквизитФормы.Имя);
				СтруктураРезультат = ОбщийМодульСервер.ПроверитьИПеревестиРеквизитИнтерфейса(РеквизитФормы, , ФормаСобытия, ИСТИНА);

				Если СтруктураРезультат.ЭлементПереведен
					И НаличиеПользовательскихПереводов = Неопределено Тогда

					НаличиеПользовательскихПереводов = ИСТИНА;
				КонецЕсли;

				ОБщийМодульСервер.ПеревестиРеквизитыФормы(ФормаСобытия, НаличиеПользовательскихПереводов, ПолноеИмя, Уровень);
			КонецЦикла;

		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю("" + РодительскийРеквизит + " " + ТекстОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;

	Возврат НаличиеПользовательскихПереводов;

КонецФункции

Функция   ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Экспорт
	Возврат ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
КонецФункции

Функция   ПечатьДнейРожденияКлиентов(ДокументДляПечати = Неопределено) Экспорт

	Дата  = ТекущаяДата();
	Месяц = Месяц(Дата);
	День  = День(Дата);
	Год   = Год(Дата);

	Если ДокументДляПечати = Неопределено Тогда // сегодня

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка КАК Клиент
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ МЕСЯЦ(Клиенты.ДатаРождения) = &Месяц
		|	И ДЕНЬ(Клиенты.ДатаРождения) = &День";
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);

		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДниРождения = НЕ РезультатЗапроса.Пустой()  ;
		Если НЕ ЕстьДниРождения Тогда // завтра
			Дата  = КонецДня(Дата) + 3600;
			Месяц = Месяц(Дата);
			День  = День(Дата);
			Год   = Год(Дата);
			Запрос.УстановитьПараметр("Месяц", Месяц);
			Запрос.УстановитьПараметр("День", День);

			РезультатЗапроса = Запрос.Выполнить();
			ЕстьДниРождения = НЕ РезультатЗапроса.Пустой();
			Если НЕ ЕстьДниРождения Тогда // послезавтра
				Дата  = КонецДня(Дата) + 3600;
				Месяц = Месяц(Дата);
				День  = День(Дата);
				Год   = Год(Дата);
				Запрос.УстановитьПараметр("Месяц", Месяц);
				Запрос.УстановитьПараметр("День", День);

				РезультатЗапроса = Запрос.Выполнить();
				ЕстьДниРождения = НЕ РезультатЗапроса.Пустой();
			КонецЕсли;
		КонецЕсли;

		Возврат ЕстьДниРождения;

	Иначе
		ЕстьДниРождения = ЛОЖЬ;
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по дням рождения клиентов."), 2);
		ДокументДляПечати.ИмяПараметровПечати  = "ДниРождения" + СокрЛП(ИмяКомпьютера());
		ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
		ДокументДляПечати.Очистить();
		ДокументДляПечати.НачатьАвтогруппировкуСтрок();
		Макет = ПолучитьОбщийМакет("ПечатьДнейРожденияКлиентов");
		Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Клиенты.Телефон + ВЫБОР
		|		КОГДА Клиенты.Телефон2 = """"
		|			ТОГДА """"

		|		ИНАЧЕ "", "" + Клиенты.Телефон2
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон3 = """"
		|			ТОГДА """"

		|		ИНАЧЕ "", "" + Клиенты.Телефон3
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон4 = """"
		|			ТОГДА """"

		|		ИНАЧЕ "", "" + Клиенты.Телефон4
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон5 = """"
		|			ТОГДА """"

		|		ИНАЧЕ "", "" + Клиенты.Телефон5
		|	КОНЕЦ КАК Телефон,
		|	Клиенты.Адрес,
		|	Клиенты.ЭлектроннаяПочта,
		|	Клиенты.Регион,
		|	Клиенты.Ссылка КАК Клиент,
		|	Клиенты.Наименование,
		|	Клиенты.НаименованиеДляПечати,
		|	Клиенты.ДатаРождения,
		|	ДЕНЬ(Клиенты.ДатаРождения) КАК День,
		|	МЕСЯЦ(Клиенты.ДатаРождения) КАК Месяц,
		|	ГОД(Клиенты.ДатаРождения) КАК Год
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ МЕСЯЦ(Клиенты.ДатаРождения) = &Месяц
		|	И ДЕНЬ(Клиенты.ДатаРождения) = &День";
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);

		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДниРождения  = НЕ РезультатЗапроса.Пустой();
		Если ЕстьДниРождения Тогда
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ДокументДляПечати.Вывести(Шапка, 0);
			СтрокаДняРождения = Макет.ПолучитьОбласть("С");
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();

			Для Каждого СтрокаРезультата Из ТаблицаРезультат Цикл
				СтрокаДняРождения.Параметры.Заполнить(СтрокаРезультата);
				СтрокаДняРождения.Параметры.Год 	= СтрокаРезультата.Год;
				СтрокаДняРождения.Параметры.Возраст = Год - СтрокаРезультата.Год;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаДняРождения);
				ДокументДляПечати.Вывести(СтрокаДняРождения, 1);

			КонецЦикла;

			ДокументДляПечати.ЗакончитьАвтогруппировкуСтрок();
		КонецЕсли;

		Дата  = КонецДня(Дата) + 3600;
		Месяц = Месяц(Дата);
		День  = День(Дата);
		Год   = Год(Дата);
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса .Пустой() Тогда
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ДокументДляПечати.Вывести(Шапка, 0);
			СтрокаДняРождения = Макет.ПолучитьОбласть("С");
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();

			Для Каждого СтрокаРезультата Из ТаблицаРезультат Цикл
				СтрокаДняРождения.Параметры.Заполнить(СтрокаРезультата);
				СтрокаДняРождения.Параметры.Год 	= СтрокаРезультата.Год;
				СтрокаДняРождения.Параметры.Возраст = Год - СтрокаРезультата.Год;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаДняРождения);
				ДокументДляПечати.Вывести(СтрокаДняРождения, 1);

			КонецЦикла;

			ДокументДляПечати.ЗакончитьАвтогруппировкуСтрок();
			ЕстьДниРождения = ИСТИНА;
		КонецЕсли;

		Дата  = КонецДня(Дата) + 3600;
		Месяц = Месяц(Дата);
		День  = День(Дата);
		Год   = Год(Дата);
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса .Пустой() Тогда
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
			ДокументДляПечати.Вывести(Шапка, 0);
			СтрокаДняРождения = Макет.ПолучитьОбласть("С");
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();

			Для Каждого СтрокаРезультата Из ТаблицаРезультат Цикл
				СтрокаДняРождения.Параметры.Заполнить(СтрокаРезультата);
				СтрокаДняРождения.Параметры.Год 	= СтрокаРезультата.Год;
				СтрокаДняРождения.Параметры.Возраст = Год - СтрокаРезультата.Год;
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СтрокаДняРождения);
				ДокументДляПечати.Вывести(СтрокаДняРождения, 1);
			КонецЦикла;

			ДокументДляПечати.ЗакончитьАвтогруппировкуСтрок();
			ЕстьДниРождения = ИСТИНА;
		КонецЕсли;

		Если ЕстьДниРождения Тогда
			ДокументДляПечати.ОтображатьСетку   = ЛОЖЬ;
			ДокументДляПечати.Защита 			= ИСТИНА;
			ДокументДляПечати.ТолькоПросмотр 	= ИСТИНА;
			ДокументДляПечати.ОтображатьЗаголовки = ЛОЖЬ;

			Возврат ИСТИНА;
		Иначе
			Возврат ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ПечатьДокументаПКО(ДокументДляПечати, Знач Ссылка) Экспорт

	Макет = ПолучитьОбщийМакет("ПКОРоссии");
	СсылкаНаДокументДляПКО = Ссылка[0];
	Если ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.ДвиженияДенег") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДвиженияДенег.Дата,
		|	ДвиженияДенег.КлиентПоставщик КАК Контрагент,
		|	ДвиженияДенег.Статья,
		|	ДвиженияДенег.Сумма,
		|	ВЫРАЗИТЬ(ДвиженияДенег.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ДвиженияДенег.Валюта,
		|	ДвиженияДенег.Организация,
		|	ДвиженияДенег.Договор,
		|	ДвиженияДенег.ХранилищеДенег,
		|	ДвиженияДенег.Заказ,
		|	"""" КАК ПредметСделки,
		|	ДвиженияДенег.Номер
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.Ссылка В(&Ссылка)";
		Контрагент = СсылкаНаДокументДляПКО.КлиентПоставщик;
	ИначеЕсли ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.ВыполненияРабот") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	"""" + &ВыполненныеРаботы КАК Статья,
		               |	СУММА(ВыполненияРаботОплаты.Сумма) КАК Сумма,
		               |	ВыполненияРаботОплаты.Ссылка.Номер КАК Номер,
		               |	ВыполненияРаботОплаты.Ссылка.Дата КАК Дата,
		               |	ВыполненияРаботОплаты.Ссылка.Клиент КАК Контрагент,
		               |	ВыполненияРаботОплаты.Ссылка.Организация КАК Организация,
		               |	ВыполненияРаботОплаты.Ссылка.Договор КАК Договор,
		               |	ВыполненияРаботОплаты.Ссылка.ЗаказКлиента КАК Заказ,
		               |	ВыполненияРаботОплаты.Ссылка.ХранилищеДенег КАК ХранилищеДенег,
		               |	ВыполненияРаботОплаты.Ссылка.Валюта КАК Валюта,
		               |	ВЫРАЗИТЬ(ВыполненияРаботОплаты.ОСтроке КАК СТРОКА(1000)) КАК Комментарий
		               |ИЗ
		               |	Документ.ВыполненияРабот.Оплаты КАК ВыполненияРаботОплаты
		               |ГДЕ
		               |	ВыполненияРаботОплаты.Ссылка В(&Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВыполненияРаботОплаты.Ссылка.Номер,
		               |	ВыполненияРаботОплаты.Ссылка.Дата,
		               |	ВыполненияРаботОплаты.Ссылка.Клиент,
		               |	ВыполненияРаботОплаты.Ссылка.Организация,
		               |	ВыполненияРаботОплаты.Ссылка.Договор,
		               |	ВыполненияРаботОплаты.Ссылка.ЗаказКлиента,
		               |	ВыполненияРаботОплаты.Ссылка.ХранилищеДенег,
		               |	ВыполненияРаботОплаты.Ссылка.Валюта,
		               |	ВЫРАЗИТЬ(ВыполненияРаботОплаты.ОСтроке КАК СТРОКА(1000))";
		Запрос.Параметры.Вставить("ВыполненныеРаботы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполненные работы"));
		Контрагент = СсылкаНаДокументДляПКО.Клиент;
	ИначеЕсли ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОказанияУслугЗаВремя.Дата,
		|	ВЫРАЗИТЬ(ОказанияУслугЗаВремя.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	ОказанияУслугЗаВремя.Валюта,
		|	ОказанияУслугЗаВремя.Организация,
		|	ОказанияУслугЗаВремя.Договор,
		|	ОказанияУслугЗаВремя.ХранилищеДенег,
		|	ОказанияУслугЗаВремя.Номер,
		|	ОказанияУслугЗаВремя.ПредметСделки КАК ПредметСделки,
		|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма,
		|	ОказанияУслугЗаВремя.Клиент КАК Контрагент,
		|	ОказанияУслугЗаВремя.Номенклатура КАК Статья,
		|	ОказанияУслугЗаВремя.ПозицияНомер КАК Заказ
		|ИЗ
		|	Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ
		|	ОказанияУслугЗаВремя.Ссылка В(&Ссылка)";
		Контрагент = СсылкаНаДокументДляПКО.Клиент;
	ИначеЕсли ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.ОтчетыКомиссионеров") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ОтчетыКомиссионеровДеньгиЗаТовар.Сумма) КАК Сумма,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Номер КАК Номер,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Дата КАК Дата,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Клиент КАК Контрагент,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Договор КАК Договор,
		               |	"""" КАК ПредметСделки,
		               |	"""" + &ЗаРеализованныйТовар КАК Статья,
		               |	"""" КАК Заказ,
		               |	&Валюта КАК Валюта,
		               |	&ХранилищеДенег КАК ХранилищеДенег,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Организация КАК Организация,
		               |	ВЫРАЗИТЬ(ОтчетыКомиссионеровДеньгиЗаТовар.ОСтроке КАК СТРОКА(1000)) КАК Комментарий
		               |ИЗ
		               |	Документ.ОтчетыКомиссионеров.ДеньгиЗаТовар КАК ОтчетыКомиссионеровДеньгиЗаТовар
		               |ГДЕ
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка В(&Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Номер,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Дата,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Клиент,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Договор,
		               |	ОтчетыКомиссионеровДеньгиЗаТовар.Ссылка.Организация,
		               |	ВЫРАЗИТЬ(ОтчетыКомиссионеровДеньгиЗаТовар.ОСтроке КАК СТРОКА(1000))";
		Запрос.Параметры.Вставить("ЗаРеализованныйТовар", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За реализованный товар"));
		Запрос.Параметры.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
		Запрос.Параметры.Вставить("ХранилищеДенег", ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте"));
		Контрагент = СсылкаНаДокументДляПКО.Клиент;
	Иначе
		// 	ИначеЕсли ТипЗнч(Ссылка1) = Тип("ДокументСсылка.РасходыТовара") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Дата,
		|	ВЫРАЗИТЬ(РасходыТовара.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.Номер,
		|	РасходыТовара.ТовараНаСумму,
		|	РасходыТовара.ПредметСделки КАК ПредметСделки,
		|	РасходыТовара.ЗаказКлиента КАК Заказ,
		|	РасходыТовара.КлиентПоставщик КАК Контрагент,
		|	"""" + &ЗаТоварИлиУслугу КАК Статья,
		|	РасходыТовара.Оплаты.(
		|		Ссылка,
		|		НомерСтроки,
		|		ХранилищеДенег,
		|		Сумма,
		|		ФормаОплаты,
		|		Валюта,
		|		Курс,
		|		Ваучер,
		|		ОСтроке
		|	),
		|	РасходыТовара.ПоступилоДенег  КАК Сумма
		|ИЗ Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ РасходыТовара.Ссылка В(&Ссылка)";
		Запрос.Параметры.Вставить("ЗаТоварИлиУслугу", "");
		Контрагент = СсылкаНаДокументДляПКО.КлиентПоставщик;
	КонецЕсли;

	ЯзыкДокументов = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(Контрагент, , ЛОЖЬ);
	Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
	ДокументДляПечати.ИмяПараметровПечати  = "ПКО" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	Запрос.Параметры.Вставить("Ссылка", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	ОбластьПечатиШапка = Макет.ПолучитьОбласть("Шапка");
	ДокументДляПечати.Очистить();
	ВставлятьРазделительСтраниц = ЛОЖЬ;

	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ДокументДляПечати.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
			И ЗначениеЗаполнено(Выборка.Организация) Тогда

			ОбщийМодульСервер.ДобавитьШапкуОрганизации(ДокументДляПечати, Выборка.Организация, ЯзыкДокументов);
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.Заполнить(Выборка);

		Если ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.ВыполненияРабот") Тогда
			ОбластьПечатиШапка.Параметры.ПредметСделки = СсылкаНаДокументДляПКО.ПредметСделки;
		КонецЕсли;

		КлиентПоставщик = Выборка.Контрагент;
		ПредставлениеПлательщика = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(КлиентПоставщик, ЯзыкДокументов));
		ОбластьПечатиШапка.Параметры.КонтрагентПолноеНаименование = ПредставлениеПлательщика;
		Организация = Выборка.Организация;

		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
		КонецЕсли;

		ПредставлениеОрганизации = СокрЛП(ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокументов));
		ОбластьПечатиШапка.Параметры.ГлавныйБухгалтер = Организация.ГлавныйБухгалтер;
		ОбластьПечатиШапка.Параметры.ОКПО = Организация.ОКПО;
		ОбластьПечатиШапка.Параметры.НаименованиеПредприятия = ПредставлениеОрганизации ;
		Сумма = Выборка.Сумма;

		Если ТипЗнч(СсылкаНаДокументДляПКО) = Тип("ДокументСсылка.РасходыТовара") Тогда
			ВыборкаС = Выборка.Оплаты.Выбрать();
			Если НЕ ВыборкаС.количество() = 0 Тогда
				Сумма = 0;

				Пока ВыборкаС.Следующий() Цикл
					Сумма = Сумма + ВыборкаС.Сумма;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ОбластьПечатиШапка.Параметры.Сумма = Сумма;
		ОбластьПечатиШапка.Параметры.СуммаСтрокой = Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧГ=3,0") + " " + СокрЛП(Выборка.Валюта);
		ОбластьПечатиШапка.Параметры.СуммаТекстом = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, Выборка.Валюта, ЯзыкДокументов);
		ХранилищеДенег = Выборка.ХранилищеДенег;

		Если ЗначениеЗаполнено(ХранилищеДенег)
			И ЗначениеЗаполнено(ХранилищеДенег.ОтветственныйСотрудник) Тогда

			ОбластьПечатиШапка.Параметры.ОсновнойКассир = ХранилищеДенег.ОтветственныйСотрудник;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Организация) Тогда
			ОбластьПечатиШапка.Параметры.ОсновнойКассир = Выборка.Организация.ОсновнойКассир;
		КонецЕсли;

		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиШапка);
		ДокументДляПечати.Вывести(ОбластьПечатиШапка, Выборка.Уровень());
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;

КонецПроцедуры

Процедура ПечатьНаСервереОтчетаРуководителю(Знач СтруктураОтчета, ДокументДляПечати, Знач НаЕмейл = ЛОЖЬ) Экспорт

	ДокументДляПечати.ИмяПараметровПечати  = "ИнформацияРуководителю" + СокрЛП(ИмяКомпьютера());
	ДокументДляПечати.КлючПараметровПечати = ДокументДляПечати.ИмяПараметровПечати;
	ДокументДляПечати.Очистить();
	СсылкаНаОбъектПечати = СтруктураОтчета;
	РазрядМетаданных = "Отчеты"; ИмяМетаданных = "ИнформацияРуководителю";
	ПроизвольнаяПечатнаяФорма = ОбщийМодульТекстСервер.ОпределитьПроизвольнуюПечатнуюФорму(Перечисления.ВидыПечатныхФорм.ИнформацияРуководителю, , СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);

	Если ЗначениеЗаполнено(ПроизвольнаяПечатнаяФорма) Тогда
		ДокументДляПечати = ОбщийМодульТекстСервер.СформироватьДокументПоПроизвольнойФорме(ПроизвольнаяПечатнаяФорма, , ДокументДляПечати, СсылкаНаОбъектПечати, РазрядМетаданных, ИмяМетаданных);
	Иначе
		Макет = отчеты.ИнформацияРуководителю.ПолучитьМакет("Печать");
		Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьЗаголовок);
		ДокументДляПечати.Вывести(ОбластьЗаголовок);

		Если НаЕмейл Тогда
			Шапка = Макет.ПолучитьОбласть("Ш2");
		Иначе
			Шапка = Макет.ПолучитьОбласть("Шапка");
		КонецЕсли;

		Шапка.Параметры.Заполнить(СтруктураОтчета);
		Шапка.Параметры.валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(Шапка);
		ДокументДляПечати.Вывести(Шапка);

		Если Константы.ДетализироватьИнформацияРуководителю.Получить() Тогда // именно с констант!
			ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
			// ПРОДАЖИ детально

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Продажи.Номенклатура,
			|	ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) КАК Склад,
			|	Продажи.Количество,
			|	Продажи.Сумма,
			|	ЕСТЬNULL(Продажи.Номенклатура.НоменклатурнаяГруппа, &ПустаяНоменклатурнаяГруппа) КАК НоменклатурнаяГруппа
			|ИЗ РегистрНакопления.Продажи КАК Продажи
			|ГДЕ Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И (&НетОтбораПоСкладу
			|			ИЛИ ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) = &Склад)
			|УПОРЯДОЧИТЬ ПО Продажи.Период";
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));
			Запрос.УстановитьПараметр("НетОтбораПоСкладу", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") или не ЗначениеЗаполнено(СтруктураОтчета.ОтборПоСкладу));
			Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка"));
			Запрос.УстановитьПараметр("ПустойСклад", ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"));
			Запрос.УстановитьПараметр("Склад", СтруктураОтчета.ОтборПоСкладу);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				Шапка = Макет.ПолучитьОбласть("ШЗ");
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(шапка);
				ДокументДляПечати.Вывести(Шапка);
				Продажи = РезультатЗапроса.Выгрузить();
				Продажи.Сортировать("Склад, НоменклатурнаяГруппа");
				СуммыПоСкладам = Новый ТаблицаЗначений;
				СуммыПоСкладам.Колонки.Добавить("Склад");
				СуммыПоСкладам.Колонки.Добавить("Количество");
				СуммыПоСкладам.Колонки.Добавить("Сумма");
				СуммыПоНГВРамкахСклада = Новый ТаблицаЗначений;
				СуммыПоНГВРамкахСклада.Колонки.Добавить("Склад");
				СуммыПоНГВРамкахСклада.Колонки.Добавить("НоменклатурнаяГруппа");
				СуммыПоНГВРамкахСклада.Колонки.Добавить("Количество");
				СуммыПоНГВРамкахСклада.Колонки.Добавить("Сумма");
				ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
				ТекущийСклад 		= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
				СуммаПоСкладу 		= 0;
				КоличествоПоСкладу 	= 0;
				МассивСкладов 		= Новый Массив;
				МассивСкладов.Добавить(ТекущийСклад);
				ТекущаяНГ 		= ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
				СуммаПоНГ 		= 0;
				КоличествоПоНГ 	= 0;
				МассивНг 		= Новый Массив;
				МассивНг.Добавить(ТекущаяНГ);

				Для Каждого Продажа Из Продажи Цикл

					Если ВестиУчетПоСкладам
						И НЕ ТекущийСклад = Продажа.Склад Тогда

						Если НЕ ТекущийСклад = Неопределено Тогда
							СтрокаСуммы = СуммыПоСкладам.Добавить();
							СтрокаСуммы.Склад 		= ТекущийСклад       ;
							СтрокаСуммы.Количество 	= КоличествоПоСкладу;
							СтрокаСуммы.Сумма 		= СуммаПоСкладу;
							КоличествоПоСкладу 		= 0;
							СуммаПоСкладу 			= 0;
							СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
							СтрокаСуммы.Склад 				 = ТекущийСклад       ;
							СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
							СтрокаСуммы.Количество 			 = КоличествоПоНГ;
							СтрокаСуммы.Сумма 				 = СуммаПоНГ;
							СуммаПоНГ 		= 0;
							КоличествоПоНГ  = 0;
						КонецЕсли;

						ТекущийСклад = Продажа.Склад;
						МассивСкладов.Добавить(ТекущийСклад);
					КонецЕсли;

					Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
						И НЕ ТекущаяНГ = Продажа.НоменклатурнаяГруппа Тогда

						Если НЕ ТекущаяНГ = Неопределено Тогда
							СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
							СтрокаСуммы.Склад 				 = ТекущийСклад       ;
							СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
							СтрокаСуммы.Количество 			 = КоличествоПоНГ;
							СтрокаСуммы.Сумма 				 = СуммаПоНГ;
							СуммаПоНГ 		= 0;
							КоличествоПоНГ  = 0;
						КонецЕсли;

						ТекущаяНГ = Продажа.НоменклатурнаяГруппа;
						МассивНГ.Добавить(ТекущаяНГ);
					КонецЕсли;

					СуммаПоНГ  			= СуммаПоНГ + Продажа.Сумма;
					КоличествоПоНГ 		= КоличествоПоНГ + Продажа.количество;
					СуммаПоСкладу  		= СуммаПоСкладу + Продажа.Сумма;
					КоличествоПоСкладу 	= КоличествоПоСкладу + Продажа.количество;

				КонецЦикла;

				Если ВестиУчетПоСкладам
					И (не КоличествоПоСкладу = 0 или не СуммаПоСкладу = 0) Тогда

					СтрокаСуммы = СуммыПоСкладам.Добавить();
					СтрокаСуммы.Склад 		= ТекущийСклад       ;
					СтрокаСуммы.Количество  = КоличествоПоСкладу;
					СтрокаСуммы.Сумма 		= СуммаПоСкладу;
				КонецЕсли;

				Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
					И (не КоличествоПоНГ = 0 или не СуммаПоНГ = 0) Тогда

					СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
					СтрокаСуммы.Склад 				 = ТекущийСклад       ;
					СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
					СтрокаСуммы.Количество 			 = КоличествоПоНГ;
					СтрокаСуммы.Сумма 				 = СуммаПоНГ;
				КонецЕсли;

				Для Каждого СкладПродажи Из МассивСкладов Цикл
					Если ЗначениеЗаполнено(СкладПродажи) Тогда
						СтрокаСуммы = СуммыПоСкладам.Найти(СкладПродажи, "Склад");
						Если НЕ СтрокаСуммы = Неопределено Тогда
							ОбластьПечати = Макет.ПолучитьОбласть("ГС");
							ОбластьПечати.Параметры.Склад = СкладПродажи;
							ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
							ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
							ДокументДляПечати.Вывести(ОбластьПечати);
						КонецЕсли;
					КонецЕсли;

					Для Каждого НГПродажи Из МассивНГ Цикл
						ПараметрыОтбора = Новый Структура("Склад", СкладПродажи);
						ПараметрыОтбора.Вставить("НоменклатурнаяГруппа", НГПродажи);
						Если ЗначениеЗаполнено(НГПродажи) Тогда
							СтрокиСуммы = СуммыПоНГВРамкахСклада.НайтиСтроки(ПараметрыОтбора);

							Если НЕ СтрокиСуммы.Количество() = 0 Тогда
								СтрокаСуммы = СтрокиСуммы[0];
								ОбластьПечати = Макет.ПолучитьОбласть("ГНГ");
								ОбластьПечати.Параметры.НоменклатурнаяГруппа = НГПродажи;
								ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
								ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
								ДокументДляПечати.Вывести(ОбластьПечати);
							КонецЕсли;
						КонецЕсли;

						СтрокиСуммы = Продажи.НайтиСтроки(ПараметрыОтбора);

						Если НЕ СтрокиСуммы.Количество() = 0 Тогда
							Для Каждого СтрокаСуммы Из СтрокиСуммы Цикл
								ОбластьПечати = Макет.ПолучитьОбласть("С");
								ОбластьПечати.Параметры.Номенклатура = СтрокаСуммы.Номенклатура;
								ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
								ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
								ДокументДляПечати.Вывести(ОбластьПечати);

							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановыхПоказателейПродаж") Тогда
				// ТЕКУЩЕЕ исполнение плана продаж

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПланыПродаж.Ссылка
				|ИЗ Документ.ПланыПродаж КАК ПланыПродаж
				|ГДЕ (ПланыПродаж.ДатаОкончания >= &ДатаОкончания
				|	ИЛИ ПланыПродаж.ДатаНачала <= &ДатаНачала)
				|	И ПланыПродаж.ПланНеАктуален = ЛОЖЬ
				|УПОРЯДОЧИТЬ ПО ПланыПродаж.Дата УБЫВ";
				Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
				Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Регистратор   = ВыборкаДетальныеЗаписи.Ссылка;
						СформироватьПланФактныйОтчетНаСервере(Регистратор, ДокументДляПечати);
						ДокументДляПечати.ФиксацияСверху = 0;
						ДокументДляПечати.ФиксацияСлева  = 0;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ СУММА(ДеньгиОбороты.СуммаПриход) КАК СуммаПриход,
				|	СУММА(ДеньгиОбороты.СуммаРасход) КАК СуммаРасход,
				|	ДеньгиОбороты.ХранилищеДенег
				|ИЗ РегистрНакопления.Деньги.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ДеньгиОбороты
				|СГРУППИРОВАТЬ ПО ДеньгиОбороты.ХранилищеДенег";
				Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
				Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ОбластьПечати = Макет.ПолучитьОбласть("ШД");
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
					ДокументДляПечати.Вывести(ОбластьПечати);
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбластьПечати = Макет.ПолучитьОбласть("СД");
						ОбластьПечати.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
						ДокументДляПечати.Вывести(ОбластьПечати);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
				|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
				|	ТоварыОстатки.Склад
				|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОкончания, ) КАК ТоварыОстатки
				|СГРУППИРОВАТЬ ПО ТоварыОстатки.Склад";
				Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ОбластьПечати = Макет.ПолучитьОбласть("ШС");
					ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
					ДокументДляПечати.Вывести(ОбластьПечати);
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбластьПечати = Макет.ПолучитьОбласть("СС");
						ОбластьПечати.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
						ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
						ДокументДляПечати.Вывести(ОбластьПечати);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ПечатьТоварногоЧека(Знач Документ, Знач ЭтоВозврат = ЛОЖЬ, Знач Клиент = Неопределено, Знач ИмяТаблицы = "Товары", Знач ВидОплаты = Неопределено, Знач ТаблицаОплаты = "", Знач Кассир = Неопределено) Экспорт

	Дата = Документ.Дата;
	Организация = Документ.Организация ;
	Если ВидОплаты = Неопределено Тогда
		ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
	КонецЕсли;

	Если Кассир = Неопределено Тогда
		Кассир = Документ.Сотрудник;
	КонецЕсли;

	Если ЗначениеЗаполнено(Клиент) Тогда
		ЯзыкДокумента = Клиент.ЯзыкДокументов;
		Если НЕ ЗначениеЗаполнено(ЯзыкДокумента) Тогда
			ЯзыкДокумента = Неопределено;
		КонецЕсли;
	Иначе
		ЯзыкДокумента = Неопределено;
	КонецЕсли;

	Текст = "";

	СтрогоеИмяНефискальногоПринтераЧеков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтрогоеИмяНефискальногоПринтераЧеков");
	Если НЕ ПустаяСтрока(СтрогоеИмяНефискальногоПринтераЧеков) Тогда
		ТабличныйДокументЧек = Новый ТабличныйДокумент;
		ТабличныйДокументЧек.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК" + СокрЛП(ИмяКомпьютера());
		ТабличныйДокументЧек.КлючПараметровПечати = ТабличныйДокументЧек.ИмяПараметровПечати;
		МакетЧека = ПолучитьОбщийМакет("Чек");
		МакетЧека.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(Клиент);

		Если ЭтоВозврат Тогда
			ОблЗаголовок = МакетЧека.ПолучитьОбласть("ОблЗаголовокВозврат");
			ОблЗаголовок.Параметры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Чек ВОЗВРАТА", ЯзыкДокумента);
			ОблПодвал = МакетЧека.ПолучитьОбласть("ОблПодвалВозврат");
		Иначе
			ОблЗаголовок = МакетЧека.ПолучитьОбласть("ОблЗаголовок");
			ОблЗаголовок.Параметры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЧЕК", ЯзыкДокумента);

			Если ВидОплаты = Перечисления.ФормыОплаты.Наличные Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НАЛИЧНЫМИ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ПЛАТ.КАРТОЙ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Кредит Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КРЕДИТОМ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СЕРТИФИКАТОМ", ЯзыкДокумента);
			КонецЕсли;

			ОблПодвал = МакетЧека.ПолучитьОбласть("ОблПодвал");
		КонецЕсли;

		ОблЗаголовок.Параметры.Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Кассир, Дата);
		ОблЗаголовок.Параметры.Организация 	 = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокумента);
		ОблЗаголовок.Параметры.ИННОКПО		 = ОбщийМодульТекстСервер.ПолучитьОбщееИННИлиОКПО(Организация);
		ОблЗаголовок.Параметры.Номер 		 = Документ.Номер;
		ОблЗаголовок.Параметры.Контрагент 	 = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Клиент, ЯзыкДокумента);
		ОблЗаголовок.Параметры.Дата 		 = Формат(Дата, "ДФ=dd.MM.yyyy");
		ОблЗаголовок.Параметры.Время 		 = Формат(Дата, "ДФ=ЧЧ:мм");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблЗаголовок);
		ТабличныйДокументЧек.Вывести(ОблЗаголовок);
		ОблШапка = МакетЧека.ПолучитьОбласть("ОблШапка");
		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблШапка);
		ТабличныйДокументЧек.Вывести(ОблШапка);
		ОблБезСкидкиИтого = МакетЧека.ПолучитьОбласть("ОблБезСкидкиИтого");
		ОблСкидка 	= МакетЧека.ПолучитьОбласть("ОблСкидка");
		ОблСтрока 	= МакетЧека.ПолучитьОбласть("ОблСтрока");
		Сумма 	  	= 0;
		СуммаСкидки = 0;

		Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
			Товары 	= Документ[ИмяТаблицы];
			Для Каждого СтрокаТЧ Из Товары Цикл
				ОблСтрока.Параметры.Заполнить(СтрокаТЧ);
				Сумма = Сумма + СтрокаТЧ.Сумма;
				СуммаСкидки = СуммаСкидки + (СтрокаТЧ.Сумма - СтрокаТЧ.СуммаБезСкидки);
				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблСтрока);
				ТабличныйДокументЧек.Вывести(ОблСтрока);
			КонецЦикла;
		Иначе
			ОблСтрока.Параметры.Заполнить(Документ);
			ОблСтрока.Параметры.Сумма 		= Документ.ТовараНаСумму;
			ОблСтрока.Параметры.Количество  = Документ.ТовараВКоличестве;
			СуммаСкидки = Документ.ТовараНаСумму - Документ.СуммаБезСкидки;
			Сумма 		= Документ.ТовараНаСумму;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблСтрока);
			ТабличныйДокументЧек.Вывести(ОблСтрока);
		КонецЕсли;

		Если СуммаСкидки = 0 Тогда
			ОблБезСкидкиИтого.Параметры.СуммаБезСкидки = Сумма;
			ТабличныйДокументЧек.Вывести(ОблБезСкидкиИтого);
			ОблСкидка.Параметры.СуммаСкидки = СуммаСкидки;
			ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблСкидка);
			ТабличныйДокументЧек.Вывести(ОблСкидка);
		КонецЕсли;

		ОблПодвал.Параметры.Сумма 	  = Сумма;
		ОблПодвал.Параметры.Сотрудник = Кассир;
		ОблПодвал.Параметры.Должность = ?(ЗначениеЗаполнено(Кассир), Кассир.Должность, "");
		Если НЕ ЭтоВозврат Тогда
			ОблПодвал.Параметры.ИтогоСтрока = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, Документ.Валюта, ЯзыкДокумента);
		КонецЕсли;

		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОблПодвал);
		ТабличныйДокументЧек.Вывести(ОблПодвал);
		ТабличныйДокументЧек.ИмяПринтера 		  = СтрогоеИмяНефискальногоПринтераЧеков;
		ТабличныйДокументЧек.КлючПараметровПечати = "ЧЕК";
		ТабличныйДокументЧек.ИмяПараметровПечати  = ТабличныйДокументЧек.КлючПараметровПечати;
		МасштабМакетаЧекаВПроцентах = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("МасштабМакетаЧекаВПроцентах");

		Если МасштабМакетаЧекаВПроцентах = 100
			ИЛИ МасштабМакетаЧекаВПроцентах = 0 Тогда

			ТабличныйДокументЧек.АвтоМасштаб   = ИСТИНА;
		Иначе
			ТабличныйДокументЧек.АвтоМасштаб   = ЛОЖЬ;
			ТабличныйДокументЧек.МасштабПечати = МасштабМакетаЧекаВПроцентах;
			ТабличныйДокументЧек.ПолеСправа = 0;
			ТабличныйДокументЧек.ПолеСлева 	= 0;
			ТабличныйДокументЧек.ПолеСверху = 0;
		КонецЕсли;

		Возврат ТабличныйДокументЧек;

	Иначе
		ИННИлиОКПО = ОбщийМодульТекстСервер.ПолучитьОбщееИННИлиОКПО(Организация);
		Если НЕ ПустаяСтрока(ИННИлиОКПО) Тогда
			ИННИлиОКПО = " " + ИННИлиОКПО;
		КонецЕсли;

		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ТОВАРНЫЙ ЧЕК", ЯзыкДокумента) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокумента) + " " + Формат(Дата, "ДЛФ=ДД") + Символы.ПС + "--------------------------------" + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Организация", ЯзыкДокумента) + ": " + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокумента) + ИННИлиОКПО + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид операции", ЯзыкДокумента) + ": " + ?(ЭтоВозврат, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат", ЯзыкДокумента), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продажа", ЯзыкДокумента)) + Символы.ПС;
		Если ЗначениеЗаполнено(Клиент) Тогда
			Текст = Текст + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент", ЯзыкДокумента) + ": " + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Клиент, ЯзыкДокумента) + Символы.ПС;
		КонецЕсли;

		НДС   = 0;
		Сдача = 0;
		Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
			Товары 	= Документ[ИмяТаблицы];
			Текст 	= Текст + "--------------------------------" + Символы.ПС;

			Для Каждого СтрокаТЧ Из Товары Цикл
				СтрокаТовара = "" + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(СтрокаТЧ.Номенклатура, ЯзыкДокумента, Клиент) + Символы.ПС + СтрокаТЧ.Количество + " х " + СтрокаТЧ.Цена + " = " + СтрокаТЧ.Сумма + Символы.ПС;
				Текст = Текст + СтрокаТовара;
				СтавкаНДС 	= ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.СтавкаНДС), СтрокаТЧ.Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
				СуммаБезНДС = СтрокаТЧ.Сумма - СтрокаТЧ.Сумма * (СтавкаНДС / 100);
				НДС = НДС + СтрокаТЧ.Сумма - СуммаБезНДС;

			КонецЦикла;

			ТовараНаСумму 	= Товары.Итог("Сумма");
			Если ЭтоВозврат Тогда
				СуммаСкидки = 0;
			Иначе
				СуммаСкидки = ТовараНаСумму - Товары.Итог("СуммаБезСкидки");
			КонецЕсли;
		Иначе
			ТовараНаСумму 	= Документ.ТовараНаСумму;
			СуммаСкидки 	= ТовараНаСумму - Документ.СуммаБезСкидки;
			СтрокаТовара 	= "" + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Документ.Номенклатура, ЯзыкДокумента, Клиент) + Символы.ПС + Документ.ТовараВКоличестве + " х " + Документ.Цена + " = " + ТовараНаСумму + Символы.ПС;
			Текст = Текст + СтрокаТовара;
			СтавкаНДС 	= ?(ЗначениеЗаполнено(Документ.Номенклатура.СтавкаНДС), Документ.Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
			СуммаБезНДС = Документ.Сумма - Документ.Сумма * (СтавкаНДС / 100);
			НДС = НДС + Документ.Сумма - СуммаБезНДС;

			Если ЭтоВозврат Тогда
				СуммаОплаты = Документ.ВыбылоДенег;
			Иначе
				Если ПустаяСтрока(ТаблицаОплаты) Тогда

					СуммаОплаты = Документ.ПоступилоДенег;
				Иначе
					СуммаОплаты = Документ[ТаблицаОплаты].Итог("Сумма");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Текст = Текст + "--------------------------------" + Символы.ПС;
		Текст = Текст + "         " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГ", ЯзыкДокумента) + " = " + ТовараНаСумму + Символы.ПС +
		"       " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидка", ЯзыкДокумента) + " = " + СуммаСкидки + Символы.ПС +
		"    " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма НДС", ЯзыкДокумента) + " = " + НДС + Символы.ПС;
		Текст = Текст + "--------------------------------" + Символы.ПС;

		Если ВидОплаты = Перечисления.ФормыОплаты.Наличные Тогда
			Текст = Текст + "    " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НАЛИЧНЫМИ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			Текст = Текст + "  " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ПЛАТ.КАРТОЙ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Кредит Тогда
			Текст = Текст + "     " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КРЕДИТОМ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СЕРТИФИКАТОМ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		КонецЕсли;

		Текст = Текст + "--------------------------------" + Символы.ПС;
		Текст = Текст + "        " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СДАЧА", ЯзыкДокумента) + " = " + Сдача + Символы.ПС;
		Текст = Текст + "--------------------------------" + Символы.ПС;
		Текст = Текст + "       " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Кассир", ЯзыкДокумента) + ":  " + Кассир;
	КонецЕсли;

	Возврат Текст;

КонецФункции

Функция   ПодключитьВнешнююОбработку(Знач АдресХранилища) Экспорт
	Возврат ВнешниеОбработки.Подключить(АдресХранилища, , ЛОЖЬ);
КонецФункции

Функция   НайтиДоговорПоПараметрам(Знач Организация, Знач КлиентПоставщик, Знач Дата = Неопределено, Знач ВидЦен = Неопределено) Экспорт

	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Результат = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
	Если НЕ ПараметрыСеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Договора.Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И (&НетОтбораПоОрганизации
		|			ИЛИ Договора.Организация = &Организация)
		|	И (&НетОтбораПоКонтрагенту
		|			ИЛИ Договора.КлиентПоставщик = &КлиентПоставщик)
		|	И (Договора.ДатаОкончания = &ПустаяДата
		|			ИЛИ Договора.ДатаОкончания > &Дата)
		|	И (&НетОтбораПоВидуЦен
		|			ИЛИ Договора.ВидЦен = &ВидЦен)
		|УПОРЯДОЧИТЬ ПО Договора.ДатаЗаключения,
		|	Договора.ДатаОкончания УБЫВ";
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("НетОтбораПоКонтрагенту", НЕ ЗначениеЗаполнено(КлиентПоставщик));
		Запрос.УстановитьПараметр("НетОтбораПоОрганизации", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС") И НЕ ЗначениеЗаполнено(Организация));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НетОтбораПоВидуЦен", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") И НЕ ЗначениеЗаполнено(ВидЦен));
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
			Результат = ОбщийМодульСерверПривилегия.СоздатьДоговор(Организация, КлиентПоставщик, Дата, ВидЦен);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Подобрать Договор

Функция   ПоКурсу(Знач СуммаВОригинальнойВалюте, Знач ВВалюту = Неопределено, Знач ИзВалюты = Неопределено, Знач НаДату = Неопределено, Знач СтрогийКурс = 0) Экспорт

	Результат = 0;

	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВалют")
		ИЛИ ВВалюту = ИзВалюты Тогда

		Результат = СуммаВОригинальнойВалюте;

	Иначе
		Если НаДату = Неопределено Тогда
			НаДату = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;

		ОсновнаяВалюта = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта");
		ЗначениеЗаполненоИзВалюты = ЗначениеЗаполнено(ИзВалюты) И НЕ ИзВалюты = ОсновнаяВалюта;
		ЗначениеЗаполненоВалюта   = ЗначениеЗаполнено(ВВалюту) И НЕ ВВалюту = ОсновнаяВалюта;

		Если ЗначениеЗаполненоВалюта
			И ЗначениеЗаполненоИзВалюты Тогда

			Результат = СуммаВОригинальнойВалюте / (ОбщийМодульПовтор.ПолучитьТекущийКурс(ВВалюту, НаДату) * ?(СтрогийКурс = 0 ИЛИ СтрогийКурс = 1, ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату), СтрогийКурс)) ;
		ИначеЕсли ЗначениеЗаполненоВалюта Тогда // к базовой
			Результат = (СуммаВОригинальнойВалюте / ?(СтрогийКурс = 0 ИЛИ СтрогийКурс = 1, ОбщийМодульПовтор.ПолучитьТекущийКурс(ВВалюту, НаДату), СтрогийКурс));
		ИначеЕсли ЗначениеЗаполненоИзВалюты Тогда // из базовой
			Результат = (СуммаВОригинальнойВалюте * ?(СтрогийКурс = 0 ИЛИ СтрогийКурс = 1, ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату), СтрогийКурс));
		Иначе // нет валют
			Результат = СуммаВОригинальнойВалюте;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // По Курсу

Функция   ПолнаяВерсияКонфигурации() Экспорт

	Результат = Найти(Метаданные.Версия, "F") = 0;
	ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("КонфигурацияВРаботе", Результат, ИСТИНА, ИСТИНА);

	Возврат Результат;

КонецФункции // Полная Версия

Функция   ПолучитьВерсиюКонфигурации() Экспорт
	Возврат Метаданные.Версия;
КонецФункции

Функция   ПолучитьДатуПоследнегоРасчета(Знач Сотрудник, Знач Дата) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ДатаПоследнегоРасчета", '00010101000000');
	Результат.Вставить("ПрошлыйПериодДатаНачала", '00010101000000');
	Результат.Вставить("ПрошлыйПериодДатаОкончания", '00010101000000');

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвиженияДенегЗарплата.Ссылка.Дата КАК Дата,
	|	ДвиженияДенегЗарплата.ДатаНачала,
	|	ДвиженияДенегЗарплата.ДатаОкончания
	|ИЗ Документ.ДвиженияДенег.Зарплата КАК ДвиженияДенегЗарплата
	|ГДЕ ДвиженияДенегЗарплата.Сотрудник = &Сотрудник
	|	И ДвиженияДенегЗарплата.Ссылка.НачислениеИВыплатаЗаработнойПлаты = ИСТИНА
	|	И ДвиженияДенегЗарплата.Ссылка.Проведен = ИСТИНА
	|	И ДвиженияДенегЗарплата.Ссылка.Дата < &Дата
	|УПОРЯДОЧИТЬ ПО Дата УБЫВ";

	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Дата", Дата);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.ДатаПоследнегоРасчета 		= ВыборкаДетальныеЗаписи.Дата;
			Результат.ПрошлыйПериодДатаНачала 		= ВыборкаДетальныеЗаписи.ДатаНачала;
			Результат.ПрошлыйПериодДатаОкончания 	= ВыборкаДетальныеЗаписи.ДатаОкончания;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьДвиженияТовара(Знач Номенклатура, Знач ДатаНачала = '00010101', Знач ДатаОкончания = '00010101') Экспорт

	Если ДатаОкончания = '00010101' Тогда
		ДатаОкончания = КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;

	Движения = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(ТоварыОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ИЗ РегистрНакопления.Товары.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ТоварыОбороты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ПродажиОбороты";

	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Движения = Движения + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;
	КонецЕсли;

	Возврат Движения;

КонецФункции

Функция   ПолучитьДолгДоговора(Знач Договор, Знач Дата) Экспорт

	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Долг = 0;
	Иначе
		КлиентПоставщик = Договор.КлиентПоставщик;

		Запрос = Новый Запрос;

		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;

			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
		Иначе
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;

			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыОстатки";
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("Договор", Договор);

		РезультатЗапроса = Запрос.Выполнить();
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Долг;

КонецФункции

Функция   ПолучитьДолгКлиентаПоставщика(Знач КлиентПоставщик, Знач Дата, Знач Договор = Неопределено, Знач ВернутьСтрокуДляРеализации = ЛОЖЬ, Знач ВалютаОсновная = Неопределено, Знач ЯзыкДокументов = Неопределено) Экспорт

	Результат = Неопределено;

	Если НЕ ЗначениеЗаполнено(КлиентПоставщик)
		ИЛИ КлиентПоставщик.Предопределенный Тогда

		Долг = 0;
	Иначе

		Запрос = Новый Запрос;

		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;

			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, Поставщик = &КлиентПоставщик %%1) КАК РасчетыСПоставщикамиОстатки";
		Иначе
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;

			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, Клиент = &КлиентПоставщик %%1) КАК РасчетыОстатки";
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И ЗначениеЗаполнено(Договор) Тогда

			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И Договор = &Договор ");
			Запрос.УстановитьПараметр("Договор", Договор);
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);

		РезультатЗапроса = Запрос.Выполнить();
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ВернутьСтрокуДляРеализации Тогда
		Если ЯзыкДокументов = Неопределено Тогда
			ЯзыкДокументов = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
		КонецЕсли;

		Если Долг = 0 Тогда
			Результат = "";
		ИначеЕсли Долг > 0 Тогда
			Результат = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Долг до продажи составляет", ЯзыкДокументов) + ": " + Долг + " " + ВалютаОсновная;
		Иначе
			Результат = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Переплата до продажи составила", ЯзыкДокументов) + ": " + СокрЛП(-Долг) + " " + ВалютаОсновная;
		КонецЕсли;
	Иначе
		Результат = Долг;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьДолгКлиентаПоставщикаСОтсрочкой(Знач КлиентПоставщик, Знач Дата, Знач Договор = Неопределено) Экспорт

	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
		Долг = ПолучитьДолгКлиентаПоставщика(КлиентПоставщик, Дата, Договор);
	Иначе

		Если НЕ ЗначениеЗаполнено(КлиентПоставщик)
			ИЛИ КлиентПоставщик.Предопределенный Тогда

			Долг = 0;
		Иначе

			Запрос = Новый Запрос;

			Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
					Возврат 0;
				КонецЕсли;

				Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой.Остатки(&ДатаОстатка, Поставщик = &КлиентПоставщик %%1) КАК РасчетыСПоставщикамиОстатки";
			Иначе
				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда

					Возврат 0;
				КонецЕсли;

				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСОтсрочкой.Остатки(&ДатаОстатка, Клиент = &КлиентПоставщик %%1) КАК РасчетыОстатки";
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И ЗначениеЗаполнено(Договор) Тогда

				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И Договор = &Договор ");
				Запрос.УстановитьПараметр("Договор", Договор);
			Иначе
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
			КонецЕсли;

			Запрос.УстановитьПараметр("ДатаОстатка", Дата);
			Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);

			РезультатЗапроса = Запрос.Выполнить();
			Долг = 0;
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Долг;

КонецФункции

Функция   ПолучитьЗначениеКонстанты(Знач ИмяКонстанты) Экспорт
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции

Функция   ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(Знач ВидИнформации) Экспорт
	Возврат ВидИнформации.ЗначениеПоУмолчанию;
КонецФункции

Функция   ПолучитьЗначениеПараметраСеанса(Знач ИмяПараметра) Экспорт

	Попытка
		Если ИмяПараметра = "НеМожетМенятьЦены" Тогда

			Ответ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002300", , , );

			Если НЕ Ответ Тогда
				Возврат ПараметрыСеанса[ИмяПараметра];
			Иначе

				Возврат ИСТИНА;
			КонецЕсли;
		Иначе
			Возврат ПараметрыСеанса[ИмяПараметра];
		КонецЕсли;

	Исключение
		Возврат Неопределено; // параметры не инициализированы (например при записи/регистрации пользователя
	КонецПопытки;

КонецФункции

Функция   ПолучитьЗначениеРеквизита(Знач ЭлементСРеквизитом, Знач ИмяРеквизита = "Наименование") Экспорт

	Если ЗначениеЗаполнено(ЭлементСРеквизитом) Тогда
		Возврат ЭлементСРеквизитом[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция   ПолучитьИмяДополнительногоРеквизита(Знач ОбъектВладелец) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЭтоРеквизитДляОбъекта", Перечисления.ОбъектыДляДополнительныхРеквизитов.ПустаяСсылка());
	ТипЗнчОбъектВладелец = ТипЗнч(ОбъектВладелец);
	Результат.Вставить("НаименованиеОбъектаВладельца", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(ТипЗнчОбъектВладелец)));

	Если ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ВидыЦен") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаВидыЦен ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляНоменклатурыНоменклатурнойГруппы;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Локации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаЛокаций;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Договора") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаДоговора ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ЗаметкиИНапоминания") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляЗаметокИНапоминаний;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Изображения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляПрикрепленныхИзображений;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Клиенты") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаКлиенты;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Номенклатура") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаНоменклатура ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Организации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОрганизации;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ТаблицыДанных") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаТаблицыДанных;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ОбъектыКлиентов") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОбъектыКлиентов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ПартииПриобретения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПартииПриобретения ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Поставщики") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПоставщики ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Производители") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПроизводители ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Регионы") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаРегионы ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Склады") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСклады ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Сотрудники") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСотрудники ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СредстваПредприятия") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСредств;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СтатьиДвиженияДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСтатьиДвиженияДенег ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ХранилищаДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаХранилищаДенег ;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Спецификации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСпецификаций;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ГруппыАналогов") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаГруппАналогов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.Подразделения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПодразделений;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.СертификатыГигиеническиеЗаключения") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСертификатов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ДвиженияДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаДвиженияДенег;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.Инвентаризации") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаИнвентаризация;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКорректировкаИВводОстатков;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПеремещенияТоваров;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПланыПродаж") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланПродаж;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПланыДоходовИРасходовДенег") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланДоходовИРасходов;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПоступлениеТовара;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.РасходыТовара") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаРасходТовара;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаВыполненияРабот;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.УстановкиЦен") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаУстановкаЦен;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.Комплектация") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКомплектации;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ОтчетыКомиссионеров") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОтчетыКомиссионеров;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОказанияУслугЗаВремя;
	ИначеЕсли ТипЗнчОбъектВладелец = Тип("СправочникСсылка.ВидыСредствПредприятия") Тогда
		Результат.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляВидаСредств;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить Имя Дополнительного Реквизита

Функция   ПолучитьИмяЗначенияПеречисления(Знач СсылкаНаЗначение) Экспорт

	ИмяПеречисления = СсылкаНаЗначение.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(СсылкаНаЗначение);

	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;

КонецФункции

Функция   ПолучитьКлиентовСотрудника(Знач ОбъектРегионы, Знач ОбъектЛокации, Знач Категории) Экспорт

	Клиенты = Новый СписокЗначений;
	СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов");
	СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов");

	Если СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ ((Клиенты.Регион В(&Регионы)
		|	И Клиенты.Локация В(&Локации)) ИЛИ (Клиенты.Регион В(&Регионы)
		|	И Клиенты.Локация = &ПустаяЛокация))
		|	И НЕ Клиенты.Ссылка В (&Клиенты)";
		Запрос.УстановитьПараметр("ПустаяЛокация", ПредопределенноеЗначение("Справочник.Локации.ПустаяСсылка"));
		Запрос.УстановитьПараметр("Регион", ОбъектРегионы);
		Запрос.УстановитьПараметр("Локации", ОбъектЛокации);
		Запрос.УстановитьПараметр("Клиенты", Клиенты);

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Клиенты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);

		КонецЦикла;
	КонецЕсли;

	Если СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.Категория В(&Категории)
		|	И НЕ Клиенты.Ссылка В (&Клиенты)";
		Запрос.УстановитьПараметр("Категории", Категории);
		Запрос.УстановитьПараметр("Клиенты", Клиенты);

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Клиенты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);

		КонецЦикла;
	КонецЕсли;

	Возврат Клиенты;

КонецФункции

Функция   ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Знач Поставщик, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт

	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;

	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.КоличествоОборот Из РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, , Поставщик = &Поставщик) КАК ЗакупкиОбороты ";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Количество = 0;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;
	КонецЕсли;

	Возврат Количество;

КонецФункции

Функция   ПолучитьКоличествоПоУмолчанию(Знач Номенклатура, Знач ИзАналога = ЛОЖЬ) Экспорт

	Количество = 0;

	Если ИзАналога
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ГруппыАналоговТовары.Количество
		|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
		|ГДЕ ГруппыАналоговТовары.Номенклатура = &Номенклатура
		|УПОРЯДОЧИТЬ ПО ГруппыАналоговТовары.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Количество = ВыборкаДетальныеЗаписи.Количество;
		КонецЕсли;
	КонецЕсли;

	Если Количество = 0 Тогда

		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок")
			ИЛИ ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) Тогда

			Количество = 1;
		Иначе
			Количество = ?(Номенклатура.КоличествоПоУмолчанию = 0, 1, Номенклатура.КоличествоПоУмолчанию);
		КонецЕсли;
	КонецЕсли;

	Возврат Количество;

КонецФункции

Функция   ПолучитьКоличествоПродажЗаПериод(Знач Номенклатура, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт

	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;

	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот Из РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ПродажиОбороты ";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Количество = 0;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;

		КонецЦикла;
	КонецЕсли;

	Возврат Количество;

КонецФункции

Функция   ПолучитьКоличествоПродажКлиентаЗаПериод(Знач Клиент, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт

	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;

	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот Из РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Клиент = &Клиент) КАК ПродажиОбороты ";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Количество = 0;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;
	КонецЕсли;

	Возврат Количество;

КонецФункции

Функция   НайтиКонтрагентаПоШтрихКоду(Знач ДанныеШтрихкода, Знач ЭтоТочноКлиент = ЛОЖЬ, Знач ЭтоТочноПоставщик = ЛОЖЬ, Знач ЭтоОрганизация = ЛОЖЬ, Знач ЭтоПозиция = ЛОЖЬ) Экспорт

	Контрагент = Неопределено;
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрихкода;
	Иначе
		ШтрихКод = ДанныеШтрихкода.ШтрихКод;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭ.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, ЛОЖЬ, ИСТИНА);
	КонецЕсли;

	Если ЭтоПозиция Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПозицииДляОказанияУслугЗаВремяНомера.Ссылка
		|ИЗ Справочник.ПозицииДляОказанияУслугЗаВремяНомера КАК ПозицииДляОказанияУслугЗаВремяНомера
		|ГДЕ (ПозицииДляОказанияУслугЗаВремяНомера.ОсновнойШтрихКод = &ОсновнойШтрихКод
		|			ИЛИ ПозицииДляОказанияУслугЗаВремяНомера.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО ПозицииДляОказанияУслугЗаВремяНомера.ПометкаУдаления";
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
		Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
	ИначеЕсли ЭтоОрганизация Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Организации.Ссылка
		|ИЗ Справочник.Организации КАК Организации
		|ГДЕ (Организации.ОсновнойШтрихКод = &ОсновнойШтрихКод
		|			ИЛИ Организации.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
		Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.ссылка;
		КонецЕсли;
	Иначе

		Если ЭтоТочноКлиент
			ИЛИ НЕ ЭтоТочноПоставщик Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
			|ИЗ Справочник.Клиенты КАК Клиенты
			|ГДЕ (Клиенты.ОсновнойШтрихКод = &ОсновнойШтрихКод
			|			ИЛИ Клиенты.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Клиенты.ПометкаУдаления"	;
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.ссылка;
			КонецЕсли;
		КонецЕсли;

		Если ЭтоТочноПоставщик
			ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Поставщики.Ссылка
			|ИЗ Справочник.Поставщики КАК Поставщики
			|ГДЕ (Поставщики.ОсновнойШтрихКод = &ОсновнойШтрихКод
			|			ИЛИ Поставщики.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Поставщики.ПометкаУдаления"	;
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", НРег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", ВРег(ШтрихКод));

			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Контрагент;

КонецФункции

Функция   ПолучитьЛьготнуюЦену(Знач Номенклатура, Знач Количество = -1, Знач Цена, Знач ВидЦен = Неопределено) Экспорт

	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже") Тогда

		Если ЗначениеЗаполнено(ВидЦен)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда

			Коэффициент = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;
		Иначе
			Коэффициент = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
		КонецЕсли;

		Если Количество = -1 Тогда // выясняем цену без планки
			Возврат Цена * Коэффициент;
		Иначе
			планка = Номенклатура.ПланкаКоличестваДляЛьготнойЦены;

			Если Количество >= Планка Тогда
				Возврат Цена * Коэффициент;
			Иначе
				Возврат Цена;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Цена;
	КонецЕсли;

КонецФункции // Получить Льготную Цену

Функция   ПолучитьОбъемПрибылиЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено) Экспорт

	Сумма  = 0;

	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Сотрудник)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И НЕ сотрудник.Склады.количество() = 0 Тогда

		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР
		|		КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|			ТОГДА ВаловаяПрибыль.Сумма

		|		Иначе -ВаловаяПрибыль.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ ВаловаяПрибыль.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ВаловаяПрибыль.Склад В(&Склады)";
		Запрос.УстановитьПараметр("Склады", Склады);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход - ВаловаяПрибыльОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ВаловаяПрибыльОбороты";
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;
	КонецЕсли;

	Возврат Сумма;

КонецФункции

Функция   ПолучитьОбъемРеализацииЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено, Знач ЛичнаяРеализация = ИСТИНА) Экспорт

	Сумма  = 0;
	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Сотрудник)
		И ЛичнаяРеализация Тогда

		Запрос.Текст = "ВЫБРАТЬ ПродажиСотрудников.Сумма КАК Сумма
		|ИЗ РегистрНакопления.ПродажиСотрудников КАК ПродажиСотрудников
		|ГДЕ ПродажиСотрудников.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиСотрудников.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	ИначеЕсли ЗначениеЗаполнено(Сотрудник)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И НЕ сотрудник.Склады.количество() = 0 Тогда

		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		Запрос.Текст = "ВЫБРАТЬ Продажи.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Регистратор.Склад В(&Склады)
		|	И Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("Склады", Склады);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаПриход - ПродажиОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиОбороты";
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;
	КонецЕсли;

	Возврат Сумма;

КонецФункции

Функция   ПолучитьОсновноеИзображениеОбъекта(Знач СвязанныйОбъект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Изображения.Ссылка
	|ИЗ Справочник.Изображения КАК Изображения
	|ГДЕ Изображения.СвязанныйОбъект = &СвязанныйОбъект
	|УПОРЯДОЧИТЬ ПО Изображения.ЭтоОсновноеИзображениеОбъекта УБЫВ";
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЕсли;

КонецФункции // Получить Основное Изображение Объекта

Функция   ПолучитьОстатокДенег(Знач ДатаОстатка = Неопределено, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач ВОсновнойВалюте = Неопределено) Экспорт

	Если ДатаОстатка = Неопределено Тогда
		ДатаОстатка = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Если ВОсновнойВалюте = Неопределено Тогда
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВОсновнойВалюте = ЛОЖЬ;
		Иначе
			ВОсновнойВалюте = ИСТИНА;
		КонецЕсли;
	КонецЕсли;

	СуммаОстаток = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ДеньгиОстатки." + ?(ВОсновнойВалюте, "СуммаОстаток", "СуммаВВалютеОстаток") + " КАК СуммаОстаток Из РегистрНакопления.Деньги.Остатки(&ДатаОстатка, ИСТИНА %1% %2% %3%) КАК ДеньгиОстатки";
	Если НЕ ФормаОплаты = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И ФормаОплаты = &ФормаОплаты ");
		Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;

	Если НЕ Валюта = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", " И Валюта = &Валюта ");
		Запрос.УстановитьПараметр("Валюта", Валюта);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", "");
	КонецЕсли;

	Если НЕ ХранилищеДенег = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", " И ХранилищеДенег = &ХранилищеДенег ");
		Запрос.УстановитьПараметр("ХранилищеДенег", ХранилищеДенег);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СуммаОстаток = СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаОстаток;

КонецФункции // Остаток Денег

Функция   ПолучитьОстатокТовара(Знач номенклатура, Знач Склад = Неопределено, Знач Дата, Знач ЭтоРасходТовара = ЛОЖЬ) Экспорт
	Возврат ОстатокТовара(Склад, Номенклатура, Дата, ЛОЖЬ, ЭтоРасходТовара);
КонецФункции

Функция   ПолучитьПодразделениеСотрудника(Знач Сотрудник, Знач Дата = Неопределено) Экспорт

	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияСостав.Ссылка,
	|	ПодразделенияСостав.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ Справочник.Подразделения.Состав КАК ПодразделенияСостав
	|ГДЕ (ПодразделенияСостав.НачалоРаботы = &ПустаяДата
	|			ИЛИ ПодразделенияСостав.НачалоРаботы <= &Дата)
	|	И (ПодразделенияСостав.КонецРаботы = &ПустаяДата
	|			ИЛИ ПодразделенияСостав.КонецРаботы >= &Дата)
	|	И ПодразделенияСостав.Сотрудник = &Сотрудник
	|УПОРЯДОЧИТЬ ПО ПометкаУдаления";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		Результат = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьПоследнююЦенуРеализации(Знач Номенклатура, Знач Клиент = Неопределено, Знач Договор = Неопределено, Знач Дата = Неопределено) Экспорт

	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Сумма / ВЫБОР
	|		КОГДА Продажи.Количество = 0
	|			ТОГДА 1

	|		Иначе Продажи.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Период < &Дата ";

	Если ЗначениеЗаполнено(Клиент) Тогда
		Запрос.Текст = Запрос.Текст + "	И Продажи.Клиент = &Клиент	";
		Запрос.УстановитьПараметр("Клиент", Клиент);
	КонецЕсли;

	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.Текст = Запрос.Текст + "	И Продажи.Договор = &Договор	";
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "	И Продажи.Номенклатура = &Номенклатура
	|УПОРЯДОЧИТЬ ПО Продажи.Период УБЫВ";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Возврат ВыборкаДетальныеЗаписи.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция   ПолучитьПроцентСкидкиНаСервере(Знач ОбъектСкидки, Знач Количество = 0, Знач ВидЦен = Неопределено, Знач Клиент = Неопределено, Знач Ваучер = Неопределено, Знач Склад = Неопределено, Знач Дата = Неопределено) Экспорт

	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		ТипОбъНом 	= ЛОЖЬ;
		ТипСпрКл 	= ЛОЖЬ;
		ТипСпрНом 	= ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Номенклатура");

		Если НЕ ТипСпрНом Тогда
			ТипОбъНом = ТипЗнч(ОбъектСкидки) = Тип("СправочникОбъект.Номенклатура");
			Если НЕ ТипОбъНом Тогда
				ТипСпрКл = ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Клиенты");
			КонецЕсли;
		КонецЕсли;

		ПроцентСкидкиКонтра = 0;

		Если НЕ ТипОбъНом
			И НЕ ТипСпрКл
			И НЕ ТипСпрНом Тогда

			Возврат 0;
		Иначе

			Если ТипСпрКл
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда

				ПроцентСкидкиКонтра = ОбъектСкидки.ПроцентСкидки ;
			ИначеЕсли ЗначениеЗаполнено(Клиент)
				И ТипЗнч(Клиент) = Тип("СправочникСсылка.Клиенты")
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда

				ПроцентСкидкиКонтра = Клиент.ПроцентСкидки ;

				Если Дата = Неопределено Тогда
					Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				КонецЕсли;

				Если ЗначениеЗаполнено(Клиент.ДатаРождения)
					И месяц(Клиент.ДатаРождения) = месяц(Дата)
					И день(Клиент.ДатаРождения) = день(Дата) Тогда

					ПроцентСкидкиКонтра = ПроцентСкидкиКонтра + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерСкидкиНаДатаРождения");
				КонецЕсли;
			КонецЕсли;

			ПроцентСкидкиНомы = 0;

			Если (ТипСпрНом
				ИЛИ ТипОбъНом)
				И НЕ ОбъектСкидки.ЭтоГруппа
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры") Тогда

				ПроцентСкидкиНомы = ОбъектСкидки.ПроцентСкидки ;
			КонецЕсли;

			Если НЕ ПроцентСкидкиНомы = 0
				И НЕ ПроцентСкидкиКонтра = 0
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИНоменклатуры") Тогда

				ПроцентСкидки = ПроцентСкидкиНомы + ПроцентСкидкиКонтра;
			ИначеЕсли ПроцентСкидкиНомы > ПроцентСкидкиКонтра Тогда
				ПроцентСкидки = ПроцентСкидкиНомы ;
			Иначе
				ПроцентСкидки = ПроцентСкидкиКонтра;
			КонецЕсли;

			Если НЕ Ваучер = Неопределено Тогда
				ПроцентСкидкиОтВаучера = Ваучер.НоминалПроцент;
				Если ТипСпрНом Тогда

					Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
						И ЗначениеЗаполнено(ОбъектСкидки.НоменклатурнаяГруппа)
						И Ваучер.ДляНоменклатурныхГрупп.Количество() = 0 Тогда

						Для Каждого СтрокаУсловия Из Ваучер.ДляНоменклатурныхГрупп Цикл
							Если ОбъектСкидки.НоменклатурнаяГруппа = СтрокаУсловия.НоменклатурнаяГруппа Тогда
								ПроцентСкидкиОтВаучера = СтрокаУсловия.ПроцентСкидки;
								Прервать;
							КонецЕсли;

						КонецЦикла;
					КонецЕсли;

					Если Ваучер.ДляНоменклатурыИЕеГрупп.Количество() = 0 Тогда
						Для Каждого СтрокаУсловия Из Ваучер.ДляНоменклатурыИЕеГрупп Цикл
							Номенклатура = СтрокаУсловия.Номенклатура;

							Если (ОбщийМодульПовтор.ЭтоГруппа(Номенклатура)
								И ОбъектСкидки.ПринадлежитЭлементу(Номенклатура))
								ИЛИ (НЕ ОбщийМодульПовтор.ЭтоГруппа(Номенклатура)
								И Номенклатура = ОбъектСкидки) Тогда

								ПроцентСкидкиОтВаучера = СтрокаУсловия.ПроцентСкидки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
					И ЗначениеЗаполнено(Склад)
					И Ваучер.ДляСкладов.Количество() = 0 Тогда

					Для Каждого СтрокаУсловия Из Ваучер.ДляСкладов Цикл
						Если Склад = СтрокаУсловия.Склад Тогда
							ПроцентСкидкиОтВаучера = СтрокаУсловия.ПроцентСкидки;
							Прервать;
						КонецЕсли;

					КонецЦикла;
				КонецЕсли;

				Если ПроцентСкидки < ПроцентСкидкиОтВаучера Тогда
					ПроцентСкидки = ПроцентСкидкиОтВаучера;
				КонецЕсли;
			КонецЕсли;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьСкидкиПериода") Тогда
				ПроцентСкидкиПериода = ОбщийМодульТоварСервер.ПолучитьПроцентСкидкиПериода(ОбъектСкидки, Дата, Склад);
				Если ПроцентСкидки < ПроцентСкидкиПериода Тогда
					ПроцентСкидки = ПроцентСкидкиПериода;
				КонецЕсли;
			КонецЕсли;

			Если НЕ количество = 0 // надо проверять льготную цену
				И НЕ ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены = 0
				И Количество >= ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар") Тогда

				ПроцентРасчетаЛьготнойЦены = 0;

				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
					Если ЗначениеЗаполнено(ВидЦен) Тогда
						ПроцентРасчетаЛьготнойЦены = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;
					КонецЕсли;
				Иначе
					ПроцентРасчетаЛьготнойЦены = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
				КонецЕсли;

				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены") Тогда
					Возврат ПроцентРасчетаЛьготнойЦены + ПроцентСкидки;
				ИначеЕсли ПроцентРасчетаЛьготнойЦены > ПроцентСкидки Тогда
					возврат ПроцентРасчетаЛьготнойЦены;
				Иначе

					возврат ПроцентСкидки
				КонецЕсли;
			Иначе

				Возврат ПроцентСкидки
			КонецЕсли;
		КонецЕсли;

	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция   ПолучитьПустоеЗначениеДополнительногоРеквизита(Знач ТипДополнительногоРеквизита, Знач ЭтоОбъект = ЛОЖЬ) Экспорт

	Если ЭтоОбъект Тогда
		ТипДополнительногоРеквизита = ТипДополнительногоРеквизита.ТипДополнительногоРеквизита;
	КонецЕсли;

	Результат = ЛОЖЬ;

	Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Булево Тогда
		Результат = ЛОЖЬ;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
		Результат = '00010101000000';
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаДокумент Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
		Результат = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
		Результат = "";
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
		Результат = 0;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьСложнуюЦену(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = ИСТИНА, Знач Количество = 0, Знач ЭтоПроверкаЦены = ЛОЖЬ, Знач Вручную = ЛОЖЬ, Знач Ссылка = Неопределено, Знач ЕдиницаИзмерения = Неопределено, Знач ГлобальныйПересчет = ЛОЖЬ) Экспорт

	НоменклатураЦена 	 = 0;
	ТипЗнчНоменклатура 	 = ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	ДанныеФормыСтруктура = НЕ ТипЗнчНоменклатура И ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура");

	Если НЕ ДанныеФормыСтруктура
		И (ВидЦен = Неопределено ИЛИ ЗначениеЗаполнено(ВидЦен))
		И ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда

		Если ВидЦен = Неопределено Тогда
			ВидЦенОсновнойВалюты = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ГлавныйВидЦен");

			Если ВидЦенОсновнойВалюты.Зависимая
				ИЛИ НЕ ВидЦенОсновнойВалюты.ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") Тогда

				РезультатЗапросаВЦ = ОбщийМодульПовтор.ЗапросВЦ();

				Если НЕ РезультатЗапросаВЦ.Пустой() Тогда
					ВыборкаДетальныеЗаписиВЦ = РезультатЗапросаВЦ.Выбрать();
					ВыборкаДетальныеЗаписиВЦ.Следующий();
					ВидЦенОсновнойВалюты 	 = ВыборкаДетальныеЗаписиВЦ.Ссылка;
				Иначе

					Возврат 0;
				КонецЕсли;
			КонецЕсли;

			ВидЦен = ВидЦенОсновнойВалюты.Ссылка;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.Ссылка);

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
			И ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда

			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Цена,
			|	Цены.ДокументРегистрации,
			|	Цены.Вручную
			|ИЗ РегистрСведений.Цены КАК Цены
			|ГДЕ Цены.Номенклатура = &Номенклатура
			|	И Цены.ВидЦен = &ВидЦен
			|	И Цены.ЕдиницаИзмерения = &ЕдиницаИзмерения
			|	И Цены.Период <= &Дата
			|УПОРЯДОЧИТЬ ПО Цены.Период УБЫВ";
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена;

					Если ЭтоПроверкаЦены
						И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка
						И вручную = ВыборкаДетальныеЗаписи.вручную Тогда // для сверки с ценой

						НоменклатураЦена = -1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Цена,
				|	Цены.ДокументРегистрации,
				|	Цены.Вручную,
				|	Цены.ЕдиницаИзмерения
				|ИЗ РегистрСведений.Цены КАК Цены
				|ГДЕ Цены.Номенклатура = &Номенклатура
				|	И Цены.ВидЦен = &ВидЦен
				|	И Цены.Период <= &Дата
				|УПОРЯДОЧИТЬ ПО Цены.Период УБЫВ";

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения) Тогда
							НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена / ?(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.количество = 0, 1, ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.количество) * ?(ЕдиницаИзмерения.Количество = 0, 1, ЕдиницаИзмерения.Количество);
						Иначе
							НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена * ?(ЕдиницаИзмерения.Количество = 0, 1, ЕдиницаИзмерения.Количество);
						КонецЕсли;

						Если ЭтоПроверкаЦены
							И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка
							И вручную = ВыборкаДетальныеЗаписи.вручную Тогда // для сверки с ценой

							НоменклатураЦена = -1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Цены.Цена,
			|	Цены.Вручную,
			|	Цены.ДокументРегистрации
			|ИЗ РегистрСведений.Цены КАК Цены
			|ГДЕ Цены.Период <= &Дата
			|	И Цены.Номенклатура = &Номенклатура
			|	И Цены.ВидЦен = &ВидЦен
			|УПОРЯДОЧИТЬ ПО Цены.Период УБЫВ";

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена;

					Если ЭтоПроверкаЦены
						И вручную = ВыборкаДетальныеЗаписи.вручную
						И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка Тогда // для сверки с ценой

						НоменклатураЦена = -1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Количество = 0 // надо проверять льготную цену
			И НЕ НоменклатураЦена = 0
			И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
			И Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
			И (НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
			ИЛИ НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда

			ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ?(ЗначениеЗаполнено(ВидЦен), ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию"));
			НоменклатураЦена = НоменклатураЦена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (НоменклатураЦена / 100);
		КонецЕсли;

		Если НоменклатураЦена = 0 // не 100 % скидка
			И НЕ ГлобальныйПересчет
			И ВыводитьОшибку
			И ПараметрыСеанса.ИспользоватьЦеныИСуммыВСеансе
			И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура.Ссылка + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена! Вид цен") + ": " + ВидЦен + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на дату") + " " + Дата);
		КонецЕсли;
	КонецЕсли;

	Возврат НоменклатураЦена;

КонецФункции

Функция   ПолучитьСостояниеЗаказа(Знач Заказ, Знач Дата = Неопределено) Экспорт

	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("смена", '00010101');
	Если ЗначениеЗаполнено(Заказ.ссылка) Тогда

		Запрос = Новый Запрос;

		Если ТипЗнч(Заказ.ссылка) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.СостояниеЗаказаПоставщику КАК Состояние,
			|	СостоянияЗаказовСрезПоследних.Период КАК Смена
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаПоставщику.Формируется);
		Иначе
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.Период КАК Смена,
			|	СостоянияЗаказовСрезПоследних.СостояниеЗаказаКлиента КАК Состояние
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";

			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);
		КонецЕсли;

		Если Дата = Неопределено Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;

		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Заказ", Заказ);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			СтруктураРезультат.состояние = ВыборкаДетальныеЗаписи.Состояние;
			СтруктураРезультат.Смена     = ВыборкаДетальныеЗаписи.смена;
		Иначе
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);
		КонецЕсли;
	Иначе
		СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);
	КонецЕсли;

	Возврат СтруктураРезультат;

КонецФункции // Получить Состояние Заказа

Функция   НайтиСотрудникаПоШтрихКоду(Знач ОсновнойШтрихКод) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Сотрудники.Ссылка
	|ИЗ Справочник.Сотрудники КАК Сотрудники
	|ГДЕ Сотрудники.ОсновнойШтрихКод = &ОсновнойШтрихКод";
	Запрос.УстановитьПараметр("ОсновнойШтрихКод", ОсновнойШтрихКод);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();

		Возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция   ПолучитьСотрудниковКлиента(Знач ОбъектРегион, Знач ОбъектЛокация, Знач Категория) Экспорт

	Сотрудники = Новый СписокЗначений;
	СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов");
	СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов 	   = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов");

	Если СобственныеПродавцыМогутБытьОграниченыПеречнемРегионовКлиентов
		И ЗначениеЗаполнено(ОбъектРегион) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ СотрудникиРегионы.Ссылка
		|ИЗ Справочник.Сотрудники.Регионы КАК СотрудникиРегионы
		|ГДЕ ((СотрудникиРегионы.Регион = &Регион
		|	И СотрудникиРегионы.Локация = &Локация) ИЛИ (СотрудникиРегионы.Регион = &Регион
		|	И СотрудникиРегионы.Локация = &ПустаяЛокация))
		|	И НЕ СотрудникиРегионы.Ссылка В(&Сотрудники)";
		ПустаяЛокация = ПредопределенноеЗначение("Справочник.Локации.ПустаяСсылка");
		Запрос.УстановитьПараметр("Локация", ?(ЗначениеЗаполнено(ОбъектЛокация), ОбъектЛокация, ПустаяЛокация));
		Запрос.УстановитьПараметр("ПустаяЛокация", ПустаяЛокация);
		Запрос.УстановитьПараметр("Регион", ОбъектРегион);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сотрудники.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;

	Если СобственныеПродавцыМогутБытьОграниченыКатегориямиКлиентов
		И ЗначениеЗаполнено(Категория) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ СотрудникиКатегории.Ссылка
		|ИЗ Справочник.Сотрудники.Категории КАК СотрудникиКатегории
		|ГДЕ СотрудникиКатегории.Категория = &Категория
		|	И НЕ СотрудникиКатегории.Ссылка В(&Сотрудники)";
		Запрос.УстановитьПараметр("Категория", Категория);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сотрудники.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;

	Возврат Сотрудники;

КонецФункции

Процедура ПолучитьСписокВалют(СписокВалют) Экспорт

	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "840";
	СтрокаВалют.Наименование = "USD";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "978";
	СтрокаВалют.Наименование = "EUR";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "643";
	СтрокаВалют.Наименование = "RUB";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "980";
	СтрокаВалют.Наименование = "UAH";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "944";
	СтрокаВалют.Наименование = "AZN";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "051";
	СтрокаВалют.Наименование = "AMD";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "974";
	СтрокаВалют.Наименование = "BYR";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "975";
	СтрокаВалют.Наименование = "BGN";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "156";
	СтрокаВалют.Наименование = "CNY";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "203";
	СтрокаВалют.Наименование = "CZK";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "981";
	СтрокаВалют.Наименование = "GEL";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "348";
	СтрокаВалют.Наименование = "HUF";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "376";
	СтрокаВалют.Наименование = "ILS";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "356";
	СтрокаВалют.Наименование = "INR";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "417";
	СтрокаВалют.Наименование = "KGS";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "410";
	СтрокаВалют.Наименование = "KRW";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "398";
	СтрокаВалют.Наименование = "KZT";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "498";
	СтрокаВалют.Наименование = "MDL";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "985";
	СтрокаВалют.Наименование = "PLN";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "946";
	СтрокаВалют.Наименование = "RON";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "934";
	СтрокаВалют.Наименование = "TMT";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "949";
	СтрокаВалют.Наименование = "TRY";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "704";
	СтрокаВалют.Наименование = "VND";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "860";
	СтрокаВалют.Наименование = "UZS";
	СтрокаВалют = СписокВалют.Добавить();
	СтрокаВалют.Код = "392";
	СтрокаВалют.Наименование = "JPY";

КонецПроцедуры

Функция   ПолучитьСписокИзМетаданных(Знач ЭтоСправочник = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьСписокИзМетаданных(ЭтоСправочник);
КонецФункции

Функция   ПолучитьСтоимостьВыполненныхРабот(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено, Знач ЗаКомплектацию = ЛОЖЬ, Знач ЗаОказанныеУслугиЗаВремя = ЛОЖЬ, Знач ПроцентЗаОказанныеУслугиЗаВремя = ЛОЖЬ) Экспорт

	Сумма  = 0;

	Запрос = Новый Запрос;
	Если ПроцентЗаОказанныеУслугиЗаВремя Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.Сотрудник = &Сотрудник
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
	ИначеЕсли ЗаОказанныеУслугиЗаВремя Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараВКоличестве КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.Сотрудник = &Сотрудник
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараВКоличестве КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
	ИначеЕсли ЗаКомплектацию Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	КомплектацияРаботы.Количество КАК Сумма
			|ИЗ Документ.Комплектация.Работы КАК КомплектацияРаботы
			|ГДЕ КомплектацияРаботы.Ссылка.Проведен = ИСТИНА
			|	И КомплектацияРаботы.Сотрудник = &Сотрудник
			|	И КомплектацияРаботы.Ссылка.ДатаКомплектации МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	КомплектацияРаботы.Количество КАК Сумма
			|ИЗ Документ.Комплектация.Работы КАК КомплектацияРаботы
			|ГДЕ КомплектацияРаботы.Ссылка.Проведен = ИСТИНА
			|	И КомплектацияРаботы.Ссылка.ДатаКомплектации МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Сотрудник) Тогда

			Запрос.Текст = "ВЫБРАТЬ
			|	ВыполненияРаботРаботы.Сумма КАК Сумма
			|ИЗ Документ.ВыполненияРабот.Товары КАК ВыполненияРаботРаботы
			|ГДЕ ВыполненияРаботРаботы.Ссылка.Проведен = ИСТИНА
			|	И ВыполненияРаботРаботы.Ссылка.Актуален = ИСТИНА
			|	И ВыполненияРаботРаботы.Сотрудник = &Сотрудник
			|	И ВыполненияРаботРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	ВыполненияРаботРаботы.Сумма КАК Сумма
			|ИЗ Документ.ВыполненияРабот.Товары КАК ВыполненияРаботРаботы
			|ГДЕ ВыполненияРаботРаботы.Ссылка.Проведен = ИСТИНА
			|	И ВыполненияРаботРаботы.Ссылка.Актуален = ИСТИНА
			|	И ВыполненияРаботРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;
	КонецЕсли;

	Возврат Сумма;

КонецФункции

Функция   ПолучитьСтруктуруДополнительныхПараметровМакетаПечати() Экспорт

	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("ТекстВШапкеДокументовПриПечати", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати"));
	РезультатСтруктура.Вставить("ТекстВПодвалеДокументовПриПечати", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВПодвалеДокументовПриПечати"));

	Возврат РезультатСтруктура;

КонецФункции

функция   ПолучитьСтруктуруИзображения(Знач СсылкаНаЭлементИзображение) Экспорт

	Результат = Новый Структура("ИзображениеВБазеДанных", СсылкаНаЭлементИзображение.ИзображениеВБазеДанных);
	Результат.Вставить("подссылку", "");
	результат.Вставить("РазмерПриОтображении", 1);
	Если ОбщийМодульПовтор.ЭтоГруппа(СсылкаНаЭлементИзображение) Тогда
		Результат.ИзображениеВБазеДанных = ЛОЖЬ;
	Иначе
		Если Результат.ИзображениеВБазеДанных Тогда
			Результат.ПодСсылку = ПолучитьНавигационнуюСсылку(СсылкаНаЭлементИзображение, "ХранилищеИзображения");
			РазмерПриОтображении = СсылкаНаЭлементИзображение.РазмерПриОтображении;
			Если РазмерПриОтображении = Перечисления.РазмерыКартинок.Пропорционально Тогда
				Результат.Вставить("РазмерПриОтображении", 2);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Растянуть Тогда
				Результат.Вставить("РазмерПриОтображении", 3);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.РеальныйРазмер Тогда
				Результат.Вставить("РазмерПриОтображении", 4);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Черепица Тогда
				Результат.Вставить("РазмерПриОтображении", 5);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.ИмяФайлаИзображения) Тогда
			Результат.ПодСсылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
			|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<HTML style=""font-family:arial; font-size:11px;"">
			|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
			|<img src = """ + СсылкаНаЭлементИзображение.ИмяФайлаИзображения + """>
			|</HTML>";
		ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.СсылкаНаИзображение) Тогда
			Результат.подссылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""
			|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<HTML style=""font-family:arial; font-size:11px;"">
			|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
			|<img src = """ + СсылкаНаЭлементИзображение.СсылкаНаИзображение + """>
			|</HTML>";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьТаблицуОстатковВнутреннихЗаказов(Знач Ссылка, Знач Склад, Знач Дата, Знач ИмяТаблицы = "Товары") Экспорт

	СтруктураТаблиц = Новый Структура;
	НоменклатураКСписанию = Ссылка[ИмяТаблицы].ВыгрузитьКолонку("Номенклатура");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ВнутренниеЗаказыТоваровОстатки.Номенклатура,
	|	ВнутренниеЗаказыТоваровОстатки.КоличествоОстаток КАК Количество
	|ИЗ РегистрНакопления.ВнутренниеЗаказыТоваров.Остатки(
	|			&Дата,
	|			Склад = &Склад
	|				И Номенклатура В (&НоменклатураКСписанию)) КАК ВнутренниеЗаказыТоваровОстатки";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
	Запрос.УстановитьПараметр("Дата", Дата);

	СтруктураТаблиц.Вставить("ТаблицаВнутреннихЗаказов", Запрос.Выполнить().Выгрузить());

	Возврат СтруктураТаблиц;

КонецФункции

Функция   ПолучитьТаблицыЦенСписанияИОстатков(Знач Ссылка = Неопределено, Знач Склад, Знач Дата, Знач ОстаткиСледуетПроверять, Знач Номенклатура = Неопределено, Знач ИмяТаблицы = "Товары", Знач ДляВозвратаОтКлиента = ЛОЖЬ) Экспорт

	СтруктураТаблиц = Новый Структура;
	ТаблицаСписанияНеопределена = ИСТИНА;
	Если Ссылка = Неопределено Тогда
		НоменклатураКСписанию = Новый Массив;
		НоменклатураКСписанию.Добавить(Номенклатура);
	Иначе
		НоменклатураКСписанию = Ссылка[ИмяТаблицы].ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;

	ВсеСерииНоменклатуры = Неопределено;

	Если НЕ Ссылка = Неопределено
		И ДляВозвратаОтКлиента Тогда

		Если ЗначениеЗаполнено(Ссылка.ДокументРеализации) Тогда

			Запрос = Новый Запрос; // цена при условии серийных продаж должна собраться
			Запрос.Текст = "ВЫБРАТЬ
			|	РасходыТовараТовары.Номенклатура,
			|	СУММА(РасходыТовараТовары.Количество) КАК Количество,
			|	СУММА(РасходыТовараТовары.Сумма) КАК Сумма,
			|	СУММА(1) КАК цена
			|ИЗ Документ.РасходыТовара.Товары КАК РасходыТовараТовары
			|ГДЕ РасходыТовараТовары.Номенклатура В(&НоменклатураКСписанию)
			|	И РасходыТовараТовары.Ссылка = &ДокументРеализации
			|СГРУППИРОВАТЬ ПО
			|	РасходыТовараТовары.Номенклатура";
			Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
			Запрос.УстановитьПараметр("ДокументРеализации", Ссылка.ДокументРеализации);

			Результат = Запрос.Выполнить();

			Если НЕ Результат.Пустой() Тогда
				ТаблицаЦенСписания = Результат.Выгрузить();
				Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
					СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);

				КонецЦикла;

				ТаблицаСписанияНеопределена = ЛОЖЬ;
				СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);
			КонецЕсли;
		КонецЕсли;

		Если ТаблицаСписанияНеопределена Тогда // продажа не указана

			Если НЕ Ссылка = Неопределено
				И ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда

				Запрос = Новый Запрос; // цена при условии серийных продаж должна собраться
				Запрос.Текст = "ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	СУММА(Товары.Количество) КАК Количество,
				|	СУММА(Товары.Сумма) КАК Сумма,
				|	СУММА(1) КАК Цена
				|ИЗ РегистрНакопления.Товары КАК Товары
				|ГДЕ Товары.ВидДвижения = &Расход
				|	И Товары.Номенклатура В(&НоменклатураКСписанию)
				|	И Товары.Период <= &Дата
				|	И Товары.Регистратор.КлиентПоставщик = &КлиентПоставщик ";

				Если ЗначениеЗаполнено(склад) Тогда
					Запрос.Текст = Запрос.Текст  + " И Товары.Склад = &Склад	";
					Запрос.УстановитьПараметр("Склад", Склад);
				КонецЕсли;

				Запрос.Текст = Запрос.Текст  + "СГРУППИРОВАТЬ ПО Товары.Номенклатура";
				Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
				Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
				Запрос.УстановитьПараметр("Дата", Дата);
				Запрос.УстановитьПараметр("КлиентПоставщик", Ссылка.КлиентПоставщик);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда
					ТаблицаЦенСписания = Результат.Выгрузить();
					Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
						СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
					КонецЦикла;

					ТаблицаСписанияНеопределена = ЛОЖЬ;
					СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТаблицаСписанияНеопределена Тогда // продажа не указана, продажи клиенту не нашли - ищем среднюю реализацию

			Если НЕ Ссылка = Неопределено
				И ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда

				Запрос = Новый Запрос; // цена при условии серийных продаж должна собраться
				Запрос.Текст = "ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	СУММА(Товары.Количество) КАК Количество,
				|	СУММА(Товары.Сумма) КАК Сумма,
				|	СУММА(1) КАК Цена
				|ИЗ РегистрНакопления.Товары КАК Товары
				|ГДЕ Товары.ВидДвижения = &Расход
				|	И Товары.Номенклатура В(&НоменклатураКСписанию)
				|	И Товары.Период <= &Дата ";

				Если ЗначениеЗаполнено(склад) Тогда
					Запрос.Текст = Запрос.Текст  + " И Товары.Склад = &Склад	";
					Запрос.УстановитьПараметр("Склад", Склад);
				КонецЕсли;

				Запрос.Текст = Запрос.Текст  + "СГРУППИРОВАТЬ ПО Товары.Номенклатура";
				Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
				Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
				Запрос.УстановитьПараметр("Дата", Дата);

				Результат = Запрос.Выполнить();

				Если НЕ Результат.Пустой() Тогда
					ТаблицаЦенСписания = Результат.Выгрузить();
					Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
						СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
					КонецЦикла;

					ТаблицаСписанияНеопределена = ЛОЖЬ;
					СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ТаблицаСписанияНеопределена Тогда // не возврат, а обычное списание

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР
		|		КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0

		|		ИНАЧЕ ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
		|	КОНЕЦ КАК Цена,
		|	ТоварыОстатки.Номенклатура %1
		|ИЗ РегистрНакопления.Товары.Остатки(
		|			&Дата,
		|			Номенклатура В (&НоменклатураКСписанию) ";

		Если ЗначениеЗаполнено(Склад) Тогда
			//Запрос.Текст = Запрос.Текст + " И ВнутреннееПеремещение = ЛОЖЬ И Склад = &Склад ";
			Запрос.Текст = Запрос.Текст + " И Склад = &Склад "; // 151122 !!!
			Запрос.УстановитьПараметр("Склад", Склад);
		Иначе
			Запрос.Текст = Запрос.Текст + " И ВнутреннееПеремещение = ЛОЖЬ "; // без внутренних перемещений
		КонецЕсли;

		Если НЕ Ссылка = Неопределено
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры") Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " ,	ТоварыОстатки.СерияНоменклатуры ");
			ВсеСерииНоменклатуры = Ссылка[ИмяТаблицы].ВыгрузитьКолонку("СерияНоменклатуры");
			Запрос.Текст = Запрос.Текст + " И СерияНоменклатуры В (&ВсеСерииНоменклатуры) ";
			Запрос.УстановитьПараметр("ВсеСерииНоменклатуры", ВсеСерииНоменклатуры);
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки ";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
		Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
		Запрос.УстановитьПараметр("Дата", Дата);

		СтруктураТаблиц.вставить("ТаблицаЦенСписания", Запрос.Выполнить().Выгрузить());
	КонецЕсли;

	Если ОстаткиСледуетПроверять
		И НЕ Ссылка = Неопределено Тогда // иначе зачем

		Запрос = Новый Запрос; // БЕЗ учета СЕРИЙ

		Если склад = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(склад) Тогда

			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&НоменклатураКСписанию) %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&НоменклатураКСписанию) И Склад = &Склад %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры";
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры")
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении") Тогда

			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И СерияНоменклатуры В (&ВсеСерииНоменклатуры) ");

			Если ВсеСерииНоменклатуры = Неопределено Тогда
				ВсеСерииНоменклатуры = Ссылка[ИмяТаблицы].ВыгрузитьКолонку("СерияНоменклатуры");
			КонецЕсли;

			Запрос.УстановитьПараметр("ВсеСерииНоменклатуры", ВсеСерииНоменклатуры);
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
		КонецЕсли;

		Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
		Запрос.УстановитьПараметр("Дата", Дата);

		Результат = Запрос.Выполнить();

		Если результат.Пустой() Тогда
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		Иначе
			ТаблицаОтвета = результат.Выгрузить();
		КонецЕсли;
	Иначе
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
	КонецЕсли;

	СтруктураТаблиц.вставить("ТаблицаОстатков", ТаблицаОтвета);

	Возврат СтруктураТаблиц;

КонецФункции

Функция   ПолучитьТекстТелефонов(Знач ФизическоеИлиЮридическоеЛицо) Экспорт

	Если ЗначениеЗаполнено(ФизическоеИлиЮридическоеЛицо) Тогда
		ПолныйНомерТелефона = ФизическоеИлиЮридическоеЛицо.Телефон;
		Для НомерТелефона = 2 по 5 Цикл
			ЭтотНомерТелефона = ФизическоеИлиЮридическоеЛицо["Телефон" + СокрЛП(НомерТелефона)];

			Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
				ПолныйНомерТелефона = ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПолныйНомерТелефона = "";
	КонецЕсли;

	Возврат ПолныйНомерТелефона;

КонецФункции

Функция   ПолучитьТекущийКурс(Знач Валюта = Неопределено, Знач Дата = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ) Экспорт

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Если ВернутьСтруктуру ТОгда
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Период", Дата);
		СтруктураРезультата.Вставить("Валюта", Валюта);
		СтруктураРезультата.Вставить("Курс", 1);
		СтруктураРезультата.Вставить("ОбратныйПересчет", 1);
		СтруктураРезультата.Вставить("Комментарий", "");
		СтруктураРезультата.Вставить("Ответственный");
		СтруктураРезультата.Вставить("ДатаСоздания");
		СтруктураРезультата.Вставить("ДатаРедакции");
	КонецЕсли;

	Если НЕ ПараметрыСеанса.ВестиУчетВалютВСеансе
		ИЛИ НЕ ЗначениеЗаполнено(Валюта) Тогда

		Если ВернутьСтруктуру ТОгда
			Возврат СтруктураРезультата;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;

	Если ВернутьСтруктуру ТОгда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КурсыВалют.Период КАК Период,
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.ОбратныйПересчет,
		|	ВЫРАЗИТЬ(КурсыВалют.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
		|	КурсыВалют.Ответственный,
		|	КурсыВалют.ДатаСоздания,
		|	КурсыВалют.ДатаРедакции
		|ИЗ РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ КурсыВалют.Период <= &Дата
		|	И КурсыВалют.Валюта = &Валюта
		|УПОРЯДОЧИТЬ ПО Период УБЫВ";
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, ВыборкаДетальныеЗаписи);
		КонецЕсли;

		Возврат СтруктураРезультата;
	Иначе
		Курс = 1;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ КурсыВалютСрезПоследних.Курс Из РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Курс = ВыборкаДетальныеЗаписи.Курс;
		КонецЕсли;

		Возврат Курс;
	КонецЕсли;

КонецФункции // Получить Текущий Курс

Функция   ПолучитьТипДополнительногоРеквизита(Знач ТипОбъектаДляДополнительныхРеквизитов) Экспорт

	Результат = ЛОЖЬ;
	Если ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаНоменклатура Тогда
		Результат = Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаДоговора Тогда
		Результат = Справочники.Договора.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаРасходТовара Тогда
		Результат = Документы.РасходыТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПоступлениеТовара Тогда
		Результат = Документы.ПоступленияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаКлиенты Тогда
		Результат = Справочники.Клиенты.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаВыполненияРабот Тогда
		Результат = Документы.ВыполненияРабот.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПоставщики Тогда
		Результат = Справочники.Поставщики.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаДвиженияДенег Тогда
		Результат = Документы.ДвиженияДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаИнвентаризация Тогда
		Результат = Документы.Инвентаризации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКорректировкаИВводОстатков Тогда
		Результат = Документы.КорректировкиИРегистрацияОстатков.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПеремещенияТоваров Тогда
		Результат = Документы.ПеремещенияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланПродаж Тогда
		Результат = Документы.ПланыПродаж.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланДоходовИРасходов Тогда
		Результат = Документы.ПланыДоходовИРасходовДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаУстановкаЦен Тогда
		Результат = Документы.УстановкиЦен.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКомплектации Тогда
		Результат = Документы.Комплектация.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОтчетыКомиссионеров Тогда
		Результат = Документы.ОтчетыКомиссионеров.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляЗаметокИНапоминаний Тогда
		Результат = Справочники.ЗаметкиИНапоминания.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляПрикрепленныхИзображений Тогда
		Результат = Справочники.Изображения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаВидыЦен Тогда
		Результат = Справочники.ВидыЦен.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаЛокаций Тогда
		Результат = Справочники.Локации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОрганизации Тогда
		Результат = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОбъектыКлиентов Тогда
		Результат = Справочники.ОбъектыКлиентов.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСредств Тогда
		Результат = Справочники.СредстваПредприятия.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПартииПриобретения Тогда
		Результат = Справочники.ПартииПриобретения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПроизводители Тогда
		Результат = Справочники.Производители.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаРегионы Тогда
		Результат = Справочники.Регионы.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСклады Тогда
		Результат = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСотрудники Тогда
		Результат = Справочники.Сотрудники.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСтатьиДвиженияДенег Тогда
		Результат = Справочники.СтатьиДвиженияДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаХранилищаДенег Тогда
		Результат = Справочники.ХранилищаДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСпецификаций Тогда
		Результат = Справочники.Спецификации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПодразделений Тогда
		Результат = Справочники.Подразделения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаГруппАналогов Тогда
		Результат = Справочники.ГруппыАналогов.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСертификатов Тогда
		Результат = Справочники.СертификатыГигиеническиеЗаключения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаТаблицыДанных Тогда
		Результат = Документы.ТаблицыДанных.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОказанияУслугЗаВремя Тогда
		Результат = Документы.ОказанияУслугЗаВремя.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = ИСТИНА, Знач Количество = 0, Знач Договор = Неопределено, Знач ДоговорТочноПредусматриваетСтрогиеЦены = ЛОЖЬ, Знач Цена = -1, Знач Ссылка = Неопределено, Знач ВыводитьОшибкуТолькоСообщением = ЛОЖЬ, Знач ЕдиницаИзмерения = Неопределено, Знач СредняяЦенаПриобретения = ЛОЖЬ) Экспорт

	Результат = 0;
	Если НЕ Номенклатура = Неопределено Тогда
		Если НЕ ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура = Номенклатура.ссылка;
		КонецЕсли;

		ЦенаНеОбнаружена = ИСТИНА;

		Если СредняяЦенаПриобретения Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ТоварыОбороты.СуммаПриход,
			|	ТоварыОбороты.КоличествоПриход
			|ИЗ РегистрНакопления.Товары.Обороты(, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ТоварыОбороты";
			Запрос.УстановитьПараметр("ДатаОкончания", Дата);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				КоличествоПриход = ВыборкаДетальныеЗаписи.КоличествоПриход;
				СуммаПриход 	 = ВыборкаДетальныеЗаписи.СуммаПриход;

				Если НЕ СуммаПриход = 0 Тогда
					Если НЕ КоличествоПриход = 0 Тогда
						Результат = ВыборкаДетальныеЗаписи.СуммаПриход / КоличествоПриход;
					Иначе
						Результат = ВыборкаДетальныеЗаписи.СуммаПриход;
					КонецЕсли;

					ЦенаНеОбнаружена = ЛОЖЬ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ СредняяЦенаПриобретения
			ИЛИ ЦенаНеОбнаружена Тогда

			Если НЕ Договор = Неопределено
				И ЗначениеЗаполнено(Договор) Тогда

				Если (ДоговорТочноПредусматриваетСтрогиеЦены
					ИЛИ договор.ПредусматриваетСтрогиеЦены) Тогда

					СтрокаДоговора = Договор.товары.Найти(Номенклатура, "Номенклатура");

					Если НЕ СтрокаДоговора = Неопределено Тогда
						Цена = СтрокаДоговора.Цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если НЕ Цена = 0
				И НЕ Цена = -1 Тогда

				Результат = Цена;
			Иначе
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда

					Если ВидЦен = ИСТИНА Тогда // любая
						Результат = ПолучитьСложнуюЦену(Номенклатура, , Дата, ВыводитьОшибку, Количество, , , , ЕдиницаИзмерения);
					ИначеЕсли НЕ ЗначениеЗаполнено(ВидЦен) Тогда

						Если ВыводитьОшибку
							И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

							Если ВыводитьОшибкуТолькоСообщением Тогда
								ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен НЕ указан!"));
							Иначе
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид цен НЕ указан!"), , Ссылка);
							КонецЕсли;
						КонецЕсли;

						Результат = 0;
					Иначе
						Результат = ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Дата, ВыводитьОшибку, Количество, , , , ЕдиницаИзмерения);
					КонецЕсли;
				Иначе

					Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
						И ЗначениеЗаполнено(Номенклатура) Тогда

						Цена = Номенклатура.Цена;

						Если НЕ количество = 0 // надо проверять льготную цену
							И НЕ Цена = 0
							И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
							И Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
							И ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже
							И (не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС")
							ИЛИ НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда

							ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
							Цена = Цена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (Цена / 100);

						ИначеЕсли Цена = 0 // не 100% скидка
							И ВыводитьОшибку
							И ПараметрыСеанса.ИспользоватьЦеныИСуммыВСеансе
							И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

							Если ВыводитьОшибкуТолькоСообщением Тогда
								ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена!"));
							Иначе
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена!"), , ссылка);
							КонецЕсли;

						КонецЕсли;

						Результат = Цена;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьЦенуПоставщика(Знач Номенклатура, Знач Поставщик, Знач Дата, Знач Договор = Неопределено) Экспорт

	Результат = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЦеныПоставщиковСрезПоследних.Цена
	|ИЗ РегистрСведений.ЦеныПоставщиков.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И Поставщик = &Поставщик И (&НЕДоговор ИЛИ Договор = &Договор)) КАК ЦеныПоставщиковСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НЕДоговор", НЕ ЗначениеЗаполнено(Договор));
	Запрос.УстановитьПараметр("Договор", Договор);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат = ВыборкаДетальныеЗаписи.Цена;

		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции //Получить Цену Поставщика

Функция   ПолучитьЦенуСписания(Знач Номенклатура, Знач Количество = 0, Знач Дата, Знач СтруктураОстатка = Неопределено, Знач ЭтотТоварНеИмеетКоличественногоУчета = НЕОПРЕДЕЛЕНО, Знач Склад = Неопределено, Знач СерияНоменклатуры = Неопределено, Знач ПолучитьСреднююВИстории = ЛОЖЬ) Экспорт

	Результат = 0;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ЭтоГруппа = ОбщийМодульПовтор.ЭтоГруппа(Номенклатура);
		Если ЭтотТоварНеИмеетКоличественногоУчета = НЕОПРЕДЕЛЕНО Тогда // и для групп
			ЭтотТоварНеИмеетКоличественногоУчета = ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура);
		КонецЕсли;

		Запрос = Новый Запрос;

		Если ЭтотТоварНеИмеетКоличественногоУчета Тогда
			Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних.Цена КАК Цена
			|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СрезПоследних(&Дата, ";
			Если ЭтоГруппа Тогда
				Запрос.Текст = Запрос.Текст + " Номенклатура В ИЕРАРХИИ (&Номенклатура) ";
			Иначе
				Запрос.Текст = Запрос.Текст + " Номенклатура = &Номенклатура ";
			КонецЕсли;

			Запрос.Текст = Запрос.Текст + ") КАК СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних";
		Иначе
			Если ПолучитьСреднююВИстории Тогда

				Запрос.Текст = "ВЫБРАТЬ СУММА(ЕСТЬNULL(Товары.Количество, 0)) КАК Количество,
				|	СУММА(ЕСТЬNULL(Товары.Сумма, 0)) КАК Сумма
				|ИЗ РегистрНакопления.Товары КАК Товары
				|ГДЕ Товары.Период <= &Дата";

				Если ЭтоГруппа Тогда
					Запрос.Текст = Запрос.Текст + " И Товары.Номенклатура В ИЕРАРХИИ (&Номенклатура) ";
				Иначе
					Запрос.Текст = Запрос.Текст + " И Товары.Номенклатура = &Номенклатура ";
				КонецЕсли;

				Если НЕ СерияНоменклатуры = Неопределено
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
					И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении") Тогда

					Запрос.Текст = Запрос.Текст + "	И Товары.СерияНоменклатуры = &СерияНоменклатуры";
					Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
				КонецЕсли;

				Если ЗначениеЗаполнено(Склад)
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда

					Запрос.Текст = Запрос.Текст + "	И Товары.Склад = &Склад";
					Запрос.УстановитьПараметр("Склад", Склад);
				КонецЕсли;
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ВЫБОР КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0 ТОГДА 0

				|		Иначе ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
				|	КОНЕЦ КАК Цена Из РегистрНакопления.Товары.Остатки(&Дата, ВнутреннееПеремещение = ЛОЖЬ ";
				Если ЭтоГруппа Тогда
					Запрос.Текст = Запрос.Текст + " И Номенклатура В ИЕРАРХИИ (&Номенклатура) ";
				Иначе
					Запрос.Текст = Запрос.Текст + " И Номенклатура = &Номенклатура ";
				КонецЕсли;

				Если НЕ СерияНоменклатуры = Неопределено
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатуры")
					И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении") Тогда

					Запрос.Текст = Запрос.Текст + "	И СерияНоменклатуры = &СерияНоменклатуры";
					Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
				КонецЕсли;

				Если ЗначениеЗаполнено(Склад)
					И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда

					Запрос.Текст = Запрос.Текст + "	И Склад = &Склад";
					Запрос.УстановитьПараметр("Склад", Склад);
				КонецЕсли;

				Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
			КонецЕсли;
		КонецЕсли;

		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Если ПолучитьСреднююВИстории Тогда
				СуммаКУчету 	 = 0;
				КоличествоКУчету = 0;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СуммаКУчету 	 = СуммаКУчету + ВыборкаДетальныеЗаписи.Сумма;
					КоличествоКУчету = КоличествоКУчету + ВыборкаДетальныеЗаписи.Количество;
				КонецЦикла;

				Результат = ?(КоличествоКУчету = 0, СуммаКУчету, СуммаКУчету / КоличествоКУчету);
			Иначе
				ВыборкаДетальныеЗаписи.Следующий();
				Результат = ВыборкаДетальныеЗаписи.Цена;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Получить Сумму Списания

Функция   ПолучитьЧислоЗаметокСсылки(Знач Ссылка) Экспорт

	ЧислоСсылок = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаметкиИНапоминания.Ссылка) КАК ЧислоСсылок
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Актуально = ИСТИНА
	|	И (ЗаметкиИНапоминания.Причина = &Ссылка
	|			ИЛИ ЗаметкиИНапоминания.СвязаноС = &Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЧислоСсылок = ЧислоСсылок + ВыборкаДетальныеЗаписи.ЧислоСсылок;

		КонецЦикла;
	КонецЕсли;

	Возврат ЧислоСсылок;

КонецФункции

Функция   ПроверитьВыполнитьПодписку(Знач Источник, Знач ВидСобытияВБазеДанных = Неопределено) Экспорт

	РезультатПрограмма = "";
	Если ЗначениеЗаполнено(Источник) Тогда

		Если ВидСобытияВБазеДанных = Неопределено
			ИЛИ ВидСобытияВБазеДанных = 0 Тогда

			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.Открытие");
		ИначеЕсли ВидСобытияВБазеДанных = 1 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.Закрытие");
		ИначеЕсли ВидСобытияВБазеДанных = 2 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.Запись");
		ИначеЕсли ВидСобытияВБазеДанных = 3 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.ОтменаПроведенияДокумента");
		ИначеЕсли ВидСобытияВБазеДанных = 4 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.ПометкаНаУдаление");
		ИначеЕсли ВидСобытияВБазеДанных = 5 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.ПроведениеДокумента");
		ИначеЕсли ВидСобытияВБазеДанных = 6 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.ПриЗаписи");
		ИначеЕсли ВидСобытияВБазеДанных = 7 Тогда
			ВидСобытияВБазеДанных = ПредопределенноеЗначение("Перечисление.ВидыСобытийБазыДанных.ПриУстановкеНовогоКода");
		КонецЕсли;

		ОбъектСобытия = СокрЛП(Источник.Метаданные().Имя);
		НаименованиеОбъектаСобытия = ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ОбъектСобытия);

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПодпискиНаСобытияУсловияСобытия.УсловиеПрограмма,
		|	ПодпискиНаСобытияУсловияСобытия.Ссылка КАК Подписка,
		|	ПодпискиНаСобытияУсловияСобытия.НаименованиеОбъектаСобытия
		|ИЗ Справочник.ПодпискиНаСобытия.УсловияСобытия КАК ПодпискиНаСобытияУсловияСобытия
		|ГДЕ ПодпискиНаСобытияУсловияСобытия.ОбъектСобытия = &ОбъектСобытия
		|	И (ПодпискиНаСобытияУсловияСобытия.ДатаНачала >= &ДатаСобытия
		|			ИЛИ ПодпискиНаСобытияУсловияСобытия.ДатаНачала = &ПустаяДата)
		|	И (ПодпискиНаСобытияУсловияСобытия.ДатаОкончания <= &ДатаСобытия
		|			ИЛИ ПодпискиНаСобытияУсловияСобытия.ДатаОкончания = &ПустаяДата)
		|	И ПодпискиНаСобытияУсловияСобытия.ВидСобытия = &ВидСобытияВБазеДанных
		|	И ПодпискиНаСобытияУсловияСобытия.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПодпискиНаСобытияУсловияСобытия.Ссылка.Отключено = ЛОЖЬ
		|	И (ПодпискиНаСобытияУсловияСобытия.Ссылка.ДатаНачала <= &ДатаСобытия
		|			ИЛИ ПодпискиНаСобытияУсловияСобытия.Ссылка.ДатаНачала = &ПустаяДата)
		|	И (ПодпискиНаСобытияУсловияСобытия.Ссылка.ДатаОкончания >= &ДатаСобытия
		|			ИЛИ ПодпискиНаСобытияУсловияСобытия.Ссылка.ДатаОкончания = &ПустаяДата)";
		ДатаСобытия = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');
		Запрос.УстановитьПараметр("ВидСобытияВБазеДанных", ВидСобытияВБазеДанных);
		Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
		Запрос.УстановитьПараметр("ОбъектСобытия", ОбъектСобытия);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Подходящее = ИСТИНА;

				Если НЕ ПустаяСтрока(ВыборкаДетальныеЗаписи.УсловиеПрограмма) Тогда
					Попытка
						Выполнить(" Подходящее = " + ВыборкаДетальныеЗаписи.УсловиеПрограмма + "; ");
					Исключение
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка проверки условия события") + ": " + ТекстОписаниеОшибки);
					КонецПопытки;
				КонецЕсли;

				Если Подходящее Тогда
					Подписка = ВыборкаДетальныеЗаписи.Подписка;
					НаименованиеОбъектаСобытия = ВыборкаДетальныеЗаписи.НаименованиеОбъектаСобытия;
					Если НЕ Подписка.ОбъектыСобытия.Количество() = 0 Тогда
						Подходящее = ЛОЖЬ;

						Для Каждого ОбъектыПодписки Из Подписка.ОбъектыСобытия Цикл
							Если ОбъектыПодписки.ОбъектСобытия = Источник Тогда
								Подходящее = ИСТИНА;
								Прервать;
							КонецЕсли;

						КонецЦикла;
					КонецЕсли;

					Если Подходящее Тогда
						ПараметрыСеансаТекущийПользователь = СокрЛП(ПараметрыСеанса.ТекущийПользователь);
						СтрокаСообщенияОбщая = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пользователь") + " " + ПараметрыСеансаТекущийПользователь + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("в") + " " + Формат(ДатаСобытия, "ДФ='dd.MM.yy ЧЧ:мм:сс'") + Символы.Таб + Символы.Таб + Символы.Таб;
						СтрокаСообщенияОбщая = СтрокаСообщенияОбщая + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидСобытияВБазеДанных) + Символы.Таб + Символы.Таб;
						СтрокаСообщенияОбщая = СтрокаСообщенияОбщая + НаименованиеОбъектаСобытия + Символы.Таб + СокрЛП(Источник);

						Для Каждого РеакцииНаСобытие Из Подписка.РеакцииНаСобытие Цикл
							СтрокаСообщения = СокрЛП(РеакцииНаСобытие.ДополнительноеСообщение + " " + СтрокаСообщенияОбщая);
							Если РеакцииНаСобытие.СпособРеакции = Перечисления.СпособыРеакции.ВыполнитьПрограмму Тогда
								Если ЗначениеЗаполнено(РеакцииНаСобытие.РеакцияПрограммаИзСправочника) Тогда
									РеакцияПрограммаИзСправочника = РеакцииНаСобытие.РеакцияПрограммаИзСправочника;
									ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
									Попытка
										Выполнить("" + РеакцияПрограммаИзСправочника.ТекстПрограммы + Символы.ПС + РеакцияПрограммаИзСправочника.ТекстПрограммы2 + Символы.ПС + РеакцияПрограммаИзСправочника.ТекстПрограммы3 + Символы.ПС);
									Исключение
										ТекстОписаниеОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения программы Из справочника реакции подписки") + ": " + ТекстОписаниеОшибки);
									КонецПопытки;
									ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
								КонецЕсли;

								Если НЕ ПустаяСтрока(РеакцииНаСобытие.РеакцияПрограмма) Тогда
									ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ИСТИНА;
									Попытка
										Выполнить("" + РеакцииНаСобытие.РеакцияПрограмма);
									Исключение
										ТекстОписаниеОшибки = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения программы реакции подписки") + ": " + ТекстОписаниеОшибки);
									КонецПопытки;
									ПараметрыСеанса.ВыполнениеКодаЗаблокировано = ЛОЖЬ;
								КонецЕсли;

							ИначеЕсли РеакцииНаСобытие.СпособРеакции = Перечисления.СпособыРеакции.ВыполнитьПрограммуСОбъектом
								И НЕ ПустаяСтрока(РеакцииНаСобытие.РеакцияПрограмма) Тогда

								РезультатПрограмма = РеакцииНаСобытие.РеакцияПрограмма;

							ИначеЕсли РеакцииНаСобытие.СпособРеакции = Перечисления.СпособыРеакции.ЗаписьВФайлЖурнал
								И НЕ ПустаяСтрока(РеакцииНаСобытие.АдресРеакции) Тогда

								ФайлЖурнала = Новый ЗаписьТекста(РеакцииНаСобытие.АдресРеакции, , ,ИСТИНА);
								ФайлЖурнала.ЗаписатьСтроку(СтрокаСообщения);
								ФайлЖурнала.Закрыть();

							ИначеЕсли РеакцииНаСобытие.СпособРеакции = Перечисления.СпособыРеакции.ОтправкаЕмейл
								И НЕ ПустаяСтрока(РеакцииНаСобытие.АдресРеакции) Тогда

								ОбщийМодульСервисСервер.ПисьмоКонтрагенту(, , СтрокаСообщения, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(Подписка.Наименование), РеакцииНаСобытие.АдресРеакции);
							ИначеЕсли РеакцииНаСобытие.СпособРеакции = Перечисления.СпособыРеакции.СообщениеПользователю Тогда
								Для Каждого ПолучательСообщения Из Подписка.ПолучателиСообщения Цикл
									ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(СокрЛП(ПолучательСообщения.ДополнительноеСообщение + " " + СтрокаСообщения), , Источник, ПолучательСообщения.Получатель, ПараметрыСеансаТекущийПользователь);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПрограмма;

КонецФункции

Функция   ПроверитьДокументПроведен(Знач ДокументСсылка) Экспорт

	Попытка
		Возврат ДокументСсылка.Проведен;
	Исключение // не документ
		Возврат ЛОЖЬ;
	КонецПопытки;

КонецФункции

Функция   ПроверитьДоступностьДокументаПрошлого(Знач Дата, Знач Ссылка = Неопределено) Экспорт

	Результат = ИСТИНА;
	ЗапретитьИзмененияВПрошломПериоде = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде");
	Если ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты Тогда
		ДатаЗапрета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных");

		Если Дата <= ДатаЗапрета Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше даты запрета") + ": " + формат(ДатаЗапрета, "ДФ=dd.MM.yyyy"), , Ссылка);
			КонецЕсли;

			Результат = ЛОЖЬ;
		КонецЕсли;
	ИначеЕсли ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока Тогда
		СрокЗапрета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах");
		ДатаЗапрета = (ТекущаяДата() - (СрокЗапрета * 3600));

		Если Дата <= ДатаЗапрета Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше срока запрета") + ": " + Формат(ДатаЗапрета, "ДФ='dd.MM.yy ЧЧ:мм'"), , Ссылка);
			КонецЕсли;

			Результат = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПроверитьИПеревестиРеквизитИнтерфейса(РеквизитФормы, Знач ИПодсказку = ЛОЖЬ, ФормаСобытия = Неопределено, Знач ПереводитьЭлементыПоРеквизитам = ЛОЖЬ) Экспорт

	Попытка
		СтруктураРезультат = Новый Структура("ЭлементПереведен, СуществуютЭлементыБезОпределенногоЗаголовка", ЛОЖЬ, ЛОЖЬ);
		Если НЕ ПустаяСтрока(РеквизитФормы.Заголовок) Тогда
			ПереводЗаголовка = ОбщийМодульПовтор.ПолучитьПереводДляЭлементаНаЯзыке(РеквизитФормы.Заголовок);

			Если НЕ ПустаяСтрока(ПереводЗаголовка)
				И НЕ ПереводЗаголовка = РеквизитФормы.Заголовок Тогда

				Если ПереводитьЭлементыПоРеквизитам
					И НЕ ФормаСобытия = Неопределено Тогда

					Попытка
						ФормаСобытия.Элементы[РеквизитФормы.Имя].Заголовок = ПереводЗаголовка;
					Исключение
					КонецПопытки;
				Иначе
					РеквизитФормы.Заголовок = ПереводЗаголовка;
				КонецЕсли;

				СтруктураРезультат.ЭлементПереведен = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

		Если ИПодсказку
			И НЕ ПустаяСтрока(РеквизитФормы.Подсказка) Тогда

			ПереводЗаголовка = ОбщийМодульПовтор.ПолучитьПереводДляЭлементаНаЯзыке(РеквизитФормы.Подсказка);

			Если НЕ ПустаяСтрока(ПереводЗаголовка)
				И НЕ ПереводЗаголовка = РеквизитФормы.Подсказка Тогда

				Если ПереводитьЭлементыПоРеквизитам
					И НЕ ФормаСобытия = Неопределено Тогда

					Попытка
						ФормаСобытия.Элементы[РеквизитФормы.Имя].Подсказка = ПереводЗаголовка;
					Исключение
					КонецПопытки;
				Иначе
					РеквизитФормы.Подсказка = ПереводЗаголовка;
				КонецЕсли;

				СтруктураРезультат.ЭлементПереведен = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю("" + тип(РеквизитФормы) + " " + РеквизитФормы.Заголовок + " " + ТекстОписаниеОшибки);
	КонецПопытки;

	Возврат СтруктураРезультат;

КонецФункции

Функция   ПроверитьОстатокДенежныхСредств(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач ВернутьСтруктуруПополнения = ЛОЖЬ, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = ЛОЖЬ) Экспорт

	Если СуммаДокумента <= 0 Тогда
		Если ВернутьСтруктуруПополнения Тогда
			СтруктураПополнения = Новый Структура;
			СтруктураПополнения.Вставить("Отказ", ЛОЖЬ);
			СтруктураПополнения.Вставить("Сумма", СуммаДокумента);
			СтруктураПополнения.Вставить("СуммаПополнения", 0);
			СтруктураПополнения.Вставить("Валюта", Валюта);

			Возврат СтруктураПополнения;
		Иначе

			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ХранилищеДенег)
		И Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда

		ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
	КонецЕсли;

	Если ФормаОплаты = Неопределено Тогда
		Если ЗначениеЗаполнено(ХранилищеДенег) Тогда
			ФормаОплаты = ХранилищеДенег.ФормаОплаты;
		Иначе
			ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
		КонецЕсли;
	КонецЕсли;

	Если ВернутьСтруктуруПополнения Тогда
		СтруктураПополнения = Новый Структура;
		СтруктураПополнения.Вставить("Отказ", ЛОЖЬ);
		СтруктураПополнения.Вставить("Сумма", СуммаДокумента);
		СтруктураПополнения.Вставить("СуммаПополнения", 0);
		СтруктураПополнения.Вставить("Валюта", Валюта);

		Если ЗначениеЗаполнено(ХранилищеДенег)
			И ЗначениеЗаполнено(ХранилищеДенег.ХранилищеПополнения) Тогда

			ХранилищеПополнения = ХранилищеДенег.ХранилищеПополнения;
			СтруктураПополнения.Вставить("ХранилищеПополнения", ХранилищеПополнения);
			СтруктураПополнения.Валюта = ХранилищеПополнения.Валюта;
			СуммаОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);

			Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
				СуммаОстатокПополнения = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеПополнения);
				Если ((СуммаОстаток + СуммаОстатокПополнения) - СуммаДокумента) < 0 Тогда
					ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");

					Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
						И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда

						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + СокрЛП(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег с учетом пополнения (") + СокрЛП(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
						КонецЕсли;

						Если НЕ ОтменитьПроверкиНаОтказ
							И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда

							СтруктураПополнения.Отказ = ИСТИНА;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтруктураПополнения.Сумма 			= СуммаОстаток;
					СтруктураПополнения.СуммаПополнения = СуммаДокумента - СуммаОстаток;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ОтменитьПроверкиНаОтказ Тогда
			СтруктураПополнения.Отказ = ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка);
		КонецЕсли;

		Возврат СтруктураПополнения;
	Иначе

		Возврат ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка, ОтменитьПроверкиНаОтказ)	;
	КонецЕсли;

КонецФункции

Функция   ПроверитьОстатокДенежныхСредствБезСтруктуры(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = ЛОЖЬ) Экспорт

	Отказ = ЛОЖЬ;
	ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");

	Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда

		СуммаОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);

		Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег (") + формат(СуммаОстаток, "ЧЦ=15; ЧДЦ=2") + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
			КонецЕсли;

			Если НЕ ОтменитьПроверкиНаОтказ
				И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда

				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Отказ;

КонецФункции

Функция   ПроверитьОстатокТоваров(Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач Склад, Знач Номенклатура, Знач Количество, Знач ДатаОстатка, Знач УжеПроверялиЧтоНеПредопределенныйИЗаполнен = ЛОЖЬ, КоличествоОстаток = 0, Знач Ссылка = Неопределено) Экспорт

	Отказ = ЛОЖЬ;

	Если УжеПроверялиЧтоНеПредопределенныйИЗаполнен
		ИЛИ (ЗначениеЗаполнено(Номенклатура)
		И НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура)) Тогда

		КвоОстаток = -1;
		КоличествоОстаток = 0;

		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда

			ДатаНачалаОграничения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара");

			Если ДатаНачалаОграничения = '00010101000000'
				ИЛИ ДатаОстатка > ДатаНачалаОграничения Тогда

				РекомендованныйМинимум = РекомендуемыйМинимальныйОстатокТовара(Номенклатура);

				Если РекомендованныйМинимум = 0 Тогда
					РекомендованныйМинимум = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РекомендуемыйМинимальныйОстатокТовара");
				КонецЕсли;

				Если НЕ РекомендованныйМинимум = 0 Тогда
					Если КоличествоОстаток = 0 Тогда
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);
						КоличествоОстаток = КвоОстаток;
					Иначе
						КвоОстаток = КоличествоОстаток;
					КонецЕсли;

					Если (КвоОстаток - Количество) < 0 Тогда
						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + " " + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает Рекомендуемый остаток") + " (" + РекомендованныйМинимум +")!", , Ссылка);
						КонецЕсли;

						Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
							Отказ = ИСТИНА;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда

			ДатаНачалаОграничения = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара");

			Если ДатаНачалаОграничения = '00010101000000'
				ИЛИ ДатаОстатка > ДатаНачалаОграничения Тогда

				Если КвоОстаток = -1 Тогда
					Если КоличествоОстаток = 0 Тогда
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);
						КоличествоОстаток = КвоОстаток;
					Иначе
						КвоОстаток = КоличествоОстаток;
					КонецЕсли;
				КонецЕсли;

				Если (КвоОстаток - Количество) < 0 Тогда
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + " " + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток!"), , Ссылка);
					КонецЕсли;

					Если ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
						Отказ = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Отказ;

КонецФункции

Функция   ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Знач Отказ = ЛОЖЬ, Знач Договор, Знач ЭтоКлиент = ИСТИНА, Знач Дата, Знач ТовараНаСумму, Знач ТовараВКоличестве, Знач ИзПоступления = ЛОЖЬ, Знач МинусСумма, Знач Ссылка = Неопределено) Экспорт

	Если НЕ Отказ Тогда
		ДоговорОграничиваетСуммуТоваров = Договор.ОграничиваетСуммуТоваров;
		Если НЕ ДоговорОграничиваетСуммуТоваров = 0 Тогда

			Запрос = Новый Запрос;

			Если ЭтоКлиент Тогда
				Запрос.Текст = "ВЫБРАТЬ РасчетыОбороты.СуммаОборот Из РегистрНакопления.Расчеты.Обороты(, , , Договор = &Договор) КАК РасчетыОбороты";
			Иначе
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОбороты.СуммаОборот Из РегистрНакопления.РасчетыСПоставщиками.Обороты(, , , Договор = &Договор) КАК РасчетыСПоставщикамиОбороты";
			КонецЕсли;

			Запрос.УстановитьПараметр("Договор", Договор);

			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.СуммаОборот;

				КонецЦикла;

				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуТоваров;
				Иначе
					ОтказТут = (ТекущийОборот + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуТоваров;
				КонецЕсли;

				Если ОтказТут Тогда
					Отказ = ИСТИНА;
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем по Договору!"), , Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ДоговорОграничиваетКоличествоТоваров = Договор.ОграничиваетКоличествоТоваров;

		Если НЕ ТовараВКоличестве =0
			И НЕ ДоговорОграничиваетКоличествоТоваров = 0 Тогда

			Запрос = Новый Запрос;

			Если ЭтоКлиент Тогда
				Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаОборот,
				|	ПродажиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Продажи.Обороты(, , , Договор = &Договор) КАК ПродажиОбороты";
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.СуммаОборот,
				|	ЗакупкиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Закупки.Обороты(, , , Договор = &Договор) КАК ЗакупкиОбороты";
			КонецЕсли;

			Запрос.УстановитьПараметр("Договор", Договор);

			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.КоличествоОборот;
				КонецЦикла;

				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;
				Иначе
					ОтказТут = (ТекущийОборот + ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;
				КонецЕсли;

				Если ОтказТут Тогда
					Отказ =	ИСТИНА;
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество превышает допустимый объем по Договору!"), , Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ДоговорОграничиваетСуммуЗадолженности = Договор.ОграничиваетСуммуЗадолженности;

		Если НЕ ДоговорОграничиваетСуммуЗадолженности = 0 Тогда

			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток Из РегистрНакопления.Расчеты.Остатки(&Дата, Договор = &Договор) КАК РасчетыОстатки";
			Иначе
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток Из РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
			КонецЕсли;

			Запрос.УстановитьПараметр("Договор", Договор);
			Запрос.УстановитьПараметр("Дата", Дата);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТекущийДолг = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийДолг = ТекущийДолг + ВыборкаДетальныеЗаписи.СуммаОстаток;

				КонецЦикла;

				Если ИзПоступления Тогда
					ОтказТут = (ТекущийДолг - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;
				Иначе
					ОтказТут = (ТекущийДолг + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;
				КонецЕсли;

				Если ОтказТут Тогда
					Отказ = ИСТИНА;
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем долга по Договору на дату!"), , Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Отказ;

КонецФункции

Функция   ПроверитьПользовательИмеетПравоМенятьЦены() Экспорт
	Возврат НЕ ОбщийМодульСерверПривилегия.ЕстьПользователи() ИЛИ РольДоступна("ПолныеПрава") ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");
КонецФункции

Функция   ПроверитьСменитьПараметрДенег(Знач ПараметрХранилища, Знач ВалютаИлиХранилище, Знач ЭтоФормаОплаты = ЛОЖЬ) Экспорт

	Результат = ПараметрХранилища;
	Если ЭтоФормаОплаты Тогда

		Если ЗначениеЗаполнено(ВалютаИлиХранилище)
			И (НЕ ЗначениеЗаполнено(ПараметрХранилища)
			ИЛИ НЕ ПараметрХранилища = ВалютаИлиХранилище.ФормаОплаты) Тогда

			Результат = ВалютаИлиХранилище.ФормаОплаты;
		КонецЕсли;
	Иначе

		Если ЗначениеЗаполнено(ВалютаИлиХранилище)
			И (НЕ ЗначениеЗаполнено(ПараметрХранилища)
			ИЛИ НЕ ВалютаИлиХранилище = ПараметрХранилища.Валюта) Тогда

			Результат = ОбщийМодульПовтор.НайтиХранилищеДенегПоВалюте(ВалютаИлиХранилище, ПараметрХранилища);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПроверитьСменуНаименованияНаТекущемЯзыке(Знач Наименование, Знач Ссылка, Знач ИмяПоля = "Наименование", Знач Отказ = ЛОЖЬ) Экспорт

	Результат = Наименование;

	Если НЕ Отказ
		И ЗначениеЗаполнено(Ссылка) Тогда

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА) Тогда

			НаименованиеВРегистре = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Ссылка, ИмяПоля);

			Если НаименованиеВРегистре = Неопределено
				ИЛИ НЕ НаименованиеВРегистре = Наименование Тогда

				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Ссылка, Наименование, ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ПроверитьУникальностьЗначенияРеквизита(Знач Отказ, Знач имяСправочник, Знач ЗначениеРеквизита, Знач Ссылка, Знач ВРамкахОдногоПараметра = Неопределено, Знач ЗначениеЭтогоОграничителя = Неопределено, Знач ИмяРеквизитаУникальности = "Наименование", Знач ПроверятьОбязательно = ЛОЖЬ) Экспорт

	Если Отказ Тогда
		Возврат ИСТИНА;
	ИначеЕсли ПустаяСтрока(ЗначениеРеквизита) Тогда
		Возврат ЛОЖЬ;

	ИначеЕсли ПроверятьОбязательно
		ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков") Тогда

		Запрос = Новый Запрос;

		Если Метаданные["Справочники"].Найти(имяСправочник).Иерархический ТОгда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н." + ИмяРеквизитаУникальности + " = &ЗначениеРеквизита И Н.Ссылка <> &Ссылка";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н." + ИмяРеквизитаУникальности + " = &ЗначениеРеквизита И Н.Ссылка <> &Ссылка";
		КонецЕсли;

		Если НЕ ВРамкахОдногоПараметра = Неопределено Тогда
			Запрос.Текст = " И Н." + СокрЛП(ВРамкахОдногоПараметра) + " = &Ограничитель" +
			Запрос.УстановитьПараметр("Ограничитель", ЗначениеЭтогоОграничителя);
		КонецЕсли;

		Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		ВозвратОтказ = ЛОЖЬ;

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ИмяРеквизитаУникальности) + " (" + ЗначениеРеквизита + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор запрещен."), , Ссылка);
				КонецЕсли;

				ВозвратОтказ = ИСТИНА;

			КонецЦикла;
		КонецЕсли;

		Возврат ВозвратОтказ;
	Иначе

		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции // ПроверитьУникальностьЗначенияРеквизита

Функция   ПроверитьУникальностьНомераТелефона(Знач Отказ, Знач имяСправочник, Знач Телефон, Знач Ссылка) Экспорт

	Если Отказ Тогда
		Возврат ИСТИНА;
	ИначеЕсли ПустаяСтрока(Телефон) Тогда
		Возврат ЛОЖЬ;
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьОдинаковыеНомераТелефоновУКлиентовИПоставщиков") Тогда

		Запрос = Новый Запрос;

		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И (Н.Телефон = &Телефон
			|ИЛИ Н.Телефон2 = &Телефон
			|ИЛИ Н.Телефон3 = &Телефон
			|ИЛИ Н.Телефон4 = &Телефон
			|ИЛИ Н.Телефон5 = &Телефон
			|) И Н.Ссылка <> &Ссылка";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ (Н.Телефон = &Телефон
			|ИЛИ Н.Телефон2 = &Телефон
			|ИЛИ Н.Телефон3 = &Телефон
			|ИЛИ Н.Телефон4 = &Телефон
			|ИЛИ Н.Телефон5 = &Телефон
			|) И Н.Ссылка <> &Ссылка";
		КонецЕсли;

		Запрос.УстановитьПараметр("Телефон", Телефон);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		ВозвратОтказ = ЛОЖЬ;

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким номером телефона") + " (" + Телефон + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + "! " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор запрещен."), , Ссылка);
				КонецЕсли;

				ВозвратОтказ = ИСТИНА;

			КонецЦикла;
		КонецЕсли;

		Возврат ВозвратОтказ;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции

Функция   ПроверитьУникальностьОКПО(Знач Отказ, Знач имяСправочник, Знач ОКПО, Знач Ссылка) Экспорт

	Если Отказ Тогда
		Возврат ИСТИНА;
	ИначеЕсли ПустаяСтрока(ОКПО) Тогда
		Возврат ЛОЖЬ;
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда

		Запрос = Новый Запрос;

		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
		КонецЕсли;

		Запрос.УстановитьПараметр("ОКПО", ОКПО);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		ВозвратОтказ = ЛОЖЬ;

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким ИНН (ОКПО)") + " (" + ОКПО + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + "! " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор запрещен."), , Ссылка);
				КонецЕсли;

				ВозвратОтказ = ИСТИНА;

			КонецЦикла;
		КонецЕсли;

		Возврат ВозвратОтказ;
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;

КонецФункции // ПроверитьУникальностьОКПО

Процедура ПроверитьФормулу(Знач Формула, Знач Родитель = Неопределено) Экспорт

	Если Родитель = Неопределено Тогда
		Родитель = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыПреобразованияЦен");
	КонецЕсли;

	Если ТипЗнч(Формула) = Тип("СправочникСсылка.ФормулыОписания") Тогда
		Формула = Формула.Формула;
	КонецЕсли;

	Пропустить = ЛОЖЬ;
	ВыборкаДетальныеЗаписиссылка = "";
	Дата = Неопределено;
	Цена = 0;
	Номенклатура = Неопределено;
	Цена2 = 0;
	Цена3 = 0;
	Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	Валюта2 = Валюта;
	Валюта3 = Валюта;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка,
	|	Номенклатура.Цена,
	|	Номенклатура.НоменклатурнаяГруппа,
	|	Номенклатура.Производитель
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры в базе для проверки!"), , );
		КонецЕсли;

		пропустить = ИСТИНА;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			ВидЦен 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");

				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				Цена = 12345.67;
			Иначе
				Цена = ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата);
				Валюта = ВидЦен.ВалютаЦены;
			КонецЕсли;

			Цена = 0;
			ВидЦен2 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");
			Если ЗначениеЗаполнено(ВидЦен2) Тогда
				Цена2 = ПолучитьЦенуНаСервере(Номенклатура, ВидЦен2, Дата);
				Валюта2 = ВидЦен2.ВалютаЦены;
			КонецЕсли;

			ВидЦен3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТретийВидЦенДляФормул");

			Если ЗначениеЗаполнено(ВидЦен3) Тогда
				Цена3 = ОбщийМодульСервер.ПолучитьЦенуНаСервере(Номенклатура, ВидЦен3, Дата);
				Валюта3 = ВидЦен3.ВалютаЦены;
			КонецЕсли;
		Иначе
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			Цена = ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;

		НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
		Производитель 		 = ВыборкаДетальныеЗаписи.Производитель;
		ВыборкаДетальныеЗаписиссылка = ВыборкаДетальныеЗаписи.ссылка;
		СерияНоменклатуры 	 = "";

		Если (ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры
			ИЛИ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетСерийНоменклатурыТолькоПриПоступлении"))
			И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Наименование
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.Владелец = &Номенклатура";
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				СерияНоменклатуры = ВыборкаДетальныеЗаписи.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ пропустить Тогда
		Попытка
			Тест = "";
			Выполнить(" Тест = " + Формула + ";");

			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формула работает. Пример для") + " " + ВыборкаДетальныеЗаписиссылка + " = " + Тест);
			КонецЕсли;

		Исключение
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в формуле") + ": " + ТекстОписаниеОшибки);
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Функция   ПроверитьЧтоДоговорНеИспользовался(Знач Договор) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Период
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Период
	|ИЗ РегистрНакопления.Закупки КАК Закупки
	|ГДЕ Закупки.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Расчеты.Период
	|ИЗ РегистрНакопления.Расчеты КАК Расчеты
	|ГДЕ Расчеты.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСПоставщиками.Период
	|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ РасчетыСПоставщиками.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСОтсрочкой.Период
	|ИЗ РегистрНакопления.РасчетыСОтсрочкой КАК РасчетыСОтсрочкой
	|ГДЕ РасчетыСОтсрочкой.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСПоставщикамиСОтсрочкой.Период
	|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой КАК РасчетыСПоставщикамиСОтсрочкой
	|ГДЕ РасчетыСПоставщикамиСОтсрочкой.Договор = &Договор";
	Запрос.УстановитьПараметр("Договор", Договор);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой();// доступен

КонецФункции

Функция   ПроверитьЧтоДокументСторнирован(Знач ОбъектСсылка) Экспорт

	РезультатДокумент = Неопределено;
	ТипЗнчОбъектСсылка = ТипЗнч(ОбъектСсылка);
	Если ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ДвиженияДенег") Тогда
		ТипДокумента = "ДвиженияДенег";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		ТипДокумента = "ПоступленияТовара";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.РасходыТовара") Тогда
		ТипДокумента = "РасходыТовара";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		ТипДокумента = "ВыполненияРабот";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.Инвентаризации") Тогда
		ТипДокумента = "Инвентаризации";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.Комплектация") Тогда
		ТипДокумента = "Комплектация";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
		ТипДокумента = "КорректировкиИРегистрацияОстатков";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда
		ТипДокумента = "ОказанияУслугЗаВремя";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ОтчетыКомиссионеров") Тогда
		ТипДокумента = "ОтчетыКомиссионеров";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		ТипДокумента = "ПеремещенияТовара";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Д.Ссылка
	|ИЗ Документ." + ТипДокумента + " КАК Д ГДЕ Д.ДокументСторно = &ДокументСторно";
	Запрос.УстановитьПараметр("ДокументСторно", ОбъектСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатДокумент = ВыборкаДетальныеЗаписи.Ссылка;

		КонецЦикла;
	КонецЕсли;

	Возврат РезультатДокумент;

КонецФункции

Функция   ПроверитьЧтоНоменклатураНеИспользовалась(Знач Номенклатура, Знач СерияНоменклатуры = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Если НЕ СерияНоменклатуры = Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|	И Товары.СерияНоменклатуры = &СерияНоменклатуры";
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Регистратор КАК Регистратор
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПланыПродажТовары.Ссылка
		|ИЗ Документ.ПланыПродаж.Товары КАК ПланыПродажТовары
		|ГДЕ ПланыПродажТовары.Ссылка.Проведен = ИСТИНА
		|	И ПланыПродажТовары.НоменклатураИлиГруппа = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Регистратор
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Номенклатура = &Номенклатура";
	КонецЕсли; // в товарах НЕ движутся услуги, могут быть планы поэтому следует переьрать все возможные объекты

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой(); // доступно

КонецФункции

Процедура ПроизвестиПересчетВсехЦен(Знач ВидЦен, Знач Период = Неопределено, Знач РежимУстановкиЦен = 1, Знач ТолькоДляЗависимых = ИСТИНА, Знач НеВыводитьСообщенияОбОшибке = ЛОЖЬ, Знач ГлобальныйПересчет = ЛОЖЬ) Экспорт

	// режим 1 - для всех, 2 - да всех установленных, 3 - для неустановленых
	Если Период = Неопределено Тогда

		Период = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	ВидЦенКомментарий = ВидЦен.Комментарий;
	ВидЦен = ВидЦен.Ссылка;

	Если РежимУстановкиЦен = 1
		ИЛИ РежимУстановкиЦен = 3 Тогда

		Запрос = Новый Запрос;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры") Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка,
			|	&ПустаяЕдИзм КАК ЕдиницаИзмерения
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ЕдиницыИзмерения.Владелец.Ссылка,
			|	ЕдиницыИзмерения.Ссылка
			|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
			Запрос.УстановитьПараметр("ПустаяЕдИзм", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));

			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
				ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;

				Если РежимУстановкиЦен = 3 Тогда
					СложнаяЦена = ОбщийМодульПовторВТеченииСервера.ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Период, ЛОЖЬ, , , , , ЕдиницаИзмерения);
				Иначе
					СложнаяЦена = 0;
				КонецЕсли;

				Если РежимУстановкиЦен = 1
					ИЛИ СложнаяЦена = 0 Тогда // для 3го режима

					СтрокаТовара = Новый Структура;
					СтрокаТовара.Вставить("Номенклатура", Номенклатура);
					СтрокаТовара.Вставить("Цена", СложнаяЦена);
					ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , ВидЦенКомментарий, Период, ?(ТолькоДляЗависимых, ИСТИНА, ЛОЖЬ), , , , , ЕдиницаИзмерения, РежимУстановкиЦен, НеВыводитьСообщенияОбОшибке, ГлобальныйПересчет);
				КонецЕсли;

			КонецЦикла;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ Справочник.Номенклатура КАК Номенклатура
			|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ ";

			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;

				Если РежимУстановкиЦен = 3 Тогда
					СложнаяЦена = ОбщийМодульПовторВТеченииСервера.ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Период, ЛОЖЬ, , , , , ЕдиницаИзмерения);
				Иначе
					СложнаяЦена = 0;
				КонецЕсли;

				Если РежимУстановкиЦен = 1
					ИЛИ СложнаяЦена = 0 Тогда // для 3го режима

					СтрокаТовара = Новый Структура;
					СтрокаТовара.Вставить("Номенклатура", Номенклатура);
					СтрокаТовара.Вставить("Цена", СложнаяЦена);
					ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , ВидЦенКомментарий, Период, ?(ТолькоДляЗависимых, ИСТИНА, ЛОЖЬ), , , , , ЕдиницаИзмерения, РежимУстановкиЦен, НеВыводитьСообщенияОбОшибке, ГлобальныйПересчет);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	ИначеЕсли РежимУстановкиЦен = 2 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Цена,
		|	ЦеныСрезПоследних.Период,
		|	ЦеныСрезПоследних.Номенклатура,
		|	ЦеныСрезПоследних.ЕдиницаИзмерения
		|ИЗ РегистрСведений.Цены.СрезПоследних(&Период, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних ";

		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("Период", Период);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
				СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен.Ссылка, СтрокаТовара, , ВидЦен.Комментарий, Период, ?(ТолькоДляЗависимых, ИСТИНА, ЛОЖЬ), , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения, РежимУстановкиЦен, НеВыводитьСообщенияОбОшибке, ГлобальныйПересчет);

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьВсеЗависимыеЦеныПриСменеКурса(Знач Валюта = Неопределено, Знач Период = Неопределено, Знач ГлобальныйПересчет = ЛОЖЬ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидыЦен.Ссылка КАК Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|УПОРЯДОЧИТЬ ПО ВидыЦен.Зависимая";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВидовЦен = РезультатЗапроса.Выгрузить();
		ТаблицаВидовЦен.Свернуть("Ссылка");
		Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
			ОбщийМодульСервер.ПроизвестиПересчетВсехЦен(СтрокаВидаЦен.Ссылка, Период, 1, ИСТИНА, ИСТИНА, ГлобальныйПересчет);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция   РассчитатьНовуюЦену(Знач Номенклатура, Знач СтараяЦена = 0, Знач ВидЦен, Знач Дата, Знач Ссылка = Неопределено, Знач ЕдиницаИзмерения = Неопределено, Знач ВидЦенИсточник = Неопределено, Знач НеВыводитьСообщенияОбОшибке = ЛОЖЬ, Знач ГлобальныйПересчет = ЛОЖЬ, Знач ВидыЦенМогутОказатьсяНеСвязаны = ЛОЖЬ, Знач ПодменитьЦенуИсточника = Неопределено) Экспорт

	Цена = СтараяЦена;
	Если ВидЦенИсточник = Неопределено Тогда
		ВидЦенИсточник = ВидЦен.ОсновнойВидЦен;
	КонецЕсли;

	Если ЗначениеЗаполнено(ВидЦен)
		И ВидЦен.Зависимая
		И ЗначениеЗаполнено(ВидЦенИсточник) Тогда

		ВидЦенЦенаВЦелыхЕдиницах   = ЛОЖЬ;
		ВидЦенЦенаВДесятых 		   = ЛОЖЬ;
		ЗависимостьОпределена 	   = ЛОЖЬ;
		СтрокаНоменклатурнойГруппы = Неопределено;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп")
			И НЕ ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.Количество() = 0 Тогда

			НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
			РезультатЗапроса = ОбщийМодульПовторВТеченииСервера.ПолучитьСпособыФормированияЦенНоменклатурныхГрупп(ВидЦенИсточник, ВидЦен, НоменклатурнаяГруппа);

			Если НЕ РезультатЗапроса = Неопределено
				И НЕ РезультатЗапроса.Количество() = 0 Тогда

				СтрокаНоменклатурнойГруппы = РезультатЗапроса[0];
				ВидЦенФормулаРасчетаОтБазовогоВидаЦены = СтрокаНоменклатурнойГруппы.ФормулаРасчетаОтБазовогоВидаЦены;
				ВидЦенПроцентОтБазовойЦены 	= СтрокаНоменклатурнойГруппы.ПроцентОтБазовойЦены;
				ВидЦенЦенаВЦелыхЕдиницах 	= СтрокаНоменклатурнойГруппы.ЦенаВЦелыхЕдиницах;
				ВидЦенЦенаВДесятых 			= СтрокаНоменклатурнойГруппы.ЦенаВДесятых;
				ВидЦенОкруглятьТолькоВБольшуюСторону = СтрокаНоменклатурнойГруппы.ОкруглятьТолькоВБольшуюСторону;
				ЗависимостьОпределена = ИСТИНА;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗависимостьОпределена Тогда
			Если ВидЦен.ИсточниковЗависимостиМожетБытьНесколько Тогда
				РезультатЗапроса = ОбщийМодульПовторВТеченииСервера.ПолучитьТаблицуЗависимостей(ВидЦенИсточник, ВидЦен);

				Если НЕ РезультатЗапроса = Неопределено
					И НЕ РезультатЗапроса.Количество() = 0 Тогда

					ВыборкаДетальныеЗаписи = РезультатЗапроса[0];
					ВидЦенФормулаРасчетаОтБазовогоВидаЦены = ВыборкаДетальныеЗаписи.ФормулаРасчетаОтБазовогоВидаЦены;
					ВидЦенПроцентОтБазовойЦены 	= ВыборкаДетальныеЗаписи.ПроцентОтБазовойЦены;
					ВидЦенЦенаВЦелыхЕдиницах 	= ВыборкаДетальныеЗаписи.ЦенаВЦелыхЕдиницах;
					ВидЦенЦенаВДесятых 			= ВыборкаДетальныеЗаписи.ЦенаВДесятых;
					ВидЦенОкруглятьТолькоВБольшуюСторону = ВыборкаДетальныеЗаписи.ОкруглятьТолькоВБольшуюСторону;
					ЗависимостьОпределена = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗависимостьОпределена
			И (ВидЦен.ОсновнойВидЦен = ВидЦенИсточник
			ИЛИ НЕ ВидыЦенМогутОказатьсяНеСвязаны) Тогда

			ВидЦенФормулаРасчетаОтБазовогоВидаЦены = ВидЦен.ФормулаРасчетаОтБазовогоВидаЦены;
			ВидЦенПроцентОтБазовойЦены 	= ВидЦен.ПроцентОтБазовойЦены;
			ВидЦенЦенаВЦелыхЕдиницах 	= ВидЦен.ЦенаВЦелыхЕдиницах;
			ВидЦенЦенаВДесятых 			= ВидЦен.ЦенаВДесятых;
			ВидЦенОкруглятьТолькоВБольшуюСторону = ВидЦен.ОкруглятьТолькоВБольшуюСторону;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВидЦенФормулаРасчетаОтБазовогоВидаЦены) Тогда
			Попытка
				Если ПодменитьЦенуИсточника = Неопределено Тогда

					ЦенаИсточника = ПолучитьСложнуюЦену(Номенклатура, ВидЦенИсточник, Дата, НЕ НеВыводитьСообщенияОбОшибке, , , , , ЕдиницаИзмерения, ГлобальныйПересчет);
				Иначе
					ЦенаИсточника = ПодменитьЦенуИсточника;
				КонецЕсли;

				Если НЕ ЦенаИсточника = 0 Тогда
					Цена2 = 0;
					Цена3 = 0;
					Валюта = ВидЦенИсточник.ВалютаЦены;
					Валюта2 = Валюта;
					Валюта3 = Валюта;
					ВидЦен2 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");

					Если ЗначениеЗаполнено(ВидЦен2) Тогда
						Цена2 = ПолучитьСложнуюЦену(Номенклатура, ВидЦен2, Дата, ЛОЖЬ, , , , , ЕдиницаИзмерения);
						Валюта2 = ВидЦен2.ВалютаЦены;
					КонецЕсли;

					ВидЦен3 = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТретийВидЦенДляФормул");

					Если ЗначениеЗаполнено(ВидЦен3) Тогда
						Цена3 = ПолучитьСложнуюЦену(Номенклатура, ВидЦен3, Дата, ЛОЖЬ, , , , , ЕдиницаИзмерения);
						Валюта3 = ВидЦен3.ВалютаЦены;
					КонецЕсли;

					ЦенаИсточника = ПоКурсу(ЦенаИсточника, ВидЦен.ВалютаЦены, ВидЦенИсточник.ВалютаЦены, Дата);
					ЛьготнаяЦена = ПолучитьЛьготнуюЦену(Номенклатура, , ЦенаИсточника, ВидЦен);
					Выполнить(" Цена = " + ВидЦенФормулаРасчетаОтБазовогоВидаЦены.Формула + ";");
				КонецЕсли;

			Исключение
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при формировании цены") + ": " + ТекстОписаниеОшибки, , Ссылка);
				КонецЕсли;

			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(ВидЦенПроцентОтБазовойЦены) Тогда
			Если ПодменитьЦенуИсточника = Неопределено Тогда
				ЦенаИсточника = ПолучитьСложнуюЦену(Номенклатура, ВидЦенИсточник, Дата, НЕ НеВыводитьСообщенияОбОшибке, , , , , ЕдиницаИзмерения, ГлобальныйПересчет);
			Иначе
				ЦенаИсточника = ПодменитьЦенуИсточника;
			КонецЕсли;

			Если НЕ ЦенаИсточника = 0 Тогда
				Цена = ПоКурсу(ЦенаИсточника, ВидЦен.ВалютаЦены, ВидЦенИсточник.ВалютаЦены, Дата);
				Цена = (Цена / 100) * ВидЦенПроцентОтБазовойЦены;
				Если Цена = 0 Тогда
					Цена = 0.01;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ВидЦенЦенаВЦелыхЕдиницах
			ИЛИ ВидЦенЦенаВДесятых Тогда

			Если ВидЦенЦенаВДесятых Тогда
				Цена = Цена * 10;
			КонецЕсли;

			Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
				ЦенаЦел = цел(Цена);
				Если НЕ ЦенаЦел = Цена Тогда
					Цена = ЦенаЦел + 1;
				КонецЕсли;
			ИначеЕсли НЕ цена = 0 Тогда
				Цена = окр(Цена);

				Если Цена = 0 Тогда
					Цена = 1;
				КонецЕсли;
			КонецЕсли;

			Если ВидЦенЦенаВДесятых Тогда
				Цена = Цена / 10;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Цена;

КонецФункции

Функция   РассчитатьОриентировочнуюВаловуюПрибыль(Знач Номенклатура, Знач Количество = 1, Знач Дата, Знач Сумма, Знач Валюта = Неопределено, Знач Курс = 1, Знач СерияНоменклатуры = Неопределено) Экспорт

	Если Валюта = Неопределено Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;

	Результат = Сумма; // в осн вал!

	Если ЗначениеЗаполнено(Номенклатура) Тогда

		Запрос = Новый Запрос;
		Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
			Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних.Цена КАК Цена
			|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних"
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ВЫБОР
			|		КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0
			|			ТОГДА 0

			|		ИНАЧЕ ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
			|	КОНЕЦ КАК Цена,
			|	ТоварыОстатки.Номенклатура
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата,
			|			Номенклатура = &Номенклатура
			|				И (&НетТребованияКСерии
			|					ИЛИ СерияНоменклатуры = &СерияНоменклатуры)) КАК ТоварыОстатки";
			Запрос.УстановитьПараметр("НетТребованияКСерии", (НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетВаловойПрибылиПоОтдельнымСериямНоменклатуры")) ИЛИ (НЕ ЗначениеЗаполнено(СерияНоменклатуры)));
			Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		КонецЕсли;

		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Дата", Дата);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Результат = (Сумма * Курс) - Количество * ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Рассчитать Ориентировочную Валовую Прибыль

Функция   РекомендуемыйМинимальныйОстатокТовара(Знач Номенклатура) Экспорт

	Если ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры Тогда
		Возврат Номенклатура.РекомендуемыйМинимальныйОстатокТовара;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция   СлучайноеЧисло() Экспорт

	Попытка
		ScrCtrl = Новый COMОбъект("MSScriptControl.ScriptControl");
		ScrCtrl.Language = "VBscript";
		ScrCtrl.ExecuteStatement("randomize");

		Возврат ScrCtrl.Eval("rnd");
	Исключение

		Возврат Неопределено;
	КонецПопытки;

КонецФункции //СлучайноеЧисло

Функция   СоздатьДокументСторно(Знач ОбъектСсылка, Знач Причина) Экспорт

	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002460", , , ОбъектСсылка);
	Если НЕ Отказ Тогда
		Результат = ОбъектСсылка.Скопировать();
		Результат.Сторный = ИСТИНА;
		Результат.ДокументСторно = ОбъектСсылка;
		Результат.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ТипЗнчОбъектСсылка = ТипЗнч(ОбъектСсылка);
		РежимПроведенияДокументаНеоперативный = ИСТИНА;
		Результат.Записать(РежимЗаписиДокумента.Проведение, ?(РежимПроведенияДокументаНеоперативный, РежимПроведенияДокумента.Неоперативный, РежимПроведенияДокумента.Оперативный));

		Попытка
			Сторнирование = РегистрыСведений.СторнированныеДокументы.СоздатьМенеджерЗаписи();
			Сторнирование.Активность = ИСТИНА;
			Сторнирование.Причина    = Причина;
			Сторнирование.СторнированныйДокумент = ОбъектСсылка;
			Сторнирование.СторныйДокумент = Результат.Ссылка;
			Попытка
				Сторнирование.Записать(ИСТИНА);

				Возврат Результат.Ссылка;
			Исключение // Записи в регистр сведений
				ТекстОписаниеОшибки = ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка регистрации причины") + ": " + ТекстОписаниеОшибки);

				Возврат Результат.Ссылка;
			КонецПопытки; // Записи в регистр сведений
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка создания документа сторно") + ": " + ТекстОписаниеОшибки, ОбъектСсылка);

			Возврат Неопределено;
		КонецПопытки;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет прав на сторнирование документов!"), ОбъектСсылка);
	КонецЕсли;

КонецФункции // Создать Документ Сторно

Функция   СоздатьИзображениеПоСсылке(Знач СвязанныйОбъект, Знач ИмяИзображения = "", Знач АдресВСети = "", Знач АдресВИнтернет = "", Знач ЗагружатьВБазуДанных = ЛОЖЬ, Знач РазмерПриОтображении = Неопределено) Экспорт

	Если ПустаяСтрока(ИмяИзображения) Тогда
		ИмяИзображения = "" + СвязанныйОбъект;
	КонецЕсли;

	Если РазмерПриОтображении = Неопределено Тогда
		РазмерПриОтображении = Перечисления.РазмерыКартинок.АвтоРазмер;
	КонецЕсли;

	Изображение = Справочники.Изображения.СоздатьЭлемент();
	Изображение.ИмяФайлаИзображения  = АдресВСети;
	Изображение.СсылкаНаИзображение  = АдресВИнтернет;
	Изображение.Наименование 		 = ИмяИзображения;
	Изображение.РазмерПриОтображении = РазмерПриОтображении;
	Изображение.СвязанныйОбъект 	 = СвязанныйОбъект;

	Если ЗагружатьВБазуДанных Тогда
		АдресЛокально = КаталогВременныхФайлов() + "\ET_teMP.JPg";
		КопироватьФайл(?(ЗначениеЗаполнено(АдресВСети), АдресВСети, АдресВИнтернет), АдресЛокально);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресЛокально);
		Изображение.ХранилищеИзображения = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		Изображение.ИзображениеВБазеДанных = ИСТИНА;
		УдалитьФайлы(АдресЛокально);
	КонецЕсли;

	Изображение.Записать();

	Возврат Изображение.Ссылка;

КонецФункции

Функция   НайтиИлиСоздатьНовыйЭлементИлиДокумент(Знач ЭтоСправочник = ИСТИНА, Знач НаименованиеВида = "Номенклатура", Знач ПервоначальноеНаименованиеСправочника = "", Знач ЭтоГруппа = ЛОЖЬ) Экспорт

	Если ЭтоСправочник Тогда
		Если НЕ ЗначениеЗаполнено(ПервоначальноеНаименованиеСправочника) Тогда
			ПервоначальноеНаименованиеСправочника = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый") + " ";
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК " + НаименованиеВида + "	ГДЕ
		|	" + НаименованиеВида + ".Наименование = &Наименование ";

		Если ЭтоГруппа Тогда
			Запрос.Текст = Запрос.Текст + " И " + НаименованиеВида + ".ЭтоГруппа = ИСТИНА";
		КонецЕсли;

		Запрос.УстановитьПараметр("Наименование", ПервоначальноеНаименованиеСправочника);

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Если ЭтоГруппа Тогда
				НовыйЭлементИлиДокумент = Справочники[НаименованиеВида].СоздатьГруппу();
			Иначе
				НовыйЭлементИлиДокумент = Справочники[НаименованиеВида].СоздатьЭлемент();
			КонецЕсли;

			НовыйЭлементИлиДокумент.Наименование = ПервоначальноеНаименованиеСправочника;
			НовыйЭлементИлиДокумент.Записать();
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			НовыйЭлементИлиДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли
	Иначе
		НовыйЭлементИлиДокумент = Документы[НаименованиеВида].СоздатьДокумент();
		НовыйЭлементИлиДокумент.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

	Возврат НовыйЭлементИлиДокумент.Ссылка;

КонецФункции

Функция   СоставитьТелефон(Знач ЭлементСправочника, Знач СКонтактами = ЛОЖЬ) Экспорт

	ПолныйНомерТелефона = ЭлементСправочника.Телефон;
	Если СКонтактами Тогда
		ЭтотКонтакт = ЭлементСправочника.Контакт;
		Если НЕ ПустаяСтрока(ЭтотКонтакт) Тогда
			ПолныйНомерТелефона = ПолныйНомерТелефона + " (" + ЭтотКонтакт + ") ";
		КонецЕсли;
	КонецЕсли;

	Для НомерТелефона = 2 по 5 Цикл
		ЭтотНомерТелефона = ЭлементСправочника["Телефон" + СокрЛП(НомерТелефона)];
		Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
			ПолныйНомерТелефона = ПолныйНомерТелефона + ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
		КонецЕсли;

		Если СКонтактами Тогда
			ЭтотКонтакт = ЭлементСправочника["Контакт" + СокрЛП(НомерТелефона)];
			Если НЕ ПустаяСтрока(ЭтотКонтакт) Тогда
				ПолныйНомерТелефона = ПолныйНомерТелефона + " (" + ЭтотКонтакт + ") ";
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ПолныйНомерТелефона;

КонецФункции // Составить Телефон

Функция   СуществуютЗависимыеВидыЦен() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = ИСТИНА
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ ";

	РезультатЗапроса = Запрос.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции // Существуют Зависимые Виды Цен

Функция   СформироватьИнформацияРуководителюНаСервере(Знач СтруктураУсловий) Экспорт

	ПараметрыОтчетаРуководителю = Новый Структура;
	Реквизиты = Метаданные.Отчеты.ИнформацияРуководителю.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		ПараметрыОтчетаРуководителю.Вставить(Реквизит.Имя);

		Если СокрЛП(Реквизит.Тип) = "Число" Тогда
			ПараметрыОтчетаРуководителю[Реквизит.Имя] = 0;
		ИначеЕсли СокрЛП(Реквизит.Тип) = "Дата" Тогда
			ПараметрыОтчетаРуководителю[Реквизит.Имя] = '00010101000000';
		ИначеЕсли СокрЛП(Реквизит.Тип) = "Строка" Тогда
			ПараметрыОтчетаРуководителю[Реквизит.Имя] = "";
		КонецЕсли;
	КонецЦикла;

	ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности = СтруктураУсловий.ОтборПоНаправлениюДеятельности;
	ПараметрыОтчетаРуководителю.ОтборПоСкладу   = СтруктураУсловий.ОтборПоСкладу;
	ПараметрыОтчетаРуководителю.ЦенаПредприятия = 0;
	ДатаНачалаОтчета 	= НачалоДня(СтруктураУсловий.ДатаНачала);
	ДатаОкончанияОтчета = КонецДня(СтруктураУсловий.ДатаОкончания);
	ПараметрыОтчетаРуководителю.ДатаНачала	= ДатаНачалаОтчета;
	ПараметрыОтчетаРуководителю.ДатаОкончания	= ДатаОкончанияОтчета;
	ПараметрыОтчетаРуководителю.ЦенаПредприятия = 0;

	Если ЗначениеЗаполнено(ДатаНачалаОтчета)
		И ЗначениеЗаполнено(ДатаОкончанияОтчета)Тогда

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
			Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
				ПараметрыОтчетаРуководителю.НачальныйОстатокДенег =	ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаНачалаОтчета, , , , ИСТИНА);
				ПараметрыОтчетаРуководителю.ТекущийОстатокДенег   =	ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОкончанияОтчета, , , , ИСТИНА);

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	СУММА(ВЫБОР
				|			КОГДА Деньги.ВидДвижения = &ВидДвиженияНакопленияПриход
				|				ТОГДА Деньги.Сумма
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК СуммаПриход,
				|	СУММА(ВЫБОР
				|			КОГДА НЕ Деньги.ВидДвижения = &ВидДвиженияНакопленияПриход
				|				ТОГДА Деньги.Сумма
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК СуммаРасход,
				|	СУММА(ВЫБОР
				|			КОГДА Деньги.ВидДвижения = &ВидДвиженияНакопленияПриход
				|				ТОГДА Деньги.Сумма
				|			ИНАЧЕ -Деньги.Сумма
				|		КОНЕЦ) КАК СуммаОборот
				|ИЗ
				|	РегистрНакопления.Деньги КАК Деньги
				|ГДЕ
				|	Деньги.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
				|	И Деньги.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности";
				Запрос.УстановитьПараметр("ВидДвиженияНакопленияПриход", ВидДвиженияНакопления.Приход);
				Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
				Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
				Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
				ПараметрыОтчетаРуководителю.РасходДенег 	= 0;
				ПараметрыОтчетаРуководителю.ПоступилоДенег 	= 0;
				ПараметрыОтчетаРуководителю.ОборотДенег 	= 0;

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПараметрыОтчетаРуководителю.ОборотДенег    = ПараметрыОтчетаРуководителю.ОборотДенег + ВыборкаДетальныеЗаписи.СуммаОборот;
						ПараметрыОтчетаРуководителю.РасходДенег    = ПараметрыОтчетаРуководителю.РасходДенег + ВыборкаДетальныеЗаписи.СуммаРасход;
						ПараметрыОтчетаРуководителю.ПоступилоДенег = ПараметрыОтчетаРуководителю.ПоступилоДенег + ВыборкаДетальныеЗаписи.СуммаПриход;

					КонецЦикла;
				КонецЕсли;
			Иначе

				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ ДеньгиОстаткиИОбороты.СуммаПриход,
				|	ДеньгиОстаткиИОбороты.СуммаРасход,
				|	ДеньгиОстаткиИОбороты.СуммаНачальныйОстаток,
				|	ДеньгиОстаткиИОбороты.СуммаКонечныйОстаток,
				|	ДеньгиОстаткиИОбороты.СуммаОборот
				|ИЗ РегистрНакопления.Деньги.ОстаткиИОбороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , , ) КАК ДеньгиОстаткиИОбороты";
				Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
				Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
				ПараметрыОтчетаРуководителю.РасходДенег 			= 0;
				ПараметрыОтчетаРуководителю.ТекущийОстатокДенег 	= 0;
				ПараметрыОтчетаРуководителю.НачальныйОстатокДенег = 0;
				ПараметрыОтчетаРуководителю.ПоступилоДенег 		= 0;
				ПараметрыОтчетаРуководителю.ОборотДенег 			= 0;

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПараметрыОтчетаРуководителю.ОборотДенег 			= ПараметрыОтчетаРуководителю.ОборотДенег + ВыборкаДетальныеЗаписи.СуммаОборот;
						ПараметрыОтчетаРуководителю.РасходДенег 			= ПараметрыОтчетаРуководителю.РасходДенег + ВыборкаДетальныеЗаписи.СуммаРасход;
						ПараметрыОтчетаРуководителю.ТекущийОстатокДенег 	= ПараметрыОтчетаРуководителю.ТекущийОстатокДенег + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
						ПараметрыОтчетаРуководителю.НачальныйОстатокДенег 	= ПараметрыОтчетаРуководителю.НачальныйОстатокДенег + ВыборкаДетальныеЗаписи.СуммаНачальныйОстаток;
						ПараметрыОтчетаРуководителю.ПоступилоДенег 			= ПараметрыОтчетаРуководителю.ПоступилоДенег + ВыборкаДетальныеЗаписи.СуммаПриход;

					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			ПараметрыОтчетаРуководителю.ЦенаПредприятия = ПараметрыОтчетаРуководителю.ЦенаПредприятия + ПараметрыОтчетаРуководителю.ТекущийОстатокДенег;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продажи.Регистратор) КАК Кво
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);

		РезультатЗапроса  = Запрос.Выполнить();
		ПараметрыОтчетаРуководителю.ВсегоПродаж = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПараметрыОтчетаРуководителю.ВсегоПродаж = ПараметрыОтчетаРуководителю.ВсегоПродаж + ВыборкаДетальныеЗаписи.кво;
			КонецЦикла;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ Продажи.Количество,
		|	Продажи.Сумма,
		|	Продажи.Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Продажи.Период";
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		ПараметрыОтчетаРуководителю.ПроданоКоличество = 0;
		ПараметрыОтчетаРуководителю.ПроданоНаСумму 	= 0;
		ПараметрыОтчетаРуководителю.ПоследняяПродажа 	= '00010101000000';

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПараметрыОтчетаРуководителю.ПроданоКоличество = ПараметрыОтчетаРуководителю.ПроданоКоличество  + ВыборкаДетальныеЗаписи.Количество;
				ПараметрыОтчетаРуководителю.ПроданоНаСумму = ПараметрыОтчетаРуководителю.ПроданоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				ПараметрыОтчетаРуководителю.ПоследняяПродажа = ВыборкаДетальныеЗаписи.Период;

			КонецЦикла;
		КонецЕсли;

		Если ПараметрыОтчетаРуководителю.ВсегоПродаж = 0 Тогда
			ПараметрыОтчетаРуководителю.СреднееКоличествоРеализации = 0;
			ПараметрыОтчетаРуководителю.СредняяСуммаРеализации 		= 0;
		Иначе
			ПараметрыОтчетаРуководителю.СреднееКоличествоРеализации = ПараметрыОтчетаРуководителю.ПроданоКоличество / ПараметрыОтчетаРуководителю.ВсегоПродаж;
			ПараметрыОтчетаРуководителю.СредняяСуммаРеализации 		= ПараметрыОтчетаРуководителю.ПроданоНаСумму / ПараметрыОтчетаРуководителю.ВсегоПродаж;
		КонецЕсли;

		// ПОСТУПИЛО

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.ВидДвижения = &приход
		|	И Товары.СписаниеИлиОприходование = ИСТИНА";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Запрос.УстановитьПараметр("приход", ВидДвиженияНакопления.Приход);
		ПоступилоКоличество 		= 0;
		ПоступилоТовараНаСумму 	= 0;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПоступилоКоличество 		= ПоступилоКоличество + ВыборкаДетальныеЗаписи.Количество;
				ПоступилоТовараНаСумму 	= ПоступилоТовараНаСумму + ВыборкаДетальныеЗаписи.Сумма;

			КонецЦикла;
		КонецЕсли;

		ПараметрыОтчетаРуководителю.ПоступилоКоличество 		= ПоступилоКоличество;
		ПараметрыОтчетаРуководителю.ПоступилоТовараНаСумму 	= ПоступилоТовараНаСумму;
		// СПИСАНО

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.СписаниеИлиОприходование = ИСТИНА
		|	И Товары.ВидДвижения = &Расход";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		СписаноКоличество = 0;
		СписаноНаСумму 	= 0;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписаноКоличество 	= СписаноКоличество + ВыборкаДетальныеЗаписи.Количество;
				СписаноНаСумму 		= СписаноНаСумму + ВыборкаДетальныеЗаписи.Сумма;

			КонецЦикла;
		КонецЕсли;

		ПараметрыОтчетаРуководителю.СписаноКоличество = СписаноКоличество;
		ПараметрыОтчетаРуководителю.СписаноНаСумму 	= СписаноНаСумму;
		// ЗАКУПКИ

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Закупки.Количество,
		|	Закупки.Сумма,
		|	Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Закупки.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		КонецЕсли;

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " И Закупки.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Закупки.Период";
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		ПараметрыОтчетаРуководителю.КупленоКоличество = 0;
		ПараметрыОтчетаРуководителю.КупленоНаСумму 	= 0;
		ПараметрыОтчетаРуководителю.ПоследняяПокупка 	= '00010101000000';

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПараметрыОтчетаРуководителю.КупленоКоличество = ПараметрыОтчетаРуководителю.КупленоКоличество + ВыборкаДетальныеЗаписи.Количество;
				ПараметрыОтчетаРуководителю.КупленоНаСумму 	= ПараметрыОтчетаРуководителю.КупленоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				ПараметрыОтчетаРуководителю.ПоследняяПокупка 	= ВыборкаДетальныеЗаписи.Период;

			КонецЦикла;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыОстатки.Номенклатура) КАК КвоПозиций,
		|	СУММА(ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток,0)) КАК КоличествоОстаток,
		|	СУММА(ЕСТЬNULL(ТоварыОстатки.СуммаОстаток,0)) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " Склад = &Склад ) КАК ТоварыОстатки";
			Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
		Иначе
			Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
		ПараметрыОтчетаРуководителю.ОстаткиТоваровКоличество  = 0;
		ПараметрыОтчетаРуководителю.ОстаткиТовараНаСумму 	= 0;
		ПараметрыОтчетаРуководителю.КоличествоПозицийНоменклатурыВОстатках = 0;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.КоличествоОстаток = NULL Тогда
					ПараметрыОтчетаРуководителю.ОстаткиТоваровКоличество 	= ПараметрыОтчетаРуководителю.ОстаткиТоваровКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				КонецЕсли;

				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = NULL Тогда
					ПараметрыОтчетаРуководителю.ОстаткиТовараНаСумму 	= ПараметрыОтчетаРуководителю.ОстаткиТовараНаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЕсли;

				Если НЕ ВыборкаДетальныеЗаписи.КвоПозиций = NULL Тогда
					ПараметрыОтчетаРуководителю.КоличествоПозицийНоменклатурыВОстатках = ПараметрыОтчетаРуководителю.КоличествоПозицийНоменклатурыВОстатках + ВыборкаДетальныеЗаписи.КвоПозиций;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ПараметрыОтчетаРуководителю.ЦенаПредприятия = ПараметрыОтчетаРуководителю.ЦенаПредприятия + ПараметрыОтчетаРуководителю.ОстаткиТовараНаСумму;

		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Период КАК Период
			|ИЗ РегистрСведений.Цены КАК Цены
			|ГДЕ Цены.Период <= &ДатаОкончанияОтчета
			|УПОРЯДОЧИТЬ ПО Период УБЫВ";
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ПоследняяПереоценка = ВыборкаДетальныеЗаписи.Период;

				КонецЦикла;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход Из РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , Склад = &Склад) КАК ВаловаяПрибыльОбороты";
			Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
				Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад = &Склад", "");
			КонецЕсли;

			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			ПараметрыОтчетаРуководителю.ОбщаяВаловаяПрибыль = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ОбщаяВаловаяПрибыль = ПараметрыОтчетаРуководителю.ОбщаяВаловаяПрибыль + ВыборкаДетальныеЗаписи.СуммаПриход;

				КонецЦикла;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0) КАК ПроцентНаценки
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ ВаловаяПрибыль.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";

			Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоСкладу) Тогда
				Запрос.Текст = Запрос.Текст + " И ВаловаяПрибыль.Склад = &Склад ";
				Запрос.УстановитьПараметр("Склад", ПараметрыОтчетаРуководителю.ОтборПоСкладу);
			КонецЕсли;

			Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
				Запрос.Текст = Запрос.Текст + " И ВаловаяПрибыль.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности ";
				Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
			КонецЕсли;

			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			ЧислоНаценок = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				СреднийПроцентНаценки  = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЧислоНаценок = ЧислоНаценок + 1;
					СреднийПроцентНаценки = СреднийПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;

				КонецЦикла;
			КонецЕсли;

			Если ЧислоНаценок = 0 Тогда
				ПараметрыОтчетаРуководителю.СреднийПроцентНаценки = 0;
			Иначе
				ПараметрыОтчетаРуководителю.СреднийПроцентНаценки = СреднийПроцентНаценки / ЧислоНаценок;
			КонецЕсли;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, ) КАК РасчетыОстатки";
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			ПараметрыОтчетаРуководителю.ТекущийДолгКлиентов = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ТекущийДолгКлиентов = ПараметрыОтчетаРуководителю.ТекущийДолгКлиентов  + ВыборкаДетальныеЗаписи.суммаОстаток;

				КонецЦикла;
			КонецЕсли;

			ПараметрыОтчетаРуководителю.ЦенаПредприятия = ПараметрыОтчетаРуководителю.ЦенаПредприятия + ПараметрыОтчетаРуководителю.ТекущийДолгКлиентов;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСОтсрочкой.Остатки(&ДатаОстатка, ) КАК РасчетыОстатки";
				Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
				ПараметрыОтчетаРуководителю.ПросроченныйДолгКлиентов = 0;

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПараметрыОтчетаРуководителю.ПросроченныйДолгКлиентов = ПараметрыОтчетаРуководителю.ПросроченныйДолгКлиентов + ВыборкаДетальныеЗаписи.суммаОстаток;

					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, ) КАК РасчетыСПоставщикамиОстатки";
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			ПараметрыОтчетаРуководителю.ТекущийДолгПередПоставщиками = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ТекущийДолгПередПоставщиками = ПараметрыОтчетаРуководителю.ТекущийДолгПередПоставщиками + ВыборкаДетальныеЗаписи.суммаОстаток;

				КонецЦикла;
			КонецЕсли;

			ПараметрыОтчетаРуководителю.ЦенаПредприятия = ПараметрыОтчетаРуководителю.ЦенаПредприятия - ПараметрыОтчетаРуководителю.ТекущийДолгПередПоставщиками;

			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой.Остатки(&ДатаОстатка, ) КАК РасчетыСПоставщикамиОстатки";
				Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
				ПараметрыОтчетаРуководителю.ПросроченныйДолгПередПоставщиками = 0;

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ПараметрыОтчетаРуководителю.ПросроченныйДолгПередПоставщиками = ПараметрыОтчетаРуководителю.ПросроченныйДолгПередПоставщиками + ВыборкаДетальныеЗаписи.суммаОстаток;

					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА Зарплата.ВидДвижения = &ВидДвиженияПриход
			|				ТОГДА Зарплата.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаПриход,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ Зарплата.ВидДвижения = &ВидДвиженияПриход
			|				ТОГДА Зарплата.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаРасход,
			|	СУММА(ВЫБОР
			|			КОГДА Зарплата.ВидДвижения = &ВидДвиженияПриход
			|				ТОГДА Зарплата.Сумма
			|			ИНАЧЕ -Зарплата.Сумма
			|		КОНЕЦ) КАК СуммаОборот
			|ИЗ
			|	РегистрНакопления.Зарплата КАК Зарплата
			|ГДЕ
			|	Зарплата.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
			|	И Зарплата.Регистратор.НаправлениеДеятельности = &НаправлениеДеятельности";
			Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияОтчета);
			ПараметрыОтчетаРуководителю.ВыданоСотрудникам 	 = 0;
			ПараметрыОтчетаРуководителю.НачисленоСотрудникам = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ВыданоСотрудникам 		 = ПараметрыОтчетаРуководителю.ВыданоСотрудникам + ВыборкаДетальныеЗаписи.СуммаРасход;
					ПараметрыОтчетаРуководителю.НачисленоСотрудникам 	 = ПараметрыОтчетаРуководителю.НачисленоСотрудникам + ВыборкаДетальныеЗаписи.СуммаПриход;
					ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам = ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам + ВыборкаДетальныеЗаписи.СуммаОборот;
				КонецЦикла;
			КонецЕсли;
		Иначе

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстаткиИОбороты.СуммаПриход,
			|	ЗарплатаОстаткиИОбороты.СуммаРасход,
			|	ЗарплатаОстаткиИОбороты.СуммаКонечныйОстаток
			|ИЗ РегистрНакопления.Зарплата.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , ) КАК ЗарплатаОстаткиИОбороты";
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияОтчета);
			ПараметрыОтчетаРуководителю.ВыданоСотрудникам 		 = 0;
			ПараметрыОтчетаРуководителю.НачисленоСотрудникам 	 = 0;
			ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам = 0;

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыОтчетаРуководителю.ВыданоСотрудникам 		 = ПараметрыОтчетаРуководителю.ВыданоСотрудникам + ВыборкаДетальныеЗаписи.СуммаРасход;
					ПараметрыОтчетаРуководителю.НачисленоСотрудникам 	 = ПараметрыОтчетаРуководителю.НачисленоСотрудникам + ВыборкаДетальныеЗаписи.СуммаПриход;
					ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам = ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ПараметрыОтчетаРуководителю.ЦенаПредприятия = ПараметрыОтчетаРуководителю.ЦенаПредприятия - ПараметрыОтчетаРуководителю.ЗадолженностьСотрудникам;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ДвиженияДенег.Дата КАК Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.НачислениеИВыплатаЗаработнойПлаты = ИСТИНА
		|	И ДвиженияДенег.Проведен = ИСТИНА ";

		Если ЗначениеЗаполнено(ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности) Тогда
			Запрос.Текст = Запрос.Текст + " ДвиженияДенег.НаправлениеДеятельности = &НаправлениеДеятельности ";
			Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыОтчетаРуководителю.ОтборПоНаправлениюДеятельности);
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Дата УБЫВ ";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ПараметрыОтчетаРуководителю.ПоследнийРасчет = ВыборкаДетальныеЗаписи.Дата;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыОтчетаРуководителю;

КонецФункции

Функция   СформироватьПереченьОбъектовБазыДанных(Знач ТолькоСправочникиДокументыИРегистрыСведений = ЛОЖЬ, ОбъектыБазыДанных = Неопределено) Экспорт

	Если ОбъектыБазыДанных = Неопределено Тогда
		ОбъектыБазыДанных = Новый СписокЗначений;
	КонецЕсли;

	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СПРАВОЧНИКИ") + "..", ЛОЖЬ);

	Для Каждого СправочникИзМетаДанных Из Метаданные.Справочники Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, ЛОЖЬ);
	КонецЦикла;

	ОбъектыБазыДанных.Добавить("", " ", ЛОЖЬ);
	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ДОКУМЕНТЫ") + "..", ЛОЖЬ);
	Для Каждого СправочникИзМетаДанных Из Метаданные.Документы Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, ЛОЖЬ);
	КонецЦикла;

	Если НЕ ТолькоСправочникиДокументыИРегистрыСведений
		И Константы.ВестиУчетЗаказовКлиентов.Получить() Тогда

		ОбъектыБазыДанных.Добавить("РасходыТовара" + "ЗаказКлиента", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы клиентов"), ЛОЖЬ);
	КонецЕсли;

	Если НЕ ТолькоСправочникиДокументыИРегистрыСведений
		И Константы.ВестиУчетЗаказовПоставщикам.Получить() Тогда

		ОбъектыБазыДанных.Добавить("ПоступленияТовара" + "ЗаказПоставщику", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заказы поставщикам"), ЛОЖЬ);
	КонецЕсли;

	Если НЕ ТолькоСправочникиДокументыИРегистрыСведений
		И Константы.ВестиУчетЗарплатыСотрудников.Получить() Тогда

		ОбъектыБазыДанных.Добавить("ДвиженияДенег" + "Зарплата", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы заработной платы"), ЛОЖЬ);
	КонецЕсли;

	Если НЕ ТолькоСправочникиДокументыИРегистрыСведений Тогда
		ОбъектыБазыДанных.Добавить("КорректировкиИРегистрацияОстатков" + "Взаимозачет", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Документы взаимозачета"), ЛОЖЬ);
	КонецЕсли;

	ОбъектыБазыДанных.Добавить("", " ", ЛОЖЬ);
	ОбъектыБазыДанных.Добавить("", "		" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("РЕГИСТРЫ") + "..", ЛОЖЬ);
	Для Каждого СправочникИзМетаДанных Из Метаданные.РегистрыСведений Цикл
		ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, ЛОЖЬ);
	КонецЦикла;

	Если НЕ ТолькоСправочникиДокументыИРегистрыСведений Тогда
		Для Каждого СправочникИзМетаДанных Из Метаданные.РегистрыНакопления Цикл
			ОбъектыБазыДанных.Добавить(СправочникИзМетаДанных.Имя, СправочникИзМетаДанных.Синоним, ЛОЖЬ);
		КонецЦикла;
	КонецЕсли;

	Возврат ОбъектыБазыДанных;

КонецФункции

Процедура СформироватьПланФактныйОтчетНаСервере(Знач ДокументПланПродаж, Результат) Экспорт

	НаправлениеДокумента = ДокументПланПродаж.НаправлениеДеятельности;
	ТаблицаРезультат = ДокументПланПродаж.Товары.Выгрузить();
	ТаблицаРезультат.Колонки.Добавить("СуммаПродаж");
	ТаблицаРезультат.Колонки.Добавить("СуммаВыполнено");
	ТаблицаРезультат.Колонки.Добавить("КоличествоПродаж");
	ТаблицаРезультат.Колонки.Добавить("КоличествоВыполнено");
	ТаблицаРезультат.Колонки.Добавить("ДокументПланПродаж");
	ТаблицаРезультат.Колонки.Добавить("Направление");
	ТаблицаРезультат.Колонки.Добавить("Регион");
	ДатаНачала 	  = НачалоДня(ДокументПланПродаж.ДатаНачала);
	ДатаОкончания = КонецДня(ДокументПланПродаж.ДатаОкончания);

	Для Каждого СтрокаПлана Из ТаблицаРезультат Цикл
		СтрокаПлана.СуммаПродаж = 0;
		СтрокаПлана.КоличествоПродаж = 0;
		СтрокаПлана.КоличествоВыполнено = 0;
		СтрокаПлана.ДокументПланПродаж = ДокументПланПродаж.Ссылка;
		СтрокаПлана.Направление = НаправлениеДокумента;
		СтрокаПлана.Регион = ДокументПланПродаж.Регион;
		СтрокаПланаНоменклатураИлиГруппа = СтрокаПлана.НоменклатураИлиГруппа;

		Если ЗначениеЗаполнено(СтрокаПланаНоменклатураИлиГруппа) Тогда
			СтрокаПлана.СуммаПродаж = 0;
			СтрокаПлана.КоличествоПродаж = 0;
			СтрокаПлана.СуммаВыполнено = 0;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот КАК Количество,
			|	ПродажиОбороты.СуммаОборот КАК Сумма,
			|	ПродажиОбороты.Номенклатура КАК Номенклатура
			|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиОбороты
			|ГДЕ ИСТИНА ";

			Если ЗначениеЗаполнено(ДокументПланПродаж.Регион) Тогда
				Запрос.Текст = Запрос.Текст + " И ПродажиОбороты.Клиент.Регион = &Регион";
				Запрос.УстановитьПараметр("Регион", ДокументПланПродаж.Регион);
			КонецЕсли;

			Если ТипЗнч(СтрокаПланаНоменклатураИлиГруппа) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Запрос.Текст = Запрос.Текст + " И ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа ";
				Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СтрокаПланаНоменклатураИлиГруппа);
			ИначеЕсли ОбщийМодульПовтор.ЭтоГруппа(СтрокаПланаНоменклатураИлиГруппа) Тогда
				Запрос.Текст = Запрос.Текст + " И ПродажиОбороты.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры) ";
				Запрос.УстановитьПараметр("ГруппаНоменклатуры", СтрокаПланаНоменклатураИлиГруппа);
			Иначе
				Запрос.Текст = Запрос.Текст + " И ПродажиОбороты.Номенклатура = &Номенклатура ";
				Запрос.УстановитьПараметр("Номенклатура", СтрокаПланаНоменклатураИлиГруппа);
			КонецЕсли;

			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);

			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаПлана.СуммаПродаж = СтрокаПлана.СуммаПродаж + ВыборкаДетальныеЗаписи.Сумма;
				СтрокаПлана.КоличествоПродаж = СтрокаПлана.КоличествоПродаж + ВыборкаДетальныеЗаписи.Количество;

				Если НЕ СтрокаПлана.Количество = 0 Тогда
					СтрокаПлана.КоличествоВыполнено = СтрокаПлана.КоличествоПродаж / (СтрокаПлана.Количество / 100);
				Иначе
					СтрокаПлана.КоличествоВыполнено = 100;
				КонецЕсли;

				Если НЕ СтрокаПлана.Сумма = 0 Тогда
					СтрокаПлана.СуммаВыполнено = СтрокаПлана.СуммаПродаж / (СтрокаПлана.Сумма / 100);
				Иначе
					СтрокаПлана.СуммаВыполнено = 100;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаРезультат", ТаблицаРезультат);
	Попытка
		ПланФактныйАнализПродаж = Неопределено;

		Выполнить(" ПланФактныйАнализПродаж = Отчеты.ПланФактныйАнализПродаж.Создать(); "); // для бесплатной

		Схема 	  = ПланФактныйАнализПродаж.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Настройки = ПланФактныйАнализПродаж.КомпоновщикНастроек.Настройки;
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;

		Макет = Компоновщик.Выполнить(Схема,Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;

КонецПроцедуры

Процедура СформироватьПроизвольныйОтчетНаСервере(Знач ТаблицаПараметров, Результат, Знач НаименованиеОтчета, Знач НаименованиеВариантаНастройки = "") Экспорт

	Попытка
		Отчет 	  = Отчеты[НаименованиеОтчета].Создать();
		Схема 	  = Отчеты[НаименованиеОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
		Если НЕ ПустаяСтрока(НаименованиеВариантаНастройки) Тогда
			ВариантНастроек = Схема.ВариантыНастроек.Найти(НаименованиеВариантаНастройки);
			Если НЕ ВариантНастроек = Неопределено Тогда
				Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.ВариантыНастроек.Найти(НаименованиеВариантаНастройки).Настройки);
			КонецЕсли;			
		КонецЕсли;		

		Настройки = Отчет.КомпоновщикНастроек.Настройки;
		
		Для Каждого СтрокаНастроек Из ТаблицаПараметров Цикл
			Попытка
				Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(СтрокаНастроек.НаименованиеПараметра, СтрокаНастроек.ЗначениеПараметра);
			Исключение
			КонецПопытки;
		КонецЦикла;

		ДанныеРасшифровки 	= Новый ДанныеРасшифровкиКомпоновкиДанных;
		Компоновщик 		= Новый КомпоновщикМакетаКомпоновкиДанных;

		Макет 				= Компоновщик.Выполнить(Схема, Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		ТекстОписаниеОшибки = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ТекстОписаниеОшибки);
	КонецПопытки;

КонецПроцедуры

Функция   СформироватьТаблицуОстатков(Знач ссылка, Знач Склад = Неопределено, Знач Дата, Знач ОстаткиСледуетПроверять = ИСТИНА) Экспорт

	Если ОстаткиСледуетПроверять
		И ЗначениеЗаполнено(ссылка) Тогда // иначе зачем

		Запрос = Новый Запрос;

		Если склад = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(склад) Тогда

			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура)) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(
			|			&Дата,
			|			Номенклатура В (&всяНоменклатура)
			|				И Склад = &Склад) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры";
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;

		Запрос.УстановитьПараметр("всяНоменклатура", ссылка.товары.ВыгрузитьКолонку("номенклатура"));
		Запрос.УстановитьПараметр("Дата", Дата);

		результат = Запрос.Выполнить();

		Если результат.Пустой() Тогда
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
			ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
		Иначе
			ТаблицаОтвета = результат.Выгрузить();
		КонецЕсли;
	Иначе
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
	КонецЕсли;

	Возврат ТаблицаОтвета;

КонецФункции // Сформировать Таблицу Остатков

Функция   УдалитьНечисловыеСимволыИзТекста(Знач ЗначениеДанных, Знач РазрешенныйСимволРазделитель = ".", Знач МожетБытьОтрицательным = ЛОЖЬ) Экспорт

	Если РазрешенныйСимволРазделитель = "." Тогда
		НеверныйСимволРазделителяЧисла = ",";
	Иначе
		НеверныйСимволРазделителяЧисла = ".";
	КонецЕсли;

	ЗначениеДанных = СокрЛП(ЗначениеДанных);
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, НеверныйСимволРазделителяЧисла, РазрешенныйСимволРазделитель);
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, Символы.НПП, "");
	ЗначениеДанных = СтрЗаменить(ЗначениеДанных, Символы.Таб, "");
	ИтоговаяСтрока = "";
	ЧислоСимволов  = СтрДлина(ЗначениеДанных);
	СчетчикСимволов= 1;

	Пока СчетчикСимволов <= ЧислоСимволов Цикл
		СимволСтроки = Сред(ЗначениеДанных, СчетчикСимволов, 1);

		Если СимволСтроки = РазрешенныйСимволРазделитель
			ИЛИ (МожетБытьОтрицательным
			И СимволСтроки = "-") Тогда

			ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
		ИначеЕсли НЕ КодСимвола(СимволСтроки) = 32
			И НЕ СимволСтроки = "-" Тогда // " " -тоже 0

			Попытка
				ЧислоСимвола = Число(СимволСтроки);
				ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
			Исключение
			КонецПопытки;
		КонецЕсли;

		СчетчикСимволов = СчетчикСимволов + 1;
	КонецЦикла;

	Возврат ИтоговаяСтрока;

КонецФункции

Процедура УдалитьВсеЗависимыеЦены(Знач номенклатура, Знач ВидЦен, Знач Период) Экспорт

	СтрокаТовара = Новый структура;
	СтрокаТовара.Вставить("номенклатура", Номенклатура);
	СтрокаТовара.Вставить("цена", 0);
	УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Период, ИСТИНА, , ИСТИНА, , ИСТИНА);

КонецПроцедуры

Процедура УдалитьСвязанныеЦены(Знач Ссылка) Экспорт

	ОтборПоДокументу = Новый Структура;
	ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
	Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;

	ОтборПоДокументу = Новый Структура;
	ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
	Выборка = РегистрыСведений.ЦеныПоставщиков.Выбрать(,, ОтборПоДокументу);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;

КонецПроцедуры

Функция   УКонтрагентаЕстьРасчетыИлиЗаказы(Знач Контрагент, Знач ОпределенныйВидДокументов = "") Экспорт

	Запрос = Новый Запрос;
	Если ПустаяСтрока(ОпределенныйВидДокументов) Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщиками.Поставщик
		|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ РасчетыСПоставщиками.Поставщик = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Расчеты.Клиент
		|ИЗ РегистрНакопления.Расчеты КАК Расчеты
		|ГДЕ Расчеты.Клиент = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщикамиСОтсрочкой.Поставщик
		|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой КАК РасчетыСПоставщикамиСОтсрочкой
		|ГДЕ РасчетыСПоставщикамиСОтсрочкой.Поставщик = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСОтсрочкой.Клиент
		|ИЗ РегистрНакопления.РасчетыСОтсрочкой КАК РасчетыСОтсрочкой
		|ГДЕ РасчетыСОтсрочкой.Клиент = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыВВалюте.КлиентПоставщик
		|ИЗ РегистрНакопления.РасчетыВВалюте КАК РасчетыВВалюте
		|ГДЕ РасчетыВВалюте.КлиентПоставщик = &Контрагент";
	ИначеЕсли ОпределенныйВидДокументов = "ЗаказыКлиента" Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыКлиентов.Клиент
		|ИЗ РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
		|ГДЕ ЗаказыКлиентов.Клиент = &Контрагент";
	ИначеЕсли ОпределенныйВидДокументов = "ЗаказыПоставщика" Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыПоставщикам.Поставщик
		|ИЗ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ГДЕ ЗаказыПоставщикам.Поставщик = &Контрагент";
	КонецЕсли;

	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ГруппыАналоговТовары.Ссылка
	|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
	|ГДЕ ГруппыАналоговТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ГруппыАналоговТовары.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЕдиницыИзмерения.Ссылка
	|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Процедура УстановитьПараметрСеанса(Знач НаименованиеПараметра, Знач ЗначениеПараметра) Экспорт
	ПараметрыСеанса[НаименованиеПараметра] = ЗначениеПараметра;
КонецПроцедуры

Функция   УстановитьСостояниеЗаказа(Знач Заказ, Знач Дата = Неопределено, Знач НовоеСостояние = Неопределено) Экспорт

	Если НЕ НовоеСостояние = Неопределено Тогда
		СостояниеЗаказов = РегистрыСведений.СостоянияЗаказов.СоздатьМенеджерЗаписи();
		СостояниеЗаказов.Активность = ИСТИНА;
		СостояниеЗаказов.Заказ = Заказ;
		СостояниеЗаказов.Период = Дата ;

		Если ТипЗнч(Заказ.ссылка) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			СостояниеЗаказов.СостояниеЗаказаПоставщику = НовоеСостояние;
		Иначе
			СостояниеЗаказов.СостояниеЗаказаКлиента = НовоеСостояние;
		КонецЕсли;

		Попытка
			СостояниеЗаказов.Записать(ИСТИНА);
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи состояния заказа") + " " + ТекстОписаниеОшибки, Заказ);
		КонецПопытки;
	КонецЕсли;

	Возврат ПолучитьСостояниеЗаказа(Заказ, Дата);

КонецФункции

Процедура УстановитьСписокДоступныхЯзыков(ЭлементФормыСписокВыбора, Знач ДляНаименования = ЛОЖЬ, Знач ДляДокументов = ЛОЖЬ, Знач ДляОбщения = ЛОЖЬ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Языки.Ссылка
	|ИЗ Справочник.Языки КАК Языки
	|ГДЕ Языки.ПометкаУдаления = ЛОЖЬ";

	Если ДляНаименования Тогда
		Запрос.Текст = Запрос.Текст + " И Языки.ИспользуетсяДляНаименованияОбъектов = ИСТИНА "
	КонецЕсли;

	Если ДляДокументов Тогда
		Запрос.Текст = Запрос.Текст + " И Языки.ИспользуетсяДляДокументов = ИСТИНА "
	КонецЕсли;

	Если ДляОбщения Тогда
		Запрос.Текст = Запрос.Текст + " И Языки.ИспользуетсяДляОбщения = ИСТИНА "
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭлементФормыСписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(ВыборкаДетальныеЗаписи.Ссылка));
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЦенуИВсеЗависимые(Знач ВидЦен, Знач СтрокаТовара, Знач Ссылка = Неопределено, Знач Комментарий, Знач Дата, Знач ТолькоЗависимые = ЛОЖЬ, Знач МассивВидовЦен = Неопределено, Знач наУдаление = ЛОЖЬ, Знач первыйУровень = ИСТИНА, Знач БезЗависимых = ЛОЖЬ, Знач ЕдиницаИзмерения = Неопределено, Знач РежимУстановкиЦен = 1, Знач НеВыводитьСообщенияОбОшибке = ЛОЖЬ, Знач ГлобальныйПересчет = ЛОЖЬ) Экспорт

	Если МассивВидовЦен = Неопределено Тогда
		МассивВидовЦен = Новый Массив;
	КонецЕсли;

	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;

	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(Ссылка);
	Номенклатура = СтрокаТовара.Номенклатура;

	Если НЕ ЗначениеЗаполнено(Номенклатура)
		ИЛИ Номенклатура.ЗапретитьАвтоматическийПересчетЦен
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп")
		И ЗначениеЗаполнено(Номенклатура.НоменклатурнаяГруппа)
		И Номенклатура.НоменклатурнаяГруппа.ЗапретитьАвтоматическийПересчетЦен) Тогда

		Возврат
	КонецЕсли;

	Цена 		 = СтрокаТовара.Цена;
	Пропустить   = ЛОЖЬ;
	Попытка
		Если НЕ ТолькоЗависимые Тогда

			Если наУдаление
				ИЛИ ГлобальныйПересчет
				ИЛИ НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ВидЦен, Номенклатура, Дата, Цена, первыйУровень, Ссылка, ЕдиницаИзмерения) Тогда

				Если (РежимУстановкиЦен = 1
					ИЛИ (РежимУстановкиЦен = 2 И ОбщийМодульПовторВТеченииСервера.ЦенаУжеПроставлена(ВидЦен, Номенклатура, Дата, Ссылка, ЕдиницаИзмерения))
					ИЛИ (РежимУстановкиЦен = 3 И НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеПроставлена(ВидЦен, Номенклатура, Дата, Ссылка, ЕдиницаИзмерения)))
					И (наУдаление ИЛИ НЕ Цена = 0) Тогда

					ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
					ЦенаТовара.Активность = ИСТИНА;
					ЦенаТовара.ВидЦен 	  = ВидЦен  ;
					ЦенаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
					МассивВидовЦен.Добавить(ВидЦен);
					ЦенаТовара.Номенклатура = Номенклатура;
					ЦенаТовара.Период 	  = Дата;
					ЦенаТовара.Цена 	  = Цена;
					ЦенаТовара.Вручную 	  = ПервыйУровень;

					Если НЕ наУдаление Тогда
						ЦенаТовара.Комментарий = Комментарий;
						Если ЗначениеЗаполненоСсылка Тогда
							ЦенаТовара.ДокументРегистрации = Ссылка;
						КонецЕсли;

						ЦенаТовара.Записать(ИСТИНА);
					Иначе
						ЦенаТовара.Удалить();
					КонецЕсли;
				Иначе
					Пропустить = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ БезЗависимых
			И НЕ Пропустить Тогда

			РезультатЗапроса = ОбщийМодульПовторВТеченииСервера.ПолучитьПереченьВидовЦен(ВидЦен);

			Если НЕ РезультатЗапроса = Неопределено
				И НЕ РезультатЗапроса.Количество() = 0 Тогда

				Для Каждого ВыборкаДетальныеЗаписи Из РезультатЗапроса Цикл
					ЗависимыйВидЦен = ВыборкаДетальныеЗаписи.ссылка;

					Если НЕ МассивВидовЦен.Количество() = 0
						И НЕ МассивВидовЦен.Найти(ЗависимыйВидЦен) = Неопределено Тогда

						Продолжить;
					КонецЕсли;

					МассивВидовЦен.Добавить(ЗависимыйВидЦен);

					Если наУдаление Тогда
						РасчетнаяЦена = 0;
					Иначе
						РасчетнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(Номенклатура, Цена, ЗависимыйВидЦен, Дата, Ссылка, ЕдиницаИзмерения, ВидЦен, НеВыводитьСообщенияОбОшибке, ГлобальныйПересчет);
					КонецЕсли;

					Если наУдаление
						ИЛИ (ГлобальныйПересчет
						ИЛИ (НЕ РасчетнаяЦена = 0
						И НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ЗависимыйВидЦен, Номенклатура, Дата, РасчетнаяЦена, ЛОЖЬ, Ссылка, ЕдиницаИзмерения))) Тогда

						Попытка
							ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
							ЦенаТовара.Активность 	= ИСТИНА;
							ЦенаТовара.ВидЦен 		= ЗависимыйВидЦен ;
							ЦенаТовара.Номенклатура = Номенклатура;
							ЦенаТовара.Период 		= Дата;
							ЦенаТовара.Цена 		= РасчетнаяЦена;
							ЦенаТовара.Вручную 		= ЛОЖЬ;
							ЦенаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;

							Если НЕ наУдаление Тогда
								Если ЗначениеЗаполненоСсылка Тогда
									ЦенаТовара.ДокументРегистрации = Ссылка;
								КонецЕсли;

								ЦенаТовара.Комментарий = Комментарий;
								ЦенаТовара.Записать(ИСТИНА);
							Иначе
								ЦенаТовара.Удалить();
							КонецЕсли;

							ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ЗависимыйВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, ИСТИНА, МассивВидовЦен, наУдаление, ЛОЖЬ, , ЕдиницаИзмерения, РежимУстановкиЦен, НеВыводитьСообщенияОбОшибке, ГлобальныйПересчет); // рекурсия для всех зависимых
						Исключение

							Если НЕ наУдаление
								И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

								ТекстОписаниеОшибки = ОписаниеОшибки();
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр зависимых цен") + ": " + ЦенаТовара + " - " + ТекстОписаниеОшибки, , Ссылка);
							КонецЕсли;

						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	Исключение
		Если НЕ наУдаление
			И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда

			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр цен") + ": " + ЦенаТовара + " - " + ТекстОписаниеОшибки, , Ссылка);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

Процедура УстановитьЦенуПоставщика(Знач ВидЦен, Знач СтрокаТовара, Знач Договор, Знач Комментарий, Знач Дата, Знач Поставщик, Знач ДокументРегистрации = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ВидЦен)
		И ЗначениеЗаполнено(Поставщик) Тогда

		Номенклатура = СтрокаТовара.Номенклатура;

		Если ЗначениеЗаполнено(Номенклатура)
			И НЕ Дата = '00010101' Тогда

			МенеджерЗаписиРегистраЦен = РегистрыСведений.ЦеныПоставщиков.СоздатьМенеджерЗаписи();
			МенеджерЗаписиРегистраЦен.Период			= Дата;
			МенеджерЗаписиРегистраЦен.Поставщик			= Поставщик;
			МенеджерЗаписиРегистраЦен.ВидЦен			= ВидЦен;
			МенеджерЗаписиРегистраЦен.Договор			= Договор;
			МенеджерЗаписиРегистраЦен.Комментарий		= ?(ПустаяСтрока(СтрокаТовара.Комментарий), Комментарий, СтрокаТовара.Комментарий);
			МенеджерЗаписиРегистраЦен.Номенклатура		= СтрокаТовара.Номенклатура;
			МенеджерЗаписиРегистраЦен.ЕдиницаИзмерения	= СтрокаТовара.ЕдиницаИзмерения;
			МенеджерЗаписиРегистраЦен.Цена				= СтрокаТовара.Цена;
			МенеджерЗаписиРегистраЦен.ДокументРегистрации = ДокументРегистрации;
			МенеджерЗаписиРегистраЦен.Записать(ИСТИНА);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ЦенаУжеСтоит(Знач ВидЦен, Знач Номенклатура, Знач Дата, Знач Цена, Знач Вручную, Знач Ссылка, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	Возврат Цена = ОбщийМодульСервер.ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Дата, ЛОЖЬ, , ИСТИНА, Вручную, Ссылка, ЕдиницаИзмерения);
КонецФункции

Функция   ЧислоДоговоровСКонтрагентом(Знач Контрагент) Экспорт

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат 0;
	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.КлиентПоставщик = &Контрагент
		|	И Договора.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		РезультатЧислоДоговоровСКонтрагентом = 0;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				РезультатЧислоДоговоровСКонтрагентом = РезультатЧислоДоговоровСКонтрагентом + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		КонецЕсли;

		Возврат РезультатЧислоДоговоровСКонтрагентом;
	КонецЕсли;

КонецФункции

Функция   ЧислоДоговоровСЮрЛицом(Знач ЮрЛицо) Экспорт

	Результат = 0;
	Если ЗначениеЗаполнено(ЮрЛицо) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И Договора.Организация = &ЮрЛицо";
		Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = Результат + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьВалютуКонтрагента(Знач Контрагент, Знач ВернутьНаименование = ЛОЖЬ, Знач ВернутьОсновнуюЕслиНет = ЛОЖЬ) Экспорт

	Результат = Неопределено;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Результат = Контрагент.ОсновнаяВалюта;
	КонецЕсли;

	Если ВернутьОсновнуюЕслиНет
		И НЕ ЗначениеЗаполнено(Результат) Тогда

		Результат = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;

	Если ВернутьНаименование Тогда
		Результат = СокрЛП(Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаписатьЗначениеРеквизитаОбъектаБазыДанных(Знач СсылкаНаОбъектБазыДанных = Неопределено, Знач ИмяРеквизита = "Наименование", Знач ЗначениеРеквизита = "") Экспорт

	Если ЗначениеЗаполнено(СсылкаНаОбъектБазыДанных) Тогда
		ОбъектБазыДанных = СсылкаНаОбъектБазыДанных.ПолучитьОбъект();
		ОбъектБазыДанных[ИмяРеквизита] = ЗначениеРеквизита;
		ОбъектБазыДанных.Записать();
	КонецЕсли;

КонецПроцедуры
