//sza140125-0311 
//sza130901-0132 : 

&НаСервере
Функция   ИспользоватьШтрихКоды() Экспорт  	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтрихКоды");	
КонецФункции 

&НаСервере
Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = Истина, Знач Количество = 0, Знач Договор = Неопределено, Знач ДоговорТочноПредусматриваетСтрогиеЦены = Ложь, Знач Цена = -1, Знач Ссылка = Неопределено) Экспорт
	
	если ЗначениеЗаполнено(Договор)
		и (ДоговорТочноПредусматриваетСтрогиеЦены
		или договор.ПредусматриваетСтрогиеЦены) тогда
		
		СтрокаДоговора = Договор.товары.Найти(Номенклатура, "Номенклатура");
		Если не СтрокаДоговора = Неопределено Тогда
			Цена = СтрокаДоговора.Цена;			
		КонецЕсли;
		
	КонецЕсли;
	
	если НЕ Цена = -1 Тогда
		
		Возврат Цена;
		
	Иначе
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			Если ВидЦен = Истина Тогда //любая
				Возврат ПолучитьСложнуюЦену(Номенклатура, , Дата, ВыводитьОшибку, Количество);			
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				
				если ВыводитьОшибку 
					и ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид Цен не указан!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид Цен не указан!");
						//Сообщение.Сообщить();    	                                        	
					КонецЕсли;
				КонецЕсли;
				
				Возврат 0;
				
			Иначе  			
				Возврат ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Дата, ВыводитьОшибку, Количество);
			КонецЕсли;
			
		Иначе
			если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
				и ЗначениеЗаполнено(Номенклатура) тогда
				
				Цена = Номенклатура.Цена;
				
				если не количество = 0 //надо проверять льготную цену
					и не Цена = 0
					и не Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
					и Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
					и ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже
					и (не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") 
					или не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда
					
					ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
					Цена = Цена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (Цена / 100);
					
				ИначеЕсли Цена = 0 //не 100% скидка
					и ВыводитьОшибку 
					и ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена! "), , ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не установлена! ");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				КонецЕсли;
				
				Возврат Цена;
				
			иначе
				Возврат 0;
			КонецЕсли;
			
		КонецЕсли;	
	конецесли;
	
КонецФункции

&НаСервере
Функция   ПолучитьСложнуюЦену(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = Истина, Знач Количество = 0, Знач ЭтоПроверкаЦены = Ложь, Знач Вручную = ложь, Знач Ссылка = Неопределено) Экспорт
	
	НоменклатураЦена 		= 0;	
	ТипЗнчНоменклатура 		= ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	ДанныеФормыСтруктура 	= НЕ ТипЗнчНоменклатура И ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура");
	
	Если НЕ ДанныеФормыСтруктура
		И (ВидЦен = Неопределено ИЛИ ЗначениеЗаполнено(ВидЦен))
		И ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		Запрос 			= Новый Запрос;
		Запрос.Текст 	= "ВЫБРАТЬ ПЕРВЫЕ 1 ЦеныСрезПоследних.Цена, ЦеныСрезПоследних.ДокументРегистрации, ЦеныСрезПоследних.Вручную
		|ИЗ 	РегистрСведений.Цены.СрезПоследних( &Дата,
		|			Номенклатура = &Номенклатура И ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних";
		
		Если ВидЦен = Неопределено Тогда
			ВидЦенОсновнойВалюты = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ОсновнойВидЦен") ;
			
			Если ВидЦенОсновнойВалюты.Зависимая
				или не ВидЦенОсновнойВалюты.ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") Тогда
				
				РезультатЗапросаВЦ = ОбщийМодульПовтор.ЗапросВЦ();
				если не РезультатЗапросаВЦ.Пустой() тогда
					
					ВыборкаДетальныеЗаписиВЦ = РезультатЗапросаВЦ.Выбрать();					
					ВыборкаДетальныеЗаписиВЦ.Следующий() ;
					ВидЦенОсновнойВалюты 	 = ВыборкаДетальныеЗаписиВЦ.Ссылка;
					
				иначе
					Возврат 0;
				конецесли;
				
			КонецЕсли;
			Запрос.УстановитьПараметр("ВидЦен", ВидЦенОсновнойВалюты.Ссылка);
			
		Иначе
			
			Запрос.УстановитьПараметр("ВидЦен", ВидЦен.Ссылка);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена;
				
				Если ЭтоПроверкаЦены
					и ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка 
					и вручную = ВыборкаДетальныеЗаписи.вручную тогда //для сверки с ценой
					
					НоменклатураЦена = -1;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ количество = 0 //надо проверять льготную цену
				И НЕ НоменклатураЦена = 0
				И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
				И Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
				И (НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") 
				ИЛИ НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда
				
				ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ?(ЗначениеЗаполнено(видцен), ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию"));
				
				НоменклатураЦена = НоменклатураЦена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (НоменклатураЦена / 100);
				
			КонецЕсли;			
		конецесли;
		
		Если НоменклатураЦена = 0 //не 100 % скидка
			и ВыводитьОшибку 
			и ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				//ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура.ссылка + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не установлена! Вид цен:") + " " + ВидЦен + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на дату") + " " + Дата, , Ссылка);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура.ссылка + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не установлена! Вид цен:") + " " + ВидЦен + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на дату") + " " + Дата;
				Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат НоменклатураЦена;
	
КонецФункции

&НаСервере
Функция   ПолучитьПроцентСкидкиНаСервере(Знач ОбъектСкидки, Знач Количество = 0, Знач ВидЦен = Неопределено, Знач Клиент = Неопределено) Экспорт
	
	если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") тогда
		
		ТипОбъНом 	= ложь;
		ТипСпрКл 	= ложь;
		ТипСпрНом 	= ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Номенклатура") ;
		
		Если НЕ ТипСпрНом Тогда
			
			ТипОбъНом = ТипЗнч(ОбъектСкидки) = Тип("СправочникОбъект.Номенклатура");
			Если НЕ ТипОбъНом Тогда
				ТипСпрКл = ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Клиенты");		
			КонецЕсли;
		КонецЕсли;
		
		ПроцентСкидкиКонтра = 0;
		
		если не ТипОбъНом 
			и не ТипСпрКл 
			и не ТипСпрНом тогда
			
			возврат 0 ;			
			
		иначе
			
			если ТипСпрКл 
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда
				
				ПроцентСкидкиКонтра = ОбъектСкидки.ПроцентСкидки ;
				
			иначеЕсли ЗначениеЗаполнено(Клиент)
				и ТипЗнч(Клиент) = Тип("СправочникСсылка.Клиенты")
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда
				
				ПроцентСкидкиКонтра = Клиент.ПроцентСкидки ;
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				
				Если ЗначениеЗаполнено(Клиент.ДатаРождения)
					и месяц(Клиент.ДатаРождения) = месяц(Дата)
					и день(Клиент.ДатаРождения) = день(Дата) Тогда
					
					ПроцентСкидкиКонтра = ПроцентСкидкиКонтра + ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РазмерСкидкиНаДатаРождения") ;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроцентСкидкиНомы = 0;
			
			Если (ТипСпрНом 
				ИЛИ ТипОбъНом)
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры") Тогда
				
				ПроцентСкидкиНомы = ОбъектСкидки.ПроцентСкидки ;
				
			КонецЕсли;	
			
			Если не ПроцентСкидкиНомы = 0
				и не ПроцентСкидкиКонтра = 0
				и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИНоменклатуры") Тогда
				
				ПроцентСкидки = ПроцентСкидкиНомы + ПроцентСкидкиКонтра;
				
			Иначеесли ПроцентСкидкиНомы > ПроцентСкидкиКонтра Тогда
				ПроцентСкидки = ПроцентСкидкиНомы ;
			Иначе
				ПроцентСкидки = ПроцентСкидкиКонтра;
				
			КонецЕсли;
			
			если не количество = 0 //надо проверять льготную цену
				и не ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены = 0
				и Количество >= ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
				и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар") Тогда
				
				ПроцентРасчетаЛьготнойЦены = 0;
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
					Если ЗначениеЗаполнено(ВидЦен) Тогда
						
						ПроцентРасчетаЛьготнойЦены = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;	
					КонецЕсли;
					
				Иначе
					ПроцентРасчетаЛьготнойЦены = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию") ;	
				КонецЕсли;
				
				Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены") Тогда
					Возврат ПроцентРасчетаЛьготнойЦены + ПроцентСкидки;
					
				иначеЕсли ПроцентРасчетаЛьготнойЦены > ПроцентСкидки Тогда
					возврат ПроцентРасчетаЛьготнойЦены;
					
				иначе
					возврат ПроцентСкидки
				КонецЕсли;
				
			иначе
				возврат ПроцентСкидки
			КонецЕсли;	
		КонецЕсли;	
		
	иначе
		возврат 0;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   получитьЗначениеКонстанты(Знач ИмяКонстанты) Экспорт	
	Возврат Константы[ИмяКонстанты].получить();	
КонецФункции //получитьЗначениеНастройкиИлиКонстанты

&НаСервере      
Функция   ПолучитьСтруктуруДополнительныхПараметровМакетаПечати() Экспорт
	
	РезультатСтруктура = новый Структура;
	РезультатСтруктура.Вставить("ТекстВШапкеДокументовПриПечати", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати"));
	РезультатСтруктура.Вставить("ТекстВПодвалеДокументовПриПечати", ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ТекстВПодвалеДокументовПриПечати"));
	
	Возврат РезультатСтруктура;
	
КонецФункции //ПолучитьСтруктуруДополнительныхПараметровМакетаПечати

&НаСервере
Функция   ПолучитьДолгКлиентаПоставщика(Знач КлиентПоставщик, Знач Дата, Знач Договор = Неопределено) Экспорт	
	
	если НЕ ЗначениеЗаполнено(КлиентПоставщик) 
		или КлиентПоставщик.Предопределенный тогда
		
		Долг = 0;
		
	иначе
		
		Запрос = Новый Запрос;
		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, Поставщик = &КлиентПоставщик %%1) КАК РасчетыСПоставщикамиОстатки";
			
		Иначе
			Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, Клиент = &КлиентПоставщик %%1) КАК РасчетыОстатки";
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС")
			И ЗначениеЗаполнено(Договор) Тогда
			
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И Договор = &Договор ");
			Запрос.УстановитьПараметр("Договор", Договор);
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
			
		КонецЕсли; 		
	КонецЕсли;   	
	
	Возврат Долг;
	
КонецФункции //ПоказатьДолгКлиентаПоставщика	

&НаСервере
Функция   ПолучитьДолгДоговора(Знач Договор, Знач Дата) Экспорт	
	
	если НЕ ЗначениеЗаполнено(Договор) тогда
		
		Долг = 0;
		
	иначе		
		КлиентПоставщик = Договор.КлиентПоставщик;
		
		Запрос = Новый Запрос;
		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
			
		Иначе
			Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыОстатки";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("Договор", Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
			
		КонецЕсли;        			
	КонецЕсли;   	
	
	Возврат Долг;
	
КонецФункции //ПоказатьДолгДог

&НаСервере
Функция   ОбработатьБлокировку(Знач ОбъектДокумент = Неопределено, ФормаДокумента, Знач ПриСозданииФормы = ложь) Экспорт	
	
	Результат = Ложь;
	
	Если НЕ ОбъектДокумент = Неопределено
		И ТипЗнч(ОбъектДокумент.Ссылка) = Тип("ДокументСсылка.Инвентаризации") Тогда
		
		БлокироватьПроведенныеДокументы = Истина;
	Иначе
		БлокироватьПроведенныеДокументы = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("БлокироватьПроведенныеДокументы");
	КонецЕсли;
	
	Если БлокироватьПроведенныеДокументы Тогда 		
		ЗАБЛОКИРОВАН = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЗАБЛОКИРОВАН: ");
		
		Если ОбъектДокумент = Неопределено 
			или ОбъектДокумент.Проведен Тогда
			
			Если найти(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН) = 0 Тогда
				ФормаДокумента.Заголовок = ЗАБЛОКИРОВАН + ФормаДокумента.Заголовок;
			КонецЕсли; 			
			
			Для Каждого ЭлементФормы из ФормаДокумента.Элементы Цикл
				попытка
					ЭлементФормы.толькопросмотр = Истина;
				исключение
				конецпопытки;
				
			КонецЦикла;
			Результат = Истина;
			
			ФормаДокумента.ДокументЗаблокирован = Истина;
			
		иначеЕсли НЕ ПриСозданииФормы тогда
			
			ФормаДокумента.Заголовок = стрзаменить(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН, "");	
			
			ФормаДокумента.ДокументЗаблокирован = Ложь;
			Для Каждого ЭлементФормы из ФормаДокумента.Элементы Цикл
				попытка
					ЭлементФормы.толькопросмотр = ложь;
				исключение
				конецпопытки;
				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ПроверитьОстатокДенежныхСредств(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач ВернутьСтруктуруПополнения = Ложь, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = Ложь) Экспорт	
	
	Если ВернутьСтруктуруПополнения Тогда
		СтруктураПополнения = Новый Структура;
		СтруктураПополнения.Вставить("Отказ", Ложь);
		СтруктураПополнения.Вставить("Сумма", СуммаДокумента);
		СтруктураПополнения.Вставить("СуммаПополнения", 0);
		
		Если ЗначениеЗаполнено(ХранилищеДенег) 
			и ЗначениеЗаполнено(ХранилищеДенег.ХранилищеПополнения) Тогда
			
			ХранилищеПополнения = ХранилищеДенег.ХранилищеПополнения;			
			СтруктураПополнения.Вставить("ХранилищеПополнения", ХранилищеПополнения);
			
			СуммаОстаток = ОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);
			Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
				
				СуммаОстатокПополнения = ОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеПополнения);	
				Если ((СуммаОстаток + СуммаОстатокПополнения) - СуммаДокумента) < 0 Тогда
					
					ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");
					Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
						И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
						
						если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + Сокрлп(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег с учетом пополнения (") + сокрлп(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
							//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + Сокрлп(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег с учетом пополнения (") + сокрлп(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация);	
						КонецЕсли;
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
							
							СтруктураПополнения.Отказ = Истина;
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					СтруктураПополнения.Сумма 			= СуммаОстаток;
					СтруктураПополнения.СуммаПополнения = СуммаДокумента - СуммаОстаток;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ОтменитьПроверкиНаОтказ Тогда
			СтруктураПополнения.Отказ = ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка);
		КонецЕсли;
		
		Возврат СтруктураПополнения;
		
	Иначе
		Возврат ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка, ОтменитьПроверкиНаОтказ)	;	
	КонецЕсли;
	
КонецФункции

Функция   ПроверитьОстатокДенежныхСредствБезСтруктуры(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = Ложь) Экспорт
	
	Отказ = Ложь;
	
	ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");
	
	Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
		
		СуммаОстаток = ОбщийМодульСервер.ОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);		
		
		Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег (") + формат(СуммаОстаток, "ЧЦ=15; ЧДЦ=2") + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
				//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + Сокрлп(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег (") + сокрлп(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация);	
			КонецЕсли;
			
			Если НЕ ОтменитьПроверкиНаОтказ
				И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция   ОстатокДенег(Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено) Экспорт
	
	СуммаОстаток = 0;
	Запрос 		 = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ДеньгиОстатки.СуммаВВалютеОстаток КАК СуммаОстаток
	|ИЗ РегистрНакопления.Деньги.Остатки(&ДатаОстатка,
	|			ИСТИНА %1% %2% %3%) КАК ДеньгиОстатки";
	
	Если не ФормаОплаты = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И ФормаОплаты = &ФормаОплаты ");
		Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;
	
	Если не ФормаОплаты = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", " И Валюта = &Валюта ");
		Запрос.УстановитьПараметр("Валюта", Валюта);
	иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", "");
	КонецЕсли;
	
	Если не ХранилищеДенег = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", " И ХранилищеДенег = &ХранилищеДенег ");
		Запрос.УстановитьПараметр("ХранилищеДенег", ХранилищеДенег);
	иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СуммаОстаток = ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;                            	
		
	КонецЕсли;
	
	Возврат СуммаОстаток;
	
КонецФункции //ОстатокДенег

&НаСервере
Функция   РекомендуемыйМинимальныйОстатокТовара(Номенклатура) Экспорт
	
	Если ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры Тогда
		Возврат Номенклатура.РекомендуемыйМинимальныйОстатокТовара;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции //РекомендуемыйМинимальныйОстатокТовара

&НаСервере
Функция   ПроверитьОстатокТоваров(Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач Склад, Знач Номенклатура, Знач Количество, Знач ДатаОстатка, Знач УжеПроверялиЧтоНеПредопределенныйИЗаполнен = Ложь, Знач КоличествоОстаток = Неопределено, Знач Ссылка = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если УжеПроверялиЧтоНеПредопределенныйИЗаполнен
		ИЛИ (ЗначениеЗаполнено(Номенклатура) 
		И Не ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура)) Тогда
		
		КвоОстаток = -1;
		
		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда		
			
			ДатаНачалаОграничения = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара") ;
			
			если ДатаНачалаОграничения = '00010101000000' 
				или ДатаОстатка > ДатаНачалаОграничения тогда
				
				РекомендованныйМинимум = РекомендуемыйМинимальныйОстатокТовара(Номенклатура);
				Если РекомендованныйМинимум = 0 Тогда
					РекомендованныйМинимум = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РекомендуемыйМинимальныйОстатокТовара");
				КонецЕсли;		
				
				если не РекомендованныйМинимум = 0 тогда
					
					если КоличествоОстаток = Неопределено тогда
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);
					иначе
						КвоОстаток = КоличествоОстаток;							
					КонецЕсли;					
					
					Если (КвоОстаток - Количество) < 0 Тогда
						если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + сокрлп(КвоОстаток) + "-" + сокрлп(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает Рекомендуемый остаток") + " (" + РекомендованныйМинимум +")!", , Ссылка);
							//Сообщение = Новый СообщениеПользователю;
							//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + сокрлп(КвоОстаток) + "-" + сокрлп(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает Рекомендуемый остаток") + " (" + РекомендованныйМинимум +")!";
							//Сообщение.Сообщить();                                               	
						КонецЕсли;
						
						Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;  			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда		
			
			ДатаНачалаОграничения = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара");
			
			если ДатаНачалаОграничения = '00010101000000' 
				или ДатаОстатка > ДатаНачалаОграничения тогда
				
				если КвоОстаток = -1 Тогда
					Если КоличествоОстаток = Неопределено Тогда
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);	
					иначе
						КвоОстаток = КоличествоОстаток;
					КонецЕсли;
					
				КонецЕсли;
				
				Если (КвоОстаток - Количество) < 0 Тогда 
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + сокрлп(КвоОстаток) + "-" + сокрлп(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + сокрлп(КвоОстаток) + "-" + сокрлп(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					Если ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;  		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция   РассчитатьНовуюЦену(Знач Номенклатура, Знач СтараяЦена, Знач ВидЦен, Знач Дата, Знач Ссылка = Неопределено) Экспорт
	
	Цена = СтараяЦена;	
	
	Если ЗначениеЗаполнено(ВидЦен) 
		и ВидЦен.Зависимая Тогда 
		
		Если ЗначениеЗаполнено(ВидЦен.ФормулаРасчетаОтБазовогоВидаЦены) Тогда
			Попытка 
				Цена = ПолучитьСложнуюЦену(Номенклатура, ВидЦен.ОсновнойВидЦен, Дата, Истина);
				Цена = ПоКурсу(Цена, ВидЦен.ВалютаЦены, ВидЦен.ОсновнойВидЦен.ВалютаЦены, Дата);
				ЛьготнаяЦена = ПолучитьЛьготнуюЦену(Номенклатура, , Цена, ВидЦен);
				
				Выполнить(" Цена = " + ВидЦен.ФормулаРасчетаОтБазовогоВидаЦены.Формула + ";");
				
			Исключение 	
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при формировании цены:") + " " + ОписаниеОшибки(), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при формировании цены:") + " " + ОписаниеОшибки();
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
				
			КонецПопытки;
			
		иначеесли ЗначениеЗаполнено(ВидЦен.ПроцентОтБазовойЦены) Тогда
			
			Цена = ПолучитьСложнуюЦену(Номенклатура, ВидЦен.ОсновнойВидЦен, Дата, Истина);
			Цена = ПоКурсу(Цена, ВидЦен.ВалютаЦены, ВидЦен.ОсновнойВидЦен.ВалютаЦены, Дата);
			Цена = (Цена / 100) * ВидЦен.ПроцентОтБазовойЦены;
			Если Цена = 0 Тогда
				Цена = 0.01;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЦен.ЦенаВЦелыхЕдиницах Тогда
			
			Если ВидЦен.ОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(Цена);
				если не ЦенаЦел = Цена тогда
					Цена = ЦенаЦел + 1;
				КонецЕсли;
				
			иначеесли не цена = 0 тогда
				
				Цена = окр(Цена);
				Если Цена = 0 Тогда
					Цена = 1;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат Цена;
	
КонецФункции   

&НаСервере
Процедура ПроверитьФормулу(Знач Формула, Знач родитель = Неопределено) Экспорт
	
	если родитель = Неопределено тогда
		родитель = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыПреобразованияЦен") ;	
	КонецЕсли;
	
	Если ТипЗнч(Формула) = Тип("СправочникСсылка.ФормулыОписания") Тогда
		Формула = Формула.Формула;
	КонецЕсли;
	
	пропустить = ложь;
	ВыборкаДетальныеЗаписиссылка = "";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка,
	|	Номенклатура.Цена,
	|	Номенклатура.НоменклатурнаяГруппа,
	|	Номенклатура.Производитель
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = Ложь
	|	И Номенклатура.ЭтоГруппа = Ложь
	|	И Номенклатура.Предопределенный = Ложь";
	
	РезультатЗапроса = Запрос.Выполнить();
	если РезультатЗапроса.Пустой() тогда
		если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры в базе для проверки!"), , );
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры в базе для проверки!");
			//Сообщение.Сообщить();                                               	
		КонецЕсли;
		
		пропустить = истина;
		
	иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			ВидЦен 	= ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = Справочники.ВидыЦен.ОсновнойВидЦен;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				Цена = 12345.67;
			Иначе
				Цена = ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата, , , , , , );
			КонецЕсли;
			Цена = 0;
			
		Иначе
			Цена = ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;
		
		НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
		Производитель 		 = ВыборкаДетальныеЗаписи.Производитель;
		
		ВыборкаДетальныеЗаписиссылка = ВыборкаДетальныеЗаписи.ссылка;
		СерияНоменклатуры 	 = "";
		
		Если ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры
			И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Наименование
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.Владелец = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();				
				ВыборкаДетальныеЗаписи.Следующий() ;
				СерияНоменклатуры = ВыборкаДетальныеЗаписи.Наименование;	
			КонецЕсли;
		КонецЕсли;
		
	конецесли;                    
	
	если не пропустить тогда
		Попытка 
			Тест = "";
			
			выполнить(" Тест = """"+" + Формула + ";");
			
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формула работает. Пример для") + " " + ВыборкаДетальныеЗаписиссылка + " = " + Тест, , );
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формула работает. Пример для") + " " + ВыборкаДетальныеЗаписиссылка + " = " + Тест;
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
		Исключение 	
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в формуле:") + " " + ОписаниеОшибки(), , );
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в формуле:") + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();	
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
процедура УстановитьЦенуИВсеЗависимые(Знач ВидЦен, Знач СтрокаТовара, Знач Ссылка = Неопределено, Знач Комментарий, Знач Дата, Знач ТолькоЗависимые = Ложь, Знач МассивВидовЦен = Неопределено, Знач наУдаление = Ложь, Знач первыйУровень = истина, Знач БезЗависимых = Ложь) Экспорт
	
	Если МассивВидовЦен = Неопределено Тогда
		МассивВидовЦен = Новый Массив;          	
	КонецЕсли;
	
	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(Ссылка);
	Номенклатура 	= СтрокаТовара.Номенклатура;
	Цена 			= СтрокаТовара.Цена;
	
	Попытка 
		Если НЕ ТолькоЗависимые Тогда		
			
			если наУдаление 
				или не ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ВидЦен, Номенклатура, Дата, Цена, первыйУровень, Ссылка) тогда
				
				ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
				ЦенаТовара.Активность = Истина;
				ЦенаТовара.ВидЦен 	  = ВидЦен  ;
				МассивВидовЦен.Добавить(ВидЦен);
				
				ЦенаТовара.Номенклатура = Номенклатура;
				ЦенаТовара.Период 	  = дата;
				ЦенаТовара.Цена 	  = Цена;
				ЦенаТовара.Вручную 	  = первыйУровень;
				
				если не наУдаление тогда
					
					ЦенаТовара.Комментарий = Комментарий;
					Если ЗначениеЗаполненоСсылка Тогда
						ЦенаТовара.ДокументРегистрации = Ссылка;
					КонецЕсли;
					
					ЦенаТовара.Записать(Истина);	
					
				иначе
					ЦенаТовара.Удалить();
					
				КонецЕсли; 			     	
			КонецЕсли;
		КонецЕсли;
		
		Если не БезЗависимых Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка ИЗ Справочник.ВидыЦен КАК ВидыЦен ГДЕ
			|	ВидыЦен.ОсновнойВидЦен = &ОсновнойВидЦен И ВидыЦен.Зависимая = ИСТИНА
			|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ И НЕ ВидыЦен.Ссылка В(&МассивВидовЦен) ";
			
			Запрос.УстановитьПараметр("ОсновнойВидЦен", ВидЦен);
			Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗависимыйВидЦен = ВыборкаДетальныеЗаписи.ссылка;
					МассивВидовЦен.Добавить(ЗависимыйВидЦен);
					если наУдаление тогда
						РасчетнаяЦена = 0;
					иначе
						РасчетнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(Номенклатура, Цена, ЗависимыйВидЦен, Дата, Ссылка);	
					КонецЕсли;
					
					если не ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ЗависимыйВидЦен, Номенклатура, Дата, РасчетнаяЦена, Ложь, Ссылка) тогда
						Попытка 					
							ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
							ЦенаТовара.Активность 	= Истина;
							ЦенаТовара.ВидЦен 		= ЗависимыйВидЦен ;
							ЦенаТовара.Номенклатура = Номенклатура;
							ЦенаТовара.Период 		= Дата;
							ЦенаТовара.Цена 		= РасчетнаяЦена;
							ЦенаТовара.Вручную 		= ложь;
							
							если не наУдаление тогда
								
								Если ЗначениеЗаполненоСсылка Тогда
									ЦенаТовара.ДокументРегистрации = Ссылка;
								КонецЕсли;
								ЦенаТовара.Комментарий = Комментарий;						
								ЦенаТовара.Записать(Истина);
								
							иначе
								ЦенаТовара.Удалить();
								
							КонецЕсли;
							УстановитьЦенуИВсеЗависимые(ЗависимыйВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, Истина, МассивВидовЦен, наУдаление, ЛОЖЬ) ; //рекурсия для всех зависимых
							
						Исключение 
							если НЕ наУдаление
								И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр зависимых цен:") + " " + ЦенаТовара + " " + ОписаниеОшибки(), , Ссылка);
								//Сообщение = Новый СообщениеПользователю;
								//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр зависимых цен:") + " " + ЦенаТовара + " " + ОписаниеОшибки();
								//Сообщение.Сообщить();                                               	
							КонецЕсли;
						КонецПопытки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение 
		если НЕ наУдаление
			И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр цен:") + " " + ЦенаТовара + " " + ОписаниеОшибки(), , Ссылка);
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр цен:") + " " + ЦенаТовара + " " + ОписаниеОшибки();
			//Сообщение.Сообщить();                                               	
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСобытиеЖурналаНаСервере(Знач ФормаСобытия, Знач ТипСобытия, Знач Ссылка = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиЗаписьВЖурналВсехОбычныхДействий") Тогда
		
		ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
		ЖурналСобытий.Активность = Истина;
		ЖурналСобытий.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		ЖурналСобытий.Период = ТекущаяДата();
		
		ФормаСобытияТ = ОбщийМодульПовтор.ВычислитьИмяФормы(ФормаСобытия);
		
		Если ТипСобытия = 0 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ОткрытиеФормы ;			
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		ИначеЕсли ТипСобытия = 1 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ЗакрытиеФормы ;
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		ИначеЕсли ТипСобытия = 2 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ВыполнилОбработкуДанных;
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		КонецЕсли;
		
		Попытка 
			Если ЗначениеЗаполнено(Ссылка) Тогда
				ЖурналСобытий.СсылкаНаОбъект = Ссылка;
			КонецЕсли;
			
		Исключение 	
		КонецПопытки;
		
		Попытка //Записи в регистр сведений 
			ЖурналСобытий.Записать(Истина);
			
		Исключение //Записи в регистр сведений 
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал:") + " " + ЖурналСобытий + " " + ОписаниеОшибки(), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал:") + " " + ЖурналСобытий + " " + ОписаниеОшибки();
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
		КонецПопытки; //Записи в регистр сведений
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   НайтиЭлементПоИмени(Знач ИмяСправочника, Знач ТекстНаименования) Экспорт
	
	ИскомыйЭлемент = Справочники[ИмяСправочника].НайтиПоНаименованию(ТекстНаименования, Ложь);
	
	Если НЕ ЗначениеЗаполнено(ИскомыйЭлемент) 
		И (метаданные.Справочники[ИмяСправочника].Иерархический
		И ИскомыйЭлемент.ЭтоГруппа) Тогда
		
		ИскомыйЭлемент = Неопределено
	КонецЕсли;
	
	Возврат ИскомыйЭлемент;
	
КонецФункции //НайтиНоменклатуруПоИмени

&НаСервере
Функция   ПолучитьТекущийКурс(Валюта = Неопределено, Дата = Неопределено) Экспорт
	
	если НЕ ПараметрыСеанса.ВестиУчетВалютВСеансе 
		или НЕ ЗначениеЗаполнено(Валюта) тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;   	
	
	Курс = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КурсыВалютСрезПоследних.Курс
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Курс = ВыборкаДетальныеЗаписи.Курс;
	КонецЕсли;
	
	Возврат Курс;
	
КонецФункции //ПолучитьТекущийКурс

&НаСервере
Функция   ПоКурсу(Знач Сумма, Знач Валюта = Неопределено, Знач ИзВалюты = Неопределено, Знач НаДату = Неопределено) Экспорт
	
	если не ПараметрыСеанса.ВестиУчетВалютВСеансе 
		или Валюта = ИзВалюты тогда
		
		Возврат Сумма;
		
	иначе
		
		Если НаДату = Неопределено Тогда
			НаДату = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		основнаявалюта = Справочники.Валюты.ОсновнаяВалюта ;
		
		ЗначениеЗаполненоИзВалюты 	= ЗначениеЗаполнено(ИзВалюты) и не извалюты = основнаявалюта;
		ЗначениеЗаполненоВалюта 	= ЗначениеЗаполнено(Валюта) и не валюта = основнаявалюта;
		
		Если ЗначениеЗаполненоВалюта
			и ЗначениеЗаполненоИзВалюты Тогда
			
			Возврат (Сумма / ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, НаДату)) * ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату);
			
		ИначеЕсли ЗначениеЗаполненоВалюта Тогда //к базовой
			Возврат (Сумма / ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, НаДату));
			
		ИначеЕсли ЗначениеЗаполненоИзВалюты Тогда //из базовой			
			Возврат (Сумма * ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату));
			
		Иначе //нет валют
			Возврат Сумма;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции //ПоКурсу

&НаСервере
Процедура РассчитатьВсеЗависимыеЦеныПриСменеКурса(Знач Валюта = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидыЦен.ОсновнойВидЦен
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = Истина ";
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены ";
		Запрос.УстановитьПараметр("ВалютаЦены", Валюта);
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПроизвестиПересчетВсехЦен(ВыборкаДетальныеЗаписи.ОсновнойВидЦен);
		КонецЦикла;	                           	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиПересчетВсехЦен(Знач ВидЦен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Цена, ЦеныСрезПоследних.Период, ЦеныСрезПоследних.Номенклатура
	|ИЗ РегистрСведений.Цены.СрезПоследних(&ТекущаяДата, ) КАК ЦеныСрезПоследних
	|ГДЕ ЦеныСрезПоследних.ВидЦен = &ВидЦен";
	
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен.ОсновнойВидЦен);
	Запрос.УстановитьПараметр("ТекущаяДата", ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТовара = Новый Структура;
			СтрокаТовара.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
			СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
			ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен.ОсновнойВидЦен.Ссылка, СтрокаТовара, , ВидЦен.Комментарий, ВыборкаДетальныеЗаписи.Период, Истина);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьОбъемПрибылиЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено) Экспорт
	
	Сумма  = 0;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Сотрудник)
		и ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		и не сотрудник.Склады.количество() = 0 Тогда
		
		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		
		Запрос.Текст = "ВЫБРАТЬ ВЫБОРКОГДА ВаловаяПрибыль.ВидДвижения = &приход
		|			ТОГДА ВаловаяПрибыль.Сумма
		|		ИНАЧЕ -ВаловаяПрибыль.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ ВаловаяПрибыль.Регистратор.Склад В(&Склады)
		|	И ВаловаяПрибыль.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		Запрос.УстановитьПараметр("Склады", Склады);
		Запрос.УстановитьПараметр("приход", ВидДвиженияНакопления.Приход);
		
	иначе	                		
		Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход - ВаловаяПрибыльОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ВаловаяПрибыльОбороты";		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", конецдня(ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

&НаСервере
Функция   ПолучитьОбъемРеализацииЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено, Знач ЛичнаяРеализация = Истина) Экспорт
	
	Сумма  = 0;	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Сотрудник)
		и ЛичнаяРеализация тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПродажиСотрудников.Сумма КАК Сумма
		|ИЗ РегистрНакопления.ПродажиСотрудников КАК ПродажиСотрудников
		|ГДЕ ПродажиСотрудников.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиСотрудников.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
	иначеЕсли ЗначениеЗаполнено(Сотрудник)
		И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И не сотрудник.Склады.количество() = 0 Тогда
		
		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		
		Запрос.Текст = "ВЫБРАТЬ Продажи.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Регистратор.Склад В(&Склады)
		|	И Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		Запрос.УстановитьПараметр("Склады", Склады);
		Запрос.УстановитьПараметр("приход", ВидДвиженияНакопления.Приход);	
		
	иначе	    		
		Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаПриход - ПродажиОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиОбороты";   	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", конецдня(ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

&НаСервере
Функция   ПроверитьДоступностьДокументаПрошлого(Знач Дата, Знач Ссылка = Неопределено) Экспорт
	
	Результат = Истина;
	
	ЗапретитьИзмененияВПрошломПериоде = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде");
	
	Если ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты Тогда
		ДатаЗапрета = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных") ;
		
		Если Дата <= ДатаЗапрета Тогда
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше даты запрета:") + " " + формат(ДатаЗапрета, "ДФ=dd.MM.yyyy"), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше даты запрета:") + " " + формат(ДатаЗапрета,"ДФ=dd.MM.yyyy" );
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			Результат = ложь;
		КонецЕсли;
		
	ИначеЕсли ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока Тогда
		СрокЗапрета = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах") ;
		ДатаЗапрета = (ТекущаяДата() - (СрокЗапрета * 3600));
		
		Если Дата <= ДатаЗапрета Тогда
			если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше срока запрета:") + " " + Формат(ДатаЗапрета, "ДФ='dd.MM.yy ЧЧ:мм'"), , Ссылка);
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше срока запрета:") + " " + Формат(ДатаЗапрета, "ДФ='dd.MM.yy ЧЧ:мм'");
				//Сообщение.Сообщить();                                               	
			КонецЕсли;
			
			Результат = ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   ПроверитьУникальностьОКПО(Знач Отказ, Знач имяСправочник, Знач ОКПО, Знач Ссылка) Экспорт
	
	Если Отказ Тогда	
		
		Возврат Истина;		
		
	ИначеЕсли ОКПО = "" Тогда
		
		Возврат Ложь;		
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда
		
		Запрос = Новый Запрос;
		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда			
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
			
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("ОКПО", ОКПО);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВозвратОтказ = Ложь;
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким ИНН (ОКПО) (") + ОКПО + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") уже существует:") + ВыборкаДетальныеЗаписи.Ссылка + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Повтор запрещен."), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким ИНН (ОКПО) (") + ОКПО + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") уже существует:") + ВыборкаДетальныеЗаписи.Ссылка + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Повтор запрещен.");
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
				
				ВозвратОтказ = Истина;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат ВозвратОтказ;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции //ПроверитьУникальностьОКПО

&НаСервере
Функция   ПроверитьУникальностьНаименование(Знач Отказ, Знач имяСправочник, Знач Наименование, Знач Ссылка) Экспорт
	
	Если Отказ тогда
		
		Возврат Истина;
		
	ИначеЕсли Наименование = "" Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков") Тогда
		
		Запрос = Новый Запрос;
		
		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.Наименование = &Наименование И Н.Ссылка <> &Ссылка";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.Наименование = &Наименование И Н.Ссылка <> &Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВозвратОтказ = Ложь;
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким именем (") + Наименование + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") уже существует:") + " " + ВыборкаДетальныеЗаписи.Ссылка + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор имен запрещен."), , Ссылка);
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким именем (") + Наименование + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") уже существует:") + " " + ВыборкаДетальныеЗаписи.Ссылка + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" Повтор имен запрещен.");
					//Сообщение.Сообщить();                                               	
				КонецЕсли;
				
				ВозвратОтказ = Истина;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат ВозвратОтказ;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции //ПроверитьУникальностьНаименование

&НаСервере
Функция   ПроверитьДокументПроведен(Знач ДокументССылка) Экспорт
	
	Попытка
		Возврат ДокументССылка.Проведен;
	Исключение //не документ
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции //ПроверитьДокументПроведен

&НаСервере
Функция   ПроверитьЧтоНоменклатураНеИспользовалась(Знач Номенклатура, Знач СерияНоменклатуры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если не СерияНоменклатуры = Неопределено тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|	И Товары.СерияНоменклатуры = &СерияНоменклатуры";
		
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		
	иначе		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Регистратор КАК Регистратор
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПланыПродажТовары.Ссылка
		|ИЗ Документ.ПланыПродаж.Товары КАК ПланыПродажТовары
		|ГДЕ ПланыПродажТовары.Ссылка.Проведен = ИСТИНА
		|	И ПланыПродажТовары.НоменклатураИлиГруппа = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Регистратор
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Номенклатура = &Номенклатура";                   	
	КонецЕсли; //в товарах не движутся услуги, могут быть планы поэтому следует переьрать все возможные объекты
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой(); //доступно
	
КонецФункции //ПроверитьЧтоНоменклатураНеИспользовалась

&НаСервере
Функция   ПроверитьЧтоДоговорНеИспользовался(Знач Договор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Период
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Период
	|ИЗ РегистрНакопления.Закупки КАК Закупки
	|ГДЕ Закупки.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Расчеты.Период
	|ИЗ РегистрНакопления.Расчеты КАК Расчеты
	|ГДЕ Расчеты.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСПоставщиками.Период
	|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ РасчетыСПоставщиками.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();//доступен  
	
КонецФункции //ПроверитьЧтоНоменклатураНеИспользовалась

&НаСервере
Функция   ПолучитьЛьготнуюЦену(Знач Номенклатура, Знач Количество = -1, Знач Цена, Знач ВидЦен = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже") Тогда
		Если ЗначениеЗаполнено(ВидЦен)
			и ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			коэф = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;
		Иначе
			коэф = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию") ;	
		КонецЕсли;
		
		Если количество = -1 Тогда //выясняем цену без планки			
			возврат цена * коэф;
		иначе
			планка = Номенклатура.ПланкаКоличестваДляЛьготнойЦены;
			
			Если количество >= Планка Тогда
				возврат цена * коэф;
			Иначе
				возврат Цена;
			КонецЕсли;
		КонецЕсли;
		
	иначе
		возврат цена;
	КонецЕсли;
	
КонецФункции //ПолучитьЛьготнуюЦену

&НаСервере
Функция   ПолучитьЦенуСписания(Знач Номенклатура, Знач Количество = 0, Знач Дата, Знач СтруктураОстатка = Неопределено) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ВЫБОР КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0 ТОГДА 0
	               |		ИНАЧЕ ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
	               |	КОНЕЦ КАК Цена
	               |ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Цена;
		
	иначе
		Возврат ПолучитьЦенуНаСервере(номенклатура, истина, дата, ложь);
		
	КонецЕсли;
	
КонецФункции //ПолучитьСуммуСписания

&НаСервере
Функция   ПолучитьЗначениеПраметраСеанса(Знач ИмяПараметра) Экспорт  	
	Возврат ПараметрыСеанса[ИмяПараметра];	
КонецФункции //ПолучитьЗначениеПраметраСеанса

&НаСервере
Процедура УдалитьВсеЗависимыеЦены(Знач номенклатура, Знач ВидЦен, Знач Период) Экспорт
	
	СтрокаТовара = новый структура;
	СтрокаТовара.Вставить("номенклатура", Номенклатура);
	СтрокаТовара.Вставить("цена", 0);
	
	УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Период, Истина, , Истина, , Истина);
	
КонецПроцедуры //УдалитьВсеЗависимыеЦены(Источник.Отбор.номенклатура, Источник.Отбор.ВидЦен, Источник.Отбор.Период);

&НаСервере
Функция   ОстатокТовара(Знач Склад = Неопределено, Знач Номенклатура, Знач ДатаОстатка, Знач ВернутьСтруктуру = ложь, ЭтоРасходТовара = Ложь) Экспорт
	
	КвоОстаток 		= 0;
	СуммаОстаток 	= 0;	
	ЗначениеЗаполненоСклад = ЗначениеЗаполнено(Склад);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			Номенклатура = &Номенклатура ";
	
	Если ЭтоРасходТовара Тогда
		
		Если ЗначениеЗаполненоСклад Тогда
			Запрос.Текст = Запрос.Текст + " И (Склад = &Склад или Склад = &СкладПополнения) ) КАК ТоварыОстатки";
			Запрос.УстановитьПараметр("СкладПополнения", Склад.СкладПополнения);	
		иначе
			Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
		КонецЕсли;
		
	иначе
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполненоСклад, " И Склад = &Склад", "") + ") КАК ТоварыОстатки";
	КонецЕсли;
	
	
	Если ЗначениеЗаполненоСклад Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);
	
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КвоОстаток 		= КвоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СуммаОстаток 	= СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;          
		
	КонецЕсли;
	
	Если ВернутьСтруктуру Тогда
		
		структурарезультат = новый структура;
		структурарезультат.Вставить("Количество", КвоОстаток);
		структурарезультат.Вставить("Сумма", СуммаОстаток);
		
		Возврат структурарезультат;
		
	иначе
		Возврат КвоОстаток;
	КонецЕсли;		
	
	
КонецФункции //ОстатокДенег

&НаСервере
Функция   ПолучитьОстатокТовара(Знач номенклатура, Знач Склад = Неопределено, Знач Дата, Знач ЭтоРасходТовара = ложь) Экспорт	
	Возврат ОстатокТовара(Склад, номенклатура, Дата, Ложь, ЭтоРасходТовара);	
КонецФункции //ПолучитьОстатокТовара

&НаСервере
Функция   СформироватьТаблицуОстатков(Знач ссылка, Знач Склад = Неопределено, Знач Дата, Знач ОстаткиСледуетПроверять = истина) Экспорт
	
	Если ОстаткиСледуетПроверять
		и ЗначениеЗаполнено(ссылка) тогда //иначе зачем
		
		Запрос = Новый Запрос;
		
		если склад = Неопределено 
			или НЕ ЗначениеЗаполнено(склад) тогда
			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура)) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
		иначе      			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(
			|			&Дата,
			|			Номенклатура В (&всяНоменклатура)
			|				И Склад = &Склад) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
			Запрос.УстановитьПараметр("Склад", Склад);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("всяНоменклатура", ссылка.товары.выгрузитьколонку("номенклатура"));
		Запрос.УстановитьПараметр("Дата", Дата);
		
		результат = Запрос.Выполнить();
		
		Если результат.Пустой() Тогда
			
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
			ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
			
		иначе               			
			ТаблицаОтвета = результат.Выгрузить();
			
		КонецЕсли;
		
	иначе      		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
		
	КонецЕсли;
	
	возврат ТаблицаОтвета;
	
КонецФункции //СформироватьТаблицуОстатков

&НаСервере
Функция   ПолучитьТаблицыЦенСписанияИОстатков(Знач ссылка, Знач склад, Знач дата, Знач ОстаткиСледуетПроверять) Экспорт
	
	СтруктураТаблиц = новый Структура;
	
	всяНоменклатура = ссылка.товары.выгрузитьколонку("номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
	               |	КОНЕЦ КАК Цена,
	               |	ТоварыОстатки.Номенклатура
	               |ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&ВсяНоменклатура)) КАК ТоварыОстатки";
	
	Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	СтруктураТаблиц.вставить("ТаблицаЦенСписания", Запрос.Выполнить().Выгрузить());
	
	Если ОстаткиСледуетПроверять
		и ЗначениеЗаполнено(ссылка) тогда //иначе зачем
		
		Запрос = Новый Запрос; //БЕЗ учета СЕРИЙ
		
		если склад = Неопределено 
			или НЕ ЗначениеЗаполнено(склад) тогда
			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура) %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
		иначе          			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура) И Склад = &Склад %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
			Запрос.УстановитьПараметр("Склад", Склад);
			
		КонецЕсли;
		
		если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры") тогда
			
			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И СерияНоменклатуры В (&всеЕЕСерии) ");
			всеЕЕСерии = ссылка.товары.выгрузитьколонку("СерияНоменклатуры");
			Запрос.УстановитьПараметр("всеЕЕСерии", всеЕЕСерии);
			
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
		конецесли;
		
		Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		результат = Запрос.Выполнить();
		
		Если результат.Пустой() Тогда
			
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
			
		иначе   			
			ТаблицаОтвета = результат.Выгрузить();
			
		КонецЕсли;
		
	иначе      		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		
	КонецЕсли;
	
	СтруктураТаблиц.вставить("ТаблицаОстатков", ТаблицаОтвета);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

&НаСервере
Функция   ПолучитьВерсиюКонфигурации() Экспорт    	
	Возврат метаданные.Версия;	
КонецФункции //ПолучитьВерсиюКонфигурации

&НаСервере
Функция   СуществуютЗависимыеВидыЦен() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = ИСТИНА
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат не РезультатЗапроса.Пустой();
	
КонецФункции //СуществуютЗависимыеВидыЦен

&НаСервере
Функция   ПолучитьКоличествоПродажЗаПериод(Знач Номенклатура, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ПродажиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Количество = 0;
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции //ПолучитьКоличествоПродажЗаПериод

&НаСервере
Функция   ПолучитьКоличествоПродажКлиентаЗаПериод(Знач Клиент, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Клиент = &Клиент) КАК ПродажиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Количество = 0;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции //ПолучитьКоличествоПродажКлиентаЗаПериод

&НаСервере
Функция   ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Знач Поставщик, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.КоличествоОборот ИЗ РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, , Поставщик = &Поставщик) КАК ЗакупкиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
	Количество = 0;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() тогда 		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции 

&НаСервере
Функция   ПроверитьПользовательИмеетПравоМенятьЦены() Экспорт 	
	Возврат НЕ ОбщийМодульСерверПривилегия.ЕстьПользователи() ИЛИ РольДоступна("ПолныеПрава") ИЛИ НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");	
КонецФункции //ПроверитьПользовательИмеетПравоМенятьЦены

&НаСервере
Функция   ЕстьНоваяВерсияПрограммы(ПроверитьВЛюбомСлучае = Ложь) Экспорт
	
	Если ПроверитьВЛюбомСлучае
		ИЛИ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске") Тогда
		
		Попытка
			ТекущаяВерсия 		= Число(стрзаменить(сокрлп(ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВерсияПрограммы")), "F", ""));	
			ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
			
			//подключение к серверу ФТП на сайте автора только для проверки наличия новой версии конфигурации
			ФТПСоединение = Новый FTPСоединение("85.238.97.60", 2121, "etest", "etest", , Истина, 7);
			ФТПСоединение.Получить("\ET_cur_ver.txt", ИмяВременногоФайла);
			ФТПСоединение = Неопределено;
			
			ЧтениеФайла   = Новый ЧтениеТекста(ИмяВременногоФайла);
			ВерсияНаСайте = Число(ЧтениеФайла.ПрочитатьСтроку());
			Если ВерсияНаСайте > ТекущаяВерсия Тогда
				Возврат формат(ВерсияНаСайте, "ЧГ=0");
			Иначе
				Возврат "";
			КонецЕсли;
			
		Исключение
			Возврат неопределено;	
		КонецПопытки;
		
	Иначе
		Возврат ""; 		
	КонецЕсли;
	
КонецФункции //ЕстьНоваяВерсияПрограммы

&НаСервере
Функция   ЧислоДоговоровСКонтрагентом(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат 0;
		
	Иначе		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.КлиентПоставщик = &Контрагент
		|	И Договора.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		РезультатЧислоДоговоровСКонтрагентом = 0;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				РезультатЧислоДоговоровСКонтрагентом = РезультатЧислоДоговоровСКонтрагентом + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат РезультатЧислоДоговоровСКонтрагентом;
	КонецЕсли;
	
КонецФункции //ЧислоДоговоровСКонтрагентом

&НаСервере
Функция   ЧислоДоговоровСЮрЛицом(ЮрЛицо) Экспорт
	
	Результат = 0;
	
	Если ЗначениеЗаполнено(ЮрЛицо) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И Договора.Организация = &ЮрЛицо";
		
		Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = Результат + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЧислоДоговоровСЮрЛицом

&НаСервере
Функция   ПодобратьДоговор(Знач Организация, Знач КлиентПоставщик, Знач Дата, Знач ВидЦен = Неопределено) Экспорт
	
	Результат = Справочники.Договора.ПустаяСсылка() ;
	
	Если Не параметрысеанса.ВестиУчетОтдельныхДоговоровСИКонтрагентамиПС тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Договора.Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И (&НетОтбораПоОрганизации
		|			ИЛИ Договора.Организация = &Организация)
		|	И (&НетОтбораПоКонтрагенту
		|			ИЛИ Договора.КлиентПоставщик = &КлиентПоставщик)
		|	И (Договора.ДатаОкончания = &ПустаяДата
		|			ИЛИ Договора.ДатаОкончания > &Дата)
		|	И (&НетОтбораПоВидуЦен
		|			ИЛИ Договора.ВидЦен = &ВидЦен)
		|УПОРЯДОЧИТЬ ПО Договора.ДатаЗаключения,
		|	Договора.ДатаОкончания УБЫВ";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("НетОтбораПоКонтрагенту", НЕ ЗначениеЗаполнено(КлиентПоставщик));
		Запрос.УстановитьПараметр("НетОтбораПоОрганизации", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС") И НЕ ЗначениеЗаполнено(Организация));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НетОтбораПоВидуЦен", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") И НЕ ЗначениеЗаполнено(ВидЦен));
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		
		РезультатЗапроса = Запрос.Выполнить();
		
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ВыборкаДетальныеЗаписи.ссылка;		
			КонецЦикла;
			
		иначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
			
			Результат = ОбщийМодульСерверПривилегия.СоздатьДоговор(Организация, КлиентПоставщик, Дата, ВидЦен);
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПодобратьДоговор

&НаСервере
Функция   ДобавитьШапкуОрганизации(Знач ТабДок, Знач Организация) Экспорт
	
	Если ОбщийМодульПовтор.ПлатнаяВерсия() Тогда
		
		МакетОрганизации = Неопределено;
		Выполнить("	МакетОрганизации = Справочники.Организации.ПолучитьМакет(""ШапкаДокументов"") ; ");
		ШапкаОрганизации = МакетОрганизации.ПолучитьОбласть("Ш");
		ШапкаОрганизации.Параметры.Заполнить(Организация);
		Если НЕ ЗначениеЗаполнено(Организация.НаименованиеДляПечати) Тогда
			ШапкаОрганизации.Параметры.НаименованиеДляПечати = Организация.Наименование;
			ТабДок.Вывести(ШапкаОрганизации);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.Адрес) Тогда
			ОбластьАдрес = МакетОрганизации.ПолучитьОбласть("Адрес");	
			ОбластьАдрес.Параметры.Адрес = Организация.Адрес;
			ТабДок.Вывести(ОбластьАдрес);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.Телефон) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.ЭлектроннаяПочта) Тогда
			ОбластьЭлектроннаяПочта = МакетОрганизации.ПолучитьОбласть("ЭлектроннаяПочта");	
			ОбластьЭлектроннаяПочта.Параметры.ЭлектроннаяПочта = Организация.ЭлектроннаяПочта;
			ТабДок.Вывести(ОбластьЭлектроннаяПочта);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.ОКПО) Тогда
			ОбластьОКПО = МакетОрганизации.ПолучитьОбласть("ОКПО");	
			ОбластьОКПО.Параметры.ОКПО = Организация.ОКПО;
			ТабДок.Вывести(ОбластьОКПО);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.МФО) Тогда
			ОбластьМФО = МакетОрганизации.ПолучитьОбласть("МФО");	
			ОбластьМФО.Параметры.МФО = Организация.МФО;
			ТабДок.Вывести(ОбластьМФО);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.НаименованиеБанка) Тогда
			ОбластьНаименованиеБанка = МакетОрганизации.ПолучитьОбласть("НаименованиеБанка");	
			ОбластьНаименованиеБанка.Параметры.НаименованиеБанка = Организация.НаименованиеБанка;
			ТабДок.Вывести(ОбластьНаименованиеБанка);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация.НомерСчета) Тогда
			ОбластьНомерСчета = МакетОрганизации.ПолучитьОбласть("НомерСчета");	
			ОбластьНомерСчета.Параметры.НомерСчета = Организация.НомерСчета;
			ТабДок.Вывести(ОбластьНомерСчета);		
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция   УКонтрагентаЕстьДокументы(Знач Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСПоставщиками.Поставщик
	|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ РасчетыСПоставщиками.Поставщик = &Контрагент
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.Клиент
	|ИЗ РегистрНакопления.Расчеты КАК Расчеты
	|ГДЕ Расчеты.Клиент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции //УКонтрагентаЕстьДокументы

&НаСервере
Функция   ПолучитьЧислоЗаметокСсылки(Знач Ссылка) Экспорт
	
	ЧислоСсылок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаметкиИНапоминания.Ссылка) КАК ЧислоСсылок
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Актуально = ИСТИНА
	|	И (ЗаметкиИНапоминания.Причина = &Ссылка
	|			ИЛИ ЗаметкиИНапоминания.СвязаноС = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЧислоСсылок = ЧислоСсылок + ВыборкаДетальныеЗаписи.ЧислоСсылок;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ЧислоСсылок;
	
КонецФункции //ПолучитьЗаметкиОбъекта

&НаСервере
Функция   СформироватьОтчетРуководителюНаСервере(Знач СтруктураУсловий) Экспорт
	
	Отчет = Новый Структура;
	
	Реквизиты = метаданные.Отчеты.ОтчетРуководителю.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Отчет.Вставить(Реквизит.Имя);
		Если сокрлп(Реквизит.Тип) = "Число" Тогда
			Отчет[Реквизит.Имя] = 0;
		ИначеЕсли сокрлп(Реквизит.Тип) = "Дата" Тогда
			Отчет[Реквизит.Имя] = '00010101000000';
		ИначеЕсли сокрлп(Реквизит.Тип) = "Строка" Тогда
			Отчет[Реквизит.Имя] = "";
		КонецЕсли;
		
	КонецЦикла;	
	
	Отчет.ОтборПоСкладу   = СтруктураУсловий.ОтборПоСкладу;
	Отчет.ЦенаПредприятия = 0;
	
	ДатаНачалаОтчета 	= началодня(СтруктураУсловий.ДатаНачала);
	ДатаОкончанияОтчета = Конецдня(СтруктураУсловий.ДатаОкончания);
	
	Отчет.ДатаНачала	= ДатаНачалаОтчета;	
	Отчет.ДатаОкончания	= ДатаОкончанияОтчета;
	
	Отчет.ЦенаПредприятия = 0;
	
	Если ЗначениеЗаполнено(ДатаНачалаОтчета) 
		и ЗначениеЗаполнено(ДатаОкончанияОтчета)Тогда
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ ДеньгиОстаткиИОбороты.СуммаПриход,
			|	ДеньгиОстаткиИОбороты.СуммаРасход,
			|	ДеньгиОстаткиИОбороты.СуммаНачальныйОстаток,
			|	ДеньгиОстаткиИОбороты.СуммаКонечныйОстаток,
			|	ДеньгиОстаткиИОбороты.СуммаОборот
			|ИЗ РегистрНакопления.Деньги.ОстаткиИОбороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , , ) КАК ДеньгиОстаткиИОбороты";
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			отчет.РасходДенег 			= 0;
			отчет.ТекущийОстатокДенег 	= 0;
			отчет.НачальныйОстатокДенег = 0;
			отчет.ПоступилоДенег 		= 0;
			Отчет.ОборотДенег 			= 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Отчет.ОборотДенег 			= Отчет.ОборотДенег + ВыборкаДетальныеЗаписи.СуммаОборот;
					отчет.РасходДенег 			= отчет.РасходДенег + ВыборкаДетальныеЗаписи.СуммаРасход;
					отчет.ТекущийОстатокДенег 	= отчет.ТекущийОстатокДенег + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
					отчет.НачальныйОстатокДенег = отчет.НачальныйОстатокДенег + ВыборкаДетальныеЗаписи.СуммаНачальныйОстаток;
					отчет.ПоступилоДенег 		= отчет.ПоступилоДенег + ВыборкаДетальныеЗаписи.СуммаПриход;				
					
				КонецЦикла;		
			КонецЕсли;
			
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ТекущийОстатокДенег;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продажи.Регистратор) КАК Кво
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		
		РезультатЗапроса  = Запрос.Выполнить();
		отчет.ВсегоПродаж = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ВсегоПродаж = отчет.ВсегоПродаж + ВыборкаДетальныеЗаписи.кво;				
			КонецЦикла;                      	   	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ Продажи.Количество,
		|	Продажи.Сумма,
		|	Продажи.Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Продажи.Активность = Истина ";
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Продажи.Период";
		
		отчет.ПроданоКоличество = 0;
		отчет.ПроданоНаСумму 	= 0;
		отчет.ПоследняяПродажа 	= '00010101000000';
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ПроданоКоличество = отчет.ПроданоКоличество  + ВыборкаДетальныеЗаписи.Количество;
				отчет.ПроданоНаСумму = отчет.ПроданоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				отчет.ПоследняяПродажа = ВыборкаДетальныеЗаписи.Период;
				
			КонецЦикла;           	
		КонецЕсли;
		
		если отчет.ВсегоПродаж = 0 тогда
			отчет.СреднееКоличествоРеализации 	= 0;
			отчет.СредняяСуммаРеализации 		= 0;
			
		иначе
			отчет.СреднееКоличествоРеализации 	= отчет.ПроданоКоличество / отчет.ВсегоПродаж;
			отчет.СредняяСуммаРеализации 		= отчет.ПроданоНаСумму / отчет.ВсегоПродаж;
		конецесли;
		
		//ПОСТУПИЛО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.ВидДвижения = &приход
		|	И Товары.СписаниеИлиОприходование = ИСТИНА";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Запрос.УстановитьПараметр("приход", ВидДвиженияНакопления.Приход);
		
		ПоступилоКоличество 		= 0;
		ПоступилоТоваровНаСумму 	= 0;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПоступилоКоличество 		= ПоступилоКоличество + ВыборкаДетальныеЗаписи.Количество;	
				ПоступилоТоваровНаСумму 	= ПоступилоТоваровНаСумму + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;	
		КонецЕсли;
		отчет.ПоступилоКоличество 		= ПоступилоКоличество;
		отчет.ПоступилоТоваровНаСумму 	= ПоступилоТоваровНаСумму;
		
		//СПИСАНО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.СписаниеИлиОприходование = ИСТИНА
		|	И Товары.ВидДвижения = &Расход";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		
		СписаноКоличество = 0;
		СписаноНаСумму 	= 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СписаноКоличество 	= СписаноКоличество + ВыборкаДетальныеЗаписи.Количество;	
				СписаноНаСумму 		= СписаноНаСумму + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;          	
		КонецЕсли;
		отчет.СписаноКоличество = СписаноКоличество;
		отчет.СписаноНаСумму 	= СписаноНаСумму;
		
		//ЗАКУПКИ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Закупки.Количество,
		|	Закупки.Сумма,
		|	Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Закупки.Активность = Истина";
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Закупки.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Закупки.Период";
		
		отчет.КупленоКоличество = 0;
		отчет.КупленоНаСумму 	= 0;
		отчет.ПоследняяПокупка 	= '00010101000000';
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.КупленоКоличество = отчет.КупленоКоличество + ВыборкаДетальныеЗаписи.Количество;
				отчет.КупленоНаСумму 	= отчет.КупленоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				отчет.ПоследняяПокупка 	= ВыборкаДетальныеЗаписи.Период;
				
			КонецЦикла;	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыОстатки.Номенклатура) КАК КвоПозиций,
		|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " Склад = &Склад ) КАК ТоварыОстатки";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		Иначе
			Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
		
		отчет.ОстаткиТоваровКоличество  = 0;
		отчет.ОстаткиТоваровНаСумму 	= 0;
		отчет.КоличествоПозицийНоменклатурыВОстатках = 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ОстаткиТоваровКоличество 	= отчет.ОстаткиТоваровКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				отчет.ОстаткиТоваровНаСумму 	= отчет.ОстаткиТоваровНаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;			
				отчет.КоличествоПозицийНоменклатурыВОстатках = отчет.КоличествоПозицийНоменклатурыВОстатках + ВыборкаДетальныеЗаписи.КвоПозиций;
			КонецЦикла;                                       	
		КонецЕсли;
		Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ОстаткиТоваровНаСумму;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Период КАК Период
			|ИЗ РегистрСведений.Цены КАК Цены
			|ГДЕ Цены.Период <= &ДатаОкончанияОтчета
			|УПОРЯДОЧИТЬ ПО Период УБЫВ";
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Отчет.ПоследняяПереоценка = ВыборкаДетальныеЗаписи.Период;
				КонецЦикла;                                	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход
			|ИЗ РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , ) КАК ВаловаяПрибыльОбороты";
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			отчет.ОбщаяВаловаяПрибыль = 0;
			
			РезультатЗапроса = Запрос.Выполнить();			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ОбщаяВаловаяПрибыль = отчет.ОбщаяВаловаяПрибыль + ВыборкаДетальныеЗаписи.СуммаПриход;
				КонецЦикла;                           	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0) КАК ПроцентНаценки
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ ВаловаяПрибыль.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета";
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			ЧислоНаценок = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СреднийПроцентНаценки = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЧислоНаценок = ЧислоНаценок + 1;
					СреднийПроцентНаценки = СреднийПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
				КонецЦикла;	
			КонецЕсли;
			
			Если ЧислоНаценок = 0 Тогда
				отчет.СреднийПроцентНаценки = 0;
			Иначе
				отчет.СреднийПроцентНаценки = СреднийПроцентНаценки / ЧислоНаценок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, ) КАК РасчетыОстатки";
			
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			
			отчет.ТекущийДолгКлиентов = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ТекущийДолгКлиентов = отчет.ТекущийДолгКлиентов  + ВыборкаДетальныеЗаписи.суммаОстаток;
					
				КонецЦикла;	
			КонецЕсли;
			
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ТекущийДолгКлиентов;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, ) КАК РасчетыСПоставщикамиОстатки";
			
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			
			отчет.ТекущийДолгПередПоставщиками = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ТекущийДолгПередПоставщиками = отчет.ТекущийДолгПередПоставщиками + ВыборкаДетальныеЗаписи.суммаОстаток;
				КонецЦикла;                                         	
			КонецЕсли;
			
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия - отчет.ТекущийДолгПередПоставщиками;
		КонецЕсли;
	КонецЕсли;        	
	
	Если ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстаткиИОбороты.СуммаПриход,
		|	ЗарплатаОстаткиИОбороты.СуммаРасход,
		|	ЗарплатаОстаткиИОбороты.СуммаКонечныйОстаток
		|ИЗ РегистрНакопления.Зарплата.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , ) КАК ЗарплатаОстаткиИОбороты";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияОтчета);
		
		отчет.ВыданоСотрудникам 		= 0;
		отчет.НачисленоСотрудникам 		= 0;
		отчет.ЗадолженностьСотрудникам 	= 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ВыданоСотрудникам 		= отчет.ВыданоСотрудникам + ВыборкаДетальныеЗаписи.СуммаРасход;
				отчет.НачисленоСотрудникам 		= отчет.НачисленоСотрудникам + ВыборкаДетальныеЗаписи.СуммаПриход;
				отчет.ЗадолженностьСотрудникам 	= отчет.ЗадолженностьСотрудникам + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЦикла;                     	
		КонецЕсли;
		
		Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия - отчет.ЗадолженностьСотрудникам;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ДвиженияДенег.Дата КАК Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.НачислениеИВыплатаЗаработнойПлаты = ИСТИНА
		|	И ДвиженияДенег.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ПоследнийРасчет = ВыборкаДетальныеЗаписи.дата;
			КонецЦикла;                                            	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отчет;
	
КонецФункции

&НаСервере
Процедура ПечатьНаСервереОтчетаРуководителю(Знач СтруктураОтчета, Знач ТабДок, Знач НаЕмейл = Ложь) Экспорт
	
	Макет = отчеты.ОтчетРуководителю.ПолучитьМакет("Печать");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Если НаЕмейл Тогда
		Шапка = Макет.ПолучитьОбласть("Ш2");	
	Иначе
		Шапка = Макет.ПолучитьОбласть("Шапка");	
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Шапка.Параметры.Заполнить(СтруктураОтчета);
	Шапка.Параметры.валюта = Справочники.Валюты.ОсновнаяВалюта;
	ТабДок.Вывести(Шапка);
	
КонецПроцедуры

&НаСервере
Функция   ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Знач Отказ = Ложь, Знач Договор, Знач ЭтоКлиент = Истина, Знач Дата, Знач ТовараНаСумму, Знач ТовараВКоличестве, Знач ИзПоступления = Ложь, Знач МинусСумма, Знач Ссылка = Неопределено) Экспорт
	
	Если НЕ отказ тогда
		ДоговорОграничиваетСуммуТоваров = Договор.ОграничиваетСуммуТоваров;
		
		Если НЕ ДоговорОграничиваетСуммуТоваров = 0 Тогда
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				
				Запрос.Текст = "ВЫБРАТЬ РасчетыОбороты.СуммаОборот
				|ИЗ РегистрНакопления.Расчеты.Обороты(, , , Договор = &Договор) КАК РасчетыОбороты";
				
			иначе				
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОбороты.СуммаОборот
				|ИЗ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , , Договор = &Договор) КАК РасчетыСПоставщикамиОбороты";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.СуммаОборот;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуТоваров;							
				ИНАЧЕ
					ОтказТут = (ТекущийОборот + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуТоваров;							
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ = Истина;
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем по Договору!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем по Договору!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				конецесли;		
			КонецЕсли;
			
		КонецЕсли;	
		
		ДоговорОграничиваетКоличествоТоваров = Договор.ОграничиваетКоличествоТоваров;
		
		Если не ТовараВКоличестве =0
			И НЕ ДоговорОграничиваетКоличествоТоваров = 0 Тогда		
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				
				Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаОборот,
				|	ПродажиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Продажи.Обороты(, , , Договор = &Договор) КАК ПродажиОбороты";
				
			иначе				
				Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.СуммаОборот,
				|	ЗакупкиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Закупки.Обороты(, , , Договор = &Договор) КАК ЗакупкиОбороты";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.КоличествоОборот;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;		
				Иначе
					ОтказТут = (ТекущийОборот + ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;	
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ =	Истина;     					
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество превышает допустимый объем по Договору!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество превышает допустимый объем по Договору!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				конецесли;		
			КонецЕсли;
			
		КонецЕсли;	
		
		ДоговорОграничиваетСуммуЗадолженности = Договор.ОграничиваетСуммуЗадолженности;
		Если НЕ ДоговорОграничиваетСуммуЗадолженности = 0 Тогда
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток ИЗ РегистрНакопления.Расчеты.Остатки(&Дата, Договор = &Договор) КАК РасчетыОстатки";
				
			иначе				
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			Запрос.УстановитьПараметр("Дата", Дата);
			
			РезультатЗапроса = Запрос.Выполнить();
			если не РезультатЗапроса.Пустой() тогда
				
				ТекущийДолг = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийДолг = ТекущийДолг + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийДолг - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;			
				ИНАЧЕ
					ОтказТут = (ТекущийДолг + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;			
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ = Истина;
					если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем долга по Договору на дату!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем долга по Договору на дату!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				конецесли;		
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьОтказПоСуммеИлиКоличествуДляДоговора

Функция   ПолучитьСостояниеЗаказа(Знач Заказ, Знач Дата = Неопределено) Экспорт
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("смена", '00010101');
	
	Если ЗначениеЗаполнено(Заказ.ссылка) Тогда
		
		Запрос = Новый Запрос;
		Если ТипЗнч(Заказ.ссылка) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.СостояниеЗаказаПоставщику КАК Состояние,
			|	СостоянияЗаказовСрезПоследних.Период КАК Смена
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаПоставщику.Формируется);
			
		иначе
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.Период КАК Смена,
			|	СостоянияЗаказовСрезПоследних.СостояниеЗаказаКлиента КАК Состояние
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);
			
		КонецЕсли; 
		
		Если Дата = Неопределено Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			СтруктураРезультат.состояние = ВыборкаДетальныеЗаписи.Состояние;
			СтруктураРезультат.Смена     = ВыборкаДетальныеЗаписи.смена;
			
		Иначе
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);			
		КонецЕсли;
		
	Иначе		
		СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции //ПолучитьСостояниеЗаказа

&НаСервере
процедура обновитьЗначениеНаЯзыке(Знач Ссылка, Знач НаЯзыке, Знач ПолеЗначения = "Наименование", Знач Язык = Неопределено) Экспорт
	
	Если НЕ НаЯзыке = "" Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		
		РСМЗ = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
		РСМЗ.Активность = Истина;
		РСМЗ.НаЯзыке 	= НаЯзыке;
		РСМЗ.ОбъектБазыДанных = Ссылка;
		РСМЗ.Поле 		= ПолеЗначения;
		РСМЗ.Язык 		= ?(Язык = Неопределено, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"), Язык);
		
		Попытка 
			РСМЗ.Записать(Истина);
			
		Исключение 
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&насервере
функция   ПолучитьСтруктуруИзображения(Знач СсылкаНаЭлементИзображение) Экспорт
	
	Результат = Новый Структура("ИзображениеВБазеДанных", СсылкаНаЭлементИзображение.ИзображениеВБазеДанных);
	Результат.Вставить("подссылку", "");
	результат.Вставить("РазмерПриОтображении", 1) ;
	
	Если Результат.ИзображениеВБазеДанных Тогда
		
		результат.подссылку = ПолучитьНавигационнуюСсылку(СсылкаНаЭлементИзображение, "ХранилищеИзображения");
		
		РазмерПриОтображении = СсылкаНаЭлементИзображение.РазмерПриОтображении;
		
		Если РазмерПриОтображении = Перечисления.РазмерыКартинок.Пропорционально тогда
			результат.Вставить("РазмерПриОтображении", 2);
		ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Растянуть тогда
			результат.Вставить("РазмерПриОтображении", 3);
		ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.РеальныйРазмер тогда
			результат.Вставить("РазмерПриОтображении", 4);
		ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Черепица тогда
			результат.Вставить("РазмерПриОтображении", 5);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.ИмяФайлаИзображения) Тогда
		результат.подссылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
		|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|<HTML style=""font-family:arial; font-size:11px;"">
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
		|<img src = """ + СсылкаНаЭлементИзображение.ИмяФайлаИзображения + """>
		|</HTML>";
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.СсылкаНаИзображение) Тогда
		результат.подссылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
		|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
		|<HTML style=""font-family:arial; font-size:11px;"">
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
		|<img src = """ + СсылкаНаЭлементИзображение.СсылкаНаИзображение + """>
		|</HTML>";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьОсновноеИзображениеОбъекта(Знач СвязанныйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Изображения.Ссылка
	|ИЗ Справочник.Изображения КАК Изображения
	|ГДЕ Изображения.СвязанныйОбъект = &СвязанныйОбъект
	|УПОРЯДОЧИТЬ ПО Изображения.ЭтоОсновноеИзображениеОбъекта УБЫВ";
	
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		возврат неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.ссылка;	
	КонецЕсли;
	
КонецФункции //ПолучитьОсновноеИзображениеОбъекта

Функция   СоздатьИзображениеПоСсылке(Знач СвязанныйОбъект, Знач ИмяИзображения = "", Знач АдресВСети = "", Знач АдресВИнтернет = "", Знач ЗагружатьВБазуДанных = Ложь, Знач РазмерПриОтображении = Неопределено) Экспорт
	
	Если ИмяИзображения = "" Тогда
		ИмяИзображения = "" + СвязанныйОбъект;
	КонецЕсли;
	
	если РазмерПриОтображении = Неопределено тогда
		РазмерПриОтображении = Перечисления.РазмерыКартинок.АвтоРазмер;	
	КонецЕсли;
	
	Изображение = Справочники.Изображения.СоздатьЭлемент();
	Изображение.ИмяФайлаИзображения  = АдресВСети;
	Изображение.СсылкаНаИзображение  = АдресВИнтернет;
	Изображение.Наименование 		 = ИмяИзображения;
	Изображение.РазмерПриОтображении = РазмерПриОтображении;
	Изображение.СвязанныйОбъект 	 = СвязанныйОбъект;
	//Изображение.Комментарий
	
	Если ЗагружатьВБазуДанных тогда		
		АдресЛокально = КаталогВременныхФайлов() + "\ET_teMP.JPg";
		
		КопироватьФайл(?(ЗначениеЗаполнено(АдресВСети), АдресВСети, АдресВИнтернет), АдресЛокально);
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресЛокально);
		Изображение.ХранилищеИзображения = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
		Изображение.ИзображениеВБазеДанных = истина;
		УдалитьФайлы(АдресЛокально);
	КонецЕсли;
	
	Изображение.Записать();
	
	Возврат Изображение.Ссылка;
	
КонецФункции

&НаСервере
Функция   ПолучитьТипДополнительногоРеквизита(Знач ТипОбъектаДляДополнительныхРеквизитов) Экспорт
	
	Результат = ложь;
	
	Если ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаНоменклатура Тогда
		Результат = Справочники.Номенклатура.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаДоговора Тогда
		Результат = Справочники.Договора.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаРасходТовара Тогда
		Результат = Документы.РасходыТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПоступлениеТовара Тогда
		Результат = Документы.ПоступленияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаКлиенты Тогда
		Результат = Справочники.Клиенты.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаВыполненияРабот Тогда
		Результат = Документы.ВыполнениеРабот.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПоставщики Тогда
		Результат = Справочники.Поставщики.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаДвиженияДенег Тогда
		Результат = Документы.ДвиженияДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаИнвентаризация Тогда
		Результат = Документы.Инвентаризации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКорректировкаИВводОстатков Тогда
		Результат = Документы.КорректировкиИРегистрацияОстатков.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПеремещенияТоваров Тогда
		Результат = Документы.ПеремещенияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланПродаж Тогда
		Результат = Документы.ПланыПродаж.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаУстановкаЦен Тогда
		Результат = Документы.УстановкиЦен.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляЗаметокИНапоминаний Тогда
		Результат = Справочники.ЗаметкиИНапоминания.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляПрикрепленныхИзображений Тогда
		Результат = Справочники.Изображения.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаВидыЦен Тогда
		Результат = Справочники.ВидыЦен.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОрганизации Тогда
		Результат = Справочники.Организации.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСредств Тогда
		Результат = Справочники.СредстваПредприятия.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПартииПриобретения Тогда
		Результат = Справочники.ПартииПриобретения.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПроизводители Тогда
		Результат = Справочники.Производители.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаРегионы Тогда
		Результат = Справочники.Регионы.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСклады Тогда
		Результат = Справочники.Склады.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСотрудники Тогда
		Результат = Справочники.Сотрудники.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСтатьиДвиженияДенег Тогда
		Результат = Справочники.СтатьиДвиженияДенег.ПустаяСсылка() ;
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаХранилищаДенег Тогда
		Результат = Справочники.ХранилищаДенег.ПустаяСсылка() ;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции //ПолучитьПустоеЗначениеДополнительногоРеквизита

&НаСервере
Функция   ПолучитьПустоеЗначениеДополнительногоРеквизита(Знач ТипДополнительногоРеквизита) Экспорт
	
	Результат = Ложь;
	
	Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Булево Тогда
		Результат = Ложь;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
		Результат = '00010101';
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаДокумент Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
		Результат = "";
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСвязанныеЦены(Знач Ссылка) Экспорт
	
	ОтборПоДокументу = Новый Структура;
	ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
	
	Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция   нетсегоднякурса() Экспорт
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КурсыВалют.Курс
	|ИЗ РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ КурсыВалют.Период МЕЖДУ &НачалоДня И &КонецДня";
	
	дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("КонецДня", конецдня(дата));
	Запрос.УстановитьПараметр("НачалоДня", началодня(дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции //нетсегоднякурса

Функция   ПолучитьСотрудникаПоШтрихКоду(Знач ОсновнойШтрихКод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Сотрудники.Ссылка
	|ИЗ Справочник.Сотрудники КАК Сотрудники
	|ГДЕ Сотрудники.ОсновнойШтрихКод = &ОсновнойШтрихКод";
	
	Запрос.УстановитьПараметр("ОсновнойШтрихКод", ОсновнойШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	если не РезультатЗапроса.Пустой() тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		возврат ВыборкаДетальныеЗаписи.ссылка;
	иначе
		Возврат неопределено;	
	КонецЕсли;
	
КонецФункции //ПолучитьСотрудникаПоШтрихКоду

Функция   ПлатнаяВерсия() Экспорт
	
	Результат = Найти(метаданные.Версия, "F") = 0;
	ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("КонфигурацияВРаботе", Результат);
	
	Возврат Результат;
	
КонецФункции //ПлатнаяВерсия

Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Экспорт	
	ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
КонецПроцедуры 

Функция   ПолучитьКоличествоПоУмолчанию(Знач Номенклатура) Экспорт
	
	Если НЕ ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок")
		ИЛИ ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) ТОгда
		
		Возврат 1;
	Иначе
	    Возврат ?(Номенклатура.КоличествоПоУмолчанию = 0, 1, Номенклатура.КоличествоПоУмолчанию);
	КонецЕсли;
	
КонецФункции //ПолучитьКоличествоПоУмолчанию

&НаСервере
Функция   ПечатьДнейРожденияКлиентов(ТабДок) Экспорт
	
	ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по дням рождения клиентов."), 2);
	
	ТабДок.Очистить();
	ЕстьЧто = Ложь;
	
	ТабДок.Начатьавтогруппировкустрок();
	
	Макет = ПолучитьОбщийМакет("ПечатьДнейРожденияКлиентов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Клиенты.Телефон,
	|	Клиенты.Адрес,
	|	Клиенты.ЭлектроннаяПочта,
	|	Клиенты.Регион,
	|	Клиенты.Ссылка КАК Клиент,
	|	Клиенты.Наименование,
	|	Клиенты.НаименованиеДляПечати,
	|	Клиенты.ДатаРождения,
	|	ДЕНЬ(Клиенты.ДатаРождения) КАК День,
	|	МЕСЯЦ(Клиенты.ДатаРождения) КАК Месяц,
	|	ГОД(Клиенты.ДатаРождения) КАК Год
	|ИЗ Справочник.Клиенты КАК Клиенты
	|ГДЕ МЕСЯЦ(Клиенты.ДатаРождения) = &Месяц
	|	И ДЕНЬ(Клиенты.ДатаРождения) = &День";
	
	Дата  = ТекущаяДата();
	месяц = месяц(Дата);
	День  = день(Дата);
	Год   = Год(Дата);
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("День", День);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса .Пустой() тогда
		Шапка = Макет.ПолучитьОбласть("Ш");
		Шапка.Параметры.Дата = Дата;
		ТабДок.Вывести(Шапка, 0);
		
		Строка = Макет.ПолучитьОбласть("С");
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
		для каждого строкарезультата из ТаблицаРезультат цикл
			строка.Параметры.Заполнить(строкарезультата);
			строка.Параметры.Год = строкарезультата.Год;
			строка.Параметры.Возраст = Год - строкарезультата.Год;
			ТабДок.Вывести(строка, 1);
		КонецЦикла;
		
		ТабДок.Закончитьавтогруппировкустрок();
		
		ЕстьЧто = Истина;	
	КонецЕсли;
	
	Дата = конецДня(Дата) + 3600;
	месяц = месяц(Дата);
	День  = день(Дата);
	Год   = Год(Дата);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("День", День);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса .Пустой() тогда
		Шапка = Макет.ПолучитьОбласть("Ш");
		Шапка.Параметры.Дата = Дата;
		ТабДок.Вывести(Шапка, 0);
		
		Строка = Макет.ПолучитьОбласть("С");
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
		для каждого строкарезультата из ТаблицаРезультат цикл
			строка.Параметры.Заполнить(строкарезультата);
			строка.Параметры.Год = строкарезультата.Год;
			строка.Параметры.Возраст = Год - строкарезультата.Год;
			ТабДок.Вывести(строка, 1);
		КонецЦикла;
		
		ТабДок.Закончитьавтогруппировкустрок();
		
		ЕстьЧто = Истина;		
	КонецЕсли;
	
	Дата = конецДня(Дата) + 3600;
	месяц = месяц(Дата);
	День  = день(Дата);
	Год   = Год(Дата);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("День", День);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если не РезультатЗапроса .Пустой() тогда
		Шапка = Макет.ПолучитьОбласть("Ш");
		Шапка.Параметры.Дата = Дата;
		ТабДок.Вывести(Шапка, 0);
		
		Строка = Макет.ПолучитьОбласть("С");
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
		для каждого строкарезультата из ТаблицаРезультат цикл
			строка.Параметры.Заполнить(строкарезультата);
			строка.Параметры.Год = строкарезультата.Год;
			строка.Параметры.Возраст = Год - строкарезультата.Год;
			ТабДок.Вывести(строка, 1);
		КонецЦикла;
		
		ТабДок.Закончитьавтогруппировкустрок();
		
		ЕстьЧто = Истина;		
	КонецЕсли;
	
	Если ЕстьЧто Тогда
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Истина;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Ложь;  	
		
		Возврат ИстинА;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
