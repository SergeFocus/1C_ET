//sza150113-0512
//sza150109-0257 НЧ
//sza141225-2034
//sza141216-1557 
//sza141128-0101 
//sza141119-1823 тов
//sza141118-1424 фикс записи сотр
//sza141114-2223
//sza141107-1722 фикс цен
//sza141101-2323 : 
//sza141007-0042 
//sza141004-1604 пополнение
//sza140904-0114
//sza140831-1106
//sza140829-2327
//sza140821-1952 
//sza140730-1836 СредняяЦенаПриобретения
//sza140719-0037 Произвольный отчет
//sza140717-0303 детализировать отчет рук
//sza140710-2149  локац
//sza140702-1128  проверка  новой версии раз в сутки
//sza140701-1629  
//sza140624-1915  
//sza130901-0132 : 
Функция   ВосстановитьАктуальностьПоказателейВаловойПрибылиДокумента(Знач Ссылка, Знач СсылкаДата) Экспорт
	
	НеОтказ = ИСТИНА ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Товары.Регистратор КАК Ссылка,
	|	Товары.Период КАК Период
	|ИЗ РегистрНакопления.Товары КАК Товары
	|ГДЕ Товары.Номенклатура В(&Номенклатура)
	|	И Товары.Период > &Дата
	|УПОРЯДОЧИТЬ ПО Период";
	
	Номенклатура = Ссылка.Товары.Выгрузить(, "Номенклатура");
	
	Запрос.УстановитьПараметр("Дата", СсылкаДата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ДатаАктуальности = Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Получить();
		
		ДокументыДляПерепроведения = Новый Массив;
		ТаблицаДокументовДляПерепроведения = Новый ТаблицаЗначений;
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Документ");
		ТаблицаДокументовДляПерепроведения.Колонки.Добавить("Дата");	
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Регистратор = ВыборкаДетальныеЗаписи.Ссылка;
			Если ДокументыДляПерепроведения.Найти(Регистратор) = Неопределено Тогда
				ДокументыДляПерепроведения.Добавить(Регистратор);
				СтрокаДокумент = ТаблицаДокументовДляПерепроведения.Добавить();
				СтрокаДокумент.Документ = Регистратор;
				СтрокаДокумент.Дата = ВыборкаДетальныеЗаписи.Период;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ДокументыДляПерепроведения.Количество() = 0 Тогда
			ТаблицаДокументовДляПерепроведения.Сортировать("Дата Возр");
			
			Для Каждого СтрокаДокумент Из ТаблицаДокументовДляПерепроведения Цикл
				ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
		КонецЕсли;
		
		Константы.ДатаАктуальностиПоказателейВаловойПрибыли.Установить(ДатаАктуальности);
		
	КонецЕсли;		
	
	Возврат НеОтказ;
	
КонецФункции //ВосстановитьАктуальностьПоказателейВаловойПрибылиДокумента

Функция   ВычислитьКоличествоУслугВПериоде(Знач Номенклатура, Знач ДатаНачалаОказанияУслуг, Знач ДатаОкончанияОказанияУслуг) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(Номенклатура.ПериодОказанияУслугиЗаВремя)
		И ЗначениеЗаполнено(ДатаНачалаОказанияУслуг)
		И ЗначениеЗаполнено(ДатаОкончанияОказанияУслуг) Тогда
		
		Секунд = ДатаОкончанияОказанияУслуг - ДатаНачалаОказанияУслуг + 1;
		
		ПериодОказанияУслугиЗаВремя = Номенклатура.ПериодОказанияУслугиЗаВремя;
		Если ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСекунду Тогда
			Возврат Секунд;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаМинуту Тогда
			Возврат Секунд / 60;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаЧас Тогда
			Возврат Секунд / 3600;
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаСутки Тогда
			Возврат Секунд / (24 * 3600);
		Иначеесли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаМесяц Тогда
			Возврат Секунд / (2629843.2);			
		ИначеЕсли ПериодОказанияУслугиЗаВремя = перечисления.ПериодыОказанияУслугиЗаВремя.ЗаГод Тогда
			Возврат Секунд / (31558118.4); 			
		КонецЕсли;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСобытиеЖурналаНаСервере(Знач ФормаСобытияТ, Знач ТипСобытия, Знач Ссылка = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиЗаписьВЖурналВсехОбычныхДействий") Тогда
		
		ЖурналСобытий = РегистрыСведений.ЖурналСобытий.СоздатьМенеджерЗаписи();
		ЖурналСобытий.Активность = ИСТИНА;
		ЖурналСобытий.Ответственный = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь");
		ЖурналСобытий.Период = ТекущаяДата();
		
		ФормаСобытияТ = ОбщийМодульПовтор.ВычислитьИмяФормы(ФормаСобытияТ);
		
		Если ТипСобытия = 0 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ОткрытиеФормы ;			
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		ИначеЕсли ТипСобытия = 1 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ЗакрытиеФормы ;
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		ИначеЕсли ТипСобытия = 2 Тогда
			ЖурналСобытий.Событие = Перечисления.СобытияЖурнала.ВыполнилОбработкуДанных;
			ЖурналСобытий.Описание = "" + ФормаСобытияТ;
			
		КонецЕсли;
		
		Попытка 
			Если ЗначениеЗаполнено(Ссылка) Тогда
				ЖурналСобытий.СсылкаНаОбъект = Ссылка;
			КонецЕсли;
			
		Исключение 	
		КонецПопытки;
		
		Попытка //Записи в регистр сведений 
			ЖурналСобытий.Записать(ИСТИНА);
			
		Исключение //Записи в регистр сведений 
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в журнал") + ": " + ЖурналСобытий + " " + ОписаниеОшибки(), , Ссылка);
			КонецЕсли;
		КонецПопытки; //Записи в регистр сведений
		
	КонецЕсли;	
	
КонецПроцедуры

Функция   ДобавитьШапкуОрганизации(ТабДок, Знач Организация) Экспорт
	
	Если ОбщийМодульПовтор.ПлатнаяВерсия() Тогда
		
		МакетОрганизации = Неопределено;
		
		Выполнить(" МакетОрганизации = Справочники.Организации.ПолучитьМакет(""ШапкаДокументов""); ");
		МакетОрганизации.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
		
		ШапкаОрганизации = МакетОрганизации.ПолучитьОбласть("Ш");
		ШапкаОрганизации.Параметры.Заполнить(Организация);
		Если ПустаяСтрока(Организация.НаименованиеДляПечати) Тогда
			ШапкаОрганизации.Параметры.НаименованиеДляПечати = Организация.Наименование;
			ТабДок.Вывести(ШапкаОрганизации);		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация)
			И (НЕ ПустаяСтрока(Организация.Адрес) 
			ИЛИ НЕ ПустаяСтрока(Организация.ЮридическийАдрес)) Тогда
			
			ОбластьАдрес = МакетОрганизации.ПолучитьОбласть("Адрес");			
			
			ВыборкаАдрес = СокрЛП(Организация.адрес);
			Если Найти(ВыборкаАдрес, "" + СокрЛП(Организация.регион)) = 0 Тогда
				Адрес = "" + СокрЛП(Организация.Регион) + ?(ЗначениеЗаполнено(Организация.Локация), ", " + СокрЛП(Организация.Локация), "") + ", " + ВыборкаАдрес;
			Иначе
				Адрес = ВыборкаАдрес;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Организация.ЮридическийАдрес)
				И НЕ ВыборкаАдрес = СокрЛП(Организация.ЮридическийАдрес) Тогда
				
				Адрес = Адрес + ", " + Организация.ЮридическийАдрес;
			КонецЕсли;
			
			ОбластьАдрес.Параметры.Адрес = Адрес;
			ТабДок.Вывести(ОбластьАдрес);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.Телефон) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.Телефон2) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон2;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.Телефон3) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон3;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.Телефон4) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон4;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.Телефон5) Тогда
			ОбластьТелефон = МакетОрганизации.ПолучитьОбласть("Телефон");	
			ОбластьТелефон.Параметры.Телефон = Организация.Телефон5;
			ТабДок.Вывести(ОбластьТелефон);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.ЭлектроннаяПочта) Тогда
			ОбластьЭлектроннаяПочта = МакетОрганизации.ПолучитьОбласть("ЭлектроннаяПочта");	
			ОбластьЭлектроннаяПочта.Параметры.ЭлектроннаяПочта = Организация.ЭлектроннаяПочта;
			ТабДок.Вывести(ОбластьЭлектроннаяПочта);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.ОКПО) Тогда
			ОбластьОКПО = МакетОрганизации.ПолучитьОбласть("ОКПО");	
			ОбластьОКПО.Параметры.ОКПО = Организация.ОКПО;
			ТабДок.Вывести(ОбластьОКПО);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.ИНН) Тогда
			ОбластьОКПО = МакетОрганизации.ПолучитьОбласть("ИНН");	
			ОбластьОКПО.Параметры.ИНН = Организация.ИНН;
			ТабДок.Вывести(ОбластьОКПО);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.МФО) Тогда
			ОбластьМФО = МакетОрганизации.ПолучитьОбласть("МФО");	
			ОбластьМФО.Параметры.МФО = Организация.МФО;
			ТабДок.Вывести(ОбластьМФО);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.НаименованиеБанка) Тогда
			ОбластьНаименованиеБанка = МакетОрганизации.ПолучитьОбласть("НаименованиеБанка");	
			ОбластьНаименованиеБанка.Параметры.НаименованиеБанка = Организация.НаименованиеБанка;
			ТабДок.Вывести(ОбластьНаименованиеБанка);		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Организация.НомерСчета) Тогда
			ОбластьНомерСчета = МакетОрганизации.ПолучитьОбласть("НомерСчета");	
			ОбластьНомерСчета.Параметры.НомерСчета = Организация.НомерСчета;
			ТабДок.Вывести(ОбластьНомерСчета);		
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(Организация.КорреспондентскийСчет) Тогда
			ОбластьНомерСчета = МакетОрганизации.ПолучитьОбласть("КорреспондентскийСчет");	
			ОбластьНомерСчета.Параметры.КорреспондентскийСчет = Организация.КорреспондентскийСчет;
			ТабДок.Вывести(ОбластьНомерСчета);		
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ИСТИНА;
	
КонецФункции

Функция   ЕстьНоваяВерсияПрограммы(Знач ПроверитьВЛюбомСлучае = ЛОЖЬ) Экспорт
	
	СтруктураРезультата = Новый Структура("ВерсияНаСайте", "");
	СтруктураРезультата.Вставить("ПолныйТекстВерсии", "");
	
	Если ПроверитьВЛюбомСлучае
		ИЛИ (ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПроверятьНаличиеНовойВерсииКонфигурацииПриЗапуске") 
		И НЕ НачалоДня(Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Получить()) = НачалоДня(ТекущаяДата())) Тогда
		
		Константы.ДатаВремяПоследнегоЗапросаКНовойВерсии.Установить(ТекущаяДата());
		
		Попытка
			ТекущаяВерсия 		= Число(стрзаменить(СокрЛП(ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВерсияПрограммы")), "F", ""));	
			ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
			
			//подключение к серверу ФТП на сайте автора только для проверки наличия новой версии конфигурации
			ФТПСоединение = Новый FTPСоединение("85.238.97.60", 2121, "etest", "etest", , ИСТИНА, 7);
			ФТПСоединение.Получить("\ET_cur_ver.txt", ИмяВременногоФайла);
			ФТПСоединение = Неопределено;
			
			ЧтениеФайла   = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
			ВерсияНаСайте = Число(ЧтениеФайла.ПрочитатьСтроку());
			ПолныйТекстВерсии = "";
			ТекстКВерсии  = ЧтениеФайла.ПрочитатьСтроку();
			Пока Не ТекстКВерсии = Неопределено Цикл
				ПолныйТекстВерсии = ПолныйТекстВерсии + ТекстКВерсии + Символы.ПС;
				ТекстКВерсии  = ЧтениеФайла.ПрочитатьСтроку();
			КонецЦикла;
			ЧтениеФайла.Закрыть();
			
			Если ВерсияНаСайте > ТекущаяВерсия Тогда
				СтруктураРезультата.ВерсияНаСайте = формат(ВерсияНаСайте, "ЧГ=0");
				СтруктураРезультата.ПолныйТекстВерсии = ПолныйТекстВерсии;
				Возврат СтруктураРезультата;
				
			Иначе
				Возврат СтруктураРезультата;
			КонецЕсли;
			
		Исключение
			Возврат неопределено;	
		КонецПопытки;
		
	Иначе
		Возврат СтруктураРезультата;
	КонецЕсли;
	
КонецФункции //ЕстьНоваяВерсияПрограммы

Функция   ИспользоватьШтрихКоды() Экспорт  	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьШтрихКоды");	
КонецФункции 

Функция   НайтиКонтрагентаПоОКПО(Знач ДанныеОКПО, Знач ЭтоТочноКлиент = ЛОЖЬ, Знач ЭтоТочноПоставщик = ЛОЖЬ) Экспорт
	
	РезультатПоиска = Неопределено;
	
	Если ЭтоТочноКлиент 
		ИЛИ НЕ ЭтоТочноПоставщик тогда
		
		ЗапросКПоОКПО = Новый Запрос;
		ЗапросКПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ Клиенты.ОКПО = &ОКПО"; 
		ЗапросКПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));
		
		Выборка = ЗапросКПоОКПО.Выполнить();
		Если НЕ Выборка.Пустой() Тогда
			Результат = Выборка.Выбрать();
			Результат.Следующий();
			
			РезультатПоиска = Результат.Ссылка;		
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоТочноПоставщик
		ИЛИ (не ЭтоТочноКлиент и РезультатПоиска = Неопределено) Тогда
		
		ЗапросКПоОКПО = Новый Запрос;
		ЗапросКПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Поставщики.Ссылка ИЗ
		|	Справочник.Поставщики КАК Поставщики
		|ГДЕ Поставщики.ОКПО = &ОКПО";
		ЗапросКПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));
		
		Выборка = ЗапросКПоОКПО.Выполнить();
		Если НЕ Выборка.Пустой() Тогда
			Результат = Выборка.Выбрать();
			Результат.Следующий();
			
			РезультатПоиска = Результат.Ссылка;		
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция   НайтиЭлементПоИмени(Знач ИмяСправочника, Знач ТекстНаименования) Экспорт
	
	ИскомыйЭлемент = Справочники[ИмяСправочника].НайтиПоНаименованию(ТекстНаименования, ЛОЖЬ);
	
	Если НЕ ЗначениеЗаполнено(ИскомыйЭлемент) 
		И (метаданные.Справочники[ИмяСправочника].Иерархический
		И ИскомыйЭлемент.ЭтоГруппа) Тогда
		
		ИскомыйЭлемент = Неопределено
	КонецЕсли;
	
	Возврат ИскомыйЭлемент;
	
КонецФункции //НайтиНоменклатуруПоИмени

Функция   НетСегодняКурса() Экспорт
	
	Результат = ИСТИНА;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КурсыВалют.Курс
	|ИЗ РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ КурсыВалют.Период МЕЖДУ &НачалоДня И &КонецДня";
	
	дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	Запрос.УстановитьПараметр("КонецДня", конецдня(дата));
	Запрос.УстановитьПараметр("НачалоДня", началодня(дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции //нетсегоднякурса

Процедура ОбеспечитьСписокОтборов(СписокФормы, Знач ДопТип = "", Знач СвоеНаименованиеОбъектаОтбора = "") Экспорт
	
	СписокОтборов = ОбщийМодульПовтор.ПолучитьОтборыДоступа(СписокФормы.ОсновнаяТаблица, , ДопТип, СвоеНаименованиеОбъектаОтбора);
	Если НЕ СписокОтборов = Неопределено Тогда
		
		Попытка
			Для Каждого ЭлементСписка Из СписокОтборов Цикл
				
				ЭлементОтбора = СписокФормы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ЭлементСписка.Значение.РеквизитОбъекта);
				ЭлементОтбора.ВидСравнения     = ЭлементСписка.Значение.ВидСравненияКомпоновкиДанных;
				ЭлементОтбора.Использование    = ЭлементСписка.Значение.ОтборИспользуется;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.ПравоеЗначение   = ЭлементСписка.Значение.ЗначениеУсловия;
				
			КонецЦикла;
		Исключение
			Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка установки правила отбора!"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗначениеНаЯзыке(Знач Ссылка, Знач НаЯзыке, Знач ПолеЗначения = "Наименование", Знач Язык = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(НаЯзыке) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		
		РСМЗ = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
		РСМЗ.Активность = ИСТИНА;
		РСМЗ.НаЯзыке 	= НаЯзыке;
		РСМЗ.Поле 		= ПолеЗначения;
		РСМЗ.Язык 		= ?(Язык = Неопределено, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"), Язык);
		РСМЗ.ОбъектБазыДанных = Ссылка;
		
		Попытка 
			РСМЗ.Записать(ИСТИНА);
			
		Исключение 
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

Функция   ОбработатьБлокировку(Знач ОбъектДокумент = Неопределено, ФормаДокумента, Знач ПриСозданииФормы = ЛОЖЬ, Знач КодПроверкиДляБлокировкиПроведенных = "", Знач ДополнительноеУсловиеБлокировки = ИСТИНА) Экспорт
	
	БлокироватьПроведенныеДокументы = ИСТИНА;
	Результат = ЛОЖЬ;
	ОбъектДокументНеопределено = ОбъектДокумент = Неопределено;
	
	Если НЕ КодПроверкиДляБлокировкиПроведенных = ""
		И НЕ ОбъектДокументНеопределено 
		И ОбъектДокумент.Проведен Тогда
		
		Результат = ОбщийМодульСервисСервер.ПроверитьОтказДоступа(КодПроверкиДляБлокировкиПроведенных, ФормаДокумента, Результат, ОбъектДокумент);
		Если Результат Тогда
			БлокироватьПроведенныеДокументы = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		Если НЕ ОбъектДокументНеопределено
			И ТипЗнч(ОбъектДокумент.Ссылка) = Тип("ДокументСсылка.Инвентаризации") Тогда
			
			БлокироватьПроведенныеДокументы = ИСТИНА;
		Иначе
			БлокироватьПроведенныеДокументы = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("БлокироватьПроведенныеДокументы");
		КонецЕсли;	
	КонецЕсли;
	
	Результат = Результат И ДополнительноеУсловиеБлокировки;
	
	Если БлокироватьПроведенныеДокументы Тогда 		
		ЗАБЛОКИРОВАН = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЗАБЛОКИРОВАН") + " ";
		
		Если Результат
			ИЛИ ОбъектДокументНеопределено
			ИЛИ (ОбъектДокумент.Проведен И ДополнительноеУсловиеБлокировки) Тогда
			
			Если Найти(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН) = 0 Тогда
				ФормаДокумента.Заголовок = ЗАБЛОКИРОВАН + ФормаДокумента.Заголовок;
			КонецЕсли; 			
			
			ФормаДокумента.ТолькоПросмотр = ИСТИНА;
			
			//Для Каждого ЭлементФормы из ФормаДокумента.Элементы Цикл
			//	попытка
			//		ЭлементФормы.ТолькоПросмотр = ИСТИНА;
			//	исключение
			//	конецпопытки;
			//	
			//КонецЦикла;
			Результат = ИСТИНА;
			
			ФормаДокумента.ДокументЗаблокирован = ИСТИНА;
			
		ИначеЕсли НЕ ПриСозданииФормы тогда
			
			ФормаДокумента.Заголовок = стрзаменить(ФормаДокумента.Заголовок, ЗАБЛОКИРОВАН, "");	
			
			ФормаДокумента.ДокументЗаблокирован = ЛОЖЬ;
			
			ФормаДокумента.ТолькоПросмотр = ЛОЖЬ;
			//Для Каждого ЭлементФормы из ФормаДокумента.Элементы Цикл
			//	попытка
			//		ЭлементФормы.толькопросмотр = ЛОЖЬ;
			//	исключение
			//	конецпопытки;
			//	
			//КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;             	
	
	Возврат Результат;
	
КонецФункции

Функция   ОстатокТовара(Знач Склад = Неопределено, Знач Номенклатура, Знач ДатаОстатка, Знач ВернутьСтруктуру = ЛОЖЬ, ЭтоРасходТовара = ЛОЖЬ) Экспорт
	
	КвоОстаток 		= 0;
	СуммаОстаток 	= 0;	
	ЗначениеЗаполненоСклад = ЗначениеЗаполнено(Склад);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.КоличествоОстаток,
	|	ТоварыОстатки.СуммаОстаток
	|ИЗ РегистрНакопления.Товары.Остатки(
	|			&ДатаОстатка,
	|			Номенклатура = &Номенклатура ";
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам", ИСТИНА) Тогда
		
		
		Если ЭтоРасходТовара Тогда
			
			Если ЗначениеЗаполненоСклад Тогда
				Запрос.Текст = Запрос.Текст + " И (Склад = &Склад или Склад = &СкладПополнения) ) КАК ТоварыОстатки";
				Запрос.УстановитьПараметр("СкладПополнения", Склад.СкладПополнения);	
			Иначе
				Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
			КонецЕсли;
			
		Иначе
			Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполненоСклад, " И Склад = &Склад", "") + ") КАК ТоварыОстатки";
		КонецЕсли;
		
		
		Если ЗначениеЗаполненоСклад Тогда
			Запрос.УстановитьПараметр("Склад", Склад);
		КонецЕсли;
	Иначе
		Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КвоОстаток 	 = КвоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
			СуммаОстаток = СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;          
		
	КонецЕсли;
	
	Если ВернутьСтруктуру Тогда
		
		структурарезультат = Новый структура;
		структурарезультат.Вставить("Количество", КвоОстаток);
		структурарезультат.Вставить("Сумма", СуммаОстаток);
		
		Возврат структурарезультат;
		
	Иначе
		Возврат КвоОстаток;
	КонецЕсли;	
	
КонецФункции //ОстатокДенег

Процедура ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли() Экспорт	
	ОбщийМодульСерверПривилегия.ПерепровестиПриходныеИРасходныеДокументыНачинаяСДатыДляВосстановленияПоказателейВаловойПрибыли();
КонецПроцедуры 

Функция   ПечатьДнейРожденияКлиентов(ТабДок = Неопределено) Экспорт
	
	Дата  = ТекущаяДата();
	месяц = месяц(Дата);
	День  = день(Дата);
	Год   = Год(Дата);
	
	Если ТабДок = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Клиенты.Ссылка КАК Клиент
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ МЕСЯЦ(Клиенты.ДатаРождения) = &Месяц
		|	И ДЕНЬ(Клиенты.ДатаРождения) = &День";
		
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЕстьДниРождения = НЕ РезультатЗапроса.Пустой()  ;
		Если НЕ ЕстьДниРождения Тогда
			
			Дата  = конецДня(Дата) + 3600;
			месяц = месяц(Дата);
			День  = день(Дата);
			Год   = Год(Дата);
			Запрос.УстановитьПараметр("Месяц", Месяц);
			Запрос.УстановитьПараметр("День", День);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ЕстьДниРождения = НЕ РезультатЗапроса.Пустой();
			Если НЕ ЕстьДниРождения Тогда
				
				Дата  = конецДня(Дата) + 3600;
				месяц = месяц(Дата);
				День  = день(Дата);
				Год   = Год(Дата);
				Запрос.УстановитьПараметр("Месяц", Месяц);
				Запрос.УстановитьПараметр("День", День);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ЕстьДниРождения = НЕ РезультатЗапроса.Пустой();			
			КонецЕсли;
		КонецЕсли;
		
		Возврат ЕстьДниРождения;
		
	Иначе			
		ЕстьДниРождения = ЛОЖЬ;
		ОбщийМодульСервер.ДобавитьСобытиеЖурналаНаСервере(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отчет по дням рождения клиентов."), 2);
		
		ТабДок.Очистить();	
		
		ТабДок.Начатьавтогруппировкустрок();
		
		Макет = ПолучитьОбщийМакет("ПечатьДнейРожденияКлиентов");	
		Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Клиенты.Телефон + ВЫБОР
		|		КОГДА Клиенты.Телефон2 = """"
		|			ТОГДА """"
		|		ИНАЧЕ "", "" + Клиенты.Телефон2
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон3 = """"
		|			ТОГДА """"
		|		ИНАЧЕ "", "" + Клиенты.Телефон3
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон4 = """"
		|			ТОГДА """"
		|		ИНАЧЕ "", "" + Клиенты.Телефон4
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Клиенты.Телефон5 = """"
		|			ТОГДА """"
		|		ИНАЧЕ "", "" + Клиенты.Телефон5
		|	КОНЕЦ КАК Телефон,
		|	Клиенты.Адрес,
		|	Клиенты.ЭлектроннаяПочта,
		|	Клиенты.Регион,
		|	Клиенты.Ссылка КАК Клиент,
		|	Клиенты.Наименование,
		|	Клиенты.НаименованиеДляПечати,
		|	Клиенты.ДатаРождения,
		|	ДЕНЬ(Клиенты.ДатаРождения) КАК День,
		|	МЕСЯЦ(Клиенты.ДатаРождения) КАК Месяц,
		|	ГОД(Клиенты.ДатаРождения) КАК Год
		|ИЗ Справочник.Клиенты КАК Клиенты
		|ГДЕ МЕСЯЦ(Клиенты.ДатаРождения) = &Месяц
		|	И ДЕНЬ(Клиенты.ДатаРождения) = &День";
		
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЕстьДниРождения  = НЕ РезультатЗапроса.Пустой();
		Если ЕстьДниРождения Тогда
			
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ТабДок.Вывести(Шапка, 0);
			
			Строка = Макет.ПолучитьОбласть("С");
			
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
			Для Каждого строкарезультата из ТаблицаРезультат цикл
				строка.Параметры.Заполнить(строкарезультата);
				строка.Параметры.Год 	 = строкарезультата.Год;
				строка.Параметры.Возраст = Год - строкарезультата.Год;
				ТабДок.Вывести(строка, 1);
			КонецЦикла;
			
			ТабДок.Закончитьавтогруппировкустрок();				
		КонецЕсли;
		
		Дата  = КонецДня(Дата) + 3600;
		Месяц = Месяц(Дата);
		День  = день(Дата);
		Год   = Год(Дата);
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса .Пустой() Тогда
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ТабДок.Вывести(Шапка, 0);
			
			Строка = Макет.ПолучитьОбласть("С");
			
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
			Для Каждого строкарезультата из ТаблицаРезультат цикл
				строка.Параметры.Заполнить(строкарезультата);
				строка.Параметры.Год 	 = строкарезультата.Год;
				строка.Параметры.Возраст = Год - строкарезультата.Год;
				ТабДок.Вывести(строка, 1);
			КонецЦикла;
			
			ТабДок.Закончитьавтогруппировкустрок();
			
			ЕстьДниРождения = ИСТИНА;		
		КонецЕсли;
		
		Дата  = конецДня(Дата) + 3600;
		месяц = месяц(Дата);
		День  = день(Дата);
		Год   = Год(Дата);
		Запрос.УстановитьПараметр("Месяц", Месяц);
		Запрос.УстановитьПараметр("День", День);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса .Пустой() Тогда
			Шапка = Макет.ПолучитьОбласть("Ш");
			Шапка.Параметры.Дата = Дата;
			ТабДок.Вывести(Шапка, 0);
			
			Строка = Макет.ПолучитьОбласть("С");
			
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();		
			Для Каждого строкарезультата из ТаблицаРезультат цикл
				строка.Параметры.Заполнить(строкарезультата);
				строка.Параметры.Год 	 = строкарезультата.Год;
				строка.Параметры.Возраст = Год - строкарезультата.Год;
				ТабДок.Вывести(строка, 1);
			КонецЦикла;
			
			ТабДок.Закончитьавтогруппировкустрок();
			
			ЕстьДниРождения = ИСТИНА;		
		КонецЕсли;
		
		Если ЕстьДниРождения Тогда
			ТабДок.ОтображатьСетку  = ЛОЖЬ;
			ТабДок.Защита 			= ИСТИНА;
			ТабДок.ТолькоПросмотр 	= ИСТИНА;
			ТабДок.ОтображатьЗаголовки = ЛОЖЬ;  	
			
			Возврат ИСТИНА;
		Иначе
			Возврат ЛОЖЬ;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Процедура ПечатьНаСервереОтчетаРуководителю(Знач СтруктураОтчета, ТабДок, Знач НаЕмейл = ЛОЖЬ) Экспорт
	
	ТабДок.Очистить();
	
	Макет = отчеты.ОтчетРуководителю.ПолучитьМакет("Печать");	
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ТабДок.Вывести(ОбластьЗаголовок);
	
	Если НаЕмейл Тогда
		Шапка = Макет.ПолучитьОбласть("Ш2");	
	Иначе
		Шапка = Макет.ПолучитьОбласть("Шапка");	
	КонецЕсли;
	
	Шапка.Параметры.Заполнить(СтруктураОтчета);
	Шапка.Параметры.валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	ТабДок.Вывести(Шапка);	
	
	Если Константы.ДетализироватьОтчетРуководителю.Получить() Тогда //именно с констант!
		
		ВестиУчетПоСкладам = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам");
		
		//ПРОДАЖИ детально
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Продажи.Номенклатура,
		|	ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) КАК Склад,
		|	Продажи.Количество,
		|	Продажи.Сумма,
		|	ЕСТЬNULL(Продажи.Номенклатура.НоменклатурнаяГруппа, &ПустаяНоменклатурнаяГруппа) КАК НоменклатурнаяГруппа
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (&НетОтбораПоСкладу
		|			ИЛИ ЕСТЬNULL(Продажи.Регистратор.Склад, &ПустойСклад) = &Склад)
		|УПОРЯДОЧИТЬ ПО Продажи.Период";
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));
		Запрос.УстановитьПараметр("НетОтбораПоСкладу", НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") или не ЗначениеЗаполнено(СтруктураОтчета.ОтборПоСкладу));
		Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка"));
		Запрос.УстановитьПараметр("ПустойСклад", ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад"));
		Запрос.УстановитьПараметр("Склад", СтруктураОтчета.ОтборПоСкладу);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Шапка = Макет.ПолучитьОбласть("ШЗ");	
			ТабДок.Вывести(Шапка);	
			
			Продажи = РезультатЗапроса.Выгрузить();
			Продажи.Сортировать("Склад, НоменклатурнаяГруппа");
			
			СуммыПоСкладам = Новый ТаблицаЗначений;
			СуммыПоСкладам.Колонки.Добавить("Склад");
			СуммыПоСкладам.Колонки.Добавить("Количество");
			СуммыПоСкладам.Колонки.Добавить("Сумма");
			
			СуммыПоНГВРамкахСклада = Новый ТаблицаЗначений;
			СуммыПоНГВРамкахСклада.Колонки.Добавить("Склад");
			СуммыПоНГВРамкахСклада.Колонки.Добавить("НоменклатурнаяГруппа");
			СуммыПоНГВРамкахСклада.Колонки.Добавить("Количество");
			СуммыПоНГВРамкахСклада.Колонки.Добавить("Сумма");
			
			ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп");
			
			ТекущийСклад 		= ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			СуммаПоСкладу 		= 0;
			КоличествоПоСкладу 	= 0;
			МассивСкладов 		= Новый Массив;
			МассивСкладов.Добавить(ТекущийСклад);
			
			ТекущаяНГ 		= ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
			СуммаПоНГ 		= 0;
			КоличествоПоНГ 	= 0;
			МассивНг 		= Новый Массив;
			МассивНг.Добавить(ТекущаяНГ);
			
			Для Каждого Продажа Из Продажи Цикл
				Если ВестиУчетПоСкладам
					И НЕ ТекущийСклад = Продажа.Склад Тогда
					
					Если НЕ ТекущийСклад = Неопределено Тогда
						СтрокаСуммы = СуммыПоСкладам.Добавить();
						СтрокаСуммы.Склад 		= ТекущийСклад       ;
						СтрокаСуммы.Количество 	= КоличествоПоСкладу;
						СтрокаСуммы.Сумма 		= СуммаПоСкладу;
						КоличествоПоСкладу 		= 0;
						СуммаПоСкладу 			= 0;
						
						СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
						СтрокаСуммы.Склад 				 = ТекущийСклад       ;
						СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
						СтрокаСуммы.Количество 			 = КоличествоПоНГ;
						СтрокаСуммы.Сумма 				 = СуммаПоНГ;
						СуммаПоНГ 		= 0;
						КоличествоПоНГ  = 0;
					КонецЕсли;
					ТекущийСклад = Продажа.Склад;
					МассивСкладов.Добавить(ТекущийСклад);
				КонецЕсли;			
				
				Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп
					И НЕ ТекущаяНГ = Продажа.НоменклатурнаяГруппа Тогда
					
					Если НЕ ТекущаяНГ = Неопределено Тогда
						СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
						СтрокаСуммы.Склад 				 = ТекущийСклад       ;
						СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
						СтрокаСуммы.Количество 			 = КоличествоПоНГ;
						СтрокаСуммы.Сумма 				 = СуммаПоНГ;
						СуммаПоНГ 		= 0;
						КоличествоПоНГ  = 0;
					КонецЕсли;
					ТекущаяНГ = Продажа.НоменклатурнаяГруппа;
					МассивНГ.Добавить(ТекущаяНГ);
				КонецЕсли;
				
				СуммаПоНГ  			= СуммаПоНГ + Продажа.Сумма;
				КоличествоПоНГ 		= КоличествоПоНГ + Продажа.количество;
				СуммаПоСкладу  		= СуммаПоСкладу + Продажа.Сумма;
				КоличествоПоСкладу 	= КоличествоПоСкладу + Продажа.количество;
			КонецЦикла;
			
			Если ВестиУчетПоСкладам
				И (не КоличествоПоСкладу = 0 или не СуммаПоСкладу = 0) Тогда
				
				СтрокаСуммы = СуммыПоСкладам.Добавить();
				СтрокаСуммы.Склад 		= ТекущийСклад       ;
				СтрокаСуммы.Количество  = КоличествоПоСкладу;
				СтрокаСуммы.Сумма 		= СуммаПоСкладу;                   	
			КонецЕсли;
			
			Если ВестиУчетНоменклатурыВРазрезеНоменклатурныхГрупп 
				И (не КоличествоПоНГ = 0 или не СуммаПоНГ = 0) Тогда
				
				СтрокаСуммы = СуммыПоНГВРамкахСклада.Добавить();
				СтрокаСуммы.Склад 				 = ТекущийСклад       ;
				СтрокаСуммы.НоменклатурнаяГРуппа = ТекущаяНГ;
				СтрокаСуммы.Количество 			 = КоличествоПоНГ;
				СтрокаСуммы.Сумма 				 = СуммаПоНГ;	
			КонецЕсли;
			
			Для Каждого СкладПродажи Из МассивСкладов Цикл
				
				Если ЗначениеЗаполнено(СкладПродажи) Тогда
					СтрокаСуммы = СуммыПоСкладам.Найти(СкладПродажи, "Склад");
					Если НЕ СтрокаСуммы = Неопределено Тогда
						ОбластьПечати = Макет.ПолучитьОбласть("ГС");
						ОбластьПечати.Параметры.Склад = СкладПродажи;
						ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
						ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;
						ТабДок.Вывести(ОбластьПечати);	
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого НГПродажи Из МассивНГ Цикл
					
					ПараметрыОтбора = Новый Структура("Склад", СкладПродажи);
					ПараметрыОтбора.Вставить("НоменклатурнаяГруппа", НГПродажи);
					
					Если ЗначениеЗаполнено(НГПродажи) Тогда
						СтрокиСуммы = СуммыПоНГВРамкахСклада.НайтиСтроки(ПараметрыОтбора);
						Если НЕ СтрокиСуммы.Количество() = 0 Тогда
							СтрокаСуммы = СтрокиСуммы[0];
							ОбластьПечати = Макет.ПолучитьОбласть("ГНГ");
							ОбластьПечати.Параметры.НоменклатурнаяГруппа = НГПродажи;
							ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
							ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;
							ТабДок.Вывести(ОбластьПечати);	
						КонецЕсли; 	
					КонецЕсли;
					
					СтрокиСуммы = Продажи.НайтиСтроки(ПараметрыОтбора);
					Если НЕ СтрокиСуммы.Количество() = 0 Тогда
						Для Каждого СтрокаСуммы Из СтрокиСуммы Цикл
							ОбластьПечати = Макет.ПолучитьОбласть("С");
							ОбластьПечати.Параметры.Номенклатура = СтрокаСуммы.Номенклатура;
							ОбластьПечати.Параметры.Количество = СтрокаСуммы.Количество;
							ОбластьПечати.Параметры.Сумма = СтрокаСуммы.Сумма;	
							ТабДок.Вывести(ОбластьПечати);	
						КонецЦикла;
					КонецЕсли; 	
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПлановыхПоказателейПродаж") Тогда
			
			//ТЕКУЩЕЕ исполнение плана продаж
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПланыПродаж.Ссылка
			|ИЗ Документ.ПланыПродаж КАК ПланыПродаж
			|ГДЕ (ПланыПродаж.ДатаОкончания >= &ДатаОкончания
			|	ИЛИ ПланыПродаж.ДатаНачала <= &ДатаНачала)
			|	И ПланыПродаж.ПланНеАктуален = ЛОЖЬ
			|УПОРЯДОЧИТЬ ПО ПланыПродаж.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Регистратор   = ВыборкаДетальныеЗаписи.Ссылка;
					
					СформироватьПланФактныйОтчетНаСервере(Регистратор, ТабДок);					
					
					ТабДок.ФиксацияСверху = 0;
					ТабДок.ФиксацияСлева  = 0;
				КонецЦикла;				
				
			КонецЕсли;			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ СУММА(ДеньгиОбороты.СуммаПриход) КАК СуммаПриход,
			|	СУММА(ДеньгиОбороты.СуммаРасход) КАК СуммаРасход,
			|	ДеньгиОбороты.ХранилищеДенег
			|ИЗ РегистрНакопления.Деньги.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ДеньгиОбороты
			|СГРУППИРОВАТЬ ПО ДеньгиОбороты.ХранилищеДенег";
			
			Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураОтчета.ДатаНачала));
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ОбластьПечати = Макет.ПолучитьОбласть("ШД");
				ТабДок.Вывести(ОбластьПечати);	
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОбластьПечати = Макет.ПолучитьОбласть("СД");
					ОбластьПечати.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					ТабДок.Вывести(ОбластьПечати);	
				КонецЦикла;
			КонецЕсли;		
		КонецЕсли;		
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Склад
			|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОкончания, ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Склад";
			
			Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураОтчета.ДатаОкончания));
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ОбластьПечати = Макет.ПолучитьОбласть("ШС");
				ТабДок.Вывести(ОбластьПечати);	
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОбластьПечати = Макет.ПолучитьОбласть("СС");
					ОбластьПечати.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					ТабДок.Вывести(ОбластьПечати);	
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПечатьТоварногоЧека(Знач Документ, Знач ЭтоВозврат = ЛОЖЬ, Знач Клиент = Неопределено, Знач ИмяТаблицы = "Товары", Знач ВидОплаты = Неопределено, Знач ТаблицаОплаты = "", Знач Кассир = Неопределено) Экспорт
	
	Дата = Документ.Дата;
	Организация = Документ.Организация ;
	Если ВидОплаты = Неопределено Тогда
		ВидОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличные");
	КонецЕсли;
	Если Кассир = Неопределено Тогда
		Кассир = Документ.Сотрудник;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		ЯзыкДокумента = Клиент.ЯзыкДокументов;
		Если НЕ ЗначениеЗаполнено(ЯзыкДокумента) Тогда
			ЯзыкДокумента = Неопределено;
		КонецЕсли;
	Иначе
		ЯзыкДокумента = Неопределено;
	КонецЕсли;
	
	Текст = "";
	
	СтрогоеИмяНефискальногоПринтераЧеков = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СтрогоеИмяНефискальногоПринтераЧеков");
	
	Если НЕ ПустаяСтрока(СтрогоеИмяНефискальногоПринтераЧеков) Тогда
		
		ТабличныйДокументЧек = Новый ТабличныйДокумент;
		ТабличныйДокументЧек.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧЕК" + СокрЛП(ИмяКомпьютера());
		ТабличныйДокументЧек.КлючПараметровПечати = ТабличныйДокументЧек.ИмяПараметровПечати;
		
		МакетЧека = ПолучитьОбщийМакет("Чек");
		МакетЧека.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(Клиент);
		
		Если ЭтоВозврат Тогда
			ОблЗаголовок = МакетЧека.ПолучитьОбласть("ОблЗаголовокВозврат");
			ОблЗаголовок.Параметры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Чек ВОЗВРАТА", ЯзыкДокумента);
			ОблПодвал = МакетЧека.ПолучитьОбласть("ОблПодвалВозврат");			
			
		Иначе
			ОблЗаголовок = МакетЧека.ПолучитьОбласть("ОблЗаголовок");
			ОблЗаголовок.Параметры.Заголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ЧЕК", ЯзыкДокумента);
			Если ВидОплаты = Перечисления.ФормыОплаты.Наличные Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НАЛИЧНЫМИ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ПЛАТ.КАРТОЙ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Кредит Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КРЕДИТОМ", ЯзыкДокумента);
			ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
				ОблЗаголовок.Параметры.ФормаОплаты = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СЕРТИФИКАТОМ", ЯзыкДокумента);
			КонецЕсли;
			ОблПодвал = МакетЧека.ПолучитьОбласть("ОблПодвал");
			
		КонецЕсли;
		
		ОблЗаголовок.Параметры.Подразделение = ОбщийМодульСервер.ПолучитьПодразделениеСотрудника(Кассир, Дата);
		ОблЗаголовок.Параметры.Организация 	 = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокумента);
		ОблЗаголовок.Параметры.Номер 		 = Документ.Номер;
		ОблЗаголовок.Параметры.Контрагент 	 = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Клиент, ЯзыкДокумента);
		ОблЗаголовок.Параметры.Дата 		 = Формат(Дата, "ДФ=dd.MM.yyyy");
		ОблЗаголовок.Параметры.Время 		 = Формат(Дата, "ДФ=ЧЧ:мм");
		ТабличныйДокументЧек.Вывести(ОблЗаголовок);
		
		ОблШапка = МакетЧека.ПолучитьОбласть("ОблШапка");
		ТабличныйДокументЧек.Вывести(ОблШапка);
		
		ОблБезСкидкиИтого = МакетЧека.ПолучитьОбласть("ОблБезСкидкиИтого");
		ОблСкидка 	= МакетЧека.ПолучитьОбласть("ОблСкидка");		
		ОблСтрока 	= МакетЧека.ПолучитьОбласть("ОблСтрока");
		Сумма 	  	= 0;
		СуммаСкидки = 0;
		
		Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда			
			Товары 	= Документ[ИмяТаблицы];
			
			Для Каждого СтрокаТЧ ИЗ Товары Цикл
				
				ОблСтрока.Параметры.Заполнить(СтрокаТЧ);
				Сумма = Сумма + СтрокаТЧ.Сумма;
				СуммаСкидки = СуммаСкидки + (СтрокаТЧ.Сумма - СтрокаТЧ.СуммаБезСкидки);
				
				ТабличныйДокументЧек.Вывести(ОблСтрока);
			КонецЦикла;
			
		Иначе
			ОблСтрока.Параметры.Заполнить(Документ);
			ОблСтрока.Параметры.Сумма 		= Документ.ТовараНаСумму;
			ОблСтрока.Параметры.Количество  = Документ.ТовараВКоличестве;			
			СуммаСкидки = Документ.ТовараНаСумму - Документ.СуммаБезСкидки;
			Сумма 		= Документ.ТовараНаСумму;
			
			ТабличныйДокументЧек.Вывести(ОблСтрока);			
		КонецЕсли;		
		
		Если СуммаСкидки = 0 Тогда
			ОблБезСкидкиИтого.Параметры.СуммаБезСкидки = Сумма;
			ТабличныйДокументЧек.Вывести(ОблБезСкидкиИтого);
			ОблСкидка.Параметры.СуммаСкидки = СуммаСкидки;
			ТабличныйДокументЧек.Вывести(ОблСкидка);
		КонецЕсли;
		
		ОблПодвал.Параметры.Сумма 	  = Сумма;
		ОблПодвал.Параметры.Сотрудник = Кассир;
		ОблПодвал.Параметры.Должность = ?(ЗначениеЗаполнено(Кассир), Кассир.Должность, "");
		
		Если НЕ ЭтоВозврат Тогда
			ОблПодвал.Параметры.ИтогоСтрока = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Сумма, Документ.Валюта, ЯзыкДокумента);
		КонецЕсли;
		ТабличныйДокументЧек.Вывести(ОблПодвал);
		ТабличныйДокументЧек.ИмяПринтера 		  = СтрогоеИмяНефискальногоПринтераЧеков;
		ТабличныйДокументЧек.КлючПараметровПечати = "ЧЕК";
		ТабличныйДокументЧек.ИмяПараметровПечати = ТабличныйДокументЧек.КлючПараметровПечати;
		ТабличныйДокументЧек.АвтоМасштаб 		  = ИСТИНА;
		
		Возврат ТабличныйДокументЧек;
		//ТабличныйДокументЧек.Напечатать();
		
	Иначе		
		Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ТОВАРНЫЙ ЧЕК", ЯзыкДокумента) + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("от", ЯзыкДокумента) + " " + Формат(Дата, "ДЛФ=ДД") + Символы.ПС + "--------------------------------" + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Организация", ЯзыкДокумента) + ": " + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Организация, ЯзыкДокумента) + Символы.ПС +
		ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид операции", ЯзыкДокумента) + ": " + ?(ЭтоВозврат, ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Возврат", ЯзыкДокумента), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Продажа", ЯзыкДокумента)) + Символы.ПС;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			Текст = Текст + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент", ЯзыкДокумента) + ": " + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Клиент, ЯзыкДокумента) + Символы.ПС;
		КонецЕсли;
		
		НДС 	= 0;
		Сдача 	= 0;
		
		Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
			
			Товары 	= Документ[ИмяТаблицы];
			Текст 	= Текст + "--------------------------------" + Символы.ПС;
			
			Для Каждого СтрокаТЧ ИЗ Товары Цикл
				
				СтрокаТовара = "" + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(СтрокаТЧ.Номенклатура, ЯзыкДокумента, Клиент) + Символы.ПС + СтрокаТЧ.Количество + " х " + СтрокаТЧ.Цена + " = " + СтрокаТЧ.Сумма + Символы.ПС;
				Текст = Текст + СтрокаТовара;
				
				СтавкаНДС 	= ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.СтавкаНДС), СтрокаТЧ.Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
				СуммаБезНДС = СтрокаТЧ.Сумма - СтрокаТЧ.Сумма * (СтавкаНДС / 100);
				НДС = НДС + СтрокаТЧ.Сумма - СуммаБезНДС;
				
			КонецЦикла;
			
			ТовараНаСумму 	= Товары.Итог("Сумма");
			Если ЭтоВозврат тогда
				СуммаСкидки = 0;
			Иначе
				СуммаСкидки = ТовараНаСумму - Товары.Итог("СуммаБезСкидки");	
			КонецЕсли;
			
		Иначе
			ТовараНаСумму 	= Документ.ТовараНаСумму;
			СуммаСкидки 	= ТовараНаСумму - Документ.СуммаБезСкидки;		
			СтрокаТовара 	= "" + ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Документ.Номенклатура, ЯзыкДокумента, Клиент) + Символы.ПС + Документ.ТовараВКоличестве + " х " + Документ.Цена + " = " + ТовараНаСумму + Символы.ПС;
			Текст = Текст + СтрокаТовара;
			
			СтавкаНДС 	= ?(ЗначениеЗаполнено(Документ.Номенклатура.СтавкаНДС), Документ.Номенклатура.СтавкаНДС, Организация.СтавкаНДС);
			СуммаБезНДС = Документ.Сумма - Документ.Сумма * (СтавкаНДС / 100);
			НДС = НДС + Документ.Сумма - СуммаБезНДС;
			
			Если ЭтоВозврат Тогда
				СуммаОплаты = Документ.ВыбылоДенег;	
			Иначе
				
				Если ПустаяСтрока(ТаблицаОплаты) Тогда
					СуммаОплаты = Документ.ПоступилоДенег;
				Иначе
					СуммаОплаты = Документ[ТаблицаОплаты].Итог("Сумма");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Текст = Текст + "--------------------------------" + Символы.ПС;
		
		Текст = Текст + "         " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ИТОГ", ЯзыкДокумента) + " = " + ТовараНаСумму + Символы.ПС +
		"       " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Скидка", ЯзыкДокумента) + " = " + СуммаСкидки + Символы.ПС +
		"    " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма НДС", ЯзыкДокумента) + " = " + НДС + Символы.ПС;
		
		Текст = Текст + "--------------------------------" + Символы.ПС;
		
		Если ВидОплаты = Перечисления.ФормыОплаты.Наличные Тогда
			Текст = Текст + "    " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("НАЛИЧНЫМИ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			Текст = Текст + "  " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ПЛАТ.КАРТОЙ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Кредит Тогда
			Текст = Текст + "     " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("КРЕДИТОМ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;
		ИначеЕсли ВидОплаты = Перечисления.ФормыОплаты.Сертификат Тогда
			Текст = Текст + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СЕРТИФИКАТОМ", ЯзыкДокумента) + " = " + СуммаОплаты + Символы.ПС;	
		КонецЕсли;
		
		Текст = Текст + "--------------------------------" + Символы.ПС;	
		Текст = Текст + "        " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СДАЧА", ЯзыкДокумента) + " = " + Сдача + Символы.ПС;
		
		Текст = Текст + "--------------------------------" + Символы.ПС;
		Текст = Текст + "       " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Кассир", ЯзыкДокумента) + ":  " + Кассир;	
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция   ПлатнаяВерсия() Экспорт
	
	Результат = Найти(метаданные.Версия, "F") = 0;
	ОбщийМодульСервисСервер.УстановитьЗначениеКонстанты("КонфигурацияВРаботе", Результат);
	
	Возврат Результат;
	
КонецФункции //ПлатнаяВерсия

Функция   ПодобратьДоговор(Знач Организация, Знач КлиентПоставщик, Знач Дата, Знач ВидЦен = Неопределено) Экспорт
	
	Результат = ПредопределенноеЗначение("Справочник.Договора.ПустаяСсылка");
	
	Если НЕ параметрысеанса.ВестиУчетОтдельныхДоговоровСКонтрагентамиПС тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Договора.Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И (&НетОтбораПоОрганизации
		|			ИЛИ Договора.Организация = &Организация)
		|	И (&НетОтбораПоКонтрагенту
		|			ИЛИ Договора.КлиентПоставщик = &КлиентПоставщик)
		|	И (Договора.ДатаОкончания = &ПустаяДата
		|			ИЛИ Договора.ДатаОкончания > &Дата)
		|	И (&НетОтбораПоВидуЦен
		|			ИЛИ Договора.ВидЦен = &ВидЦен)
		|УПОРЯДОЧИТЬ ПО Договора.ДатаЗаключения,
		|	Договора.ДатаОкончания УБЫВ";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("НетОтбораПоКонтрагенту", НЕ ЗначениеЗаполнено(КлиентПоставщик));
		Запрос.УстановитьПараметр("НетОтбораПоОрганизации", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС") И НЕ ЗначениеЗаполнено(Организация));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НетОтбораПоВидуЦен", НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") И НЕ ЗначениеЗаполнено(ВидЦен));
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = ВыборкаДетальныеЗаписи.ссылка;		
			КонецЦикла;
			
		ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДоговорДолженБытьВыбранОбязательноИначеПрограммаВыберетДоговорПоУмолчанию") Тогда
			
			Результат = ОбщийМодульСерверПривилегия.СоздатьДоговор(Организация, КлиентПоставщик, Дата, ВидЦен);
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПодобратьДоговор

Функция   ПоКурсу(Знач Сумма, Знач Валюта = Неопределено, Знач ИзВалюты = Неопределено, Знач НаДату = Неопределено, Знач ОпределенныйКурс = 0) Экспорт
	
	Если НЕ ПараметрыСеанса.ВестиУчетВалютВСеансе 
		ИЛИ Валюта = ИзВалюты тогда
		
		Возврат Сумма;
		
	Иначе
		
		Если НаДату = Неопределено Тогда
			НаДату = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		ОсновнаяВалюта = Справочники.Валюты.ОсновнаяВалюта ;
		
		ЗначениеЗаполненоИзВалюты 	= ЗначениеЗаполнено(ИзВалюты) и НЕ извалюты = ОсновнаяВалюта;
		ЗначениеЗаполненоВалюта 	= ЗначениеЗаполнено(Валюта) и НЕ валюта = ОсновнаяВалюта;
		
		Если ЗначениеЗаполненоВалюта
			И ЗначениеЗаполненоИзВалюты Тогда
			
			Возврат (Сумма / ?(ОпределенныйКурс = 0, ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, НаДату), ОпределенныйКурс)) * ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату);
			
		ИначеЕсли ЗначениеЗаполненоВалюта Тогда //к базовой
			Возврат (Сумма / ?(ОпределенныйКурс = 0, ОбщийМодульПовтор.ПолучитьТекущийКурс(Валюта, НаДату), ОпределенныйКурс));
			
		ИначеЕсли ЗначениеЗаполненоИзВалюты Тогда //из базовой			
			Возврат (Сумма * ?(ОпределенныйКурс = 0, ОбщийМодульПовтор.ПолучитьТекущийКурс(ИзВалюты, НаДату), ОпределенныйКурс));
			
		Иначе //нет валют
			Возврат Сумма;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции //ПоКурсу

Функция   ПолучитьВерсиюКонфигурации() Экспорт    	
	Возврат метаданные.Версия;	
КонецФункции //ПолучитьВерсиюКонфигурации

Функция   ПолучитьДвиженияТовара(Знач Номенклатура, Знач ДатаНачала = '00010101', Знач ДатаОкончания = '00010101') Экспорт
	
	Если ДатаОкончания = '00010101' Тогда
		ДатаОкончания = КонецДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Движения = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(ТоварыОбороты.КоличествоОборот, 0) КАК КоличествоОборот
	|ИЗ РегистрНакопления.Товары.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ТоварыОбороты
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ПродажиОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Движения = Движения + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат Движения;
	
КонецФункции //ПолучитьДвиженияТовара(Номенклатура)

Функция   ПолучитьДолгДоговора(Знач Договор, Знач Дата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда		
		Долг = 0;
		
	Иначе		
		КлиентПоставщик = Договор.КлиентПоставщик;
		
		Запрос = Новый Запрос;
		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
			
		Иначе
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(
			|			&ДатаОстатка,
			|			Договор = &Договор) КАК РасчетыОстатки";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		Запрос.УстановитьПараметр("Договор", Договор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
			
		КонецЕсли;        			
	КонецЕсли;   	
	
	Возврат Долг;
	
КонецФункции //ПоказатьДолгДог

Функция   ПолучитьДолгКлиентаПоставщика(Знач КлиентПоставщик, Знач Дата, Знач Договор = Неопределено) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(КлиентПоставщик) 
		ИЛИ КлиентПоставщик.Предопределенный тогда
		
		Долг = 0;
		
	Иначе
		
		Запрос = Новый Запрос;
		Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
			
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, Поставщик = &КлиентПоставщик %%1) КАК РасчетыСПоставщикамиОстатки";
			
		Иначе
			Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
				Возврат 0;
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, Клиент = &КлиентПоставщик %%1) КАК РасчетыОстатки";
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
			И ЗначениеЗаполнено(Договор) Тогда
			
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И Договор = &Договор ");
			Запрос.УстановитьПараметр("Договор", Договор);
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", Дата);
		Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Долг = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла;
			
		КонецЕсли; 		
	КонецЕсли;   	
	
	Возврат Долг;
	
КонецФункции //ПоказатьДолгКлиентаПоставщика	

Функция   ПолучитьДолгКлиентаПоставщикаСОтсрочкой(Знач КлиентПоставщик, Знач Дата, Знач Договор = Неопределено) Экспорт	
	
	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
		Долг = ПолучитьДолгКлиентаПоставщика(КлиентПоставщик, Дата, Договор);
		
	Иначе
		Если НЕ ЗначениеЗаполнено(КлиентПоставщик) 
			ИЛИ КлиентПоставщик.Предопределенный Тогда
			
			Долг = 0;			
		Иначе
			
			Запрос = Новый Запрос;
			Если ТипЗнч(КлиентПоставщик) = Тип("СправочникСсылка.Поставщики") Тогда
				
				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
					Возврат 0;
				КонецЕсли;
				
				Запрос.Текст = "ВЫБРАТЬ -РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой.Остатки(&ДатаОстатка, Поставщик = &КлиентПоставщик %%1) КАК РасчетыСПоставщикамиОстатки";
				
			Иначе
				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
					Возврат 0;
				КонецЕсли;
				
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСОтсрочкой.Остатки(&ДатаОстатка, Клиент = &КлиентПоставщик %%1) КАК РасчетыОстатки";
				
			КонецЕсли;
			
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетОтдельныхДоговоровСКонтрагентамиПС")
				И ЗначениеЗаполнено(Договор) Тогда
				
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", " И Договор = &Договор ");
				Запрос.УстановитьПараметр("Договор", Договор);
			Иначе
				Запрос.Текст = стрзаменить(Запрос.Текст, "%%1", "");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаОстатка", Дата);
			Запрос.УстановитьПараметр("КлиентПоставщик", КлиентПоставщик);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Долг = 0;
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Долг = Долг + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЦикла;
				
			КонецЕсли; 		
		КонецЕсли;   		
	КонецЕсли;
	
	Возврат Долг;
	
КонецФункции //ПоказатьДолгКлиентаПоставщика	

Функция   ПолучитьЗначениеКонстанты(Знач ИмяКонстанты) Экспорт	
	Возврат Константы[ИмяКонстанты].получить();	
КонецФункции //ПолучитьЗначениеНастройкиИлиКонстанты

Функция   ПолучитьЗначениеПоУмолчаниюПоляДополнительнойИнформации(Знач ВидИнформации) Экспорт	
	Возврат ВидИнформации.ЗначениеПоУмолчанию;	
КонецФункции 

Функция   ПолучитьЗначениеПраметраСеанса(Знач ИмяПараметра) Экспорт  	
	
	Если ИмяПараметра = "НеМожетМенятьЦены" Тогда
		Ответ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002300", , , );
		Если НЕ Ответ Тогда
			Возврат ПараметрыСеанса[ИмяПараметра];	
		КонецЕсли;
		
	Иначе
		Возврат ПараметрыСеанса[ИмяПараметра];	
	КонецЕсли;	
	
КонецФункции //ПолучитьЗначениеПраметраСеанса

Функция   ПолучитьЗначениеРеквизита(Знач ЭлементСРеквизитом, Знач ИмяРеквизита = "Наименование") Экспорт
	
	Если ЗначениеЗаполнено(ЭлементСРеквизитом) Тогда
		Возврат ЭлементСРеквизитом[ИмяРеквизита];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьКоличествоЗакупокПоставщикаЗаПериод(Знач Поставщик, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.КоличествоОборот ИЗ РегистрНакопления.Закупки.Обороты(&ДатаНачала, &ДатаОкончания, , Поставщик = &Поставщик) КАК ЗакупкиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	
	Количество = 0;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда 		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции 

Функция   ПолучитьКоличествоПоУмолчанию(Знач Номенклатура, Знач ИзАналога = ЛОЖЬ) Экспорт
	
	Количество = 0;
	
	Если ИзАналога
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьМеханизмАналоговДляНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ГруппыАналоговТовары.Количество
		|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
		|ГДЕ ГруппыАналоговТовары.Номенклатура = &Номенклатура
		|УПОРЯДОЧИТЬ ПО ГруппыАналоговТовары.Ссылка.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Количество = ВыборкаДетальныеЗаписи.Количество;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Количество = 0 Тогда
		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РегулироватьКоличествоНоменклатурыПоУмолчаниюДляУпаковок")
			ИЛИ ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) Тогда
			
			Количество = 1;
		Иначе
			Количество = ?(Номенклатура.КоличествоПоУмолчанию = 0, 1, Номенклатура.КоличествоПоУмолчанию);
		КонецЕсли;    	
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции //ПолучитьКоличествоПоУмолчанию

Функция   ПолучитьКоличествоПродажЗаПериод(Знач Номенклатура, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ПродажиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Количество = 0;
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции //ПолучитьКоличествоПродажЗаПериод

Функция   ПолучитьКоличествоПродажКлиентаЗаПериод(Знач Клиент, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = '00010101000000' ;
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = КонецГода(ОбщийМодульСервисСервер.ПользователяТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Клиент = &Клиент) КАК ПродажиОбороты ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Количество = 0;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОборот;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции //ПолучитьКоличествоПродажКлиентаЗаПериод

Функция   ПолучитьКонтрагентаПоШтрихКоду(Знач ДанныеШтрикода, Знач ЭтоТочноКлиент = ЛОЖЬ, Знач ЭтоТочноПоставщик = ЛОЖЬ, Знач ЭтоОрганизация = ЛОЖЬ, Знач ЭтоПозиция = ЛОЖЬ) Экспорт
	
	Контрагент = Неопределено;
	
	Если ТипЗнч(ДанныеШтрикода) = Тип("Строка") Тогда
		ШтрихКод = ДанныеШтрикода;	
	Иначе	
		ШтрихКод = ДанныеШтрикода.ШтрихКод;
	КонецЕсли;
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьВШтрихКодеТолькоЛатинскиеСимволы") Тогда
		ШтрихКод = ПодсистемаИЭИмпортЭкспортФС.ПеревестиСтрокуВЛатинскиеСимволы(ШтрихКод, ЛОЖЬ, ИСТИНА);
	КонецЕсли;
	
	Если ЭтоПозиция Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ПозицииДляОказанияУслугЗаВремяНомера.Ссылка
		|ИЗ Справочник.ПозицииДляОказанияУслугЗаВремяНомера КАК ПозицииДляОказанияУслугЗаВремяНомера
		|ГДЕ (ПозицииДляОказанияУслугЗаВремяНомера.ОсновнойШтрихКод = &ОсновнойШтрихКод
		|			ИЛИ ПозицииДляОказанияУслугЗаВремяНомера.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО ПозицииДляОказанияУслугЗаВремяНомера.ПометкаУдаления"	;
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
		Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭтоОрганизация Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Организации.Ссылка
		|ИЗ Справочник.Организации КАК Организации
		|ГДЕ (Организации.ОсновнойШтрихКод = &ОсновнойШтрихКод
		|			ИЛИ Организации.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
		|УПОРЯДОЧИТЬ ПО Организации.ПометкаУдаления"	;
		Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
		Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.ссылка;
		КонецЕсли;
		
	Иначе
		
		Если ЭтоТочноКлиент
			ИЛИ НЕ ЭтоТочноПоставщик Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
			|ИЗ Справочник.Клиенты КАК Клиенты
			|ГДЕ (Клиенты.ОсновнойШтрихКод = &ОсновнойШтрихКод
			|			ИЛИ Клиенты.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Клиенты.ПометкаУдаления"	;
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоТочноПоставщик
			ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Поставщики.Ссылка
			|ИЗ Справочник.Поставщики КАК Поставщики
			|ГДЕ (Поставщики.ОсновнойШтрихКод = &ОсновнойШтрихКод
			|			ИЛИ Поставщики.ОсновнойШтрихКод = &ОсновнойШтрихКодВРЕГ)
			|УПОРЯДОЧИТЬ ПО Поставщики.ПометкаУдаления"	;
			Запрос.УстановитьПараметр("ОсновнойШтрихКод", нрег(ШтрихКод));
			Запрос.УстановитьПараметр("ОсновнойШтрихКодВРЕГ", врег(ШтрихКод));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.ссылка;
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции 

Функция   ПолучитьЛьготнуюЦену(Знач Номенклатура, Знач Количество = -1, Знач Цена, Знач ВидЦен = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже") Тогда
		Если ЗначениеЗаполнено(ВидЦен)
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			коэф = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;
		Иначе
			коэф = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");	
		КонецЕсли;
		
		Если количество = -1 Тогда //выясняем цену без планки			
			возврат цена * коэф;
		Иначе
			планка = Номенклатура.ПланкаКоличестваДляЛьготнойЦены;
			
			Если количество >= Планка Тогда
				возврат цена * коэф;
			Иначе
				возврат Цена;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		возврат цена;
	КонецЕсли;
	
КонецФункции //ПолучитьЛьготнуюЦену

Функция   ПолучитьОбъемПрибылиЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено) Экспорт
	
	Сумма  = 0;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И НЕ сотрудник.Склады.количество() = 0 Тогда
		
		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР
		|		КОГДА ВаловаяПрибыль.ВидДвижения = &Приход
		|			ТОГДА ВаловаяПрибыль.Сумма
		|		Иначе -ВаловаяПрибыль.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
		|ГДЕ ВаловаяПрибыль.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ВаловаяПрибыль.Склад В(&Склады)";
		
		Запрос.УстановитьПараметр("Склады", Склады);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		
	Иначе	                		
		Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход - ВаловаяПрибыльОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ВаловаяПрибыльОбороты";		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", конецдня(ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция   ПолучитьОбъемРеализацииЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено, Знач ЛичнаяРеализация = ИСТИНА) Экспорт
	
	Сумма  = 0;	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ЛичнаяРеализация тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПродажиСотрудников.Сумма КАК Сумма
		|ИЗ РегистрНакопления.ПродажиСотрудников КАК ПродажиСотрудников
		|ГДЕ ПродажиСотрудников.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиСотрудников.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
	ИначеЕсли ЗначениеЗаполнено(Сотрудник)
		И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам")
		И НЕ сотрудник.Склады.количество() = 0 Тогда
		
		склады = сотрудник.Склады.ВыгрузитьКолонку("Склад");
		
		Запрос.Текст = "ВЫБРАТЬ Продажи.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Регистратор.Склад В(&Склады)
		|	И Продажи.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		Запрос.УстановитьПараметр("Склады", Склады);
		
	Иначе	    		
		Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаПриход - ПродажиОбороты.СуммаРасход КАК Сумма
		|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиОбороты";   	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", конецдня(ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция   ПолучитьОсновноеИзображениеОбъекта(Знач СвязанныйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Изображения.Ссылка
	|ИЗ Справочник.Изображения КАК Изображения
	|ГДЕ Изображения.СвязанныйОбъект = &СвязанныйОбъект
	|УПОРЯДОЧИТЬ ПО Изображения.ЭтоОсновноеИзображениеОбъекта УБЫВ";
	
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		возврат неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.ссылка;	
	КонецЕсли;
	
КонецФункции //ПолучитьОсновноеИзображениеОбъекта

Функция   ПолучитьОстатокДенег(Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач ВОсновнойВалюте = Неопределено) Экспорт
	
	Если ВОсновнойВалюте = Неопределено Тогда
		Если ЗначениеЗаполнено(Валюта) Тогда
			ВОсновнойВалюте = ЛОЖЬ;	
		Иначе
			ВОсновнойВалюте = ИСТИНА;
		КонецЕсли;		
	КонецЕсли;
	
	СуммаОстаток = 0;
	Запрос 		 = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ДеньгиОстатки." + ?(ВОсновнойВалюте, "СуммаОстаток", "СуммаВВалютеОстаток") + " КАК СуммаОстаток ИЗ РегистрНакопления.Деньги.Остатки(&ДатаОстатка, ИСТИНА %1% %2% %3%) КАК ДеньгиОстатки";
	
	Если НЕ ФормаОплаты = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И ФормаОплаты = &ФормаОплаты ");
		Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
	КонецЕсли;
	
	Если НЕ Валюта = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", " И Валюта = &Валюта ");
		Запрос.УстановитьПараметр("Валюта", Валюта);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%2%", "");
	КонецЕсли;
	
	Если НЕ ХранилищеДенег = Неопределено Тогда
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", " И ХранилищеДенег = &ХранилищеДенег ");
		Запрос.УстановитьПараметр("ХранилищеДенег", ХранилищеДенег);
	Иначе
		Запрос.Текст = стрзаменить(Запрос.Текст, "%3%", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатка", ДатаОстатка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СуммаОстаток = СуммаОстаток + ВыборкаДетальныеЗаписи.СуммаОстаток;
		КонецЦикла;                            	
		
	КонецЕсли;
	
	Возврат СуммаОстаток;
	
КонецФункции //ОстатокДенег

Функция   ПолучитьОстатокТовара(Знач номенклатура, Знач Склад = Неопределено, Знач Дата, Знач ЭтоРасходТовара = ЛОЖЬ) Экспорт	
	Возврат ОстатокТовара(Склад, Номенклатура, Дата, ЛОЖЬ, ЭтоРасходТовара);	
КонецФункции //ПолучитьОстатокТовара

Функция   ПолучитьПодразделениеСотрудника(Знач Сотрудник, Знач Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияСостав.Ссылка,
	|	ПодразделенияСостав.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ Справочник.Подразделения.Состав КАК ПодразделенияСостав
	|ГДЕ (ПодразделенияСостав.НачалоРаботы = &ПустаяДата
	|			ИЛИ ПодразделенияСостав.НачалоРаботы <= &Дата)
	|	И (ПодразделенияСостав.КонецРаботы = &ПустаяДата
	|			ИЛИ ПодразделенияСостав.КонецРаботы >= &Дата)
	|	И ПодразделенияСостав.Сотрудник = &Сотрудник
	|УПОРЯДОЧИТЬ ПО ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		Результат = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьПоследнююЦенуРеализации(Знач Номенклатура, Знач Клиент = Неопределено, Знач Договор = Неопределено, Знач Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продажи.Сумма / ВЫБОР
	|		КОГДА Продажи.Количество = 0
	|			ТОГДА 1
	|		Иначе Продажи.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Период < &Дата ";
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Запрос.Текст = Запрос.Текст + "	И Продажи.Клиент = &Клиент	";
		Запрос.УстановитьПараметр("Клиент", Клиент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.Текст = Запрос.Текст + "	И Продажи.Договор = &Договор	";
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "	И Продажи.Номенклатура = &Номенклатура
	|УПОРЯДОЧИТЬ ПО Продажи.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Цена;
	Иначе	
		Возврат 0;		
	КонецЕсли;
	
КонецФункции //ПолучитьПОследнююЦенуРеализации

Функция   ПолучитьПроцентСкидкиНаСервере(Знач ОбъектСкидки, Знач Количество = 0, Знач ВидЦен = Неопределено, Знач Клиент = Неопределено) Экспорт
	
	Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") Тогда
		
		ТипОбъНом 	= ЛОЖЬ;
		ТипСпрКл 	= ЛОЖЬ;
		ТипСпрНом 	= ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Номенклатура");
		
		Если НЕ ТипСпрНом Тогда
			
			ТипОбъНом = ТипЗнч(ОбъектСкидки) = Тип("СправочникОбъект.Номенклатура");
			Если НЕ ТипОбъНом Тогда
				ТипСпрКл = ТипЗнч(ОбъектСкидки) = Тип("СправочникСсылка.Клиенты");		
			КонецЕсли;
		КонецЕсли;
		
		ПроцентСкидкиКонтра = 0;
		
		Если НЕ ТипОбъНом 
			И НЕ ТипСпрКл 
			И НЕ ТипСпрНом тогда
			
			возврат 0;			
		Иначе
			
			Если ТипСпрКл 
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда
				
				ПроцентСкидкиКонтра = ОбъектСкидки.ПроцентСкидки ;
				
			ИначеЕсли ЗначениеЗаполнено(Клиент)
				И ТипЗнч(Клиент) = Тип("СправочникСсылка.Клиенты")
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляКлиентов") Тогда
				
				ПроцентСкидкиКонтра = Клиент.ПроцентСкидки ;
				Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
				
				Если ЗначениеЗаполнено(Клиент.ДатаРождения)
					И месяц(Клиент.ДатаРождения) = месяц(Дата)
					И день(Клиент.ДатаРождения) = день(Дата) Тогда
					
					ПроцентСкидкиКонтра = ПроцентСкидкиКонтра + ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РазмерСкидкиНаДатаРождения");
				КонецЕсли;
				
			КонецЕсли;
			
			ПроцентСкидкиНомы = 0;
			
			Если (ТипСпрНом 
				ИЛИ ТипОбъНом)
				И НЕ ОбъектСкидки.ЭтоГруппа
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьВозможностьУказыватьПроцентСкидкиДляНоменклатуры") Тогда
				
				ПроцентСкидкиНомы = ОбъектСкидки.ПроцентСкидки ;
				
			КонецЕсли;	
			
			Если НЕ ПроцентСкидкиНомы = 0
				И НЕ ПроцентСкидкиКонтра = 0
				И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИНоменклатуры") Тогда
				
				ПроцентСкидки = ПроцентСкидкиНомы + ПроцентСкидкиКонтра;
				
			Иначеесли ПроцентСкидкиНомы > ПроцентСкидкиКонтра Тогда
				ПроцентСкидки = ПроцентСкидкиНомы ;
			Иначе
				ПроцентСкидки = ПроцентСкидкиКонтра;
				
			КонецЕсли;
			
			Если НЕ количество = 0 //надо проверять льготную цену
				И НЕ ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены = 0
				И Количество >= ОбъектСкидки.ПланкаКоличестваДляЛьготнойЦены
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
				И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар") Тогда
				
				ПроцентРасчетаЛьготнойЦены = 0;
				
				Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
					Если ЗначениеЗаполнено(ВидЦен) Тогда
						
						ПроцентРасчетаЛьготнойЦены = ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены;	
					КонецЕсли;
					
				Иначе
					ПроцентРасчетаЛьготнойЦены = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");	
				КонецЕсли;
				
				Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СуммироватьПроцентСкидкиКлиентаИлиНоменклатурыСПроцентомЛьготнойЦены") Тогда
					Возврат ПроцентРасчетаЛьготнойЦены + ПроцентСкидки;
					
				ИначеЕсли ПроцентРасчетаЛьготнойЦены > ПроцентСкидки Тогда
					возврат ПроцентРасчетаЛьготнойЦены;
					
				Иначе
					возврат ПроцентСкидки
				КонецЕсли;
				
			Иначе
				возврат ПроцентСкидки
			КонецЕсли;	
		КонецЕсли;	
		
	Иначе
		возврат 0;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьПустоеЗначениеДополнительногоРеквизита(Знач ТипДополнительногоРеквизита, Знач ЭтоОбъект = ЛОЖЬ) Экспорт
	
	Если ЭтоОбъект Тогда
		ТипДополнительногоРеквизита = ТипДополнительногоРеквизита.ТипДополнительногоРеквизита;
	КонецЕсли;
	
	Результат = ЛОЖЬ;
	
	Если ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Булево Тогда
		Результат = ЛОЖЬ;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Дата Тогда
		Результат = '00010101';
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаДокумент Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.СсылкаНаЭлементСправочника Тогда
		Результат = Неопределено;
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.ЗначениеИзСправочника Тогда
		Результат = ПредопределенноеЗначение("Справочник.НаборЗначенийДополнительныхРеквизитов.ПустаяСсылка");
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Строка Тогда
		Результат = "";
	ИначеЕсли ТипДополнительногоРеквизита = Перечисления.ТипыДополнительныхРеквизитов.Число Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьСложнуюЦену(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = ИСТИНА, Знач Количество = 0, Знач ЭтоПроверкаЦены = ЛОЖЬ, Знач Вручную = ЛОЖЬ, Знач Ссылка = Неопределено, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	
	НоменклатураЦена 		= 0;	
	ТипЗнчНоменклатура 		= ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	ДанныеФормыСтруктура 	= НЕ ТипЗнчНоменклатура И ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура");
	
	Если НЕ ДанныеФормыСтруктура
		И (ВидЦен = Неопределено ИЛИ ЗначениеЗаполнено(ВидЦен))
		И ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		Если ВидЦен = Неопределено Тогда
			ВидЦенОсновнойВалюты = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ВидыЦен.ГлавныйВидЦен");
			
			Если ВидЦенОсновнойВалюты.Зависимая
				ИЛИ НЕ ВидЦенОсновнойВалюты.ВалютаЦены = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Валюты.ОсновнаяВалюта") Тогда
				
				РезультатЗапросаВЦ = ОбщийМодульПовтор.ЗапросВЦ();
				Если НЕ РезультатЗапросаВЦ.Пустой() Тогда
					
					ВыборкаДетальныеЗаписиВЦ = РезультатЗапросаВЦ.Выбрать();					
					ВыборкаДетальныеЗаписиВЦ.Следующий();
					ВидЦенОсновнойВалюты 	 = ВыборкаДетальныеЗаписиВЦ.Ссылка;
					
				Иначе
					Возврат 0;
				КонецЕсли;
				
			КонецЕсли;
			ВидЦен = ВидЦенОсновнойВалюты.Ссылка;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.Ссылка);
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьЕдиницыИзмеренияНоменклатуры")
			И ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЦеныСрезПоследних.Цена,
			|	ЦеныСрезПоследних.ДокументРегистрации,
			|	ЦеныСрезПоследних.Вручную
			|ИЗ РегистрСведений.Цены.СрезПоследних(
			|			&Дата,
			|			Номенклатура = &Номенклатура
			|				И ВидЦен = &ВидЦен
			|				И ЕдиницаИзмерения = &ЕдиницаИзмерения) КАК ЦеныСрезПоследних";
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена;	
					Если ЭтоПроверкаЦены
						И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка 
						И вручную = ВыборкаДетальныеЗаписи.вручную Тогда //для сверки с ценой
						
						НоменклатураЦена = -1;
					КонецЕсли;
				КонецЦикла;                      
				
			Иначе
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЦеныСрезПоследних.Цена,
				|	ЦеныСрезПоследних.ДокументРегистрации,
				|	ЦеныСрезПоследних.Вручную,
				|	ЦеныСрезПоследних.ЕдиницаИзмерения
				|ИЗ РегистрСведений.Цены.СрезПоследних(
				|			&Дата,
				|			Номенклатура = &Номенклатура
				|				И ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних";
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения) Тогда
							НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена / ?(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.количество = 0, 1, ВыборкаДетальныеЗаписи.ЕдиницаИзмерения.количество) * ?(ЕдиницаИзмерения.Количество = 0, 1, ЕдиницаИзмерения.Количество);
						Иначе
							НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена * ?(ЕдиницаИзмерения.Количество = 0, 1, ЕдиницаИзмерения.Количество);
						КонецЕсли;
						
						Если ЭтоПроверкаЦены
							И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка 
							И вручную = ВыборкаДетальныеЗаписи.вручную тогда //для сверки с ценой
							
							НоменклатураЦена = -1;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
			
		Иначе 			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЦеныСрезПоследних.Период,
			|	ЦеныСрезПоследних.Номенклатура,
			|	ЦеныСрезПоследних.ВидЦен,
			|	ЦеныСрезПоследних.ЕдиницаИзмерения,
			|	ЦеныСрезПоследних.Цена,
			|	ЦеныСрезПоследних.ДокументРегистрации,
			|	ЦеныСрезПоследних.Комментарий,
			|	ЦеныСрезПоследних.Вручную
			|ИЗ РегистрСведений.Цены.СрезПоследних(
			|			&Дата,
			|			Номенклатура = &Номенклатура
			|				И ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоменклатураЦена = ВыборкаДетальныеЗаписи.Цена;	
					
					Если ЭтоПроверкаЦены
						И ВыборкаДетальныеЗаписи.ДокументРегистрации = Ссылка 
						И вручную = ВыборкаДетальныеЗаписи.вручную тогда //для сверки с ценой
						
						НоменклатураЦена = -1;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ количество = 0 //надо проверять льготную цену
			И НЕ НоменклатураЦена = 0
			И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
			И Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
			И ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже")
			И (НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") 
			ИЛИ НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда
			
			ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ?(ЗначениеЗаполнено(видцен), ВидЦен.ПроцентСкидкиДляРасчетаЛьготнойЦены, ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию"));
			
			НоменклатураЦена = НоменклатураЦена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (НоменклатураЦена / 100);
			
		КонецЕсли;			
		
		Если НоменклатураЦена = 0 //не 100 % скидка
			И ВыводитьОшибку 
			И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура.ссылка + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена! Вид цен") + ": " + ВидЦен + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на дату") + " " + Дата;
			Сообщение.Сообщить();                                               	
			
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат НоменклатураЦена;
	
КонецФункции

Функция   УстановитьСостояниеЗаказа(Знач Заказ, Знач Дата = Неопределено, Знач НовоеСостояние = Неопределено) Экспорт
	
	Если НЕ НовоеСостояние = Неопределено Тогда
		
		СостояниеЗаказов = РегистрыСведений.СостоянияЗаказов.СоздатьМенеджерЗаписи();
		СостояниеЗаказов.Активность = Истина;
		СостояниеЗаказов.Заказ = Заказ;
		СостояниеЗаказов.Период = Дата ;
		Если ТипЗнч(Заказ.ссылка) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			СостояниеЗаказов.СостояниеЗаказаПоставщику = НовоеСостояние;
		Иначе
			СостояниеЗаказов.СостояниеЗаказаКлиента = НовоеСостояние;
		КонецЕсли;
		
		Попытка //Записи в регистр сведений 
			СостояниеЗаказов.Записать(Истина);
			
		Исключение //Записи в регистр сведений 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи состояния заказа") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Заказ);
			Сообщение.Сообщить();
		КонецПопытки; //Записи в регистр сведений
		
	КонецЕсли;
	
	Возврат ПолучитьСостояниеЗаказа(Заказ, Дата);
	
КонецФункции //УстановитьСостояниеЗаказа

Функция   ПолучитьСостояниеЗаказа(Знач Заказ, Знач Дата = Неопределено) Экспорт
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("смена", '00010101');
	
	Если ЗначениеЗаполнено(Заказ.ссылка) Тогда
		
		Запрос = Новый Запрос;
		Если ТипЗнч(Заказ.ссылка) = Тип("ДокументСсылка.ПоступленияТовара") Тогда
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.СостояниеЗаказаПоставщику КАК Состояние,
			|	СостоянияЗаказовСрезПоследних.Период КАК Смена
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаПоставщику.Формируется);
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ СостоянияЗаказовСрезПоследних.Период КАК Смена,
			|	СостоянияЗаказовСрезПоследних.СостояниеЗаказаКлиента КАК Состояние
			|ИЗ РегистрСведений.СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Заказ) КАК СостоянияЗаказовСрезПоследних";
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);
			
		КонецЕсли; 
		
		Если Дата = Неопределено Тогда
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			СтруктураРезультат.состояние = ВыборкаДетальныеЗаписи.Состояние;
			СтруктураРезультат.Смена     = ВыборкаДетальныеЗаписи.смена;
			
		Иначе
			
			СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);			
		КонецЕсли;
		
	Иначе		
		СтруктураРезультат.Вставить("Состояние", Перечисления.СостоянияЗаказаКлиента.Формируется);		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции //ПолучитьСостояниеЗаказа

Функция   ПолучитьСотрудникаПоШтрихКоду(Знач ОсновнойШтрихКод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Сотрудники.Ссылка
	|ИЗ Справочник.Сотрудники КАК Сотрудники
	|ГДЕ Сотрудники.ОсновнойШтрихКод = &ОсновнойШтрихКод";
	
	Запрос.УстановитьПараметр("ОсновнойШтрихКод", ОсновнойШтрихКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе
		Возврат неопределено;	
	КонецЕсли;
	
КонецФункции //ПолучитьСотрудникаПоШтрихКоду

Функция   ПолучитьСтоимостьВыполненныхРабот(Знач ДатаНачала, Знач ДатаОкончания, Знач Сотрудник = Неопределено, Знач ЗаКомплектацию = ЛОЖЬ, Знач ЗаОказанныеУслугиЗаВремя = ЛОЖЬ, Знач ПроцентЗаОказанныеУслугиЗаВремя = ЛОЖЬ) Экспорт
	
	Сумма  = 0;	
	Запрос = Новый Запрос;
	
	Если ПроцентЗаОказанныеУслугиЗаВремя Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.Сотрудник = &Сотрудник
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		Иначе	    		
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		КонецЕсли;
	ИначеЕсли ЗаОказанныеУслугиЗаВремя Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараВКоличестве КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.Сотрудник = &Сотрудник
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		Иначе	    		
			Запрос.Текст = "ВЫБРАТЬ
			|	ОказанияУслугЗаВремя.ТовараВКоличестве КАК Сумма
			|ИЗ Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
			|ГДЕ ОказанияУслугЗаВремя.Ссылка.Проведен = ИСТИНА
			|	И ОказанияУслугЗаВремя.ДатаОкончанияОказанияУслуг МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		КонецЕсли;
		
	ИначеЕсли ЗаКомплектацию Тогда
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	КомплектацияРаботы.Количество КАК Сумма
			|ИЗ Документ.Комплектация.Работы КАК КомплектацияРаботы
			|ГДЕ КомплектацияРаботы.Ссылка.Проведен = ИСТИНА
			|	И КомплектацияРаботы.Сотрудник = &Сотрудник
			|	И КомплектацияРаботы.Ссылка.ДатаКомплектации МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		Иначе	    		
			Запрос.Текст = "ВЫБРАТЬ
			|	КомплектацияРаботы.Количество КАК Сумма
			|ИЗ Документ.Комплектация.Работы КАК КомплектацияРаботы
			|ГДЕ КомплектацияРаботы.Ссылка.Проведен = ИСТИНА
			|	И КомплектацияРаботы.Ссылка.ДатаКомплектации МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ВыполненияРаботРаботы.Сумма КАК Сумма
			|ИЗ Документ.ВыполненияРабот.Товары КАК ВыполненияРаботРаботы
			|ГДЕ ВыполненияРаботРаботы.Ссылка.Проведен = ИСТИНА
			|	И ВыполненияРаботРаботы.Ссылка.Актуален = ИСТИНА
			|	И ВыполненияРаботРаботы.Сотрудник = &Сотрудник
			|	И ВыполненияРаботРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		Иначе	    		
			Запрос.Текст = "ВЫБРАТЬ
			|	ВыполненияРаботРаботы.Сумма КАК Сумма
			|ИЗ Документ.ВыполненияРабот.Товары КАК ВыполненияРаботРаботы
			|ГДЕ ВыполненияРаботРаботы.Ссылка.Проведен = ИСТИНА
			|	И ВыполненияРаботРаботы.Ссылка.Актуален = ИСТИНА
			|	И ВыполненияРаботРаботы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
			
		КонецЕсли; 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", конецдня(ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сумма = Сумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

Функция   ПолучитьСтруктуруДополнительныхПараметровМакетаПечати() Экспорт
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("ТекстВШапкеДокументовПриПечати", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВШапкеДокументовПриПечати"));
	РезультатСтруктура.Вставить("ТекстВПодвалеДокументовПриПечати", ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекстВПодвалеДокументовПриПечати"));
	
	Возврат РезультатСтруктура;
	
КонецФункции //ПолучитьСтруктуруДополнительныхПараметровМакетаПечати

функция   ПолучитьСтруктуруИзображения(Знач СсылкаНаЭлементИзображение) Экспорт
	
	Результат = Новый Структура("ИзображениеВБазеДанных", СсылкаНаЭлементИзображение.ИзображениеВБазеДанных);
	Результат.Вставить("подссылку", "");
	результат.Вставить("РазмерПриОтображении", 1);
	
	Если СсылкаНаЭлементИзображение.ЭтоГруппа Тогда
		Результат.ИзображениеВБазеДанных = ЛОЖЬ;
		
	Иначе
		Если Результат.ИзображениеВБазеДанных Тогда
			
			Результат.ПодСсылку = ПолучитьНавигационнуюСсылку(СсылкаНаЭлементИзображение, "ХранилищеИзображения");
			
			РазмерПриОтображении = СсылкаНаЭлементИзображение.РазмерПриОтображении;
			
			Если РазмерПриОтображении = Перечисления.РазмерыКартинок.Пропорционально тогда
				результат.Вставить("РазмерПриОтображении", 2);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Растянуть тогда
				результат.Вставить("РазмерПриОтображении", 3);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.РеальныйРазмер тогда
				результат.Вставить("РазмерПриОтображении", 4);
			ИначеЕсли РазмерПриОтображении = Перечисления.РазмерыКартинок.Черепица тогда
				результат.Вставить("РазмерПриОтображении", 5);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.ИмяФайлаИзображения) Тогда
			результат.подссылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
			|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<HTML style=""font-family:arial; font-size:11px;"">
			|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
			|<img src = """ + СсылкаНаЭлементИзображение.ИмяФайлаИзображения + """>
			|</HTML>";
			
		ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭлементИзображение.СсылкаНаИзображение) Тогда
			результат.подссылку = "<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" 
			|""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
			|<HTML style=""font-family:arial; font-size:11px;"">
			|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
			|<img src = """ + СсылкаНаЭлементИзображение.СсылкаНаИзображение + """>
			|</HTML>";
			
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция   ПолучитьТаблицыЦенСписанияИОстатков(Знач ссылка = Неопределено, Знач склад, Знач дата, Знач ОстаткиСледуетПроверять, Знач Номенклатура = Неопределено, Знач ИмяТаблицы = "Товары", Знач ДляВозвратаОтКлиента = ЛОЖЬ) Экспорт
	
	СтруктураТаблиц = Новый Структура;
	ТаблицаСписанияНеопределена = ИСТИНА;
	
	Если Ссылка = Неопределено Тогда
		всяНоменклатура = Новый Массив;
		всяНоменклатура.Добавить(Номенклатура);
	Иначе
		всяНоменклатура = Ссылка[ИмяТаблицы].выгрузитьколонку("Номенклатура");	
	КонецЕсли;
	
	Если НЕ Ссылка = Неопределено 
		И ДляВозвратаОтКлиента Тогда
		
		Если ЗначениеЗаполнено(Ссылка.ДокументРеализации) Тогда
			
			Запрос = Новый Запрос; //цена при условии серийных продаж должна собраться
			Запрос.Текст = "ВЫБРАТЬ
			|	РасходыТовараТовары.Номенклатура,
			|	СУММА(РасходыТовараТовары.Количество) КАК Количество,
			|	СУММА(РасходыТовараТовары.Сумма) КАК Сумма,
			|	СУММА(1) КАК цена
			|ИЗ
			|	Документ.РасходыТовара.Товары КАК РасходыТовараТовары
			|ГДЕ
			|	РасходыТовараТовары.Номенклатура В(&всяНоменклатура)
			|	И РасходыТовараТовары.Ссылка = &ДокументРеализации
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходыТовараТовары.Номенклатура";	
			
			Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
			Запрос.УстановитьПараметр("ДокументРеализации", Ссылка.ДокументРеализации);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ТаблицаЦенСписания = Результат.Выгрузить();
				Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
					СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
				КонецЦикла;
				
				ТаблицаСписанияНеопределена = ЛОЖЬ;
				СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);	
			КонецЕсли;				   
			
		КонецЕсли;
		
		Если ТаблицаСписанияНеопределена Тогда //продажа не указана
			Если ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда
				Запрос = Новый Запрос; //цена при условии серийных продаж должна собраться
				Запрос.Текст = "ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	СУММА(Товары.Количество) КАК Количество,
				|	СУММА(Товары.Сумма) КАК Сумма,
				|	СУММА(1) КАК Цена
				|ИЗ
				|	РегистрНакопления.Товары КАК Товары
				|ГДЕ
				|	Товары.ВидДвижения = &Расход
				|	И Товары.Номенклатура В(&всяНоменклатура)
				|	И Товары.Период <= &Дата
				|	И Товары.Регистратор.КлиентПоставщик = &КлиентПоставщик
				|
				|СГРУППИРОВАТЬ ПО
				|	Товары.Номенклатура";	
				
				Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
				Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
				Запрос.УстановитьПараметр("Дата", Дата);
				Запрос.УстановитьПараметр("КлиентПоставщик", Ссылка.КлиентПоставщик);
				
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					ТаблицаЦенСписания = Результат.Выгрузить();
					Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
						СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
					КонецЦикла;
					
					ТаблицаСписанияНеопределена = ЛОЖЬ;
					СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);	
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаСписанияНеопределена Тогда //продажа не указана, продажи клиенту не нашли - ищем среднюю реализацию
			Если ЗначениеЗаполнено(Ссылка.КлиентПоставщик) Тогда
				Запрос = Новый Запрос; //цена при условии серийных продаж должна собраться
				Запрос.Текст = "ВЫБРАТЬ
				|	Товары.Номенклатура,
				|	СУММА(Товары.Количество) КАК Количество,
				|	СУММА(Товары.Сумма) КАК Сумма,
				|	СУММА(1) КАК Цена
				|ИЗ
				|	РегистрНакопления.Товары КАК Товары
				|ГДЕ
				|	Товары.ВидДвижения = &Расход
				|	И Товары.Номенклатура В(&всяНоменклатура)
				|	И Товары.Период <= &Дата
				|
				|СГРУППИРОВАТЬ ПО
				|	Товары.Номенклатура";	
				
				Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
				Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
				Запрос.УстановитьПараметр("Дата", Дата);
				
				Результат = Запрос.Выполнить();
				Если НЕ Результат.Пустой() Тогда
					ТаблицаЦенСписания = Результат.Выгрузить();
					Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
						СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
					КонецЦикла;
					
					ТаблицаСписанияНеопределена = ЛОЖЬ;
					СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);	
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаСписанияНеопределена ТОгда	
		//средняя цена поступления
		
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = "ВЫБРАТЬ
		//	|	Товары.Номенклатура,
		//	               |	СУММА(Товары.Количество) КАК Количество,
		//	               |	СУММА(Товары.Сумма) КАК Сумма,
		//	               |	СУММА(1) КАК Цена
		//	               |ИЗ
		//	               |	РегистрНакопления.Товары КАК Товары
		//	               |ГДЕ
		//	               |	Товары.ВидДвижения = &Поступление
		//	               |	И Товары.Номенклатура В(&всяНоменклатура)
		//	               |	И Товары.Период <= &Дата
		//	               |
		//	               |СГРУППИРОВАТЬ ПО
		//	               |	Товары.Номенклатура";	
		//	
		//	Запрос.УстановитьПараметр("Поступление", ВидДвиженияНакопления.Приход);
		//	Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
		//	Запрос.УстановитьПараметр("Дата", Дата);
		//	
		//	Результат = Запрос.Выполнить();
		//	Если НЕ Результат.Пустой() Тогда
		//		ТаблицаЦенСписания = Результат.Выгрузить();
		//		Для Каждого СтрокаТаблицы Из ТаблицаЦенСписания Цикл
		//			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		//		КонецЦикла;
		//		
		//	Иначе
		//		ТаблицаЦенСписания = Новый ТаблицаЗначений;
		//		ТаблицаЦенСписания.Колонки.Добавить("Цена");
		//		ТаблицаЦенСписания.Колонки.Добавить("Номенклатура");
		//		
		//	КонецЕсли;				   
		//	СтруктураТаблиц.вставить("ТаблицаЦенСписания", ТаблицаЦенСписания);	
		//КонецЕсли;
		//	
		//Иначе
		//средняя цена остатка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР
		|		КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		Иначе ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
		|	КОНЕЦ КАК Цена,
		|	ТоварыОстатки.Номенклатура
		|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&ВсяНоменклатура)) КАК ТоварыОстатки";	
		
		Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		СтруктураТаблиц.вставить("ТаблицаЦенСписания", Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ОстаткиСледуетПроверять
		И ЗначениеЗаполнено(ссылка) Тогда //иначе зачем
		
		Запрос = Новый Запрос; //БЕЗ учета СЕРИЙ
		
		Если склад = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(склад) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура) %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
		Иначе          			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура) И Склад = &Склад %1% ) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО
			|	ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
			Запрос.УстановитьПараметр("Склад", Склад);
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетПоСериямНоменклатуры") Тогда
			
			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", " И СерияНоменклатуры В (&всеЕЕСерии) ");
			всеЕЕСерии = ссылка.товары.выгрузитьколонку("СерияНоменклатуры");
			Запрос.УстановитьПараметр("всеЕЕСерии", всеЕЕСерии);
			
		Иначе
			Запрос.Текст = стрзаменить(Запрос.Текст, "%1%", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("всяНоменклатура", всяНоменклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		результат = Запрос.Выполнить();
		
		Если результат.Пустой() Тогда
			
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
			
		Иначе   			
			ТаблицаОтвета = результат.Выгрузить();			
		КонецЕсли;
		
	Иначе      		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		
	КонецЕсли;
	
	СтруктураТаблиц.вставить("ТаблицаОстатков", ТаблицаОтвета);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция   ПолучитьТекущийКурс(Знач Валюта = Неопределено, Знач Дата = Неопределено, Знач ВернутьСтруктуру = ЛОЖЬ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;   	
	
	Если ВернутьСтруктуру ТОгда
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Период", Дата);
		СтруктураРезультата.Вставить("Валюта", Валюта);
		СтруктураРезультата.Вставить("Курс", 1);
		СтруктураРезультата.Вставить("ОбратныйПересчет", 1);
		СтруктураРезультата.Вставить("Комментарий", "");
		СтруктураРезультата.Вставить("Ответственный");
		СтруктураРезультата.Вставить("ДатаСоздания");
		СтруктураРезультата.Вставить("ДатаРедакции");
		
	КонецЕсли;
	
	Если НЕ ПараметрыСеанса.ВестиУчетВалютВСеансе 
		ИЛИ НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Если ВернутьСтруктуру ТОгда
			Возврат СтруктураРезультата;	
		Иначе
			Возврат 1;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВернутьСтруктуру ТОгда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 КурсыВалют.Период КАК Период,
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.ОбратныйПересчет,
		|	КурсыВалют.Комментарий,
		|	КурсыВалют.Ответственный,
		|	КурсыВалют.ДатаСоздания,
		|	КурсыВалют.ДатаРедакции
		|ИЗ РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ КурсыВалют.Период <= &Дата
		|	И КурсыВалют.Валюта = &Валюта
		|УПОРЯДОЧИТЬ ПО Период УБЫВ";
		
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
		Возврат СтруктураРезультата;
		
	Иначе
		
		Курс = 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ КурсыВалютСрезПоследних.Курс ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("Валюта", Валюта);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			Курс = ВыборкаДетальныеЗаписи.Курс;
		КонецЕсли;
		
		Возврат Курс; 	
	КонецЕсли;
	
КонецФункции //ПолучитьТекущийКурс

Функция   ПолучитьТипДополнительногоРеквизита(Знач ТипОбъектаДляДополнительныхРеквизитов) Экспорт
	
	Результат = ЛОЖЬ;
	
	Если ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаНоменклатура Тогда
		Результат = Справочники.Номенклатура.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаДоговора Тогда
		Результат = Справочники.Договора.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаРасходТовара Тогда
		Результат = Документы.РасходыТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПоступлениеТовара Тогда
		Результат = Документы.ПоступленияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаКлиенты Тогда
		Результат = Справочники.Клиенты.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаВыполненияРабот Тогда
		Результат = Документы.ВыполненияРабот.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПоставщики Тогда
		Результат = Справочники.Поставщики.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаДвиженияДенег Тогда
		Результат = Документы.ДвиженияДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаИнвентаризация Тогда
		Результат = Документы.Инвентаризации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКорректировкаИВводОстатков Тогда
		Результат = Документы.КорректировкиИРегистрацияОстатков.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПеремещенияТоваров Тогда
		Результат = Документы.ПеремещенияТовара.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланПродаж Тогда
		Результат = Документы.ПланыПродаж.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаПланДоходовИРасходов Тогда
		Результат = Документы.ПланыДоходовИРасходовДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаУстановкаЦен Тогда
		Результат = Документы.УстановкиЦен.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаКомплектации Тогда
		Результат = Документы.Комплектация.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОтчетКомиссионера Тогда
		Результат = Документы.ОтчетКомиссионера.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляЗаметокИНапоминаний Тогда
		Результат = Справочники.ЗаметкиИНапоминания.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляПрикрепленныхИзображений Тогда
		Результат = Справочники.Изображения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаВидыЦен Тогда
		Результат = Справочники.ВидыЦен.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаЛокаций Тогда
		Результат = Справочники.Локации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОрганизации Тогда
		Результат = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаОбъектыКлиентов Тогда
		Результат = Справочники.ОбъектыКлиентов.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСредств Тогда
		Результат = Справочники.СредстваПредприятия.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПартииПриобретения Тогда
		Результат = Справочники.ПартииПриобретения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПроизводители Тогда
		Результат = Справочники.Производители.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаРегионы Тогда
		Результат = Справочники.Регионы.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСклады Тогда
		Результат = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСотрудники Тогда
		Результат = Справочники.Сотрудники.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСтатьиДвиженияДенег Тогда
		Результат = Справочники.СтатьиДвиженияДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаХранилищаДенег Тогда
		Результат = Справочники.ХранилищаДенег.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСпецификаций Тогда
		Результат = Справочники.Спецификации.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаПодразделений Тогда
		Результат = Справочники.Подразделения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаГруппАналогов Тогда
		Результат = Справочники.ГруппыАналогов.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляСправочникаСертификатов Тогда
		Результат = Справочники.СертификатыГигиеническиеЗаключения.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаТаблицыДанных Тогда
		Результат = Документы.ТаблицыДанных.ПустаяСсылка();
	ИначеЕсли ТипОбъектаДляДополнительныхРеквизитов = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляДокументаОказанияУслугЗаВремя Тогда
		Результат = Документы.ОказанияУслугЗаВремя.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции //ПолучитьПустоеЗначениеДополнительногоРеквизита

Функция   ПолучитьЦенуНаСервере(Знач Номенклатура, Знач ВидЦен = Неопределено, Знач Дата, Знач ВыводитьОшибку = ИСТИНА, Знач Количество = 0, Знач Договор = Неопределено, Знач ДоговорТочноПредусматриваетСтрогиеЦены = ЛОЖЬ, Знач Цена = -1, Знач Ссылка = Неопределено, Знач ВыводитьОшибкуТолькоСообщением = ЛОЖЬ, Знач ЕдиницаИзмерения = Неопределено, Знач СредняяЦенаПриобретения = ЛОЖЬ) Экспорт
	
	Если НЕ ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура = Номенклатура.ссылка;
	КонецЕсли;
	
	ЦенаНеОбнаружена = ИСТИНА;
	
	Если СредняяЦенаПриобретения Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ТоварыОбороты.СуммаПриход,
		|	ТоварыОбороты.КоличествоПриход
		|ИЗ РегистрНакопления.Товары.Обороты(, &ДатаОкончания, , Номенклатура = &Номенклатура) КАК ТоварыОбороты";
		
		Запрос.УстановитьПараметр("ДатаОкончания", Дата);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			КоличествоПриход = ВыборкаДетальныеЗаписи.КоличествоПриход;
			СуммаПриход 	 = ВыборкаДетальныеЗаписи.СуммаПриход;
			Если НЕ СуммаПриход = 0 Тогда
				Если НЕ КоличествоПриход = 0 Тогда
					Возврат ВыборкаДетальныеЗаписи.СуммаПриход / КоличествоПриход;
				Иначе
					Возврат ВыборкаДетальныеЗаписи.СуммаПриход;
				КонецЕсли;
				
			Иначе
				ЦенаНеОбнаружена = ЛОЖЬ;
				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СредняяЦенаПриобретения 
		ИЛИ ЦенаНеОбнаружена Тогда
		
		Если НЕ Договор = Неопределено
			И ЗначениеЗаполнено(Договор) Тогда
			
			Если (ДоговорТочноПредусматриваетСтрогиеЦены
				ИЛИ договор.ПредусматриваетСтрогиеЦены) Тогда
				
				СтрокаДоговора = Договор.товары.Найти(Номенклатура, "Номенклатура");
				Если НЕ СтрокаДоговора = Неопределено Тогда
					Цена = СтрокаДоговора.Цена;			
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Цена = -1 Тогда
			
			Возврат Цена;
			
		Иначе
			Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
				
				Если ВидЦен = ИСТИНА Тогда //любая
					Возврат ПолучитьСложнуюЦену(Номенклатура, , Дата, ВыводитьОшибку, Количество, , , , ЕдиницаИзмерения);
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					
					Если ВыводитьОшибку 
						И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						
						Если ВыводитьОшибкуТолькоСообщением Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид Цен НЕ указан!");
							Сообщение.Сообщить();    	                                        	
							
						Иначе
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид Цен НЕ указан!"), , Ссылка);
						КонецЕсли;
						
					КонецЕсли;
					
					Возврат 0;
					
				Иначе  			
					Возврат ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Дата, ВыводитьОшибку, Количество, , , , ЕдиницаИзмерения);
				КонецЕсли;
				
			Иначе
				Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
					И ЗначениеЗаполнено(Номенклатура) Тогда
					
					Цена = Номенклатура.Цена;
					
					Если НЕ количество = 0 //надо проверять льготную цену
						И НЕ Цена = 0
						И НЕ Номенклатура.ПланкаКоличестваДляЛьготнойЦены = 0
						И Количество >= Номенклатура.ПланкаКоличестваДляЛьготнойЦены
						И ПараметрыСеанса.ВключитьМеханизмЛьготнойЦеныПоКоличествуПриПродаже
						И (не ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСкидкиПС") 
						ИЛИ НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ОформлятьПриРеализацииПоЛьготнойЦенеКакСкидкуНаТовар")) Тогда
						
						ПроцентРасчетаЛьготнойЦеныПоУмолчанию = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ПроцентРасчетаЛьготнойЦеныПоУмолчанию");
						Цена = Цена - ПроцентРасчетаЛьготнойЦеныПоУмолчанию * (Цена / 100);
						
					ИначеЕсли Цена = 0 //не 100% скидка
						И ВыводитьОшибку 
						И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						
						Если ВыводитьОшибкуТолькоСообщением Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена! ");
							Сообщение.Сообщить();    	                                        	
							
						Иначе
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена на") + " " + Номенклатура + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("не установлена! "), , ссылка);	
						КонецЕсли;
						
					КонецЕсли;
					
					Возврат Цена;
					
				Иначе
					Возврат 0;
				КонецЕсли;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьЦенуСписания(Знач Номенклатура, Знач Количество = 0, Знач Дата, Знач СтруктураОстатка = Неопределено, Знач ЭтотТоварНеИмеетКоличественногоУчета = ЛОЖЬ) Экспорт	
	
	Результат = 0;
	ТяжелыйЗапрос = ЛОЖЬ;
	Запрос = Новый Запрос;
	
	Если ЭтотТоварНеИмеетКоличественногоУчета Тогда
		
		Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних.Цена КАК Цена
		|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних";
		
	ИначеЕсли ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоСкладам") Тогда
		
		ТяжелыйЗапрос = ИСТИНА;
		Запрос.Текст = "ВЫБРАТЬ
		|	Товары.Регистратор,
		|	ВЫБОР
		|		КОГДА Товары.ВидДвижения = &ВидДвиженияПриход
		|			ТОГДА Товары.Сумма
		|		ИНАЧЕ -Товары.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА Товары.ВидДвижения = &ВидДвиженияПриход
		|			ТОГДА Товары.Количество
		|		ИНАЧЕ -Товары.Количество
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.Товары КАК Товары
		|ГДЕ
		|	Товары.Период <= &Дата
		|	И Товары.Номенклатура = &Номенклатура
		|	И Товары.ВнутреннееПеремещение = ЛОЖЬ";	
		
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Иначе		
		
		Запрос.Текст = "ВЫБРАТЬ ВЫБОР КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0 ТОГДА 0
		|		Иначе ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
		|	КОНЕЦ КАК Цена ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ТоварыОстатки";	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ТяжелыйЗапрос Тогда
			
			СуммаКУчету 	 = 0;
			КоличествоКУчету = 0;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СуммаКУчету 	 = СуммаКУчету + ВыборкаДетальныеЗаписи.Сумма;
				КоличествоКУчету = КоличествоКУчету + ВыборкаДетальныеЗаписи.Количество;
			КонецЦикла;
			Результат = ?(КоличествоКУчету = 0, СуммаКУчету, СуммаКУчету / КоличествоКУчету);
		Иначе
			ВыборкаДетальныеЗаписи.Следующий();		
			Результат = ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьСуммуСписания

Функция   ПолучитьЧислоЗаметокСсылки(Знач Ссылка) Экспорт
	
	ЧислоСсылок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаметкиИНапоминания.Ссылка) КАК ЧислоСсылок
	|ИЗ Справочник.ЗаметкиИНапоминания КАК ЗаметкиИНапоминания
	|ГДЕ ЗаметкиИНапоминания.Актуально = ИСТИНА
	|	И (ЗаметкиИНапоминания.Причина = &Ссылка
	|			ИЛИ ЗаметкиИНапоминания.СвязаноС = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЧислоСсылок = ЧислоСсылок + ВыборкаДетальныеЗаписи.ЧислоСсылок;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ЧислоСсылок;
	
КонецФункции //ПолучитьЗаметкиОбъекта

Функция   ПроверитьДокументПроведен(Знач ДокументССылка) Экспорт
	
	Попытка
		Возврат ДокументССылка.Проведен;
	Исключение //не документ
		Возврат ЛОЖЬ;
	КонецПопытки;
	
КонецФункции //ПроверитьДокументПроведен

Функция   ПроверитьДоступностьДокументаПрошлого(Знач Дата, Знач Ссылка = Неопределено) Экспорт
	
	Результат = ИСТИНА;
	
	ЗапретитьИзмененияВПрошломПериоде = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИзмененияВПрошломПериоде");
	
	Если ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеДаты Тогда
		ДатаЗапрета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаЗапретаИзмененияДанных");
		
		Если Дата <= ДатаЗапрета Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше даты запрета") + ": " + формат(ДатаЗапрета, "ДФ=dd.MM.yyyy"), , Ссылка);
			КонецЕсли;
			
			Результат = ЛОЖЬ;
		КонецЕсли;
		
	ИначеЕсли ЗапретитьИзмененияВПрошломПериоде = Перечисления.ВидыЗапрета.ЗапрещатьИзмененияСтаршеОпределенногоСрока Тогда
		СрокЗапрета = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("СрокЗапретаДанныхВЧасах");
		ДатаЗапрета = (ТекущаяДата() - (СрокЗапрета * 3600));
		
		Если Дата <= ДатаЗапрета Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Отказано в записи - старше срока запрета") + ": " + Формат(ДатаЗапрета, "ДФ='dd.MM.yy ЧЧ:мм'"), , Ссылка);
			КонецЕсли;
			
			Результат = ЛОЖЬ;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция   ПроверитьОстатокДенежныхСредств(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач ВернутьСтруктуруПополнения = ЛОЖЬ, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = ЛОЖЬ) Экспорт
	
	Если СуммаДокумента <= 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ХранилищеДенег)
		И Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта") Тогда
		
		ХранилищеДенег = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте");
	КонецЕсли;
	
	Если ВернутьСтруктуруПополнения Тогда
		СтруктураПополнения = Новый Структура;
		СтруктураПополнения.Вставить("Отказ", ЛОЖЬ);
		СтруктураПополнения.Вставить("Сумма", СуммаДокумента);
		СтруктураПополнения.Вставить("СуммаПополнения", 0);
		СтруктураПополнения.Вставить("Валюта", Валюта);
		
		Если ЗначениеЗаполнено(ХранилищеДенег) 
			И ЗначениеЗаполнено(ХранилищеДенег.ХранилищеПополнения) Тогда
			
			ХранилищеПополнения = ХранилищеДенег.ХранилищеПополнения;			
			СтруктураПополнения.Вставить("ХранилищеПополнения", ХранилищеПополнения);
			СтруктураПополнения.Валюта = ХранилищеПополнения.Валюта;
			
			СуммаОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);
			Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
				
				СуммаОстатокПополнения = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеПополнения);	
				Если ((СуммаОстаток + СуммаОстатокПополнения) - СуммаДокумента) < 0 Тогда
					
					ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");
					Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
						И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
						
						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + СокрЛП(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег с учетом пополнения (") + СокрЛП(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
							//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + СокрЛП(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег с учетом пополнения (") + СокрЛП(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация);	
						КонецЕсли;
						
						Если НЕ ОтменитьПроверкиНаОтказ
							И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
							
							СтруктураПополнения.Отказ = ИСТИНА;
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					СтруктураПополнения.Сумма 			= СуммаОстаток;
					СтруктураПополнения.СуммаПополнения = СуммаДокумента - СуммаОстаток;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ОтменитьПроверкиНаОтказ Тогда
			СтруктураПополнения.Отказ = ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка);
		КонецЕсли;
		
		Возврат СтруктураПополнения;
		
	Иначе
		Возврат ПроверитьОстатокДенежныхСредствБезСтруктуры(СуммаДокумента, ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег, Ссылка, ОтменитьПроверкиНаОтказ)	;	
	КонецЕсли;
	
КонецФункции

Функция   ПроверитьОстатокДенежныхСредствБезСтруктуры(Знач СуммаДокумента, Знач ДатаОстатка, Знач ФормаОплаты = Неопределено, Знач Валюта = Неопределено, Знач ХранилищеДенег = Неопределено, Знач Ссылка = Неопределено, Знач ОтменитьПроверкиНаОтказ = ЛОЖЬ) Экспорт
	
	Отказ = ЛОЖЬ;
	
	ПоведениеПрограммыПриРасходеДенегБезОстатка = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоведениеПрограммыПриРасходеДенегБезОстатка");
	
	Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеДенегБезОстатка)
		И НЕ ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда
		
		СуммаОстаток = ОбщийМодульСервер.ПолучитьОстатокДенег(ДатаОстатка, ФормаОплаты, Валюта, ХранилищеДенег);		
		
		Если (СуммаОстаток - СуммаДокумента) < 0 Тогда
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2") + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег (") + формат(СуммаОстаток, "ЧЦ=15; ЧДЦ=2") + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация, Ссылка);
				//Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма документа (") + СокрЛП(СуммаДокумента) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток Денег (") + СокрЛП(СуммаОстаток) + ?(ФормаОплаты = Неопределено, "", " " + ФормаОплаты) + ")!", СтатусСообщения.Информация);	
			КонецЕсли;
			
			Если НЕ ОтменитьПроверкиНаОтказ
				И ПоведениеПрограммыПриРасходеДенегБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
				
				Отказ = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция   ПроверитьОстатокТоваров(Знач ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка, Знач ПоведениеПрограммыПриРасходеТоваровБезОстатка, Знач Склад, Знач Номенклатура, Знач Количество, Знач ДатаОстатка, Знач УжеПроверялиЧтоНеПредопределенныйИЗаполнен = ЛОЖЬ, КоличествоОстаток = 0, Знач Ссылка = Неопределено) Экспорт
	
	Отказ = ЛОЖЬ;
	
	Если УжеПроверялиЧтоНеПредопределенныйИЗаполнен
		ИЛИ (ЗначениеЗаполнено(Номенклатура) 
		И НЕ ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура)) Тогда
		
		КвоОстаток = -1;
		КоличествоОстаток = 0;
		
		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда		
			
			ДатаНачалаОграничения = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ДатаСКоторойДействуетПоведениеОРекомендуемомОстаткеТовара");
			
			Если ДатаНачалаОграничения = '00010101000000' 
				ИЛИ ДатаОстатка > ДатаНачалаОграничения тогда
				
				РекомендованныйМинимум = РекомендуемыйМинимальныйОстатокТовара(Номенклатура);
				Если РекомендованныйМинимум = 0 Тогда
					РекомендованныйМинимум = ОбщийМодульПовтор.ПолучитьПараметрСеанса("РекомендуемыйМинимальныйОстатокТовара");
				КонецЕсли;		
				
				Если НЕ РекомендованныйМинимум = 0 тогда
					
					Если КоличествоОстаток = 0 тогда
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);
						КоличествоОстаток = КвоОстаток;
					Иначе
						КвоОстаток = КоличествоОстаток;							
					КонецЕсли;										
					
					Если (КвоОстаток - Количество) < 0 Тогда
						Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
							ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + " " + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает Рекомендуемый остаток") + " (" + РекомендованныйМинимум +")!", , Ссылка);
							//Сообщение = Новый СообщениеПользователю;
							//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает Рекомендуемый остаток") + " (" + РекомендованныйМинимум +")!";
							//Сообщение.Сообщить();                                               	
						КонецЕсли;
						
						Если ПоведениеПрограммыПриРасходеТоваровНижеРекомендованногоМинимальногоОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
							Отказ = ИСТИНА;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;  			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоведениеПрограммыПриРасходеТоваровБезОстатка)
			И НЕ ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Игнорировать Тогда		
			
			ДатаНачалаОграничения = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ДатаСКоторойДействуетПоведениеОбОтрицательныхОстаткахТовара");
			
			Если ДатаНачалаОграничения = '00010101000000' 
				ИЛИ ДатаОстатка > ДатаНачалаОграничения тогда
				
				Если КвоОстаток = -1 Тогда
					Если КоличествоОстаток = 0 Тогда						
						КвоОстаток = ОбщийМодульСервер.ОстатокТовара(Склад, Номенклатура, ДатаОстатка);	
						КоличествоОстаток = КвоОстаток;
					Иначе
						КвоОстаток = КоличествоОстаток;
					КонецЕсли;
					
				КонецЕсли;
				
				Если (КвоОстаток - Количество) < 0 Тогда 
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + " " + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для") + " " + Номенклатура + ?(ЗначениеЗаполнено(Склад), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" на складе") + " " + Склад, "") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" количество (") + СокрЛП(КвоОстаток) + "-" + СокрЛП(Количество) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") превышает остаток!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
					Если ПоведениеПрограммыПриРасходеТоваровБезОстатка = Перечисления.ИгнорироватьРазрешитьЗапретить.Запретить Тогда
						Отказ = ИСТИНА;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;  		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция   ПроверитьОтказПоСуммеИлиКоличествуДляДоговора(Знач Отказ = ЛОЖЬ, Знач Договор, Знач ЭтоКлиент = ИСТИНА, Знач Дата, Знач ТовараНаСумму, Знач ТовараВКоличестве, Знач ИзПоступления = ЛОЖЬ, Знач МинусСумма, Знач Ссылка = Неопределено) Экспорт
	
	Если НЕ Отказ Тогда
		ДоговорОграничиваетСуммуТоваров = Договор.ОграничиваетСуммуТоваров;
		
		Если НЕ ДоговорОграничиваетСуммуТоваров = 0 Тогда
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда				
				Запрос.Текст = "ВЫБРАТЬ РасчетыОбороты.СуммаОборот ИЗ РегистрНакопления.Расчеты.Обороты(, , , Договор = &Договор) КАК РасчетыОбороты";
				
			Иначе				
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОбороты.СуммаОборот ИЗ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , , Договор = &Договор) КАК РасчетыСПоставщикамиОбороты";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.СуммаОборот;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуТоваров;							
				Иначе
					ОтказТут = (ТекущийОборот + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуТоваров;							
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ = ИСТИНА;
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем по Договору!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем по Договору!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				КонецЕсли;		
			КонецЕсли;
			
		КонецЕсли;	
		
		ДоговорОграничиваетКоличествоТоваров = Договор.ОграничиваетКоличествоТоваров;
		
		Если НЕ ТовараВКоличестве =0
			И НЕ ДоговорОграничиваетКоличествоТоваров = 0 Тогда		
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				
				Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.СуммаОборот,
				|	ПродажиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Продажи.Обороты(, , , Договор = &Договор) КАК ПродажиОбороты";
				
			Иначе				
				Запрос.Текст = "ВЫБРАТЬ ЗакупкиОбороты.СуммаОборот,
				|	ЗакупкиОбороты.КоличествоОборот
				|ИЗ РегистрНакопления.Закупки.Обороты(, , , Договор = &Договор) КАК ЗакупкиОбороты";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ТекущийОборот = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийОборот = ТекущийОборот + ВыборкаДетальныеЗаписи.КоличествоОборот;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийОборот - ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;		
				Иначе
					ОтказТут = (ТекущийОборот + ТовараВКоличестве) >  ДоговорОграничиваетКоличествоТоваров;	
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ =	ИСТИНА;     					
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество превышает допустимый объем по Договору!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество превышает допустимый объем по Договору!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				КонецЕсли;		
			КонецЕсли;
			
		КонецЕсли;	
		
		ДоговорОграничиваетСуммуЗадолженности = Договор.ОграничиваетСуммуЗадолженности;
		Если НЕ ДоговорОграничиваетСуммуЗадолженности = 0 Тогда
			
			Запрос = Новый Запрос;
			Если ЭтоКлиент Тогда
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток ИЗ РегистрНакопления.Расчеты.Остатки(&Дата, Договор = &Договор) КАК РасчетыОстатки";
				
			Иначе
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&Дата, Договор = &Договор) КАК РасчетыСПоставщикамиОстатки";
				
			КонецЕсли;
			Запрос.УстановитьПараметр("Договор", Договор);
			Запрос.УстановитьПараметр("Дата", Дата);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ТекущийДолг = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ТекущийДолг = ТекущийДолг + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЦикла;
				
				Если ИзПоступления Тогда
					ОтказТут = (ТекущийДолг - ТовараНаСумму + МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;			
				Иначе
					ОтказТут = (ТекущийДолг + ТовараНаСумму - МинусСумма) >  ДоговорОграничиваетСуммуЗадолженности;			
				КонецЕсли;
				
				Если ОтказТут тогда
					
					Отказ = ИСТИНА;
					Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
						ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем долга по Договору на дату!"), , Ссылка);
						//Сообщение = Новый СообщениеПользователю;
						//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма превышает допустимый объем долга по Договору на дату!");
						//Сообщение.Сообщить();                                               	
					КонецЕсли;
					
				КонецЕсли;		
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции //ПроверитьОтказПоСуммеИлиКоличествуДляДоговора

Функция   ПроверитьПользовательИмеетПравоМенятьЦены() Экспорт 	
	Возврат НЕ ОбщийМодульСерверПривилегия.ЕстьПользователи() ИЛИ РольДоступна("ПолныеПрава") ИЛИ НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("РеализаторНеМожетМенятьЦены");	
КонецФункции //ПроверитьПользовательИмеетПравоМенятьЦены

Процедура ПроверитьСменуНаименованияНаТекущемЯзыке(Знач Наименование, Знач Ссылка, Знач ИмяПоля = "Наименование", Знач Отказ = ЛОЖЬ) Экспорт
	
	Результат = Наименование;
	
	Если НЕ Отказ
		И ЗначениеЗаполнено(Ссылка) Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского") 
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьНаименованияНаДругихЯзыкахКромеРусского", ИСТИНА) Тогда
			
			НаименованиеВРегистре = ОбщийМодульПовтор.получитьПредставлениеНаЯзыке(Ссылка, ИмяПоля);
			Если НаименованиеВРегистре = Неопределено
				ИЛИ НЕ НаименованиеВРегистре = Наименование Тогда
				
				ОбщийМодульСервер.обновитьЗначениеНаЯзыке(Ссылка, Наименование, ИмяПоля);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция   ПроверитьУникальностьНаименование(Знач Отказ, Знач имяСправочник, Знач Наименование, Знач Ссылка, Знач ВРамкахОдногоПараметра = Неопределено, Знач ЗначениеЭтогоОграничителя = Неопределено) Экспорт
	
	Если Отказ тогда		
		Возврат ИСТИНА;
		
	ИначеЕсли ПустаяСтрока(Наименование) Тогда		
		Возврат ЛОЖЬ;
		
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("УникальныеНаименованияДляНоменклатурыКлиентовИПоставщиков") Тогда
		
		Запрос = Новый Запрос;		
		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.Наименование = &Наименование И Н.Ссылка <> &Ссылка";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.Наименование = &Наименование И Н.Ссылка <> &Ссылка";
			
		КонецЕсли;
		
		Если НЕ ВРамкахОдногоПараметра = Неопределено Тогда
			Запрос.Текст = " И Н." + СокрЛП(ВРамкахОдногоПараметра) + " = &Ограничитель" +
			Запрос.УстановитьПараметр("Ограничитель", ЗначениеЭтогоОграничителя);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВозвратОтказ = ЛОЖЬ;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким именем (") + Наименование + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор имен запрещен."), , Ссылка);
				КонецЕсли;
				
				ВозвратОтказ = ИСТИНА;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат ВозвратОтказ;
		
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции //ПроверитьУникальностьНаименование

Функция   ПроверитьУникальностьОКПО(Знач Отказ, Знач имяСправочник, Знач ОКПО, Знач Ссылка) Экспорт
	
	Если Отказ Тогда		
		Возврат ИСТИНА;		
		
	ИначеЕсли ПустаяСтрока(ОКПО) Тогда		
		Возврат ЛОЖЬ;		
		
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьИспользоватьОдинаковыеКодыИНН") Тогда
		
		Запрос = Новый Запрос;
		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда			
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И Н.ОКПО = &ОКПО И Н.Ссылка <> &Ссылка";
			
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("ОКПО", ОКПО);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВозвратОтказ = ЛОЖЬ;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким ИНН (ОКПО)") + " (" + ОКПО + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + "! " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор запрещен."), , Ссылка);
				КонецЕсли;
				
				ВозвратОтказ = ИСТИНА;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат ВозвратОтказ;
		
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции //ПроверитьУникальностьОКПО

Функция   ПроверитьУникальностьНомераТелефона(Знач Отказ, Знач имяСправочник, Знач Телефон, Знач Ссылка) Экспорт
	
	Если Отказ Тогда		
		Возврат ИСТИНА;		
		
	ИначеЕсли ПустаяСтрока(Телефон) Тогда		
		Возврат ЛОЖЬ;		
		
	ИначеЕсли ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ЗапретитьОдинаковыеНомераТелефоновУКлиентовИПоставщиков") Тогда
		
		Запрос = Новый Запрос;
		Если Метаданные["Справочники"].найти(имяСправочник).Иерархический ТОгда			
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ Н.ЭтоГруппа = ЛОЖЬ И (Н.Телефон = &Телефон 
			|ИЛИ Н.Телефон2 = &Телефон 
			|ИЛИ Н.Телефон3 = &Телефон 
			|ИЛИ Н.Телефон4 = &Телефон 
			|ИЛИ Н.Телефон5 = &Телефон 
			|) И Н.Ссылка <> &Ссылка";
			
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Н.Ссылка
			|ИЗ Справочник." + имяСправочник + " КАК Н
			|ГДЕ (Н.Телефон = &Телефон 
			|ИЛИ Н.Телефон2 = &Телефон 
			|ИЛИ Н.Телефон3 = &Телефон 
			|ИЛИ Н.Телефон4 = &Телефон 
			|ИЛИ Н.Телефон5 = &Телефон 
			|) И Н.Ссылка <> &Ссылка";
			
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("Телефон", Телефон);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ВозвратОтказ = ЛОЖЬ;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Элемент с таким номером телефона") + " (" + Телефон + ") " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("уже существует") + ": " + ВыборкаДетальныеЗаписи.Ссылка + "! " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Повтор запрещен."), , Ссылка);
				КонецЕсли;
				
				ВозвратОтказ = ИСТИНА;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат ВозвратОтказ;
		
	Иначе
		Возврат ЛОЖЬ;
	КонецЕсли;
	
КонецФункции //ПроверитьУникальностьТелефон

Процедура ПроверитьФормулу(Знач Формула, Знач родитель = Неопределено) Экспорт
	
	Если родитель = Неопределено тогда
		родитель = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.ФормулыОписания.ФормулыПреобразованияЦен");	
	КонецЕсли;
	
	Если ТипЗнч(Формула) = Тип("СправочникСсылка.ФормулыОписания") Тогда
		Формула = Формула.Формула;
	КонецЕсли;
	
	Пропустить = ЛОЖЬ;
	ВыборкаДетальныеЗаписиссылка = "";	
	Дата = Неопределено;
	Цена = 0;
	Номенклатура = Неопределено;
	Цена2 = 0;
	Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	Валюта2 = Валюта;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Номенклатура.Ссылка,
	|	Номенклатура.Цена,
	|	Номенклатура.НоменклатурнаяГруппа,
	|	Номенклатура.Производитель
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры в базе для проверки!"), , );
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет номенклатуры в базе для проверки!");
			//Сообщение.Сообщить();                                               	
		КонецЕсли;
		
		пропустить = ИСТИНА;
		
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
		Склад = ПредопределенноеЗначение("Справочник.Склады.ОсновнойСклад");
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			Дата 	= ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			ВидЦен 	= ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенРасходованияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				ВидЦен = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВидЦенПриходованияТовараПоУмолчанию");
				Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
					ВидЦен = ПредопределенноеЗначение("Справочник.ВидыЦен.ГлавныйВидЦен");
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
				Цена = 12345.67;
			Иначе
				Цена = ПолучитьЦенуНаСервере(Номенклатура, ВидЦен, Дата);
				Валюта = ВидЦен.ВалютаЦены;
			КонецЕсли;
			Цена = 0;
			
			ВидЦен2 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");
			Если ЗначениеЗаполнено(ВидЦен2) Тогда
				Цена2 = ПолучитьЦенуНаСервере(Номенклатура, ВидЦен2, Дата);
				Валюта2 = ВидЦен2.ВалютаЦены;
			КонецЕсли;
			
		Иначе
			Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			Цена = ВыборкаДетальныеЗаписи.Цена;
		КонецЕсли;
		
		НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.НоменклатурнаяГруппа;
		Производитель 		 = ВыборкаДетальныеЗаписи.Производитель;
		
		ВыборкаДетальныеЗаписиссылка = ВыборкаДетальныеЗаписи.ссылка;
		СерияНоменклатуры 	 = "";
		
		Если ПараметрыСеанса.ВестиУчетПоСериямНоменклатуры
			И ОбщийМодульПовтор.ТоварВедетсяПоСериям(Номенклатура) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СерииНоменклатуры.Наименование
			|ИЗ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			|ГДЕ СерииНоменклатуры.Владелец = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();				
				ВыборкаДетальныеЗаписи.Следующий();
				СерияНоменклатуры = ВыборкаДетальныеЗаписи.Наименование;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;                    
	
	Если НЕ пропустить тогда
		Попытка 
			Тест = "";
			
			Выполнить(" Тест = " + Формула + ";");
			
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Формула работает. Пример для") + " " + ВыборкаДетальныеЗаписиссылка + " = " + Тест);
			КонецЕсли;
			
		Исключение 	
			Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка в формуле") + ": " + ОписаниеОшибки());
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Функция   ПроверитьЧтоДоговорНеИспользовался(Знач Договор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Период
	|ИЗ РегистрНакопления.Продажи КАК Продажи
	|ГДЕ Продажи.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Период
	|ИЗ РегистрНакопления.Закупки КАК Закупки
	|ГДЕ Закупки.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 Расчеты.Период
	|ИЗ РегистрНакопления.Расчеты КАК Расчеты
	|ГДЕ Расчеты.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСПоставщиками.Период
	|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ РасчетыСПоставщиками.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСОтсрочкой.Период
	|ИЗ РегистрНакопления.РасчетыСОтсрочкой КАК РасчетыСОтсрочкой
	|ГДЕ РасчетыСОтсрочкой.Договор = &Договор
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ ПЕРВЫЕ 1 РасчетыСПоставщикамиСОтсрочкой.Период
	|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой КАК РасчетыСПоставщикамиСОтсрочкой
	|ГДЕ РасчетыСПоставщикамиСОтсрочкой.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();//доступен  
	
КонецФункции //ПроверитьЧтоНоменклатураНеИспользовалась

Функция   ПроверитьЧтоНоменклатураНеИспользовалась(Знач Номенклатура, Знач СерияНоменклатуры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если НЕ СерияНоменклатуры = Неопределено тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|	И Товары.СерияНоменклатуры = &СерияНоменклатуры";
		
		Запрос.УстановитьПараметр("СерияНоменклатуры", СерияНоменклатуры);
		
	Иначе		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Продажи.Регистратор КАК Регистратор
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Товары.Регистратор
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Номенклатура = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 ПланыПродажТовары.Ссылка
		|ИЗ Документ.ПланыПродаж.Товары КАК ПланыПродажТовары
		|ГДЕ ПланыПродажТовары.Ссылка.Проведен = ИСТИНА
		|	И ПланыПродажТовары.НоменклатураИлиГруппа = &Номенклатура
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1 Закупки.Регистратор
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Номенклатура = &Номенклатура";                   	
	КонецЕсли; //в товарах НЕ движутся услуги, могут быть планы поэтому следует переьрать все возможные объекты
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой(); //доступно
	
КонецФункции //ПроверитьЧтоНоменклатураНеИспользовалась

Процедура ПроизвестиПересчетВсехЦен(Знач ВидЦен, Знач Период = Неопределено, Знач РежимУстановкиЦен = 1) Экспорт
	//режим 1 - для всех, 2 - да всех установленных, 3 - для неустановленых
	
	Если Период = Неопределено Тогда
		Период = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;
	
	ВидЦенКомментарий = ВидЦен.Комментарий;
	ВидЦен = ВидЦен.Ссылка;
	
	Если РежимУстановкиЦен = 1 
		ИЛИ РежимУстановкиЦен = 3 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	&ПустаяЕдИзм КАК ЕдиницаИзмерения
		|ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ Номенклатура.ЭтоГруппа = ЛОЖЬ
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ЕдиницыИзмерения.Владелец.Ссылка,
		|	ЕдиницыИзмерения.Ссылка
		|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
		
		Запрос.УстановитьПараметр("ПустаяЕдИзм", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Номенклатура = ВыборкаДетальныеЗаписи.Ссылка;
			ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
			
			Если РежимУстановкиЦен = 1 
				ИЛИ ПолучитьСложнуюЦену(Номенклатура, ВидЦен, Период, ЛОЖЬ, , , , , ЕдиницаИзмерения) = 0 Тогда //для 3го режима
				
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", Номенклатура);
				СтрокаТовара.Вставить("Цена", 0);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , ВидЦенКомментарий, Период, ЛОЖЬ, , , , , ЕдиницаИзмерения, РежимУстановкиЦен);	
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РежимУстановкиЦен = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЦеныСрезПоследних.Цена,
		|	ЦеныСрезПоследних.Период,
		|	ЦеныСрезПоследних.Номенклатура,
		|	ЦеныСрезПоследних.ЕдиницаИзмерения
		|ИЗ РегистрСведений.Цены.СрезПоследних(&Период, ВидЦен = &ВидЦен) КАК ЦеныСрезПоследних ";
		
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("Период", Период);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СтрокаТовара = Новый Структура;
				СтрокаТовара.Вставить("Номенклатура", ВыборкаДетальныеЗаписи.Номенклатура);
				СтрокаТовара.Вставить("Цена", ВыборкаДетальныеЗаписи.Цена);
				ОбщийМодульСервер.УстановитьЦенуИВсеЗависимые(ВидЦен.Ссылка, СтрокаТовара, , ВидЦен.Комментарий, Период, ЛОЖЬ, , , , , ВыборкаДетальныеЗаписи.ЕдиницаИзмерения, РежимУстановкиЦен);
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьВсеЗависимыеЦеныПриСменеКурса(Знач Валюта = Неопределено, Знач Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВидыЦенТаблицаЗависимости.ОсновнойВидЦен.Ссылка КАК Ссылка,
		               |	ВидыЦенТаблицаЗависимости.ОсновнойВидЦен.Зависимая КАК ОсновнойВидЦенЗависимая
		               |ИЗ Справочник.ВидыЦен.ТаблицаЗависимости КАК ВидыЦенТаблицаЗависимости
		               |ГДЕ ВидыЦенТаблицаЗависимости.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
		               |ОБЪЕДИНИТЬ ВСЕ
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.Ссылка,
		               |	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.Зависимая
		               |ИЗ Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп
		               |ГДЕ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
		               |ОБЪЕДИНИТЬ ВСЕ
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВидыЦен.ОсновнойВидЦен.Ссылка,
		               |	ВидыЦен.ОсновнойВидЦен.Зависимая
		               |ИЗ Справочник.ВидыЦен КАК ВидыЦен
		               |ГДЕ ВидыЦен.ОсновнойВидЦен.ВалютаЦены = &ВалютаЦены
		               |	И ВидыЦен.Зависимая = ИСТИНА
		               |ОБЪЕДИНИТЬ ВСЕ
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВидыЦен.Ссылка,
		               |	ВидыЦен.Зависимая
		               |ИЗ Справочник.ВидыЦен КАК ВидыЦен
		               |ГДЕ ВидыЦен.ВалютаЦены = &ВалютаЦены
		               |УПОРЯДОЧИТЬ ПО ОсновнойВидЦенЗависимая";
		
		Запрос.УстановитьПараметр("ВалютаЦены", Валюта);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВидыЦен.ОсновнойВидЦен
		|ИЗ Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ ВидыЦен.Зависимая = ИСТИНА ";
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаВидовЦен = РезультатЗапроса.Выгрузить();
		ТаблицаВидовЦен.Свернуть("Ссылка");
		
		Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
			ПроизвестиПересчетВсехЦен(СтрокаВидаЦен.Ссылка, Период);
		КонецЦикла;	                           	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЦенуИВсеЗависимые(Знач ВидЦен, Знач СтрокаТовара, Знач Ссылка = Неопределено, Знач Комментарий, Знач Дата, Знач ТолькоЗависимые = ЛОЖЬ, Знач МассивВидовЦен = Неопределено, Знач наУдаление = ЛОЖЬ, Знач первыйУровень = ИСТИНА, Знач БезЗависимых = ЛОЖЬ, Знач ЕдиницаИзмерения = Неопределено, Знач РежимУстановкиЦен = 1) Экспорт
	
	Если МассивВидовЦен = Неопределено Тогда
		МассивВидовЦен = Новый Массив;          	
	КонецЕсли;
	Если ЕдиницаИзмерения = Неопределено Тогда
		ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	ЗначениеЗаполненоСсылка = ЗначениеЗаполнено(Ссылка);
	Номенклатура = СтрокаТовара.Номенклатура;
	Цена 		 = СтрокаТовара.Цена;
	Пропустить   = ЛОЖЬ;
	
	Попытка 
		Если НЕ ТолькоЗависимые Тогда		
			
			Если наУдаление 
				ИЛИ НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ВидЦен, Номенклатура, Дата, Цена, первыйУровень, Ссылка, ЕдиницаИзмерения) Тогда				
				
				Если РежимУстановкиЦен = 1
					ИЛИ (РежимУстановкиЦен = 2 И ОбщийМодульПовторВТеченииСервера.ЦенаУжеПроставлена(ВидЦен, Номенклатура, Дата, Ссылка, ЕдиницаИзмерения))
					ИЛИ (РежимУстановкиЦен = 3 И НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеПроставлена(ВидЦен, Номенклатура, Дата, Ссылка, ЕдиницаИзмерения)) Тогда
					
					ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
					ЦенаТовара.Активность = ИСТИНА;
					ЦенаТовара.ВидЦен 	  = ВидЦен  ;
					ЦенаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
					МассивВидовЦен.Добавить(ВидЦен);
					
					ЦенаТовара.Номенклатура = Номенклатура;
					ЦенаТовара.Период 	  = Дата;
					ЦенаТовара.Цена 	  = Цена;
					ЦенаТовара.Вручную 	  = ПервыйУровень;
					
					Если НЕ наУдаление Тогда
						
						ЦенаТовара.Комментарий = Комментарий;
						Если ЗначениеЗаполненоСсылка Тогда
							ЦенаТовара.ДокументРегистрации = Ссылка;
						КонецЕсли;               
						
						ЦенаТовара.Записать(ИСТИНА);	
						
					Иначе
						ЦенаТовара.Удалить();					
					КонецЕсли;
					
				Иначе
					Пропустить = ИСТИНА;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ БезЗависимых
			И НЕ Пропустить Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ВидыЦен.Ссылка
			|ИЗ Справочник.ВидыЦен КАК ВидыЦен
			|ГДЕ ВидыЦен.ОсновнойВидЦен = &ОсновнойВидЦен
			|	И ВидыЦен.Зависимая = ИСТИНА
			|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ
			|	И НЕ ВидыЦен.Ссылка В (&МассивВидовЦен)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка
			|ИЗ Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп
			|ГДЕ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен = &ОсновнойВидЦен
			|	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.Зависимая = ИСТИНА
			|	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.ПометкаУдаления = ЛОЖЬ И НЕ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка В (&МассивВидовЦен)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ВидыЦенТаблицаЗависимости.Ссылка
			|ИЗ Справочник.ВидыЦен.ТаблицаЗависимости КАК ВидыЦенТаблицаЗависимости
			|ГДЕ ВидыЦенТаблицаЗависимости.ОсновнойВидЦен = &ОсновнойВидЦен
			|	И ВидыЦенТаблицаЗависимости.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И ВидыЦенТаблицаЗависимости.Ссылка.Зависимая = ИСТИНА И НЕ ВидыЦенТаблицаЗависимости.Ссылка В (&МассивВидовЦен)";
			
			Запрос.УстановитьПараметр("ОсновнойВидЦен", ВидЦен);
			Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗависимыйВидЦен = ВыборкаДетальныеЗаписи.ссылка;
					МассивВидовЦен.Добавить(ЗависимыйВидЦен);
					Если наУдаление Тогда
						РасчетнаяЦена = 0;
					Иначе
						РасчетнаяЦена = ОбщийМодульСервер.РассчитатьНовуюЦену(Номенклатура, Цена, ЗависимыйВидЦен, Дата, Ссылка, ЕдиницаИзмерения, ВидЦен);	
					КонецЕсли;
					
					Если НЕ ОбщийМодульПовторВТеченииСервера.ЦенаУжеСтоит(ЗависимыйВидЦен, Номенклатура, Дата, РасчетнаяЦена, ЛОЖЬ, Ссылка, ЕдиницаИзмерения) Тогда
						Попытка 					
							ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
							ЦенаТовара.Активность 	= ИСТИНА;
							ЦенаТовара.ВидЦен 		= ЗависимыйВидЦен ;
							ЦенаТовара.Номенклатура = Номенклатура;
							ЦенаТовара.Период 		= Дата;
							ЦенаТовара.Цена 		= РасчетнаяЦена;
							ЦенаТовара.Вручную 		= ЛОЖЬ;
							ЦенаТовара.ЕдиницаИзмерения = ЕдиницаИзмерения;
							
							Если НЕ наУдаление Тогда
								
								Если ЗначениеЗаполненоСсылка Тогда
									ЦенаТовара.ДокументРегистрации = Ссылка;
								КонецЕсли;
								ЦенаТовара.Комментарий = Комментарий;						
								ЦенаТовара.Записать(ИСТИНА);
								
							Иначе
								ЦенаТовара.Удалить();
								
							КонецЕсли;
							УстановитьЦенуИВсеЗависимые(ЗависимыйВидЦен, СтрокаТовара, Ссылка, Комментарий, Дата, ИСТИНА, МассивВидовЦен, наУдаление, ЛОЖЬ, , ЕдиницаИзмерения, РежимУстановкиЦен); //рекурсия для всех зависимых
							
						Исключение 
							Если НЕ наУдаление
								И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
								
								ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр зависимых цен") + ": " + ЦенаТовара + " " + ОписаниеОшибки(), , Ссылка);
							КонецЕсли;
						КонецПопытки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение 
		Если НЕ наУдаление
			И ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
			
			ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи в регистр цен") + ": " + ЦенаТовара + " " + ОписаниеОшибки(), , Ссылка);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Функция   РассчитатьНовуюЦену(Знач Номенклатура, Знач СтараяЦена, Знач ВидЦен, Знач Дата, Знач Ссылка = Неопределено, Знач ЕдиницаИзмерения = Неопределено, Знач ВидЦенИсточник = Неопределено) Экспорт
	
	Цена = СтараяЦена;	
	Если ВидЦенИсточник = Неопределено Тогда
		ВидЦенИсточник = ВидЦен.ОсновнойВидЦен;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦен) 
		И ВидЦен.Зависимая 
		И ЗначениеЗаполнено(ВидЦенИсточник) Тогда
		
		ЗависимостьОпределена = ЛОЖЬ;
		СтрокаНоменклатурнойГруппы = Неопределено;
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("НазначатьРазличныеСпособыФормированияЦеныДляНоменклатурныхГрупп")
			И НЕ ВидЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп.Количество() = 0 Тогда
			
			НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ФормулаРасчетаОтБазовогоВидаЦены,
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ПроцентОтБазовойЦены,
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ЦенаВЦелыхЕдиницах,
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ЦенаВДесятых,
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ПроцентСкидкиДляРасчетаЛьготнойЦены,
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОкруглятьТолькоВБольшуюСторону
			|ИЗ
			|	Справочник.ВидыЦен.СпособыФормированияЦеныДляНоменклатурныхГрупп КАК ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп
			|ГДЕ
			|	(ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен = &ОсновнойВидЦен
			|			ИЛИ ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
			|	И ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.Ссылка.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидыЦенСпособыФормированияЦеныДляНоменклатурныхГрупп.ОсновнойВидЦен УБЫВ";
			
			Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
			Запрос.УстановитьПараметр("ОсновнойВидЦен", ВидЦенИсточник);
			Запрос.УстановитьПараметр("Ссылка", ВидЦен);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СтрокаНоменклатурнойГруппы = РезультатЗапроса.Выбрать();
				
				СтрокаНоменклатурнойГруппы.Следующий();
				ВидЦенФормулаРасчетаОтБазовогоВидаЦены = СтрокаНоменклатурнойГруппы.ФормулаРасчетаОтБазовогоВидаЦены;
				ВидЦенПроцентОтБазовойЦены 	= СтрокаНоменклатурнойГруппы.ПроцентОтБазовойЦены;
				ВидЦенЦенаВЦелыхЕдиницах 	= СтрокаНоменклатурнойГруппы.ЦенаВЦелыхЕдиницах;
				ВидЦенЦенаВДесятых 			= СтрокаНоменклатурнойГруппы.ЦенаВДесятых;
				ВидЦенОкруглятьТолькоВБольшуюСторону = СтрокаНоменклатурнойГруппы.ОкруглятьТолькоВБольшуюСторону;
				ЗависимостьОпределена = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗависимостьОпределена Тогда
			
			Если ВидЦен.ИсточниковЗависимостиМожетБытьНесколько Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВидыЦенТаблицаЗависимости.ФормулаРасчетаОтБазовогоВидаЦены,
				|	ВидыЦенТаблицаЗависимости.ЦенаВЦелыхЕдиницах,
				|	ВидыЦенТаблицаЗависимости.ЦенаВДесятых,
				|	ВидыЦенТаблицаЗависимости.ПроцентОтБазовойЦены,
				|	ВидыЦенТаблицаЗависимости.ОкруглятьТолькоВБольшуюСторону,
				|	ВидыЦенТаблицаЗависимости.ПроцентСкидкиДляРасчетаЛьготнойЦены
				|ИЗ
				|	Справочник.ВидыЦен.ТаблицаЗависимости КАК ВидыЦенТаблицаЗависимости
				|ГДЕ
				|	ВидыЦенТаблицаЗависимости.ОсновнойВидЦен = &ОсновнойВидЦен
				|	И ВидыЦенТаблицаЗависимости.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("ОсновнойВидЦен", ВидЦенИсточник);
				Запрос.УстановитьПараметр("Ссылка", ВидЦен);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					ВыборкаДетальныеЗаписи.Следующий();
					ВидЦенФормулаРасчетаОтБазовогоВидаЦены = ВыборкаДетальныеЗаписи.ФормулаРасчетаОтБазовогоВидаЦены;
					ВидЦенПроцентОтБазовойЦены 	= ВыборкаДетальныеЗаписи.ПроцентОтБазовойЦены;
					ВидЦенЦенаВЦелыхЕдиницах 	= ВыборкаДетальныеЗаписи.ЦенаВЦелыхЕдиницах;
					ВидЦенЦенаВДесятых 			= ВыборкаДетальныеЗаписи.ЦенаВДесятых;
					ВидЦенОкруглятьТолькоВБольшуюСторону = ВыборкаДетальныеЗаписи.ОкруглятьТолькоВБольшуюСторону;
					ЗависимостьОпределена = ИСТИНА;
				КонецЕсли;	
			КонецЕсли; 	
		КонецЕсли;
		
		Если НЕ ЗависимостьОпределена  Тогда
			ВидЦенФормулаРасчетаОтБазовогоВидаЦены = ВидЦен.ФормулаРасчетаОтБазовогоВидаЦены;
			ВидЦенПроцентОтБазовойЦены 	= ВидЦен.ПроцентОтБазовойЦены;
			ВидЦенЦенаВЦелыхЕдиницах 	= ВидЦен.ЦенаВЦелыхЕдиницах;
			ВидЦенЦенаВДесятых 			= ВидЦен.ЦенаВДесятых;
			ВидЦенОкруглятьТолькоВБольшуюСторону = ВидЦен.ОкруглятьТолькоВБольшуюСторону;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЦенФормулаРасчетаОтБазовогоВидаЦены) Тогда
			Попытка 
				Цена = ПолучитьСложнуюЦену(Номенклатура, ВидЦенИсточник, Дата, ИСТИНА, , , , , ЕдиницаИзмерения);
				Цена2 = 0;
				Валюта = ВидЦенИсточник.ВалютаЦены;
				Валюта2 = Валюта;
				
				ВидЦен2 = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ВторойВидЦенДляЭтикетки");
				Если ЗначениеЗаполнено(ВидЦен2) Тогда
					Цена2 = ПолучитьСложнуюЦену(Номенклатура, ВидЦен2, Дата, ЛОЖЬ, , , , , ЕдиницаИзмерения);
					Валюта2 = ВидЦен2.ВалютаЦены;
				КонецЕсли;
				
				Цена = ПоКурсу(Цена, ВидЦен.ВалютаЦены, ВидЦенИсточник.ВалютаЦены, Дата);
				ЛьготнаяЦена = ПолучитьЛьготнуюЦену(Номенклатура, , Цена, ВидЦен);
				
				Выполнить(" Цена = " + ВидЦенФормулаРасчетаОтБазовогоВидаЦены.Формула + ";");
				
			Исключение 	
				Если ОбщийМодульПовторВТеченииСервера.ВыводитьСообщенияМожно() Тогда
					ОбщийМодульСервисСервер.ДобавитьСообщениеПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка при формировании цены") + ": " + ОписаниеОшибки(), , Ссылка);
				КонецЕсли;
				
			КонецПопытки;
			
		ИначеЕсли ЗначениеЗаполнено(ВидЦенПроцентОтБазовойЦены) Тогда
			
			Цена = ПолучитьСложнуюЦену(Номенклатура, ВидЦенИсточник, Дата, ИСТИНА, , , , , ЕдиницаИзмерения);
			Цена = ПоКурсу(Цена, ВидЦен.ВалютаЦены, ВидЦенИсточник.ВалютаЦены, Дата);
			Цена = (Цена / 100) * ВидЦенПроцентОтБазовойЦены;
			Если Цена = 0 Тогда
				Цена = 0.01;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЦенЦенаВЦелыхЕдиницах 
			ИЛИ ВидЦенЦенаВДесятых Тогда
			
			Если ВидЦенЦенаВДесятых Тогда
				Цена = Цена * 10;
			КонецЕсли;
			
			Если ВидЦенОкруглятьТолькоВБольшуюСторону Тогда
				
				ЦенаЦел = цел(Цена);
				Если НЕ ЦенаЦел = Цена тогда
					Цена = ЦенаЦел + 1;
				КонецЕсли;
				
			ИначеЕсли НЕ цена = 0 тогда
				
				Цена = окр(Цена);
				Если Цена = 0 Тогда
					Цена = 1;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если ВидЦенЦенаВДесятых Тогда
				Цена = Цена / 10;
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат Цена;
	
КонецФункции   

Функция   РасчитатьОриентировочнуюВаловуюПрибыль(Знач Номенклатура, Знач Количество = 1, Знач Дата, Знач Сумма, Знач Валюта, Знач Курс) Экспорт
	
	Результат = Сумма; //в осн вал!
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос;
		
		Если ОбщийМодульПовтор.ТоварНеУчитываетсяПоКоличеству(Номенклатура) Тогда
			Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних.Цена КАК Цена
			|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК СебестоимостьТоваровБезКоличественногоУчетаИУслугСрезПоследних"	
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ ВЫБОР
			|		КОГДА ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 0) = 0
			|			ТОГДА 0
			|		Иначе ЕСТЬNULL(ТоварыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток, 1)
			|	КОНЕЦ КАК Цена,
			|	ТоварыОстатки.Номенклатура
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ТоварыОстатки";	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			
			Результат = (Сумма * Курс) - Количество * ВыборкаДетальныеЗаписи.Цена;			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //РасчитатьОриентировочнуюВаловуюПрибыль

Функция   РекомендуемыйМинимальныйОстатокТовара(Знач Номенклатура) Экспорт
	
	Если ПараметрыСеанса.ВключитьВозможностьУказыватьРекомендованныйМинимальныйОстатокНоменклатуры Тогда
		Возврат Номенклатура.РекомендуемыйМинимальныйОстатокТовара;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции //РекомендуемыйМинимальныйОстатокТовара

Функция   СоздатьИзображениеПоСсылке(Знач СвязанныйОбъект, Знач ИмяИзображения = "", Знач АдресВСети = "", Знач АдресВИнтернет = "", Знач ЗагружатьВБазуДанных = ЛОЖЬ, Знач РазмерПриОтображении = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяИзображения) Тогда
		ИмяИзображения = "" + СвязанныйОбъект;
	КонецЕсли;
	
	Если РазмерПриОтображении = Неопределено тогда
		РазмерПриОтображении = Перечисления.РазмерыКартинок.АвтоРазмер;	
	КонецЕсли;
	
	Изображение = Справочники.Изображения.СоздатьЭлемент();
	Изображение.ИмяФайлаИзображения  = АдресВСети;
	Изображение.СсылкаНаИзображение  = АдресВИнтернет;
	Изображение.Наименование 		 = ИмяИзображения;
	Изображение.РазмерПриОтображении = РазмерПриОтображении;
	Изображение.СвязанныйОбъект 	 = СвязанныйОбъект;
	//Изображение.Комментарий
	
	Если ЗагружатьВБазуДанных тогда		
		АдресЛокально = КаталогВременныхФайлов() + "\ET_teMP.JPg";
		
		КопироватьФайл(?(ЗначениеЗаполнено(АдресВСети), АдресВСети, АдресВИнтернет), АдресЛокально);
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресЛокально);
		Изображение.ХранилищеИзображения = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
		
		Изображение.ИзображениеВБазеДанных = ИСТИНА;
		УдалитьФайлы(АдресЛокально);
	КонецЕсли;
	
	Изображение.Записать();
	
	Возврат Изображение.Ссылка;
	
КонецФункции

Функция   СуществуютЗависимыеВидыЦен() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ВидыЦен.Ссылка
	|ИЗ Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ ВидыЦен.Зависимая = ИСТИНА
	|	И ВидыЦен.ПометкаУдаления = ЛОЖЬ ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции //СуществуютЗависимыеВидыЦен

Функция   СформироватьОтчетРуководителюНаСервере(Знач СтруктураУсловий) Экспорт
	
	Отчет = Новый Структура;
	
	Реквизиты = Метаданные.Отчеты.ОтчетРуководителю.Реквизиты;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Отчет.Вставить(Реквизит.Имя);
		Если СокрЛП(Реквизит.Тип) = "Число" Тогда
			Отчет[Реквизит.Имя] = 0;
		ИначеЕсли СокрЛП(Реквизит.Тип) = "Дата" Тогда
			Отчет[Реквизит.Имя] = '00010101000000';
		ИначеЕсли СокрЛП(Реквизит.Тип) = "Строка" Тогда
			Отчет[Реквизит.Имя] = "";
		КонецЕсли;
		
	КонецЦикла;	
	
	Отчет.ОтборПоСкладу   = СтруктураУсловий.ОтборПоСкладу;
	Отчет.ЦенаПредприятия = 0;
	
	ДатаНачалаОтчета 	= началодня(СтруктураУсловий.ДатаНачала);
	ДатаОкончанияОтчета = Конецдня(СтруктураУсловий.ДатаОкончания);
	
	Отчет.ДатаНачала	= ДатаНачалаОтчета;	
	Отчет.ДатаОкончания	= ДатаОкончанияОтчета;
	
	Отчет.ЦенаПредприятия = 0;
	
	Если ЗначениеЗаполнено(ДатаНачалаОтчета) 
		И ЗначениеЗаполнено(ДатаОкончанияОтчета)Тогда
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетДвиженияДенег") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ ДеньгиОстаткиИОбороты.СуммаПриход,
			|	ДеньгиОстаткиИОбороты.СуммаРасход,
			|	ДеньгиОстаткиИОбороты.СуммаНачальныйОстаток,
			|	ДеньгиОстаткиИОбороты.СуммаКонечныйОстаток,
			|	ДеньгиОстаткиИОбороты.СуммаОборот
			|ИЗ РегистрНакопления.Деньги.ОстаткиИОбороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , , ) КАК ДеньгиОстаткиИОбороты";
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			отчет.РасходДенег 			= 0;
			отчет.ТекущийОстатокДенег 	= 0;
			отчет.НачальныйОстатокДенег = 0;
			отчет.ПоступилоДенег 		= 0;
			Отчет.ОборотДенег 			= 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Отчет.ОборотДенег 			= Отчет.ОборотДенег + ВыборкаДетальныеЗаписи.СуммаОборот;
					отчет.РасходДенег 			= отчет.РасходДенег + ВыборкаДетальныеЗаписи.СуммаРасход;
					отчет.ТекущийОстатокДенег 	= отчет.ТекущийОстатокДенег + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
					отчет.НачальныйОстатокДенег = отчет.НачальныйОстатокДенег + ВыборкаДетальныеЗаписи.СуммаНачальныйОстаток;
					отчет.ПоступилоДенег 		= отчет.ПоступилоДенег + ВыборкаДетальныеЗаписи.СуммаПриход;				
					
				КонецЦикла;		
			КонецЕсли;
			
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ТекущийОстатокДенег;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продажи.Регистратор) КАК Кво
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета ";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		
		РезультатЗапроса  = Запрос.Выполнить();
		отчет.ВсегоПродаж = 0;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ВсегоПродаж = отчет.ВсегоПродаж + ВыборкаДетальныеЗаписи.кво;				
			КонецЦикла;                      	   	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ Продажи.Количество,
		|	Продажи.Сумма,
		|	Продажи.Период
		|ИЗ РегистрНакопления.Продажи КАК Продажи
		|ГДЕ Продажи.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Продажи.Активность = ИСТИНА ";
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Продажи.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Продажи.Период";
		
		отчет.ПроданоКоличество = 0;
		отчет.ПроданоНаСумму 	= 0;
		отчет.ПоследняяПродажа 	= '00010101000000';
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ПроданоКоличество = отчет.ПроданоКоличество  + ВыборкаДетальныеЗаписи.Количество;
				отчет.ПроданоНаСумму = отчет.ПроданоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				отчет.ПоследняяПродажа = ВыборкаДетальныеЗаписи.Период;
				
			КонецЦикла;           	
		КонецЕсли;
		
		Если отчет.ВсегоПродаж = 0 тогда
			отчет.СреднееКоличествоРеализации 	= 0;
			отчет.СредняяСуммаРеализации 		= 0;
			
		Иначе
			отчет.СреднееКоличествоРеализации 	= отчет.ПроданоКоличество / отчет.ВсегоПродаж;
			отчет.СредняяСуммаРеализации 		= отчет.ПроданоНаСумму / отчет.ВсегоПродаж;
		КонецЕсли;
		
		//ПОСТУПИЛО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.ВидДвижения = &приход
		|	И Товары.СписаниеИлиОприходование = ИСТИНА";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Запрос.УстановитьПараметр("приход", ВидДвиженияНакопления.Приход);
		
		ПоступилоКоличество 		= 0;
		ПоступилоТоваровНаСумму 	= 0;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПоступилоКоличество 		= ПоступилоКоличество + ВыборкаДетальныеЗаписи.Количество;	
				ПоступилоТоваровНаСумму 	= ПоступилоТоваровНаСумму + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;	
		КонецЕсли;
		отчет.ПоступилоКоличество 		= ПоступилоКоличество;
		отчет.ПоступилоТоваровНаСумму 	= ПоступилоТоваровНаСумму;
		
		//СПИСАНО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Товары.Количество КАК Количество,
		|	Товары.Сумма КАК Сумма
		|ИЗ РегистрНакопления.Товары КАК Товары
		|ГДЕ Товары.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Товары.Активность = ИСТИНА
		|	И Товары.СписаниеИлиОприходование = ИСТИНА
		|	И Товары.ВидДвижения = &Расход";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Товары.Склад = &Склад";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		
		СписаноКоличество = 0;
		СписаноНаСумму 	= 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СписаноКоличество 	= СписаноКоличество + ВыборкаДетальныеЗаписи.Количество;	
				СписаноНаСумму 		= СписаноНаСумму + ВыборкаДетальныеЗаписи.Сумма;
			КонецЦикла;          	
		КонецЕсли;
		отчет.СписаноКоличество = СписаноКоличество;
		отчет.СписаноНаСумму 	= СписаноНаСумму;
		
		//ЗАКУПКИ
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Закупки.Количество,
		|	Закупки.Сумма,
		|	Закупки.Период
		|ИЗ РегистрНакопления.Закупки КАК Закупки
		|ГДЕ Закупки.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
		|	И Закупки.Активность = ИСТИНА";
		
		Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " И Закупки.Регистратор.Склад = &Склад ";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Закупки.Период";
		
		отчет.КупленоКоличество = 0;
		отчет.КупленоНаСумму 	= 0;
		отчет.ПоследняяПокупка 	= '00010101000000';
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.КупленоКоличество = отчет.КупленоКоличество + ВыборкаДетальныеЗаписи.Количество;
				отчет.КупленоНаСумму 	= отчет.КупленоНаСумму + ВыборкаДетальныеЗаписи.Сумма;
				отчет.ПоследняяПокупка 	= ВыборкаДетальныеЗаписи.Период;
				
			КонецЦикла;	
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыОстатки.Номенклатура) КАК КвоПозиций,
		|	СУММА(ЕСТЬNULL(ТоварыОстатки.КоличествоОстаток,0)) КАК КоличествоОстаток,
		|	СУММА(ЕСТЬNULL(ТоварыОстатки.СуммаОстаток,0)) КАК СуммаОстаток
		|ИЗ РегистрНакопления.Товары.Остатки(&ДатаОстатка, ";
		
		Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
			Запрос.Текст = Запрос.Текст + " Склад = &Склад ) КАК ТоварыОстатки";
			Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
		Иначе
			Запрос.Текст = Запрос.Текст + ") КАК ТоварыОстатки";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
		
		отчет.ОстаткиТоваровКоличество  = 0;
		отчет.ОстаткиТоваровНаСумму 	= 0;
		отчет.КоличествоПозицийНоменклатурыВОстатках = 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если НЕ ВыборкаДетальныеЗаписи.КоличествоОстаток = NULL Тогда
					отчет.ОстаткиТоваровКоличество 	= отчет.ОстаткиТоваровКоличество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				КонецЕсли;
				Если НЕ ВыборкаДетальныеЗаписи.СуммаОстаток = NULL Тогда
					отчет.ОстаткиТоваровНаСумму 	= отчет.ОстаткиТоваровНаСумму + ВыборкаДетальныеЗаписи.СуммаОстаток;
				КонецЕсли;
				Если НЕ ВыборкаДетальныеЗаписи.КвоПозиций = NULL Тогда
					отчет.КоличествоПозицийНоменклатурыВОстатках = отчет.КоличествоПозицийНоменклатурыВОстатках + ВыборкаДетальныеЗаписи.КвоПозиций;
				КонецЕсли;											
			КонецЦикла;                                       	
		КонецЕсли;
		Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ОстаткиТоваровНаСумму;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ИспользоватьСложныйМеханизмЦенПС") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Цены.Период КАК Период
			|ИЗ РегистрСведений.Цены КАК Цены
			|ГДЕ Цены.Период <= &ДатаОкончанияОтчета
			|УПОРЯДОЧИТЬ ПО Период УБЫВ";
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Отчет.ПоследняяПереоценка = ВыборкаДетальныеЗаписи.Период;
				КонецЦикла;                                	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ВаловаяПрибыльОбороты.СуммаПриход ИЗ РегистрНакопления.ВаловаяПрибыль.Обороты(&ДатаНачалаОтчета, &ДатаОкончанияОтчета, , Склад = &Склад) КАК ВаловаяПрибыльОбороты";
			
			Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
				Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад = &Склад", "");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			отчет.ОбщаяВаловаяПрибыль = 0;
			
			РезультатЗапроса = Запрос.Выполнить();			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ОбщаяВаловаяПрибыль = отчет.ОбщаяВаловаяПрибыль + ВыборкаДетальныеЗаписи.СуммаПриход;
				КонецЦикла;                           	
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(ВаловаяПрибыль.ПроцентНаценки, 0) КАК ПроцентНаценки
			|ИЗ РегистрНакопления.ВаловаяПрибыль КАК ВаловаяПрибыль
			|ГДЕ ВаловаяПрибыль.Период МЕЖДУ &ДатаНачалаОтчета И &ДатаОкончанияОтчета
			|	И ВаловаяПрибыль.Склад = &Склад";
			
			Если ЗначениеЗаполнено(Отчет.ОтборПоСкладу) Тогда
				Запрос.УстановитьПараметр("Склад", Отчет.ОтборПоСкладу);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВаловаяПрибыль.Склад = &Склад", "");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаНачалаОтчета", ДатаНачалаОтчета);
			Запрос.УстановитьПараметр("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
			
			ЧислоНаценок = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СреднийПроцентНаценки  = 0;
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЧислоНаценок = ЧислоНаценок + 1;
					СреднийПроцентНаценки = СреднийПроцентНаценки + ВыборкаДетальныеЗаписи.ПроцентНаценки;
				КонецЦикла;	
			КонецЕсли;
			
			Если ЧислоНаценок = 0 Тогда
				отчет.СреднийПроцентНаценки = 0;
			Иначе
				отчет.СреднийПроцентНаценки = СреднийПроцентНаценки / ЧислоНаценок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоКлиентам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.Расчеты.Остатки(&ДатаОстатка, ) КАК РасчетыОстатки";
			
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			
			отчет.ТекущийДолгКлиентов = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ТекущийДолгКлиентов = отчет.ТекущийДолгКлиентов  + ВыборкаДетальныеЗаписи.суммаОстаток;
					
				КонецЦикла;	
			КонецЕсли;
			
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия + отчет.ТекущийДолгКлиентов;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РасчетыОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСОтсрочкой.Остатки(&ДатаОстатка, ) КАК РасчетыОстатки";
				
				Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
				
				отчет.ПросроченныйДолгКлиентов = 0;
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						отчет.ПросроченныйДолгКлиентов = отчет.ПросроченныйДолгКлиентов + ВыборкаДетальныеЗаписи.суммаОстаток;
						
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетПоПоставщикам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток
			|ИЗ РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатка, ) КАК РасчетыСПоставщикамиОстатки";
			
			Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
			
			отчет.ТекущийДолгПередПоставщиками = 0;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					отчет.ТекущийДолгПередПоставщиками = отчет.ТекущийДолгПередПоставщиками + ВыборкаДетальныеЗаписи.суммаОстаток;
				КонецЦикла;                                         	
			КонецЕсли;
			Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия - отчет.ТекущийДолгПередПоставщиками;
			
			Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетОтдельныхДоговоровСКонтрагентами") Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РасчетыСПоставщикамиОстатки.СуммаОстаток
				|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой.Остатки(&ДатаОстатка, ) КАК РасчетыСПоставщикамиОстатки";
				
				Запрос.УстановитьПараметр("ДатаОстатка", ДатаОкончанияОтчета);
				
				отчет.ПросроченныйДолгПередПоставщиками = 0;
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						отчет.ПросроченныйДолгПередПоставщиками = отчет.ПросроченныйДолгПередПоставщиками + ВыборкаДетальныеЗаписи.суммаОстаток;
					КонецЦикла;                                         	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;        	
	
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВестиУчетЗарплатыСотрудников") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ЗарплатаОстаткиИОбороты.СуммаПриход,
		|	ЗарплатаОстаткиИОбороты.СуммаРасход,
		|	ЗарплатаОстаткиИОбороты.СуммаКонечныйОстаток
		|ИЗ РегистрНакопления.Зарплата.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, , , ) КАК ЗарплатаОстаткиИОбороты";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтчета);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияОтчета);
		
		отчет.ВыданоСотрудникам 		= 0;
		отчет.НачисленоСотрудникам 		= 0;
		отчет.ЗадолженностьСотрудникам 	= 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ВыданоСотрудникам 		= отчет.ВыданоСотрудникам + ВыборкаДетальныеЗаписи.СуммаРасход;
				отчет.НачисленоСотрудникам 		= отчет.НачисленоСотрудникам + ВыборкаДетальныеЗаписи.СуммаПриход;
				отчет.ЗадолженностьСотрудникам 	= отчет.ЗадолженностьСотрудникам + ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЦикла;                     	
		КонецЕсли;
		
		Отчет.ЦенаПредприятия = Отчет.ЦенаПредприятия - отчет.ЗадолженностьСотрудникам;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ДвиженияДенег.Дата КАК Дата
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.НачислениеИВыплатаЗаработнойПлаты = ИСТИНА
		|	И ДвиженияДенег.Проведен = ИСТИНА
		|УПОРЯДОЧИТЬ ПО Дата УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				отчет.ПоследнийРасчет = ВыборкаДетальныеЗаписи.дата;
			КонецЦикла;                                            	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отчет;
	
КонецФункции

Функция   СформироватьТаблицуОстатков(Знач ссылка, Знач Склад = Неопределено, Знач Дата, Знач ОстаткиСледуетПроверять = ИСТИНА) Экспорт
	
	Если ОстаткиСледуетПроверять
		И ЗначениеЗаполнено(ссылка) Тогда //иначе зачем
		
		Запрос = Новый Запрос;
		
		Если склад = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(склад) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(&Дата, Номенклатура В (&всяНоменклатура)) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
		Иначе      			
			Запрос.Текст = "ВЫБРАТЬ ТоварыОстатки.Номенклатура КАК Номенклатура,
			|	СУММА(ТоварыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
			|	СУММА(ТоварыОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор КАК ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный КАК Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток КАК НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры
			|ИЗ РегистрНакопления.Товары.Остатки(
			|			&Дата,
			|			Номенклатура В (&всяНоменклатура)
			|				И Склад = &Склад) КАК ТоварыОстатки
			|СГРУППИРОВАТЬ ПО ТоварыОстатки.Номенклатура,
			|	ТоварыОстатки.Номенклатура.ЭтоНабор,
			|	ТоварыОстатки.Номенклатура.Предопределенный,
			|	ТоварыОстатки.Номенклатура.НеОтслеживатьОстаток,
			|	ТоварыОстатки.СерияНоменклатуры"; 
			
			Запрос.УстановитьПараметр("Склад", Склад);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("всяНоменклатура", ссылка.товары.выгрузитьколонку("номенклатура"));
		Запрос.УстановитьПараметр("Дата", Дата);
		
		результат = Запрос.Выполнить();
		
		Если результат.Пустой() Тогда
			
			ТаблицаОтвета = Новый ТаблицаЗначений;
			ТаблицаОтвета.Колонки.Добавить("Номенклатура");
			ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
			
		Иначе               			
			ТаблицаОтвета = результат.Выгрузить();
			
		КонецЕсли;
		
	Иначе      		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Номенклатура");
		ТаблицаОтвета.Колонки.Добавить("СерияНоменклатуры");
		
	КонецЕсли;
	
	возврат ТаблицаОтвета;
	
КонецФункции //СформироватьТаблицуОстатков

Процедура УдалитьВсеЗависимыеЦены(Знач номенклатура, Знач ВидЦен, Знач Период) Экспорт
	
	СтрокаТовара = Новый структура;
	СтрокаТовара.Вставить("номенклатура", Номенклатура);
	СтрокаТовара.Вставить("цена", 0);
	
	УстановитьЦенуИВсеЗависимые(ВидЦен, СтрокаТовара, , , Период, ИСТИНА, , ИСТИНА, , ИСТИНА);
	
КонецПроцедуры //УдалитьВсеЗависимыеЦены(Источник.Отбор.номенклатура, Источник.Отбор.ВидЦен, Источник.Отбор.Период);

Процедура УдалитьСвязанныеЦены(Знач Ссылка) Экспорт
	
	ОтборПоДокументу = Новый Структура;
	ОтборПоДокументу.Вставить("ДокументРегистрации", Ссылка);
	
	Выборка = РегистрыСведений.Цены.Выбрать(,, ОтборПоДокументу);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция   УКонтрагентаЕстьДокументы(Знач Контрагент, Знач ОпределенныйВидДокументов = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(ОпределенныйВидДокументов) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщиками.Поставщик
		|ИЗ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ РасчетыСПоставщиками.Поставщик = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Расчеты.Клиент
		|ИЗ РегистрНакопления.Расчеты КАК Расчеты
		|ГДЕ Расчеты.Клиент = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщикамиСОтсрочкой.Поставщик
		|ИЗ РегистрНакопления.РасчетыСПоставщикамиСОтсрочкой КАК РасчетыСПоставщикамиСОтсрочкой
		|ГДЕ РасчетыСПоставщикамиСОтсрочкой.Поставщик = &Контрагент
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСОтсрочкой.Клиент
		|ИЗ РегистрНакопления.РасчетыСОтсрочкой КАК РасчетыСОтсрочкой
		|ГДЕ РасчетыСОтсрочкой.Клиент = &Контрагент";
		
	ИначеЕсли ОпределенныйВидДокументов = "ЗаказыКлиента" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыКлиентов.Клиент
		|ИЗ РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
		|ГДЕ ЗаказыКлиентов.Клиент = &Контрагент";
		
	ИначеЕсли ОпределенныйВидДокументов = "ЗаказыПоставщика" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЗаказыПоставщикам.Поставщик
		|ИЗ РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ГДЕ ЗаказыПоставщикам.Поставщик = &Контрагент";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции //УКонтрагентаЕстьДокументы

Функция   УНоменклатурыЕстьАналоги(Знач Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ГруппыАналоговТовары.Ссылка
	|ИЗ Справочник.ГруппыАналогов.Товары КАК ГруппыАналоговТовары
	|ГДЕ ГруппыАналоговТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ГруппыАналоговТовары.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции //УНоменклатурыЕстьАналоги

Функция   УНоменклатурыЕстьЕдиницыИзмерения(Знач Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ЕдиницыИзмерения.Ссылка
	|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ ЕдиницыИзмерения.Владелец = &Номенклатура
	|	И ЕдиницыИзмерения.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции 

Функция   ЧислоДоговоровСКонтрагентом(Знач Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат 0;
		
	Иначе		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.КлиентПоставщик = &Контрагент
		|	И Договора.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		РезультатЧислоДоговоровСКонтрагентом = 0;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				РезультатЧислоДоговоровСКонтрагентом = РезультатЧислоДоговоровСКонтрагентом + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;	
		КонецЕсли;
		
		Возврат РезультатЧислоДоговоровСКонтрагентом;
	КонецЕсли;
	
КонецФункции //ЧислоДоговоровСКонтрагентом

Функция   ЧислоДоговоровСЮрЛицом(Знач ЮрЛицо) Экспорт
	
	Результат = 0;
	
	Если ЗначениеЗаполнено(ЮрЛицо) Тогда
		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договора.Ссылка) КАК Ссылка
		|ИЗ Справочник.Договора КАК Договора
		|ГДЕ Договора.ПометкаУдаления = ЛОЖЬ
		|	И Договора.Организация = &ЮрЛицо";
		
		Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Результат = Результат + ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЧислоДоговоровСЮрЛицом

Процедура СформироватьПланФактныйОтчетНаСервере(Знач ДокументПланПродаж, Результат) Экспорт
	
	ТаблицаРезультат = ДокументПланПродаж.Товары.Выгрузить();	
	ТаблицаРезультат.Колонки.Добавить("СуммаПродаж");
	ТаблицаРезультат.Колонки.Добавить("СуммаВыполнено");
	ТаблицаРезультат.Колонки.Добавить("КоличествоПродаж");
	ТаблицаРезультат.Колонки.Добавить("КоличествоВыполнено");
	ТаблицаРезультат.Колонки.Добавить("ДокументПланПродаж");	
	
	ДатаНачала 	  = НачалоДня(ДокументПланПродаж.ДатаНачала);
	ДатаОкончания = КонецДня(ДокументПланПродаж.ДатаОкончания); 
	
	Для Каждого СтрокаПлана Из ТаблицаРезультат Цикл
		СтрокаПлана.СуммаПродаж = 0;
		СтрокаПлана.КоличествоПродаж = 0;
		СтрокаПлана.КоличествоВыполнено = 0;
		СтрокаПлана.ДокументПланПродаж = ДокументПланПродаж.Ссылка;
		
		СтрокаПланаНоменклатураИлиГруппа = СтрокаПлана.НоменклатураИлиГруппа;
		Если ЗначениеЗаполнено(СтрокаПланаНоменклатураИлиГруппа) Тогда
			СтрокаПлана.СуммаПродаж = 0;
			СтрокаПлана.КоличествоПродаж = 0;
			СтрокаПлана.СуммаВыполнено = 0;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПродажиОбороты.КоличествоОборот КАК Количество,
			|	ПродажиОбороты.СуммаОборот КАК Сумма,
			|	ПродажиОбороты.Номенклатура КАК Номенклатура
			|ИЗ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ПродажиОбороты
			| ГДЕ ";
			
			Если ТипЗнч(СтрокаПланаНоменклатураИлиГруппа) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Запрос.Текст = Запрос.Текст + "	ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппа ";
				Запрос.УстановитьПараметр("НоменклатурнаяГруппа", СтрокаПланаНоменклатураИлиГруппа);
			ИначеЕсли СтрокаПланаНоменклатураИлиГруппа.ЭтоГруппа Тогда
				Запрос.Текст = Запрос.Текст + "	ПродажиОбороты.Номенклатура В ИЕРАРХИИ(&ГруппаНоменклатуры) ";
				Запрос.УстановитьПараметр("ГруппаНоменклатуры", СтрокаПланаНоменклатураИлиГруппа);
			Иначе
				Запрос.Текст = Запрос.Текст + "	ПродажиОбороты.Номенклатура = &Номенклатура ";
				Запрос.УстановитьПараметр("Номенклатура", СтрокаПланаНоменклатураИлиГруппа);
			КонецЕсли; 
			
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				СтрокаПлана.СуммаПродаж = СтрокаПлана.СуммаПродаж + ВыборкаДетальныеЗаписи.Сумма;
				СтрокаПлана.КоличествоПродаж = СтрокаПлана.КоличествоПродаж + ВыборкаДетальныеЗаписи.Количество;
				
				Если НЕ СтрокаПлана.Количество = 0 Тогда
					СтрокаПлана.КоличествоВыполнено = СтрокаПлана.КоличествоПродаж / (СтрокаПлана.Количество / 100);
				Иначе
					СтрокаПлана.КоличествоВыполнено = 100;
				КонецЕсли;
				Если НЕ СтрокаПлана.Сумма = 0 Тогда
					СтрокаПлана.СуммаВыполнено = СтрокаПлана.СуммаПродаж / (СтрокаПлана.Сумма / 100);
				Иначе
					СтрокаПлана.СуммаВыполнено = 100;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла; 	 	
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаРезультат", ТаблицаРезультат); 
	
	Попытка	
		ПланФактныйАнализПродаж = Неопределено;
		Выполнить(" ПланФактныйАнализПродаж = Отчеты.ПланФактныйАнализПродаж.Создать(); "); //для бесплатной
		Схема 	  = ПланФактныйАнализПродаж.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
		Настройки = ПланФактныйАнализПродаж.КомпоновщикНастроек.Настройки;    
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет = Компоновщик.Выполнить(Схема,Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
		ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);		
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьПроизвольныйОтчетНаСервере(Знач ТаблицаПараметров, Результат, Знач НаименованиеОтчета) Экспорт
	
	Попытка	
		
		Отчет 	  = Отчеты[НаименованиеОтчета].Создать();
		Схема 	  = Отчеты[НаименованиеОтчета].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");		
		Настройки = Отчет.КомпоновщикНастроек.Настройки;
		
		Для Каждого СтрокаНастроек Из ТаблицаПараметров Цикл
			Попытка
				Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(СтрокаНастроек.НаименованиеПараметра, СтрокаНастроек.ЗначениеПараметра);				
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ДанныеРасшифровки 	= Новый ДанныеРасшифровкиКомпоновкиДанных;		
		Компоновщик 		= Новый КомпоновщикМакетаКомпоновкиДанных;
		Макет 				= Компоновщик.Выполнить(Схема,Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
		ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);		
		
	Исключение 	
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка") + ": " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
	
КонецПроцедуры

Функция   ПроверитьСменитьПараметрДенег(Знач ПараметрХранилища, Знач ВалютаИлиХранилище, Знач ЭтоФормаОплаты = ЛОЖЬ) Экспорт
	
	Результат = ПараметрХранилища;
	
	Если ЭтоФормаОплаты Тогда
		Если ЗначениеЗаполнено(ВалютаИлиХранилище)
			И (НЕ ЗначениеЗаполнено(ПараметрХранилища)
			ИЛИ НЕ ПараметрХранилища = ВалютаИлиХранилище.ФормаОплаты) Тогда
			
			Результат = ВалютаИлиХранилище.ФормаОплаты;
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(ВалютаИлиХранилище)
			И (НЕ ЗначениеЗаполнено(ПараметрХранилища)
			ИЛИ НЕ ВалютаИлиХранилище = ПараметрХранилища.Валюта) Тогда
			
			Результат = ОбщийМодульПовтор.ПолучитьАвтоХранилищеДенегПоВалюте(ВалютаИлиХранилище, ПараметрХранилища);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ПроверитьСменитьХранилищеДенег

Функция   ПолучитьСписокИзМетаданных(Знач ЭтоСправочник = ЛОЖЬ) Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьСписокИзМетаданных(ЭтоСправочник);
КонецФункции //ПолучитьСписокИзМетаданных

Процедура ПечатьДокументаПКО(ТабДок, Знач Ссылка) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПКОРоссии");	
	
	Ссылка1 = Ссылка[0];
	Если ТипЗнч(Ссылка1) = Тип("ДокументСсылка.ДвиженияДенег") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДвиженияДенег.Дата,
		|	ДвиженияДенег.КлиентПоставщик КАК Контрагент,
		|	ДвиженияДенег.Статья,
		|	ДвиженияДенег.Сумма,
		|	ДвиженияДенег.Комментарий,
		|	ДвиженияДенег.Валюта,
		|	ДвиженияДенег.Организация,
		|	ДвиженияДенег.Договор,
		|	ДвиженияДенег.ХранилищеДенег,
		|	ДвиженияДенег.Заказ,
		|	ДвиженияДенег.Номер
		|ИЗ Документ.ДвиженияДенег КАК ДвиженияДенег
		|ГДЕ ДвиженияДенег.Ссылка В(&Ссылка)";
		
		Контрагент = Ссылка1.КлиентПоставщик;
		
	ИначеЕсли ТипЗнч(Ссылка1) = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	"""" + &ВыполненныеРаботы КАК Статья,
		|	СУММА(ВыполненияРаботОплаты.Сумма) КАК Сумма,
		|	ВыполненияРаботОплаты.Ссылка.Номер,
		|	ВыполненияРаботОплаты.Ссылка.Дата,
		|	ВыполненияРаботОплаты.Ссылка.Клиент КАК Контрагент,
		|	ВыполненияРаботОплаты.Ссылка.Организация,
		|	ВыполненияРаботОплаты.Ссылка.Договор,
		|	ВыполненияРаботОплаты.Ссылка.ЗаказКлиента КАК Заказ,
		|	ВыполненияРаботОплаты.Ссылка.ХранилищеДенег,
		|	ВыполненияРаботОплаты.Ссылка.Комментарий,
		|	ВыполненияРаботОплаты.Ссылка.Валюта
		|ИЗ
		|	Документ.ВыполненияРабот.Оплаты КАК ВыполненияРаботОплаты
		|ГДЕ
		|	ВыполненияРаботОплаты.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыполненияРаботОплаты.Ссылка.Номер,
		|	ВыполненияРаботОплаты.Ссылка.Дата,
		|	ВыполненияРаботОплаты.Ссылка.Клиент,
		|	ВыполненияРаботОплаты.Ссылка.Организация,
		|	ВыполненияРаботОплаты.Ссылка.Договор,
		|	ВыполненияРаботОплаты.Ссылка.ЗаказКлиента,
		|	ВыполненияРаботОплаты.Ссылка.ХранилищеДенег,
		|	ВыполненияРаботОплаты.Ссылка.Комментарий,
		|	ВыполненияРаботОплаты.Ссылка.Валюта";
		
		Запрос.Параметры.Вставить("ВыполненныеРаботы", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Выполненные работы"));
		Контрагент = Ссылка1.Клиент;
		
	ИначеЕсли ТипЗнч(Ссылка1) = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОказанияУслугЗаВремя.Дата,
		|	ОказанияУслугЗаВремя.Комментарий,
		|	ОказанияУслугЗаВремя.Валюта,
		|	ОказанияУслугЗаВремя.Организация,
		|	ОказанияУслугЗаВремя.Договор,
		|	ОказанияУслугЗаВремя.ХранилищеДенег,
		|	ОказанияУслугЗаВремя.Номер,
		|	ОказанияУслугЗаВремя.ТовараНаСумму КАК Сумма,
		|	ОказанияУслугЗаВремя.Клиент КАК Контрагент,
		|	ОказанияУслугЗаВремя.Номенклатура КАК Статья,
		|	ОказанияУслугЗаВремя.ПозицияНомер КАК Заказ
		|ИЗ
		|	Документ.ОказанияУслугЗаВремя КАК ОказанияУслугЗаВремя
		|ГДЕ
		|	ОказанияУслугЗаВремя.Ссылка В(&Ссылка)";
		Контрагент = Ссылка1.Клиент;
		
	ИначеЕсли ТипЗнч(Ссылка1) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ОтчетКомиссионераДеньгиЗаТовар.Сумма) КАК Сумма,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Номер,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Дата,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Клиент КАК Контрагент,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Договор,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Комментарий,
		|	"""" + &ЗаРеализованныйТовар КАК Статья,
		|	"""" КАК Заказ,
		|	&Валюта,
		|	&ХранилищеДенег,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Организация
		|ИЗ
		|	Документ.ОтчетКомиссионера.ДеньгиЗаТовар КАК ОтчетКомиссионераДеньгиЗаТовар
		|ГДЕ
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Номер,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Дата,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Клиент,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Договор,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Комментарий,
		|	ОтчетКомиссионераДеньгиЗаТовар.Ссылка.Организация";
		
		Запрос.Параметры.Вставить("ЗаРеализованныйТовар", ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("За реализованный товар"));
		Запрос.Параметры.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта"));
		Запрос.Параметры.Вставить("ХранилищеДенег", ПредопределенноеЗначение("Справочник.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте"));
		Контрагент = Ссылка1.Клиент;
		
	Иначе
		//	ИначеЕсли ТипЗнч(Ссылка1) = Тип("ДокументСсылка.РасходыТовара") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РасходыТовара.Дата,
		|	РасходыТовара.Комментарий,
		|	РасходыТовара.Валюта,
		|	РасходыТовара.Организация,
		|	РасходыТовара.Договор,
		|	РасходыТовара.ХранилищеДенег,
		|	РасходыТовара.Номер,
		|	РасходыТовара.ТовараНаСумму КАК Сумма,
		|	РасходыТовара.ЗаказКлиента КАК Заказ,
		|	РасходыТовара.КлиентПоставщик КАК Контрагент,
		|	"""" + &ЗаТоварИлиУслугу КАК Статья
		|ИЗ
		|	Документ.РасходыТовара КАК РасходыТовара
		|ГДЕ
		|	РасходыТовара.Ссылка В(&Ссылка)";
		
		Запрос.Параметры.Вставить("ЗаТоварИлиУслугу", "");
		Контрагент = Ссылка1.КлиентПоставщик;
	КонецЕсли;
	
	Макет.КодЯзыкаМакета = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(Контрагент);
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();
	
	ВставлятьРазделительСтраниц = ЛОЖЬ;
	
	Пока Выборка.Следующий() Цикл
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
			И ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			ОбщийМодульСервер.ДобавитьШапкуОрганизации(ТабДок, Выборка.Организация);
		КонецЕсли;
		
		Шапка.Параметры.Заполнить(Выборка);
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			Если НЕ ПустаяСтрока(Выборка.Контрагент.НаименованиеДляПечати) Тогда
				Шапка.Параметры.КонтрагентПолноеНаименование = Выборка.Контрагент.НаименованиеДляПечати;	
			Иначе
				Шапка.Параметры.КонтрагентПолноеНаименование = Выборка.Контрагент;
			КонецЕсли;
		Иначе
			Шапка.Параметры.КонтрагентПолноеНаименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Частное лицо");
		КонецЕсли;
		
		Организация = Выборка.Организация;
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");	
		КонецЕсли;
		
		Шапка.Параметры.ГлавныйБухгалтер = Организация.ГлавныйБухгалтер;
		Шапка.Параметры.ОКПО = Организация.ОКПО;
		Если ЗначениеЗаполнено(Организация.НаименованиеДляПечати) Тогда
			Шапка.Параметры.НаименованиеПредприятия = Организация.НаименованиеДляПечати;
		Иначе
			Шапка.Параметры.НаименованиеПредприятия = Организация;
		КонецЕсли;
		
		Шапка.Параметры.СуммаСтрокой = формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧГ=3,0") + " " + СокрЛП(Выборка.Валюта);
		Шапка.Параметры.СуммаТекстом = ОбщийМодульТекстСервер.СформироватьСуммуПрописью(Выборка.Сумма, Выборка.Валюта);
		
		//СтруктураДополнительныПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
		//Если НЕ ОбщийМодульПовтор.ПолучитьПараметрСеанса("ВестиУчетСобственныхЮридическихЛицПС")
		//	ИЛИ не ЗначениеЗаполнено(Выборка.Организация) Тогда
		//	
		//	Шапка.Параметры.ТекстВШапкеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВШапкеДокументовПриПечати;	
		//иначе
		//	Шапка.Параметры.ТекстВШапкеДокументовПриПечати = "";
		//КонецЕсли;
		//Шапка.Параметры.ТекстВПодвалеДокументовПриПечати = СтруктураДополнительныПараметровМакета.ТекстВПодвалеДокументовПриПечати;
		
		ХранилищеДенег = Выборка.ХранилищеДенег;
		Если ЗначениеЗаполнено(ХранилищеДенег)
			И ЗначениеЗаполнено(ХранилищеДенег.ОтветственныйСотрудник) Тогда
			
			Шапка.Параметры.ОсновнойКассир = ХранилищеДенег.ОтветственныйСотрудник;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Организация) Тогда
			Шапка.Параметры.ОсновнойКассир = Выборка.Организация.ОсновнойКассир;
		КонецЕсли;
		
		ТабДок.Вывести(Шапка, Выборка.Уровень());
		ВставлятьРазделительСтраниц = ИСТИНА;
	КонецЦикла;
	
КонецПроцедуры

Функция   ЕдиницаПринадлежитНоменклатуре(Знач Номенклатура, Знач ЕдиницаИзмерения) Экспорт
	Возврат ЕдиницаИзмерения.Владелец = Номенклатура;	
КонецФункции //ЕдиницаПринадлежитНоменклатуре

Процедура ЗадатьНаименованияОбъектамНаДругомЯзыке() Экспорт
	
	ЭлементСправочника = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	Если ЭлементСправочника.Наименование = "Основное предприятие" Тогда
		ЭлементСправочника = ЭлементСправочника.ПолучитьОбъект();
		ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();                                     	
	КонецЕсли;
	
	//Для Счетчик = 1 по 10 Цикл
	//	Выполнить(" ЭлементСправочника = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
	//	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	//	ЭлементСправочника.Записать();	
	//КонецЦикла;
	
	ЭлементСправочника = Справочники.ХранилищаДенег.ОсновнаяКассаВОсновнойВалюте.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.ЗаметкиИНапоминания.РезервированиеКаталогаБазыДанных.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Валюты.ОсновнаяВалюта.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.ВидыЦен.ГлавныйВидЦен.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.ВалютаЦены   = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Клиенты.ФизическоеЛицо.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Спецификации.Архив.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Спецификаций для комплектации");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Клиенты.Архив.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Клиентов");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Договора.Архив.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Договоров");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Поставщики.ФизическоеЛицо.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Поставщики.Архив.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальных Поставщиков");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Склады.ОсновнойСклад.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Склады.ТоварыВПути.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не используйте этот Склад для поступлений и реализаций!");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.ГигиеническоеЗаключениеОбыкновенное.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.ИнформационноеПисьмо.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.ВидыДокументаСертификатаИлиГигиеническогоЗаключения.СертификатОбыкновенный.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	СтатьиДвиженияДенег = Справочники.СтатьиДвиженияДенег.Выбрать();		
	Пока СтатьиДвиженияДенег.Следующий() Цикл
		ЭлементСправочника = СтатьиДвиженияДенег.ПолучитьОбъект();
		ЭлементСправочника.Наименование = "" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();	
	КонецЦикла;
	
	ФормулыОписания = Справочники.ФормулыОписания.Выбрать();		
	Пока ФормулыОписания.Следующий() Цикл
		ЭлементСправочника = ФормулыОписания.ПолучитьОбъект();
		ЭлементСправочника.Наименование = "" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
		ЭлементСправочника.Записать();	
	КонецЦикла;
	
	ЭлементСправочника = Справочники.Регионы.НашРегион.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Номенклатура.Архив.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Для неактуальной Номенклатуры");
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Номенклатура.ТоварНаСумму.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Номенклатура.УслугиНаСумму.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ЭлементСправочника = Справочники.Номенклатура.ПроблемыЗагрузки.ПолучитьОбъект();
	ЭлементСправочника.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ЭлементСправочника.Наименование);
	ЭлементСправочника.Записать();
	
	ПолеШаблона = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Выбрать();
	Пока ПолеШаблона.Следующий() Цикл			
		
		Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ПолеШаблона.Наименование);
		Комментарий  = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ПолеШаблона.Комментарий);
		
		Если НЕ Комментарий = ПолеШаблона.Комментарий
			ИЛИ НЕ Наименование = ПолеШаблона.Наименование Тогда
			
			ПолеШаблонаОбъект = ПолеШаблона.ПолучитьОбъект();
			ПолеШаблонаОбъект.Наименование = Наименование;
			ПолеШаблонаОбъект.Комментарий = Комментарий;
			ПолеШаблонаОбъект.Записать();
		КонецЕсли;			
	КонецЦикла; //Выборка спр ПолеШаблона
	
	ВидХарактеристик = ПланыВидовХарактеристик.НастройкиПользователей.Выбрать();
	Пока ВидХарактеристик.Следующий() Цикл
		ОбъектХарактеристика = ВидХарактеристик.ПолучитьОбъект();
		ОбъектХарактеристика.Наименование = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВидХарактеристик.Наименование);
		ОбъектХарактеристика.Записать();
	КонецЦикла;
	
	ДополнительныйРеквизитСправочникаКлиентов = Неопределено;
	Для Счетчик = 1 по 10 Цикл 
		Выполнить(" ДополнительныйРеквизитСправочникаКлиентов = Справочники.ДополнительныеРеквизиты.ДополнительныйРеквизитСправочникаКлиентов" + СокрЛП(Счетчик) + ".ПолучитьОбъект();");
		ДополнительныйРеквизитСправочникаКлиентов.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дополнительный реквизит справочника Клиентов") + " №" + СокрЛП(Счетчик);
		ДополнительныйРеквизитСправочникаКлиентов.НаименованиеОбъектаВладельца = ДополнительныйРеквизитСправочникаКлиентов.Комментарий;
		ДополнительныйРеквизитСправочникаКлиентов.ЭтоРеквизитДляОбъекта = Перечисления.ОбъектыДляДополнительныхРеквизитов.ДляКарточкиСправочникаКлиенты;
		ДополнительныйРеквизитСправочникаКлиентов.Записать();	
	КонецЦикла;
	
КонецПроцедуры

Функция   НайтиПоТелефону(Знач Телефон, Знач ИмяСправочника = "Клиенты", Знач ТочноеСоотвествие = ЛОЖЬ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + ИмяСправочника + ".Ссылка
	|ИЗ Справочник." + ИмяСправочника + " КАК " + ИмяСправочника + "
	|ГДЕ " + ИмяСправочника + ".Телефон " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Телефон
	| ИЛИ " + ИмяСправочника + ".Телефон2 " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Телефон 
	| ИЛИ " + ИмяСправочника + ".Телефон3 " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Телефон 
	| ИЛИ " + ИмяСправочника + ".Телефон4 " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Телефон 
	| ИЛИ " + ИмяСправочника + ".Телефон5 " + ?(ТочноеСоотвествие, " = ", " ПОДОБНО ") + "&Телефон 
	|";
	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ результатзапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ссылка;
		
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции //НайтиПоТелефону

Функция   СоздатьНовыйИлиНайтиЭлементДокумент(Знач ЭтоСправочник = ИСТИНА, Знач НаименованиеВида = "Номенклатура", Знач ПервоначальноеНаименованиеСправочника = "", Знач ЭтоГруппа = ЛОЖЬ) Экспорт
	
	Если ЭтоСправочник Тогда
		
		Если НЕ ЗначениеЗаполнено(ПервоначальноеНаименованиеСправочника) Тогда
			ПервоначальноеНаименованиеСправочника = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Новый") + " ";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Клиенты.Ссылка
		|ИЗ Справочник.Клиенты КАК " + НаименованиеВида + "	ГДЕ
		|	" + НаименованиеВида + ".Наименование = &Наименование ";
		Если ЭтоГруппа Тогда
			Запрос.Текст = Запрос.Текст + " И " + НаименованиеВида + ".ЭтоГруппа = ИСТИНА";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Наименование", ПервоначальноеНаименованиеСправочника);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Если ЭтоГруппа Тогда
				НовыйЭлементИлиДокумент = Справочники[НаименованиеВида].СоздатьГруппу();	
			Иначе
				НовыйЭлементИлиДокумент = Справочники[НаименованиеВида].СоздатьЭлемент();	
			КонецЕсли;
			НовыйЭлементИлиДокумент.Наименование = ПервоначальноеНаименованиеСправочника;
			
			НовыйЭлементИлиДокумент.Записать();
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			НовыйЭлементИлиДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли
		
	Иначе
		НовыйЭлементИлиДокумент = Документы[НаименованиеВида].СоздатьДокумент();
		НовыйЭлементИлиДокумент.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат НовыйЭлементИлиДокумент.Ссылка;
	
КонецФункции //СоздатьНовыйЭлемент

Процедура ОчиститьУпоминаниеОбЕдиницахИзмерения() Экспорт
	
	ПустаяЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Цены.Период,
	|	Цены.ВидЦен,
	|	Цены.Номенклатура,
	|	Цены.ЕдиницаИзмерения,
	|	Цены.Цена,
	|	Цены.ДокументРегистрации,
	|	Цены.Комментарий,
	|	Цены.Вручную,
	|	Цены.Ответственный,
	|	Цены.ДатаСоздания,
	|	Цены.ДатаРедакции
	|ИЗ РегистрСведений.Цены КАК Цены
	|ГДЕ Цены.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.Цены.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписейРегистра.Отбор.ВидЦен.Установить(ВыборкаДетальныеЗаписи.ВидЦен);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);	
		
		ЗаписьРегистра = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Период,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Номенклатура,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ЕдиницаИзмерения,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Цена,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Комментарий,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.Ответственный,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ДатаСоздания,
	|	СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ДатаРедакции
	|ИЗ РегистрСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг КАК СебестоимостьТоваровБезКоличественногоУчетаИУслуг
	|ГДЕ СебестоимостьТоваровБезКоличественногоУчетаИУслуг.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);	
		
		ЗаписьРегистра = РегистрыСведений.СебестоимостьТоваровБезКоличественногоУчетаИУслуг.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ШтрихКоды.ШтрихКод,
	|	ШтрихКоды.Номенклатура,
	|	ШтрихКоды.ТипШтрихКода,
	|	ШтрихКоды.СерияНоменклатуры,
	|	ШтрихКоды.ЕдиницаИзмерения,
	|	ШтрихКоды.Ответственный,
	|	ШтрихКоды.ДатаСоздания,
	|	ШтрихКоды.ДатаРедакции
	|ИЗ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	|ГДЕ ШтрихКоды.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.ШтрихКоды.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.ШтрихКод.Установить(ВыборкаДетальныеЗаписи.ШтрихКод);
		НаборЗаписейРегистра.Отбор.ТипШтрихКода.Установить(ВыборкаДетальныеЗаписи.ТипШтрихКода);
		НаборЗаписейРегистра.Отбор.СерияНоменклатуры.Установить(ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);		
		
		ЗаписьРегистра = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ДополнительныеШтрихКоды.ШтрихКод,
	|	ДополнительныеШтрихКоды.Номенклатура,
	|	ДополнительныеШтрихКоды.ТипШтрихКода,
	|	ДополнительныеШтрихКоды.СерияНоменклатуры,
	|	ДополнительныеШтрихКоды.ЕдиницаИзмерения,
	|	ДополнительныеШтрихКоды.ДействуетСДаты,
	|	ДополнительныеШтрихКоды.ДействуетПоДату,
	|	ДополнительныеШтрихКоды.Ответственный,
	|	ДополнительныеШтрихКоды.ДатаСоздания,
	|	ДополнительныеШтрихКоды.ДатаРедакции
	|ИЗ РегистрСведений.ДополнительныеШтрихКоды КАК ДополнительныеШтрихКоды
	|ГДЕ ДополнительныеШтрихКоды.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ПустаяЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
		НаборЗаписейРегистра.Отбор.ШтрихКод.Установить(ВыборкаДетальныеЗаписи.ШтрихКод);
		НаборЗаписейРегистра.Отбор.ТипШтрихКода.Установить(ВыборкаДетальныеЗаписи.ТипШтрихКода);
		НаборЗаписейРегистра.Отбор.СерияНоменклатуры.Установить(ВыборкаДетальныеЗаписи.СерияНоменклатуры);
		НаборЗаписейРегистра.Отбор.ЕдиницаИзмерения.Установить(ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		НаборЗаписейРегистра.Записать(ИСТИНА);		
		
		ЗаписьРегистра = РегистрыСведений.ДополнительныеШтрихКоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДетальныеЗаписи);
		ЗаписьРегистра.ЕдиницаИзмерения = ПустаяЕдиницаИзмерения;
		ЗаписьРегистра.Записать(ИСТИНА);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ЕдиницыИзмерения.Ссылка
	|ИЗ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокСсылокНаЕдиницыИзмерения = Новый Массив;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокСсылокНаЕдиницыИзмерения.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
СписокСсылокНаЕдиницыИзмеренияКоличество = СписокСсылокНаЕдиницыИзмерения.Количество();
		Если НЕ СписокСсылокНаЕдиницыИзмерения.Количество() = 0 Тогда
			попытка
				УстановитьМонопольныйРежим(ИСТИНА);
				УдалитьОбъекты(СписокСсылокНаЕдиницыИзмерения, ИСТИНА);		
				УстановитьМонопольныйРежим(ЛОЖЬ);
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Удалено ссылок") + ": " + СокрЛП(СписокСсылокНаЕдиницыИзмеренияКоличество));
			исключение
				Сообщить(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Монопольный режим недоступен. Очистка не произошла."));
			конецпопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьТекстТелефонов(Знач ФизическоеИлиЮридическоеЛицо) Экспорт
	
	Если ЗначениеЗаполнено(ФизическоеИлиЮридическоеЛицо) Тогда
		ПолныйНомерТелефона = ФизическоеИлиЮридическоеЛицо.Телефон;
		Для НомерТелефона = 2 по 5 Цикл
			ЭтотНомерТелефона = ФизическоеИлиЮридическоеЛицо["Телефон" + СокрЛП(НомерТелефона)];
			Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
				ПолныйНомерТелефона = ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ПолныйНомерТелефона = "";		
	КонецЕсли;	
	
	Возврат ПолныйНомерТелефона;
	
КонецФункции //ПолучитьТекстТелефонов

Функция   СоздатьДокументСторно(Знач ОбъектСсылка, Знач Причина) Экспорт
	
	Отказ = ОбщийМодульСервисСервер.ПроверитьОтказДоступа("002460", , , ОбъектСсылка);
	
	Если НЕ Отказ Тогда
		Результат = ОбъектСсылка.Скопировать();
		Результат.Сторный = Истина;
		Результат.ДокументСторно = ОбъектСсылка;
		Результат.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		
		ТипЗнчОбъектСсылка = ТипЗнч(ОбъектСсылка);
		РежимПроведенияДокументаНеоперативный = ТипЗнчОбъектСсылка = Тип("ДокументСсылка.Инвентаризации")
		ИЛИ ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ВыполненияРабот")
		ИЛИ ТипЗнчОбъектСсылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков")
		ИЛИ ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ОтчетКомиссионера");
		
		Результат.Записать(РежимЗаписиДокумента.Проведение, ?(РежимПроведенияДокументаНеоперативный, РежимПроведенияДокумента.Неоперативный, РежимПроведенияДокумента.Оперативный));
		
		Попытка 
			
			Сторнирование = РегистрыСведений.СторнированныеДокументы.СоздатьМенеджерЗаписи();
			Сторнирование.Активность = Истина;
			Сторнирование.Причина    = Причина;
			Сторнирование.СторнированныйДокумент = ОбъектСсылка;
			Сторнирование.СторныйДокумент = Результат.Ссылка;
			
			Попытка 
				Сторнирование.Записать(Истина);
				Возврат Результат.Ссылка;
				
			Исключение //Записи в регистр сведений 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка регистрации причины") + ОписаниеОшибки();
				Сообщение.Сообщить();
				
				Возврат Результат.Ссылка;
			КонецПопытки; //Записи в регистр сведений			
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка создания документа сторно") + ": " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектСсылка);
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецПопытки;	
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет прав на сторнирование документов!");
		Сообщение.УстановитьДанные(ОбъектСсылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецФункции //СоздатьДокументСторно

Функция   ПроверитьЧтоДокументСторнирован(Знач ОбъектСсылка) Экспорт
	
	РезультатДокумент = Неопределено;
	
	ТипЗнчОбъектСсылка = ТипЗнч(ОбъектСсылка);
	
	Если ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ДвиженияДенег") Тогда
		ТипДокумента = "ДвиженияДенег";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ПоступленияТовара") Тогда
		ТипДокумента = "ПоступленияТовара";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.РасходыТовара") Тогда
		ТипДокумента = "РасходыТовара";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ВыполненияРабот") Тогда
		ТипДокумента = "ВыполненияРабот";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.Инвентаризации") Тогда
		ТипДокумента = "Инвентаризации";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.Комплектация") Тогда
		ТипДокумента = "Комплектация";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.КорректировкиИРегистрацияОстатков") Тогда
		ТипДокумента = "КорректировкиИРегистрацияОстатков";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ОказанияУслугЗаВремя") Тогда
		ТипДокумента = "ОказанияУслугЗаВремя";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ТипДокумента = "ОтчетКомиссионера";
	ИначеЕсли ТипЗнчОбъектСсылка = Тип("ДокументСсылка.ПеремещенияТовара") Тогда
		ТипДокумента = "ПеремещенияТовара";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Д.Ссылка
	|ИЗ Документ." + ТипДокумента + " КАК Д ГДЕ Д.ДокументСторно = &ДокументСторно";
	
	Запрос.УстановитьПараметр("ДокументСторно", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат РезультатДокумент;
	
КонецФункции //ПроверитьЧтоДокументСторнирован

Функция   НайтиХранилищеПоПараметрам(Знач Валюта = Неопределено, Знач Формаоплаты = Неопределено, Знач НомерСчета = "") Экспорт
	
	РезультатХранилище = ПредопределенноеЗначение("Справочник.ХранилищаДенег.ПустаяСсылка");
	Запрос = Новый Запрос;
	
	Условие = "ИСТИНА";
	Если НЕ НомерСчета = "" Тогда
		Условие = Условие + " И ХранилищаДенег.НомерСчета = &НомерСчета ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) Тогда
		Условие = Условие + " И ХранилищаДенег.Валюта = &Валюта ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) Тогда
		Условие = Условие + " И ХранилищаДенег.ФормаОплаты = &ФормаОплаты ";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ХранилищаДенег.Ссылка,
	|	ХранилищаДенег.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ Справочник.ХранилищаДенег КАК ХранилищаДенег
	|ГДЕ " + Условие + " УПОРЯДОЧИТЬ ПО ПометкаУдаления";
	
	Если НЕ НомерСчета = "" Тогда
		Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) Тогда
		Запрос.УстановитьПараметр("Валюта", Валюта);
	КонецЕсли;
	Если ЗначениеЗаполнено(Валюта) Тогда
		Запрос.УстановитьПараметр("ФормаОплаты", ФормаОплаты);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатХранилище = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат РезультатХранилище;
	
КонецФункции //НайтиХранилищеПоПараметрам

Функция   СоставитьТелефон(Знач ЭлементСправочника, Знач СКонтактами = ЛОЖЬ) Экспорт
	
	ПолныйНомерТелефона = ЭлементСправочника.Телефон;
		Если СКонтактами Тогда
			ЭтотКонтакт = ЭлементСправочника.Контакт;
			Если НЕ ПустаяСтрока(ЭтотКонтакт) Тогда			
				ПолныйНомерТелефона = ПолныйНомерТелефона + " (" + ЭтотКонтакт + ") ";			
			КонецЕсли;	
		КонецЕсли;
		
		Для НомерТелефона = 2 по 5 Цикл
		ЭтотНомерТелефона = ЭлементСправочника["Телефон" + СокрЛП(НомерТелефона)];
		Если НЕ ПустаяСтрока(ЭтотНомерТелефона) Тогда
			ПолныйНомерТелефона = ПолныйНомерТелефона + ?(ПолныйНомерТелефона = "", "", ", ") + ЭтотНомерТелефона;
		КонецЕсли;
		Если СКонтактами Тогда
			ЭтотКонтакт = ЭлементСправочника["Контакт" + СокрЛП(НомерТелефона)];
			Если НЕ ПустаяСтрока(ЭтотКонтакт) Тогда			
				ПолныйНомерТелефона = ПолныйНомерТелефона + " (" + ЭтотКонтакт + ") ";			
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолныйНомерТелефона;
	
КонецФункции //СоставитьТелефон
