//sza141214-0320 
//sza140923-0122
//sza140719-1100
//sza140517-0221  
//sza131211-1456  
&НаСервере
Процедура ДобавитьТекстыДляЯзыковДляСообщения(Знач ТекстНаРусском) Экспорт
	
	Язык = Справочники.Языки.Выбрать();
	пока Язык.Следующий() Цикл
		Если НЕ язык.Ссылка = ОбщийМодульПовтор.ЗначениеПредопределенного("справочники.Языки.Русский") Тогда
			СоздатьЗаписьОТексте(ТекстНаРусском, Язык.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекстыЯзыкаИзМакета(Знач ИмяМакета, Знач Язык, Знач УжеМонопольный = ЛОЖЬ, Знач ПроверятьНеобходимостьЗагрузить = ЛОЖЬ, Знач Перезаписать = Неопределено) Экспорт
	
	НеЗагружать = ЛОЖЬ;
	УстановленМонопольный = ЛОЖЬ;
	Если Перезаписать = Неопределено Тогда
		Перезаписать = ЛОЖЬ;
	КонецЕсли;
	
	Если НЕ УжеМонопольный Тогда
		Попытка 
			УстановитьМонопольныйРежим(ИСТИНА);
			УстановленМонопольный = ИСТИНА;
		Исключение 	
		КонецПопытки;               	
	КонецЕсли;
	
	Если ПроверятьНеобходимостьЗагрузить Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СУММА(1) КАК КВО
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык";
		
		Запрос.УстановитьПараметр("Язык", Язык);
		КоличествоЗагруженных = 0;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КоличествоЗагруженных = КоличествоЗагруженных + ?(ВыборкаДетальныеЗаписи.КВО = Null, 0, ВыборкаДетальныеЗаписи.КВО);
			КонецЦикла;	
		КонецЕсли;
		
		Если КоличествоЗагруженных > 0 Тогда
			
			Макет 	= ПолучитьОбщийМакет(ИмяМакета);
			КоличествоСтрок = 999999;
			счетчик = 1;
			пусто 	= 0;
			
			Пока КоличествоСтрок > Счетчик Цикл
				
				R = СокрЛП(формат(счетчик, "ЧГ=0"));
				ТекстНаРусском = Макет.Область("R" + R + "C1").Текст;
				
				Если ПустаяСтрока(ТекстНаРусском) Тогда
					пусто = пусто + 1;
				КонецЕсли;
				
				Если пусто = 10 Тогда
					прервать;
				КонецЕсли;
				
				счетчик = счетчик + 1;
			КонецЦикла;	
			
			Если (счетчик - КоличествоЗагруженных) < 10 Тогда 
				НеЗагружать = ИСТИНА;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;			
	
	Если НЕ НеЗагружать Тогда
		Макет 	= ПолучитьОбщийМакет(ИмяМакета);
		КоличествоСтрок = 999999;
		счетчик = 1;
		пусто 	= 0;
		НачатьТранзакцию();
		
		Пока КоличествоСтрок > Счетчик Цикл
			
			R = СокрЛП(формат(счетчик, "ЧГ=0"));
			ТекстНаРусском  = Макет.Область("R" + R + "C1").Текст;
			
			Если НЕ ПустаяСтрока(ТекстНаРусском) Тогда
				
				ТЯ = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
				ТЯ.Активность 	  = ИСТИНА;   						
				ТЯ.ТекстНаРусском = ТекстНаРусском ;
				ТЯ.ТекстНаЯзыке   = СокрЛП(Макет.Область("R" + R + "C2").Текст);
				тя.Язык 		  = Язык;
				
				Попытка 
					ТЯ.Записать(Перезаписать);
					пусто = 0;	
				Исключение //замена запрещена
				КонецПопытки;
			
			Иначе 
				пусто = пусто + 1;
			КонецЕсли;
			
			Если пусто = 10 Тогда
				прервать;
			КонецЕсли;
			
			счетчик = счетчик + 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		Запрос = Новый Запрос;
		Для Каждого СправочникДляПеревода Из Метаданные.Справочники Цикл
			
			Запрос.Текст = "ВЫБРАТЬ Н.Ссылка, Н.Наименование ИЗ Справочник." + СправочникДляПеревода.Имя + " КАК Н ГДЕ Н.Предопределенный = ИСТИНА ";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					НаЯзыке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВыборкаДетальныеЗаписи.Наименование, Язык);
					
					Если НЕ ПустаяСтрока(НаЯзыке) Тогда
						ЗначениеПеревода = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
						ЗначениеПеревода.Активность 		= ИСТИНА;
						ЗначениеПеревода.НаЯзыке  			= НаЯзыке;
						ЗначениеПеревода.ОбъектБазыДанных   = ВыборкаДетальныеЗаписи.ссылка;
						ЗначениеПеревода.Поле				= "Наименование";
						ЗначениеПеревода.Язык               = Язык;
						ЗначениеПеревода.Записать(ИСТИНА);	
					КонецЕсли;
					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла; 	
	КонецЕсли;
	
	Если НЕ УжеМонопольный 
		И УстановленМонопольный Тогда
		Попытка 
			УстановитьМонопольныйРежим(ЛОЖЬ);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГородаСтраныИзМакета(Знач НаименованиеСтраны) Экспорт
	
	Попытка 
		УстановитьМонопольныйРежим(ИСТИНА);
	Исключение 	
	КонецПопытки;               	
	
	Макет 	= ПолучитьОбщийМакет("МакетКлассификаторГородов");
	КоличествоСтрок = 999999;
	счетчик = 1;
	пусто 	= 0;
	
	ТекущийЯзыкИнтерфейсаПрограммы = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	Если НЕ ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;
	ТекущийЯзык = НРег(ТекущийЯзыкИнтерфейсаПрограммы.код);
	
	ТекущийРегион = Справочники.Регионы.НайтиПоНаименованию(НаименованиеСтраны);
	Если НЕ ЗначениеЗаполнено(ТекущийРегион) Тогда
		ТекущийРегионОбъект = Справочники.Регионы.СоздатьЭлемент();
		ТекущийРегионОбъект.Наименование = НаименованиеСтраны;
		ТекущийРегионОбъект.Записать();
		ТекущийРегион = ТекущийРегионОбъект.Ссылка;
	КонецЕсли;
	
	ПустаяЛокация = ПредопределенноеЗначение("Справочник.Локации.ПустаяСсылка");
	
	Пока КоличествоСтрок > Счетчик цикл
		
		R = СокрЛП(формат(счетчик, "ЧГ=0"));
		ЯзыкСтроки = НРег(СокрЛП(Макет.Область("R" + R + "C1").Текст));
		Если значениезаполнено(ЯзыкСтроки) Тогда
			
			Если ЯзыкСтроки = ТекущийЯзык Тогда
				
				НАименованиеСтраныВМакете = СокрЛП(Макет.Область("R" + R + "C2").Текст);
				
				Если НАименованиеСтраныВМакете = НаименованиеСтраны Тогда
					
					НАименованиеГорода = СокрЛП(Макет.Область("R" + R + "C3").Текст);
					ЕстьГород = Справочники.Локации.НайтиПоНаименованию(НАименованиеГорода);
					Если НЕ НАименованиеГорода = ""
						И НЕ ЗначениеЗаполнено(ЕстьГород) Тогда
						
						ЕстьГруппа = ПустаяЛокация;
						НаименованиеГруппы = СокрЛП(Макет.Область("R" + R + "C4").Текст);
						Если НЕ ПустаяСтрока(НаименованиеГруппы) Тогда
							ЕстьГруппа = Справочники.Локации.НайтиПоНаименованию(НаименованиеГруппы);
							Если НЕ ЗначениеЗаполнено(ЕстьГруппа) Тогда
								
								ЕстьСверхГруппа = ПустаяЛокация;
								НаименованиеСверхГруппы = СокрЛП(Макет.Область("R" + R + "C5").Текст);
								Если НЕ ПустаяСтрока(НаименованиеСверхГруппы) Тогда
									ЕстьСверхГруппа = Справочники.Локации.НайтиПоНаименованию(НаименованиеСверхГруппы);
									
									Если НЕ ЗначениеЗаполнено(ЕстьСверхГруппа) Тогда
										НоваяГруппа = Справочники.Локации.СоздатьГруппу();
										НоваяГруппа.Наименование = НаименованиеСверхГруппы;
										НоваяГруппа.Владелец = ТекущийРегион;
										НоваяГруппа.Записать();
										
										ЕстьСверхГруппа = НоваяГруппа.Ссылка;
									КонецЕсли;
									
								КонецЕсли;
								
								НоваяГруппа = Справочники.Локации.СоздатьГруппу();
								НоваяГруппа.Наименование = НаименованиеГруппы;
								НоваяГруппа.Владелец = ТекущийРегион;
								НоваяГруппа.Родитель = ?(ЕстьСверхГруппа.ЭтоГруппа, ЕстьСверхГруппа, Неопределено);
								НоваяГруппа.Записать();
								
								ЕстьГруппа = НоваяГруппа.Ссылка;
							КонецЕсли;					
						КонецЕсли;
						
						НоваяЛокация = Справочники.Локации.СоздатьЭлемент();
						НоваяЛокация.Наименование = НАименованиеГорода;
						НоваяЛокация.Родитель = ?(ЕстьГруппа.ЭтоГруппа, ЕстьГруппа, Неопределено);
						НоваяЛокация.Владелец = ТекущийРегион;
						НоваяЛокация.Записать();
					КонецЕсли;
					
				КонецЕсли;				
			КонецЕсли;
			
		Иначе 
			пусто = пусто + 1;
		КонецЕсли;
		
		Если пусто = 10 тогда
			прервать;
		КонецЕсли;
		
		счетчик = счетчик + 1;
	КонецЦикла;
	
	Попытка 
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение 	
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтраныИзМакета() Экспорт
	
	Попытка 
		УстановитьМонопольныйРежим(ИСТИНА);
	Исключение 	
	КонецПопытки;               	
	
	Макет 	= ПолучитьОбщийМакет("МакетКлассификаторСтран");
	КоличествоСтрок = 999999;
	счетчик = 1;
	пусто 	= 0;
	
	ТекущийЯзыкИнтерфейсаПрограммы = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;
	Если НЕ ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;
	ТекущийЯзык = НРег(ТекущийЯзыкИнтерфейсаПрограммы.код);
	
	ПустойРегион = ПредопределенноеЗначение("Справочник.Регионы.ПустаяСсылка");
	
	пока КоличествоСтрок > Счетчик цикл
		
		R = СокрЛП(формат(счетчик, "ЧГ=0"));
		ЯзыкСтроки = НРег(СокрЛП(Макет.Область("R" + R + "C1").Текст));
		Если значениезаполнено(ЯзыкСтроки) Тогда
			
			Если ЯзыкСтроки = ТекущийЯзык Тогда
				
				НАименованиеСтраны = СокрЛП(Макет.Область("R" + R + "C2").Текст);
				ЕстьРегион = Справочники.Регионы.НайтиПоНаименованию(НАименованиеСтраны);			
				Если НЕ ЗначениеЗаполнено(ЕстьРегион) Тогда
					
					ЕстьГруппа = ПустойРегион;
					НаименованиеГруппы = СокрЛП(Макет.Область("R" + R + "C3").Текст);
					Если НЕ ПустаяСтрока(НаименованиеГруппы) Тогда
						ЕстьГруппа = Справочники.Регионы.НайтиПоНаименованию(НаименованиеГруппы);
						Если НЕ ЗначениеЗаполнено(ЕстьГруппа) Тогда
							НоваяГруппа = Справочники.Регионы.СоздатьГруппу();
							НоваяГруппа.Наименование = НаименованиеГруппы;
							НоваяГруппа.Записать();
							
							ЕстьГруппа = НоваяГруппа.Ссылка;
						КонецЕсли;					
					КонецЕсли;
					
					НовыйРегион = Справочники.Регионы.СоздатьЭлемент();
					НовыйРегион.Наименование = НАименованиеСтраны;
					НовыйРегион.Родитель = ?(ЕстьГруппа.ЭтоГруппа, ЕстьГруппа, Неопределено);
					НовыйРегион.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			пусто = пусто + 1;
		КонецЕсли;
		
		Если пусто = 10 тогда
			прервать;
		КонецЕсли;
		
		счетчик = счетчик + 1;
	КонецЦикла;
	
	Попытка 
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение 	
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Функция   ЗначениеЗаполненоПараметрыСеансаТекущийЯзык() Экспорт
	попытка
		Возврат ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"));
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
КонецФункции //ЗначениеЗаполненоПараметрыСеансаТекущийЯзык

&НаСервере
Функция   НетНиОднойЗаписиЭтогоЯзыка(Знач Язык) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык";	
	Запрос.УстановитьПараметр("Язык", Язык);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура ПередатьПереводыДругомуОбъекту(Знач Источник, Знач Приемник) Экспорт
	
	Если ЗначениеЗаполнено(Источник)
		И ЗначениеЗаполнено(Приемник) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияНаДругихЯзыках.Поле,
		|	ЗначенияНаДругихЯзыках.Язык,
		|	ЗначенияНаДругихЯзыках.НаЯзыке
		|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
		|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
		
		Запрос.УстановитьПараметр("ОбъектБазыДанных", Источник);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//Запись Зндя для ЗначенияНаДругихЯзыках
				ЗначенияНаДругихЯзыках = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				ЗначенияНаДругихЯзыках.Активность = ИСТИНА;
				ЗначенияНаДругихЯзыках.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
				ЗначенияНаДругихЯзыках.ОбъектБазыДанных = Приемник;
				ЗначенияНаДругихЯзыках.Поле = ВыборкаДетальныеЗаписи.Поле;
				ЗначенияНаДругихЯзыках.Язык = ВыборкаДетальныеЗаписи.Язык;
				
				Попытка //Записи в регистр сведений 
					ЗначенияНаДругихЯзыках.Записать(ИСТИНА);
					
				Исключение //Записи в регистр сведений 
				КонецПопытки; //Записи в регистр сведений
				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьОбщееНаименование(Знач Ссылка, Знач ОпределенныйЯзык = Неопределено, Знач КлиентПоставщик = Неопределено) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Если НЕ КлиентПоставщик = Неопределено 
			И ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами")
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Результат = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Ссылка, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати"), ОпределенныйЯзык, КлиентПоставщик);
			Если ПустаяСтрока(Результат) Тогда
				Результат = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Ссылка, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование"), ОпределенныйЯзык, КлиентПоставщик);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Результат) Тогда
			ПоддерживатьИныеЯзыкиКромеРусского = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского");
			Если НЕ ПоддерживатьИныеЯзыкиКромеРусского Тогда
				Если ЗначениеЗаполнено(Ссылка.НаименованиеДляПечати) Тогда
					Результат = Ссылка.НаименованиеДляПечати;
				Иначе
					Результат = Ссылка.Наименование;
				КонецЕсли;        
				
			Иначе
				Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "НаименованиеДляПечати", , ОпределенныйЯзык);
				Если ПустаяСтрока(Результат) Тогда
					Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "Наименование", , ОпределенныйЯзык);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

&НаСервере
Функция   ПолучитьТекстНаЯзыке(Знач ТекстНаРусском, Знач ОпределенныйЯзык = Неопределено) Экспорт
	
	ТекстНаЯзыке = ТекстНаРусском;
	Если ОпределенныйЯзык = Неопределено Тогда
		ОпределенныйЯзык = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
	КонецЕсли;
	
	Если НЕ ОпределенныйЯзык = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.ТекстНаРусском = &ТекстНаРусском И ТекстыНаДругихЯзыках.Язык = &Язык";
		
		Запрос.УстановитьПараметр("ТекстНаРусском", ТекстНаРусском);
		Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			//	ДобавитьТекстыДляЯзыковДляСообщения(ТекстНаРусском)
			
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаЯзыке;
			Если ЗначениеЗаполнено(ТекстНаЯзыкеТут) Тогда
				ТекстНаЯзыке = "" + ТекстНаЯзыкеТут ;
			КонецЕсли;
			
		КонецЕсли; 		
	КонецЕсли;		
	
	Возврат ТекстНаЯзыке;
	
КонецФункции 

&НаСервере
Процедура СоздатьЗаписьОТексте(Знач ТекстНаРусском, Знач Язык, Знач ЗначениеПеревода = "", Знач Насильно = ЛОЖЬ) Экспорт
	
	ТекстНаЯзыке = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
	ТекстНаЯзыке.Активность 	= ИСТИНА;
	ТекстНаЯзыке.ТекстНаРусском = ТекстНаРусском;
	ТекстНаЯзыке.ТекстНаЯзыке	= ЗначениеПеревода;
	ТекстНаЯзыке.Язык 			= Язык;
	
	Попытка
		ТекстНаЯзыке.Записать(Насильно);		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция   СформироватьСуммуПрописью(Знач Сумма, Знач Валюта = Неопределено, Знач ОпределенныйЯзык = Неопределено, Знач ВернутьПараметрыСуммыПрописью = Ложь, Знач ПараметрыПрописи = Неопределено) Экспорт
	
	Если Валюта = Неопределено Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;
	
	ЗначениеЗаполненоОпределенныйЯзык = ЗначениеЗаполнено(ОпределенныйЯзык);
	
	Если ЗначениеЗаполненоОпределенныйЯзык Тогда
		ЯзыкПрописи = НРег(ОпределенныйЯзык.Код) + "_" + ВРег(ОпределенныйЯзык.Код);
	Иначе
		ЯзыкПрописи = "ru_RU";
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыПрописи) Тогда
		ПараметрыПрописи = Валюта.ПараметрыСуммыПрописью;	
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыПрописи) Тогда
		
		ГривнаНаРусском 	= "гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2";
		ГривнаНаУкраинском 	= "гривна, гривні, гривень, ж, копійка, копійки, копійок, ж, 2";
		ДолларНаРусском 	= "доллар, доллара, долларов, м, цент, цента, центов, м, 2";
		ДолларНаУкраинском 	= "долар, долари, доларів, м, цент, центи, центів, м, 2";
		ЕвроНаРусском 		= "евро, евро, евро, м, цент, цента, центов, м, 2";
		ЕвроНаУкраинском 	= "євро, євро, євро, м, цент, центи, центів, м, 2";
		РубльНаРусском 		= "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		РубльНаУкраинском 	= "рубль, рубля, рублiв, м, копійка, копійки, копійок, ж, 2";
		
		ПервыйСимволВалюты 	= Лев(СокрЛП(ВРег(Валюта)), 1);
		КодВалюты 			= Валюта.Код;
		
		Если КодВалюты = "980"
			ИЛИ ПервыйСимволВалюты = "Г" Тогда
			
			Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
				Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
					
					ПараметрыПрописи = ГривнаНаРусском;
					Если НЕ ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "ru_RU";
					КонецЕсли;			
				Иначе
					ПараметрыПрописи = ГривнаНаУкраинском;
					Если ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "uk_UA";	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли КодВалюты = "840"
			ИЛИ ПервыйСимволВалюты = "U" 
			ИЛИ ПервыйСимволВалюты = "Д" Тогда
			
			Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
				Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
					
					ПараметрыПрописи = ДолларНаРусском;
					Если НЕ ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "ru_RU";	
					КонецЕсли;
				Иначе
					ПараметрыПрописи = ДолларНаУкраинском;
					Если ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "uk_UA";	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		ИначеЕсли КодВалюты = "978"
			ИЛИ ПервыйСимволВалюты = "Е" 
			ИЛИ ПервыйСимволВалюты = "E" Тогда
			
			Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
				Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
					
					ПараметрыПрописи = ЕвроНаРусском;
					Если НЕ ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "ru_RU";	
					КонецЕсли;
				Иначе
					ПараметрыПрописи = ЕвроНаУкраинском;
					Если ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "uk_UA";	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		Иначе //643		
			
			Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
				Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
					
					ПараметрыПрописи = РубльНаРусском;
					Если НЕ ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "ru_RU";	
					КонецЕсли;
				Иначе
					ПараметрыПрописи = РубльНаУкраинском;
					Если ЯзыкПрописи = "ru_RU" Тогда
						ЯзыкПрописи = "uk_UA";	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыПрописи) Тогда
		Если ОпределенныйЯзык = ПредопределенноеЗначение("Справочник.Языки.Український") Тогда
			ПараметрыПрописи = РубльНаУкраинском;
			ЯзыкПрописи = "uk_UA";	
		Иначе
			ПараметрыПрописи = РубльНаРусском;
			ЯзыкПрописи = "ru_RU";			
		КонецЕсли;
	КонецЕсли;
	
	Если ВернутьПараметрыСуммыПрописью Тогда
		Возврат ПараметрыПрописи;
	Иначе
		Возврат ЧислоПрописью(Сумма, "Л=" + ЯзыкПрописи, ПараметрыПрописи);	
	КонецЕсли;
	
КонецФункции // СформироватьСуммуПрописью()

&наСервере
функция   ТекущийЯзыкРусский() Экспорт
	Возврат ОбщийМодульПовтор.ТекущийЯзыкРусский();
КонецФункции

&НаСервере
Функция   ЯзыкПользователяЗаданВКонфигураторе() Экспорт
	
	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Возврат НЕ ДанныеТекущегоПользователя.Язык = Неопределено;
	
КонецФункции //ЯзыкПользователяЗаданВКонфигураторе

Функция   ПолучитьПредставлениеНаЯзыке(Знач Локация, Знач ПолеЗначения, Знач ОтказатьсяПриОтсутствии, Знач ЯзыкДокументов = Неопределено) Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Локация, ПолеЗначения, ОтказатьсяПриОтсутствии, ЯзыкДокументов);
КонецФункции //ПолучитьПредставлениеНаЯзыке

&НаСервере
Процедура ЗагрузитьТекстыОпределенногоЯзыкаИзМакета(Знач ЯзыкДляЗагрузки) Экспорт	
	
	Если ЗначениеЗаполнено(ЯзыкДляЗагрузки)
		И НЕ ЯзыкДляЗагрузки = ПредопределенноеЗначение("Справочник.Языки.Русский") тогда
		
		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ЯзыкДляЗагрузки.Код, ЯзыкДляЗагрузки, , ИСТИНА);
	КонецЕсли;
	
КонецПроцедуры //ЗагрузитьТекстыОпределенногоЯзыкаИзМакета
