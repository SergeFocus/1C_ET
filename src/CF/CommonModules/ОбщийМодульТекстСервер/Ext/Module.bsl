//sza131213-2014 : 
//sza131211-1456 SZA: 

&НаСервере
Функция   ЗначениеЗаполненоПараметрыСеансаТекущийЯзык() Экспорт
	
	попытка
		Возврат ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции //ЗначениеЗаполненоПараметрыСеансаТекущийЯзык

&НаСервере
Функция   ПолучитьТекстНаЯзыке(Знач ТекстНаРусском, Знач ОпределенныйЯзык = Неопределено) Экспорт
	
	ТекстНаЯзыке = ТекстНаРусском;
	Если ОпределенныйЯзык = Неопределено Тогда
		ОпределенныйЯзык = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
	КонецЕсли;
	
	Если не ОпределенныйЯзык = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.ТекстНаРусском = &ТекстНаРусском И ТекстыНаДругихЯзыках.Язык = &Язык";
		
		Запрос.УстановитьПараметр("ТекстНаРусском", ТекстНаРусском);
		Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);
		
		РезультатЗапроса = Запрос.Выполнить();
		если РезультатЗапроса.Пустой() тогда
		//	ДобавитьТекстыДляЯзыковДляСообщения(ТекстНаРусском)
			
		иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаЯзыке;
			Если ЗначениеЗаполнено(ТекстНаЯзыкеТут) Тогда
				ТекстНаЯзыке = "" + ТекстНаЯзыкеТут ;
			КонецЕсли;
			
		конецесли; 		
	КонецЕсли;		
	
	Возврат ТекстНаЯзыке;
	
КонецФункции 

&НаСервере
Процедура ДобавитьТекстыДляЯзыковДляСообщения(Знач ТекстНаРусском) Экспорт
	
	Язык = Справочники.Языки.Выбрать() ;
	пока Язык.Следующий() Цикл
		если не язык.Ссылка = ОбщийМодульПовтор.ЗначениеПредопределенного("справочники.Языки.Русский") тогда
			СоздатьЗаписьОТексте(ТекстНаРусском, Язык.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьОТексте(Знач ТекстНаРусском, Знач Язык, Знач ЗначениеПеревода = "", Знач Насильно = Ложь) Экспорт
	
	ТекстНаЯзыке = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
	ТекстНаЯзыке.Активность 	= Истина;
	ТекстНаЯзыке.ТекстНаРусском = ТекстНаРусском;
	ТекстНаЯзыке.ТекстНаЯзыке	= ЗначениеПеревода;
	ТекстНаЯзыке.Язык 			= Язык;
	
	Попытка
		ТекстНаЯзыке.Записать(Насильно);		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция   ЯзыкПользователяЗаданВКонфигураторе() Экспорт
	
	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Возврат НЕ ДанныеТекущегоПользователя.Язык = Неопределено;
	
КонецФункции //ЯзыкПользователяЗаданВКонфигураторе

&НаСервере
Функция   НетНиОднойЗаписиЭтогоЯзыка(Знач Язык) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык";	
	Запрос.УстановитьПараметр("Язык", Язык);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&наСервере
процедура ЗагрузитьТекстыЯзыкаИзМакета(Знач ИмяМакета, Знач язык, Знач УжеМонопольный = Ложь) Экспорт
	
	если не УжеМонопольный Тогда
		Попытка 
			УстановитьМонопольныйРежим(истина);
		Исключение 	
		КонецПопытки;               	
	КонецЕсли;
	
	Макет 	= ПолучитьОбщийМакет(ИмяМакета);
	КоличествоСтрок = 999999;
	счетчик = 1;
	пусто 	= 0;
	НачатьТранзакцию();
	
	пока КоличествоСтрок > Счетчик цикл
		
		R = сокрлп(формат(счетчик, "ЧГ=0"));
		ТекстНаРусском  = Макет.Область("R" + R + "C1").Текст;
		если значениезаполнено(ТекстНаРусском) тогда
			
			ТЯ = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
			ТЯ.Активность 	  = Истина;   						
			ТЯ.ТекстНаРусском = ТекстНаРусском ;
			ТЯ.ТекстНаЯзыке   = Макет.Область("R" + R + "C2").Текст ;
			тя.Язык 		  = язык;
			
			Попытка 
				ТЯ.Записать(ложь);
				пусто = 0;	
			Исключение 
			КонецПопытки;
			
		иначе 
			пусто = пусто + 1;
		конецесли;
		
		если пусто = 10 тогда
			прервать;
		конецесли;
		
		счетчик = счетчик + 1;
	конеццикла;
	ЗафиксироватьТранзакцию();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Запрос = Новый Запрос;
	Для Каждого СправочникДляПеревода Из Метаданные.Справочники Цикл
		
		Запрос.Текст = "ВЫБРАТЬ Н.Ссылка, Н.Наименование ИЗ Справочник." + СправочникДляПеревода.Имя + " КАК Н ГДЕ Н.Предопределенный = ИСТИНА ";
		
		РезультатЗапроса = Запрос.Выполнить();
		если не РезультатЗапроса.Пустой() тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаЯзыке  			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВыборкаДетальныеЗаписи.Наименование, язык);
				
				Если Не НаЯзыке = "" Тогда
					ЗначениеПеревода = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
					ЗначениеПеревода.Активность 		= Истина;
					ЗначениеПеревода.НаЯзыке  			= НаЯзыке;
					ЗначениеПеревода.ОбъектБазыДанных   = ВыборкаДетальныеЗаписи.ссылка;
					ЗначениеПеревода.Поле				= "Наименование";
					ЗначениеПеревода.Язык               = язык;
					ЗначениеПеревода.Записать(Истина);	
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	если не УжеМонопольный Тогда
		Попытка 
			УстановитьМонопольныйРежим(Ложь);
		Исключение 	
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&наСервере
функция   ТекущийЯзыкРусский() Экспорт
	Возврат ОбщийМодульПовтор.ТекущийЯзыкРусский();
КонецФункции

&НаСервере
Функция   ПолучитьОбщееНаименование(Знач Ссылка) Экспорт
	
	ПоддерживатьИныеЯзыкиКромеРусского = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского");
	Если Не ПоддерживатьИныеЯзыкиКромеРусского Тогда
		Если ЗначениеЗаполнено(Ссылка.НаименованиеДляПечати) Тогда
			Результат = Ссылка.НаименованиеДляПечати;
		Иначе
			Результат = Ссылка.Наименование;
		КонецЕсли;        
		
	иначе
		Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "НаименованиеДляПечати");
		Если Результат = "" Тогда
			Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "Наименование");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
