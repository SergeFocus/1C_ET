// sza160308-1416
// sza151215-0133
// sza151002-2331
// sza150518-1702 программа условие
// sza150506-1748
// sza150429-1819
// sza150403-1753 ППФ
// sza150401-0154
// sza150324-0359 зыки
// sza150212-1020
// sza141214-0320
// sza140923-0122
// sza140719-1100
// sza140517-0221
// sza131211-1456

Процедура ДобавитьПрограммныеПараметрыОбластейПечати(Знач ОбъектИлиСсылкаПечати, ПараметрыОбластейПечати) Экспорт

	ИтогоНДС = 0;
	ИтогоСуммаБезНДС = 0;

	Попытка
		Товары = ОбъектИлиСсылкаПечати.Товары;

		Для Каждого СтрокаТаблицыОбъекта Из Товары Цикл
			СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТаблицыОбъекта.Номенклатура.СтавкаНДС), СтрокаТаблицыОбъекта.Номенклатура.СтавкаНДС, ?(ЗначениеЗаполнено(ОбъектИлиСсылкаПечати.Организация), ОбъектИлиСсылкаПечати.Организация.СтавкаНДС, 0)) / 100;
			НДС = СтрокаТаблицыОбъекта.Сумма * СтавкаНДС;
			ИтогоНДС = ИтогоНДС + НДС;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + (СтрокаТаблицыОбъекта.Сумма - НДС);
		КонецЦикла;
	Исключение
	КонецПопытки;

	НовыйПараметр = ПараметрыОбластейПечати.Добавить();
	НовыйПараметр.ИмяПрограммное 	= "ИтогоНДС";
	НовыйПараметр.Описание 		 	= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Итого НДС");
	НовыйПараметр.Программно 		= ЛОЖЬ;
	НовыйПараметр.ЗначениеПараметра = ИтогоНДС;

	НовыйПараметр = ПараметрыОбластейПечати.Добавить();
	НовыйПараметр.ИмяПрограммное 	= "ИтогоСуммаБезНДС";
	НовыйПараметр.Описание 			= ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Итого сумма без НДС");
	НовыйПараметр.Программно 		= ЛОЖЬ;
	НовыйПараметр.ЗначениеПараметра = ИтогоСуммаБезНДС;

КонецПроцедуры

Процедура ДобавитьТекстыДляЯзыковДляСообщения(Знач ТекстНаРусском) Экспорт

	Язык = Справочники.Языки.Выбрать();
	Пока Язык.Следующий() Цикл
		Если НЕ Язык.Ссылка = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский") Тогда
			СоздатьЗаписьОТексте(ТекстНаРусском, Язык.Ссылка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьТиповыеПараметрыОбластейПечати(Знач ОбъектИлиСсылкаПечати, КлиентЗаголовок, Контрагент, ПредставлениеКонтрагента, ПараметрыОбластейПечати) Экспорт

	КлиентЗаголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Контрагент");
	Попытка
		Контрагент = ОбъектИлиСсылкаПечати.КлиентПоставщик;
	Исключение
		Попытка
			Контрагент = ОбъектИлиСсылкаПечати.Клиент;
			КлиентЗаголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент");
		Исключение
			Попытка
				Контрагент = ОбъектИлиСсылкаПечати.Поставщик;
				КлиентЗаголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик");
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;
	ПредставлениеКонтрагента = ОбщийМодульТекстСервер.ПолучитьОбщееНаименование(Контрагент);

	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Поставщики") Тогда
			КлиентЗаголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поставщик");
		Иначе
			КлиентЗаголовок = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Клиент");
		КонецЕсли;
	КонецЕсли;

	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "КонтрагентЗаголовок";
	ПараметрОбластейПечати.ЗначениеПараметра = КлиентЗаголовок;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "Контрагент";
	ПараметрОбластейПечати.ЗначениеПараметра = Контрагент;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "КлиентПредставление";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ПредставлениеКлиента";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ПоставщикПредставление";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;

	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ПредставлениеПоставщика";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ПредставлениеКонтрагента";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "КонтрагентПредставление";
	ПараметрОбластейПечати.ЗначениеПараметра = ПредставлениеКонтрагента;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	СтруктураДополнительныхПараметровМакета = ОбщийМодульСервер.ПолучитьСтруктуруДополнительныхПараметровМакетаПечати();
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ТекстВШапкеДокументовПриПечати";
	ПараметрОбластейПечати.ЗначениеПараметра = СтруктураДополнительныхПараметровМакета.ТекстВШапкеДокументовПриПечати;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;
	ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
	ПараметрОбластейПечати.ИмяПрограммное 	 = "ТекстВПодвалеДокументовПриПечати";
	ПараметрОбластейПечати.ЗначениеПараметра = СтруктураДополнительныхПараметровМакета.ТекстВПодвалеДокументовПриПечати;
	ПараметрОбластейПечати.Программно		 = ИСТИНА;

КонецПроцедуры

Процедура ЗагрузитьГородаСтраныИзМакета(Знач НаименованиеСтраны) Экспорт

	Попытка
		УстановитьМонопольныйРежим(ИСТИНА);
	Исключение
	КонецПопытки;

	Макет 	= ПолучитьОбщийМакет("МакетКлассификаторГородов");
	КоличествоСтрок = 999999;
	Счетчик = 1;
	Пусто 	= 0;
	ТекущийЯзыкИнтерфейсаПрограммы = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;

	Если НЕ ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;

	ТекущийЯзык = НРег(ТекущийЯзыкИнтерфейсаПрограммы.код);
	ТекущийРегион = Справочники.Регионы.НайтиПоНаименованию(НаименованиеСтраны);
	Если НЕ ЗначениеЗаполнено(ТекущийРегион) Тогда
		ТекущийРегионОбъект = Справочники.Регионы.СоздатьЭлемент();
		ТекущийРегионОбъект.Наименование = НаименованиеСтраны;
		ТекущийРегионОбъект.Записать();
		ТекущийРегион = ТекущийРегионОбъект.Ссылка;
	КонецЕсли;

	ПустаяЛокация = ПредопределенноеЗначение("Справочник.Локации.ПустаяСсылка");

	Пока КоличествоСтрок > Счетчик цикл

		ЯчейкаМакета = СокрЛП(формат(Счетчик, "ЧГ=0"));
		ЯзыкСтроки = НРег(СокрЛП(Макет.Область("R" + ЯчейкаМакета + "C1").Текст));
		Если ЗначениеЗаполнено(ЯзыкСтроки) Тогда
			Если ЯзыкСтроки = ТекущийЯзык Тогда
				НаименованиеСтраныВМакете = СокрЛП(Макет.Область("R" + ЯчейкаМакета + "C2").Текст);

				Если НаименованиеСтраныВМакете = НаименованиеСтраны Тогда
					НаименованиеГорода = СокрЛП(Макет.Область("R" + ЯчейкаМакета + "C3").Текст);
					ЕстьГород = Справочники.Локации.НайтиПоНаименованию(НаименованиеГорода);

					Если НЕ НаименованиеГорода = ""
						И НЕ ЗначениеЗаполнено(ЕстьГород) Тогда

						ЕстьГруппа = ПустаяЛокация;
						НаименованиеГруппы = СокрЛП(Макет.Область("R" + ЯчейкаМакета + "C4").Текст);
						Если НЕ ПустаяСтрока(НаименованиеГруппы) Тогда
							ЕстьГруппа = Справочники.Локации.НайтиПоНаименованию(НаименованиеГруппы);

							Если НЕ ЗначениеЗаполнено(ЕстьГруппа) Тогда
								ЕстьСверхГруппа = ПустаяЛокация;
								НаименованиеСверхГруппы = СокрЛП(Макет.Область("R" + ЯчейкаМакета + "C5").Текст);
								Если НЕ ПустаяСтрока(НаименованиеСверхГруппы) Тогда
									ЕстьСверхГруппа = Справочники.Локации.НайтиПоНаименованию(НаименованиеСверхГруппы);

									Если НЕ ЗначениеЗаполнено(ЕстьСверхГруппа) Тогда
										НоваяГруппа = Справочники.Локации.СоздатьГруппу();
										НоваяГруппа.Наименование = НаименованиеСверхГруппы;
										НоваяГруппа.Владелец = ТекущийРегион;
										НоваяГруппа.Записать();
										ЕстьСверхГруппа = НоваяГруппа.Ссылка;
									КонецЕсли;
								КонецЕсли;

								НоваяГруппа = Справочники.Локации.СоздатьГруппу();
								НоваяГруппа.Наименование = НаименованиеГруппы;
								НоваяГруппа.Владелец = ТекущийРегион;
								НоваяГруппа.Родитель = ?(ЕстьСверхГруппа.ЭтоГруппа, ЕстьСверхГруппа, Неопределено);
								НоваяГруппа.Записать();
								ЕстьГруппа = НоваяГруппа.Ссылка;
							КонецЕсли;
						КонецЕсли;

						НоваяЛокация = Справочники.Локации.СоздатьЭлемент();
						НоваяЛокация.Наименование = НаименованиеГорода;
						НоваяЛокация.Родитель = ?(ЕстьГруппа.ЭтоГруппа, ЕстьГруппа, Неопределено);
						НоваяЛокация.Владелец = ТекущийРегион;
						НоваяЛокация.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Пусто = Пусто + 1;
		КонецЕсли;

		Если Пусто = 10 Тогда
			Прервать;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузитьСтраныИзМакета() Экспорт

	Попытка
		УстановитьМонопольныйРежим(ИСТИНА);
	Исключение
	КонецПопытки;

	Макет 	= ПолучитьОбщийМакет("МакетКлассификаторСтран");
	КоличествоСтрок = 999999;
	Счетчик = 1;
	Пусто 	= 0;
	ТекущийЯзыкИнтерфейсаПрограммы = ПараметрыСеанса.ТекущийЯзыкИнтерфейсаПрограммы;

	Если НЕ ЗначениеЗаполнено(ТекущийЯзыкИнтерфейсаПрограммы) Тогда
		ТекущийЯзыкИнтерфейсаПрограммы = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;

	ТекущийЯзык = НРег(ТекущийЯзыкИнтерфейсаПрограммы.код);
	ПустойРегион = ПредопределенноеЗначение("Справочник.Регионы.ПустаяСсылка");
	пока КоличествоСтрок > Счетчик цикл
		R = СокрЛП(формат(Счетчик, "ЧГ=0"));
		ЯзыкСтроки = НРег(СокрЛП(Макет.Область("R" + R + "C1").Текст));

		Если ЗначениеЗаполнено(ЯзыкСтроки) Тогда
			Если ЯзыкСтроки = ТекущийЯзык Тогда
				НАименованиеСтраны = СокрЛП(Макет.Область("R" + R + "C2").Текст);
				ЕстьРегион = Справочники.Регионы.НайтиПоНаименованию(НАименованиеСтраны);

				Если НЕ ЗначениеЗаполнено(ЕстьРегион) Тогда
					ЕстьГруппа = ПустойРегион;
					НаименованиеГруппы = СокрЛП(Макет.Область("R" + R + "C3").Текст);
					Если НЕ ПустаяСтрока(НаименованиеГруппы) Тогда
						ЕстьГруппа = Справочники.Регионы.НайтиПоНаименованию(НаименованиеГруппы);

						Если НЕ ЗначениеЗаполнено(ЕстьГруппа) Тогда
							НоваяГруппа = Справочники.Регионы.СоздатьГруппу();
							НоваяГруппа.Наименование = НаименованиеГруппы;
							НоваяГруппа.Записать();
							ЕстьГруппа = НоваяГруппа.Ссылка;
						КонецЕсли;
					КонецЕсли;

					НовыйРегион = Справочники.Регионы.СоздатьЭлемент();
					НовыйРегион.Наименование = НАименованиеСтраны;
					НовыйРегион.Родитель = ?(ЕстьГруппа.ЭтоГруппа, ЕстьГруппа, Неопределено);
					НовыйРегион.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Пусто = Пусто + 1;
		КонецЕсли;

		Если Пусто = 10 Тогда
			прервать;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Попытка
		УстановитьМонопольныйРежим(ЛОЖЬ);
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузитьТекстыОпределенногоЯзыкаИзМакета(Знач ЯзыкДляЗагрузки, Знач ПроверятьНаличиеВообще = ЛОЖЬ) Экспорт

	Если ЗначениеЗаполнено(ЯзыкДляЗагрузки)
		И НЕ ЯзыкДляЗагрузки = ПредопределенноеЗначение("Справочник.Языки.Русский") Тогда

		ОбщийМодульТекстСервер.ЗагрузитьТекстыЯзыкаИзМакета("Макет" + ЯзыкДляЗагрузки.Код, ЯзыкДляЗагрузки, , ИСТИНА, , ПроверятьНаличиеВообще);
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьТекстыЯзыкаИзМакета(Знач ИмяМакета, Знач Язык, Знач УжеМонопольный = ЛОЖЬ, Знач ПроверятьНеобходимостьЗагрузить = ЛОЖЬ, Знач Перезаписать = Неопределено, Знач ПроверятьНаличиеВообще = ЛОЖЬ) Экспорт

	НеЗагружать = ЛОЖЬ;
	УстановленМонопольный = ЛОЖЬ;
	Если Перезаписать = Неопределено Тогда
		Перезаписать = ЛОЖЬ;
	КонецЕсли;

	Если НЕ УжеМонопольный Тогда
		Попытка
			УстановитьМонопольныйРежим(ИСТИНА);
			УстановленМонопольный = ИСТИНА;
		Исключение
		КонецПопытки;
	КонецЕсли;

	КодЯзыка = ВРег(Прав(ИмяМакета, 2));

	Если ПроверятьНаличиеВообще Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 СУММА(1) КАК КВО
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык
		|	И ТекстыНаДругихЯзыках.МашинныйПеревод = ИСТИНА";
		Запрос.УстановитьПараметр("Язык", Язык);

		РезультатЗапроса = Запрос.Выполнить();
		НеЗагружать = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;

	Если НЕ НеЗагружать
		И ПроверятьНеобходимостьЗагрузить Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СУММА(1) КАК КВО
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык
		|	И ТекстыНаДругихЯзыках.МашинныйПеревод = ИСТИНА";
		Запрос.УстановитьПараметр("Язык", Язык);
		КоличествоЗагруженных = 0;

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КоличествоЗагруженных = КоличествоЗагруженных + ?(ВыборкаДетальныеЗаписи.КВО = Null, 0, ВыборкаДетальныеЗаписи.КВО);

			КонецЦикла;
		КонецЕсли;

		Если КоличествоЗагруженных > 0 Тогда
			Макет 	= ПолучитьОбщийМакет(ИмяМакета);
			КоличествоСтрок = 999999;
			Счетчик = 15000; //их не меньше 15000
			Пусто 	= 0;

			Пока КоличествоСтрок > Счетчик Цикл
				ТекстПеревода = Макет.Область("R" + СокрЛП(формат(Счетчик, "ЧГ=0")) + "C1").Текст;
				Если ПустаяСтрока(ТекстПеревода) Тогда Пусто = Пусто + 1; КонецЕсли;
				Если Пусто = 10 Тогда Прервать; КонецЕсли;

				Счетчик = Счетчик + 1;
			КонецЦикла;

			Если (Счетчик - КоличествоЗагруженных) < 10 Тогда
				НеЗагружать = ИСТИНА;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ НеЗагружать Тогда
		Макет 	= ПолучитьОбщийМакет(ИмяМакета);
		МакетЭталона	= ПолучитьОбщийМакет("МакетRU");
		КоличествоСтрок = 999999;
		Счетчик = 1;
		Пусто 	= 0;

		Пока КоличествоСтрок > Счетчик Цикл
			R = СокрЛП(формат(Счетчик, "ЧГ=0"));
			ТекстНаРусском = МакетЭталона.Область("R" + R + "C1").Текст;
			Если НЕ ПустаяСтрока(ТекстНаРусском) Тогда
				Пусто = 0;

				ЗаписьПеревода = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
				ЗаписьПеревода.Активность 	  = ИСТИНА;
				ЗаписьПеревода.Язык 		  = Язык;
				ЗаписьПеревода.ТекстНаРусском = ТекстНаРусском;
				ЗаписьПеревода.МашинныйПеревод= ИСТИНА;
				ЗаписьПеревода.ТекстНаЯзыке   = Макет.Область("R" + R + "C1").Текст;
				Попытка
					ЗаписьПеревода.Записать(Перезаписать);
				Исключение // замена запрещена, пользователь мог внести личное исправление
				КонецПопытки;
			Иначе
				Пусто = Пусто + 1;
			КонецЕсли;

			Если Пусто = 10 Тогда Прервать; КонецЕсли;

			Счетчик = Счетчик + 1;
		КонецЦикла;

		Макет 	= ПолучитьОбщийМакет("МакетУточненныхПереводов");
		КоличествоСтрок = 999999;
		Счетчик = 1;
		Пусто 	= 0;

		Пока КоличествоСтрок > Счетчик Цикл
			R = СокрЛП(формат(Счетчик, "ЧГ=0"));
			КодЯзыкаСтроки = Макет.Область("R" + R + "C1").Текст;
			Если НЕ ПустаяСтрока(КодЯзыкаСтроки) Тогда
				Если ВРег(СокрЛП(КодЯзыкаСтроки)) = КодЯзыка Тогда
					ТекстНаРусском = Макет.Область("R" + R + "C2").Текст;
					Пусто = 0;

					ЗаписьПеревода = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
					ЗаписьПеревода.Активность 	  = ИСТИНА;
					ЗаписьПеревода.ЭтоЭлементИнтерфейса = ИСТИНА;
					ЗаписьПеревода.Язык 		  = Язык;
					ЗаписьПеревода.ТекстНаРусском = ТекстНаРусском;
					ЗаписьПеревода.МашинныйПеревод= ЛОЖЬ; // установлены автором или за счет пользователей ручной перевод
					ЗаписьПеревода.ТекстНаЯзыке   = Макет.Область("R" + R + "C3").Текст;
					Попытка
						ЗаписьПеревода.Записать(Перезаписать);
					Исключение // замена запрещена, пользователь мог внести личное исправление
					КонецПопытки;
				КонецЕсли;
			Иначе
				Пусто = Пусто + 1;
			КонецЕсли;

			Если Пусто = 10 Тогда Прервать; КонецЕсли;

			Счетчик = Счетчик + 1;
		КонецЦикла;

		ОбновитьПовторноИспользуемыеЗначения();

		Запрос = Новый Запрос;
		Для Каждого СправочникДляПеревода Из Метаданные.Справочники Цикл
			Запрос.Текст = "ВЫБРАТЬ Н.Ссылка, Н.Наименование Из Справочник." + СправочникДляПеревода.Имя + " КАК Н ГДЕ Н.Предопределенный = ИСТИНА ";

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НаЯзыке = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ВыборкаДетальныеЗаписи.Наименование, Язык);

					Если НЕ ПустаяСтрока(НаЯзыке) Тогда
						ЗначениеПеревода = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
						ЗначениеПеревода.Активность 		= ИСТИНА;
						ЗначениеПеревода.НаЯзыке  			= НаЯзыке;
						ЗначениеПеревода.ОбъектБазыДанных   = ВыборкаДетальныеЗаписи.ссылка;
						ЗначениеПеревода.Поле				= "Наименование";
						ЗначениеПеревода.Язык               = Язык;
						ЗначениеПеревода.Записать(ИСТИНА);
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ УжеМонопольный
		И УстановленМонопольный Тогда

		Попытка
			УстановитьМонопольныйРежим(ЛОЖЬ);
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Функция   ЗаменитьПеременныеНаВПП(Знач ПрограммаПараметра = "", Знач ВПП, Знач ПрефиксИмяСтруктуры = "ВПП") Экспорт

	Если Найти(ПрограммаПараметра, "ВПП") = 0 Тогда // задавал не автор
		// При необходимости меняет части программы к выполнению на обращение к структуре. Например вместо Номенклатура.Код будет ВПП.Номенклатура.Код
		Результат = "";
		Счетчик   = 1;
		ИдетТекст = ЛОЖЬ;
		ИдетРеквизит = ЛОЖЬ;
		СтрокаПрограммы    = "";
		КоличествоСимволов = СтрДлина(ПрограммаПараметра);

		Пока Счетчик <= КоличествоСимволов Цикл
			ТекущийСимвол = Сред(ПрограммаПараметра, Счетчик, 1);

			Если ТекущийСимвол = """"
				И ИдетТекст Тогда

				ИдетТекст = ЛОЖЬ;
				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;

			ИначеЕсли ТекущийСимвол = """"
				И НЕ ИдетТекст Тогда

				ИдетТекст = ИСТИНА;

				Если НЕ ПустаяСтрока(СтрокаПрограммы) Тогда
					СтрокаПрограммы = ВРег(СтрокаПрограммы);
					Для Каждого ЭлементВПП Из ВПП Цикл
						СтрокаПрограммы = СтрЗаменить(СтрокаПрограммы, ВРег(ЭлементВПП.Ключ), ПрефиксИмяСтруктуры + "." + ЭлементВПП.Ключ);
					КонецЦикла;
				КонецЕсли;

				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;
				СтрокаПрограммы = "";

			ИначеЕсли ТекущийСимвол = "."
				И НЕ ИдетРеквизит Тогда

				ИдетРеквизит = ИСТИНА;

				Если НЕ ПустаяСтрока(СтрокаПрограммы) Тогда
					СтрокаПрограммы = ВРег(СтрокаПрограммы);
					Для Каждого ЭлементВПП Из ВПП Цикл
						СтрокаПрограммы = СтрЗаменить(СтрокаПрограммы, ВРег(ЭлементВПП.Ключ), ПрефиксИмяСтруктуры + "." + ЭлементВПП.Ключ);
					КонецЦикла;
				КонецЕсли;

				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;
				СтрокаПрограммы = "";

			ИначеЕсли ИдетРеквизит
				И ЭтотСимволКонецСлова(ТекущийСимвол) Тогда

				ИдетРеквизит = ЛОЖЬ;
				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;
			ИначеЕсли ИдетРеквизит Тогда
				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;
			ИначеЕсли ИдетТекст Тогда
				Результат = Результат + СтрокаПрограммы + ТекущийСимвол;
			Иначе
				СтрокаПрограммы = СтрокаПрограммы + ТекущийСимвол;
			КонецЕсли;

			Счетчик = Счетчик + 1;
		КонецЦикла;

		Если НЕ ПустаяСтрока(СтрокаПрограммы) Тогда
			СтрокаПрограммы = ВРег(СтрокаПрограммы);
			Для Каждого ЭлементВПП Из ВПП Цикл
				СтрокаПрограммы = СтрЗаменить(СтрокаПрограммы, ВРег(ЭлементВПП.Ключ), ПрефиксИмяСтруктуры + "." + ЭлементВПП.Ключ);
			КонецЦикла;

			Результат = Результат + СтрокаПрограммы;
		КонецЕсли;

		Результат = СтрЗаменить(Результат, "ЗНАЧЕНИЕВПП.Ссылка", "ЗначениеСсылка");
		Результат = СтрЗаменить(Результат, "ЗНАЧЕНИЕВПП.Дата", "ЗначениеДата");
		Результат = СтрЗаменить(Результат, "ВПП.ВПП", "ВПП");
	Иначе
		Результат = ПрограммаПараметра; // встречается ВПП - задавал автор, все учел
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьИменаМетаданных(ВидПечатнойФормы, РазрядМетаданных = "", ИмяМетаданных = "", Знач СсылкаНаЭлемент = Неопределено) Экспорт

	ТаблицаСопоставлений = ОбщийМодульПовтор.ПолучитьТаблицуСопоставленийПроизвольныхПечатныхФорм();

	Если НЕ ЗначениеЗаполнено(ВидПечатнойФормы)
		И ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда

		СтрокаСопоставлений = ТаблицаСопоставлений.Найти(СокрЛП(СсылкаНаЭлемент.Метаданные().Имя), "ТипОбъекта");

		Если НЕ СтрокаСопоставлений = Неопределено Тогда
			ВидПечатнойФормы = Перечисления.ВидыПечатныхФорм[СтрокаСопоставлений.ЗначениеПеречисления];
			РазрядМетаданных = СтрокаСопоставлений.РазрядМетаданных;
			ИмяМетаданных 	 = СтрокаСопоставлений.ТипОбъекта;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(РазрядМетаданных)
		И НЕ ВидПечатнойФормы = Неопределено Тогда

		СтрокаСопоставлений = ТаблицаСопоставлений.Найти(ОбщийМодульПовтор.ПолучитьСтрокуИзЗначенияПеречисления(ВидПечатнойФормы, "ВидыПечатныхФорм"), "ЗначениеПеречисления");

		Если НЕ СтрокаСопоставлений = Неопределено Тогда
			РазрядМетаданных = СтрокаСопоставлений.РазрядМетаданных;
			ИмяМетаданных 	 = СтрокаСопоставлений.ТипОбъекта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ЗначениеЗаполненоПараметрыСеансаТекущийЯзык() Экспорт

	Попытка
		Возврат ЗначениеЗаполнено(ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы"));
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;

КонецФункции

Функция   НетНиОднойЗаписиЭтогоЯзыка(Знач Язык) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке Из РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык";
	Запрос.УстановитьПараметр("Язык", Язык);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Пустой();

КонецФункции

Функция   ОпределитьПроизвольнуюПечатнуюФорму(Знач ВидПечатнойФормы = Неопределено, Знач ДатаПечати = Неопределено, Знач СсылкаНаЭлемент = Неопределено, РазрядМетаданных = "", ИмяМетаданных = "") Экспорт

	Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПроизвольныеПечатныеФормы") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если (ВидПечатнойФормы = Неопределено
		И НЕ СсылкаНаЭлемент = Неопределено)
		ИЛИ ((ПустаяСтрока(РазрядМетаданных)
		ИЛИ ПустаяСтрока(ИмяМетаданных))
		И ЗначениеЗаполнено(ВидПечатнойФормы)) Тогда

		ОбщийМодульТекстСервер.ЗаполнитьИменаМетаданных(ВидПечатнойФормы, РазрядМетаданных, ИмяМетаданных, СсылкаНаЭлемент);
	КонецЕсли;

	Если ДатаПечати = Неопределено Тогда
		ДатаПечати = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
	КонецЕсли;

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданныеПроизвольныеПечатныеФормы.ПроизвольнаяПечатнаяФорма,
	|	ЗаданныеПроизвольныеПечатныеФормы.ПроизвольнаяПечатнаяФорма.ПрограммаУсловие КАК ПрограммаУсловие
	|ИЗ РегистрСведений.ЗаданныеПроизвольныеПечатныеФормы КАК ЗаданныеПроизвольныеПечатныеФормы
	|ГДЕ ЗаданныеПроизвольныеПечатныеФормы.ВидПечатнойФормы = &ВидПечатнойФормы
	|	И (ЗаданныеПроизвольныеПечатныеФормы.Пользователь = &ПустойПользователь
	|			ИЛИ ЗаданныеПроизвольныеПечатныеФормы.Пользователь = &Пользователь)
	|	И ЗаданныеПроизвольныеПечатныеФормы.ПроизвольнаяПечатнаяФорма.НеАктуально = ЛОЖЬ
	|	И ЗаданныеПроизвольныеПечатныеФормы.ПроизвольнаяПечатнаяФорма.ПометкаУдаления = ЛОЖЬ
	|УПОРЯДОЧИТЬ ПО ЗаданныеПроизвольныеПечатныеФормы.Пользователь";
	Запрос.УстановитьПараметр("ВидПечатнойФормы", ВидПечатнойФормы);
	Запрос.УстановитьПараметр("Пользователь", ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийПользователь"));
	Запрос.УстановитьПараметр("ПустойПользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ПрограммаУсловие) Тогда
				Результат = ВыборкаДетальныеЗаписи.ПроизвольнаяПечатнаяФорма;

				Прервать;
			Иначе
				Попытка
					ПрограммаУсловие = ЛОЖЬ;
					Выполнить(" ПрограммаУсловие = " + ВыборкаДетальныеЗаписи.ПрограммаУсловие + "; ");

					Если ПрограммаУсловие Тогда
						Результат = ВыборкаДетальныеЗаписи.ПроизвольнаяПечатнаяФорма;

						Прервать;
					КонецЕсли;
				Исключение
					ТекстОписаниеОшибки = ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка выполнения проверки условия произвольной формы")+ ": " + ТекстОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Результат = Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПроизвольныеПечатныеФормы.Ссылка,
		|	ПроизвольныеПечатныеФормы.ПрограммаУсловие
		|ИЗ Справочник.ПроизвольныеПечатныеФормы КАК ПроизвольныеПечатныеФормы
		|ГДЕ ПроизвольныеПечатныеФормы.ПечатнаяФорма = &ВидПечатнойФормы
		|	И ПроизвольныеПечатныеФормы.НеАктуально = ЛОЖЬ
		|	И (ПроизвольныеПечатныеФормы.ДатаНачала = &ПустаяДата
		|			ИЛИ ПроизвольныеПечатныеФормы.ДатаНачала <= &ДатаПечати)
		|	И (ПроизвольныеПечатныеФормы.ДатаОкончания = &ПустаяДата
		|			ИЛИ ПроизвольныеПечатныеФормы.ДатаОкончания >= &ДатаПечати)
		|	И ПроизвольныеПечатныеФормы.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО ПроизвольныеПечатныеФормы.ПорядокВСпискеВыбора";
		Запрос.УстановитьПараметр("ВидПечатнойФормы", ВидПечатнойФормы);
		Запрос.УстановитьПараметр("ДатаПечати", ДатаПечати);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПроизвольнаяФормаПечати = ВыборкаДетальныеЗаписи.Ссылка;

			Если НЕ ПроизвольнаяФормаПечати.ДляПользователей.Количество() = 0 Тогда
				Для Каждого РазрешенныйПользователь Из ПроизвольнаяФормаПечати.ДляПользователей Цикл
					Если РазрешенныйПользователь.Пользователь = ПараметрыСеанса.ТекущийПользователь Тогда
						Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ПрограммаУсловие) Тогда
							Результат = ПроизвольнаяФормаПечати;
						Иначе
							Попытка
								ПрограммаУсловие = ЛОЖЬ;
								Выполнить(" ПрограммаУсловие = " + ВыборкаДетальныеЗаписи.ПрограммаУсловие + "; ");

								Если ПрограммаУсловие Тогда
									Результат = ПроизвольнаяФормаПечати;
								КонецЕсли;
							Исключение
								ТекстОписаниеОшибки = ОписаниеОшибки();
								ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка выполнения проверки условия произвольной формы")+ ": " + ТекстОписаниеОшибки);
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			Иначе
				Если ПустаяСтрока(ВыборкаДетальныеЗаписи.ПрограммаУсловие) Тогда

					Результат = ПроизвольнаяФормаПечати;
				Иначе
					Попытка
						ПрограммаУсловие = ЛОЖЬ;
						Выполнить(" ПрограммаУсловие = " + ВыборкаДетальныеЗаписи.ПрограммаУсловие + "; ");

						Если ПрограммаУсловие Тогда
							Результат = ПроизвольнаяФормаПечати;
						КонецЕсли;
					Исключение
						ТекстОписаниеОшибки = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка выполнения проверки условия произвольной формы")+ ": " + ТекстОписаниеОшибки);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;

			Если НЕ Результат = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции //Определить Произвольную Печатную Форму

Функция   ПеревестиСлово(Знач СловоДляПеревода, Знач ЯзыкПеревода, Знач ЯзыкОригинала = Неопределено) Экспорт

	Результат = "";
	Если ЯзыкОригинала = Неопределено Тогда
		ЯзыкОригинала = ПредопределенноеЗначение("Справочник.Языки.Русский");
	КонецЕсли;

	Если НЕ ЯзыкОригинала = ПредопределенноеЗначение("Справочник.Языки.Русский") Тогда
		СловоДляПеревода = ОбщийМодульТекстСервер.ПолучитьРусскийТекстНаЯзыке(СловоДляПеревода, ЯзыкПеревода);
	КонецЕсли;

	Результат = ОбщийМодульТекстСервер.ПолучитьТекстНаЯзыке(СловоДляПеревода, ЯзыкПеревода);

	Возврат Результат;

КонецФункции //ПеревестиСлово

Процедура ПередатьПереводыДругомуОбъекту(Знач Источник, Знач Приемник) Экспорт

	Если ЗначениеЗаполнено(Источник)
		И ЗначениеЗаполнено(Приемник) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияНаДругихЯзыках.Поле,
		|	ЗначенияНаДругихЯзыках.Язык,
		|	ЗначенияНаДругихЯзыках.НаЯзыке
		|ИЗ РегистрСведений.ЗначенияНаДругихЯзыках КАК ЗначенияНаДругихЯзыках
		|ГДЕ ЗначенияНаДругихЯзыках.ОбъектБазыДанных = &ОбъектБазыДанных";
		Запрос.УстановитьПараметр("ОбъектБазыДанных", Источник);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Запись Зндя для ЗначенияНаДругихЯзыках
				ЗначенияНаДругихЯзыках = РегистрыСведений.ЗначенияНаДругихЯзыках.СоздатьМенеджерЗаписи();
				ЗначенияНаДругихЯзыках.Активность = ИСТИНА;
				ЗначенияНаДругихЯзыках.НаЯзыке = ВыборкаДетальныеЗаписи.НаЯзыке;
				ЗначенияНаДругихЯзыках.ОбъектБазыДанных = Приемник;
				ЗначенияНаДругихЯзыках.Поле = ВыборкаДетальныеЗаписи.Поле;
				ЗначенияНаДругихЯзыках.Язык = ВыборкаДетальныеЗаписи.Язык;
				Попытка
					ЗначенияНаДругихЯзыках.Записать(ИСТИНА);
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция   ПолучитьВсеПараметрыПечатиОбъекта(Знач ОбъектДляПечати, Знач РазрядМетаданных, Знач ИмяМетаданных) Экспорт

	Результат = Неопределено;
	Если ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПроизвольныеПечатныеФормы") Тогда
		Если ТипЗнч(ОбъектДляПечати) = Тип("Структура") Тогда
			Результат = ОбъектДляПечати;
		Иначе
			Результат = Новый Структура("ЭтоВычисленнаяСтруктура", ЛОЖЬ);
			ПереченьРеквизитов = Метаданные[РазрядМетаданных][ИмяМетаданных].Реквизиты;

			Для Каждого РеквизитМетаданных Из ПереченьРеквизитов Цикл
				Результат.Вставить(РеквизитМетаданных.Имя, ОбъектДляПечати[РеквизитМетаданных.Имя]);
			КонецЦикла;

			Попытка
				ПереченьСтандартныхРеквизитов = Метаданные[РазрядМетаданных][ИмяМетаданных].СтандартныеРеквизиты;
				Для Каждого РеквизитМетаданных Из ПереченьСтандартныхРеквизитов Цикл
					Результат.Вставить(РеквизитМетаданных.Имя, ОбъектДляПечати[РеквизитМетаданных.Имя]);
				КонецЦикла;
			Исключение //объект метаданных не предусматривает (напр. обработка, отчет)
			КонецПопытки;

			Для Каждого ТаблицаОбъекта Из Метаданные[РазрядМетаданных][ИмяМетаданных].ТабличныеЧасти Цикл
				Результат.Вставить("ТАБЛИЦА_" + ТаблицаОбъекта.Имя, ОбъектДляПечати[ТаблицаОбъекта.Имя]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьОбщееИННИлиОКПО(Знач ОрганизацияИлиКонтрагент = Неопределено) Экспорт

	РезультатПолучитьОбщееИННИлиОКПО = "";

	Если ОрганизацияИлиКонтрагент = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ОрганизацияИлиКонтрагент) Тогда

		ОрганизацияИлиКонтрагент = ПредопределенноеЗначение("Справочник.Организации.ОсновноеПредприятие");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ОрганизацияИлиКонтрагент.ИНН) Тогда
		РезультатПолучитьОбщееИННИлиОКПО = ОрганизацияИлиКонтрагент.ИНН;
	Иначе
		РезультатПолучитьОбщееИННИлиОКПО = ОрганизацияИлиКонтрагент.ОКПО;
	КонецЕсли;

	Возврат РезультатПолучитьОбщееИННИлиОКПО;

КонецФункции

Функция   ПолучитьОбщееНаименование(Знач Ссылка, Знач ОпределенныйЯзык = Неопределено, Знач КлиентПоставщик = Неопределено) Экспорт

	Результат = "";
	Если ЗначениеЗаполнено(Ссылка) Тогда

		Если НЕ КлиентПоставщик = Неопределено
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьПредставлениеТоваровКонтрагентами")
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда

			Результат = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Ссылка, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.НаименованиеДляПечати"), ОпределенныйЯзык, КлиентПоставщик);

			Если ПустаяСтрока(Результат) Тогда
				Результат = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Ссылка, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Наименование"), ОпределенныйЯзык, КлиентПоставщик);
			КонецЕсли;
		КонецЕсли;

		Если ПустаяСтрока(Результат) Тогда
			ПоддерживатьИныеЯзыкиКромеРусского = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПоддерживатьИныеЯзыкиКромеРусского");
			Если НЕ ПоддерживатьИныеЯзыкиКромеРусского Тогда
				Если ЗначениеЗаполнено(Ссылка.НаименованиеДляПечати) Тогда
					Результат = Ссылка.НаименованиеДляПечати;
				Иначе
					Результат = Ссылка.Наименование;
				КонецЕсли;
			Иначе
				Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "НаименованиеДляПечати", , ОпределенныйЯзык, "Наименование");

				Если ПустаяСтрока(Результат) Тогда
					Результат = ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Ссылка, "Наименование", , ОпределенныйЯзык);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура")
			И ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ИспользоватьРеквизитАртикулНоменклатуры")
			И НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ВыводитьАртикулОтдельнойКолонкой") Тогда

			ПоляПредставленийНоменклатурыАртикул = ОбщийМодульТоварСервер.ПолучитьЗначениеПредставленияНоменклатурыКонтрагентом(Ссылка, ПредопределенноеЗначение("Перечисление.ПоляПредставленийНоменклатуры.Артикул"), ОпределенныйЯзык, КлиентПоставщик, ИСТИНА);

			Если НЕ ПустаяСтрока(ПоляПредставленийНоменклатурыАртикул) Тогда
				Результат = Результат + ", " + ПоляПредставленийНоменклатурыАртикул;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьПереводДляЭлементаНаЯзыке(Знач ТекстКПереводу, Знач ОпределенныйЯзык = Неопределено, Знач ЯзыкКонфигуратора = Неопределено) Экспорт

	Результат = "";
	Если ОпределенныйЯзык = Неопределено Тогда
		ОпределенныйЯзык = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
	КонецЕсли;

	Русский = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский");
	Если ЯзыкКонфигуратора = Неопределено Тогда
		ЯзыкКонфигуратора = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");
	КонецЕсли;

	Если ЗначениеЗаполнено(ЯзыкКонфигуратора)
		И НЕ ЯзыкКонфигуратора = Русский
		И НЕ ОпределенныйЯзык = ЯзыкКонфигуратора Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаРусском
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ %1 ТекстыНаДругихЯзыках.ТекстНаЯзыке = &ТекстНаЯзыке
		|	И ТекстыНаДругихЯзыках.Язык = &Язык
		|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";

		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПереводитьЭлементыИнтерфейсаПрограммно") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " ТекстыНаДругихЯзыках.ЭтоЭлементИнтерфейса = ИСТИНА И ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
		КонецЕсли;

		Запрос.УстановитьПараметр("ТекстНаЯзыке", ТекстКПереводу);
		Запрос.УстановитьПараметр("Язык", ЯзыкКонфигуратора);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаРусском = ВыборкаДетальныеЗаписи.ТекстНаРусском;

			Если НЕ ПустаяСтрока(ТекстНаРусском) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке
				|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
				|ГДЕ %1 ТекстыНаДругихЯзыках.ТекстНаРусском = &ТекстНаРусском
				|	И ТекстыНаДругихЯзыках.Язык = &Язык
				|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";

				Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПереводитьЭлементыИнтерфейсаПрограммно") Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " ТекстыНаДругихЯзыках.ЭтоЭлементИнтерфейса = ИСТИНА И ");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
				КонецЕсли;

				Запрос.УстановитьПараметр("ТекстНаРусском", ТекстНаРусском);
				Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);

				РезультатЗапроса = Запрос.Выполнить();

				Если НЕ РезультатЗапроса.Пустой() Тогда
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаЯзыке;

					Если НЕ ПустаяСтрока(ТекстНаЯзыкеТут) Тогда
						Результат = "" + ТекстНаЯзыкеТут ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (НЕ ЗначениеЗаполнено(ЯзыкКонфигуратора) ИЛИ ЯзыкКонфигуратора = Русский)
		И НЕ ОпределенныйЯзык = Русский Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ %1 ТекстыНаДругихЯзыках.ТекстНаРусском = &ТекстНаРусском
		|	И ТекстыНаДругихЯзыках.Язык = &Язык
		|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";

		Если НЕ ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ПереводитьЭлементыИнтерфейсаПрограммно") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", " ТекстыНаДругихЯзыках.ЭтоЭлементИнтерфейса = ИСТИНА И ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", "");
		КонецЕсли;

		Запрос.УстановитьПараметр("ТекстНаРусском", ТекстКПереводу);
		Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаЯзыке;

			Если НЕ ПустаяСтрока(ТекстНаЯзыкеТут) Тогда
				Результат = "" + ТекстНаЯзыкеТут ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция   ПолучитьПереводТекста(Знач ТекстДляПеревода, Знач ЯзыкПеревода, Знач ЯзыкОригинала = Неопределено) Экспорт

	Перевод = "";
	Если ЯзыкОригинала = Неопределено Тогда
		ЯзыкОригинала = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		Если НЕ ЗначениеЗаполнено(ЯзыкОригинала) Тогда
			ЯзыкОригинала = ПредопределенноеЗначение("Справочник.Языки.Русский");
		КонецЕсли;
	КонецЕсли;

	СтрокиТекстаДляПеревода = СтрЗаменить(ТекстДляПеревода, " ", Символы.ПС);

	Для Сч = 1 По СтрЧислоСтрок(СтрокиТекстаДляПеревода) Цикл
		Перевод = Перевод + ОбщийМодульТекстСервер.ПеревестиСлово(СтрПолучитьСтроку(СтрокиТекстаДляПеревода, сч), ЯзыкПеревода, ЯзыкОригинала) + " ";
	КонецЦикла;

	Возврат СокрЛП(Перевод);

КонецФункции

Функция   ПолучитьПереченьДляПроизвольнойФормы(ВходящаяТаблицаПеречня = Неопределено, Знач ВидПечатнойФормы, Знач ДляПеречняПараметров = ЛОЖЬ, Знач ДляТаблицы = "", Знач РазрядМетаданных = "", Знач ИмяМетаданных = "", Знач ДляДемонстрации = ЛОЖЬ) Экспорт

	ТаблицаПеречня = Новый ТаблицаЗначений;
	ТаблицаПеречня.Колонки.Добавить("ИмяПрограммное");
	ТаблицаПеречня.Колонки.Добавить("Описание");
	ТаблицаПеречня.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПеречня.Колонки.Добавить("Программно");
	ТаблицаПеречня.Колонки.Добавить("ТипПараметра");
	ТаблицаПеречня.Колонки.Добавить("Программа");
	ТаблицаПеречня.Колонки.Добавить("ЗначениеПараметра");

	МассивДляОписанияТипов = Новый Массив;
	МассивДляОписанияТипов.Добавить(Тип("Булево"));
	ТаблицаПеречня.Колонки.Добавить("НеРоднойРеквизит", Новый ОписаниеТипов(МассивДляОписанияТипов));
	ОбщийМодульТекстСервер.ЗаполнитьИменаМетаданных(ВидПечатнойФормы, РазрядМетаданных, ИмяМетаданных);

	Если ПустаяСтрока(РазрядМетаданных)
		И ПустаяСтрока(ИмяМетаданных) Тогда

		РазрядМетаданных = "Документы";
		ИмяМетаданных = "РасходыТовара";
	КонецЕсли;

	СсылочныйХозяин = РазрядМетаданных = "Справочники" ИЛИ РазрядМетаданных = "Документы";

	Если НЕ ДляПеречняПараметров Тогда // для получения областей - добавляются типовые
		СтрокаПеречня = ТаблицаПеречня.Добавить();
		СтрокаПеречня.ИмяПрограммное = "Заголовок";
		СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Заголовок печатной формы");
		СтрокаПеречня.ИмяТаблицы   	 = "";
		СтрокаПеречня.Программно   	 = ЛОЖЬ;

		Для Каждого ТаблицаОбъекта Из Метаданные[РазрядМетаданных][ИмяМетаданных].ТабличныеЧасти Цикл
			СтрокаПеречня = ТаблицаПеречня.Добавить();
			СтрокаПеречня.ИмяПрограммное = "Шапка" + ТаблицаОбъекта.Имя;
			СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Шапка таблицы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Синоним);
			СтрокаПеречня.ИмяТаблицы   	 = ""; //только для строк
			СтрокаПеречня.Программно     = ЛОЖЬ;
			СтрокаПеречня = ТаблицаПеречня.Добавить();
			СтрокаПеречня.ИмяПрограммное = "Строка" + ТаблицаОбъекта.Имя;
			СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строка таблицы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Синоним);
			СтрокаПеречня.ИмяТаблицы   	 = ТаблицаОбъекта.Имя;
			СтрокаПеречня.Программно   	 = ЛОЖЬ;
			СтрокаПеречня = ТаблицаПеречня.Добавить();
			СтрокаПеречня.ИмяПрограммное = "Итоги" + ТаблицаОбъекта.Имя;
			СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подвал (итоги) таблицы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Синоним);
			СтрокаПеречня.ИмяТаблицы   	 = "";
			СтрокаПеречня.Программно   	 = ЛОЖЬ;
		КонецЦикла;

		СтрокаПеречня = ТаблицаПеречня.Добавить();
		СтрокаПеречня.ИмяПрограммное = "Подвал";
		СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Подвал печатной формы");
		СтрокаПеречня.ИмяТаблицы   	 = "";
		СтрокаПеречня.Программно   	 = ЛОЖЬ;
	Иначе // для получения реквизитов - добавляются типовые
		Результат = Новый Структура;
		ПереченьРеквизитов = Метаданные[РазрядМетаданных][ИмяМетаданных].Реквизиты;

		Если ПустаяСтрока(ДляТаблицы) Тогда
			Для Каждого РеквизитМетаданных Из ПереченьРеквизитов Цикл
				СтрокаПеречня = ТаблицаПеречня.Добавить();
				СтрокаПеречня.ИмяПрограммное = РеквизитМетаданных.Имя;
				СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитМетаданных.Синоним);
				СтрокаПеречня.ИмяТаблицы   	 = "";
				СтрокаПеречня.Программно   	 = ЛОЖЬ;
				СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(РеквизитМетаданных.Тип));
				СтрокаПеречня.Программа		 = "ВПП." + РеквизитМетаданных.Имя;
			КонецЦикла;

			Попытка
				ПереченьСтандартныхРеквизитов = Метаданные[РазрядМетаданных][ИмяМетаданных].СтандартныеРеквизиты;
				Для Каждого РеквизитМетаданных Из ПереченьСтандартныхРеквизитов Цикл
					СтрокаПеречня = ТаблицаПеречня.Добавить();
					СтрокаПеречня.ИмяПрограммное = РеквизитМетаданных.Имя;
					СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьКрасивоеНаименованиеОбъекта(РеквизитМетаданных.Имя);
					СтрокаПеречня.ИмяТаблицы   	 = "";
					СтрокаПеречня.Программно   	 = ЛОЖЬ;
					СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(РеквизитМетаданных.Тип));
					СтрокаПеречня.Программа		 = "ВПП." + РеквизитМетаданных.Имя;
				КонецЦикла;
			Исключение //объект метаданных не предусматривает (напр. обработка, отчет)
			КонецПопытки;
		КонецЕсли;

		Для Каждого ТаблицаОбъекта Из Метаданные[РазрядМетаданных][ИмяМетаданных].ТабличныеЧасти Цикл

			Если ПустаяСтрока(ДляТаблицы)
				ИЛИ ВРег(ДляТаблицы) = ВРег(ТаблицаОбъекта.Имя) Тогда

				Для Каждого РеквизитМетаданных Из ТаблицаОбъекта.Реквизиты Цикл
					СтрокаПеречня = ТаблицаПеречня.Добавить();
					СтрокаПеречня.ИмяПрограммное = РеквизитМетаданных.Имя;
					СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитМетаданных.Синоним);
					СтрокаПеречня.ИмяТаблицы   	 = ТаблицаОбъекта.Имя;
					СтрокаПеречня.Программно   	 = ЛОЖЬ;
					ТипРеквизитаТаблицы = СокрЛП(РеквизитМетаданных.Тип);
					СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТипРеквизитаТаблицы);
					СтрокаПеречня.Программа		 = "ВПП." + РеквизитМетаданных.Имя;

					Если ВРег(ТипРеквизитаТаблицы) = "ЧИСЛО" Тогда // итоговые
						СтрокаПеречня = ТаблицаПеречня.Добавить();
						СтрокаПеречня.ИмяПрограммное = "Итого" + ТаблицаОбъекта.Имя + РеквизитМетаданных.Имя;
						СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Итого по") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Имя) + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитМетаданных.Синоним);
						СтрокаПеречня.ИмяТаблицы   	 = ""; // для объекта в целом
						СтрокаПеречня.Программно   	 = ЛОЖЬ;
						СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число");
						СтрокаПеречня.Программа		 = "ВПП." +
						?(СсылочныйХозяин, "Ссылка.", "ТАБЛИЦА_") +
						ТаблицаОбъекта.Имя + ".Итог(""" + РеквизитМетаданных.Имя + """)"; // обработки, отчеты без ссылки
						СтрокаПеречня = ТаблицаПеречня.Добавить();
						СтрокаПеречня.ИмяПрограммное = "Итого" + ТаблицаОбъекта.Имя + РеквизитМетаданных.Имя + "Прописью";
						СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Итого прописью по") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Имя) + ": " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(РеквизитМетаданных.Синоним);
						СтрокаПеречня.ИмяТаблицы   	 = "";
						СтрокаПеречня.Программно   	 = ЛОЖЬ;
						СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Строка");
						СтрокаПеречня.Программа		 = "СокрЛП(СтрЗаменить(ЧислоПрописью(ВПП." +
						?(СсылочныйХозяин, "Ссылка.", "ТАБЛИЦА_") +
						ТаблицаОбъекта.Имя + ".Итог(""" + РеквизитМетаданных.Имя + """)), "" 00"", """"))";
					КонецЕсли;
				КонецЦикла;

				СтрокаПеречня = ТаблицаПеречня.Добавить();
				СтрокаПеречня.ИмяПрограммное = "ЧислоСтрок" + ТаблицаОбъекта.Имя;
				СтрокаПеречня.Описание 		 = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число строк таблицы") + " " + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТаблицаОбъекта.Имя);
				СтрокаПеречня.ИмяТаблицы   	 = "";
				СтрокаПеречня.Программно   	 = ЛОЖЬ;
				СтрокаПеречня.ТипПараметра   = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Число");
				СтрокаПеречня.Программа		 = "ВПП." +
				?(СсылочныйХозяин, "Ссылка.", "ТАБЛИЦА_") +
				ТаблицаОбъекта.Имя + ".Количество()";
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Макет = ПолучитьОбщийМакет("МакетПараметрыПроизвольныхПечатныхФорм");
	КоличествоСтрок = 99999;
	Счетчик = 2;
	Пусто 	= 0;
	ВидПечатнойФормыСтрока = ОбщийМодульСервер.ПолучитьИмяЗначенияПеречисления(ВидПечатнойФормы);
	ИдетБлокОписанияЭтойПечатнойФормы = ЛОЖЬ;
	НаименованиеПечатнойФормы = "";
	ОбластьПараметр = "";

	Пока КоличествоСтрок > Счетчик цикл

		R = СокрЛП(формат(Счетчик, "ЧГ=0"));
		НаименованиеПечатнойФормыСтрока = СокрЛП(Макет.Область("R" + R + "C1").Текст);
		Если НЕ ПустаяСтрока(НаименованиеПечатнойФормыСтрока) Тогда
			НаименованиеПечатнойФормы = НаименованиеПечатнойФормыСтрока;
		КонецЕсли;

		ИмяОбластиПараметра = СокрЛП(Макет.Область("R" + R + "C3").Текст);

		Если ЗначениеЗаполнено(ИмяОбластиПараметра) Тогда

			Если НаименованиеПечатнойФормы = ВидПечатнойФормыСтрока
				ИЛИ НаименованиеПечатнойФормы = "ОБЩИЕ"
				ИЛИ (ПустаяСтрока(НаименованиеПечатнойФормы)
				И ИдетБлокОписанияЭтойПечатнойФормы) Тогда

				ОбластьПараметрСтрока = СокрЛП(Макет.Область("R" + R + "C2").Текст);

				Если НЕ ПустаяСтрока(ОбластьПараметрСтрока) Тогда
					ОбластьПараметр = ОбластьПараметрСтрока;
				КонецЕсли;

				Если (НЕ ДляПеречняПараметров
					И ОбластьПараметр = "0")
					ИЛИ (ДляПеречняПараметров
					И ОбластьПараметр = "1") Тогда

					ИмяТаблицы = СокрЛП(СокрЛП(Макет.Область("R" + R + "C6").Текст));

					Если ПустаяСтрока(ДляТаблицы)
						ИЛИ ВРег(ДляТаблицы) = ВРег(ИмяТаблицы)
						ИЛИ (НЕ ПустаяСтрока(ДляТаблицы) И ИмяТаблицы = "ЛЮБАЯ") Тогда

						Описание = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(СокрЛП(Макет.Область("R" + R + "C4").Текст));

						Если НЕ ПустаяСтрока(Описание)
							ИЛИ НЕ ДляДемонстрации Тогда

							СтрокаПеречня = ТаблицаПеречня.Найти(ИмяОбластиПараметра, "ИмяПрограммное");

							Если СтрокаПеречня = Неопределено Тогда
								СтрокаПеречня = ТаблицаПеречня.Добавить();
							КонецЕсли;

							СтрокаПеречня.ИмяПрограммное = ИмяОбластиПараметра;
							СтрокаПеречня.Описание 		 = Описание;
							СтрокаПеречня.ИмяТаблицы   	 = ИмяТаблицы;
							СтрокаПеречня.Программно     = ?(СокрЛП(Макет.Область("R" + R + "C7").Текст) = "1", ИСТИНА, ЛОЖЬ);

							Если НаименованиеПечатнойФормы = "ОБЩИЕ" Тогда
								СтрокаПеречня.НеРоднойРеквизит = ИСТИНА;
							КонецЕсли;

							Если ДляПеречняПараметров Тогда
								ТипПараметра = СокрЛП(Макет.Область("R" + R + "C5").Текст);
								СтрокаПеречня.ТипПараметра = ТипПараметра;
								Если НЕ ПустаяСтрока(ТипПараметра) Тогда
									СтрокаПеречня.Описание = СтрокаПеречня.Описание + " (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ТипПараметра) + ")";
								КонецЕсли;

								Если Не ПустаяСтрока(ИмяТаблицы) Тогда
									СтрокаПеречня.Описание = "" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ИмяТаблицы) + ": " + СтрокаПеречня.Описание;
								КонецЕсли;

								СтрокаПеречня.Программа		 = СокрЛП(Макет.Область("R" + R + "C8").Текст);
							Иначе
								Если НЕ ПустаяСтрока(ИмяТаблицы)
									И НЕ ИмяТаблицы = "ЛЮБАЯ" Тогда

									СтрокаПеречня.Описание = СтрокаПеречня.Описание + " (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(ИмяТаблицы) + ")";
								КонецЕсли;

								Если СтрокаПеречня.Программно Тогда
									СтрокаПеречня.Описание = СтрокаПеречня.Описание + " (" + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СПЕЦИАЛЬНАЯ") + ")";
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ НаименованиеПечатнойФормы = "ОБЩИЕ" Тогда
					ИдетБлокОписанияЭтойПечатнойФормы = ИСТИНА;
				КонецЕсли;
			ИначеЕсли ИдетБлокОписанияЭтойПечатнойФормы Тогда
				ИдетБлокОписанияЭтойПечатнойФормы = ЛОЖЬ;

				Прервать;
			КонецЕсли;
		Иначе
			Пусто = Пусто + 1;
		КонецЕсли;

		Если Пусто = 10 Тогда
			Прервать;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Если НЕ ВходящаяТаблицаПеречня = Неопределено Тогда
		ВходящаяТаблицаПеречня.Очистить();
		ВходящаяТаблицаПеречня.Загрузить(ТаблицаПеречня);

		Возврат ВходящаяТаблицаПеречня;
	Иначе

		Возврат ТаблицаПеречня;
	КонецЕсли;

КонецФункции

Функция   ПолучитьПредставлениеНаЯзыке(Знач Локация, Знач ПолеЗначения, Знач ОтказатьсяПриОтсутствии, Знач ЯзыкДокументов = Неопределено) Экспорт
	Возврат ОбщийМодульПовтор.ПолучитьПредставлениеНаЯзыке(Локация, ПолеЗначения, ОтказатьсяПриОтсутствии, ЯзыкДокументов);
КонецФункции

Функция   ПолучитьРусскийТекстНаЯзыке(Знач ТекстНаНеРусском, Знач ОпределенныйЯзык) Экспорт

	ТекстНаЯзыке = ТекстНаНеРусском;
	Если НЕ ОпределенныйЯзык = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский") Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаРусском
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.Язык = &Язык
		|	И ТекстыНаДругихЯзыках.ТекстНаЯзыке = &ТекстНаЯзыке
		|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";

		Запрос.УстановитьПараметр("ТекстНаЯзыке", ТекстНаНеРусском);
		Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаРусском;

			Если ЗначениеЗаполнено(ТекстНаЯзыкеТут) Тогда
				ТекстНаЯзыке = "" + ТекстНаЯзыкеТут ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстНаЯзыке;

КонецФункции

Функция   ПолучитьТекстНаЯзыке(Знач ТекстНаРусском, Знач ОпределенныйЯзык = Неопределено, Знач НасильноВернутьРусский = ЛОЖЬ, Знач ВернутьПереводНаЯзыкеПользователя = ЛОЖЬ) Экспорт

	ТекстНаЯзыке = ТекстНаРусском;
	ИПеревестиНаСвойЯзык = Неопределено;
	Если ВернутьПереводНаЯзыкеПользователя Тогда
		ЯзыкПользователя = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		ТекущийЯзыкИнтерфейса = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ТекущийЯзыкИнтерфейса");

		Если ТекущийЯзыкИнтерфейса = ЯзыкПользователя Тогда
			Возврат ТекстНаЯзыке;
		ИначеЕсли ЯзыкПользователя = ПредопределенноеЗначение("Справочник.Языки.Русский") Тогда
			НасильноВернутьРусский = ИСТИНА;
		Иначе
			НасильноВернутьРусский = ИСТИНА;
			ИПеревестиНаСвойЯзык = ЯзыкПользователя;
		КонецЕсли;
	КонецЕсли;

	Если НасильноВернутьРусский Тогда
		Перевести = ЛОЖЬ;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаРусском
		|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
		|ГДЕ ТекстыНаДругихЯзыках.ТекстНаЯзыке = &ТекстНаРусском
		|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";
		Запрос.УстановитьПараметр("ТекстНаРусском", ТекстНаРусском); // это вероятно НЕ русский

		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаРусском;

			Если НЕ ПустаяСтрока(ТекстНаЯзыкеТут) Тогда
				ТекстНаЯзыке = "" + ТекстНаЯзыкеТут;

				Если НЕ ИПеревестиНаСвойЯзык = Неопределено Тогда
					ОпределенныйЯзык = ЯзыкПользователя;
					ТекстНаРусском = ТекстНаЯзыке;
					Перевести = ИСТИНА;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Перевести = ИСТИНА;
	КонецЕсли;

	Если Перевести Тогда
		Если ОпределенныйЯзык = Неопределено Тогда
			ОпределенныйЯзык = ОбщийМодульПовтор.ПолучитьПараметрСеанса("ТекущийЯзыкИнтерфейсаПрограммы");
		КонецЕсли;

		Если НЕ ОпределенныйЯзык = ОбщийМодульПовтор.ЗначениеПредопределенного("Справочники.Языки.Русский") Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 ТекстыНаДругихЯзыках.ТекстНаЯзыке
			|ИЗ РегистрСведений.ТекстыНаДругихЯзыках КАК ТекстыНаДругихЯзыках
			|ГДЕ ТекстыНаДругихЯзыках.ТекстНаРусском = &ТекстНаРусском
			|	И ТекстыНаДругихЯзыках.Язык = &Язык
			|УПОРЯДОЧИТЬ ПО ТекстыНаДругихЯзыках.МашинныйПеревод";
			Запрос.УстановитьПараметр("ТекстНаРусском", ТекстНаРусском);
			Запрос.УстановитьПараметр("Язык", ОпределенныйЯзык);

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				ВыборкаДетальныеЗаписи.Следующий();
				ТекстНаЯзыкеТут = ВыборкаДетальныеЗаписи.ТекстНаЯзыке;

				Если НЕ ПустаяСтрока(ТекстНаЯзыкеТут) Тогда
					ТекстНаЯзыке = "" + ТекстНаЯзыкеТут;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстНаЯзыке;

КонецФункции

Функция   ПреобразоватьВЧисло(Знач ЗначениеДляПреобразования = 0) Экспорт

	Попытка  //убрать попытку - выяснить состав !!!
		Результат = Число(ЗначениеДляПреобразования);
	Исключение
		Результат = 0;
	КонецПопытки;

	Возврат Результат;

КонецФункции

Процедура СоздатьЗаписьОТексте(Знач ТекстНаРусском, Знач Язык, Знач ЗначениеПеревода = "", Знач Насильно = ЛОЖЬ, Знач МашинныйПеревод = ИСТИНА) Экспорт

	ТекстНаЯзыке = РегистрыСведений.ТекстыНаДругихЯзыках.СоздатьМенеджерЗаписи();
	ТекстНаЯзыке.Активность 	= ИСТИНА;
	ТекстНаЯзыке.ТекстНаРусском = ТекстНаРусском;
	ТекстНаЯзыке.ТекстНаЯзыке	= ЗначениеПеревода;
	ТекстНаЯзыке.Язык 			= Язык;
	ТекстНаЯзыке.МашинныйПеревод= МашинныйПеревод;
	Попытка
		ТекстНаЯзыке.Записать(Насильно);
	Исключение
	КонецПопытки;

КонецПроцедуры

Функция   СтрокаТипаРеквизита(Знач ОбъектСРеквизитом, Знач ИмяРеквизитаЭлемента) Экспорт

	ТипТут = ТипЗнч(ОбъектСРеквизитом[ИмяРеквизитаЭлемента]);
	РеквизитЭлементаТип = "";
	Если ТипТут = Тип("Строка") Тогда
		РеквизитЭлементаТип = "Строка";
	ИначеЕсли ТипТут = Тип("Булево") Тогда
		РеквизитЭлементаТип = "Булево";
	ИначеЕсли ТипТут = Тип("Число") Тогда
		РеквизитЭлементаТип = "Число";
	ИначеЕсли ТипТут = Тип("Дата") Тогда
		РеквизитЭлементаТип = "Дата";

	Иначе
		НайденыМета = Метаданные.НайтиПоТипу(ТипТут);
		Если НЕ НайденыМета = Неопределено Тогда
			РеквизитЭлементаТип = СтрЗаменить(НайденыМета.ПолноеИмя(), ".", "Ссылка.");
		Иначе
			РеквизитЭлементаТип = "NULL";
		КонецЕсли;
	КонецЕсли;

	Возврат РеквизитЭлементаТип;

КонецФункции

Функция   СформироватьДокументПоПроизвольнойФорме(Знач ПроизвольнаяПечатнаяФорма, Знач ВПП = Неопределено, Знач ДокументДляПечати = Неопределено, Знач ОбъектИлиСсылкаПечати = Неопределено, Знач РазрядМетаданных = "", Знач ИмяМетаданных = "", Знач СтруктураТаблиц = Неопределено, Знач МассивИменОтобранныхОбластейПечати = Неопределено, знач ФорматСтрокСоздан = ЛОЖЬ, Знач ЗапретитьСозданиеФорматаКолонок = ЛОЖЬ) Экспорт

	Если ДокументДляПечати = Неопределено Тогда
		ДокументДляПечати = Новый ТабличныйДокумент;
	КонецЕсли;

	ОбщийМодульТекстСервер.ЗаполнитьИменаМетаданных(ПроизвольнаяПечатнаяФорма.ПечатнаяФорма, РазрядМетаданных, ИмяМетаданных);

	Если ВПП = Неопределено
		И НЕ ОбъектИлиСсылкаПечати = Неопределено
		И НЕ ПустаяСтрока(РазрядМетаданных)
		И НЕ ПустаяСтрока(ИмяМетаданных) Тогда

		ВПП = ОбщийМодульТекстСервер.ПолучитьВсеПараметрыПечатиОбъекта(ОбъектИлиСсылкаПечати, РазрядМетаданных, ИмяМетаданных);
	КонецЕсли;

	Если ВПП = Неопределено Тогда
		ВПП = Новый Структура;
	КонецЕсли;

	ЭтоВычисленнаяСтруктура = ЛОЖЬ;
	ВПП.Свойство("ЭтоВычисленнаяСтруктура", ЭтоВычисленнаяСтруктура);
	Если ЭтоВычисленнаяСтруктура = Неопределено Тогда
		ЭтоВычисленнаяСтруктура = ЛОЖЬ;
	КонецЕсли;

	Если НЕ СтруктураТаблиц = Неопределено Тогда
		Для Каждого ЭлементВПП Из СтруктураТаблиц Цикл
			Попытка
				Выполнить(" ВПП.Вставить(""ТАБЛИЦА_" + ЭлементВПП.Ключ + """, ЭлементВПП.Значение); ");
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;

	ПодходящийВидОбъекта = ЛОЖЬ;
	ИмяМетаданных = Метаданные[РазрядМетаданных][ИмяМетаданных].имя;
	РазрядМетаданных = ВРег(РазрядМетаданных);
	Если РазрядМетаданных = "ДОКУМЕНТЫ" Тогда
		ВПП.Вставить("Номер", ОбъектИлиСсылкаПечати.Номер);
		ВПП.Вставить("Дата", ОбъектИлиСсылкаПечати.Дата);
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 4);

		Если ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 4, ИСТИНА) Тогда
			ВПП.Вставить("НаправлениеДеятельности", ОбъектИлиСсылкаПечати.НаправлениеДеятельности);
		КонецЕсли;
	ИначеЕсли РазрядМетаданных = "СПРАВОЧНИКИ" Тогда
		Попытка
			ВПП.Вставить("Наименование", ОбъектИлиСсылкаПечати.Наименование);
			ВПП.Вставить("Код", ОбъектИлиСсылкаПечати.Код);
		Исключение
		КонецПопытки;
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 2);

		Если ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 2, ИСТИНА) Тогда
			ВПП.Вставить("НаправлениеДеятельности", ОбъектИлиСсылкаПечати.НаправлениеДеятельности);
		КонецЕсли;
	ИначеЕсли РазрядМетаданных = "РегистрыСведений" Тогда
		ПодходящийВидОбъекта = ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 3);

		Если ОбщийМодульПовтор.ВыяснитьПодходящийВидОбъекта(ИмяМетаданных, 3, ИСТИНА) Тогда
			ВПП.Вставить("НаправлениеДеятельности", ОбъектИлиСсылкаПечати.НаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;

	Если ПодходящийВидОбъекта Тогда
		ВПП.Вставить("Ответственный", ОбъектИлиСсылкаПечати.Ответственный);
		ВПП.Вставить("ДатаСоздания", ОбъектИлиСсылкаПечати.ДатаСоздания);
		ВПП.Вставить("ДатаРедакции", ОбъектИлиСсылкаПечати.ДатаРедакции);
	КонецЕсли;

	Макет = Неопределено;
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	Если ПроизвольнаяПечатнаяФорма.ФормаВБазеДанных Тогда
		Если ТипЗнч(ПроизвольнаяПечатнаяФорма.ХранилищеПечатнойФормы) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = ПроизвольнаяПечатнаяФорма.ХранилищеПечатнойФормы.Получить();
		Иначе
			ДвоичныеДанные = ПроизвольнаяПечатнаяФорма.ХранилищеПечатнойФормы;
		КонецЕсли;

		ДвоичныеДанные.Записать(ИмяФайлаМакета);
		Макет = Новый ТабличныйДокумент;
		Макет.Прочитать(ИмяФайлаМакета);
	ИначеЕсли НЕ ПустаяСтрока(ПроизвольнаяПечатнаяФорма.СсылкаНаФайлПроизвольнойПечатнойФормы) Тогда
		Попытка
			КопироватьФайл(ПроизвольнаяПечатнаяФорма.СсылкаНаФайлПроизвольнойПечатнойФормы, ИмяФайлаМакета);
			Макет = Новый ТабличныйДокумент;
			Макет.Прочитать(ИмяФайлаМакета);
		Исключение
			ТекстОписаниеОшибки = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка копирования файла внешнего макета") + ": " + ТекстОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;

	Если НЕ Макет = Неопределено Тогда
		// специальные переменные для учета в программах строк таблиц и вывода в качестве расчетных сумм, помимо обычного Итого
		ЗначениеЧисло 	= 0;
		ЗначениеЧисло2 	= 0;
		ЗначениеЧисло3 	= 0;
		ЗначениеЧисло4 	= 0;
		ЗначениеЧисло5 	= 0;
		ЗначениеСтрока 	= "";
		ЗначениеСтрока2	= "";
		ЗначениеДата 	= '00010101';
		ЗначениеДата2 	= '00010101';
		ЗначениеСсылка	= Неопределено;
		ЗначениеСсылка2	= Неопределено;
		ЗначениеБулево	= ЛОЖЬ;
		ЗначениеМассив	= Новый Массив;
		ЗначениеСписок	= Новый СписокЗначений;
		ЗначениеТаблицаЗначений = Новый ТаблицаЗначений;
		ИспользоватьПрограммируемыеПараметры = ПроизвольнаяПечатнаяФорма.ИспользоватьПрограммируемыеПараметры;
		ПереченьЗаявленныхОбластей = Новый Массив;

		Для Каждого ЗаявленнаяОбласть Из Макет.Области Цикл
			ИмяОбласти = ВРег(ЗаявленнаяОбласть.Имя);

			Если Найти(ИмяОбласти,"НЕИСПОЛЬЗУЕТСЯ") = 0
				И (МассивИменОтобранныхОбластейПечати = Неопределено
				ИЛИ НЕ МассивИменОтобранныхОбластейПечати.Найти(ИмяОбласти) = Неопределено) Тогда

				ПереченьЗаявленныхОбластей.Добавить(ИмяОбласти);
			КонецЕсли;
		КонецЦикла;

		Если НЕ ПереченьЗаявленныхОбластей.Количество() = 0 Тогда
			ПараметрыОбластейПечати = ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(, ПроизвольнаяПечатнаяФорма.ПечатнаяФорма, ИСТИНА, , РазрядМетаданных, ИмяМетаданных);
			Контрагент = Неопределено;
			КлиентЗаголовок = "";
			ПредставлениеКонтрагента = "";
			ОбщийМодульТекстСервер.ДобавитьТиповыеПараметрыОбластейПечати(ОбъектИлиСсылкаПечати, КлиентЗаголовок, Контрагент, ПредставлениеКонтрагента, ПараметрыОбластейПечати);
			ОбщийМодульТекстСервер.ДобавитьПрограммныеПараметрыОбластейПечати(ОбъектИлиСсылкаПечати, ПараметрыОбластейПечати);
			ЯзыкДокументов = ОбщийМодульПовтор.ПолучитьТекущийЯзыкДокументов(Контрагент, , ЛОЖЬ);

			Если ПроизвольнаяПечатнаяФорма.МакетСодержитПереводНесколькихЯзыков Тогда
				Макет.КодЯзыкаМакета = ЯзыкДокументов.Код;
			КонецЕсли;

			Для Каждого ПараметрОбластейПечати Из ПараметрыОбластейПечати Цикл

				Если НЕ ПараметрОбластейПечати.Программно
					И ПустаяСтрока(ПараметрОбластейПечати.ИмяТаблицы) Тогда

					Если НЕ ПараметрОбластейПечати.Программа = "ВПП." + ПараметрОбластейПечати.ИмяПрограммное Тогда
						Попытка // создаем переменную с таким же именем чтобы пользователь мог ее использовать в программируемых параметрах
							Выполнить(" ВПП.Вставить(""" + ПараметрОбластейПечати.ИмяПрограммное + """, " + ПараметрОбластейПечати.Программа + "); ");
							Выполнить(" ПараметрОбластейПечати.ЗначениеПараметра = ВПП[""" + ПараметрОбластейПечати.ИмяПрограммное + """]; ");
						Исключение
							ТекстОписаниеОшибки = ОписаниеОшибки();
							ПараметрОбластейПечати.ЗначениеПараметра = Неопределено;
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка определения значения параметра области печати") + ": " + ТекстОписаниеОшибки + Символы.ПС + ПараметрОбластейПечати.Программа);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

			Если ИспользоватьПрограммируемыеПараметры Тогда
				СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", "-", Перечисления.МоментыВремени.До);
				НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);
				Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
					Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
						Попытка
							УсловиеВыполнения = ИСТИНА;

							Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
								Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
							КонецЕсли;

							Если УсловиеВыполнения Тогда
								Выполнить(" " + НужнаяПрограмма.Программа + " ");
							КонецЕсли;

							ВПП.ЗначениеЧисло 	= ЗначениеЧисло;
							ВПП.ЗначениеЧисло2 	= ЗначениеЧисло2;
							ВПП.ЗначениеЧисло3 	= ЗначениеЧисло3;
							ВПП.ЗначениеЧисло4 	= ЗначениеЧисло4;
							ВПП.ЗначениеЧисло5 	= ЗначениеЧисло5;
							ВПП.ЗначениеСтрока2	= ЗначениеСтрока2;
							ВПП.ЗначениеДата2 	= ЗначениеДата2;
							ВПП.ЗначениеСсылка2	= ЗначениеСсылка2;
							ВПП.ЗначениеСтрока	= ЗначениеСтрока;
							ВПП.ЗначениеДата 	= ЗначениеДата;
							ВПП.ЗначениеСсылка	= ЗначениеСсылка;
							ВПП.ЗначениеБулево	= ЗначениеБулево;
							ВПП.ЗначениеМассив	= ЗначениеМассив;
							ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
							ВПП.ЗначениеСписок	= ЗначениеСписок;
						Исключение
							ТекстОписаниеОшибки = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы до макета") + ": " + ТекстОписаниеОшибки);
						КонецПопытки;
					КонецЕсли;

				КонецЦикла;

				Для Каждого ПрограммируемыйПараметр Из ПроизвольнаяПечатнаяФорма.ПрограммируемыеПараметры Цикл
					Если ПустаяСтрока(ПрограммируемыйПараметр.ИмяТаблицы) Тогда
						ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
						ПараметрОбластейПечати.ИмяПрограммное = СокрЛП(ПрограммируемыйПараметр.ИмяПрограммное);
						ПараметрОбластейПечати.Программно = ЛОЖЬ;
						ПрограммаПараметра = ОбщийМодульТекстСервер.ЗаменитьПеременныеНаВПП(ПрограммируемыйПараметр.ПрограммаПараметра, ВПП);
						Попытка
							Выполнить(" ПараметрОбластейПечати.ЗначениеПараметра = " + ПрограммаПараметра + ";");
						Исключение
							ПараметрОбластейПечати.ЗначениеПараметра = Неопределено;
							ОписаниеОшибкиТекст = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения программного значения параметра области печати") + ": " + ОписаниеОшибкиТекст + Символы.ПС + ПрограммаПараметра);
						КонецПопытки;
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;

			СтруктураЗначенийПараметров = Новый Структура;

			Для Каждого ПараметрПечати Из ПараметрыОбластейПечати Цикл
				Если ЗначениеЗаполнено(ПараметрПечати.ЗначениеПараметра) Тогда
					СтруктураЗначенийПараметров.Вставить(ПараметрПечати.ИмяПрограммное, ПараметрПечати.ЗначениеПараметра);
				КонецЕсли;

			КонецЦикла;

			ПереченьОбластейМакета = ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(, ПроизвольнаяПечатнаяФорма.ПечатнаяФорма);
			ОбластьПечатиТаблицы   = Неопределено;
			БылоТелоТаблицы 	   = ЛОЖЬ;
			Для Каждого ОбластьМакета Из ПереченьОбластейМакета Цикл
				СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", "-", Перечисления.МоментыВремени.ВоВремя);
				НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);

				Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
					Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
						Попытка
							УсловиеВыполнения = ИСТИНА;

							Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
								Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
							КонецЕсли;

							Если УсловиеВыполнения Тогда
								Выполнить(" " + НужнаяПрограмма.Программа + " ");
							КонецЕсли;

							ВПП.ЗначениеЧисло 	= ЗначениеЧисло;
							ВПП.ЗначениеЧисло2 	= ЗначениеЧисло2;
							ВПП.ЗначениеЧисло3 	= ЗначениеЧисло3;
							ВПП.ЗначениеЧисло4 	= ЗначениеЧисло4;
							ВПП.ЗначениеЧисло5 	= ЗначениеЧисло5;
							ВПП.ЗначениеСтрока2	= ЗначениеСтрока2;
							ВПП.ЗначениеДата2 	= ЗначениеДата2;
							ВПП.ЗначениеСсылка2	= ЗначениеСсылка2;
							ВПП.ЗначениеСтрока	= ЗначениеСтрока;
							ВПП.ЗначениеДата 	= ЗначениеДата;
							ВПП.ЗначениеСсылка	= ЗначениеСсылка;
							ВПП.ЗначениеБулево	= ЗначениеБулево;
							ВПП.ЗначениеМассив	= ЗначениеМассив;
							ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
							ВПП.ЗначениеСписок	= ЗначениеСписок;
						Исключение
							ОписаниеОшибкиТут = ОписаниеОшибки();
							ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы очереди макета") + ": " + ОписаниеОшибкиТут);
						КонецПопытки;
					КонецЕсли;

				КонецЦикла;

				Если НЕ ПереченьЗаявленныхОбластей.Найти(ВРег(ОбластьМакета.ИмяПрограммное)) = Неопределено Тогда
					ОбластьПечати = Макет.ПолучитьОбласть(ОбластьМакета.ИмяПрограммное);
					СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", ОбластьМакета.ИмяПрограммное, Перечисления.МоментыВремени.До);
					НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);

					Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
						Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
							Попытка
								УсловиеВыполнения = ИСТИНА;

								Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
									Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
								КонецЕсли;

								Если УсловиеВыполнения Тогда
									Выполнить(" " + НужнаяПрограмма.Программа + " ");
								КонецЕсли;

								ВПП.ЗначениеЧисло 	= ЗначениеЧисло;
								ВПП.ЗначениеЧисло2 	= ЗначениеЧисло2;
								ВПП.ЗначениеЧисло3 	= ЗначениеЧисло3;
								ВПП.ЗначениеЧисло4 	= ЗначениеЧисло4;
								ВПП.ЗначениеЧисло5 	= ЗначениеЧисло5;
								ВПП.ЗначениеСтрока2	= ЗначениеСтрока2;
								ВПП.ЗначениеДата2 	= ЗначениеДата2;
								ВПП.ЗначениеСсылка2	= ЗначениеСсылка2;
								ВПП.ЗначениеСтрока	= ЗначениеСтрока;
								ВПП.ЗначениеДата 	= ЗначениеДата;
								ВПП.ЗначениеСсылка	= ЗначениеСсылка;
								ВПП.ЗначениеБулево	= ЗначениеБулево;
								ВПП.ЗначениеМассив	= ЗначениеМассив;
								ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
								ВПП.ЗначениеСписок	= ЗначениеСписок;
							Исключение
								ОписаниеОшибкиТекст = ОписаниеОшибки();
								ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы до вывода области") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ОбластьМакета.ИмяПрограммное) + ": " + ОписаниеОшибкиТекст);
							КонецПопытки;
						КонецЕсли;

					КонецЦикла;

					Если ОбластьМакета.Программно Тогда // Специальная
						ОбластьМакета.ИмяПрограммное = ВРег(ОбластьМакета.ИмяПрограммное);
						Если ОбластьМакета.ИмяПрограммное = "ШТРИХКОД" Тогда
							СуммаТаб = Новый ТабличныйДокумент;
							СтруктураПечати = Новый Структура("ШтрихКод, ТипШтрихКода", ВПП.ШтрихКод, ВПП.ТипШтрихКода);
							ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(СуммаТаб, СтруктураПечати);
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
							ДокументДляПечати.Вывести(СуммаТаб);
						ИначеЕсли ОбластьМакета.ИмяПрограммное = "ШТРИХКОДПОЛОВИНА" Тогда
							СуммаТаб = Новый ТабличныйДокумент;
							СтруктураПечати = Новый Структура("ШтрихКод, ТипШтрихКода", ВПП.ШтрихКод, ВПП.ТипШтрихКода);
							ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(СуммаТаб, СтруктураПечати, "Половина");
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
							ДокументДляПечати.Вывести(СуммаТаб);
						ИначеЕсли ОбластьМакета.ИмяПрограммное = "ШТРИХКОД90" Тогда
							СуммаТаб = Новый ТабличныйДокумент;
							СтруктураПечати = Новый Структура("ШтрихКод, ТипШтрихКода", ВПП.ШтрихКод, ВПП.ТипШтрихКода);
							ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(СуммаТаб, СтруктураПечати, "Половина", 90);
							ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(СуммаТаб);
							ДокументДляПечати.Вывести(СуммаТаб);
						КонецЕсли;
					Иначе
						ВПП.ЗначениеЧисло 	= ЗначениеЧисло;
						ВПП.ЗначениеЧисло2 	= ЗначениеЧисло2;
						ВПП.ЗначениеЧисло3 	= ЗначениеЧисло3;
						ВПП.ЗначениеЧисло4 	= ЗначениеЧисло4;
						ВПП.ЗначениеЧисло5 	= ЗначениеЧисло5;
						ВПП.ЗначениеСтрока2	= ЗначениеСтрока2;
						ВПП.ЗначениеДата2 	= ЗначениеДата2;
						ВПП.ЗначениеСсылка2	= ЗначениеСсылка2;
						ВПП.ЗначениеСтрока	= ЗначениеСтрока;
						ВПП.ЗначениеДата 	= ЗначениеДата;
						ВПП.ЗначениеСсылка	= ЗначениеСсылка;
						ВПП.ЗначениеБулево	= ЗначениеБулево;
						ВПП.ЗначениеМассив	= ЗначениеМассив;
						ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
						ВПП.ЗначениеСписок	= ЗначениеСписок;

						Если ПустаяСтрока(ОбластьМакета.ИмяТаблицы) Тогда
							ОбластьПечати.Параметры.Заполнить(СтруктураЗначенийПараметров);
							ОбластьПечати.Параметры.Заполнить(ВПП);
							Для Каждого РисунокВОбласти Из ОбластьПечати.Рисунки Цикл
								Если ВРег(РисунокВОбласти.Имя) = "ШТРИХКОДРИСУНОК" Тогда
									СтруктураПечати = Новый Структура("ШтрихКод, ТипШтрихКода", ВПП.ШтрихКод, ВПП.ТипШтрихКода, РисунокВОбласти);
									ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(ОбластьПечати, СтруктураПечати, , , ИСТИНА, "ШТРИХКОДРИСУНОК");
								ИначеЕсли ВРег(РисунокВОбласти.Имя) = "ШТРИХКОДРИСУНОК90" Тогда
									СтруктураПечати = Новый Структура("ШтрихКод, ТипШтрихКода", ВПП.ШтрихКод, ВПП.ТипШтрихКода, РисунокВОбласти);
									ОбщийМодульТекстСервер.СформироватьОбластьШтрихКода(ОбластьПечати, СтруктураПечати, , 90, ИСТИНА, "ШТРИХКОДРИСУНОК90");
								КонецЕсли;

							КонецЦикла;

							Если Лев(ВРег(ОбластьМакета.ИмяПрограммное), 5) = "ШАПКА" Тогда // шапка таблицы выйдет только в присутствии таблицы

								Если НЕ ОбластьПечатиТаблицы = Неопределено
									И БылоТелоТаблицы Тогда

									ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиТаблицы);
									ДокументДляПечати.Вывести(ОбластьПечатиТаблицы);
									ОбластьПечатиТаблицы = Неопределено;
								КонецЕсли;

								ОбластьПечатиТаблицы = Новый ТабличныйДокумент;
								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
								ОбластьПечатиТаблицы.Вывести(ОбластьПечати);
								БылоТелоТаблицы = ЛОЖЬ;
							ИначеЕсли Лев(ВРег(ОбластьМакета.ИмяПрограммное), 5) = "ИТОГИ" Тогда

								Если НЕ ОбластьПечатиТаблицы = Неопределено
									И БылоТелоТаблицы Тогда

									ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
									ОбластьПечатиТаблицы.Вывести(ОбластьПечати);
									ДокументДляПечати.Вывести(ОбластьПечатиТаблицы);
									ОбластьПечатиТаблицы = Неопределено;
								КонецЕсли;
							Иначе

								Если НЕ ОбластьПечатиТаблицы = Неопределено
									И БылоТелоТаблицы Тогда

									ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиТаблицы);
									ДокументДляПечати.Вывести(ОбластьПечатиТаблицы);
									ОбластьПечатиТаблицы = Неопределено;
									БылоТелоТаблицы = ЛОЖЬ;
								КонецЕсли;

								ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
								ДокументДляПечати.Вывести(ОбластьПечати);
							КонецЕсли;
						Иначе // печать таблицы
							ТаблицаОбъектаПечати = Неопределено;
							ВПП.Свойство("ТАБЛИЦА_" + ОбластьМакета.ИмяТаблицы, ТаблицаОбъектаПечати);

							Если НЕ ТаблицаОбъектаПечати = Неопределено Тогда
								ПараметрыОбластейПечати = ОбщийМодульТекстСервер.ПолучитьПереченьДляПроизвольнойФормы(, ПроизвольнаяПечатнаяФорма.ПечатнаяФорма, ИСТИНА, ОбластьМакета.ИмяТаблицы);
								Для Каждого СтрокаТаблицыОбъекта Из ТаблицаОбъектаПечати Цикл
									Если ИспользоватьПрограммируемыеПараметры Тогда
										СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", ОбластьМакета.ИмяПрограммное, Перечисления.МоментыВремени.ВоВремя);
										НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);

										Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
											Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
												Попытка
													УсловиеВыполнения = ИСТИНА;

													Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
														Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
													КонецЕсли;

													Если УсловиеВыполнения Тогда
														Выполнить(" " + НужнаяПрограмма.Программа + " ");
													КонецЕсли;

													ВПП.ЗначениеЧисло 	= ЗначениеЧисло;
													ВПП.ЗначениеЧисло2 	= ЗначениеЧисло2;
													ВПП.ЗначениеЧисло3 	= ЗначениеЧисло3;
													ВПП.ЗначениеЧисло4 	= ЗначениеЧисло4;
													ВПП.ЗначениеЧисло5 	= ЗначениеЧисло5;
													ВПП.ЗначениеСтрока2	= ЗначениеСтрока2;
													ВПП.ЗначениеДата2 	= ЗначениеДата2;
													ВПП.ЗначениеСсылка2	= ЗначениеСсылка2;
													ВПП.ЗначениеСтрока	= ЗначениеСтрока;
													ВПП.ЗначениеДата 	= ЗначениеДата;
													ВПП.ЗначениеСсылка	= ЗначениеСсылка;
													ВПП.ЗначениеБулево	= ЗначениеБулево;
													ВПП.ЗначениеМассив	= ЗначениеМассив;
													ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
													ВПП.ЗначениеСписок	= ЗначениеСписок;
												Исключение
													ОписаниеОшибкиТекст = ОписаниеОшибки();
													ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы до вывода области") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ОбластьМакета.ИмяПрограммное) + ": " + ОписаниеОшибкиТекст);
												КонецПопытки;
											КонецЕсли;

										КонецЦикла;
									КонецЕсли;

									ОбластьПечати.Параметры.Заполнить(СтруктураЗначенийПараметров);
									ОбластьПечати.Параметры.Заполнить(СтрокаТаблицыОбъекта);
									ОбластьПечати.Параметры.Заполнить(ВПП);
									Для Каждого ПараметрОбластейПечати Из ПараметрыОбластейПечати Цикл
										Если НЕ ПараметрОбластейПечати.Программно Тогда
											Если НЕ ПараметрОбластейПечати.Программа = "ВПП." + ПараметрОбластейПечати.ИмяПрограммное Тогда
												Попытка // создаем переменную с таким же именем чтобы пользователь мог ее использовать в программируемых параметрах
													Выполнить(" ВПП.Вставить(""" + ПараметрОбластейПечати.ИмяПрограммное + """, " + ПараметрОбластейПечати.Программа + "); ");
													Выполнить(" ПараметрОбластейПечати.ЗначениеПараметра = ВПП[""" + ПараметрОбластейПечати.ИмяПрограммное + """]; ");
												Исключение
													ПараметрОбластейПечати.ЗначениеПараметра = Неопределено;
													// например, при задаче общего "Номенклатура" для таблицы не
												КонецПопытки;
											КонецЕсли;
										КонецЕсли;

									КонецЦикла;

									Если ИспользоватьПрограммируемыеПараметры Тогда
										Для Каждого ПрограммируемыйПараметр Из ПроизвольнаяПечатнаяФорма.ПрограммируемыеПараметры Цикл
											Если ПрограммируемыйПараметр.ИмяТаблицы = ОбластьМакета.ИмяТаблицы Тогда

												ПараметрОбластейПечати = ПараметрыОбластейПечати.Добавить();
												ПараметрОбластейПечати.ИмяПрограммное = СокрЛП(ПрограммируемыйПараметр.ИмяПрограммное);
												ПараметрОбластейПечати.Программно = ЛОЖЬ;
												ПрограммаПараметра = ОбщийМодульТекстСервер.ЗаменитьПеременныеНаВПП(ПрограммируемыйПараметр.ПрограммаПараметра, ВПП);
												Попытка
													Выполнить(" ПараметрОбластейПечати.ЗначениеПараметра = " + ПрограммаПараметра + ";");
												Исключение
													ПараметрОбластейПечати.ЗначениеПараметра = Неопределено;
													ОписаниеОшибкиТекст = ОписаниеОшибки();
													ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения программного значения параметра области печати") + ": " + ОписаниеОшибкиТекст + Символы.ПС + ПрограммаПараметра);
												КонецПопытки;
											КонецЕсли;

										КонецЦикла;
									КонецЕсли;

									СтруктураРасчетныхПолейТаблицы = Новый Структура;

									Для Каждого ПараметрПечати Из ПараметрыОбластейПечати Цикл
										Если ЗначениеЗаполнено(ПараметрПечати.ЗначениеПараметра) Тогда
											СтруктураРасчетныхПолейТаблицы.Вставить(ПараметрПечати.ИмяПрограммное, ПараметрПечати.ЗначениеПараметра);
										КонецЕсли;

									КонецЦикла;

									ОбластьПечати.Параметры.Заполнить(СтруктураРасчетныхПолейТаблицы);
									Если НЕ ОбластьПечатиТаблицы = Неопределено Тогда
										ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
										ОбластьПечатиТаблицы.Вывести(ОбластьПечати);
										БылоТелоТаблицы = ИСТИНА;
										БылаШапка = ЛОЖЬ;
									Иначе
										ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечати);
										ДокументДляПечати.Вывести(ОбластьПечати);
									КонецЕсли;

								КонецЦикла; // цикл строк таблицы
							КонецЕсли;
						КонецЕсли;

						Если ИспользоватьПрограммируемыеПараметры Тогда
							СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", ОбластьМакета.ИмяПрограммное, Перечисления.МоментыВремени.После);
							НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);
							Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
								Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
									Попытка
										УсловиеВыполнения = ИСТИНА;

										Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
											Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
										КонецЕсли;

										Если УсловиеВыполнения Тогда
											Выполнить(" " + НужнаяПрограмма.Программа + " ");
										КонецЕсли;

										ВПП.ЗначениеСтрока	= ЗначениеСтрока;
										ВПП.ЗначениеДата 	= ЗначениеДата;
										ВПП.ЗначениеСсылка	= ЗначениеСсылка;
										ВПП.ЗначениеБулево	= ЗначениеБулево;
										ВПП.ЗначениеМассив	= ЗначениеМассив;
										ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
										ВПП.ЗначениеСписок	= ЗначениеСписок;
									Исключение
										ОписаниеОшибкиТекст = ОписаниеОшибки();
										ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы после вывода области") + " " + ОбщийМодульСервисСервер.ПолучитьКрасивоеНаименованиеОбъекта(ОбластьМакета.ИмяПрограммное) + ": " + ОписаниеОшибкиТекст);
									КонецПопытки;
								КонецЕсли;

							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если НЕ ФорматСтрокСоздан Тогда
					ДокументДляПечати.Область().СоздатьФорматСтрок();
					ФорматСтрокСоздан = ИСТИНА;
				КонецЕсли;

			КонецЦикла; // цикл областей

			Если НЕ ОбластьПечатиТаблицы = Неопределено
				И БылоТелоТаблицы Тогда

				ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ОбластьПечатиТаблицы);
				ДокументДляПечати.Вывести(ОбластьПечатиТаблицы);
				ОбластьПечатиТаблицы = Неопределено;
			КонецЕсли;
		ИначеЕсли МассивИменОтобранныхОбластейПечати = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка! Области в макете не обнаружены."));
		КонецЕсли;

		Макет = Неопределено;
		Попытка
			УдалитьФайлы(ИмяФайлаМакета);
		Исключение
		КонецПопытки;

		Если ИспользоватьПрограммируемыеПараметры Тогда
			СтруктураПоискаНужнойПрограммы = Новый Структура("ОбластьПечати, МоментВремени", "-", Перечисления.МоментыВремени.После);
			НужныеПрограммы = ПроизвольнаяПечатнаяФорма.Программы.НайтиСтроки(СтруктураПоискаНужнойПрограммы);
			Для Каждого НужнаяПрограмма Из НужныеПрограммы Цикл
				Если НЕ ПустаяСтрока(НужнаяПрограмма.Программа) Тогда
					Попытка
						УсловиеВыполнения = ИСТИНА;

						Если НЕ ПустаяСтрока(НужнаяПрограмма.УсловиеВыполнения) Тогда
							Выполнить(" УсловиеВыполнения = " + НужнаяПрограмма.УсловиеВыполнения + "; ");
						КонецЕсли;

						Если УсловиеВыполнения Тогда
							Выполнить(" " + НужнаяПрограмма.Программа + " ");
						КонецЕсли;

						ВПП.ЗначениеСтрока	= ЗначениеСтрока;
						ВПП.ЗначениеДата 	= ЗначениеДата;
						ВПП.ЗначениеСсылка	= ЗначениеСсылка;
						ВПП.ЗначениеБулево	= ЗначениеБулево;
						ВПП.ЗначениеМассив	= ЗначениеМассив;
						ВПП.ЗначениеТаблицаЗначений = ЗначениеТаблицаЗначений;
						ВПП.ЗначениеСписок	= ЗначениеСписок;
					Исключение
						ОписаниеОшибкиТут = ОписаниеОшибки();
						ОбщегоНазначения.СообщитьПользователю(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка программы после макета") + ": " + ОписаниеОшибкиТут);
					КонецПопытки;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

		Если НЕ ЗапретитьСозданиеФорматаКолонок
			И ПроизвольнаяПечатнаяФорма.ШиринаКолонокЗаданаМакетом Тогда

			ДокументДляПечати.Область().СоздатьФорматСтрок();
		КонецЕсли;
	КонецЕсли;

	Если ПроизвольнаяПечатнаяФорма.ИспользоватьОтступыМасштабИПринтер Тогда
		УстановитьПараметрыПечатиДляПроизвольнойПечатнойФормы(ДокументДляПечати, ПроизвольнаяПечатнаяФорма);
	КонецЕсли;

	Возврат ДокументДляПечати;

КонецФункции // Сформировать Документ По Произвольной Форме

Процедура СформироватьОбластьШтрихКода(ОбластьШтрихКода, Знач СтруктураПечати, Знач ПостфиксОбласти = "", Знач УголПоворота = 0, Знач ПереданаОбластьПечатиСВстроеннымРисунком = ЛОЖЬ, Знач ИмяРисунка = "ШТРИХКОДРИСУНОК") Экспорт

	ТипШтрихКода = СтруктураПечати.ТипШтрихКода;
	Если НЕ ЗначениеЗаполнено(ТипШтрихКода) Тогда
		ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.CODE128");
	КонецЕсли;

	Если ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.CODE128") Тогда
		ТипКода = 4;
	ИначеЕсли ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.CODE39") Тогда
		ТипКода = 3;
	ИначеЕсли ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.EAN128") Тогда
		ТипКода = 2 ;
	ИначеЕсли ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.EAN13") Тогда
		ТипКода = 1;
	ИначеЕсли ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.EAN8") Тогда
		ТипКода = 0;
	ИначеЕсли ТипШтрихКода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихКодов.ITF14") Тогда
		ТипКода = 11;
	Иначе
		ТипКода = 99; // авто определение;
	КонецЕсли;

	АльтернативныйСпособФормированияШтрихКодаНаЭтикетках = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("АльтернативныйСпособФормированияШтрихКодаНаЭтикетках");

	Если ПереданаОбластьПечатиСВстроеннымРисунком Тогда
		РисунокШтрихКод = ОбластьШтрихКода.Рисунки[ИмяРисунка];
		Если АльтернативныйСпособФормированияШтрихКодаНаЭтикетках Тогда
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",  РисунокШтрихКод.Ширина);
			ПараметрыШтрихкода.Вставить("Высота",  РисунокШтрихКод.Высота);
			ПараметрыШтрихкода.Вставить("ТипКода", ТипКода);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст", ЛОЖЬ);
			ПараметрыШтрихкода.Вставить("РазмерШрифта"	 , 9);
			ПараметрыШтрихкода.Вставить("УголПоворота"	 , УголПоворота);// (УголПоворота));
			ПараметрыШтрихкода.Вставить("Штрихкод"		 , СтруктураПечати.ШтрихКод);
			Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			РисунокШтрихКод.Картинка = Картинка;
		Иначе
			ШиринаЭтикетки = РисунокШтрихКод.Ширина;
			ВысотаЭтикетки = РисунокШтрихКод.Высота;
			ВнешняяКомпонента 		= ОбщийМодульПовтор.ПодключитьВнешнююКомпонентуПечатиШтрихкода();

			Если НЕ ВнешняяКомпонента = Неопределено Тогда
				РисунокШтрихКодКартинка = ОбщийМодульТоварСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, СтруктураПечати.ШтрихКод, ШиринаЭтикетки, ВысотаЭтикетки, ТипКода, УголПоворота);
				Если НЕ РисунокШтрихКодКартинка = Неопределено Тогда
					РисунокШтрихКод.Картинка = РисунокШтрихКодКартинка;
				КонецЕсли;

				ВнешняяКомпонента = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РисунокШтрихКод = Неопределено;
		ФорматЭтикетки  = ОбщийМодульПовтор.ПолучитьЗначениеНастройкиИлиКонстанты("ФорматЭтикетки");

		Если АльтернативныйСпособФормированияШтрихКодаНаЭтикетках Тогда
			МакетМелкий = обработки.ПечатьШтрихкода.ПолучитьМакет("МакетМелкий");
			ЭтикеткаОбласть = МакетМелкий.ПолучитьОбласть("ШтрихКод" + ПостфиксОбласти);
			Эталон = Обработки.ПечатьШтрихкода.ПолучитьМакет("Эталон");
			КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
			РисунокШтрихКод = ЭтикеткаОбласть.Рисунки["ШтрихКодРисунок" + ПостфиксОбласти];
			ШиринаЭтикетки = Окр(РисунокШтрихКод.Ширина / КоличествоМиллиметровВПикселе);

			Если ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_3  Тогда
				ВысотаЭтикетки = ШиринаЭтикетки / 5 * 3;
			ИначеЕсли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_3_Высота_1  Тогда
				ВысотаЭтикетки = ШиринаЭтикетки / 3;
			ИначеЕсли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_1  Тогда
				ВысотаЭтикетки = ШиринаЭтикетки / 5;
			ИначеЕсли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_2_Высота_1  Тогда
				ВысотаЭтикетки = ШиринаЭтикетки / 2;
			Иначе
				ВысотаЭтикетки = Окр(РисунокШтрихКод.Высота / КоличествоМиллиметровВПикселе);
			КонецЕсли;

			Если ВРег(ПостфиксОбласти) = "ПОЛОВИНА" Тогда
				ВысотаЭтикетки = ВысотаЭтикетки / 2;
			КонецЕсли;

			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",  ШиринаЭтикетки);
			ПараметрыШтрихкода.Вставить("Высота",  ВысотаЭтикетки);
			ПараметрыШтрихкода.Вставить("ТипКода", ТипКода);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст", ЛОЖЬ);
			ПараметрыШтрихкода.Вставить("РазмерШрифта"	 , 9);
			ПараметрыШтрихкода.Вставить("УголПоворота"	 , УголПоворота);// (УголПоворота));
			ПараметрыШтрихкода.Вставить("Штрихкод"		 , СтруктураПечати.ШтрихКод);

			Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			РисунокШтрихКод.Картинка = Картинка;
		Иначе
			Макет = Обработки.ПечатьЭтикетки.ПолучитьМакет("МелкаяЭтикетка");
			ЭтикеткаОбласть = Макет.ПолучитьОбласть("ШтрихКод" + ПостфиксОбласти);
			РисунокШтрихКод = ЭтикеткаОбласть.Рисунки["ШтрихКодРисунок" + ПостфиксОбласти];
			ВысотаЭтикетки = 30;

			Если ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_3  Тогда
				ШиринаЭтикетки = ВысотаЭтикетки / 3 * 5;
			ИначеЕсли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_3_Высота_1  Тогда
				ШиринаЭтикетки = ВысотаЭтикетки * 3;
			ИначеЕсли ФорматЭтикетки = Перечисления.ФорматыЭтикеток.Ширина_5_Высота_1  Тогда
				ШиринаЭтикетки = ВысотаЭтикетки * 5;
			Иначе // 2к1
				ШиринаЭтикетки = ВысотаЭтикетки * 2;
			КонецЕсли;

			Если ВРег(ПостфиксОбласти) = "ПОЛОВИНА" Тогда
				ВысотаЭтикетки = ВысотаЭтикетки / 2;
			КонецЕсли;

			ВнешняяКомпонента 		= ОбщийМодульПовтор.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
			РисунокШтрихКодКартинка = ОбщийМодульТоварСервер.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, СтруктураПечати.ШтрихКод, ШиринаЭтикетки, ВысотаЭтикетки, ТипКода, УголПоворота);
			Если НЕ РисунокШтрихКодКартинка = Неопределено Тогда
				РисунокШтрихКод.Картинка = РисунокШтрихКодКартинка;
			КонецЕсли;

			ВнешняяКомпонента = Неопределено;
		КонецЕсли;

		ОбщийМодульСервисСервер.ЗаменитьСвоиЗначенияПараметровПечати(ЭтикеткаОбласть);
		ОбластьШтрихКода.Вывести(ЭтикеткаОбласть);
		РисунокШтрихКод = Неопределено;
	КонецЕсли;

КонецПроцедуры //Сформировать Область ШтрихКода

Функция   СформироватьСуммуПрописью(Знач Сумма,
	Знач Валюта = Неопределено,
	Знач ОпределенныйЯзык = Неопределено,
	Знач ВернутьПараметрыСуммыПрописью = Ложь,
	Знач ПараметрыПрописи = Неопределено,
	Знач БезПараметров = ЛОЖЬ,
	Знач КодВалюты = "") Экспорт

	Если Валюта = Неопределено Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ОсновнаяВалюта");
	КонецЕсли;

	ЗначениеЗаполненоОпределенныйЯзык = ЗначениеЗаполнено(ОпределенныйЯзык);

	Если ЗначениеЗаполненоОпределенныйЯзык Тогда
		ЯзыкПрописи = НРег(ОпределенныйЯзык.Код) + "_" + ВРег(ОпределенныйЯзык.Код);
	Иначе
		ЯзыкПрописи = "ru_RU";
	КонецЕсли;

	Если НЕ БезПараметров Тогда

		Если ПараметрыПрописи = Неопределено
			ИЛИ ПустаяСтрока(ПараметрыПрописи) Тогда

			ПараметрыПрописи = Валюта.ПараметрыСуммыПрописью;
		КонецЕсли;

		Если ПустаяСтрока(ПараметрыПрописи) Тогда
			ГривнаНаРусском 	= "гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2";
			ГривнаНаУкраинском 	= "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2";
			ДолларНаРусском 	= "доллар, доллара, долларов, м, цент, цента, центов, м, 2";
			ДолларНаУкраинском 	= "долар, долари, доларів, м, цент, центи, центів, м, 2";
			ЕвроНаРусском 		= "евро, евро, евро, м, цент, цента, центов, м, 2";
			ЕвроНаУкраинском 	= "євро, євро, євро, м, цент, центи, центів, м, 2";
			РубльНаРусском 		= "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
			РубльНаУкраинском 	= "рубль, рубля, рублiв, м, копійка, копійки, копійок, ж, 2";
			ПервыйСимволВалюты 	= ВРег(Лев(СокрЛП(Валюта), 1));

			Если КодВалюты = "" Тогда
				КодВалюты = Валюта.Код;
			КонецЕсли;

			Если КодВалюты = "980"
				ИЛИ ПервыйСимволВалюты = "Г" Тогда

				Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
					Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
						ПараметрыПрописи = ГривнаНаРусском;
						Если НЕ ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "ru_RU";
						КонецЕсли;
					Иначе
						ПараметрыПрописи = ГривнаНаУкраинском;

						Если ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "uk_UA";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли КодВалюты = "840"
				ИЛИ ПервыйСимволВалюты = "U"
				ИЛИ ПервыйСимволВалюты = "Д" Тогда

				Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
					Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
						ПараметрыПрописи = ДолларНаРусском;
						Если НЕ ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "ru_RU";
						КонецЕсли;
					Иначе
						ПараметрыПрописи = ДолларНаУкраинском;

						Если ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "uk_UA";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли КодВалюты = "978"
				ИЛИ ПервыйСимволВалюты = "Е"
				ИЛИ ПервыйСимволВалюты = "E" Тогда

				Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда
					Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
						ПараметрыПрописи = ЕвроНаРусском;
						Если НЕ ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "ru_RU";
						КонецЕсли;
					Иначе
						ПараметрыПрописи = ЕвроНаУкраинском;

						Если ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "uk_UA";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе // 643
				Если НЕ ЗначениеЗаполненоОпределенныйЯзык Тогда

					Если ОбщийМодульПовтор.ТекущийЯзыкРусский() Тогда
						ПараметрыПрописи = РубльНаРусском;
						Если НЕ ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "ru_RU";
						КонецЕсли;
					Иначе
						ПараметрыПрописи = РубльНаУкраинском;

						Если ЯзыкПрописи = "ru_RU" Тогда
							ЯзыкПрописи = "uk_UA";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПустаяСтрока(ПараметрыПрописи) Тогда
			Если ОпределенныйЯзык = ПредопределенноеЗначение("Справочник.Языки.Украинский") Тогда
				ПараметрыПрописи = РубльНаУкраинском;
				ЯзыкПрописи = "uk_UA";
			Иначе
				ПараметрыПрописи = РубльНаРусском;
				ЯзыкПрописи = "ru_RU";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВернутьПараметрыСуммыПрописью Тогда
		Возврат ПараметрыПрописи;
	Иначе
		Результат = ЧислоПрописью(Сумма, "Л=" + ЯзыкПрописи, ПараметрыПрописи);

		Если БезПараметров Тогда
			Результат = СокрЛП(СтрЗаменить(Результат, " 00", ""));
		КонецЕсли;

		Возврат Результат;
	КонецЕсли;

КонецФункции // Сформировать Сумму Прописью

функция   ТекущийЯзыкРусский() Экспорт
	Возврат ОбщийМодульПовтор.ТекущийЯзыкРусский();
КонецФункции

Процедура УстановитьПараметрыПечатиДляПроизвольнойПечатнойФормы(ТабличныйДокумент, Знач ПроизвольнаяПечатнаяФорма, Знач ЗаданноеИмяПринтера = "") Экспорт

	ТабличныйДокумент.РазмерКолонтитулаСверху = ПроизвольнаяПечатнаяФорма.РазмерКолонтитулаСверху;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = ПроизвольнаяПечатнаяФорма.РазмерКолонтитулаСнизу;
	ТабличныйДокумент.ПолеСверху  = ПроизвольнаяПечатнаяФорма.ПолеСверху;
	ТабличныйДокумент.ПолеСлева   = ПроизвольнаяПечатнаяФорма.ПолеСлева;
	ТабличныйДокумент.ПолеСнизу   = ПроизвольнаяПечатнаяФорма.ПолеСнизу;
	ТабличныйДокумент.ПолеСправа  = ПроизвольнаяПечатнаяФорма.ПолеСправа;
	АвтоМасштаб	= ПроизвольнаяПечатнаяФорма.АвтоМасштаб;
	ТабличныйДокумент.АвтоМасштаб = АвтоМасштаб;

	Если НЕ ПроизвольнаяПечатнаяФорма.ВысотаСтраницы = 0 Тогда
		ТабличныйДокумент.ВысотаСтраницы = ПроизвольнаяПечатнаяФорма.ВысотаСтраницы;
	КонецЕсли;

	Если НЕ ПроизвольнаяПечатнаяФорма.ШиринаСтраницы = 0 Тогда
		ТабличныйДокумент.ШиринаСтраницы = ПроизвольнаяПечатнаяФорма.ШиринаСтраницы;
	КонецЕсли;

	Если НЕ ОбщийМодульСервисСервер.ПолучитьВерсиюПлатформы() < 803040000 Тогда
		Если НЕ ПустаяСтрока(ПроизвольнаяПечатнаяФорма.ДвусторонняяПечать) Тогда
			Если ПроизвольнаяПечатнаяФорма.ДвусторонняяПечать = "ПереворотВверх" Тогда
				Выполнить(" ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх; ");
			ИначеЕсли ПроизвольнаяПечатнаяФорма.ДвусторонняяПечать = "ПереворотВлево" Тогда
				Выполнить(" ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево; ");
			Иначе
				Выполнить(" ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.Нет; ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТабличныйДокумент.Защита = ПроизвольнаяПечатнаяФорма.Защита;

	Если НЕ ПроизвольнаяПечатнаяФорма.КоличествоЭкземпляров = 0 Тогда
		ТабличныйДокумент.КоличествоЭкземпляров = ПроизвольнаяПечатнаяФорма.КоличествоЭкземпляров;
	КонецЕсли;

	Если ПроизвольнаяПечатнаяФорма.ОриентацияСтраницыЛандшафт Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ПроизвольнаяПечатнаяФорма.РазмерСтраницы) Тогда
		ТабличныйДокумент.РазмерСтраницы = ПроизвольнаяПечатнаяФорма.РазмерСтраницы;
	КонецЕсли;

	Если НЕ АвтоМасштаб
		И НЕ ПроизвольнаяПечатнаяФорма.Масштаб = 0 Тогда

		ТабличныйДокумент.МасштабПечати = ПроизвольнаяПечатнаяФорма.Масштаб;
	КонецЕсли;

	Если ПустаяСтрока(ЗаданноеИмяПринтера)
		И НЕ ПустаяСтрока(ПроизвольнаяПечатнаяФорма.ИмяПринтера) Тогда

		ТабличныйДокумент.ИмяПринтера = ПроизвольнаяПечатнаяФорма.ИмяПринтера;
	ИначеЕсли НЕ ПустаяСтрока(ЗаданноеИмяПринтера) Тогда
		ТабличныйДокумент.ИмяПринтера = ЗаданноеИмяПринтера;
	КонецЕсли;

	// ТабличныйДокумент.НижнийКолонтитул
	// ТабличныйДокумент.ВерхнийКолонтитул = //тип колонтитул

КонецПроцедуры

Функция   ЭтотСимволКонецСлова(ТекущийСимвол) Экспорт
	Возврат (ТекущийСимвол = " " ИЛИ ТекущийСимвол = ";" ИЛИ ТекущийСимвол = Символы.Таб ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = "[" ИЛИ ТекущийСимвол  = "(" ИЛИ ТекущийСимвол = "=" ИЛИ ТекущийСимвол = "+" ИЛИ ТекущийСимвол = "-" ИЛИ ТекущийСимвол = "/" ИЛИ ТекущийСимвол = "*" ИЛИ ТекущийСимвол = "\" ИЛИ ТекущийСимвол = "<" ИЛИ ТекущийСимвол = ">");
КонецФункции

Функция   ЯзыкПользователяЗаданВКонфигураторе() Экспорт

	ДанныеТекущегоПользователя = ПользователиИнформационнойБазы.ТекущийПользователь();

	Возврат НЕ ДанныеТекущегоПользователя.Язык = Неопределено;

КонецФункции
