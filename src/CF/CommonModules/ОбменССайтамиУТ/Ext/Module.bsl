// Суров С.В <s_surov@mail.ru>

// Устанавливает параметр компоновки
// 
// Параметры:
//  ПараметрыКомпоновки  - ПараметрыСхемыКомпоновкиДанных - в них будет добавлен новый параметр.
//  ИмяПараметра         - Строка - имя параметра компоновки данных.
//  ЗначениеПараметра    - Произвольный - значение параметра компоновки данных.
// 
Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

// Возвращает пустую таблицу значений, в которыю будут добавляться дополнительные поля отбора
// 
Функция ДобавляемыеПоляОтбора() Экспорт
	
	ПоляОтбора = Новый ТаблицаЗначений;
	
	ПоляОтбора.Колонки.Добавить("Наименование");
	ПоляОтбора.Колонки.Добавить("Синоним");
	ПоляОтбора.Колонки.Добавить("ТипЗначения");
	ПоляОтбора.Колонки.Добавить("Отбор");
	
	Возврат ПоляОтбора;
	
КонецФункции


// Возращает массив структур по которым происходит отбор соглашения
// 
Функция ПараметрыОтбораСоглашения() Экспорт
	
	ОтборСоглашения = Новый Массив;
		
	Возврат ОтборСоглашения;
		
КонецФункции


// Ищет валюту по коду валюту, переданному с сайта.
// Если валюту найти не удалось, получает валюту регламентированного учета.
// 
// Параметры:
//  Валюта           - СправочникСсылка.Валюта - в данный параметр устанавливается найденная валюта
//  КодВалютыСтрока  - Строка - код валюты, по которому выполняется поиск.
// 
Процедура ОбработатьВалютуXML(Валюта, КодВалютыСтрока) Экспорт
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = Справочники.ВидыЦен.ГлавныйВидЦен.ВалютаЦены;
	КонецЕсли;
	
КонецПроцедуры


// Заполняет табличную часть "Товары" документа "Заказ клиента".
// 
// Параметры:
//  Документ            - ДокументОбъект.ЗаказКлиента - документ, чья табличная часть "Товары" будет заполнена.
//  ТаблицаТоваровСайт  - ТаблицаЗначений - таблица заказанных товаров по данным с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
// 
Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, ТаблицаТоваровСайт, ПрикладныеПараметры) Экспорт
	
	
	Документ.Товары.Очистить();
	ТаблицаТоварыДокумент = Документ.Товары.Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаТоваровСайт Цикл
		
		НоваяСтрока = ТаблицаТоварыДокумент.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	Документ.Товары.Загрузить(ТаблицаТоварыДокумент);
	
КонецПроцедуры

// Заполняет дополнительные реквизиты документа "Заказ клиента" соотвествующие номеру и дате заказа с сайта
// 
// Параметры:
//  ДокументОбъект      - ДокументОбъект.ЗаказКлиента - документ, дополнетельные реквзиты которого необходимо обновить
//  РеквизитыЗаказа     - Структура - содержит информацию о данных заказа, полученных с сайта.
//  ПрикладныеПараметры - Структура - содержит информацию настройках обмена, выполненных в форме узла.
// 
Процедура ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте) И 
		НЕ ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
	ДатаПервогоДокумента = ОбщийМодульСервисСервер.ДатаПервогоДокумента();
	
	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте) Тогда
		
		Запись       = РегистрыСведений.ЗначенияДополнительныхРеквизитов.СоздатьМенеджерЗаписи();
		Запись.ОбъектВладелец   = ДокументОбъект.Ссылка;
		Запись.ДополнительныйРеквизит = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте;
		Запись.ЗначениеРеквизита  = РеквизитыЗаказа.Дата;
		Запись.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте) Тогда
		
		Запись       = РегистрыСведений.ЗначенияДополнительныхРеквизитов.СоздатьМенеджерЗаписи();
		Запись.ОбъектВладелец   = ДокументОбъект.Ссылка;
		Запись.ДополнительныйРеквизит = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
		Запись.ЗначениеРеквизита  = РеквизитыЗаказа.Номер;
		Запись.Записать();
		
	КонецЕсли;
	
КонецПроцедуры
// Создает нового контрагента
// 
// Параметры:
//  ДанныеКонтрагента        - Структура - содержит данные покупателя с сайта.
//  ПрикладныеПараметры      - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//  ОписаниеОшибки           - Строка - в нее записывается текст ошибки, которая может возникнуть при создании нового контрагента.
//  СтруктураСвойстваЗаказа  - Структура - содержит свойства заказа с сайта.
// 
// Возвращаемое значение:
//   СправочникСсылка.Контрагент   - ссылка на вновь созданного контрагента
// 
Функция СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа) Экспорт
	
	НовыйКонтрагент	= Справочники.Клиенты.СоздатьЭлемент(); 
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.ПравовойСтатус  = ?(ДанныеКонтрагента.ЮрЛицо, Перечисления.ПравовойСтатус.ЮрЛицо, Перечисления.ПравовойСтатус.ФизЛицо);
	НовыйКонтрагент.Наименование    = ДанныеКонтрагента.Наименование;
	НовыйКонтрагент.НаименованиеДляПечати = ?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Фактический адрес")) Тогда
			
			НовыйКонтрагент.Адрес = СтрокаИнформации.Представление;
		// 	
		// 	ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		// 	                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		// 	                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		// 	                             СтрокаИнформации.Представление);
		// 	
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Юридический адрес")) Тогда
		
			НовыйКонтрагент.ЮридическийАдрес = СтрокаИнформации.Представление;			
		// 	
		// 	ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		// 	                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		// 	                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		// 	                             СтрокаИнформации.Представление);
		// 	
		// ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ТелефонРабочий")) Тогда
		ИначеЕсли Найти(ВРег(СтрокаИнформации.Вид), ВРег(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Телефон")))>0 Тогда
		
		    Если НЕ ЗначениеЗаполнено(НовыйКонтрагент.Телефон) Тогда
				НовыйКонтрагент.Телефон	= СтрокаИнформации.Представление;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(НовыйКонтрагент.Телефон2) Тогда
				НовыйКонтрагент.Телефон2	= СтрокаИнформации.Представление;
			
			ИначеЕсли НЕ ЗначениеЗаполнено(НовыйКонтрагент.Телефон3) Тогда
				НовыйКонтрагент.Телефон3	= СтрокаИнформации.Представление;
			
			ИначеЕсли НЕ ЗначениеЗаполнено(НовыйКонтрагент.Телефон4) Тогда
				НовыйКонтрагент.Телефон4	= СтрокаИнформации.Представление;
			
			ИначеЕсли НЕ ЗначениеЗаполнено(НовыйКонтрагент.Телефон5) Тогда
				НовыйКонтрагент.Телефон5	= СтрокаИнформации.Представление;
			
			КонецЕсли;
			
		// 	
		// 	ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		// 	                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		// 	                             Перечисления.ТипыКонтактнойИнформации.Телефон,
		// 	                             СтрокаИнформации.Представление);
		// 	
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Почта")) Тогда
			НовыйКонтрагент.ЭлектроннаяПочта= СтрокаИнформации.Представление;
		// 	
		// 	ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		// 	                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		// 	                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		// 	                             СтрокаИнформации.Представление);
		// 	
		КонецЕсли;
		
	КонецЦикла;
	
		
	НовыйКонтрагент.Записать();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Ищет номенклатуру по наименованию и виду номенлатуры.
// 
// Параметры:
//  Наименование     - Строка - наименование, используемое для поиска.
//  ВидНоменклатуры  - СправочникСсылка.ВидыНоменлатуры - вид номенлатуры, по которому выполняется поиск
// 
// Возвращаемое значение:
//   СправочникСсылка.Номенклатура, Неопределено - ссылка на найденный элемент справочника Номенклатура, Неорпределено, если не найдено.
// 
Функция НоменклатураПоНаименованиюИВиду(Наименование, ВидНоменклатуры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование");
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции


// Ищет номенлатуру по уникальному идентификатору
// 
// Параметры:
//  Номенклатура                      - СправочникСсылка.Номенлкатура - найденная номенклатура будет помещена в данный параметр.
//  ДанныеНоменклатуры                - Структура - содержит данные о номенклатуре, в частности свойство ИД, по которому будет выполняться поиск.
//  ПрикладныеПараметры               - Структура - содержит параметры узла обмена с сайтом.
//  УникальныйИдентификаторКорректен  - Булево - признак того, что уникальный идентификатор в данных номенклатуры был коррекнтым
// 
// Возвращаемое значение:
//   Булево   - признак того, что номенклатура успешно найдена
// 
Функция УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Экспорт
	
	Попытка
		
		УникальныйИдентификаторНоменклатуры = Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид);
		
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификаторНоменклатуры);
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			И Номенклатура.ПолучитьОбъект() <> Неопределено Тогда
			
			Возврат ИСТИНА;
			
		КонецЕсли;
		
	Исключение
		
		УникальныйИдентификаторКорректен = ЛОЖЬ;
		
	КонецПопытки;
	
	Возврат ЛОЖЬ;
	
КонецФункции

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
// 
// Возвращаемое значение:
//   Массиив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
// 
Функция РеквизитыОбменаТоварами() Экспорт

	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ВыгружатьФайлы");
	МассивРеквизитов.Добавить("КлассифицироватьПоВидамНоменклатуры");
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");
	МассивРеквизитов.Добавить("КоэффициентПересчетаВеса");

	Возврат МассивРеквизитов;

КонецФункции

// Заполняет массив реквизитов формы узла обмена с сайтами, отвечающих за настройки выгрузки товаров.
// 
// Возвращаемое значение:
//   Массиив  - массив реквизитов формы узла обмена с сайтами, отвечающих за настройки обмена заказами.
// 
Функция РеквизитыОбменаЗаказами() Экспорт
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	МассивРеквизитов.Добавить("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТовар");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслуга");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("Соглашение");
	МассивРеквизитов.Добавить("Склад");
	МассивРеквизитов.Добавить("Организация");
	// МассивРеквизитов.Добавить("Менеджер");
	МассивРеквизитов.Добавить("ЗаписыватьДокументыТекущейДатой");
	МассивРеквизитов.Добавить("ВестиНумерациюЗаказовПоДаннымСайта");
	МассивРеквизитов.Добавить("СтатусЗаказаОтменен");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказа");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	// МассивРеквизитов.Добавить("СоздаватьПартнеровДляНовыхКонтрагентов");
	// МассивРеквизитов.Добавить("ГруппаДоступаПартнеров");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ВписатьСтатусЗаказа(ДокументСсылка,Статус) Экспорт 

	Период			= ТекущаяДата();
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
		"ВЫБРАТЬ
		|	СостоянияЗаказовСрезПоследних.СостояниеЗаказаКлиента
		|ИЗ
		|	РегистрСведений.СостоянияЗаказов.СрезПоследних(&Период, Заказ = &ДокументСсылка) КАК СостоянияЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат 	= Запрос.Выполнить();
	Выборка 	= Результат.Выбрать();
	ТекСтатус	= Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ТекСтатус	= Выборка.СостояниеЗаказаКлиента;
	КонецЦикла;
	
	Если ТекСтатус = Статус Тогда
		Возврат
	КонецЕсли;
	
	Зап							= РегистрыСведений.СостоянияЗаказов.СоздатьМенеджерЗаписи();
	Зап.Заказ					= ДокументСсылка;
	Зап.Период					= Период;
	Зап.СостояниеЗаказаКлиента	= Статус;
	Зап.Записать();
	
КонецПроцедуры
