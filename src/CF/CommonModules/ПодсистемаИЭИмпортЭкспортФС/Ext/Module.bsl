//sza140228-0059 SZA: 
//sza140113-2343 : 
//sza120227-1616 Администратор: 
//sza101020
//

//Определяет, выполнено ли условие фильтра
Функция   ВыполненоЛиУсловиеФильтра(УсловиеФильтраУсловиеРавенства, ЗначениеДанных, УсловиеФильтраЗначениеПоля)
	
	УсловиеВыполнено = Ложь;
	
	Если (УсловиеФильтраУсловиеРавенства = "=" И ЗначениеДанных = УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "!=" и ЗначениеДанных <> УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = ">" и ЗначениеДанных > УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "<" и ЗначениеДанных < УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = ">=" и ЗначениеДанных >= УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "<=" и ЗначениеДанных <= УсловиеФильтраЗначениеПоля)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "В" и Найти(ЗначениеДанных, УсловиеФильтраЗначениеПоля) <> 0)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "!В" и Найти(ЗначениеДанных, УсловиеФильтраЗначениеПоля) = 0)
		ИЛИ (УсловиеФильтраУсловиеРавенства = "ВС")
		ИЛИ (УсловиеФильтраУсловиеРавенства = "НК")
		ИЛИ (УсловиеФильтраУсловиеРавенства = "З" и ЗначениеЗаполнено(ЗначениеДанных))
		ИЛИ (УсловиеФильтраУсловиеРавенства = "НЗ" И НЕ ЗначениеЗаполнено(ЗначениеДанных)) Тогда
		
		УсловиеВыполнено = Истина;
		
	КонецЕсли;
	
	Возврат УсловиеВыполнено;	
	
КонецФункции

//Основная функция выгрузки данных в файл
Функция   ВыполнитьВыгрузкуВФайл(СтруктураИмпортаЭкспорта) Экспорт
	
	Попытка 
		СтруктураФормыПрогресса = СтруктураИмпортаЭкспорта.СтруктураФормыПрогресса;
	Исключение 	
		СтруктураФормыПрогресса = Новый Структура;
	КонецПопытки;	
	
	ОбъектОперацииСсылка = СтруктураИмпортаЭкспорта.ОбъектОперации; 
	ШаблонФайла = СтруктураИмпортаЭкспорта.ШаблонФайла; 
	АдресФайла = СтруктураИмпортаЭкспорта.АдресФайла;
	Если ЗначениеЗаполнено(ШаблонФайла.ИмяТаблицыШаблонаФайла) Тогда
		ИмяТаблицыШаблонаФайла = ШаблонФайла.ИмяТаблицыШаблонаФайла;
	Иначе
		ИмяТаблицыШаблонаФайла = СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла;
	КонецЕсли;
	ПериодДляДокументов = СтруктураИмпортаЭкспорта.ПериодДляДокументов;
	ДатаАктуальности = СтруктураИмпортаЭкспорта.ДатаАктуальности;
	
	ПоказыватьПрогрессПроизводстваОбмена = ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена;
	Попытка 
		ДополнительныйПараметр = СтруктураИмпортаЭкспорта.ДополнительныйПараметр;
	Исключение 	
		ДополнительныйПараметр = "";
	КонецПопытки;
	
	СчетчикСимволов = 0;
	ПредСтрока = "";
	Пока СчетчикСимволов < ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки Цикл 
		ПредСтрока = ПредСтрока + " ";
		СчетчикСимволов = СчетчикСимволов + 1;
	КонецЦикла; 
	
	СчетчикСимволов = 0;
	ПостСтрока = "";
	Пока СчетчикСимволов < ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки Цикл 
		ПостСтрока = ПостСтрока + " ";
		СчетчикСимволов = СчетчикСимволов + 1;
	КонецЦикла; 
	
	ШаблонФайлаРазделительПолей = ШаблонФайла.РазделительПолей;
	ОбъектОперации 				= ОбъектОперацииСсылка;
	ЭтоЗагрузкаСписка 			= Ложь;
	ЭтоТаблица 					= Ложь;
	РеальныйСчетчикСтрок 		= 1;
	ЭтоПредопределенныйШаблон 	= ШаблонФайла.Предопределенный;
	АдресФайла 					= МаскаИмениФайла(АдресФайла, ШаблонФайла.РазделительДаты, ДатаАктуальности, СтруктураИмпортаЭкспорта.ДополнительнаяИнформация);
	ЗнакМеждуИменемПоляИЗначением = ШаблонФайла.ЗнакМеждуИменемПоляИЗначением;
	
	Если НЕ ПериодДляДокументов = "" 
		И ПериодДляДокументов.ДатаНачала = '00010101000000' 
		И ПериодДляДокументов.ДатаОкончания = '00010101000000' Тогда
		
		ПериодДляДокументов = "";
		СтруктураИмпортаЭкспорта.ПериодДляДокументов = ПериодДляДокументов;
		
	КонецЕсли;
	
	Если ШаблонФайла.ИспользоватьТолькоДляИмпорта Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данный шаблон только для импорта!");
		Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ИмяТаблицыШаблонаФайла = "LISTofALL" Тогда //загрузка списка
		ЭтоЗагрузкаСписка 		= Истина;
		ИмяТаблицыШаблонаФайла 	= "";
		СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "";
		
	ИначеЕсли НЕ ЭтоПредопределенныйШаблон 
		И НЕ ИмяТаблицыШаблонаФайла = "" Тогда
		
		ЭтоТаблица = Истина;
		
	ИначеЕсли ИмяТаблицыШаблонаФайла="DBFНоменклатура" Тогда
		ЭтоЗагрузкаСписка = Истина;
		
	ИначеЕсли ИмяТаблицыШаблонаФайла="ПакетНабораИсточниковНоОбъектНеВыбран" Тогда
		ЭтоЗагрузкаСписка = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектОперации)
		И ЭтотШаблонНеПодходитДляОбъекта(ШаблонФайла, ОбъектОперации, ИмяТаблицыШаблонаФайла) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данный шаблон не подходит по реквизитам отбора!");
		Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ШаблонФайлаВидШаблонаДляРегистровСведений = ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляРегистровСведений ;
	ШаблонФайлаФорматФайлаDBF 	= ШаблонФайлаФорматФайлаDBF(ШаблонФайла);
	ШаблонФайлаФорматФайлаTXT 	= ШаблонФайлаФорматФайлаTXT(ШаблонФайла);
	ШаблонФайлаФорматФайлаEXCEL = ШаблонФайлаФорматФайлаEXCEL(ШаблонФайла);
	КаждоеПолеНоваяСтрока 		= ШаблонФайла.КаждоеПолеНоваяСтрока;
	
	ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора = СтруктураИмпортаЭкспорта.ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора;
	
	ШаблонФайлаОстанавливатьОбменПоОшибке = ШаблонФайла.ОстанавливатьОбменПоОшибке;
	
	Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
		
		ТаблицаОбмена = Новый ТаблицаЗначений;
		Для Каждого СледующееПолеВФайле ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл
			
			Если СледующееПолеВФайле.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле 
				ИЛИ ЗначениеЗаполнено(СледующееПолеВФайле.ПолеТаблицы.ОпределенноеЗначение) Тогда
				
				ШиринаЕе = 0;				
				СпецЗнак = "SPTSZN";
			Иначе            				
				ШиринаЕе = 5;		
				СпецЗнак = "";
			КонецЕсли;
			
			Попытка 
				ТаблицаОбмена.Колонки.Добавить(СледующееПолеВФайле.ИмяПоляВФайле,  Новый ОписаниеТипов("Строка"), СледующееПолеВФайле.ИмяПоляВФайле + СпецЗнак, ШиринаЕе);
			Исключение 	
				ТаблицаОбмена.Колонки.Добавить("F" + СокрЛП(СледующееПолеВФайле.НомерСтроки), Новый ОписаниеТипов("Строка"), ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поле") + " " + СокрЛП(СледующееПолеВФайле.НомерСтроки) + СпецЗнак, ШиринаЕе);
			КонецПопытки;
			
		КонецЦикла; 	
		
	Иначе
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			
			БазаДБФФайлИмпортаЭкспорта = Новый XBase;
			Для Каждого СледующееПолеВФайле ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл
				ТипПоляТут = УстановитьРеквизитыПоляШаблона(СледующееПолеВФайле.ПолеТаблицы);
				БазаДБФФайлИмпортаЭкспорта.поля.Добавить(ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле))), ТипПоляТут.ТипТут, ТипПоляТут.ДлинаТут, ТипПоляТут.ТочностьТут);
			КонецЦикла;
			БазаДБФФайлИмпортаЭкспорта.Кодировка = ?(ШаблонФайла.КодировкаDOS, КодировкаXBASE.OEM, КодировкаXBASE.ANSI);
			БазаДБФФайлИмпортаЭкспорта.СоздатьФайл(КаталогВременныхФайлов() + "TMPie.DBF");
			
		ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
			попытка 
				ЭксельФайлИмпортаЭкспорта = Новый COMОбъект("Excel.Application"); 
				ЭксельФайлИмпортаЭкспорта.ScreenUpdating 	= 0;
				ЭксельФайлИмпортаЭкспорта.EnableEvents 		= 0;
				ЭксельФайлИмпортаЭкспорта.Visible 			= 0;
				Книга = ЭксельФайлИмпортаЭкспорта.WorkBooks.Add(Истина); 
				ТекЛист = Книга.ActiveSheet; 	
				
			исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проблема с MS excel:") + " " + ОписаниеОшибки();
				Сообщение.УстановитьДанные(ОбъектОперации);
				Сообщение.Сообщить();					 
				
				Возврат Неопределено;
				
			КонецПопытки;
		Иначе
			ФайлИмпортаЭкспорта = Новый ТекстовыйДокумент;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураИмпортаЭкспорта.ПрямаяОбработкаТаблицы Тогда
		
		ТаблицаОбмена = СтруктураИмпортаЭкспорта.ТаблицаОбмена.Выгрузить();
		КоличествоСтрок = ТаблицаОбмена.Количество();
		КоличествоКолонок = ТаблицаОбмена.Колонки.Количество();
		
		СчетчикСтрок = 0;
		Пока СчетчикСтрок < КоличествоСтрок Цикл
			СтрокаТаблицыОбмена = ТаблицаОбмена.Получить(СчетчикСтрок);
			Если СтрокаТаблицыОбмена.Обрабатывать Тогда
				СчетчикКолонок = 1; //-"обрабатывать"
				СтрокаДляДобавления = "";
				Пока СчетчикКолонок < КоличествоКолонок Цикл
					
					Если ШаблонФайлаФорматФайлаDBF Тогда
						БазаДБФФайлИмпортаЭкспорта.Добавить();
						//sza110726-1650 
						БазаДБФФайлИмпортаЭкспорта[ТаблицаОбмена.Колонки[ СчетчикКолонок ].Имя] = СтрокаТаблицыОбмена[ СчетчикКолонок ];
					ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
						ТекЛист.Cells(СчетчикСтрок, СчетчикКолонок).Value = СтрокаТаблицыОбмена[ СчетчикКолонок ];
					Иначе
						Если НЕ КаждоеПолеНоваяСтрока Тогда
							СтрокаДляДобавления = СтрокаДляДобавления + СтрокаТаблицыОбмена[ СчетчикКолонок ] + ШаблонФайлаРазделительПолей;		
						Иначе
							СтрокаДляДобавления = СтрокаТаблицыОбмена[ СчетчикКолонок ];
							
							Продолжить;
							
						КонецЕсли;
					КонецЕсли;                     	
					СчетчикКолонок = СчетчикКолонок + 1;	
				КонецЦикла;
				
				Если ШаблонФайлаФорматФайлаTXT Тогда
					ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);		
				КонецЕсли; 	
			КонецЕсли;
			
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЦикла;
		
	Иначе
		
		ШаблонФайлаЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = ШаблонФайла.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;
		ШаблонФайлаВыполнятьПрограммы = ШаблонФайла.ВыполнятьПрограммы;
		ШаблонФайлаВыполнитьПрограммныйКодПередНачалом = ШаблонФайла.ВыполнитьПрограммныйКодПередНачалом;
		ШаблонФайлаСуммироватьТолькоЕслиПлатежкиСОднимНомером = ШаблонФайла.СуммироватьТолькоЕслиПлатежкиСОднимНомером;
		ШаблонФайлаВставлятьМеждуТекстамиНазначенияСледующийТекст = ШаблонФайла.ВставлятьМеждуТекстамиНазначенияСледующийТекст;
		ШаблонФайлаСообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка = ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка;
		ШаблонФайлаПоследовательностьПолейВФайле = ШаблонФайла.ПоследовательностьПолейВФайле;
		ШаблонФайлаПустыеСтрокиМеждуЗаписями = ШаблонФайла.ПустыеСтрокиМеждуЗаписями;
		ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки = ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки;
		ШаблонФайлаИспользоватьДополнительноеПоведение = ШаблонФайла.ИспользоватьДополнительноеПоведение;
		ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена = ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена;
		ШаблонФайлаПоказыватьОбъектыОбмена = ШаблонФайла.ПоказыватьОбъектыОбмена;
		ШаблонФайлаДобаватьТекстВПодвалФайла = ШаблонФайла.ДобаватьТекстВПодвалФайла;
		ШаблонФайлаНеУчитыватьПоследнююСтрокуФайла = ШаблонФайла.НеУчитыватьПоследнююСтрокуФайла;
		ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить = ШаблонФайла.ЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить;
		ШаблонФайлаИспользоватьСтрокуЗаголовок = ШаблонФайла.ИспользоватьСтрокуЗаголовок;
		ШаблонФайлаФормироватьПервуюСтрокуИзЗаголовковПолей = ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей;
		ШаблонФайлаДобавитьТекстВШапкуФайла = ШаблонФайла.ДобавитьТекстВШапкуФайла;
		ШаблонФайлаРазделительЧисел = ШаблонФайлаРазделительЧисел;
		ШаблонФайлаФорматПолейДаты = ШаблонФайла.ФорматПолейДаты;
		ШаблонФайлаРазделительДаты = ШаблонФайла.РазделительДаты;
		
		ШаблонФайлаИмяРегистра = ШаблонФайла.ИмяРегистра;
		ШаблонФайлаПараметрыПроизвольногоЗапроса = ШаблонФайла.ПараметрыПроизвольногоЗапроса;
		ШаблонФайлаВидШаблона = ШаблонФайла.ВидШаблона;
		ШаблонФайлаОбрабатыватьПлатежныеДокументы = ШаблонФайла.ОбрабатыватьПлатежныеДокументы;
		ШаблонФайлаТекстПроизвольногоЗапроса = ШаблонФайла.ТекстПроизвольногоЗапроса;
		ШаблонФайлаТолькоРасходные = ШаблонФайла.ТолькоРасходные;
		ШаблонФайлаТолькоПриходные = ШаблонФайла.ТолькоПриходные;
		ШаблонФайлаСуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток = ШаблонФайла.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток;
		ШаблонФайлаНеПропускатьНепроведенныеДокументы = ШаблонФайла.НеПропускатьНепроведенныеДокументы;
		ШаблонФайлаНеПропускатьОбъектыПомеченныеНаУдаление = ШаблонФайла.НеПропускатьОбъектыПомеченныеНаУдаление;
		
		Если ШаблонФайлаФорматФайлаEXCEL Тогда
			СчетчикСтрокТут = 1;
			Если ЗначениеЗаполнено(ШаблонФайлаИспользоватьСтрокуЗаголовок) Тогда
				
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = ШаблонФайлаИспользоватьСтрокуЗаголовок;	
				Иначе
					ТекЛист.Cells(СчетчикСтрокТут, 1).Value = ШаблонФайлаИспользоватьСтрокуЗаголовок;	
				КонецЕсли;
				
				СчетчикСтрокТут 		= СчетчикСтрокТут + 1;
				РеальныйСчетчикСтрок 	= РеальныйСчетчикСтрок + 1;
			КонецЕсли;
			
			Если ШаблонФайлаФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
				Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл					
					Если СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле)="" Тогда
						ИмяПоляВФайле = СокрЛП(СледующееПолеВФайле.ПолеТаблицы);
					Иначе
						ИмяПоляВФайле = СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле);
					КонецЕсли;							
					
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
						СтрокаТаблицыОбмена[ СледующееПолеВФайле.НомерСтроки - 1 ] = ИмяПоляВФайле;
					Иначе
						ТекЛист.Cells(СчетчикСтрокТут, СледующееПолеВФайле.НомерСтроки).Value = ИмяПоляВФайле;	
					КонецЕсли;
					
				КонецЦикла;
				СчетчикСтрокТут = СчетчикСтрокТут + 1;
				РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШаблонФайлаДобавитьТекстВШапкуФайла) Тогда
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ СледующееПолеВФайле.НомерСтроки - 1 ] = ШаблонФайлаДобавитьТекстВШапкуФайла;
				Иначе
					ТекЛист.Cells(СчетчикСтрокТут, СледующееПолеВФайле.НомерСтроки).Value = ШаблонФайлаДобавитьТекстВШапкуФайла;	
				КонецЕсли;
				
				СчетчикСтрокТут = СчетчикСтрокТут + 1;
				РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ШаблонФайлаИспользоватьСтрокуЗаголовок) Тогда
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = ШаблонФайлаИспользоватьСтрокуЗаголовок;
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку(ШаблонФайлаИспользоватьСтрокуЗаголовок);	
				КонецЕсли;
				РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
			КонецЕсли;
			
			Если ШаблонФайлаФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
				
				СтрокаЗаголовок="";
				Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
					Если СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле)="" Тогда
						СтрокаЗаголовок = СтрокаЗаголовок + СокрЛП(СледующееПолеВФайле.ПолеТаблицы);
					Иначе
						СтрокаЗаголовок = СтрокаЗаголовок + СледующееПолеВФайле.ИмяПоляВФайле + ШаблонФайлаРазделительПолей;
					КонецЕсли;				
				КонецЦикла;
				
				СтрокаФайлаТекста = лев(СтрокаФайлаТекста, стрдлина(СтрокаФайлаТекста)-стрдлина(ШаблонФайлаРазделительПолей));
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = СтрокаЗаголовок;
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаЗаголовок);	
				КонецЕсли;
				
				РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШаблонФайлаДобавитьТекстВШапкуФайла) Тогда
				Попытка 
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
						СтрокаТаблицыОбмена[ 0 ] = ШаблонФайлаДобавитьТекстВШапкуФайла;
					Иначе
						ФайлИмпортаЭкспорта.ДобавитьСтроку(ШаблонФайлаДобавитьТекстВШапкуФайла);	
					КонецЕсли;
					РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
				Исключение 	
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток = Ложь;
		СуммироватьДанныеДатаВходящегоДокумента = '00010101';
		СуммироватьДанныеНомерВходящегоДокумента = "";
		СуммироватьДанныеБанковскийСчет 	= Неопределено;
		СуммироватьДанныеСчетКлиента 	= Неопределено;
		СуммироватьДанныеСуммаДокумента		= 0;
		СуммироватьДанныеНазначение			= "";
		СуммироватьДанныеТекстовыйДокумент	= Ложь;
		МассивСуммированияДанных 			= Новый Массив(1000, 2);
		СчетчикМассиваСуммированияДанных	= 0;
		
		ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки");
		
		Если ЭтоТаблица Тогда
			
			КоличествоСтрокДанныхДляФайла = ОбъектОперации[ ИмяТаблицыШаблонаФайла ].Количество();
			
		ИначеЕсли ЭтоЗагрузкаСписка Тогда
			
			Если ШаблонФайлаВидШаблонаДляРегистровСведений Тогда	
				
				ВыборкаОбъектов = Неопределено;
				
				ЗапросПоРегистрам = Новый Запрос;
				ЗапросПоРегистрам.Текст = "ВЫБРАТЬ * ИЗ РегистрСведений." + ШаблонФайлаИмяРегистра + " КАК ДанныеРегистраСведений";
				
				Для Каждого ПараметрЗапроса ИЗ ШаблонФайлаПараметрыПроизвольногоЗапроса Цикл    
					ЗапросПоРегистрам.УстановитьПараметр(ПараметрЗапроса.НаименованиеПараметра, ПараметрЗапроса.ЗначениеПараметра);
				КонецЦикла;
				
				ВзДС = ЗапросПоРегистрам.Выполнить();
				Если Не ВзДС.Пустой() Тогда
					ВыборкаОбъектов = ВзДС.Выбрать(); 	
				КонецЕсли;
				
			ИначеЕсли ШаблонФайлаВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса Тогда
				
				ВыборкаОбъектов = Неопределено;
				
				ЗапросПроизвольный = Новый Запрос;
				ЗапросПроизвольный.Текст = СтрЗаменить(ШаблонФайлаТекстПроизвольногоЗапроса, "|", " ");
				
				Для Каждого ПараметрЗапроса ИЗ ШаблонФайлаПараметрыПроизвольногоЗапроса Цикл    
					ЗапросПроизвольный.УстановитьПараметр(ПараметрЗапроса.НаименованиеПараметра, ПараметрЗапроса.ЗначениеПараметра);
				КонецЦикла;
				
				ВзДС = ЗапросПроизвольный.Выполнить();
				Если Не ВзДС.Пустой() Тогда
					ВыборкаОбъектов = ВзДС.Выбрать(); 	
				КонецЕсли;
				
				Если не ВыборкаОбъектов = Неопределено Тогда
					КоличествоСтрокДанныхДляФайла = 0;
					МассивОбъектов = Новый массив;
					Пока ВыборкаОбъектов.Следующий() Цикл
						ВыборкаРезультат = Новый Структура;
						Для Каждого СледующееПолеФайлу ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
							ИмяПоляВФайле = СокрЛП(СледующееПолеФайлу.ИмяПоляВФайле);
							Результат = "";
							
							Попытка
								Выполнить(" Результат = ВыборкаОбъектов." + ИмяПоляВФайле);
								
							Исключение
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Неверный запрос ИЛИ имя результата") + " " + ШаблонФайла + "! " + ИмяПоляВФайле + " " + ОписаниеОшибки();
								Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
								Сообщение.Сообщить();
								
							КонецПопытки;
							ВыборкаРезультат.Вставить(ИмяПоляВФайле, ВыборкаОбъектов[ ИмяПоляВФайле ]); 	
						КонецЦикла;
						
						КоличествоСтрокДанныхДляФайла = КоличествоСтрокДанныхДляФайла + 1;
						МассивОбъектов.Добавить(ВыборкаРезультат);
						
					КонецЦикла; //выборка 		      
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет результата запроса для выгрузки по") + " " + ШаблонФайла +"!";
					Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
					Сообщение.Сообщить();
					
					Возврат Неопределено;
					
				КонецЕсли;
				
			Иначе
				
				ВыборкаОбъектов = Неопределено;
				
				
				Если ДополнительныйПараметр = "ПакетНабораИсточников" Тогда
					ТипОбъектаОперации = СтруктураИмпортаЭкспорта.ТипОбъектаОперации;
					ТипМетаОбъектаОбмена = СтруктураИмпортаЭкспорта.ТипМетаОбъектаОбмена;
				Иначе
					ТипМетаОбъектаОбмена = "";
					ТипОбъектаОперации = "";
					Попытка 
						ТипОбъектаОперации = ОбъектОперации.Метаданные().Имя;		
					Исключение 	
					КонецПопытки;
					
				КонецЕсли;
				
				УсловиеОпределено 		= Ложь;
				ЗапросПоОбъектам 		= Новый Запрос;
				ЗапросПоОбъектамТекст 	= "";
				
				Если (ТипМетаОбъектаОбмена = "" И МетаДанные.Справочники.Найти(ТипОбъектаОперации) = Неопределено)
					ИЛИ ТипМетаОбъектаОбмена = "Документы" Тогда
					
					Если не ПериодДляДокументов = "" Тогда
						Если ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала) Тогда
							ЗапросПоОбъектамТекст = ЗапросПоОбъектамТекст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".Дата >= &ДатаНачала ";
							ЗапросПоОбъектам.УстановитьПараметр("ДатаНачала", ПериодДляДокументов.ДатаНачала);
							УсловиеОпределено = Истина;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) Тогда
							ЗапросПоОбъектамТекст = ЗапросПоОбъектамТекст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".Дата <= &ДатаОкончания ";
							ЗапросПоОбъектам.УстановитьПараметр("ДатаОкончания", ПериодДляДокументов.ДатаОкончания);
							УсловиеОпределено = Истина;
						КонецЕсли;
					КонецЕсли;			
					
					Если ШаблонФайлаНеПропускатьНепроведенныеДокументы Тогда
						ЗапросПоОбъектамТекст = ЗапросПоОбъектамТекст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".Проведен = Истина ";
						УсловиеОпределено = Истина;
					КонецЕсли;
					ТипМетаОбъектаОбменаТут = "Документ";
					
				Иначе
					
					ТипМетаОбъектаОбменаТут = "Справочник";
				КонецЕсли;		
				
				ЗапросПоОбъектам.Текст = "ВЫБРАТЬ " + ?(ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки = 0, "", " ПЕРВЫЕ " + СтрЗаменить(ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки, Символы.НПП, "")) + " " + ТипОбъектаОперации + ".Ссылка ИЗ " + ТипМетаОбъектаОбменаТут + "." + ТипОбъектаОперации  + " КАК " + ТипОбъектаОперации  + " ";
				
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ЗапросПоОбъектамТекст;
				
				Если НЕ ШаблонФайлаНеПропускатьОбъектыПомеченныеНаУдаление Тогда
					ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".ПометкаУдаления = Ложь ";
					УсловиеОпределено = Истина;
				КонецЕсли;
				
				ОбработатьУсловияПоРеквизитам(ЗапросПоОбъектам, ШаблонФайла, ТипОбъектаОперации, УсловиеОпределено);
				
				ВзДС = ЗапросПоОбъектам.Выполнить();
				Если Не ВзДС.Пустой() Тогда
					ВыборкаОбъектов = ВзДС.Выбрать();
				КонецЕсли; 				
				
				
				Если не ВыборкаОбъектов = Неопределено Тогда
					КоличествоСтрокДанныхДляФайла = 0;
					МассивОбъектов = Новый массив;
					Пока ВыборкаОбъектов.Следующий() Цикл
						КоличествоСтрокДанныхДляФайла = КоличествоСтрокДанныхДляФайла + 1;
						МассивОбъектов.Добавить(ВыборкаОбъектов.ссылка);
					КонецЦикла; //выборка 		      
					
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет объектов для выгрузки по") + " " + ШаблонФайла + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" , согласно условиям!");
					Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
					Сообщение.Сообщить();
					
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			КоличествоСтрокДанныхДляФайла = 1;
		КонецЕсли;
		
		Если не ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки = 0 И КоличествоСтрокДанныхДляФайла > ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки Тогда
			КоличествоСтрокДанныхДляФайла = ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки;
		КонецЕсли;
		
		Если ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена Тогда		
			СтруктураФормыПрогресса.Вставить("ЧислоОбъектовДляОбработки", КоличествоСтрокДанныхДляФайла);
			ТаблицаОбработанныхОбъектов = Новый СписокЗначений;
		КонецЕсли;
		
		СчетчикСтрок = 1;
		Пока СчетчикСтрок <= ШаблонФайлаЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить Цикл
			Если ШаблонФайлаФорматФайлаDBF Тогда
				
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
				Иначе
					БазаДБФФайлИмпортаЭкспорта.Добавить();
					БазаДБФФайлИмпортаЭкспорта.Записать();	
				КонецЕсли;
			ИначеЕсли ШаблонФайлаФорматФайлаEXCEL 
				И ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
				
				СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
				
			Иначе
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = ПредСтрока + "" + ПостСтрока;
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку(ПредСтрока + "" + ПостСтрока);	
				КонецЕсли;
			КонецЕсли;
			
			СчетчикСтрок = СчетчикСтрок + 1; 	
			РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
		КонецЦикла;
		
		СчетчикСтрок = 1;
		
		Если ШаблонФайлаВыполнятьПрограммы И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодПередНачалом) Тогда
			
			Выполнить(ШаблонФайлаВыполнитьПрограммныйКодПередНачалом);		
			
		КонецЕсли;
		
		Пока СчетчикСтрок <= КоличествоСтрокДанныхДляФайла Цикл
			
			
			Если ЭтоТаблица Тогда
				
				СтрокаТаблицыИлиЭлемент = ОбъектОперации[ ИмяТаблицыШаблонаФайла ][ СчетчикСтрок - 1 ];
				
			ИначеЕсли ЭтоЗагрузкаСписка Тогда
				
				ОбъектОперации = МассивОбъектов[ СчетчикСтрок - 1 ];
				СтрокаТаблицыИлиЭлемент = МассивОбъектов[ СчетчикСтрок - 1 ];	
				
			Иначе
				
				СтрокаТаблицыИлиЭлемент = ОбъектОперации;
				
			КонецЕсли;			
			
			Если СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток Тогда
				Если НЕ СуммироватьДанныеБанковскийСчет = Неопределено Тогда
					
					Если СуммироватьДанныеБанковскийСчет = ОбъектОперации.БанковскийСчет
						И СуммироватьДанныеСчетКлиента 	= ОбъектОперации.СчетКлиента
						И СуммироватьДанныеДатаВходящегоДокумента = ОбъектОперации.ДатаВходящегоДокумента 
						И (НЕ ШаблонФайлаСуммироватьТолькоЕслиПлатежкиСОднимНомером
						ИЛИ СуммироватьДанныеНомерВходящегоДокумента = ОбъектОперации.НомерВходящегоДокумента) Тогда
						
						СуммироватьДанныеСуммаДокумента	= СуммироватьДанныеСуммаДокумента + ОбъектОперации.СуммаДокумента;
						СуммироватьДанныеНазначение		= СуммироватьДанныеНазначение + ШаблонФайлаВставлятьМеждуТекстамиНазначенияСледующийТекст + СокрЛП(ОбъектОперации.Комментарий);
						Если стрдлина(СуммироватьДанныеНазначение) > 250 Тогда
							СуммироватьДанныеНазначение = лев(СуммироватьДанныеНазначение, 250);
							Если ШаблонФайлаСообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка Тогда
								
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Назначение обрезано до 250 символов.");
								Сообщение.Сообщить();	
							КонецЕсли;	
						КонецЕсли;
						
						Если НЕ ШаблонФайлаФорматФайлаTXT Тогда
							ПолеСумма		= Неопределено;
							ПолеНазначение 	= Неопределено;
							БылиНайдены		= 0;
							Для Каждого СледующееПолеФайлу ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
								
								ИмяПоляВФайлеИзТаблицы = ВРег(СокрЛП(СледующееПолеФайлу.ПолеТаблицы.Наименование));
								Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "СУММА") = 0 Тогда 	
									ПолеСумма = СледующееПолеФайлу;
									ПолеСуммаИмя = ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СокрЛП(СледующееПолеФайлу.ИмяПоляВФайле)));			
									БылиНайдены = БылиНайдены + 1;
								КонецЕсли; 	
								
								Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "НАЗНАЧ") = 0
									ИЛИ НЕ Найти(ИмяПоляВФайлеИзТаблицы, "КОММЕН") = 0 Тогда
									ПолеНазначение = СледующееПолеФайлу;																			 
									ПолеНазначенияИмя = ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СокрЛП(СледующееПолеФайлу.ИмяПоляВФайле)));			
									БылиНайдены = БылиНайдены + 1;
								КонецЕсли; 	
								
								Если БылиНайдены = 2 Тогда
									Прервать;
								КонецЕсли;
								
							КонецЦикла;	
						КонецЕсли;
						
						Если ШаблонФайлаФорматФайлаDBF Тогда
							Если не ПолеНазначение = Неопределено Тогда
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
									СтрокаТаблицыОбмена[ ПолеНазначение.НомерСтроки - 1 ] = СуммироватьДанныеНазначение;
								Иначе
									БазаДБФФайлИмпортаЭкспорта[ ПолеНазначенияИмя ] = СуммироватьДанныеНазначение;	
								КонецЕсли;
							КонецЕсли;
							Если не ПолеСумма = Неопределено Тогда
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
									СтрокаТаблицыОбмена[ ПолеСумма.НомерСтроки - 1 ] = СуммироватьДанныеСуммаДокумента;
								Иначе
									БазаДБФФайлИмпортаЭкспорта[ ПолеСуммаИмя ] = СуммироватьДанныеСуммаДокумента;	
								КонецЕсли;
							КонецЕсли;
							
							Продолжить;
							
						ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда//xlsl
							
							Если не ПолеСумма = Неопределено Тогда
								СуммироватьДанныеСуммаДокументаВТекст = Формат(СуммироватьДанныеСуммаДокумента, "ЧЦ = " + СокрЛП(ПолеСумма.ПолеТаблицы.ДлинаТут) + "; ЧДЦ = " + СокрЛП(ПолеСумма.ПолеТаблицы.ТочностьТут) + "; ЧРД = " + ШаблонФайлаРазделительЧисел + "; ЧГ = 0; ЧО = 1");
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
									СтрокаТаблицыОбмена[ ПолеСумма.НомерСтроки - 1 ] = СокрЛП(СуммироватьДанныеСуммаДокументаВТекст);
								Иначе
									ТекЛист.Cells(РеальныйСчетчикСтрок - 1, ПолеСумма.НомерСтроки).Value = СокрЛП(СуммироватьДанныеСуммаДокументаВТекст);	
								КонецЕсли;
							КонецЕсли;
							
							Если не ПолеНазначение = Неопределено Тогда
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
									СтрокаТаблицыОбмена[ ПолеНазначение.НомерСтроки - 1 ] = СуммироватьДанныеНазначение;
								Иначе
									ТекЛист.Cells(РеальныйСчетчикСтрок - 1, ПолеНазначение.НомерСтроки).Value = СуммироватьДанныеНазначение;	
								КонецЕсли;
							КонецЕсли;
							
							Продолжить;
							
						ИначеЕсли  ШаблонФайлаФорматФайлаTXT Тогда
							
							СчетчикМассива 	= 0;
							БылиНайдены 	= 0;
							Пока СчетчикМассива <= СчетчикМассиваСуммированияДанных 
								И БылиНайдены < 2 Цикл 	
								
								ИмяПоляВФайлеИзТаблицы = МассивСуммированияДанных[ СчетчикМассива ][ 1 ];
								Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "СУММА") = 0 Тогда 	
									МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеСуммаДокумента;
									БылиНайдены = БылиНайдены + 1;
								КонецЕсли; 	
								Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "НАЗНАЧ") = 0
									ИЛИ НЕ Найти(ИмяПоляВФайлеИзТаблицы, "КОММЕН") = 0 Тогда
									МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеНазначение;
									БылиНайдены = БылиНайдены + 1;
								КонецЕсли; 	
								
								СчетчикМассива = СчетчикМассива + 1;
								
							КонецЦикла;
							
							СчетчикМассиваСуммированияДанных	= 0;
							
						КонецЕсли;				
						
					ИначеЕсли ШаблонФайлаФорматФайлаTXT Тогда
						
						Если НЕ КаждоеПолеНоваяСтрока 
							и ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
							
							СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();                                                  	
							
						КонецЕсли;
						
						СчетчикМассива 	= 0;
						БылиНайдены 	= 0;
						Пока СчетчикМассива <= СчетчикМассиваСуммированияДанных 
							И БылиНайдены < 2 Цикл 	
							
							ИмяПоляВФайлеИзТаблицы = МассивСуммированияДанных[ СчетчикМассива ][ 1 ];
							Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "СУММА") = 0 Тогда 	
								МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеСуммаДокумента;
								БылиНайдены = БылиНайдены + 1;
							КонецЕсли; 	
							Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "НАЗНАЧ") = 0
								ИЛИ НЕ Найти(ИмяПоляВФайлеИзТаблицы, "КОММЕН") = 0 Тогда
								МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеНазначение;
								БылиНайдены = БылиНайдены + 1;
							КонецЕсли; 	
							
							СчетчикМассива = СчетчикМассива + 1;
							
						КонецЦикла;
						
						СчетчикМассива = 0;
						Пока СчетчикМассива < СчетчикМассиваСуммированияДанных Цикл 	
							
							ЗначениеДанных = МассивСуммированияДанных[ СчетчикМассива ][ 0 ];
							
							Если КаждоеПолеНоваяСтрока Тогда
								Если ЗначениеЗаполнено(ЗнакМеждуИменемПоляИЗначением) Тогда
									СтрокаДляДобавления = ПредСтрока + СледующееПолеФайлу.ИмяПоляВФайле + ЗнакМеждуИменемПоляИЗначением + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;
								Иначе
									СтрокаДляДобавления = ПредСтрока + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;
								КонецЕсли;							
								
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
									СтрокаТаблицыОбмена[ СледующееПолеФайлу.номерСтроки - 1 ] = СтрокаДляДобавления;
								Иначе
									ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
								КонецЕсли;
								
							Иначе
								Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
									СтрокаТаблицыОбмена[ СчетчикМассива ] = ЗначениеДанных;
								Иначе
									СтрокаФайлаТекста = СтрокаФайлаТекста + ЗначениеДанных + ШаблонФайлаРазделительПолей;		
								КонецЕсли;
							КонецЕсли;	
							
							СчетчикМассива = СчетчикМассива + 1;
							
						КонецЦикла;
						
						Если НЕ КаждоеПолеНоваяСтрока Тогда
							СтрокаФайлаТекста = лев(СтрокаФайлаТекста, стрдлина(СтрокаФайлаТекста) - стрдлина(ШаблонФайлаРазделительПолей));
							Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
								//!!!!
							Иначе
								ФайлИмпортаЭкспорта.ДобавитьСтроку(ПредСтрока + СтрокаФайлаТекста + ПостСтрока);	
							КонецЕсли;
							
						ИначеЕсли ШаблонФайлаПустыеСтрокиМеждуЗаписями Тогда
							СтрокаДляДобавления = ПредСтрока + "" + ПостСтрока;
							Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
								СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
								СтрокаТаблицыОбмена[ 0 ] = СтрокаДляДобавления;
							Иначе
								ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
							КонецЕсли;
						КонецЕсли;	
						
						МассивСуммированияДанных 			= Новый Массив(1000, 2);
						СчетчикМассиваСуммированияДанных	= 0;
						СуммироватьДанныеСуммаДокумента = 0;
						СуммироватьДанныеНазначение = "";
						
					Иначе
						СуммироватьДанныеСуммаДокумента = 0;
						СуммироватьДанныеНазначение = "";
						
					КонецЕсли;
					
				КонецЕсли;
				
				СуммироватьДанныеБанковскийСчет 	= ОбъектОперации.БанковскийСчет;
				СуммироватьДанныеСчетКлиента 	= ОбъектОперации.СчетКлиента;
				Если СуммироватьДанныеСуммаДокумента = 0 Тогда
					СуммироватьДанныеСуммаДокумента	= ОбъектОперации.СуммаДокумента;	
				КонецЕсли;
				Если СуммироватьДанныеНазначение = "" Тогда
					СуммироватьДанныеНазначение		= СокрЛП(ОбъектОперации.Комментарий);	
					Если стрдлина(СуммироватьДанныеНазначение) > 250 Тогда
						СуммироватьДанныеНазначение = лев(СуммироватьДанныеНазначение, 250);
						Если ШаблонФайлаСообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Назначение обрезано до 250 символов.");
							Сообщение.Сообщить();	
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
				
				СуммироватьДанныеДатаВходящегоДокумента = ОбъектОперации.ДатаВходящегоДокумента;
				СуммироватьДанныеНомерВходящегоДокумента = ОбъектОперации.НомерВходящегоДокумента;
				
			КонецЕсли;	
			
			Если ШаблонФайлаФорматФайлаDBF Тогда
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
				Иначе
					БазаДБФФайлИмпортаЭкспорта.Добавить();						
				КонецЕсли;
				
			ИначеЕсли ШаблонФайлаФорматФайлаEXCEL 
				и ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
				
				СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
				
			Иначе
				если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора 
					И не КаждоеПолеНоваяСтрока 
					и НЕ СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток Тогда
					
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();	
					
				КонецЕсли;
				СтрокаФайлаТекста = "";
			КонецЕсли;
			
			Если ШаблонФайлаВыполнятьПрограммы И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки) Тогда
				Выполнить(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки);
				
			КонецЕсли;
			
			Если ШаблонФайлаИспользоватьДополнительноеПоведение Тогда
				Если ЭтоЗагрузкаСписка Тогда
					ИспользоватьДополнительноеПоведениеДляШаблона(ОбъектОперации, ШаблонФайла, ИмяТаблицыШаблонаФайла, Ложь, СтрокаФайлаТекста, БазаДБФФайлИмпортаЭкспорта, ТекЛист, РеальныйСчетчикСтрок, ФайлИмпортаЭкспорта);
				Иначе 	
					ИспользоватьДополнительноеПоведениеДляШаблона(СтрокаТаблицыИлиЭлемент, ШаблонФайла, "", Ложь, СтрокаФайлаТекста, БазаДБФФайлИмпортаЭкспорта, ТекЛист, РеальныйСчетчикСтрок, ФайлИмпортаЭкспорта);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СледующееПолеФайлу ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл								
				
				ИмяПоляВФайлеИзТаблицы = СокрЛП(СледующееПолеФайлу.ПолеТаблицы.Наименование);
				СубРеквизит = Найти(ИмяПоляВФайлеИзТаблицы, ".");
				СубПоле = "";
				Если СубРеквизит > 0 Тогда
					СубПоле = Прав(ИмяПоляВФайлеИзТаблицы, СтрДлина(ИмяПоляВФайлеИзТаблицы) - СубРеквизит);
					ИмяПоляВФайлеИзТаблицы = Лев(ИмяПоляВФайлеИзТаблицы, СубРеквизит - 1);
				КонецЕсли;
				
				ЗначениеДанных = ПередатьДанныеПоВидуПоля(СтрокаТаблицыИлиЭлемент, 
				СледующееПолеФайлу.ПолеТаблицы, 
				ОбъектОперации, 
				ИмяТаблицыШаблонаФайла, 
				ШаблонФайла,
				ПериодДляДокументов,
				СубРеквизит,
				ИмяПоляВФайлеИзТаблицы,
				СубПоле,
				ЭтоЗагрузкаСписка);
				
				ЗначениеДанных = ВыполнитьПроверкуПоУсловиямФильтра(ЗначениеДанных, СледующееПолеФайлу.НомерСтроки, ШаблонФайла, Ложь);
				
				Если НЕ ЗначениеДанных = "ОТКАЗвЗАПИСИтут" Тогда
					Если ШаблонФайлаФорматФайлаDBF Тогда
						Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
							СтрокаТаблицыОбмена[ СледующееПолеФайлу.номерСтроки - 1 ] = ЗначениеДанных;
						Иначе
							БазаДБФФайлИмпортаЭкспорта[ ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СокрЛП(СледующееПолеФайлу.ИмяПоляВФайле))) ] = ЗначениеДанных ;				
						КонецЕсли;
					Иначе 
						
						Если ТипЗнч(ЗначениеДанных) = Тип("Число") Тогда
							ЗначениеДанных = Формат(ЗначениеДанных, "ЧЦ = " + СокрЛП(СледующееПолеФайлу.ПолеТаблицы.ДлинаТут) + "; ЧДЦ = " + СокрЛП(СледующееПолеФайлу.ПолеТаблицы.ТочностьТут) + "; ЧРД = " + ШаблонФайлаРазделительЧисел + "; ЧГ = 0; ЧО = 1");
						ИначеЕсли 	ТипЗнч(ЗначениеДанных) = Тип("Дата") Тогда
							ЗначениеДанных = Формат(ЗначениеДанных, ?(ШаблонФайлаФорматПолейДаты = "", "ДФ = дд" + ШаблонФайлаРазделительДаты + "ММ" + ШаблонФайлаРазделительДаты + "гггг", ШаблонФайлаФорматПолейДаты));
						КонецЕсли;
						
						Если ШаблонФайлаФорматФайлаEXCEL Тогда
							Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
								СтрокаТаблицыОбмена[ СледующееПолеФайлу.номерСтроки - 1 ] = СокрЛП(ЗначениеДанных);
							Иначе
								ТекЛист.Cells(РеальныйСчетчикСтрок, СледующееПолеФайлу.НомерСтроки).Value = СокрЛП(ЗначениеДанных);	
							КонецЕсли;
							
						ИначеЕсли  ШаблонФайлаФорматФайлаTXT Тогда
							
							Если СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток Тогда
								
								ИмяПоляВФайлеИзТаблицыВ = ВРег(ИмяПоляВФайлеИзТаблицы);
								МассивСуммированияДанных[ СчетчикМассиваСуммированияДанных ][ 1 ] = ИмяПоляВФайлеИзТаблицыВ;
								Если Найти(ИмяПоляВФайлеИзТаблицыВ, "СУММА") = 0	
									И Найти(ИмяПоляВФайлеИзТаблицыВ, "НАЗНАЧ") = 0
									И Найти(ИмяПоляВФайлеИзТаблицыВ, "КОММЕН") = 0 Тогда
									
									МассивСуммированияДанных[ СчетчикМассиваСуммированияДанных ][ 0 ] = ЗначениеДанных;
									
								КонецЕсли; 	
								
								СчетчикМассиваСуммированияДанных = СчетчикМассиваСуммированияДанных + 1;
								
							Иначе
								
								Если КаждоеПолеНоваяСтрока Тогда
									Если ЗначениеЗаполнено(ЗнакМеждуИменемПоляИЗначением) Тогда
										СтрокаДляДобавления = ПредСтрока + СледующееПолеФайлу.ИмяПоляВФайле + ЗнакМеждуИменемПоляИЗначением + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;
									Иначе
										СтрокаДляДобавления = ПредСтрока + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;
									КонецЕсли;							
									
									Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
										СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
										СтрокаТаблицыОбмена[ СледующееПолеФайлу.номерСтроки - 1 ] = СтрокаДляДобавления;
									Иначе
										ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
									КонецЕсли;
									
								Иначе
									
									Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
										СтрокаТаблицыОбмена[ СледующееПолеФайлу.номерСтроки - 1 ] = ЗначениеДанных;
									Иначе
										СтрокаФайлаТекста = СтрокаФайлаТекста + ЗначениеДанных + ШаблонФайлаРазделительПолей;		
									КонецЕсли;
									
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			Если СтруктураИмпортаЭкспорта.ДополнительныйПараметр = "ПакетНабораИсточников" Тогда
				КвоДопТаблиц = СтруктураИмпортаЭкспорта.ЧислоДопТаблиц;
				СчетчикДопТаблиц = 0;
				СтруктураДопТаблиц = СтруктураИмпортаЭкспорта.СтруктураДопТаблиц;
				МассивШаблонТаблицы = СтруктураДопТаблиц.ШаблонТаблицы;
				МассивИмяТаблицыШаблонаФайла = СтруктураДопТаблиц.ИмяТаблицыШаблонаФайла;
				МассивАдресФайла = СтруктураДопТаблиц.АдресФайла;
				
				Пока СчетчикДопТаблиц < КвоДопТаблиц Цикл							
					
					СтруктураИмпортаЭкспорта_Внутренняя = СоздатьСтруктуруДляИмпортаЭкспорта(СтрокаТаблицыИлиЭлемент);
					СтруктураИмпортаЭкспорта_Внутренняя.ШаблонФайла = МассивШаблонТаблицы[ СчетчикДопТаблиц ];
					СтруктураИмпортаЭкспорта_Внутренняя.АдресФайла 	= МассивАдресФайла[ СчетчикДопТаблиц ];
					СтруктураИмпортаЭкспорта_Внутренняя.ИмяТаблицыШаблонаФайла 	= МассивИмяТаблицыШаблонаФайла[ СчетчикДопТаблиц ];
					СтруктураИмпортаЭкспорта_Внутренняя.ПериодДляДокументов 	= ПериодДляДокументов;
					СтруктураИмпортаЭкспорта_Внутренняя.ДополнительныйПараметр 	= "";
					
					ВыполнитьВыгрузкуВФайл(СтруктураИмпортаЭкспорта_Внутренняя);
					СчетчикДопТаблиц = СчетчикДопТаблиц + 1;
					
				КонецЦикла;					 	
			КонецЕсли;
			
			СчетчикСтрок = СчетчикСтрок + 1;
			
			Если ШаблонФайлаФорматФайлаDBF Тогда 
				
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					//!!!!!!!!!!			
				Иначе
					БазаДБФФайлИмпортаЭкспорта.Записать();	
				КонецЕсли;
				
			ИначеЕсли  ШаблонФайлаФорматФайлаTXT Тогда
				
				Если НЕ СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток Тогда
					
					Если НЕ КаждоеПолеНоваяСтрока Тогда //тут необходимо повторения третья ветвь - каждое поле новая строка
						
						СтрокаФайлаТекста = лев(СтрокаФайлаТекста, стрдлина(СтрокаФайлаТекста) - стрдлина(ШаблонФайлаРазделительПолей));
						СтрокаДляДобавления = ПредСтрока + СтрокаФайлаТекста + ПостСтрока;
						
						Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
							//так вот	
						Иначе
							ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
						КонецЕсли;
						
					ИначеЕсли ШаблонФайлаПустыеСтрокиМеждуЗаписями Тогда
						
						СтрокаДляДобавления = ПредСтрока + "" + ПостСтрока;
						
						Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
							СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
							СтрокаТаблицыОбмена[ 0 ] = СтрокаДляДобавления;
						Иначе
							ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
			
			РеальныйСчетчикСтрок = РеальныйСчетчикСтрок + 1;
			
			Если ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена и ШаблонФайлаПоказыватьОбъектыОбмена Тогда		
				ТаблицаОбработанныхОбъектов.Добавить(СтрокаТаблицыИлиЭлемент);
			КонецЕсли;
			
		КонецЦикла;			 	
		
		Если СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток 
			И ШаблонФайлаФорматФайлаTXT Тогда
			//последний объект			
			
			//Если СуммироватьДанныеБанковскийСчет = ОбъектОперации.БанковскийСчет
			//	И СуммироватьДанныеСчетКлиента 	= ОбъектОперации.СчетКлиента
			//	И СуммироватьДанныеДатаВходящегоДокумента = ОбъектОперации.ДатаВходящегоДокумента Тогда
			//	
			//	СуммироватьДанныеСуммаДокумента	= СуммироватьДанныеСуммаДокумента + ОбъектОперации.СуммаДокумента;
			//	СуммироватьДанныеНазначение		= СуммироватьДанныеНазначение + ШаблонФайлаВставлятьМеждуТекстамиНазначенияСледующийТекст + СокрЛП(ОбъектОперации.Комментарий);
			//	
			
			//добавим суммы
			СчетчикМассива 	= 0;
			БылиНайдены 	= 0;
			Пока СчетчикМассива <= СчетчикМассиваСуммированияДанных 
				И БылиНайдены < 2 Цикл 	
				
				ИмяПоляВФайлеИзТаблицы = МассивСуммированияДанных[ СчетчикМассива ][ 1 ];
				Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "СУММА") = 0 Тогда 	
					
					МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеСуммаДокумента;
					БылиНайдены = БылиНайдены + 1;
					
				КонецЕсли; 	
				Если НЕ Найти(ИмяПоляВФайлеИзТаблицы, "НАЗНАЧ") = 0
					ИЛИ НЕ Найти(ИмяПоляВФайлеИзТаблицы, "КОММЕН") = 0 Тогда
					
					МассивСуммированияДанных[ СчетчикМассива ][ 0 ] = СуммироватьДанныеНазначение;
					БылиНайдены = БылиНайдены + 1;
					
				КонецЕсли; 	
				
				СчетчикМассива = СчетчикМассива + 1;
				
			КонецЦикла;
			
			//КонецЕсли;				
			//
			//запишем остаток		
			Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора 
				и НЕ КаждоеПолеНоваяСтрока Тогда
				
				СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
				
			КонецЕсли;
			
			СчетчикМассива = 0;
			Пока СчетчикМассива < СчетчикМассиваСуммированияДанных Цикл 	
				
				ЗначениеДанных = МассивСуммированияДанных[ СчетчикМассива ][ 0 ];
				
				Если КаждоеПолеНоваяСтрока Тогда
					Если ЗначениеЗаполнено(ЗнакМеждуИменемПоляИЗначением) Тогда
						СтрокаДляДобавления = ПредСтрока + ШаблонФайлаПоследовательностьПолейВФайле[ СчетчикМассива - 1 ].ИмяПоляВФайле + ЗнакМеждуИменемПоляИЗначением + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;	
					Иначе
						СтрокаДляДобавления = ПредСтрока + ЗначениеДанных + ШаблонФайлаРазделительПолей + ПостСтрока;	
					КонецЕсли;							
					
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
						СтрокаТаблицыОбмена[ 0 ] = СтрокаДляДобавления;
					Иначе
						ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
					КонецЕсли;
					
				Иначе
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена[ СчетчикМассива ] = ЗначениеДанных;
					Иначе
						СтрокаФайлаТекста = СтрокаФайлаТекста + ЗначениеДанных + ШаблонФайлаРазделительПолей;		
					КонецЕсли;
				КонецЕсли;	
				
				СчетчикМассива = СчетчикМассива + 1;
				
			КонецЦикла;
			СчетчикМассиваСуммированияДанных	= 0;
			СуммироватьДанныеСуммаДокумента = 0;
			СуммироватьДанныеНазначение = "";
			//тут и далее необязательно
			
			Если НЕ КаждоеПолеНоваяСтрока Тогда
				СтрокаФайлаТекста = лев(СтрокаФайлаТекста, стрдлина(СтрокаФайлаТекста) - стрдлина(ШаблонФайлаРазделительПолей));
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					//!!!!!!!!!!			
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку(ПредСтрока + СтрокаФайлаТекста + ПостСтрока);	
				КонецЕсли;
				
			ИначеЕсли ШаблонФайлаПустыеСтрокиМеждуЗаписями Тогда
				СтрокаДляДобавления = ПредСтрока + "" + ПостСтрока;
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = СтрокаДляДобавления;
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку(СтрокаДляДобавления);	
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			//надо
		ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
			Если ЗначениеЗаполнено(ШаблонФайлаДобаватьТекстВПодвалФайла) Тогда
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = ШаблонФайлаДобаватьТекстВПодвалФайла;
				Иначе
					ТекЛист.Cells(РеальныйСчетчикСтрок, 1).Value = ШаблонФайлаДобаватьТекстВПодвалФайла;	
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ШаблонФайлаНеУчитыватьПоследнююСтрокуФайла Тогда
				Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
					СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
					СтрокаТаблицыОбмена[ 0 ] = "";
				Иначе
					ФайлИмпортаЭкспорта.ДобавитьСтроку("");	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШаблонФайлаДобаватьТекстВПодвалФайла) Тогда
				Попытка 
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
						СтрокаТаблицыОбмена[ 0 ] = "";
					Иначе
						ФайлИмпортаЭкспорта.ДобавитьСтроку(ШаблонФайлаДобаватьТекстВПодвалФайла);	
					КонецЕсли;
				Исключение 	
				КонецПопытки;
			КонецЕсли;
			
			Если ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить > 0 Тогда
				счетчикпустыхстрок = 0;
				Пока счетчикпустыхстрок < ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить Цикл 
					Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
						СтрокаТаблицыОбмена = ТаблицаОбмена.Добавить();
						СтрокаТаблицыОбмена[ 0 ] = "";
					Иначе
						ФайлИмпортаЭкспорта.ДобавитьСтроку("");	
					КонецЕсли;
					счетчикпустыхстрок = счетчикпустыхстрок + 1;
				КонецЦикла; //сч < ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить 
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;	//ПрямаяВыгрузкаТаблицы
	
	Если ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора Тогда
		
		ТаблицаОбмена.Колонки.Добавить("Обрабатывать", Новый ОписаниеТипов("Булево"), "Обрабатывать", 5);
		
		Для Каждого СтрокаТаблицыОбмена ИЗ ТаблицаОбмена Цикл
			СтрокаТаблицыОбмена.Обрабатывать = Истина;
		КонецЦикла;
		
		СтруктураФормыПрогресса.Вставить("ТаблицаОбмена", ТаблицаОбмена);
		Возврат СтруктураФормыПрогресса; 	
		
	Иначе
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			
			БазаДБФФайлИмпортаЭкспорта.ЗакрытьФайл();		
			
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогВременныхФайлов() + "TMPie.DBF");
			УдалитьФайлы(КаталогВременныхФайлов() + "TMPie.dbf");
			
		ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
			
			Книга.SaveAs(КаталогВременныхФайлов() + "TMPie.xls");
			Книга.Close(КаталогВременныхФайлов() + "TMPie.xls");
			ЭксельФайлИмпортаЭкспорта.quit();			
			
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогВременныхФайлов() + "TMPie.xls");
			УдалитьФайлы(КаталогВременныхФайлов() + "TMPie.xls");
			
		Иначе
			
			КодировкаФайла = СокрЛП(ШаблонФайла.КодировкаФайла);
			Если НЕ ЗначениеЗаполнено(КодировкаФайла) Тогда
				КодировкаФайла = "ANSI";
			КонецЕсли;
			
			ФайлИмпортаЭкспорта.Записать(КаталогВременныхФайлов() + "TMPie", КодировкаТекста[ КодировкаФайла ]);
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогВременныхФайлов() + "TMPie");
			УдалитьФайлы(КаталогВременныхФайлов() + "TMPie");
			
		КонецЕсли;	
		
		
		Попытка 
			ДвоичныеДанные.Записать(АдресФайла);	
			Если ШаблонФайла.ФайлАрхив Тогда
				ЗаписьЗипФайла = Новый ЗаписьZipФайла;
				ЗаписьЗипФайла.Открыть(АдресФайла + "TMPie", ?(ЗначениеЗаполнено(ШаблонФайла.ПарольАрхива), ШаблонФайла.ПарольАрхива, Неопределено), ШаблонФайла.Комментарий, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
				ЗаписьЗипФайла.Добавить(АдресФайла);
				ЗаписьЗипФайла.Записать();
				УдалитьФайлы(АдресФайла);
				ПереместитьФайл(АдресФайла + "TMPie", АдресФайла);
			КонецЕсли;
			
			Если ШаблонФайла.ВестиЖурналИмпортноЭкспортныхОпераций Тогда 	
				ЗаписатьВЖурналИмпортноЭкспортныхОпераций(АдресФайла, ОбъектОперации, ДвоичныеДанные.Размер(), Истина);
			КонецЕсли;
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка записи:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
			Сообщение.Сообщить();
			
		КонецПопытки;	
		
		Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена Тогда
			СтруктураФормыПрогресса.Вставить("ЧислоОбработанныхОбъектов", РеальныйСчетчикСтрок - 1);
			СтруктураФормыПрогресса.Вставить("ТаблицаОбработанныхОбъектов", ТаблицаОбработанныхОбъектов);
		КонецЕсли;
		
		Возврат СтруктураФормыПрогресса; 	
		
	КонецЕсли;
	
КонецФункции

//Выгрузка перечня шаблонов обмена с ПО Клиент банк
&НаСервере
Процедура ВыполнитьВыгрузкуШаблоновНаСервере(АдресФайла, ВыбранШаблон = Неопределено) Экспорт
	
	БазаДБФБазаШаблонов = Новый XBase;
	
	БазаДБФБазаШаблонов.поля.Добавить("NAIMENSH", 	"S", 120, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RAZDELIT", 	"S", 3, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RAZDELIT2", 	"S", 3, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RAZDELCH", 	"S", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("PROPSTRK", 	"N", 5, 0);
	БазаДБФБазаШаблонов.поля.Добавить("CODE_DOS", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("COMMENTR", 	"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("PROPNS", 	"N", 3, 0);
	БазаДБФБазаШаблонов.поля.Добавить("PROPKS", 	"N", 3, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SOZDELNM", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("FORMDATA", 	"S", 120, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NEPRNPRV", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NEPRUDAL", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NOMPOLVZ", 	"N", 4, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ADRSFILE", 	"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ZAPRINDO", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("VIPPR", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("FORMPERS", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("STROZAGO", 	"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("VIDSHABL", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("FILE_VER", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("IT", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RAZDELDA", 	"S", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("DOPUSTRO", 	"N", 2, 0);
	БазаДБФБазаШаблонов.поля.Добавить("USTTDDEN", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("MASKFILE", 	"S", 120, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ITAB", 		"S", 100, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SHOWOBMN", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NG", 		"S", 80, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RASROKOB", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SHOWOBJS", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NOTCLOSE", 	"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("EINN", 		"S", 12, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SPNN", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SUZPNN", 	"S", 30, 0);
	БазаДБФБазаШаблонов.поля.Добавить("KODIROV", 	"S", 30, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SUZTNN", 	"S", 30, 0);
	БазаДБФБазаШаблонов.поля.Добавить("TIPNN", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SMN", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SMPN", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("VIRNAIM", 	"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("HIRNAIM", 	"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("DOSO", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("RAZVSIM", 	"S", 10, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NAMELIST", 	"N", 5, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SRIP", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("MK", 		"S", 60, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST1", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST2", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST3", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST4", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST5", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("ST6", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("TSF", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("TPF", 		"S", 254, 0);
	БазаДБФБазаШаблонов.поля.Добавить("SPSPS", 		"N", 1, 0);
	БазаДБФБазаШаблонов.поля.Добавить("NAPRV", 		"S", 80, 0);
	БазаДБФБазаШаблонов.поля.Добавить("GNN", 		"S", 254, 0); //ГруппаДляНовойНоменклатуры
	БазаДБФБазаШаблонов.поля.Добавить("FILNS", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("KPNS", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("PSMZ", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("ESPD", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("ISZBD", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("VNN", 		"S", 3, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("OPD", 		"S", 11, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("RVMZ", 		"S", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("TRASP", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("TPRIP", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLDP", 		"S", 120, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLD", 		"S", 2, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLDZ", 		"S", 120, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLZDP", 	"S", 120, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLZD", 		"S", 2, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLZDZ", 	"S", 120, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USLZDZP", 	"S", 120, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("SDK", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("SKPO", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("SBSK", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("NIPSF", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("POPRDO", 	"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("CHSKPRO", 	"N", 5, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("NODOUSDV", 	"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USD1", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USDS1", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("SDDSR", 		"S", 9, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("SDDSP", 		"S", 9, 0);
	БазаДБФБазаШаблонов.поля.Добавить("VSNED", 		"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("IVKKTPT", 	"N", 1, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("PVNZNSD", 	"N", 1, 0); //ПоискВНазначенииПлатежаНомераСчетаИДоговора
	БазаДБФБазаШаблонов.поля.Добавить("SDRPOK", 	"N", 1, 0); //СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток
	БазаДБФБазаШаблонов.поля.Добавить("VSMTNST", 	"S", 25, 0); //ВставлятьМеждуТекстамиНазначенияСледующийТекст
	БазаДБФБазаШаблонов.поля.Добавить("VSMTNSTD", 	"N", 3, 0); 
	БазаДБФБазаШаблонов.поля.Добавить("USPRIZA", 	"N", 1, 0);//УстанавливатьПризнакАвансаДокументамДенежныхСредств
	БазаДБФБазаШаблонов.поля.Добавить("OTFDNP", 	"N", 1, 0);//ОткрыватьФормуДокументовКоторыеНеУдалосьПровести
	БазаДБФБазаШаблонов.поля.Добавить("OTFKD", 		"N", 1, 0);//ОткрыватьФормуКаждогоЭлементаИлиДокумента
	БазаДБФБазаШаблонов.поля.Добавить("UDFPUI", 	"N", 1, 0);//УдалятьФайлПослеУдачногоИмпорта
	БазаДБФБазаШаблонов.поля.Добавить("USDDPI", 	"D", 8, 0);//УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена
	БазаДБФБазаШаблонов.поля.Добавить("ZAVSFIP", 	"N", 1, 0);//ЗагружатьВсеФайлыИзПапки
	БазаДБФБазаШаблонов.поля.Добавить("VEJUIEO", 	"N", 1, 0);//ВестиЖурналИмпортноЭкспортныхОпераций
	БазаДБФБазаШаблонов.поля.Добавить("ISVPK", 		"N", 1, 0);//ИскатьВПодкаталогах
	БазаДБФБазаШаблонов.поля.Добавить("FAAR", 		"N", 1, 0);//ФайлАрхив
	БазаДБФБазаШаблонов.поля.Добавить("PAFA", 		"S", 100, 0);//ПарольАрхива
	БазаДБФБазаШаблонов.поля.Добавить("SONZPE", 	"N", 1, 0);//СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка
	БазаДБФБазаШаблонов.поля.Добавить("PEPZVOSP", 	"N", 1, 0);//ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора
	БазаДБФБазаШаблонов.поля.Добавить("EKNNPIOP", 	"N", 1, 0);//ЕслиКлиентНеНайденПриИмпортеОткрыватьПодборИзСуществующих
	БазаДБФБазаШаблонов.поля.Добавить("NVSOOO", 	"N", 1, 0);//НеВыводитьСообщениеОЗавершенииОбмена
	БазаДБФБазаШаблонов.поля.Добавить("STEPSON", 	"N", 1, 0);//СуммироватьТолькоЕслиПлатежкиСОднимНомером
	БазаДБФБазаШаблонов.поля.Добавить("PRDEOTSU", 	"N", 1, 0);//ПризнакДебетаОтрицательнаяСумма
	БазаДБФБазаШаблонов.поля.Добавить("IMAREGI", 	"S", 250, 0);//
	
	БазаДБФБазаШаблонов.поля.Добавить("COD", 		"S", 5, 0);
	БазаДБФБазаШаблонов.Кодировка = КодировкаXBase.ANSI;
	БазаДБФБазаШаблонов.СоздатьФайл(АдресФайла);
	
	ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.Выбрать() ;
	Пока ШаблонФайла.Следующий() Цикл //УСЛОВИЕ ЗАПИСИ
		
		Если (ЗначениеЗаполнено(ВыбранШаблон) 
			И ШаблонФайла.Ссылка = ВыбранШаблон) 
			ИЛИ (НЕ ЗначениеЗаполнено(ВыбранШаблон) 
			И не ШаблонФайла.ПометкаУдаления 
			И не ШаблонФайла.Предопределенный) тогда
			
			БазаДБФБазаШаблонов.Добавить();
			ИмяТекущегоШаблона = ШаблонФайла.Наименование;
			БазаДБФБазаШаблонов.NAIMENSH = ИмяТекущегоШаблона;
			БазаДБФБазаШаблонов.RAZDELIT = ШаблонФайла.РазделительПолей;
			БазаДБФБазаШаблонов.RAZDELIT2= ШаблонФайла.РазделительПолейАльтернативный;
			БазаДБФБазаШаблонов.RAZDELCH = ШаблонФайла.РазделительЧисел;
			БазаДБФБазаШаблонов.NOMPOLVZ = ШаблонФайла.НомерПоляКотороеВсегдаЗаполнено;
			БазаДБФБазаШаблонов.STROZAGO = ШаблонФайла.ИспользоватьСтрокуЗаголовок;
			БазаДБФБазаШаблонов.PROPSTRK = ШаблонФайла.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;
			Если ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
				БазаДБФБазаШаблонов.USTTDDEN = 1;
			КонецЕсли;
			Если ШаблонФайла.КодировкаDOS Тогда
				БазаДБФБазаШаблонов.CODE_DOS = 1;
			КонецЕсли;
			Если ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
				БазаДБФБазаШаблонов.FORMPERS = 1;
			КонецЕсли;
			Если ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
				БазаДБФБазаШаблонов.FILE_VER = 1;
			ИначеЕсли ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
				БазаДБФБазаШаблонов.FILE_VER = 2;
			КонецЕсли;
			БазаДБФБазаШаблонов.COMMENTR = ШаблонФайла.Комментарий;
			Если ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
				БазаДБФБазаШаблонов.SOZDELNM = 1;
			КонецЕсли;
			Если ШаблонФайла.НеПропускатьНепроведенныеДокументы Тогда
				БазаДБФБазаШаблонов.NEPRNPRV = 1;
			КонецЕсли;
			Если ШаблонФайла.НеПропускатьОбъектыПомеченныеНаУдаление Тогда
				БазаДБФБазаШаблонов.NEPRUDAL = 1;
			КонецЕсли;
			БазаДБФБазаШаблонов.FORMDATA = ШаблонФайла.ФорматПолейДаты;
			БазаДБФБазаШаблонов.ADRSFILE = ШаблонФайла.АдресФайла;
			Если ШаблонФайла.ВыдаватьЗапросДляИнтервалаДокументов Тогда
				БазаДБФБазаШаблонов.ZAPRINDO = 1;
			КонецЕсли;
			Если ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляКарточкиСправочникаИлиШапкиДокумента Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 1;
			ИначеЕсли ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляСпискаЭлементовСправочникаИлиДокументов Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 2;
			ИначеЕсли ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляТаблицыТовары Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 3;
			ИначеЕсли ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 4;
			ИначеЕсли ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 5;
			ИначеЕсли ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляРегистровСведений Тогда
				БазаДБФБазаШаблонов.VIDSHABL = 6;
			КонецЕсли;
			Если ШаблонФайла.ИспользоватьТолькоДляИмпорта Тогда
				БазаДБФБазаШаблонов.IT = 1;
			Иначеесли ШаблонФайла.ИспользоватьТолькоДляЭкспорта Тогда
				БазаДБФБазаШаблонов.IT = 2;
			КонецЕсли;
			Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена Тогда
				БазаДБФБазаШаблонов.SHOWOBMN = 1;
			КонецЕсли;
			Если ШаблонФайла.РасчитыватьСрокОкончанияОбмена Тогда
				БазаДБФБазаШаблонов.RASROKOB = 1;
			КонецЕсли;
			Если ШаблонФайла.ПоказыватьОбъектыОбмена Тогда
				БазаДБФБазаШаблонов.SHOWOBJS = 1;
			КонецЕсли;
			Если ШаблонФайла.НеЗакрыватьОкноПеречняОбъектовОбмена Тогда
				БазаДБФБазаШаблонов.NOTCLOSE = 1;
			КонецЕсли;
			БазаДБФБазаШаблонов.KODIROV = ШаблонФайла.КодировкаФайла;
			БазаДБФБазаШаблонов.RAZDELDA = ШаблонФайла.РазделительДаты;
			БазаДБФБазаШаблонов.COD = ШаблонФайла.Код;
			БазаДБФБазаШаблонов.DOPUSTRO = ШаблонФайла.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла;
			БазаДБФБазаШаблонов.MASKFILE = ШаблонФайла.МаскаФайла;
			БазаДБФБазаШаблонов.ITAB = ШаблонФайла.ИмяТаблицыШаблонаФайла;
			БазаДБФБазаШаблонов.EINN = СокрЛП(ШаблонФайла.ЕдиницаИзмеренияНоменклатуры);
			//Если ШаблонФайла.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияТоваров.Производство Тогда
			//	БазаДБФБазаШаблонов.SPNN = 1;
			//ИначеЕсли ШаблонФайла.СпособПополненияНоменклатуры = Перечисления.СпособыПополненияТоваров.Переработка Тогда
			//	БазаДБФБазаШаблонов.SPNN = 2;
			//Иначе //закупка
			БазаДБФБазаШаблонов.SPNN = 3;
			//КонецЕсли;			
			БазаДБФБазаШаблонов.SUZPNN = "";//СокрЛП(ШаблонФайла.СчетУчетаТоваров.Код);
			БазаДБФБазаШаблонов.SUZTNN = "";//СокрЛП(ШаблонФайла.СчетУчетаЗатрат.Код);
			//Если ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот Тогда
			//	БазаДБФБазаШаблонов.TIPNN = 1;
			//ИначеЕсли ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			//	БазаДБФБазаШаблонов.TIPNN = 2;
			//ИначеЕсли ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
			//	БазаДБФБазаШаблонов.TIPNN = 3;
			//ИначеЕсли ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			//	БазаДБФБазаШаблонов.TIPNN = 4;
			//ИначеЕсли ШаблонФайла.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Расход Тогда
			//	БазаДБФБазаШаблонов.TIPNN = 5;
			//Иначе //услуга
			БазаДБФБазаШаблонов.TIPNN = 6;
			//			КонецЕсли;
			БазаДБФБазаШаблонов.SMN = ?(ШаблонФайла.СоздаватьМаркиНоменклатуры, 1, 0);
			БазаДБФБазаШаблонов.SMPN = ?(ШаблонФайла.СоздаватьМетодыПолученияНоменклатуры, 1, 0);
			БазаДБФБазаШаблонов.VIRNAIM = ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей;
			БазаДБФБазаШаблонов.DOSO = ?(ШаблонФайла.ДляОбновленияСуществующихОбъектов, 1, 0);
			БазаДБФБазаШаблонов.VIPPR = ?(ШаблонФайла.ВыполнятьПрограммы, 1, 0);
			БазаДБФБазаШаблонов.FILNS = ?(ШаблонФайла.ФильтроватьНеподходящиеСимволы, 1, 0);
			БазаДБФБазаШаблонов.KPNS = ?(ШаблонФайла.КаждоеПолеНоваяСтрока, 1, 0);
			БазаДБФБазаШаблонов.PSMZ = ?(ШаблонФайла.ПустыеСтрокиМеждуЗаписями, 1, 0);
			БазаДБФБазаШаблонов.ESPD = ?(ШаблонФайла.ЭтоПлатежныйдокумент, 1, 0);
			БазаДБФБазаШаблонов.TPRIP = ?(ШаблонФайла.ТолькоПриходные, 1, 0);
			БазаДБФБазаШаблонов.TRASP = ?(ШаблонФайла.ТолькоРасходные, 1, 0);
			БазаДБФБазаШаблонов.SKPO = ?(ШаблонФайла.СоздаватьКлиентовПоОКПО, 1, 0);
			БазаДБФБазаШаблонов.SBSK = ?(ШаблонФайла.СоздаватьБанковскиеСчетаКлиентов, 1, 0);
			БазаДБФБазаШаблонов.SDK = ?(ШаблонФайла.СоздаватьДоговораКлиентов, 1, 0);
			БазаДБФБазаШаблонов.NIPSF = ?(ШаблонФайла.НеУчитыватьПоследнююСтрокуФайла, 1, 0);
			БазаДБФБазаШаблонов.POPRDO = ?(ШаблонФайла.ПопытатьсяПроводитьДокументы, 1, 0);
			БазаДБФБазаШаблонов.ISZBD = ?(ШаблонФайла.ИспользоватьЗаголовкиБлоковДанных, 1, 0);
			БазаДБФБазаШаблонов.HIRNAIM = ШаблонФайла.СоставлятьХарактеристикуПоВыражениюИзИменПолей;
			Если ШаблонФайла.РазделительВСоставномНаименовании = " " Тогда
				БазаДБФБазаШаблонов.RAZVSIM = "Пробел";
			Иначе
				БазаДБФБазаШаблонов.RAZVSIM = ШаблонФайла.РазделительВСоставномНаименовании;				
			КонецЕсли;
			Если ЗначениеЗаполнено(ШаблонФайла.НоменклатурнаяГруппа) Тогда
				БазаДБФБазаШаблонов.NG = ШаблонФайла.НоменклатурнаяГруппа.Наименование;				
			КонецЕсли;
			Если ЗначениеЗаполнено(ШаблонФайла.ВалютаНеНациональная) Тогда
				БазаДБФБазаШаблонов.VNN = "";//ШаблонФайла.ВалютаНеНациональная.Код;
			КонецЕсли;
			БазаДБФБазаШаблонов.NAMELIST 	= ШаблонФайла.НомерЛиста;			
			БазаДБФБазаШаблонов.SRIP 		= ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей;
			БазаДБФБазаШаблонов.MK 			= СокрЛП(ШаблонФайла.Производитель);
			БазаДБФБазаШаблонов.ST1 		= ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля;
			БазаДБФБазаШаблонов.ST2 		= ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки;
			БазаДБФБазаШаблонов.ST3 		= ШаблонФайла.ВыполнитьПрограммныйКодПередНачалом ;
			БазаДБФБазаШаблонов.ST4 		= ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончания ;
			БазаДБФБазаШаблонов.ST5 		= ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля ;
			БазаДБФБазаШаблонов.ST6 		= ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки ;
			БазаДБФБазаШаблонов.NAPRV 		= СокрЛП(ШаблонФайла.НаправлениеДеятельности);
			БазаДБФБазаШаблонов.OPD			= СокрЛП(ШаблонФайла.ОбрабатыватьПлатежныеДокументы);
			БазаДБФБазаШаблонов.RVMZ 		= СокрЛП(ШаблонФайла.РазделителиВстречаютсяМеждуЗнаками);
			БазаДБФБазаШаблонов.USLDP 		= СокрЛП(ШаблонФайла.УсловиеДебетаПоле);
			БазаДБФБазаШаблонов.USLD 		= СокрЛП(ШаблонФайла.УсловиеДебета);
			БазаДБФБазаШаблонов.USLDZ		= СокрЛП(ШаблонФайла.УсловиеДебетаЗначение);
			БазаДБФБазаШаблонов.USLZDP 		= СокрЛП(ШаблонФайла.УсловиеЗаголовкаБлокаДанныхПоле);
			БазаДБФБазаШаблонов.USLZD 		= СокрЛП(ШаблонФайла.УсловиеЗаголовкаБлокаДанных);
			БазаДБФБазаШаблонов.USLZDZ 		= СокрЛП(ШаблонФайла.УсловиеЗаголовкаБлокаДанныхЗначение);
			БазаДБФБазаШаблонов.USLZDZP 	= СокрЛП(ШаблонФайла.УсловиеЗаголовкаБлокаДанныхНаличиеПодстроки);
			
			//Если ШаблонФайла.СпособСписания = Перечисления.МетодОценкиТоваров.FIFO Тогда
			//	БазаДБФБазаШаблонов.SPSPS 	= 1;
			//ИначеЕсли ШаблонФайла.СпособСписания = Перечисления.МетодОценкиТоваров.ПоСредней Тогда
			БазаДБФБазаШаблонов.SPSPS 	= 2;
			//			КонецЕсли;
			
			БазаДБФБазаШаблонов.GNN 		= СокрЛП(ШаблонФайла.ГруппаДляНовойНоменклатуры);
			БазаДБФБазаШаблонов.PROPNS 		= ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки;
			БазаДБФБазаШаблонов.PROPKS 		= ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки;
			БазаДБФБазаШаблонов.CHSKPRO 	= ШаблонФайла.ЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить;
			БазаДБФБазаШаблонов.TSF		 	= СокрЛП(ШаблонФайла.ДобавитьТекстВШапкуФайла);
			БазаДБФБазаШаблонов.TPF			= СокрЛП(ШаблонФайла.ДобаватьТекстВПодвалФайла);
			
			БазаДБФБазаШаблонов.NODOUSDV 	= ?(ШаблонФайла.НомерДокументаУстанавливатьНоНомеруВходящегоИлиИсходящегоДокумента, 1, 0);
			БазаДБФБазаШаблонов.USD1 		= ?(ШаблонФайла.УстанавливатьПервыйПодходящийДоговорКлиента, 1, 0);
			БазаДБФБазаШаблонов.USDS1 		= ?(ШаблонФайла.УстанавливатьДоговорКлиентаЕслиПодходитТолькоОдин, 1, 0); 
			БазаДБФБазаШаблонов.VSNED 		= ?(ШаблонФайла.ВсегдаСоздаватьНовыйЭлементИлиДокумент, 1, 0); 
			Если ЗначениеЗаполнено(ШаблонФайла.СтатьяДДСРасходаПоУмолчанию) Тогда
				БазаДБФБазаШаблонов.SDDSR 	= ШаблонФайла.СтатьяДДСРасходаПоУмолчанию.Код;
			КонецЕсли;
			Если ЗначениеЗаполнено(ШаблонФайла.СтатьяДДСПоступленияПоУмолчанию) Тогда
				БазаДБФБазаШаблонов.SDDSP 	= ШаблонФайла.СтатьяДДСПоступленияПоУмолчанию.Код;
			КонецЕсли;
			БазаДБФБазаШаблонов.IVKKTPT 	= ?(ШаблонФайла.ИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы, 1, 0); 
			БазаДБФБазаШаблонов.PVNZNSD 	= ?(ШаблонФайла.ПоискВНазначенииПлатежаНомераСчетаИДоговора, 1, 0); 
			БазаДБФБазаШаблонов.SDRPOK 		= ?(ШаблонФайла.СуммироватьДанныеДокументовРасходДСПланПриВыгрузкеДляОдногоКлиентаОтОднойОрганизацииВТеченииСуток, 1, 0);
			БазаДБФБазаШаблонов.VSMTNST 	= ШаблонФайла.ВставлятьМеждуТекстамиНазначенияСледующийТекст;
			БазаДБФБазаШаблонов.VSMTNSTD 	= СтрДлина(ШаблонФайла.ВставлятьМеждуТекстамиНазначенияСледующийТекст);
			БазаДБФБазаШаблонов.USPRIZA		= ?(ШаблонФайла.УстанавливатьПризнакАвансаДокументамДенежныхСредств, 1, 0);
			БазаДБФБазаШаблонов.OTFDNP		= ?(ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести, 1, 0);
			БазаДБФБазаШаблонов.OTFKD		= ?(ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента, 1, 0);
			БазаДБФБазаШаблонов.UDFPUI		= ?(ШаблонФайла.УдалятьФайлПослеУдачногоИмпорта, 1, 0);
			БазаДБФБазаШаблонов.USDDPI 		= ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
			БазаДБФБазаШаблонов.ZAVSFIP		= ?(ШаблонФайла.ЗагружатьВсеФайлыИзПапки, 1, 0);
			БазаДБФБазаШаблонов.VEJUIEO		= ?(ШаблонФайла.ВестиЖурналИмпортноЭкспортныхОпераций, 1, 0);
			БазаДБФБазаШаблонов.ISVPK		= ?(ШаблонФайла.ИскатьВПодкаталогах, 1, 0);
			БазаДБФБазаШаблонов.FAAR		= ?(ШаблонФайла.ФайлАрхив, 1, 0);
			БазаДБФБазаШаблонов.PAFA		= ШаблонФайла.ПарольАрхива;
			БазаДБФБазаШаблонов.SONZPE		= ?(ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка, 1, 0);
			БазаДБФБазаШаблонов.PEPZVOSP	= ?(ШаблонФайла.ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора, 1, 0);
			БазаДБФБазаШаблонов.EKNNPIOP	= ?(ШаблонФайла.ЕслиКлиентНеНайденПриИмпортеОткрыватьПодборИзСуществующих, 1, 0);
			БазаДБФБазаШаблонов.NVSOOO		= ?(ШаблонФайла.НеВыводитьСообщениеОЗавершенииОбмена, 1, 0);
			БазаДБФБазаШаблонов.STEPSON		= ?(ШаблонФайла.СуммироватьТолькоЕслиПлатежкиСОднимНомером, 1, 0);
			БазаДБФБазаШаблонов.PRDEOTSU	= ?(ШаблонФайла.ПризнакДебетаОтрицательнаяСумма, 1, 0);
			БазаДБФБазаШаблонов.IMAREGI     = ШаблонФайла.ИмяРегистра;
			
			
			БазаДБФБазаШаблонов.Записать();
			
		КонецЕсли;
	КонецЦикла; //записи БазаШаблонов
	
	БазаДБФБазаШаблонов.ЗакрытьФайл();
	
	БазаДБФПоляШаблонов = Новый XBase;
	БазаДБФПоляШаблонов.поля.Добавить("POLETABL", 	"S", 5, 0);
	БазаДБФПоляШаблонов.поля.Добавить("POLNTABL", 	"S", 120, 0);
	БазаДБФПоляШаблонов.поля.Добавить("COMMENTR", 	"S", 254, 0);
	БазаДБФПоляШаблонов.поля.Добавить("KEY_POLE", 	"N", 1, 0);
	БазаДБФПоляШаблонов.поля.Добавить("NAMEINFL", 	"S", 254, 0);
	БазаДБФПоляШаблонов.поля.Добавить("COD", 		"S", 5, 0);
	БазаДБФПоляШаблонов.поля.Добавить("C", 			"S", 254, 0);
	БазаДБФПоляШаблонов.поля.Добавить("T", 			"S", 1, 0);
	БазаДБФПоляШаблонов.поля.Добавить("D", 			"N", 5, 0);
	БазаДБФПоляШаблонов.поля.Добавить("TO", 		"N", 2, 0);
	БазаДБФПоляШаблонов.поля.Добавить("PPO", 		"N", 1, 0);
	БазаДБФПоляШаблонов.поля.Добавить("OZ", 		"S", 254, 0);
	БазаДБФПоляШаблонов.поля.Добавить("ZPU", 		"S", 120, 0);
	БазаДБФПоляШаблонов.поля.Добавить("ENZTPS", 	"N", 1, 0);
	БазаДБФПоляШаблонов.поля.Добавить("K", 			"N", 12, 3);
	БазаДБФПоляШаблонов.поля.Добавить("ZBD", 		"N", 1, 0);
	БазаДБФПоляШаблонов.Кодировка = КодировкаXBase.ANSI;
	БазаДБФПоляШаблонов.СоздатьФайл(Лев(АдресФайла, стрдлина(АдресФайла) - 5) + "1.DBf");
	
	ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.Выбрать() ;
	Пока ШаблонФайла.Следующий() Цикл //УСЛОВИЕ ЗАПИСИ
		
		Если (ЗначениеЗаполнено(ВыбранШаблон) 
			И ШаблонФайла.Ссылка = ВыбранШаблон) 
			ИЛИ (НЕ ЗначениеЗаполнено(ВыбранШаблон) 
			И не ШаблонФайла.ПометкаУдаления 
			И не ШаблонФайла.Предопределенный) тогда
			
			Для Каждого ПолеШаблона ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл
				Если ЗначениеЗаполнено(ПолеШаблона.ПолеТаблицы) Тогда
					
					БазаДБФПоляШаблонов.Добавить();
					Если ПолеШаблона.ПолеТаблицы.Предопределенный Тогда
						БазаДБФПоляШаблонов.POLETABL = ПолеШаблона.ПолеТаблицы.Код;
					КонецЕсли;
					БазаДБФПоляШаблонов.POLNTABL = ПолеШаблона.ПолеТаблицы.Наименование;
					БазаДБФПоляШаблонов.COMMENTR = ПолеШаблона.КомментарийПоля;
					Если ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
						БазаДБФПоляШаблонов.KEY_POLE = 1;
					КонецЕсли;
					БазаДБФПоляШаблонов.NAMEINFL = ПолеШаблона.ИмяПоляВФайле;
					БазаДБФПоляШаблонов.COD = ШаблонФайла.Код;
					БазаДБФПоляШаблонов.C = ПолеШаблона.ПолеТаблицы.Комментарий;
					БазаДБФПоляШаблонов.T = ПолеШаблона.ПолеТаблицы.ТипТут;
					БазаДБФПоляШаблонов.D = ПолеШаблона.ПолеТаблицы.ДлинаТут;
					БазаДБФПоляШаблонов.K = ПолеШаблона.ПолеТаблицы.Коэффициент;
					БазаДБФПоляШаблонов.TO = ПолеШаблона.ПолеТаблицы.ТочностьТут;
					БазаДБФПоляШаблонов.ZPU = ПолеШаблона.ПолеТаблицы.ЗаголовокПоляПоУмолчанию;
					Если ПолеШаблона.ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы Тогда
						БазаДБФПоляШаблонов.PPO = 1;
					КонецЕсли;
					БазаДБФПоляШаблонов.OZ = ПолеШаблона.ПолеТаблицы.ОпределенноеЗначение;
					Если ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение Тогда
						БазаДБФПоляШаблонов.ENZTPS = 1;
					КонецЕсли;
					
					БазаДБФПоляШаблонов.Записать();
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПолеШаблона ИЗ ШаблонФайла.ПоследовательностьПолейВЗаголовкеБлокаДанных Цикл
				Если ЗначениеЗаполнено(ПолеШаблона.ПолеТаблицы) Тогда
					
					БазаДБФПоляШаблонов.Добавить();
					БазаДБФПоляШаблонов.ZBD = 1;
					Если ПолеШаблона.ПолеТаблицы.Предопределенный Тогда
						БазаДБФПоляШаблонов.POLETABL = ПолеШаблона.ПолеТаблицы.Код;
					КонецЕсли;
					БазаДБФПоляШаблонов.POLNTABL = ПолеШаблона.ПолеТаблицы.Наименование;
					БазаДБФПоляШаблонов.COMMENTR = ПолеШаблона.КомментарийПоля;
					Если ПолеШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
						БазаДБФПоляШаблонов.KEY_POLE = 1;
					КонецЕсли;
					БазаДБФПоляШаблонов.NAMEINFL = ПолеШаблона.ИмяПоляВФайле;
					БазаДБФПоляШаблонов.COD = ШаблонФайла.Код;
					БазаДБФПоляШаблонов.C = ПолеШаблона.ПолеТаблицы.Комментарий;
					БазаДБФПоляШаблонов.T = ПолеШаблона.ПолеТаблицы.ТипТут;
					БазаДБФПоляШаблонов.D = ПолеШаблона.ПолеТаблицы.ДлинаТут;
					БазаДБФПоляШаблонов.K = ПолеШаблона.ПолеТаблицы.Коэффициент;
					БазаДБФПоляШаблонов.TO = ПолеШаблона.ПолеТаблицы.ТочностьТут;
					БазаДБФПоляШаблонов.ZPU = ПолеШаблона.ПолеТаблицы.ЗаголовокПоляПоУмолчанию;
					Если ПолеШаблона.ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы Тогда
						БазаДБФПоляШаблонов.PPO = 1;
					КонецЕсли;
					БазаДБФПоляШаблонов.OZ = ПолеШаблона.ПолеТаблицы.ОпределенноеЗначение;
					Если ПолеШаблона.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение Тогда
						БазаДБФПоляШаблонов.ENZTPS = 1;
					КонецЕсли;
					
					БазаДБФПоляШаблонов.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; //записи БазаШаблонов
	
	БазаДБФПоляШаблонов.ЗакрытьФайл();
	
	БазаДБФПоляШаблонов = Новый XBase;
	БазаДБФПоляШаблонов.поля.Добавить("COD", 	"S", 5, 0);
	БазаДБФПоляШаблонов.поля.Добавить("NP", 	"N", 5, 0);
	БазаДБФПоляШаблонов.поля.Добавить("UR", 	"S", 2, 0);
	БазаДБФПоляШаблонов.поля.Добавить("ZN", 	"S", 254, 0);
	БазаДБФПоляШаблонов.поля.Добавить("P", 		"N", 1, 0);
	БазаДБФПоляШаблонов.поля.Добавить("COMMENTR", "S", 254, 0);
	БазаДБФПоляШаблонов.Кодировка = КодировкаXBase.ANSI;
	БазаДБФПоляШаблонов.СоздатьФайл(Лев(АдресФайла, стрдлина(АдресФайла) - 5) + "2.DBf");
	
	ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.Выбрать() ;
	Пока ШаблонФайла.Следующий() Цикл
		Если (ЗначениеЗаполнено(ВыбранШаблон) 
			И ШаблонФайла.Ссылка = ВыбранШаблон) 
			ИЛИ (НЕ ЗначениеЗаполнено(ВыбранШаблон) 
			И НЕ ШаблонФайла.ПометкаУдаления 
			И НЕ ШаблонФайла.Предопределенный) тогда
			
			Для Каждого ПолеШаблона ИЗ ШаблонФайла.УсловияФильтра Цикл
				Если ЗначениеЗаполнено(ПолеШаблона.ПолеТаблицы) Тогда
					
					БазаДБФПоляШаблонов.Добавить();
					БазаДБФПоляШаблонов.COD = ШаблонФайла.Код;
					БазаДБФПоляШаблонов.NP = ПолеШаблона.НомерПоля;
					БазаДБФПоляШаблонов.UR = ПолеШаблона.УсловиеРавенства;
					БазаДБФПоляШаблонов.COMMENTR = ПолеШаблона.Комментарий;
					БазаДБФПоляШаблонов.ZN = СокрЛП(ПолеШаблона.ЗначениеПоля);
					Если ПолеШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.Пропустить Тогда
						БазаДБФПоляШаблонов.P = 1;
					ИначеЕсли ПолеШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриИмпорте Тогда
						БазаДБФПоляШаблонов.P = 2;
					ИначеЕсли ПолеШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриЭкспорте Тогда
						БазаДБФПоляШаблонов.P = 3;
					ИначеЕсли ПолеШаблона.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПринятьПустоеЗначение Тогда
						БазаДБФПоляШаблонов.P = 4;
					КонецЕсли;
					
					БазаДБФПоляШаблонов.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	БазаДБФПоляШаблонов.ЗакрытьФайл();
	
	ТекстыШаблона = Новый ЗаписьТекста(Лев(АдресФайла, стрдлина(АдресФайла) - 5) + "S.TXt");
	
	ТекстыШаблона.ЗаписатьСтроку("" + Константы.ВерсияПрограммы.Получить(), Символы.ПС);
	
	ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.Выбрать() ;
	Пока ШаблонФайла.Следующий() Цикл //УСЛОВИЕ ЗАПИСИ
		
		Если (ЗначениеЗаполнено(ВыбранШаблон) 
			И ШаблонФайла.Ссылка = ВыбранШаблон) 
			ИЛИ (НЕ ЗначениеЗаполнено(ВыбранШаблон) 
			И не ШаблонФайла.ПометкаУдаления 
			И не ШаблонФайла.Предопределенный) тогда
			
			ИмяТекущегоШаблона = ШаблонФайла.Наименование;
			
	ДобавитьТекстШаблона(ШаблонФайла.АдресФайла, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодПередНачалом, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончания, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ДобаватьТекстВПодвалФайла, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ДобавитьТекстВШапкуФайла, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ИспользоватьСтрокуЗаголовок, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.Комментарий, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.СоставлятьХарактеристикуПоВыражениюИзИменПолей, ТекстыШаблона, ИмяТекущегоШаблона);
	ДобавитьТекстШаблона(ШаблонФайла.ТекстПроизвольногоЗапроса, ТекстыШаблона, ИмяТекущегоШаблона);	
																								   КонецЕсли;	
																											 КонецЦикла;
	ТекстыШаблона.Закрыть();
	
КонецПроцедуры //ВыполнитьВыгрузкуШаблоновНаСервере

Процедура ДобавитьТекстШаблона(ТекстРеквизит, ТекстыШаблона, ИмяТекущегоШаблона)
	
	ТекстыШаблона.ЗаписатьСтроку(ИмяТекущегоШаблона, Символы.ПС);
	ТекстыШаблона.ЗаписатьСтроку("<BEGIN!>", Символы.ПС);
	ТекстыШаблона.ЗаписатьСтроку(ТекстРеквизит, Символы.ПС);
	ТекстыШаблона.ЗаписатьСтроку("<!END>", Символы.ПС);
	
КонецПроцедуры

//Основная функция загрузки данных ИЗ файла
Функция   ВыполнитьЗагрузкуИзФайла(СтруктураИмпортаЭкспорта) Экспорт
	
	Попытка 
		СтруктураФормыПрогресса = СтруктураИмпортаЭкспорта.СтруктураФормыПрогресса;
	Исключение 	
		СтруктураФормыПрогресса = Новый Структура;
	КонецПопытки;	
	
	ОбъектОперацииСсылка = СтруктураИмпортаЭкспорта.ОбъектОперации;
	ШаблонФайла = СтруктураИмпортаЭкспорта.ШаблонФайла; 
	АдресФайла = СтруктураИмпортаЭкспорта.АдресФайла;
	Если ЗначениеЗаполнено(ШаблонФайла.ИмяТаблицыШаблонаФайла) Тогда
		ИмяТаблицыШаблонаФайла = ШаблонФайла.ИмяТаблицыШаблонаФайла;
	Иначе
		ИмяТаблицыШаблонаФайла = СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла;
	КонецЕсли;
	
	ПериодДляДокументов = СтруктураИмпортаЭкспорта.ПериодДляДокументов;
	ДатаАктуальности = СтруктураИмпортаЭкспорта.ДатаАктуальности;
	ОбъектОперации = ОбъектОперацииСсылка;
	ЭтоДокументНеСправочник = Истина;
	ЗнакМеждуИменемПоляИЗначением = ШаблонФайла.ЗнакМеждуИменемПоляИЗначением;
	
	ПоказыватьПрогрессПроизводстваОбмена = ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена;
	
	Если НЕ ПериодДляДокументов = "" 
		И ПериодДляДокументов.ДатаНачала 	= '00010101000000' 
		И ПериодДляДокументов.ДатаОкончания = '00010101000000' Тогда
		
		ПериодДляДокументов = "";
		СтруктураИмпортаЭкспорта.ПериодДляДокументов = ПериодДляДокументов;
		
	КонецЕсли;
	
	ТипПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля ;
	
	Если не ШаблонФайла.ЗагружатьВсеФайлыИзПапки Тогда
		АдресФайла = МаскаИмениФайла(АдресФайла, ШаблонФайла.РазделительДаты, ДатаАктуальности, СтруктураИмпортаЭкспорта.ДополнительнаяИнформация);	
	КонецЕсли;
	
	ЭтоЗагрузкаСписка = Ложь;
	ЭтоТаблица = Ложь;
	ЭтоПредопределенныйШаблон = ШаблонФайла.Предопределенный;
	
	Если ШаблонФайла.ИспользоватьТолькоДляЭкспорта Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данный шаблон только для экспорта!");
		Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	Иначе
		ФайлПоАдресу = Новый Файл(АдресФайла);
		Если НЕ ФайлПоАдресу.Существует() 
			ИЛИ НЕ ФайлПоАдресу.ЭтоФайл() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл по адресу") + " " + АдресФайла + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" не существует ИЛИ недоступен!");
			Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТаблицыШаблонаФайла = "LISTofALL" Тогда //загрузка списка
		ЭтоЗагрузкаСписка = Истина;
		ИмяТаблицыШаблонаФайла = "";
		СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "";
		
	ИначеЕсли ЭтоПредопределенныйШаблон Тогда
		ОбъектОперации = ОбъектОперацииСсылка;
		
	ИначеЕсли НЕ ИмяТаблицыШаблонаФайла = "" Тогда
		Попытка 
			ОбъектОперации = ОбъектОперацииСсылка.ПолучитьОбъект();
		Исключение 	
			ОбъектОперации = ОбъектОперацииСсылка;
		КонецПопытки;
		ЭтоТаблица = Истина;
		
	Иначе
		Попытка 
			ОбъектОперации = ОбъектОперацииСсылка.ПолучитьОбъект();
		Исключение 	
			ОбъектОперации = ОбъектОперацииСсылка;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЭтотШаблонНеПодходитДляОбъекта(ШаблонФайла, ОбъектОперации, ИмяТаблицыШаблонаФайла) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Данный шаблон не подходит по реквизитам отбора!");
		Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Если ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента 
		ИЛИ ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести Тогда
		
		СписокОбъектов = Новый СписокЗначений;
		
	КонецЕсли;
	
	ШаблонФайлаВидШаблонаДляРегистровСведений = ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляРегистровСведений;
	ШаблонФайлаРазделительПолей = ШаблонФайла.РазделительПолей;
	ШаблонФайлаФорматФайлаDBF 	= ШаблонФайлаФорматФайлаDBF(ШаблонФайла);
	ШаблонФайлаФорматФайлаEXCEL = ШаблонФайлаФорматФайлаEXCEL(ШаблонФайла);
	ШаблонФайлаФорматФайлаТекст = ?(ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT, Истина, Ложь) ;
	ШаблонФайлаПропуститьЧислоСимволовСНачалаСтроки = ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки;
	ШаблонФайлаПропуститьЧислоСимволовВКонцеСтроки 	= ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки;
	
	ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить 	= ШаблонФайла.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить ;
	ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить 	= ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить + ?(ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей, 1, 0);
	ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить 	= ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить + ?( СокрЛП(ШаблонФайла.ИспользоватьСтрокуЗаголовок) = "", 0, 1);
	
	ШаблонФайлаОстанавливатьОбменПоОшибке = ШаблонФайла.ОстанавливатьОбменПоОшибке;
	
	Если ШаблонФайлаФорматФайлаDBF Тогда
		
		БазаДБФФайлИмпортаЭкспорта = Новый XBase;
		БазаДБФФайлИмпортаЭкспорта.Кодировка = ?(ШаблонФайла.КодировкаDOS, КодировкаXBase.OEM, КодировкаXBase.ANSI);
		БазаДБФФайлИмпортаЭкспорта.ОткрытьФайл(АдресФайла);
		КоличествоСтрокФайла = БазаДБФФайлИмпортаЭкспорта.КоличествоЗаписей();
		
	ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда		
		НомерПоляКотороеВсегдаЗаполнено = ШаблонФайла.НомерПоляКотороеВсегдаЗаполнено;
		
		попытка 
			ЭксельФайлИмпортаЭкспорта = Новый COMОбъект("Excel.Application"); 
			Книга = ЭксельФайлИмпортаЭкспорта.Application.Workbooks.Open(АдресФайла);
			ТекЛист = Книга.ActiveSheet; //.WorkSheets[ 0 ]; 
			КоличествоСтрокФайла = 1;
			ЗначениеЯчейки = "Ы";
			
			СчетчикПустыхСтрок = ШаблонФайла.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла;
			Пока КоличествоСтрокФайла < 29999 Цикл				
				ЗначениеЯчейки = СокрЛП(ТекЛист.Cells(ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить + КоличествоСтрокФайла, НомерПоляКотороеВсегдаЗаполнено).Value);
				КоличествоСтрокФайла = КоличествоСтрокФайла + 1;
				
				Если ЗначениеЯчейки = "" Тогда
					Если СчетчикПустыхСтрок = 0 Тогда
						Прервать;
					КонецЕсли;
					СчетчикПустыхСтрок = СчетчикПустыхСтрок - 1;
				КонецЕсли;
			КонецЦикла;
			
			КоличествоСтрокФайла = КоличествоСтрокФайла - 1;
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проблема создания объекта таблицы MS Excel:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектОперации);
			Сообщение.Сообщить();							
			
			Возврат Неопределено;
			
		КонецПопытки;
	Иначе
		ФайлИмпортаЭкспорта = Новый ТекстовыйДокумент;
		
		КодировкаФайла = СокрЛП(ШаблонФайла.КодировкаФайла);
		Если НЕ ЗначениеЗаполнено(КодировкаФайла) Тогда
			КодировкаФайла = "ANSI";
		КонецЕсли;
		
		ФайлИмпортаЭкспорта.Прочитать(АдресФайла, КодировкаТекста[ КодировкаФайла ]);
		КоличествоСтрокФайла = ФайлИмпортаЭкспорта.КоличествоСтрок();
	КонецЕсли;
	
	Если КоличествоСтрокФайла > 0 Тогда
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			
			БазаДБФФайлИмпортаЭкспорта.Первая();	
			СчетчикСтрок = 1;
			Пока СчетчикСтрок <= ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить Цикл
				Если НЕ БазаДБФФайлИмпортаЭкспорта.Следующая() Тогда 
					Прервать;
					
				Конецесли;
				СчетчикСтрок = СчетчикСтрок + 1; 	
			КонецЦикла;
		Иначе
			СчетчикСтрок = 1 + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;	
		КонецЕсли;	
		
		Если ЭтоТаблица Тогда 
			Попытка 
				ОбъектОперации[ ИмяТаблицыШаблонаФайла ].Очистить();	
			Исключение 	
				Сообщение  =  Новый СообщениеПользователю;
				Сообщение.Текст  =  ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка очистки таблицы:") + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецЕсли;
		
		МассивПромежуточныхДанных = Новый Массив;
		Для Каждого СледующееПолеВФайле ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл								
			МассивПромежуточныхДанных.Добавить(?(ЗначениеЗаполнено(СледующееПолеВФайле.ПолеТаблицы.ОпределенноеЗначение), СледующееПолеВФайле.ПолеТаблицы.ОпределенноеЗначение, "")) ;	
		КонецЦикла;
		
		ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки = ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки");
		
		Если не ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки = 0 
			И КоличествоСтрокФайла > ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки Тогда
			
			КоличествоСтрокФайла = ПодсистемаИЭИмпортЭкспортОграничитьЧислоСтрокЗагрузки;
			
		КонецЕсли;
		
		ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена = ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена ;
		
		Если ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена Тогда		
			СтруктураФормыПрогресса.Вставить("ЧислоОбъектовДляОбработки", КоличествоСтрокФайла + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить);
			ТаблицаОбработанныхОбъектов = Новый СписокЗначений;
		КонецЕсли;
		
		ШаблонФайлаИспользоватьЗаголовкиБлоковДанных = ШаблонФайла.ИспользоватьЗаголовкиБлоковДанных;
		ШаблонФайлаДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла = ШаблонФайла.ДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла;
		ШаблонФайлаФильтроватьНеподходящиеСимволы = ШаблонФайла.ФильтроватьНеподходящиеСимволы;
		ШаблонФайлаРазделителиВстречаютсяМеждуЗнаками = ШаблонФайла.РазделителиВстречаютсяМеждуЗнаками;
		ШаблонФайлаУсловиеЗаголовкаБлокаДанныхНаличиеПодстроки = ШаблонФайла.УсловиеЗаголовкаБлокаДанныхНаличиеПодстроки;
		ШаблонФайлаВыполнятьПрограммы = ШаблонФайла.ВыполнятьПрограммы;
		ШаблонФайлаДляОбновленияСуществующихОбъектов = ШаблонФайла.ДляОбновленияСуществующихОбъектов;
		ШаблонФайлаНеУчитыватьПоследнююСтрокуФайла = ШаблонФайла.НеУчитыватьПоследнююСтрокуФайла;
		
		ШаблонФайлаПредназначенДляОбменаДокументамиДС = ШаблонФайлаПредназначенДляОбменаДокументамиДС(ШаблонФайла);
		ШаблонФайлаУстанавливатьФлагОбменаЗагрузки = ШаблонФайла.УстанавливатьФлагОбменаЗагрузки;
		ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить = ШаблонФайла.ЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить;
		ШаблонФайлаДополнительноеЗаполнениеРеквизитовПриИмпорте = ШаблонФайла.ДополнительноеЗаполнениеРеквизитовПриИмпорте;
		ШаблонФайлаВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля = ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля;
		ШаблонФайлаВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки = ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки;
		ШаблонФайлаИспользоватьДополнительноеПоведение = ШаблонФайла.ИспользоватьДополнительноеПоведение;
		ШаблонФайлаКаждоеПолеНоваяСтрока = ШаблонФайла.КаждоеПолеНоваяСтрока;
		ШаблонФайлаВыполнитьПрограммныйКодПередНачалом = ШаблонФайла.ВыполнитьПрограммныйКодПередНачалом;
		
		ШаблонФайлаУсловиеЗаголовкаБлокаДанных = ШаблонФайла.УсловиеЗаголовкаБлокаДанных;
		ШаблонФайлаУсловиеЗаголовкаБлокаДанныхПоле = ШаблонФайла.УсловиеЗаголовкаБлокаДанныхПоле;
		ШаблонФайлаУсловиеЗаголовкаБлокаДанныхЗначение = ШаблонФайла.УсловиеЗаголовкаБлокаДанныхЗначение;
		
		ШаблонФайлаПоказыватьОбъектыОбмена = ШаблонФайла.ПоказыватьОбъектыОбмена;
		ШаблонФайлаОткрыватьФормуДокументовКоторыеНеУдалосьПровести = ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести;
		ШаблонФайлаПустыеСтрокиМеждуЗаписями = ШаблонФайла.ПустыеСтрокиМеждуЗаписями;
		ШаблонФайлаВсегдаСоздаватьНовыйЭлементИлиДокумент = ШаблонФайла.ВсегдаСоздаватьНовыйЭлементИлиДокумент;
		
		ШаблонФайлаИмяРегистра = ШаблонФайла.ИмяРегистра;
		ШаблонФайлаИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы = ШаблонФайла.ИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы;
		ШаблонФайлаДополнительноеЗаполнениеРеквизитов = ШаблонФайла.ДополнительноеЗаполнениеРеквизитов;
		ШаблонФайлаРазделительДаты = ШаблонФайла.РазделительДаты;
		
		ШаблонФайлаНеПропускатьНепроведенныеДокументы = ШаблонФайла.НеПропускатьНепроведенныеДокументы ;
		ШаблонФайлаПопытатьсяПроводитьДокументы = ШаблонФайла.ПопытатьсяПроводитьДокументы;
		ШаблонФайлаНеПропускатьОбъектыПомеченныеНаУдаление = ШаблонФайла.НеПропускатьОбъектыПомеченныеНаУдаление;
		ШаблонФайлаНоменклатурнаяГруппа = ШаблонФайла.НоменклатурнаяГруппа;
		ШаблонФайлаСпособСписания = ШаблонФайла.СпособСписания;
		ШаблонФайлаНаправлениеДеятельности = ШаблонФайла.НаправлениеДеятельности;
		ШаблонФайлаЕдиницаИзмеренияНоменклатуры = ШаблонФайла.ЕдиницаИзмеренияНоменклатуры;
		ШаблонФайлаСпособПополненияНоменклатуры = ШаблонФайла.СпособПополненияНоменклатуры;
		ШаблонФайлаСчетУчетаТоваров = ШаблонФайла.СчетУчетаТоваров;
		ШаблонФайлаСчетУчетаЗатрат = ШаблонФайла.СчетУчетаЗатрат;
		ШаблонФайлаТипНоменклатуры = ШаблонФайла.ТипНоменклатуры;
		ШаблонФайлаПроизводитель = ШаблонФайла.Производитель;
		ШаблонФайлаГруппаДляНовойНоменклатуры = ШаблонФайла.ГруппаДляНовойНоменклатуры;
		ШаблонФайлаУстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена = ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена;
		ШаблонФайлаУстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена = ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
		ШаблонФайлаСоставлятьНаименованиеПоВыражениюИзИменПолей = ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей;
		ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки = ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки;
		ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля = ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля;
		ШаблонФайлаСоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия;
		ШаблонФайлаОткрыватьФормуКаждогоЭлементаИлиДокумента = ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента;
		
		ШаблонФайлаПоследовательностьПолейВФайле =  ШаблонФайла.ПоследовательностьПолейВФайле.Выгрузить();		
		ШаблонФайлаПоследовательностьПолейВЗаголовкеБлокаДанных = ШаблонФайла.ПоследовательностьПолейВЗаголовкеБлокаДанных;
		ШаблонФайлаСоставлятьНаименованиеГруппыРодителяИзИменПолей = ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей;
		
		Если СтруктураИмпортаЭкспорта.ПредПодготовка Тогда
			
			СчетчикПустыхСтрок = 0;
			СчетчикСтрок = СчетчикСтрок - 1;
			
			Пока СчетчикСтрок < (КоличествоСтрокФайла + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить) Цикл
				
				Если (ШаблонФайлаНеУчитыватьПоследнююСтрокуФайла 
					ИЛИ ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить > 0)
					И (СчетчикСтрок + 1 + ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить) = (КоличествоСтрокФайла + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить) Тогда
					
					Прервать;
					
				КонецЕсли;	
				СчетчикСтрок = СчетчикСтрок + 1;
				
				Если ШаблонФайлаФорматФайлаDBF Тогда
					
					МассивДанныхСтрокиФайла = Новый массив;
					Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл								
						МассивДанныхСтрокиФайла.Добавить(БазаДБФФайлИмпортаЭкспорта[  СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле) ]) ;	
					КонецЦикла;
					
				ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
					
					МассивДанныхСтрокиФайла = Новый массив;
					
					Если СокрЛП(ТекЛист.Cells(СчетчикСтрок, НомерПоляКотороеВсегдаЗаполнено).Value) = "" ТОгда
						СчетчикПустыхСтрокВсего = ШаблонФайлаДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла;					
						Если СчетчикПустыхСтрокВсего > 0 И СчетчикПустыхСтрок <= СчетчикПустыхСтрокВсего Тогда
							СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
							
							продолжить;
							
						Иначе
							
							прервать;
						КонецЕсли;
					Иначе
						СчетчикПустыхСтрок = 0;
					КонецЕсли;
					
					Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл								
						МассивДанныхСтрокиФайла.Добавить(ТекЛист.Cells(СчетчикСтрок, СледующееПолеВФайле.НомерСтроки).Value) ;	
					КонецЦикла;
				Иначе
					
					ПолученнаяСтрока = ФайлИмпортаЭкспорта.ПолучитьСтроку(СчетчикСтрок);
					МассивДанныхСтрокиФайла = РазложитьСтрокуВМассивПодстрок(ПолученнаяСтрока, ШаблонФайла, ШаблонФайлаРазделителиВстречаютсяМеждуЗнаками, ШаблонФайлаПропуститьЧислоСимволовСНачалаСтроки, ШаблонФайлаПропуститьЧислоСимволовВКонцеСтроки);
				КонецЕсли;
				
				СчетчикМассива = 0;
				ДлинаМассива = МассивДанныхСтрокиФайла.Количество();
				Пока СчетчикМассива < ДлинаМассива Цикл
					Если ШаблонФайлаПоследовательностьПолейВФайле[ СчетчикМассива ].ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение Тогда
						
						ЭлементДанныхФайла = МассивДанныхСтрокиФайла[ СчетчикМассива ];
						Если ЗначениеЗаполнено(ЭлементДанныхФайла) 
							И НЕ (ШаблонФайлаФорматФайлаDBF И Сокрлп(ЭлементДанныхФайла) = "") Тогда
							
							МассивПромежуточныхДанных[ СчетчикМассива ] = ЭлементДанныхФайла;
						ИначеЕсли ЗначениеЗаполнено(МассивПромежуточныхДанных[ СчетчикМассива ]) Тогда
							МассивДанныхСтрокиФайла[ СчетчикМассива ] = МассивПромежуточныхДанных[ СчетчикМассива ];
						КонецЕсли;					
						
					КонецЕсли;
					
					СчетчикМассива = СчетчикМассива + 1;
				КонецЦикла;
				
				//ВыполнитьПредварительнуюПодготовкуПриЗагрузке(СтруктураИмпортаЭкспорта, МассивДанныхСтрокиФайла, ТаблицаОбработанныхОбъектов);
				
				Если ШаблонФайлаФорматФайлаDBF 
					И НЕ БазаДБФФайлИмпортаЭкспорта.Следующая() Тогда 
					
					Прервать;
					
				Конецесли;
				
			КонецЦикла;
			
			Если ШаблонФайлаФорматФайлаDBF Тогда //вернем в начало
				БазаДБФФайлИмпортаЭкспорта.Первая();	
				СчетчикСтрок = 1;
				Пока СчетчикСтрок <= ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить Цикл
					Если НЕ БазаДБФФайлИмпортаЭкспорта.Следующая() Тогда 
						Прервать;
					Конецесли;
					СчетчикСтрок = СчетчикСтрок + 1; 	
				КонецЦикла;
			Иначе
				СчетчикСтрок = 1 + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ШаблонФайлаВыполнятьПрограммы 
			И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодПередНачалом) Тогда
			
			Выполнить(ШаблонФайлаВыполнитьПрограммныйКодПередНачалом);
			
		КонецЕсли;
		
		ЗапДСТекст = "";		
		Если ЭтоЗагрузкаСписка ТОгда
			Если НЕ ШаблонФайлаПредназначенДляОбменаДокументамиДС 
				И НЕ ШаблонФайлаВидШаблонаДляРегистровСведений 
				И НЕ ОбъектОперацииСсылка = Неопределено Тогда
				
				МетаданныеОбъекта = ОбъектОперацииСсылка.Метаданные().Имя;
				
				Если Метаданные.Документы.Найти(МетаданныеОбъекта) = Неопределено Тогда
					ЭтоДокументНеСправочник = Ложь;
					
				КонецЕсли;
				
				//	Если ШаблонФайлаДляОбновленияСуществующихОбъектов Тогда
				
				Если ЭтоДокументНеСправочник Тогда
					МетаОбъект = "Документ";
				Иначе
					МетаОбъект = "Справочник";
				КонецЕсли;	
				ЗапДСТекст = "ВЫБРАТЬ ПЕРВЫЕ 1 " + МетаданныеОбъекта + ".Ссылка ИЗ " + МетаОбъект + "." + МетаданныеОбъекта + " КАК " + МетаданныеОбъекта + " ";
				
				//	Конецесли;
			Иначе
				МетаданныеОбъекта = "";
				ЗапДСТекст = "";
			КонецЕсли;
			
			ЗапДС = Новый Запрос;
			
		КонецЕсли;
		
		//расширяем таблицу перечня полей обрабатываемых данных за счет полей заголовка блока данных
		Если ЗначениеЗаполнено(ШаблонФайлаИспользоватьЗаголовкиБлоковДанных) Тогда
			СледующийНомерСтроки = ШаблонФайлаПоследовательностьПолейВФайле.Количество() + 1;
			
			Для Каждого ЭлементЗаголовкаБлокаДанных ИЗ ШаблонФайлаПоследовательностьПолейВЗаголовкеБлокаДанных Цикл
				Если ЗначениеЗаполнено(ЭлементЗаголовкаБлокаДанных.ПолеТаблицы) Тогда
					//И не ЭлементЗаголовкаБлокаДанных.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле Тогда
					СтрокаДанных = ШаблонФайлаПоследовательностьПолейВФайле.Добавить(); 
					СтрокаДанных.КомментарийПоля = ЭлементЗаголовкаБлокаДанных.КомментарийПоля;
					СтрокаДанных.ПолеТаблицы = ЭлементЗаголовкаБлокаДанных.ПолеТаблицы;
					СтрокаДанных.ИмяПоляВФайле = ЭлементЗаголовкаБлокаДанных.ИмяПоляВФайле;
					СтрокаДанных.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ЭлементЗаголовкаБлокаДанных.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение;
					СтрокаДанных.ДанноеПолеКлючевоеДляПоискаИЗаписи = ЭлементЗаголовкаБлокаДанных.ДанноеПолеКлючевоеДляПоискаИЗаписи;
					СтрокаДанных.НомерСтроки = СледующийНомерСтроки;
					
					СледующийНомерСтроки = СледующийНомерСтроки + 1;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		МассивДанныхИзЗаголовка = Новый Массив;
		
		ОтказВЗаписи = Ложь;
		СчетчикСтрок = СчетчикСтрок - 1;
		ТекстЗапросаУжеСформирован = Ложь;
		
		Пока СчетчикСтрок < (КоличествоСтрокФайла + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить) Цикл
			
			Если (ШаблонФайлаНеУчитыватьПоследнююСтрокуФайла 
				ИЛИ ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить > 0)
				И (СчетчикСтрок + 1 + ШаблонФайлаЧислоСтрокСКонцаФайлаКоторыеСледуетПропустить) = (КоличествоСтрокФайла + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить) Тогда
				
				Прервать;
				
			КонецЕсли;
			
			СчетчикСтрок = СчетчикСтрок + 1;
			
			Если ШаблонФайлаФорматФайлаDBF Тогда
				
				МассивДанныхСтрокиФайла = Новый массив;
				Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл								
					ЗначениеПоляЗаписиБД = БазаДБФФайлИмпортаЭкспорта[ СокрЛП(СледующееПолеВФайле.ИмяПоляВФайле) ];
					Если ШаблонФайлаФильтроватьНеподходящиеСимволы 
						И СледующееПолеВФайле.ПолеТаблицы.ТипТут = "S" Тогда
						
						ЗначениеПоляЗаписиБД = УбратьНеподходящиеСимволы(ЗначениеПоляЗаписиБД);
						
					КонецЕсли;
					МассивДанныхСтрокиФайла.Добавить(ЗначениеПоляЗаписиБД) ;	
				КонецЦикла;
				
			ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
				
				МассивДанныхСтрокиФайла = Новый Массив;
				
				Если СокрЛП(ТекЛист.Cells(СчетчикСтрок, НомерПоляКотороеВсегдаЗаполнено).Value) = "" ТОгда
					СчетчикПустыхСтрокВсего = ШаблонФайлаДопустимоеЧислоПустыхСтрокПриПоискеКонцаФайла;					
					
					Если СчетчикПустыхСтрокВсего > 0 
						И СчетчикПустыхСтрок <= СчетчикПустыхСтрокВсего Тогда
						
						СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
						
						Продолжить;
					Иначе
						
						Прервать;
					КонецЕсли;
				Иначе
					СчетчикПустыхСтрок = 0;
				КонецЕсли;
				
				Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
					ЗначениеПоляЗаписиБД = ТекЛист.Cells(СчетчикСтрок, СледующееПолеВФайле.НомерСтроки).Value;
					Если ШаблонФайлаФильтроватьНеподходящиеСимволы И СледующееПолеВФайле.ПолеТаблицы.ТипТут = "S" Тогда
						ЗначениеПоляЗаписиБД = УбратьНеподходящиеСимволы(ЗначениеПоляЗаписиБД);
					КонецЕсли;
					МассивДанныхСтрокиФайла.Добавить(ЗначениеПоляЗаписиБД) ;	
				КонецЦикла;
				
			Иначе
				Если ШаблонФайлаКаждоеПолеНоваяСтрока Тогда
					МассивДанныхСтрокиФайла = Новый массив;
					
					Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
						ПолученнаяСтрока = ФайлИмпортаЭкспорта.ПолучитьСтроку(СчетчикСтрок);
						Если ЗначениеЗаполнено(ЗнакМеждуИменемПоляИЗначением) Тогда
							ПозицияЗаРазделителем = Найти(ПолученнаяСтрока, ЗнакМеждуИменемПоляИЗначением) + СтрДлина(ЗнакМеждуИменемПоляИЗначением);
							ПолученнаяСтрока = Прав(ПолученнаяСтрока, СтрДлина(ПолученнаяСтрока) - ПозицияЗаРазделителем);
						КонецЕсли;
						Если ШаблонФайлаФильтроватьНеподходящиеСимволы Тогда
							ПолученнаяСтрока = УбратьНеподходящиеСимволы(ПолученнаяСтрока);
						КонецЕсли;
						МассивДанныхСтрокиФайла.Добавить(ПолученнаяСтрока);					
						СчетчикСтрок = СчетчикСтрок + 1;
					КонецЦикла;
					
					Если ШаблонФайлаПустыеСтрокиМеждуЗаписями Тогда
						СчетчикСтрок = СчетчикСтрок + 1;
					КонецЕсли;
					
				Иначе					
					
					ПолученнаяСтрока = ФайлИмпортаЭкспорта.ПолучитьСтроку(СчетчикСтрок);
					Если ШаблонФайлаФильтроватьНеподходящиеСимволы Тогда
						ПолученнаяСтрока = УбратьНеподходящиеСимволы(ПолученнаяСтрока);
					КонецЕсли;
					МассивДанныхСтрокиФайла = РазложитьСтрокуВМассивПодстрок(ПолученнаяСтрока, ШаблонФайла, ШаблонФайлаРазделителиВстречаютсяМеждуЗнаками, ШаблонФайлаПропуститьЧислоСимволовСНачалаСтроки, ШаблонФайлаПропуститьЧислоСимволовВКонцеСтроки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ШаблонФайлаИспользоватьЗаголовкиБлоковДанных Тогда
				ЭтоЗаголовокБлокаДанных = Ложь;
				Если ЗначениеЗаполнено(ШаблонФайлаУсловиеЗаголовкаБлокаДанныхПоле) Тогда
					
					ЭтоЗаголовокБлокаДанных = ВыполненоЛиУсловиеФильтра(ШаблонФайлаУсловиеЗаголовкаБлокаДанных,
					ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ШаблонФайлаУсловиеЗаголовкаБлокаДанныхПоле),
					ШаблонФайлаУсловиеЗаголовкаБлокаДанныхЗначение);
					
				ИначеЕсли НЕ ШаблонФайлаУсловиеЗаголовкаБлокаДанныхНаличиеПодстроки = "" Тогда //ищем подстроку, надеемся что шаблон заполнен адекватно
					Если ШаблонФайлаФорматФайлаТекст Тогда
						Если НЕ Найти(ПолученнаяСтрока, ШаблонФайлаУсловиеЗаголовкаБлокаДанныхНаличиеПодстроки) = 0 Тогда
							ЭтоЗаголовокБлокаДанных = Истина;
						КонецЕсли;
						
					Иначе
						ДлинаМассива = МассивДанныхСтрокиФайла.Количество();
						СчетчикПоМассиву = 0;
						Пока СчетчикПоМассиву < ДлинаМассива Цикл
							Если НЕ Найти(Строка(МассивДанныхСтрокиФайла[ СчетчикПоМассиву ]), ШаблонФайлаУсловиеЗаголовкаБлокаДанныхНаличиеПодстроки) = 0 Тогда
								ЭтоЗаголовокБлокаДанных = Истина;
								Прервать;
								
							КонецЕсли;
							СчетчикПоМассиву = СчетчикПоМассиву + 1;
						КонецЦикла;
						
					КонецЕсли; 	
				КонецЕсли;
				Если ЭтоЗаголовокБлокаДанных Тогда
					МассивДанныхИзЗаголовка = МассивДанныхСтрокиФайла;
					
					Продолжить; //заголовок принят
				Иначе //Это не заголовок - добавляем к данным информацию ИЗ заголовка
					СчетчикПоМассиву = 0;
					Для Каждого ЭлементЗаголовка ИЗ МассивДанныхИзЗаголовка Цикл
						МассивДанныхСтрокиФайла.Добавить(МассивДанныхИзЗаголовка[ СчетчикПоМассиву ]);
						СчетчикПоМассиву = СчетчикПоМассиву + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;			
			
			СчетчикМассива = 0;
			ДлинаМассива = МассивДанныхСтрокиФайла.Количество();
			пока СчетчикМассива < ДлинаМассива Цикл
				Если ШаблонФайлаПоследовательностьПолейВФайле[ СчетчикМассива ].ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение тогда
					
					ЭлементДанныхФайла = МассивДанныхСтрокиФайла[ СчетчикМассива ];
					Если ЗначениеЗаполнено(ЭлементДанныхФайла) И НЕ (ШаблонФайлаФорматФайлаDBF И Сокрлп(ЭлементДанныхФайла) = "") Тогда
						МассивПромежуточныхДанных[ СчетчикМассива ] = ЭлементДанныхФайла;
					ИначеЕсли ЗначениеЗаполнено(МассивПромежуточныхДанных[ СчетчикМассива ]) Тогда
						МассивДанныхСтрокиФайла[ СчетчикМассива ] = МассивПромежуточныхДанных[ СчетчикМассива ];
					КонецЕсли;					
					
				КонецЕсли;
				
				СчетчикМассива = СчетчикМассива + 1;
			КонецЦикла;
			
			ОтказВЗаписи = Ложь;
			
			Если ЭтоТаблица Тогда
				СтрокаТаблицыИлиЭлемент = ОбъектОперации[ ИмяТаблицыШаблонаФайла ].Добавить();
				
			ИначеЕсли ЭтоЗагрузкаСписка ТОгда
				Если ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
					
					ОбъектОперации = РегистрыСведений[ ШаблонФайлаИмяРегистра ].СоздатьМенеджерЗаписи();
					ОбъектОперации.Активность = Истина;
					
					Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
						ОбъектОперации.Период = ДатаАктуальности;				
					ИначеЕсли НЕ ПериодДляДокументов = "" Тогда
						ОбъектОперации.Период = ПериодДляДокументов.ДатаНачала;
					КонецЕсли;
					
				Иначе
					Если НЕ ЭтоДокументНеСправочник Тогда
						
						ОбъектОперации = Справочники[ МетаданныеОбъекта ].СоздатьЭлемент();// Новый(Тип("СправочникОбъект."+ОбъектОперацииСсылка.Метаданные().Имя));
						
						Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
							ОбъектОперации.НоменклатурнаяГруппа = ШаблонФайлаНоменклатурнаяГруппа;
							//ОбъектОперации.МетодОценки 		= ШаблонФайлаСпособСписания;	
							//ОбъектОперации.НаправлениеДеятельности = ШаблонФайлаНаправлениеДеятельности;
							//ОбъектОперации.ЕдиницаИзмерения 	= ШаблонФайлаЕдиницаИзмеренияНоменклатуры;
							//ОбъектОперации.СпособПополнения 	= ШаблонФайлаСпособПополненияНоменклатуры;
							//ОбъектОперации.СчетУчетаТоваров 	= ШаблонФайлаСчетУчетаТоваров;
							//ОбъектОперации.СчетУчетаЗатрат 	= ШаблонФайлаСчетУчетаЗатрат;
							//ОбъектОперации.ТипНоменклатуры 	= ШаблонФайлаТипНоменклатуры;
							//Попытка 
							//	ОбъектОперации.Производитель = ШаблонФайлаПроизводитель;
							//Исключение 	
							//КонецПопытки;
							//
							ОбъектОперации.Родитель = ШаблонФайлаГруппаДляНовойНоменклатуры;
							
						КонецЕсли;
						
					Иначе
						ЭтоДокументНеСправочник = Истина;
						//МетаданныеОбъекта = ?(ШаблонФайлаПредназначенДляОбменаДокументамиДС, ВыяснитьТипПлатежногоДокумента(ШаблонФайла, МассивДанныхСтрокиФайла), МетаданныеОбъекта);
						
						Если ШаблонФайлаПредназначенДляОбменаДокументамиДС Тогда
							МетаданныеОбъекта = "ДвиженияДенег";
						КонецЕсли;
						
						Если МетаданныеОбъекта = "" Тогда
							//не подходящий документ
							ОтказВЗаписи = Истина;
						Иначе
							ОбъектОперации = Документы[ МетаданныеОбъекта ].СоздатьДокумент();
							
							Если ШаблонФайлаПредназначенДляОбменаДокументамиДС Тогда
								Дебет = ВыяснитьТипПлатежногоДокумента(ШаблонФайла, МассивДанныхСтрокиФайла);
								Если НЕ Дебет Тогда
									ОбъектОперации.ПриходДенег = Истина;
								КонецЕсли;
							КонецЕсли;
							
							Попытка 
								Если ШаблонФайлаУстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
									ОбъектОперации.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
								ИначеЕсли ЗначениеЗаполнено(ШаблонФайлаУстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
									ОбъектОперации.Дата = ШаблонФайлаУстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
								КонецЕсли;
							Исключение 	
							КонецПопытки;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтрокаТаблицыИлиЭлемент = Неопределено;
				
			Иначе
				СтрокаТаблицыИлиЭлемент = Неопределено;
				
			КонецЕсли;			
			
			Если НЕ ОтказВЗаписи Тогда
				
				Если ЭтоЗагрузкаСписка 
					И НЕ ШаблонФайлаВсегдаСоздаватьНовыйЭлементИлиДокумент
					И НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
					
					НайденыПоляСинхронизации = Ложь;
					
					Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
						
						Если СледующееПолеВФайле.ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
							НаименованиеКлючевогоПоля = СокрЛП(СледующееПолеВФайле.ПолеТаблицы.Наименование);
							
							Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, НаименованиеКлючевогоПоля, ИмяТаблицыШаблонаФайла) = "" Тогда
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + "." + НаименованиеКлючевогоПоля + " = &" + НаименованиеКлючевогоПоля + " ";
									НайденыПоляСинхронизации = Истина;	
								КонецЕсли;
								ЗапДС.УстановитьПараметр(НаименованиеКлючевогоПоля, ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, НаименованиеКлючевогоПоля));								
								
							ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.АртикулНоменклатуры тогда
								//								ИЛИ СледующееПолеВФайле.ПолеТаблицы = ТипПоля.АртикулНоменклатурыСвойПотомУКлиента Тогда
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
										ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Артикул = &Артикул ";
									Иначе
										ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Номенклатура.Артикул = &Артикул ";	
									КонецЕсли;
									НайденыПоляСинхронизации = Истина;	
								КонецЕсли;
								Артикул = СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы));;
								ЗапДС.УстановитьПараметр("Артикул", Артикул);	
								Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
									ОбъектОперации.Артикул = Артикул;	
								КонецЕсли;
								
							ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ОКПОКлиента 
								ИЛИ СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ОКПОКлиента Тогда
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Клиент.ОКПО = &ОКПОК ";
									НайденыПоляСинхронизации = Истина;	
								КонецЕсли;
								ЗапДС.УстановитьПараметр("ОКПОК", СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы)));
								
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ИННКлиента Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Клиент.ИНН = &ИННК ";	
								//		НайденыПоляСинхронизации = Истина;
								//	КонецЕсли;
								//	ЗапДС.УстановитьПараметр("ИННК", СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы)));
								//	
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ОКПООрганизации Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Организация.ОКПО = &ОКПОО ";
								//		НайденыПоляСинхронизации = Истина;	
								//	КонецЕсли;
								//	ЗапДС.УстановитьПараметр("ОКПОО", СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы)));
								//	
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ИННОрганизации Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Организация.ИНН = &ИННО ";
								//		НайденыПоляСинхронизации = Истина;	
								//	КонецЕсли;
								//	ЗапДС.УстановитьПараметр("ИННО", СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы)));
								//	
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ДополнительныйКодНоменклатуры Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
								//			ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".ПодсистемаИЭДополнительныйКод.Наименование = &ПодсистемаИЭДополнительныйКод ";
								//		Иначе
								//			ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Номенклатура.ПодсистемаИЭДополнительныйКод.Наименование = &ПодсистемаИЭДополнительныйКод ";	
								//		КонецЕсли;
								//		НайденыПоляСинхронизации = Истина;	
								//	КонецЕсли;
								//	ЗапДС.УстановитьПараметр("ПодсистемаИЭДополнительныйКод", СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы)));
								//	
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.ДополнительныйШифрНоменклатуры Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		НайденыПоляСинхронизации = Истина;
								//		Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
								//			ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".ПодсистемаИЭДополнительныйШифр = &ПодсистемаИЭДополнительныйШифр ";	
								//		Иначе
								//			ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Номенклатура.ПодсистемаИЭДополнительныйШифр = &ПодсистемаИЭДополнительныйШифр ";	
								//		КонецЕсли;
								//	КонецЕсли;
								//	ПодсистемаИЭДополнительныйШифр = СокрЛП(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы));
								//	ЗапДС.УстановитьПараметр("ПодсистемаИЭДополнительныйШифр", ПодсистемаИЭДополнительныйШифр);
								//	Если ТипЗнч(ОбъектОперации) = Тип("СправочникОбъект.Номенклатура") Тогда
								//		ОбъектОперации.ПодсистемаИЭДополнительныйШифр = ПодсистемаИЭДополнительныйШифр;             	
								//	КонецЕсли;
								//	
							ИначеЕсли Лев(НаименованиеКлючевогоПоля, 3) = "ИНН" 
								И ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, НаименованиеКлючевогоПоля, ИмяТаблицыШаблонаФайла) = "" Тогда
								//ИНН Физ лица
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".SZ" + НаименованиеКлючевогоПоля + " = &" + НаименованиеКлючевогоПоля + " ";
									НайденыПоляСинхронизации = Истина;	
								КонецЕсли;
								ПодсистемаИЭИНН = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, НаименованиеКлючевогоПоля);
								ЗапДС.УстановитьПараметр(НаименованиеКлючевогоПоля, ПодсистемаИЭИНН);	
								ОбъектОперации.ПодсистемаИЭИНН = ПодсистемаИЭИНН;
								
							ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.СуммаПлатежа 
								ИЛИ СледующееПолеВФайле.ПолеТаблицы = ТипПоля.СуммаПлатежаВалютная Тогда
								
								Попытка
									СуммаДокумента = Число(ПривестиИзЧисла(ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы), ШаблонФайла));
									Если НЕ ТекстЗапросаУжеСформирован Тогда
										НайденыПоляСинхронизации = Истина;	
										ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".СуммаДокумента = &СуммаДокумента ";
									КонецЕсли;
									
									ЗапДС.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
									
								Исключение  									
								КонецПопытки;
								
								//ИначеЕсли СледующееПолеВФайле.ПолеТаблицы = ТипПоля.НомерСчетаОрганизации Тогда
								//	Если НЕ ТекстЗапросаУжеСформирован Тогда
								//		ЗапДСТекст = ЗапДСТекст + ?(НайденыПоляСинхронизации, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".БанковскийСчет.НомерСчета = &НомерСчетаОрганизации ";
								//		НайденыПоляСинхронизации = Истина;	
								//	КонецЕсли;
								//	ЗапДС.УстановитьПараметр("НомерСчетаОрганизации", ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СледующееПолеВФайле.ПолеТаблицы));								
								//	
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ТекстЗапросаУжеСформирован Тогда
						ЗапДС.Текст = ЗапДСТекст;
						
						НайденыПоляСинхронизацииВЦикле = НайденыПоляСинхронизации;	
					КонецЕсли;
					
					Если не ШаблонФайлаИспользоватьВКачествеКлючевыхТолькоПоляИзТаблицы Тогда
						Если ЭтоДокументНеСправочник Тогда
							ДатаДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ДатаДокумента);
							Если ДатаДок = Неопределено Тогда
								ДатаДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, "Дата");
							КонецЕсли;
							
							Если ДатаДок = Неопределено 
								И ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
								ДатаВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ДатаПлатежа);
								Если ДатаВхДок = Неопределено Тогда
									ДатаВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ДатаВходящегоДокумента);
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДатаДок) Тогда
								ОбъектОперации.Дата = ПроверитьДатаЛи(ДатаДок, ШаблонФайлаРазделительДаты) ;
								
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Дата = &Дата ";
									НайденыПоляСинхронизацииВЦикле = Истина; 	
								КонецЕсли;
								ЗапДС.УстановитьПараметр("Дата", ОбъектОперации.Дата);								
								
							КонецЕсли;	
							
							
							Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
								ДатаВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ДатаПлатежа);
								Если ДатаВхДок = Неопределено Тогда
									ДатаВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ДатаВходящегоДокумента);
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ДатаВхДок) Тогда
									ОбъектОперации.ДатаВходящегоДокумента = ПроверитьДатаЛи(ДатаВхДок, ШаблонФайлаРазделительДаты) ;
									
									Если НЕ ТекстЗапросаУжеСформирован Тогда
										ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".ДатаВходящегоДокумента = &ДатаВходящегоДокумента ";
										НайденыПоляСинхронизацииВЦикле = Истина;	
									КонецЕсли;
									ЗапДС.УстановитьПараметр("ДатаВходящегоДокумента", ОбъектОперации.ДатаВходящегоДокумента);	
									
									
								КонецЕсли;	
							КонецЕсли;
							
							Если НЕ ПериодДляДокументов = "" Тогда
								Если ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала) Тогда
									Если НЕ ТекстЗапросаУжеСформирован Тогда
										ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Дата >= &ДатаНачала ";
										НайденыПоляСинхронизацииВЦикле = Истина;	
									КонецЕсли;
									ЗапДС.УстановитьПараметр("ДатаНачала", ПериодДляДокументов.ДатаНачала);										
									
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) Тогда
									Если НЕ ТекстЗапросаУжеСформирован Тогда
										ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Дата <= &ДатаОкончания ";
										НайденыПоляСинхронизацииВЦикле = Истина;	
									КонецЕсли;
									ЗапДС.УстановитьПараметр("ДатаОкончания", ПериодДляДокументов.ДатаОкончания);										
									
								КонецЕсли;
							КонецЕсли;
							
							НомерДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НомерДокумента);
							Если НомерДок = Неопределено Тогда
								НомерДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, "Номер");
							КонецЕсли;
							//Если НомерДок = Неопределено 
							//	И ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "НомерВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
							//	НомерДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НомерПлатежногоДокумента);
							//	Если НомерДок = Неопределено Тогда
							//		НомерДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НомерВходящегоДокумента);
							//	КонецЕсли;
							//КонецЕсли;
							
							Если ЗначениеЗаполнено(НомерДок) Тогда
								ОбъектОперации.Номер = НомерДок;
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Номер = &Номер ";
									НайденыПоляСинхронизацииВЦикле = Истина;	
								КонецЕсли;
								ЗапДС.УстановитьПараметр("Номер", ОбъектОперации.Номер);	
								
							КонецЕсли;
							
							//Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "НомерВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
							//	НомерВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НомерПлатежногоДокумента);
							//	Если НомерВхДок = Неопределено Тогда
							//		НомерВхДок = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НомерВходящегоДокумента);
							//	КонецЕсли;
							//	Если ЗначениеЗаполнено(НомерВхДок) Тогда
							//		ОбъектОперации.НомерВходящегоДокумента = НомерВхДок;
							//		
							//		Если НЕ ТекстЗапросаУжеСформирован Тогда
							//			ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".НомерВходящегоДокумента = &НомерВходящегоДокумента ";
							//			НайденыПоляСинхронизацииВЦикле = Истина;	
							//		КонецЕсли;
							//		ЗапДС.УстановитьПараметр("НомерВходящегоДокумента", ОбъектОперации.НомерВходящегоДокумента);	
							//		
							//	КонецЕсли;	
							//КонецЕсли;
							
							Если НайденыПоляСинхронизацииВЦикле 
								И ШаблонФайлаНеПропускатьНепроведенныеДокументы 
								и НЕ ТекстЗапросаУжеСформирован Тогда
								
								ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Проведен = Истина "  ;
								НайденыПоляСинхронизацииВЦикле = Истина;
							КонецЕсли;
							
						Иначе								
							
							Если НЕ ТекстЗапросаУжеСформирован Тогда
								ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".ЭтоГруппа = Ложь ";   //!!!
								НайденыПоляСинхронизацииВЦикле = Истина;
							КонецЕсли;
							
							КодСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.КодВладельцаКарточки);
							Если КодСпр = Неопределено Тогда
								КодСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.КодОбъекта);
							КонецЕсли;
							Если КодСпр = Неопределено Тогда
								КодСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, "Код");
							КонецЕсли;
							
							Если ТипЗнч(Кодспр) = Тип("Строка") Тогда
								КодСпр = СокрЛП(КодСпр);								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(КодСпр) Тогда
								ОбъектОперации.Код = КодСпр;
								Если НЕ ТекстЗапросаУжеСформирован Тогда
									ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Код = &Код "  ;
									НайденыПоляСинхронизацииВЦикле = Истина;
								КонецЕсли;
								ЗапДС.УстановитьПараметр("Код", ОбъектОперации.Код);
								
							Иначе
								НаименованиеСпр = "";
								Если ЗначениеЗаполнено(ШаблонФайлаСоставлятьНаименованиеПоВыражениюИзИменПолей) Тогда
									НаименованиеСпр = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла); 
								КонецЕсли;
								
								Если НаименованиеСпр = "" Тогда
									НаименованиеСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.НаименованиеОбъекта);
									Если НаименованиеСпр = Неопределено Тогда
										НаименованиеСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, МетаданныеОбъекта); //по имени справочника
									КонецЕсли;
									
									Если НаименованиеСпр = Неопределено Тогда
										НаименованиеСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, "Наименование");
									КонецЕсли;
									Если НаименованиеСпр = Неопределено Тогда
										НаименованиеСпр = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, "Имя");
									КонецЕсли;	
								КонецЕсли;
								
								Если ЗначениеЗаполнено(НаименованиеСпр) Тогда
									ОбъектОперации.Наименование = НаименованиеСпр;
									Если НЕ ТекстЗапросаУжеСформирован Тогда
										ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".Наименование = &Наименование ";
										НайденыПоляСинхронизацииВЦикле = Истина;
									КонецЕсли;
									
									ЗапДС.УстановитьПараметр("Наименование", ОбъектОперации.Наименование);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если НайденыПоляСинхронизацииВЦикле Тогда
						Если НЕ ШаблонФайлаНеПропускатьОбъектыПомеченныеНаУдаление 
							И НЕ ТекстЗапросаУжеСформирован Тогда
							
							ЗапДС.Текст = ЗапДС.Текст + ?(НайденыПоляСинхронизацииВЦикле, " И ", " ГДЕ") + " " + МетаданныеОбъекта + ".ПометкаУдаления = Ложь "  ;
							НайденыПоляСинхронизацииВЦикле = Истина;	
						КонецЕсли;
						
						Если не ТекстЗапросаУжеСформирован Тогда							
							ТекстЗапросаУжеСформирован = Истина;							
						КонецЕсли;
						
						ВзДС = ЗапДС.Выполнить();
						Если Не ВзДС.Пустой() Тогда
							РезДС = ВзДС.Выбрать();
							РезДС.Следующий();
							НайденныйОбъектОперации = РезДС.Ссылка.получитьОбъект();
							Для Каждого РеквизитОбъекта ИЗ ОбъектОперации.Метаданные().Реквизиты Цикл
								Если НЕ ЗначениеЗаполнено(НайденныйОбъектОперации[ РеквизитОбъекта.Имя ]) Тогда
									НайденныйОбъектОперации[ РеквизитОбъекта.Имя ] = ОбъектОперации[ РеквизитОбъекта.Имя ];
								КонецЕсли;
							КонецЦикла;
							
							Если ШаблонФайлаДляОбновленияСуществующихОбъектов Тогда
								ОбъектОперации = НайденныйОбъектОперации;
							Иначе
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = "Пропущен " + НайденныйОбъектОперации;
								Сообщение.Сообщить();
								
								//элемент есть - пропускаем
								продолжить;
								
							КонецЕсли;
							
						Иначе 	//запрос пуст!
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;
				
				Если ШаблонФайлаВыполнятьПрограммы 
					И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки) Тогда
					
					Выполнить(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиСтроки);		
					
				КонецЕсли;
				
				
				Для Каждого СледующееПолеВФайле ИЗ ШаблонФайлаПоследовательностьПолейВФайле Цикл
					
					Если ШаблонФайлаВыполнятьПрограммы 
						И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля) Тогда
						
						Выполнить(ШаблонФайлаВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля);		
						
					КонецЕсли;
					
					ИмяПоляВФайлеИзТаблицы = СокрЛП(СледующееПолеВФайле.ПолеТаблицы.Наименование);
					СубРеквизит = Найти(ИмяПоляВФайлеИзТаблицы, ".");
					СубПоле = "";
					
					Если СубРеквизит > 0 Тогда
						ИмяПоляВФайлеИзТаблицы = Лев(ИмяПоляВФайлеИзТаблицы, СубРеквизит - 1);
						СубПоле = Прав(ИмяПоляВФайлеИзТаблицы, СтрДлина(ИмяПоляВФайлеИзТаблицы) - СубРеквизит);
					КонецЕсли;
					
					попытка
						ДанныеДляАнализа = МассивДанныхСтрокиФайла[ СледующееПолеВФайле.НомерСтроки - 1 ];
						
						ЗначениеДанных = ОбнаружитьДанныеПоВидуПоляИзСтроки(ОбъектОперации, 					
						ДанныеДляАнализа, 					
						СледующееПолеВФайле.ПолеТаблицы, 
						СтрокаТаблицыИлиЭлемент, 
						ШаблонФайла, 
						МассивДанныхСтрокиФайла, 
						СледующееПолеВФайле.ДанноеПолеКлючевоеДляПоискаИЗаписи, 
						ПериодДляДокументов,
						СубРеквизит,
						ИмяПоляВФайлеИзТаблицы,
						СубПоле,
						ИмяТаблицыШаблонаФайла,
						СледующееПолеВФайле.ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение,
						СледующееПолеВФайле.НомерСтроки,
						ЭтоЗагрузкаСписка,
						СтруктураИмпортаЭкспорта,
						ТаблицаОбработанныхОбъектов,
						ШаблонФайлаВидШаблонаДляРегистровСведений
						);
						
						ЗначениеДанных = ВыполнитьПроверкуПоУсловиямФильтра(ЗначениеДанных, СледующееПолеВФайле.НомерСтроки, ШаблонФайла, Истина); //может быть проверка на незаполненность. поэтому неопределено подходит
						
						если не ЗначениеДанных = Неопределено тогда						
							Если ЗначениеДанных = "ОТКАЗвЗАПИСИтут" тогда
								ОтказВЗаписи = Истина;
								
							Иначе
								Если ШаблонФайлаВидШаблонаДляРегистровСведений
									ИЛИ НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, ИмяПоляВФайлеИзТаблицы, ИмяТаблицыШаблонаФайла) = "" Тогда
									
									Если СледующееПолеВФайле.ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы 
										ИЛИ ЭтоЗагрузкаСписка Тогда						
										
										ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ] = ЗначениеДанных;	
										
									Иначе
										СтрокаТаблицыИлиЭлемент[ ИмяПоляВФайлеИзТаблицы ] = ЗначениеДанных;
									КонецЕсли;
								Иначе
									
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реквизит не обнаружен:") + " " + ИмяПоляВФайлеИзТаблицы + ", Значение потеряно: " + ЗначениеДанных;
									Сообщение.Сообщить();
									
								КонецЕсли;						
							КонецЕсли;						
						КонецЕсли;
					исключение 	//неверное число колонок?
					КонецПопытки;
				КонецЦикла;
				
				Если НЕ ОтказВЗаписи ТОгда
					Если СтруктураИмпортаЭкспорта.ДополнительныйПараметр = "ПакетНабораИсточников" Тогда
						КвоДопТаблиц = СтруктураИмпортаЭкспорта.ЧислоДопТаблиц;
						СчетчикДопТаблиц = 0;
						
						СтруктураДопТаблиц = СтруктураИмпортаЭкспорта.СтруктураДопТаблиц;
						МассивШаблонТаблицы = СтруктураДопТаблиц.ШаблонТаблицы;
						МассивИмяТаблицыШаблонаФайла = СтруктураДопТаблиц.ИмяТаблицыШаблонаФайла;
						МассивАдресФайла = СтруктураДопТаблиц.АдресФайла;
						Пока СчетчикДопТаблиц <= КвоДопТаблиц Цикл							
							
							СтруктураИмпортаЭкспорта_Внутренняя = СоздатьСтруктуруДляИмпортаЭкспорта(СтрокаТаблицыИлиЭлемент);
							СтруктураИмпортаЭкспорта_Внутренняя.ШаблонФайла = МассивШаблонТаблицы[ СчетчикДопТаблиц ];
							СтруктураИмпортаЭкспорта_Внутренняя.АдресФайла = МассивАдресФайла[ СчетчикДопТаблиц ];
							СтруктураИмпортаЭкспорта_Внутренняя.ИмяТаблицыШаблонаФайла = МассивИмяТаблицыШаблонаФайла[ СчетчикДопТаблиц ];
							СтруктураИмпортаЭкспорта_Внутренняя.ПериодДляДокументов = ПериодДляДокументов;
							
							ВыполнитьЗагрузкуИзФайла(СтруктураИмпортаЭкспорта_Внутренняя);
							СчетчикДопТаблиц = СчетчикДопТаблиц + 1;
						КонецЦикла;					 	
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ШаблонФайлаСоставлятьНаименованиеПоВыражениюИзИменПолей) 
						и СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "" тогда	
						
						Попытка 
							ОбъектОперации.Наименование = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла); 
						Исключение 	
							Сообщение  =  Новый СообщениеПользователю;
							Сообщение.Текст  =  ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка формирования наименования:") + " " + ОписаниеОшибки();
							Сообщение.Сообщить();
							
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ШаблонФайлаСоставлятьНаименованиеГруппыРодителяИзИменПолей) 
						и СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "" тогда	
						
						ИмяРодителя = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, 2);
						Если ЗначениеЗаполнено(ИмяРодителя) Тогда			
							РодительЭлемента = Справочники.Номенклатура.НайтиПоНаименованию(ИмяРодителя) ;
							Если ЗначениеЗаполнено(РодительЭлемента) 
								И РодительЭлемента.ЭтоГруппа Тогда
								
								ОбъектОперации.Родитель = РодительЭлемента;
								
							ИначеЕсли ШаблонФайлаСоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
								
								РодительЭлемента = Справочники.Номенклатура.СоздатьГруппу() ;
								РодительЭлемента.Родитель = ШаблонФайлаГруппаДляНовойНоменклатуры;		
								РодительЭлемента.Наименование = ИмяРодителя;
								Попытка 
									Если Не СтруктураИмпортаЭкспорта.РежимТестирования ТОгда
										
										Попытка 
											Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
												РодительЭлемента.ОбменДанными.загрузка = Истина;
											КонецЕсли;
										Исключение 	
										КонецПопытки;
										
										РодительЭлемента.Записать();
										Если ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена 
											И ШаблонФайлаПоказыватьОбъектыОбмена Тогда		
											
											ТаблицаОбработанныхОбъектов.Добавить(РодительЭлемента.Ссылка);
											
										КонецЕсли;
										
										ОбъектОперации.Родитель = РодительЭлемента.Ссылка;	
									КонецЕсли;
								Исключение 	
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи эл-та справочника:") + " " + РодительЭлемента + " " + ОписаниеОшибки();
									Сообщение.Сообщить();
								КонецПопытки;  //записи  
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если не ОтказВЗаписи Тогда
						Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
							Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "НаименованиеПолное", ИмяТаблицыШаблонаФайла) = "" 
								И НЕ ЗначениеЗаполнено(ОбъектОперации.НаименованиеПолное) Тогда
								ОбъектОперации.НаименованиеПолное = ОбъектОперации.Наименование;
							КонецЕсли;					
							
							Попытка
								Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "Дата") = "" 
									И НЕ ЗначениеЗаполнено(ОбъектОперации.Дата) Тогда
									Если ШаблонФайлаУстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
										ОбъектОперации.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
									ИначеЕсли ЗначениеЗаполнено(ШаблонФайлаУстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
										ОбъектОперации.Дата = ШаблонФайлаУстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
										
									КонецЕсли;						
								КонецЕсли; 
							Исключение 
							КонецПопытки;	
						КонецЕсли;
						
						Если ШаблонФайлаИспользоватьДополнительноеПоведение Тогда
							Если ЭтоЗагрузкаСписка ТОгда
								ИспользоватьДополнительноеПоведениеДляШаблона(ОбъектОперации, ШаблонФайла, ИмяТаблицыШаблонаФайла);
							Иначе 	
								ИспользоватьДополнительноеПоведениеДляШаблона(СтрокаТаблицыИлиЭлемент, ШаблонФайла);
							КонецЕсли;
						КонецЕсли;
						
						Если ИмяТаблицыШаблонаФайла = "Товары" Тогда
							ДозаполнитьСТрокуТоваров(СтрокаТаблицыИлиЭлемент, ОбъектОперации);	
							
						ИначеЕсли ЭтоЗагрузкаСписка 
							И не ОтказВЗаписи ТОгда				
							
							Попытка 
								Если Не СтруктураИмпортаЭкспорта.РежимТестирования ТОгда
									Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
										Если ШаблонФайлаПопытатьсяПроводитьДокументы Тогда
											
											Попытка 
												Попытка 
													Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
														ОбъектОперации.ОбменДанными.загрузка = Истина;
													КонецЕсли;
												Исключение 	
												КонецПопытки;
												ОбъектОперации.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
												ОбъектОперации = ОбъектОперации.Ссылка.ПолучитьОбъект(); //для дополнительного заполнения реквизитов
												
												Если ШаблонФайлаОткрыватьФормуКаждогоЭлементаИлиДокумента Тогда
													ТаблицаОбработанныхОбъектов.Добавить(ОбъектОперации.Ссылка);
												КонецЕсли;
											Исключение 
												Попытка 
													Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
														ОбъектОперации.ОбменДанными.загрузка = Истина;
													КонецЕсли;
												Исключение 	
												КонецПопытки;
												
												Попытка 
													Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
														ОбъектОперации.ОбменДанными.загрузка = Истина;
													КонецЕсли;
												Исключение 	
												КонецПопытки;
												ОбъектОперации.Записать(РежимЗаписиДокумента.Запись);
												ОбъектОперации = ОбъектОперации.Ссылка.ПолучитьОбъект(); //для дополнительного заполнения реквизитов
												
												Если ШаблонФайлаОткрыватьФормуДокументовКоторыеНеУдалосьПровести Тогда
													ТаблицаОбработанныхОбъектов.Добавить(ОбъектОперации.Ссылка);
												КонецЕсли;
												Сообщение = Новый СообщениеПользователю;
												Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке проведения документа:") + " " + ОбъектОперации + " " + ОписаниеОшибки();
												Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
												Сообщение.Сообщить();
												
											КонецПопытки;  //записи  ОбъектОперации
										Иначе
											Попытка 
												Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
													ОбъектОперации.ОбменДанными.загрузка = Истина;
												КонецЕсли;
											Исключение 	
											КонецПопытки;
											ОбъектОперации.Записать();    		
											
											ОбъектОперации = ОбъектОперации.Ссылка.ПолучитьОбъект(); //для дополнительного заполнения реквизитов
											
											Если ШаблонФайлаОткрыватьФормуКаждогоЭлементаИлиДокумента Тогда											
												СписокОбъектов.Добавить(ОбъектОперации.ссылка);											
											КонецЕсли;	
											
										КонецЕсли;
										
										Если ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена 
											и ШаблонФайлаПоказыватьОбъектыОбмена Тогда		
											
											ТаблицаОбработанныхОбъектов.Добавить(ОбъектОперации.Ссылка);											
										КонецЕсли;
										
									КонецЕсли;
								КонецЕсли;
								
							Исключение 	
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при записи:") + " " + ОписаниеОшибки();
								Сообщение.УстановитьДанные(ОбъектОперацииСсылка);
								Сообщение.Сообщить();
								
								Если ШаблонФайлаОстанавливатьОбменПоОшибке Тогда
									Прервать;
								КонецЕсли;
								
							КонецПопытки;
							
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;  				
				
				Если не ОтказВЗаписи 
					И (ШаблонФайлаДополнительноеЗаполнениеРеквизитовПриИмпорте 
					ИЛИ ШаблонФайлаВидШаблонаДляРегистровСведений) Тогда
					
					Для Каждого СтрокаРеквизита ИЗ ШаблонФайлаДополнительноеЗаполнениеРеквизитов Цикл
						Попытка 
							Если СтрокаРеквизита.ИмяТаблицыРеквизита = "" Тогда
								Если НЕ СтрокаРеквизита.УстанавливатьТолькоЕслиЗначениеНеЗаполнено 
									ИЛИ НЕ ЗначениеЗаполнено(ОбъектОперации[ СтрокаРеквизита.НаименованиеРеквизита ]) Тогда
									
									ОбъектОперации[ СтрокаРеквизита.НаименованиеРеквизита ] = СтрокаРеквизита.ЗначениеРеквизита;
									
								КонецЕсли;
							Иначе
								Для Каждого СтрокаТаблицыОбъекта ИЗ ОбъектОперации[ СокрЛП(СтрокаРеквизита.ИмяТаблицыРеквизита) ] Цикл
									Если НЕ СтрокаРеквизита.УстанавливатьТолькоЕслиЗначениеНеЗаполнено 
										ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыОбъекта[ СтрокаРеквизита.НаименованиеРеквизита ]) Тогда
										
										СтрокаТаблицыОбъекта[ СтрокаРеквизита.НаименованиеРеквизита ] = СтрокаРеквизита.ЗначениеРеквизита;
										
									КонецЕсли;	
								КонецЦикла;
							КонецЕсли;
							
						Исключение 	
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка установки реквизита:") + " " + ОписаниеОшибки();
							Сообщение.Сообщить();
							
						КонецПопытки;
						
					КонецЦикла; 
					
					//		Если ШаблонФайлаВидШаблонаДляРегистровСведений Тогда //записывается только тут, чтобы допреквизиты назначить, но ссылкой не пользоваться
					Попытка 
						Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
							ОбъектОперации.ОбменДанными.загрузка = Истина;
						КонецЕсли;
					Исключение 	
					КонецПопытки;
					
					ОбъектОперации.Записать();
					ОбъектОперации = ОбъектОперации.Ссылка.ПолучитьОбъект();
					//		КонецЕсли;
				КонецЕсли;
				
			конецесли;
			
			Если ШаблонФайлаВыполнятьПрограммы 
				И ЗначениеЗаполнено(ШаблонФайлаВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки) Тогда
				
				Выполнить(ШаблонФайлаВыполнитьПрограммныйКодПослеОкончанияЗагрузкиСтроки);		
				
			КонецЕсли;
			
			Если ШаблонФайлаФорматФайлаDBF 
				И НЕ БазаДБФФайлИмпортаЭкспорта.Следующая() Тогда 
				
				Прервать;
				
			Конецесли;
			
		КонецЦикла;			 	
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			БазаДБФФайлИмпортаЭкспорта.ЗакрытьФайл();
			
		ИначеЕсли ШаблонФайлаФорматФайлаEXCEL ТОгда
			ЭксельФайлИмпортаЭкспорта.quit();
			
		КонецЕсли;
		
		если НЕ ЭтоЗагрузкаСписка 
			И не ЭтоПредопределенныйШаблон 
			и Не СтруктураИмпортаЭкспорта.РежимТестирования Тогда
			
			Попытка 
				Если ШаблонФайлаУстанавливатьФлагОбменаЗагрузки Тогда
					ОбъектОперации.ОбменДанными.загрузка = Истина;
				КонецЕсли;
			Исключение 	
			КонецПопытки;
			ОбъектОперации.Записать();
			
			Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена 
				и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
				ТаблицаОбработанныхОбъектов.Добавить(ОбъектОперации.ссылка);
			КонецЕсли;
			
			Если ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента Тогда
				СписокОбъектов.Добавить(ОбъектОперации.ссылка);
			КонецЕсли;	
			
		КонецЕсли;
		
		
		Если ШаблонФайла.ВестиЖурналИмпортноЭкспортныхОпераций Тогда 	
			ФайлОбмена = Новый Файл(АдресФайла);
			ЗаписатьВЖурналИмпортноЭкспортныхОпераций(АдресФайла, ОбъектОперации, ФайлОбмена.Размер(), Ложь);
			ФайлОбмена = Неопределено;
		КонецЕсли;		
		
		Если ШаблонФайла.УдалятьФайлПослеУдачногоИмпорта Тогда
			Попытка 
				УдалитьФайлы(АдресФайла);
				
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка удаления файла:") + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена Тогда
			СтруктураФормыПрогресса.Вставить("ЧислоОбработанныхОбъектов", ТаблицаОбработанныхОбъектов.Количество());
			СтруктураФормыПрогресса.Вставить("ТаблицаОбработанныхОбъектов", ТаблицаОбработанныхОбъектов);
		КонецЕсли;
		
		Если ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента Тогда
			СтруктураФормыПрогресса.Вставить("СписокОбъектов", СписокОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураФормыПрогресса;
	
КонецФункции

//Определяется импортно-экспортная операция для файла со стороны серевера приложения
Функция   ВыполнитьДляФайлаНаСервере(СтруктураИмпортаЭкспорта) Экспорт
	
	Если СтруктураИмпортаЭкспорта.Экспортер Тогда
		
		Возврат ВыполнитьВыгрузкуВФайл(СтруктураИмпортаЭкспорта);
		
	Иначе
		
		ШаблонФайла = СтруктураИмпортаЭкспорта.ШаблонФайла;
		
		//Если ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.ОбменЗаказамиСПОDBF Тогда
		//	СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "DBFЗаказы";
		//	
		//ИначеЕсли ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.ОбменНоменклатурыСПОDBF
		//	ИЛИ ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.ОбменНоменклатурыСПОDBFEXCEL Тогда
		//	СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "DBFНоменклатура";
		//	
		//ИначеЕсли ШаблонФайла = Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.ОбменШапкаЗаказаСПОDBF Тогда
		//	СтруктураИмпортаЭкспорта.ИмяТаблицыШаблонаФайла = "DBFЗаказ";
		//	
		//КонецЕсли;
		//
		Если ШаблонФайла.ФайлАрхив Тогда
			
			Файл = Новый Файл(СтруктураИмпортаЭкспорта.АдресФайла);
			Путь = Файл.Путь;
			ЧтениеЗипФайла = Новый ЧтениеZipФайла;
			ЧтениеЗипФайла.Открыть(СтруктураИмпортаЭкспорта.АдресФайла, ?(ЗначениеЗаполнено(ШаблонФайла.ПарольАрхива), ШаблонФайла.ПарольАрхива, Неопределено));
			ЧтениеЗипФайла.ИзвлечьВсе(Путь);
			ЧтениеЗипФайла.Закрыть();
			УдалитьФайлы(СтруктураИмпортаЭкспорта.АдресФайла);
			
		КонецЕсли;
		
		Если ШаблонФайла.ФайлАрхив 
			ИЛИ ШаблонФайла.ЗагружатьВсеФайлыИзПапки Тогда
			
			Если ШаблонФайла.ЗагружатьВсеФайлыИзПапки Тогда
				МассивФайлов = НайтиФайлы(СтруктураИмпортаЭкспорта.АдресФайла, ШаблонФайла.МаскаФайла, ШаблонФайла.ИскатьВПодкаталогах);
			Иначе
				МассивФайлов = НайтиФайлы(Путь, "*.*", ШаблонФайла.ИскатьВПодкаталогах);
			КонецЕсли;
			
			Если МассивФайлов.Количество() > 0 Тогда
				
				ЗапросАдресФайла = Новый Запрос;
				ЗапросАдресФайла.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПодсистемаИЭИмпортЭкспортЖурнал.Дата,
				|	ПодсистемаИЭИмпортЭкспортЖурнал.ОбъектОперации
				|ИЗ
				|	РегистрСведений.ПодсистемаИЭИмпортЭкспортЖурнал КАК ПодсистемаИЭИмпортЭкспортЖурнал
				|ГДЕ
				|	ПодсистемаИЭИмпортЭкспортЖурнал.ИмпортНеЭкспорт = Истина
				|	И ПодсистемаИЭИмпортЭкспортЖурнал.АдресФайла = &АдресФайла ";  //ВЫБРАТЬ ПЕРВЫЕ 1
				
				Для Каждого ФайлИзСписка ИЗ МассивФайлов Цикл
					
					АдресФайла = ФайлИзСписка.ПолноеИмя;
					
					ЗапросАдресФайла.УстановитьПараметр("АдресФайла", АдресФайла);
					
					ВыборАдресФайла = ЗапросАдресФайла.Выполнить();
					Если Не ВыборАдресФайла.Пустой() Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файл") + " " + АдресФайла + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" пропущен (уже загружался).");
						Сообщение.Сообщить(); 
						
					Иначе
						
						СтруктураИмпортаЭкспорта.АдресФайла = АдресФайла;
						СтруктураИмпортаЭкспорта.СтруктураФормыПрогресса = ВыполнитьЗагрузкуИзФайла(СтруктураИмпортаЭкспорта);	
						
					КонецЕсли; //запрос АдресФайла 
					
				КонецЦикла;
				
				Возврат СтруктураИмпортаЭкспорта.СтруктураФормыПрогресса;
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Файлы по маске (") + СокрЛП(ШаблонФайла.МаскаФайла) + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(") в указанном каталоге") + " " + СтруктураИмпортаЭкспорта.АдресФайла +" не обнаружены!";
				Сообщение.Сообщить();
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			Возврат ВыполнитьЗагрузкуИзФайла(СтруктураИмпортаЭкспорта);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//Производит выполнение условий фильтра шаблона обмена для данных
Функция   ВыполнитьПроверкуПоУсловиямФильтра(ЗначениеДанных, НомерСтроки, ШаблонФайла, ЭтоЗагрузка)
	
	Если ШаблонФайла.УсловияФильтра.Количество() > 0 Тогда
		Для Каждого УсловиеФильтра ИЗ ШаблонФайла.УсловияФильтра Цикл
			Если УсловиеФильтра = НомерСтроки Тогда
				
				УсловиеВыполнено = ВыполненоЛиУсловиеФильтра(УсловиеФильтра.УсловиеРавенства, ЗначениеДанных, УсловиеФильтра.ЗначениеПоля);
				
				Если УсловиеВыполнено Тогда
					Если (УсловиеФильтра.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.Пропустить)
						ИЛИ ( ЭтоЗагрузка И УсловиеФильтра.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриИмпорте)
						ИЛИ (НЕ ЭтоЗагрузка И УсловиеФильтра.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПропуститьПриЭкспорте) Тогда
						
						ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
						
					ИначеЕсли УсловиеФильтра.ПоведениеПриОбмене = Перечисления.ПодсистемаИЭИмпортЭкспортВидыПоведенияФильтра.ПринятьПустоеЗначение Тогда
						ЗначениеДанных = Неопределено;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ЗначениеДанных;
	
КонецФункции //ВыполнитьПроверкуПоУсловиямФильтра

Процедура ДозаполнитьСТрокуТоваров(СтрокаТаблицыТоваров, ОбъектОперации) 	
	
	СтруктураДанные = Новый Структура();
	попытка
		СтруктураДанные.Вставить("Организация", ОбъектОперации.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицыТоваров.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТаблицыТоваров.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС", ОбъектОперации.НалогообложениеНДС);		
		
		Если ЗначениеЗаполнено(ОбъектОперации.ВидЦен) Тогда
			СтруктураДанные.Вставить("ДатаОбработки", 	 ОбъектОперации.Дата);
			СтруктураДанные.Вставить("ВалютаДокумента", ОбъектОперации.ВалютаДокумента);
     		СтруктураДанные.Вставить("СуммаВключаетНДС", ОбъектОперации.СуммаВключаетНДС);
			СтруктураДанные.Вставить("ВидЦен", ОбъектОперации.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			СтруктураДанные.Вставить("Содержание", "");				
			СтруктураДанные.Вставить("ВидСкидкиНаценки", ОбъектОперации.ВидСкидкиНаценки);			
		КонецЕсли;	
		СтруктураДанные.Вставить("Клиент", ОбъектОперации.Клиент);
	исключение
	конецпопытки;
	
	попытка
		Если СтрокаТаблицыТоваров.Цена = 0 Тогда
			СтрокаТаблицыТоваров.Цена = СтруктураДанные.Цена;
		КонецЕсли;
	исключение //нет такого поля
	конецпопытки;
	
	попытка
		Если СтрокаТаблицыТоваров.ПроцентСкидки = 0 Тогда
			СтрокаТаблицыТоваров.ПроцентСкидки = СтруктураДанные.ПроцентСкидки;	
		КонецЕсли;	
	исключение //нет такого поля
	конецпопытки;
	
	попытка
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТоваров.ЕдиницаИзмерения) и ЗначениеЗаполнено(СтрокаТаблицыТоваров.Номенклатура) Тогда
			СтрокаТаблицыТоваров.ЕдиницаИзмерения = СтрокаТаблицыТоваров.Номенклатура.ЕдиницаИзмерения;		
		КонецЕсли;
	исключение //нет такого поля
	конецпопытки;
	
	попытка
		Если СтрокаТаблицыТоваров.Сумма = 0 Тогда
			СтрокаТаблицыТоваров.Сумма = СтрокаТаблицыТоваров.Количество * СтрокаТаблицыТоваров.Цена;
		КонецЕсли;
	исключение //нет такого поля
	конецпопытки;
	
	Попытка 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыТоваров.СтавкаНДС) Тогда
			СтрокаТаблицыТоваров.СтавкаНДС = ОбъектОперации.Организация.СтавкаНДСПоУмолчанию;			
		КонецЕсли;
	Исключение 	//не выбрана организация ИЛИ документ не тот
	КонецПопытки;
	
КонецПроцедуры //ДозаполнитьСТрокуТоваров

//Заполнить комментарии и типы всех предопределенных полей для шаблонов обмена
Процедура ЗаполнитьКомментарииИТипы(Обязательно = Ложь) Экспорт	
	
	Если Обязательно 
		ИЛИ сокрлп(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ГодДатыДокумента.Комментарий) = "" Тогда
		
		ТипПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля;
		
		ПолеОпределенное = ТипПоля.ТоварыТаблица.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Товары (реквизиты таблицы документа)");
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.АртикулНоменклатуры.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Артикул номенклатуры (ключевое)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;//У меня - 100 старый - 25
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Артикул";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.АртикулНоменклатурыУКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Артикул номенклатуры по версии Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 100;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "АртикулУК";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.АртикулНоменклатурыСвойПотомУКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Артикул номенклатуры (сначала свой, если нет - по версии Клиента)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 100;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "АртикулК";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеНоменклатурыКлиентом.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование номенклатуры по версии Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 100;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НаименованиеК";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.Всего.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Всего сумма");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Итого";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ДатаДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата документа");
		ПолеОпределенное.ТипТут 	= "D";
		ПолеОпределенное.ДлинаТут 	= 8;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Дата";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ДатаВходящегоДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата входящего документа");
		ПолеОпределенное.ТипТут 	= "D";
		ПолеОпределенное.ДлинаТут 	= 8;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДатаВходящего";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ДатаОтгрузки.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Дата отгрузки";
		//ПолеОпределенное.ТипТут 	= "D";
		//ПолеОпределенное.ДлинаТут 	= 8;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДатаОтгрузки";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ДатаПоступления.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Дата поступления";
		//ПолеОпределенное.ТипТут 	= "D";
		//ПолеОпределенное.ДлинаТут 	= 8;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДатаПоступления";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ДоляСтоимости.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Доля стоимости";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДоляСтоимости";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ЕдиницаИзмеренияНоменклатуры.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Единица измерения номенклатуры";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 50;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ЕдиницаИзмерения";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Заказ.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер заказа покупателя ИЛИ поставщика";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 11;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НомерЗак";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ЗаказПокупателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер заказа покупателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 11;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НомерЗаказа";
		//ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Количество.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 3;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Количество";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Количество1000.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Количество в тысячах");
		ПолеОпределенное.ТипТут 	 = "N";
		ПолеОпределенное.ДлинаТут 	 = 15;
		ПолеОпределенное.ТочностьТут = 3;
		ПолеОпределенное.Коэффициент = 1000;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КолТыс";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Номенклатура.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование номенклатуры");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Номенклатура";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НомерДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер документа");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 25;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Номер";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.НомерВходящегоДокумента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер входящего документа";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 25;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НомерВходящий";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ОКПОКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ОКПО Клиента");
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 25;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ОКПО";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Партия.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Партия номенклатуры (наименование)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Партия";
		//ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПропуститьДанноеПоле.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пропустить данное поле (пустышка ИЛИ поле не ключевое И НЕ информационное)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 25;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Пропуск";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПроцентСкидки.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("% скидки (наценки)");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 3;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ПроцентСкидки";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.Резерв.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Резерв (число)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 3;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Резерв";
		//ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.Содержание.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Содержание (текст для печати)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 254;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Содержание";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Спецификация.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Спецификация (наименование)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 100;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Спецификация";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СтавкаНДС.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Ставка НДС";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 10;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СтавкаНДС";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.СтруктурнаяЕдиница.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("СтруктурнаяЕдиница (склад)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 50;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Склад";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Сумма.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Сумма";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.СуммаНДС.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма НДС";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаНДС";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СуммаРасходов.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма расходов";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаРасходов";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Характеристика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Характеристика номенклатуры";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 100;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Характеристика";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.Цена.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Цена");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Цена";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ШтрихКод.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Штрих код номенклатуры (Товаров/карточки/списка) (ключевое)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 254;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ШтрихКод";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.Ячейка.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Ячейка склада";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 50;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Ячейка";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СуммаБезНДСДокумента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма документа (без НДС)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаБезНДС";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СуммаСНДСДокумента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма документа (с НДС)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаСНДС";
		//ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Комментарий.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Комментарий объекта");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 254;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Комментарий";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НоменклатурыКод.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код номенклатуры");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 11;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодНоменклатуры";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ХарактеристикиКод.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Код характеристики номенклатуры";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 9;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодХарактеристики";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ЕдиницыИзмеренияКод.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Код единицы измерения номенклатуры";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 3;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодЕдиницыИзмерения";
		//ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ПолеЗначения0.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Поле с определенным значением 0";
		//ПолеОпределенное.ТипТут 		= "N";
		//ПолеОпределенное.ДлинаТут 		= 1;
		//ПолеОпределенное.ТочностьТут	= 0;
		//ПолеОпределенное.ОпределенноеЗначение = 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Ноль";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ПолеЗначения1.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий 	= "Поле с определенным числовым значением 1";
		//ПолеОпределенное.ТипТут 		= "N";
		//ПолеОпределенное.ДлинаТут 		= 1;
		//ПолеОпределенное.ТочностьТут	= 0;
		//ПолеОпределенное.ОпределенноеЗначение = 1;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Один";
		//ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПолеЗначенияПустойСтроки.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поле с определенным значением пустой строки");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ОпределенноеЗначение = "";
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Пробел";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Документы.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реквизиты Документов");
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ВалютаДокумента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Валюта документа";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 3;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Валюта";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ВалютыДокументаКод.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Код валюты документа";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 3;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодВалюты";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.КодОбъекта.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код объекта");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 25;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Код";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НаименованиеОбъекта.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = "Наименование объекта";
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 120;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Истина;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Имя";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ИсполняемыйКод.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Исполняемый программный код");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 254;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы=Ложь;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ПрограммныйКод";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Справочники.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Реквизиты Справочников");
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ВладелецЭлемента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Владелец подчиненного элемента (наименование)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 120;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Владелец";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.РодительЭлемента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа элемента (наименование)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 120;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Родитель";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ВладельцаЭлементаКод.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Владелец подчиненного элемента (код)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 11;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодВладельца";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.РодителяЭлементаКод.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Группа элемента (код)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 11;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодРодителя";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ЭлементЭтоГруппа.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак, что это группа элементов");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ЭтоГруппа";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ЭлементПредопределенный.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак, что это Предопределенный в конфигурации элемент");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Предопределенный";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ОбъектПомеченНаУдаление.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак, что этот объект помечен на удаление");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Удален";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ДокументПроведен.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак, что этот документ проведен");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Проведен";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НомерПлатежногоДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер платежного документа");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 24;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НомерДокумента";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НоменклатурнаяГруппаНоменклатуры.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатурная группа номенклатуры");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ГруппаНоменклатурная";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НаименованиеКлиента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование Клиента");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Клиент";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.Специальные.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Специальные поля (для предопределенных шаблонов)");
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПолеЗначенияПустойДаты.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пустое значение типа дата");
		ПолеОпределенное.ТипТут 	= "D";
		ПолеОпределенное.ДлинаТут 	= 8;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ПустаяДата";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ФинансовыеДокументы.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Поля для шаблонов обмена с банками");
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ВидПлатежногоДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид платежного документа");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ВидДокумента";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ТипОбъекта.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тип объекта");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 100;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ТипОбъекта";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ДоговорОснование.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Договор основание";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 254;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДоговорОснование";
		//ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.ИННКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "ИНН Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ИНН";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ИННОрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "ИНН Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ИННОрганизации";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ИННПлательщика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "ИНН Плательщика";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ИННКредит";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ИННПолучателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "ИНН Получателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ИННПДебет";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ОКПООрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "ОКПО Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ОКПО";
		//ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ОКПОКлиента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("ОКПО Клиента");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 20;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ОКПООрганизации";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ОКПОПлательщика.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = "ОКПО Плательщика";
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 20;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ОКПОДебет";
		ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.ОКПОПолучателя.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = "ОКПО Получателя";
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 20;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ОКПОКредит";
		ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ДатаПлатежа.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Дата платежа";
		//ПолеОпределенное.ТипТут 	= "D";
		//ПолеОпределенное.ДлинаТут 	= 8;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Дата";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НомерПлатежногоДокумента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер платежа";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Номер";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.МФОБанкаКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "МФО Банка Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "МФО";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.МФОБанкаОрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "МФО Банка Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "МФОБанкаОрганизации";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.МФОБанкаПлательщика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "МФО Банка Плательщика";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "МФОДебет";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.МФОБанкаПолучателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "МФО Банка Получателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 20;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "МФОКредит";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НазначениеПлатежа.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Назначение платежа";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 254;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Назначение";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеБанкаКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Банка Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Банк";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеБанкаОрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Банка Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "БанкОрганизации";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеБанкаПлательщика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Банка Плательщика";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "БанкДебет";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеБанкаПолучателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Банка Получателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "БанкКредит";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Полное Наименование Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 254;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Агент";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеОрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Полное Наименование Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 254;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Организация";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеПлательщика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Плательщик";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Плательщик";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НаименованиеПолучателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Наименование Получателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 120;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Получатель";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НомерСчетаКлиента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер Счета Клиента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 24;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Счет";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НомерСчетаОрганизации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер Счета Организации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 24;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СчетОрганизации";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НомерСчетаПлательщика.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер Счета Плательщика";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 24;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СчетДебет";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НомерСчетаПолучателя.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Номер Счета Получателя";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 24;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СчетКредит";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ПризнакВалюты.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Признак единичка (1), что это валютная операция";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 1;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Валюта";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ПризнакВалютыКод.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Признак код валюты (например 980)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 3;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ВалютаКод";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ПризнакВалютыСимвол.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Признак валюты (символ В)";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 1;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ВалютаСимвол";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.ПризнакДебет.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак единичка (1), что это дебет не кредит");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Дебет";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПризнакКредит.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак единичка (1), что это кредит не дебет");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Кредит";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПризнакДебетИлиКредит.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак Д/К, что это дебет ИЛИ кредит");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ДК";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НомерСчета.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер расчетного счета");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 24;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СчетОрганизации";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ПризнакДебетИлиКредитЛат.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Признак D/K (лат.), что это дебет ИЛИ кредит");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 1;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "DK";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.СуммаПлатежа.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма платежа");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Сумма";
		ПолеОпределенное.Записать();
		
		//ПолеОпределенное = ТипПоля.СуммаПлатежаВалютная.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма платежа валютная";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаВал";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СуммаПлатежаВалютнаяПриход.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма платежа валютная (Приход)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаВалКредит";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.СуммаПлатежаВалютнаяРасход.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Сумма платежа валютная (Расход)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 2;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаВалДебет";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.СуммаПлатежаПриход.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма платежа (Приход)");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаКредит";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.СуммаПлатежаРасход.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Сумма платежа (Расход)");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 15;
		ПолеОпределенное.ТочностьТут= 2;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "СуммаДебет";	
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НаименованиеВладельцаКарточки.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование владельца таблицы (при обработке табличных частей справочника)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 120;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Хозяин";	
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.КодВладельцаКарточки.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код владельца таблицы (при обработке табличных частей справочника)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 25;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КодХозяина";	
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.НомерВладельцаШапки.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер документа владельца таблицы (при обработке табличных частей документов)");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 25;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ХозяинДок";
		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.Записать();
		
		
		ПолеОпределенное = ТипПоля.Производитель.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Производитель номенклатуры");
		ПолеОпределенное.ТипТут 	= "S";
		ПолеОпределенное.ДлинаТут 	= 50;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Производитель";
		//		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.УзелСпецификации.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Узел (сборка) спецификации";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 50;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Узел";
		//ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.ОпределенноеЗначение = "";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.КоличествоУзлов.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Количество узлов (сборок) спецификации";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 7;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КвоУзлов";
		////полеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ВидИзСортамента.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Вид ИЗ сортамента";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 24;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "ВидИзСорт";
		////		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.КоличествоДеталейВЗаготовке.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Количество деталей в заготовке";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 7;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "КвоВЗагот";
		////		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ВесНоменклатуры.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Вес номенклатуры";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 12;
		//ПолеОпределенное.ТочностьТут= 3;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "Вес";
		////		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.НормаРасходаМатериала.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Норма расхода материала";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 12;
		//ПолеОпределенное.ТочностьТут= 3;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "НормаРасхода";
		////		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.МетодПолучения.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Метод получения";
		//ПолеОпределенное.ТипТут 	= "S";
		//ПолеОпределенное.ДлинаТут 	= 60;
		//ПолеОпределенное.ТочностьТут= 0;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "МетодПолучения";
		////		ПолеОпределенное.ПолеПринадлежитОбъектуТаблицы = Истина;
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Размер1.ПолучитьОбъект();
		//ЗаголовокРазмера = "Размер";
		//Попытка 
		//	Выполнить("ЗаголовокРазмера = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ЗаголовокРазмера(1); ");
		//Исключение 	
		//КонецПопытки;
		//Если ЗначениеЗаполнено(ЗаголовокРазмера) Тогда
		//	ПолеОпределенное.Комментарий = ЗаголовокРазмера;
		//Иначе
		//	ПолеОпределенное.Комментарий = "Размер 1";
		//КонецЕсли;
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 4;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "R1";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Размер2.ПолучитьОбъект();
		//Попытка
		//	Выполнить("ЗаголовокРазмера = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ЗаголовокРазмера(2); ");
		//Исключение 	
		//КонецПопытки;
		//
		//Если ЗначениеЗаполнено(ЗаголовокРазмера) Тогда
		//	ПолеОпределенное.Комментарий = ЗаголовокРазмера;
		//Иначе
		//	ПолеОпределенное.Комментарий = "Размер 2";
		//КонецЕсли;
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 4;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "R2";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.Размер3.ПолучитьОбъект();
		//Попытка
		//	Выполнить("ЗаголовокРазмера = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ЗаголовокРазмера(3); ");
		//Исключение 	
		//КонецПопытки;
		//
		//Если ЗначениеЗаполнено(ЗаголовокРазмера) Тогда
		//	ПолеОпределенное.Комментарий = ЗаголовокРазмера;
		//Иначе
		//	ПолеОпределенное.Комментарий = "Размер 3";
		//КонецЕсли;
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 4;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "R3";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ПлощадьОбъем.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Площадь Объем";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 15;
		//ПолеОпределенное.ТочностьТут= 4;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "S";
		//ПолеОпределенное.Записать();
		//
		//ПолеОпределенное = ТипПоля.ЕдиницыИзмеренияКоэффициент.ПолучитьОбъект();
		//ПолеОпределенное.Комментарий = "Коэффициет для единицы измерения (только в связке с кодом ИЛИ наименованием ед.изм.)";
		//ПолеОпределенное.ТипТут 	= "N";
		//ПолеОпределенное.ДлинаТут 	= 10;
		//ПолеОпределенное.ТочностьТут= 3;
		//ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "K";
		//ПолеОпределенное.Записать();
		//
		ПолеОпределенное = ТипПоля.ДеньДатыДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("День месяца даты документа");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 2;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "DAY";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.МесяцДатыДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Месяц даты документа");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 2;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "MONTH";
		ПолеОпределенное.Записать();
		
		ПолеОпределенное = ТипПоля.ГодДатыДокумента.ПолучитьОбъект();
		ПолеОпределенное.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Год даты документа");
		ПолеОпределенное.ТипТут 	= "N";
		ПолеОпределенное.ДлинаТут 	= 4;
		ПолеОпределенное.ТочностьТут= 0;
		ПолеОпределенное.ЗаголовокПоляПоУмолчанию = "YEAR";
		ПолеОпределенное.Записать();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Предопределенные поля системы импорта-экспорта обновлены.");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьКомментарииИТипы

//Произведение запсиси в журнал импортно-экпортных операций
Процедура ЗаписатьВЖурналИмпортноЭкспортныхОпераций(АдресФайла, ОбъектОперации = Неопределено, Размер = 0, ЭтоЭкспорт = Ложь, Комментарий = "") Экспорт
	
	ЖурналИЭ = РегистрыСведений.ПодсистемаИЭИмпортЭкспортЖурнал.СоздатьМенеджерЗаписи();
	ЖурналИЭ.Активность = Истина;
	ЖурналИЭ.АдресФайла = АдресФайла;
	ЖурналИЭ.Дата  = ТекущаяДата();
	ЖурналИЭ.ИмпортНеЭкспорт = НЕ ЭтоЭкспорт;
	ЖурналИЭ.Комментарий = Комментарий;
	ЖурналИЭ.Размер = Размер;
	Попытка 
		Если ЗначениеЗаполнено(ОбъектОперации) Тогда
			ЖурналИЭ.ОбъектОперации = ОбъектОперации;	
		КонецЕсли;	
	Исключение 	
	КонецПопытки;
	
	Попытка
		ЖурналИЭ.Записать(Истина);
		
	Исключение 
	КонецПопытки;
	
	
КонецПроцедуры //ЗаписатьВЖурналИмпортноЭкспортныхОпераций

//Произвести дополнительные функции - поведение для шаблонов импорта-экспорта
Процедура ИспользоватьДополнительноеПоведениеДляШаблона(СтрокаТаблицыИлиЭлемент, ШаблонФайла, ИмяТаблицы = "", Импорт = Истина, СтрокаФайлаТекста = "", БазаДБФФайлИмпортаЭкспорта = Неопределено, ТекЛист = Неопределено, РеальныйСчетчикСтрок = 0, ФайлИмпортаЭкспорта = Неопределено) //Экспорт	
	
	Для Каждого ДополнительноеПоведение ИЗ ШаблонФайла.ДополнительноеПоведение Цикл    
		
		ЭлементПоведения = ДополнительноеПоведение.ЭлементПоведения;
		Если ЗначениеЗаполнено(ЭлементПоведения) Тогда
			Если Импорт Тогда
				
				ЗначениеДанных = СтрокаТаблицыИлиЭлемент[ ЭлементПоведения.ИмяРеквизита ];
				Если ВыполненоЛиУсловиеФильтра(ЭлементПоведения.УсловиеДополнительногоПоведенияПриИмпорте, ЗначениеДанных, ЭлементПоведения.ЗначениеРеквизита) Тогда
					Для Каждого Поведение ИЗ ЭлементПоведения.ТаблицаПоведения Цикл    
						Если ЗначениеЗаполнено(Поведение.ИмяТаблицы) Тогда
							Если ИмяТаблицы = Поведение.ИмяТаблицы Тогда
								СтрокаТаблицыИлиЭлемент[ Поведение.ИмяРеквизита ] = Поведение.ЗначениеРеквизита;	
							КонецЕсли;							
						Иначе
							СтрокаТаблицыИлиЭлемент[ Поведение.ИмяРеквизита ] = Поведение.ЗначениеРеквизита;
						КонецЕсли;                 
					КонецЦикла; //Для Каждого Поведение ИЗ ЭлементПоведения.ТаблицаПоведения 	
					
					Если ЭлементПоведения.ВыполнитьПрограммныйКод Тогда
						Попытка 
							Выполнить(ЭлементПоведения.ПрограммныйКод);
							
						Исключение 	
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения кода поведения:") + " " + ОписаниеОшибки();
							Сообщение.Сообщить();
							
						КонецПопытки;  
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе 				
				УсловиеБылоВыполнено = Ложь;
				
				Для Каждого Поведение ИЗ ЭлементПоведения.ТаблицаПоведения Цикл    
					Если ЗначениеЗаполнено(Поведение.ИмяТаблицы) Тогда
						Если ИмяТаблицы = Поведение.ИмяТаблицы Тогда
							ЗначениеДанных = СтрокаТаблицыИлиЭлемент[ Поведение.ИмяРеквизита ] = Поведение.ЗначениеРеквизита;	
						Иначе
							ЗначениеДанных = Неопределено;
						КонецЕсли;
					Иначе
						ЗначениеДанных = СтрокаТаблицыИлиЭлемент[ Поведение.ИмяРеквизита ] = Поведение.ЗначениеРеквизита;
					КонецЕсли;          
					
					Если ВыполненоЛиУсловиеФильтра(Поведение.УсловиеДополнительногоПоведенияПриЭкспорте, ЗначениеДанных, Поведение.ЗначениеРеквизита) Тогда
						Если ШаблонФайла.ФорматФайла  = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
							
							ИмяРеквизита = ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СокрЛП(ЭлементПоведения.ИмяРеквизита)));
							Попытка 
								БазаДБФФайлИмпортаЭкспорта[ ИмяРеквизита ] = ЭлементПоведения.ЗначениеРеквизита;		
							Исключение 	
								БазаДБФФайлИмпортаЭкспорта[ ИмяРеквизита ] = СокрЛП(ЭлементПоведения.ЗначениеРеквизита);		
							КонецПопытки;
						ИначеЕсли ШаблонФайла.ФорматФайла  = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
							ТекЛист.Cells(РеальныйСчетчикСтрок, число(ЭлементПоведения.ИмяРеквизита)).Value = ЭлементПоведения.ЗначениеРеквизита;
						Иначе
							Если ШаблонФайла.КаждоеПолеНоваяСтрока Тогда
								Если ЗначениеЗаполнено(ШаблонФайла.ЗнакМеждуИменемПоляИЗначением) Тогда
									ФайлИмпортаЭкспорта.ДобавитьСтроку(ЭлементПоведения.ИмяРеквизита + ШаблонФайла.ЗнакМеждуИменемПоляИЗначением + ЭлементПоведения.ЗначениеРеквизита + ШаблонФайла.РазделительПолей);
								Иначе
									ФайлИмпортаЭкспорта.ДобавитьСтроку(ЭлементПоведения.ЗначениеРеквизита + ШаблонФайла.ШаблонФайлаРазделительПолей);
								КонецЕсли;
								
							Иначе
								СтрокаФайлаТекста = СтрокаФайлаТекста + ЭлементПоведения.ЗначениеРеквизита + ШаблонФайла.РазделительПолей;	
							КонецЕсли;
						КонецЕсли;
						УсловиеБылоВыполнено = Истина;
					КонецЕсли;
					
				КонецЦикла; //Для Каждого Поведение ИЗ ЭлементПоведения.ТаблицаПоведения 	
				
				Если УсловиеБылоВыполнено
					И ЭлементПоведения.ВыполнитьПрограммныйКод Тогда
					Попытка 
						Выполнить(ЭлементПоведения.ПрограммныйКод);
						
					Исключение 	
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка выполнения кода поведения:") + " " + ОписаниеОшибки();
						Сообщение.Сообщить();
						
					КонецПопытки;  
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;                 
	КонецЦикла; //Для Каждого ДополнительноеПоведение ИЗ ШаблонФайла.ДополнительноеПоведение 
	
КонецПроцедуры //ИспользоватьДополнительноеПоведениеДляШаблона(ОбъектОперации, ШаблонФайла)

//Возвращаяет значение константы "относительный адрес файлов"
Функция   КонстантыОтносительныйАдресФайловПолучить() Экспорт
	
	Попытка 
		Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортОтносительныйАдресФайлов");
	Исключение 	
		Возврат "";
	КонецПопытки;	
	
КонецФункции 

//Возвращаяет значение константы "относительный адрес файлов"
Функция   КонстантыПодсистемаИЭИмпортЭкспортФСПолучить() Экспорт
	
	Попытка 
		Возврат ОбщийМодульПовтор.получитьЗначениеНастройкиИлиКонстанты("ПодсистемаИЭИмпортЭкспортАдресФайла");
	Исключение 	
		Возврат "";
	КонецПопытки;	
	
КонецФункции 

Процедура КонстантыПодсистемаИЭИмпортЭкспортФСУстановить(Знач АдресФайла) Экспорт	
	
	Попытка 
		Константы.ПодсистемаИЭИмпортЭкспортАдресФайла.Установить(АдресФайла);
	Исключение 	
	КонецПопытки;
	
КонецПроцедуры 

//Получить имя файла с использованием маски дат
Функция   МаскаИмениФайла(АдресФайла, РазделительДаты = ".", ЭтаТекущаяДата = '00010101', ДополнительнаяИнформация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭтаТекущаяДата) Тогда
		ЭтаТекущаяДата = ТекущаяДата();
	КонецЕсли;
	
	ЭтотРасчетныйСчет = ДополнительнаяИнформация.ЭтотРасчетныйСчет;
	ВычисляемыйАдресФайла = АдресФайла;
	
	Если Найти(ВычисляемыйАдресФайла, "#") > 0 Тогда
		ЭтотНомерДня = УбратьНеразрывныйПробел(День(ЭтаТекущаяДата));
		ЭтотНомерДняДополнительно = СокрЛП(День(ЭтаТекущаяДата));
		ЭтотНомерМесяца = УбратьНеразрывныйПробел(Месяц(ЭтаТекущаяДата));
		ЭтотНомерМесяцаДополнительно = СокрЛП(Месяц(ЭтаТекущаяДата));
		ЭтотГодДополнительно = СокрЛП(Год(ЭтаТекущаяДата));
		ЭтотГодЧасть = УбратьНеразрывныйПробел(Год(ЭтаТекущаяДата));
		ЭтотГод = Прав(ЭтотГодЧасть, 2);
		ЭтотНомерДняНедели = СокрЛП(ДеньНедели(ЭтаТекущаяДата));
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#ндн#", ЭтотНомерДняНедели);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#д#", ЭтотНомерДняДополнительно);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#дд#", ЭтотНомерДня);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#м#", ЭтотНомерМесяцаДополнительно);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#мм#", ЭтотНомерМесяца);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#г#", ЭтотГодДополнительно);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#гг#", ЭтотГод);
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#гггг#", ЭтотГодЧасть);
		Если Найти(ВычисляемыйАдресФайла, "#") > 0 Тогда
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#НДН#", ЭтотНомерДняНедели);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#Д#", ЭтотНомерДняДополнительно);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#ДД#", ЭтотНомерДня);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#М#", ЭтотНомерМесяцаДополнительно);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#ММ#",ЭтотНомерМесяца);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#Г#", ЭтотГодДополнительно);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#ГГ#", ЭтотГод);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#ГГГГ#", ЭтотГодЧасть);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "########", ЭтотНомерДня + ЭтотНомерМесяца + ЭтотГодЧасть);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "######", ЭтотНомерДня + ЭтотНомерМесяца + ЭтотГод);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##.##.####", ЭтотНомерДня + "." + ЭтотНомерМесяца + "." + ЭтотГодЧасть);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##.##.##", ЭтотНомерДня + "." + ЭтотНомерМесяца + "." + ЭтотГод);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##-##-####", ЭтотНомерДня + "-" + ЭтотНомерМесяца + "-" + ЭтотГодЧасть);
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##-##-##", ЭтотНомерДня + "-" + ЭтотНомерМесяца + "-" + ЭтотГод);
			Если Найти(ВычисляемыйАдресФайла, "#") > 0 Тогда
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#NDW#", ЭтотНомерДняНедели);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#D#", ЭтотНомерДняДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#DD#",ЭтотНомерДня);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#M#", ЭтотНомерМесяцаДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#MM#",ЭтотНомерМесяца);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#Y#", ЭтотГодДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#YY#",ЭтотГод);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#YYYY#", ЭтотГодЧасть);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#d#", ЭтотНомерДняДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#dd#", ЭтотНомерДня);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#m#", ЭтотНомерМесяцаДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#mm#", ЭтотНомерМесяца);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#y#", ЭтотГодДополнительно);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#yy#", ЭтотГод);
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "#yyyy#", ЭтотГодЧасть);
				Если Найти(ВычисляемыйАдресФайла, "##") > 0 Тогда
					ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##" + РазделительДаты + "##" + РазделительДаты + "##", ЭтотНомерДня + РазделительДаты + ЭтотНомерМесяца + РазделительДаты + ЭтотГод);
					ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##" + РазделительДаты + "##" + РазделительДаты + "####", ЭтотНомерДня + РазделительДаты + ЭтотНомерМесяца + РазделительДаты + ЭтотГодЧасть);
					ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "####",ЭтотНомерДня + ЭтотНомерМесяца);
					Если Найти(ВычисляемыйАдресФайла, "##") > 0 Тогда
						ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##" + "." + "##", ЭтотНомерДня + "." + ЭтотНомерМесяца);
						ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##" + "-" + "##", ЭтотНомерДня + "-" + ЭтотНомерМесяца);
						ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##" + РазделительДаты + "##", ЭтотНомерДня + РазделительДаты + ЭтотНомерМесяца);
						ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "##", ЭтотНомерДня);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЭтотРасчетныйСчет = Неопределено Тогда
		Если Найти(ВычисляемыйАдресФайла, "$$$") > 0 Тогда 
			ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "$$$$$", СокрЛП(ЭтотРасчетныйСчет.НомерСчета));
		КонецЕсли; 
		Если Найти(ВычисляемыйАдресФайла, "$#$") > 0 Тогда
			Если ЗначениеЗаполнено(ЭтотРасчетныйСчет.банк) Тогда 
				ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "$#$#$", СокрЛП(ЭтотРасчетныйСчет.Банк.Код));
			КонецЕсли;
		КонецЕсли; 
		
	Иначе
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "$$$$$", "");
		ВычисляемыйАдресФайла = СтрЗаменить(ВычисляемыйАдресФайла, "$#$#$", "");
	КонецЕсли; 
	
	Возврат ВычисляемыйАдресФайла;
	
КонецФункции // МаскаДат

//Найти Клиента по коду ОКПО (ОКПО)
Функция   НайтиКлиентаПоОКПО(ДанныеОКПО) Экспорт
	
	ЗапросКлиентПоОКПО = Новый Запрос;
	ЗапросКлиентПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Клиенты.Ссылка
	                           |ИЗ
	                           |	Справочник.Клиенты КАК Клиенты
	                           |ГДЕ
	                           |	Клиенты.ОКПО = &ОКПО"; 
	ЗапросКлиентПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));
	
	Выборка = ЗапросКлиентПоОКПО.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		Результат = Выборка.Выбрать();
		Результат.Следующий();
		
		Возврат Результат.Ссылка;		
		
	Иначе 	    		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции //НайтиКлиентаПоОКПО

//Найти Организацию по коду ОКПО (ОКПО)
Функция   НайтиОрганизациюПоОКПО(ДанныеОКПО) Экспорт
	
	ЗапросОргПоОКПО = Новый Запрос;
	ЗапросОргПоОКПО.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Организации.Ссылка
	                           |ИЗ
	                           |	Справочник.Организации КАК Организации
	                           |ГДЕ
	                           |	Организации.ОКПО = &ОКПО"; 
	ЗапросОргПоОКПО.УстановитьПараметр("ОКПО", СокрЛП(ДанныеОКПО));
	
	Выборка = ЗапросОргПоОКПО.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		Результат = Выборка.Выбрать();
		Результат.Следующий();
		
		Возврат Результат.Ссылка;		
		
	Иначе 	    		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

//Найти Клиента по наименованию
Функция   НайтиКлиентаПоНаименованию(НаименованиеКлиента, ИскатьПоПолномуНаименованию = Ложь) 
	
	ЗапросКлиентПоНаименованию = Новый Запрос;
	ЗапросКлиентПоНаименованию.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ " + ?(ИскатьПоПолномуНаименованию, " Клиенты.Наименование = &Наименование", " Клиенты.НаименованиеПолное = &Наименование"); 
	
	ЗапросКлиентПоНаименованию.УстановитьПараметр("Наименование", НаименованиеКлиента);
	Выборка = ЗапросКлиентПоНаименованию.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		Результат = Выборка.Выбрать();
		Результат.Следующий();
		
		Возврат Результат.Ссылка;		
		
	Иначе 			
		Возврат Неопределено;
		
	КонецЕсли;
КонецФункции //НайтиКлиентаПоНаименованию

//Поиск документа или элемента справочника по значению реквизита
Функция   НайтиЭлементИлиДокументПоПолю(ЭтоСправочник = Истина, ТипЭлемента = "Номенклатура", ЭлементДанныхФайла, ИмяПоля) Экспорт
	
	ЗапросЭлементИлиДокументПоПолю = Новый Запрос;
	ЗапросЭлементИлиДокументПоПолю.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	" + ТипЭлемента + ".Ссылка
	|ИЗ
	|	" + ?(ЭтоСправочник, "Справочник", "Документ") + "." + ТипЭлемента + " КАК " + ТипЭлемента + "
	|ГДЕ
	|	" + ТипЭлемента + "." + ИмяПоля + " = &" + ИмяПоля;
	
	ЗапросЭлементИлиДокументПоПолю.УстановитьПараметр(ИмяПоля, ЭлементДанныхФайла);
	
	Выборка = ЗапросЭлементИлиДокументПоПолю.Выполнить();
	Если Не Выборка.Пустой() Тогда
		Результат = Выборка.Выбрать();
		Результат.Следующий();
		
		Возврат Результат.Ссылка;		
		
	Иначе 
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция   НеВыводитьСообщениеОЗавершенииОбмена(ШаблонФайла) Экспорт  	
	Возврат ШаблонФайла.НеВыводитьСообщениеОЗавершенииОбмена;	
КонецФункции //НеВыводитьСообщениеОЗавершенииОбмена

//Определяет в массиве данных элемент соглано поля шаблона обмена
Функция   ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля)
	
	СтрокаПолеИзШаблона = Неопределено ;
	
	Если ТипЗнч(ТипПоля) = Тип("Строка") Тогда
		ТипПоляСтрока = ВРег(ТипПоля);
		Для Каждого СтрокаПолеИзШаблона ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл
			Если СокрЛП(Врег(СтрокаПолеИзШаблона.ПолеТаблицы.Наименование)) = ТипПоляСтрока Тогда
				СтрокаШаблона = СтрокаПолеИзШаблона;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтрокаШаблона = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(ТипПоля, "ПолеТаблицы") ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаШаблона) Тогда
		Попытка 
			Возврат МассивДанныхСтрокиФайла[ СтрокаШаблона.НомерСтроки - 1 ];
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Проверьте число колонок в файле для:") + " " + СтрокаШаблона + " (" + ОписаниеОшибки() + ")";
			Сообщение.Сообщить();
		КонецПопытки;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции //ОтобратьИзМассиваДанныхСтрокиПоПолю

//Добавить и установить параметры запроса, согласно условиям шаблона обмена
Процедура ОбработатьУсловияПоРеквизитам(ЗапросПоОбъектам, ШаблонФайла, ТипОбъектаОперации, УсловиеОпределено = Ложь)
	
	Если ШаблонФайла.ДанныйШаблонИспользоватьТолькоДляОбъектовСОпределеннымиРеквизитами Тогда
		Если ЗначениеЗаполнено(ШаблонФайла.ОтборДляКлиента) Тогда
			ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".Клиент = &Клиент ";
			ЗапросПоОбъектам.УстановитьПараметр("Клиент", ШаблонФайла.ОтборДляКлиента);
			УсловиеОпределено = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонФайла.ОтборДляОрганизации) Тогда
			ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + ".Организация = &Организация ";
			ЗапросПоОбъектам.УстановитьПараметр("Организация", ШаблонФайла.ОтборДляОрганизации);
			УсловиеОпределено = Истина;
			
		КонецЕсли;
		
		Для Каждого РеквизитОбъекта ИЗ ШаблонФайла.ТолькоДляОбъектовСРеквизитами Цикл
			РеквизитОбъектаНаименованиеРеквизита = СокрЛП(РеквизитОбъекта.НаименованиеРеквизита);
			Если РеквизитОбъекта.КачествоУсловия = "НЕ" Тогда
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + "." + РеквизитОбъектаНаименованиеРеквизита + " <> &" + РеквизитОбъектаНаименованиеРеквизита + " ";
				
			ИначеЕсли РеквизитОбъекта.КачествоУсловия = "И"  Тогда
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " И ", " ГДЕ") + " " + ТипОбъектаОперации  + "." + РеквизитОбъектаНаименованиеРеквизита + " = &" + РеквизитОбъектаНаименованиеРеквизита + " ";
				
			Иначе //ИЛИ
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + ?(УсловиеОпределено, " ИЛИ ", " ГДЕ") + " " + ТипОбъектаОперации  + "." + РеквизитОбъектаНаименованиеРеквизита + " = &" + РеквизитОбъектаНаименованиеРеквизита + " ";
				
			КонецЕсли;
			ЗапросПоОбъектам.УстановитьПараметр(РеквизитОбъектаНаименованиеРеквизита, РеквизитОбъекта.ЗначениеРеквизита);
			УсловиеОпределено = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
конецпроцедуры

//загрузка ИЗ файла элемента/ячейки
Функция   ОбнаружитьДанныеПоВидуПоляИзСтроки(ОбъектОперации, 
	ЭлементДанныхФайла, 
	ПолеТаблицы, 
	СтрокаТаблицыИлиЭлемент, 
	ШаблонФайла, 
	МассивДанныхСтрокиФайла, 
	ДанноеПолеКлючевоеДляПоискаИЗаписи = Ложь, 
	ПериодДляДокументов = "",
	СубРеквизит = 0,
	ИмяПоляВФайлеИзТаблицы,
	СубПоле = "",
	ИмяТаблицыШаблонаФайла = "",
	ЕслиНеЗаполненоЗначитПринимаетПредыдущееЗначение = ложь,
	НомерСтроки,
	ЭтоЗагрузкаСписка,
	СтруктураИмпортаЭкспорта,
	ТаблицаОбработанныхОбъектов,
	ШаблонФайлаВидШаблонаДляРегистровСведений = Ложь
	); 
	
	СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия = ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия;
	
	ЗначениеДанных = Неопределено ;
	ВзятьЧисло = Ложь;
	ПоказатьСообщениеТут = Ложь;
	ТипПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля;
	
	
	Если ШаблонФайла.ВыполнятьПрограммы 
		И ЗначениеЗаполнено(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля) Тогда
		
		Выполнить(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля);
		
	КонецЕсли;
	
	Если СубРеквизит > 0 Тогда
		Если ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
			Попытка 
				Если ЭтоЗагрузкаСписка Тогда
					ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ] = Справочники[ ОбъектОперации.метаданные().имя ].найтипоРеквизиту(СубПоле,СокрЛП(ЭлементДанныхФайла));	
				Иначе
					СтрокаТаблицыИлиЭлемент[ ИмяПоляВФайлеИзТаблицы ] = Справочники[ СтрокаТаблицыИлиЭлемент.метаданные().имя ].найтипоРеквизиту(СубПоле,СокрЛП(ЭлементДанныхФайла));	
				КонецЕсли;
			Исключение 	
				Попытка 
					Если ЭтоЗагрузкаСписка Тогда
						ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ] = Документы[ ОбъектОперации.метаданные().имя ].найтипоРеквизиту(СубПоле,СокрЛП(ЭлементДанныхФайла));	
					Иначе
						СтрокаТаблицыИлиЭлемент[ ИмяПоляВФайлеИзТаблицы ] = Документы[ СтрокаТаблицыИлиЭлемент.метаданные().имя ].найтипоРеквизиту(СубПоле,СокрЛП(ЭлементДанныхФайла));	
					КонецЕсли;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка") + " " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки;
			КонецПопытки;	
			
		Иначе  //что с ним делать при загрузке, если оно не ключевое?
			
		КонецЕсли;
		
	ИначеЕсли НЕ ПолеТаблицы.Предопределенный Тогда
		
		Если ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы 
			ИЛИ ЭтоЗагрузкаСписка Тогда
			
			ТипТутДляПроверки = ТипЗнч(ОбъектОперации[ ПолеТаблицы.Наименование ]);
		Иначе
			ТипТутДляПроверки = ТипЗнч(СтрокаТаблицыИлиЭлемент[ ПолеТаблицы.Наименование ]);
		КонецЕсли;
		
		Если ТипТутДляПроверки = Тип("Число") Тогда
			ВзятьЧисло = Истина;
		ИначеЕсли ТипТутДляПроверки = Тип("Строка") Тогда
			ЗначениеДанных = СокрЛП(ЭлементДанныхФайла);
		ИначеЕсли ТипТутДляПроверки = Тип("Дата") Тогда
			ЭлементДанныхФайла = ПроверитьДатаЛи(ЭлементДанныхФайла) ;
			попытка
				ЗначениеДанных = дата(ЭлементДанныхФайла);
			исключение
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату: ");
			конецпопытки;
		Иначе //справочник, документ, перечисление
			
			Если ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
				Попытка 
					ЗначениеДанных = ЭлементДанныхФайла;
				Исключение 	
					//подборы п о справочникам не работают из-за отсутсвия метаданных
					//!!!
					
				КонецПопытки;
				
				
			Иначе 				
				попытка
					
					Если ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы 
						ИЛИ ИмяТаблицыШаблонаФайла = "" Тогда
						
						Попытка 
							МетаданныеПараметраКоманды = ОбъектОперации[ ПолеТаблицы.Наименование ].метаданные().имя; //ОбъектОперации.Метаданные().Реквизиты[ ПолеТаблицы.Наименование ].Имя;
						Исключение 	
							Попытка 
								МетаданныеПараметраКоманды = ОбъектОперации.Метаданные().СтандартныеРеквизиты[ ПолеТаблицы.Наименование ].Имя;
							Исключение 	
								ПоказатьСообщениеТут = Истина;
								СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
								
							КонецПопытки;
						КонецПопытки;
						
						Если не МетаДанные.Справочники.Найти(МетаданныеПараметраКоманды) = Неопределено Тогда
							ЗначениеДанных = Справочники[ ОбъектОперации[ ПолеТаблицы.Наименование ].метаданные().имя ].найтипоНаименованию(СокрЛП(ЭлементДанныхФайла));
						ИначеЕсли не МетаДанные.Документы.Найти(МетаданныеПараметраКоманды) = Неопределено Тогда
							ЗначениеДанных = Документы[ ОбъектОперации[ ПолеТаблицы.Наименование ].метаданные().имя ].найтипоНомеру(СокрЛП(ЭлементДанныхФайла));
						ИначеЕсли не МетаДанные.Перечисления.Найти(МетаданныеПараметраКоманды) = Неопределено Тогда
							ЗначениеДанных = Перечисления[ ОбъектОперации[  ПолеТаблицы.Наименование ].метаданные().имя ][ СокрЛП(ЭлементДанныхФайла) ];
						КонецЕсли;	
					Иначе
						//!!
						//когда несколько типов у одного реквизита - он неопределен
						МатаданныеЭлементаТаблицы = ОбъектОперации[ ИмяТаблицыШаблонаФайла ][ 0 ][ ПолеТаблицы.Наименование ].Метаданные().имя;
						Если не МетаДанные.Справочники.Найти(МатаданныеЭлементаТаблицы) = Неопределено Тогда
							ЗначениеДанных = Справочники[ МатаданныеЭлементаТаблицы ].найтипоНаименованию(СокрЛП(ЭлементДанныхФайла));
						ИначеЕсли не МетаДанные.Документы.Найти(МатаданныеЭлементаТаблицы) = Неопределено Тогда
							ЗначениеДанных = Документы[ МатаданныеЭлементаТаблицы ].найтипоНомеру( СокрЛП(ЭлементДанныхФайла));
						ИначеЕсли не МетаДанные.Перечисления.Найти(МатаданныеЭлементаТаблицы) = Неопределено Тогда
							ЗначениеДанных = Перечисления[ МатаданныеЭлементаТаблицы ][ СокрЛП(ЭлементДанныхФайла) ];
						КонецЕсли;	
					КонецЕсли;
				исключение
					ПоказатьСообщениеТут = Истина;
					СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно обнаружить") + " " + ОписаниеОшибки() + ": ";
					
				конецпопытки;	
			КонецЕсли;
			//!!!
		КонецЕсли; 
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОбъектПомеченНаУдаление Тогда
		ЗначениеДанных = ?(число(ЭлементДанныхФайла) = 1, Истина, Ложь);		
		Если ШаблонФайла.НеПропускатьОбъектыПомеченныеНаУдаление и ЗначениеДанных Тогда
			ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДокументПроведен Тогда
		ЗначениеДанных = ?(число(ЭлементДанныхФайла) = 1, Истина, Ложь);
		Если ШаблонФайла.НеПропускатьНепроведенныеДокументы И НЕ ЗначениеДанных Тогда
			ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
		КонецЕсли;
							
	ИначеЕсли ПолеТаблицы = ТипПоля.ЭлементПредопределенный Тогда
		ЗначениеДанных = ?(число(ЭлементДанныхФайла) = 1, Истина, Ложь);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ЭлементЭтоГруппа Тогда
		ОбъектОперации.ЭтоГруппа = ?(число(ЭлементДанныхФайла) = 1, Истина, Ложь);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ВладелецЭлемента Тогда
		Если НЕ СокрЛП(ЭлементДанныхФайла) = "" Тогда
			ОбъектОперации.Владелец = Справочники[ ОбъектОперации.Владелец.метаданные().имя ].найтипоНаименованию( СокрЛП(ЭлементДанныхФайла));
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ВладельцаЭлементаКод Тогда
		Если НЕ СокрЛП(ЭлементДанныхФайла) = "" Тогда
			ОбъектОперации.Владелец = Справочники[ ОбъектОперации.Владелец.метаданные().имя ].найтипоКоду( СокрЛП(ЭлементДанныхФайла));
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.РодительЭлемента Тогда
		
		Если НЕ СокрЛП(ЭлементДанныхФайла) = "" Тогда
			Если ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей) Тогда
				ИмяРодителя = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, 2);
				Если ЗначениеЗаполнено(ИмяРодителя) Тогда			
					РодительЭлемента = Справочники[ ОбъектОперации.метаданные().имя ].найтипоНаименованию(ИмяРодителя) ;
					Если ЗначениеЗаполнено(РодительЭлемента) и РодительЭлемента.ЭтоГруппа Тогда
						ОбъектОперации.Родитель = РодительЭлемента;
					ИначеЕсли ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
						РодительЭлемента = Справочники[ ОбъектОперации.метаданные().имя ].СоздатьГруппу() ;
						РодительЭлемента.Родитель = ШаблонФайла.ГруппаДляНовойНоменклатуры;		
						РодительЭлемента.Наименование = ИмяРодителя;
						Попытка 
							Если Не СтруктураИмпортаЭкспорта.РежимТестирования Тогда
								Попытка 
									Если ШаблонФайла.УстанавливатьФлагОбменаЗагрузки Тогда
										РодительЭлемента.ОбменДанными.загрузка = Истина;
									КонецЕсли;
								Исключение 	
								КонецПопытки;
								РодительЭлемента.Записать();
								Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
									ТаблицаОбработанныхОбъектов.Добавить(РодительЭлемента.ссылка);
								КонецЕсли;
								ОбъектОперации.Родитель = РодительЭлемента.Ссылка;	
							КонецЕсли;
						Исключение 	
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи родителя эл-та справочника:") + " " + РодительЭлемента + " " + ОписаниеОшибки();
							
						КонецПопытки;  //записи  
					Иначе
						Попытка 
							ОбъектОперации.Родитель = Справочники[ ОбъектОперации.метаданные().имя ].найтипоНаименованию( СокрЛП(ЭлементДанныхФайла));
						Исключение 	
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст =  ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
							
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				родитель = Справочники[ ОбъектОперации.метаданные().имя ].найтипоНаименованию( СокрЛП(ЭлементДанныхФайла));
				если ЗначениеЗаполнено(родитель)
					и родитель.этогруппа тогда
					
					ОбъектОперации.Родитель = родитель;	
				иначе
					если СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия тогда
						родительО = Справочники[ ОбъектОперации.метаданные().имя ].СоздатьГруппу();
						родительО.наименование = СокрЛП(ЭлементДанныхФайла);
						родительО.записать();
					иначе		 
						ПоказатьСообщениеТут = Истина;
						СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет группы:") + " " + СокрЛП(ЭлементДанныхФайла) + " ";	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.РодителяЭлементаКод Тогда
		Если НЕ СокрЛП(ЭлементДанныхФайла) = "" Тогда
			Если ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей) Тогда
				ИмяРодителя = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, 2);
				Если ЗначениеЗаполнено(ИмяРодителя) Тогда			
					РодительЭлемента = Справочники[ ОбъектОперации.метаданные().имя ].найтипоНаименованию(ИмяРодителя) ;
					Если ЗначениеЗаполнено(РодительЭлемента) и РодительЭлемента.ЭтоГруппа Тогда
						ОбъектОперации.Родитель = РодительЭлемента;
					ИначеЕсли ШаблонФайла.СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
						РодительЭлемента = Справочники[ ОбъектОперации.метаданные().имя ].СоздатьГруппу() ;
						РодительЭлемента.Родитель = ШаблонФайла.ГруппаДляНовойНоменклатуры;		
						РодительЭлемента.Наименование = ИмяРодителя;
						Попытка 
							Если Не СтруктураИмпортаЭкспорта.РежимТестирования Тогда
								Попытка 
									Если ШаблонФайла.УстанавливатьФлагОбменаЗагрузки Тогда
										РодительЭлемента.ОбменДанными.загрузка = Истина;
									КонецЕсли;
								Исключение 	
								КонецПопытки;
								РодительЭлемента.Записать();
								Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
									ТаблицаОбработанныхОбъектов.Добавить(РодительЭлемента.ссылка);
								КонецЕсли;
								ОбъектОперации.Родитель = РодительЭлемента.Ссылка;	
							КонецЕсли;
						Исключение 	
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи родителя эл-та справочника:") + " " + РодительЭлемента + " " + ОписаниеОшибки();
							
						КонецПопытки;  //записи  
					КонецЕсли;
				КонецЕсли;
			Иначе
				родитель = Справочники[ ОбъектОперации.метаданные().имя ].найтипоКоду( СокрЛП(ЭлементДанныхФайла));
				если ЗначениеЗаполнено(родитель)
					и родитель.этогруппа тогда
					ОбъектОперации.Родитель = родитель;	
				иначе
					ПоказатьСообщениеТут = Истина;
					СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет группы с кодом:") + " " + СокрЛП(ЭлементДанныхФайла) + " ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Всего Тогда
		ВзятьЧисло = Истина;
		
		//ИначеЕсли ПолеТаблицы = ТипПоля.ПлощадьОбъем Тогда
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	
		//	Попытка
		//		ОбъектОперации.SZПлощадьОбъем = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		//		
		//	Исключение
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Размер3 номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	Конецпопытки;
		//	
		//ИначеЕсли ПолеТаблицы = ТипПоля.Размер1 Тогда
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	ОбъектОперации.SZРазмер1 = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		//	попытка
		//		Выполнить("ОбъектОперации.SZПлощадьОбъем = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ПлощадьОбъем(ОбъектОперации); ");
		//	Исключение 	
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Размер1 номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	КонецПопытки;
		//	
		//ИначеЕсли ПолеТаблицы = ТипПоля.Размер2 Тогда
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	ОбъектОперации.SZРазмер2 = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		//	Попытка
		//		Выполнить("ОбъектОперации.SZПлощадьОбъем = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ПлощадьОбъем(ОбъектОперации); ");
		//	Исключение 	
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Размер2 номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	КонецПопытки;
		//	
		//ИначеЕсли ПолеТаблицы = ТипПоля.Размер3 Тогда
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	ОбъектОперации.SZРазмер3 = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		//	Попытка
		//		Выполнить("ОбъектОперации.SZПлощадьОбъем = ПодсистемаИЭДополнительныеМеханизмыУчетаИАнализаНоменклатуры.ПлощадьОбъем(ОбъектОперации); ");
		//	Исключение 	
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Размер3 номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	КонецПопытки;
		//	
	ИначеЕсли ПолеТаблицы = ТипПоля.Производитель Тогда
		
		ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		
		//		Попытка
		Производитель = Справочники.Производители.НайтиПоНаименованию(ЭлементДанныхФайла) ;//.SZМаркиНоменклатуры.НайтиПоНаименованию(ЭлементДанныхФайла) ;
		
		Если НЕ ЗначениеЗаполнено(Производитель) 
			И ЗначениеЗаполнено(ЭлементДанныхФайла) 
			И шаблонФайла.СоздаватьМаркиНоменклатуры Тогда
			
			Производитель = Справочники.Производители.СоздатьЭлемент();//.SZМаркиНоменклатуры.СоздатьЭлемент() ;
			Производитель.Наименование = ЭлементДанныхФайла;
			//				Производитель.НаименованиеПолное = ЭлементДанныхФайла;
			Попытка 
				Если Не СтруктураИмпортаЭкспорта.РежимТестирования Тогда
					Попытка 
						Если ШаблонФайла.УстанавливатьФлагОбменаЗагрузки Тогда
							Производитель.ОбменДанными.загрузка = Истина;
						КонецЕсли;
					Исключение 	
					КонецПопытки;
					Производитель.Записать();
					Производитель = Производитель.Ссылка;
					
					Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
						ТаблицаОбработанныхОбъектов.Добавить(Производитель.ссылка);
					КонецЕсли;
					
				КонецЕсли;
			Исключение 	
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи эл-та справочника:") + " " + Производитель + " " + ОписаниеОшибки();
				
			КонецПопытки;  //записи  МетодПолучения
		КонецЕсли;
		
		если ЗначениеЗаполнено(Производитель) тогда
			Если ЭтоЗагрузкаСписка Тогда
				номенклатура = ОбъектОперации.номенклатура;	
				Если ЗначениеЗаполнено(номенклатура) Тогда
					номенклатураОбъект = номенклатура.ПолучитьОбъект();
					номенклатураОбъект.Производитель = Производитель ;
					номенклатураОбъект.Записать();
				КонецЕсли;
				
			Иначе
				ОбъектОперации.Производитель = Производитель;
				
			КонецЕсли;	
		КонецЕсли;
		//Исключение 	
		//	ПоказатьСообщениеТут = Истина;
		//	СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Производитель номенклатуры может быть установлена только при использовании соответствующей версии ПО.:") + " " + ОписаниеОшибки();
		//	
		//КонецПопытки;
		
		//ИначеЕсли ПолеТаблицы = ТипПоля.МетодПолучения Тогда
		//	
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	
		//	Попытка            			
		//		ОбъектОперации.SZМетодПолучения = Справочники.SZМетодыПолученияНоменклатуры.НайтиПоНаименованию(ЭлементДанныхФайла) ;
		//		
		//		Если НЕ ЗначениеЗаполнено(ОбъектОперации.SZМетодПолучения) И ЗначениеЗаполнено(ЭлементДанныхФайла) И шаблонФайла.СоздаватьМетодыПолученияНоменклатуры Тогда
		//			МетодПолучения = Справочники.SZМетодыПолученияНоменклатуры.СоздатьЭлемент() ;
		//			МетодПолучения.Наименование = ЭлементДанныхФайла;
		//			МетодПолучения.НаименованиеПолное = ЭлементДанныхФайла;
		//			Попытка 
		//				Если Не СтруктураИмпортаЭкспорта.РежимТестирования Тогда
		//					Попытка 
		//						Если ШаблонФайла.УстанавливатьФлагОбменаЗагрузки Тогда
		//							МетодПолучения.ОбменДанными.загрузка = Истина;
		//						КонецЕсли;
		//					Исключение 	
		//					КонецПопытки;
		//					МетодПолучения.Записать();
		//					Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
		//						ТаблицаОбработанныхОбъектов.Добавить(МетодПолучения.ссылка);
		//					КонецЕсли;
		//					ОбъектОперации.SZМетодПолучения = МетодПолучения.Ссылка;	
		//				КонецЕсли;
		//			Исключение 	
		//				ПоказатьСообщениеТут = Истина;
		//				СообщениеТекст = "Ошибка при попытке записи эл-та справочника: " + МетодПолучения + " "+ОписаниеОшибки();
		//				
		//			КонецПопытки;  //записи  МетодПолучения
		//		КонецЕсли;
		//	Исключение 	
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Метод получения номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	КонецПопытки;
		//	
		//ИначеЕсли ПолеТаблицы = ТипПоля.ВесНоменклатуры Тогда
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	
		//	Попытка
		//		ОбъектОперации.SZВес = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		//	Исключение 	
		//		ПоказатьСообщениеТут = Истина;
		//		СообщениеТекст = "Вес номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//		
		//	КонецПопытки;
		
		//	ИначеЕсли ПолеТаблицы = ТипПоля.ДополнительныйКодНоменклатуры Тогда
		//ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//
		//попытка
		//	ОбъектОперации.ПодсистемаИЭДополнительныйКод = Справочники.ПодсистемаИЭДополнительныеКодыНоменклатуры.НайтиПоНаименованию(ЭлементДанныхФайла) ;
		//Исключение 	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Дополнительный код номенклатуры может быть установлен только при использовании соответствующей версии ПО.: " + ОписаниеОшибки();
		//	Сообщение.Сообщить();
		//	
		//КонецПопытки;
		
		//
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерПлатежногоДокумента Тогда		
		ОбъектОперации.НомерПлатежногоДокумента = СокрЛП(ЭлементДанныхФайла);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НоменклатурнаяГруппаНоменклатуры Тогда		
		ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		ОбъектОперации.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(ЭлементДанныхФайла);
		
		//ИначеЕсли ПолеТаблицы = ТипПоля.СтруктурнаяЕдиница Тогда		
		//	ЗначениеДанных = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(ЭлементДанныхФайла) ;
		//	
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаОтгрузки Тогда		
		ЭлементДанныхФайла = ПроверитьДатаЛи(ЭлементДанныхФайла, ШаблонФайла.РазделительДаты) ;
		попытка
			ЗначениеДанных = дата(ЭлементДанныхФайла);
		исключение
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату отгрузки: ");
		конецпопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаПоступления Тогда		
		ЭлементДанныхФайла = ПроверитьДатаЛи(ЭлементДанныхФайла, ШаблонФайла.РазделительДаты) ;
		попытка
			ЗначениеДанных = дата(ЭлементДанныхФайла);
		исключение
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату поступления: ");
		конецпопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДоляСтоимости Тогда		
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.СуммаРасходов Тогда		
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Количество 
		ИЛИ ПолеТаблицы = ТипПоля.Количество1000 Тогда		
		
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.АртикулНоменклатуры Тогда
		
		Если ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
			
			Если ЭтоЗагрузкаСписка Тогда
				Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.Ссылка);
				Иначе
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.Номенклатура);	
				КонецЕсли;
				
			Иначе                            
				ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура)  ;
			КонецЕсли;
			
			Если НЕ ЗначениеНоменклатураЗаполнено Тогда			
				
				ЭлементДанныхФайла = СокрЛП(СтрЗаменить(СокрЛП(ЭлементДанныхФайла), Символы.НПП, ""));
				если не ЭлементДанныхФайла = "" Тогда
					
					РезНайтиНоменклатуруПоАртикулу = НайтиЭлементИлиДокументПоПолю(Истина, "Номенклатура", ЭлементДанныхФайла, "Артикул");
					
					Если ЗначениеЗаполнено(РезНайтиНоменклатуруПоАртикулу) Тогда				
						
						Если ШаблонФайла.ОбновлятьЗначенияПрочихПолей Тогда
							РезНайтиНоменклатуруПоАртикулу = ОбновитьЭлементНоменклатуры(РезНайтиНоменклатуруПоАртикулу, ?(ЭтоЗагрузкаСписка, ОбъектОперации, СтрокаТаблицыИлиЭлемент), ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);
						КонецЕсли;
						
						Если ЭтоЗагрузкаСписка Тогда
							Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
								ОбъектОперации = РезНайтиНоменклатуруПоАртикулу.ПолучитьОбъект();
							Иначе
								ОбъектОперации.Номенклатура = РезНайтиНоменклатуруПоАртикулу.ссылка;
							КонецЕсли;
						Иначе
							СтрокаТаблицыИлиЭлемент.Номенклатура = РезНайтиНоменклатуруПоАртикулу.ссылка;					
						КонецЕсли;
					Иначе
						
						Если СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
							СоздатьЭлементНоменклатура = СоздатьЭлементНоменклатуры(?(ЭтоЗагрузкаСписка, ОбъектОперации, СтрокаТаблицыИлиЭлемент), ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);
							Если ЗначениеЗаполнено(СоздатьЭлементНоменклатура) Тогда							
								
								Если ЭтоЗагрузкаСписка Тогда
									Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
										ОбъектОперации = СоздатьЭлементНоменклатура.ПолучитьОбъект();	
										
									Иначе
										ОбъектОперации.номенклатура = СоздатьЭлементНоменклатура.ссылка;		
									КонецЕсли;
								Иначе
									СтрокаТаблицыИлиЭлемент.Номенклатура = СоздатьЭлементНоменклатура;
								КонецЕсли;
							Иначе
								ПоказатьСообщениеТут = Истина;
								СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номенклатура по артикулу не создана: ");
							КонецЕсли;
						Иначе
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не обнаружена номенклатура по артикулу: ");
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоЗагрузкаСписка 
			и НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
			
			ОбъектОперации.Артикул = ЭлементДанныхФайла;
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ШтрихКод Тогда				//еще не нашли?
		
		Если ЭтоЗагрузкаСписка Тогда
			Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
				ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.Ссылка);
			Иначе
				ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.номенклатура);	
			КонецЕсли;
		Иначе
			ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура)
		КонецЕсли;
		
		Если НЕ ЗначениеНоменклатураЗаполнено  тогда
			
			Запрос4 = Новый Запрос;
			Запрос4.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ОсновнойШтрихКод = &ОсновнойШтрихКод
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура.ПометкаУдаления";
			
			Запрос4.УстановитьПараметр("ОсновнойШтрихКод", ЭлементДанныхФайла);
			
			РезультатЗапроса4 = Запрос4.Выполнить();
			
			ВыборкаДетальныеЗаписи4 = РезультатЗапроса4.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи4.Следующий() Цикл
				СтрокаТаблицыИлиЭлемент.Номенклатура = ВыборкаДетальныеЗаписи4.ссылка;
			КонецЦикла;
			
			ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура)		
		КонецЕсли;
		
		Если НЕ ЗначениеНоменклатураЗаполнено  
			ИЛИ ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
			
			ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
			если не ЭлементДанныхФайла = "" Тогда
				ЗапНоменклатураПоШК = Новый Запрос;
				ЗапНоменклатураПоШК.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ШтрихКоды.Номенклатура
				|ИЗ
				|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
				|ГДЕ
				|	ШтрихКоды.ШтрихКод = &ШтрихКод"; //ВЫБРАТЬ ПЕРВЫЕ 1
				ЗапНоменклатураПоШК.УстановитьПараметр("ШтрихКод", ЭлементДанныхФайла);
				ВзНоменклатураПоШК = ЗапНоменклатураПоШК.Выполнить();
				Если Не ВзНоменклатураПоШК.Пустой() Тогда
					РезНоменклатураПоШК = ВзНоменклатураПоШК.Выбрать();
					РезНоменклатураПоШК.Следующий();
					Если ЭтоЗагрузкаСписка Тогда
						Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
							ОбъектОперации = РезНоменклатураПоШК.Номенклатура.ПолучитьОбъект();
						Иначе
							ОбъектОперации.Номенклатура = РезНоменклатураПоШК.Номенклатура;
						КонецЕсли;
						
					Иначе
						СтрокаТаблицыИлиЭлемент.Номенклатура = РезНоменклатураПоШК.Номенклатура;
					КонецЕсли;
					
				Иначе 	//запрос пуст!
					Если СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
						СоздатьЭлементНоменклатура = СоздатьЭлементНоменклатуры(ОбъектОперации, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);	
						Если ЭтоЗагрузкаСписка Тогда
							Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
								ОбъектОперации = СоздатьЭлементНоменклатура.ПолучитьОбъект();
							Иначе
								ОбъектОперации.Номенклатура = СоздатьЭлементНоменклатура.Ссылка;
							КонецЕсли;
						Иначе
							СтрокаТаблицыИлиЭлемент.Номенклатура = СоздатьЭлементНоменклатура;	
						КонецЕсли;
					Иначе
						ПоказатьСообщениеТут = Истина;
						СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не обнаружена номенклатура по ШтрихКоду: ");	
					КонецЕсли;
					
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Номенклатура Тогда		//еще не нашли?
		
		Если ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
			
			Если ЭтоЗагрузкаСписка Тогда
				Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.Ссылка);
				Иначе
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.номенклатура);	
				КонецЕсли;
				
			Иначе
				ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура);
			КонецЕсли;
			
			Если НЕ ЗначениеНоменклатураЗаполнено Тогда
				
				Если ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей) Тогда
					ЭлементДанныхФайла = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, 0);
				Иначе 
					ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
				КонецЕсли;
				
				если не ЭлементДанныхФайла = "" Тогда
					РезНоменклатураПоНаименованию = Справочники.Номенклатура.НайтиПоНаименованию(ЭлементДанныхФайла) ;
					Если ЗначениеЗаполнено(РезНоменклатураПоНаименованию) 
						И НЕ РезНоменклатураПоНаименованию.ЭтоГруппа Тогда
						
						Если ЭтоЗагрузкаСписка Тогда
							Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
								ОбъектОперации = РезНоменклатураПоНаименованию.ПолучитьОбъект();
							Иначе
								ОбъектОперации.Номенклатура = РезНоменклатураПоНаименованию.Ссылка;
							КонецЕсли;
						Иначе
							СтрокаТаблицыИлиЭлемент.Номенклатура = РезНоменклатураПоНаименованию;					
						КонецЕсли;
						
					Иначе 	//запрос пуст!
						Если СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
							Если ЭтоЗагрузкаСписка Тогда
								Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
									ОбъектОперации.Наименование = ЭлементДанныхФайла;
									Если НЕ ЗначениеЗаполнено(ОбъектОперации.НаименованиеПолное) Тогда
										ОбъектОперации.НаименованиеПолное = ЭлементДанныхФайла;
									КонецЕсли;
								Иначе
									ОбъектОперации.Номенклатура = СоздатьЭлементНоменклатуры(ОбъектОперации, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);	
									
								КонецЕсли;
								//собственно номенклатуру и загружаем
							Иначе
								СоздатьЭлементНоменклатура = СоздатьЭлементНоменклатуры(СтрокаТаблицыИлиЭлемент, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);	
								СтрокаТаблицыИлиЭлемент.Номенклатура = СоздатьЭлементНоменклатура;	
							КонецЕсли;
						Иначе
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не обнаружена номенклатура по Наименованию: ");	
						КонецЕсли;
						
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоЗагрузкаСписка 
			и НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
			
			ОбъектОперации.Наименование = ЭлементДанныхФайла;
			
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НоменклатурыКод Тогда		//еще не нашли?
		
		Если ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
			Если ЭтоЗагрузкаСписка Тогда
				Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.Ссылка);
				Иначе
					ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(ОбъектОперации.номенклатура);	
				КонецЕсли;
			Иначе
				ЗначениеНоменклатураЗаполнено = ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура)
			КонецЕсли;
			
			Если НЕ ЗначениеНоменклатураЗаполнено Тогда			
				
				ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
				если не ЭлементДанныхФайла = "" Тогда
					
					ЗапНоменклатураПоНаименованию = Новый Запрос;
					ЗапНоменклатураПоНаименованию.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	Номенклатура.Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.Код = &Код"; //ВЫБРАТЬ ПЕРВЫЕ 1
					
					ЗапНоменклатураПоНаименованию.УстановитьПараметр("Код", ЭлементДанныхФайла);
					ВзНоменклатураПоНаименованию = ЗапНоменклатураПоНаименованию.Выполнить();
					Если Не ВзНоменклатураПоНаименованию.Пустой() Тогда
						РезНоменклатураПоНаименованию = ВзНоменклатураПоНаименованию.Выбрать();
						РезНоменклатураПоНаименованию.Следующий();
						Если ЭтоЗагрузкаСписка Тогда
							Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
								ОбъектОперации = РезНоменклатураПоНаименованию.ссылка.ПолучитьОбъект();	
							Иначе
								ОбъектОперации.Номенклатура = РезНоменклатураПоНаименованию.ссылка	;
							КонецЕсли;
						Иначе
							СтрокаТаблицыИлиЭлемент.Номенклатура = РезНоменклатураПоНаименованию.ссылка;	
						КонецЕсли;
						
					Иначе 	//запрос пуст!
						Если СоздаватьЭлементыСправочникаНоменклатураВСлучаеИхОтсутствия Тогда
							СоздатьЭлементНоменклатура = СоздатьЭлементНоменклатуры(СтрокаТаблицыИлиЭлемент, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов);	
							Если ЭтоЗагрузкаСписка Тогда
								Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
									ОбъектОперации = СоздатьЭлементНоменклатура.ПолучитьОбъект();		
								Иначе
									ОбъектОперации.Номенклатура = СоздатьЭлементНоменклатура.Ссылка;		
								КонецЕсли;
							Иначе
								СтрокаТаблицыИлиЭлемент.Номенклатура = СоздатьЭлементНоменклатура;	
							КонецЕсли;
						Иначе
							ПоказатьСообщениеТут = Истина;
							СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не обнаружена номенклатура по Коду: ");	
						КонецЕсли;
						
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоЗагрузкаСписка 
			и НЕ ШаблонФайлаВидШаблонаДляРегистровСведений Тогда
			
			ОбъектОперации.Код = ЭлементДанныхФайла;
			
		КонецЕсли;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПроцентСкидки Тогда
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Сумма Тогда
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Цена Тогда
		ВзятьЧисло = Истина;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерДокумента Тогда
		ОбъектОперации.Номер = СокрЛП(ЭлементДанныхФайла);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаДокумента Тогда
		ЭлементДанныхФайла = ПроверитьДатаЛи(ЭлементДанныхФайла, ШаблонФайла.РазделительДаты);
		
		попытка
			ЭлементДанныхФайла = дата(ЭлементДанныхФайла);
			Если НЕ ПериодДляДокументов = "" И 
				((ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) И ЭлементДанныхФайла > ПериодДляДокументов.ДатаОкончания) 
				ИЛИ (ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала) И ЭлементДанныхФайла < ПериодДляДокументов.ДатаНачала)) Тогда
				ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = "Пропущен - вне периода: ";
				
			Иначе
				ОбъектОперации.Дата = ЭлементДанныхФайла;
			КонецЕсли;
		исключение
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату документа: ");
			
			Если ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
				ОбъектОперации.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			ИначеЕсли ЗначениеЗаполнено(ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
				ОбъектОперации.Дата = ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
			КонецЕсли;
			
		конецпопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОПлательщика Тогда
		Если ОбъектОперации.ПриходДенег Тогда
			ОбъектОперации.КлиентПоставщик = ОбщийМодульСервер.НайтиКонтрагентаПоОКПО(СокрЛП(ЭлементДанныхФайла));
		Иначе
			ОбъектОперации.Организация = НайтиОрганизациюПоОКПО(СокрЛП(ЭлементДанныхФайла));
		КонецЕсли;		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОПолучателя Тогда
		Если ОбъектОперации.ПриходДенег Тогда
			ОбъектОперации.Организация = НайтиОрганизациюПоОКПО(СокрЛП(ЭлементДанныхФайла));			
		Иначе
			ОбъектОперации.КлиентПоставщик = ОбщийМодульСервер.НайтиКонтрагентаПоОКПО(СокрЛП(ЭлементДанныхФайла));
		КонецЕсли;		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКонтрагента Тогда
		ОбъектОперации.КлиентПоставщик = ОбщийМодульСервер.НайтиКонтрагентаПоОКПО(СокрЛП(ЭлементДанныхФайла));
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКлиента Тогда
		Попытка 
			ОбъектОперацииКлиент = НайтиКлиентаПоОКПО( СокрЛП(ЭлементДанныхФайла));
			Если ОбъектОперацииКлиент = Неопределено Тогда
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет Клиента с ОКПО: ");
			Иначе
				ОбъектОперации.Клиент = ОбъектОперацииКлиент ;
			КонецЕсли;
		Исключение 	
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка заполнения поля Клиент: ");
		КонецПопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеКлиента Тогда
		Попытка 
			ОбъектОперацииКлиент = НайтиКлиентаПоНаименованию(СокрЛП(ЭлементДанныхФайла));
			Если ОбъектОперацииКлиент = Неопределено Тогда 
				ОбъектОперацииКлиент = НайтиКлиентаПоНаименованию(СокрЛП(ЭлементДанныхФайла), Истина);
				Если ОбъектОперацииКлиент = Неопределено 
					И ДанноеПолеКлючевоеДляПоискаИЗаписи Тогда
					
					ПоказатьСообщениеТут = Истина;
					СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет Клиента с Наименованием: ");
				Иначе
					ОбъектОперации.Клиент = ОбъектОперацииКлиент ;
				КонецЕсли;
			Иначе
				ОбъектОперации.Клиент = ОбъектОперацииКлиент ;
			КонецЕсли;
		Исключение 	
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка заполнения поля Клиент: ");
		КонецПопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.СуммаСНДСДокумента Тогда
		Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "СуммаДокумента", "") = "" Тогда
			
			Попытка 
				ОбъектОперации.СуммаДокумента = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
			Исключение 	
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не приводится к числу сумма с НДС: ");
			КонецПопытки;
		Иначе
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У документа нет реквизита СуммаДокумента: ");
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ВидПлатежногоДокумента Тогда
		//?
		ПоказатьСообщениеТут = Истина;
		СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Вид платежного документа не используется.");
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ТипОбъекта Тогда
		//?
		ПоказатьСообщениеТут = Истина;
		СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Тип объекта не используется.");
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДеньДатыДокумента Тогда
		
		Попытка
			ДеньДатыДокумента = Число(ЭлементДанныхФайла);
			МесяцДатыДокумента = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.МесяцДатыДокумента);
			ГодДатыДокумента = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ТипПоля.ГодДатыДокумента);
			ЭлементДанныхФайла = Дата(ГодДатыДокумента, МесяцДатыДокумента, ДеньДатыДокумента);
			
			Если НЕ ПериодДляДокументов = "" И 
				((ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) И ЭлементДанныхФайла > ПериодДляДокументов.ДатаОкончания) 
				ИЛИ (ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала) И ЭлементДанныхФайла < ПериодДляДокументов.ДатаНачала)) Тогда
				ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пропущен - вне периода: ");
				
			Иначе
				ОбъектОперации.Дата = ЭлементДанныхФайла;
			КонецЕсли;
			
		Исключение
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату документа: ");
			
			Если ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
				ОбъектОперации.Дата = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
			ИначеЕсли ЗначениеЗаполнено(ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
				ОбъектОперации.Дата = ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
			КонецЕсли;
			
		Конецпопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаПлатежа Тогда
		ЭлементДанныхФайла = ПроверитьДатаЛи(ЭлементДанныхФайла, ШаблонФайла.РазделительДаты) ;
		
		Попытка
			ДатаВходящегоДокумента = Дата(ЭлементДанныхФайла);
			
			Если НЕ ПериодДляДокументов = "" И 
				((ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) 
				И ДатаВходящегоДокумента > ПериодДляДокументов.ДатаОкончания) 
				ИЛИ (ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала) 
				И ДатаВходящегоДокумента < ПериодДляДокументов.ДатаНачала)) Тогда
				
				ЗначениеДанных = "ОТКАЗвЗАПИСИтут";
				ПоказатьСообщениеТут = Истина;
				СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пропущен - вне периода: ");
				
			Иначе
				Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений
					И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "ДатаВходящегоДокумента", "") = "" Тогда	
					
					ОбъектОперации.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
				Иначе
					Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "ДатаПоручения", "") = "" Тогда	
						ОбъектОперации.ДатаПоручения = ДатаВходящегоДокумента; 	
					КонецЕсли;      				
				КонецЕсли;	
			КонецЕсли;
			
		Исключение
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Невозможно преобразовать в дату платежа: ");
		КонецПопытки;		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОПолучателя Тогда
		Если ОбъектОперации.ПриходДенег Тогда
			ОбъектОперации.Организация = НайтиОрганизациюПоОКПО(ЭлементДанныхФайла);
		Иначе			
			ОбъектОперации.КлиентПоставщик = НайтиКлиентаПоОКПО(ЭлементДанныхФайла);
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКлиента Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
			ОбъектОперации.Клиент = НайтиКлиентаПоОКПО(ЭлементДанныхФайла);
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Комментарий Тогда
		ОбъектОперации.Комментарий = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеКлиента Тогда	
		ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		Если НЕ ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
			ОбъектОперации.Клиент = НайтиКлиентаПоНаименованию(ЭлементДанныхФайла);
		КонецЕсли;
		
		//ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеПлательщика Тогда	
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	Если ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		//		ОбъектОперации.ТекстПлательщика = ЭлементДанныхФайла;
		//	КонецЕсли;
		//	Если (ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходСоСчета") 
		//		ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходДСПлан") 
		//		ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходИзКассы") 
		//		ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.ПлатежноеПоручение")
		//		) И НЕ ЗначениеЗаполнено(ОбъектОперации.Организация) Тогда
		//		
		//		ОбъектОперации.Организация = Справочники.Организации.НайтиПоНаименованию(ЭлементДанныхФайла);
		//	ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда			
		//		ОбъектОперации.Клиент = НайтиКлиентаПоНаименованию(ЭлементДанныхФайла);
		//	КонецЕсли;
		//	
		//ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеПолучателя Тогда			
		//	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		//	Если ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		//		ОбъектОперации.ТекстПолучателя = ЭлементДанныхФайла;
		//	КонецЕсли;
		//	Если (НЕ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходСоСчета") 
		//		И НЕ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходДСПлан") 
		//		И НЕ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.РасходИзКассы") 
		//		И НЕ ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.ПлатежноеПоручение")
		//		) И НЕ ЗначениеЗаполнено(ОбъектОперации.Организация) Тогда
		//		
		//		ОбъектОперации.Организация = Справочники.Организации.НайтиПоНаименованию(ЭлементДанныхФайла);
		//	ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
		//		ОбъектОперации.Клиент = НайтиКлиентаПоНаименованию(ЭлементДанныхФайла);
		//	КонецЕсли;
		//	
		//ИначеЕсли ПолеТаблицы =  ТипПоля.НомерПлатежногоДокумента Тогда
		//	ЭлементДанныхФайла =СокрЛП(ЭлементДанныхФайла);
		//	Если ТипЗнч(ОбъектОперации) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		//		ОбъектОперации.НомерПоручения = ЭлементДанныхФайла;
		//	Иначе
		//		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "НомерВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
		//			ОбъектОперации.НомерВходящегоДокумента = ЭлементДанныхФайла;	
		//		Иначе
		//			ОбъектОперации.Номер = ЭлементДанныхФайла;	
		//		КонецЕсли;
		//	КонецЕсли;
		//	
	ИначеЕсли ПолеТаблицы =  ТипПоля.НомерСчета Тогда
		ОбъектОперации.ХранилищеДенег = ОбщийМодульСервер.НайтиХранилищеПоНомеруСчета(ЭлементДанныхФайла);
	ИначеЕсли ПолеТаблицы =  ТипПоля.ПризнакДебет Тогда
		
		//не здесь
	ИначеЕсли ПолеТаблицы =  ТипПоля.ПризнакДебетИлиКредит Тогда
		//не здесь
	ИначеЕсли ПолеТаблицы =  ТипПоля.ПризнакДебетИлиКредитЛат Тогда
		//не здесь
	ИначеЕсли ПолеТаблицы =  ТипПоля.ПризнакКредит Тогда
		//не здесь
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежа Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежаВалютная Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежаВалютнаяПриход Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежаВалютнаяРасход Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежаПриход Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.ОКПОПлательщика Тогда
		если ОбъектОперации.ПриходДенег Тогда
			ОбъектОперации.КлиентПоставщик = ОбщийМодульСервер.НайтиКонтрагентаПоОКПО(ЭлементДанныхФайла);	
		Иначе
			ОбъектОперации.Организация = НайтиОрганизациюПоОКПО(ЭлементДанныхФайла);	
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы =  ТипПоля.СуммаПлатежаРасход Тогда
		ЭлементДанныхФайла = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
		Если ЭлементДанныхФайла < 0 Тогда
			ЭлементДанныхФайла = - ЭлементДанныхФайла;
		КонецЕсли;
		ОбъектОперации.СуммаДокумента = ЭлементДанныхФайла;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле Тогда
		//пропустить
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ИсполняемыйКод Тогда
		Попытка 
			Выполнить(СокрЛП(ЭлементДанныхФайла));
		Исключение 	
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка исполнения кода для файла:") + " " + ОписаниеОшибки();
		КонецПопытки;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеОбъекта Тогда
		
		Если НЕ ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей) Тогда
			ОбъектОперации.Наименование = СокрЛП(ЭлементДанныхФайла);
		Иначе
			ОбъектОперации.Наименование = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла);	
		КонецЕсли;		
		Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "НаименованиеПолное") = "" 
			И НЕ ЗначениеЗаполнено(ОбъектОперации.НаименованиеПолное) Тогда
			
			ОбъектОперации.НаименованиеПолное = ОбъектОперации.Наименование;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.КодОбъекта Тогда
		Если ТипЗнч(ЭлементДанныхФайла) = Тип("Строка") Тогда
			ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементДанныхФайла) Тогда
			ОбъектОперации.Код = ЭлементДанныхФайла;
		Иначе
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан код объекта: ");
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.КодВладельцаКарточки Тогда
		Если ТипЗнч(ЭлементДанныхФайла) = Тип("Строка") Тогда
			ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементДанныхФайла) Тогда
			ОбъектОперации.Код = ЭлементДанныхФайла;
		Иначе
			ПоказатьСообщениеТут = Истина;
			СообщениеТекст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан код владельца карточки: ");
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеВладельцаКарточки Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей) Тогда
			ОбъектОперации.Наименование = СокрЛП(ЭлементДанныхФайла);
		Иначе
			ОбъектОперации.Наименование = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла);	
		КонецЕсли;		
		Если НЕ ШаблонФайлаВидШаблонаДляРегистровСведений
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации.ссылка, "НаименованиеПолное") = "" 
			И НЕ ЗначениеЗаполнено(ОбъектОперации.НаименованиеПолное) Тогда
			ОбъектОперации.НаименованиеПолное = ОбъектОперации.Наименование;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерВладельцаШапки Тогда
		ОбъектОперации.Номер = СокрЛП(ЭлементДанныхФайла);
	ИначеЕсли ЗначениеЗаполнено(ПолеТаблицы.ОпределенноеЗначение) Тогда
		ЗначениеДанных = ПолеТаблицы.ОпределенноеЗначение;
	Иначе //какой?пользовательский
		
	КонецЕсли;
	
	Если ВзятьЧисло Тогда
		Попытка 
			ЗначениеДанных = Число(ПривестиИзЧисла(ЭлементДанныхФайла, ШаблонФайла));
			Если НЕ ПолеТаблицы.Коэффициент = 0 Тогда
				ЗначениеДанных = ЗначениеДанных * ПолеТаблицы.Коэффициент;
			КонецЕсли;
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не приводится к числовому значению:") + " " + СокрЛП(ЭлементДанныхФайла);
			Если НЕ ЭтоЗагрузкаСписка Тогда
				Сообщение.УстановитьДанные(ОбъектОперации);	
			КонецЕсли;
			Сообщение.Сообщить();						
		КонецПопытки;
		
	ИначеЕсли ПоказатьСообщениеТут Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СообщениеТекст + СокрЛП(ЭлементДанныхФайла);
		Если НЕ ЭтоЗагрузкаСписка Тогда
			Сообщение.УстановитьДанные(ОбъектОперации);	
		КонецЕсли;
		Сообщение.Сообщить();						
		
	КонецЕсли;
	
	Если ШаблонФайла.ВыполнятьПрограммы И ЗначениеЗаполнено(ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля) Тогда
		Выполнить(ШаблонФайла.ВыполнитьПрограммныйКодПослеОкончанияЗагрузкиКаждогоПоля);
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции //ОбнаружитьДанныеПоВидуПоляИзСтроки(МассивДанныхСтрокиФайла[ СледующееПолеВФайле.Индекс ], СледующееПолеВФайле.ПолеТаблицы);

//Обрезает строку слева до 10 символов. Необходимо для формирования наименования поля DBF
Функция   ОбрезатьСтрокуК10Символам(СтрокаДляОбрезания) //Экспорт
	
	Возврат лев(СтрокаДляОбрезания,10);
	
КонецФункции //ОбрезатьСтрокуК10Символам

//Выбирает шаблон загрузки автоматически, если подходит только один
Функция   ОдинШаблонФайлаЗагрузки(ЭтоЭкспорт = Неопределено) Экспорт
	
	ЗапросЧислоШаблоновоФайловЗагрузкиТоваров = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПодсистемаИЭ.Ссылка
	|ИЗ
	|	Справочник.ПодсистемаИЭИмпортЭкспортФСШаблоны КАК ПодсистемаИЭ
	|ГДЕ
	|	ПодсистемаИЭ.ПометкаУдаления = Ложь
	|	И ПодсистемаИЭ.Предопределенный = Ложь
	|	И ПодсистемаИЭ.ЭтоГруппа = Ложь";
	
	Если НЕ ЭтоЭкспорт = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И ПодсистемаИЭ." +
		?(ЭтоЭкспорт,
		"ИспользоватьТолькоДляИмпорта = Ложь ",
		"ИспользоватьТолькоДляЭкспорта = Ложь ");
		
	КонецЕсли;
	ЗапросЧислоШаблоновоФайловЗагрузкиТоваров.Текст = ТекстЗапроса;
	Выборка = ЗапросЧислоШаблоновоФайловЗагрузкиТоваров.Выполнить();
	Если НЕ Выборка.Пустой() Тогда
		Результат = Выборка.Выбрать();
		Если Результат.Количество() = 1 Тогда
			Результат.Следующий();
			
			Возврат Результат.Ссылка;
			
		Иначе			
			Возврат Неопределено;
			
		КонецЕсли;
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
КонецФункции //ЧислоШаблоновоФайловЗагрузкиТоваровКоличество

Функция   ОбъектОперацииТоварыКоличество(ОбъектОперации) Экспорт
	
	попытка
		
		Возврат ОбъектОперации.Товары.Количество();
		
	исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("У данного объекта нет таблицы Товары!");
		Сообщение.Поле = "Товары";
		Сообщение.УстановитьДанные(ОбъектОперации);
		Сообщение.Сообщить();
		
		Возврат Неопределено;	 	
		
	конецпопытки;
	
КонецФункции

Функция   ОпределитьПолеДляШаблона(СтруктураПоля) Экспорт
	
	Поле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(СтруктураПоля.Наименование) ;
	Если НЕ ЗначениеЗаполнено(Поле) Тогда
		Если СтруктураПоля.СоздаватьНовоеПоле Тогда
			
			Поле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьЭлемент() ;
			Если СтруктураПоля.СоздаватьВПапкеСпециальные Тогда
				Поле.Родитель = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Специальные ;
			КонецЕсли;
			
			Поле.Наименование = СтруктураПоля.Наименование;
			Если ЗначениеЗаполнено(СтруктураПоля.ДлинаТут) Тогда
				Поле.ДлинаТут = СтруктураПоля.ДлинаТут;
			Иначе
				Поле.ДлинаТут = 120;
			КонецЕсли;
			Поле.Комментарий = СтруктураПоля.Комментарий;
			Поле.ОпределенноеЗначение = СтруктураПоля.ОпределенноеЗначение;
			Поле.ПолеПринадлежитОбъектуТаблицы = СтруктураПоля.ПолеПринадлежитОбъектуТаблицы;	
			Если ЗначениеЗаполнено(СтруктураПоля.ТипТут) Тогда
				Поле.ТипТут = СтруктураПоля.ТипТут;
			Иначе
				Поле.ТипТут = "S";
			КонецЕсли;
			Поле.ТочностьТут = СтруктураПоля.ТочностьТут;
			Если ЗначениеЗаполнено(СтруктураПоля.ЗаголовокПоляПоУмолчанию) Тогда
				Поле.ЗаголовокПоляПоУмолчанию = СтруктураПоля.ЗаголовокПоляПоУмолчанию;
			Иначе
				Поле.ЗаголовокПоляПоУмолчанию = ОбрезатьСтрокуК10Символам(ПеревестиСтрокуВЛатинскиеСимволы(СтруктураПоля.Наименование));
			КонецЕсли;	
			
			Попытка Поле.Записать();
				Поле = Поле.Ссылка;
			Исключение 	Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи эл-та справочника:") + " " + Поле + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПустаяСсылка() ;	
				
			КонецПопытки; //записи Поле
		Иначе
			Возврат Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПустаяСсылка() ;	
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Поле;
КонецФункции //ОпределитьПолеДляШаблона(СтруктураПоля)

//запись в файл элемента/ячейки
Функция   ПередатьДанныеПоВидуПоля(СтрокаТаблицыИлиЭлемент, 
	ПолеТаблицы, 
	ОбъектОперации, 
	ИмяТаблицыШаблонаФайла, 
	ШаблонФайла,
	ПериодДляДокументов,
	СубРеквизит = 0,
	ИмяПоляВФайлеИзТаблицы,
	СубПоле = "",
	ЭтоЗагрузкаСписка)	
	
	ЗначениеДанных = 0;	
	ТипПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля;	
	
	Если ШаблонФайла.ВыполнятьПрограммы 
		И ЗначениеЗаполнено(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля) Тогда
		
		Выполнить(ШаблонФайла.ВыполнитьПрограммныйКодВНачалеЗагрузкиКаждогоПоля);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеТаблицы.ОпределенноеЗначение) Тогда
		ЗначениеДанных = ПолеТаблицы.ОпределенноеЗначение;	
		
	ИначеЕсли СубРеквизит > 0 Тогда
		
		Попытка 
			ЗначениеДанных = СтрокаТаблицыИлиЭлемент[ ИмяПоляВФайлеИзТаблицы ][ СубПоле ];
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;		
		
	ИначеЕсли НЕ ПолеТаблицы.Предопределенный Тогда
		
		Попытка 
			Если ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.РезультатПроизвольногоЗапроса Тогда
				ЗначениеДанных = ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ];
				
			ИначеЕсли ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы Тогда
				Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, ИмяПоляВФайлеИзТаблицы, ИмяТаблицыШаблонаФайла) = "" Тогда
					ЗначениеДанных = ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ];
				КонецЕсли;								
			Иначе
				Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, ИмяПоляВФайлеИзТаблицы, ИмяТаблицыШаблонаФайла) = "" Тогда
					ЗначениеДанных = СтрокаТаблицыИлиЭлемент[  ИмяПоляВФайлеИзТаблицы ];
				КонецЕсли;												
			КонецЕсли;		
			
			Если ТипЗнч(ЗначениеДанных) = Тип("Булево") Тогда
				ЗначениеДанных = ?(ЗначениеДанных, 1, 0);
			ИначеЕсли ПолеТаблицы.ТочностьТут > 0 Тогда
				ЗначениеДанных = ПревратитьВЧисло(ЗначениеДанных, ШаблонФайла, Истина);
			КонецЕсли; 				
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектОперации);
			Сообщение.Сообщить();
			
		КонецПопытки;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерСчета Тогда
		ЗначениеДанных = ?(ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.ХранилищеДенег), СтрокаТаблицыИлиЭлемент.ХранилищеДенег.НомерСчета, "");
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерПлатежногоДокумента Тогда
		ЗначениеДанных = СтрокаТаблицыИлиЭлемент.НомерПлатежногоДокумента;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НоменклатурнаяГруппаНоменклатуры Тогда
		Если (ЭтоЗагрузкаСписка ИЛИ ИмяТаблицыШаблонаФайла="DBFНоменклатура") 
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "НоменклатурнаяГруппа", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = СокрЛП(ОбъектОперации.НоменклатурнаяГруппа);
		ИначеЕсли НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, "Номенклатура", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура) Тогда
				ЗначениеДанных = СокрЛП(СтрокаТаблицыИлиЭлемент.Номенклатура.НоменклатурнаяГруппа);	
			КонецЕсли;				
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОбъектПомеченНаУдаление Тогда
		ЗначениеДанных = ?(СтрокаТаблицыИлиЭлемент.ПометкаУдаления, 1, 0);
	ИначеЕсли ПолеТаблицы = ТипПоля.ДокументПроведен Тогда
		ЗначениеДанных = ?(СтрокаТаблицыИлиЭлемент.Проведен, 1, 0);
	ИначеЕсли ПолеТаблицы = ТипПоля.ЭлементПредопределенный Тогда
		ЗначениеДанных = ?(СтрокаТаблицыИлиЭлемент.Предопределенный, 1, 0);
	ИначеЕсли ПолеТаблицы = ТипПоля.ЭлементЭтоГруппа Тогда
		ЗначениеДанных = ?(СтрокаТаблицыИлиЭлемент.ЭтоГруппа, 1, 0);
	ИначеЕсли ПолеТаблицы = ТипПоля.РодительЭлемента Тогда
		//		Если ЗначениеЗаполнено(ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей) Тогда
		//ЗначениеДанных = СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, 2)			
		//		Иначе
		ЗначениеДанных = СокрЛП(СтрокаТаблицыИлиЭлемент.Родитель);
		//		КонецЕсли;
	ИначеЕсли ПолеТаблицы = ТипПоля.РодителяЭлементаКод Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Родитель) Тогда
			ЗначениеДанных = СокрЛП(СтрокаТаблицыИлиЭлемент.Родитель.Код);	
		КонецЕсли;		
	ИначеЕсли ПолеТаблицы = ТипПоля.ВладелецЭлемента Тогда
		ЗначениеДанных = СокрЛП(СтрокаТаблицыИлиЭлемент.Владелец);
	ИначеЕсли ПолеТаблицы = ТипПоля.ВладельцаЭлементаКод Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Владелец) Тогда
			ЗначениеДанных = СтрокаТаблицыИлиЭлемент.Владелец.Код;	
		КонецЕсли;    		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.АртикулНоменклатуры Тогда
		Если (ЭтоЗагрузкаСписка ИЛИ ИмяТаблицыШаблонаФайла="DBFНоменклатура") 
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Артикул", ИмяТаблицыШаблонаФайла) = "" Тогда
			
			ЗначениеДанных = СокрЛП(ОбъектОперации.Артикул);
		ИначеЕсли НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, "Артикул", ИмяТаблицыШаблонаФайла) = ""
			И ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура) Тогда
			
			ЗначениеДанных = СтрокаТаблицыИлиЭлемент.Номенклатура.Артикул;	
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.Производитель Тогда
		попытка
			Если (ЭтоЗагрузкаСписка ИЛИ ИмяТаблицыШаблонаФайла="DBFНоменклатура") 
				И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Производитель", ИмяТаблицыШаблонаФайла) = "" Тогда
				ЗначениеДанных = СокрЛП(ОбъектОперации.Производитель);
			ИначеЕсли НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, "Номенклатура", ИмяТаблицыШаблонаФайла) = "" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура) Тогда
					ЗначениеДанных = СокрЛП(СтрокаТаблицыИлиЭлемент.Номенклатура.Производитель);	
				КонецЕсли;         	
			КонецЕсли;
		исключение
		конецпопытки;
		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.КодОбъекта Тогда
		ЗначениеДанных = СтрокаТаблицыИлиЭлемент.Код;
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеОбъекта Тогда
		ЗначениеДанных = СтрокаТаблицыИлиЭлемент.Наименование;
	ИначеЕсли ПолеТаблицы = ТипПоля.НоменклатурыКод Тогда
		Если (ЭтоЗагрузкаСписка ИЛИ ИмяТаблицыШаблонаФайла="DBFНоменклатура") 
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Код", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.Код;
		ИначеЕсли НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, "Номенклатура", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыИлиЭлемент.Номенклатура) Тогда
				ЗначениеДанных = СтрокаТаблицыИлиЭлемент.Номенклатура.Код;	
			КонецЕсли;         	
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКонтрагента Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.КлиентПоставщик) Тогда
				ЗначениеДанных = ОбъектОперации.КлиентПоставщик.ОКПО;	
			КонецЕсли;		          	
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан ОКПО Контрагента у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКлиента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Клиент", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
				ЗначениеДанных = ОбъектОперации.Клиент.ОКПО;	
			КонецЕсли;		          	
		КонецЕсли;
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан ОКПО Клиента у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеКлиента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Клиент", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
				Если ЗначениеЗаполнено(ОбъектОперации.Клиент.НаименованиеПолное) Тогда
					ЗначениеДанных = СокрЛП(ОбъектОперации.Клиент.НаименованиеПолное);
				Иначе
					ЗначениеДанных = СокрЛП(ОбъектОперации.Клиент);	
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указано Наименование Клиента у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПропуститьДанноеПоле Тогда
		//!
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерДокумента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Номер", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.Номер;	
		КонецЕсли;				
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан Номер документа у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДеньДатыДокумента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.ДатаВходящегоДокумента;			
		Иначе	
			ЗначениеДанных = ОбъектОперации.Дата;		
		КонецЕсли;
		ЗначениеДанных = День(ЗначениеДанных);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.МесяцДатыДокумента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.ДатаВходящегоДокумента;			
		Иначе	
			ЗначениеДанных = ОбъектОперации.Дата;		
		КонецЕсли;
		ЗначениеДанных = Месяц(ЗначениеДанных);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ГодДатыДокумента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.ДатаВходящегоДокумента;			
		Иначе	
			ЗначениеДанных = ОбъектОперации.Дата;		
		КонецЕсли;
		ЗначениеДанных = Год(ЗначениеДанных);
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаДокумента Тогда		
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Дата", ИмяТаблицыШаблонаФайла) = "" Тогда
			
			Если ПериодДляДокументов = "" 
				ИЛИ ((Не ЗначениеЗаполнено(ПериодДляДокументов.ДатаНачала ) 
				ИЛИ ОбъектОперации.Дата >= ПериодДляДокументов.ДатаНачала) 
				И (НЕ ЗначениеЗаполнено(ПериодДляДокументов.ДатаОкончания) 
				ИЛИ ОбъектОперации.Дата <= ПериодДляДокументов.ДатаОкончания)) Тогда
				
				ЗначениеДанных = ОбъектОперации.Дата;	
			КонецЕсли;					
			
		ИначеЕсли ШаблонФайла.УстанавливатьТекущуюДатуДляДокументовЕслиНеОпределена Тогда
			ЗначениеДанных = ОбщийМодульСервисСервер.ПользователяТекущаяДата();
		ИначеЕсли ЗначениеЗаполнено(ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена) Тогда
			ЗначениеДанных = ШаблонФайла.УстанавливатьДатуДокументамПриИмпортеЕслиНеОпределена;
		КонецЕсли;					
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана Дата у") + " " + ОбъектОперации;
				Сообщение.Сообщить();
				
			ИначеЕсли ЗначениеДанных < началоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата у") + " " + СокрЛП(ОбъектОперации) + " - " + ЗначениеДанных;
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ШтрихКод Тогда
		ЗапШК = Новый Запрос;
		ЗапШК.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихКоды.ШтрихКод
		|ИЗ
		|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
		|ГДЕ
		|	ШтрихКоды.Номенклатура = &Номенклатура ";
		
		Если ИмяТаблицыШаблонаФайла = "" Тогда
			ЗапШК.УстановитьПараметр("Номенклатура", СтрокаТаблицыИлиЭлемент);
		Иначе
			ЗапШК.УстановитьПараметр("Номенклатура", СтрокаТаблицыИлиЭлемент.Номенклатура);
		КонецЕсли;
		
		ВзШК = ЗапШК.Выполнить();
		Если Не ВзШК.Пустой() Тогда
			РезШК = ВзШК.Выбрать();
			РезШК.Следующий();
			ЗначениеДанных = РезШК.ШтрихКод;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПолеЗначения0 Тогда
		ЗначениеДанных = 0;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПолеЗначенияПустойСтроки Тогда
		ЗначениеДанных = "";
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПолеЗначенияПустойДаты Тогда
		ЗначениеДанных = '00010101000000';
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ВидПлатежногоДокумента Тогда
		ЗначениеДанных = сокрлп(тип(ОбъектОперации));
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ТипОбъекта Тогда
		ЗначениеДанных = сокрлп(тип(ОбъектОперации));		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ДатаПлатежа Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "ДатаВходящегоДокумента", ИмяТаблицыШаблонаФайла) = "" Тогда
			ЗначениеДанных = ОбъектОперации.ДатаВходящегоДокумента;			
		Иначе	
			ЗначениеДанных = ОбъектОперации.Дата;		
		КонецЕсли;
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указана Дата платежа у") + " " + ОбъектОперации;
				Сообщение.Сообщить();
				
			ИначеЕсли ЗначениеДанных < началоДня(ОбщийМодульСервисСервер.ПользователяТекущаяДата()) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Дата платежа у") + " " + СокрЛП(ОбъектОперации) + " - " + ЗначениеДанных;
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ОКПОКлиента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Клиент", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
				ЗначениеДанных = ОбъектОперации.Клиент.ОКПО;	
			КонецЕсли;		        	
		КонецЕсли;
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указан ОКПО Клиента у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НазначениеПлатежа
		или ПолеТаблицы = ТипПоля.Комментарий Тогда
		
		ЗначениеДанных = ОбъектОперации.Комментарий;	
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеКлиента Тогда
		Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Клиент", ИмяТаблицыШаблонаФайла) = "" Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Клиент) Тогда
				ЗначениеДанных = СокрЛП(ОбъектОперации.Клиент.НаименованиеПолное);	
			КонецЕсли;	
		КонецЕсли;
		
		Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
			И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Не указано Наименование Клиента у") + " " + ОбъектОперации;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПризнакДебетИлиКредит Тогда
		Если ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ДвиженияДенег") 
			и ОбъектОперации.ПриходДенег тогда
			ЗначениеДанных = "К";
		иначе
			ЗначениеДанных = "Д";
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПризнакДебетИлиКредитЛат Тогда
		Если ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ДвиженияДенег") 
			и ОбъектОперации.ПриходДенег тогда
			ЗначениеДанных = "K";
		иначе
			ЗначениеДанных = "D";
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПризнакДебет Тогда
		Если ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ДвиженияДенег") 
			и ОбъектОперации.ПриходДенег тогда
			ЗначениеДанных = 0;
		иначе
			ЗначениеДанных = 1;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.ПризнакКредит Тогда
		Если ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ДвиженияДенег") 
			и ОбъектОперации.ПриходДенег тогда
			ЗначениеДанных = 1;
		иначе
			ЗначениеДанных = 0;
		КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.СуммаПлатежа Тогда
		ЗначениеДанных = ОбъектОперации.ТовараНаСумму;
		//ЗначениеДанных = ОбъектОперации.СуммаДокумента;
		//Если ШаблонФайла.ПризнакДебетаОтрицательнаяСумма 
		//	и (ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ПлатежноеПоручение") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходСоСчета") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходИзКассы") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходДСПлан")) Тогда
		//	
		//	ЗначениеДанных = - ЗначениеДанных;
		//	
		//КонецЕсли;
		//
		//Если ШаблонФайла.СообщатьОНедостаточномЗаполненииПриЭкспортеДокументовДляПОБанка 
		//	И НЕ ЗначениеЗаполнено(ЗначениеДанных) Тогда
		//	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Не указана Сумма Платежа у " + ОбъектОперации;
		//	Сообщение.Сообщить();
		//	
		//КонецЕсли;
		
		
	ИначеЕсли ПолеТаблицы = ТипПоля.СуммаПлатежаРасход Тогда		
		//Если ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ПлатежноеПоручение") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходСоСчета") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходИзКассы") 
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.РасходДСПлан") Тогда
		//	
		ЗначениеДанных = ОбъектОперации.ТовараНаСумму;
		//	
		//	Если ШаблонФайла.ПризнакДебетаОтрицательнаяСумма Тогда			
		//		ЗначениеДанных = - ЗначениеДанных;	
		//	КонецЕсли;
		//	
		//ИначеЕсли ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ПоступлениеВКассу")
		//	ИЛИ ТипЗнч(ОбъектОперации) = Тип("ДокументСсылка.ПоступлениеДСПлан") Тогда 	
		//	ЗначениеДанных = 0;
		//КонецЕсли;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.КодВладельцаКарточки Тогда		
		ЗначениеДанных = ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ].Код;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НаименованиеВладельцаКарточки Тогда		
		ЗначениеДанных = ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ].Наименование;
		
	ИначеЕсли ПолеТаблицы = ТипПоля.НомерВладельцаШапки Тогда		
		//ЗначениеДанных = ОбъектОперации[ ИмяПоляВФайлеИзТаблицы ].Номер;
		ЗначениеДанных = ОбъектОперации.Номер;
		
	Иначе //предопрделенные без описания действий
		Попытка 
			Если ПолеТаблицы.ПолеПринадлежитОбъектуТаблицы Тогда
				Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, ИмяПоляВФайлеИзТаблицы, ИмяТаблицыШаблонаФайла) = "" Тогда
					ЗначениеДанных = ОбъектОперации[  ИмяПоляВФайлеИзТаблицы ];	
				КонецЕсли;
			Иначе
				Если НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(СтрокаТаблицыИлиЭлемент, ИмяПоляВФайлеИзТаблицы, ИмяТаблицыШаблонаФайла) = "" Тогда
					ЗначениеДанных = СтрокаТаблицыИлиЭлемент[  ИмяПоляВФайлеИзТаблицы ];	
				КонецЕсли;
			КонецЕсли;		
			Если ТипЗнч(ЗначениеДанных) = Тип("Булево") Тогда
				ЗначениеДанных = ?(ЗначениеДанных, 1, 0);
			ИначеЕсли ПолеТаблицы.ТочностьТут > 0 Тогда
				ЗначениеДанных = ПревратитьВЧисло(ЗначениеДанных, ШаблонФайла, Истина);
			КонецЕсли; 				
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
			Сообщение.УстановитьДанные(ОбъектОперации);
			Сообщение.Сообщить();
			
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПолеТаблицы.Коэффициент = 0
		И НЕ ЗначениеДанных = 0 Тогда
		ЗначениеДанных = ЗначениеДанных * ПолеТаблицы.Коэффициент;
	КонецЕсли;
	
	Возврат ЗначениеДанных;
	
КонецФункции //ПередатьДанныеПоВидуПоля

//Проверяет, является ли переданное значение в формате даты
Функция   ПроверитьДатаЛи(ЭлементДанныхФайла, РазделительДаты = " ") 
	
	ЭлементДанныхФайла = СокрЛП(ЭлементДанныхФайла);
	СтрДлинаЭлементаДанныхФайла = СтрДлина(ЭлементДанныхФайла);
	Если СтрДлинаЭлементаДанныхФайла = 8 
		ИЛИ СтрДлинаЭлементаДанныхФайла = 10 Тогда
		
		СредЭлементаДанныхФайла3 = Сред(ЭлементДанныхФайла, 3, 1);
		СредЭлементаДанныхФайла6 = Сред(ЭлементДанныхФайла, 6, 1);
		Если (СредЭлементаДанныхФайла3 = РазделительДаты И СредЭлементаДанныхФайла6 = РазделительДаты)
			ИЛИ (СредЭлементаДанныхФайла3 = "." И СредЭлементаДанныхФайла6 = ".") 
			ИЛИ (СредЭлементаДанныхФайла3 = "-" И СредЭлементаДанныхФайла6 = "-") 
			ИЛИ (СредЭлементаДанныхФайла3 = "," И СредЭлементаДанныхФайла6 = ",") Тогда
			
			ЭлементДанныхФайла = Прав(ЭлементДанныхФайла, СтрДлина(ЭлементДанныхФайла) - 6) + Сред(ЭлементДанныхФайла, 4, 2) + Сред(ЭлементДанныхФайла, 1, 2);
			Если СтрДлина(ЭлементДанныхФайла) = 6 Тогда
				ЭлементДанныхФайла = "20" + ЭлементДанныхФайла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементДанныхФайла;
	
КонецФункции //ПроверитьДатаЛи

//Производит оценку файла предложенного пользователем, как файл обмена
Процедура ПроизвестиОценкуФайла(ШаблонФайла, АдресФайла, ТипОценки) Экспорт	
	
	ШаблонФайлаФорматФайлаDBF   = ШаблонФайлаФорматФайлаDBF(ШаблонФайла);
	ШаблонФайлаФорматФайлаEXCEL = ШаблонФайлаФорматФайлаEXCEL(ШаблонФайла);
	
	ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = ШаблонФайла.ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;
	Если ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
		ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить + 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонФайла.ИспользоватьСтрокуЗаголовок) Тогда
		ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить = ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить + 1;
	КонецЕсли;
	
	если ШаблонФайлаФорматФайлаDBF Тогда
		БазаДБФФайлИмпортаЭкспорта = Новый XBase;
		БазаДБФФайлИмпортаЭкспорта.Кодировка = ?(ШаблонФайла.КодировкаDOS, КодировкаXBase.OEM, КодировкаXBase.ANSI);
		БазаДБФФайлИмпортаЭкспорта.ОткрытьФайл(АдресФайла);
		КоличествоСтрокФайла = БазаДБФФайлИмпортаЭкспорта.КоличествоЗаписей();
		БазаДБФФайлИмпортаЭкспорта.Первая();	
		СчетчикСтрок = 1;
		Пока СчетчикСтрок <= ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить Цикл
			Если НЕ БазаДБФФайлИмпортаЭкспорта.Следующая() Тогда 
				Прервать;
			КонецЕсли;
			СчетчикСтрок = СчетчикСтрок + 1; 	
		КонецЦикла;
		
	ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
		попытка 
			ЭксельФайлИмпортаЭкспорта = Новый COMОбъект("Excel.Application"); 
			Книга = ЭксельФайлИмпортаЭкспорта.Application.Workbooks.Open(АдресФайла);
			ТекЛист = Книга.ActiveSheet;//WorkSheets[ 0 ]; 
			СчетчикСтрок = ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;
		исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка работы с excel:") + " " + ОписаниеОшибки();
			Сообщение.Сообщить();					 
			
			Возврат;
		КонецПопытки;
	Иначе
		ФайлИмпортаЭкспорта = Новый ТекстовыйДокумент;
		КодировкаФайла = СокрЛП(ШаблонФайла.КодировкаФайла);
		Если НЕ ЗначениеЗаполнено(КодировкаФайла) Тогда
			КодировкаФайла = "ANSI";
		КонецЕсли;
		
		ФайлИмпортаЭкспорта.Прочитать(АдресФайла, КодировкаТекста[ КодировкаФайла ]);
		
		КоличествоСтрокФайла = ФайлИмпортаЭкспорта.КоличествоСтрок();
		ПерваяСтрока = 1 + ЧислоСтрокСНачалаФайлаКоторыеСледуетПропустить;		
	КонецЕсли;
	
	Попытка 		
		МассивДанныхСтрокиФайла = Новый массив;
		МассивИменСтрокиФайла = Новый массив;
		
		Если ШаблонФайлаФорматФайлаDBF Тогда
			Для Каждого СледующееПолеВФайле ИЗ БазаДБФФайлИмпортаЭкспорта.поля Цикл								
				МассивДанныхСтрокиФайла.Добавить(БазаДБФФайлИмпортаЭкспорта[ СледующееПолеВФайле.Имя ]) ;	
				МассивИменСтрокиФайла.Добавить( СокрЛП(СледующееПолеВФайле.Имя));
			КонецЦикла;
			БазаДБФФайлИмпортаЭкспорта.ЗакрытьФайл();
		ИначеЕсли ШаблонФайлаФорматФайлаEXCEL Тогда
			
			Если ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
				ДостигнутКонецФайла = Ложь;
				
				НомерКолонки = ШаблонФайла.НомерПоляКотороеВсегдаЗаполнено;
				Пока не ДостигнутКонецФайла Цикл				
					ЗначениеДанных = ТекЛист.Cells(СчетчикСтрок, НомерКолонки).Value ;	
					Если СокрЛП(ЗначениеДанных) = "" ИЛИ НомерКолонки > 999 Тогда
						ДостигнутКонецФайла = Истина;
					Иначе
						МассивИменСтрокиФайла.Добавить(ЗначениеДанных);
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;			
				КонецЦикла;
			КонецЕсли;
			
			ДостигнутКонецФайла = Ложь;
			НомерКолонки = ШаблонФайла.НомерПоляКотороеВсегдаЗаполнено;
			Пока не ДостигнутКонецФайла Цикл				
				ЗначениеДанных = ТекЛист.Cells(СчетчикСтрок + 1, НомерКолонки).Value ;	
				Если СокрЛП(ЗначениеДанных) = "" ИЛИ НомерКолонки > 999 Тогда
					ДостигнутКонецФайла = Истина;
				Иначе
					МассивДанныхСтрокиФайла.Добавить(ЗначениеДанных);
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;			
			КонецЦикла;
			
			Если МассивИменСтрокиФайла.Количество() > МассивДанныхСтрокиФайла.Количество() Тогда
				Пока МассивДанныхСтрокиФайла.Количество() < МассивИменСтрокиФайла.Количество() Цикл
					МассивДанныхСтрокиФайла.Добавить(ТекЛист.Cells(СчетчикСтрок + 1, НомерКолонки).Value);
				КонецЦикла;
			КонецЕсли;
			ЭксельФайлИмпортаЭкспорта.quit();
			
		Иначе
			Если ШаблонФайла.ФормироватьПервуюСтрокуИзЗаголовковПолей Тогда
				МассивИменСтрокиФайла = РазложитьСтрокуВМассивПодстрок(ФайлИмпортаЭкспорта.ПолучитьСтроку(ПерваяСтрока - 1), ШаблонФайла, ШаблонФайла.РазделителиВстречаютсяМеждуЗнаками, ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки, ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки);
			КонецЕсли;
			МассивДанныхСтрокиФайла = РазложитьСтрокуВМассивПодстрок(ФайлИмпортаЭкспорта.ПолучитьСтроку(ПерваяСтрока), ШаблонФайла, ШаблонФайла.РазделителиВстречаютсяМеждуЗнаками, ШаблонФайла.ПропуститьЧислоСимволовСНачалаСтроки, ШаблонФайла.ПропуститьЧислоСимволовВКонцеСтроки);
		КонецЕсли;
		
		КоличествоПолейФайла = МассивДанныхСтрокиФайла.Количество();
		
		УжеБылРеквизит1 = Ложь;
		УжеБылРеквизит2 = Ложь;
		УжеБылРеквизит3 = Ложь;
		УжеБылРеквизит4 = Ложь;
		УжеБылРеквизит5 = Ложь;
		УжеБылРеквизит6 = Ложь;
		УжеБылРеквизит7 = Ложь;
		УжеБылРеквизит8 = Ложь;
		УжеБылРеквизит9 = Ложь;
		УжеБылРеквизит0 = Ложь;
		УжеБылРеквизит10 = Ложь;
		УжеБылРеквизит11 = Ложь;
		УжеБылРеквизит12 = Ложь;
		УжеБылоКлючевое = Ложь;
		СправочникиПодсистемаИЭИмпортЭкспортФСПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля;
		
		СчетчикПолей = 0;
		Пока СчетчикПолей < КоличествоПолейФайла Цикл
			
			СтрокаТаблицыШаблона = ШаблонФайла.ПоследовательностьПолейВФайле.добавить();
			Если ШаблонФайлаФорматФайлаDBF 
				ИЛИ (МассивИменСтрокиФайла.количество() > СчетчикПолей и ЗначениеЗаполнено(МассивИменСтрокиФайла[ СчетчикПолей ])) Тогда
				
				СтрокаТаблицыШаблона.ИмяПоляВФайле = МассивИменСтрокиФайла[ СчетчикПолей ];			 
			Иначе
				СтрокаТаблицыШаблона.ИмяПоляВФайле = "F" + СокрЛП(СчетчикПолей);
			КонецЕсли;
			
			ЗначениеВСтроке = МассивДанныхСтрокиФайла[ СчетчикПолей ];
			СтрокаТаблицыШаблона.КомментарийПоля = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Пример:") + " " + ЗначениеВСтроке;
			
			Если ТипОценки = "Товары" Тогда
				Попытка 
					Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
					если Значение <> цел(Значение ) Тогда
						Если УжеБылРеквизит1 Тогда
							Если УжеБылРеквизит4 Тогда
								если не УжеБылРеквизит8 Тогда
									//									СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.СуммаНДС;		
									УжеБылРеквизит8 = Истина;	
								Иначе
									СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле;		
								КонецЕсли;
							Иначе
								СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.Сумма;
								УжеБылРеквизит4 = Истина;
							КонецЕсли; 					
						Иначе
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.Цена;
							УжеБылРеквизит1 = Истина;
						КонецЕсли;
						
					Иначе
						Если УжеБылРеквизит5 Тогда						
							Если УжеБылРеквизит2 ИЛИ Значение >99999 Тогда
								если не УжеБылРеквизит9 Тогда
									СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.АртикулНоменклатуры;
									УжеБылРеквизит9 = Истина;	
									Если НЕ УжеБылоКлючевое Тогда
										
										СтрокаТаблицыШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = Истина;
										УжеБылоКлючевое = Истина;
										
									Иначе
										СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле;		
									КонецЕсли;
								КонецЕсли;
							Иначе
								СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.Количество;
								УжеБылРеквизит2 = Истина;
							КонецЕсли;					
						Иначе
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ШтрихКод;
							УжеБылРеквизит5 = Истина;
							Если НЕ УжеБылоКлючевое Тогда
								
								СтрокаТаблицыШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = Истина;
								УжеБылоКлючевое = Истина;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение 	
					
					ЗначениеВСтроке = ПроверитьДатаЛи(ЗначениеВСтроке, ШаблонФайла.РазделительДаты);
					Попытка 
						Значение = Дата(ЗначениеВСтроке);
						Если УжеБылРеквизит6 Тогда
							если не УжеБылРеквизит3 Тогда
								СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ДатаПоступления;
								УжеБылРеквизит3 = Истина;	
							Иначе
								СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле;		
							КонецЕсли;
						Иначе
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ДатаДокумента;
							УжеБылРеквизит6 = Истина;
						КонецЕсли;					
					Исключение 	
						Если НЕ УжеБылРеквизит7 Тогда
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.Номенклатура; 	
							УжеБылРеквизит7 = Истина;
							Если НЕ УжеБылоКлючевое Тогда
								
								СтрокаТаблицыШаблона.ДанноеПолеКлючевоеДляПоискаИЗаписи = Истина;
								УжеБылоКлючевое = Истина;
								
							КонецЕсли;
						КонецЕсли;
					КонецПопытки;
				КонецПопытки;
				
				ИначеЕсли ШаблонФайлаПредназначенДляОбменаДокументамиДС(ШаблонФайла) Тогда
				//	Если стрДлина(ЗначениеВСтроке) = 3 Тогда
				//		Попытка 
				//			Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
				//			Если НЕ УжеБылРеквизит1 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ВалютыДокументаКод; 	
				//				УжеБылРеквизит1 = Истина;
				//			Иначе
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//			КонецЕсли;
				//		Исключение 	
				//			Если НЕ УжеБылРеквизит2 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ВалютаДокумента;
				//				УжеБылРеквизит2 = Истина;
				//			Иначе
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле;
				//			КонецЕсли;
				//		конецпопытки;
				//	ИначеЕсли стрДлина(ЗначениеВСтроке) = 10 Тогда
				//		Попытка 
				//			Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
				//			Если НЕ УжеБылРеквизит3 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ОКПООрганизации; 	
				//				УжеБылРеквизит3 = Истина;
				//			Иначе
				//				Если НЕ УжеБылРеквизит4 Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ОКПОКлиента; 	
				//					УжеБылРеквизит4 = Истина;
				//				Иначе
				//					Если НЕ УжеБылРеквизит5 Тогда
				//						СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ИННКлиента; 	
				//						УжеБылРеквизит5 = Истина;
				//					Иначе
				//						Если НЕ УжеБылРеквизит6 Тогда
				//							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ИННОрганизации; 	
				//							УжеБылРеквизит6 = Истина;
				//						Иначе
				//							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//						КонецЕсли;
				//					КонецЕсли;
				//				КонецЕсли;
				//			КонецЕсли;
				//		исключение
				//			СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//		конецпопытки;
				//	ИначеЕсли стрДлина(ЗначениеВСтроке) = 9 Тогда	
				//		Попытка 
				//			Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
				//			Если НЕ УжеБылРеквизит8 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.МФОБанкаОрганизации; 	
				//				УжеБылРеквизит8 = Истина;
				//			Иначе
				//				Если НЕ УжеБылРеквизит9 Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.МФОБанкаКлиента; 	
				//					УжеБылРеквизит9 = Истина;
				//				Иначе
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//				КонецЕсли;
				//			КонецЕсли;
				//		исключение
				//			СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//		конецпопытки;
				//	ИначеЕсли стрДлина(ЗначениеВСтроке) = 20 Тогда	
				//		Попытка 
				//			Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
				//			Если НЕ УжеБылРеквизит0 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НомерСчетаОрганизации; 	
				//				УжеБылРеквизит0 = Истина;
				//			Иначе
				//				Если НЕ УжеБылРеквизит10 Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НомерСчетаКлиента; 	
				//					УжеБылРеквизит10 = Истина;
				//				Иначе
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//				КонецЕсли;
				//			КонецЕсли;
				//		исключение
				//			СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//		конецпопытки;
				//	ИначеЕсли стрДлина(ЗначениеВСтроке) > 32 Тогда	
				//		Если НЕ УжеБылРеквизит11 Тогда
				//			СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НазначениеПлатежа; 	
				//			УжеБылРеквизит11 = Истина;
				//		Иначе
				//			СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//		КонецЕсли;
				//	Иначе				
				//		Попытка 
				//			Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
				//			если Значение <> цел(Значение ) Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.СуммаПлатежа; 	
				//			ИначеЕсли НЕ УжеБылРеквизит7 Тогда
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НомерПлатежногоДокумента; 	
				//				УжеБылРеквизит7 = Истина;
				//			Иначе 	
				//				СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//			КонецЕсли;
				//		Исключение 	
				//			
				//			ЗначениеВСтроке = ПроверитьДатаЛи(ЗначениеВСтроке, ШаблонФайла.РазделительДаты);
				//			Попытка 
				//				Значение = Дата(ЗначениеВСтроке);
				//				Если НЕ УжеБылРеквизит12 Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ДатаПлатежа; 	
				//					УжеБылРеквизит12 = Истина;
				//				Иначе
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//				КонецЕсли;
				//				
				//			Исключение 	
				//				Если СокрЛП(ЗначениеВСтроке) = "" Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//				ИначеЕсли НЕ УжеБылоКлючевое Тогда
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеКлиента; 	
				//					УжеБылоКлючевое = Истина;
				//				Иначе
				//					СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
				//				КонецЕсли;
				//				
				//			КонецПопытки;
				//		КонецПопытки; 	
				//	КонецЕсли;
			Иначе
				Попытка 
					Значение = Число(ПривестиИзЧисла(ЗначениеВСтроке, ШаблонФайла));
					если Значение <> цел(Значение ) Тогда
						СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.Сумма; 	
					ИначеЕсли НЕ УжеБылРеквизит7 Тогда
						СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НомерДокумента; 	
						УжеБылРеквизит7 = Истина;
					Иначе 	
						СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
					КонецЕсли;
				Исключение 	
					
					ЗначениеВСтроке = ПроверитьДатаЛи(ЗначениеВСтроке, ШаблонФайла.РазделительДаты);
					Попытка 
						Значение = Дата(ЗначениеВСтроке);
						СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ДатаДокумента; 	
					Исключение 	
						Если СокрЛП(ЗначениеВСтроке) = "" Тогда
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
						ИначеЕсли НЕ УжеБылоКлючевое Тогда
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеОбъекта; 	
							УжеБылоКлючевое = Истина;
						Иначе
							СтрокаТаблицыШаблона.ПолеТаблицы = СправочникиПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле; 	
						КонецЕсли;
						
					КонецПопытки;
				КонецПопытки;
			КонецЕсли;
			
			СчетчикПолей = СчетчикПолей + 1;
		КонецЦикла;
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
		Сообщение.УстановитьДанные(ШаблонФайла);
		Сообщение.Сообщить();						
		
	КонецПопытки;
	
КонецПроцедуры //ПроизвестиОценкуФайлаТовары

//Проверить, равен ли объект зачению и изменить его
Функция   ПроверитьРавенствоИлиИзменить(БылиИзменения = Ложь, Знач ОбъектПроверкиИзменения, Знач ЗначениеПроверкиИзменения)
	
	Если НЕ ОбъектПроверкиИзменения = ЗначениеПроверкиИзменения Тогда
		ОбъектПроверкиИзменения = ЗначениеПроверкиИзменения;
		БылиИзменения = Истина;
	КонецЕсли;
	
	Возврат БылиИзменения;
	
КонецФункции //ПроверитьРавенствоИлиИзменить(БылиИзменения, Номенклатура.СпособПополнения, ШаблонФайла.СпособПополненияНоменклатуры)

//Проверка наличия реквизита у объекта операции
Функция   ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, ИмяРеквизита, ИмяТаблицыШаблонаФайла = "") 
	
	Представление = "";
	
	попытка
		Если ОбъектОперации.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Метаданные().Реквизиты[ ИмяРеквизита ].Синоним) Тогда
				Представление = ОбъектОперации.Метаданные().Реквизиты[ ИмяРеквизита ].Синоним;
			Иначе
				Представление = ОбъектОперации.Метаданные().Реквизиты[ ИмяРеквизита ].Имя;
			КонецЕсли;
			
		ИначеЕсли ЭтоСтандартныйРеквизит(ОбъектОперации, ИмяРеквизита) Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Метаданные().СтандартныеРеквизиты[ ИмяРеквизита ].Синоним) Тогда
				Представление = ОбъектОперации.Метаданные().СтандартныеРеквизиты[ ИмяРеквизита ].Синоним;
			Иначе
				Представление = ОбъектОперации.Метаданные().СтандартныеРеквизиты[ ИмяРеквизита ].Имя;
			КонецЕсли;
			
		ИначеЕсли ОбъектОперации.Метаданные().ТабличныеЧасти.Найти(ИмяРеквизита) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяРеквизита ].Синоним) Тогда
				Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяРеквизита ].Синоним;
			Иначе
				Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяРеквизита ].Имя;
			КонецЕсли;
			
		ИначеЕсли НЕ ИмяТаблицыШаблонаФайла = "" 
			И ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяТаблицыШаблонаФайла ].Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяТаблицыШаблонаФайла ].Реквизиты[ ИмяРеквизита ].Синоним) Тогда
				Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяТаблицыШаблонаФайла ].Реквизиты[ ИмяРеквизита ].Синоним;
			Иначе
				Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ ИмяТаблицыШаблонаФайла ].Реквизиты[ ИмяРеквизита ].Имя;
			КонецЕсли;	
			//без уличной магии, плз
			//ИначеЕсли ОбъектОперации.Метаданные().ТабличныеЧасти.Количество() = 1 Тогда
			//	Если ОбъектОперации.Метаданные().ТабличныеЧасти[ 0 ].Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			//		Если ЗначениеЗаполнено(ОбъектОперации.Метаданные().ТабличныеЧасти[ 0 ].Реквизиты[ ИмяРеквизита ].Синоним) Тогда
			//			Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ 0 ].Реквизиты[ ИмяРеквизита ].Синоним;
			//		Иначе
			//			Представление = ОбъектОперации.Метаданные().ТабличныеЧасти[ 0 ].Реквизиты[ ИмяРеквизита ].Имя;
			//		КонецЕсли;	
			//	КонецЕсли;
		КонецЕсли;
		
	исключение
		Попытка 
			Представление = "0 " + СокрЛП(ЗначениеЗаполнено(ОбъектОперации[ ИмяРеквизита ]));
			
		Исключение 	
			Попытка 
				Представление = "1 " + СокрЛП(ЗначениеЗаполнено(ОбъектОперации[ ИмяТаблицыШаблонаФайла ][ 0 ][ ИмяРеквизита ]));
				
			Исключение 	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "! " + ОбъектОперации + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(": Нет реквизита") + " " + ИмяРеквизита + " " + ИмяТаблицыШаблонаФайла + ": " + ОписаниеОшибки();
				Сообщение.Сообщить();
				
			КонецПопытки;
		КонецПопытки;
	конецпопытки;
	
	Возврат Представление;
	
КонецФункции //ПроверкаРеквизита

//Превратить значение в числовой тип
Функция   ПревратитьВЧисло(ЗначениеДанных, ШаблонФайла, МожетБытьОтрицательным = Ложь) 
	
	СимволРазделителяЧислаНашейБазы = Сред(СокрЛП(1.5), 2, 1);
	Если НЕ СимволРазделителяЧислаНашейБазы = ШаблонФайла.РазделительЧисел Тогда
		ЗначениеДанных = СтрЗаменить(ЗначениеДанных, СимволРазделителяЧислаНашейБазы, ШаблонФайла.РазделительЧисел);	
	КонецЕсли;
	
	УбратьНечисловыеСимволы(ЗначениеДанных, ШаблонФайла.РазделительЧисел, МожетБытьОтрицательным);
	
	Возврат ЗначениеДанных;
	
КонецФункции //ПревратитьВЧисло

//Превратить значение из числового типа
Функция   ПривестиИзЧисла(ЗначениеДанных, ШаблонФайла)
	
	СимволРазделителяЧислаНашейБазы = Сред(СокрЛП(1.5), 2, 1);
	Если НЕ СимволРазделителяЧислаНашейБазы = ШаблонФайла.РазделительЧисел Тогда 	
		ЗначениеДанных=стрзаменить(ЗначениеДанных, ШаблонФайла.РазделительЧисел, СимволРазделителяЧислаНашейБазы);
	КонецЕсли;
	
	Попытка 
		ЗначениеДанных = Число(ЗначениеДанных);
	Исключение 	
		ЗначениеДанных = УбратьНечисловыеСимволы(ЗначениеДанных, СимволРазделителяЧислаНашейБазы);
		
		Попытка 
			ЗначениеДанных = Число(ЗначениеДанных);
		Исключение 	
			ЗначениеДанных = 0;
		КонецПопытки;
		
	КонецПопытки;
	
	Возврат ЗначениеДанных;
	
КонецФункции //ПривестиИзЧисла

//Перевести схожие символы латинского по начертанию к русским
Функция   ПривестиКСимволамНаРусском(Знач ЭлементДанныхФайла, ПеревестиОшибкуНабора) Экспорт
	
	Если ПеревестиОшибкуНабора тогда
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "q","й");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "w","ц");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "e","у");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "r","к");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "t","е");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "y","н");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "u","г");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "i","ш");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "o","щ");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "p","з");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "[","х");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "]","ъ");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "a","ф");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "s","ы");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "d","в");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "f","а");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "g","п");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "h","р");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "j","о");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "k","л");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "l","д");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, ";","ж");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "'","э");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "z","я");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "x","ч");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "c","с");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "v","м");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "b","и");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "n","т");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "m","ь");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, ",","б");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, ".","ю");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "`","ё");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "|","/");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "@","""");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "#","№");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "$",";");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "^",":");
			ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "&","?");
			
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "Q","й");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "W","Ц");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "E","У");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "R","К");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "T","Е");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "Y","Н");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "U","Г");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "I","Ш");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "O","Щ");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "P","З");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "{","Х");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "}","Ъ");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "A","Ф");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "S","Ы");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "D","В");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "F","А");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "G","П");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "H","Р");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "J","О");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "K","Л");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "L","Д");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, ":","Ж");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, """","Э");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "Z","Я");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "X","Ч");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "C","С");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "V","М");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "B","И");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "N","Т");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "M","Ь");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "<","Б");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, ">","Ю");
		ЭлементДанныхФайла = стрзаменить(ЭлементДанныхФайла, "~","Ё");
		Иначе
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "E", "Е");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "T", "Т");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "O", "О");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "P", "Р");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "A", "А");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "H", "Н");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "K", "К");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "X", "Х");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "B", "В");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "M", "М");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "e", "е");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "o", "о");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "p", "р");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "a", "а");
	ЭлементДанныхФайла = СтрЗаменить(ЭлементДанныхФайла, "x", "х");		
	КонецЕсли;
	
	Возврат ЭлементДанныхФайла;
	
КонецФункции //ПривестиКСимволамНаРусском(ЭлементДанныхФайла)

//Перевести все символы к латинским (в т.ч. схожие по начертанию)
Функция   ПеревестиСтрокуВЛатинскиеСимволы(Знач ЗначениеПеревода, ПеревестиТакжеСпецСимволыИУстановитьВерхнийРегистр = Истина, ПеревестиКТакимПоНаписанию = Ложь, ПеревестиОшибкуНабора = Ложь) Экспорт
	
	Если ПеревестиТакжеСпецСимволыИУстановитьВерхнийРегистр Тогда
		
		ЗначениеПеревода = ВРег(ЗначениеПеревода);
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, " ","H");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ".","T");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ",","Z");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "!","V");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "№","N");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ";","T");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "%","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ":","D");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "?","V");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "*","Z");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "(","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ")","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "-","M");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "=","R");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, " + ","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "\","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "/","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "|","R");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, " ]","D");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "[ ","O");
		
	Иначе
		
		если ПеревестиОшибкуНабора тогда
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "й","q");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ц","w");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "у","e");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "к","r");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "е","t");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "н","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "г","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ш","i");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "щ","o");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "з","p");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "х","[");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ъ","]");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ф","a");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ы","s");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "в","d");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "а","f");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "п","g");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "р","h");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "о","j");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "л","k");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "д","l");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ж",";");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "э","'");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "я","z");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ч","x");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "с","c");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "м","v");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "и","b");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "т","n");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ь","m");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "б",",");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ю",".");			
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ё","`");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, """","@");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "№","#");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ";","$");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "%","%");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, ":","^");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "?","№");
			
		иначеесли ПеревестиКТакимПоНаписанию тогда
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "й","q");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ц","w");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "у","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "к","k");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "е","e");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "н","h");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "г","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ш","w");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "щ","o");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "з","3");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "х","x");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ъ","1");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ф","a");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ы","s");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "в","b");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "а","a");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "п","n");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "р","p");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "о","o");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "л","n");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "д","l");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ж","w");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "э","3");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "я","z");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ч","x");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "с","c");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "м","m");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "и","b");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "т","t");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ь","m");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "б","6");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ю","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ё","1");
		иначе
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "й","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ц","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "у","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "к","k");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "е","e");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "н","n");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "г","g");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ш","s");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "щ","s");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "з","z");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "х","h");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ъ","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ф","f");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ы","i");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "в","v");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "а","a");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "п","p");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "р","r");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "о","o");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "л","l");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "д","d");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ж","j");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "э","e");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "я","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ч","c");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "с","s");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "м","m");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "и","i");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "т","t");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ь","y");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "б","b");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ю","u");
			ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "ё","e");
			
		КонецЕсли;
	КонецЕсли;
	если ПеревестиОшибкуНабора тогда
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Й","Q");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ц","W");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "У","E");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "К","R");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Е","T");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Н","Y");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Г","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ш","I");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Щ","O");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "З","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Х","[");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ъ","]");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ф","A");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ы","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "В","D");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "А","F");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "П","G");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Р","H");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "О","J");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Л","K");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Д","L");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ж",";");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Э","'");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Я","Z");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ч","X");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "С","C");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "М","V");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "И","B");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Т","N");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ь","M");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Б",",");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ю",".");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ё","/");
		
	иначеесли ПеревестиКТакимПоНаписанию тогда
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Й","Й");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ц","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "У","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "К","K");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Е","E");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Н","H");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Г","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ш","W");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Щ","W");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "З","3");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Х","X");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ъ","1");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ф","A");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ы","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "В","B");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "А","A");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "П","G");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Р","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "О","O");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Л","K");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Д","D");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ж","W");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Э","E");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Я","Z");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ч","X");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "С","C");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "М","M");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "И","B");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Т","T");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ь","2");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Б","3");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ю","4");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ё","1");
		
	иначе
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Й","Y");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ц","C");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "У","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "К","K");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Е","E");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Н","N");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Г","G");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ш","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Щ","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "З","Z");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Х","H");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ъ","Y");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ф","F");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ы","I");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "В","V");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "А","A");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "П","P");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Р","R");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "О","O");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Л","L");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Д","D");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ж","J");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Э","E");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Я","Y");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ч","C");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "С","S");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "М","M");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "И","I");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Т","T");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ь","Y");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Б","B");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ю","U");
		ЗначениеПеревода = стрзаменить(ЗначениеПеревода, "Ё","E");
		
	КонецЕсли;
	
	Возврат ЗначениеПеревода;
	
КонецФункции //ПеревестиСтрокуВЛатинскиеСимволы

Функция   ПараметрКомандыТоварыКоличество(ПараметрКоманды) Экспорт
	
	Попытка 
		
		Возврат ПараметрКоманды.Товары.Количество();
		
	Исключение 	
		Сообщение =  Новый СообщениеПользователю;
		Сообщение.Текст  =  ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Нет таблицы Товары:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат 0;
		
	КонецПопытки;	
	
КонецФункции //ПараметрКомандыТоварыКоличество(ПараметрКоманды)

//Производит оценку объекта базы данных для описания в шаблоне обмена
Процедура ПроизвестиОценкуОбъектаБазыДанных(ОбъектШаблон, ТипМета, ТипОбъектаОперации, ТаблицаОбъектаОбмена = "", СоздаватьПоляШаблона = Ложь, Режим = 0) Экспорт
	
	Если СоздаватьПоляШаблона Тогда
		ГруппаПолейШаблонаПоОбъекту = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(ТипОбъектаОперации) ;
		Если НЕ ЗначениеЗаполнено(ГруппаПолейШаблонаПоОбъекту) ИЛИ НЕ ГруппаПолейШаблонаПоОбъекту.ЭтоГруппа Тогда
			ГруппаПолейШаблонаПоОбъекту = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьГруппу() ;
			ГруппаПолейШаблонаПоОбъекту.Наименование = ТипОбъектаОперации;
			ГруппаПолейШаблонаПоОбъекту.Комментарий = ТипМета + ": " + ТипОбъектаОперации;
			Попытка 
				ГруппаПолейШаблонаПоОбъекту.Записать();
				ГруппаПолейШаблонаПоОбъекту = ГруппаПолейШаблонаПоОбъекту.Ссылка;
			Исключение 	
				ГруппаПолейШаблонаПоОбъекту = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПустаяСсылка() ;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи группы справочника:") + " " + ГруппаПолейШаблонаПоОбъекту + " " + ОписаниеОшибки();
				Сообщение.Сообщить();    
				
			КонецПопытки; //записи ГруппаПолейШаблонаПоОбъекту
		КонецЕсли;
		ГруппаРодитель = ГруппаПолейШаблонаПоОбъекту;
	КонецЕсли;	
	
	Если ТаблицаОбъектаОбмена = "" Тогда
		ПереченьРеквизитов = Метаданные[ ТипМета ][ ТипОбъектаОперации ].Реквизиты;
		ПереченьСтандартныхРеквизитов = Метаданные[ ТипМета ][ ТипОбъектаОперации ].СтандартныеРеквизиты;
		
		Если Режим = 0 
			И НЕ ЗначениеЗаполнено(ОбъектШаблон.Наименование) Тогда
			ОбъектШаблон.Наименование = ТипОбъектаОперации;		
		КонецЕсли;
		
	Иначе
		
		Если Режим = 0
			И НЕ ЗначениеЗаполнено(ОбъектШаблон.Наименование) Тогда
			ОбъектШаблон.Наименование = ТипОбъектаОперации + " " + ТаблицаОбъектаОбмена;		;		
		КонецЕсли;		
		
		ПереченьРеквизитов = Метаданные[ ТипМета ][ ТипОбъектаОперации ].ТабличныеЧасти[ ТаблицаОбъектаОбмена ].Реквизиты;
		ПереченьСтандартныхРеквизитов = Метаданные[ ТипМета ][ ТипОбъектаОперации ].ТабличныеЧасти[ ТаблицаОбъектаОбмена ].СтандартныеРеквизиты;
		Если СоздаватьПоляШаблона Тогда
			
			ГруппаПолейШаблонаПоТаблицеОбъекта = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(ТипОбъектаОперации + "-" + ТаблицаОбъектаОбмена, , ГруппаПолейШаблонаПоОбъекту) ;
			Если НЕ ЗначениеЗаполнено(ГруппаПолейШаблонаПоТаблицеОбъекта) ИЛИ НЕ ГруппаПолейШаблонаПоТаблицеОбъекта.ЭтоГруппа Тогда
				ГруппаПолейШаблонаПоТаблицеОбъекта= Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьГруппу() ;
				ГруппаПолейШаблонаПоТаблицеОбъекта.Наименование = ТипОбъектаОперации + "-" + ТаблицаОбъектаОбмена;
				ГруппаПолейШаблонаПоТаблицеОбъекта.Комментарий = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Таблица") + " " + ТаблицаОбъектаОбмена + ОбщийМодульПовтор.ПолучитьТекстНаЯзыке(" объекта базы данных") + " " + ТипМета + ":" + ТипОбъектаОперации;
				ГруппаПолейШаблонаПоТаблицеОбъекта.Родитель = ГруппаПолейШаблонаПоОбъекту;
				Попытка 
					ГруппаПолейШаблонаПоТаблицеОбъекта.Записать();
					ГруппаПолейШаблонаПоТаблицеОбъекта = ГруппаПолейШаблонаПоТаблицеОбъекта.Ссылка;
				Исключение 	
					ГруппаПолейШаблонаПоТаблицеОбъекта = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПустаяСсылка() ;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи группы справочника:") + " " + ГруппаПолейШаблонаПоТаблицеОбъекта + " " + ОписаниеОшибки();
					Сообщение.Сообщить();    
					
				КонецПопытки; //записи ГруппаПолейШаблонаПоОбъекту
			КонецЕсли;
			ГруппаРодитель = ГруппаПолейШаблонаПоТаблицеОбъекта;
			
		КонецЕсли;			
		
		Если Режим = 0 Тогда
			
			НовоеПолеШаблона = ОбъектШаблон.ПоследовательностьПолейВФайле.Добавить();
			Если ТипМета = "Справочники" Тогда
				НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеВладельцаКарточки;	
				НовоеПолеШаблона.ИмяПоляВФайле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеВладельцаКарточки.ЗаголовокПоляПоУмолчанию;
				НовоеПолеШаблона.КомментарийПоля = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Наименование") + " " + ТипОбъектаОперации;
				НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.КодВладельцаКарточки;	
				НовоеПолеШаблона.ИмяПоляВФайле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.КодВладельцаКарточки.ЗаголовокПоляПоУмолчанию;
				НовоеПолеШаблона.КомментарийПоля = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Код") + " " + ТипОбъектаОперации;
			Иначе
				НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НомерВладельцаШапки;	
				НовоеПолеШаблона.ИмяПоляВФайле = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НомерВладельцаШапки.ЗаголовокПоляПоУмолчанию;
				НовоеПолеШаблона.КомментарийПоля = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Номер док.") + " " + ТипОбъектаОперации;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//НовТут = Неопределено;
	//Если НЕ Режим = 0 Тогда
	//	Если ТипМета = "Справочники" Тогда
	//		Выполнить(" НовТут = " + ТипМета + "." + ТипОбъектаОперации + ".СоздатьЭлемент(); ");
	//	Иначе
	//		Попытка
	//			Выполнить(" НовТут = " + ТипМета + "." + ТипОбъектаОперации + ".СоздатьДокумент(); ");
	//		Исключение 
	//			Попытка 
	//				Выполнить(" НовТут = Перечисления." + ТипОбъектаОперации + ".Получить(0); ");
	//			Исключение 	
	//				
	//			КонецПопытки;
	//		КонецПопытки;
	//	КонецЕсли; 	
	//КонецЕсли;
	
	Для Каждого РеквизитОбъекта ИЗ ПереченьСтандартныхРеквизитов Цикл
		
		РеквизитОбъектаИмя = СокрЛП(РеквизитОбъекта.Имя);
		
		Если Режим = 1 
			ИЛИ Режим = 2 Тогда
			
			Если Режим = 1 Тогда
				НоваяСтрокаСРеквизитом = ОбъектШаблон.ТолькоДляОбъектовСРеквизитами.Добавить();
				НоваяСтрокаСРеквизитом.КачествоУсловия = "И";
			Иначе
				НоваяСтрокаСРеквизитом = ОбъектШаблон.ДополнительноеЗаполнениеРеквизитов.Добавить();
			КонецЕсли;
			НоваяСтрокаСРеквизитом.НаименованиеРеквизита = РеквизитОбъектаИмя;
			НоваяСтрокаСРеквизитом.ИмяТаблицыРеквизита = ТаблицаОбъектаОбмена;
			
			Если РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность > 0 Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = 0;
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = Ложь;		 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Дата")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = ОбщийМодульСервисСервер.ПользователяТекущаяДата();			 
			ИначеЕсли РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина > 0 Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = "";			 			 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Строка")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = "";			 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Число")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = 0;
			КонецЕсли;
			НоваяСтрокаСРеквизитом.Комментарий = РеквизитОбъекта.Подсказка; 
			
		Иначе //если режим = 0 тогда
			НовоеПолеШаблона = ОбъектШаблон.ПоследовательностьПолейВФайле.Добавить();
			НовоеПолеШаблона.ИмяПоляВФайле = РеквизитОбъектаИмя;
			НовоеПолеШаблона.КомментарийПоля = РеквизитОбъекта.Синоним;
			
			Если СоздаватьПоляШаблона Тогда
				ПолеДляШаблона = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(РеквизитОбъектаИмя, , ГруппаРодитель);
				Если НЕ ЗначениеЗаполнено(ПолеДляШаблона) Тогда
					ПолеДляШаблона = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьЭлемент() ;
					ПолеДляШаблона.Родитель = ГруппаРодитель;
					ПолеДляШаблона.Наименование = РеквизитОбъектаИмя;
					
					Если РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность > 0 Тогда
						ПолеДляШаблона.ТипТут = "N";
						ПолеДляШаблона.ДлинаТут = РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность;
						ПолеДляШаблона.ТочностьТут = РеквизитОбъекта.Тип.КвалиФикаторыЧисла.РазрядностьДробнойЧасти;
					ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
						ПолеДляШаблона.ТипТут = "L";
						ПолеДляШаблона.ДлинаТут = 1;
						ПолеДляШаблона.ТочностьТут = 0;
						//ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
						//	ПолеДляШаблона.ТипТут = "N";
						//	ПолеДляШаблона.ДлинаТут = 1;
						//	ПолеДляШаблона.ТочностьТут = 0;
					ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Дата")) Тогда
						ПолеДляШаблона.ТипТут = "D";
						ПолеДляШаблона.ДлинаТут = 8;
						ПолеДляШаблона.ТочностьТут = 0;
					ИначеЕсли РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина > 0 Тогда
						ПолеДляШаблона.ТипТут = "S";
						ПолеДляШаблона.ДлинаТут = РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина;
						Если ПолеДляШаблона.ДлинаТут > 254 Тогда
							ПолеДляШаблона.ДлинаТут = 254;
						КонецЕсли;
						ПолеДляШаблона.ТочностьТут = 0;
					Иначе
						ПолеДляШаблона.ТипТут = "S";
						ПолеДляШаблона.ДлинаТут = 254;
						ПолеДляШаблона.ТочностьТут = 0;
					КонецЕсли;       
					
					ПолеДляШаблона.ЗаголовокПоляПоУмолчанию = РеквизитОбъектаИмя;
					ПолеДляШаблона.Комментарий = СокрЛП(РеквизитОбъекта.Подсказка);
					Если ПолеДляШаблона.Комментарий = "" Тогда
						ПолеДляШаблона.Комментарий = СокрЛП(РеквизитОбъекта.Синоним);
					КонецЕсли;
					//ПолеДляШаблона.ПолеПринадлежитОбъектуТаблицы
					Попытка 
						ПолеДляШаблона.Записать();
						НовоеПолеШаблона.ПолеТаблицы = ПолеДляШаблона.Ссылка;
					Исключение 	
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи эл-та справочника:") + " " + ПолеДляШаблона + " " + ОписаниеОшибки();
						Сообщение.Сообщить();    
						
					КонецПопытки; //записи ПолеДляШаблона
				Иначе
					
					НовоеПолеШаблона.ПолеТаблицы = ПолеДляШаблона;
				КонецЕсли;
				
			Иначе
				
				НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(РеквизитОбъектаИмя);
				Если НЕ ЗначениеЗаполнено(НовоеПолеШаблона.ПолеТаблицы) Тогда
					НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле ;
				КонецЕсли;
			КонецЕсли; 	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитОбъекта ИЗ ПереченьРеквизитов Цикл
		
		РеквизитОбъектаИмя = СокрЛП(РеквизитОбъекта.Имя);
		Если Режим = 1 
			ИЛИ Режим = 2 Тогда
			
			Если Режим = 1 Тогда
				НоваяСтрокаСРеквизитом = ОбъектШаблон.ТолькоДляОбъектовСРеквизитами.Добавить();
				НоваяСтрокаСРеквизитом.КачествоУсловия = "И";
			Иначе
				НоваяСтрокаСРеквизитом = ОбъектШаблон.ДополнительноеЗаполнениеРеквизитов.Добавить();
			КонецЕсли;
			
			НоваяСтрокаСРеквизитом.НаименованиеРеквизита = РеквизитОбъектаИмя;
			НоваяСтрокаСРеквизитом.ИмяТаблицыРеквизита = ТаблицаОбъектаОбмена;
			
			Если РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность > 0 Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = 0;
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = Ложь;		 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Дата")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = ОбщийМодульСервисСервер.ПользователяТекущаяДата();			 
			ИначеЕсли РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина > 0 Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = "";			 			 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Строка")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = "";			 
			ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Число")) Тогда
				НоваяСтрокаСРеквизитом.ЗначениеРеквизита = 0;
			КонецЕсли;
			НоваяСтрокаСРеквизитом.Комментарий = РеквизитОбъекта.Подсказка; 
			
		Иначе //если режим = 0 тогда
			НовоеПолеШаблона = ОбъектШаблон.ПоследовательностьПолейВФайле.Добавить();
			НовоеПолеШаблона.ИмяПоляВФайле = РеквизитОбъектаИмя;
			НовоеПолеШаблона.КомментарийПоля = РеквизитОбъекта.Синоним;
			Если СоздаватьПоляШаблона Тогда
				ПолеДляШаблона = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(РеквизитОбъектаИмя, , ГруппаРодитель);
				Если НЕ ЗначениеЗаполнено(ПолеДляШаблона) Тогда
					ПолеДляШаблона = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.СоздатьЭлемент() ;
					ПолеДляШаблона.Родитель = ГруппаРодитель;
					ПолеДляШаблона.Наименование = РеквизитОбъектаИмя;
					Если РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность > 0 Тогда
						ПолеДляШаблона.ТипТут = "N";
						ПолеДляШаблона.ДлинаТут = РеквизитОбъекта.Тип.КвалиФикаторыЧисла.Разрядность;
						ПолеДляШаблона.ТочностьТут = РеквизитОбъекта.Тип.КвалиФикаторыЧисла.РазрядностьДробнойЧасти;
						
					ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
						ПолеДляШаблона.ТипТут = "L";
						ПолеДляШаблона.ДлинаТут = 1;
						ПолеДляШаблона.ТочностьТут = 0;
						//ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Булево")) Тогда
						//	ПолеДляШаблона.ТипТут = "N";
						//	ПолеДляШаблона.ДлинаТут = 1;
						//	ПолеДляШаблона.ТочностьТут = 0;
						
					ИначеЕсли РеквизитОбъекта.Тип.СодержитТип(Тип("Дата")) Тогда
						ПолеДляШаблона.ТипТут = "D";
						ПолеДляШаблона.ДлинаТут = 8;
						ПолеДляШаблона.ТочностьТут = 0;
						
					ИначеЕсли РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина > 0 Тогда
						ПолеДляШаблона.ТипТут = "S";
						ПолеДляШаблона.ДлинаТут = РеквизитОбъекта.Тип.КвалиФикаторыСтроки.Длина;
						Если ПолеДляШаблона.ДлинаТут > 254 Тогда
							ПолеДляШаблона.ДлинаТут = 254;
						КонецЕсли;
						ПолеДляШаблона.ТочностьТут = 0;
						
					Иначе
						ПолеДляШаблона.ТипТут = "S";
						ПолеДляШаблона.ДлинаТут = 254;
						ПолеДляШаблона.ТочностьТут = 0;
					КонецЕсли;       
					
					ПолеДляШаблона.ЗаголовокПоляПоУмолчанию = РеквизитОбъектаИмя;
					ПолеДляШаблона.Комментарий = СокрЛП(РеквизитОбъекта.Подсказка);
					Если ПолеДляШаблона.Комментарий = "" Тогда
						ПолеДляШаблона.Комментарий = СокрЛП(РеквизитОбъекта.Синоним);
					КонецЕсли;
					//ПолеДляШаблона.ПолеПринадлежитОбъектуТаблицы
					Попытка 
						ПолеДляШаблона.Записать();
						НовоеПолеШаблона.ПолеТаблицы = ПолеДляШаблона.Ссылка;
					Исключение 	
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи эл-та справочника:") + " " + ПолеДляШаблона + " " + ОписаниеОшибки();
						Сообщение.Сообщить();    
						
					КонецПопытки; //записи ПолеДляШаблона
				Иначе
					
					НовоеПолеШаблона.ПолеТаблицы = ПолеДляШаблона;
				КонецЕсли;
			Иначе
				
				НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию(РеквизитОбъектаИмя);
				Если НЕ ЗначениеЗаполнено(НовоеПолеШаблона.ПолеТаблицы) Тогда
					НовоеПолеШаблона.ПолеТаблицы = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ПропуститьДанноеПоле ;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Возвращает адрес файла у шаблона обмена
Функция   ПолучитьАресФайлаШаблона(ШаблонШапки) Экспорт
	
	Возврат ШаблонШапки.АдресФайла;
	
КонецФункции //ПолучитьАресФайлаШаблона(Объект.ШаблонШапки);

//Строка файла по подстрокам раскладывается в элементы массива
Функция   РазложитьСтрокуВМассивПодстрок(Знач Стр, Знач ШаблонФайла = Неопределено, РазделителиВстречаютсяМеждуЗнаками = "$ZA$ZA$", ПропуститьЧислоСимволовСНачалаСтроки = 0, ПропуститьЧислоСимволовВКонцеСтроки = 0) Экспорт
	
	Если ШаблонФайла = Неопределено Тогда //так надо - есть вызов ИЗ объекта
		Разделитель = ",";
	Иначе
		Разделитель = ШаблонФайла.РазделительПолей;
		РазделительПолейАльтернативный = ШаблонФайла.РазделительПолейАльтернативный;
	КонецЕсли;
	
	Если ПропуститьЧислоСимволовВКонцеСтроки > 0 Тогда
		Стр = ЛЕВ(Стр, СтрДлина(Стр) -	ПропуститьЧислоСимволовВКонцеСтроки);											  	
	КонецЕсли;
	
	Если ПропуститьЧислоСимволовСНачалаСтроки > 0 Тогда
		Стр = ПРАВ(Стр, СтрДлина(Стр) -	ПропуститьЧислоСимволовСНачалаСтроки);
	КонецЕсли;
	МассивСтрок = РазобратьСтрокуПоПодстрокам(Стр, Разделитель, РазделителиВстречаютсяМеждуЗнаками);
	Если ЗначениеЗаполнено(РазделительПолейАльтернативный) И МассивСтрок.Количество() < 2 Тогда
		МассивСтрок = РазобратьСтрокуПоПодстрокам(Стр, РазделительПолейАльтернативный, РазделителиВстречаютсяМеждуЗнаками);
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции	

//Разбирает строку по подстрокам
Функция   РазобратьСтрокуПоПодстрокам(СтрокаДляОбработки, Разделитель, РазделителиВстречаютсяМеждуЗнаками)
	
	МассивСтрок = Новый Массив();
	ЧислоПроходовПоСтроке = 0;
	
	Если Разделитель = " " Тогда
		СтрокаДляОбработки = СокрЛП(СтрокаДляОбработки);
		Пока 1 = 1 
			И ЧислоПроходовПоСтроке < 1999 Цикл
			
			ЧислоПроходовПоСтроке = ЧислоПроходовПоСтроке + 1;
			Позиция = Найти(СтрокаДляОбработки, Разделитель);
			Если Позиция = 0 Тогда
				МассивСтрок.Добавить(СтрокаДляОбработки);
				Возврат МассивСтрок;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазделителиВстречаютсяМеждуЗнаками) Тогда
				ПозицияРазделителя = Найти(СтрокаДляОбработки, РазделителиВстречаютсяМеждуЗнаками);
				Если ПозицияРазделителя <> 0 
					И ПозицияРазделителя < Позиция Тогда
					
					СтрокиЧасть = СокрЛ(Сред(СтрокаДляОбработки, ПозицияРазделителя));
					ПозицияВторогоРазделителя = Найти(СтрокиЧасть, РазделителиВстречаютсяМеждуЗнаками);
					Если ПозицияВторогоРазделителя <> 0 
						И ПозицияВторогоРазделителя > Позиция Тогда 	
						
						СтрокиДоля = СокрЛ(Сред(СтрокиЧасть, ПозицияВторогоРазделителя));
						Позиция = Найти(СтрокиДоля, Разделитель);
						Если Позиция = 0 Тогда
							МассивСтрок.Добавить(СтрокаДляОбработки);
							
							Возврат МассивСтрок;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрок.Добавить(Лев(СтрокаДляОбработки, Позиция - 1));
			СтрокаДляОбработки = СокрЛ(Сред(СтрокаДляОбработки, Позиция));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 
			И ЧислоПроходовПоСтроке < 1999 Цикл
			
			ЧислоПроходовПоСтроке = ЧислоПроходовПоСтроке + 1;
			Позиция = Найти(СтрокаДляОбработки, Разделитель);
			Если Позиция = 0 Тогда
				Если (СокрЛП(СтрокаДляОбработки) <> "") Тогда
					МассивСтрок.Добавить(СтрокаДляОбработки);
				КонецЕсли;
				
				Возврат МассивСтрок;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РазделителиВстречаютсяМеждуЗнаками) Тогда
				ПозицияРазделителя = Найти(СтрокаДляОбработки, РазделителиВстречаютсяМеждуЗнаками);
				Если ПозицияРазделителя <> 0 
					И ПозицияРазделителя < Позиция Тогда
					
					СтрокиЧасть = СокрЛ(Сред(СтрокаДляОбработки, ПозицияРазделителя));
					ПозицияВторогоРазделителя = Найти(СтрокиЧасть, РазделителиВстречаютсяМеждуЗнаками);
					Если ПозицияВторогоРазделителя <> 0 
						И ПозицияВторогоРазделителя > Позиция Тогда
						
						СтрокиДоля = СокрЛ(Сред(СтрокиЧасть, ПозицияВторогоРазделителя));
						Позиция = Найти(СтрокиДоля, Разделитель);
						Если Позиция = 0 Тогда
							Если (СокрЛП(СтрокаДляОбработки) <> "") Тогда
								МассивСтрок.Добавить(СтрокаДляОбработки);
							КонецЕсли;
							
							Возврат МассивСтрок;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрок.Добавить(Лев(СтрокаДляОбработки, Позиция - 1));
			СтрокаДляОбработки = Сред(СтрокаДляОбработки, Позиция + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции 

//Создает элемент номенклатуры
Функция   СоздатьЭлементНоменклатуры(СтрокаТаблицыИлиЭлемент, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов)
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент() ;
	
	Номенклатура.НоменклатурнаяГруппа 		= ШаблонФайла.НоменклатурнаяГруппа;
	
	ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Номенклатура, "ПолеТаблицы") ;
	Если ПозицияНаименование = Неопределено Тогда
		ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеОбъекта, "ПолеТаблицы") ;
		Если ПозицияНаименование = Неопределено Тогда
			ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Наименование"), "ПолеТаблицы") ;
			Если ПозицияНаименование = Неопределено Тогда
				ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Номенклатура"), "ПолеТаблицы") ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если не позицияНаименование = Неопределено Тогда
		Номенклатура.наименование = МассивДанныхСтрокиФайла[ ПозицияНаименование.НомерСтроки - 1 ];			
	КонецЕсли;
	
	Номенклатура.Производитель = ШаблонФайла.Производитель;						
	
	БылаХарактеристика = 0;
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.АртикулНоменклатуры, "ПолеТаблицы") ;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		Номенклатура.Артикул = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
		//Иначе
		//		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.АртикулНоменклатурыСвойПотомУКлиента, "ПолеТаблицы") ;
		//		Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		//Номенклатура.Артикул = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
		//		КонецЕсли;
	КонецЕсли;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ШтрихКод, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("ШтрихКод"), "ПолеТаблицы") ;
		Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
			ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("ОсновнойШтрихКод"), "ПолеТаблицы") ;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойШтрихКод = "";
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ОсновнойШтрихКод = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
	КонецЕсли;
	Номенклатура.ОсновнойШтрихКод = ОсновнойШтрихКод;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Производитель, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Производитель"), "ПолеТаблицы") ;
	КонецЕсли;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		номенклатура.Производитель = Справочники.Производители.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
	КонецЕсли;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НоменклатурнаяГруппаНоменклатуры, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("НоменклатурнаяГруппа"), "ПолеТаблицы") ;
	КонецЕсли;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
	КонецЕсли;
	
	родитель = Неопределено;
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.РодительЭлемента, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Родитель"), "ПолеТаблицы") ;
	КонецЕсли;
	
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = ИСТИНА
		|	И Номенклатура.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		если РезультатЗапроса.Пустой() тогда
			родительобъект = Справочники.Номенклатура.СоздатьГруппу() ;
			родительобъект.Наименование = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
			родительобъект.Записать();
			родитель = родительобъект.Ссылка;
			
		иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				родитель = ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;	
		КонецЕсли;
		
	иначе
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.РодителяЭлементаКод, "ПолеТаблицы") ;
		Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
			ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Родитель Код"), "ПолеТаблицы") ;
		КонецЕсли;
		
		Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа = ИСТИНА
			|	И Номенклатура.Код = &Код";
			
			Запрос.УстановитьПараметр("КОД", МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				родитель = ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;                              	
			
		КонецЕсли;	
		Если НЕ родитель = Неопределено Тогда
			Номенклатура.Родитель = родитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка 
		Номенклатура.Записать();
	Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
		ТаблицаОбработанныхОбъектов.Добавить(Номенклатура.ссылка);
	КонецЕсли;
		
		Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
			ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
			ШК.Активность 	= Истина;
			ШК.Номенклатура = Номенклатура.Ссылка ;
			ШК.ШтрихКод 	= ОсновнойШтрихКод;
			ШК.Записать(Истина);			 	
			
		КонецЕсли;
		
		Возврат Номенклатура.Ссылка ;	
		
	Исключение 	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры:") + " " + ОписаниеОшибки();
		Сообщение.Сообщить();
		
		Возврат Справочники.Номенклатура.ПустаяСсылка() ;
		
	КонецПопытки; //записи Номенклатура
	
КонецФункции

//Обновляет элемент номенклатуры
Функция   ОбновитьЭлементНоменклатуры(СсылкаНаЭлемент, СтрокаТаблицыИлиЭлемент, ПолеТаблицы, ШаблонФайла, МассивДанныхСтрокиФайла, СтруктураИмпортаЭкспорта, ТаблицаОбработанныхОбъектов)
	
	Номенклатура  = СсылкаНаЭлемент.ПолучитьОбъект();
	былиизменения = ложь;
	
	Если не Номенклатура.НоменклатурнаяГруппа = ШаблонФайла.НоменклатурнаяГруппа тогда
		Номенклатура.НоменклатурнаяГруппа = ШаблонФайла.НоменклатурнаяГруппа;             	
		былиизменения = истина;
	КонецЕсли;
	
	ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Номенклатура, "ПолеТаблицы") ;
	Если ПозицияНаименование = Неопределено Тогда
		ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НаименованиеОбъекта, "ПолеТаблицы") ;
		Если ПозицияНаименование = Неопределено Тогда
			ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Наименование"), "ПолеТаблицы") ;
			Если ПозицияНаименование = Неопределено Тогда
				ПозицияНаименование = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Номенклатура"), "ПолеТаблицы") ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если не позицияНаименование = Неопределено 
		и не Номенклатура.наименование = МассивДанныхСтрокиФайла[ ПозицияНаименование.НомерСтроки - 1 ] Тогда
		
		Номенклатура.наименование = МассивДанныхСтрокиФайла[ ПозицияНаименование.НомерСтроки - 1 ];
		былиизменения = истина;
	КонецЕсли;
	
	Если НЕ Номенклатура.Производитель = ШаблонФайла.Производитель Тогда
		Номенклатура.Производитель = ШаблонФайла.Производитель;	            	
		былиизменения = истина;
	КонецЕсли;
	
	БылаХарактеристика = 0;
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.АртикулНоменклатуры, "ПолеТаблицы") ;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		
		Если НЕ Номенклатура.Артикул = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ] Тогда
			Номенклатура.Артикул = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
			былиизменения = истина;
		КонецЕсли;
		//Иначе
		//		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.АртикулНоменклатурыСвойПотомУКлиента, "ПолеТаблицы") ;
		//		Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		//Номенклатура.Артикул = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
		//		КонецЕсли;
	КонецЕсли;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.ШтрихКод, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("ШтрихКод"), "ПолеТаблицы") ;
		Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
			ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("ОсновнойШтрихКод"), "ПолеТаблицы") ;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойШтрихКод = "";
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ОсновнойШтрихКод = МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ];
	КонецЕсли;
	
	Если НЕ Номенклатура.ОсновнойШтрихКод = ОсновнойШтрихКод Тогда
		Номенклатура.ОсновнойШтрихКод = ОсновнойШтрихКод;
		былиизменения = истина;
	КонецЕсли;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.Производитель, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("Производитель"), "ПолеТаблицы") ;
	КонецЕсли;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		
		Если НЕ номенклатура.Производитель = Справочники.Производители.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]) Тогда
			номенклатура.Производитель = Справочники.Производители.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
			былиизменения = истина;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НоменклатурнаяГруппаНоменклатуры, "ПолеТаблицы") ;
	Если ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
		ПозицияДанныхОНоменклатуреВШаблоне = ШаблонФайла.ПоследовательностьПолейВФайле.Найти(Справочники.ПодсистемаИЭИмпортЭкспортФСПоля.НайтиПоНаименованию("НоменклатурнаяГруппа"), "ПолеТаблицы") ;
	КонецЕсли;
	Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда 	
		
		Если НЕ номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]) Тогда
			номенклатура.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию( МассивДанныхСтрокиФайла[ ПозицияДанныхОНоменклатуреВШаблоне.НомерСтроки - 1 ]);
			былиизменения = истина;
		КонецЕсли;
	КонецЕсли;
	
	если былиизменения тогда
		Попытка 
			Номенклатура.Записать();
			
			Если ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена и ШаблонФайла.ПоказыватьОбъектыОбмена Тогда		
				ТаблицаОбработанныхОбъектов.Добавить(Номенклатура.ссылка);
			КонецЕсли;
			Если НЕ ПозицияДанныхОНоменклатуреВШаблоне = Неопределено Тогда
				ШК = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
				ШК.Активность 	= Истина;
				ШК.Номенклатура = Номенклатура.Ссылка ;
				ШК.ШтрихКод 	= ОсновнойШтрихКод;
				ШК.Записать(Истина);			 	
				
			КонецЕсли;
			
			Возврат Номенклатура.Ссылка ;	
			
		Исключение 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Ошибка при попытке записи номенклатуры:") + " " + ОписаниеОшибки();
			Сообщение.Сообщить();
			
			Возврат Справочники.Номенклатура.ПустаяСсылка() ;
			
		КонецПопытки; //записи Номенклатура
		
	иначе
		Возврат СсылкаНаЭлемент
	конецесли;
	
КонецФункции

//Описывает структуру поля шаблона обмена
Функция   СоздатьСтруктуруПоляШаблона() Экспорт
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("Наименование", "");
	СтруктураПоля.Вставить("ДлинаТут", 120);
	СтруктураПоля.Вставить("Комментарий", "");
	СтруктураПоля.Вставить("ОпределенноеЗначение", NULL);
	СтруктураПоля.Вставить("ПолеПринадлежитОбъектуТаблицы", Ложь);
	СтруктураПоля.Вставить("ТипТут", "S");
	СтруктураПоля.Вставить("ТочностьТут", 0);
	СтруктураПоля.Вставить("ЗаголовокПоляПоУмолчанию", "");
	СтруктураПоля.Вставить("СоздаватьНовоеПоле", Истина);
	СтруктураПоля.Вставить("СоздаватьВПапкеСпециальные", Истина);
	
	Возврат СтруктураПоля;
	
КонецФункции //СоздатьСтруктуруПоляШаблона

Функция   СоздатьСтруктуруДляИмпортаЭкспорта(ОбъектОперации)
	
	СтруктураИмпортаЭкспорта = Новый структура;
	СтруктураИмпортаЭкспорта.Вставить("ОбъектОперации", ОбъектОперации);
	СтруктураИмпортаЭкспорта.Вставить("ШаблонФайла", Справочники.ПодсистемаИЭИмпортЭкспортФСШаблоны.ПустаяСсылка());
	СтруктураИмпортаЭкспорта.Вставить("АдресФайла", "");
	СтруктураИмпортаЭкспорта.Вставить("ИмяТаблицыШаблонаФайла", ""); 
	СтруктураИмпортаЭкспорта.Вставить("ПериодДляДокументов", "");
	СтруктураИмпортаЭкспорта.Вставить("ДатаАктуальности", '00010101000000');
	СтруктураИмпортаЭкспорта.Вставить("ДляТаблицыМатериалы", Ложь);
	СтруктураИмпортаЭкспорта.Вставить("ТипОбъектаОперации", "");
	СтруктураИмпортаЭкспорта.Вставить("ВладелецСпецификаций", Неопределено);
	СтруктураИмпортаЭкспорта.Вставить("ДополнительныйПараметр", "");
	СтруктураИмпортаЭкспорта.Вставить("ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора", Ложь);
	СтруктураИмпортаЭкспорта.Вставить("ПрямаяОбработкаТаблицы", Ложь);
	СтруктураИмпортаЭкспорта.Вставить("ТаблицаОбмена", Неопределено);
	
	ДополнительнаяИнформация = Новый структура;
	ДополнительнаяИнформация.Вставить("ЭтотРасчетныйСчет", Неопределено);
	СтруктураИмпортаЭкспорта.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
	
	Возврат СтруктураИмпортаЭкспорта;
	
КонецФункции //СоздатьСтруктуруДляИмпортаЭкспорта

Функция   СоздатьСтруктуруФормыПрогресса(ЗаголовокФормы = "", ШаблонФайла) Экспорт
	
	Если ЗаголовокФормы = "" Тогда
	ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Прогресс операции..");	
																  КонецЕсли;
	
	СтруктураФормыПрогресса = Новый Структура;
	
	СтруктураФормыПрогресса.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	СтруктураФормыПрогресса.Вставить("НеЗакрыватьОкноПеречняОбъектовОбмена", ШаблонФайла.НеЗакрыватьОкноПеречняОбъектовОбмена);
	СтруктураФормыПрогресса.Вставить("ПроцентОбработки", 0);
	СтруктураФормыПрогресса.Вставить("ДатаНачала", ТекущаяДата());
	СтруктураФормыПрогресса.Вставить("Датаокончания", ТекущаяДата());
	СтруктураФормыПрогресса.Вставить("ВремяОбработки", 0);
	СтруктураФормыПрогресса.Вставить("ОбработанОбъект", Неопределено);
	СтруктураФормыПрогресса.Вставить("ТаблицаОбработанныхОбъектов", Новый СписокЗначений);
	СтруктураФормыПрогресса.Вставить("ЧислоОбработанныхОбъектов", 0);
	СтруктураФормыПрогресса.Вставить("ЧислоОбъектовДляОбработки", 0);
	СтруктураФормыПрогресса.Вставить("НачальноеОкно", Ложь);
	СтруктураФормыПрогресса.Вставить("РасчитыватьСрокОкончанияОбмена", ШаблонФайла.РасчитыватьСрокОкончанияОбмена);
	СтруктураФормыПрогресса.Вставить("ПоказыватьОбъектыОбмена", ШаблонФайла.ПоказыватьОбъектыОбмена);
	
	ДанныеПрогресса = Новый Структура;
	ДанныеПрогресса.Вставить("ДанныеПрогресса", СтруктураФормыПрогресса);
	
	Возврат ДанныеПрогресса;
	
КонецФункции //СоздатьСтруктуруФормыПрогресса()

//Составляет наименование нового объекта  по шаблону из имен полей описанному в шаблоне файла обмена
// Режимы составления: 0-имя, 1- харка, 2 - Родитель
Функция   СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей(МассивДанныхСтрокиФайла, ШаблонФайла, Режим = 0) // 0-имя, 1- харка, 2 - Родитель
	
	Если Режим = 1 Тогда
		СтрокаИменПолей = ШаблонФайла.СоставлятьХарактеристикуПоВыражениюИзИменПолей;
	ИначеЕсли Режим = 2 Тогда
		СтрокаИменПолей = ШаблонФайла.СоставлятьНаименованиеГруппыРодителяИзИменПолей;
	Иначе		
		СтрокаИменПолей = ШаблонФайла.СоставлятьНаименованиеПоВыражениюИзИменПолей;
	КонецЕсли;
	
	СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей = СтрокаИменПолей;
	Для Каждого ПолеШаблонаФайла ИЗ ШаблонФайла.ПоследовательностьПолейВФайле Цикл
		Если Найти(СтрокаИменПолей, СокрЛП(ПолеШаблонаФайла.ИмяПоляВФайле)) > 0 Тогда
			СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей = СтрЗаменить(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей,
			СокрЛП(ПолеШаблонаФайла.ИмяПоляВФайле),
			МассивДанныхСтрокиФайла[ ПолеШаблонаФайла.НомерСтроки - 1 ]);
		КонецЕсли;	
	КонецЦикла;	
	
	РазделительВСоставномНаименовании = ШаблонФайла.РазделительВСоставномНаименовании;
	Если ЗначениеЗаполнено(РазделительВСоставномНаименовании) Тогда
		СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей 	= СокрЛП(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей);
		ДваРазделителя 				= РазделительВСоставномНаименовании + РазделительВСоставномНаименовании;
		СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей 	= СтрЗаменить(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей, ДваРазделителя, РазделительВСоставномНаименовании);
		
		Если прав(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей, СтрДлина(РазделительВСоставномНаименовании)) = РазделительВСоставномНаименовании Тогда
			СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей = Лев(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей, СтрДлина(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей) - СтрДлина(РазделительВСоставномНаименовании));
		КонецЕсли;              	
		РазделительИПробел 			= РазделительВСоставномНаименовании + " ";
		СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей 	= СтрЗаменить(СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей, РазделительИПробел, " ");
	КонецЕсли;
	
	Возврат СоставитьНаименованиеОбъектаПоШаблонуИзИменПолей;
	
КонецФункции

//Создать структуру  для диалога выбоа файла с фильтром
Функция   СтруктураДиалогФильтр(Знач ШаблонФайла, ВсеФайлы = Ложь) Экспорт
	
	СтруктураДиалогФильтр = Новый Структура;
	Если НЕ ВсеФайлы
		И ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF Тогда
		
		СтруктураДиалогФильтр.Вставить("ДиалогФильтр", "Файл (*.DBf)|*.DBf");
		СтруктураДиалогФильтр.Вставить("ДиалогРасширение", "DBf");
		
	ИначеЕсли НЕ ВсеФайлы
		И ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS Тогда
		
		СтруктураДиалогФильтр.Вставить("ДиалогФильтр", "Файл (*.XLs)|*.XLs");
		СтруктураДиалогФильтр.Вставить("ДиалогРасширение", "XLs");
		
		//ИначеЕсли ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XML Тогда
		//	СтруктураДиалогФильтр.Вставить("ДиалогФильтр", "Файл (*.XMl)|*.XMl");
		//	СтруктураДиалогФильтр.Вставить("ДиалогРасширение", "XMl");
	Иначе //txt //ВсеФайлы
		СтруктураДиалогФильтр.Вставить("ДиалогФильтр", "Файл (*.TXt)|*.TXt");
		СтруктураДиалогФильтр.Вставить("ДиалогРасширение", "TXt");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонФайла.МаскаФайла) Тогда
		СтруктураДиалогФильтр.ДиалогРасширение = ШаблонФайла.МаскаФайла;
	КонецЕсли;
	
	Возврат СтруктураДиалогФильтр;
	
КонецФункции //СтруктураДиалогФильтр(Объект)

//Возвращает определенный в шаблоне адрес файла обмена
Функция   ШаблонФайлаАдресФайлаБезВыбора(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.АдресФайла;
	
КонецФункции 

//Возвращает истину, если формат файла шаблона установлен - DBF
Функция   ШаблонФайлаФорматФайлаDBF(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.DBF ;
	
КонецФункции //ШаблонФайлаФорматФайлаDBF

//Возвращает истину, если формат файла шаблона установлен - TXT
Функция   ШаблонФайлаФорматФайлаTXT(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.TXT;
	
КонецФункции 

//Возвращает истину, если формат файла шаблона установлен - EXCEL
Функция   ШаблонФайлаФорматФайлаEXCEL(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ФорматФайла = Перечисления.ПодсистемаИЭИмпортЭкспортФорматыФайлов.XLS;
	
КонецФункции 

//Возвращает истину, если необходимо перед произведением обмена по этому шаблону выдавать запрос на интервал документов
Функция   ШаблонФайлаВыдаватьЗапросДляИнтервалаДокументов(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ВыдаватьЗапросДляИнтервалаДокументов;
	
КонецФункции //ШаблонФайла.ВыдаватьЗапросДляИнтервалаДокументов

//Возвращает истину, если включена демонстрация прогресса производства обмена для данного шаблона
Функция   ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ПоказыватьПрогрессПроизводстваОбмена;
	
КонецФункции //ШаблонФайлаПоказыватьПрогрессПроизводстваОбмена

//Выясняет, предназначен ли данный шаблон для обмена документами денежных средств
Функция   ШаблонФайлаПредназначенДляОбменаДокументамиДС(ШаблонФайла) Экспорт
	
	Если ШаблонФайла.ВидШаблона = Перечисления.ПодсистемаИЭИмпортЭкспортФайловВидыШаблонов.ДляОбменаСБанком Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции //ШаблонФайлаПредназначенДляОбменаДокументамиДС

//Возвращает параметр шаблона фала обмена - открывать ли каждый новый элемент при загрузке в новом окне
Функция	  ШаблонФайлаОткрыватьФормуКаждогоЭлементаИлиДокумента(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ОткрыватьФормуКаждогоЭлементаИлиДокумента;
	
КонецФункции

//Возвращает параметр шаблона фала обмена - открывать ли каждый новый документ, который не удалось провести автоматически
Функция   ШаблонФайлаОткрыватьФормуДокументовКоторыеНеУдалосьПровести(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ОткрыватьФормуДокументовКоторыеНеУдалосьПровести;
	
КонецФункции

//Возвращает параметр шаблона фала обмена - выводить ли перед записью окно с перечнем выгрузки для отбора
Функция   ШаблонФайлаПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора;
	
КонецФункции //ШаблонФайлаПриЭкспортеПередЗаписьюВыводитьОкноСПеречнемВыгрузкиДляОтбора(ШаблонФайла)

//Возвращает Истина. если шаблон предназначен для загрузки множества файлов из каталога или архива
Функция   ШаблонФайлаДляГрупповойзагрузки(ШаблонФайла) Экспорт
	
	Возврат ШаблонФайла.ЗагружатьВсеФайлыИзПапки;
	
КонецФункции //ШаблонФайлаДляГрупповойзагрузки

//Функция удаляет неразрывные пробелы из строки
Функция   УбратьНеразрывныйПробел(СтрокаСПробелом)
	
	ТекстРезультата = СокрЛП(СтрокаСПробелом);
	Если СтрДлина(ТекстРезультата) = 1 Тогда 
		ТекстРезультата = "0" + ТекстРезультата;
	ИначеЕсли СтрДлина(ТекстРезультата) > 3 Тогда 
		ТекстРезультата = СтрЗаменить(ТекстРезультата, символы.НПП, "");
	КонецЕсли;
	
	Возврат ТекстРезультата;
	
КонецФункции // УбратьНеразрывныйПробел

//Убрать нечисловые символы из значения данных
Функция   УбратьНечисловыеСимволы(ЗначениеДанных, РазрешенныйСимволРаделитель = ".", МожетБытьОтрицательным = Ложь) Экспорт
	
	ЗначениеДанных = СокрЛП(ЗначениеДанных);
	ИтоговаяСтрока = "";
	ЧислоСимволов = СтрДлина(ЗначениеДанных);
	
	СчетчикСимволов = 1;
	Пока СчетчикСимволов <= ЧислоСимволов Цикл
		СимволСтроки = Сред(ЗначениеДанных,СчетчикСимволов, 1);
		Если СимволСтроки = РазрешенныйСимволРаделитель 			
			ИЛИ (МожетБытьОтрицательным 
			И СимволСтроки = "-") Тогда
			
			ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
		ИначеЕсли НЕ кодсимвола(СимволСтроки) = 32 Тогда //" " -тоже 0
			
			Попытка 
				ЧислоСимвола = Число(СимволСтроки);
				ИтоговаяСтрока = ИтоговаяСтрока + СимволСтроки;
			Исключение 	
			КонецПопытки;      	
		КонецЕсли;
		
		СчетчикСимволов = СчетчикСимволов + 1;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции //УбратьНечисловыеСимволы

//Устанавливает значение реквизитов для нового поля шаблона описания обмена
Функция   УстановитьРеквизитыПоляШаблона(ПолеТаблицы) 
	
	СтруктураПоля = Новый структура;
	Если ЗначениеЗаполнено(ПолеТаблицы.типТут) Тогда
		СтруктураПоля.Вставить("ТипТут", ПолеТаблицы.типТут);
	Иначе
		СтруктураПоля.Вставить("ТипТут", "S");
	КонецЕсли;
	Если НЕ ПолеТаблицы.ДлинаТут = 0 Тогда
		СтруктураПоля.Вставить("ДлинаТут", ПолеТаблицы.ДлинаТут);
	Иначе
		СтруктураПоля.Вставить("ДлинаТут", 10);
	КонецЕсли;
	СтруктураПоля.Вставить("ТочностьТут", ПолеТаблицы.ТочностьТут);
	
	Возврат СтруктураПоля;
	
КонецФункции //УстановитьРеквизитыПоляШаблона

//Функция очищает символы строки, которые выходят за рамки кодовой страницы нормальных символов (буквы, цифры)
Функция   УбратьНеподходящиеСимволы(ТекстДляЗамен, ЗаменятьНа = "") Экспорт
	
	Если ЗаменятьНа = Неопределено Тогда
		ЗаменятьНа = "";
	КонецЕсли;
	
	ТекстРезультата = "";
	ДлинаТекстаЗамен = СтрДлина(ТекстДляЗамен);
	
	Для КурсорПоСтроке = 1 По ДлинаТекстаЗамен Цикл
		СимволДляПроверки = Сред(ТекстДляЗамен, КурсорПоСтроке, 1);
		СимволПроверки = КодСимвола(СимволДляПроверки);
		Если СимволПроверки > 31 
			И СимволПроверки < 127  Тогда
			
			ТекстРезультата = ТекстРезультата + СимволДляПроверки;
		ИначеЕсли СимволПроверки > 1039 
			И СимволПроверки < 1104 Тогда
			
			ТекстРезультата = ТекстРезультата + СимволДляПроверки;
		Иначе 
			ТекстРезультата = ТекстРезультата + ЗаменятьНа;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстРезультата;
	
КонецФункции //УбратьНеподходящиеСимволы

//Данный реквизит объекта по Ссылке - стандартный
Функция   ЭтоСтандартныйРеквизит(СсылкаНаОбъект, НаименованиеРеквизита)
	
	ЭтоСтандартныйРеквизит = Ложь;
	
	Для Каждого ОписаниеСтандартногоРеквизита ИЗ СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты Цикл
		Если ОписаниеСтандартногоРеквизита.Имя = НаименованиеРеквизита Тогда
			
			ЭтоСтандартныйРеквизит = Истина;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоСтандартныйРеквизит;
	
КонецФункции

//Выяснить подходит ли этот шаблон для обработки обмена этого объекта (Возвращает Истина если НЕ подходит
Функция   ЭтотШаблонНеПодходитДляОбъекта(ШаблонФайла, ОбъектОперации, ИмяТаблицыШаблонаФайла)
	
	РезультатУсловияНЕПодходит = Ложь;
	
	Если ШаблонФайла.ДанныйШаблонИспользоватьТолькоДляОбъектовСОпределеннымиРеквизитами Тогда
		
		Если ЗначениеЗаполнено(ШаблонФайла.ОтборДляКлиента) 
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Клиент", "") = "" 
			И НЕ ОбъектОперации.Клиент = ШаблонФайла.ОтборДляКлиента Тогда
			
			РезультатУсловияНЕПодходит = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ШаблонФайла.ОтборДляОрганизации) 
			И НЕ ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, "Организация", "") = "" 
			И НЕ ОбъектОперации.Клиент = ШаблонФайла.ОтборДляОрганизации Тогда
			
			РезультатУсловияНЕПодходит = Истина;
			
		ИначеЕсли ШаблонФайла.ТолькоДляОбъектовСРеквизитами.Количество() > 0 Тогда			
			
			РезультатУсловияНЕПодходит = Истина;
			
			Для Каждого РеквизитОбъекта ИЗ ШаблонФайла.ТолькоДляОбъектовСРеквизитами Цикл
				
				РеквизитОбъектаНаименованиеРеквизита = СокрЛП(РеквизитОбъекта.НаименованиеРеквизита);
				Если Не ПроверкаНаличияРеквизитаУОбъектаОперации(ОбъектОперации, РеквизитОбъектаНаименованиеРеквизита, РеквизитОбъекта.ИмяТаблицыРеквизита) = "" Тогда
					Попытка 
						Если СокрЛП(РеквизитОбъекта.ИмяТаблицыРеквизита) = "" Тогда
							
							ЗначениеРавно = ОбъектОперации[ РеквизитОбъектаНаименованиеРеквизита ] = РеквизитОбъекта.ЗначениеРеквизита;
							
						Иначе
							
							ПерваяЗаписьТаблицы = ОбъектОперации[ РеквизитОбъекта.ИмяТаблицыРеквизита ].Получить(0);
							ЗначениеРавно = ПерваяЗаписьТаблицы[ РеквизитОбъектаНаименованиеРеквизита ] = РеквизитОбъекта.ЗначениеРеквизита;
							
						КонецЕсли;
						
						Если РеквизитОбъекта.КачествоУсловия = "НЕ"
							И НЕ ЗначениеРавно Тогда
							
							РезультатУсловияНЕПодходит = Ложь;
							
						ИначеЕсли РеквизитОбъекта.КачествоУсловия = "НЕ"
							И ЗначениеРавно Тогда
							
							РезультатУсловияНЕПодходит = Истина;
							Прервать;
							
						ИначеЕсли РеквизитОбъекта.КачествоУсловия = "И"
							И ЗначениеРавно Тогда
							
							РезультатУсловияНЕПодходит = Ложь;
							
						ИначеЕсли РеквизитОбъекта.КачествоУсловия = "И"
							И НЕ ЗначениеРавно Тогда
							
							РезультатУсловияНЕПодходит = Истина;
							Прервать;
							
						ИначеЕсли ЗначениеРавно Тогда //ИЛИ
							
							РезультатУсловияНЕПодходит = Ложь;
							
						КонецЕсли;
						
					Исключение 	
						Сообщение  =  Новый СообщениеПользователю;
						Сообщение.Текст = ОбщийМодульПовтор.ПолучитьТекстНаЯзыке("Произошла ошибка:") + " " + ОписаниеОшибки();
						Сообщение.Поле = "";
						Сообщение.Сообщить();
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатУсловияНЕПодходит;
	
КонецФункции //ЭтотШаблоНеПодходитДляОбъекта

//Определяется тип платежного документа
Функция   ВыяснитьТипПлатежногоДокумента(ШаблонФайла, МассивДанныхСтрокиФайла)
	
	Если ШаблонФайла.ТолькоРасходные Тогда
		Дебет = Истина; 
	Иначе
		Дебет = Ложь;
	КонецЕсли;
	СправочникиSZИмпортЭкспортФСПоля = Справочники.ПодсистемаИЭИмпортЭкспортФСПоля;
	
	ВидПлатежногоДокумента = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ВидПлатежногоДокумента);
	Если  ЗначениеЗаполнено(ВидПлатежногоДокумента) Тогда
		ИмяТипаДокумента = СокрЛП(ВидПлатежногоДокумента);
		Если ЛЕВ(ВРЕГ(ИмяТипаДокумента), 5) = "ПОСТУ" Тогда
			Дебет = Ложь;
		КонецЕсли;
	Иначе
		
		ПризнакДебет = 0;
		
		Если ШаблонФайла.ПризнакДебетаОтрицательнаяСумма Тогда
			СуммаПлатежа = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежа);		
			Если НЕ ЗначениеЗаполнено(СуммаПлатежа) Тогда 	
				СуммаПлатежа = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.Сумма);		
				Если НЕ ЗначениеЗаполнено(СуммаПлатежа) Тогда 	
					СуммаПлатежа = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежаВалютная);		
					Если НЕ ЗначениеЗаполнено(СуммаПлатежа) Тогда 	
						СуммаПлатежа = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежаПриход);		
						Если НЕ ЗначениеЗаполнено(СуммаПлатежа) Тогда 	
							СуммаПлатежа = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежаРасход);		
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СуммаПлатежа) Тогда 		
				Попытка 
					СуммаПлатежа = Число(ПревратитьВЧисло(СуммаПлатежа, ШаблонФайла, Истина));
					Если СуммаПлатежа < 0 Тогда
						Дебет = Истина;														
					Иначе
						Дебет = Ложь;
					КонецЕсли;
					ПризнакДебет = 1;
				Исключение 	
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Произошла ошибка: " + ОписаниеОшибки();
					Сообщение.Сообщить();
					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонФайла.УсловиеДебетаПоле) Тогда
			Попытка
				Дебет = ВыполненоЛиУсловиеФильтра(ШаблонФайла.УсловиеДебета, ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, ШаблонФайла.ПоследовательностьПолейВФайле[ ШаблонФайла.УсловиеДебетаПоле - 1 ].пОЛеТаблицы), ШаблонФайла.УсловиеДебетаЗначение);
				ПризнакДебет = 1;
			Исключение //ошибка установки условия дебета по полю
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка установки условия дебета по полю: " + ШаблонФайла.УсловиеДебетаПоле + " " + ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
		Если ПризнакДебет = 0 Тогда
			ПризнакДебет = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ПризнакДебет);
			Если ЗначениеЗаполнено(ПризнакДебет) Тогда
				Дебет = ?(ПризнакДебет = 1, Истина, Ложь);
			Иначе
				ПризнакДебет = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ПризнакКредит);
				Если ЗначениеЗаполнено(ПризнакДебет) Тогда
					Дебет = ?(ПризнакДебет = 1, Ложь, Истина);
				Иначе
					ПризнакДебет = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ПризнакДебетИлиКредит);
					Если ЗначениеЗаполнено(ПризнакДебет) Тогда
						Дебет = ?(Лев(СокрЛП(ВРЕГ(ПризнакДебет)), 1) = "Д", Истина, Ложь);
					Иначе
						ПризнакДебет = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ПризнакДебетИлиКредит);
						Если ЗначениеЗаполнено(ПризнакДебет) Тогда
							Дебет = ?(Лев(СокрЛП(ВРЕГ(ПризнакДебет)), 1) = "D", Истина, Ложь);
						Иначе
							ПризнакПоСумме = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежаВалютнаяРасход);
							Если ЗначениеЗаполнено(ПризнакПоСумме) тогда
								Если ПризнакПоСумме > 0 Тогда
									Дебет = Истина;
								Иначе
									Дебет = Ложь;
								КонецЕсли;
							Иначе
								ПризнакПоСумме = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.СуммаПлатежаРасход);
								Если ЗначениеЗаполнено(ПризнакПоСумме) тогда
									Если ПризнакПоСумме > 0 Тогда
										Дебет = Истина;
									Иначе
										Дебет = Ложь;
									КонецЕсли;
								Иначе
									КодЕДРПОУПлательщика = ОтобратьИзМассиваДанныхСтрокиПоПолю(МассивДанныхСтрокиФайла, ШаблонФайла, СправочникиSZИмпортЭкспортФСПоля.ОКПОПлательщика);
									Если ЗначениеЗаполнено(КодЕДРПОУПлательщика) Тогда
										Если ЗначениеЗаполнено(НайтиОрганизациюПоОКПО(КодЕДРПОУПлательщика)) Тогда
											Дебет = Истина;
										КонецЕсли;
									Иначе
										//И что дальше?			
									КонецЕсли;									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
//		ИмяТипаДокумента = "ДвиженияДенег";
		//Если ШаблонФайла.ОбрабатыватьПлатежныеДокументы = "Безналичные" ТОгда
		//	Если Дебет Тогда
		//		ИмяТипаДокумента = "РасходСоСчета";
		//	Иначе
		//		ИмяТипаДокумента = "ПоступлениеНаСчет";
		//	КонецЕсли;					
		//ИначеЕсли ШаблонФайла.ОбрабатыватьПлатежныеДокументы = "Наличные" ТОгда
		//	Если Дебет Тогда
		//		ИмяТипаДокумента = "РасходИзКассы";
		//	Иначе
		//		ИмяТипаДокумента = "ПоступлениеВКассу";
		//	КонецЕсли;					
		//ИначеЕсли ШаблонФайла.ОбрабатыватьПлатежныеДокументы = "Планы" ТОгда
		//	Если Дебет Тогда
		//		ИмяТипаДокумента = "РасходДСПлан";
		//	Иначе
		//		ИмяТипаДокумента = "ПоступлениеДСПлан";
		//	КонецЕсли;					
		//ИначеЕсли ШаблонФайла.ОбрабатыватьПлатежныеДокументы = "Поручения" ТОгда 	
		//	Если Дебет Тогда
		//		ИмяТипаДокумента = "ПлатежноеПоручение";
		//	Иначе
		//		ИмяТипаДокумента = "";
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если ШаблонФайла.ТолькоРасходные И НЕ Дебет
		ИЛИ ШаблонФайла.ТолькоПриходные И Дебет Тогда
		
		ИмяТипаДокумента = "";
	КонецЕсли;
	
	Возврат Дебет;//ИмяТипаДокумента;
	
КонецФункции //ВыяснитьТипПлатежногоДокумента(ШаблонФайла, МассивДанныхСтрокиФайла)

