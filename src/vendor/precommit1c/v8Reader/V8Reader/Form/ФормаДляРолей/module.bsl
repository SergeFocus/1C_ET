//==============================================================================================================================================
// ПЕРЕМЕННЫЕ МОДУЛЯ
//==============================================================================================================================================

Перем СравнениеРолей Экспорт;          //булево: от значения переменной зависит представление отчета и наборы используемых в отчете данных
Перем СоответствиеСтрок Экспорт;       //(используется и в режиме анализа и в режиме сравнения). Для нахождения объекта метаданных, на который ссылается идентификатор в анализируемом файле роли
Перем СоответствиеСтрокВторое Экспорт; //(используется только в режиме сравнения). Для нахождения объекта метаданных, на который ссылается идентификатор в анализируемом файле роли

Перем СхемаКомпоновкиДанныхПоПравам;   //отчет формируется программно - поэтому схема нужна в качестве переменной модуля формы

Перем ПолнаяТаблицаПрав;               //ТЗ: изначально сформированная таблица прав для роли
Перем ПолнаяТаблицаРЛС;                //ТЗ: изначально сформированная таблица РЛС для роли
Перем ПолныйСписокПрав;                //ТЗ: таблица возможных прав для роли с учетом установленного интерактивно порядка прав
Перем ВсеПрава;			               //СЗ: значение - идентификатор права, представление - имя права
Перем СоответствиеПрав;                //соответствие: ключ - имя права, значение - представление права
Перем СоответствиеСтандартныхРеквизитов;  //соответствие: ключ - вид метаданных, значение - структура, отражающая набор стандартных реквизитов для этого вида метаданных

Перем ТаблицаПрав;            //ТЗ: таблица прав для вывода отчета с учетом установленного в списке порядка прав и отборов
Перем ТаблицаРЛС;             //ТЗ: таблица РЛС для вывода в табличное поле с учетом отборов

Перем СписокУИ;               //СЗ: используется для построения иерархии в СКД, значение списка - УИ, представление списка - наименование в строке дерева объектов метаданных

Перем ВсеОбъекты;		      //СЗ: при формировании дерева метаданных в ветке Общие присутствуют только объекты из этого списка
Перем ОтборРЛС;               //чтобы обработчик ПриАктивизацииОбласти не срабатывал в момент фиксации строк табличного документа
Перем ВсеПраваПоУмолчанию;
Перем ВсеПраваПоУмолчаниюВтораяРоль;
Перем СоответствиеВидовМетаданных;
Перем ЗначениеИзмененийПоУмолчанию;

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//==============================================================================================================================================

Процедура ПриОткрытии()
	
	//Скрипт = Новый COMОбъект("MSScriptControl.ScriptControl");
	//Скрипт.language = "javascript";
	//мСек1 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
	
	//инициализация
	ЗаполнитьСписокПрав();
	ЗаполнитьСписокОбъектов();
	ЗаполнитьТаблицуСтандартныхРеквизитов();
	СоставитьСоответствиеВидовМетаданныхСпискамПрав();
	СхемаКомпоновкиДанныхПоПравам = Новый СхемаКомпоновкиДанных;
	СписокУИ = Новый СписокЗначений;
	МассивОбщихСвойствРоли = Новый Массив;
		
	Если СравнениеРолей=Ложь Тогда
		
		ПостроитьТаблицуПрав(МассивОбщихСвойствРоли);
		
		УбратьИзТаблицыПравЛишниеКолонки();
		
		ПолнаяТаблицаПрав = ТаблицаПрав.Скопировать();
		ПолнаяТаблицаРЛС  = ТаблицаРЛС.Скопировать();
		
		//в интерфейсе отчета удаляем элементы формы, относящиеся к режиму сравнения
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.ФильтрРЛС);
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.ТолькоИзмененные);
		ЭлементыФормы.СравнениеОбъектовРолей.Видимость=Ложь;
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.Видимость=Ложь;
		ЭлементыФормы.ИнформационнаяПанель.Свертка=РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельИнформацииОбщихСвойств.Свертка =РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.ТПОбщихСвойств.Колонки.ЗначениеВПервойРоли.ТекстШапки = "Значение";
		ЭлементыФормы.ТПОбщихСвойств.Колонки.ЗначениеВоВторойРоли.Видимость = Ложь;
		ЭлементыФормы.ТПОбщихСвойств.Колонки.ЗначениеВоВторойРоли.ИзменятьВидимость = Ложь;
		ЭтаФорма.Заголовок = "Просмотр роли "+ЗаголовокФормы;
		
		//заполняем табличное поле общих свойств
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Устанавливать права для новых объектов";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[0];
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Устанавливать права для реквизитов и табличных частей по умолчанию";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[1];
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Независимые права подчиненных объектов";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[2];
		
		//в полной таблице прав эти колонки не нужны - их нужно заполнять только на этапе построения дерева иерархии для вывода отчета
		ТаблицаПрав.Колонки.Добавить("Родитель");
		ТаблицаПрав.Колонки.Добавить("УИ");
		ТаблицаПрав.Колонки.Добавить("ЭтоГруппа");
		ТаблицаПрав.Колонки.Добавить("ИндексСтроки");
		
		//находим неопределенные строки
		СтруктураОтбора = Новый Структура("Объект", "");
		МассивНеопределенныхСтрок = ТаблицаПрав.НайтиСтроки(СтруктураОтбора);
		
		//собираем статистику
		СтатистическиеДанные(МассивНеопределенныхСтрок);
		
		//может, и не нужно...
		Если ТаблицаРЛС.Количество() = 0 Тогда
			ИспользоватьРЛС = Ложь;
		КонецЕсли;
		
		//заполняем дерево метаданых
		ПостроитьДеревоОбъектов(ИспользоватьРЛС,МассивНеопределенныхСтрок);
		
		ЭлементыФормы.ГруппировкиОтчета.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		
	Иначе
		
		ПостроитьТаблицуПрав(МассивОбщихСвойствРоли);
		МассивОбщихСвойствВторойРоли = Новый Массив;
		ДостроитьТаблицуДаннымиВторойРоли(МассивОбщихСвойствВторойРоли);
		
		УбратьИзТаблицыПравЛишниеКолонки();
		
		Если ВсеПраваПоУмолчанию<>ВсеПраваПоУмолчаниюВтораяРоль и ВсеПраваПоУмолчаниюВтораяРоль=Ложь Тогда
			СтрокиДляИзмененияДополнения=ТаблицаПрав.НайтиСтроки(Новый Структура("ЕстьИзменения,ВидМетаданных,ЕстьИзмененияДополнения",0,"СтандартныйРеквизит","Все запрещено"));
			Для каждого СтрокаДляИзменения Из СтрокиДляИзмененияДополнения Цикл
				СтрокаДляИзменения.ЕстьИзмененияДополнения = "Разные";
			КонецЦикла;
			СтрокиДляИзмененияДополнения=ТаблицаПрав.НайтиСтроки(Новый Структура("ЕстьИзменения,ВидМетаданных,ЕстьИзмененияДополнения",0,"Реквизит","Все запрещено"));
			Для каждого СтрокаДляИзменения Из СтрокиДляИзмененияДополнения Цикл
				СтрокаДляИзменения.ЕстьИзмененияДополнения = "Разные";
			КонецЦикла;
			СтрокиДляИзмененияДополнения=ТаблицаПрав.НайтиСтроки(Новый Структура("ЕстьИзменения,ВидМетаданных,ЕстьИзмененияДополнения",0,"ТабличнаяЧасть","Все запрещено"));
			Для каждого СтрокаДляИзменения Из СтрокиДляИзмененияДополнения Цикл
				СтрокаДляИзменения.ЕстьИзмененияДополнения = "Разные";
			КонецЦикла;
		КонецЕсли;
		
		ПолнаяТаблицаПрав = ТаблицаПрав.Скопировать();
		ПолнаяТаблицаРЛС  = ТаблицаРЛС.Скопировать();
		
		//настраиваем интерфейс отчета (устанавливаем заголовок отчета и выставляем видимость панели подсказок)
		ЭлементыФормы.ПанельПодсказок.Видимость=Истина;
		ЭтаФорма.Заголовок = "Сравнение "+ЗаголовокФормы;

		//заполняем табличное поле общих свойств
		СчетчикОтличийОбщихСвойств = 0;
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Устанавливать права для новых объектов";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[0];
		СтрокаОбщихСвойств.ЗначениеВоВторойРоли = МассивОбщихСвойствВторойРоли[0];
		Если СтрокаОбщихСвойств.ЗначениеВПервойРоли<>СтрокаОбщихСвойств.ЗначениеВоВторойРоли Тогда
			ЭлементыФормы.ИнфоПанельРЛС.ТекущаяСтраница = ЭлементыФормы.ИнфоПанельРЛС.Страницы.Страница2;
			ЭлементыФормы.Предупреждение.Заголовок="Для достоверности данных используйте режим дополнения";
			СчетчикОтличийОбщихСвойств=СчетчикОтличийОбщихСвойств+1;
			СтрокаОбщихСвойств.ЕстьИзменения = Истина;
		КонецЕсли;
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Устанавливать права для реквизитов и табличных частей по умолчанию";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[1];
		СтрокаОбщихСвойств.ЗначениеВоВторойРоли = МассивОбщихСвойствВторойРоли[1];
		Если СтрокаОбщихСвойств.ЗначениеВПервойРоли<>СтрокаОбщихСвойств.ЗначениеВоВторойРоли Тогда
			СчетчикОтличийОбщихСвойств=СчетчикОтличийОбщихСвойств+1;
			СтрокаОбщихСвойств.ЕстьИзменения = Истина;
		КонецЕсли;
		СтрокаОбщихСвойств = ТПОбщихСвойств.Добавить();
		СтрокаОбщихСвойств.СвойствоРоли = "Независимые права подчиненных объектов";
		СтрокаОбщихСвойств.ЗначениеВПервойРоли = МассивОбщихСвойствРоли[2];
		СтрокаОбщихСвойств.ЗначениеВоВторойРоли = МассивОбщихСвойствВторойРоли[2];
		Если СтрокаОбщихСвойств.ЗначениеВПервойРоли<>СтрокаОбщихСвойств.ЗначениеВоВторойРоли Тогда
			СчетчикОтличийОбщихСвойств=СчетчикОтличийОбщихСвойств+1;
			СтрокаОбщихСвойств.ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если СчетчикОтличийОбщихСвойств>0 Тогда
			ЭлементыФормы.ОтсутствуютВОбщихСвойствах.Видимость = Ложь;
		КонецЕсли;
		
		//в полной таблице прав эти колонки не нужны - их нужно заполнять только на этапе построения дерева иерархии для вывода отчета
		ТаблицаПрав.Колонки.Добавить("Родитель");
		ТаблицаПрав.Колонки.Добавить("УИ");
		ТаблицаПрав.Колонки.Добавить("ЭтоГруппа");
		ТаблицаПрав.Колонки.Добавить("ИндексСтроки");

		//в эту переменную будем собирать неопределенные строки - чтобы потом их вывести в дерево метаданных и в отчет
		МассивНеопределенныхСтрок=Новый Массив;
		
		//собираем статистику
		СтатистическиеДанныеСравнения(МассивНеопределенныхСтрок);
		
		//может, и не нужно...
		Если ТаблицаРЛС.Количество() = 0 Тогда
			ИспользоватьРЛС = Ложь;
		КонецЕсли;
		
		//заполняем дерево метаданных
		ПостроитьДеревоСравненияОбъектов(ИспользоватьРЛС,МассивНеопределенныхСтрок);
			
		ЭлементыФормы.СравнениеОбъектовРолей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		
	КонецЕсли;
	
	//определяем состав табличного поля списка прав
	ВремТаблица = ПолнаяТаблицаПрав.Скопировать();
	ВремТаблица.Свернуть("ВидМетаданных");
	ПостроитьСписокПравДляВывода(ВремТаблица);
	
	//формируем отчет
	ДействияФормыСформироватьОтчет(Неопределено);
	
	//мСек2 = Формат(Скрипт.eval("new Date().getTime()"),"ЧГ=0");
	//Сообщить("Обработка завершена за " + ((мСек2 - мСек1) / 1000) + " сек.");
	
КонецПроцедуры

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ КНОПОК ФОРМЫ
//==============================================================================================================================================

Процедура ДействияФормыСформироватьОтчет(Кнопка)
	
	//Формируем наборы данных для отчета
	Если СравнениеРолей=Ложь Тогда
		//если формирование отчета вызвано интерактивно
		//формируем новую таблицу прав - согласно заданным фильтрам
		Если Кнопка<>Неопределено Тогда
			ПерестроитьТаблицуПрав();
		КонецЕсли;
		ЭлементыФормы.ТабличноеПолеРЛС.Значение = ТаблицаРЛС.Скопировать();
		СформироватьНаборыДанныхСКД();
	Иначе
		//если формирование отчета вызвано интерактивно
		//формируем новую таблицу прав - согласно заданным фильтрам
		Если Кнопка<>Неопределено Тогда
			ПерестроитьТаблицуПравСравнения();
		КонецЕсли;
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.Значение = ТаблицаРЛС.Скопировать();
		СформироватьДанныеСКДСравнения();
		МакетОформления=ПолучитьМакет("МакетОформленияДляСравнения"); 
	КонецЕсли;
	
	//нужно, чтобы порядок строк в дереве отчета соответствовал порядку строк в дереве метаданных
	ТаблицаПрав.Сортировать("ИндексСтроки");
	
	//инициализация 
	ЭлементыФормы.Результат.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки=СхемаКомпоновкиДанныхПоПравам.НастройкиПоУмолчанию;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхПоПравам, Настройки,,МакетОформления);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	//Подключаем в качестве источника данных таблицу прав
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПрав",ТаблицаПрав);
	
	//процесс пошел
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных); 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
	
	Если СравнениеРолей=Ложь Тогда
		//не заморачиваемся
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Иначе
		//чтобы границы группы прав были жирнее, чем просто границы ячеек
		ПроцессорВывода.НачатьВывод();
		УбиратьЧетныеГраницы(ПроцессорВывода,ПроцессорКомпоновки);
		ПроцессорВывода.ЗакончитьВывод();
	КонецЕсли;
	
	//будем обрабатывать фиксацию строк табличного документа - отключим доступность
	//срабатывания обработчика события ПриАктивизацииОбласти
	ОтборРЛС = Неопределено;
	
	//зафиксируем шапку и первый столбец
	ЭлементыФормы.Результат.ФиксацияСверху = ?(СравнениеРолей = Ложь, 1, 2);
	ЭлементыФормы.Результат.ФиксацияСлева = 1;
	
	//теперь включим доступность срабатывания обработчика события ПриАктивизацииОбласти	
	ОтборРЛС = Истина;
	ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Ложь;
	
	//для эргономичности
	СгенерироватьКнопкиУправленияГруппировкой();
	
КонецПроцедуры

Процедура ДействияФормыБыстраяНастройка(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ЭлементыФормы.ПанельНастройки.Свертка = ?(Кнопка.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Лево); 	
КонецПроцедуры

Процедура ПроставитьФлажки(Кнопка)
	
	УстановитьФлажок = ?(Кнопка.Имя = "УстановитьФлажки",Истина, Ложь);
	ДЗДляПроставленияФлажков = ?(СравнениеРолей = Ложь, ГруппировкиОтчета, СравнениеОбъектовРолей);
	ТПДляПроставленияФлажков = ?(СравнениеРолей = Ложь, ЭлементыФормы.ГруппировкиОтчета, ЭлементыФормы.СравнениеОбъектовРолей);
	//Находим строки ДЗ, в которых состояние флажка не соответствует выбранному действию кнопки
	МассивСтрок = ДЗДляПроставленияФлажков.Строки.НайтиСтроки(Новый Структура("Пометка",Не УстановитьФлажок),Истина);
	Для каждого СтрокаМетаданных Из МассивСтрок Цикл
		СтрокаМетаданных.Пометка=УстановитьФлажок;
	КонецЦикла;
	//Возвращаем начальное положение текущей строки табличного поля в корневой элемент
	ТПДляПроставленияФлажков.ТекущаяСтрока = ДЗДляПроставленияФлажков.Строки[0];
	//Перезаполняем список прав для вывода
	ГруппировкиОтчетаПриИзмененииФлажка(ТПДляПроставленияФлажков,ДЗДляПроставленияФлажков.Колонки.Наименование);
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкиОтобратьРЛС(Кнопка)
	
	//снимаем флажки
	ПроставитьФлажки(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.СнятьФлажки);
	
	//формируем список прав
	//для этого определяем список видов метаданных, соответствующий списку отмеченных строк
	ВремТаблица = Новый ТаблицаЗначений;
	ВремТаблица.Колонки.Добавить("ВидМетаданных");
	//определяем массив отмечаемых строк
	ДЗДляПроставленияФлажков = ?(СравнениеРолей = Ложь, ГруппировкиОтчета, СравнениеОбъектовРолей);
	СтруктураРЛС   = Новый Структура("РЛС",Истина);
	МассивСтрокРЛС=ДЗДляПроставленияФлажков.Строки.НайтиСтроки(СтруктураРЛС,Истина);
	Для каждого Строка Из МассивСтрокРЛС Цикл
		Строка.Пометка = Истина;
		НоваяСтрока = ВремТаблица.Добавить();
		НоваяСтрока.ВидМетаданных = Строка.ВидМетаданных;
	КонецЦикла;
	ВремТаблица.Свернуть("ВидМетаданных");
	
	//находим список возможных прав для найденных видов метаданных
	ПостроитьСписокПравДляВывода(ВремТаблица);	
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкиФильтрРЛС(Кнопка)
	
	//снимаем флажки
	ПроставитьФлажки(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.СнятьФлажки);
	
	//формируем список прав
	//для этого определяем список видов метаданных, соответствующий списку отмеченных строк
	ВремТаблица = Новый ТаблицаЗначений;
	ВремТаблица.Колонки.Добавить("ВидМетаданных");
	//находим строки объектов метаданных, для которых были найдены изменения РЛС и проставляем флажки для них
	СтруктураРЛС = Новый Структура("ЕстьИзмененияРЛС",Истина);
	МассивСтрокРЛС = СравнениеОбъектовРолей.Строки.НайтиСтроки(СтруктураРЛС,Истина);
	Для каждого СтрокаМетаданных Из МассивСтрокРЛС Цикл
		СтрокаМетаданных.Пометка = Истина;
		НоваяСтрока = ВремТаблица.Добавить();
		НоваяСтрока.ВидМетаданных = СтрокаМетаданных.ВидМетаданных;
	КонецЦикла;
	ВремТаблица.Свернуть("ВидМетаданных");
	
	//находим список возможных прав для найденных видов метаданных
	ПостроитьСписокПравДляВывода(ВремТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкиТолькоИзмененные(Кнопка)
	
	СтруктураНеизмененных   = Новый Структура("ЕстьИзменения",1);
	МассивНеизмененных = СравнениеОбъектовРолей.Строки.НайтиСтроки(СтруктураНеизмененных,Истина);
	
	//Проставляем флажки
	ПроставитьФлажки(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.УстановитьФлажки);
	
	//Снимаем флажки у неизмененных
	Для каждого Строка Из МассивНеизмененных Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
	//формируем список прав
	//для этого определяем список видов метаданных, соответствующий списку отмеченных строк
	ВремТаблица = Новый ТаблицаЗначений;
	ВремТаблица.Колонки.Добавить("ВидМетаданных");
	//находим строки объектов метаданных, для которых были найдены изменения 
	СтруктураИзмененных = Новый Структура("Пометка",Истина);
	МассивИзмененных = СравнениеОбъектовРолей.Строки.НайтиСтроки(СтруктураИзмененных,Истина);
	Для каждого ИзмененныйОбъект Из МассивИзмененных Цикл
		НоваяСтрока = ВремТаблица.Добавить();
		НоваяСтрока.ВидМетаданных = ИзмененныйОбъект.ВидМетаданных;
	КонецЦикла;
	ВремТаблица.Свернуть("ВидМетаданных");
	
	//находим список возможных прав для найденных видов метаданных
	ПостроитьСписокПравДляВывода(ВремТаблица);	
	
КонецПроцедуры

Процедура КоманднаяПанельГруппировкиБезНеопределенных(Кнопка)
	
	ДЗДляПроставленияФлажков = ?(СравнениеРолей = Ложь, ГруппировкиОтчета, СравнениеОбъектовРолей);
	Для каждого СтрокаМетаданных Из ДЗДляПроставленияФлажков.Строки Цикл
		Если СтрокаМетаданных.Идентификатор=СтрокаМетаданных.Наименование Тогда //неопределенные строки
			СтрокаМетаданных.Пометка=Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УпорядочитьСписокПравДляВывода()
	
	//надо вернуть порядок по умолчанию
	//для этого пользуемся заполнением ТП СписокПравДляВывода и ТЗ ПолныйСписокПрав
	//согласно назначенному порядку СЗ ВсеПрава
	
	//создаем две временные таблицы
	ВремТаблица=СписокПравДляВывода.Скопировать();
	ВремТаблица.Очистить();
	ВремТаблицаДляПолногоСписка=ПолныйСписокПрав.Скопировать();
	ВремТаблицаДляПолногоСписка.Очистить();
	//заполняем данные этих таблиц согласно порядку СЗ ВсеПрава
	Для каждого Право Из ВсеПрава Цикл
		//проверяем, есть ли анализируемое право в ТП
		Если СписокПравДляВывода.Найти(Право.Представление,"Право")<>Неопределено Тогда
			НоваяСтрока=ВремТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СписокПравДляВывода.Найти(Право.Представление,"Право"));
		КонецЕсли;
		//в ТЗ полного списка прав
		Если ПолныйСписокПрав.Найти(Право.Представление,"Право")<>Неопределено Тогда
			НоваяСтрокаДляПолногоСписка=ВремТаблицаДляПолногоСписка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДляПолногоСписка,ПолныйСписокПрав.Найти(Право.Представление,"Право"));
		КонецЕсли;
	КонецЦикла;
	
	//обновляем переменные
	СписокПравДляВывода=ВремТаблица.Скопировать();
	ПолныйСписокПрав=ВремТаблицаДляПолногоСписка.Скопировать();
	
КонецПроцедуры

Процедура ПереместитьПравоОтчета(Кнопка)  
	
	ТекущаяСтрока = ЭлементыФормы.СписокПравДляВывода.ТекущаяСтрока;
	ИндексТекСтроки = СписокПравДляВывода.Индекс(ТекущаяСтрока);
	
	//меняем порядок строк в ТП СписокПравДляВывода и в ТЗ ПолныйСписокПрав
	Если Кнопка.Имя = "ПереместитьПравоВверх" Тогда
		Если ИндексТекСтроки > 0 Тогда
			СписокПравДляВывода.Сдвинуть(ТекущаяСтрока, -1);
			ПолныйСписокПрав.Сдвинуть(ПолныйСписокПрав.Найти(ТекущаяСтрока.Право,"Право"),-1);
		КонецЕсли;
	Иначе
		Если ИндексТекСтроки < СписокПравДляВывода.Количество()-1 Тогда
			СписокПравДляВывода.Сдвинуть(ТекущаяСтрока, 1);
			ПолныйСписокПрав.Сдвинуть(ПолныйСписокПрав.Найти(ТекущаяСтрока.Право,"Право"),1);
		КонецЕсли;
	КонецЕсли;
	
	//если следующая строка не отмечена, то надо "перескочить" ее
	Если НЕ СписокПравДляВывода[ИндексТекСтроки].Пометка Тогда
		ПереместитьПравоОтчета(Кнопка);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтметитьПрава(Кнопка)
	
	УстановитьФлажок = ?(Кнопка.Имя = "УстановитьФлажки",Истина, Ложь);
	
	//устанавливаем/снимаем флажки
	Для каждого СтрокаПрава Из СписокПравДляВывода Цикл
		СтрокаПрава.Пометка = УстановитьФлажок;
		ПолныйСписокПрав.Найти(СтрокаПрава.Право,"Право").Пометка = УстановитьФлажок;
	КонецЦикла;
	
	//по-моему уже не нужно
	//СписокПравДляВыводаПриИзмененииФлажка(ЭлементыФормы.СписокПравДляВывода,ЭлементыФормы.СписокПравДляВывода.Колонки.ПравоПредставление);
	
КонецПроцедуры

Процедура ПоказатьВШаблонахНажатие(Элемент)
	
	//перемещаемся на страницу шаблонов
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы.ШаблоныОграничений;
	Для каждого Стр Из ТаблицаШаблонов Цикл
		//находим строку с изменениями
		Если Стр.ЕстьИзменения=Истина Тогда
			ЭлементыФормы.ТаблицаШаблонов.ТекущаяСтрока=Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоказатьВОбщихСвойствахНажатие(Элемент)
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.ТПОбщихСвойств;
	Для каждого Стр Из ТПОбщихСвойств Цикл
		//находим строку с изменениями
		Если Стр.ЕстьИзменения=Истина Тогда
			ЭлементыФормы.ТПОбщихСвойств.ТекущаяСтрока=Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПоискРазличийСледующее(Кнопка)
	
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.Результат;
	ТабличныйДокумент = ЭлементыФормы.Результат;
	
	Нашли = Ложь;
	
	//проверяем значение в ячейке на строку ниже
	СтрокаТД  = ТабличныйДокумент.ТекущаяОбласть.Верх+1;
	
	//проверяем цвет фона ячейки в этой строке
	Пока Не Нашли и СтрокаТД <= ТабличныйДокумент.ВысотаТаблицы Цикл
		Область = ТабличныйДокумент.Область("R" + Формат(СтрокаТД, "ЧГ=") + "C1");
		Если Область.ЦветФона=Новый Цвет(225,253,253) или Область.ЦветФона=Новый Цвет(192,220,192) Или Область.ЦветФона=Новый Цвет(255,228,196) Тогда
			Нашли = Истина;
		КонецЕсли;
		//перемещаемся еще ниже
		СтрокаТД = СтрокаТД + 1;
	КонецЦикла;
	
	//переместимся в найденную строку с измененными правами
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискРазличийПредыдущее(Кнопка)
	
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.Результат;
	ТабличныйДокумент = ЭлементыФормы.Результат;
	
	Нашли = Ложь;
	
	//проверяем значение в ячейке на строку выше
	СтрокаТД  = ТабличныйДокумент.ТекущаяОбласть.Верх-1;
	
	//проверяем цвет фона ячейки в этой строке
	Пока Не Нашли и СтрокаТД > 0 Цикл
		Область = ТабличныйДокумент.Область("R" + Формат(СтрокаТД, "ЧГ=") + "C1");
		Если Область.ЦветФона=Новый Цвет(225,253,253) или Область.ЦветФона=Новый Цвет(192,220,192) Или Область.ЦветФона=Новый Цвет(255,228,196) Тогда
			Нашли = Истина;
		КонецЕсли;
		//перемещаемся еще выше
		СтрокаТД = СтрокаТД - 1;
	КонецЦикла;
	
	//переместимся в найденную строку с измененными правами
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискРазличийРЛССледующее(Кнопка)
	
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.ТабличноеПолеСравненияРЛС;
	Если ТабличноеПолеСравненияРЛС.Количество()=0 Тогда
		Предупреждение("Ограничений доступности по данному объекту нет!");
		Возврат;
	КонецЕсли;
	Если ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=ТабличноеПолеСравненияРЛС[0];
	КонецЕсли;
	ИндексПроверяемойСтроки=ТабличноеПолеСравненияРЛС.Индекс(ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока)+1;
	
	Нашли=Ложь;
	
	//проверяем, есть ли изменения в текущей строке
	Пока Не Нашли и ИндексПроверяемойСтроки<ТабличноеПолеСравненияРЛС.Количество() Цикл
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=ТабличноеПолеСравненияРЛС[ИндексПроверяемойСтроки];
		Если ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока.ЕстьИзмененияРЛС<>1 Тогда
			Нашли=Истина;	//изменения в строке найдены
		КонецЕсли;
		//повышаем индекс проверяемой строки
		ИндексПроверяемойСтроки=ИндексПроверяемойСтроки+1;
	КонецЦикла;
	
	Если Не Нашли Тогда
		Предупреждение("Достигнут конец таблицы ограничений доступа");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискРазличийРЛСПредыдущее(Кнопка)
	
	ЭтаФорма.ТекущийЭлемент=ЭлементыФормы.ТабличноеПолеСравненияРЛС;
	Если ТабличноеПолеСравненияРЛС.Количество()=0 Тогда
		Предупреждение("Ограничений доступности по данному объекту нет!");
		Возврат;
	КонецЕсли;
	Если ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=ТабличноеПолеСравненияРЛС[0];
	КонецЕсли;
	ИндексПроверяемойСтроки=ТабличноеПолеСравненияРЛС.Индекс(ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока)-1;
	
	Нашли = Ложь;
	
	//проверяем, есть ли изменения в текущей строке
	Пока ИндексПроверяемойСтроки >= 0 Цикл
		ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока=ТабличноеПолеСравненияРЛС[ИндексПроверяемойСтроки];
		Если ЭлементыФормы.ТабличноеПолеСравненияРЛС.ТекущаяСтрока.ЕстьИзмененияРЛС<>1 Тогда
			Нашли=Истина;     //изменения в строке найдены
		КонецЕсли;
		//понижаем индекс проверяемой строки
		ИндексПроверяемойСтроки=ИндексПроверяемойСтроки-1;
	КонецЦикла;
	
	Если Не Нашли Тогда
		Предупреждение("Достигнуто начало таблицы ограничений доступа");
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельРЛСОтключитьОтбор(Кнопка)
	
	ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Ложь;
	Если СравнениеРолей = Ложь Тогда
		ТабличноеПолеРЛС = ТаблицаРЛС.Скопировать();
	Иначе
		ТабличноеПолеСравненияРЛС = ТаблицаРЛС.Скопировать();
	КонецЕсли;
	ЭлементыФормы.ИнформацияПоОтбору.Заголовок = "";
	
КонецПроцедуры

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//==============================================================================================================================================

Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	//используется вспомогательная переменная, чтобы обработчик не срабатывал при фиксации строки заголовка
	Если ОтборРЛС <> Неопределено Тогда
		
		ТПДляИзмененияСоставаСтрок=?(СравнениеРолей = Ложь, ТабличноеПолеРЛС, ТабличноеПолеСравненияРЛС);
		Верх = ?(Элемент.ТекущаяОбласть.Верх=0, 1, Элемент.ТекущаяОбласть.Верх);
		Право = ?(Элемент.ТекущаяОбласть.Право = 0, 1, Элемент.ТекущаяОбласть.Право);
		ТекОбластьОтчета = Элемент.Область(Верх,Право,Верх,Право);
		//наименование объекта метаданных в качестве значения отбора
		ЗначениеОтбора = Элемент.Область(ТекОбластьОтчета.Верх,1,ТекОбластьОтчета.Верх,1).Текст;
		//Если фон соответствует наличию РЛС - перезаполняем таблицу
		Если ТекОбластьОтчета.ЦветФона=WebЦвета.Коралловый Тогда
			ЗаполнитьТаблицуРЛС(ТекОбластьОтчета,ЗначениеОтбора);
		//для незакрашенных ячеек - просто очищаем таблицу	
		ИначеЕсли ТекОбластьОтчета.ЦветФона.Зеленый<>242 И ТекОбластьОтчета.Верх<>1 И ТекОбластьОтчета.Низ <= Элемент.ВысотаТаблицы Тогда 
			ТПДляИзмененияСоставаСтрок.Очистить();
		//для группировок надо просто снимать отбор	(ТекОбластьОтчета.ЦветФона.Зеленый=242)
		ИначеЕсли ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность=Истина Тогда 
			КоманднаяПанельРЛСОтключитьОтбор(ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор);
			Возврат;
		Иначе
			Возврат;	
		КонецЕсли;
		
		//если выделена ячейка не просто объекта метаданных, а конкретного права - дополним информационную надпись наименованием права
		Если ТекОбластьОтчета.Право <> 1 Тогда
			Если СравнениеРолей=Истина И Элемент.Область(1,ТекОбластьОтчета.Право,1,ТекОбластьОтчета.Право).Текст="" Тогда
				ЗначениеОтбора = ЗначениеОтбора + " по праву " + Элемент.Область(1,ТекОбластьОтчета.Право-1,1,ТекОбластьОтчета.Право-1).Текст;
			Иначе	
				ЗначениеОтбора = ЗначениеОтбора + " по праву " + Элемент.Область(1,ТекОбластьОтчета.Право,1,ТекОбластьОтчета.Право).Текст;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыФормы.ИнформацияПоОтбору.Заголовок = "Установлен отбор на RLS по элементу "+ЗначениеОтбора;
		ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеРЛСВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если СравнениеРолей=Ложь Тогда
		Значение = ВыбраннаяСтрока.ЗначениеПрава;
		Если ВвестиСтроку(ВыбраннаяСтрока.ЗначениеПрава,"Ограничение доступа",,Истина) Тогда
			ВыбраннаяСтрока.ЗначениеПрава = Значение;
		КонецЕсли;
	Иначе
		СравнениеРЛС = ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.ЗначениеПрава,ВыбраннаяСтрока.ЗначениеПрава1);
		Если СравнениеРЛС.Сравнить()=Истина Тогда
			Предупреждение("Тексты ограничений доступа идентичны!");
			ТекстШаблона = Новый ТекстовыйДокумент;
			ТекстШаблона.УстановитьТекст(ВыбраннаяСтрока.ЗначениеПрава);
			ТекстШаблона.Показать();
		Иначе
			СравнениеРЛС.ПоказатьРазличия();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаШаблоновВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если СравнениеРолей=Ложь Тогда
		ТекстШаблона = Новый ТекстовыйДокумент;
		ТекстШаблона.УстановитьТекст(ВыбраннаяСтрока.ПолныйТекстШаблона);
		ТекстШаблона.Показать();
	Иначе
		СравнениеШаблонов = ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.ПолныйТекстШаблона,ВыбраннаяСтрока.ПолныйТекстВторогоШаблона);
		Если СравнениеШаблонов.Сравнить()=Истина Тогда
			Предупреждение("Тексты шаблонов идентичны!");
			ТекстШаблона = Новый ТекстовыйДокумент;
			ТекстШаблона.УстановитьТекст(ВыбраннаяСтрока.ПолныйТекстШаблона);
			ТекстШаблона.Показать();
		Иначе
			СравнениеШаблонов.ПоказатьРазличия();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкиОтчетаПриИзмененииФлажка(Элемент, Колонка)
	
	//проставляем флажки для подчиненных элементов рекурсивно
	Для каждого Стр Из Элемент.ТекущаяСтрока.Строки Цикл
		Стр.Пометка = Элемент.ТекущаяСтрока.Пометка;
		ПереборДляПометки(Стр);
	КонецЦикла;	
	
	//если сняли флажок у корневого элемента, то можно просто очистить список прав и сразу выйти
	Если Элемент.ТекущаяСтрока.Родитель = Неопределено и Элемент.ТекущаяСтрока.Пометка = Ложь Тогда
		СписокПравДляВывода.Очистить();
		Возврат;     
	Иначе
		//формируем список прав
		//для этого определяем список видов метаданных, соответствующий списку отмеченных строк
		ВремТаблица = Новый ТаблицаЗначений;
		ВремТаблица.Колонки.Добавить("ВидМетаданных");
		//определяем массив отмеченных строк
		ДЗДляПроставленияФлажков = ?(СравнениеРолей = Ложь, ГруппировкиОтчета, СравнениеОбъектовРолей);
		СтруктураОтмеченныхСтрок = Новый Структура("Пометка",Истина);
		МассивСтрок = ДЗДляПроставленияФлажков.Строки.НайтиСтроки(СтруктураОтмеченныхСтрок,Истина);
		Для каждого Строка Из МассивСтрок Цикл
			НоваяСтрока = ВремТаблица.Добавить();
			НоваяСтрока.ВидМетаданных = Строка.ВидМетаданных;
		КонецЦикла;
		ВремТаблица.Свернуть("ВидМетаданных");
		
		//находим список возможных прав для найденных видов метаданных
		ПостроитьСписокПравДляВывода(ВремТаблица);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПравДляВыводаПриИзмененииФлажка(Элемент, Колонка)
	
	//Для каждого Строка Из СписокПравДляВывода Цикл
	//	ПолныйСписокПрав.Найти(Строка.Право,"Право").Пометка = Строка.Пометка;
	//КонецЦикла;
	
	ПолныйСписокПрав.Найти(Элемент.ТекущаяСтрока.Право).Пометка = Элемент.ТекущаяСтрока.Пометка;
	//ПерестроитьТаблицуПрав();
	Если Элемент.ТекущаяСтрока.Пометка=Истина Тогда
		СтруктураОтбора = Новый Структура("Право",Элемент.ТекущаяСтрока.Право);
		
		СтрокиРЛС = ТаблицаРЛС.НайтиСтроки(СтруктураОтбора);
		Если СтрокиРЛС.Количество()>0 Тогда
			Для каждого РЛС Из СтрокиРЛС Цикл
				НоваяСтрока=ТабличноеПолеРЛС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,РЛС);
			КонецЦикла;
			ЭлементыФормы.ИнформацияПоОтбору.Заголовок = СтрЗаменить(СтрЗаменить(ЭлементыФормы.ИнформацияПоОтбору.Заголовок,", "+Элемент.ТекущаяСтрока.Право,""),Элемент.ТекущаяСтрока.Право,"");
			Если ЭлементыФормы.ИнформацияПоОтбору.Заголовок = "Установлен отбор - исключены записи по праву " Тогда
				ЭлементыФормы.ИнформацияПоОтбору.Заголовок = "";
				ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Истина;
		
		СтруктураОтбора = Новый Структура("Право",Элемент.ТекущаяСтрока.Право);
		
		СтрокиРЛС = ТабличноеПолеРЛС.НайтиСтроки(СтруктураОтбора);
		Если СтрокиРЛС.Количество()>0 Тогда
			Для каждого РЛС Из СтрокиРЛС Цикл
				ТабличноеПолеРЛС.Удалить(РЛС);
			КонецЦикла;
			Если Лев(ЭлементыФормы.ИнформацияПоОтбору.Заголовок,45)="Установлен отбор - исключены записи по праву "  Тогда
				ЭлементыФормы.ИнформацияПоОтбору.Заголовок = ЭлементыФормы.ИнформацияПоОтбору.Заголовок +", "+Элемент.ТекущаяСтрока.Право;
			Иначе
				ЭлементыФормы.ИнформацияПоОтбору.Заголовок = "Установлен отбор - исключены записи по праву "+Элемент.ТекущаяСтрока.Право;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПанельОбщихСвойствПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница= 1 Тогда
		ЭлементыФормы.ИнфоПанельРЛС.ТекущаяСтраница = ЭлементыФормы.ИнфоПанельРЛС.Страницы.Страница1;
	Иначе
		ЭлементыФормы.ИнфоПанельРЛС.ТекущаяСтраница = ЭлементыФормы.ИнфоПанельРЛС.Страницы.Страница2;
	КонецЕсли;
КонецПроцедуры

Процедура РежимРазбораПриИзменении(Элемент)
	ОтборРЛС = Неопределено;
	КодВозврата = Вопрос("Будет переформировано дерево объектов метаданных. Продолжить?",РежимДиалогаВопрос.ОКОтмена);
	Если КодВозврата=КодВозвратаДиалога.ОК Тогда  
		ДеревоОбъектовВРежимеДополнения();
		ЭлементыФормы.Предупреждение.Заголовок="";
	Иначе
		РежимДополнения = Не РежимДополнения;
	КонецЕсли;
	ОтборРЛС = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ГруппировкиОтчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если РежимДополнения=Истина и ОтборРЛС = Истина и ДанныеСтроки.Дополнено = Истина  Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
КонецПроцедуры

Процедура СравнениеОбъектовРолейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЕстьИзменения=2 Тогда           //измененные объекты
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения=3 И РежимДополнения=Ложь Тогда      //добавленные объекты
		ОформлениеСтроки.Ячейки.ВтораяРоль.ЦветФона=Новый Цвет(192,220,192);
	ИначеЕсли ДанныеСтроки.ИндексПервойКартинки=117 Тогда                     //добавленные объекты
		ОформлениеСтроки.Ячейки.ВтораяРоль.ЦветФона=Новый Цвет(192,220,192);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения=3 И РежимДополнения=Истина и ОтборРЛС = Истина Тогда      //добавленные объекты в режиме дополнения
		Если ДанныеСтроки.ЕстьИзмененияДополнения = "Разные" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ВсеПраваПоУмолчанию=Ложь и  ДанныеСтроки.ЕстьИзмененияДополнения = "Все разрешено" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ВсеПраваПоУмолчанию=Истина и  ДанныеСтроки.ЕстьИзмененияДополнения = "Все запрещено" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.ЕстьИзменения=0 И РежимДополнения=Ложь Тогда      //удаленные объекты
		ОформлениеСтроки.Ячейки.ПерваяРоль.ЦветФона=Новый Цвет(255,228,196);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения=0 И РежимДополнения=Истина и ОтборРЛС = Истина Тогда      //удаленные объекты
		Если ДанныеСтроки.ЕстьИзмененияДополнения = "Разные" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ВсеПраваПоУмолчаниюВтораяРоль=Ложь и  ДанныеСтроки.ЕстьИзмененияДополнения = "Все разрешено" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ВсеПраваПоУмолчаниюВтораяРоль=Истина и  ДанныеСтроки.ЕстьИзмененияДополнения = "Все запрещено" Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		КонецЕсли;
	ИначеЕсли РежимДополнения=Истина и ОтборРЛС = Истина и ВсеПраваПоУмолчанию<>ВсеПраваПоУмолчаниюВтораяРоль и ДанныеСтроки.Дополнено=Истина и ДанныеСтроки.ЕстьИзмененияДополнения="Разные" Тогда	
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	КонецЕсли;
	
	Если РежимДополнения=Истина и ОтборРЛС = Истина и ДанныеСтроки.Дополнено = Истина  Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеСравненияРЛСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЕстьИзмененияРЛС=2 Тогда           //измененные объекты
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	ИначеЕсли ДанныеСтроки.ЕстьИзмененияРЛС=3 тогда      //добавленные объекты
		ОформлениеСтроки.ЦветФона=Новый Цвет(192,220,192);
	ИначеЕсли ДанныеСтроки.ЕстьИзмененияРЛС=0 тогда      //удаленные объекты
		ОформлениеСтроки.ЦветФона=Новый Цвет(255,228,196);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаШаблоновПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ЕстьИзменения=Истина Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	КонецЕсли;
КонецПроцедуры

Процедура ТПОбщихСвойствПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ЕстьИзменения=Истина Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	КонецЕсли;
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ТАБЛИЦЫ РОЛЕЙ В РЕЖИМЕ АНАЛИЗА
//==============================================================================================================================================

Процедура ПостроитьТаблицуПрав(МассивОбщихСвойствРоли)
	
	//создаем таблицу прав
	ТаблицаПрав = Новый ТаблицаЗначений;
	//добавляем в таблицу прав колонки свойств строки объекта метаданных
	ТаблицаПрав.Колонки.Добавить("Объект");
	ТаблицаПрав.Колонки.Добавить("Идентификатор");
	ТаблицаПрав.Колонки.Добавить("Синоним");
	ТаблицаПрав.Колонки.Добавить("ВидМетаданных");
	ТаблицаПрав.Колонки.Добавить("РЛС",Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ОбъектСРеквизитами", Новый ОписаниеТипов("Строка"));
	//добавляем в таблицу прав колонки прав
	Для каждого СтрокаСпискаПрав Из ВсеПрава Цикл
		ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Представление);
	КонецЦикла;
	Если СравнениеРолей=Истина Тогда
		ТаблицаПрав.Колонки.Добавить("ЕстьИзмененияДополнения",Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	//создаем таблицу РЛС
	ТаблицаРЛС = Новый ТаблицаЗначений;
	ТаблицаРЛС.Колонки.Добавить("Объект");
	ТаблицаРЛС.Колонки.Добавить("Идентификатор");
	ТаблицаРЛС.Колонки.Добавить("Синоним");
	ТаблицаРЛС.Колонки.Добавить("Право");
	ТаблицаРЛС.Колонки.Добавить("Поля");
	ТаблицаРЛС.Колонки.Добавить("ЗначениеПрава");
	ТаблицаРЛС.Колонки.Добавить("ИндексКартинки");
	
	//получаем XML из внутреннего представления роли
	МассивФормы      = СтрокаВнутрВХМЛТело(Текст1С);
	ДокументDOM      = ПолучитьДокументDOMФормы(МассивФормы);
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента      = "/elem[1]/elem[1]/elem/elem[1]"; 
	РезультатXPath   = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	
	//Получение значений общих свойств роли
	Если ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[3].ТекстовоеСодержимое = "1" Тогда
		ВсеПраваПоУмолчанию = Истина;
		МассивОбщихСвойствРоли.Добавить(Истина);
	Иначе
		ВсеПраваПоУмолчанию = Ложь;
		МассивОбщихСвойствРоли.Добавить(Ложь);
	КонецЕсли;
	МассивОбщихСвойствРоли.Добавить(?(ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[4].ТекстовоеСодержимое = "1", Истина, Ложь));
	МассивОбщихСвойствРоли.Добавить(?(ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[5].ТекстовоеСодержимое = "1", Истина, Ложь));
	
	//парсим полученный XML для получения данных по правам роли
	Пока 1 = 1 Цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		//в узле находится идентификатор объекта метаданных - информацию о том, что это за объект 
		//находим в дереве метаданных основной формы обработки
		СтрокаПрава = СоответствиеСтрок.Получить(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
		НоваяСтрока = ТаблицаПрав.Добавить();
		НоваяСтрока.Идентификатор = Узел.ДочерниеУзлы[1].ТекстовоеСодержимое;
		НоваяСтрока.Объект        = ?(СтрокаПрава<>Неопределено,СтрокаПрава.Наименование,"");
		НоваяСтрока.Синоним       = ?(СтрокаПрава<>Неопределено,СтрокаПрава.Синоним,Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
		//есть два вида формата представления набора прав - для объектов с возможным наличием РЛС и для всех остальных объектов
		//для второго формата характерно наличие в следующем узле идентификатора права
		Если ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[1].ТекстовоеСодержимое)<>Неопределено Тогда
			//в узлах этого вида могут, кроме прав обычных объектов метаданных храниться права на стандартные реквизиты объектов - 
			//особенность в том, что все эти узлы имеют тот же идентификатор, что объект, стандартным реквизитом которого они являются
			ЗаполнитьОбъектСРеквизитами(Узел.ДочерниеУзлы[2],СтрокаПрава,НоваяСтрока);
			//занесем в таблицу прав информацию по правам 
			Индекс = 1;
			Максимум = Узел.СледующийСоседний.ДочерниеУзлы.Количество();
			ОбработатьУзлыПравОбъекта(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум);
		Иначе
			НоваяСтрока.ВидМетаданных = ?(СтрокаПрава<>Неопределено,СтрокаПрава.ВидМетаданных,"");;
			НоваяСтрока.ОбъектСРеквизитами = "Истина";
			//занесем в таблицу прав информацию по правам узла объекта метаданных с возможным наличием РЛС
			ОбработатьУзлыПравОбъектаСРЛС(СтрокаПрава,Узел,НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	//Получение текста шаблонов
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента      = "/elem[1]/elem[2]/elem"; 
	РезультатXPath   = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	
	//парсим полученный XML для получения данных по шаблонам роли
	Пока 1 = 1 Цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		//добавляем данные полученного узла в таблицу шаблонов
		СтрокаШаблона = ТаблицаШаблонов.Добавить();
		СтрокаШаблона.Шаблон = Узел.ДочерниеУзлы[0].ТекстовоеСодержимое;
		СтрокаШаблона.ПолныйТекстШаблона = УбратьЛишниеКавычкиИзСтроки(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
		//если текст шаблона превышает 10 строк, в видимую колонку будем выводить "обрезанный" текст шаблона - а то зависнет...
		Если СтрЧислоСтрок(СтрокаШаблона.ПолныйТекстШаблона)>=10 Тогда
			НомерСтроки = 1;
			ТекстШаблона = Новый ТекстовыйДокумент;
			Пока НомерСтроки <= 10 Цикл 
				ТекстШаблона.ВставитьСтроку(НомерСтроки,СтрПолучитьСтроку(СтрокаШаблона.ПолныйТекстШаблона,НомерСтроки));
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			СтрокаШаблона.Текст = ТекстШаблона.ПолучитьТекст() + "...";
		Иначе 
			СтрокаШаблона.Текст = СтрокаШаблона.ПолныйТекстШаблона;	
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьОбъектСРеквизитами(УзелДляАнализа,СтрокаПрава,НоваяСтрока)
	
	Если УзелДляАнализа.ТекстовоеСодержимое<>"0" Тогда
		Если СтрокаПрава<>Неопределено Тогда
			Если СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных]<>Неопределено Тогда
				СтандартныйРеквизит=СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных][СтрЗаменить(УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое,"-","v")];
				НоваяСтрока.ОбъектСРеквизитами = СтандартныйРеквизит;	
			Иначе
				НоваяСтрока.ОбъектСРеквизитами = УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое;
			КонецЕсли;
		Иначе
			НоваяСтрока.ОбъектСРеквизитами = "СтандартныйРеквизит"+УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое;
		КонецЕсли;
		НоваяСтрока.ВидМетаданных = "СтандартныйРеквизит";
	Иначе
		НоваяСтрока.ВидМетаданных = ?(СтрокаПрава<>Неопределено,СтрокаПрава.ВидМетаданных,"");
		НоваяСтрока.ОбъектСРеквизитами="Истина";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУзлыПравОбъекта(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум)
	
	СоответствиеПравДополнения = Новый Соответствие;
	ПисатьПраво = Истина;
	Пока Индекс<>Максимум Цикл
		Если ПисатьПраво = Истина И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое)<>Неопределено Тогда
			ВыводитьПраво = Истина;
			Право=ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое);
		ИначеЕсли ПисатьПраво = Ложь И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс-1].ТекстовоеСодержимое)<>Неопределено Тогда
			Если ВыводитьПраво = Истина Тогда
				ЗначениеПрава = Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое;
				НоваяСтрока[Право.Представление] = ЗначениеПрава;
				СоответствиеПравДополнения.Вставить(ЗначениеПрава,ЗначениеПрава);
			КонецЕсли;
		//с выпуском новых релизов платформ у объекта "Конфигурация" часто появляются новые виды прав
		//пока в обработчике расшифровки идентификаторов не будет проставлено соответствующее название для него,
		//будет добавляться просто колонка вида А<Идентификатор права> - в отладочных целях
		ИначеЕсли ПисатьПраво = Истина И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое)=Неопределено Тогда	
			ВыводитьПраво = Истина;
			Право=СтрЗаменить(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое,"-","");
			Если ТаблицаПрав.Колонки.Найти("А"+Право)=Неопределено Тогда
				ТаблицаПрав.Колонки.Добавить("А"+Право);
				НовоеПраво=ПолныйСписокПрав.Добавить();
				НовоеПраво.Право = "А"+Право;
			КонецЕсли;
		Иначе
			Если ВыводитьПраво = Истина Тогда
				ЗначениеПрава = Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое;
				НоваяСтрока["А"+Право] = ЗначениеПрава;
				СоответствиеПравДополнения.Вставить(ЗначениеПрава,ЗначениеПрава);
			КонецЕсли;
		КонецЕсли;
		ПисатьПраво = Не ПисатьПраво;
		Индекс = Индекс+1;
	КонецЦикла;
	
	Если СравнениеРолей = Истина Тогда
		Если СоответствиеПравДополнения.Количество() > 1 Тогда
			НоваяСтрока.ЕстьИзмененияДополнения = "Разные";
		ИначеЕсли СоответствиеПравДополнения["1"] <> Неопределено Тогда
			НоваяСтрока.ЕстьИзмененияДополнения = "Все разрешено";
		Иначе
			НоваяСтрока.ЕстьИзмененияДополнения = "Все запрещено";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУзлыПравОбъектаСРЛС(СтрокаПрава,Узел,НоваяСтрока)
	
	КоличествоПрав = Число(Узел.СледующийСоседний.ДочерниеУзлы[1].ТекстовоеСодержимое);
	Максимум = КоличествоПрав*2+2;
	Индекс = 2;
	ОбработатьУзлыПравОбъекта(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум);
	
	//Обработаем признак РЛС
	Если Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое<>"0" Тогда
		КоличествоРЛС = Число(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое);
		УзелРЛС = Узел.СледующийСоседний.ДочерниеУзлы[Индекс+1];
		
		Для ИндексСтроки = 0 По КоличествоРЛС - 1 Цикл
			УзелПраваРЛС = УзелРЛС.ДочерниеУзлы[0];
			Если  УзелПраваРЛС.СледующийСоседний.ТекстовоеСодержимое <> "0" Тогда
				КоличествоЗаписейРЛСПрава = Число(УзелПраваРЛС.СледующийСоседний.ПервыйДочерний.ТекстовоеСодержимое);
				Для  ИндексПраваРЛС = 1  По КоличествоЗаписейРЛСПрава Цикл
					НоваяСтрока.РЛС = Истина;
					ЗаписьРЛС = ТаблицаРЛС.Добавить();
					ЗаписьРЛС.Объект         = НоваяСтрока.Объект;
					ЗаписьРЛС.Идентификатор  = НоваяСтрока.Идентификатор;
					ЗаписьРЛС.Синоним        = НоваяСтрока.Синоним;
					ЗаписьРЛС.ИндексКартинки = ?(СтрокаПрава=Неопределено,0,СтрокаПрава.ИндексКартинки);
					ЗаписьРЛС.Право          = ВсеПрава.НайтиПоЗначению(УзелРЛС.ДочерниеУзлы[0].ТекстовоеСодержимое).Представление;
					ЗаписьРЛС.ЗначениеПрава  = УбратьЛишниеКавычкиИзСтроки(УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[1].ТекстовоеСодержимое);
					Если УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое<>"0" Тогда
						КоличествоПолей = Число(УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое);
						Для п = 1 По КоличествоПолей Цикл
							ЗаписьРЛС.Поля = ?(ЗаписьРЛС.Поля = Неопределено,"",""+ ЗаписьРЛС.Поля+",")+УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2+п].ТекстовоеСодержимое;
						КонецЦикла;
					Иначе 
						ЗаписьРЛС.Поля = УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое;	
					КонецЕсли;
					НоваяСтрока[ЗаписьРЛС.Право] = "2";	
				КонецЦикла;
			КонецЕсли;				
			УзелРЛС = УзелРЛС.СледующийСоседний;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерестроитьТаблицуПрав()
	
	//для таблицы прав нужен новый состав и порядок колонок - поэтому создаем новую таблицу
	ТаблицаПрав = Новый ТаблицаЗначений;
	//массив идентификаторов отмеченных флажками объектов для таблицы РЛС
	МассивОбъектов = Новый Массив;
	//добавляем в таблицу колонки свойств строки метаданных объекта
	ТаблицаПрав.Колонки.Добавить("Объект");
	ТаблицаПрав.Колонки.Добавить("Идентификатор");
	ТаблицаПрав.Колонки.Добавить("РЛС", Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Родитель");
	ТаблицаПрав.Колонки.Добавить("УИ");
	ТаблицаПрав.Колонки.Добавить("ЭтоГруппа");
	ТаблицаПрав.Колонки.Добавить("ВидМетаданных");
	ТаблицаПрав.Колонки.Добавить("ИндексСтроки");
	//добавляем в таблицу колонки отмеченных прав
	Для каждого СтрокаСпискаПрав Из ПолныйСписокПрав Цикл
		Если СтрокаСпискаПрав.Пометка = Истина Тогда
			ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Право);
		КонецЕсли;
	КонецЦикла;
	Если РежимДополнения=Истина Тогда
		ТаблицаПрав.Колонки.Добавить("Дополнено",Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	//нужны новые УИ для новой иерархии
	СписокУИ.Очистить();
	
	//рекурсивно обходим строки дерева метаданных
	Для каждого Строка Из ГруппировкиОтчета.Строки Цикл
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		Родитель = СписокУИ.Добавить(Новый УникальныйИдентификатор(), Строка.Наименование);
		//Определим, является ли строка группой
		Подч = 0;
		СтрокаНужна = Ложь;
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в таблице прав и является ли эта строка группой)
		ПереборДляПерестройки(Строка,Родитель,Подч,МассивОбъектов,СтрокаНужна);
		//если у строки стоит флажок, значит, ее нужно занести в таблицу прав
		Если Строка.Пометка = Истина Тогда
			Стр=ПолнаяТаблицаПрав.Найти(Строка.Идентификатор,"Идентификатор");
			ДобавитьСтрокуВТаблицуПрав(Стр,Строка,Родитель,"",Подч,ГруппировкиОтчета)
		//если у самой строки флажка не стоит, но стоит флажок у подчиненных строк - обнуляем для них поле родителя 
		//(чтобы они корректно выводились в отчет)
		ИначеЕсли Подч > 0 ИЛИ СтрокаНужна = Истина Тогда
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель = "";
			НоваяЗапись.УИ = Родитель;
			НоваяЗапись.ЭтоГруппа = Истина;
			//МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Родитель",Родитель));
			//Для каждого Запись Из МассивСтрок Цикл
			//	Запись.Родитель = "";
			//КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	УбратьИзТаблицыПравЛишниеКолонки();
	
	//перестроим таблицу РЛС
	ТаблицаРЛС.Очистить();
	Для каждого Эл Из МассивОбъектов Цикл
		СтруктураОтбора = Новый Структура("Идентификатор",Эл);
		СтрокиРЛС = ПолнаяТаблицаРЛС.НайтиСтроки(СтруктураОтбора);
		Для каждого РЛС Из СтрокиРЛС Цикл
			НовСтрока = ТаблицаРЛС.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,РЛС);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереборДляПерестройки(Строка,Родитель,Род,МассивОбъектов,ВерхняяСтрокаНужна)
	
	//перебираем строки ветки дерева значений
	Для каждого пр Из Строка.Строки Цикл
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),пр.Наименование);
		//Определим, является ли строка группой
		Подч=0;
		СтрокаНужна = Ложь;
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в таблице прав и является ли эта строка группой)
		ПереборДляПерестройки(пр,РодительПодч,Подч,МассивОбъектов,СтрокаНужна);
		//если у строки стоит флажок, значит, ее нужно занести в таблицу прав
		Если пр.Пометка = Истина Тогда
			//находим в полной таблице прав строки, соответствующие идентификатору строки дерева метаданных
			МассивНужныхСтрок= ПолнаяТаблицаПрав.НайтиСтроки(Новый Структура("Идентификатор",пр.Идентификатор));
			//разбираемся, что нам делать с массивом найденных строк - добавляем данные по ним в таблицу прав
			НайтиВТаблицеПравНужнуюСтроку(МассивНужныхСтрок,МассивОбъектов,РодительПодч,Родитель,Род,Подч, пр,Строка);
		//если у самой строки флажка не стоит, но стоит флажок у подчиненных строк - обнуляем для них поле родителя 
		//(чтобы они корректно выводились в отчет)
		ИначеЕсли Подч > 0  ИЛИ СтрокаНужна = Истина Тогда
			ВерхняяСтрокаНужна = Истина;
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель = Родитель;
			НоваяЗапись.УИ = РодительПодч;
			НоваяЗапись.ЭтоГруппа = Истина;
			НоваяЗапись.ИндексСтроки=Строка.Строки.Индекс(пр);

			//МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Родитель",РодительПодч));
			//Для каждого Запись Из МассивСтрок Цикл
			//	Запись.Родитель = "";
			//КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиВТаблицеПравНужнуюСтроку(МассивНужныхСтрок,МассивОбъектов,РодительПодч,Родитель,Род,Подч, пр,Строка)
	
	//найденных строк может быть несколько - это бывает в случае, если анализируются стандартные реквизиты
	Если МассивНужныхСтрок.Количество()=0 Тогда
		Стр=Неопределено;
	ИначеЕсли МассивНужныхСтрок.Количество()>1 или МассивНужныхСтрок[0].ОбъектСРеквизитами<>"Истина" Тогда
		Для каждого НужнаяСтрока Из МассивНужныхСтрок Цикл
			Если Найти(пр.Наименование,"СтандартныйРеквизит")=0 и НужнаяСтрока.ОбъектСРеквизитами="Истина" Тогда
				Стр = НужнаяСтрока;
				//в таблицу РЛС нужно будет вывести данные по отмеченной строке
				Если СравнениеРолей=Ложь Тогда
					МассивОбъектов.Добавить(Стр.Идентификатор);
				Иначе
					МассивОбъектов.Добавить(Стр.Синоним);
				КонецЕсли;
				Прервать;
			ИначеЕсли пр.Наименование=НужнаяСтрока.ОбъектСРеквизитами Тогда
				Стр = НужнаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли МассивНужныхСтрок.Количество()=1 Тогда
		Стр=МассивНужныхСтрок[0];
		Если СравнениеРолей=Ложь Тогда
			МассивОбъектов.Добавить(Стр.Идентификатор);
		Иначе
			МассивОбъектов.Добавить(Стр.Синоним);
		КонецЕсли;
	КонецЕсли;
	//добавляем в таблицу прав новую строку
	ДобавитьСтрокуВТаблицуПрав(Стр,пр,РодительПодч,Родитель, Подч,Строка);
	Род = Род + 1;

КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуПрав(Стр,пр,РодительПодч,Родитель, Подч,Строка)
	
	НоваяСтрока = ТаблицаПрав.Добавить();
	//перенесем данные по анализируемой строке в таблицу прав
	Если Стр<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		//в режиме дополнения для "добавленных" и "удаленных" строк выведем права по умолчанию
		Если РежимДополнения=Истина и пр.ВидМетаданных<>"" и  СравнениеРолей=Истина Тогда
			Если пр.ИндексПервойКартинки=117 Тогда
				НоваяСтрока.Добавлено=Истина;
			ИначеЕсли пр.ИндексВторойКартинки=117 Тогда
				НоваяСтрока.Добавлено=Ложь;
			КонецЕсли;
			СписокПравОбъекта=СоответствиеВидовМетаданных.Получить(пр.ВидМетаданных);
			Если СписокПравОбъекта<>Неопределено и Стр.ЕстьИзменения=0 и пр.ИндексВторойКартинки<>117 Тогда
				
				Если пр.ВидМетаданных="Реквизит" или пр.ВидМетаданных="ТабличнаяЧасть" или пр.ВидМетаданных="РеквизитТабличнойЧасти" или пр.ВидМетаданных = "Команда" или пр.ВидМетаданных = "СтандартныйРеквизит" Тогда
					Если пр.Строки.Количество()=0 или (пр.ВидМетаданных = "ТабличнаяЧасть" и пр.Наименование<>"Табличные части") Тогда
						Для каждого Право Из СписокПравОбъекта Цикл
							НоваяСтрока[Право.Значение.Представление + "1"] = "1";
						КонецЦикла;
					КонецЕсли;
				Иначе
					Для каждого Право Из СписокПравОбъекта Цикл
						НоваяСтрока[Право.Значение.Представление + "1"] = ?(ВсеПраваПоУмолчаниюВтораяРоль=Ложь, "-1", "1");
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли СписокПравОбъекта<>Неопределено и Стр.ЕстьИзменения = 3 и пр.ИндексПервойКартинки<>117 Тогда	
				Если пр.ВидМетаданных="Реквизит" или пр.ВидМетаданных="ТабличнаяЧасть" или пр.ВидМетаданных="РеквизитТабличнойЧасти" или пр.ВидМетаданных = "Команда" или пр.ВидМетаданных = "СтандартныйРеквизит"  Тогда
					Если пр.Строки.Количество()=0 или (пр.ВидМетаданных = "ТабличнаяЧасть" и пр.Наименование<>"Табличные части") Тогда
						Для каждого Право Из СписокПравОбъекта Цикл
							НоваяСтрока[Право.Значение.Представление] = "1";
						КонецЦикла;
					КонецЕсли;
				Иначе
					Для каждого Право Из СписокПравОбъекта Цикл
						НоваяСтрока[Право.Значение.Представление] = ?(ВсеПраваПоУмолчанию=Ложь, "-1", "1");
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//возможно, что в полной таблице прав не содержатся данные по анализируемой строке дерева метаданных
		//например, если это узел вида метаданных - тогда просто заполним поле Объект строки таблицы прав
	Иначе	
		НоваяСтрока.Объект    = пр.Наименование;
		Если РежимДополнения=Истина и пр.ВидМетаданных<>"" Тогда
			НоваяСтрока.Дополнено = Истина;
			НоваяСтрока.ВидМетаданных = пр.ВидМетаданных;
			СписокПравОбъекта=СоответствиеВидовМетаданных.Получить(пр.ВидМетаданных);
			Если СписокПравОбъекта<>Неопределено Тогда
				Если пр.ВидМетаданных="Реквизит" или пр.ВидМетаданных="ТабличнаяЧасть" или пр.ВидМетаданных="РеквизитТабличнойЧасти" или пр.ВидМетаданных = "Команда" или пр.ВидМетаданных = "СтандартныйРеквизит"  Тогда
					Если пр.Строки.Количество()=0 или (пр.ВидМетаданных = "ТабличнаяЧасть" и пр.Наименование<>"Табличные части") Тогда
							Если СравнениеРолей=Истина Тогда
						НоваяСтрока.ЕстьИзмененияДополнения = "Все разрешено";
					КонецЕсли;
						Для каждого Право Из СписокПравОбъекта Цикл
							Если СравнениеРолей=Истина Тогда
								Если пр.ИндексПервойКартинки<>117 Тогда
									НоваяСтрока[Право.Значение.Представление] = "1";
								Иначе
									НоваяСтрока.Добавлено=Истина;
								КонецЕсли;
								Если пр.ИндексВторойКартинки<>117 Тогда
									НоваяСтрока[Право.Значение.Представление + "1"] = "1";
								Иначе
									НоваяСтрока.Добавлено = Ложь;
								КонецЕсли;
							Иначе
								НоваяСтрока[Право.Значение.Представление] = "1";
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
							Если СравнениеРолей=Истина Тогда
					НоваяСтрока.ЕстьИзмененияДополнения = ЗначениеИзмененийПоУмолчанию;
				КонецЕсли;
					Для каждого Право Из СписокПравОбъекта Цикл
						Если СравнениеРолей=Истина Тогда
							Если пр.ИндексПервойКартинки<>117 Тогда
								НоваяСтрока[Право.Значение.Представление] = ?(ВсеПраваПоУмолчанию=Ложь, "-1", "1");
							Иначе
								НоваяСтрока.Добавлено=Истина;
							КонецЕсли;
							Если пр.ИндексВторойКартинки<>117 Тогда
								НоваяСтрока[Право.Значение.Представление + "1"] = ?(ВсеПраваПоУмолчаниюВтораяРоль=Ложь, "-1", "1");
							Иначе
								НоваяСтрока.Добавлено=Ложь;
							КонецЕсли;
						Иначе
							НоваяСтрока[Право.Значение.Представление] = ?(ВсеПраваПоУмолчанию=Ложь, "-1", "1");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Если СравнениеРолей = Истина Тогда
			НоваяСтрока.ЕстьИзменения = 1;
		КонецЕсли;
	КонецЕсли;
	//заполним данные по иерархии для СКД, а также индекс строки для корректного порядка строк в отчете
	НоваяСтрока.Родитель      = Родитель;
	НоваяСтрока.УИ            = РодительПодч;
	НоваяСтрока.ИндексСтроки  = Строка.Строки.Индекс(пр);
	Если Подч > 0 Тогда
		НоваяСтрока.ЭтоГруппа = Истина;
	КонецЕсли;

КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ДЕРЕВА ОБЪЕКТОВ В РЕЖИМЕ АНАЛИЗА
//==============================================================================================================================================

Процедура ПостроитьДеревоОбъектов(ИспользоватьРЛС,МассивНеопределенныхСтрок)
	
	СтрокаНужна = Ложь;
	РЛСНужно = Ложь;
	//параллельно будем строить дерево дополнения
	ГруппировкиОтчета.Колонки.Добавить("СсылкаДополнения");
	ДеревоДополнения = ГруппировкиОтчета.Скопировать();
	ДеревоДополнения.Колонки.Добавить("Дополнено",Новый ОписаниеТипов("Булево"));
	//обходим строки дерева метаданных основной формы обработки - заполняя иерархию метаданных роли
	Для каждого Строка Из Дерево.Строки Цикл
		//добавляем строку в дерево метаданных роли
		НоваяСтрока = ГруппировкиОтчета.Строки.Добавить();
		//Заполняем соответствующие свойства строки приемника
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,"Наименование,ИндексКартинки,Идентификатор,Синоним,ВидМетаданных");
		//выставляем флажок
		НоваяСтрока.Пометка = Истина;
		//строку группировок и строку дополнения нужно связать ссылками
		НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрокаДополнения = ДеревоДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДополнения,НоваяСтрока);
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		Родитель = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Строка.Наименование);
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в дереве объектов)
		ПеребратьРекурсивно(НоваяСтрока,Строка,СтрокаНужна,Родитель,ИспользоватьРЛС,РЛСНужно,СтрокаДополнения);
		//если в таблице прав присутствуют данные по строке конфигурации - 
		//заполним поля Родитель, УИ и ИндексСтроки для правильного вывода иерархии в СКД
		ДанныеПоСтрокеВТаблицеПрав = ТаблицаПрав.Найти(Строка.Идентификатор,"Идентификатор");
		Если ДанныеПоСтрокеВТаблицеПрав<>Неопределено Тогда
			ДанныеПоСтрокеВТаблицеПрав.Родитель = "";
			ДанныеПоСтрокеВТаблицеПрав.УИ       = Родитель;
			ДанныеПоСтрокеВТаблицеПрав.ИндексСтроки  = ГруппировкиОтчета.Строки.Индекс(Строка);
			Если НоваяСтрока.Строки.Количество()>0 Тогда
				ДанныеПоСтрокеВТаблицеПрав.ЭтоГруппа=Истина;
			КонецЕсли;
			Если ИспользоватьРЛС <> Ложь И РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС = Истина;
			КонецЕсли;
		//ну вдруг - скорее для отладки	
		ИначеЕсли СтрокаНужна = Ложь Тогда
			ГруппировкиОтчета.Строки.Удалить(НоваяСтрока);
		//данных в таблице прав по строке конфигурации	нет, 
		//но для вывода иерархии в отчете эта строка все равно нужна - 
		//добавляем данные по этой строке в таблицу прав, заполняем все необходимые поля
		Иначе
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель     = "";
			НоваяЗапись.УИ           = Родитель;
			НоваяЗапись.ЭтоГруппа    = Истина;
			НоваяЗапись.Объект       = Строка.Наименование;
			НоваяЗапись.ИндексСтроки = Дерево.Строки.Индекс(Строка);
			
			Если ИспользоватьРЛС <> Ложь И РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//данные по неопределенным строкам тоже выведем в дерево объектов
	Если МассивНеопределенныхСтрок.Количество()>0 Тогда
		СтрокаНеопределенныхСтрок = НоваяСтрока.Строки.Добавить();
		СтрокаНеопределенныхСтрок.Наименование = "Удаленные объекты метаданных";
		СтрокаНеопределенныхСтрок.Пометка = Истина;
		СтрокаНеопределенныхСтрок.ИндексКартинки = 43;
		СтрокаНеопределенныхСтрок.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрокаДополненияНеопределенныхСтрок = СтрокаДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДополненияНеопределенныхСтрок,СтрокаНеопределенныхСтрок);
		//
		РодительНеопределенныхСтрок = СписокУИ.Добавить(Новый УникальныйИдентификатор(),"Удаленные объекты метаданных");
		ЗаписьНеопределенныхСтрок = ТаблицаПрав.Добавить();
		ЗаписьНеопределенныхСтрок.Родитель = Родитель;
		ЗаписьНеопределенныхСтрок.УИ = РодительНеопределенныхСтрок;
		ЗаписьНеопределенныхСтрок.ЭтоГруппа = Истина;
		ЗаписьНеопределенныхСтрок.ИндексСтроки = 50;
		//Важно первыми обработать строки объектов, а строки стандартных реквизитов - потом
		//сортируем массив неопределенных строк
		Для Сч1 = 0 По МассивНеопределенныхСтрок.ВГраница()-1 Цикл
			Для Сч2 = 0 По МассивНеопределенныхСтрок.ВГраница()-Сч1-1 Цикл
				Если МассивНеопределенныхСтрок[Сч2].ОбъектСРеквизитами <> "Истина" и МассивНеопределенныхСтрок[Сч2].ОбъектСРеквизитами<>МассивНеопределенныхСтрок[Сч2+1].ОбъектСРеквизитами Тогда
					мВрем = МассивНеопределенныхСтрок[Сч2];
					МассивНеопределенныхСтрок[Сч2] = МассивНеопределенныхСтрок[Сч2+1];
					МассивНеопределенныхСтрок[Сч2+1] = мВрем;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Для каждого Вр Из МассивНеопределенныхСтрок Цикл
			Если Вр.ОбъектСРеквизитами = "Истина" Тогда
				НоваяСтрока = СтрокаНеопределенныхСтрок.Строки.Добавить();
				НоваяСтрока.Наименование   = Вр.Идентификатор;
				НоваяСтрока.Пометка        = Истина;
				НоваяСтрока.ИндексКартинки = 43;
				НоваяСтрока.Идентификатор  = Вр.Идентификатор;
				НоваяСтрока.Синоним        = Вр.Идентификатор;
				НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
				//аналогично выставим данные для строки дополнения
				СтрокаДополненияНеопределенныхОбъектов = СтрокаДополненияНеопределенныхСтрок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДополненияНеопределенныхОбъектов,НоваяСтрока);
				//	
				Вр.Родитель = РодительНеопределенныхСтрок;										//чтобы выводилось в отчет
				Вр.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.Идентификатор);  //чтобы выводилось в отчет
			Иначе
				СтрокаДерева = СтрокаНеопределенныхСтрок.Строки.Найти(Вр.Идентификатор,"Идентификатор");
				Если СтрокаДерева=Неопределено Тогда
					СтрокаДерева = СтрокаНеопределенныхСтрок.Строки.Добавить();
					СтрокаДерева.Наименование = Вр.Идентификатор;
					СтрокаДерева.Пометка        = Истина;
					СтрокаДерева.ИндексКартинки = 43;
					СтрокаДерева.Идентификатор  = Вр.Идентификатор;
					СтрокаДерева.Синоним        = Вр.Идентификатор;
					СтрокаДерева.СсылкаДополнения = Новый УникальныйИдентификатор();
					//аналогично выставим данные для строки дополнения
					СтрокаДереваДополнения = СтрокаДополненияНеопределенныхСтрок.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДереваДополнения,СтрокаДерева);
					//
					ОбъектНеопределенныхСтрок = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.Идентификатор);
					СтрокаРодителяНеопределеннойСтроки = ТаблицаПрав.Добавить();
					СтрокаРодителяНеопределеннойСтроки.Родитель = РодительНеопределенныхСтрок;
					СтрокаРодителяНеопределеннойСтроки.УИ = ОбъектНеопределенныхСтрок;
					СтрокаРодителяНеопределеннойСтроки.ЭтоГруппа = Истина;
				Иначе
					СтрокаРодителяНеопределеннойСтроки = ТаблицаПрав.Найти(Вр.Идентификатор,"Идентификатор");
					СтрокаДерева = СтрокаНеопределенныхСтрок.Строки.Найти(Вр.Идентификатор,"Идентификатор");
					СтрокаДереваДополнения = СтрокаДополненияНеопределенныхСтрок.Строки.Найти(Вр.Идентификатор,"Идентификатор");
				КонецЕсли;
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
				НоваяСтрока.Наименование = Вр.ОбъектСРеквизитами;
				НоваяСтрока.Пометка = Истина;
				НоваяСтрока.ИндексКартинки = 43;
				НоваяСтрока.Идентификатор = Вр.Идентификатор;
				НоваяСтрока.Синоним = Вр.Синоним;
				НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
				//аналогично выставим данные для строки дополнения
				СтрокаДополненияНеопределенныхСтандартныхРеквизитов = СтрокаДереваДополнения.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДополненияНеопределенныхСтандартныхРеквизитов,НоваяСтрока);
				//
				Вр.Родитель = СтрокаРодителяНеопределеннойСтроки.УИ;
				Вр.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.ОбъектСРеквизитами);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеребратьРекурсивно(НоваяСтрока,Строка,ВерхняяСтрокаНужна,Родитель,ИспользоватьРЛС,ВерхнееРЛСНужно,СтрокаДополнения);
	
	Для каждого стр Из Строка.Строки Цикл
		СтрокаНужна = Ложь;
		РЛСНужно = Ложь;
		Если ОбъектуНеНазначаютПрав(Строка,стр)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		
		//добавляем строку в дерево метаданных роли
		НовСтр = НоваяСтрока.Строки.Добавить();
		//Заполняем соответствующие свойства строки приемника
		ЗаполнитьЗначенияСвойств(НовСтр,Стр,"Наименование,ИндексКартинки,Идентификатор,Синоним");
		Если Стр.Объект="О" или Стр.Объект = "РО" Тогда
			ЗаполнитьЗначенияСвойств(НовСтр,Стр,"ВидМетаданных");
		КонецЕсли;
		//выставляем флажок
		НовСтр.Пометка        = Истина;
		//строку группировок и строку дополнения нужно связать ссылками, чтобы при переключении режимов корректно проставлялись флажки
		НовСтр.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрДополнения = СтрокаДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДополнения,НовСтр);
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Стр.Наименование);
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в дереве объектов)
		ПеребратьРекурсивно(НовСтр,стр,СтрокаНужна,РодительПодч,ИспользоватьРЛС,РЛСНужно,СтрДополнения);
		//если в таблице прав присутствуют данные по анализируемой строке  - 
		//заполним поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		Если ТаблицаПрав.Найти(Стр.Идентификатор,"Идентификатор")<>Неопределено Тогда
			ВерхняяСтрокаНужна = Истина;
			СтрокаНужна = Истина;
			//находим в таблице прав строки, соответствующие идентификатору строки дерева метаданных
			МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Идентификатор",Стр.Идентификатор));
			//для найденных строк заполняем поля Родитель, УИ, ИндексСтроки и ЭтоГруппа
			//анализируем права на стандартные реквизиты для объекта строки дерева метаданных - их тоже выводим в дерево
			ОбработатьСтрокиПравДляПостроенияДерева(МассивСтрок,стр,НовСтр,Родитель,РодительПодч,ИспользоватьРЛС,СтрДополнения);
		//Если данных по строке нет и подчиненные строки для нее тоже в таблице прав отсутствуют, тогда в дереве объектов метаданны ее можно удалить	
		ИначеЕсли СтрокаНужна = Ложь Тогда
			НоваяСтрока.Строки.Удалить(НовСтр);
			СтрДополнения.Дополнено = Истина;
			СтрДополнения.Пометка = Ложь;
		//в таблице прав данных по строке нет, но есть данные по ее подчиненным строкам
		//добавляем данные по этой строке в таблицу прав, заполняем все необходимые поля  
		Иначе 
			ВерхняяСтрокаНужна = Истина;	
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель     = Родитель;
			НоваяЗапись.УИ           = РодительПодч;
			НоваяЗапись.Объект       = стр.Наименование;
			НоваяЗапись.ЭтоГруппа    = Истина;
			НоваяЗапись.ИндексСтроки = стр.Родитель.Строки.Индекс(Стр);
			Если ИспользоватьРЛС <> Ложь и РЛСНужно = Истина Тогда
				НовСтр.РЛС = Истина;
				ВерхнееРЛСНужно = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСтрокиПравДляПостроенияДерева(МассивСтрок,Стр,НовСтр,Родитель,РодительПодч,ИспользоватьРЛС,СтрДополнения)
	
	//найденных строк может быть несколько - это бывает в случае, если в таблице прав присутствуют данные по стандартным реквизитам
	Если МассивСтрок.Количество()>1 или МассивСтрок[0].ОбъектСРеквизитами<>"Истина" Тогда
		//сначала проверим, есть ли в роли права самого объекта метаданных (не просто его стандартного реквизита)
		Для каждого гр Из МассивСтрок Цикл
			Если гр.ОбъектСРеквизитами="Истина" Тогда
				СтрокаНайдена = гр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//если по самому объекту метаданных в таблице прав информация отсутствуют - 
		//берем данные из строки дерева конфигурации
		Если СтрокаНайдена=Неопределено Тогда
			НоваяЗапись = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,Стр,"Синоним,Объект,Идентификатор");
		Иначе
			НоваяЗапись = СтрокаНайдена;
			//если в найденной в таблице прав строке указано, что объект имеет записи РЛС - поставим в дереве метаданных отметку об этом
			Если ИспользоватьРЛС<>Ложь И СтрокаНайдена.РЛС=Истина Тогда
				НовСтр.РЛС = Истина;
				РЛСНужно        = Истина;
				ВерхнееРЛСНужно = Истина;
			КонецЕсли;
		КонецЕсли;
		//заполним в таблице прав для строки объекта метаданных 
		//поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		НоваяЗапись.Родитель     = Родитель;
		НоваяЗапись.УИ           = РодительПодч;
		НоваяЗапись.ЭтоГруппа    = Истина;
		НоваяЗапись.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
		
		//создаем в таблице прав строку группы стандартных реквизитов
		ЗаписьСтандартныхРеквизитов = СписокУИ.Добавить(Новый УникальныйИдентификатор(),"Стандартные реквизиты");
		НоваяЗапись = ТаблицаПрав.Добавить();
		НоваяЗапись.Родитель     = РодительПодч;
		НоваяЗапись.УИ           = ЗаписьСтандартныхРеквизитов;
		НоваяЗапись.ЭтоГруппа    = Истина;
		НоваяЗапись.ИндексСтроки = 10;
		
		//в дереве метаданных тоже нужна строка группы стандартных реквизитов
		ПодчСтр = НовСтр.Строки.Добавить();
		ПодчСтр.Наименование   = "Стандартные реквизиты";
		ПодчСтр.Пометка        = Истина;
		ПодчСтр.ИндексКартинки = 95;
		ПодчСтр.СсылкаДополнения = Новый УникальныйИдентификатор();
		//то же самое для строки дополнения
		ПодчСтрДополнения = СтрДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ПодчСтрДополнения,ПодчСтр);
		
		//опять делаем цикл по массиву найденных строк таблицы прав, 
		//чтобы вывести в дерево метаданных информацию о стандартных реквизитах, на которые заданы права
		Для каждого др Из МассивСтрок Цикл
			Если др.ОбъектСРеквизитами<>"Истина" Тогда
				СтандРеквизит = ПодчСтр.Строки.Добавить();
				СтандРеквизит.Наименование   = др.ОбъектСРеквизитами;
				СтандРеквизит.Пометка        = Истина;
				СтандРеквизит.Идентификатор  = др.Идентификатор;
				СтандРеквизит.ВидМетаданных  = "СтандартныйРеквизит";
				СтандРеквизит.ИндексКартинки = 96;
				СтандРеквизит.СсылкаДополнения = Новый УникальныйИдентификатор();
				//то же самое для строки дополнения
				СтандРеквизитДополнения = ПодчСтрДополнения.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтандРеквизитДополнения,СтандРеквизит);
				//также заполняем поля Родитель, УИ и ИндексСтроки для стандартного реквизита в таблице прав
				//для правильного вывода иерархии в СКД
				др.Родитель = ЗаписьСтандартныхРеквизитов;
				др.УИ       = СписокУИ.Добавить(Новый УникальныйИдентификатор(),др.ОбъектСРеквизитами);
			КонецЕсли;
		КонецЦикла;
	//если найденная строка одна, то просто заполняем у нее поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД	
	Иначе
		СтрокаОбъекта = ТаблицаПрав.Найти(Стр.Идентификатор,"Идентификатор");
		СтрокаОбъекта.Родитель     = Родитель;
		СтрокаОбъекта.УИ           = РодительПодч;
		СтрокаОбъекта.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
		Если НовСтр.Строки.Количество()>0 Тогда
			СтрокаОбъекта.ЭтоГруппа=Истина;
		КонецЕсли;
		//если в таблице прав в строке указано, что объект имеет записи РЛС - поставим в дереве метаданных отметку об этом
		Если ИспользоватьРЛС<>Ложь И СтрокаОбъекта.РЛС=Истина Тогда
			НовСтр.РЛС = Истина;
			РЛСНужно        = Истина;
			ВерхнееРЛСНужно = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектуНеНазначаютПрав(СтрокаДерева,Стр)
	
	Если СтрокаДерева.Наименование = "Общие" И ВсеОбъекты.НайтиПоЗначению(стр.Наименование)=Неопределено Тогда
		Возврат Истина;
	ИначеЕсли СтрокаДерева.Наименование = "Документы" И стр.Наименование = "Нумераторы" Тогда	
		Возврат Истина;
	ИначеЕсли Стр.Наименование = "Модули задачи" Тогда	
		Возврат Истина;
	ИначеЕсли Стр.Объект = "МОД" ИЛИ Стр.Объект="Ф" ИЛИ Стр.ИндексКартинки = 100 ИЛИ Стр.ИндексКартинки=99 или Стр.ИндексКартинки=18 или Стр.ИндексКартинки = 0 или Стр.Наименование="Формы" Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ТАБЛИЦЫ РОЛЕЙ В РЕЖИМЕ СРАВНЕНИЯ
//==============================================================================================================================================

Процедура ДостроитьТаблицуДаннымиВторойРоли(МассивОбщихСвойствРоли)
	
	//работаем с уже заполненной таблицей прав
	//добавляем в нее колонки свойств строки сравниваемого объекта метаданных
	ТаблицаПрав.Колонки.Добавить("Объект1");
	ТаблицаПрав.Колонки.Добавить("Идентификатор1");
	ТаблицаПрав.Колонки.Добавить("ЕстьИзменения",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)));
	ТаблицаПрав.Колонки.Добавить("ЕстьИзмененияРЛС",Новый ОписаниеТипов("Булево"));
	//добавляем колонки прав, соответствующие правам сравниваемого объекта
	//(дублируем тот же набор прав, но с постфиксом 1)
	Для каждого СтрокаСпискаПрав Из ВсеПрава Цикл
		ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Представление+"1");
	КонецЦикла;
	
	//в уже существующую таблицу РЛС добавляем колонки, соответвующие значениям РЛС для сравниваемого объекта и полей РЛС для него же
	ТаблицаРЛС.Колонки.Добавить("ЗначениеПрава1");
	ТаблицаРЛС.Колонки.Добавить("Поля1");
	ТаблицаРЛС.Колонки.Добавить("ЕстьИзмененияРЛС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)));
	
	//получаем XML из внутреннего представления роли, используемой для сравнения
	МассивФормы      = СтрокаВнутрВХМЛТело(Текст2С);
	ДокументDOM      = ПолучитьДокументDOMФормы(МассивФормы);
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента      = "/elem[1]/elem[1]/elem/elem[1]"; 
	РезультатXPath   = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	
	//Получение значений общих свойств роли
	Если ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[3].ТекстовоеСодержимое = "1" Тогда
		ВсеПраваПоУмолчаниюВтораяРоль = Истина;
		МассивОбщихСвойствРоли.Добавить(Истина);
	Иначе
		ВсеПраваПоУмолчаниюВтораяРоль = Ложь;
		МассивОбщихСвойствРоли.Добавить(Ложь);
	КонецЕсли;
	МассивОбщихСвойствРоли.Добавить(?(ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[4].ТекстовоеСодержимое = "1", Истина, Ложь));
	МассивОбщихСвойствРоли.Добавить(?(ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[5].ТекстовоеСодержимое = "1", Истина, Ложь));

	//парсим полученный XML для получения данных по набору прав сравниваемой роли
	Пока 1 = 1 цикл
		ИзмененияРЛС=Ложь;
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено тогда
			Прервать;
		КонецЕсли;
		//в узле находится идентификатор объекта метаданных - информацию о том, что это за объект 
		//находим в сравниваемом дереве метаданных основной формы обработки
		СтрокаПрава = СоответствиеСтрокВторое.Получить(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
		Если СтрокаПрава <> Неопределено Тогда
			МассивРеквизитовОбъекта = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",СтрокаПрава.Синоним));
		Иначе
			МассивРеквизитовОбъекта = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",Узел.ДочерниеУзлы[1].ТекстовоеСодержимое));
		КонецЕсли;
		//определяем строку таблицы прав, соответствующую синониму сравниваемого объекта метаданных
		НоваяСтрока = НайтиСоответствиеВТаблицеПрав(МассивРеквизитовОбъекта,СтрокаПрава,Узел);
		//есть два вида формата представления набора прав - для объектов с возможным наличием РЛС и для всех остальных объектов
		//для второго формата характерно наличие в следующем узле идентификатора права
		Если ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[1].ТекстовоеСодержимое) <> Неопределено Тогда
			//в узлах этого вида могут, кроме прав обычных объектов метаданных храниться права на стандартные реквизиты объектов - 
			//особенность в том, что все эти узлы имеют тот же идентификатор, что объект, стандартным реквизитом которого они являются
			ДополнитьОбъектСРеквизитами(Узел.ДочерниеУзлы[2],СтрокаПрава,НоваяСтрока,МассивРеквизитовОбъекта);
			//занесем в таблицу прав информацию по правам 
			Индекс = 1;
			Максимум = Узел.СледующийСоседний.ДочерниеУзлы.Количество();
			ОбработатьУзлыПравСравненияОбъекта(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум);
		Иначе
			//обработаем объекты с возможным наличием РЛС
			Если МассивРеквизитовОбъекта<>Неопределено и МассивРеквизитовОбъекта.Количество()>1 Тогда
				Для каждого Реквизит Из МассивРеквизитовОбъекта Цикл
					Если Реквизит.ОбъектСРеквизитами="Истина" Тогда
						НоваяСтрока = Реквизит;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НоваяСтрока = Неопределено  Тогда
				НоваяСтрока = ТаблицаПрав.Добавить();
				НоваяСтрока.Синоним            = ?(СтрокаПрава<>Неопределено,СтрокаПрава.Синоним,"");
				НоваяСтрока.ОбъектСРеквизитами = "Истина";
				НоваяСтрока.ЕстьИзменения      = 3;
				НоваяСтрока.ВидМетаданных      = СтрокаПрава.ВидМетаданных;
			Иначе
				НоваяСтрока.ЕстьИзменения = 1;
			КонецЕсли;
			НоваяСтрока.Объект1        = ?(СтрокаПрава<>Неопределено,СтрокаПрава.Наименование,Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
			НоваяСтрока.Идентификатор1 = Узел.ДочерниеУзлы[1].ТекстовоеСодержимое;
			//занесем в таблицу прав информацию по правам узла объекта метаданных с возможным наличием РЛС
			Индекс = 2;
			КоличествоПрав = Число(Узел.СледующийСоседний.ДочерниеУзлы[1].ТекстовоеСодержимое);
			Максимум = КоличествоПрав*2+2;
			ОбработатьУзлыПравСравненияОбъектаРЛС(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум);
			
			//Обработаем признак РЛС
			Если Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое<>"0" Тогда
				КоличествоРЛС = Число(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое);
				УзелРЛС = Узел.СледующийСоседний.ДочерниеУзлы[Индекс+1];
				ОбработкаРЛС(УзелРЛС,КоличествоРЛС,СтрокаПрава,НоваяСтрока);
				ПроверитьИзмененияРЛС(НоваяСтрока)
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаШаблонов.Колонки.ШаблонВторойРоли.Видимость=Истина;
	ЭлементыФормы.ТаблицаШаблонов.Колонки.ШаблонВторойРоли.Доступность=Истина;
	ЭлементыФормы.ТаблицаШаблонов.Колонки.ШаблонВторойРоли.ИзменятьВидимость=Истина;
	ЭлементыФормы.ТаблицаШаблонов.Колонки.Текст.ТекстШапки = "Шаблон первой роли";
	//Получение текста шаблонов
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента      = "/elem[1]/elem[2]/elem"; 
	РезультатXPath   = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1 = 1 цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено тогда
			Прервать;
		КонецЕсли;
		ДополнитьТаблицуШаблонов(Узел);
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиСоответствиеВТаблицеПрав(МассивРеквизитовОбъекта,СтрокаПрава, Узел)
	
	НоваяСтрока = Неопределено;
	Если МассивРеквизитовОбъекта.Количество()>0 Тогда
		Для каждого Вр Из МассивРеквизитовОбъекта  Цикл
			Если СтрокаПрава <> Неопределено и Узел.ДочерниеУзлы[2].ТекстовоеСодержимое <> "0" и СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных]<>Неопределено Тогда
				Если Вр.ОбъектСРеквизитами = СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных][СтрЗаменить(Узел.ДочерниеУзлы[3].ДочерниеУзлы[0].ТекстовоеСодержимое,"-","v")] Тогда
					НоваяСтрока = Вр;
					Прервать;
				КонецЕсли;
			ИначеЕсли Узел.ДочерниеУзлы[2].ТекстовоеСодержимое <> "0" И Вр.ОбъектСРеквизитами = "СтандартныйРеквизит"+Узел.ДочерниеУзлы[3].ДочерниеУзлы[0].ТекстовоеСодержимое  Тогда
				НоваяСтрока = Вр;
				Прервать;
			ИначеЕсли Узел.ДочерниеУзлы[2].ТекстовоеСодержимое = "0" И Вр.ОбъектСРеквизитами = "Истина" Тогда
				НоваяСтрока = Вр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДополнитьОбъектСРеквизитами(УзелДляАнализа,СтрокаПрава,НоваяСтрока,МассивРеквизитовОбъекта)
	
	Если НоваяСтрока=Неопределено  Тогда
		НоваяСтрока = ТаблицаПрав.Добавить();
		НоваяСтрока.Синоним = ?(СтрокаПрава <> Неопределено,СтрокаПрава.Синоним,УзелДляАнализа.ПредыдущийСоседний.ТекстовоеСодержимое);
		Если УзелДляАнализа.ТекстовоеСодержимое <> "0" Тогда
			Если СтрокаПрава<>Неопределено Тогда
				Если СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных] <> Неопределено Тогда
					СтандартныйРеквизит=СоответствиеСтандартныхРеквизитов[СтрокаПрава.ВидМетаданных][СтрЗаменить(УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое,"-","v")];
					НоваяСтрока.ОбъектСРеквизитами = СтандартныйРеквизит;	
				Иначе
					НоваяСтрока.ОбъектСРеквизитами = УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое;
				КонецЕсли;
			Иначе
				НоваяСтрока.ОбъектСРеквизитами = "СтандартныйРеквизит"+УзелДляАнализа.СледующийСоседний.ДочерниеУзлы[0].ТекстовоеСодержимое;
			КонецЕсли;
			НоваяСтрока.ВидМетаданных = "СтандартныйРеквизит";
		Иначе
			НоваяСтрока.ВидМетаданных = ?(СтрокаПрава <> Неопределено,СтрокаПрава.ВидМетаданных,"");
			НоваяСтрока.ОбъектСРеквизитами = "Истина";
		КонецЕсли;
		НоваяСтрока.ЕстьИзменения = 3;
	Иначе
		НоваяСтрока.ЕстьИзменения = 1;
	КонецЕсли;
	НоваяСтрока.Объект1        = ?(СтрокаПрава<>Неопределено,СтрокаПрава.Наименование,"");
	НоваяСтрока.Идентификатор1 = УзелДляАнализа.ПредыдущийСоседний.ТекстовоеСодержимое;
	
КонецПроцедуры

Процедура ОбработатьУзлыПравСравненияОбъекта(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум)
	
	СоответствиеПравДополнения = Новый Соответствие;
	ПисатьПраво = Истина;
	Пока Индекс<>Максимум Цикл
		Если ПисатьПраво = Истина И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое)<>Неопределено Тогда
			ВыводитьПраво = Истина;
			Право=ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое);
		ИначеЕсли ПисатьПраво = Ложь И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс-1].ТекстовоеСодержимое)<>Неопределено Тогда
			Если ВыводитьПраво = Истина Тогда
				ИмяПервойКолонки = Право.Представление;
				ИмяВторойКолонки = Право.Представление+"1";
				ЗначениеПрава = Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое;
				НоваяСтрока[ИмяВторойКолонки] = ЗначениеПрава;
				Если  НоваяСтрока.ЕстьИзменения = 1 И НоваяСтрока[ИмяВторойКолонки]<>НоваяСтрока[ИмяПервойКолонки]  Тогда
					НоваяСтрока.ЕстьИзменения = 2;
				КонецЕсли;
				СоответствиеПравДополнения.Вставить(ЗначениеПрава,ЗначениеПрава);
			КонецЕсли;
		//с выпуском новых релизов платформ у объекта "Конфигурация" часто появляются новые виды прав
		//пока в процедуре ЗаполнитьСписокПрав() не будет проставлено соответствующее название для него,
		//будет добавляться просто колонка вида А<Идентификатор права> - в отладочных целях
		ИначеЕсли ПисатьПраво = Истина И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое)=Неопределено Тогда	
			ВыводитьПраво = Истина;
			Право=СтрЗаменить(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое,"-","");
			Если ТаблицаПрав.Колонки.Найти("А"+Право+"1")=Неопределено Тогда
				ТаблицаПрав.Колонки.Добавить("А"+Право+"1");
				Если ТаблицаПрав.Колонки.Найти("А"+Право)=Неопределено Тогда
					ТаблицаПрав.Колонки.Добавить("А"+Право);
				КонецЕсли;
				НовоеПраво=ПолныйСписокПрав.Добавить();
				НовоеПраво.Право = "А"+Право;
			КонецЕсли;
		Иначе
			Если ВыводитьПраво = Истина Тогда
				ИмяПервойКолонки = "А"+Право;
				ИмяВторойКолонки="А"+Право+"1";
				ЗначениеПрава = Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое;
				НоваяСтрока[ИмяВторойКолонки] = ЗначениеПрава;
				Если  НоваяСтрока.ЕстьИзменения = 1 И НоваяСтрока[ИмяВторойКолонки]<>НоваяСтрока[ИмяПервойКолонки]  Тогда
					НоваяСтрока.ЕстьИзменения = 2;
				КонецЕсли;
				СоответствиеПравДополнения.Вставить(ЗначениеПрава,ЗначениеПрава);
			КонецЕсли;
		КонецЕсли;
		ПисатьПраво = Не ПисатьПраво;
		Индекс = Индекс+1;
	КонецЦикла;
	УстановитьИзмененияДополнения(СоответствиеПравДополнения,НоваяСтрока,СтрокаПрава);
	
КонецПроцедуры

Процедура ОбработатьУзлыПравСравненияОбъектаРЛС(СтрокаПрава,Узел,НоваяСтрока,Индекс,Максимум)
	
	СоответствиеПравДополнения = Новый Соответствие;
	ПисатьПраво = Истина;
	Пока Индекс<>Максимум Цикл
		Если ПисатьПраво = Истина И ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое)<>Неопределено Тогда
			ВыводитьПраво = Истина;
			Право = ВсеПрава.НайтиПоЗначению(Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое);
		Иначе
			Если ВыводитьПраво = Истина Тогда
				ИмяПервойКолонки = Право.Представление;
				ИмяВторойКолонки = Право.Представление+"1";
				ЗначениеПрава = Узел.СледующийСоседний.ДочерниеУзлы[Индекс].ТекстовоеСодержимое;
				НоваяСтрока[ИмяВторойКолонки] = ЗначениеПрава;
				Если  НоваяСтрока.ЕстьИзменения = 1 И НоваяСтрока[ИмяВторойКолонки]<>НоваяСтрока[ИмяПервойКолонки] Тогда
					Если  НоваяСтрока[ИмяПервойКолонки]<>"2" и НоваяСтрока[ИмяВторойКолонки]<>"1" Тогда //различия для строк с назначенными РЛС будут устанавливаться позже
						НоваяСтрока.ЕстьИзменения = 2;
					КонецЕсли;				
				КонецЕсли;
				СоответствиеПравДополнения.Вставить(ЗначениеПрава,ЗначениеПрава);
			КонецЕсли;
		КонецЕсли;
		ПисатьПраво = Не ПисатьПраво;
		Индекс = Индекс+1;
	КонецЦикла;
	УстановитьИзмененияДополнения(СоответствиеПравДополнения,НоваяСтрока,СтрокаПрава);
	
КонецПроцедуры

Процедура УстановитьИзмененияДополнения(СоответствиеПравДополнения,НоваяСтрока,СтрокаПрава);

	Если СоответствиеПравДополнения.Количество()>1 Тогда
		НоваяСтрока.ЕстьИзмененияДополнения = "Разные";
	ИначеЕсли СоответствиеПравДополнения["1"]<>Неопределено Тогда
		Если  НоваяСтрока.ЕстьИзмененияДополнения = "Все разрешено" Тогда
			НоваяСтрока.ЕстьИзмененияДополнения = "Все разрешено";
		ИначеЕсли  НоваяСтрока.ЕстьИзмененияДополнения = "" и ВсеПраваПоУмолчанию = Истина Тогда	
			НоваяСтрока.ЕстьИзмененияДополнения = "Все разрешено";
		Иначе
			НоваяСтрока.ЕстьИзмененияДополнения = "Разные";
		КонецЕсли;
	Иначе
		Если НоваяСтрока.ЕстьИзмененияДополнения = "Все запрещено" Тогда
			НоваяСтрока.ЕстьИзмененияДополнения = "Все запрещено";
		ИначеЕсли  НоваяСтрока.ЕстьИзмененияДополнения = "" и ВсеПраваПоУмолчанию = Ложь и СтрокаПрава<>Неопределено и СтрокаПрава.Объект="О" и НоваяСтрока.ВидМетаданных<>"СтандартныйРеквизит" Тогда	
			НоваяСтрока.ЕстьИзмененияДополнения = "Все запрещено";
		Иначе
			НоваяСтрока.ЕстьИзмененияДополнения = "Разные";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаРЛС(УзелРЛС,КоличествоРЛС,СтрокаПрава,НоваяСтрока)
	
	Для ИндексСтроки = 0 По КоличествоРЛС - 1 Цикл
		УзелПраваРЛС = УзелРЛС.ДочерниеУзлы[0];
		Если  УзелПраваРЛС.СледующийСоседний.ТекстовоеСодержимое <> "0" Тогда
			КоличествоЗаписейРЛСПрава = Число(УзелПраваРЛС.СледующийСоседний.ПервыйДочерний.ТекстовоеСодержимое);
			Для  ИндексПраваРЛС = 1  По КоличествоЗаписейРЛСПрава Цикл
				НоваяСтрока.РЛС = Истина;
				Поля=Неопределено;
				Если УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое<>"0" Тогда
					КоличествоПолей = Число(УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое);
					Для п = 1 По КоличествоПолей Цикл
						Поля = ?(Поля = Неопределено,"",""+ Поля+",")+УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2+п].ТекстовоеСодержимое;
					КонецЦикла;
				Иначе 
					Поля = УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[2].ТекстовоеСодержимое;	
				КонецЕсли;
				ПравоРЛС=ВсеПрава.НайтиПоЗначению(УзелРЛС.ДочерниеУзлы[0].ТекстовоеСодержимое).Представление;
				МассивСтрокРЛС=ТаблицаРЛС.НайтиСтроки(Новый Структура("Объект,Право,Поля,Синоним",НоваяСтрока.Объект,ПравоРЛС,Поля,НоваяСтрока.Синоним));
				Если МассивСтрокРЛС.Количество()<>0 Тогда
					ЗаписьРЛС=МассивСтрокРЛС[0];
					ЗаписьРЛС.ЗначениеПрава1  = УбратьЛишниеКавычкиИзСтроки(УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[1].ТекстовоеСодержимое);
					ЗаписьРЛС.Поля1           = Поля;
					Если ЗаписьРЛС.ЗначениеПрава = ЗаписьРЛС.ЗначениеПрава1 И ЗаписьРЛС.Поля=ЗаписьРЛС.Поля1 Тогда
						ЗаписьРЛС.ЕстьИзмененияРЛС = 1;
					Иначе
						ЗаписьРЛС.ЕстьИзмененияРЛС = 2;
					КонецЕсли;
				Иначе
					ЗаписьРЛС = ТаблицаРЛС.Добавить();
					ЗаписьРЛС.Объект           = НоваяСтрока.Объект1;
					ЗаписьРЛС.Идентификатор    = НоваяСтрока.Идентификатор1;
					ЗаписьРЛС.Синоним          = НоваяСтрока.Синоним;
					ЗаписьРЛС.ИндексКартинки   = СтрокаПрава.ИндексКартинки;
					ЗаписьРЛС.Право            = ПравоРЛС;
					ЗаписьРЛС.Поля             = Поля;
					ЗаписьРЛС.ЕстьИзмененияРЛС = 3;
					ЗаписьРЛС.ЗначениеПрава1   = УбратьЛишниеКавычкиИзСтроки(УзелПраваРЛС.СледующийСоседний.ДочерниеУзлы[ИндексПраваРЛС].ДочерниеУзлы[1].ТекстовоеСодержимое);
					ЗаписьРЛС.Поля1            = Поля;
				КонецЕсли;
				НоваяСтрока[ЗаписьРЛС.Право+"1"] = "2";	
				
			КонецЦикла;
		КонецЕсли;				
		УзелРЛС = УзелРЛС.СледующийСоседний;
	КонецЦикла; 
КонецПроцедуры

Процедура ПроверитьИзмененияРЛС(НоваяСтрока)
	МассивСтрокДляПроверки=ТаблицаРЛС.НайтиСтроки(Новый Структура("Объект,Синоним",НоваяСтрока.Объект,НоваяСтрока.Синоним));
	Для каждого ПроверяемаяСтрока Из МассивСтрокДляПроверки Цикл
		Если ПроверяемаяСтрока.ЕстьИзмененияРЛС<>1 Тогда
			ИзмененияРЛС = Истина;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	Если ИзмененияРЛС=Истина  или НоваяСтрока.Объект=Неопределено Тогда
		НоваяСтрока.ЕстьИзмененияРЛС=Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьТаблицуШаблонов(Узел)
			Если ТаблицаШаблонов.Найти(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое,"Шаблон")<>Неопределено Тогда
			СтрокаШаблона = ТаблицаШаблонов.Найти(Узел.ДочерниеУзлы[0].ТекстовоеСодержимое,"Шаблон");
		Иначе
			СтрокаШаблона = ТаблицаШаблонов.Добавить();
			СтрокаШаблона.Шаблон = Узел.ДочерниеУзлы[0].ТекстовоеСодержимое;
			СтрокаШаблона.ЕстьИзменения = Истина;
		КонецЕсли;
		СтрокаШаблона.ПолныйТекстВторогоШаблона = УбратьЛишниеКавычкиИзСтроки(Узел.ДочерниеУзлы[1].ТекстовоеСодержимое);
		Если СтрокаШаблона.ПолныйТекстВторогоШаблона<>СтрокаШаблона.ПолныйТекстШаблона Тогда
			СтрокаШаблона.ЕстьИзменения = Истина;
		КонецЕсли;
		Если СтрЧислоСтрок(СтрокаШаблона.ПолныйТекстВторогоШаблона)>=10 Тогда
			НомерСтроки = 1;
			ТекстШаблона = Новый ТекстовыйДокумент;
			Пока НомерСтроки <= 10 цикл 
				ТекстШаблона.ВставитьСтроку(НомерСтроки,СтрПолучитьСтроку(СтрокаШаблона.ПолныйТекстШаблона,НомерСтроки));
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			СтрокаШаблона.ШаблонВторойРоли = ТекстШаблона.ПолучитьТекст() + "...";
		Иначе СтрокаШаблона.ШаблонВторойРоли = СтрокаШаблона.ПолныйТекстВторогоШаблона;	
		КонецЕсли;

КонецПроцедуры

Процедура ПерестроитьТаблицуПравСравнения()
	
	//для таблицы прав нужен новый состав и порядок колонок - поэтому создаем новую таблицу
	ТаблицаПрав = Новый ТаблицаЗначений;
	//массив идентификаторов отмеченных флажками объектов для таблицы РЛС
	МассивОбъектов = Новый Массив;
	//добавляем в таблицу колонки свойств строки сравнения метаданных объекта
	ТаблицаПрав.Колонки.Добавить("Объект");
	ТаблицаПрав.Колонки.Добавить("Идентификатор");
	ТаблицаПрав.Колонки.Добавить("Объект1");
	ТаблицаПрав.Колонки.Добавить("Идентификатор1");
	ТаблицаПрав.Колонки.Добавить("Синоним");
	ТаблицаПрав.Колонки.Добавить("ОбъектСРеквизитами");
	ТаблицаПрав.Колонки.Добавить("РЛС", Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("ЕстьИзмененияРЛС", Новый ОписаниеТипов("Булево"));
	ТаблицаПрав.Колонки.Добавить("Родитель");
	ТаблицаПрав.Колонки.Добавить("УИ");
	ТаблицаПрав.Колонки.Добавить("ЭтоГруппа");
	ТаблицаПрав.Колонки.Добавить("ИндексСтроки");
	ТаблицаПрав.Колонки.Добавить("ЕстьИзменения",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1)));
	//добавляем в таблицу колонки отмеченных прав
	Для каждого СтрокаСпискаПрав Из ПолныйСписокПрав Цикл
		Если СтрокаСпискаПрав.Пометка = Истина Тогда
			ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Право);
			ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Право+"1");
		КонецЕсли;
	КонецЦикла;
	Если РежимДополнения=Истина Тогда
		ТаблицаПрав.Колонки.Добавить("Дополнено",Новый ОписаниеТипов("Булево"));
		ТаблицаПрав.Колонки.Добавить("ЕстьИзмененияДополнения",Новый ОписаниеТипов("Строка"));
		ТаблицаПрав.Колонки.Добавить("Добавлено");
		ТаблицаПрав.Колонки.Добавить("ВидМетаданных");
	КонецЕсли;
	//нужны новые УИ для новой иерархии
	СписокУИ.Очистить();
	
	//рекурсивно обходим строки дерева сравнения метаданных
	Для каждого Строка Из СравнениеОбъектовРолей.Строки Цикл
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		Родитель = СписокУИ.Добавить(Новый УникальныйИдентификатор(), Строка.Наименование);
		//Определим, является ли строка группой
		Подч = 0;
		СтрокаНужна = Ложь;
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в таблице прав и является ли эта строка группой)
		ПереборДляПерестройкиСравнения(Строка,Родитель,Подч,МассивОбъектов,СтрокаНужна);
		//если у строки стоит флажок, значит, ее нужно занести в таблицу прав
		Если Строка.Пометка = Истина Тогда
			Стр=ПолнаяТаблицаПрав.Найти(Строка.Синоним,"Синоним");
			НоваяСтрока = ТаблицаПрав.Добавить();
			Если Стр <> Неопределено и МассивОбъектов.Найти(Стр.Синоним)=Неопределено Тогда
				МассивОбъектов.Добавить(Стр.Синоним);
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			Иначе	
				НоваяСтрока.Объект    = Строка.Наименование;
				НоваяСтрока.ЕстьИзменения = 1;
			КонецЕсли;
			НоваяСтрока.Родитель      = "";
			НоваяСтрока.УИ            = Родитель;
			НоваяСтрока.ИндексСтроки  = СравнениеОбъектовРолей.Строки.Индекс(Строка);;
			Если Подч > 0 Тогда
				НоваяСтрока.ЭтоГруппа = Истина;
			КонецЕсли;
		//если у самой строки флажка не стоит, но стоит флажок у подчиненных строк - обнуляем для них поле родителя 
		//(чтобы они корректно выводились в отчет)
		ИначеЕсли Подч > 0  ИЛИ СтрокаНужна=Истина Тогда
			ВерхняяСтрокаНужна=Истина;
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель = "";
			НоваяЗапись.УИ = Родитель;
			НоваяЗапись.ЭтоГруппа = Истина;
			НоваяЗапись.ЕстьИзменения=1;
		КонецЕсли;
	КонецЦикла;
	
	УбратьИзТаблицыПравЛишниеКолонки();
	
	//перестроим таблицу РЛС
	ТаблицаРЛС.Очистить();
	Для каждого Эл Из МассивОбъектов Цикл
		СтруктураОтбора = Новый Структура("Синоним",Эл);
		СтрокиРЛС = ПолнаяТаблицаРЛС.НайтиСтроки(СтруктураОтбора);
		Для каждого РЛС Из СтрокиРЛС Цикл
			НовСтрока = ТаблицаРЛС.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,РЛС);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереборДляПерестройкиСравнения(Строка,Родитель,Род,МассивОбъектов,ВерхняяСтрокаНужна)
	
	//перебираем строки ветки дерева значений
	Для каждого пр Из Строка.Строки Цикл
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),пр.Наименование);
		//Определим, является ли строка группой
		Подч=0;
		СтрокаНужна = Ложь;
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в таблице прав и является ли эта строка группой)
		ПереборДляПерестройкиСравнения(пр,РодительПодч,Подч,МассивОбъектов,СтрокаНужна);
		//если у строки стоит флажок, значит, ее нужно занести в таблицу прав
		Если пр.Пометка = Истина Тогда
			//находим в полной таблице прав строки, соответствующие синониму строки дерева метаданных
			МассивНужныхСтрок= ПолнаяТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",пр.Синоним));
			//разбираемся, что нам делать с массивом найденных строк - добавляем данные по ним в таблицу прав
			НайтиВТаблицеПравНужнуюСтроку(МассивНужныхСтрок,МассивОбъектов,РодительПодч,Родитель,Род,Подч, пр,Строка);
		//если у самой строки флажка не стоит, но стоит флажок у подчиненных строк - 
		//все равно добавляем эту строку в отчет, чтобы прослеживалась иерархия 
		ИначеЕсли Подч > 0  ИЛИ СтрокаНужна=Истина Тогда
			ВерхняяСтрокаНужна=Истина;
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель = Родитель;
			НоваяЗапись.УИ = РодительПодч;
			НоваяЗапись.ЭтоГруппа = Истина;
			НоваяЗапись.ЕстьИзменения=1;
			НоваяЗапись.ИндексСтроки=Строка.Строки.Индекс(пр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ДЕРЕВА ОБЪЕКТОВ В РЕЖИМЕ СРАВНЕНИЯ
//==============================================================================================================================================

Процедура ПостроитьДеревоСравненияОбъектов(ИспользоватьРЛС,МассивНеопределенныхСтрок);
	
	Если ВсеПраваПоУмолчанию<>ВсеПраваПоУмолчаниюВтораяРоль Тогда
		ЗначениеИзмененийПоУмолчанию = "Разные";
	ИначеЕсли ВсеПраваПоУмолчанию=Истина Тогда
		ЗначениеИзмененийПоУмолчанию = "Все разрешено";
	Иначе
		ЗначениеИзмененийПоУмолчанию = "Все запрещено";
	КонецЕсли;
	
	СтрокаНужна = Ложь;
	РЛСНужно = Ложь;
	
	//параллельно будем строить дерево дополнения
	СравнениеОбъектовРолей.Колонки.Добавить("СсылкаДополнения");
	ДеревоДополнения = СравнениеОбъектовРолей.Скопировать();
	ДеревоДополнения.Колонки.Добавить("Дополнено",Новый ОписаниеТипов("Булево"));
	ДеревоДополнения.Колонки.Добавить("ЕстьИзмененияДополнения");

	Для каждого ТекущаяСтрока из Дерево.Строки Цикл
		
		СтрокаСравнения = ДеревоДляСравнения.Строки[0];
		
		НоваяСтрока=СравнениеОбъектовРолей.Строки.Добавить();
		НоваяСтрока.Наименование         = ТекущаяСтрока.Наименование;
		НоваяСтрока.ПерваяРоль           = ТекущаяСтрока.Наименование;
		НоваяСтрока.ИндексПервойКартинки = ТекущаяСтрока.ИндексКартинки;
		НоваяСтрока.ВтораяРоль           = СтрокаСравнения.Наименование;
		НоваяСтрока.ИндексВторойКартинки = СтрокаСравнения.ИндексКартинки;
		НоваяСтрока.Пометка              = Истина;
		НоваяСтрока.Синоним              = ТекущаяСтрока.Синоним;
		НоваяСтрока.ВидМетаданных        = ТекущаяСтрока.ВидМетаданных;
		
		//строку группировок и строку дополнения нужно связать ссылками
		НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрокаДополнения = ДеревоДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДополнения,НоваяСтрока);
		
		Родитель = СписокУИ.Добавить(Новый УникальныйИдентификатор(),ТекущаяСтрока.Наименование);
		
		ПереборДереваСравнения(ТекущаяСтрока,НоваяСтрока,СтрокаСравнения,СтрокаНужна,Родитель,ИспользоватьРЛС,РЛСНужно,СтрокаДополнения);
		СтрокаКонфигурации = ТаблицаПрав.Найти(ТекущаяСтрока.Синоним,"Синоним");
		Если СтрокаКонфигурации<>Неопределено Тогда
			СтрокаНужна = Истина;
			НоваяСтрока.ЕстьИзменения = СтрокаКонфигурации.ЕстьИзменения;
			СтрокаДополнения.ЕстьИзменения = НоваяСтрока.ЕстьИзменения;
			СтрокаДополнения.ЕстьИзмененияДополнения = СтрокаКонфигурации.ЕстьИзмененияДополнения;
			ТаблицаПрав.Найти(ТекущаяСтрока.Синоним,"Синоним").Родитель = "";
			ТаблицаПрав.Найти(ТекущаяСтрока.Синоним,"Синоним").УИ       = Родитель;
			ТаблицаПрав.Найти(ТекущаяСтрока.Синоним,"Синоним").ИндексСтроки = СравнениеОбъектовРолей.Строки.Индекс(ТекущаяСтрока);
			Если НоваяСтрока.Строки.Количество()>0 Тогда
				ТаблицаПрав.Найти(ТекущаяСтрока.Синоним,"Синоним").ЭтоГруппа=Истина;
			КонецЕсли;
			Если ИспользоватьРЛС <> Ложь И РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС = Истина;
			КонецЕсли;
		Иначе
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель     = "";
			НоваяЗапись.УИ           = Родитель;
			НоваяЗапись.ЭтоГруппа    = Истина;
			НоваяЗапись.Объект       = ТекущаяСтрока.Наименование;
			НоваяЗапись.ИндексСтроки = СравнениеОбъектовРолей.Строки.Индекс(ТекущаяСтрока);
			НоваяСтрока.ЕстьИзменения = 1;
			НоваяЗапись.ЕстьИзменения = 1;
			СтрокаДополнения.ЕстьИзменения = 1;
			СтрокаДополнения.ЕстьИзмененияДополнения = ЗначениеИзмененийПоУмолчанию;
			Если ИспользоватьРЛС <> Ложь И РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//данные по неопределенным строкам тоже выведем в дерево объектов
	Если МассивНеопределенныхСтрок.Количество()>0 Тогда
		СтрокаНеопределенныхСтрок = НоваяСтрока.Строки.Добавить();
		СтрокаНеопределенныхСтрок.ПерваяРоль = "Удаленные объекты метаданных";
		СтрокаНеопределенныхСтрок.ИндексПервойКартинки = 43;
		СтрокаНеопределенныхСтрок.ВтораяРоль = "Удаленные объекты метаданных";
		СтрокаНеопределенныхСтрок.ИндексВторойКартинки = 43;
		СтрокаНеопределенныхСтрок.Наименование = "Удаленные объекты метаданных";
		СтрокаНеопределенныхСтрок.Пометка = Истина;
		СтрокаНеопределенныхСтрок.ЕстьИзменения = 1;
		СтрокаНеопределенныхСтрок.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрокаДополненияНеопределенныхСтрок = СтрокаДополнения.Строки.Добавить();
		СтрокаДополненияНеопределенныхСтрок.ЕстьИзмененияДополнения = ЗначениеИзмененийПоУмолчанию;
		ЗаполнитьЗначенияСвойств(СтрокаДополненияНеопределенныхСтрок,СтрокаНеопределенныхСтрок);
		//
		РодительНеопределенныхСтрок = СписокУИ.Добавить(Новый УникальныйИдентификатор(),"Удаленные объекты метаданных");
		ЗаписьНеопределенныхСтрок = ТаблицаПрав.Добавить();
		ЗаписьНеопределенныхСтрок.Родитель = Родитель;
		ЗаписьНеопределенныхСтрок.УИ = РодительНеопределенныхСтрок;
		ЗаписьНеопределенныхСтрок.ЭтоГруппа = Истина;
		ЗаписьНеопределенныхСтрок.ЕстьИзменения = 1;
		ЗаписьНеопределенныхСтрок.ИндексСтроки = 50;
		//Важно первыми обработать строки объектов, а строки стандартных реквизитов - потом
		//сортируем массив неопределенных строк
		Для Сч1 = 0 По МассивНеопределенныхСтрок.ВГраница()-1 Цикл
			Для Сч2 = 0 По МассивНеопределенныхСтрок.ВГраница()-Сч1-1 Цикл
				Если МассивНеопределенныхСтрок[Сч2].ОбъектСРеквизитами <> "Истина" и МассивНеопределенныхСтрок[Сч2].ОбъектСРеквизитами<>МассивНеопределенныхСтрок[Сч2+1].ОбъектСРеквизитами Тогда
					мВрем = МассивНеопределенныхСтрок[Сч2];
					МассивНеопределенныхСтрок[Сч2] = МассивНеопределенныхСтрок[Сч2+1];
					МассивНеопределенныхСтрок[Сч2+1] = мВрем;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Счетчик = 1;
		Для каждого Вр Из МассивНеопределенныхСтрок Цикл
			Если Вр.ОбъектСРеквизитами = "Истина" Тогда
				НоваяСтрока = СтрокаНеопределенныхСтрок.Строки.Добавить();
				ВыставитьСвойстваСтрокиСравненияНеопределенныхОбъектов(Вр,НоваяСтрока,Вр.Синоним);
				НоваяСтрока.Пометка              = Истина;
				НоваяСтрока.Наименование         = Вр.Синоним;
				НоваяСтрока.Синоним              = Вр.Синоним;
				Вр.ИндексСтроки = Счетчик;
				Счетчик = Счетчик+1;
				//строку группировок и строку дополнения нужно связать ссылками
				НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
				//аналогично выставим данные для строки дополнения
				СтрокаДополнения = СтрокаДополненияНеопределенныхСтрок.Строки.Добавить();
				СтрокаДополнения.ЕстьИзмененияДополнения = Вр.ЕстьИзмененияДополнения;
				ЗаполнитьЗначенияСвойств(СтрокаДополнения,НоваяСтрока);
				//	
				Вр.Родитель = РодительНеопределенныхСтрок;									//чтобы выводилось в отчет
				Вр.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.Синоним);  //чтобы выводилось в отчет
			Иначе
				СтрокаДерева = СтрокаНеопределенныхСтрок.Строки.Найти(Вр.Синоним,"Синоним");
				Если СтрокаДерева=Неопределено Тогда
					СтрокаДерева = СтрокаНеопределенныхСтрок.Строки.Добавить();
					ВыставитьСвойстваСтрокиСравненияНеопределенныхОбъектов(Вр,СтрокаДерева,Вр.Синоним);
					СтрокаДерева.Пометка       = Истина;
					СтрокаДерева.Наименование  = Вр.Синоним;
					СтрокаДерева.Синоним       = Вр.Синоним;
					СтрокаДерева.ЕстьИзменения = 1;
					//строку группировок и строку дополнения нужно связать ссылками
					СтрокаДерева.СсылкаДополнения = Новый УникальныйИдентификатор();
					//аналогично выставим данные для строки дополнения
					СтрокаДереваДополнения = СтрокаДополненияНеопределенныхСтрок.Строки.Добавить();
					СтрокаДереваДополнения.ЕстьИзмененияДополнения = Вр.ЕстьИзмененияДополнения;
					ЗаполнитьЗначенияСвойств(СтрокаДереваДополнения,СтрокаДерева);
					//
					ОбъектНеопределенныхСтрок = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.Синоним);
					СтрокаРодителяНеопределеннойСтроки = ТаблицаПрав.Добавить();
					СтрокаРодителяНеопределеннойСтроки.Синоним = Вр.Синоним;
					СтрокаРодителяНеопределеннойСтроки.ОбъектСРеквизитами = "Истина";
					СтрокаРодителяНеопределеннойСтроки.Родитель = РодительНеопределенныхСтрок;
					СтрокаРодителяНеопределеннойСтроки.УИ = ОбъектНеопределенныхСтрок;
					СтрокаРодителяНеопределеннойСтроки.ЭтоГруппа = Истина;
					СтрокаРодителяНеопределеннойСтроки.ЕстьИзменения = 1;
					СтрокаРодителяНеопределеннойСтроки.ИндексСтроки = Счетчик;
					Счетчик = Счетчик + 1;
				Иначе
					СтрокаРодителяНеопределеннойСтроки = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним,ОбъектСРеквизитами",Вр.Синоним,"Истина"))[0];
					СтрокаРодителяНеопределеннойСтроки.ЭтоГруппа = Истина;
					СтрокаДереваДополнения = СтрокаДополненияНеопределенныхСтрок.Строки.Найти(Вр.Синоним,"Синоним");
				КонецЕсли;
				НоваяСтрока = СтрокаДерева.Строки.Добавить();
				ВыставитьСвойстваСтрокиСравненияНеопределенныхОбъектов(Вр,НоваяСтрока,Вр.ОбъектСРеквизитами);
				НоваяСтрока.Пометка              = Истина;
				НоваяСтрока.Наименование         = Вр.ОбъектСРеквизитами;
				НоваяСтрока.Синоним              = Вр.Синоним;
				//строку группировок и строку дополнения нужно связать ссылками
				НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
				//аналогично выставим данные для строки дополнения
				СтрокаДополненияНеопределенныхСтандартныхРеквизитов = СтрокаДереваДополнения.Строки.Добавить();
				СтрокаДополненияНеопределенныхСтандартныхРеквизитов.ЕстьИзмененияДополнения = Вр.ЕстьИзмененияДополнения;
				ЗаполнитьЗначенияСвойств(СтрокаДополненияНеопределенныхСтандартныхРеквизитов,НоваяСтрока);
				//	
				Вр.Родитель = СтрокаРодителяНеопределеннойСтроки.УИ;									//чтобы выводилось в отчет
				Вр.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Вр.ОбъектСРеквизитами);  //чтобы выводилось в отчет
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереборДереваСравнения(СтрокаДерева,СтрокаНовогоДерева,СтрокаСравнения,ВерхняяСтрокаНужна,Родитель,ИспользоватьРЛС,ВерхнееРЛСНужно,СтрокаДополнения)
	
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		//на каждом витке цикла обнуляем ключевые переменные
		НоваяСтрокаСравнения = Неопределено;
		СтрокаНужна = Ложь;
		РЛСНужно = Ложь;
		//есть ряд объектов, которые не участвуют в дереве ролей
		Если ОбъектуНеНазначаютПрав(СтрокаДерева,Стр)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//
		ОбработкаПрерыванияПользователя();
		//добавляем строку в дерево метаданных роли
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		//Заполняем основные свойства строки приемника
		НоваяСтрока.Пометка              	= Истина;
		НоваяСтрока.Наименование 			= Стр.Наименование;
		НоваяСтрока.Синоним 				= Стр.Синоним;
		Если Стр.Объект="О" или Стр.Объект = "РО" Тогда
			НоваяСтрока.ВидМетаданных = Стр.ВидМетаданных;
		КонецЕсли;
		//заполняем данные по первой роли
		НоваяСтрока.ПерваяРоль              = Стр.Наименование;
		НоваяСтрока.ИндексПервойКартинки    = Стр.ИндексКартинки;
		//заполняем данные по второй роли		
		Если  СтрокаСравнения <> Неопределено тогда
			НоваяСтрокаСравнения = СтрокаСравнения.Строки.Найти(Стр.Синоним,"Синоним");
			Если НоваяСтрокаСравнения <> Неопределено тогда
				НоваяСтрока.ВтораяРоль           = НоваяСтрокаСравнения.Наименование;
				НоваяСтрока.ИндексВторойКартинки = НоваяСтрокаСравнения.ИндексКартинки;
			Иначе                            //"удаленные" объекты
				НоваяСтрока.ВтораяРоль           = "<Отсутствует>";
				НоваяСтрока.ИндексВторойКартинки = 117;
				НоваяСтрока.ЕстьИзменения        = 0;
			КонецЕсли;
		Иначе                                 //объекты, родители которых "удалены"
			НоваяСтрока.ВтораяРоль           = "<Отсутствует>";
			НоваяСтрока.ИндексВторойКартинки = 117;
			НоваяСтрока.ЕстьИзменения        = 0;
		КонецЕсли;
		
		//строку группировок и строку дополнения нужно связать ссылками, чтобы при переключении режимов корректно проставлялись флажки
		НоваяСтрока.СсылкаДополнения = Новый УникальныйИдентификатор();
		//аналогично выставим данные для строки дополнения
		СтрДополнения = СтрокаДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДополнения,НоваяСтрока);
		
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Стр.Наименование);
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в дереве объектов)
		ПереборДереваСравнения(стр,НоваяСтрока,НоваяСтрокаСравнения,СтрокаНужна,РодительПодч,ИспользоватьРЛС,РЛСНужно,СтрДополнения);
		//если в таблице прав присутствуют данные по анализируемой строке  - 
		//заполним поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		Если ТаблицаПрав.Найти(Стр.Синоним,"Синоним")<>Неопределено И Стр.Наименование<>"Общие" Тогда
			//заполнение ключевых переменных
			ВерхняяСтрокаНужна = Истина;
			СтрокаНужна = Истина;
			//проанализировать наличие РЛС у объекта
			УстановитьПризнакРЛС(Стр,НоваяСтрока,РЛСНужно,ВерхнееРЛСНужно,ИспользоватьРЛС,СтрДополнения);
			//находим в таблице прав строки, соответствующие синониму строки дерева метаданных
			МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",Стр.Синоним));
			//для найденных строк заполняем поля Родитель, УИ, ИндексСтроки и ЭтоГруппа
			//анализируем права на стандартные реквизиты для объекта строки дерева метаданных - их тоже выводим в дерево
			ОбработатьСтрокиПравДляПостроенияДереваСравнения(МассивСтрок,стр,НоваяСтрока,Родитель,РодительПодч,СтрДополнения);
		ИначеЕсли СтрокаНужна = Ложь Тогда     //если в таблице прав отсутствуют данные по этой и подчиненным строкам
			//в дереве разбора эта строка не нужна
			СтрокаНовогоДерева.Строки.Удалить(НоваяСтрока);
			//в дереве дополнения строку выводим
			СтрДополнения.Дополнено = Истина;
			СтрДополнения.ЕстьИзменения = 1;
			Если Стр.Объект="О" Тогда
				СтрДополнения.ЕстьИзмененияДополнения=ЗначениеИзмененийПоУмолчанию;
			КонецЕсли;
			СтрДополнения.Пометка = Ложь;
		Иначе                                   //если в таблице прав есть данные по подчиненным строкам этой строки
			//поскольку данных по правам этой строки нет - то она выводится "справочно" - изменения по этой строке отсутствуют
			Если Стр.Объект<>"О" Тогда
				НоваяСтрока.ВидМетаданных = "";
				СтрДополнения.ВидМетаданных="";
			КонецЕсли;
			ВерхняяСтрокаНужна = Истина;
			НоваяСтрока.ЕстьИзменения = 1;
			СтрДополнения.ЕстьИзменения = 1;
			//в таблицу прав добавляются данные по полям поля Родитель, УИ, ИндексСтроки, Объект и ЭтоГруппа для правильного вывода иерархии в СКД
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель     = Родитель;
			НоваяЗапись.УИ           = РодительПодч;
			НоваяЗапись.Объект       = стр.Наименование;
			НоваяЗапись.ИндексСтроки = стр.Родитель.Строки.Индекс(Стр);
			НоваяЗапись.ЭтоГруппа    = Истина;
			НоваяЗапись.ЕстьИзменения = 1;
			//проанализировать наличие РЛС у объекта
			Если ИспользоватьРЛС <> Ложь и РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС 	= Истина;
				СтрДополнения.РЛС 	= Истина;
				ВерхнееРЛСНужно 	= Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	//проверим подчиненные строки строки сравнения
	//если среди них есть "добавленные" объекты метаданных - выведем их в дерево соответствующим образом
	Если СтрокаСравнения <> Неопределено  тогда
		Для каждого Пр из СтрокаСравнения.Строки цикл
			СтрНужна=Ложь;
			Если СтрокаДерева.Строки.Найти(Пр.Синоним,"Синоним") = Неопределено тогда //"добавленные" строки
				Если ОбъектуНеНазначаютПрав(СтрокаСравнения,Пр)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				//добавляем строку в дерево метаданных роли
				НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
				НоваяСтрока.Пометка              = Истина;
				НоваяСтрока.Наименование         = Пр.Наименование;
				НоваяСтрока.Синоним              = Пр.Синоним;
				НоваяСтрока.ВидМетаданных        = Пр.ВидМетаданных;
				НоваяСтрока.ПерваяРоль           = "<Отсутствует>"; 				
				НоваяСтрока.ИндексПервойКартинки = 117;
				НоваяСтрока.ЕстьИзменения        = 3;
				НоваяСтрока.ВтораяРоль           = Пр.Наименование;
				НоваяСтрока.ИндексВторойКартинки = Пр.ИндексКартинки;
				//строку группировок и строку дополнения нужно связать ссылками, чтобы при переключении режимов корректно проставлялись флажки
				НоваяСтрока.СсылкаДополнения     = Новый УникальныйИдентификатор();
				
				//аналогично выставим данные для строки дополнения
				СтрДополнения = СтрокаДополнения.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрДополнения,НоваяСтрока);
				
				РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),Пр.Наименование);
				ОбратныйПеребор(Пр,НоваяСтрока,СтрНужна,РодительПодч,ИспользоватьРЛС,СтрДополнения);	
				Если ТаблицаПрав.Найти(Пр.Синоним,"Синоним")<>Неопределено Тогда
					//заполнение ключевых переменных
					ВерхняяСтрокаНужна = Истина;
					СтрокаНужна = Истина;
					//проанализировать наличие РЛС у объекта
					УстановитьПризнакРЛС(Пр,НоваяСтрока,РЛСНужно,ВерхнееРЛСНужно,ИспользоватьРЛС,СтрДополнения);
					//находим в таблице прав строки, соответствующие синониму строки дерева метаданных
					МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",Пр.Синоним));
					//для найденных строк заполняем поля Родитель, УИ, ИндексСтроки и ЭтоГруппа
					//анализируем права на стандартные реквизиты для объекта строки дерева метаданных - их тоже выводим в дерево
					ОбработатьСтрокиПравДляПостроенияДереваСравненияДобавленные(МассивСтрок,Пр,НоваяСтрока,Родитель,РодительПодч,СтрДополнения);
				ИначеЕсли СтрНужна=Ложь Тогда             //если в таблице прав отсутствуют данные по этой и подчиненным строкам
					//в дереве разбора эта строка не нужна
					СтрокаНовогоДерева.Строки.Удалить(НоваяСтрока);
					//в дереве дополнения строку выводим
					СтрДополнения.Дополнено = Истина;
					СтрДополнения.Пометка = Ложь;
				Иначе                                  //если в таблице прав есть данные по подчиненным строкам этой строки 
					Если Пр.Объект<>"О" Тогда
						СтрДополнения.ВидМетаданных="";
					КонецЕсли;
					ВерхняяСтрокаНужна = Истина;	
					//в таблицу прав добавляются данные по полям поля Родитель, УИ, ИндексСтроки, Объект и ЭтоГруппа для правильного вывода иерархии в СКД
					НоваяЗапись = ТаблицаПрав.Добавить();
					НоваяЗапись.Родитель     = Родитель;
					НоваяЗапись.УИ           = РодительПодч;
					НоваяЗапись.Объект       = Пр.Наименование;
					НоваяЗапись.ИндексСтроки = Пр.Родитель.Строки.Индекс(Пр);
					НоваяЗапись.ЭтоГруппа    = Истина;
					НоваяЗапись.ЕстьИзменения = 1;
					//проанализировать наличие РЛС у объекта
					Если ИспользоватьРЛС <> Ложь и РЛСНужно = Истина Тогда
						НоваяСтрока.РЛС 	= Истина;
						СтрДополнения.РЛС 	= Истина;
						ВерхнееРЛСНужно 	= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ВыставитьСвойстваСтрокиСравненияНеопределенныхОбъектов(Вр,НоваяСтрока,НазваниеЗаполнения);
	
	Если Вр.Объект = Неопределено Тогда
		НоваяСтрока.ПерваяРоль           = "<Отсутствует>";
		НоваяСтрока.ИндексПервойКартинки = 117;
		НоваяСтрока.ВтораяРоль           = НазваниеЗаполнения;
		НоваяСтрока.ИндексВторойКартинки = 43;
		НоваяСтрока.ЕстьИзменения        = 3;
	ИначеЕсли Вр.Объект1 = Неопределено Тогда
		НоваяСтрока.ПерваяРоль           = НазваниеЗаполнения;
		НоваяСтрока.ИндексПервойКартинки = 43;
		НоваяСтрока.ВтораяРоль           = "<Отсутствует>";
		НоваяСтрока.ИндексВторойКартинки = 117;
		НоваяСтрока.ЕстьИзменения        = 0;
	Иначе
		НоваяСтрока.ПерваяРоль           = НазваниеЗаполнения;
		НоваяСтрока.ИндексПервойКартинки = 43;
		НоваяСтрока.ВтораяРоль           = НазваниеЗаполнения;
		НоваяСтрока.ИндексВторойКартинки = 43;
		НоваяСтрока.ЕстьИзменения        = Вр.ЕстьИзменения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокиПравДляПостроенияДереваСравненияДобавленные(МассивСтрок,Пр,НоваяСтрока,Родитель,РодительПодч,СтрДополнения)
	
	Если МассивСтрок.Количество()=0 Тогда
		Возврат;
		//проверим, присутствуют ли среди найденных строк данные по стандартным реквизитам
	ИначеЕсли МассивСтрок.Количество()>1 или МассивСтрок[0].ОбъектСРеквизитами<>"Истина" Тогда
		//сначала проверим, есть ли в роли права самого объекта метаданных (не просто его стандартного реквизита)
		НоваяЗапись = НайтиСтрокуОбъектаМетаданных(МассивСтрок,НоваяСтрока,Пр,СтрДополнения);
		//заполним в таблице прав для строки объекта метаданных 
		//поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		НоваяЗапись.Родитель     = Родитель;
		НоваяЗапись.УИ           = РодительПодч;
		НоваяЗапись.ЭтоГруппа    = Истина;
		НоваяЗапись.ИндексСтроки = Пр.Родитель.Строки.Индекс(Пр);
		
		//создадим в таблице прав строку группы стандартных реквизитов
		ЗаписьСтандартныхРеквизитов = СписокУИ.Добавить(Новый УникальныйИдентификатор(),"Стандартные реквизиты");
		НоваяЗапись = ТаблицаПрав.Добавить();
		НоваяЗапись.Родитель      = РодительПодч;
		НоваяЗапись.УИ            = ЗаписьСтандартныхРеквизитов;
		НоваяЗапись.ЭтоГруппа     = Истина;
		НоваяЗапись.ИндексСтроки  = 10;
		НоваяЗапись.ЕстьИзменения = 1;
		
		//в дереве метаданных тоже нужна строка группы стандартных реквизитов
		ПодчСтр = НоваяСтрока.Строки.Добавить();
		ПодчСтр.Наименование         = "Стандартные реквизиты";
		ПодчСтр.ПерваяРоль           = "<Отсутствует>";
		ПодчСтр.ВтораяРоль           = "Стандартные реквизиты";
		ПодчСтр.ИндексПервойКартинки = 117;
		ПодчСтр.ИндексВторойКартинки = 95;
		ПодчСтр.Пометка              = Истина;
		ПодчСтр.ЕстьИзменения        = 3;
		ПодчСтр.СсылкаДополнения     = Новый УникальныйИдентификатор();
		//то же самое для строки дополнения
		ПодчСтрДополнения = СтрДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ПодчСтрДополнения,ПодчСтр);
		
		//опять делаем цикл по массиву найденных строк таблицы прав, 
		//чтобы вывести в дерево метаданных информацию о стандартных реквизитах, на которые заданы права
		Для каждого ур Из МассивСтрок Цикл
			Если ур.ОбъектСРеквизитами <> "Истина" Тогда
				СтандРеквизит = ПодчСтр.Строки.Добавить();
				СтандРеквизит.Наименование         = ур.ОбъектСРеквизитами;
				СтандРеквизит.Синоним              = НоваяСтрока.Синоним;
				СтандРеквизит.ВидМетаданных        = "СтандартныйРеквизит";
				СтандРеквизит.ЕстьИзменения        = 3;
				СтандРеквизит.Пометка              = Истина;
				СтандРеквизит.ПерваяРоль           = "<Отсутствует>";
				СтандРеквизит.ИндексПервойКартинки = 117;
				СтандРеквизит.ВтораяРоль           = ур.ОбъектСРеквизитами;
				СтандРеквизит.ИндексВторойКартинки = 96;
				СтандРеквизит.СсылкаДополнения     = Новый УникальныйИдентификатор();
				//то же самое для строки дополнения
				СтандРеквизитДополнения = ПодчСтрДополнения.Строки.Добавить();
				СтандРеквизитДополнения.ЕстьИзмененияДополнения = ур.ЕстьИзмененияДополнения;
				ЗаполнитьЗначенияСвойств(СтандРеквизитДополнения,СтандРеквизит);
				//также заполняем поля Родитель и УИ для стандартного реквизита в таблице прав
				//для правильного вывода иерархии в СКД
				ур.Родитель = ЗаписьСтандартныхРеквизитов;
				ур.УИ       = СписокУИ.Добавить(Новый УникальныйИдентификатор(),ур.ОбъектСРеквизитами);
			КонецЕсли;
		КонецЦикла;
	//если найденная строка одна и она не является стандартным реквизитом, то просто заполняем у нее поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД	
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		СтрокаОбъекта = МассивСтрок[0];
		СтрокаОбъекта.Родитель     = Родитель;
		СтрокаОбъекта.УИ           = РодительПодч;
		СтрокаОбъекта.ИндексСтроки = Пр.Родитель.Строки.Индекс(Пр);
		Если НоваяСтрока.Строки.Количество()>0 Тогда
			СтрокаОбъекта.ЭтоГруппа = Истина
		КонецЕсли;
		//если в таблице прав в строке указано, что объект имеет записи РЛС - поставим в дереве метаданных отметку об этом
		НоваяСтрока.РЛС              = СтрокаОбъекта.РЛС;
		НоваяСтрока.ЕстьИзмененияРЛС = СтрокаОбъекта.ЕстьИзмененияРЛС;
		СтрДополнения.РЛС            = НоваяСтрока.РЛС;
		СтрДополнения.ЕстьИзмененияРЛС        = НоваяСтрока.ЕстьИзмененияРЛС;
		СтрДополнения.ЕстьИзмененияДополнения = СтрокаОбъекта.ЕстьИзмененияДополнения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбратныйПеребор(СтрокаДерева,СтрокаНовогоДерева,ВерхняяСтрокаНужна,Родитель,ИспользоватьРЛС,СтрокаДополнения)	
	
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		
		стрНужна=Ложь;
		
		Если ОбъектуНеНазначаютПрав(СтрокаДерева,Стр)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		//добавляем строку в дерево метаданных роли
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.Пометка              	= Истина;
		НоваяСтрока.Наименование 			= Стр.Наименование;
		НоваяСтрока.Синоним 				= Стр.Синоним;
		НоваяСтрока.ВидМетаданных 			= Стр.ВидМетаданных;
		НоваяСтрока.ПерваяРоль           	= "<Отсутствует>";
		НоваяСтрока.ИндексПервойКартинки 	= 117;
		НоваяСтрока.ЕстьИзменения        	= 3;
		НоваяСтрока.ВтораяРоль           	= Стр.Наименование;
		НоваяСтрока.ИндексВторойКартинки 	= Стр.ИндексКартинки;
		//строку группировок и строку дополнения нужно связать ссылками, чтобы при переключении режимов корректно проставлялись флажки
		НоваяСтрока.СсылкаДополнения         = Новый УникальныйИдентификатор();
		
		//аналогично выставим данные для строки дополнения
		СтрДополнения = СтрокаДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДополнения,НоваяСтрока);
				
		//установим УИ для данных по текущей строке в таблице прав
		//(нужен для построения иерархии в СКД)
		РодительПодч = СписокУИ.Добавить(Новый УникальныйИдентификатор(),стр.Наименование);
		//рекурсивно обработаем подчиненные строки
		//(узнаем, нужна ли текущая строка в дереве объектов)
		ОбратныйПеребор(стр,НоваяСтрока,стрНужна,РодительПодч,ИспользоватьРЛС,СтрДополнения);	
		//если в таблице прав присутствуют данные по анализируемой строке  - 
		//заполним поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		СтрокаОбъекта = ТаблицаПрав.Найти(стр.Синоним,"Синоним");
		Если СтрокаОбъекта<>Неопределено Тогда
			//заполнение ключевых переменных
			ВерхняяСтрокаНужна = Истина;
			СтрокаНужна = Истина;
			//проанализировать наличие РЛС у объекта
			Если ИспользоватьРЛС<>Ложь И СтрокаОбъекта.РЛС=Истина Тогда
				РЛСНужно        = Истина;
				ВерхнееРЛСНужно = Истина;
				НоваяСтрока.РЛС = Истина;
				НоваяСтрока.ЕстьИзмененияРЛС = Истина;
				СтрДополнения.РЛС = Истина;
				СтрДополнения.ЕстьИзмененияРЛС = Истина;
			КонецЕсли;
			СтрДополнения.ЕстьИзмененияДополнения = СтрокаОбъекта.ЕстьИзмененияДополнения;
			
			//находим в таблице прав строки, соответствующие синониму строки дерева метаданных
			МассивСтрок = ТаблицаПрав.НайтиСтроки(Новый Структура("Синоним",стр.Синоним));
			//принимаем допущение, что стандартных реквизитов нам здесь не попадется 
			Если МассивСтрок.Количество()=1 Тогда
				СтрокаОбъекта = МассивСтрок[0];
				СтрокаОбъекта.Родитель = Родитель;
				СтрокаОбъекта.УИ = РодительПодч;
				СтрокаОбъекта.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
				Если НоваяСтрока.Строки.Количество()>0 Тогда
					СтрокаОбъекта.ЭтоГруппа = Истина
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНужна=Ложь Тогда             //если в таблице прав отсутствуют данные по этой и подчиненным строкам
			//в дереве разбора эта строка не нужна
			СтрокаНовогоДерева.Строки.Удалить(НоваяСтрока);
			//в дереве дополнения строку выводим
			СтрДополнения.Дополнено = Истина;
			СтрДополнения.ЕстьИзменения = 1;
			СтрДополнения.Пометка = Ложь;
		Иначе                                  //если в таблице прав есть данные по подчиненным строкам этой строки 
			Если Стр.Объект<>"О" Тогда
				СтрДополнения.ВидМетаданных="";
			КонецЕсли;
			ВерхняяСтрокаНужна = Истина;
			//в таблицу прав добавляются данные по полям поля Родитель, УИ, ИндексСтроки, Объект и ЭтоГруппа для правильного вывода иерархии в СКД
			НоваяЗапись = ТаблицаПрав.Добавить();
			НоваяЗапись.Родитель     = Родитель;
			НоваяЗапись.УИ           = РодительПодч;
			НоваяЗапись.Объект       = стр.Наименование;
			НоваяЗапись.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
			НоваяЗапись.ЭтоГруппа    = Истина;
			НоваяЗапись.ЕстьИзменения = 1;
			//проанализировать наличие РЛС у объекта
			Если ИспользоватьРЛС <> Ложь и РЛСНужно = Истина Тогда
				НоваяСтрока.РЛС = Истина;
				СтрДополнения.РЛС = Истина;
				ВерхнееРЛСНужно = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПризнакРЛС(Стр,НоваяСтрока,РЛСНужно,ВерхнееРЛСНужно,ИспользоватьРЛС,СтрДополнения);
	Если ИспользоватьРЛС<>Ложь И ТаблицаПрав.Найти(Стр.Синоним,"Синоним").РЛС=Истина Тогда
		НоваяСтрока.РЛС = Истина;
		СтрДополнения.РЛС = Истина;
		РЛСНужно        = Истина;
		ВерхнееРЛСНужно = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСтрокиПравДляПостроенияДереваСравнения(МассивСтрок,стр,НоваяСтрока,Родитель,РодительПодч,СтрДополнения)
	
	Если МассивСтрок.Количество()=0 Тогда
		Возврат;
		//проверим, присутствуют ли среди найденных строк данные по стандартным реквизитам
	ИначеЕсли МассивСтрок.Количество()>1 или МассивСтрок[0].ОбъектСРеквизитами<>"Истина" Тогда
		//сначала проверим, есть ли в роли права самого объекта метаданных (не просто его стандартного реквизита)
		НоваяЗапись = НайтиСтрокуОбъектаМетаданных(МассивСтрок,НоваяСтрока,стр,СтрДополнения);
		//заполним в таблице прав для строки объекта метаданных 
		//поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД
		НоваяЗапись.Родитель     = Родитель;
		НоваяЗапись.УИ           = РодительПодч;
		НоваяЗапись.ЭтоГруппа    = Истина;
		НоваяЗапись.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
		
		//создадим в таблице прав строку группы стандартных реквизитов
		ЗаписьСтандартныхРеквизитов = СписокУИ.Добавить(Новый УникальныйИдентификатор(),"Стандартные реквизиты");
		НоваяЗапись = ТаблицаПрав.Добавить();
		НоваяЗапись.Родитель     = РодительПодч;
		НоваяЗапись.УИ           = ЗаписьСтандартныхРеквизитов;
		НоваяЗапись.ЭтоГруппа    = Истина;
		НоваяЗапись.ИндексСтроки = 10;
		НоваяЗапись.ЕстьИзменения = 1;
		
		//в дереве метаданных тоже нужна строка группы стандартных реквизитов
		ПодчСтр = НоваяСтрока.Строки.Добавить();
		ПодчСтр.Наименование   = "Стандартные реквизиты";
		ПодчСтр.ПерваяРоль     = "Стандартные реквизиты";
		ПодчСтр.ВтораяРоль = "Стандартные реквизиты";
		ПодчСтр.ИндексПервойКартинки = 95;
		ПодчСтр.ИндексВторойКартинки = 95;
		ПодчСтр.Пометка        = Истина;
		ПодчСтр.ЕстьИзменения = 1;
		ПодчСтр.СсылкаДополнения = Новый УникальныйИдентификатор();
		//то же самое для строки дополнения
		ПодчСтрДополнения = СтрДополнения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ПодчСтрДополнения,ПодчСтр);
		
		//опять делаем цикл по массиву найденных строк таблицы прав, 
		//чтобы вывести в дерево метаданных информацию о стандартных реквизитах, на которые заданы права
		Для каждого др Из МассивСтрок Цикл
			Если др.ОбъектСРеквизитами <> "Истина" Тогда
				СтандРеквизит = ПодчСтр.Строки.Добавить();
				СтандРеквизит.Наименование         = др.ОбъектСРеквизитами;
				СтандРеквизит.Синоним              = НоваяСтрока.Синоним;
				СтандРеквизит.ВидМетаданных        = "СтандартныйРеквизит";
				СтандРеквизит.ЕстьИзменения        = др.ЕстьИзменения;
				СтандРеквизит.Пометка              = Истина;
				СтандРеквизит.ПерваяРоль           = др.ОбъектСРеквизитами;
				СтандРеквизит.ИндексПервойКартинки = 96;
				СтандРеквизит.ВтораяРоль           = др.ОбъектСРеквизитами;
				СтандРеквизит.ИндексВторойКартинки = 96;
				СтандРеквизит.СсылкаДополнения = Новый УникальныйИдентификатор();
				//то же самое для строки дополнения
				СтандРеквизитДополнения = ПодчСтрДополнения.Строки.Добавить();
				СтандРеквизитДополнения.ЕстьИзмененияДополнения = др.ЕстьИзмененияДополнения;
				ЗаполнитьЗначенияСвойств(СтандРеквизитДополнения,СтандРеквизит);
				//также заполняем поля Родитель и УИ для стандартного реквизита в таблице прав
				//для правильного вывода иерархии в СКД
				др.Родитель = ЗаписьСтандартныхРеквизитов;
				др.УИ       = СписокУИ.Добавить(Новый УникальныйИдентификатор(),др.ОбъектСРеквизитами);
			КонецЕсли;
		КонецЦикла;
	//если найденная строка одна, то просто заполняем у нее поля Родитель, УИ, ИндексСтроки и ЭтоГруппа для правильного вывода иерархии в СКД	
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		СтрокаОбъекта = МассивСтрок[0];
		СтрокаОбъекта.Родитель     = Родитель;
		СтрокаОбъекта.УИ           = РодительПодч;
		СтрокаОбъекта.ИндексСтроки = стр.Родитель.Строки.Индекс(стр);
		Если НоваяСтрока.Строки.Количество()>0 Тогда
			СтрокаОбъекта.ЭтоГруппа = Истина;
		КонецЕсли;
		//если в таблице прав в строке указано, что объект имеет записи РЛС - поставим в дереве метаданных отметку об этом
		НоваяСтрока.ЕстьИзменения 	 = СтрокаОбъекта.ЕстьИзменения;
		НоваяСтрока.ЕстьИзмененияРЛС = СтрокаОбъекта.ЕстьИзмененияРЛС;
		НоваяСтрока.РЛС 			 = СтрокаОбъекта.РЛС;
		СтрДополнения.ЕстьИзменения           = НоваяСтрока.ЕстьИзменения;
		СтрДополнения.ЕстьИзмененияДополнения = СтрокаОбъекта.ЕстьИзмененияДополнения;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСтрокуОбъектаМетаданных(МассивСтрок,НоваяСтрока,стр,СтрДополнения)
	
	Для каждого гр Из МассивСтрок Цикл
		Если гр.ОбъектСРеквизитами="Истина" Тогда
			СтрокаНайдена = гр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//если по самому объекту метаданных в таблице прав информация отсутствуют - 
	//берем данные по свойствам Синоним, Объект, Идентификатор из строки этого объекта в дереве сравнения метаданных
	Если СтрокаНайдена=Неопределено Тогда
		НоваяЗапись = ТаблицаПрав.Добавить();
		Если ТаблицаПрав.Найти(Стр.Идентификатор,"Идентификатор")=Неопределено Тогда
			СтрокаИсточника=ТаблицаПрав.Найти(Стр.Идентификатор,"Идентификатор1");
			НоваяЗапись.Идентификатор = СтрокаИсточника.Идентификатор1;
			НоваяЗапись.Объект = СтрокаИсточника.Объект1;
			НоваяЗапись.Синоним = СтрокаИсточника.Синоним;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяЗапись,Стр,"Синоним,Объект,Идентификатор");
		КонецЕсли;
		НоваяЗапись.ЕстьИзменения = 1;
		НоваяСтрока.ЕстьИзменения = 1;
		СтрДополнения.ЕстьИзменения = 1;
	Иначе
		НоваяЗапись = СтрокаНайдена;
		НоваяСтрока.ЕстьИзменения = СтрокаНайдена.ЕстьИзменения;
		//если в найденной в таблице прав строке указано, что объект имеет записи РЛС - поставим в дереве сравнения отметку об этом
		НоваяСтрока.ЕстьИзмененияРЛС = СтрокаНайдена.ЕстьИзмененияРЛС;
		НоваяСтрока.РЛС = СтрокаНайдена.РЛС;
		СтрДополнения.ЕстьИзмененияДополнения = СтрокаНайдена.ЕстьИзмененияДополнения;
		ЗаполнитьЗначенияСвойств(СтрДополнения,НоваяСтрока,"ЕстьИзменения,ЕстьИзмененияРЛС,РЛС");
	КонецЕсли;
	
	Возврат НоваяЗапись;
	
КонецФункции

//==============================================================================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//==============================================================================================================================================

Процедура ЗаполнитьСписокПрав()
	ВсеПрава = Новый СписокЗначений;
	СоответствиеПрав  =  Новый Соответствие;
	ЭлементСписка = ВсеПрава.Добавить("1c87578f-9e09-4ec0-a991-5629c87b1588","Чтение");                              //0
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Чтение");
	ЭлементСписка = ВсеПрава.Добавить("33200740-82b0-4de7-8556-d3fb25ca4328","Добавление");                          //1
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Добавление");
	ЭлементСписка = ВсеПрава.Добавить("287b74b8-3a66-4a76-ba27-4f1f6a93770e","Изменение");                           //2
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Изменение");
	ЭлементСписка = ВсеПрава.Добавить("c0028105-4cc1-41ca-aef1-bfbd8fc8f8c4","Удаление");                            //3
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Удаление");
	ЭлементСписка = ВсеПрава.Добавить("c6de80da-a4f7-4ce9-bbeb-0b00ea564ec1","Использование");                       //4
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Использование");
	ЭлементСписка = ВсеПрава.Добавить("aa6448f2-be0f-42ea-ba26-1af7f52b5b65","Просмотр");                            //5
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Просмотр");
	ЭлементСписка = ВсеПрава.Добавить("b5f861d3-d9c5-45ec-98bf-0ed4d489a351","ВводПоСтроке");                        //6
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Ввод по строке");
	ЭлементСписка = ВсеПрава.Добавить("fb88c756-91c9-4351-9cdf-e027879886c6","ИнтерактивноеДобавление");             //7
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное добавление");
	ЭлементСписка = ВсеПрава.Добавить("b7bab52d-c1b1-4bd8-8276-02db08d42352","Редактирование");                      //8
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Редактирование");
	ЭлементСписка = ВсеПрава.Добавить("b53db6ed-6e5b-4035-8d24-f10083d646ed","ИнтерактивноеУдаление");               //9
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное удаление");
	ЭлементСписка = ВсеПрава.Добавить("d76b72ba-5388-4b7f-af64-1b351f63a1e1","ИнтерактивнаяПометкаНаУдаление");      //10
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивная пометка на удаление");
	ЭлементСписка = ВсеПрава.Добавить("798cf688-ad74-44fe-a464-236b49e910e0","ИнтерактивноеСнятиеПометкиУдаления");  //11
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное снятие пометки удаления");
	ЭлементСписка = ВсеПрава.Добавить("fa6dbe86-856a-4ac4-b8ac-bce99f8b8b22","ИнтерактивноеУдалениеПомеченных");     //12
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное удаление помеченных");
	ЭлементСписка = ВсеПрава.Добавить("24abfe06-289a-48c5-8bb4-032c733e45c5","УправлениеИтогами");                   //13
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Управление итогами");
	ЭлементСписка = ВсеПрава.Добавить("e060de25-bffd-42fd-bb09-f3a788d65760","Проведение");                          //14
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Проведение");
	ЭлементСписка = ВсеПрава.Добавить("f55a8f7f-2c65-404f-b530-093d9006adba","ОтменаПроведения");                    //15
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Отмена проведения");
	ЭлементСписка = ВсеПрава.Добавить("5d167fcc-b11f-403a-9a37-1eda64c19df1","ИнтерактивноеПроведение");             //16
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное проведение");
	ЭлементСписка = ВсеПрава.Добавить("21b4742a-d335-4234-bf0f-a3074a0e31ac","ИнтерактивноеПроведениеНеоперативное");//17
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное проведение неоперативное");
	ЭлементСписка = ВсеПрава.Добавить("4d0d77ec-8511-430d-bd77-8407f27bc8f4","ИнтерактивнаяОтменаПроведения");       //18
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивная отмена проведения");
	ЭлементСписка = ВсеПрава.Добавить("b0c0cbfc-f2cc-4b80-8460-5d5d7a599d9d","ИнтерактивноеИзменениеПроведенных");   //19
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное изменение проведенных");
	ЭлементСписка = ВсеПрава.Добавить("499e8968-ca89-43f0-9955-8756058b1b53","Получение");                           //20
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Получение");
	ЭлементСписка = ВсеПрава.Добавить("1d306db2-d97e-4b57-9b28-5d21e838cd9e","Установка");                           //21
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Установка");
	ЭлементСписка = ВсеПрава.Добавить("3b869658-ebc9-49ff-9bb3-e7c59686f538","ИнтерактивнаяАктивация");              //22
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивная активация");
	ЭлементСписка = ВсеПрава.Добавить("65b6855f-85d5-4d33-ab75-be4485326dd5","Старт");                               //23
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Старт");
	ЭлементСписка = ВсеПрава.Добавить("84487e82-eb6c-4c51-ae16-3a6db17e886d","ИнтерактивныйСтарт");                  //24
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивный старт");
	ЭлементСписка = ВсеПрава.Добавить("74fd69fa-368e-4292-956a-65eb2f9877bd","Выполнение");                          //25
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Выполнение");
	ЭлементСписка = ВсеПрава.Добавить("5e664189-f0ee-439c-bdc5-eb81cca41ddf","ИнтерактивноеВыполнение");             //26
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное выполнение");
	ЭлементСписка = ВсеПрава.Добавить("900e3c92-6e18-4874-846a-b28780b5b54c","АдминистративныеФункции");             //27
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Административные функции");
	ЭлементСписка = ВсеПрава.Добавить("10b8ce49-ae3d-4a2e-afe7-1e3648bd59f7","АдминистрированиеДанных");             //28
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Администрирование данных");
	ЭлементСписка = ВсеПрава.Добавить("4d87a22d-ca7f-40ba-a367-a4eae62f4a7f","ОбновлениеКонфигурацииБазыДанных");    //29
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Обновление конфигурации базы данных");
	ЭлементСписка = ВсеПрава.Добавить("8fb221e3-0d4f-43f2-ad71-1984cad63375","МонопольныйРежим");                    //30
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Монопольный режим");
	ЭлементСписка = ВсеПрава.Добавить("fd05f656-7a23-43a4-8996-f480a806fb97","АктивныеПользователи");                //31
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Активные пользователи");
	ЭлементСписка = ВсеПрава.Добавить("1c799cf9-342d-4bf7-9b6f-951a009228ce","ЖурналРегистрации");                   //32
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Журнал регистрации");
	ЭлементСписка = ВсеПрава.Добавить("3c00c6ee-844e-4620-85e4-671e72f114d9","ТонкийКлиент");                        //33
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Тонкий клиент");
	ЭлементСписка = ВсеПрава.Добавить("bd33c881-192c-4ef7-a51d-b146e38c5078","ВебКлиент");                           //34
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Веб-клиент");
	ЭлементСписка = ВсеПрава.Добавить("29da0973-3b85-40e5-89da-bce02dbab08e","ТолстыйКлиент");                       //35
	СоответствиеПрав.Вставить(ЭлементСписка.Представление, "Толстый клиент");
	ЭлементСписка = ВсеПрава.Добавить("02119c69-f08a-4142-9426-3725d74b7719","ВнешнееСоединение");                   //36
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Внешнее соединение");
	ЭлементСписка = ВсеПрава.Добавить("07ef4641-f7da-417a-bd75-35c40a17c2f7","Automation");                          //37
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Automation");
	ЭлементСписка = ВсеПрава.Добавить("265eec41-3ce1-4a07-bc3b-253d44c9a4f4","РежимВсеФункции");                     //38
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Режим ""Все функции""");
	ЭлементСписка = ВсеПрава.Добавить("d8682bbb-7800-4aa0-8590-d3cb11fe2a29","СохранениеДанныхПользователя");        //39
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Сохранение данных пользователя");
	ЭлементСписка = ВсеПрава.Добавить("7b8359dd-7d4e-4bcd-a61c-b4b26eae19c6","ИнтерактивноеОткрытиеВнешнихОбработок");//40
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное открытие внешних обработок");
	ЭлементСписка = ВсеПрава.Добавить("eb29e198-c338-4a20-a253-be6fc3dd44d9","ИнтерактивноеОткрытиеВнешнихОтчетов");  //41
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Интерактивное открытие внешних отчетов");
	ЭлементСписка = ВсеПрава.Добавить("31c3d4f6-7d02-4654-a14e-06aacafcb4fa","Вывод");                                //42
	СоответствиеПрав.Вставить(ЭлементСписка.Представление,"Вывод");
	
	ПолныйСписокПрав = СписокПравДляВывода.Скопировать();
	Для каждого Запись Из ВсеПрава Цикл
		НоваяСтрока = ПолныйСписокПрав.Добавить();
		НоваяСтрока.Право              = Запись.Представление;	
		НоваяСтрока.ПравоПредставление = СоответствиеПрав.Получить(Запись.Представление);
		НоваяСтрока.Пометка            = Истина;
		НоваяСтрока.Отбор              = "Не установлен";
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокОбъектов()
	ВсеОбъекты=Новый СписокЗначений;
	ВсеОбъекты.Добавить("Подсистемы");
	ВсеОбъекты.Добавить("Параметры сеанса");
	ВсеОбъекты.Добавить("Планы обмена");
	ВсеОбъекты.Добавить("Критерии отбора");
	ВсеОбъекты.Добавить("Общие формы");
	ВсеОбъекты.Добавить("Общие команды");
	ВсеОбъекты.Добавить("Интерфейсы");
	ВсеОбъекты.Добавить("Web-сервисы");
КонецПроцедуры

Процедура ЗаполнитьТаблицуСтандартныхРеквизитов()
	
	СоответствиеСтандартныхРеквизитов=Новый Соответствие;
	СоответствиеСтандартныхРеквизитов.Вставить("Справочник",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("Справочник"));
	СоответствиеСтандартныхРеквизитов.Вставить("Документ",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("Документ"));
	СоответствиеСтандартныхРеквизитов.Вставить("ЖурналДокументов",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ЖурналДокументов"));
	СоответствиеСтандартныхРеквизитов.Вставить("ПланВидовХарактеристик",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ПланВидовХарактеристик"));
	СоответствиеСтандартныхРеквизитов.Вставить("ПланСчетов",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ПланСчетов"));
	СоответствиеСтандартныхРеквизитов.Вставить("ПланВидовРасчета",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ПланВидовРасчета"));
	СоответствиеСтандартныхРеквизитов.Вставить("РегистрСведений",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("РегистрСведений"));
	СоответствиеСтандартныхРеквизитов.Вставить("РегистрНакопления",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("РегистрНакопления"));
	СоответствиеСтандартныхРеквизитов.Вставить("РегистрБухгалтерии",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("РегистрБухгалтерии"));
	СоответствиеСтандартныхРеквизитов.Вставить("РегистрРасчета",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("РегистрРасчета"));
	СоответствиеСтандартныхРеквизитов.Вставить("БизнесПроцесс",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("БизнесПроцесс"));
	СоответствиеСтандартныхРеквизитов.Вставить("Задача",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("Задача"));
	СоответствиеСтандартныхРеквизитов.Вставить("ПланОбмена",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ПланОбмена"));
	СоответствиеСтандартныхРеквизитов.Вставить("ТабличнаяЧасть",ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления("ТабличнаяЧасть"));
	
КонецПроцедуры

Процедура УбратьИзТаблицыПравЛишниеКолонки()
	
	ИндексКолонки = ТаблицаПрав.Колонки.Количество() - 1;
	Пока ИндексКолонки <> 0 Цикл
		Итог = Неопределено;
		Если СоответствиеПрав[ТаблицаПрав.Колонки[ИндексКолонки].Имя]<> Неопределено Тогда
			Для каждого Нр Из ТаблицаПрав Цикл
				Если Нр[ИндексКолонки] <> Неопределено Тогда
					Итог = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Итог = Неопределено Тогда
				ИмяПрава=ТаблицаПрав.Колонки[ИндексКолонки].Имя;	
				Если СравнениеРолей = Истина Тогда
					Для каждого гр Из ТаблицаПрав Цикл
						Если гр[ИмяПрава+"1"] <>Неопределено Тогда
							Итог = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Итог=Неопределено Тогда
						ТаблицаПрав.Колонки.Удалить(ИмяПрава+"1");
						ТаблицаПрав.Колонки.Удалить(ИмяПрава);
					КонецЕсли;
				Иначе
					ТаблицаПрав.Колонки.Удалить(ИмяПрава);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ИндексКолонки = ИндексКолонки - 1;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьТаблицуРЛС(ТекОбластьОтчета,ЗначениеОтбора)
	
	//будем накладывать отбор - настроим доступность кнопки отключения отбора
	ЭлементыФормы.КоманднаяПанельРЛС.Кнопки.ОтключитьОтбор.Доступность = Истина;
	
	//В зависимости от режима результирующая таблица значений будет различаться
	ТЗдляЗаполненияРЛС= ?(СравнениеРолей = Ложь, ТабличноеПолеРЛС, ТабличноеПолеСравненияРЛС);
	
	//очищаем таблицу
	ТЗдляЗаполненияРЛС.Очистить();
	
	//надо отобрать из ТЗ ТаблицаРЛС строки по заданному в параметре объекту
	СтруктураОтбора = Новый Структура("Объект",ЗначениеОтбора);
	
	//если текущая ячейка соответствует конкретному праву, нужно также вставить в структуру отбора это право
	Если ТекОбластьОтчета.Право <> 1 Тогда
		Право=ЭлементыФормы.Результат.Область(1,ТекОбластьОтчета.Право,1,ТекОбластьОтчета.Право).Текст;
		Если СравнениеРолей=Истина И Право="" Тогда
			Право=ЭлементыФормы.Результат.Область(1,ТекОбластьОтчета.Право-1,1,ТекОбластьОтчета.Право-1).Текст;
		КонецЕсли;
		СтруктураОтбора.Вставить("Право",Право);
	КонецЕсли;
	
	//выводим в табличное поле отобранные строки
	СтрокиРЛС = ТаблицаРЛС.НайтиСтроки(СтруктураОтбора);
	Для каждого РЛС Из СтрокиРЛС Цикл
		НовСтрока = ТЗдляЗаполненияРЛС.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,РЛС);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереборДляПометки(Стр)
	Для каждого пр Из Стр.Строки Цикл
		пр.Пометка = Стр.Пометка;
		ПереборДляПометки(пр);
	КонецЦикла;
КонецПроцедуры

Функция УбратьЛишниеКавычкиИзСтроки(ПервоначальнаяСтрока)
	
	ТекстВКавычках = Новый ТекстовыйДокумент;
	ТекстВКавычках.УстановитьТекст(СтрЗаменить(ПервоначальнаяСтрока,"""""",""""));
	ВыхТекст = Новый ТекстовыйДокумент;
	Если ТекстВКавычках.КоличествоСтрок()>1 Тогда
		ВыхТекст.ВставитьСтроку(1,Сред(ТекстВКавычках.ПолучитьСтроку(1),2));
		Для НомерСтроки = 2 По ТекстВКавычках.КоличествоСтрок() - 1 Цикл
			ВыхТекст.ВставитьСтроку(НомерСтроки,ТекстВКавычках.ПолучитьСтроку(НомерСтроки));
		КонецЦикла;
		ПоследняяСтрока = ТекстВКавычках.ПолучитьСтроку(ТекстВКавычках.КоличествоСтрок());
		ВыхТекст.ВставитьСтроку(ТекстВКавычках.КоличествоСтрок(), Лев(ПоследняяСтрока,СтрДлина(ПоследняяСтрока)-1));
	Иначе
		ВыхТекст.ВставитьСтроку(1,Сред(ТекстВКавычках.ПолучитьСтроку(1),2,СтрДлина(ТекстВКавычках.ПолучитьСтроку(1))-2));
	КонецЕсли;
	Возврат ВыхТекст.ПолучитьТекст();
	
КонецФункции

Процедура ПостроитьСписокПравДляВывода(ВремТаблица)
	
	//перебираем виды метаданных отмеченных строк
	//находим в таблице прав строки с этими видами метаданных
	//По найденной строке определяем список возможных прав этого вида метаданных
	//заносим все найденные возможные права в соответствие, 
	//поскольку название права является ключом, права не дублируются
	ВремСоответствие = Новый Соответствие;
	Для каждого Вид Из ВремТаблица Цикл
		СтрокаПрав=ПолнаяТаблицаПрав.Найти(Вид.ВидМетаданных,"ВидМетаданных");
		Если СтрокаПрав<>Неопределено Тогда
			Для каждого Колонка Из ПолнаяТаблицаПрав.Колонки Цикл
				ИмяКолонки = СоответствуетПолюПрава(Колонка.Имя);
				Если ИмяКолонки<>Неопределено и СтрокаПрав[Колонка.Имя]<>Неопределено Тогда
					ВремСоответствие.Вставить(ИмяКолонки.Право,ИмяКолонки.Право);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СписокПравДляВывода.Очистить();
	Для каждого Право Из ПолныйСписокПрав Цикл
		Если ВремСоответствие.Получить(Право.Право)<>Неопределено Тогда
			СтрокаПрава                    = СписокПравДляВывода.Добавить();
			СтрокаПрава.Право              = Право.Право;
			СтрокаПрава.ПравоПредставление = СоответствиеПрав[Право.Право];
			СтрокаПрава.Отбор              = "Не установлен";
			СтрокаПрава.Пометка            = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СтатистическиеДанные(МассивНеопределенныхСтрок)
	
	//убираем с панели дерева метаданных кнопки, если они там не нужны
	Если МассивНеопределенныхСтрок.Количество()=0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.БезНеопределенных);
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Разделитель1);
	КонецЕсли;
	Если ТаблицаРЛС.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.ОтобратьРЛС);
	КонецЕсли;
	Если ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Количество()=0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы);
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Разделитель);
	КонецЕсли;
	
	//фиксируем на форме статистические данные 
	ВыводСтатистикиНаФорму(МассивНеопределенныхСтрок);
	
КонецПроцедуры

Процедура ВыводСтатистикиНаФорму(МассивНеопределенныхСтрок)
	
	Если МассивНеопределенныхСтрок.Количество() > 0  Тогда
		Если МассивНеопределенныхСтрок.Количество() = 1 Тогда
			Для каждого Запись Из МассивНеопределенныхСтрок Цикл
				ЭлементыФормы.ДействияФормы.Кнопки.ИнформационнаяНадпись.Текст = "Неопределенный элемент - "+Запись.Синоним+". Всего "+ТаблицаПрав.Количество()+" объектов.";
			КонецЦикла;
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.ИнформационнаяНадпись.Текст = ""+МассивНеопределенныхСтрок.Количество()+" неопределенных элементов. Всего "+ТаблицаПрав.Количество()+" объектов.";
		КонецЕсли;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.ИнформационнаяНадпись.Текст = "Всего "+ТаблицаПрав.Количество()+" объектов.";
	КонецЕсли;

	
КонецПроцедуры

Процедура СтатистическиеДанныеСравнения(МассивНеопределенныхСтрок)
	
	//статистика по идентификаторам конкретно неопределенных строк 
	НайтиНеопределенныеСтрокиСравнения(МассивНеопределенныхСтрок);

	//убираем с панели дерева метаданных кнопки, если они там не нужны
	Если ТаблицаРЛС.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.ОтобратьРЛС);
	КонецЕсли;
	Если МассивНеопределенныхСтрок.Количество()=0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.БезНеопределенных);
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Разделитель1);
	КонецЕсли;
	Если ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Количество()=0 Тогда
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы);
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Разделитель);
	КонецЕсли;
	
	//фиксируем на форме статистические данные 
	ВыводСтатистикиНаФорму(МассивНеопределенныхСтрок);
	
	//фиксируем на панели навигации статистические данные по измененным правам, РЛС-ам и шаблонам
	НеизмененнныеСтрокиПрав = ПолнаяТаблицаПрав.НайтиСтроки(Новый Структура("ЕстьИзменения",1));
	СчетчикОтличийПрав=ПолнаяТаблицаПрав.Количество()-НеизмененнныеСтрокиПрав.Количество();
	НеизмененнныеСтрокиШаблонов = ТаблицаШаблонов.НайтиСтроки(Новый Структура("ЕстьИзменения",Ложь));
	СчетчикОтличийШаблонов=ТаблицаШаблонов.Количество()-НеизмененнныеСтрокиШаблонов.Количество();
	НеизмененнныеСтрокиРЛС = ПолнаяТаблицаРЛС.НайтиСтроки(Новый Структура("ЕстьИзмененияРЛС",1));
	СчетчикОтличийРЛС=ПолнаяТаблицаРЛС.Количество()-НеизмененнныеСтрокиРЛС.Количество();
	Если СчетчикОтличийШаблонов<>0 Тогда
		ЭлементыФормы.ОтсутствуютВШаблонах.Видимость = Ложь;
	КонецЕсли;
	Если СчетчикОтличийРЛС<>0 Тогда
		ЭлементыФормы.ОтсутствуютВРЛС.Видимость = Ложь;
		ЭлементыФормы.ПоискРазличийРЛС.Видимость = Истина;
		ЭлементыФормы.ПоискРазличийРЛС.Доступность = Истина;
		ЭлементыФормы.РазличияВРЛС.Ширина = ЭлементыФормы.РазличияВРЛС.Ширина + 7;
		ЭлементыФормы.РазличияВРЛС.Заголовок = "Различия в ограничениях доступа ("+СчетчикОтличийРЛС+"):";
	Иначе
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.БыстрыеОтборы.Кнопки.ФильтрРЛС);
	КонецЕсли;
	Если СчетчикОтличийПрав<>0 Тогда
		ЭлементыФормы.ОтсутствуютВПравах.Видимость = Ложь;
		ЭлементыФормы.ПоискРазличий.Видимость = Истина;
		ЭлементыФормы.ПоискРазличий.Доступность = Истина;
		ЭлементыФормы.РазличияВПравах.Ширина = ЭлементыФормы.РазличияВПравах.Ширина + 7;
		ЭлементыФормы.РазличияВПравах.Заголовок = "Различия в правах ролей ("+СчетчикОтличийПрав+"):";
	Иначе
		ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельГруппировки.Кнопки.ТолькоИзмененные);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиНеопределенныеСтрокиСравнения(МассивНеопределенныхСтрок)
	
	//определяем неопределенные строки, существующие только в первой конфигурации
	СтруктураОтбора = Новый Структура("Объект,Объект1", "", Неопределено);
	МассивНеопределенныхСтрокПервый = ТаблицаПрав.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаПервогоМассива Из МассивНеопределенныхСтрокПервый  Цикл
		МассивНеопределенныхСтрок.Добавить(СтрокаПервогоМассива);
		СтрокаПервогоМассива.Родитель="";                                //чтобы выводилось в отчет
		СтрокаПервогоМассива.Объект=СтрокаПервогоМассива.Идентификатор;  //чтобы выводилось в отчет
		СтрокаПервогоМассива.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),СтрокаПервогоМассива.Идентификатор);  //чтобы выводилось в отчет
	КонецЦикла;
	
	//определяем неопределенные строки, существующие только во второй конфигурации
	СтруктураОтбора = Новый Структура("Объект1,Объект", "", Неопределено);
	МассивНеопределенныхСтрокВторой = ТаблицаПрав.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаВторогоМассива Из МассивНеопределенныхСтрокВторой  Цикл
		МассивНеопределенныхСтрок.Добавить(СтрокаВторогоМассива);
		СтрокаВторогоМассива.Родитель="";                                  //чтобы выводилось в отчет
		СтрокаВторогоМассива.Объект1=СтрокаВторогоМассива.Идентификатор1;  //чтобы выводилось в отчет
		СтрокаВторогоМассива.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),СтрокаВторогоМассива.Идентификатор1);  //чтобы выводилось в отчет
	КонецЦикла;
	
	//определяем неопределенные строки, существующие в обоих конфигурациях
	СтруктураОтбора = Новый Структура("Объект1,Объект", "", "");
	МассивНеопределенныхСтрокТретий = ТаблицаПрав.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТретьегоМассива Из МассивНеопределенныхСтрокТретий  Цикл
		МассивНеопределенныхСтрок.Добавить(СтрокаТретьегоМассива);
		СтрокаТретьегоМассива.Родитель="";                                  //чтобы выводилось в отчет
		СтрокаТретьегоМассива.Объект1=СтрокаТретьегоМассива.Идентификатор1;  //чтобы выводилось в отчет
		СтрокаТретьегоМассива.УИ = СписокУИ.Добавить(Новый УникальныйИдентификатор(),СтрокаТретьегоМассива.Идентификатор1);  //чтобы выводилось в отчет
	КонецЦикла;
	
КонецПроцедуры

Процедура УбиратьЧетныеГраницы(ПроцессорВывода,ПроцессорКомпоновки)
	
	ЭлементРезультата=ПроцессорКомпоновки.Следующий();
	УбиратьГраницу=Неопределено;
	Пока НЕ ЭлементРезультата=Неопределено Цикл
		Попытка
			Если ЭлементРезультата.Макеты.Количество()<>0 Тогда
				Для каждого Ячейка Из ЭлементРезультата.Макеты[0].Макет[1].Ячейки Цикл
					Если УбиратьГраницу=Неопределено Тогда
						УбиратьГраницу=Истина;
						Продолжить;
					Иначе
						Если УбиратьГраницу=Истина Тогда
							Ячейка.Оформление.Элементы[3].ЗначенияВложенныхПараметров[2].Использование=Ложь;
						КонецЕсли;
						УбиратьГраницу=Не УбиратьГраницу;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	КонецЦикла; 

КонецПроцедуры

Процедура СоставитьСоответствиеВидовМетаданныхСпискамПрав()
	
	СоответствиеВидовМетаданных = Новый Соответствие;
	
	СтруктураПрав = Новый Структура("n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42");
	СоответствиеВидовМетаданных.Вставить("Конфигурация",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5");
	СоответствиеВидовМетаданных.Вставить("Подсистема",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n20,n21");
	СоответствиеВидовМетаданных.Вставить("ПараметрСеанса",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12");
	СоответствиеВидовМетаданных.Вставить("ПланОбмена",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5");
	СоответствиеВидовМетаданных.Вставить("КритерийОтбора",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5");
	СоответствиеВидовМетаданных.Вставить("ОбщаяФорма",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5");
	СоответствиеВидовМетаданных.Вставить("ОбщаяКоманда",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n4");
	СоответствиеВидовМетаданных.Вставить("Интерфейс",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2,n5,n8");
	СоответствиеВидовМетаданных.Вставить("Константа",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12");
	СоответствиеВидовМетаданных.Вставить("Справочник",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12,n14,n15,n16,n17,n18,n19");
	СоответствиеВидовМетаданных.Вставить("Документ",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2");
	СоответствиеВидовМетаданных.Вставить("Последовательность",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n5");
	СоответствиеВидовМетаданных.Вставить("ЖурналДокументов",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n4,n5");
	СоответствиеВидовМетаданных.Вставить("Отчет",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n4,n5");
	СоответствиеВидовМетаданных.Вставить("Обработка",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12");
	СоответствиеВидовМетаданных.Вставить("ПланВидовХарактеристик",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12");
	СоответствиеВидовМетаданных.Вставить("ПланСчетов",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12");
	СоответствиеВидовМетаданных.Вставить("ПланВидовРасчета",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2,n5,n8");
	СоответствиеВидовМетаданных.Вставить("РегистрСведений",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2,n5,n8,n13");
	СоответствиеВидовМетаданных.Вставить("РегистрНакопления",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2,n5,n8,n13");
	СоответствиеВидовМетаданных.Вставить("РегистрБухгалтерии",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n2,n5,n8");
	СоответствиеВидовМетаданных.Вставить("РегистрРасчета",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12,n22,n23,n24");
	СоответствиеВидовМетаданных.Вставить("БизнесПроцесс",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n0,n1,n2,n3,n5,n6,n7,n8,n9,n10,n11,n12,n22,n25,n26");
	СоответствиеВидовМетаданных.Вставить("Задача",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("Реквизит",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("ТабличнаяЧасть",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("РеквизитТабличнойЧасти",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("СтандартныйРеквизит",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5");
	СоответствиеВидовМетаданных.Вставить("Команда",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("Измерение",СоставитьСписокДляЭлемента(СтруктураПрав));
	СтруктураПрав = Новый Структура("n5,n8");
	СоответствиеВидовМетаданных.Вставить("Ресурс",СоставитьСписокДляЭлемента(СтруктураПрав));
	
	
КонецПроцедуры

Функция СоставитьСписокДляЭлемента(СтруктураПрав)
	СписокДляТипаЭлемента=Новый СписокЗначений;
	Для каждого СтрокаЭлемента Из СтруктураПрав Цикл
		СписокДляТипаЭлемента.Добавить(ВсеПрава[Число(СтрЗаменить(СтрокаЭлемента.Ключ,"n",""))]);
	КонецЦикла;
	Возврат СписокДляТипаЭлемента;
КонецФункции

Процедура ДеревоОбъектовВРежимеДополнения();

	Если СравнениеРолей = Ложь Тогда
		ДЗ = ГруппировкиОтчета;
		ТП = ЭлементыФормы.ГруппировкиОтчета;
	Иначе
		ДЗ = СравнениеОбъектовРолей;
		ТП = ЭлементыФормы.СравнениеОбъектовРолей;
	КонецЕсли;
	//снимаем флажки в дереве дополнения
	МассивСтрок = ДеревоДополнения.Строки.НайтиСтроки(Новый Структура("Пометка",Истина),Истина);
	Для каждого СтрокаМетаданных Из МассивСтрок Цикл
		СтрокаМетаданных.Пометка=Ложь;
	КонецЦикла;
	//проставляем в дереве дополнения те же флажки, как и в дереве группировок
	Для каждого АнализируемаяСтрока Из ДЗ.Строки Цикл
		СтрокаДополнения = ДеревоДополнения.Строки.Найти(АнализируемаяСтрока.СсылкаДополнения,"СсылкаДополнения");
		Если СтрокаДополнения<>Неопределено Тогда
			СтрокаДополнения.Пометка = АнализируемаяСтрока.Пометка;
			ПроставитьРекурсивно(СтрокаДополнения,АнализируемаяСтрока);
		КонецЕсли;
	КонецЦикла;
	ВремДерево = ДЗ.Скопировать();
	ТП.Значение = ДеревоДополнения;
	ДеревоДополнения = ВремДерево.Скопировать();
	
КонецПроцедуры

Процедура ПроставитьРекурсивно(СтрокаДополнения,АнализируемаяСтрока);
	Для каждого АнализируемаяСтр Из АнализируемаяСтрока.Строки Цикл
		СтрДополнения = СтрокаДополнения.Строки.Найти(АнализируемаяСтр.СсылкаДополнения,"СсылкаДополнения");
		Если СтрДополнения<>Неопределено Тогда
			СтрДополнения.Пометка = АнализируемаяСтр.Пометка;
			ПроставитьРекурсивно(СтрДополнения,АнализируемаяСтр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//==============================================================================================================================================
// ПРОГРАММНОЕ ГЕНЕРИРОВАНИЕ КНОПОЧЕК ДЛЯ УДОБНОГО УПРАВЛЕНИЯ УРОВНЯМИ ГРУППИРОВКИ из публикации http://infostart.ru/public/83915/ от mtv:)
//==============================================================================================================================================

// Генерирует кнопки управления группировкой
Процедура СгенерироватьКнопкиУправленияГруппировкой()
	
	ТабДокумент    = ЭлементыФормы.Результат;
	НачалоВерх     = ТабДокумент.Верх + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента
	НачалоЛево     = ТабДокумент.Лево + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента
	ШагКнопок      = 13;
	ПрефиксИмениКн = "КнГр_";
	
	// Удалить старые кнопки
	Сч = 0;
	Пока Сч < ЭлементыФормы.Количество() Цикл
		ТекЭлемент = ЭлементыФормы.Получить(Сч);
		Если Найти(ТекЭлемент.Имя, ПрефиксИмениКн) > 0 Тогда
			ЭлементыФормы.Удалить(ТекЭлемент);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Добавть новые кнопки по количеству группировок
	КоличествоГруппировок = ТабДокумент.КоличествоУровнейГруппировокСтрок();
	Для Сч = 1 По КоличествоГруппировок Цикл
		НоваяКнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), ПрефиксИмениКн + Сч,,ЭлементыФормы.ОсновнаяПанель); //если ПолеТабличногоДокумента расположено на Форме
		//НоваяКнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), ПрефиксИмениКн + Сч, Истина, ЭлементыФормы.Панель1); //если ПолеТабличногоДокумента расположено на Панели "Панель1"
		НоваяКнопка.Верх      = НачалоВерх;
		НоваяКнопка.Лево      = НачалоЛево + (ШагКнопок * (Сч - 1));
		НоваяКнопка.Высота    = 11;
		НоваяКнопка.Ширина    = 11;
		НоваяКнопка.Шрифт     = Новый Шрифт("Шрифт диалогов и меню", 6);
		НоваяКнопка.Заголовок = "" + Сч;
		НоваяКнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша["_"+сч], Истина, Ложь, Ложь);
		НоваяКнопка.УстановитьДействие("Нажатие", Новый Действие("СвернутьДоУровня"));
	КонецЦикла;
	
КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

// Вызывется при нажатии кнопочек "1", "2" и т.д. (для сворачивания группировок)
Процедура СвернутьДоУровня(Элемент)
	
	Уровень = Число(Элемент.Заголовок); // здесь записан нужный уровень
	ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(Уровень - 1);
	
КонецПроцедуры //СвернутьДоУровня()

//==============================================================================================================================================
// ПРОГРАММНОЕ ФОРМИРОВАНИЕ И НАСТРОЙКА СКД из публикации http://infostart.ru/public/138324/ от Zigfridish
//==============================================================================================================================================

Процедура СформироватьНаборыДанныхСКД()
	
	СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Очистить();
	ИсточникДанных = СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Очистить();		
	НаборДанных = СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИмяОбъекта     = "ТаблицаПрав";	
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
		
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл		
		
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Колонка.Имя;
		ПолеНабораДанных.ПутьКДанным = Колонка.Имя;
		ПолеНабораДанных.ТипЗначения = Колонка.ТипЗначения;
		
		Если Колонка.Имя="УИ" Тогда
			ПолеНабораДанных.Заголовок ="Объект метаданных";
			ПолеНабораДанных.Оформление.Элементы[8].Значение       = ГоризонтальноеПоложение.Центр;
			ПолеНабораДанных.Оформление.Элементы[8].Использование  = Истина;
			ПолеНабораДанных.Оформление.Элементы[9].Значение       = ВертикальноеПоложение.Центр; 
			ПолеНабораДанных.Оформление.Элементы[9].Использование  = Истина;
			ПолеНабораДанных.Оформление.Элементы[16].Значение      = 40;
			ПолеНабораДанных.Оформление.Элементы[16].Использование = Истина;
			ПолеНабораДанных.Оформление.Элементы[15].Значение      = 40;
			ПолеНабораДанных.Оформление.Элементы[15].Использование = Истина;
		КонецЕсли;
		
		// оформление поля права
		ЭтоКолонкаПрава = ПолныйСписокПрав.Найти(ПолеНабораДанных.ПутьКДанным,"Право") <> Неопределено;
		Если ЭтоКолонкаПрава Тогда
			ПолеНабораДанных.Заголовок   = СоответствиеПрав[Колонка.Имя];
			Оформление = ПолеНабораДанных.Оформление;
			Оформление.Элементы[8].Значение = ГоризонтальноеПоложение.Центр;
			Оформление.Элементы[8].Использование        = Истина;
			Оформление.Элементы[9].Значение = ВертикальноеПоложение.Центр;
			Оформление.Элементы[9].Использование        = Истина;
			Оформление.Элементы[10].Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			Оформление.Элементы[10].Использование = Истина;
			Оформление.Элементы[11].Значение = 90;
			Оформление.Элементы[11].Использование = Истина;
			Оформление.Элементы[15].Значение = 7;
			Оформление.Элементы[15].Использование = Истина;
			Оформление.Элементы[16].Значение = 7;
			Оформление.Элементы[16].Использование = Истина;
			Оформление.Элементы[18].Значение = 90;
			Оформление.Элементы[18].Использование = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	СвязьПоИерархии=СхемаКомпоновкиДанныхПоПравам.СвязиНаборовДанных.Добавить();
	СвязьПоИерархии.НаборДанныхИсточник = "НаборДанных1";
	СвязьПоИерархии.НаборДанныхПриемник = "НаборДанных1";
	СвязьПоИерархии.ВыражениеИсточник   = "УИ";
	СвязьПоИерархии.ВыражениеПриемник   = "Родитель";
	СвязьПоИерархии.УсловиеСвязи        = "ЭтоГруппа";
	СвязьПоИерархии.НачальноеВыражение  = """""";
	
	СформироватьНастройкиОтчета();	
	
КонецПроцедуры

Процедура СформироватьДанныеСКДСравнения()
	СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Очистить();
	ИсточникДанных = СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Очистить();		
	НаборДанных = СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИмяОбъекта     = "ТаблицаПрав";	
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл		
		
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Колонка.Имя;
		ПолеНабораДанных.ПутьКДанным = Колонка.Имя;
		ПолеНабораДанных.ТипЗначения = Колонка.ТипЗначения;
		
		Если Колонка.Имя="УИ" Тогда
			ПолеНабораДанных.Заголовок ="Объект метаданных";
			ПолеНабораДанных.Оформление.Элементы[4].Значение = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ПолеНабораДанных.Оформление.Элементы[4].Использование = Истина;
			ПолеНабораДанных.Оформление.Элементы[4].ЗначенияВложенныхПараметров[2].Значение = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
			ПолеНабораДанных.Оформление.Элементы[4].ЗначенияВложенныхПараметров[2].Использование = Истина;
			ПолеНабораДанных.Оформление.Элементы[8].Значение       = ГоризонтальноеПоложение.Центр;
			ПолеНабораДанных.Оформление.Элементы[8].Использование  = Истина;
			ПолеНабораДанных.Оформление.Элементы[9].Значение       = ВертикальноеПоложение.Центр; 
			ПолеНабораДанных.Оформление.Элементы[9].Использование  = Истина;
			ПолеНабораДанных.Оформление.Элементы[11].Значение      = 0;
			ПолеНабораДанных.Оформление.Элементы[11].Использование = Истина;
			ПолеНабораДанных.Оформление.Элементы[15].Значение      = 40;
			ПолеНабораДанных.Оформление.Элементы[15].Использование = Истина;
			ПолеНабораДанных.Оформление.Элементы[16].Значение      = 40;
			ПолеНабораДанных.Оформление.Элементы[16].Использование = Истина;
		КонецЕсли;
		
		// оформление поля права
		ИмяКолонки = СоответствуетПолюПрава(ПолеНабораДанных.ПутьКДанным);
		Если ИмяКолонки<>Неопределено Тогда
			ПолеНабораДанных.Заголовок   = ?(СоответствиеПрав[ИмяКолонки.Право]=Неопределено,ПолеНабораДанных.Поле,СоответствиеПрав[ИмяКолонки.Право]);
			Оформление = ПолеНабораДанных.Оформление;
			Оформление.Элементы[4].Значение = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			Если ПолныйСписокПрав.Найти(Сред(ПолеНабораДанных.ПутьКДанным,1,СтрДлина(ПолеНабораДанных.ПутьКДанным)-1))<>Неопределено Тогда
				Оформление.Элементы[4].ЗначенияВложенныхПараметров[2].Значение = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
				Оформление.Элементы[4].ЗначенияВложенныхПараметров[2].Использование = Истина;
			КонецЕсли;
			Оформление.Элементы[4].Использование        = Истина;
			Оформление.Элементы[8].Значение = ГоризонтальноеПоложение.Центр;
			Оформление.Элементы[8].Использование        = Истина;
			Оформление.Элементы[9].Значение = ВертикальноеПоложение.Центр;
			Оформление.Элементы[9].Использование        = Истина;
			Оформление.Элементы[10].Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			Оформление.Элементы[10].Использование = Истина;
			Оформление.Элементы[11].Значение = 0;
			Оформление.Элементы[11].Использование = Истина;
			Оформление.Элементы[15].Значение = 5;
			Оформление.Элементы[15].Использование = Истина;
			Оформление.Элементы[16].Значение = 5;
			Оформление.Элементы[16].Использование = Истина;
			Оформление.Элементы[18].Значение = 90;
			Оформление.Элементы[18].Использование = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	СвязьПоИерархии=СхемаКомпоновкиДанныхПоПравам.СвязиНаборовДанных.Добавить();
	СвязьПоИерархии.НаборДанныхИсточник = "НаборДанных1";
	СвязьПоИерархии.НаборДанныхПриемник = "НаборДанных1";
	СвязьПоИерархии.ВыражениеИсточник   = "УИ";
	СвязьПоИерархии.ВыражениеПриемник   = "Родитель";
	СвязьПоИерархии.УсловиеСвязи        = "ЭтоГруппа";
	СвязьПоИерархии.НачальноеВыражение  = """""";
	
	СформироватьНастройкиОтчета();	
КонецПроцедуры

Процедура СформироватьНастройкиОтчета()
	
	НастройкиСКД = СхемаКомпоновкиДанныхПоПравам.НастройкиПоУмолчанию;
	
	// задаем структуру отчета 
	НастройкиСКД.Структура.Очистить();
	
	//одна группировка 
	ГруппировкаУИ = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаУИ.Имя  = "УИ";
	ВыбранноеПоле = ГруппировкаУИ.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ");
	//детальные записи - ее состав
	ЗаполнитьСоставДетальныхЗаписей(ГруппировкаУИ);
			
	// условное оформление
	НастройкиСКД.УсловноеОформление.Элементы.Очистить();
	
	//выровнять данные колонки Объект метаданных по левому краю
	ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
	ВыравниваниеВлево = ЭлементОформления.Оформление.Элементы[8];  // Выравнивание по левому краю  в колонке
	ВыравниваниеВлево.Значение      = ГоризонтальноеПоложение.Лево;
	ВыравниваниеВлево.Использование = Истина;		
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 

	//значения вида "Неопределено" закрасить серым фоном
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
		Если СоответствуетПолюПрава(Колонка.Имя)<>Неопределено Тогда
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаНеопределенногоПрава = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
			ОформлениеФонаНеопределенногоПрава.Значение      = WebЦвета.СеребристоСерый;
			ОформлениеФонаНеопределенногоПрава.Использование = Истина;		
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
		КонецЕсли;
	КонецЦикла;
	
	//раскрасить фон группировок на всю длину строки
	ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
	ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
	ОформлениеФонаГруппировки.Значение      = Новый Цвет(248,242,216);
	ОформлениеФонаГруппировки.Использование = Истина;		
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
		Если СоответствуетПолюПрава(Колонка.Имя)<>Неопределено Тогда
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
		КонецЕсли;
	КонецЦикла;
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭтоГруппа"); 
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	//раскрасить группировку,где подключен РЛС
	ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
	ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
	ОформлениеФонаГруппировки.Значение      = WebЦвета.Коралловый;
	ОформлениеФонаГруппировки.Использование = Истина;		
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РЛС"); 
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	Если СравнениеРолей=Истина Тогда
		//раскрасить группировки,содержащие изменения ролей
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
		ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
		ОформлениеФонаГруппировки.Значение      = Новый Цвет(225,253,253);
		ОформлениеФонаГруппировки.Использование = Истина;		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения");
		ЭлементОтбора.ПравоеЗначение = 2;
		//в режиме дополнения если значения прав по умолчанию у ролей отличаются - все дополненные группировки объектов первого уровня тоже раскрашиваем измененным
		Если РежимДополнения=Истина и ЗначениеИзмененийПоУмолчанию="Разные" Тогда
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
			ОформлениеФонаГруппировки.Значение      = Новый Цвет(225,253,253);
			ОформлениеФонаГруппировки.Использование = Истина;		
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
			ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дополнено");
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидМетаданных");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ПравоеЗначение = "Реквизит";
			ЭлементОтбора= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидМетаданных");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ПравоеЗначение = "СтандартныйРеквизит";
			ЭлементОтбора= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидМетаданных");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ПравоеЗначение = "ТабличнаяЧасть";
		КонецЕсли;
		//раскрасить группировки,содержащие удаление ролей
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
		ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
		ОформлениеФонаГруппировки.Использование = Истина;		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ");
		Если РежимДополнения=Ложь Тогда
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 0;
			ОформлениеФонаГруппировки.Значение      = Новый Цвет(255,228,196);
		Иначе
			//в режиме дополнения добавленные объекты ролей по сути являются просто изменениями прав - раскрашиваем в цвет измененных строк
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 0;
			ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзмененияДополнения"); 
			ЭлементОтбора.ПравоеЗначение = "Разные";
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзмененияДополнения"); 
			Если ВсеПраваПоУмолчаниюВтораяРоль=Истина Тогда
				ЭлементОтбора.ПравоеЗначение = "Все запрещено";
			Иначе	
				ЭлементОтбора.ПравоеЗначение = "Все разрешено";
			КонецЕсли;
			ОформлениеФонаГруппировки.Значение  = Новый Цвет(225,253,253);
			//в режиме дополнения в цвет добавленных строк раскрашивать надо только добавленные объекты метаданных
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
			ОформлениеФонаГруппировки.Использование = Истина;		
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Добавлено"); 
			ЭлементОтбора.ПравоеЗначение = Ложь;
			ОформлениеФонаГруппировки.Значение      = Новый Цвет(255,228,196);
		КонецЕсли;
		
		//раскрасить группировки,содержащие добавление ролей
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
		ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
		ОформлениеФонаГруппировки.Использование = Истина;		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
		Если РежимДополнения=Ложь Тогда
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 3;
			ОформлениеФонаГруппировки.Значение  = Новый Цвет(192,220,192);
		Иначе
			//в режиме дополнения добавленные объекты ролей по сути являются просто изменениями прав - раскрашиваем в цвет измененных строк
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 3;
			ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзмененияДополнения"); 
			ЭлементОтбора.ПравоеЗначение = "Разные";
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзмененияДополнения"); 
			Если ВсеПраваПоУмолчанию=Истина Тогда
				ЭлементОтбора.ПравоеЗначение = "Все запрещено";
			Иначе	
				ЭлементОтбора.ПравоеЗначение = "Все разрешено";
			КонецЕсли;
			ОформлениеФонаГруппировки.Значение  = Новый Цвет(225,253,253);
			//в режиме дополнения в цвет добавленных строк раскрашивать надо только добавленные объекты метаданных
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[0];  // цвет фона группировки
			ОформлениеФонаГруппировки.Использование = Истина;		
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("УИ"); 
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Добавлено"); 
			ЭлементОтбора.ПравоеЗначение = Истина;
			ОформлениеФонаГруппировки.Значение  = Новый Цвет(192,220,192);
		КонецЕсли;
		
	КонецЕсли;
	
	//задать представление для значений прав
	ПоляСКД = СхемаКомпоновкиДанныхПоПравам.НаборыДанных[0].Поля;
	Для каждого ПолеСКД Из ПоляСКД Цикл	
		Если СоответствуетПолюПрава(ПолеСКД.ПутьКДанным)<>Неопределено Тогда
			ОформитьПолеПрава(НастройкиСКД, ПолеСКД, "1");
			ОформитьПолеПрава(НастройкиСКД, ПолеСКД, "-1");	
			ОформитьПолеПрава(НастройкиСКД, ПолеСКД, "2");
		КонецЕсли;
	КонецЦикла;
	
	Если РежимДополнения=Истина Тогда
		//для строк дополнения шрифт должен быть нежирным
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
		ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[5];  // шрифт группировки
		ОформлениеФонаГруппировки.Значение      = Новый Шрифт(,,Ложь);
		ОформлениеФонаГруппировки.Использование = Истина;		
		Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
			Если СоответствуетПолюПрава(Колонка.Имя)<>Неопределено Тогда
				ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
			КонецЕсли;
		КонецЦикла;
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дополнено"); 
		ЭлементОтбора.ПравоеЗначение = Истина;
		Если СравнениеРолей=Истина Тогда
			//для "удаленных" объектов шрифт строк дополнения (правая колонка) также должен быть нежирным
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[5];  // шрифт группировки
			ОформлениеФонаГруппировки.Значение      = Новый Шрифт(,,Ложь);
			ОформлениеФонаГруппировки.Использование = Истина;		
			Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
				Если ПолныйСписокПрав.Найти(Сред(Колонка.Имя,1,СтрДлина(Колонка.Имя)-1),"Право")<>Неопределено Тогда
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
				КонецЕсли;
			КонецЦикла;
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 0;
			//для "добавленных" объектов шрифт строк дополнения (левая колонка) также должен быть нежирным
			ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
			ОформлениеФонаГруппировки = ЭлементОформления.Оформление.Элементы[5];  // шрифт группировки
			ОформлениеФонаГруппировки.Значение      = Новый Шрифт(,,Ложь);
			ОформлениеФонаГруппировки.Использование = Истина;		
			Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
				Если ПолныйСписокПрав.Найти(Колонка.Имя,"Право")<>Неопределено Тогда
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя); 
				КонецЕсли;
			КонецЦикла;
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьИзменения"); 
			ЭлементОтбора.ПравоеЗначение = 3;
		КонецЕсли;
	КонецЕсли;
	
	// другие настройки
	Если СравнениеРолей = Ложь Тогда
		МакетОформления = НастройкиСКД.ПараметрыВывода.Элементы[0];
		МакетОформления.Значение      = "Основной";
		МакетОформления.Использование = Истина;
	КонецЕсли;
	
	ВыводОтборов = НастройкиСКД.ПараметрыВывода.Элементы[13];
	ВыводОтборов.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ВыводОтборов.Использование = Истина;
	
	ВыводЗаголовка = НастройкиСКД.ПараметрыВывода.Элементы[10];
	ВыводЗаголовка.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ВыводЗаголовка.Использование = Истина;
	
КонецПроцедуры

Функция СоответствуетПолюПрава(НазваниеПоля)
	
	Если ПолныйСписокПрав.Найти(НазваниеПоля,"Право")<>Неопределено Тогда
		Возврат ПолныйСписокПрав.Найти(НазваниеПоля,"Право");
	ИначеЕсли СравнениеРолей=Истина и ПолныйСписокПрав.Найти(Сред(НазваниеПоля,1,СтрДлина(НазваниеПоля)-1),"Право")<>Неопределено Тогда
		Возврат ПолныйСписокПрав.Найти(Сред(НазваниеПоля,1,СтрДлина(НазваниеПоля)-1),"Право");
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ОформитьПолеПрава(НастройкиСКД, ПолеСКД, ЗначениеПрава)
	
	// оформление
	ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
	ОформлениеФонаТекста = ЭлементОформления.Оформление.Элементы[0];  // цвет фона права
	ОформлениеФонаТекста.Значение      = ?(ЗначениеПрава="2",WebЦвета.Коралловый,WebЦвета.Белый);
	ОформлениеФонаТекста.Использование = Истина;
	ОформлениеЦветаТекста = ЭлементОформления.Оформление.Элементы[1];  // цвет текста права
	ОформлениеЦветаТекста.Значение      = ?(ЗначениеПрава="1", WebЦвета.Зеленый, ?(ЗначениеПрава="-1",WebЦвета.Красный,WebЦвета.Зеленый));
	ОформлениеЦветаТекста.Использование = Истина;		
	ОформлениеЦветаТекста = ЭлементОформления.Оформление.Элементы[5];  // цвет текста права
	ОформлениеЦветаТекста.Значение      = Новый Шрифт(,,Истина);
	ОформлениеЦветаТекста.Использование = Истина;		
	ОформлениеОриентации = ЭлементОформления.Оформление.Элементы[11]; // ориентация текста
	ОформлениеОриентации.Значение      = 0;
	ОформлениеОриентации.Использование = Истина;
	ОформлениеЦветаТекста = ЭлементОформления.Оформление.Элементы[19];  // выводимый текст
	ОформлениеЦветаТекста.Значение      = ?(ЗначениеПрава="1", "Да", ?(ЗначениеПрава="-1","Нет","Да"));
	ОформлениеЦветаТекста.Использование = Истина;		
	
	// условия оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным); 
	ЭлементОтбора.ПравоеЗначение = ЗначениеПрава;
	
	// оформляемые поля
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным); 
	
КонецПроцедуры

Процедура ЗаполнитьСоставДетальныхЗаписей(ГруппировкаУИ)
	
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
		ИмяКолонки=ПолныйСписокПрав.Найти(Колонка.Имя,"Право");
		Если ИмяКолонки<>Неопределено Тогда
			Если СравнениеРолей=Истина Тогда
				ВыбраннаяГруппа = ГруппировкаУИ.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ВыбраннаяГруппа.Заголовок=?(СоответствиеПрав[ИмяКолонки.Право]=Неопределено,ИмяКолонки.Право,СоответствиеПрав[ИмяКолонки.Право]);	
				ВыбранноеПоле = ВыбраннаяГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(""+Колонка.Имя+"");
				ВыбранноеПоле.Заголовок = "1";
				ВыбранноеПоле = ВыбраннаяГруппа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(""+Колонка.Имя+"1");
				ВыбранноеПоле.Заголовок = "2";
			Иначе
				ВыбранноеПоле = ГруппировкаУИ.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(""+Колонка.Имя+"");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//==============================================================================================================================================
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//==============================================================================================================================================

