//==============================================================================================================================================
// ПЕРЕМЕННЫЕ МОДУЛЯ
//==============================================================================================================================================

Перем СчетчикИзмененийЭлементовФорм;
Перем СчетчикИзмененийРеквизитовФорм;
Перем СчетчикИзмененийКомандФорм;
Перем СчетчикИзмененийПараметровФорм;
Перем СчетчикИзмененийКомандныхИнтерфейсов;

Перем ОбрабатываемаяФорма; 			//тип - форма. Используется для получения всей информации о форме. 
Перем ПерваяФорма;  				//тип - форма. Только для режима сравнения. В ней хранится форма, обработанная первой.

Перем СоответствиеСвойствЭлементам; //соответствие. Заполняется из макета. Ключ - тип элемента формы Значение - таблица возможных свойств, характерных этому типу элемента

Перем мТекст;                       //текст для декомпиляции формы (или декомпиляции изменений формы)

Перем Границы;                      //массив. Хранит четыре значения системного перечисления ГраницаЭлементаУправления
Перем ТаблицаСвойствПоляВвода;      //ТЗ. 
Перем СоответствиеТиповЭлементовСпискамОбработчиков; //соответствие. Ключ - название типа элемента. Значение - СЗ возможных обработчиков событий

Перем СоответствиеДанныхПолное;     //соответствие. Заполняется при XML-разборе. Ключ - имя элемента формы. Значение - данные этого элемента формы

Перем RegExp;
Перем СписокОбработчиковУправляемойФормы;
Перем СоответствиеСтраницПанелей;	//соответствие. Ключ - имя элемента формы. Значение - структура с полями Страница и Панель. Нужно для нахождения иерархии формы
Перем СоответствиеИдентификаторовКоманд; //соответствие. Ключ - идентификатор команды. Значение - имя команды

Перем ИмяПервойФормы Экспорт;
Перем ИмяВторойФормы Экспорт;

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//==============================================================================================================================================

//настройка интерфейса
Процедура ПриОткрытии()
	
	Если РасширенныйАнализ = Истина тогда //обычная форма
		//заполнение значений переменных, отвечающих за свойства обычной формы
		ИнициализацияКонтекстаОбычнойФормы();
		//настройка интерфейса
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.СтраницаОбычнойФормы;
		Если СравнениеФорм = Истина Тогда
			ЭлементыФормы.ПанельЭлементовФормы.ТекущаяСтраница     = ЭлементыФормы.ПанельЭлементовФормы.Страницы.Страница2;
			ЭлементыФормы.ТекстМодуляФормы.Видимость			   = Ложь;
			ЭлементыФормы.ВывестиСравнениеМодулей.Видимость		   = Истина;
			ЭлементыФормы.ВывестиСравнениеДвоичныхДанных.Видимость = Истина;
			ЭлементыФормы.ТолькоИзмененные.Видимость              = Истина;
			ЭлементыФормы.СтруктурноеСравнениеМодуля.Видимость	   = Истина;
			ЭлементыФормы.СравнениеРеквизитов.Видимость			   = Истина;
			ЭлементыФормы.Гиперссылка.Заголовок	   = "Открыть диалоговое окно первой формы";
			ЭлементыФормы.Гиперссылка1.Видимость   = Истина;
			ЭлементыФормы.Гиперссылка1.Доступность = Истина;
		Иначе
			ЭлементыФормы.ПанельЭлементовФормы.ТекущаяСтраница     = ЭлементыФормы.ПанельЭлементовФормы.Страницы.Страница1;
		КонецЕсли;
	Иначе  //управляемая форма
		СформироватьСписокОбработчиковСобытийУправляемойФормы();
		CформироватьСоответствиеСвойствУправляемойФормы();
		//настройка интерфейса
		ЭлементыФормы.ПанельРеквизитов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитов.Страницы.СтраницаУправляемойФормы;
		ЭлементыФормы.Гиперссылка.Видимость			= Ложь;
		ЭлементыФормы.Гиперссылка.Доступность		= Ложь;
		ЭлементыФормы.ГиперссылкаФормы.ГиперСсылка	= Ложь;
		ЭлементыФормы.Панель1.Страницы.КомандныйИнтерфейс.Видимость = Истина;
		Если СравнениеФорм = Истина Тогда
			ЭлементыФормы.ПанельЭлементовФормы.ТекущаяСтраница     = ЭлементыФормы.ПанельЭлементовФормы.Страницы.Страница2;
			ЭлементыФормы.ТекстМодуляФормы.Видимость			   		= Ложь;
			ЭлементыФормы.ВывестиСравнениеМодулей.Видимость        		= Истина;
			ЭлементыФормы.ВывестиСравнениеДвоичныхДанных.Видимость 		= Истина;
			ЭлементыФормы.ТолькоИзмененные.Видимость              = Истина;
			ЭлементыФормы.СтруктурноеСравнениеМодуля.Видимость	   = Истина;
			ЭлементыФормы.СравнениеРеквизитовУправляемойФормы.Видимость = Истина;
			ЭлементыФормы.СравнениеПараметров.Видимость = Истина;
			ЭлементыФормы.СравнениеКоманд.Видимость = Истина;
			ЭлементыФормы.СравнениеКомандныхПанелей.Видимость = Истина;
			ЭлементыФормы.СравнениеПанелейНавигации.Видимость = Истина;
		Иначе
			ЭлементыФормы.ПанельЭлементовФормы.ТекущаяСтраница     = ЭлементыФормы.ПанельЭлементовФормы.Страницы.Страница1;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = Заголовок + " <" + ГиперссылкаФормы + "> " + ?(РасширенныйАнализ=Истина,"ОФ", "УФ");
	
КонецПроцедуры

//назначение форме владельца (чтобы можно было открыть несколько окон анализа и сравнения форм рядом и все они были подчиненными одной форме-владельцу)
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка) 
	ЭтаФорма.ВладелецФормы=ЭтотОбъект.ПолучитьФорму("Форма",,"КлючУникальности");
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца=Истина;
КонецПроцедуры

//используется при работе с v8diff
Процедура ПриЗакрытии()
	Если ЗавершитьРаботу1СПослеЗакрытия=Истина И РежимВыбораОбъекта=4 Тогда
		ВременныйКаталог = Новый Файл(КаталогДляРаспаковкиОбновления);
		Если ВременныйКаталог.Существует() И ВременныйКаталог.Путь = КаталогВременныхФайлов() Тогда
			УдалитьФайлы(КаталогДляРаспаковкиОбновления);
		КонецЕсли;
		ВременныйКаталог = Новый Файл(КаталогДляРаспаковкиКонфигурации);
		Если ВременныйКаталог.Существует() И ВременныйКаталог.Путь = КаталогВременныхФайлов() Тогда
			УдалитьФайлы(КаталогДляРаспаковкиКонфигурации);
		КонецЕсли;
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ КНОПОК ФОРМЫ
//==============================================================================================================================================

//открывает виртуальную форму для анализа
Процедура ГиперссылкаНажатие(Элемент)
	Если СравнениеФорм=Истина Тогда
		ФормаДляДекомпиляции=ПерваяФорма;
	Иначе
		ФормаДляДекомпиляции=ОбрабатываемаяФорма;
	КонецЕсли;
	ТекстСвойствФормы=ПолучениеСвойствФормы(ФормаДляДекомпиляции);
	ТекстФормы = ДекомпиляторФормы();
	ТекстФормы=ТекстСвойствФормы+Символы.ПС+ТекстФормы;
	ВиртФорма = ПолучитьФорму("ВиртуальнаяФорма");
	ВиртФорма.Ключ=ЭтаФорма;
	ВиртФорма.ТолькоПросмотр = Истина;
	ВиртФорма.ТекстФормы = ТекстФормы;
	ВиртФорма.Открыть();
КонецПроцедуры

//открывает виртуальную форму сравнения для анализа
Процедура Гиперссылка1Нажатие(Элемент)
	ТекстСвойствФормы=ПолучениеСвойствФормы(ОбрабатываемаяФорма);
	ТекстФормы = ДекомпиляторФормы(2);
	ТекстФормы=ТекстСвойствФормы+Символы.ПС+ТекстФормы;
	ВиртФорма = ПолучитьФорму("ВиртуальнаяФорма");
	ВиртФорма.ТолькоПросмотр = Истина;
	ВиртФорма.ТекстФормы = ТекстФормы;
	ВиртФорма.Ключ=ЭтаФорма;
	ВиртФорма.Открыть();
КонецПроцедуры

//в режиме анализа открывает текст декомпиляции формы - а в режиме сравнения сравнение текстов декомпиляции форм
Процедура ГиперссылкаФормыНажатие(Элемент)
	Если СравнениеФорм=Истина тогда
		СравнениеФайлов = ТекстовоеСравнениеВоВременныхФайлах(ДекомпиляторФормы(),ДекомпиляторФормы(2));
		СравнениеФайлов.ПоказатьРазличия();
	Иначе
		ТекстФормы=Новый ТекстовыйДокумент;
		ТекстФормы.УстановитьТекст(ДекомпиляторФормы());
		ТекстФормы.Показать();
	КонецЕсли;
КонецПроцедуры

//открывает отчет о декомпиляции изменений формы
Процедура ДекомпилироватьИзмененияНажатие(Элемент)
	ТекстИзменений=Новый ТекстовыйДокумент;
	ТекстИзменений.УстановитьТекст(ДекомпиляторИзмененийФормы());
	ТекстИзменений.Показать("Отчет о декомпиляции изменений формы");
КонецПроцедуры

//вызывает сравнение текстов модулей
Процедура ВывестиСравнениеМодулейНажатие(Элемент)
	Если СтруктурноеСравнениеМодулей=Истина и Элемент = ЭлементыФормы.ВМодуляхФорм  Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.Модуль;
	Иначе
		Если МодульВторойФормы="" тогда
			ПервыйМодуль = МодульФормы;
			ВторойМодуль = ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст()
		Иначе
			ПервыйМодуль = Новый ТекстовыйДокумент;
			ПервыйМодуль.Прочитать(МодульФормы);
			ПервыйМодуль = ПервыйМодуль.ПолучитьТекст();
			ВторойМодуль = Новый ТекстовыйДокумент;
			ВторойМодуль.Прочитать(МодульВторойФормы);
			ВторойМодуль = ВторойМодуль.ПолучитьТекст();
		КонецЕсли;
		СравнениеФайлов = ТекстовоеСравнениеВоВременныхФайлах(ПервыйМодуль,ВторойМодуль,ИмяПервойФормы,ИмяВторойФормы);
		СравнениеФайлов.ПоказатьРазличия();
	КонецЕсли;
КонецПроцедуры

//вызывает сравнение двоичного представления формы
Процедура ВывестиСравнениеДвоичныхДанныхНажатие(Элемент)
	СравнениеФайлов=Новый СравнениеФайлов;
	СравнениеФайлов.ПервыйФайл=ФайлПервойФормы;
	СравнениеФайлов.ВторойФайл=ФормаСтрокой;
	СравнениеФайлов.ИгнорироватьПустоеПространство=Истина;
	СравнениеФайлов.СпособСравнения=СпособСравненияФайлов.ТекстовыйДокумент;
	СравнениеФайлов.ПоказатьРазличия();
КонецПроцедуры

//открывает вкладку "Реквизиты"
Процедура ВРеквизитахФормНажатие(Элемент)
	Если РасширенныйАнализ = Истина Тогда
		ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.Реквизиты;
	Иначе
		ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.Реквизиты;
		ЭлементыФормы.ПанельУправляемойФормы.ТекущаяСтраница = ЭлементыФормы.ПанельУправляемойФормы.Страницы.Реквизиты;
	КонецЕсли;
КонецПроцедуры

//открывает вкладку "Команды"
Процедура ВКомандахФормНажатие(Элемент)
	ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.Реквизиты;
	ЭлементыФормы.ПанельУправляемойФормы.ТекущаяСтраница = ЭлементыФормы.ПанельУправляемойФормы.Страницы.Команды;
КонецПроцедуры

//открывает вкладку "Параметры"
Процедура ВПараметрахФормНажатие(Элемент)
	ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.Реквизиты;
	ЭлементыФормы.ПанельУправляемойФормы.ТекущаяСтраница = ЭлементыФормы.ПанельУправляемойФормы.Страницы.Параметры;
КонецПроцедуры

//навигация по изменениям в дереве элементов
Процедура ПоискРазличийСледующее(Кнопка)
	
	Нашли=Ложь;
	НайденнаяСтрока=Неопределено;
	
	Если ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока.Уровень() <> 0 Тогда
		СтрокаРодителя 	= ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока.Родитель;
		ИндексТекСтроки = СтрокаРодителя.Строки.Индекс(ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока);
	Иначе 
		СтрокаРодителя 	= ДеревоСравнения;
		ИндексТекСтроки = ДеревоСравнения.Строки.Индекс(ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока);
	КонецЕсли;
	
	Пока ИндексТекСтроки < СтрокаРодителя.Строки.Количество() Цикл
		//ищем, рекурсивно обходя все подчиненные строки 
		ИскатьСледующее(СтрокаРодителя.Строки[ИндексТекСтроки],Нашли,НайденнаяСтрока);
		Если Нашли = Истина Тогда	
			ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = НайденнаяСтрока;
			Возврат;
		КонецЕсли;
		//повышаем индекс проверяемой строки
		ИндексТекСтроки = ИндексТекСтроки + 1;
		//проверяем, есть ли изменения в строке
		Если ИндексТекСтроки < СтрокаРодителя.Строки.Количество() И СтрокаРодителя.Строки[ИндексТекСтроки].ЕстьИзменения <> 0 Тогда
			ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = СтрокаРодителя.Строки[ИндексТекСтроки];
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	//если не нашли -  поднимаемся на строки более высокого уровня и уже там рекурсивно обходим все подчиненные
	Если СтрокаРодителя <> ДеревоСравнения Тогда
		Пока СтрокаРодителя.Родитель <> Неопределено Цикл
			//поднимаемся на строки более высокого уровня
			РодительскаяСтрока	= СтрокаРодителя;
			СтрокаРодителя		= СтрокаРодителя.Родитель;
			ИндексТекСтроки		= СтрокаРодителя.Строки.Индекс(РодительскаяСтрока)+1;
			
			Пока ИндексТекСтроки < СтрокаРодителя.Строки.Количество() Цикл
				//проверяем, есть ли изменения в строке
				Если СтрокаРодителя.Строки[ИндексТекСтроки].ЕстьИзменения <> 0 тогда
					ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = СтрокаРодителя.Строки[ИндексТекСтроки];
					Возврат;
				КонецЕсли;
				//ищем, рекурсивно обходя все подчиненные строки 
				ИскатьСледующее(СтрокаРодителя.Строки[ИндексТекСтроки],Нашли,НайденнаяСтрока);
				Если Нашли = Истина Тогда
					ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = НайденнаяСтрока;
					Возврат;
				КонецЕсли;
				//повышаем индекс проверяемой строки
				ИндексТекСтроки=ИндексТекСтроки + 1;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Нашли тогда
		Предупреждение("Достигнут конец дерева сравнения элементов форм");
	КонецЕсли;
	
КонецПроцедуры

//навигация по изменениям в дереве элементов
Процедура ПоискРазличийПредыдущее(Кнопка)
	
	Нашли=Ложь;
	НайденнаяСтрока=Неопределено;
	Уровень = ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока.Уровень();
	
	Если ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока.Уровень() <> 0 Тогда
		СтрокаРодителя 	= ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока.Родитель;
		ИндексТекСтроки = СтрокаРодителя.Строки.Индекс(ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока)-1;
	Иначе 
		СтрокаРодителя 	= ДеревоСравнения;
		ИндексТекСтроки = ДеревоСравнения.Строки.Индекс(ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока)-1;
	КонецЕсли;
	
	Пока ИндексТекСтроки >= 0 Цикл
		//ищем, рекурсивно обходя все подчиненные строки 
		ИскатьПредыдущее(СтрокаРодителя.Строки[ИндексТекСтроки],Нашли,НайденнаяСтрока);
		Если Нашли = Истина Тогда	
			ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = НайденнаяСтрока;
			Возврат;
		КонецЕсли;
		//проверяем, есть ли изменения в строке
		Если СтрокаРодителя.Строки[ИндексТекСтроки].ЕстьИзменения <> 0 Тогда
			ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = СтрокаРодителя.Строки[ИндексТекСтроки];
			Возврат;
		КонецЕсли;
		//понижаем индекс проверяемой строки
		ИндексТекСтроки = ИндексТекСтроки - 1;
		
	КонецЦикла;
	
	//если не нашли -  поднимаемся на строки более высокого уровня и уже там рекурсивно обходим все подчиненные
	Пока Уровень > 1 Цикл
		//поднимаемся на строки более высокого уровня
		РодительскаяСтрока	= СтрокаРодителя;
		Уровень 			= СтрокаРодителя.Уровень()+1;
		СтрокаРодителя		= СтрокаРодителя.Родитель;
		Если СтрокаРодителя=Неопределено Тогда
			СтрокаРодителя=ДеревоСравнения;
		КонецЕсли;
		ИндексТекСтроки		= СтрокаРодителя.Строки.Индекс(РодительскаяСтрока);
		
		Пока ИндексТекСтроки >= 0 Цикл
			//проверяем, есть ли изменения в строке
			Если СтрокаРодителя.Строки[ИндексТекСтроки].ЕстьИзменения <> 0 тогда
				ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = СтрокаРодителя.Строки[ИндексТекСтроки];
				Возврат;
			КонецЕсли;
			//понижаем индекс проверяемой строки
			ИндексТекСтроки=ИндексТекСтроки - 1;
			Если ИндексТекСтроки>=0 Тогда
				//ищем, рекурсивно обходя все подчиненные строки 
				ИскатьПредыдущее(СтрокаРодителя.Строки[ИндексТекСтроки],Нашли,НайденнаяСтрока);
				Если Нашли = Истина Тогда
					ЭлементыФормы.ДеревоСравнения.ТекущаяСтрока = НайденнаяСтрока;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	Если НЕ Нашли тогда
		Предупреждение("Достигнуто начало дерева сравнения элементов форм");
	КонецЕсли;
КонецПроцедуры

//вспомогательная процедура навигации
Процедура ИскатьСледующее(Строка,Нашли,НайденнаяСтрока)
	Для каждого Стр Из Строка.Строки Цикл
		Если Стр.ЕстьИзменения<>0  Тогда
			НайденнаяСтрока=Стр;
			Нашли=Истина;
			Прервать;
		КонецЕсли;
		ИскатьСледующее(Стр,Нашли,НайденнаяСтрока);
		Если Нашли=Истина тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

//вспомогательная процедура навигации
Процедура ИскатьПредыдущее(РодительскаяСтрока,Нашли, НайденнаяСтрока)
	ИндексПроверяемойСтроки=РодительскаяСтрока.Строки.Количество()-1;
	Пока ИндексПроверяемойСтроки>=0 Цикл
		ИскатьПредыдущее(РодительскаяСтрока.Строки[ИндексПроверяемойСтроки],Нашли,НайденнаяСтрока);
		Если Нашли=Истина тогда
			Прервать;
		КонецЕсли;
		Если РодительскаяСтрока.Строки[ИндексПроверяемойСтроки].ЕстьИзменения<>0  Тогда
			НайденнаяСтрока=РодительскаяСтрока.Строки[ИндексПроверяемойСтроки];
			Нашли=Истина;
			Прервать;
		КонецЕсли;
		ИндексПроверяемойСтроки = ИндексПроверяемойСтроки - 1;
	КонецЦикла; 
КонецПроцедуры

//==============================================================================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//==============================================================================================================================================

//перестраивает таблицу структурного сравнения модулей
Процедура ТолькоИзмененнныеПриИзменении(Элемент)
	
	КодВозврата = Вопрос("Будет переформирована таблица структурного сравнения модуля. Продолжить?",РежимДиалогаВопрос.ОКОтмена);
	Если КодВозврата=КодВозвратаДиалога.ОК Тогда 
		СтруктурноеСравнениеМодуля.Очистить();
		Если РасширенныйАнализ Тогда
		ЗаполнитьТаблицуСравненияПроцедурМодулейФорм();
	Иначе
		ЗаполнитьТаблицуСравненияПроцедурМодулейУправляемыхФорм();
		КонецЕсли;
	Иначе
		ТолькоИзмененные = Не ТолькоИзмененные;
	КонецЕсли;

КонецПроцедуры

//если форма свойств закрыта - двойной щелчок по дереву элементов формы открывает ее
Процедура ДеревоЭлементовФормыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	//Если РасширенныйАнализ = Истина Тогда
		Форм = ПолучитьФорму("ФормаСвойств",ЭтаФорма);
		Если НЕ Форм.Открыта() Тогда
			Если СравнениеФорм = Истина Тогда
				Форм.ЭлементыФормы.ПанельСвойств.ТекущаяСтраница=Форм.ЭлементыФормы.ПанельСвойств.Страницы.Страница2;
			Иначе
				Форм.ЭлементыФормы.ПанельСвойств.ТекущаяСтраница=Форм.ЭлементыФормы.ПанельСвойств.Страницы.Страница1;
			КонецЕсли;
			Форм.Открыть();
			ДеревоЭлементовФормыПриАктивизацииСтроки(Элемент);
			ЭтаФорма.Активизировать();
		КонецЕсли;
		//Если РасширенныйАнализ=Ложь И СравнениеФорм=Истина Тогда
		//	СравнениеСвойств = ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.СвойстваПервойФормы,ВыбраннаяСтрока.СвойстваВторойФормы);
		//	СравнениеСвойств.ПоказатьРазличия();
		//КонецЕсли;
	//Иначе
	//	Если СравнениеФорм = Ложь Тогда
	//		ТекстСвойств = Новый ТекстовыйДокумент;
	//		ТекстСвойств.УстановитьТекст(ВыбраннаяСтрока.СвойстваЭлемента);
	//		ТекстСвойств.Показать();
	//		ОткрытьЗначение(ВыбраннаяСтрока.ДействияЭлемента);
	//	Иначе
	//		СравнениеСвойств = ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.СвойстваПервойФормы,ВыбраннаяСтрока.СвойстваВторойФормы);
	//		СравнениеСвойств.ПоказатьРазличия();
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

//в режиме сравнения - вызов сравнения различающихся процедур модуля
Процедура СтруктурноеСравнениеМодуляВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ПервыйПрефикс = ?(ИмяПервойФормы<>Неопределено,ИмяПервойФормы+"_","");
	ВторойПрефикс = ?(ИмяВторойФормы<>Неопределено,ИмяВторойФормы+"_","");
	СравнениеПроцедур=ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.ТекстПервогоЭлемента,ВыбраннаяСтрока.ТекстВторогоЭлемента,ПервыйПрефикс+ВыбраннаяСтрока.СтруктураПервогоМодуля,ВторойПрефикс+ВыбраннаяСтрока.СтруктураВторогоМодуля);
	СравнениеПроцедур.ПоказатьРазличия();
КонецПроцедуры

//при перемещении по дереву элементов отображать свойства текущей строки на панели свойств
Процедура ДеревоЭлементовФормыПриАктивизацииСтроки(Элемент)
	Форм=ПолучитьФорму("ФормаСвойств",ЭтаФорма);
	Если Форм.Открыта()  Тогда
		Если РасширенныйАнализ = Истина Тогда
			ВывестиСвойстваПоСтрокеЭлементовОбычнойФормы(Форм,Элемент);
		Иначе
			ВывестиСвойстваПоСтрокеЭлементовУправляемойФормы(Форм,Элемент);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура СписокРеквизитовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент <> ЭлементыФормы.СравнениеКоманд И Элемент <> ЭлементыФормы.СравнениеКоманд И ДанныеСтроки.ОсновнойРеквизит=Истина тогда
		ОформлениеСтроки.Шрифт=Новый Шрифт(,,истина);
	КонецЕсли;
	Если Элемент=ЭлементыФормы.СравнениеРеквизитов ИЛИ Элемент = ЭлементыФормы.СравнениеРеквизитовУправляемойФормы ИЛИ Элемент = ЭлементыФормы.СравнениеКоманд ИЛИ Элемент = ЭлементыФормы.СравнениеКоманд Тогда
		Если ДанныеСтроки.ЕстьИзменения = 1 Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ДанныеСтроки.ЕстьИзменения = 2 Тогда
			ОформлениеСтроки.Ячейки[1].ЦветФона = Новый Цвет(192,220,192);
		ИначеЕсли ДанныеСтроки.ЕстьИзменения = 3 Тогда
			ОформлениеСтроки.Ячейки[0].ЦветФона = Новый Цвет(255,228,196);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СписокРеквизитовУправляемойФормыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки[0].ОтображатьКартинку = Истина;
	Если Элемент = ЭлементыФормы.СписокРеквизитовУправляемойФормы Тогда
		Если ДанныеСтроки.ОсновнойРеквизит = Истина Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,,истина);
		КонецЕсли;
		ОформлениеСтроки.Ячейки[0].ИндексКартинки = ДанныеСтроки.ИндексКартинки;
	Иначе
		ОформлениеСтроки.Ячейки[0].ИндексКартинки = 0;
	КонецЕсли;

КонецПроцедуры

Процедура ДеревоСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ЕстьИзменения = 1 Тогда //элементы изменены
		ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения = 2 Тогда //элементы добавлены
		ОформлениеСтроки.Ячейки.ИмяЭлемента.ЦветФона = Новый Цвет(192,220,192);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения = 3 Тогда //элементы удалены
		ОформлениеСтроки.Ячейки.ДанныеПервойФормы.ЦветФона = Новый Цвет(255,228,196);
	КонецЕсли;
КонецПроцедуры

Процедура СтруктурноеСравнениеМодуляПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЕстьИзменения=3 Тогда
		ОформлениеСтроки.Ячейки.СтруктураПервогоМодуля.ОтображатьКартинку=Ложь;
		ОформлениеСтроки.ЦветФона = Новый Цвет(192,220,192);
	ИначеЕсли ДанныеСтроки.ЕстьИзменения=2 Тогда
		ОформлениеСтроки.Ячейки.СтруктураВторогоМодуля.ОтображатьКартинку=Ложь;
		ОформлениеСтроки.ЦветФона = Новый Цвет(255,228,196);
	Иначе
		Если ДанныеСтроки.ЕстьИзменения = 1 Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Сортировка="_РазделПеременных_" или ДанныеСтроки.Сортировка="_РазделОператоров_" Тогда
		ОформлениеСтроки.Ячейки.СтруктураПервогоМодуля.ОтображатьКартинку=Ложь;
		ОформлениеСтроки.Ячейки.СтруктураВторогоМодуля.ОтображатьКартинку=Ложь;
	КонецЕсли;
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ПОСТРОЕНИЯ ДЕРЕВА ЭЛЕМЕНТОВ ФОРМЫ ДЛЯ ОБЫЧНЫХ ФОРМ
//==============================================================================================================================================

//строит дерево элементов обычной формы
//из публикации http://infostart.ru/public/99363/ от Istur
Процедура ПостроитьДерево(пФормаКопия,мТекФорма,Дерево) Экспорт    
	
	//добавляем в дерево элементов колонки, которые невозможно добавить в интерактивном режиме (у них должен быть произвольный тип)
	КолонкиДерева = Дерево.Колонки;
	КолонкиДерева.Добавить("Элемент");
	КолонкиДерева.Добавить("Панель");
	КолонкиДерева.Добавить("Страница");
	КолонкиДерева.Добавить("ТаблицаСвойств");
	КолонкиДерева.Добавить("ПривязкиЭлемента");
	КолонкиДерева.Добавить("ДействияЭлемента");
	//еще одна колонка - в качестве "счетчика"
	КолонкиДерева.Добавить("Пометка",Новый ОписаниеТипов("Булево"));
			
	//корневая строка формы
	СтрокаФормы = Дерево.Строки.Добавить();
	СтрокаФормы.ИмяЭлемента 		= "Форма";
	СтрокаФормы.Элемент 			= мТекФорма;
	СтрокаФормы.ТипЭлемента 		= "Форма";
	СтрокаФормы.КартинкаФормы 		= ИндексКартинкиЭлФормы("Форма");
	СтрокаФормы.ТаблицаСвойств 		= ЗаполнитьТаблицуСвойств(СтрокаФормы,мТекФорма);
	СтрокаФормы.ПривязкиЭлемента 	= Новый ТаблицаЗначений;
	
	//получаем текст модуля для определения текста обработчиков
	Если ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст() = "" Тогда
		ТекстФормы = Новый ТекстовыйДокумент;
		Если МодульВторойФормы = "" Тогда
			ТекстФормы.Прочитать(МодульФормы);
		Иначе
			ТекстФормы.Прочитать(МодульВторойФормы);
		КонецЕсли;
		ПолученныйТекстМодуля = ТекстФормы.ПолучитьТекст();
	Иначе
		ПолученныйТекстМодуля = ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст();
	КонецЕсли;
	
	//заполняем таблицу обработчиков
	СтрокаФормы.ДействияЭлемента = ЗаполнитьТаблицуДействий(СтрокаФормы,мТекФорма,ПолученныйТекстМодуля);
	
	//обходим все элементы формы, заполняем их свойства, привязки, действия
	Для каждого ЭлементФормы Из мТекФорма.ЭлементыФормы Цикл
		Если СтрокаФормы.Строки.Найти(ЭлементФормы.Имя,"ИмяЭлемента")=Неопределено Тогда
			Стр1Уровня = СтрокаФормы.Строки.Добавить();
			Стр1Уровня.Элемент 			= ЭлементФормы;   
			Стр1Уровня.ИмяЭлемента 		= ЭлементФормы.Имя;
			Стр1Уровня.ПолноеИмя 		= ЭлементФормы.Имя;
			Стр1Уровня.ТипЭлемента 		= Строка(Тип(ЭлементФормы));
			Стр1Уровня.КартинкаФормы 	= ИндексКартинкиЭлФормы(Строка(Стр1Уровня.ТипЭлемента));
			//Стр1Уровня.Парсить 			= Истина;
			Стр1Уровня.Пометка          = Истина;
			Если СоответствиеСтраницПанелей.Получить(ЭлементФормы.Имя)<>Неопределено Тогда
			Стр1Уровня.Панель = СоответствиеСтраницПанелей.Получить(ЭлементФормы.Имя).Панель;
			Стр1Уровня.Страница = СоответствиеСтраницПанелей.Получить(ЭлементФормы.Имя).Страница;
			КонецЕсли;
			Стр1Уровня.Верх 			= ЭлементФормы.Верх;
			Стр1Уровня.Лево 			= ЭлементФормы.Лево;
			Стр1Уровня.Площадь 			= ЭлементФормы.Высота*ЭлементФормы.Ширина;
			Стр1Уровня.ТаблицаСвойств	= ЗаполнитьТаблицуСвойств(Стр1Уровня,мТекФорма);
			Стр1Уровня.ПривязкиЭлемента	= ЗаполнитьТаблицуПривязок(Стр1Уровня,мТекФорма);
			Стр1Уровня.ДействияЭлемента	= ЗаполнитьТаблицуДействий(Стр1Уровня,мТекФорма,ПолученныйТекстМодуля);
			//для командных панелей заполняем кнопки, для табличных полей - колонки, для просто панелей - страницы
			Если Стр1Уровня.ТипЭлемента = "Панель" Тогда
				Для каждого СтраницаПанели Из ЭлементФормы.Страницы Цикл
					Стр2Уровня = Стр1Уровня.Строки.Добавить();
					Стр2Уровня.Элемент			= СтраницаПанели;
					Стр2Уровня.ИмяЭлемента 		= СтраницаПанели.Имя;
					Стр2Уровня.ПолноеИмя		= Стр1Уровня.ИмяЭлемента+"_"+СтраницаПанели.Имя;
					Стр2Уровня.ТипЭлемента		= "Страница панели";
					Стр2Уровня.КартинкаФормы 	= ИндексКартинкиЭлФормы("Страница панели");
					Стр2Уровня.ТаблицаСвойств	= ЗаполнитьТаблицуСвойств(Стр2Уровня,мТекФорма);
					Стр2Уровня.ПривязкиЭлемента	= Новый ТаблицаЗначений;
					Стр2Уровня.ДействияЭлемента	= Новый ТаблицаЗначений;
				КонецЦикла;
			ИначеЕсли Стр1Уровня.ТипЭлемента = "Командная панель" Тогда
				Для каждого Кнопка из ЭлементФормы.Кнопки Цикл
					Если Стр1Уровня.Строки.Найти(Кнопка.Имя,"ИмяЭлемента") = Неопределено Тогда
						ДобавитьКнопкуВДерево(Стр1Уровня, Кнопка, "ЭлементыФормы." + ЭлементФормы.Имя + ".Кнопки",мТекФорма);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Стр1Уровня.ТипЭлемента = "Табличное поле" Тогда
				Для каждого Колонка из ЭлементФормы.Колонки Цикл
					Если Стр1Уровня.Строки.Найти(Колонка.Имя,"ИмяЭлемента") = Неопределено тогда
						ДобавитьКолонкуВДерево(Стр1Уровня,Колонка, "ЭлементыФормы." + ЭлементФормы.Имя + ".Колонки",мТекФорма,ПолученныйТекстМодуля);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
	
	////Находим строки только с панелями
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("ТипЭлемента","Панель");
	//МассивСтрок = СтрокаФормы.Строки.НайтиСтроки(СтруктураОтбора,Истина); 
	//
	////определяем, какая панель самая маленькая - ее будем обрабатывать первой (сортируем панели по размеру в порядке возрастания)
	//Для Сч1 = 0 По МассивСтрок.ВГраница()-1 Цикл
	//	Для Сч2 = 0 По МассивСтрок.ВГраница()-Сч1-1 Цикл
	//		Если МассивСтрок[Сч2].Площадь > МассивСтрок[Сч2+1].Площадь Тогда
	//			мВрем = МассивСтрок[Сч2];
	//			МассивСтрок[Сч2] = МассивСтрок[Сч2+1];
	//			МассивСтрок[Сч2+1] = мВрем;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	
	//деструктивный анализ (удаляем страницы) - проставляем для элементов принадлежность к страницам и панелям
	//Для каждого СтрДерева Из МассивСтрок Цикл
	//	НовПанель = СтрДерева.Элемент;
	//	ИмяПанели = НовПанель.Имя;
	//	пФормаКопия.ЭлементыФормы[ИмяПанели].УстановитьДействие("ПриСменеСтраницы", Неопределено);
	//	пФормаКопия.ЭлементыФормы[ИмяПанели].Страницы[пФормаКопия.ЭлементыФормы[ИмяПанели].Страницы.Количество()-1].Видимость = Истина;
	//	Для каждого Страница Из НовПанель.Страницы Цикл
	//		пФормаКопия.ЭлементыФормы[ИмяПанели].Страницы.Удалить(0);
	//		Для каждого Стр1Уровня Из СтрокаФормы.Строки Цикл
	//			Если пФормаКопия.ЭлементыФормы.Найти(Стр1Уровня.Элемент.Имя) = Неопределено Тогда
	//				Если Стр1Уровня.Парсить <> Ложь Тогда
	//					Если Стр1Уровня.Страница = Неопределено Тогда
	//						Стр1Уровня.Страница = Страница.Имя;
	//						Стр1Уровня.Панель = ИмяПанели;
	//						Стр1Уровня.Парсить = Ложь;
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла; 
	//КонецЦикла; 
	
	//формируем дерево элементов формы
	Строки1Уровня = СтрокаФормы.Строки;
	ПослСтрока = Строки1Уровня.Количество()-1;
	Для Сч = 0 По ПослСтрока Цикл
		ТекСч = ПослСтрока-Сч;
		ТекСтрока = Строки1Уровня[ТекСч];
		Если ЗначениеЗаполнено(ТекСтрока.Страница) Тогда
			СтрРодитель = Строки1Уровня.Найти(ТекСтрока.Панель+"_"+ТекСтрока.Страница,"ПолноеИмя",Истина);
			НовСтр = СтрРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ТекСтрока);			
			ПеренестиПодчиненныеСтроки(НовСтр,ТекСтрока);		
			Строки1Уровня.Удалить(ТекСч);
		КонецЕсли;
	КонецЦикла;
	
	//чтобы строки располагались в порядке следования элементов на форме	
	СтрокаФормы.Строки.Сортировать("Верх,Лево",Истина);
	
	//раскроем все ветки дерева элементов
	Если  Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение Тогда
		ЭлементыФормы.ДеревоЭлементовФормы.НачальноеОтображениеДерева=НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	Иначе
		ЭлементыФормы.ДеревоЭлементовФормыСравнения.НачальноеОтображениеДерева=НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
КонецПроцедуры

//для построения дерева элементов второй формы
Процедура ПостроитьДеревоДляСравнения(пФормаКопия,мТекФорма) Экспорт
	ПерваяФорма = ДеревоЭлементовФормы.Строки[0].Элемент;
	ПостроитьДерево(пФормаКопия,мТекФорма,ДеревоЭлементовФормыСравнения);
КонецПроцедуры

//для построения дерева сравнения обычных форм
Процедура ПостроитьДеревоСравнения() Экспорт
	
	СчетчикИзмененийЭлементовФорм = 0;
	
	ДеревоСравнения.Колонки.Добавить("СвойстваПервойФормы");
	ДеревоСравнения.Колонки.Добавить("СвойстваВторойФормы");
	ДеревоСравнения.Колонки.Добавить("ПривязкиПервойФормы");
	ДеревоСравнения.Колонки.Добавить("ПривязкиВторойФормы");
	ДеревоСравнения.Колонки.Добавить("ДействияПервойФормы");
	ДеревоСравнения.Колонки.Добавить("ДействияВторойФормы");
	ДеревоСравнения.Колонки.Добавить("Элемент");
	ДеревоСравнения.Колонки.Добавить("Панель");
	ДеревоСравнения.Колонки.Добавить("Страница");
	
	Для каждого ТекущаяСтрока из ДеревоЭлементовФормы.Строки Цикл
		СтрокаСравнения=ДеревоЭлементовФормыСравнения.Строки[0];
		НоваяСтрока=ДеревоСравнения.Строки.Добавить();
		НоваяСтрока.ДанныеПервойФормы 	= ТекущаяСтрока.ИмяЭлемента;
		НоваяСтрока.КартинкаПервойФормы = ТекущаяСтрока.КартинкаФормы;
		НоваяСтрока.ИмяЭлемента 		= СтрокаСравнения.ИмяЭлемента;
		НоваяСтрока.Элемент 			= СтрокаСравнения.Элемент;
		НоваяСтрока.КартинкаВторойФормы = СтрокаСравнения.КартинкаФормы;
		НоваяСтрока.СвойстваПервойФормы = ТекущаяСтрока.ТаблицаСвойств;
		НоваяСтрока.СвойстваВторойФормы = СтрокаСравнения.ТаблицаСвойств;
		НоваяСтрока.ПривязкиПервойФормы = ТекущаяСтрока.ПривязкиЭлемента;
		НоваяСтрока.ПривязкиВторойФормы = СтрокаСравнения.ПривязкиЭлемента;
		НоваяСтрока.ДействияПервойФормы = ТекущаяСтрока.ДействияЭлемента;
		НоваяСтрока.ДействияВторойФормы = СтрокаСравнения.ДействияЭлемента;
		Если ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваВторойФормы) и ЗначениеВСтрокуВнутр(НоваяСтрока.ПривязкиПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.ПривязкиВторойФормы) Тогда
			Если НоваяСтрока.ДействияПервойФормы.Количество()=0 Тогда
				НоваяСтрока.ЕстьИзменения = 0;
			ИначеЕсли ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияПервойФормы.ВыгрузитьКолонку(1))=ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияВторойФормы.ВыгрузитьКолонку(1)) Тогда	
				НоваяСтрока.ЕстьИзменения = 0;
			Иначе
				НоваяСтрока.ЕстьИзменения = 1; 
				СчетчикИзмененийЭлементовФорм = СчетчикИзмененийЭлементовФорм+1;
			КонецЕсли;
		Иначе
			НоваяСтрока.ЕстьИзменения=1;
			СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
		КонецЕсли;
		ПереборДереваРасширенныйАнализ(ТекущаяСтрока,НоваяСтрока,СтрокаСравнения);
	КонецЦикла;
	
	ЭлементыФормы.ДеревоСравнения.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	ВыводСтатистики();
	
КонецПроцедуры

Процедура ПостроитьДеревоXML() Экспорт
	
КонецПроцедуры

//==============================================================================================================================================
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ ПОСТРОЕНИЯ ДЕРЕВА ЭЛЕМЕНТОВ ФОРМЫ ДЛЯ ОБЫЧНЫХ ФОРМ (заимствованные из публикаций на www.infostart.ru)
//==============================================================================================================================================

//при выстраивании иерархии панелей и страниц
//из публикации http://infostart.ru/public/99363/ от Istur
Процедура ПеренестиПодчиненныеСтроки(СтрРодительПриемник,СтрИсточник) 
	Для каждого СтрИсточника Из СтрИсточник.Строки Цикл
		СтрРодительПриемник2 = СтрРодительПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрРодительПриемник2,СтрИсточника);
		ПеренестиПодчиненныеСтроки(СтрРодительПриемник2,СтрИсточника);
	КонецЦикла;
КонецПроцедуры

//для вывода строк колонок табличных полей в дереве элементов формы
//из публикации http://infostart.ru/public/16262/ от asady
Процедура ДобавитьКолонкуВДерево(тСтрока,Колонка,тПолноеИмя,мТекФорма,ПолученныйТекстМодуля) 
	
	Стр = тСтрока.Строки.Добавить();
	Стр.Элемент 			= Колонка;
	Стр.ИмяЭлемента 		= Колонка.Имя;
	Стр.ПолноеИмя 			= тПолноеИмя+"."+Колонка.Имя;
	Стр.ТипЭлемента 		= "Колонка табличного поля";
	Стр.КартинкаФормы 		= ИндексКартинкиЭлФормы("Колонка табличного поля");
	Стр.Лево 				= тСтрока.Элемент.Колонки.Индекс(Колонка);
	Стр.ТаблицаСвойств 		= ЗаполнитьТаблицуСвойств(стр,мТекФорма);
	Стр.ПривязкиЭлемента 	= Новый ТаблицаЗначений;
	ЭлементУправления = Строка(Стр.ТаблицаСвойств[0].ЭлементУправления);
	Если ЭлементУправления <> "" Тогда
		Стр.ДействияЭлемента 	= ЗаполнитьТаблицуДействий(Стр,мТекФорма,ПолученныйТекстМодуля,ЭлементУправления);
	Иначе
		Стр.ДействияЭлемента 	= Новый ТаблицаЗначений;
	КонецЕсли;
	
КонецПроцедуры	

//для вывода строк кнопок командных панелей в дерево элементов формы
//из публикации http://infostart.ru/public/16262/ от asady
Процедура ДобавитьКнопкуВДерево(ТекСтрока,Кнопка,тПолноеИмя,мТекФорма) 
	
	Стр = ТекСтрока.Строки.Добавить();
	Стр.Элемент 			= Кнопка;
	Стр.ИмяЭлемента 		= Кнопка.Имя;
	Стр.ПолноеИмя 			= тПолноеИмя + "." + Кнопка.Имя;
	Стр.ТипЭлемента			= "Кнопка командной панели";
	Стр.КартинкаФормы 		= ИндексКартинкиЭлФормы(Строка(Стр.ТипЭлемента));	
	Стр.Лево 				= ТекСтрока.Элемент.Кнопки.Индекс(Кнопка);
	Стр.ТаблицаСвойств 		= ЗаполнитьТаблицуСвойств(Стр,мТекФорма);
	Стр.ПривязкиЭлемента 	= Новый ТаблицаЗначений;
	Стр.ДействияЭлемента 	= Новый ТаблицаЗначений;
	Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
		Для каждого Кн Из Кнопка.Кнопки Цикл
			ДобавитьКнопкуВДерево(Стр,Кн,тПолноеИмя + "." + Кнопка.имя + ".Кнопки",мТекФорма);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

//устанавливает иконки для строк элементов формы
//из публикации http://infostart.ru/public/65449/ от alexer + иконки для строк элементов формы
Функция ИндексКартинкиЭлФормы(Ключ) 
	Если Ключ = "Кнопка" Тогда
		Возврат 0;
	ИначеЕсли Ключ = "Надпись" Тогда
		Возврат 1;
	ИначеЕсли Ключ = "Поле ввода" Тогда
		Возврат 2;
	ИначеЕсли Ключ = "Табличное поле" Тогда
		Возврат 3;
	ИначеЕсли Ключ = "Флажок" Тогда
		Возврат 4;
	ИначеЕсли Ключ = "Переключатель" Тогда
		Возврат 5;
	ИначеЕсли Ключ = "Поле списка" Тогда
		Возврат 6;
	ИначеЕсли Ключ = "Поле выбора" Тогда
		Возврат 7;
	ИначеЕсли Ключ = "Рамка группы" Тогда
		Возврат 8;
	ИначеЕсли Ключ = "Поле картинки" Тогда
		Возврат 9;
	ИначеЕсли Ключ = "Командная панель" Тогда
		Возврат 10;
	ИначеЕсли Ключ = "Панель" Тогда
		Возврат 11;
	ИначеЕсли Ключ = "Разделитель" Тогда
		Возврат 12;
	ИначеЕсли Ключ = "Поле табличного документа" Тогда
		Возврат 13;
	ИначеЕсли Ключ = "Поле текстового документа" Тогда
		Возврат 14;
	ИначеЕсли Ключ = "Полоса регулирования" Тогда
		Возврат 15;
	ИначеЕсли Ключ = "Сводная диаграмма" Тогда
		Возврат 16;
	ИначеЕсли Ключ = "Индикатор" Тогда
		Возврат 17;
	ИначеЕсли Ключ = "Календарь" Тогда
		Возврат 18;
	ИначеЕсли Ключ = "Поле графической схемы" Тогда
		Возврат 19;
	ИначеЕсли Ключ = "Поле географической схемы" Тогда
		Возврат 20;
	ИначеЕсли Ключ = "Выбор периода" Тогда
		Возврат 21;
	ИначеЕсли Ключ = "ПолеHTMLДокумента" Тогда
		Возврат 22;
	ИначеЕсли Ключ = "Диаграмма" Тогда
		Возврат 23;
	ИначеЕсли Ключ = "Диаграмма Ганта" Тогда
		Возврат 24;
	ИначеЕсли Ключ = "Дендрограмма" Тогда
		Возврат 25;
	ИначеЕсли Ключ = "Страница панели" Тогда
		Возврат 26;
	ИначеЕсли Ключ = "Кнопка командной панели" Тогда
		Возврат 27;
	ИначеЕсли Ключ = "Колонка табличного поля" тогда
		Возврат 30;
	ИначеЕсли Ключ = "Форма" Тогда
		Возврат 28;
	ИначеЕсли Ключ = "УправляемаяФорма" Тогда
		Возврат 31;
	ИначеЕсли Ключ = "КоманднаяПанель" Тогда
		Возврат 32;
	ИначеЕсли Ключ = "77ffcc29-7f2d-4223-b22f-19666e7250ba" Тогда
		Возврат 33;
	ИначеЕсли Ключ = "cd5394d0-7dda-4b56-8927-93ccbe967a01" Тогда
		Возврат 34;
	ИначеЕсли Ключ = "a9f3b1ac-f51b-431e-b102-55a69acdecad" Тогда
		Возврат 35;
	ИначеЕсли Ключ = "3d3cb80c-508b-41fa-8a18-680cdf5f1712" Тогда
		Возврат 36;
	ИначеЕсли Ключ = "143c00f7-a42d-4cd7-9189-88e4467dc768" Тогда
		Возврат 37;
	ИначеЕсли Ключ = "КонтекстноеМеню" Тогда
		Возврат 38;
	ИначеЕсли Ключ = "c5259a1d-518a-4afd-b98d-0176027e4feb" Тогда
		Возврат 39;
	Иначе
		Возврат 29;
	КонецЕсли;
КонецФункции	// ИндексКартинкиЭлФормы()

//==============================================================================================================================================
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ ПОСТРОЕНИЯ ДЕРЕВА ЭЛЕМЕНТОВ ФОРМЫ (мои)
//==============================================================================================================================================

Процедура ПереборДереваРасширенныйАнализ (СтрокаДерева,СтрокаНовогоДерева,СтрокаСравнения)
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		НоваяСтрокаСравнения = Неопределено;
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.ДанныеПервойФормы 	= Стр.ИмяЭлемента;
		НоваяСтрока.КартинкаПервойФормы = Стр.КартинкаФормы;
		НоваяСтрока.ТипЭлемента 		= Стр.ТипЭлемента;
		Если  СтрокаСравнения<>Неопределено тогда
			Если СтрокаСравнения.Строки.Найти(Стр.ПолноеИмя,"ПолноеИмя") <> Неопределено тогда
				НоваяСтрокаСравнения = СтрокаСравнения.Строки.Найти(Стр.ПолноеИмя,"ПолноеИмя");
				НоваяСтрока.ИмяЭлемента 		= НоваяСтрокаСравнения.ИмяЭлемента;
				НоваяСтрока.Элемент 			= НоваяСтрокаСравнения.Элемент;
				НоваяСтрока.Панель 				= НоваяСтрокаСравнения.Панель;
				НоваяСтрока.Страница 			= НоваяСтрокаСравнения.Страница;
				НоваяСтрока.КартинкаВторойФормы = НоваяСтрокаСравнения.КартинкаФормы;
				НоваяСтрока.СвойстваПервойФормы = Стр.ТаблицаСвойств;
				НоваяСтрока.СвойстваВторойФормы = НоваяСтрокаСравнения.ТаблицаСвойств;
				НоваяСтрока.ПривязкиПервойФормы = Стр.ПривязкиЭлемента;
				НоваяСтрока.ПривязкиВторойФормы = НоваяСтрокаСравнения.ПривязкиЭлемента;
				НоваяСтрока.ДействияПервойФормы = Стр.ДействияЭлемента;
				НоваяСтрока.ДействияВторойФормы = НоваяСтрокаСравнения.ДействияЭлемента;
				Если ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваВторойФормы) и ЗначениеВСтрокуВнутр(НоваяСтрока.ПривязкиПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.ПривязкиВторойФормы) тогда
					Если стр.ДействияЭлемента.Количество()=0 Тогда
						НоваяСтрока.ЕстьИзменения=0;
					ИначеЕсли ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияПервойФормы.ВыгрузитьКолонку(2))=ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияВторойФормы.ВыгрузитьКолонку(2)) Тогда	
						НоваяСтрока.ЕстьИзменения=0;
					Иначе
						НоваяСтрока.ЕстьИзменения=1;
						СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
					КонецЕсли;
					
				Иначе
					НоваяСтрока.ЕстьИзменения=1;
					СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
				КонецЕсли;
			Иначе 
				НоваяСтрока.ИмяЭлемента="<Отсутствует>";
				НоваяСтрока.КартинкаВторойФормы=29;
				НоваяСтрока.Панель=Стр.Панель;
				НоваяСтрока.ЕстьИзменения=3;
				СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
			КонецЕсли;
		Иначе
			НоваяСтрока.ИмяЭлемента="<Отсутствует>";
			НоваяСтрока.КартинкаВторойФормы=29;
			НоваяСтрока.ЕстьИзменения=3;
			СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
		КонецЕсли;
		ПереборДереваРасширенныйАнализ(стр,НоваяСтрока,НоваяСтрокаСравнения);
	КонецЦикла;
	Если СтрокаСравнения<>Неопределено  тогда
		Для каждого пр из СтрокаСравнения.Строки цикл
			Если СтрокаДерева.Строки.Найти(пр.ПолноеИмя,"ПолноеИмя")=Неопределено тогда
				НоваяСтрока=СтрокаНовогоДерева.Строки.Добавить();
				НоваяСтрока.ДанныеПервойФормы="<Отсутствует>"; 				
				НоваяСтрока.КартинкаПервойФормы=29;
				НоваяСтрока.ЕстьИзменения=2;
				СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
				НоваяСтрока.ИмяЭлемента=пр.ИмяЭлемента;
				НоваяСтрока.Элемент=пр.Элемент;
				НоваяСтрока.Панель=пр.Панель;
				НоваяСтрока.Страница=пр.Страница;
				НоваяСтрока.КартинкаВторойФормы=Пр.КартинкаФормы;
				НоваяСтрока.ТипЭлемента=пр.ТипЭлемента;
				ОбратныйПеребор(Пр,НоваяСтрока);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры  

Процедура ОбратныйПеребор(СтрокаДерева,СтрокаНовогоДерева)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		ОбработкаПрерыванияПользователя();
		НоваяСтрока=СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.ДанныеПервойФормы="<Отсутствует>"; 				
		НоваяСтрока.КартинкаПервойФормы=29;
		Попытка
			НоваяСтрока.Элемент=Стр.Элемент;
			НоваяСтрока.Панель=Стр.Панель;
			НоваяСтрока.Страница=Стр.Страница;	
		Исключение
		КонецПопытки;
		НоваяСтрока.ЕстьИзменения=2;
		СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
		НоваяСтрока.ИмяЭлемента=стр.ИмяЭлемента;
		НоваяСтрока.КартинкаВторойФормы=стр.КартинкаФормы;
		НоваяСтрока.ТипЭлемента=Стр.ТипЭлемента;
		ОбратныйПеребор(стр,НоваяСтрока);	
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьТаблицуСвойств(Элемент,мТекФорма)
	
	ТипЭлементаФормы=СтрЗаменить(ТРег(Элемент.ТипЭлемента)," ","");
	
	Таблица=СоответствиеСвойствЭлементам.Получить(ТипЭлементаФормы);
	Если Таблица=Неопределено Тогда
		ТаблицаСвойств=Новый ТаблицаЗначений;
	Иначе
		ТаблицаСвойств=Таблица.Скопировать();
	КонецЕсли;
	НоваяСтрока=ТаблицаСвойств.Добавить();
	Для н=0 по ТаблицаСвойств.Колонки.Количество()-1 Цикл
		ИмяСвойства=ТаблицаСвойств.Колонки[н].Имя;
		Попытка
			Если ТипЭлементаФормы="Форма" Тогда
				НоваяСтрока[ИмяСвойства]=мТекФорма[ИмяСвойства];
			Иначе
				Если  ТипЭлементаФормы="КнопкаКоманднойПанели" Тогда
					
					Если ИмяСвойства<>"Текст" Тогда
						СтрокаВызова="["""+Элемент.ИмяЭлемента+"""]["""+ИмяСвойства+"""]";
					Иначе
						СтрокаВызова="["""+Элемент.ИмяЭлемента+"""][""Имя""]";
					КонецЕсли;
					НоваяСтрока[ИмяСвойства]=ВывестиЗначенияДляКнопок(Элемент,СтрокаВызова,мТекФорма);
				ИначеЕсли  ТипЭлементаФормы="КолонкаТабличногоПоля" тогда
					НоваяСтрока[ИмяСвойства]=мТекФорма.ЭлементыФормы[Элемент.Родитель.ИмяЭлемента].Колонки[Элемент.ИмяЭлемента][ИмяСвойства];
				Иначе
					Если ИмяСвойства="ИсточникДействий" или ИмяСвойства="Кнопки" или ИмяСвойства="Страницы" или ИмяСвойства="ТекущаяСтраница" тогда
						НоваяСтрока[ИмяСвойства]=Строка(мТекФорма.ЭлементыФормы[Элемент.ИмяЭлемента][ИмяСвойства]);
					ИначеЕсли ИмяСвойства="Данные" Тогда			
						Если мТекФорма.ЭлементыФормы[Элемент.ИмяЭлемента][ИмяСвойства]<>"" Тогда
							НоваяСтрока[ИмяСвойства]=мТекФорма.ЭлементыФормы[Элемент.ИмяЭлемента][ИмяСвойства];
						ИначеЕсли СоответствиеДанныхПолное.Получить(Элемент.ИмяЭлемента)<>Неопределено  Тогда
							Если Лев(СоответствиеДанныхПолное.Получить(Элемент.ИмяЭлемента),1)="-" Тогда
								СтандартныйРеквизит=ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления(ВидМетаданныхОбъекта)[СтрЗаменить(СоответствиеДанныхПолное.Получить(Элемент.ИмяЭлемента),"-","v")];
								Если СтандартныйРеквизит<>Неопределено Тогда
									НоваяСтрока[ИмяСвойства]=СтандартныйРеквизит;
								Иначе
									НоваяСтрока[ИмяСвойства]=СоответствиеДанныхПолное.Получить(Элемент.ИмяЭлемента);
								КонецЕсли;
							Иначе
								НоваяСтрока[ИмяСвойства]=СоответствиеДанныхПолное.Получить(Элемент.ИмяЭлемента);
							КонецЕсли;
						Иначе
							НоваяСтрока[ИмяСвойства]="";
						КонецЕсли;
					Иначе
						НоваяСтрока[ИмяСвойства]=мТекФорма.ЭлементыФормы[Элемент.ИмяЭлемента][ИмяСвойства];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаСвойств;
	
КонецФункции

Функция ЗаполнитьТаблицуПривязок(Элемент,мТекФорма)
	
	Перем ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента; 
	
	Таблица=СоответствиеСвойствЭлементам.Получить("ПривязкиЭлемента");
	
	ТаблицаПривязок=Таблица.Скопировать();
	НоваяСтрока=ТаблицаПривязок.Добавить();
	Для Каждого Граница Из Границы Цикл 
		
		Если Тип(Элемент.Элемент)<>Тип("КнопкаКоманднойПанели") тогда
			Элемент.Элемент.ПолучитьПривязку( Граница, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, 
			ГраницаВторогоЭлемента); 
			Если ПервыйЭлемент <> Неопределено Тогда 
				ПервыйЭлемент = мТекФорма.ЭлементыФормы.Найти(ПервыйЭлемент.Имя); 
				Если ПервыйЭлемент = Неопределено Тогда 
					ПервыйЭлемент = мТекФорма.Панель; 
				КонецЕсли; 
			КонецЕсли; 
			Если ВторойЭлемент <> Неопределено Тогда 
				ВторойЭлемент = мТекФорма.ЭлементыФормы.Найти(ВторойЭлемент.Имя); 
				Если ВторойЭлемент = Неопределено Тогда 
					ВторойЭлемент = мТекФорма.Панель; 
				КонецЕсли; 
			КонецЕсли;  
			Если ПервыйЭлемент <> Неопределено Тогда
				ИмяПервогоЭлемента = "";
				Если ТипЗнч(ПервыйЭлемент) = Тип("Панель") Тогда
					Если ПервыйЭлемент=мТекФорма.Панель тогда
						ИмяПервогоЭлемента = "Панель";
					Иначе ИмяПервогоЭлемента=ПервыйЭлемент.Имя;
					КонецЕсли;
				Иначе
					ИмяПервогоЭлемента = ПервыйЭлемент.Имя;
				КонецЕсли; 
				Если ВторойЭлемент <> Неопределено Тогда
					ИмяВторогоЭлемента = "";
					Если ТипЗнч(ВторойЭлемент) = Тип("Панель") Тогда
						Если ВторойЭлемент= мТекФорма.Панель тогда
							ИмяВторогоЭлемента = "Панель";
						Иначе
							ИмяВторогоЭлемента = ВторойЭлемент.Имя;
						КонецЕсли;
					Иначе
						ИмяВторогоЭлемента = ВторойЭлемент.Имя;
					КонецЕсли; 
					НоваяСтрока["Привязка"+ТРег(Граница)]=ИмяПервогоЭлемента+"."+ГраницаПервогоЭлемента;
					НоваяСтрока["Пропорции"+ТРег(Граница)]=ИмяВторогоЭлемента+"."+ГраницаВторогоЭлемента;
				Иначе
					НоваяСтрока["Привязка"+ТРег(Граница)]=ИмяПервогоЭлемента+"."+ГраницаПервогоЭлемента;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПривязок;
	
КонецФункции

Функция ЗаполнитьТаблицуДействий(Элемент,мТекФорма,ПолученныйТекстМодуля,ЭлементУправления =  Неопределено)

	ТаблицаДействий=Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Событие",Новый ОписаниеТипов("Строка"),Новый КвалификаторыСтроки(100));
	ТаблицаДействий.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка"),Новый КвалификаторыСтроки(100));
	ТаблицаДействий.Колонки.Добавить("ТекстПроцедурыМодуля",Новый ОписаниеТипов("Строка"));
	Если  ЭлементУправления <> Неопределено Тогда
		ТипЭлемента = ЭлементУправления;
		СписокСобытийДляЭлементаФормы=СоответствиеТиповЭлементовСпискамОбработчиков.Получить(ТипЭлемента);
		Для каждого ЭлСписок Из СписокСобытийДляЭлементаФормы Цикл
			Событие = ЭлСписок.Значение;
			Попытка
				Действие=Элемент.Элемент.ЭлементУправления.ПолучитьДействие(Событие);
				НоваяСтрока = ТаблицаДействий.Добавить();
				НоваяСтрока.Событие              = Событие;
				НоваяСтрока.Действие             = Действие;
				НоваяСтрока.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(Действие,ПолученныйТекстМодуля);
			Исключение
			КонецПопытки;
		КонецЦикла;
	Иначе	
		ТипЭлемента = СтрЗаменить(ТРег(Элемент.ТипЭлемента)," ","");
		СписокСобытийДляЭлементаФормы=СоответствиеТиповЭлементовСпискамОбработчиков.Получить(ТипЭлемента);
		//у типов элементов Диаграмма, Индикатор, КоманднаяПанель, ПолеТекстовогоДокумента, 
		//Разделитель. РамкаГруппы и СводнаяДиаграмма возможные обработчики событий отсутствуют
		Если СписокСобытийДляЭлементаФормы <> Неопределено Тогда 
			Для каждого ЭлСписок Из СписокСобытийДляЭлементаФормы Цикл
				Событие = ЭлСписок.Значение;
				Если  ТипЗнч(Элемент.Элемент) = Тип("Форма") Тогда	
					Попытка
						Действие=Строка(мТекФорма.ПолучитьДействие(Событие));
						НоваяСтрока = ТаблицаДействий.Добавить();
						НоваяСтрока.Событие              = Событие;
						НоваяСтрока.Действие             = Действие;
						НоваяСтрока.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(Действие,ПолученныйТекстМодуля);
					Исключение
					КонецПопытки;
				Иначе
					Попытка
						Действие=Строка(мТекФорма.ЭлементыФормы[Элемент.ИмяЭлемента].ПолучитьДействие(Событие));
						НоваяСтрока = ТаблицаДействий.Добавить();
						НоваяСтрока.Событие              = Событие;
						НоваяСтрока.Действие             = Действие;
						НоваяСтрока.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(Действие,ПолученныйТекстМодуля);
					Исключение
					КонецПопытки; 
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДействий;
	
КонецФункции

Функция ВывестиЗначенияДляКнопок(СтрокаТаблицы,СтрокаВызова,мТекФорма)
	
	Если СтрокаТаблицы.Родитель.ТипЭлемента = "Командная панель" Тогда
		ЗначениеСвойства = Вычислить("мТекФорма.ЭлементыФормы[СтрокаТаблицы.Родитель.ИмяЭлемента].Кнопки"+СтрокаВызова);
		
		Возврат ЗначениеСвойства;
		
	Иначе СтрокаВызова = "["""+СтрокаТаблицы.Родитель.ИмяЭлемента+"""].Кнопки"+СтрокаВызова;
		ЗначениеСвойства = ВывестиЗначенияДляКнопок(СтрокаТаблицы.Родитель,СтрокаВызова,мТекФорма);
		
		Возврат ЗначениеСвойства;
		
	КонецЕсли;
	
КонецФункции

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ЗАПОЛНЕНИЯ ЗАКЛАДКИ "РЕКВИЗИТЫ" ДЛЯ ОБЫЧНЫХ ФОРМ
//==============================================================================================================================================

Процедура СформироватьСписокРеквизитовФормы(ТЗ,ТекФорма) Экспорт
	
	ОбрабатываемаяФорма=ТекФорма;
	ТекстФормы=Новый ТекстовыйДокумент;
	ТекстФормы.Прочитать(ФормаСтрокой);
	СтрокаДляПолученияФормы="{""#"",5c83cba4-7a20-4102-a5be-add0ee74f6a1,"+Символы.ПС+ТекстФормы.ПолучитьТекст()+Символы.ПС+"}";
	МассивФормы=СтрокаВнутрВХМЛТело(СтрокаДляПолученияФормы);
	ДокументDOM=ПолучитьДокументDOMФормы(МассивФормы);
	МассивРеквизитов=ПолучитьМассивИменРеквизитовФормы(ДокументDOM);
	ОбработатьМассивРеквизитов(МассивРеквизитов,ТЗ,Ложь);
	
	
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	//заголовок самой формы
	СтрокаXPathЗаголовкаФормы="/elem[1]/elem[1]/elem[1]/elem[1]/elem[1]/elem[1]/data[2]/text()";
	РезультатXPathЗаголовкаФормы=ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPathЗаголовкаФормы, ДокументDOM,
	РазыменовательПИ, ТипРезультатаDOMXPath.Строка);
	Попытка
		ЗаголовокФормы=РезультатXPathЗаголовкаФормы.СтроковоеЗначение;
		ОбрабатываемаяФорма.Заголовок=Вычислить(ЗаголовокФормы);
	Исключение
	КонецПопытки;
	
	//Элементы формы, расположенные на самой форме
	СтрокаXPath = "/elem[1]/elem[1]/elem[1]/elem[2]/elem[2]/elem/elem[3]/data[2]";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM,
	РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	
	Если РасширенныйАнализ=Истина тогда
		
		
		СоответствиеДанныхЭлементов=Новый Соответствие;
		СоответствиеДанныхПолное = Новый Соответствие;
		СоответствиеСтраницПанелей = Новый Соответствие;
		МассивСтраниц = Новый Массив;
		
		ЗадатьЗаголовки(РезультатXPath,СоответствиеДанныхЭлементов,СоответствиеДанныхПолное,МассивСтраниц);
		
		//заполнить таблицу значений свойства Данные элементов формы
		СтрокаXPathДанных = "/elem[1]/elem[1]/elem[2]/elem[3]/elem/elem[1]/elem[2]";
		РезультатXPathДанных = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPathДанных,ДокументDOM,
		РазыменовательПИ,ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		Пока 1 = 1 Цикл
			
			УзелДанных = РезультатXPathДанных.ПолучитьСледующий();
			Если УзелДанных = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Попытка
			ИмяЭлемента=СоответствиеДанныхЭлементов.Получить(УзелДанных.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[0].ТекстовоеСодержимое);
			Если Лев(УзелДанных.ДочерниеУзлы[0].ТекстовоеСодержимое,1)<>"-" Тогда
				ДанныеЭлемента=СоответствиеИдентификаторов.Получить(УзелДанных.ДочерниеУзлы[1].ТекстовоеСодержимое);
			Иначе	
				ДанныеЭлемента=УзелДанных.ДочерниеУзлы[0].ТекстовоеСодержимое;
			КонецЕсли;
			СоответствиеДанныхПолное.Вставить(Вычислить(ИмяЭлемента),ДанныеЭлемента);
				
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивИменРеквизитовФормы(ДокументDOM)
	
	Массив = Новый Массив;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	ИмяЭлемента = "/elem[1]/elem[1]/elem[2]/elem[1]/data[1]/text()";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.Строка);
	КлючОсновногоРеквизита = РезультатXPath.СтроковоеЗначение;
	
	СтрокаXPath = "/elem[1]/elem[1]/elem[2]/elem[2]/elem/data[3]";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM,
	РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	Счетчик=0;
	Пока 1 = 1 Цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если узел.СледующийСоседний.ИмяУзла<>"elem" тогда
			узел=Узел.СледующийСоседний;
		КонецЕсли;
		Структура=Новый Структура("ИмяРеквизита,ТипРеквизита,Основной");
		Структура.Вставить("ИмяРеквизита",вычислить(Узел.ТекстовоеСодержимое));
		Если Узел.РодительскийУзел.ПервыйДочерний.ТекстовоеСодержимое=КлючОсновногоРеквизита тогда
			Структура.Вставить("Основной",истина);
		Иначе				
			Структура.Вставить("Основной",ложь);
		КонецЕсли;
		
		Попытка
			Структура.Вставить("ТипРеквизита",Узел.СледующийСоседний.ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое);
		Исключение  Структура.Вставить("ТипРеквизита","""U""");
		КонецПопытки;
		Попытка
			Структура.Вставить("ЗначениеТипаРеквизита",Узел.СледующийСоседний.ДочерниеУзлы[1].ДочерниеУзлы[1].ТекстовоеСодержимое);
		Исключение
		КонецПопытки;
		Массив.Добавить(Структура);
	КонецЦикла;
	Возврат Массив;
КонецФункции 

Процедура СформироватьСписокРеквизитовДляСравнения(ВтораяФорма) Экспорт
	СформироватьСписокРеквизитовФормы(СписокРеквизитовФормыСравнения,ВтораяФорма);
	ПостроитьСравнениеРеквизитовФорм();	
КонецПроцедуры

Процедура ПостроитьСравнениеРеквизитовФорм()
	СчетчикИзмененийРеквизитовФорм=0;
	Для каждого ТекущаяСтрока из СписокРеквизитов Цикл
		НоваяСтрока=СравнениеРеквизитов.Добавить();
		НоваяСтрока.РеквизитПервойФормы=ТекущаяСтрока.Реквизит;
		НоваяСтрока.ОсновнойРеквизит=ТекущаяСтрока.ОсновнойРеквизит;
		НоваяСтрока.ТипПервый=ТекущаяСтрока.Тип;
		СтрокаСравнения=СписокРеквизитовФормыСравнения.Найти(НоваяСтрока.РеквизитПервойФормы,"Реквизит");
		Если СтрокаСравнения<>Неопределено Тогда
			НоваяСтрока.РеквизитВторойФормы=СтрокаСравнения.Реквизит;
			НоваяСтрока.ТипВторой=СтрокаСравнения.Тип;
			Если ТекущаяСтрока.Тип=СтрокаСравнения.Тип Тогда
				НоваяСтрока.ЕстьИзменения=0;
			Иначе НоваяСтрока.ЕстьИзменения=1;
				СчетчикИзмененийРеквизитовФорм=СчетчикИзмененийРеквизитовФорм+1;
			КонецЕсли;
		Иначе НоваяСтрока.РеквизитВторойФормы="<Отсутствует>";
			НоваяСтрока.ТипВторой="<Отсутствует>";
			СчетчикИзмененийРеквизитовФорм=СчетчикИзмененийРеквизитовФорм+1;
			НоваяСтрока.ЕстьИзменения=3;
		КонецЕсли;                  
	КонецЦикла;
	Для каждого Строка Из СписокРеквизитовФормыСравнения Цикл
		Если СписокРеквизитов.Найти(Строка.Реквизит,"Реквизит")=Неопределено Тогда
			НоваяСтрока=СравнениеРеквизитов.Добавить();
			НоваяСтрока.РеквизитПервойФормы="<Отсутствует>"; 
			НоваяСтрока.ТипПервый="<Отсутствует>";
			НоваяСтрока.ЕстьИзменения=2;
			СчетчикИзмененийРеквизитовФорм=СчетчикИзмененийРеквизитовФорм+1;
			НоваяСтрока.РеквизитВторойФормы=Строка.Реквизит;
			НоваяСтрока.ОсновнойРеквизит=Строка.ОсновнойРеквизит;
			НоваяСтрока.ТипВторой=Строка.Тип;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗадатьЗаголовки(РезультатXPath,СоответствиеДанныхЭлементов,СоответствиеДанныхТабличныхПолей, МассивСтраниц) 
		
	Пока 1 = 1 Цикл
		
		Узел = РезультатXPath.ПолучитьСледующий();
		
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ИмяЭлемента=Узел.ТекстовоеСодержимое;
		ВнутреннийИндексЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[1].ТекстовоеСодержимое;
		СоответствиеДанныхЭлементов.Вставить(ВнутреннийИндексЭлемента,ИмяЭлемента);
		ТипЭлемента=ТипЗнч(ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)]);
		Если МассивСтраниц.Количество()>0 Тогда
			КоличествоУзлов = Узел.РодительскийУзел.ПредыдущийСоседний.ДочерниеУзлы.Количество();
			ИндексСтраницы = Число(Узел.РодительскийУзел.ПредыдущийСоседний.ДочерниеУзлы[КоличествоУзлов-5].ТекстовоеСодержимое);
			СоответствиеСтраницПанелей.Вставить(СтрЗаменить(ИмяЭлемента,"""",""),МассивСтраниц[ИндексСтраницы]);
			
			//СтрокаЭлемента = РодительскаяСтрока.Строки[ИндексСтраницы].Строки.Добавить();	
			//СтрокаЭлемента.Страница = РодительскаяСтрока.Строки[ИндексСтраницы].ИмяЭлемента;
			//СтрокаЭлемента.Панель = РодительскаяСтрока.ИмяЭлемента;

		КонецЕсли;
		
		Если ТипЭлемента = Тип ("Флажок") тогда
			
			Попытка 
				ИндексЗаголовка=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[0].ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[0].текстовоеСодержимое;
				Если ИндексЗаголовка="""#""" тогда   //заголовок будет задаваться программно
					Попытка //определяем изначальный заголовок
						ЗаголовокЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[0].ДочерниеУзлы[2].ДочерниеУзлы[3].ДочерниеУзлы[1].текстовоеСодержимое;
					Исключение  //изначальный заголовок пустой
						ЗаголовокЭлемента="";
					КонецПопытки;
				Иначе //статический заголовок			
					ЗаголовокЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[0].ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
				КонецЕсли;
				ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Заголовок=СтрЗаменить(Вычислить(СтрЗаменить(ЗаголовокЭлемента,Символы.ПС,"$%")),"$%",Символы.ПС);
			Исключение;
			КонецПопытки;
			
		ИначеЕсли ТипЭлемента = Тип("Переключатель") тогда
			
			Попытка ЗаголовокЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[0].ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
				ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Заголовок=СтрЗаменить(Вычислить(СтрЗаменить(ЗаголовокЭлемента,Символы.ПС,"$%")),"$%",Символы.ПС);
			Исключение
			КонецПопытки;
			
		ИначеЕсли ТипЭлемента = Тип("Панель") тогда
			
			//Заголовки страниц  панелей
			СоответствиеЗаголовковСтраниц=Новый Соответствие;
			Попытка
				ЧтениеУзлаСтраниц = Новый ЧтениеУзловDOM;
				ЧтениеУзлаСтраниц.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1]);
				ПостроительDOMСтраниц = Новый ПостроительDOM;
				ДокументDOMСтраниц = ПостроительDOMСтраниц.Прочитать(ЧтениеУзлаСтраниц);
				РазыменовательПИСтраниц = Новый РазыменовательПространствИменDOM(ДокументDOMСтраниц);
				СтрокаXPathСтраниц = "/elem[1]/elem/elem/data[5]";
				РезультатXPathСтраниц = ДокументDOMСтраниц.ВычислитьВыражениеXPath(СтрокаXPathСтраниц, ДокументDOMСтраниц,
				РазыменовательПИСтраниц, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				МассивДочернихСтраниц = Новый Массив;
				Пока 1 = 1 Цикл
					УзелСтраниц = РезультатXPathСтраниц.ПолучитьСледующий();
					Если УзелСтраниц = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Попытка 		
						Если Лев(УзелСтраниц.ТекстовоеСодержимое,1)="""" тогда
							ИмяСтраницы=УзелСтраниц.ТекстовоеСодержимое;
							ЗаголовокСтраницы=УзелСтраниц.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
							СоответствиеЗаголовковСтраниц.Вставить(Вычислить(ИмяСтраницы),Вычислить(ЗаголовокСтраницы));
							СтруктураПанелиСтраницы = Новый Структура("Страница,Панель",СтрЗаменить(ИмяСтраницы,"""",""),СтрЗаменить(ИмяЭлемента,"""",""));
							МассивДочернихСтраниц.Добавить(СтруктураПанелиСтраницы);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				Для каждого страница Из ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Страницы Цикл
					Страница.Заголовок=СоответствиеЗаголовковСтраниц.Получить(Страница.Имя);
				КонецЦикла;
			Исключение
			КонецПопытки;
			Попытка
				ЧтениеУзла = Новый ЧтениеУзловDOM;
				ЧтениеУзла.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[5]);
				ПостроительDOM = Новый ПостроительDOM;
				ДокументDOMУзла = ПостроительDOM.Прочитать(ЧтениеУзла);
				РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOMУзла);
				СтрокаXPathУзла = "/elem[1]/elem/elem[3]/data[2]";
				РезультатXPathУзла = ДокументDOMУзла.ВычислитьВыражениеXPath(СтрокаXPathУзла, ДокументDOMУзла,
				РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				ЗадатьЗаголовки(РезультатXPathУзла,СоответствиеДанныхЭлементов,СоответствиеДанныхТабличныхПолей,МассивДочернихСтраниц);
			Исключение
			КонецПопытки;

			
		ИначеЕсли ТипЭлемента = Тип("ТабличноеПоле") Тогда
			
			//Заголовки колонок табличного поля
			СоответствиеЗаголовковКолонок=Новый Соответствие;
			СоответствиеДанныхКолонок=Новый Соответствие;
			
			Попытка
				ЧтениеУзлаКолонок = Новый ЧтениеУзловDOM;
				ЧтениеУзлаКолонок.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[1]);
				ПостроительDOMКолонок = Новый ПостроительDOM;
				ДокументDOMКолонок = ПостроительDOMКолонок.Прочитать(ЧтениеУзлаКолонок);
				РазыменовательПИКолонок = Новый РазыменовательПространствИменDOM(ДокументDOMКолонок);
				СтрокаXPathКолонок = "/elem[1]/elem/elem/elem[1]/elem[1]/elem[1]/data[16]";
				РезультатXPathКолонок = ДокументDOMКолонок.ВычислитьВыражениеXPath(СтрокаXPathКолонок, ДокументDOMКолонок,
				РазыменовательПИКолонок, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				Пока 1 = 1 Цикл
					УзелКолонок = РезультатXPathКолонок.ПолучитьСледующий();
					Если УзелКолонок = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Попытка 		
						ИмяКолонки=УзелКолонок.ТекстовоеСодержимое;
						ЗаголовокКолонки=УзелКолонок.РодительскийУзел.РодительскийУзел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[1].ДочерниеУзлы[1].ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
						ДанныеКолонки=УзелКолонок.РодительскийУзел.РодительскийУзел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[1].ДочерниеУзлы[2].ТекстовоеСодержимое;
						Если Лев(ДанныеКолонки,1)<>"-" Тогда
							СоответствиеДанныхКолонок.Вставить(Вычислить(ИмяКолонки),СоответствиеИдентификаторов.Получить(Прав(ДанныеКолонки,36)));
						Иначе
							СоответствиеДанныхКолонок.Вставить(Вычислить(ИмяКолонки),ДанныеКолонки);
						КонецЕсли;
						СоответствиеЗаголовковКолонок.Вставить(Вычислить(ИмяКолонки),Вычислить(ЗаголовокКолонки));
					Исключение
					КонецПопытки;
				КонецЦикла;
				//Присвоение колонкам заголовков
				Для каждого Колонка из ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Колонки цикл
					Колонка.ТекстШапки=СоответствиеЗаголовковКолонок.Получить(Колонка.Имя);
				КонецЦикла;
				СоответствиеДанныхТабличныхПолей.Вставить(Вычислить(ИмяЭлемента),СоответствиеДанныхКолонок);
			Исключение;
			КонецПопытки;
			
		ИначеЕсли ТипЭлемента = Тип("КоманднаяПанель") тогда
			
			//Заголовки кнопок командной панели
			Попытка
				СоответствиеЗаголовковКнопок=Новый Соответствие;
				ЧтениеУзлаКнопок = Новый ЧтениеУзловDOM;
				ЧтениеУзлаКнопок.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[7].ПоследнийДочерний.ПредыдущийСоседний);
				ПостроительDOMКнопок = Новый ПостроительDOM;
				ДокументDOMКнопок = ПостроительDOMКнопок.Прочитать(ЧтениеУзлаКнопок);
				РазыменовательПИКнопок = Новый РазыменовательПространствИменDOM(ДокументDOMКнопок);
				СтрокаXPathКнопок = "/elem[1]/elem/data[2]";
				РезультатXPathКнопок = ДокументDOMКнопок.ВычислитьВыражениеXPath(СтрокаXPathКнопок, ДокументDOMКнопок,
				РазыменовательПИКнопок, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				Пока 1 = 1 Цикл
					УзелКнопок = РезультатXPathКнопок.ПолучитьСледующий();
					Если УзелКнопок = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Попытка 		
						ИмяКнопки=УзелКнопок.ТекстовоеСодержимое;
						ЗаголовокКнопки=УзелКнопок.РодительскийУзел.ДочерниеУзлы[4].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
						СоответствиеЗаголовковКнопок.Вставить(Вычислить(ИмяКнопки),Вычислить(ЗаголовокКнопки));
						ЕстьПодменю=истина;
					Исключение
					КонецПопытки;
				КонецЦикла;
			Исключение;
			КонецПопытки;
			Попытка
				СоответствиеЗаголовковКнопок1=Новый Соответствие;
				ЧтениеУзлаКнопок = Новый ЧтениеУзловDOM;
				ЧтениеУзлаКнопок.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[7].ПоследнийДочерний);
				ПостроительDOMКнопок = Новый ПостроительDOM;
				ДокументDOMКнопок = ПостроительDOMКнопок.Прочитать(ЧтениеУзлаКнопок);
				РазыменовательПИКнопок = Новый РазыменовательПространствИменDOM(ДокументDOMКнопок);
				СтрокаXPathКнопок = "/elem[1]/elem/data[2]";
				РезультатXPathКнопок = ДокументDOMКнопок.ВычислитьВыражениеXPath(СтрокаXPathКнопок, ДокументDOMКнопок,
				РазыменовательПИКнопок, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				Пока 1 = 1 Цикл
					УзелКнопок = РезультатXPathКнопок.ПолучитьСледующий();
					Если УзелКнопок = Неопределено Тогда
						Прервать;
					КонецЕсли;
					Попытка 		
						ИмяКнопки=УзелКнопок.ТекстовоеСодержимое;
						ЗаголовокКнопки=УзелКнопок.РодительскийУзел.ДочерниеУзлы[4].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
						СоответствиеЗаголовковКнопок1.Вставить(Вычислить(ИмяКнопки),Вычислить(ЗаголовокКнопки));
					Исключение
					КонецПопытки;
				КонецЦикла;
			Исключение;
			КонецПопытки;
			Для каждого Кнопка из ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(ИмяЭлемента)].Кнопки цикл
				Если ЕстьПодменю=Истина тогда
					Кнопка.Текст=СоответствиеЗаголовковКнопок.Получить(Кнопка.Имя);
				Иначе  Кнопка.Текст=СоответствиеЗаголовковКнопок1.Получить(Кнопка.Имя);
				КонецЕсли;
				Если Кнопка.Кнопки<>Неопределено тогда
					Для каждого КнопкаПодч из Кнопка.Кнопки цикл
						КнопкаПодч.Текст=СоответствиеЗаголовковКнопок1.Получить(КнопкаПодч.Имя);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Попытка
				//надписи, кнопки
				ИндексЗаголовка=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[0].текстовоеСодержимое;
				Если ИндексЗаголовка="""#""" тогда   //заголовок будет задаваться программно
					Попытка //определяем изначальный заголовок
						ЗаголовокЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[3].ДочерниеУзлы[1].текстовоеСодержимое;
					Исключение  //изначальный заголовок пустой
						ЗаголовокЭлемента="";
					КонецПопытки;
				Иначе //статический заголовок			
					ЗаголовокЭлемента=Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы[2].ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[2].ДочерниеУзлы[1].текстовоеСодержимое;
				КонецЕсли;
				Если ЗаголовокЭлемента<>"" тогда   
					ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Заголовок=СтрЗаменить(Вычислить(СтрЗаменить(ЗаголовокЭлемента,Символы.ПС,"$%")),"$%",Символы.ПС);
				Иначе ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)].Заголовок="";
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ЗАПОЛНЕНИЯ ПАНЕЛИ СВОЙСТВ ДЛЯ ОБЫЧНЫХ ФОРМ
//==============================================================================================================================================

Процедура ВывестиСвойстваПоСтрокеЭлементовОбычнойФормы(Форм,Элемент)
	
	Если СравнениеФорм = Ложь Тогда
		
		Форм.ЭлементыФормы.ТабличноеПолеСвойств.Значение.Очистить();
		ТаблицаСвойств = Элемент.ТекущаяСтрока.ТаблицаСвойств;
		Для н = 0 По ТаблицаСвойств.Колонки.Количество()-1 Цикл
			НоваяСтрока = Форм.ТабличноеПолеСвойств.Добавить();
			НоваяСтрока.Свойство = ТаблицаСвойств.Колонки[н].Имя;
			НоваяСтрока.Значение = ТаблицаСвойств[0][н];
		КонецЦикла;
		
		Форм.ЭлементыФормы.ПривязкиЭлемента.Значение.Очистить();
		ТаблицаПривязок = Элемент.ТекущаяСтрока.ПривязкиЭлемента;
		Для м = 0 По ТаблицаПривязок.Колонки.Количество()-1 Цикл
			НоваяСтрокаПривязок = Форм.ПривязкиЭлемента.Добавить();
			НоваяСтрокаПривязок.Свойство = ТаблицаПривязок.Колонки[м].Имя;
			НоваяСтрокаПривязок.Значение = ТаблицаПривязок[0][м];
		КонецЦикла;
		
		Форм.ЭлементыФормы.ДействияЭлемента.Значение.Очистить();
		ТаблицаДействий = Элемент.ТекущаяСтрока.ДействияЭлемента;
		Если ТипЗнч(ТаблицаДействий) = Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДействий Из ТаблицаДействий Цикл
				НоваяСтрокаДействий = Форм.ДействияЭлемента.Добавить();
				НоваяСтрокаДействий.Свойство = СтрокаДействий.Событие;
				НоваяСтрокаДействий.Значение = СтрокаДействий.Действие;
				НоваяСтрокаДействий.ТекстСвойства = СтрокаДействий.ТекстПроцедурыМодуля;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Форм.ЭлементыФормы.РазличияСвойств.Значение.Очистить();
		ТаблицаСвойствПервойФормы = Элемент.ТекущаяСтрока.СвойстваПервойФормы;
		Если ТипЗнч(ТаблицаСвойствПервойФормы) = Тип("ТаблицаЗначений") Тогда
			Для н = 0 По ТаблицаСвойствПервойФормы.Колонки.Количество()-1 Цикл
				ПолеСравнения = Элемент.ТекущаяСтрока.СвойстваВторойФормы.Колонки[ТаблицаСвойствПервойФормы.Колонки[н].Имя];
				Если ПолеСравнения <> Неопределено И ЗначениеВСтрокуВнутр(ТаблицаСвойствПервойФормы[0][н]) <> ЗначениеВСтрокуВнутр(Элемент.ТекущаяСтрока.СвойстваВторойФормы[0][Элемент.ТекущаяСтрока.СвойстваПервойФормы.Колонки[н].Имя]) тогда
					НоваяСтрока = Форм.РазличияСвойств.Добавить();
					НоваяСтрока.Свойство            = ТаблицаСвойствПервойФормы.Колонки[н].Имя;
					НоваяСтрока.ЗначениеПервойФормы = ТаблицаСвойствПервойФормы[0][н];
					НоваяСтрока.ЗначениеВторойФормы = Элемент.ТекущаяСтрока.СвойстваВторойФормы[0][ТаблицаСвойствПервойФормы.Колонки[н].Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форм.ЭлементыФормы.РазличияПривязок.Значение.Очистить();
		ТаблицаПривязокПервойФормы = Элемент.ТекущаяСтрока.ПривязкиПервойФормы;
		Если ТипЗнч(ТаблицаПривязокПервойФормы) = Тип("ТаблицаЗначений") Тогда
			Для н=0 По ТаблицаПривязокПервойФормы.Колонки.Количество()-1 Цикл
				ПолеСравненияПривязок = Элемент.ТекущаяСтрока.ПривязкиВторойФормы.КОлонки[ТаблицаПривязокПервойФормы.Колонки[н].Имя];
				Если ПолеСравненияПривязок <> Неопределено И ЗначениеВСтрокуВнутр(ТаблицаПривязокПервойФормы[0][н]) <> ЗначениеВСтрокуВнутр(Элемент.ТекущаяСтрока.ПривязкиВторойФормы[0][Элемент.ТекущаяСтрока.ПривязкиПервойФормы.Колонки[н].Имя]) тогда
					НоваяСтрокаПривязок = Форм.РазличияПривязок.Добавить();
					НоваяСтрокаПривязок.Свойство                = ТаблицаПривязокПервойФормы.Колонки[н].Имя;
					НоваяСтрокаПривязок.ЗначениеПервогоЭлемента = ТаблицаПривязокПервойФормы[0][н];
					НоваяСтрокаПривязок.ЗначениеВторогоЭлемента = Элемент.ТекущаяСтрока.ПривязкиВторойФормы[0][ТаблицаПривязокПервойФормы.Колонки[н].Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форм.ЭлементыФормы.РазличияДействий.Значение.Очистить();
		Если ТипЗнч(Элемент.ТекущаяСтрока.ДействияПервойФормы) = Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДействий Из Элемент.ТекущаяСтрока.ДействияПервойФормы Цикл
				СтрокаДействийВторойФормы = Элемент.ТекущаяСтрока.ДействияВторойФормы.Найти(СтрокаДействий.Событие, "Событие");
				Если СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаДействий.ТекстПроцедурыМодуля," ",""),Символы.ПС,""),Символы.Таб,"") <> СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаДействийВторойФормы.ТекстПроцедурыМодуля," ",""),Символы.ПС,""),Символы.Таб,"") Тогда
					НоваяСтрокаДействий = Форм.РазличияДействий.Добавить();
					НоваяСтрокаДействий.Свойство                = СтрокаДействий.Событие;
					НоваяСтрокаДействий.ЗначениеПервогоЭлемента = СтрокаДействий.Действие;
					НоваяСтрокаДействий.ЗначениеВторогоЭлемента = СтрокаДействийВторойФормы.Действие;
					НоваяСтрокаДействий.ТекстПервогоЭлемента    = СтрокаДействий.ТекстПроцедурыМодуля;
					НоваяСтрокаДействий.ТекстВторогоЭлемента    = СтрокаДействийВторойФормы.ТекстПроцедурыМодуля;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ЗАПОЛНЕНИЯ ПАНЕЛИ СВОЙСТВ ДЛЯ УПРАВЛЯЕМЫХ ФОРМ
//==============================================================================================================================================

Процедура ВывестиСвойстваПоСтрокеЭлементовУправляемойФормы(Форм,Элемент)
	
	Если СравнениеФорм = Ложь Тогда
		
		Форм.ЭлементыФормы.ТабличноеПолеСвойств.Значение.Очистить();
		ТаблицаСвойств = Элемент.ТекущаяСтрока.СвойстваЭлемента;
		Для н = 0 по ТаблицаСвойств.Колонки.Количество()-1 цикл
			НоваяСтрока = Форм.ТабличноеПолеСвойств.Добавить();
			НоваяСтрока.Свойство = ТаблицаСвойств.Колонки[н].Заголовок;
			НоваяСтрока.Значение = ТаблицаСвойств[0][н];
		КонецЦикла;
		
		Форм.ЭлементыФормы.ДействияЭлемента.Значение.Очистить();
		ТаблицаДействий = Элемент.ТекущаяСтрока.ДействияЭлемента;
		Если ТипЗнч(ТаблицаДействий) = Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДействий Из ТаблицаДействий Цикл
				НоваяСтрокаДействий = Форм.ДействияЭлемента.Добавить();
				НоваяСтрокаДействий.Свойство	  = СтрокаДействий.Событие;
				НоваяСтрокаДействий.Значение	  = СтрокаДействий.Действие;
				НоваяСтрокаДействий.ТекстСвойства = СтрокаДействий.ТекстПроцедурыМодуля;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Форм.ЭлементыФормы.РазличияСвойств.Значение.Очистить();
		ТаблицаСвойствПервойФормы = Элемент.ТекущаяСтрока.СвойстваПервойФормы;
		Если ТипЗнч(ТаблицаСвойствПервойФормы) = Тип("ТаблицаЗначений") Тогда
			Для н = 0 по ТаблицаСвойствПервойФормы.Колонки.Количество()-1 цикл
				ПолеСравнения = Элемент.ТекущаяСтрока.СвойстваВторойФормы.Колонки[ТаблицаСвойствПервойФормы.Колонки[н].Имя];
				Если ПолеСравнения <> Неопределено и ЗначениеВСтрокуВнутр(ТаблицаСвойствПервойФормы[0][н]) <> ЗначениеВСтрокуВнутр(Элемент.ТекущаяСтрока.СвойстваВторойФормы[0][Элемент.ТекущаяСтрока.СвойстваПервойФормы.Колонки[н].Имя]) тогда
					НоваяСтрока = Форм.РазличияСвойств.Добавить();
					НоваяСтрока.Свойство            = ТаблицаСвойствПервойФормы.Колонки[н].Заголовок;
					НоваяСтрока.ЗначениеПервойФормы = ТаблицаСвойствПервойФормы[0][н];
					НоваяСтрока.ЗначениеВторойФормы = Элемент.ТекущаяСтрока.СвойстваВторойФормы[0][ТаблицаСвойствПервойФормы.Колонки[н].Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Форм.ЭлементыФормы.РазличияДействий.Значение.Очистить();
		ТаблицаДействийПервойФормы = Элемент.ТекущаяСтрока.ДействияПервойФормы;
		Если ТипЗнч(ТаблицаДействийПервойФормы) = Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДействий Из ТаблицаДействийПервойФормы Цикл
				СтрокаДействийВторойФормы = Элемент.ТекущаяСтрока.ДействияВторойФормы.Найти(СтрокаДействий.Событие, "Событие");
				Если СтрокаДействийВторойФормы = Неопределено Тогда
					НоваяСтрокаДействий = Форм.РазличияДействий.Добавить();
					НоваяСтрокаДействий.Свойство				= СтрокаДействий.Событие;
					НоваяСтрокаДействий.ЗначениеПервогоЭлемента	= СтрокаДействий.Действие;
					НоваяСтрокаДействий.ЗначениеВторогоЭлемента	= "";
					НоваяСтрокаДействий.ТекстПервогоЭлемента	= СтрокаДействий.ТекстПроцедурыМодуля;
					НоваяСтрокаДействий.ТекстВторогоЭлемента	= "";
				ИначеЕсли СтрокаДействий.ТекстПроцедурыМодуля <> СтрокаДействийВторойФормы.ТекстПроцедурыМодуля Тогда
					НоваяСтрокаДействий = Форм.РазличияДействий.Добавить();
					НоваяСтрокаДействий.Свойство				= СтрокаДействий.Событие;
					НоваяСтрокаДействий.ЗначениеПервогоЭлемента	= СтрокаДействий.Действие;
					НоваяСтрокаДействий.ЗначениеВторогоЭлемента	= СтрокаДействийВторойФормы.Действие;
					НоваяСтрокаДействий.ТекстПервогоЭлемента	= СтрокаДействий.ТекстПроцедурыМодуля;
					НоваяСтрокаДействий.ТекстВторогоЭлемента	= СтрокаДействийВторойФормы.ТекстПроцедурыМодуля;
				КонецЕсли;
			КонецЦикла;
			Для каждого Стр Из Элемент.ТекущаяСтрока.ДействияВторойФормы Цикл
				Если ТаблицаДействийПервойФормы.Найти(Стр.Событие,"Событие") = Неопределено Тогда
					НоваяСтрокаДействий = Форм.РазличияДействий.Добавить();
					НоваяСтрокаДействий.Свойство				= Стр.Событие;
					НоваяСтрокаДействий.ЗначениеПервогоЭлемента	= "";
					НоваяСтрокаДействий.ЗначениеВторогоЭлемента	= Стр.Действие;
					НоваяСтрокаДействий.ТекстПервогоЭлемента	= "";
					НоваяСтрокаДействий.ТекстВторогоЭлемента	= Стр.ТекстПроцедурыМодуля;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ УСТАНОВКИ ТЕКСТА МОДУЛЯ
//==============================================================================================================================================

//устанавливает текст модуля обычной формы
Процедура УстановитьТекстМодуляФормы() Экспорт
	ТекстМодуляФормы=Новый ТекстовыйДокумент;
	ТекстМодуляФормы.Прочитать(МодульФормы);
	ЭлементыФормы.ТекстМодуляФормы.УстановитьТекст(ТекстМодуляФормы.ПолучитьТекст());
КонецПроцедуры

//устанавливает текст модуля управляемой формы
Процедура УстановитьТекстМодуляУправляемойФормы(ДокументDOM)
	
	// установка текста модуля
	ТекстМодуля = ДокументDOM.ПервыйДочерний.ДочерниеУзлы[2].ТекстовоеСодержимое;
	ВыхТекстМодуля = Сред(СтрЗаменить(СтрПолучитьСтроку(ТекстМодуля,1),"""""",""""),2)+Символы.ПС;
	Для НомерСтроки = 2 по СтрЧислоСтрок(ТекстМодуля)-1 цикл
		ВыхТекстМодуля = ВыхТекстМодуля+СтрЗаменить(СтрПолучитьСтроку(ТекстМодуля,НомерСтроки),"""""","""")+Символы.ПС;
	КонецЦикла;
	ПоследняяСтрока = СтрЗаменить(СтрПолучитьСтроку(ТекстМодуля,СтрЧислоСтрок(ТекстМодуля)),"""""","""");
	ВыхТекстМодуля = ВыхТекстМодуля + Лев(ПоследняяСтрока,СтрДлина(ПоследняяСтрока)-1);
	ЭлементыФормы.ТекстМодуляФормы.УстановитьТекст(ВыхТекстМодуля);

КонецПроцедуры

//сравнение процедур модулей
Процедура ЗаполнитьТаблицуСравненияПроцедурМодулейФорм() Экспорт
	
	ТекстПервогоМодуля = Новый ТекстовыйДокумент;
	ТекстПервогоМодуля.Прочитать(МодульФормы);
	ВремТабПервогоМодуля = ПолучитьТаблицуПроцедурМодуля(ТекстПервогоМодуля.ПолучитьТекст()).Скопировать();
	
	ТекстВторогоМодуля = Новый ТекстовыйДокумент;
	ТекстВторогоМодуля.Прочитать(МодульВторойФормы);
	ВремТабВторогоМодуля = ПолучитьТаблицуПроцедурМодуля(ТекстВторогоМодуля.ПолучитьТекст()).Скопировать();
	
	ПолучитьТаблицуСтруктурногоСравнения(ВремТабПервогоМодуля,ВремТабВторогоМодуля,СтруктурноеСравнениеМодуля,ТолькоИзмененные);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСравненияПроцедурМодулейУправляемыхФорм()
	
	ВремТабПервогоМодуля = ПолучитьТаблицуПроцедурМодуля(МодульФормы);
	ВремТабВторогоМодуля = ПолучитьТаблицуПроцедурМодуля(ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());
	
	ПолучитьТаблицуСтруктурногоСравнения(ВремТабПервогоМодуля,ВремТабВторогоМодуля,СтруктурноеСравнениеМодуля,ТолькоИзмененные);
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ПОСТРОЕНИЯ ДЕРЕВА ЭЛЕМЕНТОВ ФОРМЫ ДЛЯ УПРАВЛЯЕМЫХ ФОРМ
//==============================================================================================================================================

//запуск построения дерева элементов управляемой формы - заполнение информации о корневом элементе дерева
Процедура ПостроитьДеревоУправляемойФормы(Дерево) Экспорт
	
	Дерево.Колонки.Добавить("ДействияЭлемента");
	Дерево.Колонки.Добавить("СвойстваЭлемента");
	
	//таблица событий, назначенных самой управляемой форме
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Событие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
	ТаблицаСобытий.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
	ТаблицаСобытий.Колонки.Добавить("ТекстПроцедурыМодуля",Новый ОписаниеТипов("Строка"));
	
	ТекстФормы = Новый ТекстовыйДокумент;
	ТекстФормы.Прочитать(ФормаСтрокой);
	МассивФормы = СтрокаВнутрВХМЛТело(ТекстФормы.ПолучитьТекст());
	ДокументDOM = ПолучитьДокументDOMФормы(МассивФормы);

	//устанавливаем текст модуля
	УстановитьТекстМодуляУправляемойФормы(ДокументDOM);	

	//добавляем в дерево элементов формы строку самой формы	
	СтрокаФормы = Дерево.Строки.Добавить();
	СтрокаФормы.ИмяЭлемента = "УправляемаяФорма";
	СтрокаФормы.ТипЭлемента = "УправляемаяФорма";
	СтрокаФормы.КартинкаФормы = ИндексКартинкиЭлФормы("УправляемаяФорма");
	
	//в управляемой форме команды хранятся отдельно
	//когда будем определять действия для кнопок, будем брать данные из этого соответствия
	//ключ соответствия - уникальный идентификатор команды
	//значение соответствия - структура, где хранится имя команды и действие команды 
	СоответствиеКоманд = СформироватьСоответствиеКоманд(ДокументDOM,Дерево);
	
	//ДЗ с элементами формы будем строить рекурсивно спускаясь по дереву XML формы
	//Позиционируемся на узле структуры элементов управляемой формы
	КорневойУзел = ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы[1];
	//версия дерева сериализации
	ВерсияСериализации = Число(КорневойУзел.ДочерниеУзлы[0].ТекстовоеСодержимое);
	
	//в 18 элементе указано число - количество заданных особых свойств формы
	//нас эти свойства не интересуют, мы пропускаем указанное количество узлов (*2, потому что узел объявления свойства и узел значения свойства)
	УзелРазбора = КорневойУзел.ДочерниеУзлы[18];
	КоличествоПропускаемыхЭлементов = УзелРазбора.ТекстовоеСодержимое;
	Если КоличествоПропускаемыхЭлементов <> 0 Тогда
		ПропуститьСтроки(Число(КоличествоПропускаемыхЭлементов)*2,УзелРазбора);
	КонецЕсли;
	
	//следующий узел будет содержать как раз описание заданных обработчиков событий формы
	//Эти обработчики событий надо добавить в ТЗ
	Если УзелРазбора.ТекстовоеСодержимое<>"0" Тогда
		КоличествоСобытий=Число(УзелРазбора.ПервыйДочерний.ТекстовоеСодержимое);
		СтрокаФормы.ДействияЭлемента = ЗаполнитьСобытия(УзелРазбора,КоличествоСобытий,ТаблицаСобытий);
	Иначе
		СтрокаФормы.ДействияЭлемента = ТаблицаСобытий; //если событий нет - для формы нужно установить пустую таблицу действий
	КонецЕсли;
	
	//спускаемся ниже 
	Если ВерсияСериализации>25 Тогда
		ПропуститьСтроки(2,УзелРазбора);
	Иначе
		ПропуститьСтроки(1,УзелРазбора);
	КонецЕсли;
	
	//сохраняем внутреннее представление свойств формы
	Таблица=СоответствиеСвойствЭлементам.Получить("УправляемаяФорма");
	ТаблицаСвойств=Таблица.Скопировать();
	СтрокаФормы.СвойстваЭлемента = ПолучитьВнутреннееПредставление(КорневойУзел,ТаблицаСвойств,0);
	
	//анализируем наличие командной панели формы
	Если УзелРазбора.ТекстовоеСодержимое<>"0" Тогда
		Если УзелРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" или УзелРазбора.ДочерниеУзлы[4].ИмяУзла = "elem" Тогда
			ДопИндексКоманднойПанели = 0;
		Иначе
			ДопИндексКоманднойПанели = 1;
		КонецЕсли;
		//определяем, содержит ли командная панель кнопки
		Если Число(УзелРазбора.ДочерниеУзлы[0].ТекстовоеСодержимое)>13 Тогда
			КоличествоКнопокКоманднойПанели=Число(УзелРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели].ТекстовоеСодержимое);
		Иначе
			КоличествоКнопокКоманднойПанели=Число(УзелРазбора.ДочерниеУзлы[20+ДопИндексКоманднойПанели].ТекстовоеСодержимое);
		КонецЕсли;
		Если КоличествоКнопокКоманднойПанели<>0 Тогда
			СтрокаКомПанели=СтрокаФормы.Строки.Добавить();
			СтрокаКомПанели.ИмяЭлемента="Командная панель";
			СтрокаКомПанели.ТипЭлемента="Командная панель";
			СтрокаКомПанели.КартинкаФормы=ИндексКартинкиЭлФормы("КоманднаяПанель");
			//сохраняем внутреннее представление свойств командной панели формы
			ТаблицаКоманднойПанели=СоответствиеСвойствЭлементам.Получить("КоманднаяПанель");
			ТаблицаСвойствКоманднойПанели=ТаблицаКоманднойПанели.Скопировать();
			СтрокаКомПанели.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелРазбора,ТаблицаСвойствКоманднойПанели,ДопИндексКоманднойПанели);
			ЗагрузитьПодчиненные(УзелРазбора, УзелРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели],СтрокаКомПанели.Строки,СоответствиеКоманд);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийУзел=СтрокаФормы.Строки;
	
	//оставшиеся узлы определяют структуру элементов формы
	ЗагрузитьПодчиненные(КорневойУзел,УзелРазбора.СледующийСоседний,ТекущийУзел,СоответствиеКоманд);
	
	//заполняем закладку реквизитов формы
	ВывестиДеревоРеквизитовУправляемойФормы(ДокументDOM,Дерево);
	//заполняем закладку параметров формы
	ВывестиСписокПараметров(ДокументDOM,Дерево);
	
	Если Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
		ЭлементыФормы.ДеревоЭлементовФормы.НачальноеОтображениеДерева=НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//Иначе
	//	ЭлементыФормы.ДеревоЭлементовФормыСравнения.НачальноеОтображениеДерева=НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	//заполняем закладку командного интерфейса
	СформироватьКомандныйИнтерфейс(ДокументDOM,Дерево);
	ЭлементыФормы.ПанельНавигации.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ЭлементыФормы.КоманднаяПанель.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры

//рекурсивное построение дерева элементов управляемой формы
Процедура ЗагрузитьПодчиненные(Узел,УзелРазбора,ТекущийУзел,СоответствиеКоманд)
	
	//Определяем количество подчиненных элементов
	КоличествоПодчиненныхЭлементов 	= Число(УзелРазбора.ТекстовоеСодержимое);
	БазовыйТипЭлемента 				= Неопределено;
	ИсследуемыйУзел 				= УзелРазбора;
	
	Для ч=1 По КоличествоПодчиненныхЭлементов*2 Цикл
		
		ИсследуемыйУзел = ИсследуемыйУзел.СледующийСоседний;
		
		//на всякий случай
		Если ИсследуемыйУзел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		//чередуются узлы объявнения базового типа элемента (с именем узла "data") и узлы с именем узла "elem" c информацией о самом элементе
		Если ИсследуемыйУзел.ИмяУзла = "data" Тогда  //в узле указан идентификатор базового типа элемента
			БазовыйТипЭлемента = ИсследуемыйУзел.ТекстовоеСодержимое;
		Иначе                                     //в узле содержится информация о самом элементе - ее мы и будем разбирать
			УзелПользовательскойВидимости = ?(БазовыйТипЭлемента="a9f3b1ac-f51b-431e-b102-55a69acdecad",3,4);
			//в зависимости от этого значения, позиция дочерних узлов наименования и определяющего тип индекса будет варьироваться
			Если ИсследуемыйУзел.ДочерниеУзлы[УзелПользовательскойВидимости].ТекстовоеСодержимое = "0" или ИсследуемыйУзел.ДочерниеУзлы[УзелПользовательскойВидимости].ИмяУзла = "elem" тогда
				ДопИндекс = 0;
			Иначе 
				ДопИндекс = 1;
			КонецЕсли;
			
			//таблица событий, назначенных обрабатываемому элементу управляемой формы
			ТаблицаСобытий = Новый ТаблицаЗначений;
			ТаблицаСобытий.Колонки.Добавить("Событие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
			ТаблицаСобытий.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
			ТаблицаСобытий.Колонки.Добавить("ТекстПроцедурыМодуля",Новый ОписаниеТипов("Строка"));
			
			//определяем необходимые параметры - тип элемента и наименование элемента
			ИндексТипаЭлемента=?(БазовыйТипЭлемента="143c00f7-a42d-4cd7-9189-88e4467dc768" или БазовыйТипЭлемента="a9f3b1ac-f51b-431e-b102-55a69acdecad",?(БазовыйТипЭлемента="a9f3b1ac-f51b-431e-b102-55a69acdecad",ИсследуемыйУзел.Дочерниеузлы[4+ДопИндекс].ТекстовоеСодержимое,ИсследуемыйУзел.Дочерниеузлы[7].ТекстовоеСодержимое),ИсследуемыйУзел.Дочерниеузлы[5+ДопИндекс].ТекстовоеСодержимое);
			ТипЭлемента=ОпределитьТипЭлемента(БазовыйТипЭлемента,ИндексТипаЭлемента);
			НаименованиеЭлемента=?(БазовыйТипЭлемента="143c00f7-a42d-4cd7-9189-88e4467dc768" или БазовыйТипЭлемента="a9f3b1ac-f51b-431e-b102-55a69acdecad",Вычислить(ИсследуемыйУзел.ДочерниеУзлы[5+ДопИндекс].ТекстовоеСодержимое),Вычислить(ИсследуемыйУзел.Дочерниеузлы[6+ДопИндекс].ТекстовоеСодержимое));
			
			//вводим новую строку в дерево элементов управляемой формы и заполняем все данные обрабатываемого элемента
			НоваяСтрока = ТекущийУзел.Добавить();
			НоваяСтрока.ИмяЭлемента 	= НаименованиеЭлемента;
			НоваяСтрока.ПолноеИмя 		= НаименованиеЭлемента;
			НоваяСтрока.ТипЭлемента 	= ТипЭлемента;
			НоваяСтрока.КартинкаФормы 	= ИндексКартинкиЭлФормы(БазовыйТипЭлемента);
			
			ТипЭлементаФормы=СтрЗаменить(ТРег(ТипЭлемента)," ","");
			Таблица=СоответствиеСвойствЭлементам.Получить(ТипЭлементаФормы);
			Если Таблица=Неопределено Тогда
				ТаблицаСвойств=Новый ТаблицаЗначений;
			Иначе
				ТаблицаСвойств=Таблица.Скопировать();
			КонецЕсли;

			
			//заполняем события и загружаем подчиненные
			Если БазовыйТипЭлемента = "cd5394d0-7dda-4b56-8927-93ccbe967a01" Тогда //базовый тип Группа
				//добавим события группе (имеет смысл только для группы страниц, когда ИндексТипаЭлемента = "3")
				Если ИндексТипаЭлемента = "3" Тогда
					Если ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс].ДочерниеУзлы[2].ТекстовоеСодержимое<>"0" Тогда 
						УзелСобытия = ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс].ДочерниеУзлы[2].ДочерниеУзлы[1];
						СтрокаСобытий 			= ТаблицаСобытий.Добавить();
						СобытиеПоИдентификатору = СписокОбработчиковУправляемойФормы.НайтиПоЗначению(УзелСобытия.ТекстовоеСодержимое);
						Если СобытиеПоИдентификатору<>Неопределено Тогда
							СтрокаСобытий.Событие=СобытиеПоИдентификатору.Представление;
						Иначе
							СтрокаСобытий.Событие = УзелСобытия.ТекстовоеСодержимое;
						КонецЕсли;
						СтрокаСобытий.Действие 	= Вычислить(УзелСобытия.СледующийСоседний.ТекстовоеСодержимое);
						СтрокаСобытий.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(СтрокаСобытий.Действие,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());;
					КонецЕсли;
					НоваяСтрока.ДействияЭлемента = ТаблицаСобытий; //даже если событий нет - для этих элементов нужно установить пустую таблицу действий
				КонецЕсли;
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				//загрузим в дерево подчиненные элементы
				Если Число(ИсследуемыйУзел.ДочерниеУзлы[0].ТекстовоеСодержимое)>13 Тогда
					УзелКоличества = ИсследуемыйУзел.ДочерниеУзлы[21+ДопИндекс];
				Иначе
					УзелКоличества = ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс];
				КонецЕсли;
					КоличествоПодчиненныхТекущему = Число(УзелКоличества.ТекстовоеСодержимое);
				Если КоличествоПодчиненныхТекущему <> 0 Тогда
					ПодчиненныйУзел = НоваяСтрока.Строки;
					ЗагрузитьПодчиненные(ИсследуемыйУзел,УзелКоличества,ПодчиненныйУзел,СоответствиеКоманд);
				КонецЕсли;
			ИначеЕсли  БазовыйТипЭлемента = "143c00f7-a42d-4cd7-9189-88e4467dc768" Тогда	//базовый тип Список
				//пропускаем ненужные строки
				УзелДляРазбора  = ИсследуемыйУзел.ДочерниеУзлы[55+ДопИндекс];
				КоличествоСчетчик = Число(ИсследуемыйУзел.ДочерниеУзлы[54+ДопИндекс].ТекстовоеСодержимое)*2 - 1;
				Если КоличествоСчетчик <> 0 Тогда
					ПропуститьСтроки(КоличествоСчетчик,УзелДляРазбора);
				КонецЕсли;
				//добавим события списку
				Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
					КоличествоСобытий = Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
					НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				Иначе
					НоваяСтрока.ДействияЭлемента = ТаблицаСобытий; //если событий нет - для этих элементов нужно установить пустую таблицу действий
				КонецЕсли;
				Если Число(ИсследуемыйУзел.ДочерниеУзлы[0].ТекстовоеСодержимое)>35 Тогда
					//пропускаем ненужные строки
					ПропуститьСтроки(2,УзелДляРазбора);
				Иначе
					ПропуститьСтроки(1,УзелДляРазбора);
				КонецЕсли;
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				//анализируем наличие контекстного меню
				Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
					Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое = "0" ИЛИ УзелДляРазбора.ДочерниеУзлы[4].ИмяУзла = "elem" Тогда
						ДопИндексКонтекстногоМеню = 0;
					Иначе
						ДопИндексКонтекстногоМеню = 1;
					КонецЕсли;
					//определяем, содержит ли контекстное меню пункты
					КоличествоПунктовКонтекстногоМеню = Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
					Если КоличествоПунктовКонтекстногоМеню <> 0 Тогда
						СтрокаКонтекстногоМеню = НоваяСтрока.Строки.Добавить();
						СтрокаКонтекстногоМеню.ИмяЭлемента 		= "Контекстное меню";
						СтрокаКонтекстногоМеню.ТипЭлемента 		= "Контекстное меню";
						СтрокаКонтекстногоМеню.КартинкаФормы 	= ИндексКартинкиЭлФормы("КонтекстноеМеню");
						//сохраняем внутреннее представление свойств контекстного меню
						ТаблицаКонтекстногоМеню=СоответствиеСвойствЭлементам.Получить("КонтекстноеМеню");
						ТаблицаСвойствКонтекстногоМеню=ТаблицаКонтекстногоМеню.Скопировать();
						СтрокаКонтекстногоМеню.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелДляРазбора,ТаблицаСвойствКонтекстногоМеню,ДопИндексКонтекстногоМеню);
						ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
					КонецЕсли;
				КонецЕсли;
				Если Число(ИсследуемыйУзел.ДочерниеУзлы[0].ТекстовоеСодержимое)>35 Тогда					
					//пропускаем ненужные строки
					ПропуститьСтроки(1,УзелДляРазбора);
				Иначе
					УзелДляРазбора = УзелДляРазбора.СледующийСоседний;
				КонецЕсли;				
				//анализируем наличие командной панели
				Если УзелДляРазбора.ТекстовоеСодержимое<>"0" Тогда
					Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" или УзелДляРазбора.ДочерниеУзлы[4].ИмяУзла = "elem" Тогда
						ДопИндексКоманднойПанели = 0;
					Иначе
						ДопИндексКоманднойПанели = 1;
					КонецЕсли;
					//определяем, содержит ли командная панель кнопки
					КоличествоКнопокКоманднойПанели=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели].ТекстовоеСодержимое);
					Если КоличествоКнопокКоманднойПанели<>0 Тогда
						СтрокаКоманднойПанели = НоваяСтрока.Строки.Добавить();
						СтрокаКоманднойПанели.ИмяЭлемента = "Командная панель";
						СтрокаКоманднойПанели.ТипЭлемента = "Командная панель";
						СтрокаКоманднойПанели.КартинкаФормы = ИндексКартинкиЭлФормы("КоманднаяПанель");
						//сохраняем внутреннее представление свойств командной панели формы
						ТаблицаКоманднойПанели=СоответствиеСвойствЭлементам.Получить("КоманднаяПанель");
						ТаблицаСвойствКоманднойПанели=ТаблицаКоманднойПанели.Скопировать();
						СтрокаКоманднойПанели.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелДляРазбора,ТаблицаСвойствКоманднойПанели,ДопИндексКоманднойПанели);
						ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели],СтрокаКоманднойПанели.Строки,СоответствиеКоманд);
					КонецЕсли;
				КонецЕсли;
				//пропускаем ненужные строки
				УзелДляРазбора=УзелДляРазбора.СледующийСоседний;
				//загрузим в дерево подчиненные элементы
				КоличествоПодчиненныхТекущему=Число(УзелДляРазбора.ТекстовоеСодержимое);
				Если КоличествоПодчиненныхТекущему<>0 Тогда
					ПодчиненныйУзел = НоваяСтрока.Строки;
					ЗагрузитьПодчиненные(ИсследуемыйУзел,УзелДляРазбора,ПодчиненныйУзел,СоответствиеКоманд);
				КонецЕсли;
			ИначеЕсли БазовыйТипЭлемента = "a9f3b1ac-f51b-431e-b102-55a69acdecad" Тогда	//базовый тип Кнопка
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				//заполняем действие кнопки
				КомандаКнопки= СоответствиеКоманд.Получить(ИсследуемыйУзел.ДочерниеУзлы[8+ДопИндекс].ТекстовоеСодержимое);
				Если КомандаКнопки<>Неопределено Тогда
					СтрокаСобытий 			= ТаблицаСобытий.Добавить();
					СтрокаСобытий.Событие 	= КомандаКнопки.ИмяКоманды;
					СтрокаСобытий.Действие 	= Вычислить(КомандаКнопки.Действие);
					СтрокаСобытий.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(СтрокаСобытий.Действие,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());;;
				КонецЕсли;
				НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //даже если событий нет - для этих элементов нужно установить пустую таблицу действий
			ИначеЕсли БазовыйТипЭлемента = "c5259a1d-518a-4afd-b98d-0176027e4feb" Тогда
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
			ИначеЕсли БазовыйТипЭлемента = "3d3cb80c-508b-41fa-8a18-680cdf5f1712" Тогда  //базовый тип Декорация
				//находим действия декорации
				Если ИндексТипаЭлемента = "1" Тогда
					ИндексУзлаСобытий = 10;
				Иначе
					ИндексУзлаСобытий = 5;
				КонецЕсли;
					Если ИсследуемыйУзел.ДочерниеУзлы[18+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий].ТекстовоеСодержимое <> "0" Тогда
						УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[18+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий];
						КоличествоСобытий = Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
						НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
					Иначе
						НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //если событий нет - для этих элементов нужно установить пустую таблицу действий
					КонецЕсли;
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс];
				//анализируем наличие контекстного меню
				Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
					Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое = "0" ИЛИ УзелДляРазбора.ДочерниеУзлы[4].ИмяУзла = "elem" Тогда
						ДопИндексКонтекстногоМеню = 0;
					Иначе
						ДопИндексКонтекстногоМеню = 1;
					КонецЕсли;
					//определяем, содержит ли контекстное меню пункты
					Если Число(УзелДляРазбора.ДочерниеУзлы[0].ТекстовоеСодержимое) > 13 Тогда
						КоличествоПунктовКонтекстногоМеню = Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
					Иначе
						КоличествоПунктовКонтекстногоМеню = Число(УзелДляРазбора.ДочерниеУзлы[20+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
					КонецЕсли;
					Если КоличествоПунктовКонтекстногоМеню <> 0 Тогда
						СтрокаКонтекстногоМеню = НоваяСтрока.Строки.Добавить();
						СтрокаКонтекстногоМеню.ИмяЭлемента = "Контекстное меню";
						СтрокаКонтекстногоМеню.ТипЭлемента = "Контекстное меню";
						СтрокаКонтекстногоМеню.КартинкаФормы = ИндексКартинкиЭлФормы("КонтекстноеМеню");
						ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли БазовыйТипЭлемента = "77ffcc29-7f2d-4223-b22f-19666e7250ba" Тогда //базовый тип Поле
				Если Число(ИсследуемыйУзел.ДочерниеУзлы[0].ТекстовоеСодержимое) > 25 Тогда
					НомерУзла = 40
				Иначе
					НомерУзла = 34
				КонецЕсли;
				//общие действия для поля
				Если ИсследуемыйУзел.ДочерниеУзлы[НомерУзла+ДопИндекс].ТекстовоеСодержимое <> "0" Тогда
					УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[НомерУзла+ДопИндекс];
					КоличествоСобытий = Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
					НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				Иначе
					НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //если событий нет - для этих элементов нужно установить пустую таблицу действий
				КонецЕсли;
				//дополнительные действия для поля
				ИндексУзлаСобытий = ОпределитьИндексУзлаСобытий(ИндексТипаЭлемента);
				Если ИндексУзлаСобытий<>Неопределено И ИсследуемыйУзел.ДочерниеУзлы[НомерУзла-1+ДопИндекс].ДочерниеУзлы.Количество() > ИндексУзлаСобытий И ИсследуемыйУзел.ДочерниеУзлы[39+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий].ТекстовоеСодержимое<>"0" Тогда
					УзелДляРазбора=ИсследуемыйУзел.ДочерниеУзлы[НомерУзла-1+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий];
					КоличествоСобытий=Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
					НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				КонецЕсли;	
				НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				Если Число(ИсследуемыйУзел.ДочерниеУзлы[0].ТекстовоеСодержимое) > 26 Тогда
					УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[НомерУзла+2+ДопИндекс];
				Иначе
					УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[НомерУзла+1]
				КонецЕсли;
				//анализируем наличие контекстного меню
				Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
					Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" или УзелДляРазбора.ДочерниеУзлы[4].ИмяУзла = "elem" Тогда
						ДопИндексКонтекстногоМеню = 0;
					Иначе
						ДопИндексКонтекстногоМеню = 1;
					КонецЕсли;
					//определяем, содержит ли контекстное меню пункты
					Если Число(УзелДляРазбора.ДочерниеУзлы[0].ТекстовоеСодержимое)>13 Тогда
						КоличествоПунктовКонтекстногоМеню=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
					Иначе
						КоличествоПунктовКонтекстногоМеню=Число(УзелДляРазбора.ДочерниеУзлы[20+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
					КонецЕсли;
					Если КоличествоПунктовКонтекстногоМеню<>0 Тогда
						СтрокаКонтекстногоМеню=НоваяСтрока.Строки.Добавить();
						СтрокаКонтекстногоМеню.ИмяЭлемента="Контекстное меню";
						СтрокаКонтекстногоМеню.ТипЭлемента="Контекстное меню";
						СтрокаКонтекстногоМеню.КартинкаФормы=ИндексКартинкиЭлФормы("КонтекстноеМеню");
						ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[22],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьИндексУзлаСобытий(ИндексТипаЭлемента)
	
	Если ИндексТипаЭлемента = "1" Тогда //поле надписи
		ИндексУзлаСобытий = 12;
	ИначеЕсли ИндексТипаЭлемента = "2" Тогда //поле ввода
		ИндексУзлаСобытий = 36;
	ИначеЕсли ИндексТипаЭлемента = "4" Тогда  //поле картинки
		ИндексУзлаСобытий = 16;
	ИначеЕсли ИндексТипаЭлемента = "6" Тогда  //поле табличного документа
		ИндексУзлаСобытий = 18;
	ИначеЕсли ИндексТипаЭлемента = "8" Тогда  //поле календаря
		ИндексУзлаСобытий = 14;
	ИначеЕсли ИндексТипаЭлемента = "11" ИЛИ ИндексТипаЭлемента = "12" или ИндексТипаЭлемента = "13" или ИндексТипаЭлемента = "15" Тогда	//поле диаграммы, поле диаграммы Ганта, поле дендрограммы или поле HTML документа
		ИндексУзлаСобытий = 5;
	ИначеЕсли ИндексТипаЭлемента = "14" или ИндексТипаЭлемента = "16" Тогда //графическая или географическая схема
		ИндексУзлаСобытий = 6;
	Иначе   //флажок, переключатель, поле текстового документа, поле индикатора, поле полосы регулирования, поле форматированного документа
		ИндексУзлаСобытий = Неопределено;
	КонецЕсли;
	
КонецФункции

//для построения дерева элементов второй формы
Процедура ПостроитьДеревоДляСравненияУправляемойФормы() Экспорт
	
	СчетчикИзмененийЭлементовФорм=0;
	
	ДеревоСравнения.Колонки.Добавить("СвойстваПервойФормы");
	ДеревоСравнения.Колонки.Добавить("СвойстваВторойФормы");
	ДеревоСравнения.Колонки.Добавить("ДействияПервойФормы");
	ДеревоСравнения.Колонки.Добавить("ДействияВторойФормы");

	//сохраняем в промежуточную переменную текст первой формы
	МодульФормы=ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст();
	
	//строим дерево второй управляемой формы
	ПостроитьДеревоУправляемойФормы(ДеревоЭлементовФормыСравнения);
	
	Для каждого ТекущаяСтрока Из ДеревоЭлементовФормы.Строки Цикл
		
		СтрокаСравнения = ДеревоЭлементовФормыСравнения.Строки[0];
		НоваяСтрока 	= ДеревоСравнения.Строки.Добавить();
		
		НоваяСтрока.ДанныеПервойФормы 	= ТекущаяСтрока.ИмяЭлемента;
		НоваяСтрока.КартинкаПервойФормы = ТекущаяСтрока.КартинкаФормы;
		НоваяСтрока.ИмяЭлемента 		= СтрокаСравнения.ИмяЭлемента;
		НоваяСтрока.КартинкаВторойФормы = СтрокаСравнения.КартинкаФормы;
		НоваяСтрока.СвойстваПервойФормы = ТекущаяСтрока.СвойстваЭлемента;
		НоваяСтрока.СвойстваВторойФормы = СтрокаСравнения.СвойстваЭлемента;
		НоваяСтрока.ДействияПервойФормы = ТекущаяСтрока.ДействияЭлемента;
		НоваяСтрока.ДействияВторойФормы = СтрокаСравнения.ДействияЭлемента;
		Если ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваВторойФормы) и ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияВторойФормы) Тогда
			НоваяСтрока.ЕстьИзменения=0;
		Иначе
			НоваяСтрока.ЕстьИзменения=1;
			СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
		КонецЕсли;
		ПереборДерева(ТекущаяСтрока,НоваяСтрока,СтрокаСравнения);
	КонецЦикла;
	
	ЭлементыФормы.ДеревоСравнения.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ПостроитьСравнениеРеквизитовУправляемыхФорм();
	ПостроитьСравнениеКоманд();
	ПостроитьСравнениеПараметров();
	СчетчикИзмененийКомандныхИнтерфейсов=0;
	ПостроитьСравнениеКомандныхИнтерфейсов(КоманднаяПанель, КоманднаяПанельСравнения,СравнениеКомандныхПанелей);
	ПостроитьСравнениеКомандныхИнтерфейсов(ПанельНавигации, ПанельНавигацииСравнения,СравнениеПанелейНавигации);
	ЭлементыФормы.СравнениеПанелейНавигации.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ЭлементыФормы.СравнениеКомандныхПанелей.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//заполняем структурное сравнение модулей формы
	ЗаполнитьТаблицуСравненияПроцедурМодулейУправляемыхФорм();
	
	СравнениеМодулейФорм = ТекстовоеСравнениеВоВременныхФайлах(МодульФормы,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());
	
	Если СравнениеМодулейФорм.Сравнить() = Истина Тогда
		МодулиРазличны = Ложь;
	Иначе 
		МодулиРазличны = Истина;	
	КонецЕсли;
	
	ВыводСтатистики();
	
КонецПроцедуры

//вспомогательная процедура сравнения
Процедура ПереборДерева (СтрокаДерева,СтрокаНовогоДерева,СтрокаСравнения)
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		НоваяСтрокаСравнения = Неопределено;
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.ДанныеПервойФормы = Стр.ИмяЭлемента;
		НоваяСтрока.КартинкаПервойФормы = Стр.КартинкаФормы;
		НоваяСтрока.ТипЭлемента = Стр.ТипЭлемента;
		Если  СтрокаСравнения <> Неопределено тогда
			Если СтрокаСравнения.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента,ТипЭлемента",Стр.ИмяЭлемента,Стр.ТипЭлемента)).Количество()<>0 тогда
				НоваяСтрокаСравнения = СтрокаСравнения.Строки.Найти(Стр.ИмяЭлемента,"ИмяЭлемента");
				НоваяСтрока.ИмяЭлемента = НоваяСтрокаСравнения.ИмяЭлемента;
				НоваяСтрока.КартинкаВторойФормы = НоваяСтрокаСравнения.КартинкаФормы;
				НоваяСтрока.СвойстваПервойФормы = Стр.СвойстваЭлемента;
				НоваяСтрока.СвойстваВторойФормы = НоваяСтрокаСравнения.СвойстваЭлемента;
				НоваяСтрока.ДействияПервойФормы = Стр.ДействияЭлемента;
				НоваяСтрока.ДействияВторойФормы = НоваяСтрокаСравнения.ДействияЭлемента;
				Если ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.СвойстваВторойФормы) и ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияПервойФормы)=ЗначениеВСтрокуВнутр(НоваяСтрока.ДействияВторойФормы) Тогда
					НоваяСтрока.ЕстьИзменения=0;
				Иначе
					НоваяСтрока.ЕстьИзменения=1;
					СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
				КонецЕсли;
			Иначе 
				НоваяСтрока.ИмяЭлемента = "<Отсутствует>";
				НоваяСтрока.КартинкаВторойФормы = 29;
				НоваяСтрока.ЕстьИзменения = 3;
				СчетчикИзмененийЭлементовФорм = СчетчикИзмененийЭлементовФорм+1;
			КонецЕсли;
		Иначе
			НоваяСтрока.ИмяЭлемента="<Отсутствует>";
			НоваяСтрока.КартинкаВторойФормы=29;
			НоваяСтрока.ЕстьИзменения=3;
			СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
		КонецЕсли;
		ПереборДерева(стр,НоваяСтрока,НоваяСтрокаСравнения);
	КонецЦикла;
	Если СтрокаСравнения<>Неопределено  тогда
		Для каждого пр из СтрокаСравнения.Строки цикл
			Если СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ИмяЭлемента,ТипЭлемента",пр.ИмяЭлемента,пр.ТипЭлемента)).Количество()=0 тогда
				НоваяСтрока=СтрокаНовогоДерева.Строки.Добавить();
				НоваяСтрока.ДанныеПервойФормы="<Отсутствует>"; 				
				НоваяСтрока.КартинкаПервойФормы=29;
				НоваяСтрока.ЕстьИзменения=2;
				СчетчикИзмененийЭлементовФорм=СчетчикИзмененийЭлементовФорм+1;
				НоваяСтрока.ИмяЭлемента=пр.ИмяЭлемента;
				НоваяСтрока.КартинкаВторойФормы=Пр.КартинкаФормы;
				НоваяСтрока.ТипЭлемента=пр.ТипЭлемента;
				ОбратныйПеребор(Пр,НоваяСтрока);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры  

//==============================================================================================================================================
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ ПОСТРОЕНИЯ ДЕРЕВА ЭЛЕМЕНТОВ ФОРМЫ ДЛЯ УПРАВЛЯЕМЫХ ФОРМ
//==============================================================================================================================================

//для определения типа элемента из базового представления типа и индекса типа
Функция ОпределитьТипЭлемента(ТипЭлемента,ИндексТипаЭлемента)
	Если ТипЭлемента="77ffcc29-7f2d-4223-b22f-19666e7250ba" тогда
		Если   ИндексТипаЭлемента="1" тогда
			ПолученныйТипЭлемента="Поле надписи";
		ИначеЕсли ИндексТипаЭлемента="2" тогда
			ПолученныйТипЭлемента="Поле ввода";
		ИначеЕсли ИндексТипаЭлемента="3" тогда
			ПолученныйТипЭлемента="Поле флажка";
		ИначеЕсли ИндексТипаЭлемента="4" тогда
			ПолученныйТипЭлемента="Поле картинки";
		ИначеЕсли ИндексТипаЭлемента="5" тогда
			ПолученныйТипЭлемента="Поле переключателя";
		ИначеЕсли ИндексТипаЭлемента="6" тогда
			ПолученныйТипЭлемента="Поле табличного документа";
		ИначеЕсли ИндексТипаЭлемента="7" тогда
			ПолученныйТипЭлемента="Поле текстового документа";
		ИначеЕсли ИндексТипаЭлемента="8" тогда
			ПолученныйТипЭлемента="Поле календаря";
		ИначеЕсли ИндексТипаЭлемента="9" тогда
			ПолученныйТипЭлемента="Поле индикатора";
		ИначеЕсли ИндексТипаЭлемента="10" тогда
			ПолученныйТипЭлемента="Поле полосы регулирования";
		ИначеЕсли ИндексТипаЭлемента="11" тогда
			ПолученныйТипЭлемента="Поле диаграммы";
		ИначеЕсли ИндексТипаЭлемента="12" тогда
			ПолученныйТипЭлемента="Поле диаграммы Ганта";
		ИначеЕсли ИндексТипаЭлемента="13" тогда
			ПолученныйТипЭлемента="Поле дендрограммы";
		ИначеЕсли ИндексТипаЭлемента="14" тогда
			ПолученныйТипЭлемента="Поле графической схемы";
		ИначеЕсли ИндексТипаЭлемента="15" тогда
			ПолученныйТипЭлемента="Поле HTML документа";
		ИначеЕсли ИндексТипаЭлемента="16" тогда
			ПолученныйТипЭлемента="Поле географической схемы";
		ИначеЕсли ИндексТипаЭлемента="17" тогда
			ПолученныйТипЭлемента="Поле форматированного документа";
		ИначеЕсли ИндексТипаЭлемента="18" тогда
			ПолученныйТипЭлемента="Поле периода";
		ИначеЕсли ИндексТипаЭлемента="19" тогда
			ПолученныйТипЭлемента="Поле планировщика";
		Иначе 
			ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
		КонецЕсли;
	ИначеЕсли ТипЭлемента="cd5394d0-7dda-4b56-8927-93ccbe967a01" тогда
		Если   ИндексТипаЭлемента="0" тогда
			ПолученныйТипЭлемента="Группа командная панель";
		ИначеЕсли ИндексТипаЭлемента="1" тогда
			ПолученныйТипЭлемента="Группа подменю";
		ИначеЕсли ИндексТипаЭлемента="2" тогда
			ПолученныйТипЭлемента="Группа колонок";
		ИначеЕсли ИндексТипаЭлемента="3" тогда
			ПолученныйТипЭлемента="Группа страницы";
		ИначеЕсли ИндексТипаЭлемента="4" тогда
			ПолученныйТипЭлемента="Группа страница";
		ИначеЕсли ИндексТипаЭлемента="5" тогда
			ПолученныйТипЭлемента="Обычная группа";
		ИначеЕсли ИндексТипаЭлемента="6" тогда
			ПолученныйТипЭлемента="Группа кнопок";
		Иначе 
			ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
		КонецЕсли;
	ИначеЕсли ТипЭлемента="a9f3b1ac-f51b-431e-b102-55a69acdecad" тогда
		Если   ИндексТипаЭлемента="0" тогда
			ПолученныйТипЭлемента="Кнопка командной панели";
		ИначеЕсли   ИндексТипаЭлемента="1" тогда
			ПолученныйТипЭлемента="Кнопка обычная кнопка";
		ИначеЕсли   ИндексТипаЭлемента="2" тогда
			ПолученныйТипЭлемента="Кнопка гиперссылка";
		Иначе 
			ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
		КонецЕсли;
	ИначеЕсли ТипЭлемента="3d3cb80c-508b-41fa-8a18-680cdf5f1712" тогда
		Если   ИндексТипаЭлемента="0" тогда
			ПолученныйТипЭлемента="Декорация надпись";
		ИначеЕсли   ИндексТипаЭлемента="1" тогда
			ПолученныйТипЭлемента="Декорация картинка";
		Иначе 
			ПолученныйТипЭлемента = ТипЭлемента + "_"+ИндексТипаЭлемента;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = "143c00f7-a42d-4cd7-9189-88e4467dc768" Тогда
		ПолученныйТипЭлемента = "Таблица";
	ИначеЕсли ТипЭлемента = "c5259a1d-518a-4afd-b98d-0176027e4feb" Тогда
		Если ИндексТипаЭлемента = "0" Тогда
			ПолученныйТипЭлемента = "Дополнение формы  Отображение строки поиска";
		ИначеЕсли ИндексТипаЭлемента = "1" Тогда
			ПолученныйТипЭлемента = "Дополнение формы Отображение состояния просмотра";
		ИначеЕсли ИндексТипаЭлемента = "2" Тогда
			ПолученныйТипЭлемента = "Дополнение формы Управление поиском";
		Иначе
			ПолученныйТипЭлемента = ТипЭлемента + "_"+ИндексТипаЭлемента;
		КонецЕсли;
	Иначе ПолученныйТипЭлемента = ТипЭлемента + "_" + ИндексТипаЭлемента;
	КонецЕсли;		
	Возврат ПолученныйТипЭлемента;
КонецФункции

//пропускает строки, не участвующие в анализе дерева элементов формы
Процедура ПропуститьСтроки(КоличествоСчетчик,УзелРазбора)
	
	Для p = 0 По КоличествоСчетчик Цикл
		УзелРазбора=УзелРазбора.СледующийСоседний;
	КонецЦикла;	
	
КонецПроцедуры

//получение внутреннего представления для элементов форм 
Функция ПолучитьВнутреннееПредставление(ОбрабатываемыйУзел,ТаблицаСвойств,ДопИндекс)
	
	НоваяСтрока=ТаблицаСвойств.Добавить();

	Для каждого Колонка Из ТаблицаСвойств.Колонки Цикл
		СтрокаИндексаНахожденияСвойства = СтрЗаменить(Колонка.Имя,"n",Символы.ПС);
		ИндексСвойства = Число(СтрПолучитьСтроку(СтрокаИндексаНахожденияСвойства,2));
		Если ОбрабатываемыйУзел.ДочерниеУзлы.Количество()<=ИндексСвойства+ДопИндекс Тогда
			Продолжить;
		КонецЕсли;
		УзелДляРазбора = ОбрабатываемыйУзел.ДочерниеУзлы[ИндексСвойства+ДопИндекс];
		Если СтрЧислоСтрок(СтрокаИндексаНахожденияСвойства)>2 Тогда
			ИндексСвойства = Число(СтрПолучитьСтроку(СтрокаИндексаНахожденияСвойства,3));
			Если УзелДляРазбора.ДочерниеУзлы.Количество()<=ИндексСвойства Тогда
				Продолжить;
			КонецЕсли;
			УзелДляРазбора = УзелДляРазбора.ДочерниеУзлы[ИндексСвойства];
		КонецЕсли;
		Если УзелДляРазбора.ИмяУзла = "elem" Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(УзелДляРазбора,ЗаписьXML);
			СтрокаXML = ЗаписьXML.Закрыть();
		Иначе
			СтрокаXML = УзелДляРазбора.ТекстовоеСодержимое;
		КонецЕсли;
		НоваяСтрока[Колонка.Имя]=СтрокаXML;
	КонецЦикла;
	
	Возврат ТаблицаСвойств;
	
КонецФункции

//заполняет таблицу действий элемента формы
Функция ЗаполнитьСобытия(УзелРазбора,КоличествоСобытий,ТаблицаСобытий)
	
	м=1;
	Пока м <=КоличествоСобытий Цикл
		Индекс=м*2-1;
		УзелСобытия=УзелРазбора.ДочерниеУзлы[Индекс];
		НоваяСтрока=ТаблицаСобытий.Добавить();
		СобытиеПоИдентификатору = СписокОбработчиковУправляемойФормы.НайтиПоЗначению(УзелСобытия.ТекстовоеСодержимое);
		Если СобытиеПоИдентификатору<>Неопределено Тогда
			НоваяСтрока.Событие=СобытиеПоИдентификатору.Представление;
		Иначе
			НоваяСтрока.Событие = УзелСобытия.ТекстовоеСодержимое;
		КонецЕсли;
		НоваяСтрока.Действие=Вычислить(УзелСобытия.СледующийСоседний.ТекстовоеСодержимое);
		НоваяСтрока.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(НоваяСтрока.Действие,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());
		м=м+1;
	КонецЦикла;
	ТаблицаСобытий.Сортировать("Событие");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ЗАПОЛНЕНИЯ ЗАКЛАДКИ "РЕКВИЗИТЫ" ДЛЯ УПРАВЛЯЕМЫХ ФОРМ
//==============================================================================================================================================

//определяет команды управляемой формы
Функция СформироватьСоответствиеКоманд(ДокументDOM,Дерево)
	
	Если Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
		ТП = ТПКоманд;
	Иначе 
		ТП = ТПКомандСравнения;
	КонецЕсли;
	
	СоответствиеКоманд=Новый Соответствие;
	СоответствиеИдентификаторовКоманд = Новый Соответствие;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента="/elem[1]/elem[4]/elem/data[3]"; //XPath для нахождения узлов с действиями команд
	РезультатXPath=ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1=1 цикл
		Узел=РезультатXPath.ПолучитьСледующий();
		Если Узел=Неопределено тогда
			Прервать;
		КонецЕсли;
		Структура=Новый Структура("ИмяКоманды,Действие");
		Структура.Вставить("ИмяКоманды",Вычислить(Узел.РодительскийУзел.ДочерниеУзлы[2].ТекстовоеСодержимое));
		Структура.Вставить("Действие",Узел.ТекстовоеСодержимое);
		СоответствиеКоманд.Вставить(Узел.РодительскийУзел.ДочерниеУзлы[1].ТекстовоеСодержимое,Структура);
		СоответствиеИдентификаторовКоманд.Вставить(Узел.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое+":"+Узел.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[1].ТекстовоеСодержимое,СтрЗаменить(Узел.РодительскийУзел.ДочерниеУзлы[2].ТекстовоеСодержимое,"""",""));
		СтрокаТЗКоманд = ТП.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗКоманд,Структура);
	КонецЦикла;
	
	Возврат СоответствиеКоманд;
	
КонецФункции

//определяет реквизиты управляемой формы
Процедура ВывестиДеревоРеквизитовУправляемойФормы(ДокументDOM,Дерево)
	
	//определение реквизитов формы
	Массив = Новый Массив;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента="/elem[1]/elem[2]/elem/data[3]";
	РезультатXPath=ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1=1 цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено тогда
			Прервать;
		КонецЕсли;
		Структура = Новый Структура("ИмяРеквизита,ТипРеквизита,Основной,ЗначениеТипаРеквизита,ТаблицаПодчиненных");
		Структура.Вставить("ИмяРеквизита",Вычислить(Узел.ТекстовоеСодержимое));
		Если Узел.РодительскийУзел.ДочерниеУзлы[10].ТекстовоеСодержимое="1" тогда
			Структура.Вставить("Основной",истина);
		Иначе				
			Структура.Вставить("Основной",ложь);
		КонецЕсли;
		Попытка
			Структура.Вставить("ТипРеквизита",Узел.РодительскийУзел.ДочерниеУзлы[5].ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое);
		Исключение  Структура.Вставить("ТипРеквизита","""U""");
		КонецПопытки;
		Попытка
			Структура.Вставить("ЗначениеТипаРеквизита",Узел.РодительскийУзел.ДочерниеУзлы[5].ДочерниеУзлы[1].ДочерниеУзлы[1].ТекстовоеСодержимое);
		Исключение
		КонецПопытки;
		КоличествоПодчиненных = Число(Узел.РодительскийУзел.ДочерниеУзлы[13].ТекстовоеСодержимое);
		Если КоличествоПодчиненных<>0 Тогда
			ТаблицаПодчиненных = Новый ТаблицаЗначений;
			ТаблицаПодчиненных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаПодчиненных.Колонки.Добавить("ТипРеквизита");
			ТаблицаПодчиненных.Колонки.Добавить("ЗначениеТипаРеквизита");
			УзелДляРазбора = Узел.РодительскийУзел.ДочерниеУзлы[14];
			ЗаполнитьПодчиненныеРеквизиты(ТаблицаПодчиненных,КоличествоПодчиненных,УзелДляРазбора);
			Структура.Вставить("ТаблицаПодчиненных",ТаблицаПодчиненных);
		КонецЕсли;
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Если Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
		ОбработатьМассивРеквизитовУправляемойФормы(Массив,СписокРеквизитовУправляемойФормы);
	Иначе 
		ОбработатьМассивРеквизитовУправляемойФормы(Массив,СписокРеквизитовУправляемойФормыСравнения);
	КонецЕсли;
	
КонецПроцедуры

//определяет подчиненные реквизиты для реквизитов управляемой формы
Процедура ЗаполнитьПодчиненныеРеквизиты(ТаблицаПодчиненных,КоличествоПодчиненных, Узел)
	
	м=1;
	Пока м<=КоличествоПодчиненных Цикл
		СтрокаПодчиненных = ТаблицаПодчиненных.Добавить();
		СтрокаПодчиненных.ИмяРеквизита = Вычислить(Узел.ДочерниеУзлы[3].ТекстовоеСодержимое);
		Попытка
			СтрокаПодчиненных.ТипРеквизита = Узел.ДочерниеУзлы[5].ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое;
		Исключение  СтрокаПодчиненных.ТипРеквизита = """U""";
		КонецПопытки;
		Попытка
			СтрокаПодчиненных.ЗначениеТипаРеквизита = Узел.ДочерниеУзлы[5].ДочерниеУзлы[1].ДочерниеУзлы[1].ТекстовоеСодержимое;
		Исключение
		КонецПопытки;
		Узел=Узел.СледующийСоседний;
		м=м+1;
	КонецЦикла;
	
КонецПроцедуры

//определяет параметры управляемой формы
Процедура ВывестиСписокПараметров(ДокументDOM,Дерево);
	//определение параметров формы
	МассивПараметров = Новый Массив;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ПараметрыФормы=	"/elem[1]/elem[3]/elem/data[2]";
	РезультатXPathПараметров=ДокументDOM.ВычислитьВыражениеXPath(ПараметрыФормы, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1=1 цикл
		УзелПараметра=РезультатXPathПараметров.ПолучитьСледующий();
		Если УзелПараметра=Неопределено тогда
			Прервать;
		КонецЕсли;
		СтруктураПараметров=Новый Структура("ИмяРеквизита,ТипРеквизита,ЗначениеТипаРеквизита,Основной");
		СтруктураПараметров.Вставить("ИмяРеквизита",Вычислить(УзелПараметра.ТекстовоеСодержимое));
		Попытка
			СтруктураПараметров.Вставить("ТипРеквизита",УзелПараметра.СледующийСоседний.ДочерниеУзлы[1].ДочерниеУзлы[0].ТекстовоеСодержимое);
		Исключение  СтруктураПараметров.Вставить("ТипРеквизита","""U""");
		КонецПопытки;
		Попытка
			СтруктураПараметров.Вставить("ЗначениеТипаРеквизита",УзелПараметра.СледующийСоседний.ДочерниеУзлы[1].ДочерниеУзлы[1].ТекстовоеСодержимое);
		Исключение
		КонецПопытки;
		СтруктураПараметров.Вставить("Основной",ложь);
		
		МассивПараметров.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Если Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
		ОбработатьМассивРеквизитов(МассивПараметров,ТППараметров,Истина);
	Иначе 
		ОбработатьМассивРеквизитов(МассивПараметров,ТППараметровСравнения,Истина);
	КонецЕсли;

КонецПроцедуры

//строит дерево реквизитов управляемой формы
Процедура ОбработатьМассивРеквизитовУправляемойФормы(МассивРеквизитов,ДЗ)
	
	Для Строка = 0 По МассивРеквизитов.ВГраница() Цикл
		НовыйРеквизит=ДЗ.Строки.Добавить();
		НовыйРеквизит.Реквизит=МассивРеквизитов[Строка].ИмяРеквизита;
		Если МассивРеквизитов[Строка].ТипРеквизита="""S""" тогда
			НовыйРеквизит.Тип="Строка";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""N""" тогда
			НовыйРеквизит.Тип="Число";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""B""" тогда
			НовыйРеквизит.Тип="Булево";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""D""" тогда
			НовыйРеквизит.Тип="Дата";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""U""" тогда
			НовыйРеквизит.Тип="Произвольный";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""#""" тогда
			СтрокаТипа=СоответствиеИдентификаторов.Получить(МассивРеквизитов[Строка].ЗначениеТипаРеквизита);
			НовыйРеквизит.Тип=СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаТипа,"Ссылка13","МенеджерЗаписи"), "Ссылка1","Объект"),"Ссылка7","Список"),"Ссылка3","Ссылка");
		КонецЕсли;
		НовыйРеквизит.ОсновнойРеквизит=МассивРеквизитов[Строка].Основной;
		Если МассивРеквизитов[Строка].ТаблицаПодчиненных<>Неопределено Тогда
			НовыйРеквизит.ИндексКартинки = 1;
			Для каждого ПодчиненныйРеквизит Из МассивРеквизитов[Строка].ТаблицаПодчиненных Цикл
				СтрокаПодчиненных = НовыйРеквизит.Строки.Добавить();
				СтрокаПодчиненных.Реквизит = ПодчиненныйРеквизит.ИмяРеквизита;
				Если ПодчиненныйРеквизит.ТипРеквизита="""S""" тогда
					СтрокаПодчиненных.Тип="Строка";
				ИначеЕсли ПодчиненныйРеквизит.ТипРеквизита="""N""" тогда
					СтрокаПодчиненных.Тип="Число";
				ИначеЕсли ПодчиненныйРеквизит.ТипРеквизита="""B""" тогда
					СтрокаПодчиненных.Тип="Булево";
				ИначеЕсли ПодчиненныйРеквизит.ТипРеквизита="""D""" тогда
					СтрокаПодчиненных.Тип="Дата";
				ИначеЕсли ПодчиненныйРеквизит.ТипРеквизита="""U""" тогда
					СтрокаПодчиненных.Тип="Произвольный";
				ИначеЕсли ПодчиненныйРеквизит.ТипРеквизита="""#""" тогда
					СтрокаТипа=СоответствиеИдентификаторов.Получить(ПодчиненныйРеквизит.ЗначениеТипаРеквизита);
					СтрокаПодчиненных.Тип=СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаТипа,"Ссылка13","МенеджерЗаписи"), "Ссылка1","Объект"),"Ссылка7","Список"),"Ссылка3","Ссылка");
				КонецЕсли;
				СтрокаПодчиненных.ИндексКартинки = 2;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//заполняет список реквизитов обычной формы (а также параметры управляемой формы)
Процедура ОбработатьМассивРеквизитов(МассивРеквизитов,ТЗ,ОбработкаПараметров)
	
	Для Строка = 0 По МассивРеквизитов.ВГраница() Цикл
		НовыйРеквизит=ТЗ.Добавить();
		НовыйРеквизит.Реквизит=МассивРеквизитов[Строка].ИмяРеквизита;
		Если МассивРеквизитов[Строка].ТипРеквизита="""S""" тогда
			НовыйРеквизит.Тип="Строка";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""N""" тогда
			НовыйРеквизит.Тип="Число";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""B""" тогда
			НовыйРеквизит.Тип="Булево";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""D""" тогда
			НовыйРеквизит.Тип="Дата";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""U""" тогда
			НовыйРеквизит.Тип="Произвольный";
		ИначеЕсли МассивРеквизитов[Строка].ТипРеквизита="""#""" тогда
			СтрокаТипа=СоответствиеИдентификаторов.Получить(МассивРеквизитов[Строка].ЗначениеТипаРеквизита);
			НовыйРеквизит.Тип=СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаТипа,"Ссылка13","МенеджерЗаписи"), "Ссылка1","Объект"),"Ссылка7","Список"),"Ссылка3","Ссылка");
		КонецЕсли;
		Если ОбработкаПараметров = Ложь Тогда
			НовыйРеквизит.ОсновнойРеквизит=МассивРеквизитов[Строка].Основной;
		КонецЕсли;
		
	КонецЦикла;
	СписокРеквизитов.Сортировать("Реквизит возр");
	
КонецПроцедуры

//заполняет дерево сравнения реквизитов управляемой формы
Процедура ПостроитьСравнениеРеквизитовУправляемыхФорм()
	СчетчикИзмененийРеквизитовФорм=0;
	Для каждого ТекущаяСтрока из СписокРеквизитовУправляемойФормы.Строки Цикл
		НоваяСтрока=СравнениеРеквизитовУправляемойФормы.Строки.Добавить();
		НоваяСтрока.РеквизитПервойФормы = ТекущаяСтрока.Реквизит;
		НоваяСтрока.ОсновнойРеквизит 	= ТекущаяСтрока.ОсновнойРеквизит;
		НоваяСтрока.ТипПервый 			= ТекущаяСтрока.Тип;
		НоваяСтрока.КартинкаПервогоРеквизита = ТекущаяСтрока.ИндексКартинки;
		СтрокаСравнения = СписокРеквизитовУправляемойФормыСравнения.Строки.Найти(НоваяСтрока.РеквизитПервойФормы,"Реквизит");
		Если СтрокаСравнения <> Неопределено Тогда
			НоваяСтрока.РеквизитВторойФормы = СтрокаСравнения.Реквизит;
			НоваяСтрока.ТипВторой 			= СтрокаСравнения.Тип;
			НоваяСтрока.КартинкаВторогоРеквизита = СтрокаСравнения.ИндексКартинки;
			Если ТекущаяСтрока.Тип = СтрокаСравнения.Тип Тогда
				НоваяСтрока.ЕстьИзменения = 0;
			Иначе 
				НоваяСтрока.ЕстьИзменения = 1;
				СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм + 1;
			КонецЕсли;
		Иначе 
			НоваяСтрока.РеквизитВторойФормы 		= "<Отсутствует>";
			НоваяСтрока.ТипВторой 					= "<Отсутствует>";
			НоваяСтрока.ЕстьИзменения 				= 3;
			НоваяСтрока.КартинкаВторогоРеквизита 	= 3;
			СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
		КонецЕсли;   
		ПереборДереваРеквизитов(ТекущаяСтрока, НоваяСтрока, СтрокаСравнения);
	КонецЦикла;
	Для каждого Строка Из СписокРеквизитовУправляемойФормыСравнения.Строки Цикл
		Если СписокРеквизитовУправляемойФормы.Строки.Найти(Строка.Реквизит,"Реквизит")=Неопределено Тогда
			НоваяСтрока = СравнениеРеквизитовУправляемойФормы.Строки.Добавить();
			НоваяСтрока.РеквизитПервойФормы 		= "<Отсутствует>"; 
			НоваяСтрока.ТипПервый 					= "<Отсутствует>";
			НоваяСтрока.ЕстьИзменения 				= 2;
			НоваяСтрока.КартинкаПервогоРеквизита 	= 3;
			НоваяСтрока.РеквизитВторойФормы 		= Строка.Реквизит;
			НоваяСтрока.ОсновнойРеквизит 			= Строка.ОсновнойРеквизит;
			НоваяСтрока.ТипВторой 					= Строка.Тип;
			НоваяСтрока.КартинкаВторогоРеквизита 	= Строка.ИндексКартинки;
			СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
			ОбратныйПереборДереваРеквизитов(Строка,НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//заполняет подчиненные уровни дерева сравнения реквизитов управляемой формы
Процедура ПереборДереваРеквизитов(СтрокаДерева,СтрокаНовогоДерева,СтрокаСравнения)
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		НоваяСтрокаСравнения = Неопределено;
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.РеквизитПервойФормы = Стр.Реквизит;
		НоваяСтрока.ОсновнойРеквизит 	= Стр.ОсновнойРеквизит;
		НоваяСтрока.ТипПервый 			= Стр.Тип;
		НоваяСтрока.КартинкаПервогоРеквизита = Стр.ИндексКартинки;
		Если  СтрокаСравнения <> Неопределено тогда
			НоваяСтрокаСравнения = СтрокаСравнения.Строки.Найти(НоваяСтрока.РеквизитПервойФормы,"Реквизит");
			Если НоваяСтрокаСравнения<>Неопределено тогда
				НоваяСтрока.РеквизитВторойФормы = НоваяСтрокаСравнения.Реквизит;
				НоваяСтрока.КартинкаВторогоРеквизита = НоваяСтрокаСравнения.ИндексКартинки;
				НоваяСтрока.ТипВторой 			= НоваяСтрокаСравнения.Тип;
				Если Стр.Тип = НоваяСтрокаСравнения.Тип Тогда
					НоваяСтрока.ЕстьИзменения = 0;
				Иначе 
					НоваяСтрока.ЕстьИзменения = 1;
					СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм + 1;
				КонецЕсли;
			Иначе 
				НоваяСтрока.РеквизитВторойФормы 	 = "<Отсутствует>";
				НоваяСтрока.ТипВторой 				 = "<Отсутствует>";
				НоваяСтрока.ЕстьИзменения 			 = 3;
				НоваяСтрока.КартинкаВторогоРеквизита = 3;
				СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
			КонецЕсли;
		Иначе
			НоваяСтрока.РеквизитВторойФормы      = "<Отсутствует>";
			НоваяСтрока.ТипВторой 			 	 = "<Отсутствует>";
			НоваяСтрока.ЕстьИзменения 		 	 = 3;
			НоваяСтрока.КартинкаВторогоРеквизита = 3;
			СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаСравнения<>Неопределено  тогда
		Для каждого пр из СтрокаСравнения.Строки цикл
			Если СтрокаДерева.Строки.Найти(пр.Реквизит,"Реквизит")=Неопределено тогда
			НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
			НоваяСтрока.РеквизитПервойФормы 	 = "<Отсутствует>"; 
			НоваяСтрока.ТипПервый 				 = "<Отсутствует>";
			НоваяСтрока.ЕстьИзменения 			 = 2;
			НоваяСтрока.РеквизитВторойФормы 	 = пр.Реквизит;
			НоваяСтрока.ТипВторой 				 = пр.Тип;
			НоваяСтрока.КартинкаПервогоРеквизита = 3;
			НоваяСтрока.КартинкаВторогоРеквизита = пр.ИндексКартинки;
			НоваяСтрока.ОсновнойРеквизит 		 = пр.ОсновнойРеквизит;
			СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//заполняет подчиненные уровни дерева сравнения реквизитов управляемой формы для добавленных строк
Процедура ОбратныйПереборДереваРеквизитов(СтрокаДерева,СтрокаНовогоДерева)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.РеквизитПервойФормы 	 = "<Отсутствует>"; 				
		НоваяСтрока.КартинкаПервогоРеквизита = 3;
		НоваяСтрока.ЕстьИзменения 			 = 2;
		НоваяСтрока.РеквизитВторойФормы 	 = стр.Реквизит;
		НоваяСтрока.КартинкаВторогоРеквизита = стр.ИндексКартинки;
		НоваяСтрока.ТипПервый 				 = "<Отсутствует>";
		НоваяСтрока.ТипВторой 				 = стр.Тип;
		СчетчикИзмененийРеквизитовФорм = СчетчикИзмененийРеквизитовФорм+1;
	КонецЦикла;
	
КонецПроцедуры

//заполняет таблицу  сравнения команд управляемой формы
Процедура ПостроитьСравнениеКоманд()
	
	СчетчикИзмененийКомандФорм=0;
	
	Для каждого ТекущаяСтрока из ТПКоманд Цикл
		НоваяСтрока=СравнениеКоманд.Добавить();
		НоваяСтрока.КомандаПервойФормы=ТекущаяСтрока.ИмяКоманды;
		НоваяСтрока.ДействиеПервойФормы=ТекущаяСтрока.Действие;
		СтрокаСравнения=ТПКомандСравнения.Найти(НоваяСтрока.КомандаПервойФормы,"ИмяКоманды");
		Если СтрокаСравнения<>Неопределено Тогда
			НоваяСтрока.КомандаВторойФормы=СтрокаСравнения.ИмяКоманды;
			НоваяСтрока.ДействиеВторойФормы=СтрокаСравнения.Действие;
			Если ТекущаяСтрока.Действие=СтрокаСравнения.Действие Тогда
				НоваяСтрока.ЕстьИзменения=0;
			Иначе НоваяСтрока.ЕстьИзменения=1;
				СчетчикИзмененийКомандФорм=СчетчикИзмененийКомандФорм+1;
			КонецЕсли;
		Иначе НоваяСтрока.КомандаВторойФормы="<Отсутствует>";
			НоваяСтрока.ДействиеВторойФормы="<Отсутствует>";
			НоваяСтрока.КартинкаВторойФормы = 1;
			СчетчикИзмененийКомандФорм=СчетчикИзмененийКомандФорм+1;
			НоваяСтрока.ЕстьИзменения=3;
		КонецЕсли;                  
	КонецЦикла;
	Для каждого Строка Из ТПКомандСравнения Цикл
		Если ТПКоманд.Найти(Строка.ИмяКоманды,"ИмяКоманды")=Неопределено Тогда
			НоваяСтрока=СравнениеКоманд.Добавить();
			НоваяСтрока.КомандаПервойФормы="<Отсутствует>"; 
			НоваяСтрока.ДействиеПервойФормы="<Отсутствует>";
			НоваяСтрока.КартинкаПервойФормы = 1;
			НоваяСтрока.ЕстьИзменения=2;
			СчетчикИзмененийКомандФорм=СчетчикИзмененийКомандФорм+1;
			НоваяСтрока.КомандаВторойФормы=Строка.ИмяКоманды;
			НоваяСтрока.ДействиеВторойФормы=Строка.Действие;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//заполняет таблицу  сравнения параметров управляемой формы
Процедура ПостроитьСравнениеПараметров()
	
	СчетчикИзмененийПараметровФорм=0;
	
	Для каждого ТекущаяСтрока из ТППараметров Цикл
		НоваяСтрока=СравнениеПараметров.Добавить();
		НоваяСтрока.ПараметрПервойФормы=ТекущаяСтрока.Реквизит;
		НоваяСтрока.ТипПервый=ТекущаяСтрока.Тип;
		СтрокаСравнения=ТППараметровСравнения.Найти(НоваяСтрока.ПараметрПервойФормы,"Реквизит");
		Если СтрокаСравнения<>Неопределено Тогда
			НоваяСтрока.ПараметрВторойФормы=СтрокаСравнения.Реквизит;
			НоваяСтрока.ТипВторой=СтрокаСравнения.Тип;
			Если ТекущаяСтрока.Тип=СтрокаСравнения.Тип Тогда
				НоваяСтрока.ЕстьИзменения=0;
			Иначе НоваяСтрока.ЕстьИзменения=1;
				СчетчикИзмененийПараметровФорм=СчетчикИзмененийПараметровФорм+1;
			КонецЕсли;
		Иначе НоваяСтрока.ПараметрВторойФормы="<Отсутствует>";
			НоваяСтрока.ТипВторой="<Отсутствует>";
			НоваяСтрока.КартинкаВторойФормы = 1;
			СчетчикИзмененийПараметровФорм=СчетчикИзмененийПараметровФорм+1;
			НоваяСтрока.ЕстьИзменения=3;
		КонецЕсли;                  
	КонецЦикла;
	Для каждого Строка Из ТППараметровСравнения Цикл
		Если ТППараметров.Найти(Строка.Реквизит,"Реквизит")=Неопределено Тогда
			НоваяСтрока=СравнениеПараметров.Добавить();
			НоваяСтрока.ПараметрПервойФормы="<Отсутствует>"; 
			НоваяСтрока.ТипПервый="<Отсутствует>";
			НоваяСтрока.КартинкаПервойФормы = 1;
			НоваяСтрока.ЕстьИзменения=2;
			СчетчикИзмененийПараметровФорм=СчетчикИзмененийПараметровФорм+1;
			НоваяСтрока.ПараметрВторойФормы=Строка.Реквизит;
			НоваяСтрока.ТипВторой=Строка.Тип;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ДЕКОМПИЛЯЦИИ ФОРМЫ (совместный труд разработки публикаций http://infostart.ru/public/15195/ от Sverkalov и http://infostart.ru/public/22147/ от MRAK)
//==============================================================================================================================================

Функция ДекомпиляторФормы(НомерФайлаСравнения=1)  //из публикации http://infostart.ru/public/99363/ от Istur
	мТекст = Новый ТекстовыйДокумент;
	Если НомерФайлаСравнения<>1 тогда
		МассивСтрок = ДеревоЭлементовФормыСравнения.Строки[0].Строки.НайтиСтроки(Новый Структура("Пометка",истина),Истина);
	Иначе
		МассивСтрок = ДеревоЭлементовФормы.Строки[0].Строки.НайтиСтроки(Новый Структура("Пометка",истина),Истина);
	КонецЕсли;
	Режим="ТолькоСозданиеЭлементов";
	Для каждого СтрДерева Из МассивСтрок Цикл
		ОбработкаПрерыванияПользователя();
		ДобавитьСвойстваЭлемента(СтрДерева.ТипЭлемента,СтрДерева.Элемент,СтрДерева,Режим);
	КонецЦикла; 
	Режим="МодификацияСуществующихЭлементов";
	Для каждого СтрДерева Из МассивСтрок Цикл
		ОбработкаПрерыванияПользователя();
		ДобавитьСвойстваЭлемента(СтрДерева.ТипЭлемента,СтрДерева.Элемент,СтрДерева,Режим);
	КонецЦикла; 
	Возврат мТекст.ПолучитьТекст();
КонецФункции

Процедура ДобавитьСвойстваЭлемента(ЭлементФормыСтр,Элемент,ЭлементТаблицы,Режим,Бутафория=Истина) 
	
	ИмяЭлемента = ЭлементТаблицы.ИмяЭлемента;
	Таб = "    ";
	ТекстЭлементТип = Строка(Элемент); 
	
	Если ЭлементФормыСтр = "Панель" Тогда
		
		ТекстЭлемент = "ПанельФормы";
		
		Если Режим<>"МодификацияСуществующихЭлементов" тогда
			
			Если ЭлементТаблицы.Панель = Неопределено Тогда
				
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+" = ЭлементыФормы.Добавить(Тип("""+ТекстЭлементТип+"""),"""+ИмяЭлемента+""",Истина);");
				
			Иначе	
				
				Если ЭлементТаблицы.Страница <> Неопределено Тогда //перейдем на нужную страницу для добавления панели
					мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы."+ЭлементТаблицы.Панель+".ТекущаяСтраница = ЭлементыФормы."+ЭлементТаблицы.Панель+".Страницы."+ЭлементТаблицы.Страница+";");	
					мТекст.ДобавитьСтроку(Таб + "//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				КонецЕсли; 
				
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+" = ЭлементыФормы.Добавить(Тип("""+ТекстЭлементТип+"""),"""+ИмяЭлемента+""",Истина,ЭлементыФормы."+ЭлементТаблицы.Панель+");");
				
			КонецЕсли;  
			
			//Установим положение элемента на форме
			Длина = СтрДлина(ТекстЭлемент);
			ТекстЭлементДляРазмеров = СокрЛП(ТекстЭлемент);
			мТекст.ДобавитьСтроку(Таб + "УстановитьПоложениеЭлемента(" + ТекстЭлементДляРазмеров + "," + 
			Формат(Элемент.Верх,"ЧГ=") + ","+ Формат(Элемент.Высота,"ЧГ=") + "," + Формат(Элемент.Лево,"ЧГ=") + "," + Формат(Элемент.Ширина,"ЧГ=") + ");");
			
			//Создадим нужные страницы панели и определим их свойства
			Для каждого ТекСтр Из Элемент.Страницы Цикл
				Если ТекСтр<>Элемент.Страницы[0] тогда
					мТекст.ДобавитьСтроку(Таб + "     ЭтаФорма.ЭлементыФормы."+ЭлементТаблицы.ИмяЭлемента +".Страницы.Добавить("+""""+ТекСтр.Имя+""","""+ТекСтр.Заголовок+""");");
				Иначе //переопределим свойства первой страницы
					мТекст.ДобавитьСтроку(Таб + "     ЭтаФорма.ЭлементыФормы."+ЭлементТаблицы.ИмяЭлемента +".Страницы[0].Имя="""+ТекСтр.Имя+""";");
					мТекст.ДобавитьСтроку(Таб + "     ЭтаФорма.ЭлементыФормы."+ЭлементТаблицы.ИмяЭлемента +".Страницы[0].Заголовок="""+ТекСтр.Заголовок+""";");
				КонецЕсли;	
				Если ТекСтр.Видимость=Ложь Тогда
					мТекст.ДобавитьСтроку(Таб + "     ЭтаФорма.ЭлементыФормы."+ЭлементТаблицы.ИмяЭлемента + ".Страницы." + ТекСтр.Имя + ".Видимость=Ложь;");
				КонецЕсли;
				Если ТекСтр.Доступность=Ложь Тогда
					мТекст.ДобавитьСтроку(Таб + "     ЭтаФорма.ЭлементыФормы."+ЭлементТаблицы.ИмяЭлемента + ".Страницы." + ТекСтр.Имя + ".Доступность=Ложь;");
				КонецЕсли;
			КонецЦикла;
			
		Иначе  //только модифицируем  панели
			
			мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+" = ЭлементыФормы." + ИмяЭлемента + ";");
			
			ДобавитьСвойства(Элемент,ТекстЭлемент,Таб,ЭлементТаблицы); // Добавим свойства панели
			Если Элемент.ПолучитьДействие("ПриСменеСтраницы")<>Неопределено и Бутафория=Ложь Тогда
				мТекст.ДобавитьСтроку(ТекстЭлемент + ".УстановитьДействие(""ПриСменеСтраницы"",Новый Действие("""+Строка(Элемент.ПолучитьДействие("ПриСменеСтраницы"))+"""));");
			КонецЕсли;
			УстановитьПривязки(Элемент,Таб +ТекстЭлемент); 					 // Установим привязки панели
			
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
			
		КонецЕсли;
		
		
	Иначе    //обрабатываем все остальные элементы формы (не панели)
		
		ТекстЭлемент = Таб + ТекстЭлементТип;
		
		Если  Режим<>"МодификацияСуществующихЭлементов" тогда
			
			Если ЭлементТаблицы.Панель = Неопределено Тогда
				
				мТекст.ДобавитьСтроку(ТекстЭлемент+" = ЭлементыФормы.Добавить(Тип("""+ТекстЭлементТип+"""),"""+ИмяЭлемента+""",Истина);");
				
			Иначе	
				
				Если ЭлементТаблицы.Страница <> Неопределено Тогда
					СтрокаВставки = "ЭлементыФормы."+ЭлементТаблицы.Панель+".ТекущаяСтраница = ЭлементыФормы."+ЭлементТаблицы.Панель+".Страницы."+ЭлементТаблицы.Страница+";";
					ТекстПоля = мТекст.ПолучитьТекст();
					Если Найти(ТекстПоля,СтрокаВставки)=0 Тогда
						мТекст.ДобавитьСтроку(Таб + СтрокаВставки);	
						мТекст.ДобавитьСтроку(Таб + "//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
					КонецЕсли;
				КонецЕсли; 
				
				мТекст.ДобавитьСтроку(ТекстЭлемент+" = ЭлементыФормы.Добавить(Тип("""+ТекстЭлементТип+"""),"""+ИмяЭлемента+""",Истина,ЭлементыФормы."+ЭлементТаблицы.Панель+");");
				
			КонецЕсли;
			
			//Установим положение элемента на форме
			Если  Не (ТипЗнч(Элемент) = Тип("ПолеВвода") и СокрЛП(ТекстЭлемент) = "Колонка.ЭлементУправления") Тогда
				Длина = СтрДлина(ТекстЭлемент);
				ТекстЭлементДляРазмеров = СокрЛП(ТекстЭлемент);
				мТекст.ДобавитьСтроку(Таб + "УстановитьПоложениеЭлемента(" + ТекстЭлементДляРазмеров + "," + 
				Формат(Элемент.Верх,"ЧГ=") + ","+ Формат(Элемент.Высота,"ЧГ=") + "," + Формат(Элемент.Лево,"ЧГ=") + "," + Формат(Элемент.Ширина,"ЧГ=") + ");");
				Если Бутафория=Ложь и Элемент.Данные<>"" Тогда
					мТекст.ДобавитьСтроку(Таб + "//!!!возможно, в форме отсутствует реквизит "+Элемент.Данные+", на который ссылается свойство ""Данные""!!!!");
					мТекст.ДобавитьСтроку(Таб + ""+ТекстЭлементДляРазмеров+".Данные = """+Элемент.Данные + """;");
				ИначеЕсли Бутафория=Ложь и СоответствиеДанныхПолное.Получить(Элемент.Имя)<>Неопределено Тогда
					Если Лев(СоответствиеДанныхПолное.Получить(Элемент.Имя),1)="-" Тогда
						Попытка
							СтандартныйРеквизит=ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления(ВидМетаданныхОбъекта)[СтрЗаменить(СоответствиеДанныхПолное.Получить(Элемент.Имя),"-","v")];
							ТекстСРазделителями=СтрЗаменить(СтандартныйРеквизит,".",Символы.ПС);
							мТекст.ДобавитьСтроку(Таб + "//!!!Свойство ""Данные"" ссылается на стандартный реквизит объекта "+ СтандартныйРеквизит + "!!!!");
						Исключение
							мТекст.ДобавитьСтроку(Таб + "//!!!Свойство ""Данные"" ссылается на стандартный реквизит объекта "+ СоответствиеДанныхПолное.Получить(Элемент.Имя)+"!!!!");
							ТекстСРазделителями=СоответствиеДанныхПолное.Получить(Элемент.Имя);
						КонецПопытки;
					Иначе
						мТекст.ДобавитьСтроку(Таб + "//!!!возможно, в объекте отсутствует реквизит "+СоответствиеДанныхПолное.Получить(Элемент.Имя)+", на который ссылается свойство ""Данные""!!!!");
						ТекстСРазделителями=СтрЗаменить(СоответствиеДанныхПолное.Получить(Элемент.Имя),".",Символы.ПС);
					КонецЕсли;
					мТекст.ДобавитьСтроку(Таб + ""+ТекстЭлементДляРазмеров+".Данные = """+СтрПолучитьСтроку(ТекстСРазделителями,СтрЧислоСтрок(ТекстСРазделителями)) + """;");
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлементФормыСтр = "Табличное поле"  Тогда 
				Если Бутафория=Ложь и Элемент.ТолькоПросмотр=Ложь  Тогда 
					мТекст.ДобавитьСтроку(ТекстЭлемент + ".ТолькоПросмотр=Ложь;");
				КонецЕсли;
				Для Каждого Колонка Из ЭлементТаблицы.Строки Цикл
					ВывестиКолонкуТабПоля(Элемент,Колонка.Элемент,ИмяЭлемента, Таб,Режим,Бутафория);
				КонецЦикла;
			КонецЕсли;
			
		Иначе   //только модифицируем
			
			мТекст.ДобавитьСтроку(ТекстЭлемент+" = ЭлементыФормы." + ИмяЭлемента + ";");
			
			ДобавитьСвойства(Элемент,ТекстЭлементТип,Таб,,Бутафория); // Добавим свойства
			ДобавитьДействие(Элемент,ТекстЭлемент,Бутафория); 	      // Установим действия на события
			УстановитьПривязки(Элемент,ТекстЭлемент); 		          // Установим новые привязки
			
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
			
			Если ЭлементФормыСтр = "Командная панель"  Тогда
				
				Таб1=Таб;
				Таб2=Таб+Таб;
				Если Элемент.Автозаполнение=истина и Бутафория=Истина тогда
					Если  Элемент.Кнопки.Количество()<>0 тогда
						Если Элемент.Кнопки[0].Имя<>"Действие" тогда  //командные панели к добавленными в конец меню кнопками
							АвтозаполнениеКоманднойПанели(Элемент,ИмяЭлемента,Таб2);
							Для Каждого Кнопка Из Элемент.Кнопки Цикл
								Если Элемент.Кнопки.Найти(Кнопка.Имя)=Неопределено тогда
									ДобавитьКнопку(Элемент,ИмяЭлемента,"Кнопка",Кнопка,Таб2,0,Режим);
								КонецЕсли;
							КонецЦикла;
						Иначе //формы выбора
							
							ДобавитьКнопку(Элемент,ИмяЭлемента,"Кнопка",Элемент.Кнопки[0],Таб2,0,Режим);
							Индекс=1;
							Попытка
								Если  Элемент.Кнопки[1].ТипКнопки=ТипКнопкиКоманднойПанели.Разделитель тогда
									ДобавитьКнопку(Элемент,ИмяЭлемента,"Кнопка",Элемент.Кнопки[1],Таб2,0,Режим);
									Индекс=Индекс+1;
								КонецЕсли;
							Исключение;
							КонецПопытки;
							
							АвтозаполнениеКоманднойПанели(Элемент,ИмяЭлемента,Таб2);
							
							Пока Индекс<=Элемент.Кнопки.Количество()-1 цикл      //оставшиеся кнопки добавляются в конец панели
								Если Элемент.Кнопки.Найти(Элемент.Кнопки[Индекс].Имя)=Неопределено тогда
									ДобавитьКнопку(Элемент,ИмяЭлемента,"Кнопка",Элемент.Кнопки[Индекс],Таб2,0,Режим);
								КонецЕсли;
								Индекс=Индекс+1;
							КонецЦикла;
							
						КонецЕсли;
					Иначе // командные панели без собственных кнопок	
						АвтозаполнениеКоманднойПанели(Элемент,ИмяЭлемента,Таб2);
					КонецЕсли;
					
				Иначе		
					
					Для Каждого Кнопка Из Элемент.Кнопки Цикл
						ДобавитьКнопку(Элемент,ИмяЭлемента,"Кнопка",Кнопка,Таб2,0,Режим,,,Бутафория);
					КонецЦикла;
				КонецЕсли;
				мТекст.ДобавитьСтроку(Таб1 + "//**************************************************");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьПривязки(Элемент,ТекстЭлемент)
	
	Перем ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента; 
	
	Для Каждого Граница Из Границы Цикл 
		
		Если Тип(Элемент)<>Тип("КнопкаКоманднойПанели") тогда
			Элемент.ПолучитьПривязку( Граница, ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, 
			ГраницаВторогоЭлемента); 
			Если ПервыйЭлемент <> Неопределено Тогда 
				ПервыйЭлемент = ОбрабатываемаяФорма.ЭлементыФормы.Найти(ПервыйЭлемент.Имя); 
				Если ПервыйЭлемент = Неопределено Тогда 
					ПервыйЭлемент = ОбрабатываемаяФорма.Панель; 
				КонецЕсли; 
			КонецЕсли; 
			Если ВторойЭлемент <> Неопределено Тогда 
				ВторойЭлемент = ОбрабатываемаяФорма.ЭлементыФормы.Найти(ВторойЭлемент.Имя); 
				Если ВторойЭлемент = Неопределено Тогда 
					ВторойЭлемент = ОбрабатываемаяФорма.Панель; 
				КонецЕсли; 
			КонецЕсли;  
			Если ПервыйЭлемент <> Неопределено Тогда
				ИмяПервогоЭлемента = "";
				Если ТипЗнч(ПервыйЭлемент) = Тип("Панель") Тогда
					Если ПервыйЭлемент=ОбрабатываемаяФорма.Панель тогда
						ИмяПервогоЭлемента = "Панель";
					Иначе ИмяПервогоЭлемента="ЭлементыФормы."+ПервыйЭлемент.Имя;
					КонецЕсли;
				Иначе
					ИмяПервогоЭлемента = "ЭлементыФормы."+ПервыйЭлемент.Имя;
				КонецЕсли; 
				Если ВторойЭлемент <> Неопределено Тогда
					ИмяВторогоЭлемента = "";
					Если ТипЗнч(ВторойЭлемент) = Тип("Панель") Тогда
						Если ВторойЭлемент= ОбрабатываемаяФорма.Панель тогда
							ИмяВторогоЭлемента = "Панель";
						Иначе
							ИмяВторогоЭлемента = "ЭлементыФормы."+ВторойЭлемент.Имя;
						КонецЕсли;
					Иначе
						ИмяВторогоЭлемента = "ЭлементыФормы."+ВторойЭлемент.Имя;
					КонецЕсли; 
					мТекст.ДобавитьСтроку(ТекстЭлемент+".УстановитьПривязку(ГраницаЭлементаУправления."+Граница+","+ИмяПервогоЭлемента+",ГраницаЭлементаУправления."+ГраницаПервогоЭлемента+","+ИмяВторогоЭлемента+",ГраницаЭлементаУправления."+ГраницаВторогоЭлемента+");");
				Иначе
					мТекст.ДобавитьСтроку(ТекстЭлемент+".УстановитьПривязку(ГраницаЭлементаУправления."+Граница+","+ИмяПервогоЭлемента+",ГраницаЭлементаУправления."+ГраницаПервогоЭлемента+");");
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСвойства(Элемент,ТекстЭлемент,Таб ="    ",СтрокаДерева = Неопределено,Бутафория=Истина)
	
	ТипЗначенияЭлемента = ТипЗнч(Элемент);
	
	Для каждого СтрТЗ Из ТаблицаСвойствПоляВвода Цикл
		Если Не СтрТЗ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Свойство = СтрТЗ.Свойство;
		Если (Свойство="ВыбираемоеЗначение" или Свойство="АвтоЗаполнение") и Бутафория=Истина Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			
			ТекстДоРавно = Таб + ТекстЭлемент + "." + Свойство + " = ";
			ТипЗначенияСвойства = ТипЗнч(Элемент[Свойство]);
			СвойствоЭлемента = Элемент[Свойство];
			
			Если ТипЗначенияЭлемента <> Тип("КолонкаТабличногоПоля") и ТипЗначенияЭлемента <> Тип("КнопкаКоманднойПанели")  Тогда
				ТипЗначенияСтрокой = Строка(Элемент.ТипЗначения);	
			Иначе
				ТипЗначенияСтрокой = "";
			КонецЕсли;
			
			Если Свойство = "ИсточникДействий" Тогда 
				
				Попытка
					Если Элемент<>СвойствоЭлемента тогда
						мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = ЭлементыФормы."+СвойствоЭлемента.Имя +";");
					КонецЕсли;
				Исключение 
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = ЭтаФорма;");
				КонецПопытки;	
				
			ИначеЕсли ТипЗнч(СвойствоЭлемента)=Тип("Шрифт") и Строка(СвойствоЭлемента)<>СтрТЗ.ЗначениеПоУмолчанию Тогда
				Если СвойствоЭлемента.Вид=ВидШрифта.WindowsШрифт Тогда
					Если СтрЧислоВхождений(Строка(СвойствоЭлемента),"Шрифт диалогов и меню") Тогда
						мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ШрифтДиалоговИМеню;");
					ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"ANSI моноширинный шрифт") Тогда	
						мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ANSIШрифтМоноширинный;");
					ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"ANSI пропорциональный шрифт") Тогда	
						мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ANSIШрифтПропорциональный;");
					ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"OEM моноширинный шрифт") Тогда	
						мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.OEMШрифтМоноширинный;");
					ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"Системный шрифт") Тогда	
						мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.СистемныйШрифт;");
					КонецЕсли;
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = Новый Шрифт(ШрифтОсновы,,"+СвойствоЭлемента.Размер+","+?(СвойствоЭлемента.Жирный=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Наклонный=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Подчеркивание=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Зачеркивание=Истина,"истина","ложь")+");");
				ИначеЕсли СвойствоЭлемента.Вид=ВидШрифта.Абсолютный Тогда	
					СтрокаШрифта=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаШрифта,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
				КонецЕсли;
			ИначеЕсли ТипЗнч(СвойствоЭлемента)=Тип("Цвет") и Строка(СвойствоЭлемента)<>СтрТЗ.ЗначениеПоУмолчанию Тогда
				Если СвойствоЭлемента.Вид=ВидЦвета.Абсолютный Тогда
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = Новый Цвет("+СвойствоЭлемента.Красный+","+СвойствоЭлемента.Зеленый+","+СвойствоЭлемента.Синий+");");
				ИначеЕсли СвойствоЭлемента.Вид=ВидЦвета.WebЦвет или СвойствоЭлемента.Вид=ВидЦвета.WindowsЦвет Тогда	
					СтрокаЦвета=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаЦвета,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
				КонецЕсли;
				
				
				
			ИначеЕсли Свойство="Картинка" тогда 
				
				Если СвойствоЭлемента.Вид<>ВидКартинки.Пустая тогда
					
					Если СвойствоЭлемента.Вид=ВидКартинки.ИзБиблиотеки тогда
						ВремФайл=ПолучитьИмяВременногоФайла();
						СвойствоЭлемента.ПолучитьДвоичныеДанные().Записать(времФайл);
						ФайлВрем=Новый Файл(ВремФайл);
						СтрокаКартинки=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
						
						Если ФайлВрем.Размер()<>0 тогда  //картинка из стандартной библиотеки
							
							мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
							
						Иначе 							 //картинка из библиотеки конфигурации
							
							РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
							РегулярноеВыражение.Multiline=истина;
							РегулярноеВыражение.IgnoreCase=истина;
							РегулярноеВыражение.Pattern="\{0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},";
							Matches=РегулярноеВыражение.Execute(СтрокаКартинки);
							Для каждого Match из Matches цикл
								ИдентификаторКартинки=Match.SubMatches(0); //находим идентификатор картинки конфигурации
							КонецЦикла;
							Если СоответствиеИдентификаторов.Получить(ИдентификаторКартинки)<>Неопределено тогда
								ПромежуточныйФайл=Новый файл(ФормаСтрокой);
								КаталогПромежуточногоФайла=ПромежуточныйФайл.Путь;
								ФайлКаталога=Новый Файл(КаталогПромежуточногоФайла);
								КаталогРаспаковки=ФайлКаталога.Путь;
								ТекстФайлаКартинки=Новый ТекстовыйДокумент;
								ТекстФайлаКартинки.Прочитать(КаталогРаспаковки+"\"+ИдентификаторКартинки+".0");
								СтрокаФайлаКартинки=ТекстФайлаКартинки.ПолучитьТекст();
								РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
								РегулярноеВыражение.Multiline=истина;
								РегулярноеВыражение.IgnoreCase=истина;
								РегулярноеВыражение.Pattern="\{#base64:((.*(\s)*)*)\}";
								Matches1=РегулярноеВыражение.Execute(СтрокаФайлаКартинки);
								Для каждого Match1 Из Matches1 Цикл
									СтрокаКартинки=Match1.SubMatches(0); //получаем двоичные данные картинки конфигурации из файла картинки
								КонецЦикла;
								Если Match1=Неопределено тогда
									РегулярноеВыражение.Pattern="\#data:((.*(\s)*)*)\}\n\}\n\}";
									Matches1=РегулярноеВыражение.Execute(СтрокаФайлаКартинки);
									Для каждого Match1 Из Matches1 Цикл
										СтрокаКартинки=Match1.SubMatches(0); //получаем двоичные данные картинки конфигурации из файла картинки
									КонецЦикла;
								КонецЕсли;
								мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = Новый Картинка(Base64Значение("""+СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+Таб+"|")+"""),истина);");
								
								Base64Значение(СтрокаКартинки).Записать(КаталогВременныхФайлов()+"image009");
							КонецЕсли;
							
						КонецЕсли;
						
						УдалитьФайлы(ВремФайл);
						
					Иначе  	//абсолютная картинка
						
						СтрокаКартинки=Base64Строка(СвойствоЭлемента.ПолучитьДвоичныеДанные());
						мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = Новый Картинка(Base64Значение("""+СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+Таб+"|")+"""), истина);");
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли (Свойство = "ВысотаПодвала" и СвойствоЭлемента=0) или (Свойство = "ВысотаШапки" и СвойствоЭлемента=0) Тогда	
				
			ИначеЕсли Строка(СвойствоЭлемента)<>"НеизвестныйОбъект" и Элемент[Свойство]<>Неопределено тогда
				
				Если ТипЗначенияСвойства = Тип("Булево") Тогда
					
					Если Свойство = "КнопкаОчистки" Тогда
						Если Элемент[Свойство] <> Булево(СтрТЗ.ЗначениеПоУмолчанию) Тогда
							Если ТипЗначенияСтрокой="Дата" или ТипЗначенияСтрокой="Строка" Тогда
								ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Ложь, ТекстДоРавно);
							Иначе
								мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли Свойство = "КнопкаВыбора" Тогда
						Если Элемент[Свойство] <> Булево(СтрТЗ.ЗначениеПоУмолчанию) Тогда
							мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
						КонецЕсли;
					ИначеЕсли Свойство = "АвтоПереносСтрок" Тогда
						Если Элемент[Свойство] <> Булево(СтрТЗ.ЗначениеПоУмолчанию) Тогда
							Если ТипЗначенияСтрокой="Дата" Тогда
								ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Ложь, ТекстДоРавно);
							ИначеЕсли ТипЗначенияСтрокой="Строка" Тогда
								ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Истина, ТекстДоРавно);
							Иначе
								мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						
						Попытка
							Если Элемент[Свойство] <> Булево(СтрТЗ.ЗначениеПоУмолчанию) Тогда
								мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
							КонецЕсли;
						Исключение
							мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
						КонецПопытки;
					КонецЕсли;
					
				ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
					
					Если СтрТЗ.ЗначениеПоУмолчанию="" или СвойствоЭлемента <> Число(СтрТЗ.ЗначениеПоУмолчанию) Тогда
						мТекст.ДобавитьСтроку(ТекстДоРавно + СвойствоЭлемента + ";");
					КонецЕсли;	
					
				ИначеЕсли ТипЗначенияСвойства = Тип("Строка") Тогда
					
					Если Врег(Строка(Элемент[Свойство])) <>  Врег(СтрТЗ.ЗначениеПоУмолчанию) Тогда
						СтрокаЭлемента=СтрЗаменить(СтрЗаменить(СвойствоЭлемента,"""",""""""),Символы.ПС,Символы.ПС+Таб+"|");
						мТекст.ДобавитьСтроку(ТекстДоРавно + """"+СтрокаЭлемента +""";");
					КонецЕсли;
					
				ИначеЕсли ТипЗначенияСвойства = Тип("ОписаниеТипов") Тогда
					
					НетДанных = Истина;
					Попытка
						Если ЗначениеЗаполнено(Элемент.Данные) Тогда
							НетДанных = Ложь;
						КонецЕсли; 
					Исключение
					КонецПопытки; 
					Если ТипЗнч(Элемент)=Тип("ПолеВвода") И НетДанных Тогда
						КвСвойства = "";
						Если СокрЛП(Элемент[Свойство]) = "Число" Тогда
							КвСвойства =  "Новый КвалификаторыЧисла("+Элемент[Свойство].КвалификаторыЧисла.Разрядность+","+Элемент[Свойство].КвалификаторыЧисла.РазрядностьДробнойЧасти+")"
						КонецЕсли; 
					КонецЕсли; 
					
				ИначеЕсли ТипЗначенияСвойства=Тип("ОтображениеКнопкиКоманднойПанели")  тогда
					
					Если Врег(Строка(Элемент[Свойство])) <>  Врег(СтрТЗ.ЗначениеПоУмолчанию)  Тогда
						мТекст.ДобавитьСтроку(ТекстДоРавно + "ОтображениеКнопкиКоманднойПанели."+СтрЗаменить(Элемент[Свойство],"Надпись и картинка","НадписьКартинка") +";");
					КонецЕсли;
					
				Иначе 
					
					Если Свойство = "ВертикальноеПоложение" Тогда
						
						Если ТипЗнч(Элемент)=Тип("ПолеВвода") Тогда
							
							Если СвойствоЭлемента<>ВертикальноеПоложение.Верх Тогда
								ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(Элемент)=Тип("Надпись") Тогда
							
							Если СвойствоЭлемента<>ВертикальноеПоложение.Центр Тогда
								ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
							КонецЕсли;
							
						Иначе
							
							ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
							
						КонецЕсли;
						
					ИначеЕсли Свойство = "ГоризонтальноеПоложение" Тогда
						
						Если СвойствоЭлемента<>ГоризонтальноеПоложение.Лево и СвойствоЭлемента<>ГоризонтальноеПоложение.Авто Тогда
							ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
						КонецЕсли;
						
					ИначеЕсли Свойство = "Рамка"  тогда
						
						Если  СвойствоЭлемента.ТипРамки<>Неопределено  тогда
							Если СвойствоЭлемента.ТипРамки=ТипРамкиЭлементаУправления.БезРамки Тогда
								мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления."+СтрЗаменить(СвойствоЭлемента.ТипРамки," ","")+");");
							Иначе
								мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления."+СтрЗаменить(СвойствоЭлемента.ТипРамки," ","")+","+СвойствоЭлемента.Толщина+");");
							КонецЕсли;
						ИначеЕсли ТипЗнч(Элемент)=Тип("КоманднаяПанель") и Элемент.Верх=ОбрабатываемаяФорма.Высота-Элемент.Высота тогда
							мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху ,"+СвойствоЭлемента.Толщина+");");
						ИначеЕсли  ТипЗнч(Элемент)=Тип("КоманднаяПанель") тогда
							мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание ,"+СвойствоЭлемента.Толщина+");");
						КонецЕсли;
						
					Иначе
						
						Если Строка(СвойствоЭлемента) <>  СтрТЗ.ЗначениеПоУмолчанию Тогда
							ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента)
	
	мТекст.ДобавитьСтроку(ТекстДоРавно+ТипЗначенияСвойства+"."+
	СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(СвойствоЭлемента),"Прижать вверх","Верх")," ",""),"Центрировать","Центр"),"Прижатьвлево","Лево"),"Прижатьвправо","Право"),"Текстслева","ЗаголовокСлева"),"Текстсправа","ЗаголовокСправа"),"Горизонтальная","Горизонтально"),"Вертикальная", "Вертикально"),"Юг-Запад","ЮгЗапад"),"Прижатьвниз","Низ")+";");
	
КонецПроцедуры

Процедура ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Значение, ТекстДоРавно)
	Если СвойствоЭлемента <> Значение Тогда
		мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиКолонкуТабПоля(ТабПоле,Колонка,ИмяЭлемента, Таб,Режим,Бутафория=Истина)
	
	ТекстКолонка = Таб + "Колонка"; 
	
	мТекст.ДобавитьСтроку(Таб + ТекстКолонка+" = ЭлементыФормы." + ИмяЭлемента + ".Колонки.Вставить(" + ТабПоле.Колонки.Индекс(Колонка) + ",""" + Колонка.ТекстШапки + """);");
	Если Колонка.Ширина<>0 тогда
		мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Ширина = " + Формат(Колонка.Ширина,"ЧГ=") + ";");
	Иначе
		мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Ширина = 15;");
	КонецЕсли;
	мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Имя = """ + Колонка.Имя + """;");
	Если Бутафория=Ложь Тогда
		Если СравнениеРеквизитов.Найти(ТабПоле.Данные,"РеквизитВторойФормы")<>Неопределено и (СравнениеРеквизитов.Найти(ТабПоле.Данные,"РеквизитВторойФормы").ТипВторой="Таблица значений" или СравнениеРеквизитов.Найти(ТабПоле.Данные,"РеквизитВторойФормы").ТипВторой="Дерево значений") тогда
			мТекст.ДобавитьСтроку(Таб + Таб + "ЭлементыФормы."+ИмяЭлемента +".Значение.Колонки.Вставить("  + ТабПоле.Колонки.Индекс(Колонка) + ",""" + Колонка.Имя + """"+?(Строка(Колонка.ЭлементУправления.ТипЗначения)="",");",",Новый ОписаниеТипов("""+Строка(Колонка.ЭлементУправления.ТипЗначения)+"""));"));
			мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Данные = """ + Колонка.Данные + """;");
		Иначе
			СоответствиеКолонок=СоответствиеДанныхПолное.Получить(ТабПоле.Имя);
			Если СоответствиеКолонок<>Неопределено и ТипЗнч(СоответствиеКолонок)<>Тип("Строка") Тогда
				мТекст.ДобавитьСтроку(Таб + Таб + "ЭлементыФормы."+ИмяЭлемента +".Значение.Колонки.Добавить(""" + Колонка.Имя + """);");
				ДанныеКолонки=СоответствиеКолонок.Получить(Колонка.Имя);
				Если Лев(ДанныеКолонки,1)="-" Тогда
					СтандартныйРеквизит=ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления(ВидМетаданныхОбъекта)[СтрЗаменить(ДанныеКолонки,"-","v")];
					Если СтандартныйРеквизит<>Неопределено Тогда
						мТекст.ДобавитьСтроку(Таб + "//!!!Свойство колонки ""Данные"" ссылается на стандартный реквизит объекта "+ СтандартныйРеквизит+"!!!!");
						ДанныеКолонкиСРазделителями=СтрЗаменить(СтандартныйРеквизит,".",Символы.ПС);
					Иначе
						мТекст.ДобавитьСтроку(Таб + "//!!!Свойство колонки ""Данные"" ссылается на стандартный реквизит объекта "+ ДанныеКолонки+"!!!!");
						ДанныеКолонкиСРазделителями=ДанныеКолонки;
					КонецЕсли;
				Иначе
					мТекст.ДобавитьСтроку(Таб + Таб + "//!!!возможно, в объекте отсутствует реквизит "+ДанныеКолонки+", на который ссылается свойство колонки ""Данные""!!!!");
					ДанныеКолонкиСРазделителями=СтрЗаменить(ДанныеКолонки,".",Символы.ПС);
				КонецЕсли;
				мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Данные = """+СтрПолучитьСтроку(ДанныеКолонкиСРазделителями,СтрЧислоСтрок(ДанныеКолонкиСРазделителями)) + """;");
			ИначеЕсли СоответствиеКолонок<>Неопределено Тогда
				//мТекст.ДобавитьСтроку(Таб + Таб + "ЭлементыФормы."+ИмяЭлемента +".Значение.Колонки.Добавить(""" + Колонка.Имя + """);");
				мТекст.ДобавитьСтроку(Таб + Таб + "//!!!возможно, в табличной части "+ СоответствиеКолонок + " отсутствует реквизит "+Колонка.Имя+", на который ссылается свойство колонки ""Данные""!!!!");
				мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.Данные = """+ Колонка.Имя + """;");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Попытка
		Если (ТипЗнч(Колонка.ЭлементУправления) = Тип("ПолеВвода")) ИЛИ (ТипЗнч(Колонка.ЭлементУправления) = Тип("Флажок")) ИЛИ (ТипЗнч(Колонка.ЭлементУправления) = Тип("ПолеВыбора")) Тогда
			Если Бутафория=Истина Тогда
				мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.УстановитьЭлементУправления(Тип(""" + "ПолеВвода" + """));");
			Иначе
				мТекст.ДобавитьСтроку(Таб + Таб + "Колонка.УстановитьЭлементУправления(Тип(""" + СтрЗаменить(ТРег(Строка(ТипЗнч(Колонка.ЭлементУправления)))," ","") + """));");
			КонецЕсли;
		КонецЕсли;	
	Исключение
	КонецПопытки;   
	
	ДобавитьСвойства(Колонка,ТекстКолонка,Таб); 
	
	Если Колонка.ЭлементУправления <> Неопределено и Бутафория=Ложь Тогда
		мТекст.ДобавитьСтроку(Таб + Таб + "//.....................................");
		ТекстКолонка = Таб + "Колонка.ЭлементУправления";
		ДобавитьСвойства(Колонка.ЭлементУправления,ТекстКолонка,Таб+"  "); 
	КонецЕсли;
	
	мТекст.ДобавитьСтроку(Таб + Таб + "//-------------------------------------");
	
КонецПроцедуры

Процедура ДобавитьДействие(Элемент,ТекстЭлемент,Бутафория=Истина)
	
	ТипЭлемента = Строка(Элемент);
	СписокСобытийДляЭлементаФормы=СоответствиеТиповЭлементовСпискамОбработчиков.Получить(ТипЭлемента);
	//у типов элементов Диаграмма, Индикатор, КоманднаяПанель, ПолеТекстовогоДокумента, 
	//Разделитель. РамкаГруппы и СводнаяДиаграмма возможные обработчики событий отсутствуют
	Если СписокСобытийДляЭлементаФормы <> Неопределено Тогда 
		Для каждого ЭлСписок Из СписокСобытийДляЭлементаФормы Цикл
			Событие = ЭлСписок.Значение;
			Попытка
				Действие = Строка(Элемент.ПолучитьДействие(Событие));
				Если Действие <> "" и Бутафория=Ложь Тогда
					
					мТекст.ДобавитьСтроку(ТекстЭлемент +".УстановитьДействие("""+Событие+""",Новый Действие("""+Действие+"""));");
				КонецЕсли;
			Исключение
			КонецПопытки; 
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКнопку(Элемент,ТекстЭлемент,ТекстКнопка,Кнопка,Таб,Вложение,Режим,МассивСтандартныхПодменю=Неопределено,УдалитьКнопку=ложь,Бутафория=Истина)
	
	Если Бутафория=Истина или Кнопка.Действие="" Тогда
		мТекст.ДобавитьСтроку(Таб + ТекстКнопка+" = ЭлементыФормы."+ТекстЭлемент+
		".Кнопки.Добавить("""+Кнопка.Имя+
		""",ТипКнопкиКоманднойПанели."+Кнопка.ТипКнопки+
		?(Кнопка.Текст = Неопределено,"",","""+	Кнопка.Текст+"""")+
		?(Кнопка.Действие = "","",",Новый Действие(""ОбработчикНажатияКнопки"")")+");");
	ИначеЕсли Бутафория = Ложь Тогда
		мТекст.ДобавитьСтроку(Таб+ТекстКнопка+" = ЭлементыФормы."+ТекстЭлемент+
		".Кнопки.Добавить("""+Кнопка.Имя+
		""",ТипКнопкиКоманднойПанели."+Кнопка.ТипКнопки+
		?(Кнопка.Текст = Неопределено,"",","""+	Кнопка.Текст+"""")+
		?(Строка(Кнопка.Действие) = "","",",Новый Действие("""+Кнопка.Действие+""")")+");");
	КонецЕсли;
	
	Если Кнопка.Действие<>"" и Кнопка.Действие<>Неопределено тогда
		СтрокаДляАнализа=ЗначениеВСтрокуВнутр(Кнопка.Действие);
		РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
		РегулярноеВыражение.Multiline=истина;
		РегулярноеВыражение.IgnoreCase=истина;
		Если СтрЧислоВхождений(СтрокаДляАнализа,"1,1,fbe38877-b914-4fd5-8540-07dde06ba2e1")<>0 тогда
			СтандартноеДействие=Истина;
			Если Бутафория=Истина Тогда
				РегулярноеВыражение.Pattern="1,1,fbe38877-b914-4fd5-8540-07dde06ba2e1,\n?\{\d+,\d+,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},(\d+)";
				Matches=РегулярноеВыражение.Execute(СтрокаДляАнализа);
				Для каждого Match из Matches цикл
					индексДействия=Match.SubMatches(0);
				КонецЦикла;
				Если ИндексДействия<>Неопределено тогда
					Макет=ПолучитьМакет("МакетСтандартныхДействий");
					ОбластьМакета=Макет.Область("действие_"+ИндексДействия);
					Если СокрЛП(Макет.Область(ОбластьМакета.Верх,6).Текст)<>"" тогда
						мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Картинка = БиблиотекаКартинок."+СокрЛП(Макет.Область(ОбластьМакета.Верх,6).Текст)+";");
						мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Текст = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,3).Текст)+""";");
						мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Подсказка = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,4).Текст)+""";");
						мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Пояснение = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,5).Текст)+""";");
					Иначе  //это не кнопка стандартного действия - это кнопка стандартного подменю
						МассивСтандартныхПодменю=Новый Массив(2);
						МассивСтандартныхПодменю[0]=СокрЛП(Макет.Область(ОбластьМакета.Верх,7).Текст);
						МассивСтандартныхПодменю[1]=СокрЛП(Макет.Область(ОбластьМакета.Верх,8).Текст);
						Если СокрЛП(Макет.Область(ОбластьМакета.Верх,3).Текст)="" тогда
							УдалитьКнопку=Истина;
						Иначе
							мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Текст = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,3).Текст)+""";");
							мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Подсказка = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,4).Текст)+""";");
							мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Пояснение = """+СокрЛП(Макет.Область(ОбластьМакета.Верх,5).Текст)+""";");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли
			Иначе
				мТекст.ДобавитьСтроку(Таб+"Действие = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаДляАнализа,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
				мТекст.ДобавитьСтроку(Таб + ТекстКнопка+" = ЭлементыФормы."+ТекстЭлемент+
				".Кнопки.Добавить("""+Кнопка.Имя+
				""",ТипКнопкиКоманднойПанели."+Кнопка.ТипКнопки+
				?(Кнопка.Текст = Неопределено,"",","""+	Кнопка.Текст+""",")+"Действие);");
				
			КонецЕсли;
		Иначе
			СтандартноеДействие=Ложь;
			РегулярноеВыражение.Pattern="1,1,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n?\{\d+,""[^\s]*"",\n?\{\d+,""[^\s]*"",\n?\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\},\n\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\},\n\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\}";
			Matches=РегулярноеВыражение.Execute(СтрокаДляАнализа);
			Для каждого Match из Matches цикл
				ТекстКнопки=Match.SubMatches(0);
				ПодсказкаКнопки=Match.SubMatches(1);
				ПояснениеКнопки=Match.SubMatches(2);
			КонецЦикла;
			Если ПодсказкаКнопки<>Неопределено тогда
				мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Подсказка = """+ПодсказкаКнопки+""";");
			КонецЕсли;
			Если ПояснениеКнопки<>Неопределено тогда
				мТекст.ДобавитьСтроку(Таб+ТекстКнопка+".Пояснение = """+ПояснениеКнопки+""";");
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	//Добавим свойства
	ДобавитьСвойства(Кнопка,ТекстКнопка,Таб);
	
	Если Кнопка.Кнопки <> Неопределено Тогда
		Если Кнопка.Кнопки.Количество()>0 Тогда
			МассивСтандартныхПодменю=Неопределено;
			УдалитьКнопку=Ложь;
			МассивУдаляемыхКнопок=Новый Массив; //в коллекции кнопок попадаются специальные "динамически создаваемые платформой" кнопки - история отборов и пр - при декомпиляции формы их учитывать не нужно
			МассивДобавляемыхКнопок = Новый Массив; //для отслеживания неуникальных имен в подменю (иногда встречаются в  переборе коллекции кнопок - интерактивно не наблюдается)
			ТекстКнопка0=ТекстКнопка;
			Для Каждого СтрокаПодменю Из Кнопка.Кнопки Цикл
				ТекстПодменю = "Кнопка"+Строка(Вложение);
				ТекстКнопка  = ТекстЭлемент +".Кнопки."+ Кнопка.Имя;
				Если МассивДобавляемыхКнопок.Найти(СтрокаПодменю.Имя)=Неопределено тогда //почему-то в некоторых конфигурациях встречаются неуникальные имена в дочерних кнопках (интерактивно не наблюдается - только в переборе коллекции кнопок)
					ДобавитьКнопку(Кнопка,ТекстКнопка,ТекстПодменю,СтрокаПодменю,Таб+Таб,Вложение+1,Режим,МассивСтандартныхПодменю,УдалитьКнопку,Бутафория);
					МассивДобавляемыхКнопок.Добавить(СтрокаПодменю.Имя);
					Если УдалитьКнопку=истина тогда
						МассивУдаляемыхКнопок.Добавить(Кнопка.Кнопки.Индекс(СтрокаПодменю))
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если МассивСтандартныхПодменю<>Неопределено тогда
				мТекст.ДобавитьСтроку(Таб+ТекстКнопка0+".Текст = """+МассивСтандартныхПодменю[0]+""";");
				Если МассивСтандартныхПодменю[1]<>"" тогда
					мТекст.ДобавитьСтроку(Таб+ТекстКнопка0+".Картинка = БиблиотекаКартинок."+МассивСтандартныхПодменю[1]+";");
				КонецЕсли;
				МассивСтандартныхПодменю=Неопределено;
				Пока МассивУдаляемыхКнопок.ВГраница()>=0 цикл
					мТекст.ДобавитьСтроку(Таб+ТекстКнопка0+".Кнопки.Удалить("+МассивУдаляемыхКнопок[МассивУдаляемыхКнопок.ВГраница()]+");");
					МассивУдаляемыхКнопок.Удалить(МассивУдаляемыхКнопок.ВГраница());
				КонецЦикла;
				
			//Иначе 
			//	мТекст.ДобавитьСтроку(Таб+ТекстКнопка0+".Текст = ""Действия"";");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ ДЛЯ ДЕКОМПИЛЯЦИИ ИЗМЕНЕНИЙ ФОРМЫ 
//==============================================================================================================================================

Функция ДекомпиляторИзмененийФормы()
	
	мТекст = Новый ТекстовыйДокумент;
	Счетчик = 0;
	Таб = "    ";
	НужнаПроцедураУстановкиРазмеров=Ложь;
	НужноМенятьПорядокОбхода = Ложь;
	ТекстПроцедурыИзмененияПорядка = Новый ТекстовыйДокумент;
	МассивЭлементовДляПорядкаОбхода = Новый Массив;
	
	мТекст.ДобавитьСтроку("Процедура МодифицироватьФормуПриОткрытии()");
	мТекст.ДобавитьСтроку("");
	
	Если ЗначениеВСтрокуВнутр(ДеревоСравнения.Строки[0].СвойстваПервойФормы)<>ЗначениеВСтрокуВнутр(ДеревоСравнения.Строки[0].СвойстваВторойФормы) Тогда
		Для н=0 по ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки.Количество()-1 цикл
			ПолеСравнения=ДеревоСравнения.Строки[0].СвойстваВторойФормы.Колонки[ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки[н].Имя];
			Если ПолеСравнения<>Неопределено и ЗначениеВСтрокуВнутр(ДеревоСравнения.Строки[0].СвойстваПервойФормы[0][н])<>ЗначениеВСтрокуВнутр(ДеревоСравнения.Строки[0].СвойстваВторойФормы[0][ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки[н].Имя]) Тогда
				Свойство=ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки[н].Имя;
				ЗначениеСвойства=ДеревоСравнения.Строки[0].СвойстваВторойФормы[0][ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки[н].Имя];
				Если Счетчик = 0 Тогда
					мТекст.ДобавитьСтроку(Таб + "//**************************************************");
					мТекст.ДобавитьСтроку(Таб + "//ИЗМЕНЕНИЯ СВОЙСТВ САМОЙ ФОРМЫ");
					мТекст.ДобавитьСтроку(Таб + "//**************************************************");
				КонецЕсли;
				Счетчик = Счетчик+1;
				Если (Свойство="Ширина" ИЛИ Свойство="Высота") И ДеревоСравнения.Строки[0].СвойстваПервойФормы[0][н]<ДеревоСравнения.Строки[0].СвойстваВторойФормы[0][ДеревоСравнения.Строки[0].СвойстваПервойФормы.Колонки[н].Имя] Тогда
					мТекст.ДобавитьСтроку(Таб + "//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + НРег(Свойство) + " формы увеличилась!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
					мТекст.ДобавитьСтроку(Таб + "//!" + "флажок ""Использовать только видимую область"" для формы должен быть выставлен в значение Ложь!");
				КонецЕсли;
				ПолучитьТолькоНужныеСвойстваФормы(ОбрабатываемаяФорма,Свойство,ЗначениеСвойства,мТекст);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДеревоСравнения.Строки[0].ДействияПервойФормы)=Тип("ТаблицаЗначений") Тогда
		Для каждого СтрокаДействий Из ДеревоСравнения.Строки[0].ДействияПервойФормы Цикл
			СтрокаДействийВторойФормы=ДеревоСравнения.Строки[0].ДействияВторойФормы.Найти(СтрокаДействий.Событие, "Событие");
			Если СтрокаДействий.Действие<>СтрокаДействийВторойФормы.Действие Тогда
				Если Счетчик = 0 Тогда
					мТекст.ДобавитьСтроку(Таб + "//**************************************************");
					мТекст.ДобавитьСтроку(Таб + "//ИЗМЕНЕНИЯ СВОЙСТВ САМОЙ ФОРМЫ");
					мТекст.ДобавитьСтроку(Таб + "//**************************************************");
				КонецЕсли;
				Счетчик = Счетчик+1;
				
				ДобавитьТолькоНужныеДействия(ДеревоСравнения.Строки[0].ТипЭлемента,ДеревоСравнения.Строки[0].Элемент,ДеревоСравнения.Строки[0],СтрокаДействийВторойФормы.Событие, СтрокаДействийВторойФормы.Действие)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Счетчик = 0;
	МассивУдаляемыхЭлементов=ДеревоСравнения.Строки[0].Строки.НайтиСтроки(Новый Структура("ЕстьИзменения",3),Истина);
	Для каждого Стр Из МассивУдаляемыхЭлементов Цикл
		Если Счетчик = 0 Тогда
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
			мТекст.ДобавитьСтроку(Таб + "//УДАЛЕНИЕ ЭЛЕМЕНТОВ ФОРМЫ");
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
		КонецЕсли;
		Счетчик=Счетчик + 1;
		Если НЕ(Стр.ТипЭлемента="Кнопка командной панели" или Стр.ТипЭлемента="Страница панели" или Стр.ТипЭлемента="Колонка табличного поля") Тогда
			мТекст.ДобавитьСтроку(Таб + "УдаляемыйЭлемент = ЭлементыФормы."+Стр.ДанныеПервойФормы+";");
			мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы.Удалить(УдаляемыйЭлемент);");
			ПроверитьРекурсивноУдаление(Стр, МассивУдаляемыхЭлементов);
		ИначеЕсли Стр.ТипЭлемента="Страница панели" Тогда	
			мТекст.ДобавитьСтроку(Таб + "УдаляемаяСтраница = ЭлементыФормы."+Стр.Панель+".Страницы."+Стр.ДанныеПервойФормы+";");
			мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы."+Стр.Панель+".Страницы.Удалить(УдаляемаяСтраница);");
			ПроверитьРекурсивноУдаление(Стр, МассивУдаляемыхЭлементов);
		ИначеЕсли Стр.ТипЭлемента="Кнопка командной панели" Тогда	
			СтрокаРодителя=Стр.Родитель.ДанныеПервойФормы;
			ИмяУдаляемойКнопки = Стр.ДанныеПервойФормы;
			НайтиРекурсивноРодителяКнопки(Стр,ИмяУдаляемойКнопки,СтрокаРодителя);
			мТекст.ДобавитьСтроку(Таб + "УдаляемаяКнопка = ЭлементыФормы." + ИмяУдаляемойКнопки+ ";");
			мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы."+СтрокаРодителя + ".Кнопки.Удалить(УдаляемаяКнопка);");
		Иначе                                              
			мТекст.ДобавитьСтроку(Таб + "УдаляемаяКолонка = ЭлементыФормы." + Стр.Родитель.ДанныеПервойФормы + ".Колонки." + Стр.ДанныеПервойФормы + ";");
			мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы." + Стр.Родитель.ДанныеПервойФормы + ".Колонки.Удалить(УдаляемаяКолонка);");
		КонецЕсли;
	КонецЦикла;
	Счетчик=0;
	МассивСтрокСмещения=ДеревоСравнения.Строки[0].Строки.НайтиСтроки(Новый Структура("ЕстьИзменения",1),Истина);
	Для каждого СтрокаСмещения Из МассивСтрокСмещения Цикл
		Для ъ=0 по СтрокаСмещения.СвойстваПервойФормы.Колонки.Количество()-1 цикл
			ПолеСравнения=СтрокаСмещения.СвойстваВторойФормы.Колонки[СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя];
			Если ПолеСравнения<>Неопределено и ЗначениеВСтрокуВнутр(СтрокаСмещения.СвойстваПервойФормы[0][ъ])<>ЗначениеВСтрокуВнутр(СтрокаСмещения.СвойстваВторойФормы[0][СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя]) тогда
				Свойство=СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя;
				Если Свойство="Лево" или Свойство="Верх" Тогда
					Если Счетчик=0 Тогда
						мТекст.ДобавитьСтроку("    //**************************************************");
						мТекст.ДобавитьСтроку("    //ИЗМЕНЕНИЕ ПОЛОЖЕНИЯ СУЩЕСТВУЮЩИХ ЭЛЕМЕНТОВ");
						мТекст.ДобавитьСтроку("    //**************************************************");
					КонецЕсли;
					Счетчик=Счетчик+1;
					ЗначениеСвойства=СтрокаСмещения.СвойстваВторойФормы[0][СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя];
					мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы." + СтрокаСмещения.ДанныеПервойФормы + "." + Свойство + " = " + ЗначениеСвойства + ";");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Счетчик=0;
	Для каждого СтрокаСмещения Из МассивСтрокСмещения Цикл
		Если СтрокаСмещения.ТипЭлемента = "Колонка табличного поля" Тогда
			Продолжить;
		КонецЕсли;
		Для ъ=0 по СтрокаСмещения.СвойстваПервойФормы.Колонки.Количество()-1 цикл
			ПолеСравнения=СтрокаСмещения.СвойстваВторойФормы.Колонки[СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя];
			Если ПолеСравнения<>Неопределено и ЗначениеВСтрокуВнутр(СтрокаСмещения.СвойстваПервойФормы[0][ъ])<>ЗначениеВСтрокуВнутр(СтрокаСмещения.СвойстваВторойФормы[0][СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя]) тогда
				Свойство=СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя;
				Если Свойство="Ширина" или Свойство="Высота" Тогда
					Если Счетчик=0 Тогда
						мТекст.ДобавитьСтроку("    //**************************************************");
						мТекст.ДобавитьСтроку("    //ИЗМЕНЕНИЕ РАЗМЕРА СУЩЕСТВУЮЩИХ ЭЛЕМЕНТОВ");
						мТекст.ДобавитьСтроку("    //**************************************************");
					КонецЕсли;
					Счетчик=Счетчик+1;
					ЗначениеСвойства=СтрокаСмещения.СвойстваВторойФормы[0][СтрокаСмещения.СвойстваПервойФормы.Колонки[ъ].Имя];
					мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы." + СтрокаСмещения.ДанныеПервойФормы + "." + Свойство + " = " + ЗначениеСвойства + ";");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Счетчик = 0;
	МассивДобавляемыхЭлементов=ДеревоСравнения.Строки[0].Строки.НайтиСтроки(Новый Структура("ЕстьИзменения",2),Истина);
	Для каждого Строка Из МассивДобавляемыхЭлементов Цикл
		Если Счетчик = 0 Тогда
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
			мТекст.ДобавитьСтроку(Таб + "//ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ ФОРМЫ");
			мТекст.ДобавитьСтроку(Таб + "//**************************************************");
		КонецЕсли;
		Счетчик=Счетчик + 1;
		Если НЕ(Строка.ТипЭлемента="Кнопка командной панели" или Строка.ТипЭлемента="Страница панели" или Строка.ТипЭлемента="Колонка табличного поля") Тогда
			ОбработкаПрерыванияПользователя();
			Режим="ТолькоСозданиеЭлементов";
			НужнаПроцедураУстановкиРазмеров=Истина;
			ДобавитьСвойстваЭлемента(Строка.ТипЭлемента,Строка.Элемент,Строка,Режим,Ложь);
			Если Строка.ТипЭлемента="Командная панель" или Строка.ТипЭлемента="Табличное поле" Тогда
				ПроверитьРекурсивноУдаление(Строка, МассивДобавляемыхЭлементов);
			ИначеЕсли Строка.ТипЭлемента = "Переключатель" Тогда	
				НужноМенятьПорядокОбхода=Истина;
				МассивЭлементовДляПорядкаОбхода.Добавить(Строка);
			КонецЕсли;
		ИначеЕсли Строка.ТипЭлемента="Страница панели" Тогда	
			мТекст.ДобавитьСтроку(Таб + "ЭлементыФормы."+Строка.Родитель.ИмяЭлемента+".Страницы.Добавить("""+Строка.ИмяЭлемента+""","""+Строка.Элемент.Заголовок+""");");
		ИначеЕсли Строка.ТипЭлемента="Кнопка командной панели" Тогда
			РодительДобавляемойКнопки=Строка.Родитель.ИмяЭлемента;
			ИмяДобавляемойКнопки=Строка.ИмяЭлемента;
			НайтиРекурсивноРодителяКнопки(Строка,ИмяДобавляемойКнопки,РодительДобавляемойКнопки);
			ДобавитьКнопку(Строка.Родитель.Элемент, РодительДобавляемойКнопки,"Кнопка",Строка.Элемент,"    ",0,Режим,,,Ложь);
			Если Строка.Строки.Количество()>0 Тогда
				ПроверитьРекурсивноУдаление(Строка, МассивДобавляемыхЭлементов);
			КонецЕсли;
		ИначеЕсли Строка.ТипЭлемента="Колонка табличного поля" Тогда
			ВывестиКолонкуТабПоля(Строка.Родитель.Элемент, Строка.Элемент, Строка.Родитель.ИмяЭлемента, "    ",Режим,Ложь);
		КонецЕсли;
	КонецЦикла;
	Если НужноМенятьПорядокОбхода=Истина Тогда
		мТекст.ДобавитьСтроку("    //**************************************************");
		мТекст.ДобавитьСтроку("    ИзменитьПорядокОбхода();");
		ДобавитьПроцедуруПорядкаОбхода(ТекстПроцедурыИзмененияПорядка,МассивЭлементовДляПорядкаОбхода);
	КонецЕсли;
	мТекст.ДобавитьСтроку("    //**************************************************");
	Для каждого СтрДерева Из МассивДобавляемыхЭлементов Цикл
		Если НЕ(СтрДерева.ТипЭлемента="Кнопка командной панели" или СтрДерева.ТипЭлемента="Страница панели" или СтрДерева.ТипЭлемента="Колонка табличного поля") Тогда
			ОбработкаПрерыванияПользователя();
			Режим="МодификацияСуществующихЭлементов";
			ДобавитьСвойстваЭлемента(СтрДерева.ТипЭлемента,СтрДерева.Элемент,СтрДерева,Режим,Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Счетчик = 0;
	МассивСтрок=ДеревоСравнения.Строки[0].Строки.НайтиСтроки(Новый Структура("ЕстьИзменения",1),Истина);
	Для каждого пр Из МассивСтрок Цикл
		Если ТипЗнч(пр.СвойстваПервойФормы)=Тип("ТаблицаЗначений") Тогда
			СчетчикДляЭлемента = 0;
			Для н=0 по пр.СвойстваПервойФормы.Колонки.Количество()-1 цикл
				ПолеСравнения=пр.СвойстваВторойФормы.Колонки[пр.СвойстваПервойФормы.Колонки[н].Имя];
				Если ПолеСравнения<>Неопределено и ЗначениеВСтрокуВнутр(пр.СвойстваПервойФормы[0][н])<>ЗначениеВСтрокуВнутр(пр.СвойстваВторойФормы[0][пр.СвойстваПервойФормы.Колонки[н].Имя]) тогда
					Свойство=пр.СвойстваПервойФормы.Колонки[н].Имя;
					ЗначениеСвойства=пр.СвойстваВторойФормы[0][пр.СвойстваПервойФормы.Колонки[н].Имя];
					Если НЕ(пр.ТипЭлемента="Кнопка командной панели" или пр.ТипЭлемента="Страница панели" или пр.ТипЭлемента="Колонка табличного поля") Тогда
						Если Свойство<>"ПорядокОтображения" и Свойство<>"ПорядокОбхода" и Свойство<>"Лево" и Свойство <>"Ширина" и Свойство<>"Верх" и Свойство <>"Высота" Тогда
							Если СчетчикДляЭлемента=0 Тогда
								Если пр.ТипЭлемента="Панель" Тогда
									ТекстЭлемент = "ПанельФормы";
								Иначе ТекстЭлемент = Строка(пр.Элемент);	
								КонецЕсли;
								Если Счетчик = 0 Тогда
									мТекст.ДобавитьСтроку(Таб + "//**************************************************");
									мТекст.ДобавитьСтроку(Таб + "//ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ ФОРМЫ");
									мТекст.ДобавитьСтроку(Таб + "//**************************************************");
								КонецЕсли;
								Счетчик=Счетчик + 1;
								мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + " = ЭлементыФормы." + пр.ИмяЭлемента + ";");
								СчетчикДляЭлемента=СчетчикДляЭлемента+1;	
							КонецЕсли;
							ДобавитьТолькоНужныеСвойства(пр.ТипЭлемента,пр.Элемент,пр,Свойство,ЗначениеСвойства);
						КонецЕсли;
					ИначеЕсли пр.ТипЭлемента="Кнопка командной панели" Тогда
						Если СчетчикДляЭлемента=0 Тогда
							ТекстЭлемент = Строка(пр.Элемент);
							РодительИзменяемойКнопки=пр.Родитель.ДанныеПервойФормы;
							ИмяИзменяемойКнопки= пр.ДанныеПервойФормы;
							НайтиРекурсивноРодителяКнопки(пр,ИмяИзменяемойКнопки,РодительИзменяемойКнопки);
							Если Счетчик = 0 Тогда
								мТекст.ДобавитьСтроку(Таб + "//**************************************************");
								мТекст.ДобавитьСтроку(Таб + "//ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ ФОРМЫ");
								мТекст.ДобавитьСтроку(Таб + "//**************************************************");
							КонецЕсли;
							Счетчик=Счетчик + 1;
							мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+" = ЭлементыФормы."+ИмяИзменяемойКнопки+";");
							СчетчикДляЭлемента=СчетчикДляЭлемента+1;	
						КонецЕсли;
						Если Свойство="Действие" Тогда
							Если пр.Элемент.Действие<>Неопределено тогда
								СтрокаДляАнализа=ЗначениеВСтрокуВнутр(пр.Элемент.Действие);
								РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
								РегулярноеВыражение.Multiline=истина;
								РегулярноеВыражение.IgnoreCase=истина;
								Если СтрЧислоВхождений(СтрокаДляАнализа,"1,1,fbe38877-b914-4fd5-8540-07dde06ba2e1")<>0 тогда
									СтандартноеДействие=Истина;
									мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".Действие = ЗначениеИзСтрокиВнутр("+СтрЗаменить(СтрЗаменить(СтрокаДляАнализа,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
								Иначе
									СтандартноеДействие=Ложь;
									РегулярноеВыражение.Pattern="1,1,\w{8}-\w{4}-\w{4}-\w{4}-\w{12},\n?\{\d+,""[^\s]*"",\n?\{\d+,""[^\s]*"",\n?\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\},\n\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\},\n\{\d,\d,\n?\{""[^s]+"",""(.*)""\}\n\}";
									Matches=РегулярноеВыражение.Execute(СтрокаДляАнализа);
									Для каждого Match из Matches цикл
										ТекстКнопки=Match.SubMatches(0);
										ПодсказкаКнопки=Match.SubMatches(1);
										ПояснениеКнопки=Match.SubMatches(2);
									КонецЦикла;
									Если ПодсказкаКнопки<>Неопределено тогда
										мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".Подсказка = """+ПодсказкаКнопки+""";");
									КонецЕсли;
									Если ПояснениеКнопки<>Неопределено тогда
										мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".Пояснение = """+ПояснениеКнопки+""";");
									КонецЕсли;
									мТекст.ДобавитьСтроку(Таб+ТекстЭлемент +".Действие = Новый Действие("""+пр.Элемент.Действие+""");");	
								КонецЕсли;
							КонецЕсли;
						Иначе
							ДобавитьТолькоНужныеСвойства(ТекстЭлемент,пр.Элемент,пр,Свойство,ЗначениеСвойства);
						КонецЕсли;
					ИначеЕсли пр.ТипЭлемента="Колонка табличного поля" Тогда
						Если СчетчикДляЭлемента=0 Тогда
							ТекстЭлемент = Строка(пр.Элемент);	
							Если Счетчик = 0 Тогда
								мТекст.ДобавитьСтроку(Таб + "//**************************************************");
								мТекст.ДобавитьСтроку(Таб + "//ИЗМЕНЕНИЕ ЭЛЕМЕНТОВ ФОРМЫ");
								мТекст.ДобавитьСтроку(Таб + "//**************************************************");
							КонецЕсли;
							Счетчик=Счетчик + 1;
							мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + " = ЭлементыФормы."+пр.Родитель.ИмяЭлемента+".Колонки."+пр.ИмяЭлемента+";");
							СчетчикДляЭлемента=СчетчикДляЭлемента+1;	
						КонецЕсли;
						ДобавитьТолькоНужныеСвойства(пр.ТипЭлемента,пр.Элемент,пр,Свойство,ЗначениеСвойства);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(пр.ПривязкиПервойФормы)=Тип("ТаблицаЗначений") Тогда
			ВремСписок=Новый Соответствие;
			Для н=0 по пр.ПривязкиПервойФормы.Колонки.Количество()-1 цикл
				ПолеСравненияПривязок=пр.ПривязкиВторойФормы.Колонки[пр.ПривязкиПервойФормы.Колонки[н].Имя];
				Если ПолеСравненияПривязок<>Неопределено и ЗначениеВСтрокуВнутр(пр.ПривязкиПервойФормы[0][н])<>ЗначениеВСтрокуВнутр(пр.ПривязкиВторойФормы[0][пр.ПривязкиПервойФормы.Колонки[н].Имя]) тогда
					Если СчетчикДляЭлемента=0 Тогда
						Если пр.ТипЭлемента="Панель" Тогда
							ТекстЭлемент = "ПанельФормы";
						Иначе ТекстЭлемент = Строка(пр.Элемент);	
						КонецЕсли;
						мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + " = ЭлементыФормы." + пр.ИмяЭлемента + ";");
						СчетчикДляЭлемента=СчетчикДляЭлемента+1;	
					КонецЕсли;
					КлючГраницы=СтрЗаменить(СтрЗаменить(пр.ПривязкиПервойФормы.Колонки[н].Имя,"Привязка",""),"Пропорции","");
					ВремСписок.Вставить(КлючГраницы,КлючГраницы);
				КонецЕсли;
			КонецЦикла;
			Для каждого Граница Из ВремСписок Цикл
				УстановитьТолькоНужныеПривязки(Граница.Значение,пр.Элемент,ТекстЭлемент);
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(пр.ДействияПервойФормы)=Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДействий Из пр.ДействияПервойФормы Цикл
				СтрокаДействийВторойФормы=пр.ДействияВторойФормы.Найти(СтрокаДействий.Событие, "Событие");
				Если СтрокаДействий.Действие<>СтрокаДействийВторойФормы.Действие Тогда
					Если СчетчикДляЭлемента=0 Тогда
						Если пр.ТипЭлемента="Панель" Тогда
							ТекстЭлемент = "ПанельФормы";
						Иначе ТекстЭлемент = Строка(пр.Элемент);	
						КонецЕсли;
						мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + " = ЭлементыФормы." + пр.ИмяЭлемента + ";");
						СчетчикДляЭлемента=СчетчикДляЭлемента+1;	
					КонецЕсли;
					ДобавитьТолькоНужныеДействия(пр.ТипЭлемента,пр.Элемент,пр,СтрокаДействийВторойФормы.Событие, СтрокаДействийВторойФормы.Действие)
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мТекст.ДобавитьСтроку("");
	мТекст.ДобавитьСтроку("КонецПроцедуры");
	Если НужнаПроцедураУстановкиРазмеров=Истина Тогда
		мТекст.ДобавитьСтроку("");
		мТекст.ДобавитьСтроку("Процедура УстановитьПоложениеЭлемента(Элемент,Верх,Высота,Лево,Ширина)");
		мТекст.ДобавитьСтроку("");
		мТекст.ДобавитьСтроку(Таб + "Элемент.Верх = Верх;");
		мТекст.ДобавитьСтроку(Таб + "Элемент.Высота = Высота;");
		мТекст.ДобавитьСтроку(Таб + "Элемент.Лево = Лево;");
		мТекст.ДобавитьСтроку(Таб + "Элемент.Ширина = Ширина;");
		мТекст.ДобавитьСтроку("");
		мТекст.ДобавитьСтроку("КонецПроцедуры");
	КонецЕсли;
	
	мТекст.ДобавитьСтроку("");
	
	Если НужноМенятьПорядокОбхода=Истина Тогда
		мТекст.ДобавитьСтроку(ТекстПроцедурыИзмененияПорядка.ПолучитьТекст());
	КонецЕсли;
	
	ВозвращаемыйТекст=мТекст.ПолучитьТекст();
	Возврат ВозвращаемыйТекст;
	
КонецФункции

Процедура УстановитьТолькоНужныеПривязки(Граница,Элемент,ТекстЭлемент)
	Перем ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента; 
	Таб="    ";	
	Элемент.ПолучитьПривязку(Вычислить("ГраницаЭлементаУправления."+Граница),ПервыйЭлемент,ГраницаПервогоЭлемента,ВторойЭлемент,ГраницаВторогоЭлемента);
	Если ПервыйЭлемент <> Неопределено Тогда 
		ПервыйЭлемент = ОбрабатываемаяФорма.ЭлементыФормы.Найти(ПервыйЭлемент.Имя); 
		Если ПервыйЭлемент = Неопределено Тогда 
			ПервыйЭлемент = ОбрабатываемаяФорма.Панель; 
		КонецЕсли; 
	КонецЕсли; 
	Если ВторойЭлемент <> Неопределено Тогда 
		ВторойЭлемент = ОбрабатываемаяФорма.ЭлементыФормы.Найти(ВторойЭлемент.Имя); 
		Если ВторойЭлемент = Неопределено Тогда 
			ВторойЭлемент = ОбрабатываемаяФорма.Панель; 
		КонецЕсли; 
	КонецЕсли;  
	Если ПервыйЭлемент <> Неопределено Тогда
		ИмяПервогоЭлемента = "";
		Если ТипЗнч(ПервыйЭлемент) = Тип("Панель") Тогда
			Если ПервыйЭлемент=ОбрабатываемаяФорма.Панель тогда
				ИмяПервогоЭлемента = "Панель";
			Иначе ИмяПервогоЭлемента="ЭлементыФормы."+ПервыйЭлемент.Имя;
			КонецЕсли;
		Иначе
			ИмяПервогоЭлемента = "ЭлементыФормы."+ПервыйЭлемент.Имя;
		КонецЕсли; 
		Если ВторойЭлемент <> Неопределено Тогда
			ИмяВторогоЭлемента = "";
			Если ТипЗнч(ВторойЭлемент) = Тип("Панель") Тогда
				Если ВторойЭлемент= ОбрабатываемаяФорма.Панель тогда
					ИмяВторогоЭлемента = "Панель";
				Иначе
					ИмяВторогоЭлемента = "ЭлементыФормы."+ВторойЭлемент.Имя;
				КонецЕсли;
			Иначе
				ИмяВторогоЭлемента = "ЭлементыФормы."+ВторойЭлемент.Имя;
			КонецЕсли; 
			мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".УстановитьПривязку(ГраницаЭлементаУправления."+Граница+","+ИмяПервогоЭлемента+",ГраницаЭлементаУправления."+ГраницаПервогоЭлемента+","+ИмяВторогоЭлемента+",ГраницаЭлементаУправления."+ГраницаВторогоЭлемента+");");
		Иначе
			мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".УстановитьПривязку(ГраницаЭлементаУправления."+Граница+","+ИмяПервогоЭлемента+",ГраницаЭлементаУправления."+ГраницаПервогоЭлемента+");");
		КонецЕсли;
	Иначе
		мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+".УстановитьПривязку(ГраницаЭлементаУправления."+Граница+");");
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРекурсивноУдаление(Стр, МассивУдаляемыхЭлементов)
	Для каждого др Из Стр.Строки Цикл
		Если МассивУдаляемыхЭлементов.Найти(др)<>Неопределено Тогда
			ПроверитьРекурсивноУдаление(др, МассивУдаляемыхЭлементов);
			МассивУдаляемыхЭлементов.Удалить(МассивУдаляемыхЭлементов.Найти(др));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НайтиРекурсивноРодителяКнопки(Стр, СтрокаВызова,СтрокаРодителя)
	СтрокаВызова=Стр.Родитель.ИмяЭлемента + ".Кнопки."+СтрокаВызова;
	Если Стр.Родитель.ТипЭлемента<>"Командная панель" Тогда
		СтрокаРодителя=Стр.Родитель.Родитель.ИмяЭлемента + ".Кнопки."+Стр.Родитель.ИмяЭлемента;
		НайтиРекурсивноРодителяКнопки(Стр.Родитель,СтрокаВызова,СтрокаРодителя);
	КонецЕсли;	
КонецПроцедуры

Процедура ДобавитьТолькоНужныеДействия(ЭлементФормыСтр,Элемент,ЭлементТаблицы,Событие, Действие)
	Таб = "    ";
	Если ЭлементФормыСтр="Панель" Тогда
		ТекстЭлемент = "ПанельФормы";
	Иначе ТекстЭлемент = Строка(Элемент);	
	КонецЕсли;
	Если ТипЗнч(Элемент)=Тип("Форма") Тогда
		мТекст.ДобавитьСтроку(Таб + "УстановитьДействие(""" + Событие +""",Новый Действие("""+Действие+"""));");
	Иначе
		мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + ".УстановитьДействие(""" + Событие +""",Новый Действие("""+Действие+"""));");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьТолькоНужныеСвойства(ЭлементФормыСтр,Элемент,ЭлементТаблицы,Свойство, ЗначениеСвойства)
	Если ЭлементФормыСтр="Панель" Тогда
		ТекстЭлемент = "ПанельФормы";
	Иначе ТекстЭлемент = Строка(Элемент);	
	КонецЕсли;
	Таб = "    ";
	ТипЗначенияЭлемента = ТипЗнч(Элемент); 
	Если Свойство="Ширина" или Свойство="Высота" или Свойство="Верх" или Свойство="Лево" Тогда
		мТекст.ДобавитьСтроку(Таб + ТекстЭлемент + "." + Свойство + " = " +ЗначениеСвойства + ";");
		Возврат;
	КонецЕсли;
	Если Свойство="Данные" 	Тогда
		Если Элемент.Данные<>"" Тогда
			мТекст.ДобавитьСтроку(Таб + "//!!!возможно, в форме отсутствует реквизит "+ЗначениеСвойства+", на который ссылается свойство """+Свойство+"""!!!!");
			мТекст.ДобавитьСтроку(Таб + "//"+ТекстЭлемент+"."+Свойство+" = """+ЗначениеСвойства + """;");
		ИначеЕсли СоответствиеДанныхПолное.Получить(Элемент.Имя)<>Неопределено  Тогда
			Если  СоответствиеДанныхПолное.Получить(Элемент.Имя)<>"-60001" Тогда
				Если  Лев(СоответствиеДанныхПолное.Получить(Элемент.Имя),1)="-" Тогда
					СтандартныйРеквизит=ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления(ВидМетаданныхОбъекта)[СтрЗаменить(СоответствиеДанныхПолное.Получить(Элемент.Имя),"-","v")];
					Если СтандартныйРеквизит<>Неопределено Тогда
						ТекстСРазделителями=СтрЗаменить(СтандартныйРеквизит,".",Символы.ПС);
						мТекст.ДобавитьСтроку(Таб + "//!!!Свойство ""Данные"" ссылается на стандартный реквизит объекта "+ СтандартныйРеквизит + "!!!!");
					Иначе
						мТекст.ДобавитьСтроку(Таб + "//!!!Свойство ""Данные"" ссылается на стандартный реквизит объекта "+ СоответствиеДанныхПолное.Получить(Элемент.Имя)+"!!!!");
						ТекстСРазделителями=СоответствиеДанныхПолное.Получить(Элемент.Имя);
					КонецЕсли;
				Иначе
					мТекст.ДобавитьСтроку(Таб + "//!!!возможно, в объекте отсутствует реквизит "+СоответствиеДанныхПолное.Получить(Элемент.Имя)+", на который ссылается свойство ""Данные""!!!!");
					ТекстСРазделителями=СтрЗаменить(СоответствиеДанныхПолное.Получить(Элемент.Имя),".",Символы.ПС);
				КонецЕсли;
				мТекст.ДобавитьСтроку(Таб + ""+ТекстЭлемент+".Данные = """+СтрПолучитьСтроку(ТекстСРазделителями,СтрЧислоСтрок(ТекстСРазделителями)) + """;");
			КонецЕсли;
		КонецЕсли;
		Возврат;	
	КонецЕсли;
	Попытка
		
		ТекстДоРавно = Таб + ТекстЭлемент + "." + Свойство + " = ";
		ТипЗначенияСвойства = ТипЗнч(Элемент[Свойство]);
		СвойствоЭлемента = Элемент[Свойство];
		
		Если ТипЗначенияЭлемента <> Тип("КолонкаТабличногоПоля") и ТипЗначенияЭлемента <> Тип("КнопкаКоманднойПанели")  Тогда
			ТипЗначенияСтрокой = Строка(Элемент.ТипЗначения);	
		Иначе
			ТипЗначенияСтрокой = "";
		КонецЕсли;
		
		Если Свойство = "ИсточникДействий" Тогда 
			
			Попытка
				Если Элемент<>СвойствоЭлемента тогда
					мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = ЭлементыФормы."+СвойствоЭлемента.Имя +";");
				КонецЕсли;
			Исключение 
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = ЭтаФорма;");
			КонецПопытки;	
		ИначеЕсли ТипЗнч(СвойствоЭлемента)=Тип("Шрифт")  Тогда
			Если СвойствоЭлемента.Вид=ВидШрифта.WindowsШрифт Тогда
				Если СтрЧислоВхождений(Строка(СвойствоЭлемента),"Шрифт диалогов и меню") Тогда
					мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ШрифтДиалоговИМеню;");
				ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"ANSI моноширинный шрифт") Тогда	
					мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ANSIШрифтМоноширинный;");
				ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"ANSI пропорциональный шрифт") Тогда	
					мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.ANSIШрифтПропорциональный;");
				ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"OEM моноширинный шрифт") Тогда	
					мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.OEMШрифтМоноширинный;");
				ИначеЕсли СтрЧислоВхождений(Строка(СвойствоЭлемента),"Системный шрифт") Тогда	
					мТекст.ДобавитьСтроку(Таб +"ШрифтОсновы = WindowsШрифты.СистемныйШрифт;");
				КонецЕсли;
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = Новый Шрифт(ШрифтОсновы,,"+СвойствоЭлемента.Размер+","+?(СвойствоЭлемента.Жирный=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Наклонный=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Подчеркивание=Истина,"истина","ложь")+","+?(СвойствоЭлемента.Зачеркивание=Истина,"истина","ложь")+");");
			ИначеЕсли СвойствоЭлемента.Вид=ВидШрифта.Абсолютный Тогда	
				СтрокаШрифта=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаШрифта,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
			КонецЕсли;
		ИначеЕсли ТипЗнч(СвойствоЭлемента)=Тип("Цвет") Тогда
			Если СвойствоЭлемента.Вид=ВидЦвета.Абсолютный Тогда
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+ " = Новый Цвет("+СвойствоЭлемента.Красный+","+СвойствоЭлемента.Зеленый+","+СвойствоЭлемента.Синий+");");
			ИначеЕсли СвойствоЭлемента.Вид=ВидЦвета.WebЦвет или СвойствоЭлемента.Вид=ВидЦвета.WindowsЦвет Тогда	
				СтрокаЦвета=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
				мТекст.ДобавитьСтроку(Таб + ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаЦвета,Символы.ПС,Символы.ПС+Таб+"|"),"""","""""")+""");");
			КонецЕсли;
		ИначеЕсли Свойство="Картинка" или Свойство="КартинкиСтрок" тогда 
			
			Если СвойствоЭлемента.Вид<>ВидКартинки.Пустая тогда
				
				Если СвойствоЭлемента.Вид=ВидКартинки.ИзБиблиотеки тогда
					ВремФайл=ПолучитьИмяВременногоФайла();
					СвойствоЭлемента.ПолучитьДвоичныеДанные().Записать(времФайл);
					ФайлВрем=Новый Файл(ВремФайл);
					СтрокаКартинки=ЗначениеВСтрокуВнутр(СвойствоЭлемента);
					
					Если ФайлВрем.Размер()<>0 тогда  //картинка из стандартной библиотеки
						
						мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = ЗначениеИзСтрокиВнутр("""+СтрЗаменить(СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+"|"),"""","""""")+""");");
						
					Иначе 							 //картинка из библиотеки конфигурации
						
						РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
						РегулярноеВыражение.Multiline=истина;
						РегулярноеВыражение.IgnoreCase=истина;
						РегулярноеВыражение.Pattern="\{0,(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})\},";
						Matches=РегулярноеВыражение.Execute(СтрокаКартинки);
						Для каждого Match из Matches цикл
							ИдентификаторКартинки=Match.SubMatches(0); //находим идентификатор картинки конфигурации
						КонецЦикла;
						Если СоответствиеИдентификаторов.Получить(ИдентификаторКартинки)<>Неопределено тогда
							ПромежуточныйФайл=Новый файл(ФормаСтрокой);
							КаталогПромежуточногоФайла=ПромежуточныйФайл.Путь;
							ФайлКаталога=Новый файл(КаталогПромежуточногоФайла);
							КаталогРаспаковки=ФайлКаталога.Путь;
							ТекстФайлаКартинки=Новый ТекстовыйДокумент;
							ТекстФайлаКартинки.Прочитать(КаталогРаспаковки+"\"+ИдентификаторКартинки+".0");
							СтрокаФайлаКартинки=ТекстФайлаКартинки.ПолучитьТекст();
							РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
							РегулярноеВыражение.Multiline=истина;
							РегулярноеВыражение.IgnoreCase=истина;
							РегулярноеВыражение.Pattern="\{#base64:((.*(\s)*)*)\}";
							Matches1=РегулярноеВыражение.Execute(СтрокаФайлаКартинки);
							Для каждого Match1 Из Matches1 Цикл
								СтрокаКартинки=Match1.SubMatches(0); //получаем двоичные данные картинки конфигурации из файла картинки
							КонецЦикла;
							Если Match1=Неопределено тогда
								РегулярноеВыражение.Pattern="\#data:((.*(\s)*)*)\}\n\}\n\}";
								Matches1=РегулярноеВыражение.Execute(СтрокаФайлаКартинки);
								Для каждого Match1 Из Matches1 Цикл
									СтрокаКартинки=Match1.SubMatches(0); //получаем двоичные данные картинки конфигурации из файла картинки
								КонецЦикла;
							КонецЕсли;
							мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = Новый Картинка(Base64Значение("""+СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+"|")+"""),истина);");
							
							Base64Значение(СтрокаКартинки).Записать(КаталогВременныхФайлов()+"image009");
						КонецЕсли;
						
					КонецЕсли;
					
					УдалитьФайлы(ВремФайл);
					
				Иначе  	//абсолютная картинка
					
					СтрокаКартинки=Base64Строка(СвойствоЭлемента.ПолучитьДвоичныеДанные());
					мТекст.ДобавитьСтроку(Таб+ТекстЭлемент+"."+Свойство+" = Новый Картинка(Base64Значение("""+СтрЗаменить(СтрокаКартинки,Символы.ПС,Символы.ПС+"|")+"""), истина);");
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Строка(СвойствоЭлемента)<>"НеизвестныйОбъект" и Элемент[Свойство]<>Неопределено тогда
			
			Если ТипЗначенияСвойства = Тип("Булево") Тогда
				
				Если Свойство = "КнопкаОчистки" Тогда
					
					Если ТипЗначенияСтрокой="Дата" или ТипЗначенияСтрокой="Строка" Тогда
						ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Ложь, ТекстДоРавно);
					Иначе
						мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
					КонецЕсли;
					
				ИначеЕсли Свойство = "КнопкаВыбора" Тогда
					
					мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
					
				ИначеЕсли Свойство = "АвтоПереносСтрок" Тогда
					
					Если ТипЗначенияСтрокой="Дата" Тогда
						ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Ложь, ТекстДоРавно);
					ИначеЕсли ТипЗначенияСтрокой="Строка" Тогда
						ВывестиЕслиНеРавноЗначению(СвойствоЭлемента,Истина, ТекстДоРавно);
					Иначе
						мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
					КонецЕсли;
					
				Иначе
					
					Попытка
						мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
					Исключение
						мТекст.ДобавитьСтроку(ТекстДоРавно + ?(СвойствоЭлемента, "Истина", "Ложь") + ";");
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
				
				мТекст.ДобавитьСтроку(ТекстДоРавно + СвойствоЭлемента + ";");
				
			ИначеЕсли ТипЗначенияСвойства = Тип("Строка") Тогда
				
				СтрокаЭлемента=СтрЗаменить(СтрЗаменить(СвойствоЭлемента,"""",""""""),Символы.ПС,Символы.ПС+"|");
				мТекст.ДобавитьСтроку(ТекстДоРавно + """"+СтрокаЭлемента +""";");
				
			ИначеЕсли ТипЗначенияСвойства = Тип("ОписаниеТипов") Тогда
				
				НетДанных = Истина;
				Попытка
					Если ЗначениеЗаполнено(Элемент.Данные) Тогда
						НетДанных = Ложь;
					КонецЕсли; 
				Исключение
				КонецПопытки; 
				Если ТипЗнч(Элемент)=Тип("ПолеВвода") И НетДанных Тогда
					КвСвойства = "";
					Если СокрЛП(Элемент[Свойство]) = "Число" Тогда
						КвСвойства =  "Новый КвалификаторыЧисла("+Элемент[Свойство].КвалификаторыЧисла.Разрядность+","+Элемент[Свойство].КвалификаторыЧисла.РазрядностьДробнойЧасти+")"
					КонецЕсли; 
				КонецЕсли; 
				
			ИначеЕсли ТипЗначенияСвойства=Тип("ОтображениеКнопкиКоманднойПанели")  тогда
				
				мТекст.ДобавитьСтроку(ТекстДоРавно + "ОтображениеКнопкиКоманднойПанели."+СтрЗаменить(Элемент[Свойство],"Надпись и картинка","НадписьКартинка") +";");
				
			Иначе 
				
				Если Свойство = "ВертикальноеПоложение" Тогда
					
					Если ТипЗнч(Элемент)=Тип("ПолеВвода") Тогда
						
						ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
						
					ИначеЕсли ТипЗнч(Элемент)=Тип("Надпись") Тогда
						
						ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
						
					Иначе
						
						ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
						
					КонецЕсли;
					
				ИначеЕсли Свойство = "ГоризонтальноеПоложение" Тогда
					
					ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
					
				ИначеЕсли Свойство = "Рамка"  тогда
					
					Если  СвойствоЭлемента.ТипРамки<>Неопределено  тогда
						мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления."+СтрЗаменить(СвойствоЭлемента.ТипРамки," ","")+","+СвойствоЭлемента.Толщина+");");
					ИначеЕсли ТипЗнч(Элемент)=Тип("КоманднаяПанель") и Элемент.Верх=ОбрабатываемаяФорма.Высота-Элемент.Высота тогда
						мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху ,"+СвойствоЭлемента.Толщина+");");
					ИначеЕсли  ТипЗнч(Элемент)=Тип("КоманднаяПанель") тогда
						мТекст.ДобавитьСтроку(ТекстДоРавно+"Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание ,"+СвойствоЭлемента.Толщина+");");
					КонецЕсли;
					
				Иначе
					
					ДобавитьДлиннуюСтроку(ТекстДоРавно,ТипЗначенияСвойства,СвойствоЭлемента);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;	
КонецПроцедуры

Процедура ПолучитьТолькоНужныеСвойстваФормы(МакетФормы,Свойство,ЗначениеСвойства,тТекст)
	Если Свойство="Заголовок" Тогда
		тТекст.ДобавитьСтроку("    ЭтаФорма.Заголовок="""+СтрЗаменить(МакетФормы.Заголовок,"""","""""")+""";");
	ИначеЕсли Свойство="Высота" или Свойство="Ширина" Тогда
		тТекст.ДобавитьСтроку("    ЭтаФорма."+Свойство+"="+Формат(МакетФормы[Свойство],"ЧГ=")+";");	
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьПроцедуруПорядкаОбхода(ТекстПроцедурыИзмененияПорядка,МассивЭлементовДляПорядкаОбхода)
	
	МенятьПорядокОбхода=Ложь;
	ТаблицаПорядкаОбхода = Новый ТаблицаЗначений;
	ТаблицаПорядкаОбхода.Колонки.Добавить("ЭлементФормы");
	ТаблицаПорядкаОбхода.Колонки.Добавить("ПорядокОбхода");
	ТекстПроцедурыИзмененияПорядка.ДобавитьСтроку("Процедура ИзменитьПорядокОбхода()");
	ТекстПроцедурыИзмененияПорядка.ДобавитьСтроку("");
	ПредельноеЗначениеПорядка = 0;
	
	Для каждого СтрокаПереключателя Из МассивЭлементовДляПорядкаОбхода Цикл
		КоллекцияКонкурирующихЭлементовПанели = СтрокаПереключателя.Родитель.Строки;
		ЗначениеПорядка = ОбрабатываемаяФорма.ЭлементыФормы[СтрокаПереключателя.ИмяЭлемента]["ПорядокОбхода"];
		Если ЗначениеПорядка>ПредельноеЗначениеПорядка Тогда
			ПредельноеЗначениеПорядка=ЗначениеПорядка;
		КонецЕсли;
		Для каждого ЭлементКоллекции Из КоллекцияКонкурирующихЭлементовПанели Цикл
			Если ЭлементКоллекции.ИмяЭлемента<>"<Отсутствует>" Тогда
				СтрокаПорядкаОбхода = ТаблицаПорядкаОбхода.Добавить();
				СтрокаПорядкаОбхода.ЭлементФормы=ЭлементКоллекции.ИмяЭлемента;
				СтрокаПорядкаОбхода.ПорядокОбхода = ОбрабатываемаяФорма.ЭлементыФормы[ЭлементКоллекции.ИмяЭлемента]["ПорядокОбхода"];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаПорядкаОбхода.Сортировать("ПорядокОбхода");
	Для каждого СтрокаПоПорядку Из ТаблицаПорядкаОбхода Цикл
		Если СтрокаПоПорядку.ПорядокОбхода>ПредельноеЗначениеПорядка Тогда
			Прервать;
		КонецЕсли;
		Если ПерваяФорма.ЭлементыФормы.Найти(СтрокаПоПорядку.ЭлементФормы)<>Неопределено и ПерваяФорма.ЭлементыФормы[СтрокаПоПорядку.ЭлементФормы]["ПорядокОбхода"]<>ОбрабатываемаяФорма.ЭлементыФормы[СтрокаПоПорядку.ЭлементФормы]["ПорядокОбхода"] Тогда
			МенятьПорядокОбхода = Истина;
		ИначеЕсли ПерваяФорма.ЭлементыФормы.Найти(СтрокаПоПорядку.ЭлементФормы) = Неопределено Тогда
			МенятьПорядокОбхода = Истина;
		КонецЕсли;
		Если МенятьПорядокОбхода=Истина Тогда
			ТекстПроцедурыИзмененияПорядка.ДобавитьСтроку("    ЭлементыФормы."+СтрокаПоПорядку.ЭлементФормы + ".ПорядокОбхода=" + СтрокаПоПорядку.ПорядокОбхода + ";");
		КонецЕсли;
	КонецЦикла;
	ТекстПроцедурыИзмененияПорядка.ДобавитьСтроку("");
	ТекстПроцедурыИзмененияПорядка.ДобавитьСтроку("КонецПроцедуры");
	
КонецПроцедуры

//==============================================================================================================================================
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ ДЕКОМПИЛЯЦИИ ФОРМЫ (мои)
//==============================================================================================================================================

Функция ПолучениеСвойствФормы(МакетФормы)
	тТекст=Новый ТекстовыйДокумент;
	тТекст.ДобавитьСтроку("ЭтаФорма.Заголовок="""+СтрЗаменить(МакетФормы.Заголовок,"""","""""")+""";");
	тТекст.ДобавитьСтроку("ЭтаФорма.Высота="+Формат(МакетФормы.Высота,"ЧГ=")+";");
	тТекст.ДобавитьСтроку("ЭтаФорма.Ширина="+Формат(МакетФормы.Ширина,"ЧГ=")+";");
	Возврат тТекст.ПолучитьТекст();
КонецФункции

Процедура АвтозаполнениеКоманднойПанели(Элемент,ИмяЭлемента,Таб)
	Макет=ПолучитьМакет("Автозаполнение");
	Попытка  
		Если  Элемент.ИсточникДействий=ОбрабатываемаяФорма Тогда
			СтрокаТипаРеквизита=СписокРеквизитов.Найти(Истина,"ОсновнойРеквизит").тип;
			СтрокаИмениРеквизита=СписокРеквизитов.Найти(Истина,"ОсновнойРеквизит").Реквизит;
			ОбластьМакета=Макет.Область(Лев(СтрокаТипаРеквизита,Найти(СтрокаТипаРеквизита,".")-1));
			Для каждого ЭФ Из ОбрабатываемаяФорма.ЭлементыФормы Цикл
				Если ЭФ.Данные=СтрокаИмениРеквизита Тогда
					Если ЭФ.ТолькоПросмотр=Истина Тогда
						НомерКолонки=Макет.Область("ТолькоПросмотр").Лево;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла
			
		Иначе
			СтрокаТипаРеквизита=СтрЗаменить(СписокРеквизитов.найти(Элемент.ИсточникДействий.Имя).Тип," ","");
			ОбластьМакета=Макет.Область(Лев(СтрокаТипаРеквизита,Найти(СтрокаТипаРеквизита,".")-1));
			НомерКолонки=Макет.Область("НеОсновнойРеквизит").Лево;
			
		КонецЕсли;
		
	Исключение;
		ОбластьМакета=Макет.Область("ТабличнаяЧасть");
	КонецПопытки;
	
	
	Если ОбластьМакета<>Неопределено тогда
		МассивКнопок=Новый Массив;
		НомерСтроки=ОбластьМакета.Верх;
		Пока НомерСтроки<=ОбластьМакета.Низ Цикл
			Если НомерКолонки<>Неопределено и СокрЛП(Макет.Область(НомерСтроки,НомерКолонки).Текст)="-" тогда
				НомерСтроки=НомерСтроки+1;
				Продолжить;
			КонецЕсли;
			ТипКнопки=СокрЛП(Макет.Область(НомерСтроки,3).Текст);
			ТекстКнопки=СокрЛП(Макет.Область(НомерСтроки,4).Текст);
			ПодсказкаКнопки=СокрЛП(Макет.Область(НомерСтроки,5).Текст);
			ПояснениеКнопки=СокрЛП(Макет.Область(НомерСтроки,6).Текст);
			Отображение=СокрЛП(Макет.Область(НомерСтроки,7).Текст);
			КартинкаКнопки=СокрЛП(Макет.Область(НомерСтроки,8).Текст);
			мТекст.ДобавитьСтроку(Таб + "//Для командной панели "+ИмяЭлемента+" включено автозаполнение, кнопка вставлена автоматически");
			мТекст.ДобавитьСтроку(Таб + "Кнопка = ЭлементыФормы."+ИмяЭлемента+
			".Кнопки.Добавить(,ТипКнопкиКоманднойПанели."+ТипКнопки+","""+ТекстКнопки+""","+"Новый Действие(""ОбработчикНажатияКнопки""));");
			Если ТипКнопки<>"Разделитель" тогда
				Если КартинкаКнопки<>"" Тогда 
					мТекст.ДобавитьСтроку(Таб+"Кнопка.Картинка = БиблиотекаКартинок."+КартинкаКнопки+";");
				КонецЕсли;
				мТекст.ДобавитьСтроку(Таб+"Кнопка.Подсказка = """+ПодсказкаКнопки+""";");
				мТекст.ДобавитьСтроку(Таб+"Кнопка.Пояснение = """+ПояснениеКнопки+""";");
				Если Отображение<>"Авто" тогда
					мТекст.ДобавитьСтроку(Таб+"Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели."""+Отображение+""";");
				КонецЕсли;
			КонецЕсли;
			НомерСтроки=НомерСтроки+1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//==============================================================================================================================================
// ПАРСИНГ МОДУЛЕЙ И ВЫВОД СТАТИСТИКИ
//==============================================================================================================================================

//найдено на просторах подсистемы "Инструменты разработчика" http://infostart.ru/public/15126/ от tormozit
//по наименованию процедуры находит ее текст
Функция ПолучитьТекстПроцедуры(ОбработчикСобытия,ПолученныйТекстМодуля) 
	
	шБуква = "А-Яа-я_A-Za-z";
	шКомментарий = "//[^\n]*\n"; 
	шРазделитель = "(?:" + шКомментарий + "|\s|^|$)";
	
	шСтрокаПрограммы = """(?:(?:"""")|[^""\n$])*(?:" + шРазделитель + "*\|(?:(?:"""")|[^""\n$])*)*(?:""|$)";
	
	шОписаниеПроцедуры = "(Процедура" + шРазделитель + "*(" + ОбработчикСобытия + ")" + шРазделитель + "*\(([^\)]*)\)(" + шРазделитель + "*Экспорт)?"
	+ "((?:(?:" + шСтрокаПрограммы + "|\." + шРазделитель + "*КонецПроцедуры|\r|\n|.)*?))"
	+ "[^" + шБуква + "\d\.""]КонецПроцедуры)[^" + шБуква + "\d\.""]";
	
	RegExp.Pattern=шОписаниеПроцедуры;
	Результат=RegExp.Execute(ПолученныйТекстМодуля);
	Если Результат.Count = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	Для Каждого НайденныйРезультат из Результат Цикл 
	КонецЦикла;
	
	Возврат НайденныйРезультат.SubMatches(0);
	
КонецФункции

//вывод статистики на форму
Процедура ВыводСтатистики()
	
	Если КлючевыхИзмененийНет() тогда
		ЭлементыФормы.РазличияВПредставлениях.Видимость = Истина;
		ЭлементыФормы.ОтсутствуютВоВсем.Видимость 		= Истина;
		ЭлементыФормы.ВПредставленияхФорм.Видимость 	= Истина;
	Иначе
		ЭлементыФормы.РазличияВМодулях.Видимость 	= Истина;
		ЭлементыФормы.РазличияВРеквизитах.Видимость = Истина;
		ЭлементыФормы.РазличияВЭлементах.Видимость 	= Истина;
		ЭлементыФормы.ВМодуляхФорм.Видимость 		= Истина;
		ЭлементыФормы.ВРеквизитахФорм.Видимость 	= Истина;
		ЭлементыФормы.ПоискРазличий.Видимость 		= Истина;
		Если РасширенныйАнализ = Ложь Тогда
			ЭлементыФормы.РазличияВКомандах.Видимость 	= Истина;
			ЭлементыФормы.РазличияВПараметрах.Видимость = Истина;
			ЭлементыФормы.РазличияВКомандныхИнтерфейсах.Видимость = Истина;
			Если СчетчикИзмененийКомандФорм = 0 Тогда
				ЭлементыФормы.ОтсутствуютВКомандах.Видимость 	= Истина;
			Иначе
				ЭлементыФормы.ВКомандахФорм.Видимость 		= Истина;
				ЭлементыФормы.РазличияВКомандах.Заголовок = Лев(ЭлементыФормы.РазличияВКомандах.Заголовок,СтрДлина(ЭлементыФормы.РазличияВКомандах.Заголовок)-1) + " (" + СчетчикИзмененийКомандФорм + "):";
			КонецЕсли;
			
			Если СчетчикИзмененийПараметровФорм = 0 Тогда
				ЭлементыФормы.ОтсутствуютВПараметрах.Видимость 	= Истина;
			Иначе
				ЭлементыФормы.ВПараметрахФорм.Видимость 	= Истина;
				ЭлементыФормы.РазличияВПараметрах.Заголовок = Лев(ЭлементыФормы.РазличияВПараметрах.Заголовок,СтрДлина(ЭлементыФормы.РазличияВПараметрах.Заголовок)-1) + " (" + СчетчикИзмененийПараметровФорм + "):";
			КонецЕсли;
			
			Если СчетчикИзмененийКомандныхИнтерфейсов = 0 Тогда
				ЭлементыФормы.ОтсутствуютВКомандныхИнтерфейсах.Видимость 	= Истина;
			Иначе
				ЭлементыФормы.ВКомандныхИнтерфейсах.Видимость = Истина;
				ЭлементыФормы.РазличияВКомандныхИнтерфейсах.Заголовок = Лев(ЭлементыФормы.РазличияВКомандныхИнтерфейсах.Заголовок,СтрДлина(ЭлементыФормы.РазличияВКомандныхИнтерфейсах.Заголовок)-1) + " (" + СчетчикИзмененийКомандныхИнтерфейсов + "):";
			КонецЕсли;
		ИначеЕсли СчетчикИзмененийЭлементовФорм<>0 Тогда	
			ЭлементыФормы.ДекомпилироватьИзменения.Видимость=Истина;
		КонецЕсли;
		
		Если СчетчикИзмененийЭлементовФорм = 0 Тогда
			ЭлементыФормы.ПоискРазличий.Видимость 			= Ложь;
			ЭлементыФормы.ПоискРазличий.Доступность 		= Ложь;
			ЭлементыФормы.ОтсутствуютВЭлементах.Видимость 	= Истина;
		Иначе
			ЭлементыФормы.РазличияВЭлементах.Заголовок = Лев(ЭлементыФормы.РазличияВЭлементах.Заголовок,СтрДлина(ЭлементыФормы.РазличияВЭлементах.Заголовок)-1) + " (" + СчетчикИзмененийЭлементовФорм + "):";
		КонецЕсли;
		
		Если СчетчикИзмененийРеквизитовФорм = 0 Тогда
			ЭлементыФормы.ВРеквизитахФорм.Видимость 		= Ложь;
			ЭлементыФормы.ВРеквизитахФорм.Доступность 		= Ложь;
			ЭлементыФормы.ОтсутствуютВРеквизитах.Видимость 	= Истина;
		Иначе
			ЭлементыФормы.РазличияВРеквизитах.Заголовок = Лев(ЭлементыФормы.РазличияВРеквизитах.Заголовок,СтрДлина(ЭлементыФормы.РазличияВРеквизитах.Заголовок)-1) + " (" + СчетчикИзмененийРеквизитовФорм + "):";
		КонецЕсли;
		
		Если МодулиРазличны = Ложь тогда
			ЭлементыФормы.ВМодуляхФорм.Видимость 		= Ложь;
			ЭлементыФормы.ВМодуляхФорм.Доступность 		= Ложь;
			ЭлементыФормы.ОтсутствуютВМодулях.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//для вывода статистики - есть ли изменения
Функция КлючевыхИзмененийНет()
	Если СчетчикИзмененийЭлементовФорм = 0 И СчетчикИзмененийРеквизитовФорм = 0 И МодулиРазличны = Ложь Тогда
		Если РасширенныйАнализ = Ложь И СчетчикИзмененийПараметровФорм = 0 И СчетчикИзмененийКомандФорм = 0 Тогда
			Возврат Истина;	
		ИначеЕсли  РасширенныйАнализ = Ложь Тогда	
			Возврат Ложь;
		Иначе
			Возврат Истина;	
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//==============================================================================================================================================
// ИНИЦИАЛИЗАЦИЯ КОНТЕКСТА ОБЫЧНОЙ ФОРМЫ
//==============================================================================================================================================

Процедура ИнициализацияКонтекстаОбычнойФормы()
	
	//изначально появилось в публикации http://infostart.ru/public/15195/ от Sverkalov	+ макет "СвойстваПолеВвода"	
	Макет=ПолучитьМакет("СвойстваПолеВвода");      
	ОбластьПолеВвода = Макет.Область("Свойства");
	
	Границы = Новый Массив; 
	Границы.Добавить(ГраницаЭлементаУправления.Верх); 
	Границы.Добавить(ГраницаЭлементаУправления.Низ); 
	Границы.Добавить(ГраницаЭлементаУправления.Лево); 
	Границы.Добавить(ГраницаЭлементаУправления.Право); 
	
	ТаблицаСвойствПоляВвода = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаСвойствПоляВвода.Колонки;
	КолонкиТаблицы.Добавить("Свойство");
	КолонкиТаблицы.Добавить("ЗначениеПоУмолчанию");
	КолонкиТаблицы.Добавить("Использовать");
	
	Для Сч = 1 По ОбластьПолеВвода.Низ Цикл
		Если Макет.Область(Сч,3).Текст = "" Тогда
			НовСтр = ТаблицаСвойствПоляВвода.Добавить();
			НовСтр.Свойство = Макет.Область(Сч,1).Текст;
			НовСтр.ЗначениеПоУмолчанию = Макет.Область(Сч,2).Текст;
			НовСтр.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//******************************************************************************************
	
	//Определим все возможные названия событий
	СписокОбработчиковСобытий=СоставитьСписокОбработчиковСобытий();
	СоответствиеТиповЭлементовСпискамОбработчиков=СоставитьСоответствиеТиповЭлементовСпискамОбработчиков(СписокОбработчиковСобытий);

	
	//заполнение из макета соответствия свойств. Ключ - тип элемента формы Значение - таблица возможных свойств, характерных этому типу элемента	
	СоответствиеСвойствЭлементам = Новый Соответствие;
	МакетСвойств = ПолучитьМакет("МакетСвойств");
	Для каждого ОбластьМакета из МакетСвойств.Области цикл
		ТаблицаСвойствЭлементов = Новый ТаблицаЗначений;
		НомерСтроки = ОбластьМакета.Верх;
		Пока НомерСтроки <= ОбластьМакета.Низ Цикл
			ТаблицаСвойствЭлементов.Колонки.Добавить(СокрЛП(МакетСвойств.Область(НомерСтроки,1).Текст));
			НомерСтроки = НомерСтроки+1;
		КонецЦикла;
		СоответствиеСвойствЭлементам.Вставить(ОбластьМакета.Имя,ТаблицаСвойствЭлементов);
	КонецЦикла;
	
КонецПроцедуры

Функция СоставитьСписокОбработчиковСобытий()
	Список=Новый СписокЗначений;
	Список.Добавить("onactivate");                          //0
	Список.Добавить("onafterupdate");                       //1
	Список.Добавить("onbeforedeactivate");                  //2
	Список.Добавить("onbeforeeditfocus");                   //3
	Список.Добавить("onbeforeupdate");                      //4
	Список.Добавить("oncellchange");                        //5
	Список.Добавить("onclick");                             //6
	Список.Добавить("oncontextmenu");                       //7
	Список.Добавить("oncontrolselect");                     //8
	Список.Добавить("ondataavailable");                     //9
	Список.Добавить("ondatasetchanged");                    //10
	Список.Добавить("ondatasetcomplete");                   //11
	Список.Добавить("ondbclick");                           //12
	Список.Добавить("ondeactivate");                        //13
	Список.Добавить("ondragstart");                         //14
	Список.Добавить("onerrorupdate");                       //15
	Список.Добавить("onfocusin");                           //16
	Список.Добавить("onfocusout");                          //17
	Список.Добавить("onhelp");                              //18
	Список.Добавить("onkeydown");                           //19
	Список.Добавить("onkeypress");                          //20
	Список.Добавить("onkeyup");                             //21
	Список.Добавить("onmousedown");                         //22
	Список.Добавить("onmousemove");                         //23
	Список.Добавить("onmouseout");                          //24
	Список.Добавить("onmouseover");                         //25
	Список.Добавить("onmouseup");                           //26
	Список.Добавить("onmousewheel");                        //27
	Список.Добавить("onreadystatechange");                  //28
	Список.Добавить("onrowenter");                          //29
	Список.Добавить("onrowexit");                           //30
	Список.Добавить("onrowsdelete");                        //31
	Список.Добавить("onrowsinserted");                      //32
	Список.Добавить("onselectionchange");                   //33
	Список.Добавить("onselectstart");                       //34
	Список.Добавить("onstop");                              //35
	Список.Добавить("АвтоПодборТекста");                    //36
	Список.Добавить("ВнешнееСобытие");                      //37
	Список.Добавить("Выбор");                               //38
	Список.Добавить("ВыборЗначения");                       //39
	Список.Добавить("ДокументСформирован");                 //40
	Список.Добавить("Нажатие");                             //41
	Список.Добавить("НачалоВыбора");                        //42
	Список.Добавить("НачалоВыбораИзСписка");                //43
	Список.Добавить("НачалоПеретаскивания");                //44
	Список.Добавить("ОбновлениеОтображения");               //45
	Список.Добавить("ОбработкаАктивизацииОбъекта");         //46
	Список.Добавить("ОбработкаВыбора");                     //47
	Список.Добавить("ОбработкаЗаписиНовогоОбъекта");        //48
	Список.Добавить("ОбработкаОповещения");                 //49
	Список.Добавить("ОбработкаПроверкиЗаполнения");         //50
	Список.Добавить("ОбработкаРасшифровки");                //51
	Список.Добавить("ОкончаниеВводаТекста");                //52
	Список.Добавить("ОкончаниеПеретасивания");              //53
	Список.Добавить("ОкончаниеПеретаскивания");             //54
	Список.Добавить("Открытие");                            //55
	Список.Добавить("Очистка");                             //56
	Список.Добавить("ПередЗакрытием");                      //57
	Список.Добавить("ПередНачаломДобавления");              //58
	Список.Добавить("ПередНачаломИзменения");               //59
	Список.Добавить("ПередОкончаниемРедактирования");       //60
	Список.Добавить("ПередОткрытием");                      //61
	Список.Добавить("ПередУдалением");                      //62
	Список.Добавить("Перетаскивание");                      //63
	Список.Добавить("ПослеУдаления");                       //64
	Список.Добавить("ПриАктивизации");                      //65
	Список.Добавить("ПриАктивизацииДаты");                  //66
	Список.Добавить("ПриАктивизацииКолонки");               //67
	Список.Добавить("ПриАктивизацииОбласти");               //68
	Список.Добавить("ПриАктивизацииСтроки");                //69
	Список.Добавить("ПриАктивизацииЯчейки");                //70
	Список.Добавить("ПриВыбореПериода");                    //71
	Список.Добавить("ПриВыводеСтроки");                     //72
	Список.Добавить("ПриЗакрытии");                         //73
	Список.Добавить("ПриИзменении");                        //74
	Список.Добавить("ПриИзмененииСодержимогоОбласти");      //75
	Список.Добавить("ПриИзмененииФлажка");                  //76
	Список.Добавить("ПриНачалеРедактирования");             //77
	Список.Добавить("ПриОкончанииРедактирования");          //78
	Список.Добавить("ПриОкончанииРедактированияИнтервала"); //79
	Список.Добавить("ПриОткрытии");                         //80   
	Список.Добавить("ПриПовторномОткрытии");                //81
	Список.Добавить("ПриПолученииДанных");                  //82
	Список.Добавить("ПриСменеСтраницы");                    //83
	Список.Добавить("ПроверкаПеретаскивания");              //84
	Список.Добавить("Регулирование");                       //85
	Возврат Список;
КонецФункции

Функция СоставитьСоответствиеТиповЭлементовСпискамОбработчиков(СписокОбработчиков)
	
	СоответствиеТиповЭлементов=Новый Соответствие;
	//у типов элементов Диаграмма, Индикатор, КоманднаяПанель, ПолеТекстовогоДокумента, 
	//Разделитель. РамкаГруппы и СводнаяДиаграмма возможные обработчики событий отсутствуют
	//
	//Дендрограмма
	СтруктураНужных=Новый Структура("n38,n51");
	СоответствиеТиповЭлементов.Вставить("Дендрограмма",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных)); //Дендрограмма
	//ДиаграммаГанта
	СтруктураНужных=Новый Структура("n38,n51,n79");
	СоответствиеТиповЭлементов.Вставить("ДиаграммаГанта",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ДиаграммаГанта
	//Кнопка
	СтруктураНужных=Новый Структура("n41");
	СоответствиеТиповЭлементов.Вставить("Кнопка",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных)); //Кнопка
	//Надпись
	СтруктураНужных=Новый Структура("n41");
	СоответствиеТиповЭлементов.Вставить("Надпись",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных)); //Надпись
	//Панель
	СтруктураНужных=Новый Структура("n83");
	СоответствиеТиповЭлементов.Вставить("Панель",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //Панель
	//Переключатель
	СтруктураНужных=Новый Структура("n74");
	СоответствиеТиповЭлементов.Вставить("Переключатель",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //Переключатель
	//ПолеHTMLДокумента
	СтруктураНужных=Новый Структура("n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n40");
	СоответствиеТиповЭлементов.Вставить("ПолеHTMLДокумента",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеHTMLДокумента
	//ПолеВвода
	СтруктураНужных=Новый Структура("n36,n42,n43,n47,n52,n55,n56,n74,n85");
	СоответствиеТиповЭлементов.Вставить("ПолеВвода",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеВвода
	//ПолеВыбора
	СтруктураНужных=Новый Структура("n36,n42,n43,n47,n52,n55,n56,n74,n85");
	СоответствиеТиповЭлементов.Вставить("ПолеВыбора",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеВыбора
	//ПолеГеографическойСхемы
	СтруктураНужных=Новый Структура("n38,n51");
	СоответствиеТиповЭлементов.Вставить("ПолеГеографическойСхемы",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеГеографическойСхемы
	//ПолеГрафическойСхемы
	СтруктураНужных=Новый Структура("n38,n65");
	СоответствиеТиповЭлементов.Вставить("ПолеГрафическойСхемы",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеГрафическойСхемы
	//ПолеКалендаря
	СтруктураНужных=Новый Структура("n38,n44,n53,n63,n66,n71,n74,n84");
	СоответствиеТиповЭлементов.Вставить("ПолеКалендаря",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеКалендаря
	//ПолеКартинки
	СтруктураНужных=Новый Структура("n41,n44,n54,n63,n84");
	СоответствиеТиповЭлементов.Вставить("ПолеКартинки",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеКартинки
	//ПолеСписка
	СтруктураНужных=Новый Структура("n38,n69,n76");
	СоответствиеТиповЭлементов.Вставить("ПолеСписка",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеСписка
	//ПолеТабличногоДокумента
	СтруктураНужных=Новый Структура("n38,n44,n51,n54,n63,n68,n75,n84");
	СоответствиеТиповЭлементов.Вставить("ПолеТабличногоДокумента",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолеТабличногоДокумента
	//ПолосаРегулирования
	СтруктураНужных=Новый Структура("n74");
	СоответствиеТиповЭлементов.Вставить("ПолосаРегулирования",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ПолосаРегулирования
	//ТабличноеПоле
	СтруктураНужных=Новый Структура("n38,n39,n44,n47,n48,n54,n58,n59,n60,n62,n63,n64,n67,n69,n70,n72,n76,n77,n78,n82,n84");
	СоответствиеТиповЭлементов.Вставить("ТабличноеПоле",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //ТабличноеПоле
	//Флажок
	СтруктураНужных=Новый Структура("n74");
	СоответствиеТиповЭлементов.Вставить("Флажок",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  //Флажок
	//Форма
	СтруктураНужных=Новый Структура("n37,n45,n46,n47,n48,n49,n50,n57,n61,n73,n80,n81,n83");
	СоответствиеТиповЭлементов.Вставить("Форма",СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных));  
	
	Возврат СоответствиеТиповЭлементов;
	
КонецФункции

Функция СоставитьСписокДляТипаЭлемента(СписокОбработчиков,СтруктураНужных)
	СписокДляТипаЭлемента=Новый СписокЗначений;
	Для каждого СтрокаЭлемента Из СтруктураНужных Цикл
		СписокДляТипаЭлемента.Добавить(СписокОбработчиков[Число(СтрЗаменить(СтрокаЭлемента.Ключ,"n",""))]);
	КонецЦикла;
	Возврат СписокДляТипаЭлемента;
КонецФункции

//==============================================================================================================================================
// ИНИЦИАЛИЗАЦИЯ КОНТЕКСТА УПРАВЛЯЕМОЙ ФОРМЫ
//==============================================================================================================================================

Процедура СформироватьСписокОбработчиковСобытийУправляемойФормы() 
	
	СписокОбработчиковУправляемойФормы = Новый СписокЗначений;
	СписокОбработчиковУправляемойФормы.Добавить("178a97c4-0ffe-4fcc-93e6-505369939da5","АвтоПодбор");
	СписокОбработчиковУправляемойФормы.Добавить("5426e344-5740-4f23-99c1-99179a200dc5","ВнешнееСобытие");
	СписокОбработчиковУправляемойФормы.Добавить("1282f000-23b6-4887-87f4-9e8e79db3d32","Выбор");
	СписокОбработчиковУправляемойФормы.Добавить("22287505-97d8-4258-a318-209e2493f7eb","Выбор"); //для поля табличного документа
	СписокОбработчиковУправляемойФормы.Добавить("2feb1ee9-b750-4352-bb4c-67ba1c608dc6","Выбор"); //для поля календаря
	СписокОбработчиковУправляемойФормы.Добавить("3c3da18f-fc18-4f77-8c2d-96c25bec40a5","Выбор"); //для поля графической схемы
	СписокОбработчиковУправляемойФормы.Добавить("515cd17b-dd4c-4181-bbbf-8676467acf49","Выбор"); //для поля диаграммы
	СписокОбработчиковУправляемойФормы.Добавить("3aab5acd-9e00-4d33-8242-3cdb677bb0f3","Выбор"); //для поля диаграммы Ганта
	СписокОбработчиковУправляемойФормы.Добавить("cb44c05d-3e51-4233-8c08-ec19386aa5c5","Выбор"); //для поля дендрограммы
	СписокОбработчиковУправляемойФормы.Добавить("0d8cf5b0-55eb-4d1e-960a-22c160210945","ВыборЗначения");
	СписокОбработчиковУправляемойФормы.Добавить("53325f0c-b112-4c44-ab12-5d1ee0b1f07b","ДокументСформирован");
	СписокОбработчиковУправляемойФормы.Добавить("eba5f295-c611-4dd9-84b5-22911ad60c53","Нажатие");
	СписокОбработчиковУправляемойФормы.Добавить("9874537f-454c-40ae-83e9-3b9cefbc6d08","Нажатие"); //для декорации картинки (1)
	СписокОбработчиковУправляемойФормы.Добавить("11707a99-4eb9-4373-bc8c-84891483a034","Нажатие"); //для декорации надписи (0)
	СписокОбработчиковУправляемойФормы.Добавить("996b8c30-7a89-4973-8d56-2c9ce2976695","Нажатие"); //для поля картинки
	СписокОбработчиковУправляемойФормы.Добавить("1960479b-4d89-4eba-8b39-0aa802020558","НачалоВыбора");
	СписокОбработчиковУправляемойФормы.Добавить("b3b65989-73ac-4db3-b6cb-398cb41a062f","НачалоВыбораИзСписка");
	СписокОбработчиковУправляемойФормы.Добавить("6d4d6747-a823-4f61-ab31-a426572f2c6c","НачалоПеретастивания");
	СписокОбработчиковУправляемойФормы.Добавить("b47699e1-b5d8-4c8a-91e9-183dec5820f5","ОбработкаАктивизации");
	СписокОбработчиковУправляемойФормы.Добавить("1d632984-de3c-4b4b-ad9f-d69682a10182","ОбработкаВыбора"); //для формы
	СписокОбработчиковУправляемойФормы.Добавить("f72043b8-2d79-414e-bc4e-3972fe9dbca1","ОбработкаВыбора");  //для поля ввода
	СписокОбработчиковУправляемойФормы.Добавить("8bfdb5eb-62dc-4851-8a2c-e983526356bf","ОбработкаВыбора");  //для таблицы
	СписокОбработчиковУправляемойФормы.Добавить("3b644f4f-055f-4808-bdc6-a50ce895e4d9","ОбработкаЗаписиНового");
	СписокОбработчиковУправляемойФормы.Добавить("ce67decf-16b8-4d61-b347-4e6a063580dc","ОбработкаЗаписиНового"); //для таблицы
	СписокОбработчиковУправляемойФормы.Добавить("3699f6a3-9a2a-4c82-a775-6ff4824a08ca","ОбработкаОповещения");
	СписокОбработчиковУправляемойФормы.Добавить("e73d6384-49d2-4885-a752-a674d6ff7742","ОбработкаПроверкиЗаполненияНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("2988b2a5-c887-4928-94ae-5d0c9c31e999","ОбработкаРасшифровки"); //для поля табличного документа
	СписокОбработчиковУправляемойФормы.Добавить("48a19c61-50cd-4a8e-ab83-c9272913ad6c","ОбработкаРасшифровки"); //для поля географической схемы
	СписокОбработчиковУправляемойФормы.Добавить("650da4af-3233-4ce0-a1ae-23f87a226eee","ОбработкаРасшифровки"); //для поля диаграммы
	СписокОбработчиковУправляемойФормы.Добавить("8724b8d4-140d-4357-8ac9-46e29ba7b168","ОбработкаРасшифровки"); //для поля диаграммы Ганта
	СписокОбработчиковУправляемойФормы.Добавить("546941d7-53c5-41db-ae95-ff4e6a864a79","ОбработкаРасшифровки"); //для поля дендрограммы
	СписокОбработчиковУправляемойФормы.Добавить("c331eb1b-d32b-4533-844c-1276600b64e3","ОкончаниеВводаТекста");
	СписокОбработчиковУправляемойФормы.Добавить("cb286ab3-3a1c-40d2-a232-6e64f624ccec","ОкончаниеПерестаскивания");
	СписокОбработчиковУправляемойФормы.Добавить("ac5a9c5a-5f1d-4fc5-b88c-a187038c16d1","Открытие");
	СписокОбработчиковУправляемойФормы.Добавить("b50dc41b-c15a-4ebe-a17f-d01e51c47de6","Очистка");
	СписокОбработчиковУправляемойФормы.Добавить("52dbb775-1631-4fd5-8c55-1615b5881dac","ПередЗакрытием");
	СписокОбработчиковУправляемойФормы.Добавить("8a5894c9-d2ff-4c1d-b433-89cc352bbfbc","ПередЗаписью");
	СписокОбработчиковУправляемойФормы.Добавить("8f42e083-be92-4102-b1f0-fa58452c1a63","ПередЗаписьюНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("2391e7b8-7235-45d7-ab7e-6ff3dc086396","ПередНачаломДобавления");
	СписокОбработчиковУправляемойФормы.Добавить("ab930362-ff94-4dcb-ad16-188805d23e3c","ПередНачаломИзменения");
	СписокОбработчиковУправляемойФормы.Добавить("4d88756d-bad4-4fde-92e1-c1f1402ac6b2","ПередОкончаниемРедактирования");
	СписокОбработчиковУправляемойФормы.Добавить("7c39b7bc-db0f-4410-9d98-8e5b7896995e","ПередРазворачиванием");
	СписокОбработчиковУправляемойФормы.Добавить("a7a9dc42-29b6-4c5b-8980-6d0b87149bdd","ПередСворачиванием");
	СписокОбработчиковУправляемойФормы.Добавить("2ccfdec5-583d-4eca-8319-e55de492665a","ПередУдалением");
	СписокОбработчиковУправляемойФормы.Добавить("8ad48496-8d0b-4f6c-ae48-99d95227884b","Перетаскивание");
	СписокОбработчиковУправляемойФормы.Добавить("047d4d09-961c-4bdc-8519-eef10674c35b","ПослеЗаписи");
	СписокОбработчиковУправляемойФормы.Добавить("213d1900-dcad-4616-9f20-3f077156a40f","ПослеЗаписиНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("de65638d-a806-4a76-bc10-f62bbc86e0e7","ПослеУдаления");
	СписокОбработчиковУправляемойФормы.Добавить("83c14f85-ab1f-4c77-bd3b-81970b72543b","ПриАктивизации");
	СписокОбработчиковУправляемойФормы.Добавить("3793cac5-9f9a-4b7c-adda-386e5cccf794","ПриАктивизацииДаты");
	СписокОбработчиковУправляемойФормы.Добавить("2042ec93-3108-4190-b767-ec6c10dd9ff4","ПриАктивизацииОбласти");
	СписокОбработчиковУправляемойФормы.Добавить("6e973761-8683-47fa-a609-4e230950294d","ПриАктивизацииПоля");
	СписокОбработчиковУправляемойФормы.Добавить("60edb81d-887b-478e-94ee-7fef2b13393d","ПриАктивизацииСтроки");
	СписокОбработчиковУправляемойФормы.Добавить("f228b12f-d892-4925-b338-695617357b32","ПриАктивизацииЯчейки");
	СписокОбработчиковУправляемойФормы.Добавить("1490ede6-6f33-4c6d-b971-53b2541331ea","ПриВыбореПериода");
	СписокОбработчиковУправляемойФормы.Добавить("e773807c-0c0c-4689-a093-231ddcd6409f","ПриЗагрузкеДанныхИзНастроекНаСервере"); //было раньше
	СписокОбработчиковУправляемойФормы.Добавить("79cea13e-f6fb-4483-905d-713326405771","ПриЗагрузкеДанныхИзНастроекНаСервере"); //стало сейчас
	СписокОбработчиковУправляемойФормы.Добавить("ca21cd18-35b2-4281-b5c8-016ecc8da8ac","ПриЗакрытии");
	СписокОбработчиковУправляемойФормы.Добавить("c1bc0d3e-d35e-4207-a06b-ece68ed25314","ПриЗаписиНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("fe115cc8-9e33-4684-a166-bd5136fe7a9f","ПриИзменении");
	СписокОбработчиковУправляемойФормы.Добавить("411a4578-276c-4f4a-b56a-b3b01181c997","ПриИзмененииСодержимогоОбласти");
	СписокОбработчиковУправляемойФормы.Добавить("da8dfb86-c5d1-4e35-a8a4-01b167a60ad3","ПриНажатии");
	СписокОбработчиковУправляемойФормы.Добавить("b3c10170-c5ff-4cba-b537-679e1c872b45","ПриНачалеРедактирования");
	СписокОбработчиковУправляемойФормы.Добавить("01d80ddd-dce5-4db3-beb5-f63c97cb05b9","ПриОкончанииРедактирования");
	СписокОбработчиковУправляемойФормы.Добавить("fe4544e7-5b1a-441c-8ab9-198137e6d3c7","ПриОкончанииРедактированияИнтервала");
	СписокОбработчиковУправляемойФормы.Добавить("3ccc650e-f631-4cae-8e33-3eaac610b5f9","ПриОткрытии");
	СписокОбработчиковУправляемойФормы.Добавить("6b3175a5-c143-4179-a670-ef231dc0a688","ПриПовторномОткрытии");
	СписокОбработчиковУправляемойФормы.Добавить("526c501f-ed3f-4db4-8731-fd0324707501","ПриСменеСтраницы");
	СписокОбработчиковУправляемойФормы.Добавить("2971b9a9-1724-4f34-aaa4-f3db584c3ca0","ПриСменеТекущегоРодителя");
	СписокОбработчиковУправляемойФормы.Добавить("9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b","ПриСозданииНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("1952a54f-35ad-4928-902f-df212ab38ca3","ПриСохраненииДанныхВНастройкахНаСервере");
	СписокОбработчиковУправляемойФормы.Добавить("390d5e4b-e732-4c88-8748-9e211a416984","ПриЧтенииНаСерсере");
	СписокОбработчиковУправляемойФормы.Добавить("0d644ff6-443b-4390-86fa-7f9105e42711","ПроверкаПеретаскивания");
	СписокОбработчиковУправляемойФормы.Добавить("70636369-514c-4662-977e-1c3976c9756c","Регулирование");
	
КонецПроцедуры

Процедура СоставитьСоответствиеТиповЭлементовСпискамОбработчиковУправляемойФормы()
	
	//Базовый тип поле 77ffcc29-7f2d-4223-b22f-19666e7250ba
	//Поле ввода (1)
	
	//Поле надписи (2)
	
	//Поле флажка (3)
	
	//Поле картинки (4)
	
	//Поле переключателя (5)
	
	//Поле табличного документа (6)
	
	//Поле текстового документа (7)
	
	//Поле календаря (8)
	
	//Поле индикатора (9)
	
	//Поле полосы регулирования (10)
	
	//Поле диаграммы (11)
	
	//Поле диаграммы Ганта (12)
	
	//Поле дендрограммы (13)
	
	//Поле графической схемы (14)
	
	//Поле HTML документа (15)
	
	//Поле географической схемы (16)
	
	//Поле форматированного документа (17)
	
	//Базовый тип Группа cd5394d0-7dda-4b56-8927-93ccbe967a01
	//имеет смысл только для Группа - страницы (3)
	
	//Базовый тип Декорация
	//ДекорацияНадпись
	
	//ДекорацияКартинка
	
	//Базовый тип Список
	//Таблица
	
	
	
КонецПроцедуры

Процедура CформироватьСоответствиеСвойствУправляемойФормы()
	СоответствиеСвойствЭлементам = Новый Соответствие;
	МакетСвойств = ПолучитьМакет("МакетСвойствУправляемойФормы");
	Для каждого ОбластьМакета из МакетСвойств.Области цикл
		ТаблицаСвойствЭлементов = Новый ТаблицаЗначений;
		НомерСтроки = ОбластьМакета.Верх;
		Пока НомерСтроки <= ОбластьМакета.Низ Цикл
			ТаблицаСвойствЭлементов.Колонки.Добавить((СокрЛП(МакетСвойств.Область(НомерСтроки,1).Текст)),,СокрЛП(МакетСвойств.Область(НомерСтроки,2).Текст));
			НомерСтроки = НомерСтроки+1;
		КонецЦикла;
		СоответствиеСвойствЭлементам.Вставить(ОбластьМакета.Имя,ТаблицаСвойствЭлементов);
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьКомандныйИнтерфейс(ДокументDOM, Дерево)
	//определение командного интерфейса
	МассивКомандногоИнтерфейса = Новый Массив;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	XPathКомандногоИнтерфейса =	"/elem[1]/elem[5]/elem/elem[1]";
	РезультатXPathКомандногоИнтерфейса=ДокументDOM.ВычислитьВыражениеXPath(XPathКомандногоИнтерфейса, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1=1 цикл
		УзелКомандыИнтерфейса=РезультатXPathКомандногоИнтерфейса.ПолучитьСледующий();
		Если УзелКомандыИнтерфейса=Неопределено тогда
			Прервать;
		КонецЕсли;
		СтруктураПараметров=Новый Структура("Команда,Тип,Параметры,ПараметрыРасширенные,Группа,Индекс,Автовидимость,Видимость,ВидимостьРасширенная,Артефакт");
		КоличествоУзловВКоманде = УзелКомандыИнтерфейса.ДочерниеУзлы.Количество();
		ОбозначениеКоманды = "";
		КомандаИнтерфейса = Неопределено;
		Для ИндексУзла = 0 По КоличествоУзловВКоманде-1 Цикл
			ОбозначениеКоманды = ОбозначениеКоманды+УзелКомандыИнтерфейса.ДочерниеУзлы[ИндексУзла].ТекстовоеСодержимое+Символы.ПС;
		КонецЦикла;
		Если СтрЧислоСтрок(ОбозначениеКоманды)>1 Тогда
			КомандаИнтерфейса = СоответствиеИдентификаторов.Получить(СтрПолучитьСтроку(ОбозначениеКоманды,2));
			Если КомандаИнтерфейса=Неопределено Тогда
				КомандаИнтерфейса = СоответствиеИдентификаторовКоманд.Получить(СтрПолучитьСтроку(ОбозначениеКоманды,1)+":"+СтрПолучитьСтроку(ОбозначениеКоманды,2));
			КонецЕсли;
			ОбозначениеКоманды=?(КомандаИнтерфейса<>Неопределено,КомандаИнтерфейса, СтрПолучитьСтроку(ОбозначениеКоманды,1)+":"+СтрПолучитьСтроку(ОбозначениеКоманды,2));
		КонецЕсли;
		СтруктураПараметров.Вставить("Команда",СтрЗаменить(ОбозначениеКоманды,Символы.ПС,""));
		СтруктураПараметров.Вставить("Артефакт",КомандаИнтерфейса = Неопределено);
		СтруктураПараметров.Вставить("Тип",?(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[4].ТекстовоеСодержимое="0","Auto","Added"));
		СтруктураПараметров.Вставить("Параметры",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[3].ТекстовоеСодержимое);
		СтруктураПараметров.Вставить("ПараметрыРасширенные",СформироватьXMLСтрокуУзла(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[3]));
		СтруктураПараметров.Вставить("Индекс",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[6].ТекстовоеСодержимое);
		НайденнаяГруппа = СоответствиеИдентификаторов.Получить(Сред(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[5].ТекстовоеСодержимое,2));
		СтруктураПараметров.Вставить("Группа",?(НайденнаяГруппа<>Неопределено,НайденнаяГруппа,УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[5].ТекстовоеСодержимое));
		СтруктураПараметров.Вставить("Автовидимость",Число(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[7].ТекстовоеСодержимое));
		СтруктураПараметров.Вставить("Видимость",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[8].ТекстовоеСодержимое);
		СтруктураПараметров.Вставить("ВидимостьРасширенная",СформироватьXMLСтрокуУзла(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[8]));
		МассивКомандногоИнтерфейса.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Если МассивКомандногоИнтерфейса.Количество()>0 Тогда
		Если  Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
			ОбработатьМассивКомандныхИнтерфейсов(МассивКомандногоИнтерфейса,ПанельНавигации);
		Иначе 
			ОбработатьМассивКомандныхИнтерфейсов(МассивКомандногоИнтерфейса,ПанельНавигацииСравнения);
		КонецЕсли;
	КонецЕсли;

	
	МассивКомандногоИнтерфейса = Новый Массив;
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	XPathКомандногоИнтерфейса =	"/elem[1]/elem[6]/elem/elem[1]";
	РезультатXPathКомандногоИнтерфейса=ДокументDOM.ВычислитьВыражениеXPath(XPathКомандногоИнтерфейса, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
	Пока 1=1 цикл
		УзелКомандыИнтерфейса=РезультатXPathКомандногоИнтерфейса.ПолучитьСледующий();
		Если УзелКомандыИнтерфейса=Неопределено тогда
			Прервать;
		КонецЕсли;
		СтруктураПараметров=Новый Структура("Команда,Тип,Параметры,ПараметрыРасширенные,Группа,Индекс,Автовидимость,Видимость,ВидимостьРасширенная,Артефакт");
		КоличествоУзловВКоманде = УзелКомандыИнтерфейса.ДочерниеУзлы.Количество();
		ОбозначениеКоманды = "";
		КомандаИнтерфейса = Неопределено;
		Для ИндексУзла = 0 По КоличествоУзловВКоманде-1 Цикл
			ОбозначениеКоманды = ОбозначениеКоманды+УзелКомандыИнтерфейса.ДочерниеУзлы[ИндексУзла].ТекстовоеСодержимое+Символы.ПС;
		КонецЦикла;
		Если СтрЧислоСтрок(ОбозначениеКоманды)>1 Тогда
			КомандаИнтерфейса = СоответствиеИдентификаторов.Получить(СтрПолучитьСтроку(ОбозначениеКоманды,2));
			Если КомандаИнтерфейса=Неопределено Тогда
				КомандаИнтерфейса = СоответствиеИдентификаторовКоманд.Получить(СтрПолучитьСтроку(ОбозначениеКоманды,1)+":"+СтрПолучитьСтроку(ОбозначениеКоманды,2));
			КонецЕсли;
			ОбозначениеКоманды=?(КомандаИнтерфейса<>Неопределено,КомандаИнтерфейса, СтрПолучитьСтроку(ОбозначениеКоманды,1)+":"+СтрПолучитьСтроку(ОбозначениеКоманды,2));
		КонецЕсли;
		СтруктураПараметров.Вставить("Команда",СтрЗаменить(ОбозначениеКоманды,Символы.ПС,""));
		СтруктураПараметров.Вставить("Артефакт",КомандаИнтерфейса = Неопределено);
		СтруктураПараметров.Вставить("Тип",?(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[4].ТекстовоеСодержимое="0","Auto","Added"));
		СтруктураПараметров.Вставить("Параметры",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[3].ТекстовоеСодержимое);
		СтруктураПараметров.Вставить("ПараметрыРасширенные",СформироватьXMLСтрокуУзла(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[3]));
		СтруктураПараметров.Вставить("Индекс",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[6].ТекстовоеСодержимое);
		НайденнаяГруппа = СоответствиеИдентификаторов.Получить(Сред(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[5].ТекстовоеСодержимое,2));
		СтруктураПараметров.Вставить("Группа",?(НайденнаяГруппа<>Неопределено,НайденнаяГруппа,УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[5].ТекстовоеСодержимое));
		СтруктураПараметров.Вставить("Автовидимость",Число(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[7].ТекстовоеСодержимое));
		СтруктураПараметров.Вставить("Видимость",УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[8].ТекстовоеСодержимое);
		СтруктураПараметров.Вставить("ВидимостьРасширенная",СформироватьXMLСтрокуУзла(УзелКомандыИнтерфейса.РодительскийУзел.ДочерниеУзлы[8]));
		МассивКомандногоИнтерфейса.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Если МассивКомандногоИнтерфейса.Количество()>0 Тогда
		Если Дерево=ЭлементыФормы.ДеревоЭлементовФормы.Значение тогда
			ОбработатьМассивКомандныхИнтерфейсов(МассивКомандногоИнтерфейса,КоманднаяПанель);
		Иначе 
			ОбработатьМассивКомандныхИнтерфейсов(МассивКомандногоИнтерфейса,КоманднаяПанельСравнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПостроитьСравнениеКомандныхИнтерфейсов(ТП, ТПСравнения,СравнениеТП)
	Для каждого ТекущаяСтрока из ТП.Строки Цикл
		НоваяСтрока=СравнениеТП.Строки.Добавить();
		НоваяСтрока.КомандаПервойФормы = ТекущаяСтрока.Команда;
		НоваяСтрока.НастройкиПервойКоманды 	= СформироватьНастройкиКомандыИнтерфейса(ТекущаяСтрока);
		НоваяСтрока.КартинкаПервойКоманды = ТекущаяСтрока.ИндексКартинки;
		СтрокаСравнения = ТПСравнения.Строки.Найти(НоваяСтрока.КомандаПервойФормы,"Команда");
		Если СтрокаСравнения <> Неопределено Тогда
			НоваяСтрока.КомандаВторойФормы = СтрокаСравнения.Команда;
			НоваяСтрока.НастройкиВторойКоманды 	= СформироватьНастройкиКомандыИнтерфейса(СтрокаСравнения);
			НоваяСтрока.КартинкаВторойКоманды = СтрокаСравнения.ИндексКартинки;
			Если НоваяСтрока.НастройкиПервойКоманды = НоваяСтрока.НастройкиВторойКоманды Тогда
				НоваяСтрока.ЕстьИзменения = 0;
			Иначе 
				НоваяСтрока.ЕстьИзменения = 1;
				Если ТекущаяСтрока.Группа<>"" Тогда
					СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			НоваяСтрока.КомандаВторойФормы 		= "<Отсутствует>";
			НоваяСтрока.КартинкаВторойКоманды 	= 3;
			Если ТекущаяСтрока.Группа<>"" Тогда
				НоваяСтрока.ЕстьИзменения			= 3;
				НоваяСтрока.НастройкиВторойКоманды	= "<Отсутствует>";
				СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
			КонецЕсли;
		КонецЕсли;   
		ПереборДереваКомандИнтерфейса(ТекущаяСтрока, НоваяСтрока, СтрокаСравнения);
	КонецЦикла;
	Для каждого Строка Из ТПСравнения.Строки Цикл
		Если ТП.Строки.Найти(Строка.Команда,"Команда")=Неопределено Тогда
			НоваяСтрока = СравнениеТП.Строки.Добавить();
			НоваяСтрока.КомандаПервойФормы 		= "<Отсутствует>"; 
			НоваяСтрока.КартинкаПервойКоманды 	= 3;
			НоваяСтрока.КомандаВторойФормы 		= Строка.Команда;
			НоваяСтрока.КартинкаВторойКоманды 	= Строка.ИндексКартинки;
			Если Строка.Группа<>"" Тогда
				НоваяСтрока.ЕстьИзменения 			= 2;
				НоваяСтрока.НастройкиПервойКоманды 	= "<Отсутствует>";
				НоваяСтрока.НастройкиВторойКоманды 	= СформироватьНастройкиКомандыИнтерфейса(Строка);
				СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
			КонецЕсли;
			ОбратныйПереборДереваКомандИнтерфейса(Строка,НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПереборДереваКомандИнтерфейса(СтрокаДерева,СтрокаНовогоДерева,СтрокаСравнения)
	Для Каждого Стр Из СтрокаДерева.Строки Цикл
		НоваяСтрокаСравнения = Неопределено;
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.КомандаПервойФормы		= Стр.Команда;
		НоваяСтрока.НастройкиПервойКоманды	= СформироватьНастройкиКомандыИнтерфейса(Стр);
		НоваяСтрока.КартинкаПервойКоманды	= Стр.ИндексКартинки;
		Если  СтрокаСравнения <> Неопределено тогда
			НоваяСтрокаСравнения = СтрокаСравнения.Строки.Найти(НоваяСтрока.КомандаПервойФормы,"Команда");
			Если НоваяСтрокаСравнения<>Неопределено тогда
				НоваяСтрока.КомандаВторойФормы		= НоваяСтрокаСравнения.Команда;
				НоваяСтрока.КартинкаВторойКоманды	= НоваяСтрокаСравнения.ИндексКартинки;
				НоваяСтрока.НастройкиВторойКоманды	= СформироватьНастройкиКомандыИнтерфейса(НоваяСтрокаСравнения);
				Если НоваяСтрока.НастройкиПервойКоманды = НоваяСтрока.НастройкиВторойКоманды Тогда
					НоваяСтрока.ЕстьИзменения = 0;
				Иначе 
					НоваяСтрока.ЕстьИзменения = 1;
					Если Стр.Группа<>"" Тогда
						СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				НоваяСтрока.КомандаВторойФормы			= "<Отсутствует>";
				НоваяСтрока.КартинкаВторойКоманды		= 3;
				Если Стр.Группа<>"" Тогда
					НоваяСтрока.НастройкиВторойКоманды		= "<Отсутствует>";
					НоваяСтрока.ЕстьИзменения				= 3;
					СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока.КомандаВторойФормы			= "<Отсутствует>";
			НоваяСтрока.КартинкаВторойКоманды		= 3;
			Если Стр.Группа<>"" Тогда
				НоваяСтрока.НастройкиВторойКоманды		= "<Отсутствует>";
				НоваяСтрока.ЕстьИзменения				= 3;
				СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаСравнения<>Неопределено  тогда
		Для каждого пр из СтрокаСравнения.Строки цикл
			Если СтрокаДерева.Строки.Найти(пр.Команда,"Команда")=Неопределено тогда
			НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
			НоваяСтрока.КомандаПервойФормы			= "<Отсутствует>"; 
			НоваяСтрока.КомандаВторойФормы			= пр.Команда;
			НоваяСтрока.КартинкаПервойКоманды		= 3;
			НоваяСтрока.КартинкаВторойКоманды		= пр.ИндексКартинки;
			Если Пр.Группа<>"" Тогда
				НоваяСтрока.НастройкиПервойКоманды		= "<Отсутствует>";
				НоваяСтрока.ЕстьИзменения				= 2;
				НоваяСтрока.НастройкиВторойКоманды		= СформироватьНастройкиКомандыИнтерфейса(пр);
				СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбратныйПереборДереваКомандИнтерфейса(СтрокаДерева,СтрокаНовогоДерева)
	Для Каждого стр Из СтрокаДерева.Строки Цикл
		ОбработкаПрерыванияПользователя();
		НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
		НоваяСтрока.КомандаПервойФормы			= "<Отсутствует>"; 				
		НоваяСтрока.КартинкаПервойКоманды		= 3;
		НоваяСтрока.КомандаВторойФормы			= стр.Команда;
		НоваяСтрока.КартинкаВторойКоманды		= стр.ИндексКартинки;
		Если Стр.Группа<>"" Тогда
			НоваяСтрока.ЕстьИзменения				= 2;
			НоваяСтрока.НастройкиПервойКоманды		= "<Отсутствует>";
			НоваяСтрока.НастройкиВторойКоманды		= СформироватьНастройкиКомандыИнтерфейса(Стр);
			СчетчикИзмененийКомандныхИнтерфейсов = СчетчикИзмененийКомандныхИнтерфейсов + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьНастройкиКомандыИнтерфейса(ТекущаяСтрока)
	Если ТекущаяСтрока.Группа = "" Тогда
		Возврат "";
	КонецЕсли;
	НастройкиКомандыИнтерфейса = Новый ТекстовыйДокумент;
	НастройкиКомандыИнтерфейса.ДобавитьСтроку("Тип: "+ТекущаяСтрока.Тип);
	Если ТекущаяСтрока.Параметры<>"0" Тогда
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Параметры: "+ТекущаяСтрока.ПараметрыРасширенные);
	Иначе
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Параметры: без параметров");
	КонецЕсли;
	НастройкиКомандыИнтерфейса.ДобавитьСтроку("Индекс: "+ТекущаяСтрока.Индекс);
	НастройкиКомандыИнтерфейса.ДобавитьСтроку("Автовидимость: "+?(ТекущаяСтрока.Автовидимость=0,"Ложь","Истина"));
	Если ТекущаяСтрока.Видимость = "00""B""10" Тогда
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Видимость: Истина (Одинаковая)");
		
	ИначеЕсли Лев(ТекущаяСтрока.Видимость,6)="00""B""1" Тогда
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Видимость: Истина (Различная)");
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("НастройкиВидимости: "+ТекущаяСтрока.ВидимостьРасширенная);
	ИначеЕсли  ТекущаяСтрока.Видимость = "00""B""00" Тогда
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Видимость: Ложь (Одинаковая)");
	ИначеЕсли Лев(ТекущаяСтрока.Видимость,6)="00""B""0" Тогда
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("Видимость: Ложь (Различная)");
		НастройкиКомандыИнтерфейса.ДобавитьСтроку("НастройкиВидимости: "+ТекущаяСтрока.ВидимостьРасширенная);
	КонецЕсли;
	Возврат НастройкиКомандыИнтерфейса.ПолучитьТекст();
КонецФункции

Процедура ОбработатьМассивКомандныхИнтерфейсов(МассивКомандногоИнтерфейса,СтрокаИнтерфейса)
	СтрокаАртефактов = Неопределено;
	СтрокаГруппыПоУмолчанию = Неопределено;
	Для Строка = 0 По МассивКомандногоИнтерфейса.ВГраница() Цикл
		Если МассивКомандногоИнтерфейса[Строка].Артефакт = Истина Тогда
			Если СтрокаАртефактов = Неопределено Тогда
				СтрокаАртефактов = СтрокаИнтерфейса.Строки.Добавить();
				СтрокаАртефактов.Команда = "Артефакты";
				СтрокаАртефактов.ИндексКартинки = 2;
			КонецЕсли;
			СтрокаГруппы = СтрокаАртефактов;
		ИначеЕсли МассивКомандногоИнтерфейса[Строка].Группа<>"0" Тогда
			СтрокаГруппы = СтрокаИнтерфейса.Строки.Найти(МассивКомандногоИнтерфейса[Строка].Группа,"Команда");
			Если СтрокаГруппы = Неопределено Тогда
				СтрокаГруппы = СтрокаИнтерфейса.Строки.Добавить();
				СтрокаГруппы.Команда = МассивКомандногоИнтерфейса[Строка].Группа;
			КонецЕсли;
		Иначе
			Если СтрокаГруппыПоУмолчанию = Неопределено Тогда
				СтрокаГруппыПоУмолчанию = СтрокаИнтерфейса.Строки.Вставить(0);
				СтрокаГруппыПоУмолчанию.Команда = "Группа по умолчанию";
			КонецЕсли;
			СтрокаГруппы = СтрокаГруппыПоУмолчанию;
		КонецЕсли;
		СтрокаКоманды = СтрокаГруппы.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКоманды,МассивКомандногоИнтерфейса[Строка]);
		СтрокаКоманды.ИндексКартинки = СтрокаГруппы.ИндексКартинки;
	КонецЦикла;
	Если СтрокаАртефактов<>Неопределено Тогда
		СтрокаИнтерфейса.Строки.Сдвинуть(СтрокаАртефактов,СтрокаИнтерфейса.Строки.Количество()-СтрокаИнтерфейса.Строки.Индекс(СтрокаАртефактов)-1);
	КонецЕсли;
КонецПроцедуры

Функция СформироватьXMLСтрокуУзла(УзелДляРазбора)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(УзелДляРазбора,ЗаписьXML);
	СтрокаXML = ЗаписьXML.Закрыть();
	Возврат СтрокаXML;
КонецФункции

Процедура КомандныйИнтерфейсПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Параметры="0" Тогда
		ОформлениеСтроки.Ячейки.Параметры.Текст="";
	КонецЕсли;
	Если ДанныеСтроки.Индекс="" Тогда
		ОформлениеСтроки.Ячейки.Автовидимость1.ОтображатьКартинку = Ложь;
	КонецЕсли;
	Если Лев(ДанныеСтроки.Видимость,6) = "00""B""1" Тогда
		ОформлениеСтроки.Ячейки.Видимость.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Видимость.ИндексКартинки = 1;
		Если ДанныеСтроки.Видимость = "00""B""10" Тогда
			ОформлениеСтроки.Ячейки.Видимость.Текст = "Одинаковая";
		Иначе
			ОформлениеСтроки.Ячейки.Видимость.Текст = "Различная";
		КонецЕсли;
	ИначеЕсли Лев(ДанныеСтроки.Видимость,6) = "00""B""0" Тогда
		ОформлениеСтроки.Ячейки.Видимость.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Видимость.ИндексКартинки = 0;
		Если ДанныеСтроки.Видимость = "00""B""00" Тогда
			ОформлениеСтроки.Ячейки.Видимость.Текст = "Одинаковая";
		Иначе
			ОформлениеСтроки.Ячейки.Видимость.Текст = "Различная";
		КонецЕсли;
	КонецЕсли;
	Если ДанныеСтроки.Параметры = "0" Тогда
		ОформлениеСтроки.Ячейки.Параметры.Текст = "без параметров";
	ИначеЕсли ДанныеСтроки.Параметры <> "" Тогда
		ОформлениеСтроки.Ячейки.Параметры.Текст = "щелкните для просмотра";
	КонецЕсли;
КонецПроцедуры

Процедура КомандныйИнтерфейсВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Колонка.Имя = "Параметры" и ВыбраннаяСтрока.Параметры <> "0" Тогда
		ТекДокумент = Новый ТекстовыйДокумент;
		ТекДокумент.УстановитьТекст(ВыбраннаяСтрока.ПараметрыРасширенные);
		ТекДокумент.Показать();
	ИначеЕсли Колонка.Имя = "Видимость" и ВыбраннаяСтрока.Видимость <> "00""B""10" и ВыбраннаяСтрока.Видимость <> "00""B""00" Тогда
		ТекДокумент = Новый ТекстовыйДокумент;
		ТекДокумент.УстановитьТекст(ВыбраннаяСтрока.ВидимостьРасширенная);
		ТекДокумент.Показать();
	ИначеЕсли Элемент = ЭлементыФормы.СравнениеПанелейНавигации ИЛИ Элемент = ЭлементыФормы.СравнениеКомандныхПанелей Тогда	
		Если ВыбраннаяСтрока.ЕстьИзменения<>0 Тогда
			СравнениеНастроек = ТекстовоеСравнениеВоВременныхФайлах(ВыбраннаяСтрока.НастройкиПервойКоманды,ВыбраннаяСтрока.НастройкиВторойКоманды);
			СравнениеНастроек.ПоказатьРазличия();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СравнениеКомандныхПанелейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		Если ДанныеСтроки.ЕстьИзменения = 1 Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(225,253,253);
		ИначеЕсли ДанныеСтроки.ЕстьИзменения = 2 Тогда
			ОформлениеСтроки.Ячейки[1].ЦветФона = Новый Цвет(192,220,192);
		ИначеЕсли ДанныеСтроки.ЕстьИзменения = 3 Тогда
			ОформлениеСтроки.Ячейки[0].ЦветФона = Новый Цвет(255,228,196);
		КонецЕсли;
КонецПроцедуры

Процедура ВКомандныхИнтерфейсахНажатие(Элемент)
	ЭлементыФормы.Панель1.ТекущаяСтраница=ЭлементыФормы.Панель1.Страницы.КомандныйИнтерфейс;
КонецПроцедуры


//==============================================================================================================================================
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//==============================================================================================================================================

//нужен для парсинга текста модуля - при определении текста обработчиков
RegExp = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Истина;
RegExp.MultiLine = Ложь;
